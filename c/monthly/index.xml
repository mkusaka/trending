<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:33:25Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>foone/BRender-v1.3.2</title>
    <updated>2022-06-03T02:33:25Z</updated>
    <id>tag:github.com,2022-06-03:/foone/BRender-v1.3.2</id>
    <link href="https://github.com/foone/BRender-v1.3.2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Argonaut Blazing Render (BRender) 3D engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Argonaut Blazing Render (BRender)&lt;/h1&gt; &#xA;&lt;p&gt;This is the source code to version 1.3.2 of the BRender engine by Argonaut Software/Argonaut Games, from approximately 1998/11/17.&lt;/p&gt; &#xA;&lt;p&gt;This is intended as a basic release to let others build on, and more info on how to build and use this code will be added later.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/foone/BRender-1997&#34;&gt;the release of a 1997 version of the BRender engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Source of this code&lt;/h2&gt; &#xA;&lt;p&gt;This was given to Foone Turing by a programmer who wishes to remain anonymous, based on a game project that had licensed BRender for use.&lt;/p&gt; &#xA;&lt;h2&gt;Approval to open source this software&lt;/h2&gt; &#xA;&lt;p&gt;Approval to open source this was given in an email from Jez San, former CEO of Argonaut.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Role&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Programming&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Sam Littlewood&lt;/code&gt; &lt;code&gt;Dan Piponi&lt;/code&gt; &lt;code&gt;Simon Everett&lt;/code&gt; &lt;code&gt;Philip Pratt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ports&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Simon Everett&lt;/code&gt; &lt;code&gt;Philip Pratt&lt;/code&gt; &lt;code&gt;Patrick Buckland&lt;/code&gt; &lt;code&gt;Zareh Johannes&lt;/code&gt; &lt;code&gt;Anthony Savva&lt;/code&gt; &lt;code&gt;Stainless Software Ltd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Testing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Philip Pratt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Project Management&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stefano Zammattio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Technical Reference Manual&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Crosbie Fitch&lt;/code&gt; &lt;code&gt;Philip Pratt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial &amp;amp; Installation Guides&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Robbie McQuaid&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Marketing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Paul Ayscough&lt;/code&gt; &lt;code&gt;Mitra Faulkner&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sales&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Edwin Masterson&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Artwork&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Michel Bowes&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Technical Support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Neela Dass&lt;/code&gt; &lt;code&gt;Tony Roberts&lt;/code&gt; &lt;code&gt;John Gay&lt;/code&gt; &lt;code&gt;Jon Wolff&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;With Thanks to&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Pete Warnes&lt;/code&gt; &lt;code&gt;Mike Day&lt;/code&gt; &lt;code&gt;Tim Gummer&lt;/code&gt; &lt;code&gt;Vinay Gupta&lt;/code&gt; &lt;code&gt;Marcia Petterson&lt;/code&gt; &lt;code&gt;Jez San&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(From the 1996 Technical Reference Manual. More names will be added if they are uncovered)&lt;/p&gt; &#xA;&lt;p&gt;The open sourcing of this version was done by Scott Hanselman and Foone Turing, with help from an anonymous contributor.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is released under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 1998 Argonaut Software Limited&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>micropython/micropython</title>
    <updated>2022-06-03T02:33:25Z</updated>
    <id>tag:github.com,2022-06-03:/micropython/micropython</id>
    <link href="https://github.com/micropython/micropython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/micropython/micropython/workflows/unix%20port/badge.svg?sanitize=true&#34; alt=&#34;CI badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/micropython/micropython&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/micropython/micropython/branch/master/graph/badge.svg?token=I92PfD05sD&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The MicroPython project&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/micropython/micropython/master/logo/upython-with-micro.jpg&#34; alt=&#34;MicroPython Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is the MicroPython project, which aims to put an implementation of Python 3.x on microcontrollers and small embedded systems. You can find the official website at &lt;a href=&#34;http://www.micropython.org&#34;&gt;micropython.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;WARNING: this project is in beta stage and is subject to changes of the code-base, including project-wide name changes and API changes.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython implements the entire Python 3.4 syntax (including exceptions, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;yield from&lt;/code&gt;, etc., and additionally &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords from Python 3.5). The following core datatypes are provided: &lt;code&gt;str&lt;/code&gt; (including basic Unicode support), &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;array.array&lt;/code&gt;, &lt;code&gt;collections.namedtuple&lt;/code&gt;, classes and instances. Builtin modules include &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, and &lt;code&gt;struct&lt;/code&gt;, etc. Select ports have support for &lt;code&gt;_thread&lt;/code&gt; module (multithreading). Note that only a subset of Python 3 functionality is implemented for the data types and modules.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython can execute scripts in textual source form or from precompiled bytecode, in both cases either from an on-device filesystem or &#34;frozen&#34; into the MicroPython executable.&lt;/p&gt; &#xA;&lt;p&gt;See the repository &lt;a href=&#34;http://github.com/micropython/pyboard&#34;&gt;http://github.com/micropython/pyboard&lt;/a&gt; for the MicroPython board (PyBoard), the officially supported reference electronic circuit board.&lt;/p&gt; &#xA;&lt;p&gt;Major components in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;py/ -- the core Python implementation, including compiler, runtime, and core library.&lt;/li&gt; &#xA; &lt;li&gt;mpy-cross/ -- the MicroPython cross-compiler which is used to turn scripts into precompiled bytecode.&lt;/li&gt; &#xA; &lt;li&gt;ports/unix/ -- a version of MicroPython that runs on Unix.&lt;/li&gt; &#xA; &lt;li&gt;ports/stm32/ -- a version of MicroPython that runs on the PyBoard and similar STM32 boards (using ST&#39;s Cube HAL drivers).&lt;/li&gt; &#xA; &lt;li&gt;ports/minimal/ -- a minimal MicroPython port. Start with this if you want to port MicroPython to another microcontroller.&lt;/li&gt; &#xA; &lt;li&gt;tests/ -- test framework and test scripts.&lt;/li&gt; &#xA; &lt;li&gt;docs/ -- user documentation in Sphinx reStructuredText format. Rendered HTML documentation is available at &lt;a href=&#34;http://docs.micropython.org&#34;&gt;http://docs.micropython.org&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ports/bare-arm/ -- a bare minimum version of MicroPython for ARM MCUs. Used mostly to control code size.&lt;/li&gt; &#xA; &lt;li&gt;ports/teensy/ -- a version of MicroPython that runs on the Teensy 3.1 (preliminary but functional).&lt;/li&gt; &#xA; &lt;li&gt;ports/pic16bit/ -- a version of MicroPython for 16-bit PIC microcontrollers.&lt;/li&gt; &#xA; &lt;li&gt;ports/cc3200/ -- a version of MicroPython that runs on the CC3200 from TI.&lt;/li&gt; &#xA; &lt;li&gt;ports/esp8266/ -- a version of MicroPython that runs on Espressif&#39;s ESP8266 SoC.&lt;/li&gt; &#xA; &lt;li&gt;ports/esp32/ -- a version of MicroPython that runs on Espressif&#39;s ESP32 SoC.&lt;/li&gt; &#xA; &lt;li&gt;ports/nrf/ -- a version of MicroPython that runs on Nordic&#39;s nRF51 and nRF52 MCUs.&lt;/li&gt; &#xA; &lt;li&gt;extmod/ -- additional (non-core) modules implemented in C.&lt;/li&gt; &#xA; &lt;li&gt;tools/ -- various tools, including the pyboard.py module.&lt;/li&gt; &#xA; &lt;li&gt;examples/ -- a few example Python scripts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The subdirectories above may include READMEs with additional info.&lt;/p&gt; &#xA;&lt;p&gt;&#34;make&#34; is used to build the components, or &#34;gmake&#34; on BSD-based systems. You will also need bash, gcc, and Python 3.3+ available as the command &lt;code&gt;python3&lt;/code&gt; (if your system only has Python 2.7 then invoke make with the additional option &lt;code&gt;PYTHON=python2&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;The MicroPython cross-compiler, mpy-cross&lt;/h2&gt; &#xA;&lt;p&gt;Most ports require the MicroPython cross-compiler to be built first. This program, called mpy-cross, is used to pre-compile Python scripts to .mpy files which can then be included (frozen) into the firmware/executable for a port. To build mpy-cross use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd mpy-cross&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Unix version&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;unix&#34; port requires a standard Unix environment with gcc and GNU make. x86 and x64 architectures are supported (i.e. x86 32- and 64-bit), as well as ARM and MIPS. Making full-featured port to another architecture requires writing some assembly code for the exception handling and garbage collection. Alternatively, fallback implementation based on setjmp/longjmp can be used.&lt;/p&gt; &#xA;&lt;p&gt;To build (see section below for required dependencies):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ports/unix&#xA;$ make submodules&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to give it a try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./micropython&#xA;&amp;gt;&amp;gt;&amp;gt; list(5 * x + y for x in range(10) for y in [4, 2, 1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;CTRL-D&lt;/code&gt; (i.e. EOF) to exit the shell. Learn about command-line options (in particular, how to increase heap size which may be needed for larger applications):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./micropython -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run complete testsuite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unix version comes with a builtin package manager called upip, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./micropython -m upip install micropython-pystone&#xA;$ ./micropython -m pystone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse available modules on &lt;a href=&#34;https://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=micropython&#34;&gt;PyPI&lt;/a&gt;. Standard library modules come from &lt;a href=&#34;https://github.com/micropython/micropython-lib&#34;&gt;micropython-lib&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;External dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Building MicroPython ports may require some dependencies installed.&lt;/p&gt; &#xA;&lt;p&gt;For Unix port, &lt;code&gt;libffi&lt;/code&gt; library and &lt;code&gt;pkg-config&lt;/code&gt; tool are required. On Debian/Ubuntu/Mint derivative Linux distros, install &lt;code&gt;build-essential&lt;/code&gt; (includes toolchain and make), &lt;code&gt;libffi-dev&lt;/code&gt;, and &lt;code&gt;pkg-config&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;p&gt;Other dependencies can be built together with MicroPython. This may be required to enable extra features or capabilities, and in recent versions of MicroPython, these may be enabled by default. To build these additional dependencies, in the port directory you&#39;re interested in (e.g. &lt;code&gt;ports/unix/&lt;/code&gt;) first execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch all the relevant git submodules (sub repositories) that the port needs. Use the same command to get the latest versions of submodules as they are updated from time to time. After that execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make deplibs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build all available dependencies (regardless whether they are used or not). If you intend to build MicroPython with additional options (like cross-compiling), the same set of options should be passed to &lt;code&gt;make deplibs&lt;/code&gt;. To actually enable/disable use of dependencies, edit &lt;code&gt;ports/unix/mpconfigport.mk&lt;/code&gt; file, which has inline descriptions of the options. For example, to build SSL module (required for &lt;code&gt;upip&lt;/code&gt; tool described above, and so enabled by default), &lt;code&gt;MICROPY_PY_USSL&lt;/code&gt; should be set to 1.&lt;/p&gt; &#xA;&lt;p&gt;For some ports, building required dependences is transparent, and happens automatically. But they still need to be fetched with the &lt;code&gt;make submodules&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;The STM32 version&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;stm32&#34; port requires an ARM compiler, arm-none-eabi-gcc, and associated bin-utils. For those using Arch Linux, you need arm-none-eabi-binutils, arm-none-eabi-gcc and arm-none-eabi-newlib packages. Otherwise, try here: &lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm&#34;&gt;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ports/stm32&#xA;$ make submodules&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You then need to get your board into DFU mode. On the pyboard, connect the 3V3 pin to the P1/DFU pin with a wire (on PYBv1.0 they are next to each other on the bottom left of the board, second row from the bottom).&lt;/p&gt; &#xA;&lt;p&gt;Then to flash the code via USB DFU to your device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use the included &lt;code&gt;tools/pydfu.py&lt;/code&gt; script. If flashing the firmware does not work it may be because you don&#39;t have the correct permissions, and need to use &lt;code&gt;sudo make deploy&lt;/code&gt;. See the README.md file in the ports/stm32/ directory for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;MicroPython is an open-source project and welcomes contributions. To be productive, please be sure to follow the &lt;a href=&#34;https://github.com/micropython/micropython/wiki/ContributorGuidelines&#34;&gt;Contributors&#39; Guidelines&lt;/a&gt; and the &lt;a href=&#34;https://github.com/micropython/micropython/raw/master/CODECONVENTIONS.md&#34;&gt;Code Conventions&lt;/a&gt;. Note that MicroPython is licenced under the MIT license, and all contributions should follow this license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>littlefs-project/littlefs</title>
    <updated>2022-06-03T02:33:25Z</updated>
    <id>tag:github.com,2022-06-03:/littlefs-project/littlefs</id>
    <link href="https://github.com/littlefs-project/littlefs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little fail-safe filesystem designed for microcontrollers&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;littlefs&lt;/h2&gt; &#xA;&lt;p&gt;A little fail-safe filesystem designed for microcontrollers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   | | |     .---._____&#xA;  .-----.   |          |&#xA;--|o    |---| littlefs |&#xA;--|     |---|          |&#xA;  &#39;-----&#39;   &#39;----------&#39;&#xA;   | | |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Power-loss resilience&lt;/strong&gt; - littlefs is designed to handle random power failures. All file operations have strong copy-on-write guarantees and if power is lost the filesystem will fall back to the last known good state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dynamic wear leveling&lt;/strong&gt; - littlefs is designed with flash in mind, and provides wear leveling over dynamic blocks. Additionally, littlefs can detect bad blocks and work around them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bounded RAM/ROM&lt;/strong&gt; - littlefs is designed to work with a small amount of memory. RAM usage is strictly bounded, which means RAM consumption does not change as the filesystem grows. The filesystem contains no unbounded recursion and dynamic memory is limited to configurable buffers that can be provided statically.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a simple example that updates a file named &lt;code&gt;boot_count&lt;/code&gt; every time main runs. The program can be interrupted at any time without losing track of how many times it has been booted and without corrupting the filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;lfs.h&#34;&#xA;&#xA;// variables used by the filesystem&#xA;lfs_t lfs;&#xA;lfs_file_t file;&#xA;&#xA;// configuration of the filesystem is provided by this struct&#xA;const struct lfs_config cfg = {&#xA;    // block device operations&#xA;    .read  = user_provided_block_device_read,&#xA;    .prog  = user_provided_block_device_prog,&#xA;    .erase = user_provided_block_device_erase,&#xA;    .sync  = user_provided_block_device_sync,&#xA;&#xA;    // block device configuration&#xA;    .read_size = 16,&#xA;    .prog_size = 16,&#xA;    .block_size = 4096,&#xA;    .block_count = 128,&#xA;    .cache_size = 16,&#xA;    .lookahead_size = 16,&#xA;    .block_cycles = 500,&#xA;};&#xA;&#xA;// entry point&#xA;int main(void) {&#xA;    // mount the filesystem&#xA;    int err = lfs_mount(&amp;amp;lfs, &amp;amp;cfg);&#xA;&#xA;    // reformat if we can&#39;t mount the filesystem&#xA;    // this should only happen on the first boot&#xA;    if (err) {&#xA;        lfs_format(&amp;amp;lfs, &amp;amp;cfg);&#xA;        lfs_mount(&amp;amp;lfs, &amp;amp;cfg);&#xA;    }&#xA;&#xA;    // read current count&#xA;    uint32_t boot_count = 0;&#xA;    lfs_file_open(&amp;amp;lfs, &amp;amp;file, &#34;boot_count&#34;, LFS_O_RDWR | LFS_O_CREAT);&#xA;    lfs_file_read(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));&#xA;&#xA;    // update boot count&#xA;    boot_count += 1;&#xA;    lfs_file_rewind(&amp;amp;lfs, &amp;amp;file);&#xA;    lfs_file_write(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));&#xA;&#xA;    // remember the storage is not updated until the file is closed successfully&#xA;    lfs_file_close(&amp;amp;lfs, &amp;amp;file);&#xA;&#xA;    // release any resources we were using&#xA;    lfs_unmount(&amp;amp;lfs);&#xA;&#xA;    // print the boot count&#xA;    printf(&#34;boot_count: %d\n&#34;, boot_count);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation (or at least as much detail as is currently available) can be found in the comments in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&#34;&gt;lfs.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;littlefs takes in a configuration structure that defines how the filesystem operates. The configuration struct provides the filesystem with the block device operations and dimensions, tweakable parameters that tradeoff memory usage for performance, and optional static buffers if the user wants to avoid dynamic memory.&lt;/p&gt; &#xA;&lt;p&gt;The state of the littlefs is stored in the &lt;code&gt;lfs_t&lt;/code&gt; type which is left up to the user to allocate, allowing multiple filesystems to be in use simultaneously. With the &lt;code&gt;lfs_t&lt;/code&gt; and configuration struct, a user can format a block device or mount the filesystem.&lt;/p&gt; &#xA;&lt;p&gt;Once mounted, the littlefs provides a full set of POSIX-like file and directory functions, with the deviation that the allocation of filesystem structures must be provided by the user.&lt;/p&gt; &#xA;&lt;p&gt;All POSIX operations, such as remove and rename, are atomic, even in event of power-loss. Additionally, file updates are not actually committed to the filesystem until sync or close is called on the file.&lt;/p&gt; &#xA;&lt;h2&gt;Other notes&lt;/h2&gt; &#xA;&lt;p&gt;Littlefs is written in C, and specifically should compile with any compiler that conforms to the &lt;code&gt;C99&lt;/code&gt; standard.&lt;/p&gt; &#xA;&lt;p&gt;All littlefs calls have the potential to return a negative error code. The errors can be either one of those found in the &lt;code&gt;enum lfs_error&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&#34;&gt;lfs.h&lt;/a&gt;, or an error returned by the user&#39;s block device operations.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration struct, the &lt;code&gt;prog&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; function provided by the user may return a &lt;code&gt;LFS_ERR_CORRUPT&lt;/code&gt; error if the implementation already can detect corrupt blocks. However, the wear leveling does not depend on the return code of these functions, instead all data is read back and checked for integrity.&lt;/p&gt; &#xA;&lt;p&gt;If your storage caches writes, make sure that the provided &lt;code&gt;sync&lt;/code&gt; function flushes all the data to memory and ensures that the next read fetches the data from memory, otherwise data integrity can not be guaranteed. If the &lt;code&gt;write&lt;/code&gt; function does not perform caching, and therefore each &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; call hits the memory, the &lt;code&gt;sync&lt;/code&gt; function can simply return 0.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, littlefs is a block based filesystem that uses small logs to store metadata and larger copy-on-write (COW) structures to store file data.&lt;/p&gt; &#xA;&lt;p&gt;In littlefs, these ingredients form a sort of two-layered cake, with the small logs (called metadata pairs) providing fast updates to metadata anywhere on storage, while the COW structures store file data compactly and without any wear amplification cost.&lt;/p&gt; &#xA;&lt;p&gt;Both of these data structures are built out of blocks, which are fed by a common block allocator. By limiting the number of erases allowed on a block per allocation, the allocator provides dynamic wear leveling over the entire filesystem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                    root&#xA;                   .--------.--------.&#xA;                   | A&#39;| B&#39;|         |&#xA;                   |   |   |-&amp;gt;       |&#xA;                   |   |   |         |&#xA;                   &#39;--------&#39;--------&#39;&#xA;                .----&#39;   &#39;--------------.&#xA;       A       v                 B       v&#xA;      .--------.--------.       .--------.--------.&#xA;      | C&#39;| D&#39;|         |       | E&#39;|new|         |&#xA;      |   |   |-&amp;gt;       |       |   | E&#39;|-&amp;gt;       |&#xA;      |   |   |         |       |   |   |         |&#xA;      &#39;--------&#39;--------&#39;       &#39;--------&#39;--------&#39;&#xA;      .-&#39;   &#39;--.                  |   &#39;------------------.&#xA;     v          v              .-&#39;                        v&#xA;.--------.  .--------.        v                       .--------.&#xA;|   C    |  |   D    |   .--------.       write       | new E  |&#xA;|        |  |        |   |   E    |        ==&amp;gt;        |        |&#xA;|        |  |        |   |        |                   |        |&#xA;&#39;--------&#39;  &#39;--------&#39;   |        |                   &#39;--------&#39;&#xA;                         &#39;--------&#39;                   .-&#39;    |&#xA;                         .-&#39;    &#39;-.    .-------------|------&#39;&#xA;                        v          v  v              v&#xA;                   .--------.  .--------.       .--------.&#xA;                   |   F    |  |   G    |       | new F  |&#xA;                   |        |  |        |       |        |&#xA;                   |        |  |        |       |        |&#xA;                   &#39;--------&#39;  &#39;--------&#39;       &#39;--------&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on how littlefs works can be found in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&#34;&gt;DESIGN.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&#34;&gt;SPEC.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&#34;&gt;DESIGN.md&lt;/a&gt; - A fully detailed dive into how littlefs works. I would suggest reading it as the tradeoffs at work are quite interesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&#34;&gt;SPEC.md&lt;/a&gt; - The on-disk specification of littlefs with all the nitty-gritty details. May be useful for tooling development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The littlefs comes with a test suite designed to run on a PC using the &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/bd/lfs_testbd.h&#34;&gt;emulated block device&lt;/a&gt; found in the &lt;code&gt;bd&lt;/code&gt; directory. The tests assume a Linux environment and can be started with make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The littlefs is provided under the &lt;a href=&#34;https://spdx.org/licenses/BSD-3-Clause.html&#34;&gt;BSD-3-Clause&lt;/a&gt; license. See &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for more information. Contributions to this project are accepted under the same license.&lt;/p&gt; &#xA;&lt;p&gt;Individual files contain the following tag instead of the full license text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SPDX-License-Identifier:    BSD-3-Clause&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables machine processing of license information based on the SPDX License Identifiers that are here available: &lt;a href=&#34;http://spdx.org/licenses/&#34;&gt;http://spdx.org/licenses/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geky/littlefs-fuse&#34;&gt;littlefs-fuse&lt;/a&gt; - A &lt;a href=&#34;https://github.com/libfuse/libfuse&#34;&gt;FUSE&lt;/a&gt; wrapper for littlefs. The project allows you to mount littlefs directly on a Linux machine. Can be useful for debugging littlefs if you have an SD card handy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geky/littlefs-js&#34;&gt;littlefs-js&lt;/a&gt; - A javascript wrapper for littlefs. I&#39;m not sure why you would want this, but it is handy for demos. You can see it in action &lt;a href=&#34;http://littlefs.geky.net/demo.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/littlefs-python/&#34;&gt;littlefs-python&lt;/a&gt; - A Python wrapper for littlefs. The project allows you to create images of the filesystem on your PC. Check if littlefs will fit your needs, create images for a later download to the target memory or inspect the content of a binary image of the target memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/whitecatboard/Lua-RTOS-ESP32/tree/master/components/mklfs/src&#34;&gt;mklfs&lt;/a&gt; - A command line tool built by the &lt;a href=&#34;https://github.com/whitecatboard/Lua-RTOS-ESP32&#34;&gt;Lua RTOS&lt;/a&gt; guys for making littlefs images from a host PC. Supports Windows, Mac OS, and Linux.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/armmbed/mbed-os&#34;&gt;Mbed OS&lt;/a&gt; - The easiest way to get started with littlefs is to jump into Mbed which already has block device drivers for most forms of embedded storage. littlefs is available in Mbed OS as the &lt;a href=&#34;https://os.mbed.com/docs/mbed-os/v5.12/apis/littlefilesystem.html&#34;&gt;LittleFileSystem&lt;/a&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pellepl/spiffs&#34;&gt;SPIFFS&lt;/a&gt; - Another excellent embedded filesystem for NOR flash. As a more traditional logging filesystem with full static wear-leveling, SPIFFS will likely outperform littlefs on small memories such as the internal flash on microcontrollers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dlbeer/dhara&#34;&gt;Dhara&lt;/a&gt; - An interesting NAND flash translation layer designed for small MCUs. It offers static wear-leveling and power-resilience with only a fixed &lt;em&gt;O(|address|)&lt;/em&gt; pointer structure stored on each block and in RAM.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jemalloc/jemalloc</title>
    <updated>2022-06-03T02:33:25Z</updated>
    <id>tag:github.com,2022-06-03:/jemalloc/jemalloc</id>
    <link href="https://github.com/jemalloc/jemalloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;jemalloc is a general purpose malloc(3) implementation that emphasizes fragmentation avoidance and scalable concurrency support. jemalloc first came into use as the FreeBSD libc allocator in 2005, and since then it has found its way into numerous applications that rely on its predictable behavior. In 2010 jemalloc development efforts broadened to include developer support features such as heap profiling and extensive monitoring/tuning hooks. Modern jemalloc releases continue to be integrated back into FreeBSD, and therefore versatility remains critical. Ongoing development efforts trend toward making jemalloc among the best allocators for a broad range of demanding applications, and eliminating/mitigating weaknesses that have practical repercussions for real world applications.&lt;/p&gt; &#xA;&lt;p&gt;The COPYING file contains copyright and licensing information.&lt;/p&gt; &#xA;&lt;p&gt;The INSTALL file contains information on how to configure, build, and install jemalloc.&lt;/p&gt; &#xA;&lt;p&gt;The ChangeLog file contains a brief summary of changes for each release.&lt;/p&gt; &#xA;&lt;p&gt;URL: &lt;a href=&#34;http://jemalloc.net/&#34;&gt;http://jemalloc.net/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>