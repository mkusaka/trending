<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:35:59Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fastfetch-cli/fastfetch</title>
    <updated>2024-05-05T01:35:59Z</updated>
    <id>tag:github.com,2024-05-05:/fastfetch-cli/fastfetch</id>
    <link href="https://github.com/fastfetch-cli/fastfetch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Like neofetch, but much faster because written mostly in C.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fastfetch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/fastfetch-cli/fastfetch/ci.yml&#34; alt=&#34;GitHub Workflow Status (with event)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/raw/dev/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/fastfetch-cli/fastfetch&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/fastfetch-cli/fastfetch&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/raw/dev/CMakeLists.txt#L5&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/fastfetch-cli/fastfetch?logo=c&amp;amp;label=&#34; alt=&#34;GitHub top language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/commits&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/fastfetch-cli/fastfetch&#34; alt=&#34;GitHub commit activity (branch)&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/fastfetch#default&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/installs/dm/fastfetch?logo=homebrew&#34; alt=&#34;homebrew downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/fastfetch-cli/fastfetch/total?logo=github&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/fastfetch-cli/fastfetch?logo=github&#34; alt=&#34;GitHub release (with filter)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/fastfetch/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/latest-versions/fastfetch.svg?sanitize=true&#34; alt=&#34;latest packaged version(s)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/fastfetch/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/fastfetch.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fastfetch is a &lt;a href=&#34;https://github.com/dylanaraps/neofetch&#34;&gt;neofetch&lt;/a&gt;-like tool for fetching system information and displaying them in a pretty way. It is written mainly in C, with performance and customizability in mind. Currently, Linux, Android, FreeBSD, MacOS and Windows 7+ are supported.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/screenshots/example1.png&#34; width=&#34;49%&#34; align=&#34;left&#34;&gt; &#xA;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/2/24/Transparent_Square_Tiles_Texture.png&#34; width=&#34;49%&#34; height=&#34;16px&#34; align=&#34;left&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/screenshots/example4.png&#34; width=&#34;49%&#34; align=&#34;left&#34;&gt; &#xA;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/2/24/Transparent_Square_Tiles_Texture.png&#34; width=&#34;49%&#34; height=&#34;16px&#34; align=&#34;left&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/screenshots/example2.png&#34; width=&#34;48%&#34; align=&#34;top&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/screenshots/example3.png&#34; width=&#34;48%&#34; align=&#34;top&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/screenshots/example5.png&#34; height=&#34;15%&#34; align=&#34;top&#34;&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/wiki&#34;&gt;screenshots on different platforms&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Some distros packaged an outdated fastfetch version. Older version is not supported, please always ensure that the latest version is used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu: &lt;a href=&#34;https://launchpad.net/~zhangsongcui3371/+archive/ubuntu/fastfetch&#34;&gt;&lt;code&gt;ppa:zhangsongcui3371/fastfetch&lt;/code&gt;&lt;/a&gt; (for Ubuntu 22.04 or newer)&lt;/li&gt; &#xA; &lt;li&gt;Debian / Ubuntu: Download &lt;code&gt;fastfetch-linux-&amp;lt;proper architecture&amp;gt;.deb&lt;/code&gt; from &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/releases/latest&#34;&gt;Github release page&lt;/a&gt; and &lt;code&gt;dpkg -i fastfetch-linux-&amp;lt;proper architecture&amp;gt;.deb&lt;/code&gt; (for Ubuntu 20.04 or newer and Debian 11 or newer).&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;code&gt;sudo pacman -S fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;code&gt;sudo dnf install fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo: &lt;code&gt;sudo emerge --ask app-misc/fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alpine: &lt;code&gt;apk add --upgrade fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;NixOS: &lt;code&gt;nix-shell -p fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;openSUSE: &lt;code&gt;sudo zypper install fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ALT Linux: &lt;code&gt;sudo apt-get install fastfetch&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Replace sudo with doas depending on what you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/#Packaging&#34;&gt;See also if fastfetch has been packaged for your favorite Linux distro&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If fastfetch is not packaged for your distro or an outdated version is packaged, &lt;a href=&#34;https://brew.sh/&#34;&gt;linuxbrew&lt;/a&gt; is a good alternate: &lt;code&gt;brew install fastfetch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;...via &lt;a href=&#34;https://brew.sh&#34;&gt;HomeBrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install fastfetch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;...via &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo port install fastfetch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;scoop install fastfetch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may also download it directly from &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt; and extract the archive.&lt;/p&gt; &#xA;&lt;h3&gt;FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pkg install fastfetch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android (Termux)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pkg install fastfetch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;See Wiki: &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/wiki/Building&#34;&gt;https://github.com/fastfetch-cli/fastfetch/wiki/Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run it with default configuration: &lt;code&gt;fastfetch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run it with &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/wiki/Support+Status#available-modules&#34;&gt;all supported modules&lt;/a&gt; and find what you interest: &lt;code&gt;fastfetch -c all.jsonc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find all data that fastfetch detects: &lt;code&gt;fastfetch -s &amp;lt;module&amp;gt; --format json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Display help messages: &lt;code&gt;fastfetch --help&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate config file based on command line arguments: &lt;code&gt;fastfetch --arg1 --arg2 --gen-config&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Fastfetch uses the JSONC (or JSON with comments) for configuration. &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/wiki/Configuration&#34;&gt;See Wiki for detail&lt;/a&gt;. There are some premade config files in &lt;a href=&#34;https://raw.githubusercontent.com/fastfetch-cli/fastfetch/dev/presets&#34;&gt;&lt;code&gt;presets&lt;/code&gt;&lt;/a&gt;, including the ones used for the screenshots above. You can load them using &lt;code&gt;-c &amp;lt;filename&amp;gt;&lt;/code&gt;. They may also serve as a good example for format arguments.&lt;/p&gt; &#xA;&lt;p&gt;Logos can be heavily customized too; see the &lt;a href=&#34;https://github.com/fastfetch-cli/fastfetch/wiki/Logo-options&#34;&gt;logo documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;h3&gt;Repositories&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/fastfetch/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/fastfetch.svg?header=&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DEB / RPM package: &lt;code&gt;cmake --build . --target package&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install directly: &lt;code&gt;cmake --install . --prefix /usr/local&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Q: Why do you need a very performant version of neofetch?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I like putting neofetch in my ~/.bashrc to have a system overview whenever I use the terminal, but the slow speed annoyed me, so I created this. Also neofetch didn&#39;t output everything correctly (e.g Font is displayed as &#34;[Plasma], Noto Sans, 10 [GTK2/3]&#34;) and writing my own tool gave me the possibility to fine tune it to run perfectly on at least my configuration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Q: It does not display [*] correctly for me, what can I do?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is most likely because your system is not implemented (yet). At the moment I am focusing more on making the core app better, than adding more configurations. Feel free to open a pull request if you want to add support for your configuration&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;Give it a star to support us!&lt;/p&gt; &#xA;&lt;a href=&#34;https://star-history.com/#fastfetch-cli/fastfetch&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=fastfetch-cli/fastfetch&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=fastfetch-cli/fastfetch&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=fastfetch-cli/fastfetch&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>signalwire/freeswitch</title>
    <updated>2024-05-05T01:35:59Z</updated>
    <id>tag:github.com,2024-05-05:/signalwire/freeswitch</id>
    <link href="https://github.com/signalwire/freeswitch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FreeSWITCH is a Software Defined Telecom Stack enabling the digital transformation from proprietary telecom switches to a versatile software implementation that runs on any commodity hardware. From a Raspberry PI to a multi-core server, FreeSWITCH can unlock the telecommunications potential of any device.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FreeSWITCH&lt;/h1&gt; &#xA;&lt;p&gt;FreeSWITCH is a Software Defined Telecom Stack enabling the digital transformation from proprietary telecom switches to a versatile software implementation that runs on any commodity hardware. From a Raspberry PI to a multi-core server, FreeSWITCH can unlock the telecommunications potential of any device. Combined with our hosted cloud platform, SignalWire, FreeSWITCH can interconnect with the outside world and scale to any size.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://signalwire.com/&#34;&gt;https://signalwire.com&lt;/a&gt; or &lt;a href=&#34;https://github.com/signalwire&#34;&gt;https://github.com/signalwire&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;FreeSWITCH is available on &lt;a href=&#34;https://github.com/signalwire/freeswitch&#34;&gt;Github&lt;/a&gt; in source code format. You can checkout the development branch and build for many popular platforms including Linux, Windows, MacOSX and BSD. There is an issue tracker and pull request system available as part of the repo online.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.signalwire.com/freeswitch/FreeSWITCH-Explained/&#34;&gt;https://developer.signalwire.com/freeswitch/FreeSWITCH-Explained/&lt;/a&gt; for more detailed instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need assistance or have an interest in using a commercially supported build, you can contact &lt;a href=&#34;mailto:coreteam@freeswitch.com&#34;&gt;coreteam@freeswitch.com&lt;/a&gt; to learn about professional services to support your project.&lt;/p&gt; &#xA;&lt;h2&gt;Voice-over-IP services - SIP / SMS - App Integrations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://signalwire.com&#34;&gt;SignalWire&lt;/a&gt; is the primary sponsor of the FreeSWITCH project and was founded by the original developers of FreeSWITCH. SignalWire provides scalable services to enhance and scale your project such as SMS, SIP, Serverless Application hosting as well as programmable telecom. mod_signalwire which is distributed in this code base allows you to instantly pair with SignalWire and extend your FreeSWITCH.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The main index for documentation is available at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/&#34;&gt;https://freeswitch.org/confluence/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Release notes:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/Release+Notes&#34;&gt;https://freeswitch.org/confluence/display/FREESWITCH/Release+Notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install from packages&lt;/h3&gt; &#xA;&lt;p&gt;Step by step tutorials to install FreeSWITCH from packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/Debian&#34;&gt;Debian&lt;/a&gt; [&lt;b&gt;Recommended&lt;/b&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/Raspberry+Pi&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/CentOS+7+and+RHEL+7&#34;&gt;CentOS 7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Example Dockerfiles to build FreeSWITCH and dependencies from source:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/signalwire/freeswitch/tree/master/docker/examples&#34;&gt;https://github.com/signalwire/freeswitch/tree/master/docker/examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Step by step tutorials to build FreeSWITCH with provided dependency packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/Debian#Debian-buildfromsource&#34;&gt;Debian&lt;/a&gt; [&lt;b&gt;Recommended&lt;/b&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/Raspberry+Pi&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freeswitch.org/confluence/display/FREESWITCH/CentOS+7+and+RHEL+7&#34;&gt;CentOS 7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://files.freeswitch.org/releases/freeswitch/&#34;&gt;Tarballs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://files.freeswitch.org/windows/installer/x64/&#34;&gt;Windows Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://files.freeswitch.org/windows/installer/x64/sounds/&#34;&gt;Windows Sound Packages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;GitHub pull requests are the recommended way to contribute to the FreeSWITCH source code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/signalwire/freeswitch/pulls&#34;&gt;https://github.com/signalwire/freeswitch/pulls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Slack is our chat system where the developers, the FreeSWITCH team, and the most active users are present. This is the place to get answers faster and chat with other users in real time. All you need to do is enter your email and verify it on the Slack signup page and you are ready to join in the discussion!&lt;/p&gt; &#xA;&lt;p&gt;Slack Community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://signalwire.community/&#34;&gt;https://signalwire.community/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mailing list (ARCHIVED):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lists.freeswitch.org/pipermail/freeswitch-users/&#34;&gt;http://lists.freeswitch.org/pipermail/freeswitch-users/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you for using FreeSWITCH!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sqlite/sqlite</title>
    <updated>2024-05-05T01:35:59Z</updated>
    <id>tag:github.com,2024-05-05:/sqlite/sqlite</id>
    <link href="https://github.com/sqlite/sqlite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Git mirror of the SQLite source tree&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;SQLite Source Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the complete source code for the &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite database engine&lt;/a&gt;. Some test scripts are also included. However, many other test scripts and most of the documentation are managed separately.&lt;/p&gt; &#xA;&lt;h2&gt;Version Control&lt;/h2&gt; &#xA;&lt;p&gt;SQLite sources are managed using &lt;a href=&#34;https://www.fossil-scm.org/&#34;&gt;Fossil&lt;/a&gt;, a distributed version control system that was specifically designed and written to support SQLite development. The &lt;a href=&#34;https://sqlite.org/src/timeline&#34;&gt;Fossil repository&lt;/a&gt; contains the urtext.&lt;/p&gt; &#xA;&lt;p&gt;If you are reading this on GitHub or some other Git repository or service, then you are looking at a mirror. The names of check-ins and other artifacts in a Git mirror are different from the official names for those objects. The official names for check-ins are found in a footer on the check-in comment for authorized mirrors. The official check-in name can also be seen in the &lt;code&gt;manifest.uuid&lt;/code&gt; file in the root of the tree. Always use the official name, not the Git-name, when communicating about an SQLite check-in.&lt;/p&gt; &#xA;&lt;p&gt;If you pulled your SQLite source code from a secondary source and want to verify its integrity, there are hints on how to do that in the &lt;a href=&#34;https://raw.githubusercontent.com/sqlite/sqlite/master/#vauth&#34;&gt;Verifying Code Authenticity&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Contacting The SQLite Developers&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to ask questions or make comments about SQLite or to report bugs against SQLite is to visit the &lt;a href=&#34;https://sqlite.org/forum&#34;&gt;SQLite Forum&lt;/a&gt; at &lt;a href=&#34;https://sqlite.org/forum/&#34;&gt;https://sqlite.org/forum/&lt;/a&gt;. Anonymous postings are permitted.&lt;/p&gt; &#xA;&lt;p&gt;If you think you have found a bug that has security implications and you do not want to report it on the public forum, you can send a private email to drh at sqlite dot org.&lt;/p&gt; &#xA;&lt;h2&gt;Public Domain&lt;/h2&gt; &#xA;&lt;p&gt;The SQLite source code is in the public domain. See &lt;a href=&#34;https://sqlite.org/copyright.html&#34;&gt;https://sqlite.org/copyright.html&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Because SQLite is in the public domain, we do not normally accept pull requests, because if we did take a pull request, the changes in that pull request might carry a copyright and the SQLite source code would then no longer be fully in the public domain.&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining The SQLite Source Code&lt;/h2&gt; &#xA;&lt;p&gt;If you do not want to use Fossil, you can download tarballs or ZIP archives or &lt;a href=&#34;https://sqlite.org/cli.html#sqlar&#34;&gt;SQLite archives&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest trunk check-in as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest release as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz?r=release&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip?r=release&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar?r=release&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For other check-ins, substitute an appropriate branch name or tag or hash prefix in place of &#34;release&#34; in the URLs of the previous bullet. Or browse the &lt;a href=&#34;https://www.sqlite.org/src/timeline&#34;&gt;timeline&lt;/a&gt; to locate the check-in desired, click on its information page link, then click on the &#34;Tarball&#34; or &#34;ZIP Archive&#34; links on the information page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do want to use Fossil to check out the source tree, first install Fossil version 2.0 or later. (Source tarballs and precompiled binaries available &lt;a href=&#34;https://www.fossil-scm.org/fossil/uv/download.html&#34;&gt;here&lt;/a&gt;. Fossil is a stand-alone program. To install, simply download or build the single executable file and put that file someplace on your $PATH.) Then run commands like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mkdir -p ~/sqlite ~/Fossils&#xA;    cd ~/sqlite&#xA;    fossil clone https://www.sqlite.org/src ~/Fossils/sqlite.fossil&#xA;    fossil open ~/Fossils/sqlite.fossil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After setting up a repository using the steps above, you can always update to the latest version using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    fossil update trunk   ;# latest trunk check-in&#xA;    fossil update release ;# latest official release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or type &#34;fossil ui&#34; to get a web-based user interface.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling for Unix-like systems&lt;/h2&gt; &#xA;&lt;p&gt;First create a directory in which to place the build products. It is recommended, but not required, that the build directory be separate from the source directory. Cd into the build directory and then from the build directory run the configure script found at the root of the source tree. Then run &#34;make&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    tar xzf sqlite.tar.gz    ;#  Unpack the source tree into &#34;sqlite&#34;&#xA;    mkdir bld                ;#  Build will occur in a sibling directory&#xA;    cd bld                   ;#  Change to the build directory&#xA;    ../sqlite/configure      ;#  Run the configure script&#xA;    make                     ;#  Builds the &#34;sqlite3&#34; command-line tool&#xA;    make sqlite3.c           ;#  Build the &#34;amalgamation&#34; source file&#xA;    make devtest             ;#  Run some tests (requires Tcl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the makefile for additional targets.&lt;/p&gt; &#xA;&lt;p&gt;The configure script uses autoconf 2.61 and libtool. If the configure script does not work out for you, there is a generic makefile named &#34;Makefile.linux-gcc&#34; in the top directory of the source tree that you can copy and edit to suit your needs. Comments on the generic makefile show what changes are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling for Windows Using MSVC&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, all applicable build products can be compiled with MSVC. You will also need a working installation of TCL. See the &lt;a href=&#34;https://raw.githubusercontent.com/sqlite/sqlite/master/doc/compile-for-windows.md&#34;&gt;compile-for-windows.md&lt;/a&gt; document for additional information about how to install MSVC and TCL and configure your build environment.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run tests, you need to let SQLite know the location of your TCL library, using a command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    set TCLDIR=c:\Tcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite uses &#34;tclsh.exe&#34; as part of the build process, and so that utility program will need to be somewhere on your %PATH%. The finished SQLite library does not contain any TCL code, but it does use TCL to help with the build process and to run tests.&lt;/p&gt; &#xA;&lt;p&gt;Build using Makefile.msc. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    nmake /f Makefile.msc&#xA;    nmake /f Makefile.msc sqlite3.c&#xA;    nmake /f Makefile.msc devtest&#xA;    nmake /f Makefile.msc releasetest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many other makefile targets. See comments in Makefile.msc for details.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code Tour&lt;/h2&gt; &#xA;&lt;p&gt;Most of the core source files are in the &lt;strong&gt;src/&lt;/strong&gt; subdirectory. The &lt;strong&gt;src/&lt;/strong&gt; folder also contains files used to build the &#34;testfixture&#34; test harness. The names of the source files used by &#34;testfixture&#34; all begin with &#34;test&#34;. The &lt;strong&gt;src/&lt;/strong&gt; also contains the &#34;shell.c&#34; file which is the main program for the &#34;sqlite3.exe&#34; &lt;a href=&#34;https://sqlite.org/cli.html&#34;&gt;command-line shell&lt;/a&gt; and the &#34;tclsqlite.c&#34; file which implements the &lt;a href=&#34;https://sqlite.org/tclsqlite.html&#34;&gt;Tcl bindings&lt;/a&gt; for SQLite. (Historical note: SQLite began as a Tcl extension and only later escaped to the wild as an independent library.)&lt;/p&gt; &#xA;&lt;p&gt;Test scripts and programs are found in the &lt;strong&gt;test/&lt;/strong&gt; subdirectory. Additional test code is found in other source repositories. See &lt;a href=&#34;https://www.sqlite.org/testing.html&#34;&gt;How SQLite Is Tested&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;ext/&lt;/strong&gt; subdirectory contains code for extensions. The Full-text search engine is in &lt;strong&gt;ext/fts3&lt;/strong&gt;. The R-Tree engine is in &lt;strong&gt;ext/rtree&lt;/strong&gt;. The &lt;strong&gt;ext/misc&lt;/strong&gt; subdirectory contains a number of smaller, single-file extensions, such as a REGEXP operator.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;tool/&lt;/strong&gt; subdirectory contains various scripts and programs used for building generated source code files or for testing or for generating accessory programs such as &#34;sqlite3_analyzer(.exe)&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Generated Source Code Files&lt;/h3&gt; &#xA;&lt;p&gt;Several of the C-language source files used by SQLite are generated from other sources rather than being typed in manually by a programmer. This section will summarize those automatically-generated files. To create all of the automatically-generated files, simply run &#34;make target_source&#34;. The &#34;target_source&#34; make target will create a subdirectory &#34;tsrc/&#34; and fill it with all the source files needed to build SQLite, both manually-edited files and automatically-generated files.&lt;/p&gt; &#xA;&lt;p&gt;The SQLite interface is defined by the &lt;strong&gt;sqlite3.h&lt;/strong&gt; header file, which is generated from src/sqlite.h.in, ./manifest.uuid, and ./VERSION. The &lt;a href=&#34;https://www.tcl.tk&#34;&gt;Tcl script&lt;/a&gt; at tool/mksqlite3h.tcl does the conversion. The manifest.uuid file contains the SHA3 hash of the particular check-in and is used to generate the SQLITE_SOURCE_ID macro. The VERSION file contains the current SQLite version number. The sqlite3.h header is really just a copy of src/sqlite.h.in with the source-id and version number inserted at just the right spots. Note that comment text in the sqlite3.h file is used to generate much of the SQLite API documentation. The Tcl scripts used to generate that documentation are in a separate source repository.&lt;/p&gt; &#xA;&lt;p&gt;The SQL language parser is &lt;strong&gt;parse.c&lt;/strong&gt; which is generated from a grammar in the src/parse.y file. The conversion of &#34;parse.y&#34; into &#34;parse.c&#34; is done by the &lt;a href=&#34;https://raw.githubusercontent.com/sqlite/sqlite/master/doc/lemon.html&#34;&gt;lemon&lt;/a&gt; LALR(1) parser generator. The source code for lemon is at tool/lemon.c. Lemon uses the tool/lempar.c file as a template for generating its parser. Lemon also generates the &lt;strong&gt;parse.h&lt;/strong&gt; header file, at the same time it generates parse.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;opcodes.h&lt;/strong&gt; header file contains macros that define the numbers corresponding to opcodes in the &#34;VDBE&#34; virtual machine. The opcodes.h file is generated by scanning the src/vdbe.c source file. The Tcl script at ./mkopcodeh.tcl does this scan and generates opcodes.h. A second Tcl script, ./mkopcodec.tcl, then scans opcodes.h to generate the &lt;strong&gt;opcodes.c&lt;/strong&gt; source file, which contains a reverse mapping from opcode-number to opcode-name that is used for EXPLAIN output.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;keywordhash.h&lt;/strong&gt; header file contains the definition of a hash table that maps SQL language keywords (ex: &#34;CREATE&#34;, &#34;SELECT&#34;, &#34;INDEX&#34;, etc.) into the numeric codes used by the parse.c parser. The keywordhash.h file is generated by a C-language program at tool mkkeywordhash.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;pragma.h&lt;/strong&gt; header file contains various definitions used to parse and implement the PRAGMA statements. The header is generated by a script &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt;. If you want to add a new PRAGMA, edit the &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt; file to insert the information needed by the parser for your new PRAGMA, then run the script to regenerate the &lt;strong&gt;pragma.h&lt;/strong&gt; header file.&lt;/p&gt; &#xA;&lt;h3&gt;The Amalgamation&lt;/h3&gt; &#xA;&lt;p&gt;All of the individual C source code and header files (both manually-edited and automatically-generated) can be combined into a single big source file &lt;strong&gt;sqlite3.c&lt;/strong&gt; called &#34;the amalgamation&#34;. The amalgamation is the recommended way of using SQLite in a larger application. Combining all individual source code files into a single big source code file allows the C compiler to perform more cross-procedure analysis and generate better code. SQLite runs about 5% faster when compiled from the amalgamation versus when compiled from individual source files.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation is generated from the tool/mksqlite3c.tcl Tcl script. First, all of the individual source files must be gathered into the tsrc/ subdirectory (using the equivalent of &#34;make target_source&#34;) then the tool/mksqlite3c.tcl script is run to copy them all together in just the right order while resolving internal &#34;#include&#34; references.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation source file is more than 200K lines long. Some symbolic debuggers (most notably MSVC) are unable to deal with files longer than 64K lines. To work around this, a separate Tcl script, tool/split-sqlite3c.tcl, can be run on the amalgamation to break it up into a single small C file called &lt;strong&gt;sqlite3-all.c&lt;/strong&gt; that does #include on about seven other files named &lt;strong&gt;sqlite3-1.c&lt;/strong&gt;, &lt;strong&gt;sqlite3-2.c&lt;/strong&gt;, ..., &lt;strong&gt;sqlite3-7.c&lt;/strong&gt;. In this way, all of the source code is contained within a single translation unit so that the compiler can do extra cross-procedure optimization, but no individual source file exceeds 32K lines in length.&lt;/p&gt; &#xA;&lt;h2&gt;How It All Fits Together&lt;/h2&gt; &#xA;&lt;p&gt;SQLite is modular in design. See the &lt;a href=&#34;https://www.sqlite.org/arch.html&#34;&gt;architectural description&lt;/a&gt; for details. Other documents that are useful in (helping to understand how SQLite works include the &lt;a href=&#34;https://www.sqlite.org/fileformat2.html&#34;&gt;file format&lt;/a&gt; description, the &lt;a href=&#34;https://www.sqlite.org/opcode.html&#34;&gt;virtual machine&lt;/a&gt; that runs prepared statements, the description of &lt;a href=&#34;https://www.sqlite.org/atomiccommit.html&#34;&gt;how transactions work&lt;/a&gt;, and the &lt;a href=&#34;https://www.sqlite.org/optoverview.html&#34;&gt;overview of the query planner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Years of effort have gone into optimizing SQLite, both for small size and high performance. And optimizations tend to result in complex code. So there is a lot of complexity in the current SQLite implementation. It will not be the easiest library in the world to hack.&lt;/p&gt; &#xA;&lt;p&gt;Key files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqlite.h.in&lt;/strong&gt; - This file defines the public interface to the SQLite library. Readers will need to be familiar with this interface before trying to understand how the library works internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqliteInt.h&lt;/strong&gt; - this header file defines many of the data objects used internally by SQLite. In addition to &#34;sqliteInt.h&#34;, some subsystems have their own header files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;parse.y&lt;/strong&gt; - This file describes the LALR(1) grammar that SQLite uses to parse SQL statements, and the actions that are taken at each step in the parsing process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;vdbe.c&lt;/strong&gt; - This file implements the virtual machine that runs prepared statements. There are various helper files whose names begin with &#34;vdbe&#34;. The VDBE has access to the vdbeInt.h header file which defines internal data objects. The rest of SQLite interacts with the VDBE through an interface defined by vdbe.h.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;where.c&lt;/strong&gt; - This file (together with its helper files named by &#34;where*.c&#34;) analyzes the WHERE clause and generates virtual machine code to run queries efficiently. This file is sometimes called the &#34;query optimizer&#34;. It has its own private header file, whereInt.h, that defines data objects used internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;btree.c&lt;/strong&gt; - This file contains the implementation of the B-Tree storage engine used by SQLite. The interface to the rest of the system is defined by &#34;btree.h&#34;. The &#34;btreeInt.h&#34; header defines objects used internally by btree.c and not published to the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pager.c&lt;/strong&gt; - This file contains the &#34;pager&#34; implementation, the module that implements transactions. The &#34;pager.h&#34; header file defines the interface between pager.c and the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;os_unix.c&lt;/strong&gt; and &lt;strong&gt;os_win.c&lt;/strong&gt; - These two files implement the interface between SQLite and the underlying operating system using the run-time pluggable VFS interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;shell.c.in&lt;/strong&gt; - This file is not part of the core SQLite library. This is the file that, when linked against sqlite3.a, generates the &#34;sqlite3.exe&#34; command-line shell. The &#34;shell.c.in&#34; file is transformed into &#34;shell.c&#34; as part of the build process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tclsqlite.c&lt;/strong&gt; - This file implements the Tcl bindings for SQLite. It is not part of the core SQLite library. But as most of the tests in this repository are written in Tcl, the Tcl language bindings are important.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;test*.c&lt;/strong&gt; - Files in the src/ folder that begin with &#34;test&#34; go into building the &#34;testfixture.exe&#34; program. The testfixture.exe program is an enhanced Tcl shell. The testfixture.exe program runs scripts in the test/ folder to validate the core SQLite code. The testfixture program (and some other test programs too) is built and run when you type &#34;make test&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many other source files. Each has a succinct header comment that describes its purpose and role within the larger system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;vauth&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying Code Authenticity&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;manifest&lt;/code&gt; file at the root directory of the source tree contains either a SHA3-256 hash or a SHA1 hash for every source file in the repository. The name of the version of the entire source tree is just the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file itself, possibly with the last line of that file omitted if the last line begins with &#34;&lt;code&gt;# Remove this line&lt;/code&gt;&#34;. The &lt;code&gt;manifest.uuid&lt;/code&gt; file should contain the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file. If all of the above hash comparisons are correct, then you can be confident that your source tree is authentic and unadulterated. Details on the format for the &lt;code&gt;manifest&lt;/code&gt; files are available &lt;a href=&#34;https://fossil-scm.org/fossil/doc/trunk/www/fileformat.wiki#manifest&#34;&gt;on the Fossil website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The process of checking source code authenticity is automated by the makefile:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;make verify-source&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Or on windows:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;nmake /f Makefile.msc verify-source&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Using the makefile to verify source integrity is good for detecting accidental changes to the source tree, but malicious changes could be hidden by also modifying the makefiles.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;p&gt;The main SQLite website is &lt;a href=&#34;https://sqlite.org/&#34;&gt;https://sqlite.org/&lt;/a&gt; with geographically distributed backups at &lt;a href=&#34;https://www2.sqlite.org&#34;&gt;https://www2.sqlite.org/&lt;/a&gt; and &lt;a href=&#34;https://www3.sqlite.org&#34;&gt;https://www3.sqlite.org/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>