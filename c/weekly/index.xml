<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-14T01:47:32Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Circuit-Digest/ESP-Drone</title>
    <updated>2024-04-14T01:47:32Z</updated>
    <id>tag:github.com,2024-04-14:/Circuit-Digest/ESP-Drone</id>
    <link href="https://github.com/Circuit-Digest/ESP-Drone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP-Drone&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/Circuit-Digest/ESP-Drone/raw/8e10ca8f1701dee8f7fa0e6d4f82067c9e87177b/Tittle%20Image.png&#34; width=&#34;&#34; alt=&#34;alt_text&#34; title=&#34;image_tooltip&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://circuitdigest.com/tags/ESP32&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=&amp;amp;labelColor=505050&amp;amp;message=ESP32 Tutorials Circuit Digest&amp;amp;color=%230076D6&amp;amp;style=social&amp;amp;logo=google-chrome&amp;amp;logoColor=%230076D6&#34; alt=&#34;circuitdigest&#34;&gt;&lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;For a full tutorial check out our &lt;a href=&#34;https://circuitdigest.com/microcontroller-projects/DIY-wifi-controlled-drone&#34;&gt;ESP32 Drone Article&lt;/a&gt;. For working video: &lt;a href=&#34;https://youtu.be/uzZjk0TQKtU&#34;&gt;How to build an ESP32 Drone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Drones have rapidly evolved from niche hobbies to versatile tools with a wide range of applications, from photography to agriculture or even for defense and military purposes. Depending on the application, features and payload capacity their price will vary from pocket changes to a few million. Even though the basic principle behind these drones may appear simple, there is a lot of technology and computation that goes behind it for proper operations and a desired result from these drones. For example, maintaining stability while in the air requires precision sensors such as a Gyroscope and proper processing of reading taken with it. In this project we are going to make such a drone which can be easily controlled using our phones. This DIY drone is small in size and can be built using easily available components such as ESP32 modules, MPU6050 IMU, coreless motors and plastic propellers. &lt;br&gt; [Note: As this projects are very simple we are only providing the code, schemaitic, and a few essential images if you want to get the images or code explanations do check out the Circuit Digest website. &lt;br&gt; &lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AFLplusplus/AFLplusplus</title>
    <updated>2024-04-14T01:47:32Z</updated>
    <id>tag:github.com,2024-04-14:/AFLplusplus/AFLplusplus</id>
    <link href="https://github.com/AFLplusplus/AFLplusplus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced laf-intel &amp; redqueen, AFLfast++ power schedules, MOpt mutators, unicorn_mode, and a lot more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;American Fuzzy Lop plus plus (AFL++)&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/AFLplusplus/Website/main/static/aflpp_bg.svg?sanitize=true&#34; alt=&#34;AFL++ logo&#34; width=&#34;250&#34; heigh=&#34;250&#34;&gt; &#xA;&lt;p&gt;Release version: &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/releases&#34;&gt;4.20c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub version: 4.20c&lt;/p&gt; &#xA;&lt;p&gt;Repository: &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus&#34;&gt;https://github.com/AFLplusplus/AFLplusplus&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AFL++ is maintained by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marc &#34;van Hauser&#34; Heuse &lt;a href=&#34;mailto:mh@mh-sec.de&#34;&gt;mh@mh-sec.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dominik Maier &lt;a href=&#34;mailto:mail@dmnk.co&#34;&gt;mail@dmnk.co&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrea Fioraldi &lt;a href=&#34;mailto:andreafioraldi@gmail.com&#34;&gt;andreafioraldi@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Heiko &#34;hexcoder-&#34; Eissfeldt &lt;a href=&#34;mailto:heiko.eissfeldt@hexco.de&#34;&gt;heiko.eissfeldt@hexco.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;frida_mode is maintained by @Worksbutnottested&lt;/li&gt; &#xA; &lt;li&gt;Documentation: Jana Aydinbas &lt;a href=&#34;mailto:jana.aydinbas@gmail.com&#34;&gt;jana.aydinbas@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Originally developed by Michal &#34;lcamtuf&#34; Zalewski.&lt;/p&gt; &#xA;&lt;p&gt;AFL++ is a superior fork to Google&#39;s AFL - more speed, more and better mutations, more and better instrumentation, custom module support, etc.&lt;/p&gt; &#xA;&lt;p&gt;You are free to copy, modify, and distribute AFL++ with attribution under the terms of the Apache-2.0 License. See the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Here is some information to get you started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For an overview of the AFL++ documentation and a very helpful graphical guide, please visit &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/README.md&#34;&gt;docs/README.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To get you started with tutorials, go to &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/tutorials.md&#34;&gt;docs/tutorials.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For releases, see the &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/releases&#34;&gt;Releases tab&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#branches&#34;&gt;branches&lt;/a&gt;. The best branches to use are, however, &lt;code&gt;stable&lt;/code&gt; or &lt;code&gt;dev&lt;/code&gt; - depending on your risk appetite. Also take a look at the list of &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/important_changes.md&#34;&gt;important changes in AFL++&lt;/a&gt; and the list of &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/features.md&#34;&gt;features&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you want to use AFL++ for your academic work, check the &lt;a href=&#34;https://aflplus.plus/papers/&#34;&gt;papers page&lt;/a&gt; on the website.&lt;/li&gt; &#xA; &lt;li&gt;To cite our work, look at the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#cite&#34;&gt;Cite&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;For comparisons, use the fuzzbench &lt;code&gt;aflplusplus&lt;/code&gt; setup, or use &lt;code&gt;afl-clang-fast&lt;/code&gt; with &lt;code&gt;AFL_LLVM_CMPLOG=1&lt;/code&gt;. You can find the &lt;code&gt;aflplusplus&lt;/code&gt; default configuration on Google&#39;s &lt;a href=&#34;https://github.com/google/fuzzbench/tree/master/fuzzers/aflplusplus&#34;&gt;fuzzbench&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and installing AFL++&lt;/h2&gt; &#xA;&lt;p&gt;To have AFL++ easily available with everything compiled, pull the image directly from the Docker Hub (available for both x86_64 and arm64):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull aflplusplus/aflplusplus&#xA;docker run -ti -v /location/of/your/target:/src aflplusplus/aflplusplus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This image is automatically published when a push to the stable branch happens (see &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#branches&#34;&gt;branches&lt;/a&gt;). If you use the command above, you will find your target source code in &lt;code&gt;/src&lt;/code&gt; in the container.&lt;/p&gt; &#xA;&lt;p&gt;Note: you can also pull &lt;code&gt;aflplusplus/aflplusplus:dev&lt;/code&gt; which is the most current development state of AFL++.&lt;/p&gt; &#xA;&lt;p&gt;To build AFL++ yourself - &lt;em&gt;which we recommend&lt;/em&gt; - continue at &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/INSTALL.md&#34;&gt;docs/INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start: Fuzzing with AFL++&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Before you start, please read about the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md#0-common-sense-risks&#34;&gt;common sense risks of fuzzing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a quick start for fuzzing targets with the source code available. To read about the process in detail, see &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md&#34;&gt;docs/fuzzing_in_depth.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn about fuzzing other targets, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary-only targets: &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_binary-only_targets.md&#34;&gt;docs/fuzzing_binary-only_targets.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Network services: &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/best_practices.md#fuzzing-a-network-service&#34;&gt;docs/best_practices.md#fuzzing-a-network-service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GUI programs: &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/best_practices.md#fuzzing-a-gui-program&#34;&gt;docs/best_practices.md#fuzzing-a-gui-program&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Step-by-step quick start:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the program or library to be fuzzed using &lt;code&gt;afl-cc&lt;/code&gt;. A common way to do this would be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CC=/path/to/afl-cc CXX=/path/to/afl-c++ ./configure --disable-shared&#xA;make clean all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get a small but valid input file that makes sense to the program. When fuzzing verbose syntax (SQL, HTTP, etc.), create a dictionary as described in &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/dictionaries/README.md&#34;&gt;dictionaries/README.md&lt;/a&gt;, too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the program reads from stdin, run &lt;code&gt;afl-fuzz&lt;/code&gt; like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./afl-fuzz -i seeds_dir -o output_dir -- \&#xA;/path/to/tested/program [...program&#39;s cmdline...]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To add a dictionary, add &lt;code&gt;-x /path/to/dictionary.txt&lt;/code&gt; to afl-fuzz.&lt;/p&gt; &lt;p&gt;If the program takes input from a file, you can put &lt;code&gt;@@&lt;/code&gt; in the program&#39;s command line; AFL++ will put an auto-generated file name in there for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Investigate anything shown in red in the fuzzer UI by promptly consulting &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/afl-fuzz_approach.md#understanding-the-status-screen&#34;&gt;docs/afl-fuzz_approach.md#understanding-the-status-screen&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will find found crashes and hangs in the subdirectories &lt;code&gt;crashes/&lt;/code&gt; and &lt;code&gt;hangs/&lt;/code&gt; in the &lt;code&gt;-o output_dir&lt;/code&gt; directory. You can replay the crashes by feeding them to the target, e.g. if your target is using stdin:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat output_dir/crashes/id:000000,* | /path/to/tested/program [...program&#39;s cmdline...]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can generate cores or use gdb directly to follow up the crashes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We cannot stress this enough - if you want to fuzz effectively, read the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md&#34;&gt;docs/fuzzing_in_depth.md&lt;/a&gt; document!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Questions? Concerns? Bug reports?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The contributors can be reached via (e.g., by creating an issue): &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus&#34;&gt;https://github.com/AFLplusplus/AFLplusplus&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;. If you find an interesting or important question missing, submit it via &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/discussions&#34;&gt;https://github.com/AFLplusplus/AFLplusplus/discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Best: join the &lt;a href=&#34;https://discord.gg/gCraWct&#34;&gt;Awesome Fuzzing&lt;/a&gt; Discord server.&lt;/li&gt; &#xA; &lt;li&gt;There is a (not really used) mailing list for the AFL/AFL++ project (&lt;a href=&#34;https://groups.google.com/group/afl-users&#34;&gt;browse archive&lt;/a&gt;). To compare notes with other users or to get notified about major new features, send an email to &lt;a href=&#34;mailto:afl-users+subscribe@googlegroups.com&#34;&gt;afl-users+subscribe@googlegroups.com&lt;/a&gt;, but note that this is not managed by us.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The following branches exist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/tree/release&#34;&gt;release&lt;/a&gt;: the latest release&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/&#34;&gt;stable/trunk&lt;/a&gt;: stable state of AFL++ - it is synced from dev from time to time when we are satisfied with its stability&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/tree/dev&#34;&gt;dev&lt;/a&gt;: development state of AFL++ - bleeding edge and you might catch a checkout which does not compile or has a bug. &lt;strong&gt;We only accept PRs (pull requests) for the &#39;dev&#39; branch!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;(any other): experimental branches to work on specific features or testing new functionality or changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help wanted&lt;/h2&gt; &#xA;&lt;p&gt;We have several &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/ideas.md&#34;&gt;ideas&lt;/a&gt; we would like to see in AFL++ to make it even better. However, we already work on so many things that we do not have the time for all the big ideas.&lt;/p&gt; &#xA;&lt;p&gt;This can be your way to support and contribute to AFL++ - extend it to do something cool.&lt;/p&gt; &#xA;&lt;p&gt;For everyone who wants to contribute (and send pull requests), please read our &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; before you submit.&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;Many of the improvements to the original AFL and AFL++ wouldn&#39;t be possible without feedback, bug reports, or patches from our contributors.&lt;/p&gt; &#xA;&lt;p&gt;Thank you! (For people sending pull requests - please add yourself to this list :-)&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of contributors&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;  Jann Horn                             Hanno Boeck&#xA;  Felix Groebert                        Jakub Wilk&#xA;  Richard W. M. Jones                   Alexander Cherepanov&#xA;  Tom Ritter                            Hovik Manucharyan&#xA;  Sebastian Roschke                     Eberhard Mattes&#xA;  Padraig Brady                         Ben Laurie&#xA;  @dronesec                             Luca Barbato&#xA;  Tobias Ospelt                         Thomas Jarosch&#xA;  Martin Carpenter                      Mudge Zatko&#xA;  Joe Zbiciak                           Ryan Govostes&#xA;  Michael Rash                          William Robinet&#xA;  Jonathan Gray                         Filipe Cabecinhas&#xA;  Nico Weber                            Jodie Cunningham&#xA;  Andrew Griffiths                      Parker Thompson&#xA;  Jonathan Neuschaefer                  Tyler Nighswander&#xA;  Ben Nagy                              Samir Aguiar&#xA;  Aidan Thornton                        Aleksandar Nikolich&#xA;  Sam Hakim                             Laszlo Szekeres&#xA;  David A. Wheeler                      Turo Lamminen&#xA;  Andreas Stieger                       Richard Godbee&#xA;  Louis Dassy                           teor2345&#xA;  Alex Moneger                          Dmitry Vyukov&#xA;  Keegan McAllister                     Kostya Serebryany&#xA;  Richo Healey                          Martijn Bogaard&#xA;  rc0r                                  Jonathan Foote&#xA;  Christian Holler                      Dominique Pelle&#xA;  Jacek Wielemborek                     Leo Barnes&#xA;  Jeremy Barnes                         Jeff Trull&#xA;  Guillaume Endignoux                   ilovezfs&#xA;  Daniel Godas-Lopez                    Franjo Ivancic&#xA;  Austin Seipp                          Daniel Komaromy&#xA;  Daniel Binderman                      Jonathan Metzman&#xA;  Vegard Nossum                         Jan Kneschke&#xA;  Kurt Roeckx                           Marcel Boehme&#xA;  Van-Thuan Pham                        Abhik Roychoudhury&#xA;  Joshua J. Drake                       Toby Hutton&#xA;  Rene Freingruber                      Sergey Davidoff&#xA;  Sami Liedes                           Craig Young&#xA;  Andrzej Jackowski                     Daniel Hodson&#xA;  Nathan Voss                           Dominik Maier&#xA;  Andrea Biondo                         Vincent Le Garrec&#xA;  Khaled Yakdan                         Kuang-che Wu&#xA;  Josephine Calliotte                   Konrad Welc&#xA;  Thomas Rooijakkers                    David Carlier&#xA;  Ruben ten Hove                        Joey Jiao&#xA;  fuzzah                                @intrigus-lgtm&#xA;  Yaakov Saxon                          Sergej Schumilo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Cite&lt;/h2&gt; &#xA;&lt;p&gt;If you use AFL++ in scientific work, consider citing &lt;a href=&#34;https://www.usenix.org/conference/woot20/presentation/fioraldi&#34;&gt;our paper&lt;/a&gt; presented at WOOT&#39;20:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. “AFL++: Combining incremental steps of fuzzing research”. In 14th USENIX Workshop on Offensive Technologies (WOOT 20). USENIX Association, Aug. 2020.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;BibTeX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings {AFLplusplus-Woot20,&#xA;author = {Andrea Fioraldi and Dominik Maier and Heiko Ei{\ss}feldt and Marc Heuse},&#xA;title = {{AFL++}: Combining Incremental Steps of Fuzzing Research},&#xA;booktitle = {14th {USENIX} Workshop on Offensive Technologies ({WOOT} 20)},&#xA;year = {2020},&#xA;publisher = {{USENIX} Association},&#xA;month = aug,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>RsyncProject/rsync</title>
    <updated>2024-04-14T01:47:32Z</updated>
    <id>tag:github.com,2024-04-14:/RsyncProject/rsync</id>
    <link href="https://github.com/RsyncProject/rsync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source utility that provides fast incremental file transfer. It also has useful features for backup and restore operations among many other use cases.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;WHAT IS RSYNC?&lt;/h2&gt; &#xA;&lt;p&gt;Rsync is a fast and extraordinarily versatile file copying tool for both remote and local files.&lt;/p&gt; &#xA;&lt;p&gt;Rsync uses a delta-transfer algorithm which provides a very fast method for bringing remote files into sync. It does this by sending just the differences in the files across the link, without requiring that both sets of files are present at one of the ends of the link beforehand. At first glance this may seem impossible because the calculation of diffs between two files normally requires local access to both files.&lt;/p&gt; &#xA;&lt;p&gt;A technical report describing the rsync algorithm is included with this package.&lt;/p&gt; &#xA;&lt;h2&gt;USAGE&lt;/h2&gt; &#xA;&lt;p&gt;Basically you use rsync just like scp, but rsync has many additional options. To get a complete list of supported options type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rsync --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://download.samba.org/pub/rsync/rsync.1&#34;&gt;manpage&lt;/a&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;h2&gt;BUILDING AND INSTALLING&lt;/h2&gt; &#xA;&lt;p&gt;If you need to build rsync yourself, check out the &lt;a href=&#34;https://github.com/RsyncProject/rsync/raw/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; page for information on what libraries and packages you can use to get the maximum features in your build.&lt;/p&gt; &#xA;&lt;h2&gt;SETUP&lt;/h2&gt; &#xA;&lt;p&gt;Rsync normally uses ssh or rsh for communication with remote systems. It does not need to be setuid and requires no special privileges for installation. You must, however, have a working ssh or rsh system. Using ssh is recommended for its security features.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, rsync can run in `daemon&#39; mode, listening on a socket. This is generally used for public file distribution, although authentication and access control are available.&lt;/p&gt; &#xA;&lt;p&gt;To install rsync, first run the &#34;configure&#34; script. This will create a Makefile and config.h appropriate for your system. Then type &#34;make&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Note that on some systems you will have to force configure not to use gcc because gcc may not support some features (such as 64 bit file offsets) that your system may support. Set the environment variable CC to the name of your native compiler before running configure in this case.&lt;/p&gt; &#xA;&lt;p&gt;Once built put a copy of rsync in your search path on the local and remote systems (or use &#34;make install&#34;). That&#39;s it!&lt;/p&gt; &#xA;&lt;h2&gt;RSYNC DAEMONS&lt;/h2&gt; &#xA;&lt;p&gt;Rsync can also talk to &#34;rsync daemons&#34; which can provide anonymous or authenticated rsync. See the rsyncd.conf(5) manpage for details on how to setup an rsync daemon. See the rsync(1) manpage for info on how to connect to an rsync daemon.&lt;/p&gt; &#xA;&lt;h2&gt;WEB SITE&lt;/h2&gt; &#xA;&lt;p&gt;For more information, visit the &lt;a href=&#34;https://rsync.samba.org/&#34;&gt;main rsync web site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find a FAQ list, downloads, resources, HTML versions of the manpages, etc.&lt;/p&gt; &#xA;&lt;h2&gt;MAILING LISTS&lt;/h2&gt; &#xA;&lt;p&gt;There is a mailing list for the discussion of rsync and its applications that is open to anyone to join. New releases are announced on this list, and there is also an announcement-only mailing list for those that want official announcements. See the &lt;a href=&#34;https://rsync.samba.org/lists.html&#34;&gt;mailing-list page&lt;/a&gt; for full details.&lt;/p&gt; &#xA;&lt;h2&gt;BUG REPORTS&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://rsync.samba.org/bug-tracking.html&#34;&gt;bug-tracking web page&lt;/a&gt; has full details on bug reporting.&lt;/p&gt; &#xA;&lt;p&gt;That page contains links to the current bug list, and information on how to do a good job when reporting a bug. You might also like to try searching the Internet for the error message you&#39;ve received, or looking in the &lt;a href=&#34;https://mail-archive.com/rsync@lists.samba.org/&#34;&gt;mailing list archives&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To send a bug report, follow the instructions on the bug-tracking page of the web site.&lt;/p&gt; &#xA;&lt;p&gt;Alternately, email your bug report to &lt;a href=&#34;mailto:rsync@lists.samba.org&#34;&gt;rsync@lists.samba.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GIT REPOSITORY&lt;/h2&gt; &#xA;&lt;p&gt;If you want to get the very latest version of rsync direct from the source code repository, then you will need to use git. The git repo is hosted &lt;a href=&#34;https://github.com/RsyncProject/rsync&#34;&gt;on GitHub&lt;/a&gt; and &lt;a href=&#34;https://git.samba.org/?p=rsync.git;a=summary&#34;&gt;on Samba&#39;s site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rsync.samba.org/download.html&#34;&gt;the download page&lt;/a&gt; for full details on all the ways to grab the source.&lt;/p&gt; &#xA;&lt;h2&gt;COPYRIGHT&lt;/h2&gt; &#xA;&lt;p&gt;Rsync was originally written by Andrew Tridgell and Paul Mackerras. Many people from around the world have helped to maintain and improve it.&lt;/p&gt; &#xA;&lt;p&gt;Rsync may be used, modified and redistributed only under the terms of the GNU General Public License, found in the file &lt;a href=&#34;https://github.com/RsyncProject/rsync/raw/master/COPYING&#34;&gt;COPYING&lt;/a&gt; in this distribution, or at &lt;a href=&#34;https://www.fsf.org/licenses/gpl.html&#34;&gt;the Free Software Foundation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>