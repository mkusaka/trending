<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-21T01:39:15Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenMathLib/OpenBLAS</title>
    <updated>2024-07-21T01:39:15Z</updated>
    <id>tag:github.com,2024-07-21:/OpenMathLib/OpenBLAS</id>
    <link href="https://github.com/OpenMathLib/OpenBLAS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenBLAS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/xianyi/OpenBLAS?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/xianyi/OpenBLAS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Travis CI: &lt;a href=&#34;https://travis-ci.com/xianyi/OpenBLAS&#34;&gt;&lt;img src=&#34;https://travis-ci.com/xianyi/OpenBLAS.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AppVeyor: &lt;a href=&#34;https://ci.appveyor.com/project/xianyi/openblas/branch/develop&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/09sohd35n8nkkx64/branch/develop?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cirrus CI: &lt;a href=&#34;https://cirrus-ci.com/github/xianyi/OpenBLAS&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/xianyi/OpenBLAS.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Drone CI: [![Build Status](https://cloud.drone.io/api/badges/xianyi/OpenBLAS/status.svg?branch=develop)](https://cloud.drone.io/xianyi/OpenBLAS/)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/xianyi/OpenBLAS/_build/latest?definitionId=1&amp;amp;branchName=develop&#34;&gt;&lt;img src=&#34;https://dev.azure.com/xianyi/OpenBLAS/_apis/build/status/xianyi.OpenBLAS?branchName=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OSUOSL POWERCI &lt;a href=&#34;http://powerci.osuosl.org/job/OpenBLAS_gh/job/develop/&#34;&gt;&lt;img src=&#34;https://powerci.osuosl.org/buildStatus/icon?job=OpenBLAS_gh%2Fdevelop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OSUOSL IBMZ-CI &lt;a href=&#34;http://ibmz-ci.osuosl.org/job/OpenBLAS-Z/job/develop/&#34;&gt;&lt;img src=&#34;http://ibmz-ci.osuosl.org/buildStatus/icon?job=OpenBLAS-Z%2Fdevelop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OpenBLAS is an optimized BLAS (Basic Linear Algebra Subprograms) library based on GotoBLAS2 1.13 BSD version.&lt;/p&gt; &#xA;&lt;p&gt;Please read the documentation on the OpenBLAS wiki pages: &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a general introduction to the BLAS routines, please refer to the extensive documentation of their reference implementation hosted at netlib: &lt;a href=&#34;https://www.netlib.org/blas&#34;&gt;https://www.netlib.org/blas&lt;/a&gt;. On that site you will likewise find documentation for the reference implementation of the higher-level library LAPACK - the &lt;strong&gt;L&lt;/strong&gt;inear &lt;strong&gt;A&lt;/strong&gt;lgebra &lt;strong&gt;Pack&lt;/strong&gt;age that comes included with OpenBLAS. If you are looking for a general primer or refresher on Linear Algebra, the set of six 20-minute lecture videos by Prof. Gilbert Strang on either MIT OpenCourseWare &lt;a href=&#34;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/&#34;&gt;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/&lt;/a&gt; or Youtube &lt;a href=&#34;https://www.youtube.com/playlist?list=PLUl4u3cNGP61iQEFiWLE21EJCxwmWvvek&#34;&gt;https://www.youtube.com/playlist?list=PLUl4u3cNGP61iQEFiWLE21EJCxwmWvvek&lt;/a&gt; may be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Binary Packages&lt;/h2&gt; &#xA;&lt;p&gt;We provide official binary packages for the following platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows x86/x86_64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can download them from &lt;a href=&#34;https://sourceforge.net/projects/openblas/files/&#34;&gt;file hosting on sourceforge.net&lt;/a&gt; or from the Releases section of the github project page, &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/releases&#34;&gt;https://github.com/xianyi/OpenBLAS/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from Source&lt;/h2&gt; &#xA;&lt;p&gt;Download from project homepage, &lt;a href=&#34;https://xianyi.github.com/OpenBLAS/&#34;&gt;https://xianyi.github.com/OpenBLAS/&lt;/a&gt;, or check out the code using Git from &lt;a href=&#34;https://github.com/xianyi/OpenBLAS.git&#34;&gt;https://github.com/xianyi/OpenBLAS.git&lt;/a&gt;. (If you want the most up to date version, be sure to use the develop branch - master is several years out of date due to a change of maintainership.) Buildtime parameters can be chosen in Makefile.rule, see there for a short description of each option. Most can also be given directly on the make or cmake command line.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Building OpenBLAS requires the following to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;A C compiler, e.g. GCC or Clang&lt;/li&gt; &#xA; &lt;li&gt;A Fortran compiler (optional, for LAPACK)&lt;/li&gt; &#xA; &lt;li&gt;IBM MASS (optional, see below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Normal compile&lt;/h3&gt; &#xA;&lt;p&gt;Simply invoking &lt;code&gt;make&lt;/code&gt; (or &lt;code&gt;gmake&lt;/code&gt; on BSD) will detect the CPU automatically. To set a specific target CPU, use &lt;code&gt;make TARGET=xxx&lt;/code&gt;, e.g. &lt;code&gt;make TARGET=NEHALEM&lt;/code&gt;. The full target list is in the file &lt;code&gt;TargetList.txt&lt;/code&gt;, other build optionss are documented in Makefile.rule and can either be set there (typically by removing the comment character from the respective line), or used on the &lt;code&gt;make&lt;/code&gt; command line. Note that when you run &lt;code&gt;make install&lt;/code&gt; after building, you need to repeat all command line options you provided to &lt;code&gt;make&lt;/code&gt; in the build step, as some settings like the supported maximum number of threads are automatically derived from the build host by default, which might not be what you want. For building with &lt;code&gt;cmake&lt;/code&gt;, the usual conventions apply, i.e. create a build directory either underneath the toplevel OpenBLAS source directory or separate from it, and invoke &lt;code&gt;cmake&lt;/code&gt; there with the path to the source tree and any build options you plan to set.&lt;/p&gt; &#xA;&lt;h3&gt;Cross compile&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;FC&lt;/code&gt; to point to the cross toolchains, and set &lt;code&gt;HOSTCC&lt;/code&gt; to your host C compiler. The target must be specified explicitly when cross compiling.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On an x86 box, compile this library for a loongson3a CPU:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make BINARY=64 CC=mips64el-unknown-linux-gnu-gcc FC=mips64el-unknown-linux-gnu-gfortran HOSTCC=gcc TARGET=LOONGSON3A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or same with the newer mips-crosscompiler put out by Loongson that defaults to the 32bit ABI:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc CC=&#39;/opt/mips-loongson-gcc7.3-linux-gnu/2019.06-29/bin/mips-linux-gnu-gcc -mabi=64&#39; FC=&#39;/opt/mips-loongson-gcc7.3-linux-gnu/2019.06-29/bin/mips-linux-gnu-gfortran -mabi=64&#39; TARGET=LOONGSON3A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On an x86 box, compile this library for a loongson3a CPU with loongcc (based on Open64) compiler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make CC=loongcc FC=loongf95 HOSTCC=gcc TARGET=LOONGSON3A CROSS=1 CROSS_SUFFIX=mips64el-st-linux-gnu-   NO_LAPACKE=1 NO_SHARED=1 BINARY=32&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debug version&lt;/h3&gt; &#xA;&lt;p&gt;A debug version can be built using &lt;code&gt;make DEBUG=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compile with MASS support on Power CPU (optional)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ibm.com/support/home/product/W511326D80541V01/other_software/mathematical_acceleration_subsystem&#34;&gt;IBM MASS&lt;/a&gt; library consists of a set of mathematical functions for C, C++, and Fortran applications that are tuned for optimum performance on POWER architectures. OpenBLAS with MASS requires a 64-bit, little-endian OS on POWER. The library can be installed as shown:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -q http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/public.gpg -O- | sudo apt-key add -&#xA;echo &#34;deb http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/ trusty main&#34; | sudo tee /etc/apt/sources.list.d/ibm-xl-compiler-eval.list&#xA;sudo apt-get update&#xA;sudo apt-get install libxlmass-devel.8.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On RHEL/CentOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/repodata/repomd.xml.key&#xA;sudo rpm --import repomd.xml.key&#xA;wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/ibm-xl-compiler-eval.repo&#xA;sudo cp ibm-xl-compiler-eval.repo /etc/yum.repos.d/&#xA;sudo yum install libxlmass-devel.8.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing the MASS library, compile OpenBLAS with &lt;code&gt;USE_MASS=1&lt;/code&gt;. For example, to compile on Power8 with MASS support: &lt;code&gt;make USE_MASS=1 TARGET=POWER8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install to a specific directory (optional)&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;PREFIX=&lt;/code&gt; when invoking &lt;code&gt;make&lt;/code&gt;, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make install PREFIX=your_installation_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(along with all options you added on the &lt;code&gt;make&lt;/code&gt; command line in the preceding build step) The default installation directory is &lt;code&gt;/opt/OpenBLAS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported CPUs and Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;code&gt;GotoBLAS_01Readme.txt&lt;/code&gt; for older CPU models already supported by the 2010 GotoBLAS.&lt;/p&gt; &#xA;&lt;h3&gt;Additional supported CPUs&lt;/h3&gt; &#xA;&lt;h4&gt;x86/x86-64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Xeon 56xx (Westmere)&lt;/strong&gt;: Used GotoBLAS2 Nehalem codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Sandy Bridge&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Haswell&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX2 and FMA on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Skylake-X&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX512 and FMA on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Cooper Lake&lt;/strong&gt;: as Skylake-X with improved BFLOAT16 support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD Bobcat&lt;/strong&gt;: Used GotoBLAS2 Barcelona codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD Bulldozer&lt;/strong&gt;: x86-64 ?GEMM FMA4 kernels. (Thanks to Werner Saar)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD PILEDRIVER&lt;/strong&gt;: Uses Bulldozer codes with some optimizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD STEAMROLLER&lt;/strong&gt;: Uses Bulldozer codes with some optimizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD ZEN&lt;/strong&gt;: Uses Haswell codes with some optimizations for Zen 2/3 (use SkylakeX for Zen4)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MIPS32&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS 1004K&lt;/strong&gt;: uses P5600 codes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS 24K&lt;/strong&gt;: uses P5600 codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MIPS64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ICT Loongson 3A&lt;/strong&gt;: Optimized Level-3 BLAS and the part of Level-1,2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ICT Loongson 3B&lt;/strong&gt;: Experimental&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ARM&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv6&lt;/strong&gt;: Optimized BLAS for vfpv2 and vfpv3-d16 (e.g. BCM2835, Cortex M0+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv7&lt;/strong&gt;: Optimized BLAS for vfpv3-d32 (e.g. Cortex A8, A9 and A15)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ARM64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv8&lt;/strong&gt;: Basic ARMV8 with small caches, optimized Level-3 and Level-2 BLAS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-A53&lt;/strong&gt;: same as ARMV8 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-A55&lt;/strong&gt;: same as ARMV8 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A57&lt;/strong&gt;: Optimized Level-3 and Level-2 functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A72&lt;/strong&gt;: same as A57 ( different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A73&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A76&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Falkor&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX&lt;/strong&gt;: Optimized some Level-1 functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX2T99&lt;/strong&gt;: Optimized Level-3 BLAS and parts of Levels 1 and 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX3T110&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TSV110&lt;/strong&gt;: Optimized some Level-3 helper functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EMAG 8180&lt;/strong&gt;: preliminary support based on A57&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neoverse N1&lt;/strong&gt;: (AWS Graviton2) preliminary support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neoverse V1&lt;/strong&gt;: (AWS Graviton3) optimized Level-3 BLAS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Apple Vortex&lt;/strong&gt;: preliminary support based on ThunderX2/3&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A64FX&lt;/strong&gt;: preliminary support, optimized Level-3 BLAS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMV8SVE&lt;/strong&gt;: any ARMV8 cpu with SVE extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PPC/PPC64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;POWER8&lt;/strong&gt;: Optimized BLAS, only for PPC64LE (Little Endian), only with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;POWER9&lt;/strong&gt;: Optimized Level-3 BLAS (real) and some Level-1,2. PPC64LE with OpenMP only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;POWER10&lt;/strong&gt;: Optimized Level-3 BLAS including SBGEMM and some Level-1,2.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AIX&lt;/strong&gt;: Dynamic architecture with OpenXL and OpenMP.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make CC=ibm-clang_r FC=xlf_r TARGET=POWER7 BINARY=64 USE_OPENMP=1 INTERFACE64=1 DYNAMIC_ARCH=1 USE_THREAD=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IBM zEnterprise System&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Z13&lt;/strong&gt;: Optimized Level-3 BLAS and Level-1,2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Z14&lt;/strong&gt;: Optimized Level-3 BLAS and (single precision) Level-1,2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;RISC-V&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;C910V&lt;/strong&gt;: Optimized Level-3 BLAS (real) and Level-1,2 by RISC-V Vector extension 0.7.1.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc TARGET=C910V CC=riscv64-unknown-linux-gnu-gcc FC=riscv64-unknown-linux-gnu-gfortran&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(also known to work on C906 as long as you use only single-precision functions - its instruction set support appears to be incomplete in double precision)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;x280&lt;/strong&gt;: Level-3 BLAS and Level-1,2 are optimized by RISC-V Vector extension 1.0.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc TARGET=x280 NUM_THREADS=8 CC=riscv64-unknown-linux-gnu-clang FC=riscv64-unknown-linux-gnu-gfortran&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ZVL???B&lt;/strong&gt;: Level-3 BLAS and Level-1,2 including vectorised kernels targeting generic RISCV cores with vector support with registers of at least the corresponding width; ZVL128B and ZVL256B are available. e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  make TARGET=RISCV64_ZVL256B CFLAGS=&#34;-DTARGET=RISCV64_ZVL256B&#34; \&#xA;  BINARY=64 ARCH=riscv64 CC=&#39;clang -target riscv64-unknown-linux-gnu&#39; \&#xA;  AR=riscv64-unknown-linux-gnu-ar AS=riscv64-unknown-linux-gnu-gcc \&#xA;  LD=riscv64-unknown-linux-gnu-gcc FC=riscv64-unknown-linux-gnu-gfortran \&#xA;  HOSTCC=gcc HOSTFC=gfortran -j&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support for multiple targets in a single library&lt;/h3&gt; &#xA;&lt;p&gt;OpenBLAS can be built for multiple targets with runtime detection of the target cpu by specifiying &lt;code&gt;DYNAMIC_ARCH=1&lt;/code&gt; in Makefile.rule, on the gmake command line or as &lt;code&gt;-DDYNAMIC_ARCH=TRUE&lt;/code&gt; in cmake.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;x86_64&lt;/strong&gt;, the list of targets this activates contains Prescott, Core2, Nehalem, Barcelona, Sandybridge, Bulldozer, Piledriver, Steamroller, Excavator, Haswell, Zen, SkylakeX, Cooper Lake, Sapphire Rapids. For cpu generations not included in this list, the corresponding older model is used. If you also specify &lt;code&gt;DYNAMIC_OLDER=1&lt;/code&gt;, specific support for Penryn, Dunnington, Opteron, Opteron/SSE3, Bobcat, Atom and Nano is added. Finally there is an option &lt;code&gt;DYNAMIC_LIST&lt;/code&gt; that allows to specify an individual list of targets to include instead of the default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DYNAMIC_ARCH&lt;/code&gt; is also supported on &lt;strong&gt;x86&lt;/strong&gt;, where it translates to Katmai, Coppermine, Northwood, Prescott, Banias, Core2, Penryn, Dunnington, Nehalem, Athlon, Opteron, Opteron_SSE3, Barcelona, Bobcat, Atom and Nano.&lt;/p&gt; &#xA;&lt;p&gt;On &lt;strong&gt;ARMV8&lt;/strong&gt;, it enables support for CortexA53, CortexA57, CortexA72, CortexA73, Falkor, ThunderX, ThunderX2T99, TSV110 as well as generic ARMV8 cpus. If compiler support for SVE is available at build time, support for NeoverseN2, NeoverseV1 as well as generic ArmV8SVE targets is also enabled.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;POWER&lt;/strong&gt;, the list encompasses POWER6, POWER8 and POWER9. POWER10 is additionally available if a sufficiently recent compiler is used for the build.&lt;/p&gt; &#xA;&lt;p&gt;on &lt;strong&gt;ZARCH&lt;/strong&gt; it comprises Z13 and Z14 as well as generic zarch support.&lt;/p&gt; &#xA;&lt;p&gt;On &lt;strong&gt;riscv64&lt;/strong&gt;, DYNAMIC_ARCH enables support for riscv64_zvl128b and riscv64_zvl256b in addition to generic riscv64 support. A compiler that supports RVV 1.0 is required to build OpenBLAS for riscv64 when DYNAMIC_ARCH is enabled.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;TARGET&lt;/code&gt; option can be used in conjunction with &lt;code&gt;DYNAMIC_ARCH=1&lt;/code&gt; to specify which cpu model should be assumed for all the common code in the library, usually you will want to set this to the oldest model you expect to encounter. Please note that it is not possible to combine support for different architectures, so no combined 32 and 64 bit or x86_64 and arm64 in the same library.&lt;/p&gt; &#xA;&lt;h3&gt;Supported OS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GNU/Linux&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MinGW or Visual Studio (CMake)/Windows&lt;/strong&gt;: Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Darwin/macOS/OSX/iOS&lt;/strong&gt;: Experimental. Although GotoBLAS2 already supports Darwin, we are not OSX/iOS experts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DragonFly BSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: Supported by the community. Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AIX&lt;/strong&gt;: Supported on PPC up to POWER10&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Haiku&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SunOS&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-M&lt;/strong&gt;: Supported by the community. Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-on-Cortex-M&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-on-Cortex-M&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Statically link with &lt;code&gt;libopenblas.a&lt;/code&gt; or dynamically link with &lt;code&gt;-lopenblas&lt;/code&gt; if OpenBLAS was compiled as a shared library.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the number of threads using environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Environment variables are used to specify a maximum number of threads. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OPENBLAS_NUM_THREADS=4&#xA;export GOTO_NUM_THREADS=4&#xA;export OMP_NUM_THREADS=4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The priorities are &lt;code&gt;OPENBLAS_NUM_THREADS&lt;/code&gt; &amp;gt; &lt;code&gt;GOTO_NUM_THREADS&lt;/code&gt; &amp;gt; &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you compile this library with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;, you should set the &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt; environment variable; OpenBLAS ignores &lt;code&gt;OPENBLAS_NUM_THREADS&lt;/code&gt; and &lt;code&gt;GOTO_NUM_THREADS&lt;/code&gt; when compiled with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the number of threads at runtime&lt;/h3&gt; &#xA;&lt;p&gt;We provide the following functions to control the number of threads at runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void goto_set_num_threads(int num_threads);&#xA;void openblas_set_num_threads(int num_threads);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these are only used once at library initialization, and are not available for fine-tuning thread numbers in individual BLAS calls. If you compile this library with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;, you should use the above functions too.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please submit an issue in &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/issues&#34;&gt;https://github.com/xianyi/OpenBLAS/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenBLAS users mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/openblas-users&#34;&gt;https://groups.google.com/forum/#!forum/openblas-users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenBLAS developers mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/openblas-dev&#34;&gt;https://groups.google.com/forum/#!forum/openblas-dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see Changelog.txt to view the differences between OpenBLAS and GotoBLAS2 1.13 BSD version.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/Faq&#34;&gt;FAQ&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;Please use GCC version 4.6 and above to compile Sandy Bridge AVX kernels on Linux/MinGW/BSD.&lt;/li&gt; &#xA; &lt;li&gt;Please use Clang version 3.1 and above to compile the library on Sandy Bridge microarchitecture. Clang 3.0 will generate the wrong AVX binary code.&lt;/li&gt; &#xA; &lt;li&gt;Please use GCC version 6 or LLVM version 6 and above to compile Skylake AVX512 kernels.&lt;/li&gt; &#xA; &lt;li&gt;The number of CPUs/cores should be less than or equal to 256. On Linux &lt;code&gt;x86_64&lt;/code&gt; (&lt;code&gt;amd64&lt;/code&gt;), there is experimental support for up to 1024 CPUs/cores and 128 numa nodes if you build the library with &lt;code&gt;BIGNUMA=1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;OpenBLAS does not set processor affinity by default. On Linux, you can enable processor affinity by commenting out the line &lt;code&gt;NO_AFFINITY=1&lt;/code&gt; in Makefile.rule. However, note that this may cause &lt;a href=&#34;https://stat.ethz.ch/pipermail/r-sig-hpc/2012-April/001348.html&#34;&gt;a conflict with R parallel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Loongson 3A, &lt;code&gt;make test&lt;/code&gt; may fail with a &lt;code&gt;pthread_create&lt;/code&gt; error (&lt;code&gt;EAGAIN&lt;/code&gt;). However, it will be okay when you run the same test case on the shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xianyi/OpenBLAS/issues&#34;&gt;Check for open issues&lt;/a&gt; or open a fresh issue to start a discussion around a feature idea or a bug.&lt;/li&gt; &#xA; &lt;li&gt;Fork the &lt;a href=&#34;https://github.com/xianyi/OpenBLAS&#34;&gt;OpenBLAS&lt;/a&gt; repository to start making your changes.&lt;/li&gt; &#xA; &lt;li&gt;Write a test which shows that the bug was fixed or that the feature works as expected.&lt;/li&gt; &#xA; &lt;li&gt;Send a pull request. Make sure to add yourself to &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/Donation&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libarchive/libarchive</title>
    <updated>2024-07-21T01:39:15Z</updated>
    <id>tag:github.com,2024-07-21:/libarchive/libarchive</id>
    <link href="https://github.com/libarchive/libarchive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-format archive and compression library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to libarchive!&lt;/h1&gt; &#xA;&lt;p&gt;The libarchive project develops a portable, efficient C library that can read and write streaming archives in a variety of formats. It also includes implementations of the common &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;cpio&lt;/code&gt;, and &lt;code&gt;zcat&lt;/code&gt; command-line tools that use the libarchive library.&lt;/p&gt; &#xA;&lt;h2&gt;Questions? Issues?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libarchive.org&#34;&gt;https://www.libarchive.org&lt;/a&gt; is the home for ongoing libarchive development, including documentation, and links to the libarchive mailing lists.&lt;/li&gt; &#xA; &lt;li&gt;To report an issue, use the issue tracker at &lt;a href=&#34;https://github.com/libarchive/libarchive/issues&#34;&gt;https://github.com/libarchive/libarchive/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To submit an enhancement to libarchive, please submit a pull request via GitHub: &lt;a href=&#34;https://github.com/libarchive/libarchive/pulls&#34;&gt;https://github.com/libarchive/libarchive/pulls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents of the Distribution&lt;/h2&gt; &#xA;&lt;p&gt;This distribution bundle includes the following major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;libarchive&lt;/strong&gt;: a library for reading and writing streaming archives&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tar&lt;/strong&gt;: the &#39;bsdtar&#39; program is a full-featured &#39;tar&#39; implementation built on libarchive&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cpio&lt;/strong&gt;: the &#39;bsdcpio&#39; program is a different interface to essentially the same functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt;: the &#39;bsdcat&#39; program is a simple replacement tool for zcat, bzcat, xzcat, and such&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;unzip&lt;/strong&gt;: the &#39;bsdunzip&#39; program is a simple replacement tool for Info-ZIP&#39;s unzip&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;examples&lt;/strong&gt;: Some small example programs that you may find useful.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;examples/minitar&lt;/strong&gt;: a compact sample demonstrating use of libarchive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;contrib&lt;/strong&gt;: Various items sent to me by third parties; please contact the authors with any questions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The top-level directory contains the following information files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEWS&lt;/strong&gt; - highlights of recent changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;COPYING&lt;/strong&gt; - what you can do with this&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;INSTALL&lt;/strong&gt; - installation instructions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;README&lt;/strong&gt; - this file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMakeLists.txt&lt;/strong&gt; - input for &#34;cmake&#34; build tool, see INSTALL&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;configure&lt;/strong&gt; - configuration script, see INSTALL for details. If your copy of the source lacks a &lt;code&gt;configure&lt;/code&gt; script, you can try to construct it by running the script in &lt;code&gt;build/autogen.sh&lt;/code&gt; (or use &lt;code&gt;cmake&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following files in the top-level directory are used by the &#39;configure&#39; script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Makefile.am&lt;/code&gt;, &lt;code&gt;aclocal.m4&lt;/code&gt;, &lt;code&gt;configure.ac&lt;/code&gt; - used to build this distribution, only needed by maintainers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Makefile.in&lt;/code&gt;, &lt;code&gt;config.h.in&lt;/code&gt; - templates used by configure script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the informational articles and documentation in the online &lt;a href=&#34;https://github.com/libarchive/libarchive/wiki&#34;&gt;libarchive Wiki&lt;/a&gt;, the distribution also includes a number of manual pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bsdtar.1 explains the use of the bsdtar program&lt;/li&gt; &#xA; &lt;li&gt;bsdcpio.1 explains the use of the bsdcpio program&lt;/li&gt; &#xA; &lt;li&gt;bsdcat.1 explains the use of the bsdcat program&lt;/li&gt; &#xA; &lt;li&gt;libarchive.3 gives an overview of the library as a whole&lt;/li&gt; &#xA; &lt;li&gt;archive_read.3, archive_write.3, archive_write_disk.3, and archive_read_disk.3 provide detailed calling sequences for the read and write APIs&lt;/li&gt; &#xA; &lt;li&gt;archive_entry.3 details the &#34;struct archive_entry&#34; utility class&lt;/li&gt; &#xA; &lt;li&gt;archive_internals.3 provides some insight into libarchive&#39;s internal structure and operation.&lt;/li&gt; &#xA; &lt;li&gt;libarchive-formats.5 documents the file formats supported by the library&lt;/li&gt; &#xA; &lt;li&gt;cpio.5, mtree.5, and tar.5 provide detailed information about these popular archive formats, including hard-to-find details about modern cpio and tar variants.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The manual pages above are provided in the &#39;doc&#39; directory in a number of different formats.&lt;/p&gt; &#xA;&lt;p&gt;You should also read the copious comments in &lt;code&gt;archive.h&lt;/code&gt; and the source code for the sample programs for more details. Please let us know about any errors or omissions you find.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Formats&lt;/h2&gt; &#xA;&lt;p&gt;Currently, the library automatically detects and reads the following formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Old V7 tar archives&lt;/li&gt; &#xA; &lt;li&gt;POSIX ustar&lt;/li&gt; &#xA; &lt;li&gt;GNU tar format (including GNU long filenames, long link names, and sparse files)&lt;/li&gt; &#xA; &lt;li&gt;Solaris 9 extended tar format (including ACLs)&lt;/li&gt; &#xA; &lt;li&gt;POSIX pax interchange format&lt;/li&gt; &#xA; &lt;li&gt;POSIX octet-oriented cpio&lt;/li&gt; &#xA; &lt;li&gt;SVR4 ASCII cpio&lt;/li&gt; &#xA; &lt;li&gt;Binary cpio (big-endian or little-endian)&lt;/li&gt; &#xA; &lt;li&gt;PWB binary cpio&lt;/li&gt; &#xA; &lt;li&gt;ISO9660 CD-ROM images (with optional Rockridge or Joliet extensions)&lt;/li&gt; &#xA; &lt;li&gt;ZIP archives (with uncompressed or &#34;deflate&#34; compressed entries, including support for encrypted Zip archives)&lt;/li&gt; &#xA; &lt;li&gt;ZIPX archives (with support for bzip2, ppmd8, lzma and xz compressed entries)&lt;/li&gt; &#xA; &lt;li&gt;GNU and BSD &#39;ar&#39; archives&lt;/li&gt; &#xA; &lt;li&gt;&#39;mtree&#39; format&lt;/li&gt; &#xA; &lt;li&gt;7-Zip archives (including archives that use zstandard compression)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft CAB format&lt;/li&gt; &#xA; &lt;li&gt;LHA and LZH archives&lt;/li&gt; &#xA; &lt;li&gt;RAR and RAR 5.0 archives (with some limitations due to RAR&#39;s proprietary status)&lt;/li&gt; &#xA; &lt;li&gt;XAR archives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library also detects and handles any of the following before evaluating the archive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uuencoded files&lt;/li&gt; &#xA; &lt;li&gt;files with RPM wrapper&lt;/li&gt; &#xA; &lt;li&gt;gzip compression&lt;/li&gt; &#xA; &lt;li&gt;bzip2 compression&lt;/li&gt; &#xA; &lt;li&gt;compress/LZW compression&lt;/li&gt; &#xA; &lt;li&gt;lzma, lzip, and xz compression&lt;/li&gt; &#xA; &lt;li&gt;lz4 compression&lt;/li&gt; &#xA; &lt;li&gt;lzop compression&lt;/li&gt; &#xA; &lt;li&gt;zstandard compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library can create archives in any of the following formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;POSIX ustar&lt;/li&gt; &#xA; &lt;li&gt;POSIX pax interchange format&lt;/li&gt; &#xA; &lt;li&gt;&#34;restricted&#34; pax format, which will create ustar archives except for entries that require pax extensions (for long filenames, ACLs, etc).&lt;/li&gt; &#xA; &lt;li&gt;Old GNU tar format&lt;/li&gt; &#xA; &lt;li&gt;Old V7 tar format&lt;/li&gt; &#xA; &lt;li&gt;POSIX octet-oriented cpio&lt;/li&gt; &#xA; &lt;li&gt;SVR4 &#34;newc&#34; cpio&lt;/li&gt; &#xA; &lt;li&gt;Binary cpio (little-endian)&lt;/li&gt; &#xA; &lt;li&gt;PWB binary cpio&lt;/li&gt; &#xA; &lt;li&gt;shar archives&lt;/li&gt; &#xA; &lt;li&gt;ZIP archives (with uncompressed or &#34;deflate&#34; compressed entries)&lt;/li&gt; &#xA; &lt;li&gt;GNU and BSD &#39;ar&#39; archives&lt;/li&gt; &#xA; &lt;li&gt;&#39;mtree&#39; format&lt;/li&gt; &#xA; &lt;li&gt;ISO9660 format&lt;/li&gt; &#xA; &lt;li&gt;7-Zip archives&lt;/li&gt; &#xA; &lt;li&gt;XAR archives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When creating archives, the result can be filtered with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uuencode&lt;/li&gt; &#xA; &lt;li&gt;gzip compression&lt;/li&gt; &#xA; &lt;li&gt;bzip2 compression&lt;/li&gt; &#xA; &lt;li&gt;compress/LZW compression&lt;/li&gt; &#xA; &lt;li&gt;lzma, lzip, and xz compression&lt;/li&gt; &#xA; &lt;li&gt;lz4 compression&lt;/li&gt; &#xA; &lt;li&gt;lzop compression&lt;/li&gt; &#xA; &lt;li&gt;zstandard compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes about the Library Design&lt;/h2&gt; &#xA;&lt;p&gt;The following notes address many of the most common questions we are asked about libarchive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is a heavily stream-oriented system. That means that it is optimized to read or write the archive in a single pass from beginning to end. For example, this allows libarchive to process archives too large to store on disk by processing them on-the-fly as they are read from or written to a network or tape drive. This also makes libarchive useful for tools that need to produce archives on-the-fly (such as webservers that provide archived contents of a users account).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In-place modification and random access to the contents of an archive are not directly supported. For some formats, this is not an issue: For example, tar.gz archives are not designed for random access. In some other cases, libarchive can re-open an archive and scan it from the beginning quickly enough to provide the needed abilities even without true random access. Of course, some applications do require true random access; those applications should consider alternatives to libarchive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The library is designed to be extended with new compression and archive formats. The only requirement is that the format be readable or writable as a stream and that each archive entry be independent. There are articles on the libarchive Wiki explaining how to extend libarchive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On read, compression and format are always detected automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The same API is used for all formats; it should be very easy for software using libarchive to transparently handle any of libarchive&#39;s archiving formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Libarchive&#39;s automatic support for decompression can be used without archiving by explicitly selecting the &#34;raw&#34; and &#34;empty&#34; formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I&#39;ve attempted to minimize static link pollution. If you don&#39;t explicitly invoke a particular feature (such as support for a particular compression or format), it won&#39;t get pulled in to statically-linked programs. In particular, if you don&#39;t explicitly enable a particular compression or decompression support, you won&#39;t need to link against the corresponding compression or decompression libraries. This also reduces the size of statically-linked binaries in environments where that matters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The library is generally &lt;em&gt;thread safe&lt;/em&gt; depending on the platform: it does not define any global variables of its own. However, some platforms do not provide fully thread-safe versions of key C library functions. On those platforms, libarchive will use the non-thread-safe functions. Patches to improve this are of great interest to us.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The function &lt;code&gt;archive_write_disk_header()&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; thread safe on POSIX machines and could lead to security issue resulting in world writeable directories. Thus it must be mutexed by the calling code. This is due to calling &lt;code&gt;umask(oldumask = umask(0))&lt;/code&gt;, which sets the umask for the whole process to 0 for a short time frame. In case other thread calls the same function in parallel, it might get interrupted by it and cause the executable to use umask=0 for the remaining execution. This will then lead to implicitly created directories to have 777 permissions without sticky bit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In particular, libarchive&#39;s modules to read or write a directory tree do use &lt;code&gt;chdir()&lt;/code&gt; to optimize the directory traversals. This can cause problems for programs that expect to do disk access from multiple threads. Of course, those modules are completely optional and you can use the rest of libarchive without them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The library is &lt;em&gt;not&lt;/em&gt; thread aware, however. It does no locking or thread management of any kind. If you create a libarchive object and need to access it from multiple threads, you will need to provide your own locking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On read, the library accepts whatever blocks you hand it. Your read callback is free to pass the library a byte at a time or mmap the entire archive and give it to the library at once. On write, the library always produces correctly-blocked output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The object-style approach allows you to have multiple archive streams open at once. bsdtar uses this in its &#34;@archive&#34; extension.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The archive itself is read/written using callback functions. You can read an archive directly from an in-memory buffer or write it to a socket, if you wish. There are some utility functions to provide easy-to-use &#34;open file,&#34; etc, capabilities.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The read/write APIs are designed to allow individual entries to be read or written to any data source: You can create a block of data in memory and add it to a tar archive without first writing a temporary file. You can also read an entry from an archive and write the data directly to a socket. If you want to read/write entries to disk, there are convenience functions to make this especially easy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note: The &#34;pax interchange format&#34; is a POSIX standard extended tar format that should be used when the older &lt;em&gt;ustar&lt;/em&gt; format is not appropriate. It has many advantages over other tar formats (including the legacy GNU tar format) and is widely supported by current tar implementations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>radareorg/radare2</title>
    <updated>2024-07-21T01:39:15Z</updated>
    <id>tag:github.com,2024-07-21:/radareorg/radare2</id>
    <link href="https://github.com/radareorg/radare2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UNIX-like reverse engineering framework and command-line toolset&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://radare.org/&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/doc/images/r2emoji.png&#34; alt=&#34;screenshot&#34; align=&#34;left&#34; width=&#34;128px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Radare2: Libre Reversing Framework for Unix Geeks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/latest-versions/radare2.svg?sanitize=true&#34; alt=&#34;Latest packaged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/radareorg/radare2/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/radareorg/radare2/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Tests Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/radareorg/radare2/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/radareorg/radare2/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/radareorg/radare2/actions/workflows/tcc.yml&#34;&gt;&lt;img src=&#34;https://github.com/radareorg/radare2/actions/workflows/tcc.yml/badge.svg?branch=master&#34; alt=&#34;tcc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/741&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/741/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/416&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/416/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YBey7CR9jf&#34;&gt;&lt;img src=&#34;https://badgen.net/discord/members/YBey7CR9jf&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/radareorg/radare2/releases&#34;&gt;Releases&lt;/a&gt; page for downloads. The current git &lt;code&gt;master&lt;/code&gt; branch is &lt;code&gt;5.9.3&lt;/code&gt;, next will be &lt;code&gt;5.9.4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since r2-5.6.0 all the patch releases are &lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/doc/abi.md&#34;&gt;abi stable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Odd patch versions are used in git builds only, releases use even numbers&lt;/li&gt; &#xA; &lt;li&gt;No need to recompile the plugins, bindings or tools if the major and minor version are the same&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;r2 is a complete rewrite of radare. It provides a set of libraries, tools and plugins to ease reverse engineering tasks. Distributed mostly under LGPLv3, each plugin can have different licenses (see r2 -L, rasm2 -L, ...).&lt;/p&gt; &#xA;&lt;p&gt;The radare project started as a simple command-line hexadecimal editor focused on forensics. Today, r2 is a featureful low-level command-line tool with support for scripting with the embedded Javascript interpreter or via r2pipe.&lt;/p&gt; &#xA;&lt;p&gt;r2 can edit files on local hard drives, view kernel memory, and debug programs locally or via a remote gdb/windbg servers. r2&#39;s wide architecture support allows you to analyze, emulate, debug, modify, and disassemble any binary.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.radare.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/doc/images/shot.png&#34; alt=&#34;screenshot&#34; align=&#34;center&#34; border=&#34;0&#34; width=&#34;600px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install radare2 is via Git using acr/make or meson:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/radareorg/radare2&#xA;radare2/sys/install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows you may want to use the precompiled builds or the .bat files to compile if you have msvc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;preconfigure.bat       REM setup python, meson, ninja&#xA;configure.bat          REM run meson b + vs project&#xA;make.bat               REM run ninja -C b&#xA;prefix\bin\radare2.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;r2 can be installed from &lt;code&gt;git&lt;/code&gt; or via &lt;code&gt;pip&lt;/code&gt; using &lt;code&gt;r2env&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sys/install.sh&lt;/code&gt; for the default acr+make+symlink installation&lt;/li&gt; &#xA; &lt;li&gt;meson/ninja (muon/samu also works) and make builds are supported.&lt;/li&gt; &#xA; &lt;li&gt;Windows builds require meson and msvc or mingw as compilers&lt;/li&gt; &#xA; &lt;li&gt;To uninstall the current build of r2 run &lt;code&gt;make uninstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To uninstall ALL the system installations of r2 do: &lt;code&gt;sudo make purge&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Popular Plugins:&lt;/h2&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;r2pm&lt;/code&gt; tool you can browse and install many plugins and tools that use radare2.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/esilsolve&#34;&gt;esilsolve&lt;/a&gt;: The symbolic execution plugin, based on esil and z3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/iaito&#34;&gt;iaito&lt;/a&gt;: The official Qt graphical interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/radare2-extras/tree/master/keystone&#34;&gt;keystone&lt;/a&gt; Assembler instructions using the Keystone library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/r2ai&#34;&gt;r2ai&lt;/a&gt; Run a Language Model in localhost with Llama inside r2!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wargio/r2dec-js&#34;&gt;r2dec&lt;/a&gt;: A decompiler based on r2 written in JS, accessed with the &lt;code&gt;pdd&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FernandoDoming/r2diaphora&#34;&gt;r2diaphora&lt;/a&gt;: &lt;a href=&#34;https://github.com/joxeankoret/diaphora&#34;&gt;Diaphora&lt;/a&gt;&#39;s binary diffing engine on top of radare2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nowsecure/r2frida&#34;&gt;r2frida&lt;/a&gt;: The frida io plugin. Start r2 with &lt;code&gt;r2 frida://0&lt;/code&gt; to use it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/r2ghidra&#34;&gt;r2ghidra&lt;/a&gt;: The standalone native ghidra decompiler accessible with &lt;code&gt;pdg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/radare2-r2papi&#34;&gt;r2papi&lt;/a&gt; High level api on top of r2pipe&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/radare2-r2pipe&#34;&gt;r2pipe&lt;/a&gt; Script radare2 from any programming language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/radare2-extras/tree/master/r2poke&#34;&gt;r2poke&lt;/a&gt; Integration with GNU/Poke for extended binary parsing capabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hanemile/radare2-GoReSym&#34;&gt;goresym&lt;/a&gt;: Import GoReSym symbol as flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/r2yara&#34;&gt;r2yara&lt;/a&gt; Run Yara from r2 or use r2 primitives from Yara&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nowsecure/radius2&#34;&gt;radius2&lt;/a&gt;: A fast symbolic execution engine based on boolector and esil&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/r2sarif&#34;&gt;r2sarif&lt;/a&gt; import/extend/export SARIF documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;These are the first steps to use r2, read the book or find tutorials for more details&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ r2 /bin/ls   # open file in read-only&#xA;&amp;gt; aaa          # analyse the program (r2 -A)&#xA;&amp;gt; afl          # list all functions (try aflt, aflm)&#xA;&amp;gt; px 32        # print 32 byte hexdump current block&#xA;&amp;gt; s sym.main   # seek to main (using flag name)&#xA;&amp;gt; f~foo        # filter flags matching &#39;foo&#39; (internal |grep)&#xA;&amp;gt; iS;is        # list sections and symbols (rabin2 -Ss)&#xA;&amp;gt; pdf; agf     # disassembly and ascii-art function graph&#xA;&amp;gt; oo+;w hello  # reopen in read-write and write a string&#xA;&amp;gt; ?*~...       # interactive filter in all command help&#xA;&amp;gt; q            # quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many plugins are included in r2 by default. But you can extend its capabilities by using the &lt;a href=&#34;https://github.com/radareorg/radare2-pm&#34;&gt;r2pm&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;r2pm -s &amp;lt;word&amp;gt;  # search packages matching a word&#xA;r2pm -Uci &amp;lt;pkg&amp;gt; # update database and clean install a package&#xA;r2pm -u &amp;lt;pkg&amp;gt;   # uninstall the given package&#xA;r2pm -l &amp;lt;pkg&amp;gt;   # list installed packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.rada.re&#34;&gt;Official Book&lt;/a&gt;: Read about r2 usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/COMMUNITY.md&#34;&gt;COMMUNITY.md&lt;/a&gt;: Community engagement and loose guidelines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;: Information about reporting issues and contributing. See also &lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/DEVELOPERS.md&#34;&gt;DEVELOPERS.md&lt;/a&gt;: Development guidelines for r2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;: Instructions for reporting vulnerabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/USAGE.md&#34;&gt;USAGE.md&lt;/a&gt;: Some example commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radareorg/radare2/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;: Installation instructions using make or meson&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about r2 watching &lt;a href=&#34;https://www.youtube.com/c/r2con&#34;&gt;youtube talks&lt;/a&gt; from &lt;a href=&#34;https://rada.re/con&#34;&gt;r2con&lt;/a&gt;. There are also many blogposts, slidedecks and the &lt;a href=&#34;https://book.rada.re&#34;&gt;official radare2 book&lt;/a&gt;, but it&#39;s always a good idea to join any of the official chats and drop your questions or feedback there.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libera.chat&#34;&gt;irc.libera.chat&lt;/a&gt;: &lt;code&gt;#radare&lt;/code&gt;, &lt;code&gt;#radare_side&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#radare:matrix.org&#34;&gt;Matrix&lt;/a&gt;: &lt;code&gt;#radare:matrix.org&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Telegram: &lt;a href=&#34;https://t.me/radare&#34;&gt;Main&lt;/a&gt; and &lt;a href=&#34;https://t.me/radare_side&#34;&gt;Side&lt;/a&gt; channels&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/YBey7CR9jf&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: &lt;a href=&#34;https://infosec.exchange/@radareorg&#34;&gt;@radareorg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://www.radare.org/&#34;&gt;https://www.radare.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported Platforms&lt;/h1&gt; &#xA;&lt;h2&gt;Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;Windows (since XP), Linux, Darwin, GNU/Hurd, Apple&#39;s {Mac,i,iPad,watch}OS, Android, Wasmer, [Dragonfly, Net, Free, Open] BSD, Z/OS, QNX, SerenityOS, Solaris, AIX, Haiku, Vinix, FirefoxOS.&lt;/p&gt; &#xA;&lt;h2&gt;Architectures&lt;/h2&gt; &#xA;&lt;p&gt;i386, x86-64, Alpha, ARM, AVR, BPF, MIPS, PowerPC, SPARC, RISC-V, SH, m68k, S390, XCore, CR16, HPPA, ARC, Blackfin, Z80, H8/300, V810, PDP11, m680x, V850, CRIS, XAP (CSR), PIC, LM32, 8051, 6502, i4004, i8080, Propeller, EVM, OR1K Tricore, CHIP-8, LH5801, T8200, GameBoy, SNES, SPC700, MSP430, Xtensa, xcore, NIOS II, Java, Dalvik, Pickle, WebAssembly, MSIL, EBC, TMS320 (c54x, c55x, c55+, c64x), Hexagon, Brainfuck, Malbolge, whitespace, DCPU16, LANAI, lm32, MCORE, mcs96, RSP, SuperH-4, VAX, KVX, Am29000, LOONGARCH, JDH8, s390x, STM8.&lt;/p&gt; &#xA;&lt;h2&gt;File Formats&lt;/h2&gt; &#xA;&lt;p&gt;ELF, Mach-O, Fatmach-O, PE, PE+, MZ, COFF, XCOFF, OMF, TE, XBE, SEP64, BIOS/UEFI, Dyldcache, DEX, ART, Java class, Android boot image, Plan9 executables, Amiga HUNK, ZIMG, MBN/SBL bootloader, ELF coredump, MDMP (Windows minidump), PDP11, XTAC, CGC, WASM (WebAssembly binary), Commodore VICE emulator, QNX, WAD, OFF, TIC-80, GB/GBA, NDS and N3DS, and mount several filesystems like NTFS, FAT, HFS+, EXT,...&lt;/p&gt; &#xA;&lt;h2&gt;Packaging Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapcraft.io/radare2&#34;&gt;&lt;img src=&#34;https://snapcraft.io/radare2/badge.svg?sanitize=true&#34; alt=&#34;Snap package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/termux/radare2.svg?sanitize=true&#34; alt=&#34;Termux package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/alpine_edge/radare2.svg?sanitize=true&#34; alt=&#34;Alpine Linux Edge package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/alpine_3_13/radare2.svg?sanitize=true&#34; alt=&#34;Alpine Linux 3.19 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/alpine_3_12/radare2.svg?sanitize=true&#34; alt=&#34;Alpine Linux 3.18 package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/arch/radare2.svg?sanitize=true&#34; alt=&#34;Arch package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/aur/radare2.svg?sanitize=true&#34; alt=&#34;AUR package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/epel_7/radare2.svg?sanitize=true&#34; alt=&#34;EPEL 7 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/epel_8/radare2.svg?sanitize=true&#34; alt=&#34;EPEL 8 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/epel_9/radare2.svg?sanitize=true&#34; alt=&#34;EPEL 9 package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/fedora_rawhide/radare2.svg?sanitize=true&#34; alt=&#34;Fedora Dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/fedora_40/radare2.svg?sanitize=true&#34; alt=&#34;Fedora 40&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/fedora_39/radare2.svg?sanitize=true&#34; alt=&#34;Fedora 39&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/freebsd/radare2.svg?sanitize=true&#34; alt=&#34;FreeBSD port&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/openbsd/radare2.svg?sanitize=true&#34; alt=&#34;OpenBSD port&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/pkgsrc_current/radare2.svg?sanitize=true&#34; alt=&#34;pkgsrc current package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/homebrew/radare2.svg?sanitize=true&#34; alt=&#34;Homebrew package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/macports/radare2.svg?sanitize=true&#34; alt=&#34;MacPorts package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/haikuports_master/radare2.svg?sanitize=true&#34; alt=&#34;Haiku Ports&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/void_x86_64/radare2.svg?sanitize=true&#34; alt=&#34;Void Linux&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_24_04/radare2.svg?sanitize=true&#34; alt=&#34;Ubuntu 24.04 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_23_04/radare2.svg?sanitize=true&#34; alt=&#34;Ubuntu 23.04 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_20_04/radare2.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_18_04/radare2.svg?sanitize=true&#34; alt=&#34;Ubuntu 18.04 package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_unstable/radare2.svg?sanitize=true&#34; alt=&#34;Debian Unstable package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_12/radare2.svg?sanitize=true&#34; alt=&#34;Debian 12 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/radare2/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/kali_rolling/radare2.svg?sanitize=true&#34; alt=&#34;Kali Linux Rolling package&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>