<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:49:49Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rswier/c4</title>
    <updated>2023-10-01T01:49:49Z</updated>
    <id>tag:github.com,2023-10-01:/rswier/c4</id>
    <link href="https://github.com/rswier/c4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C in four functions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;c4 - C in four functions&lt;/h1&gt; &#xA;&lt;p&gt;An exercise in minimalism.&lt;/p&gt; &#xA;&lt;p&gt;Try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc -o c4 c4.c&#xA;./c4 hello.c&#xA;./c4 -s hello.c&#xA;&#xA;./c4 c4.c hello.c&#xA;./c4 c4.c c4.c hello.c&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>timescale/timescaledb</title>
    <updated>2023-10-01T01:49:49Z</updated>
    <id>tag:github.com,2023-10-01:/timescale/timescaledb</id>
    <link href="https://github.com/timescale/timescaledb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source time-series SQL database optimized for fast ingest and complex queries. Packaged as a PostgreSQL extension.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux/macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux i386&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coverity&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code Coverage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions?query=workflow%3ARegression+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/workflows/Regression/badge.svg?event=schedule&#34; alt=&#34;Build Status Linux/macOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions?query=workflow%3A%22Regression+Linux+i386%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/workflows/Regression%20Linux%20i386/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Build Status Linux i386&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions?query=workflow%3A%22Regression+Windows%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/workflows/Regression%20Windows/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/timescale-timescaledb&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/timescale-timescaledb/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://codecov.io/gh/timescale/timescaledb&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/timescale/timescaledb/branch/main/graphs/badge.svg?branch=main&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TimescaleDB&lt;/h2&gt; &#xA;&lt;p&gt;TimescaleDB is an open-source database designed to make SQL scalable for time-series data. It is engineered up from PostgreSQL and packaged as a PostgreSQL extension, providing automatic partitioning across time and space (partitioning key), as well as full SQL support.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not to install or administer your instance of &lt;a href=&#34;https://tsdb.co/GitHubTimescale&#34;&gt;TimescaleDB&lt;/a&gt;, try Timescale, our fully managed cloud offering (pay-as-you-go, with a free trial to start).&lt;/p&gt; &#xA;&lt;p&gt;To determine which option is best for you, see &lt;a href=&#34;https://tsdb.co/GitHubTimescaleProducts&#34;&gt;Timescale Products&lt;/a&gt; for more information about our Apache-2 version, TimescaleDB Community (self-hosted), and Timescale Cloud (hosted), including: feature comparisons, FAQ, documentation, and support.&lt;/p&gt; &#xA;&lt;p&gt;Below is an introduction to TimescaleDB. For more information, please check out these other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleDocs&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack-login.timescale.com&#34;&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.timescale.com/forum/&#34;&gt;Timescale Community Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleReleaseNotes&#34;&gt;Timescale Release Notes &amp;amp; Future Plans&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For reference and clarity, all code files in this repository reference licensing in their header (either the Apache-2-open-source license or &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/tsl/LICENSE-TIMESCALE&#34;&gt;Timescale License (TSL)&lt;/a&gt; ). Apache-2 licensed binaries can be built by passing &lt;code&gt;-DAPACHE_ONLY=1&lt;/code&gt; to &lt;code&gt;bootstrap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/CONTRIBUTING.md&#34;&gt;Contributors welcome.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(To build TimescaleDB from source, see instructions in &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/BuildSource.md&#34;&gt;&lt;em&gt;Building from source&lt;/em&gt;&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Using TimescaleDB&lt;/h3&gt; &#xA;&lt;p&gt;TimescaleDB scales PostgreSQL for time-series data via automatic partitioning across time and space (partitioning key), yet retains the standard PostgreSQL interface.&lt;/p&gt; &#xA;&lt;p&gt;In other words, TimescaleDB exposes what look like regular tables, but are actually only an abstraction (or a virtual view) of many individual tables comprising the actual data. This single-table view, which we call a &lt;a href=&#34;https://tsdb.co/GitHubTimescaleHypertable&#34;&gt;hypertable&lt;/a&gt;, is comprised of many chunks, which are created by partitioning the hypertable&#39;s data in either one or two dimensions: by a time interval, and by an (optional) &#34;partition key&#34; such as device id, location, user id, etc. (&lt;a href=&#34;https://docs.timescale.com/timescaledb/latest/overview/core-concepts/&#34;&gt;Architecture discussion&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Virtually all user interactions with TimescaleDB are with hypertables. Creating tables and indexes, altering tables, inserting data, selecting data, etc., can (and should) all be executed on the hypertable.&lt;/p&gt; &#xA;&lt;p&gt;From the perspective of both use and management, TimescaleDB just looks and feels like PostgreSQL, and can be managed and queried as such.&lt;/p&gt; &#xA;&lt;h4&gt;Before you start&lt;/h4&gt; &#xA;&lt;p&gt;PostgreSQL&#39;s out-of-the-box settings are typically too conservative for modern servers and TimescaleDB. You should make sure your &lt;code&gt;postgresql.conf&lt;/code&gt; settings are tuned, either by using &lt;a href=&#34;https://github.com/timescale/timescaledb-tune&#34;&gt;timescaledb-tune&lt;/a&gt; or doing it manually.&lt;/p&gt; &#xA;&lt;h4&gt;Creating a hypertable&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Do not forget to create timescaledb extension&#xA;CREATE EXTENSION timescaledb;&#xA;&#xA;-- We start by creating a regular SQL table&#xA;CREATE TABLE conditions (&#xA;  time        TIMESTAMPTZ       NOT NULL,&#xA;  location    TEXT              NOT NULL,&#xA;  temperature DOUBLE PRECISION  NULL,&#xA;  humidity    DOUBLE PRECISION  NULL&#xA;);&#xA;&#xA;-- Then we convert it into a hypertable that is partitioned by time&#xA;SELECT create_hypertable(&#39;conditions&#39;, &#39;time&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleCreateHypertables&#34;&gt;Quick start: Creating hypertables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleHypertableReference&#34;&gt;Reference examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Inserting and querying data&lt;/h4&gt; &#xA;&lt;p&gt;Inserting data into the hypertable is done via normal SQL commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO conditions(time, location, temperature, humidity)&#xA;  VALUES (NOW(), &#39;office&#39;, 70.0, 50.0);&#xA;&#xA;SELECT * FROM conditions ORDER BY time DESC LIMIT 100;&#xA;&#xA;SELECT time_bucket(&#39;15 minutes&#39;, time) AS fifteen_min,&#xA;    location, COUNT(*),&#xA;    MAX(temperature) AS max_temp,&#xA;    MAX(humidity) AS max_hum&#xA;  FROM conditions&#xA;  WHERE time &amp;gt; NOW() - interval &#39;3 hours&#39;&#xA;  GROUP BY fifteen_min, location&#xA;  ORDER BY fifteen_min DESC, max_temp DESC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, TimescaleDB includes additional functions for time-series analysis that are not present in vanilla PostgreSQL. (For example, the &lt;code&gt;time_bucket&lt;/code&gt; function above.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleBasicOperations&#34;&gt;Quick start: Basic operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleWriteData&#34;&gt;Reference examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleAPI&#34;&gt;TimescaleDB API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;TimescaleDB is available pre-packaged for several platforms (Linux, Docker, MacOS, Windows). More information can be found in &lt;a href=&#34;https://docs.timescale.com/self-hosted/latest/install/&#34;&gt;our documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build from source, see instructions &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/BuildSource.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescale&#34;&gt;Timescale&lt;/a&gt;, a fully managed TimescaleDB in the cloud, is available via a free trial. Create a PostgreSQL database in the cloud with TimescaleDB pre-installed so you can power your application with TimescaleDB without the management overhead.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Architecture documents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/timescaledb/main/tsl/README.md&#34;&gt;Basic TimescaleDB Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/timescaledb/main/tsl/README.md&#34;&gt;Advanced TimescaleDB Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/timescaledb/main/test/README.md&#34;&gt;Testing TimescaleDB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Useful tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb-tune&#34;&gt;timescaledb-tune&lt;/a&gt;: Helps set your PostgreSQL configuration settings based on your system&#39;s resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb-parallel-copy&#34;&gt;timescaledb-parallel-copy&lt;/a&gt;: Parallelize your initial bulk loading by using PostgreSQL&#39;s &lt;code&gt;COPY&lt;/code&gt; across multiple workers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleIntro&#34;&gt;Why use TimescaleDB?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescalePostgresMigrate&#34;&gt;Migrating from PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleWriteData&#34;&gt;Writing data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleReadData&#34;&gt;Querying and data analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleTutorials&#34;&gt;Tutorials and sample data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community &amp;amp; help&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.timescale.com&#34;&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleSupport&#34;&gt;Timescale Support&lt;/a&gt;: see support options (community &amp;amp; subscription)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releases &amp;amp; updates&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleReleaseNotes&#34;&gt;Timescale Release Notes &amp;amp; Future Plans&lt;/a&gt;: see planned and in-progress updates and detailed information about current and past releases. - &lt;a href=&#34;https://tsdb.co/GitHubTimescaleGetReleaseNotes&#34;&gt;Subscribe to Timescale Release Notes&lt;/a&gt; to get notified about new releases, fixes, and early access/beta programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/CONTRIBUTING.md&#34;&gt;Contributor instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/StyleGuide.md&#34;&gt;Code style guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hathach/tinyusb</title>
    <updated>2023-10-01T01:49:49Z</updated>
    <id>tag:github.com,2023-10-01:/hathach/tinyusb</id>
    <link href="https://github.com/hathach/tinyusb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source cross-platform USB stack for embedded system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: docs/assets/logo.svg :alt: TinyUSB&lt;/p&gt; &#xA;&lt;p&gt;|Build Status| |Documentation Status| |Fuzzing Status| |License|&lt;/p&gt; &#xA;&lt;p&gt;TinyUSB is an open-source cross-platform USB Host/Device stack for embedded system, designed to be memory-safe with no dynamic allocation and thread-safe with all interrupt events are deferred then handled in the non-ISR task function.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at the online &lt;code&gt;documentation &amp;lt;https://docs.tinyusb.org/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. figure:: docs/assets/stack.svg :width: 500px :alt: stackup&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── docs            # Documentation&#xA;├── examples        # Sample with Makefile build support&#xA;├── hw&#xA;│   ├── bsp         # Supported boards source files&#xA;│   └── mcu         # Low level mcu core &amp;amp; peripheral drivers&#xA;├── lib             # Sources from 3rd party such as freeRTOS, fatfs ...&#xA;├── src             # All sources files for TinyUSB stack itself.&#xA;├── test            # Unit tests for the stack&#xA;└── tools           # Files used internally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported MCUs&lt;/h1&gt; &#xA;&lt;p&gt;The stack supports the following MCUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Allwinner:&lt;/strong&gt; F1C100s/F1C200s&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Analog:&lt;/strong&gt; MAX3421e (aka Arduino usb host shield)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Broadcom:&lt;/strong&gt; BCM2837, BCM2711&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dialog:&lt;/strong&gt; DA1469x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Espressif:&lt;/strong&gt; ESP32-S2, ESP32-S3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GigaDevice:&lt;/strong&gt; GD32VF103&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infineon:&lt;/strong&gt; XMC4500&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MicroChip:&lt;/strong&gt; SAMD11, SAMD21, SAMD51, SAME5x, SAMG55, SAML21, SAML22, SAME7x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NordicSemi:&lt;/strong&gt; nRF52833, nRF52840, nRF5340&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nuvoton:&lt;/strong&gt; NUC120, NUC121/NUC125, NUC126, NUC505&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NXP:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iMX RT Series: RT10xx, RT11xx&lt;/li&gt; &#xA;   &lt;li&gt;Kinetis: KL25, K32L2&lt;/li&gt; &#xA;   &lt;li&gt;LPC Series: 11u, 13, 15, 17, 18, 40, 43, 51u, 54, 55&lt;/li&gt; &#xA;   &lt;li&gt;MCX: N9x&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raspberry Pi:&lt;/strong&gt; RP2040&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Renesas:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RX Series: 63n, 65n, 72n&lt;/li&gt; &#xA;   &lt;li&gt;RA Series: 4m1, 4m3, 6m1, 6m5&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silabs:&lt;/strong&gt; EFM32GG&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sony:&lt;/strong&gt; CXD56&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ST:&lt;/strong&gt; STM32 series: F0, F1, F2, F3, F4, F7, H7, G0, G4, L0, L1, L4, L4+, WB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TI:&lt;/strong&gt; MSP430, MSP432E4, TM4C123&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ValentyUSB:&lt;/strong&gt; eptri&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WCH:&lt;/strong&gt; CH32V307&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the list of &lt;code&gt;Supported Devices&lt;/code&gt;_ that can be used with provided examples.&lt;/p&gt; &#xA;&lt;h1&gt;Device Stack&lt;/h1&gt; &#xA;&lt;p&gt;Supports multiple device configurations by dynamically changing USB descriptors, low power functions such like suspend, resume, and remote wakeup. The following device classes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio Class 2.0 (UAC2)&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Host Controller Interface (BTH HCI)&lt;/li&gt; &#xA; &lt;li&gt;Communication Device Class (CDC)&lt;/li&gt; &#xA; &lt;li&gt;Device Firmware Update (DFU): DFU mode (WIP) and Runtime&lt;/li&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Generic (In &amp;amp; Out), Keyboard, Mouse, Gamepad etc ...&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC): with multiple LUNs&lt;/li&gt; &#xA; &lt;li&gt;Musical Instrument Digital Interface (MIDI)&lt;/li&gt; &#xA; &lt;li&gt;Network with RNDIS, Ethernet Control Model (ECM), Network Control Model (NCM)&lt;/li&gt; &#xA; &lt;li&gt;Test and Measurement Class (USBTMC)&lt;/li&gt; &#xA; &lt;li&gt;Video class 1.5 (UVC): work in progress&lt;/li&gt; &#xA; &lt;li&gt;Vendor-specific class support with generic In &amp;amp; Out endpoints. Can be used with MS OS 2.0 compatible descriptor to load winUSB driver without INF file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebUSB &amp;lt;https://github.com/WICG/webusb&amp;gt;&lt;/code&gt;__ with vendor-specific class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have a special requirement, &lt;code&gt;usbd_app_driver_get_cb()&lt;/code&gt; can be used to write your own class driver without modifying the stack. Here is how the RPi team added their reset interface &lt;code&gt;raspberrypi/pico-sdk#197 &amp;lt;https://github.com/raspberrypi/pico-sdk/pull/197&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;Host Stack&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Keyboard, Mouse, Generic&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC)&lt;/li&gt; &#xA; &lt;li&gt;Communication Device Class: CDC-ACM&lt;/li&gt; &#xA; &lt;li&gt;Vendor serial over USB: FTDI, CP210x&lt;/li&gt; &#xA; &lt;li&gt;Hub with multiple-level support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Similar to the Device Stack, if you have a special requirement, &lt;code&gt;usbh_app_driver_get_cb()&lt;/code&gt; can be used to write your own class driver without modifying the stack.&lt;/p&gt; &#xA;&lt;h1&gt;TypeC PD Stack&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Power Delivery 3.0 (PD3.0) with USB Type-C support (WIP)&lt;/li&gt; &#xA; &lt;li&gt;Super early stage, only for testing purpose&lt;/li&gt; &#xA; &lt;li&gt;Only support STM32 G4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OS Abstraction layer&lt;/h1&gt; &#xA;&lt;p&gt;TinyUSB is completely thread-safe by pushing all Interrupt Service Request (ISR) events into a central queue, then processing them later in the non-ISR context task function. It also uses semaphore/mutex to access shared resources such as Communication Device Class (CDC) FIFO. Therefore the stack needs to use some of the OS&#39;s basic APIs. Following OSes are already supported out of the box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No OS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RT-Thread &amp;lt;https://github.com/RT-Thread/rt-thread&amp;gt;&lt;/code&gt;&lt;em&gt;: &lt;code&gt;repo &amp;lt;https://github.com/RT-Thread-packages/tinyusb&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mynewt&lt;/strong&gt; Due to the newt package build system, Mynewt examples are better to be on its &lt;code&gt;own repo &amp;lt;https://github.com/hathach/mynewt-tinyusb-example&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Docs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Info&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Uses&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Changelog&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Contributors&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Reference&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Supported Devices&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Dependencies&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Concurrency&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Contributing&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Code of Conduct&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Structure&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Porting&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;All TinyUSB sources in the &lt;code&gt;src&lt;/code&gt; folder are licensed under MIT license, the &lt;code&gt;Full license is here &amp;lt;LICENSE&amp;gt;&lt;/code&gt;__. However, each file can be individually licensed especially those in &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;hw/mcu&lt;/code&gt; folder. Please make sure you understand all the license term for files you use in your project.&lt;/p&gt; &#xA;&lt;p&gt;.. |Build Status| image:: &lt;a href=&#34;https://github.com/hathach/tinyusb/actions/workflows/cmake_arm.yml/badge.svg&#34;&gt;https://github.com/hathach/tinyusb/actions/workflows/cmake_arm.yml/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/hathach/tinyusb/actions&#34;&gt;https://github.com/hathach/tinyusb/actions&lt;/a&gt; .. |Documentation Status| image:: &lt;a href=&#34;https://readthedocs.org/projects/tinyusb/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/tinyusb/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://docs.tinyusb.org/en/latest/?badge=latest&#34;&gt;https://docs.tinyusb.org/en/latest/?badge=latest&lt;/a&gt; .. |Fuzzing Status| image:: &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/tinyusb.svg&#34;&gt;https://oss-fuzz-build-logs.storage.googleapis.com/badges/tinyusb.svg&lt;/a&gt; :target: &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#tinyusb&#34;&gt;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#tinyusb&lt;/a&gt; .. |License| image:: &lt;a href=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg&#34;&gt;https://img.shields.io/badge/license-MIT-brightgreen.svg&lt;/a&gt; :target: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. _Uses: docs/info/uses.rst .. _Changelog: docs/info/changelog.rst .. _Contributors: CONTRIBUTORS.rst .. _Reference: docs/reference/index.rst .. _Supported Devices: docs/reference/supported.rst .. _Getting Started: docs/reference/getting_started.rst .. _Dependencies: docs/reference/dependencies.rst .. _Concurrency: docs/reference/concurrency.rst .. _Contributing: docs/contributing/index.rst .. _Code of Conduct: CODE_OF_CONDUCT.rst .. _Structure: docs/contributing/structure.rst .. _Porting: docs/contributing/porting.rst&lt;/p&gt;</summary>
  </entry>
</feed>