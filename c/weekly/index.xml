<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:46:58Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mit-pdos/xv6-riscv</title>
    <updated>2023-09-24T01:46:58Z</updated>
    <id>tag:github.com,2023-09-24:/mit-pdos/xv6-riscv</id>
    <link href="https://github.com/mit-pdos/xv6-riscv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xv6 for RISC-V&lt;/p&gt;&lt;hr&gt;&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern RISC-V multiprocessor using ANSI C.&lt;/p&gt; &#xA;&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; &#xA;&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/&#34;&gt;https://pdos.csail.mit.edu/6.1810/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; &#xA;&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; &#xA;&lt;p&gt;We are also grateful for the bug reports and patches contributed by Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe, Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.&lt;/p&gt; &#xA;&lt;p&gt;The code in the files that constitute xv6 is Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.&lt;/p&gt; &#xA;&lt;p&gt;ERROR REPORTS&lt;/p&gt; &#xA;&lt;p&gt;Please send errors and suggestions to Frans Kaashoek and Robert Morris (kaashoek,&lt;a href=&#34;mailto:rtm@mit.edu&#34;&gt;rtm@mit.edu&lt;/a&gt;). The main purpose of xv6 is as a teaching operating system for MIT&#39;s 6.1810, so we are more interested in simplifications and clarifications than new features.&lt;/p&gt; &#xA;&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; &#xA;&lt;p&gt;You will need a RISC-V &#34;newlib&#34; tool chain from &lt;a href=&#34;https://github.com/riscv/riscv-gnu-toolchain&#34;&gt;https://github.com/riscv/riscv-gnu-toolchain&lt;/a&gt;, and qemu compiled for riscv64-softmmu. Once they are installed, and in your shell search path, you can run &#34;make qemu&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pgbouncer/pgbouncer</title>
    <updated>2023-09-24T01:46:58Z</updated>
    <id>tag:github.com,2023-09-24:/pgbouncer/pgbouncer</id>
    <link href="https://github.com/pgbouncer/pgbouncer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lightweight connection pooler for PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PgBouncer&lt;/h1&gt; &#xA;&lt;p&gt;Lightweight connection pooler for PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://www.pgbouncer.org/&#34;&gt;https://www.pgbouncer.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sources, bug tracking: &lt;a href=&#34;https://github.com/pgbouncer/pgbouncer&#34;&gt;https://github.com/pgbouncer/pgbouncer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;PgBouncer depends on few things to get compiled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt; 3.81+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libevent.org/&#34;&gt;Libevent&lt;/a&gt; 2.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 1.0.1+ for TLS support&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;http://c-ares.haxx.se/&#34;&gt;c-ares&lt;/a&gt; as alternative to Libevent&#39;s evdns&lt;/li&gt; &#xA; &lt;li&gt;(optional) PAM libraries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When dependencies are installed just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --prefix=/usr/local&#xA;$ make&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are building from Git, or are building for Windows, please see separate build instructions below.&lt;/p&gt; &#xA;&lt;h2&gt;DNS lookup support&lt;/h2&gt; &#xA;&lt;p&gt;PgBouncer does host name lookups at connect time instead of just once at configuration load time. This requires an asynchronous DNS implementation. The following table shows supported backends and their probing order:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;backend&lt;/th&gt; &#xA;   &lt;th&gt;parallel&lt;/th&gt; &#xA;   &lt;th&gt;EDNS0 (1)&lt;/th&gt; &#xA;   &lt;th&gt;/etc/hosts&lt;/th&gt; &#xA;   &lt;th&gt;SOA lookup (2)&lt;/th&gt; &#xA;   &lt;th&gt;note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c-ares&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;IPv6+CNAME buggy in &amp;lt;=1.10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;evdns, libevent 2.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;does not check /etc/hosts updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;getaddrinfo_a, glibc 2.9+&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes (3)&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;N/A on non-glibc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;getaddrinfo, libc&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes (3)&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;requires pthreads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;EDNS0 is required to have more than 8 addresses behind one host name.&lt;/li&gt; &#xA; &lt;li&gt;SOA lookup is needed to re-check host names on zone serial change.&lt;/li&gt; &#xA; &lt;li&gt;To enable EDNS0, add &lt;code&gt;options edns0&lt;/code&gt; to &lt;code&gt;/etc/resolv.conf&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;c-ares is the most fully-featured implementation and is recommended for most uses and binary packaging (if a sufficiently new version is available). Libevent&#39;s built-in evdns is also suitable for many uses, with the listed restrictions. The other backends are mostly legacy options at this point and don&#39;t receive much testing anymore.&lt;/p&gt; &#xA;&lt;p&gt;By default, c-ares is used if it can be found. Its use can be forced with &lt;code&gt;configure --with-cares&lt;/code&gt; or disabled with &lt;code&gt;--without-cares&lt;/code&gt;. If c-ares is not used (not found or disabled), then Libevent is used. Specify &lt;code&gt;--disable-evdns&lt;/code&gt; to disable the use of Libevent&#39;s evdns and fall back to a libc-based implementation.&lt;/p&gt; &#xA;&lt;h2&gt;PAM authentication&lt;/h2&gt; &#xA;&lt;p&gt;To enable PAM authentication, &lt;code&gt;./configure&lt;/code&gt; has a flag &lt;code&gt;--with-pam&lt;/code&gt; (default value is no). When compiled with PAM support, a new global authentication type &lt;code&gt;pam&lt;/code&gt; is available to validate users through PAM.&lt;/p&gt; &#xA;&lt;h2&gt;systemd integration&lt;/h2&gt; &#xA;&lt;p&gt;To enable systemd integration, use the &lt;code&gt;configure&lt;/code&gt; option &lt;code&gt;--with-systemd&lt;/code&gt;. This allows using &lt;code&gt;Type=notify&lt;/code&gt; service units as well as socket activation. See &lt;code&gt;etc/pgbouncer.service&lt;/code&gt; and &lt;code&gt;etc/pgbouncer.socket&lt;/code&gt; for examples.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Git&lt;/h2&gt; &#xA;&lt;p&gt;Building PgBouncer from Git requires that you fetch the libusual submodule and generate the header and configuration files before you can run &lt;code&gt;configure&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/pgbouncer/pgbouncer.git&#xA;$ cd pgbouncer&#xA;$ git submodule init&#xA;$ git submodule update&#xA;$ ./autogen.sh&#xA;$ ./configure ...&#xA;$ make&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional packages required: autoconf, automake, libtool, pandoc&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/pgbouncer/pgbouncer/raw/master/test/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt; file in the test directory&lt;/a&gt; on how to run the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Building on Windows&lt;/h2&gt; &#xA;&lt;p&gt;The only supported build environment on Windows is MinGW. Cygwin and Visual $ANYTHING are not supported.&lt;/p&gt; &#xA;&lt;p&gt;To build on MinGW, do the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure ...&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If cross-compiling from Unix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --host=i586-mingw32msvc ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running on Windows&lt;/h2&gt; &#xA;&lt;p&gt;Running from the command line goes as usual, except that the &lt;code&gt;-d&lt;/code&gt; (daemonize), &lt;code&gt;-R&lt;/code&gt; (reboot), and &lt;code&gt;-u&lt;/code&gt; (switch user) switches will not work.&lt;/p&gt; &#xA;&lt;p&gt;To run PgBouncer as a Windows service, you need to configure the &lt;code&gt;service_name&lt;/code&gt; parameter to set a name for the service. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pgbouncer -regservice config.ini&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pgbouncer -unregservice config.ini&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the Windows event log, set &lt;code&gt;syslog = 1&lt;/code&gt; in the configuration file. But before that, you need to register &lt;code&gt;pgbevent.dll&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ regsvr32 pgbevent.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To unregister it, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ regsvr32 /u pgbevent.dll&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>OISF/suricata</title>
    <updated>2023-09-24T01:46:58Z</updated>
    <id>tag:github.com,2023-09-24:/OISF/suricata</id>
    <link href="https://github.com/OISF/suricata" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Suricata is a network Intrusion Detection System, Intrusion Prevention System and Network Security Monitoring engine developed by the OISF and the Suricata community.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Suricata&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:suricata&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/suricata.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/OISF/suricata&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/OISF/suricata/branch/master/graph/badge.svg?token=QRyyn2BSo1&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://suricata.io&#34;&gt;Suricata&lt;/a&gt; is a network IDS, IPS and NSM engine developed by the &lt;a href=&#34;https://oisf.net&#34;&gt;OISF&lt;/a&gt; and the Suricata community.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.suricata.io/en/latest/install.html&#34;&gt;https://docs.suricata.io/en/latest/install.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the &lt;a href=&#34;https://docs.suricata.io/en/latest/&#34;&gt;Suricata user guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re happily taking patches and other contributions. Please see our &lt;a href=&#34;https://docs.suricata.io/en/latest/devguide/codebase/contributing/contribution-process.html&#34;&gt;Contribution Process&lt;/a&gt; for how to get started.&lt;/p&gt; &#xA;&lt;p&gt;Suricata is a complex piece of software dealing with mostly untrusted input. Mishandling this input will have serious consequences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in IPS mode a crash may knock a network offline;&lt;/li&gt; &#xA; &lt;li&gt;in passive mode a compromise of the IDS may lead to loss of critical and confidential data;&lt;/li&gt; &#xA; &lt;li&gt;missed detection may lead to undetected compromise of the network.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In other words, we think the stakes are pretty high, especially since in many common cases the IDS/IPS will be directly reachable by an attacker.&lt;/p&gt; &#xA;&lt;p&gt;For this reason, we have developed a QA process that is quite extensive. A consequence is that contributing to Suricata can be a somewhat lengthy process.&lt;/p&gt; &#xA;&lt;p&gt;On a high level, the steps are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;GitHub-CI based checks. This runs automatically when a pull request is made.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Review by devs from the team and community&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QA runs from private QA setups. These are private due to the nature of the test traffic.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Overview of Suricata&#39;s QA steps&lt;/h3&gt; &#xA;&lt;p&gt;OISF team members are able to submit builds to our private QA setup. It will run a series of build tests and a regression suite to confirm no existing features break.&lt;/p&gt; &#xA;&lt;p&gt;The final QA runs takes a few hours minimally, and generally runs overnight. It currently runs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;extensive build tests on different OS&#39;, compilers, optimization levels, configure features&lt;/li&gt; &#xA; &lt;li&gt;static code analysis using cppcheck, scan-build&lt;/li&gt; &#xA; &lt;li&gt;runtime code analysis using valgrind, AddressSanitizer, LeakSanitizer&lt;/li&gt; &#xA; &lt;li&gt;regression tests for past bugs&lt;/li&gt; &#xA; &lt;li&gt;output validation of logging&lt;/li&gt; &#xA; &lt;li&gt;unix socket testing&lt;/li&gt; &#xA; &lt;li&gt;pcap based fuzz testing using ASAN and LSAN&lt;/li&gt; &#xA; &lt;li&gt;traffic replay based IDS and IPS tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next to these tests, based on the type of code change further tests can be run manually:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;traffic replay testing (multi-gigabit)&lt;/li&gt; &#xA; &lt;li&gt;large pcap collection processing (multi-terabytes)&lt;/li&gt; &#xA; &lt;li&gt;fuzz testing (might take multiple days or even weeks)&lt;/li&gt; &#xA; &lt;li&gt;pcap based performance testing&lt;/li&gt; &#xA; &lt;li&gt;live performance testing&lt;/li&gt; &#xA; &lt;li&gt;various other manual tests based on evaluation of the proposed changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s important to realize that almost all of the tests above are used as acceptance tests. If something fails, it&#39;s up to you to address this in your code.&lt;/p&gt; &#xA;&lt;p&gt;One step of the QA is currently run post-merge. We submit builds to the Coverity Scan program. Due to limitations of this (free) service, we can submit once a day max. Of course it can happen that after the merge the community will find issues. For both cases we request you to help address the issues as they may come up.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Will you accept my PR?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: That depends on a number of things, including the code quality. With new features it also depends on whether the team and/or the community think the feature is useful, how much it affects other code and features, the risk of performance regressions, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: When will my PR be merged?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: It depends, if it&#39;s a major feature or considered a high risk change, it will probably go into the next major version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why was my PR closed?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: As documented in the &lt;a href=&#34;https://docs.suricata.io/en/latest/devguide/codebase/contributing/github-pr-workflow.html&#34;&gt;Suricata GitHub workflow&lt;/a&gt;, we expect a new pull request for every change.&lt;/p&gt; &#xA;&lt;p&gt;Normally, the team (or community) will give feedback on a pull request after which it is expected to be replaced by an improved PR. So look at the comments. If you disagree with the comments we can still discuss them in the closed PR.&lt;/p&gt; &#xA;&lt;p&gt;If the PR was closed without comments it&#39;s likely due to QA failure. If the GitHub-CI checks failed, the PR should be fixed right away. No need for a discussion about it, unless you believe the QA failure is incorrect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: the compiler/code analyser/tool is wrong, what now?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: To assist in the automation of the QA, we&#39;re not accepting warnings or errors to stay. In some cases this could mean that we add a suppression if the tool supports that (e.g. valgrind, DrMemory). Some warnings can be disabled. In some exceptional cases the only &#39;solution&#39; is to refactor the code to work around a static code checker limitation false positive. While frustrating, we prefer this over leaving warnings in the output. Warnings tend to get ignored and then increase risk of hiding other warnings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I think your QA test is wrong&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: If you really think it is, we can discuss how to improve it. But don&#39;t come to this conclusion too quickly, more often it&#39;s the code that turns out to be wrong.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: do you require signing of a contributor license agreement?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Yes, we do this to keep the ownership of Suricata in one hand: the Open Information Security Foundation. See &lt;a href=&#34;http://suricata.io/about/open-source/&#34;&gt;http://suricata.io/about/open-source/&lt;/a&gt; and &lt;a href=&#34;http://suricata.io/about/contribution-agreement/&#34;&gt;http://suricata.io/about/contribution-agreement/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>