<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:41:51Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WiringPi/WiringPi</title>
    <updated>2024-09-15T01:41:51Z</updated>
    <id>tag:github.com,2024-09-15:/WiringPi/WiringPi</id>
    <link href="https://github.com/WiringPi/WiringPi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The arguably fastest GPIO Library for the Raspberry Pi&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WiringPi Library&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the WiringPi Library, the highly performant GPIO access library for Raspberry Pi boards. This library is written in C and is designed to provide fast and efficient control of the GPIO pins by directly accessing the hardware registers using DMA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support:&lt;/strong&gt; WiringPi supports all Raspberry Pi Boards including Pi 5 ( &lt;span&gt;üöß&lt;/span&gt; On the Pi 5, only the GCLK functionality is currently not supported due to missing documentation of the RP1 chip).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance:&lt;/strong&gt; By directly accessing the hardware registers, WiringPi ensures minimal latency and maximum performance for your GPIO operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wide Adoption:&lt;/strong&gt; WiringPi is widely used in numerous projects, making it a reliable choice for your Raspberry Pi GPIO needs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Whether you‚Äôre working on a simple LED blink project or a complex automation system, WiringPi provides the tools you need to get the job done efficiently.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;To compile programs with wiringPi Library, you need to include &lt;code&gt;wiringPi.h&lt;/code&gt; as well as link against &lt;code&gt;wiringPi&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;wiringPi.h&amp;gt; // Include WiringPi library!&#xA;&#xA;int main(void)&#xA;{&#xA;  // uses BCM numbering of the GPIOs and directly accesses the GPIO registers.&#xA;  wiringPiSetupGpio();&#xA;&#xA;  // pin mode ..(INPUT, OUTPUT, PWM_OUTPUT, GPIO_CLOCK)&#xA;  // set pin 17 to input&#xA;  pinMode(17, INPUT);&#xA;&#xA;  // pull up/down mode (PUD_OFF, PUD_UP, PUD_DOWN) =&amp;gt; down&#xA;  pullUpDnControl(17, PUD_DOWN);&#xA;&#xA;  // get state of pin 17&#xA;  int value = digitalRead(17);&#xA;&#xA;  if (HIGH == value)&#xA;  {&#xA;    // your code&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile this code, link against wiringPi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcc -o myapp myapp.c -l wiringPi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to check out the &lt;a href=&#34;https://raw.githubusercontent.com/WiringPi/WiringPi/master/examples/&#34;&gt;examples&lt;/a&gt;, build them using Make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd examples&#xA;make &amp;lt;example-name | really-all&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool &lt;code&gt;gpio&lt;/code&gt; can be used to set single pins as well as get the state of everything at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pi@wiringdemo:~ $ gpio readall&#xA; +-----+-----+---------+------+---+---Pi 3B--+---+------+---------+-----+-----+&#xA; | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |&#xA; +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+&#xA; |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |&#xA; |   2 |   8 |   SDA.1 |   IN | 1 |  3 || 4  |   |      | 5v      |     |     |&#xA; |   3 |   9 |   SCL.1 |   IN | 1 |  5 || 6  |   |      | 0v      |     |     |&#xA; |   4 |   7 | GPIO. 7 |   IN | 0 |  7 || 8  | 0 | IN   | TxD     | 15  | 14  |&#xA; |     |     |      0v |      |   |  9 || 10 | 1 | IN   | RxD     | 16  | 15  |&#xA; |  17 |   0 | GPIO. 0 |   IN | 1 | 11 || 12 | 1 | IN   | GPIO. 1 | 1   | 18  |&#xA; |  27 |   2 | GPIO. 2 |   IN | 1 | 13 || 14 |   |      | 0v      |     |     |&#xA; |  22 |   3 | GPIO. 3 |   IN | 1 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |&#xA; |     |     |    3.3v |      |   | 17 || 18 | 1 | IN   | GPIO. 5 | 5   | 24  |&#xA; |  10 |  12 |    MOSI |   IN | 0 | 19 || 20 |   |      | 0v      |     |     |&#xA; |   9 |  13 |    MISO |   IN | 0 | 21 || 22 | 1 | IN   | GPIO. 6 | 6   | 25  |&#xA; |  11 |  14 |    SCLK |   IN | 0 | 23 || 24 | 1 | IN   | CE0     | 10  | 8   |&#xA; |     |     |      0v |      |   | 25 || 26 | 0 | IN   | CE1     | 11  | 7   |&#xA; |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |&#xA; |   5 |  21 | GPIO.21 |   IN | 0 | 29 || 30 |   |      | 0v      |     |     |&#xA; |   6 |  22 | GPIO.22 |   IN | 0 | 31 || 32 | 1 | IN   | GPIO.26 | 26  | 12  |&#xA; |  13 |  23 | GPIO.23 |   IN | 1 | 33 || 34 |   |      | 0v      |     |     |&#xA; |  19 |  24 | GPIO.24 |   IN | 1 | 35 || 36 | 1 | IN   | GPIO.27 | 27  | 16  |&#xA; |  26 |  25 | GPIO.25 |   IN | 1 | 37 || 38 | 1 | IN   | GPIO.28 | 28  | 20  |&#xA; |     |     |      0v |      |   | 39 || 40 | 1 | IN   | GPIO.29 | 29  | 21  |&#xA; +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+&#xA; | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |&#xA; +-----+-----+---------+------+---+---Pi 3B--+---+------+---------+-----+-----+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can either build it yourself or use the prebuilt binaries:&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create debian-package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# fetch the source&#xA;sudo apt install git&#xA;git clone https://github.com/WiringPi/WiringPi.git&#xA;cd WiringPi&#xA;&#xA;# build the package&#xA;./build debian&#xA;mv debian-template/wiringpi-3.0-1.deb .&#xA;&#xA;# install it&#xA;sudo apt install ./wiringpi-3.0-1.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prebuilt Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Grab the latest release from &lt;a href=&#34;https://github.com/WiringPi/WiringPi/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unzip/use the portable prebuilt verison:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# unzip the archive&#xA;tar -xfv wiringpi_3.0.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the debian package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install a dpkg&#xA;sudo apt install ./wiringpi-3.0-1.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;p&gt;wiringPi has been wrapped for multiple languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node - &lt;a href=&#34;https://github.com/WiringPi/WiringPi-Node&#34;&gt;https://github.com/WiringPi/WiringPi-Node&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Perl - &lt;a href=&#34;https://github.com/WiringPi/WiringPi-Perl&#34;&gt;https://github.com/WiringPi/WiringPi-Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP - &lt;a href=&#34;https://github.com/WiringPi/WiringPi-PHP&#34;&gt;https://github.com/WiringPi/WiringPi-PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python - &lt;a href=&#34;https://github.com/WiringPi/WiringPi-Python&#34;&gt;https://github.com/WiringPi/WiringPi-Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby - &lt;a href=&#34;https://github.com/WiringPi/WiringPi-Ruby&#34;&gt;https://github.com/WiringPi/WiringPi-Ruby&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/WiringPi/WiringPi/issues&#34;&gt;issue system&lt;/a&gt; of GitHub.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not sure whether to create an issue or not, please engage in &lt;a href=&#34;https://github.com/WiringPi/WiringPi/discussions&#34;&gt;discussions&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Please do not email Gordon or @Gadgetoid.&lt;/p&gt; &#xA;&lt;p&gt;Please don&#39;t email GC2 for reporting issues, you might &lt;a href=&#34;mailto:wiringpi@gc2.at&#34;&gt;contact us&lt;/a&gt; for anything that&#39;s not meant for the public.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This repository is the continuation of &#39;Gordon&#39;s wiringPi 2.5&#39; which has been &lt;a href=&#34;https://web.archive.org/web/20220405225008/http://wiringpi.com/wiringpi-deprecated/&#34;&gt;deprecated&lt;/a&gt;, a while ago.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The last &#34;old wiringPi&#34; source of Gordon&#39;s release can be found at the &lt;a href=&#34;https://github.com/WiringPi/WiringPi/tree/final_official_2.50&#34;&gt;&lt;code&gt;final_source_2.50&lt;/code&gt;&lt;/a&gt; tag.&lt;/li&gt; &#xA; &lt;li&gt;The default &lt;code&gt;master&lt;/code&gt; branch contains code that has been written since version 2.5 to provide support for newer hardware as well as new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;:information_source:Ô∏è Since 2024, &lt;a href=&#34;https://github.com/GrazerComputerClub&#34;&gt;GC2&lt;/a&gt; has taken over maintenance of the project, supporting new OS versions as well as current hardware generations. We are dedicated to keeping the arguably best-performing GPIO Library for Raspberry Pi running smoothly. We strive to do our best, but please note that this is a community effort, and we cannot provide any guarantees or take responsibility for implementing specific features you may need.&lt;/p&gt; &#xA;&lt;h2&gt;Debug&lt;/h2&gt; &#xA;&lt;p&gt;WIRINGPI_DEBUG=1 ./my_wiringpi_program&lt;/p&gt; &#xA;&lt;p&gt;WIRINGPI_DEBUG=1 gpio readall&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SpacehuhnTech/esp8266_deauther</title>
    <updated>2024-09-15T01:41:51Z</updated>
    <id>tag:github.com,2024-09-15:/SpacehuhnTech/esp8266_deauther</id>
    <link href="https://github.com/SpacehuhnTech/esp8266_deauther" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Affordable WiFi hacking platform for testing and learning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP8266 Deauther&lt;/h1&gt; &#xA;&lt;img src=&#34;https://deauther.com/img/logo.png&#34; alt=&#34;Deauther Logo&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Scan for WiFi devices, block selected connections, create dozens of networks and confuse WiFi scanners.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;New Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Hi üëã&lt;br&gt; Please visit &lt;a href=&#34;https://deauther.com&#34;&gt;Deauther.com&lt;/a&gt; for information about this project.&lt;br&gt; Here are some quick links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deauther.com/docs/buy&#34;&gt;Buy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deauther.com/docs/download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deauther.com/docs/category/diy-tutorial&#34;&gt;DIY Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deauther.com/docs/category/usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deauther.com/docs/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Password&lt;/h2&gt; &#xA;&lt;p&gt;The password for &lt;code&gt;pwned&lt;/code&gt; is &lt;code&gt;deauther&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About this Project&lt;/h2&gt; &#xA;&lt;p&gt;This firmware allows you to easily perform a variety of actions to test 802.11 networks using an &lt;a href=&#34;https://www.espressif.com/en/products/socs/esp8266&#34;&gt;ESP8266&lt;/a&gt;. It&#39;s also a great project for learning about WiFi, microcontrollers, Arduino, hacking and electronics/programming in general.&lt;/p&gt; &#xA;&lt;p&gt;The deauthentication attack is the main feature, which can be used to disconnect devices from their WiFi network.&lt;br&gt; Although this denial-of-service attack is nothing new, a lot of devices are still vulnerable to it. Luckily this is slowly changing with more WiFi 6 enabled devices being used. But a lot of outdated WiFi devices remain in place, for example in cheap IoT hardware. With an ESP8266 Deauther, you can easily test this attack on your 2.4GHz WiFi network/devices and see whether it&#39;s successful or not. And if it is, you know you should upgrade your network.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is a proof of concept for testing and educational purposes.&lt;br&gt; Neither the ESP8266, nor its SDK was meant or built for such purposes. &lt;strong&gt;Bugs can occur!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use it only against your own networks and devices!&lt;/strong&gt;&lt;br&gt; Please check the legal regulations in your country before using it.&lt;br&gt; We don&#39;t take any responsibility for what you do with this program.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gojue/ecapture</title>
    <updated>2024-09-15T01:41:51Z</updated>
    <id>tag:github.com,2024-09-15:/gojue/ecapture</id>
    <link href="https://github.com/gojue/ecapture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-logo-400x400.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/README_CN.md&#34;&gt;‰∏≠Êñá‰ªãÁªç&lt;/a&gt; | English | &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/README_JA.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/gojue/ecapture.svg?label=Stars&amp;amp;logo=github&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/gojue/ecapture?label=Forks&amp;amp;logo=github&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture/actions/workflows/code-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/gojue/ecapture/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/gojue/ecapture?display_name=tag&amp;amp;include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Github Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;eCapture(ÊóÅËßÇËÄÖ): capture SSL/TLS text content without a CA certificate using eBPF.&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Supports Linux/Android kernel versions x86_64 4.18 and above, &lt;strong&gt;aarch64 5.5&lt;/strong&gt; and above. Does not support Windows and macOS system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- MarkdownTOC autolink=&#34;true&#34; --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#how-ecapture-works&#34;&gt;How eCapture works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#ecapture-user-manual&#34;&gt;eCapture User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#ecapture-architecture&#34;&gt;eCapture Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#whats-ebpf&#34;&gt;What&#39;s eBPF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#how-to-compile&#34;&gt;How to compile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /MarkdownTOC --&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How eCapture works&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/how-ecapture-works.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SSL/TLS plaintext capture, support openssl\libressl\boringssl\gnutls\nspr(nss) libraries.&lt;/li&gt; &#xA; &lt;li&gt;GoTLS plaintext support go tls library, which refers to encrypted communication in https/tls programs written in the golang language.&lt;/li&gt; &#xA; &lt;li&gt;bash audit, capture bash command for Host Security Audit.&lt;/li&gt; &#xA; &lt;li&gt;mysql query SQL audit, support mysqld 5.6\5.7\8.0, and mariadDB.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;eCapture User Manual&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-help-v0.7.4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Youtube video: &lt;a href=&#34;https://www.youtube.com/watch?v=CoDIjEQCvvA&#34; title=&#34;eCapture User Manual&#34;&gt;How to use eCapture v0.1.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;use ELF binary file&lt;/h2&gt; &#xA;&lt;p&gt;Download ELF zip file &lt;a href=&#34;https://github.com/gojue/ecapture/releases&#34;&gt;release&lt;/a&gt; , unzip and use by command &lt;code&gt;./ecapture --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux kernel version &amp;gt;= 4.18 is required.&lt;/li&gt; &#xA; &lt;li&gt;Enable BTF &lt;a href=&#34;https://www.kernel.org/doc/html/latest/bpf/btf.html&#34;&gt;BPF Type Format (BTF)&lt;/a&gt; (Optional, 2022-04-17)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;use docker image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# pull docker image&#xA;docker pull gojue/ecapture:latest&#xA;# run&#xA;docker run --rm --privileged=true --net=host -v ${HOST_PATH}:${CONTAINER_PATH} gojue/ecapture ARGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command line options&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Need ROOT permission.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;eCapture search &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; file default, to search load directories of &lt;code&gt;SO&lt;/code&gt; file, and search &lt;code&gt;openssl&lt;/code&gt; shard libraries location. or you can use &lt;code&gt;--libssl&lt;/code&gt; flag to set shard library path.&lt;/p&gt; &#xA;&lt;p&gt;If target program is compile statically, you can set program path as &lt;code&gt;--libssl&lt;/code&gt; flag value directly„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;The eCapture tool comprises 8 modules that respectively support plaintext capture for TLS/SSL encryption libraries like OpenSSL, GnuTLS, NSPR, BoringSSL, and GoTLS. Additionally, it facilitates software audits for Bash, MySQL, and PostgreSQL applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash capture bash command&lt;/li&gt; &#xA; &lt;li&gt;gnutls capture gnutls text content without CA cert for gnutls libraries.&lt;/li&gt; &#xA; &lt;li&gt;gotls Capturing plaintext communication from Golang programs encrypted with TLS/HTTPS.&lt;/li&gt; &#xA; &lt;li&gt;mysqld capture sql queries from mysqld 5.6/5.7/8.0 .&lt;/li&gt; &#xA; &lt;li&gt;nss capture nss/nspr encrypted text content without CA cert for nss/nspr libraries.&lt;/li&gt; &#xA; &lt;li&gt;postgres capture sql queries from postgres 10+.&lt;/li&gt; &#xA; &lt;li&gt;tls use to capture tls/ssl text content without CA cert. (Support openssl 1.0.x/1.1.x/3.0.x or newer). You can use &lt;code&gt;ecapture -h&lt;/code&gt; to view the list of subcommands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OpenSSL Module&lt;/h2&gt; &#xA;&lt;p&gt;The OpenSSL module supports three capture modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pcap&lt;/code&gt;/&lt;code&gt;pcapng&lt;/code&gt; mode stores captured plaintext data in pcap-NG format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keylog&lt;/code&gt;/&lt;code&gt;key&lt;/code&gt; mode saves the TLS handshake keys to a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; mode directly captures plaintext data, either outputting to a specified file or printing to the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pcap Mode&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;-m pcap&lt;/code&gt; or &lt;code&gt;-m pcapng&lt;/code&gt; and use it in conjunction with &lt;code&gt;--pcapfile&lt;/code&gt; and &lt;code&gt;-i&lt;/code&gt; parameters. The default value for &lt;code&gt;--pcapfile&lt;/code&gt; is &lt;code&gt;ecapture_openssl.pcapng&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture tls -m pcap -i eth0 --pcapfile=ecapture.pcapng tcp port 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command saves captured plaintext data packets as a pcapng file, which can be viewed using &lt;code&gt;Wireshark&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Keylog Mode&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;-m keylog&lt;/code&gt; or &lt;code&gt;-m key&lt;/code&gt; and use it in conjunction with the &lt;code&gt;--keylogfile&lt;/code&gt; parameter, which defaults to &lt;code&gt;ecapture_masterkey.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The captured OpenSSL TLS &lt;code&gt;Master Secret&lt;/code&gt; information is saved to &lt;code&gt;--keylogfile&lt;/code&gt;. You can also enable &lt;code&gt;tcpdump&lt;/code&gt; packet capture and then use &lt;code&gt;Wireshark&lt;/code&gt; to open the file and set the &lt;code&gt;Master Secret&lt;/code&gt; path to view plaintext data packets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture tls -m keylog -keylogfile=openssl_keylog.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly use the &lt;code&gt;tshark&lt;/code&gt; software for real-time decryption and display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tshark -o tls.keylog_file:ecapture_masterkey.log -Y http -T fields -e http.file_data -f &#34;port 443&#34; -i eth0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text Mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./ecapture tls -m text&lt;/code&gt; will output all plaintext data packets. (Starting from v0.7.0, it no longer captures SSLKEYLOG information.)&lt;/p&gt; &#xA;&lt;h2&gt;GoTLS Module&lt;/h2&gt; &#xA;&lt;p&gt;Similar to the OpenSSL module.&lt;/p&gt; &#xA;&lt;h3&gt;check your server BTF configÔºö&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cfc4n@vm-server:~$# uname -r&#xA;4.18.0-305.3.1.el8.x86_64&#xA;cfc4n@vm-server:~$# cat /boot/config-`uname -r` | grep CONFIG_DEBUG_INFO_BTF&#xA;CONFIG_DEBUG_INFO_BTF=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;gotls command&lt;/h3&gt; &#xA;&lt;p&gt;capture tls text context.&lt;/p&gt; &#xA;&lt;p&gt;Step 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture gotls --elfpath=/home/cfc4n/go_https_client --hex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/home/cfc4n/go_https_client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;more help&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture gotls -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;bash Module&lt;/h2&gt; &#xA;&lt;p&gt;capture bash command : &lt;code&gt;ecapture bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ps -ef | grep foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;eCapture Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s eBPF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to compile&lt;/h1&gt; &#xA;&lt;p&gt;Linux Kernel: &amp;gt;= 4.18.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;golang 1.21 or newer&lt;/li&gt; &#xA; &lt;li&gt;clang 9.0 or newer&lt;/li&gt; &#xA; &lt;li&gt;cmake 3.18.4 or newer&lt;/li&gt; &#xA; &lt;li&gt;clang backend: llvm 9.0 or newer&lt;/li&gt; &#xA; &lt;li&gt;kernel config:CONFIG_DEBUG_INFO_BTF=y (Optional, 2022-04-17)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;command&lt;/h2&gt; &#xA;&lt;h3&gt;ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Ubuntu 20.04 or later versions, you can use a single command to complete the initialization of the compilation environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/gojue/ecapture/master/builder/init_env.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;other Linux&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the software listed in the &#39;Toolchain Version&#39; section above, the following software is also required for the compilation environment. Please install it yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux-tools-common&lt;/li&gt; &#xA; &lt;li&gt;linux-tools-generic&lt;/li&gt; &#xA; &lt;li&gt;pkgconf&lt;/li&gt; &#xA; &lt;li&gt;libelf-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Clone the repository code and compile it&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Caution: The following &lt;code&gt;make&lt;/code&gt; command will install libpcap into the system directory if &lt;code&gt;libpcap.a&lt;/code&gt; does not exist under &lt;code&gt;/usr/local/lib&lt;/code&gt;. If you have installed libpcap in system without &lt;code&gt;libpcap.a&lt;/code&gt;, it maybe break your libpcap&#39;s headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --recurse-submodules git@github.com:gojue/ecapture.git&#xA;cd ecapture&#xA;make&#xA;bin/ecapture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;compile without BTF&lt;/h2&gt; &#xA;&lt;p&gt;eCapture support BTF disabled with command &lt;code&gt;make nocore&lt;/code&gt; to compile at 2022/04/17. It can work normally even on Linux systems that do not support BTF.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make nocore&#xA;bin/ecapture --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;cross-compilation&lt;/h2&gt; &#xA;&lt;h3&gt;Kernel header files&lt;/h3&gt; &#xA;&lt;p&gt;To cross-compile the eCapture tool, you need to install the kernel header files for the target architecture. you need to install the &lt;code&gt;linux-source&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kernel_ver=`uname -r | cut -d&#39;-&#39; -f 1`&#xA;sudo apt-get install -y linux-source-$kernel_ver&#xA;cd /usr/src&#xA;sudo tar -xf linux-source-${kernel_ver}.tar.bz2&#xA;cd /usr/src/linux-source-${kernel_ver}&#xA;test -f .config || yes &#34;&#34; | sudo make oldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ToolChains&lt;/h3&gt; &#xA;&lt;p&gt;To cross-compile binary files for the aarch64 architecture on an amd64 architecture system, you need to install the gcc-aarch64-linux-gnu toolchain. Similarly, to cross-compile binary files for the amd64 architecture on an aarch64 system, you need to install the gcc-x86-64-linux-gnu toolchain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;amd64 arch: gcc-aarch64-linux-gnu&lt;/li&gt; &#xA; &lt;li&gt;arm64 arch: gcc-x86-64-linux-gnu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Commands&lt;/h3&gt; &#xA;&lt;p&gt;To build an &lt;code&gt;arm64&lt;/code&gt; artifact on an ubuntu &lt;code&gt;amd64&lt;/code&gt; system, you can set the &lt;code&gt;CROSS_ARCH&lt;/code&gt; environment variable to achieve cross-compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CROSS_ARCH=arm64 make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://starchart.cc/gojue/ecapture.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt;</summary>
  </entry>
</feed>