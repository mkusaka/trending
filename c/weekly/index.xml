<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:35:15Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wechat-miniprogram/minigame-unity-webgl-transform</title>
    <updated>2023-02-05T08:35:15Z</updated>
    <id>tag:github.com,2023-02-05:/wechat-miniprogram/minigame-unity-webgl-transform</id>
    <link href="https://github.com/wechat-miniprogram/minigame-unity-webgl-transform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity WebGL 微信小游戏适配方案(公测)&lt;/h1&gt; &#xA;&lt;p&gt;欢迎使用 Unity WebGL 小游戏适配(转换)方案，本方案设计目的是&lt;strong&gt;降低 Unity 游戏转换到微信小游戏的开发成本&lt;/strong&gt;。基于WebAssembly技术，无需更换Unity引擎与重写核心代码的情况下将原有游戏项目适配到微信小游戏。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;若图片无法显示，请访问&lt;a href=&#34;https://gitee.com/wechat-minigame/minigame-unity-webgl-transform&#34;&gt;gitee项目地址&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;方案特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;保持原引擎工具链与技术栈&lt;/li&gt; &#xA; &lt;li&gt;无需重写游戏核心逻辑，支持大部分第三方插件&lt;/li&gt; &#xA; &lt;li&gt;由转换工具与微信小游戏运行环境保证适配兼容，保持较高还原度&lt;/li&gt; &#xA; &lt;li&gt;微信小游戏平台能力以C# SDK方式提供给开发者，快速对接平台开放能力&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;转换案例&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;我叫MT2(回合战斗)&lt;/th&gt; &#xA;   &lt;th&gt;旅行串串(休闲)&lt;/th&gt; &#xA;   &lt;th&gt;谜题大陆(SLG)&lt;/th&gt; &#xA;   &lt;th&gt;热血神剑(MMO)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/image/showcase34.png&#34; width=&#34;240&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/image/showcase32.png&#34; width=&#34;220&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/image/showcase25.png&#34; width=&#34;230&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/image/showcase33.png&#34; width=&#34;230&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/ShowCase.md&#34;&gt;更多转换案例&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安装与使用&lt;/h2&gt; &#xA;&lt;p&gt;下载 &lt;a href=&#34;https://game.weixin.qq.com/cgi-bin/gamewxagwasmsplitwap/getunityplugininfo?download=1&#34;&gt;Unity插件&lt;/a&gt;，并导入至游戏项目中，版本更新请查看&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/CHANGELOG.md&#34;&gt;更新日志&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请查阅&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UnityVersion.md&#34;&gt;推荐引擎版本&lt;/a&gt;，安装时选择WebGL组件&lt;/li&gt; &#xA; &lt;li&gt;前往&lt;a href=&#34;https://nodejs.org/zh-cn/download/&#34;&gt;Node官网&lt;/a&gt;安装长期稳定版&lt;/li&gt; &#xA; &lt;li&gt;查阅&lt;a href=&#34;https://developers.weixin.qq.com/minigame/dev/guide/&#34;&gt;小游戏开发者文档-快速上手&lt;/a&gt;创建小游戏类目应用&lt;/li&gt; &#xA; &lt;li&gt;登录&lt;a href=&#34;https://mp.weixin.qq.com&#34;&gt;MP微信公众平台&lt;/a&gt;，能力地图-生产提效包-快适配，开通使用&lt;/li&gt; &#xA; &lt;li&gt;查阅&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/Transform.md&#34;&gt;快速开始：转换工具导出微信小游戏&lt;/a&gt;进行小游戏导出转换&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;文档总览&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/Guide.md&#34;&gt;Unity WebGL微信小游戏转换指南&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;方案概述与兼容性&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/Summary.md&#34;&gt;技术原理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/Evaluation.md&#34;&gt;兼容性评估&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UnityVersion.md&#34;&gt;推荐引擎版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/ShowCase.md&#34;&gt;更多转换案例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/DevelopmentQAList.md&#34;&gt;技术常见问题QA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;性能优化&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/PerfOptimization.md&#34;&gt;性能优化总览&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/PerfMeasure.md&#34;&gt;性能评估标准&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;启动性能&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/StartupOptimization.md&#34;&gt;提升 Unity WebGL 游戏启动速度&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/Startup.md&#34;&gt;启动流程与时序&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UsingLoader.md&#34;&gt;使用 Loader 进行游游戏加载&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/ResourcesLoading.md&#34;&gt;资源按需加载概述&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UsingAssetBundle.md&#34;&gt;使用 AssetBundle 进行资源按需加载&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UsingAddressable.md&#34;&gt;使用 Addressable 进行资源按需加载&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/InstantGameGuide.md&#34;&gt;使用 AutoStreaming 进行资源按需加载&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/CustomLoading.md&#34;&gt;定制启动封面&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UsingPreload.md&#34;&gt;使用预下载功能&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/FirstSceneOptimization.md&#34;&gt;首场景启动优化&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/WasmSplit.md&#34;&gt;使用代码分包工具&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/ReportStartupStat.md&#34;&gt;启动留存数据上报统计&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行性能&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/OptimizationPerformence.md&#34;&gt;优化Unity WebGL的运行性能&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/AndroidProfile.md&#34;&gt;使用 Android CPU Profiler 性能调优&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UnityProfiler.md&#34;&gt;使用 Unity Profiler 性能调优&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/OptimizationMemory.md&#34;&gt;优化Unity WebGL的内存&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UsingMemoryProfiler.md&#34;&gt;使用ProfilingMemory分析内存&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/AudioOptimization.md&#34;&gt;音频适配优化&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/CompressedTexture.md&#34;&gt;压缩纹理优化&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/AssetOptimization.md&#34;&gt;资源优化工具与建议&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/iOSOptimization.md&#34;&gt;iOS高性能模式&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/WebGL2.md&#34;&gt;WebGL2.0渲染支持说明&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;版本更新与资源部署&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/DataCDN.md&#34;&gt;小游戏资源部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/FileCache.md&#34;&gt;小游戏资源缓存&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/Update.md&#34;&gt;小游戏版本更新&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;能力适配&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/WX_SDK.md&#34;&gt;WX SDK 平台能力适配&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/fixScreen.md&#34;&gt;屏幕适配&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/InputAdaptation.md&#34;&gt;输入法适配&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/OpenData.md&#34;&gt;排行榜与微信关系数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/BackendServiceStartup.md&#34;&gt;后端服务指引&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/UsingNetworking.md&#34;&gt;网络通信适配&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/wasmWaterMark.md&#34;&gt;使用水印保护代码包安全&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;调试与异常&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/DebugAndException.md&#34;&gt;开发错误调试与排查&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/IssueForProduction.md&#34;&gt;现网错误日志上报与排查&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;问题反馈&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wechat-miniprogram/minigame-unity-webgl-transform/main/Design/IssueAndContact.md&#34;&gt;问题反馈与联系我们&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DaveGamble/cJSON</title>
    <updated>2023-02-05T08:35:15Z</updated>
    <id>tag:github.com,2023-02-05:/DaveGamble/cJSON</id>
    <link href="https://github.com/DaveGamble/cJSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ultralightweight JSON parser in ANSI C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cJSON&lt;/h1&gt; &#xA;&lt;p&gt;Ultralightweight JSON parser in ANSI C.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#welcome-to-cjson&#34;&gt;Welcome to cJSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#building&#34;&gt;Building&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#copying-the-source&#34;&gt;Copying the source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#cmake&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#makefile&#34;&gt;Makefile&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#Vcpkg&#34;&gt;Vcpkg&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#including-cjson&#34;&gt;Including cJSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#data-structure&#34;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#working-with-the-data-structure&#34;&gt;Working with the data structure&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#basic-types&#34;&gt;Basic types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#arrays&#34;&gt;Arrays&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#objects&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing-json&#34;&gt;Parsing JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing-json&#34;&gt;Printing JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#example&#34;&gt;Example&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing&#34;&gt;Printing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing&#34;&gt;Parsing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#caveats&#34;&gt;Caveats&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#zero-character&#34;&gt;Zero Character&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#character-encoding&#34;&gt;Character Encoding&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#c-standard&#34;&gt;C Standard&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#floating-point-numbers&#34;&gt;Floating Point Numbers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#deep-nesting-of-arrays-and-objects&#34;&gt;Deep Nesting Of Arrays And Objects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#thread-safety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#case-sensitivity&#34;&gt;Case Sensitivity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#duplicate-object-members&#34;&gt;Duplicate Object Members&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#enjoy-cjson&#34;&gt;Enjoy cJSON!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright (c) 2009-2017 Dave Gamble and cJSON contributors&lt;/p&gt; &#xA; &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA; &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA; &lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Welcome to cJSON.&lt;/h3&gt; &#xA;&lt;p&gt;cJSON aims to be the dumbest possible parser that you can get your job done with. It&#39;s a single file of C, and a single header file.&lt;/p&gt; &#xA;&lt;p&gt;JSON is described best here: &lt;a href=&#34;http://www.json.org/&#34;&gt;http://www.json.org/&lt;/a&gt; It&#39;s like XML, but fat-free. You use it to move data around, store things, or just generally represent your program&#39;s state.&lt;/p&gt; &#xA;&lt;p&gt;As a library, cJSON exists to take away as much legwork as it can, but not get in your way. As a point of pragmatism (i.e. ignoring the truth), I&#39;m going to say that you can use it in one of two modes: Auto and Manual. Let&#39;s have a quick run-through.&lt;/p&gt; &#xA;&lt;p&gt;I lifted some JSON from this page: &lt;a href=&#34;http://www.json.org/fatfree.html&#34;&gt;http://www.json.org/fatfree.html&lt;/a&gt; That page inspired me to write cJSON, which is a parser that tries to share the same philosophy as JSON itself. Simple, dumb, out of the way.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways to incorporate cJSON into your project.&lt;/p&gt; &#xA;&lt;h4&gt;copying the source&lt;/h4&gt; &#xA;&lt;p&gt;Because the entire library is only one C file and one header file, you can just copy &lt;code&gt;cJSON.h&lt;/code&gt; and &lt;code&gt;cJSON.c&lt;/code&gt; to your projects source and start using it.&lt;/p&gt; &#xA;&lt;p&gt;cJSON is written in ANSI C (C89) in order to support as many platforms and compilers as possible.&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;With CMake, cJSON supports a full blown build system. This way you get the most features. CMake with an equal or higher version than 2.8.5 is supported. With CMake it is recommended to do an out of tree build, meaning the compiled files are put in a directory separate from the source files. So in order to build cJSON with CMake on a Unix platform, make a &lt;code&gt;build&lt;/code&gt; directory and run CMake inside it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a Makefile and a bunch of other files. You can then compile it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And install it with &lt;code&gt;make install&lt;/code&gt; if you want. By default it installs the headers &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries to &lt;code&gt;/usr/local/lib&lt;/code&gt;. It also installs files for pkg-config to make it easier to detect and use an existing installation of CMake. And it installs CMake config files, that can be used by other CMake based projects to discover the library.&lt;/p&gt; &#xA;&lt;p&gt;You can change the build process with a list of different options that you can pass to CMake. Turn them on with &lt;code&gt;On&lt;/code&gt; and off with &lt;code&gt;Off&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_TEST=On&lt;/code&gt;: Enable building the tests. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_UTILS=On&lt;/code&gt;: Enable building cJSON_Utils. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_TARGET_EXPORT=On&lt;/code&gt;: Enable the export of CMake targets. Turn off if it makes problems. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CUSTOM_COMPILER_FLAGS=On&lt;/code&gt;: Enable custom compiler flags (currently for Clang, GCC and MSVC). Turn off if it makes problems. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_VALGRIND=On&lt;/code&gt;: Run tests with &lt;a href=&#34;http://valgrind.org&#34;&gt;valgrind&lt;/a&gt;. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_SANITIZERS=On&lt;/code&gt;: Compile cJSON with &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizer&#34;&gt;AddressSanitizer&lt;/a&gt; and &lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UndefinedBehaviorSanitizer&lt;/a&gt; enabled (if possible). (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_SAFE_STACK&lt;/code&gt;: Enable the &lt;a href=&#34;https://clang.llvm.org/docs/SafeStack.html&#34;&gt;SafeStack&lt;/a&gt; instrumentation pass. Currently only works with the Clang compiler. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_LIBS=On&lt;/code&gt;: Build the shared libraries. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_AND_STATIC_LIBS=On&lt;/code&gt;: Build both shared and static libraries. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=/usr&lt;/code&gt;: Set a prefix for the installation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_LOCALES=On&lt;/code&gt;: Enable the usage of localeconv method. ( on by default )&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCJSON_OVERRIDE_BUILD_SHARED_LIBS=On&lt;/code&gt;: Enable overriding the value of &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; with &lt;code&gt;-DCJSON_BUILD_SHARED_LIBS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_VERSION_SO&lt;/code&gt;: Enable cJSON so version. ( on by default )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are packaging cJSON for a distribution of Linux, you would probably take these steps for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake .. -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DCMAKE_INSTALL_PREFIX=/usr&#xA;make&#xA;make DESTDIR=$pkgdir install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows CMake is usually used to create a Visual Studio solution file by running it inside the Developer Command Prompt for Visual Studio, for exact steps follow the official documentation from CMake and Microsoft and use the online search engine of your choice. The descriptions of the the options above still generally apply, although not all of them work on Windows.&lt;/p&gt; &#xA;&lt;h4&gt;Makefile&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have CMake available, but still have GNU make. You can use the makefile to build cJSON:&lt;/p&gt; &#xA;&lt;p&gt;Run this command in the directory with the source code and it will automatically compile static and shared libraries and a little test program (not the full test suite).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want, you can install the compiled library to your system using &lt;code&gt;make install&lt;/code&gt;. By default it will install the headers in &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries in &lt;code&gt;/usr/local/lib&lt;/code&gt;. But you can change this behavior by setting the &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;DESTDIR&lt;/code&gt; variables: &lt;code&gt;make PREFIX=/usr DESTDIR=temp install&lt;/code&gt;. And uninstall them with: &lt;code&gt;make PREFIX=/usr DESTDIR=temp uninstall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Vcpkg&lt;/h4&gt; &#xA;&lt;p&gt;You can download and install cJSON using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;vcpkg install cjson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cJSON port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Including cJSON&lt;/h3&gt; &#xA;&lt;p&gt;If you installed it via CMake or the Makefile, you can include cJSON like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;cjson/cJSON.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data Structure&lt;/h3&gt; &#xA;&lt;p&gt;cJSON represents JSON data using the &lt;code&gt;cJSON&lt;/code&gt; struct data type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* The cJSON structure: */&#xA;typedef struct cJSON&#xA;{&#xA;    struct cJSON *next;&#xA;    struct cJSON *prev;&#xA;    struct cJSON *child;&#xA;    int type;&#xA;    char *valuestring;&#xA;    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */&#xA;    int valueint;&#xA;    double valuedouble;&#xA;    char *string;&#xA;} cJSON;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An item of this type represents a JSON value. The type is stored in &lt;code&gt;type&lt;/code&gt; as a bit-flag (&lt;strong&gt;this means that you cannot find out the type by just comparing the value of &lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To check the type of an item, use the corresponding &lt;code&gt;cJSON_Is...&lt;/code&gt; function. It does a &lt;code&gt;NULL&lt;/code&gt; check followed by a type check and returns a boolean value if the item is of this type.&lt;/p&gt; &#xA;&lt;p&gt;The type can be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Invalid&lt;/code&gt; (check with &lt;code&gt;cJSON_IsInvalid&lt;/code&gt;): Represents an invalid item that doesn&#39;t contain any value. You automatically have this type if you set the item to all zero bytes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_False&lt;/code&gt; (check with &lt;code&gt;cJSON_IsFalse&lt;/code&gt;): Represents a &lt;code&gt;false&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_True&lt;/code&gt; (check with &lt;code&gt;cJSON_IsTrue&lt;/code&gt;): Represents a &lt;code&gt;true&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_NULL&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNull&lt;/code&gt;): Represents a &lt;code&gt;null&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Number&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNumber&lt;/code&gt;): Represents a number value. The value is stored as a double in &lt;code&gt;valuedouble&lt;/code&gt; and also in &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_String&lt;/code&gt; (check with &lt;code&gt;cJSON_IsString&lt;/code&gt;): Represents a string value. It is stored in the form of a zero terminated string in &lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Array&lt;/code&gt; (check with &lt;code&gt;cJSON_IsArray&lt;/code&gt;): Represent an array value. This is implemented by pointing &lt;code&gt;child&lt;/code&gt; to a linked list of &lt;code&gt;cJSON&lt;/code&gt; items that represent the values in the array. The elements are linked together using &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;, where the first element has &lt;code&gt;prev.next == NULL&lt;/code&gt; and the last element &lt;code&gt;next == NULL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Object&lt;/code&gt; (check with &lt;code&gt;cJSON_IsObject&lt;/code&gt;): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Raw&lt;/code&gt; (check with &lt;code&gt;cJSON_IsRaw&lt;/code&gt;): Represents any kind of JSON that is stored as a zero terminated array of characters in &lt;code&gt;valuestring&lt;/code&gt;. This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn&#39;t check if it is valid JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally there are the following two flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_IsReference&lt;/code&gt;: Specifies that the item that &lt;code&gt;child&lt;/code&gt; points to and/or &lt;code&gt;valuestring&lt;/code&gt; is not owned by this item, it is only a reference. So &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will only deallocate this item, not its &lt;code&gt;child&lt;/code&gt;/&lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_StringIsConst&lt;/code&gt;: This means that &lt;code&gt;string&lt;/code&gt; points to a constant string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will not try to deallocate &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Working with the data structure&lt;/h3&gt; &#xA;&lt;p&gt;For every value type there is a &lt;code&gt;cJSON_Create...&lt;/code&gt; function that can be used to create an item of that type. All of these will allocate a &lt;code&gt;cJSON&lt;/code&gt; struct that can later be deleted with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Note that you have to delete them at some point, otherwise you will get a memory leak.&lt;br&gt; &lt;strong&gt;Important&lt;/strong&gt;: If you have added an item to an array or an object already, you &lt;strong&gt;mustn&#39;t&lt;/strong&gt; delete it with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Adding it to an array or object transfers its ownership so that when that array or object is deleted, it gets deleted as well. You also could use &lt;code&gt;cJSON_SetValuestring&lt;/code&gt; to change a &lt;code&gt;cJSON_String&lt;/code&gt;&#39;s &lt;code&gt;valuestring&lt;/code&gt;, and you needn&#39;t to free the previous &lt;code&gt;valuestring&lt;/code&gt; manually.&lt;/p&gt; &#xA;&lt;h4&gt;Basic types&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;null&lt;/strong&gt; is created with &lt;code&gt;cJSON_CreateNull&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;booleans&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateTrue&lt;/code&gt;, &lt;code&gt;cJSON_CreateFalse&lt;/code&gt; or &lt;code&gt;cJSON_CreateBool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;numbers&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateNumber&lt;/code&gt;. This will set both &lt;code&gt;valuedouble&lt;/code&gt; and &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;strings&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateString&lt;/code&gt; (copies the string) or with &lt;code&gt;cJSON_CreateStringReference&lt;/code&gt; (directly points to the string. This means that &lt;code&gt;valuestring&lt;/code&gt; won&#39;t be deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt; and you are responsible for its lifetime, useful for constants)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Arrays&lt;/h4&gt; &#xA;&lt;p&gt;You can create an empty array with &lt;code&gt;cJSON_CreateArray&lt;/code&gt;. &lt;code&gt;cJSON_CreateArrayReference&lt;/code&gt; can be used to create an array that doesn&#39;t &#34;own&#34; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add items to an array, use &lt;code&gt;cJSON_AddItemToArray&lt;/code&gt; to append items to the end. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another item, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere. To insert items in the middle, use &lt;code&gt;cJSON_InsertItemInArray&lt;/code&gt;. It will insert an item at the given 0 based index and shift all the existing items to the right.&lt;/p&gt; &#xA;&lt;p&gt;If you want to take an item out of an array at a given index and continue using it, use &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromArray&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, but deletes the detached item via &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace an item in an array in place. Either with &lt;code&gt;cJSON_ReplaceItemInArray&lt;/code&gt; using an index or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; &#xA;&lt;p&gt;To get the size of an array, use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;. Use &lt;code&gt;cJSON_GetArrayItem&lt;/code&gt; to get an element at a given index.&lt;/p&gt; &#xA;&lt;p&gt;Because an array is stored as a linked list, iterating it via index is inefficient (&lt;code&gt;O(n²)&lt;/code&gt;), so you can iterate over an array using the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro in &lt;code&gt;O(n)&lt;/code&gt; time complexity.&lt;/p&gt; &#xA;&lt;h4&gt;Objects&lt;/h4&gt; &#xA;&lt;p&gt;You can create an empty object with &lt;code&gt;cJSON_CreateObject&lt;/code&gt;. &lt;code&gt;cJSON_CreateObjectReference&lt;/code&gt; can be used to create an object that doesn&#39;t &#34;own&#34; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add items to an object, use &lt;code&gt;cJSON_AddItemToObject&lt;/code&gt;. Use &lt;code&gt;cJSON_AddItemToObjectCS&lt;/code&gt; to add an item to an object with a name that is a constant or reference (key of the item, &lt;code&gt;string&lt;/code&gt; in the &lt;code&gt;cJSON&lt;/code&gt; struct), so that it doesn&#39;t get freed by &lt;code&gt;cJSON_Delete&lt;/code&gt;. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another object, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;If you want to take an item out of an object, use &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromObjectCaseSensitive&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt; followed by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace an item in an object in place. Either with &lt;code&gt;cJSON_ReplaceItemInObjectCaseSensitive&lt;/code&gt; using a key or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; &#xA;&lt;p&gt;To get the size of an object, you can use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;, this works because internally objects are stored as arrays.&lt;/p&gt; &#xA;&lt;p&gt;If you want to access an item in an object, use &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To iterate over an object, you can use the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro the same way as for arrays.&lt;/p&gt; &#xA;&lt;p&gt;cJSON also provides convenient helper functions for quickly creating a new item and adding it to an object, like &lt;code&gt;cJSON_AddNullToObject&lt;/code&gt;. They return a pointer to the new item or &lt;code&gt;NULL&lt;/code&gt; if they failed.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing JSON&lt;/h3&gt; &#xA;&lt;p&gt;Given some JSON in a zero terminated string, you can parse it with &lt;code&gt;cJSON_Parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cJSON *json = cJSON_Parse(string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given some JSON in a string (whether zero terminated or not), you can parse it with &lt;code&gt;cJSON_ParseWithLength&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cJSON *json = cJSON_ParseWithLength(string, buffer_length);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will parse the JSON and allocate a tree of &lt;code&gt;cJSON&lt;/code&gt; items that represents it. Once it returns, you are fully responsible for deallocating it after use with &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The allocator used by &lt;code&gt;cJSON_Parse&lt;/code&gt; is &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; by default but can be changed (globally) with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If an error occurs a pointer to the position of the error in the input string can be accessed using &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt;. Note though that this can produce race conditions in multithreading scenarios, in that case it is better to use &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; with &lt;code&gt;return_parse_end&lt;/code&gt;. By default, characters in the input string that follow the parsed JSON will not be considered as an error.&lt;/p&gt; &#xA;&lt;p&gt;If you want more options, use &lt;code&gt;cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;. &lt;code&gt;return_parse_end&lt;/code&gt; returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; in a thread safe way). &lt;code&gt;require_null_terminated&lt;/code&gt;, if set to &lt;code&gt;1&lt;/code&gt; will make it an error if the input string contains data after the JSON.&lt;/p&gt; &#xA;&lt;p&gt;If you want more options giving buffer length, use &lt;code&gt;cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Printing JSON&lt;/h3&gt; &#xA;&lt;p&gt;Given a tree of &lt;code&gt;cJSON&lt;/code&gt; items, you can print them as a string using &lt;code&gt;cJSON_Print&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *string = cJSON_Print(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will allocate a string and print a JSON representation of the tree into it. Once it returns, you are fully responsible for deallocating it after use with your allocator. (usually &lt;code&gt;free&lt;/code&gt;, depends on what has been set with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cJSON_Print&lt;/code&gt; will print with whitespace for formatting. If you want to print without formatting, use &lt;code&gt;cJSON_PrintUnformatted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a rough idea of how big your resulting string will be, you can use &lt;code&gt;cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)&lt;/code&gt;. &lt;code&gt;fmt&lt;/code&gt; is a boolean to turn formatting with whitespace on and off. &lt;code&gt;prebuffer&lt;/code&gt; specifies the first buffer size to use for printing. &lt;code&gt;cJSON_Print&lt;/code&gt; currently uses 256 bytes for its first buffer size. Once printing runs out of space, a new buffer is allocated and the old gets copied over before printing is continued.&lt;/p&gt; &#xA;&lt;p&gt;These dynamic buffer allocations can be completely avoided by using &lt;code&gt;cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)&lt;/code&gt;. It takes a buffer to a pointer to print to and its length. If the length is reached, printing will fail and it returns &lt;code&gt;0&lt;/code&gt;. In case of success, &lt;code&gt;1&lt;/code&gt; is returned. Note that you should provide 5 bytes more than is actually needed, because cJSON is not 100% accurate in estimating if the provided memory is enough.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;In this example we want to build and parse the following JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Awesome 4K&#34;,&#xA;    &#34;resolutions&#34;: [&#xA;        {&#xA;            &#34;width&#34;: 1280,&#xA;            &#34;height&#34;: 720&#xA;        },&#xA;        {&#xA;            &#34;width&#34;: 1920,&#xA;            &#34;height&#34;: 1080&#xA;        },&#xA;        {&#xA;            &#34;width&#34;: 3840,&#xA;            &#34;height&#34;: 2160&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Printing&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s build the above JSON and print it to a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//create a monitor with a list of supported resolutions&#xA;//NOTE: Returns a heap allocated string, you are required to free it after use.&#xA;char *create_monitor(void)&#xA;{&#xA;    const unsigned int resolution_numbers[3][2] = {&#xA;        {1280, 720},&#xA;        {1920, 1080},&#xA;        {3840, 2160}&#xA;    };&#xA;    char *string = NULL;&#xA;    cJSON *name = NULL;&#xA;    cJSON *resolutions = NULL;&#xA;    cJSON *resolution = NULL;&#xA;    cJSON *width = NULL;&#xA;    cJSON *height = NULL;&#xA;    size_t index = 0;&#xA;&#xA;    cJSON *monitor = cJSON_CreateObject();&#xA;    if (monitor == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    name = cJSON_CreateString(&#34;Awesome 4K&#34;);&#xA;    if (name == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;    /* after creation was successful, immediately add it to the monitor,&#xA;     * thereby transferring ownership of the pointer to it */&#xA;    cJSON_AddItemToObject(monitor, &#34;name&#34;, name);&#xA;&#xA;    resolutions = cJSON_CreateArray();&#xA;    if (resolutions == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;    cJSON_AddItemToObject(monitor, &#34;resolutions&#34;, resolutions);&#xA;&#xA;    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)&#xA;    {&#xA;        resolution = cJSON_CreateObject();&#xA;        if (resolution == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToArray(resolutions, resolution);&#xA;&#xA;        width = cJSON_CreateNumber(resolution_numbers[index][0]);&#xA;        if (width == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToObject(resolution, &#34;width&#34;, width);&#xA;&#xA;        height = cJSON_CreateNumber(resolution_numbers[index][1]);&#xA;        if (height == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToObject(resolution, &#34;height&#34;, height);&#xA;    }&#xA;&#xA;    string = cJSON_Print(monitor);&#xA;    if (string == NULL)&#xA;    {&#xA;        fprintf(stderr, &#34;Failed to print monitor.\n&#34;);&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor);&#xA;    return string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively we can use the &lt;code&gt;cJSON_Add...ToObject&lt;/code&gt; helper functions to make our lives a little easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//NOTE: Returns a heap allocated string, you are required to free it after use.&#xA;char *create_monitor_with_helpers(void)&#xA;{&#xA;    const unsigned int resolution_numbers[3][2] = {&#xA;        {1280, 720},&#xA;        {1920, 1080},&#xA;        {3840, 2160}&#xA;    };&#xA;    char *string = NULL;&#xA;    cJSON *resolutions = NULL;&#xA;    size_t index = 0;&#xA;&#xA;    cJSON *monitor = cJSON_CreateObject();&#xA;&#xA;    if (cJSON_AddStringToObject(monitor, &#34;name&#34;, &#34;Awesome 4K&#34;) == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    resolutions = cJSON_AddArrayToObject(monitor, &#34;resolutions&#34;);&#xA;    if (resolutions == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)&#xA;    {&#xA;        cJSON *resolution = cJSON_CreateObject();&#xA;&#xA;        if (cJSON_AddNumberToObject(resolution, &#34;width&#34;, resolution_numbers[index][0]) == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;&#xA;        if (cJSON_AddNumberToObject(resolution, &#34;height&#34;, resolution_numbers[index][1]) == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;&#xA;        cJSON_AddItemToArray(resolutions, resolution);&#xA;    }&#xA;&#xA;    string = cJSON_Print(monitor);&#xA;    if (string == NULL)&#xA;    {&#xA;        fprintf(stderr, &#34;Failed to print monitor.\n&#34;);&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor);&#xA;    return string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parsing&lt;/h4&gt; &#xA;&lt;p&gt;In this example we will parse a JSON in the above format and check if the monitor supports a Full HD resolution while printing some diagnostic output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* return 1 if the monitor supports full hd, 0 otherwise */&#xA;int supports_full_hd(const char * const monitor)&#xA;{&#xA;    const cJSON *resolution = NULL;&#xA;    const cJSON *resolutions = NULL;&#xA;    const cJSON *name = NULL;&#xA;    int status = 0;&#xA;    cJSON *monitor_json = cJSON_Parse(monitor);&#xA;    if (monitor_json == NULL)&#xA;    {&#xA;        const char *error_ptr = cJSON_GetErrorPtr();&#xA;        if (error_ptr != NULL)&#xA;        {&#xA;            fprintf(stderr, &#34;Error before: %s\n&#34;, error_ptr);&#xA;        }&#xA;        status = 0;&#xA;        goto end;&#xA;    }&#xA;&#xA;    name = cJSON_GetObjectItemCaseSensitive(monitor_json, &#34;name&#34;);&#xA;    if (cJSON_IsString(name) &amp;amp;&amp;amp; (name-&amp;gt;valuestring != NULL))&#xA;    {&#xA;        printf(&#34;Checking monitor \&#34;%s\&#34;\n&#34;, name-&amp;gt;valuestring);&#xA;    }&#xA;&#xA;    resolutions = cJSON_GetObjectItemCaseSensitive(monitor_json, &#34;resolutions&#34;);&#xA;    cJSON_ArrayForEach(resolution, resolutions)&#xA;    {&#xA;        cJSON *width = cJSON_GetObjectItemCaseSensitive(resolution, &#34;width&#34;);&#xA;        cJSON *height = cJSON_GetObjectItemCaseSensitive(resolution, &#34;height&#34;);&#xA;&#xA;        if (!cJSON_IsNumber(width) || !cJSON_IsNumber(height))&#xA;        {&#xA;            status = 0;&#xA;            goto end;&#xA;        }&#xA;&#xA;        if ((width-&amp;gt;valuedouble == 1920) &amp;amp;&amp;amp; (height-&amp;gt;valuedouble == 1080))&#xA;        {&#xA;            status = 1;&#xA;            goto end;&#xA;        }&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor_json);&#xA;    return status;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that there are no NULL checks except for the result of &lt;code&gt;cJSON_Parse&lt;/code&gt; because &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; checks for &lt;code&gt;NULL&lt;/code&gt; inputs already, so a &lt;code&gt;NULL&lt;/code&gt; value is just propagated and &lt;code&gt;cJSON_IsNumber&lt;/code&gt; and &lt;code&gt;cJSON_IsString&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; if the input is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;h4&gt;Zero Character&lt;/h4&gt; &#xA;&lt;p&gt;cJSON doesn&#39;t support strings that contain the zero character &lt;code&gt;&#39;\0&#39;&lt;/code&gt; or &lt;code&gt;\u0000&lt;/code&gt;. This is impossible with the current API because strings are zero terminated.&lt;/p&gt; &#xA;&lt;h4&gt;Character Encoding&lt;/h4&gt; &#xA;&lt;p&gt;cJSON only supports UTF-8 encoded input. In most cases it doesn&#39;t reject invalid UTF-8 as input though, it just propagates it through as is. As long as the input doesn&#39;t contain invalid UTF-8, the output will always be valid UTF-8.&lt;/p&gt; &#xA;&lt;h4&gt;C Standard&lt;/h4&gt; &#xA;&lt;p&gt;cJSON is written in ANSI C (or C89, C90). If your compiler or C library doesn&#39;t follow this standard, correct behavior is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: ANSI C is not C++ therefore it shouldn&#39;t be compiled with a C++ compiler. You can compile it with a C compiler and link it with your C++ code however. Although compiling with a C++ compiler might work, correct behavior is not guaranteed.&lt;/p&gt; &#xA;&lt;h4&gt;Floating Point Numbers&lt;/h4&gt; &#xA;&lt;p&gt;cJSON does not officially support any &lt;code&gt;double&lt;/code&gt; implementations other than IEEE754 double precision floating point numbers. It might still work with other implementations but bugs with these will be considered invalid.&lt;/p&gt; &#xA;&lt;p&gt;The maximum length of a floating point literal that cJSON supports is currently 63 characters.&lt;/p&gt; &#xA;&lt;h4&gt;Deep Nesting Of Arrays And Objects&lt;/h4&gt; &#xA;&lt;p&gt;cJSON doesn&#39;t support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to &lt;code&gt;CJSON_NESTING_LIMIT&lt;/code&gt; which is 1000 by default but can be changed at compile time.&lt;/p&gt; &#xA;&lt;h4&gt;Thread Safety&lt;/h4&gt; &#xA;&lt;p&gt;In general cJSON is &lt;strong&gt;not thread safe&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However it is thread safe under the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; is never used (the &lt;code&gt;return_parse_end&lt;/code&gt; parameter of &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; can be used instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_InitHooks&lt;/code&gt; is only ever called before using cJSON in any threads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setlocale&lt;/code&gt; is never called before all calls to cJSON functions have returned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Case Sensitivity&lt;/h4&gt; &#xA;&lt;p&gt;When cJSON was originally created, it didn&#39;t follow the JSON standard and didn&#39;t make a distinction between uppercase and lowercase letters. If you want the correct, standard compliant, behavior, you need to use the &lt;code&gt;CaseSensitive&lt;/code&gt; functions where available.&lt;/p&gt; &#xA;&lt;h4&gt;Duplicate Object Members&lt;/h4&gt; &#xA;&lt;p&gt;cJSON supports parsing and printing JSON that contains objects that have multiple members with the same name. &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; however will always only return the first one.&lt;/p&gt; &#xA;&lt;h1&gt;Enjoy cJSON!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dave Gamble (original author)&lt;/li&gt; &#xA; &lt;li&gt;Max Bruckner and Alan Wang (current maintainer)&lt;/li&gt; &#xA; &lt;li&gt;and the other &lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/CONTRIBUTORS.md&#34;&gt;cJSON contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>redis/redis</title>
    <updated>2023-02-05T08:35:15Z</updated>
    <id>tag:github.com,2023-02-05:/redis/redis</id>
    <link href="https://github.com/redis/redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. You can find more detailed documentation at &lt;a href=&#34;https://redis.io&#34;&gt;redis.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Redis?&lt;/h2&gt; &#xA;&lt;p&gt;Redis is often referred to as a &lt;em&gt;data structures&lt;/em&gt; server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a &lt;em&gt;server-client&lt;/em&gt; model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way.&lt;/p&gt; &#xA;&lt;p&gt;Data structures implemented into Redis have a few special properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that it is also non-volatile.&lt;/li&gt; &#xA; &lt;li&gt;The implementation of data structures emphasizes memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modelled using a high-level programming language.&lt;/li&gt; &#xA; &lt;li&gt;Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, clustering, and high availability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations that work with complex data types like Lists, Sets, ordered data structures, and so forth.&lt;/p&gt; &#xA;&lt;p&gt;If you want to know more, this is a list of selected starting points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to Redis data types. &lt;a href=&#34;https://redis.io/topics/data-types-intro&#34;&gt;https://redis.io/topics/data-types-intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try Redis directly inside your browser. &lt;a href=&#34;https://try.redis.io&#34;&gt;https://try.redis.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The full list of Redis commands. &lt;a href=&#34;https://redis.io/commands&#34;&gt;https://redis.io/commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;There is much more inside the official Redis documentation. &lt;a href=&#34;https://redis.io/documentation&#34;&gt;https://redis.io/documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Redis&lt;/h2&gt; &#xA;&lt;p&gt;Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; &#xA;&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Redis is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; &#xA;&lt;p&gt;It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To append a suffix to Redis program names, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&#34;-alt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build a 32 bit Redis binary using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make 32bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building Redis, it is a good idea to test it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TLS is built, running the tests with TLS enabled (you will need &lt;code&gt;tcl-tls&lt;/code&gt; installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./utils/gen-test-certs.sh&#xA;% ./runtest --tls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; &#xA;&lt;p&gt;Redis has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; &#xA;&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; &#xA;&lt;p&gt;If after building Redis with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Redis distribution.&lt;/p&gt; &#xA;&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Redis, try the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; &#xA; &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&#34;-m32 -march=native&#34; LDFLAGS=&#34;-m32&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Allocator&lt;/h2&gt; &#xA;&lt;p&gt;Selecting a non-default memory allocator when building Redis is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Redis is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; &#xA;&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=libc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monotonic clock&lt;/h2&gt; &#xA;&lt;p&gt;By default, Redis will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&#34;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&#34;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make CFLAGS=&#34;-DUSE_PROCESSOR_CLOCK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verbose build&lt;/h2&gt; &#xA;&lt;p&gt;Redis will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make V=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Redis&lt;/h2&gt; &#xA;&lt;p&gt;To run Redis with the default configuration, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./redis-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to provide your redis.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./redis-server /path/to/redis.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./redis-server --port 9999 --replicaof 127.0.0.1 6379&#xA;% ./redis-server /etc/redis/6379.conf --loglevel debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the options in redis.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; &#xA;&lt;h2&gt;Running Redis with TLS:&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/redis/redis/unstable/TLS.md&#34;&gt;TLS.md&lt;/a&gt; file for more information on how to use Redis with TLS.&lt;/p&gt; &#xA;&lt;h2&gt;Playing with Redis&lt;/h2&gt; &#xA;&lt;p&gt;You can use redis-cli to play with Redis. Start a redis-server instance, then in another terminal try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./redis-cli&#xA;redis&amp;gt; ping&#xA;PONG&#xA;redis&amp;gt; set foo bar&#xA;OK&#xA;redis&amp;gt; get foo&#xA;&#34;bar&#34;&#xA;redis&amp;gt; incr mycounter&#xA;(integer) 1&#xA;redis&amp;gt; incr mycounter&#xA;(integer) 2&#xA;redis&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the list of all the available commands at &lt;a href=&#34;https://redis.io/commands&#34;&gt;https://redis.io/commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Redis&lt;/h2&gt; &#xA;&lt;p&gt;In order to install Redis binaries into /usr/local/bin, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Redis, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd utils&#xA;% ./install_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; &#xA;&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Redis properly as a background daemon that will start again on system reboots.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be able to stop and start Redis using the script named &lt;code&gt;/etc/init.d/redis_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/redis_6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;Note: By contributing code to the Redis project in any form, including sending a pull request via Github, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the BSD license that you can find in the &lt;a href=&#34;https://github.com/redis/redis/raw/unstable/COPYING&#34;&gt;COPYING&lt;/a&gt; file included in the Redis source distribution.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/redis/redis/raw/unstable/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file in this source distribution for more information. For security bugs and vulnerabilities, please see &lt;a href=&#34;https://github.com/redis/redis/raw/unstable/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Redis internals&lt;/h1&gt; &#xA;&lt;p&gt;If you are reading this README you are likely in front of a Github page or you just untarred the Redis distribution tar ball. In both the cases you are basically one step away from the source code, so here we explain the Redis source code layout, what is in each file as a general idea, the most important functions and structures inside the Redis server and so forth. We keep all the discussion at a high level without digging into the details since this document would be huge otherwise and our code base changes continuously, but a general idea should be a good starting point to understand more. Moreover most of the code is heavily commented and easy to follow.&lt;/p&gt; &#xA;&lt;h2&gt;Source code layout&lt;/h2&gt; &#xA;&lt;p&gt;The Redis root directory just contains this README, the Makefile which calls the real Makefile inside the &lt;code&gt;src&lt;/code&gt; directory and an example configuration for Redis and Sentinel. You can find a few shell scripts that are used in order to execute the Redis, Redis Cluster and Redis Sentinel unit tests, which are implemented inside the &lt;code&gt;tests&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Inside the root are the following important directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: contains the Redis implementation, written in C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: contains the unit tests, implemented in Tcl.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deps&lt;/code&gt;: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide &lt;code&gt;libc&lt;/code&gt;, a POSIX compatible interface and a C compiler. Notably &lt;code&gt;deps&lt;/code&gt; contains a copy of &lt;code&gt;jemalloc&lt;/code&gt;, which is the default allocator of Redis under Linux. Note that under &lt;code&gt;deps&lt;/code&gt; there are also things which started with the Redis project, but for which the main repository is not &lt;code&gt;redis/redis&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few more directories but they are not very important for our goals here. We&#39;ll focus mostly on &lt;code&gt;src&lt;/code&gt;, where the Redis implementation is contained, exploring what there is inside each file. The order in which files are exposed is the logical one to follow in order to disclose different layers of complexity incrementally.&lt;/p&gt; &#xA;&lt;p&gt;Note: lately Redis was refactored quite a bit. Function names and file names have been changed, so you may find that this documentation reflects the &lt;code&gt;unstable&lt;/code&gt; branch more closely. For instance, in Redis 3.0 the &lt;code&gt;server.c&lt;/code&gt; and &lt;code&gt;server.h&lt;/code&gt; files were named &lt;code&gt;redis.c&lt;/code&gt; and &lt;code&gt;redis.h&lt;/code&gt;. However the overall structure is the same. Keep in mind that all the new developments and pull requests should be performed against the &lt;code&gt;unstable&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;server.h&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to understand how a program works is to understand the data structures it uses. So we&#39;ll start from the main header file of Redis, which is &lt;code&gt;server.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the server configuration and in general all the shared state is defined in a global structure called &lt;code&gt;server&lt;/code&gt;, of type &lt;code&gt;struct redisServer&lt;/code&gt;. A few important fields in this structure are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;server.db&lt;/code&gt; is an array of Redis databases, where data is stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.commands&lt;/code&gt; is the command table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.clients&lt;/code&gt; is a linked list of clients connected to the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.master&lt;/code&gt; is a special client, the master, if the instance is a replica.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are tons of other fields. Most fields are commented directly inside the structure definition.&lt;/p&gt; &#xA;&lt;p&gt;Another important Redis data structure is the one defining a client. In the past it was called &lt;code&gt;redisClient&lt;/code&gt;, now just &lt;code&gt;client&lt;/code&gt;. The structure has many fields, here we&#39;ll just show the main ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct client {&#xA;    int fd;&#xA;    sds querybuf;&#xA;    int argc;&#xA;    robj **argv;&#xA;    redisDb *db;&#xA;    int flags;&#xA;    list *reply;&#xA;    // ... many other fields ...&#xA;    char buf[PROTO_REPLY_CHUNK_BYTES];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client structure defines a &lt;em&gt;connected client&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;fd&lt;/code&gt; field is the client socket file descriptor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;querybuf&lt;/code&gt; accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reply&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see in the client structure above, arguments in a command are described as &lt;code&gt;robj&lt;/code&gt; structures. The following is the full &lt;code&gt;robj&lt;/code&gt; structure, which defines a &lt;em&gt;Redis object&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct redisObject {&#xA;    unsigned type:4;&#xA;    unsigned encoding:4;&#xA;    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or&#xA;                            * LFU data (least significant 8 bits frequency&#xA;                            * and most significant 16 bits access time). */&#xA;    int refcount;&#xA;    void *ptr;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically this structure can represent all the basic Redis data types like strings, lists, sets, sorted sets and so forth. The interesting thing is that it has a &lt;code&gt;type&lt;/code&gt; field, so that it is possible to know what type a given object has, and a &lt;code&gt;refcount&lt;/code&gt;, so that the same object can be referenced in multiple places without allocating it multiple times. Finally the &lt;code&gt;ptr&lt;/code&gt; field points to the actual representation of the object, which might vary even for the same type, depending on the &lt;code&gt;encoding&lt;/code&gt; used.&lt;/p&gt; &#xA;&lt;p&gt;Redis objects are used extensively in the Redis internals, however in order to avoid the overhead of indirect accesses, recently in many places we just use plain dynamic strings not wrapped inside a Redis object.&lt;/p&gt; &#xA;&lt;h2&gt;server.c&lt;/h2&gt; &#xA;&lt;p&gt;This is the entry point of the Redis server, where the &lt;code&gt;main()&lt;/code&gt; function is defined. The following are the most important steps in order to startup the Redis server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;initServerConfig()&lt;/code&gt; sets up the default values of the &lt;code&gt;server&lt;/code&gt; structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;initServer()&lt;/code&gt; allocates the data structures needed to operate, setup the listening socket, and so forth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aeMain()&lt;/code&gt; starts the event loop which listens for new connections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two special functions called periodically by the event loop:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;serverCron()&lt;/code&gt; is called periodically (according to &lt;code&gt;server.hz&lt;/code&gt; frequency), and performs tasks that must be performed from time to time, like checking for timed out clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeSleep()&lt;/code&gt; is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Inside server.c you can find code that handles other vital things of the Redis server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;call()&lt;/code&gt; is used in order to call a given command in the context of a given client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;activeExpireCycle()&lt;/code&gt; handles eviction of keys with a time to live set via the &lt;code&gt;EXPIRE&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;performEvictions()&lt;/code&gt; is called when a new write command should be performed but Redis is out of memory according to the &lt;code&gt;maxmemory&lt;/code&gt; directive.&lt;/li&gt; &#xA; &lt;li&gt;The global variable &lt;code&gt;redisCommandTable&lt;/code&gt; defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;commands.c&lt;/h2&gt; &#xA;&lt;p&gt;This file is auto generated by utils/generate-command-code.py, the content is based on the JSON files in the src/commands folder. These are meant to be the single source of truth about the Redis commands, and all the metadata about them. These JSON files are not meant to be used by anyone directly, instead that metadata can be obtained via the &lt;code&gt;COMMAND&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;networking.c&lt;/h2&gt; &#xA;&lt;p&gt;This file defines all the I/O functions with clients, masters and replicas (which in Redis are just special clients):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;createClient()&lt;/code&gt; allocates and initializes a new client.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;addReply*()&lt;/code&gt; family of functions are used by command implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;writeToClient()&lt;/code&gt; transmits the data pending in the output buffers to the client and is called by the &lt;em&gt;writable event handler&lt;/em&gt; &lt;code&gt;sendReplyToClient()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;readQueryFromClient()&lt;/code&gt; is the &lt;em&gt;readable event handler&lt;/em&gt; and accumulates data read from the client into the query buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;processInputBuffer()&lt;/code&gt; is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls &lt;code&gt;processCommand()&lt;/code&gt; which is defined inside &lt;code&gt;server.c&lt;/code&gt; in order to actually execute the command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;freeClient()&lt;/code&gt; deallocates, disconnects and removes a client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;aof.c and rdb.c&lt;/h2&gt; &#xA;&lt;p&gt;As you can guess from the names, these files implement the RDB and AOF persistence for Redis. Redis uses a persistence model based on the &lt;code&gt;fork()&lt;/code&gt; system call in order to create a process with the same (shared) memory content of the main Redis process. This secondary process dumps the content of the memory on disk. This is used by &lt;code&gt;rdb.c&lt;/code&gt; to create the snapshots on disk and by &lt;code&gt;aof.c&lt;/code&gt; in order to perform the AOF rewrite when the append only file gets too big.&lt;/p&gt; &#xA;&lt;p&gt;The implementation inside &lt;code&gt;aof.c&lt;/code&gt; has additional functions in order to implement an API that allows commands to append new commands into the AOF file as clients execute them.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;call()&lt;/code&gt; function defined inside &lt;code&gt;server.c&lt;/code&gt; is responsible for calling the functions that in turn will write the commands into the AOF.&lt;/p&gt; &#xA;&lt;h2&gt;db.c&lt;/h2&gt; &#xA;&lt;p&gt;Certain Redis commands operate on specific data types; others are general. Examples of generic commands are &lt;code&gt;DEL&lt;/code&gt; and &lt;code&gt;EXPIRE&lt;/code&gt;. They operate on keys and not on their values specifically. All those generic commands are defined inside &lt;code&gt;db.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moreover &lt;code&gt;db.c&lt;/code&gt; implements an API in order to perform certain operations on the Redis dataset without directly accessing the internal data structures.&lt;/p&gt; &#xA;&lt;p&gt;The most important functions inside &lt;code&gt;db.c&lt;/code&gt; which are used in many command implementations are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lookupKeyRead()&lt;/code&gt; and &lt;code&gt;lookupKeyWrite()&lt;/code&gt; are used in order to get a pointer to the value associated to a given key, or &lt;code&gt;NULL&lt;/code&gt; if the key does not exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dbAdd()&lt;/code&gt; and its higher level counterpart &lt;code&gt;setKey()&lt;/code&gt; create a new key in a Redis database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dbDelete()&lt;/code&gt; removes a key and its associated value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;emptyDb()&lt;/code&gt; removes an entire single database or all the databases defined.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rest of the file implements the generic commands exposed to the client.&lt;/p&gt; &#xA;&lt;h2&gt;object.c&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;robj&lt;/code&gt; structure defining Redis objects was already described. Inside &lt;code&gt;object.c&lt;/code&gt; there are all the functions that operate with Redis objects at a basic level, like functions to allocate new objects, handle the reference counting and so forth. Notable functions inside this file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;incrRefCount()&lt;/code&gt; and &lt;code&gt;decrRefCount()&lt;/code&gt; are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createObject()&lt;/code&gt; allocates a new object. There are also specialized functions to allocate string objects having a specific content, like &lt;code&gt;createStringObjectFromLongLong()&lt;/code&gt; and similar functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This file also implements the &lt;code&gt;OBJECT&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;replication.c&lt;/h2&gt; &#xA;&lt;p&gt;This is one of the most complex files inside Redis, it is recommended to approach it only after getting a bit familiar with the rest of the code base. In this file there is the implementation of both the master and replica role of Redis.&lt;/p&gt; &#xA;&lt;p&gt;One of the most important functions inside this file is &lt;code&gt;replicationFeedSlaves()&lt;/code&gt; that writes commands to the clients representing replica instances connected to our master, so that the replicas can get the writes performed by the clients: this way their data set will remain synchronized with the one in the master.&lt;/p&gt; &#xA;&lt;p&gt;This file also implements both the &lt;code&gt;SYNC&lt;/code&gt; and &lt;code&gt;PSYNC&lt;/code&gt; commands that are used in order to perform the first synchronization between masters and replicas, or to continue the replication after a disconnection.&lt;/p&gt; &#xA;&lt;h2&gt;Script&lt;/h2&gt; &#xA;&lt;p&gt;The script unit is composed of 3 units:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;script.c&lt;/code&gt; - integration of scripts with Redis (commands execution, set replication/resp, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script_lua.c&lt;/code&gt; - responsible to execute Lua code, uses script.c to interact with Redis from within the Lua code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function_lua.c&lt;/code&gt; - contains the Lua engine implementation, uses script_lua.c to execute the Lua code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;functions.c&lt;/code&gt; - contains Redis Functions implementation (FUNCTION command), uses functions_lua.c if the function it wants to invoke needs the Lua engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eval.c&lt;/code&gt; - contains the &lt;code&gt;eval&lt;/code&gt; implementation using &lt;code&gt;script_lua.c&lt;/code&gt; to invoke the Lua code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other C files&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;t_hash.c&lt;/code&gt;, &lt;code&gt;t_list.c&lt;/code&gt;, &lt;code&gt;t_set.c&lt;/code&gt;, &lt;code&gt;t_string.c&lt;/code&gt;, &lt;code&gt;t_zset.c&lt;/code&gt; and &lt;code&gt;t_stream.c&lt;/code&gt; contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client command implementations for these data types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ae.c&lt;/code&gt; implements the Redis event loop, it&#39;s a self contained library which is simple to read and understand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sds.c&lt;/code&gt; is the Redis string library, check &lt;a href=&#34;https://github.com/antirez/sds&#34;&gt;https://github.com/antirez/sds&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;anet.c&lt;/code&gt; is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dict.c&lt;/code&gt; is an implementation of a non-blocking hash table which rehashes incrementally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cluster.c&lt;/code&gt; implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read &lt;code&gt;cluster.c&lt;/code&gt; make sure to read the &lt;a href=&#34;https://redis.io/topics/cluster-spec&#34;&gt;Redis Cluster specification&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Anatomy of a Redis command&lt;/h2&gt; &#xA;&lt;p&gt;All the Redis commands are defined in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void foobarCommand(client *c) {&#xA;    printf(&#34;%s&#34;,c-&amp;gt;argv[1]-&amp;gt;ptr); /* Do something with the argument. */&#xA;    addReply(c,shared.ok); /* Reply something to the client. */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command function is referenced by a JSON file, together with its metadata, see &lt;code&gt;commands.c&lt;/code&gt; described above for details. The command flags are documented in the comment above the &lt;code&gt;struct redisCommand&lt;/code&gt; in &lt;code&gt;server.h&lt;/code&gt;. For other details, please refer to the &lt;code&gt;COMMAND&lt;/code&gt; command. &lt;a href=&#34;https://redis.io/commands/command/&#34;&gt;https://redis.io/commands/command/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After the command operates in some way, it returns a reply to the client, usually using &lt;code&gt;addReply()&lt;/code&gt; or a similar function defined inside &lt;code&gt;networking.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are tons of command implementations inside the Redis source code that can serve as examples of actual commands implementations (e.g. pingCommand). Writing a few toy commands can be a good exercise to get familiar with the code base.&lt;/p&gt; &#xA;&lt;p&gt;There are also many other files not described here, but it is useless to cover everything. We just want to help you with the first steps. Eventually you&#39;ll find your way inside the Redis code base :-)&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt;</summary>
  </entry>
</feed>