<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:48:28Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wack0/CVE-2022-21894</title>
    <updated>2023-03-12T01:48:28Z</updated>
    <id>tag:github.com,2023-03-12:/Wack0/CVE-2022-21894</id>
    <link href="https://github.com/Wack0/CVE-2022-21894" rel="alternate"></link>
    <summary type="html">&lt;p&gt;baton drop (CVE-2022-21894): Secure Boot Security Feature Bypass Vulnerability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;baton drop (CVE-2022-21894): Secure Boot Security Feature Bypass Vulnerability&lt;/h1&gt; &#xA;&lt;p&gt;Windows Boot Applications allow the &lt;code&gt;truncatememory&lt;/code&gt; setting to remove blocks of memory containing &#34;persistent&#34; ranges of serialised data from the memory map, leading to Secure Boot bypass.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;truncatememory&lt;/code&gt; BCD element will remove all memory above a specified physical address from the memory map.&lt;/li&gt; &#xA; &lt;li&gt;This is performed for each boot application during initialisation, before the serialised Secure Boot policy is read from memory.&lt;/li&gt; &#xA; &lt;li&gt;Therefore, such an element can be used to remove the serialised Secure Boot policy from the memory map.&lt;/li&gt; &#xA; &lt;li&gt;This will allow dangerous settings to be used in a boot application (&lt;code&gt;bootdebug&lt;/code&gt;, &lt;code&gt;testsigning&lt;/code&gt;, &lt;code&gt;nointegritychecks&lt;/code&gt;), thus breaking Secure Boot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This issue was fixed by two different changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After attempting to load a serialised Secure Boot policy, if no policy was loaded, and Secure Boot is enabled, and the boot application was not loaded directly by UEFI firmware, and the boot application is not &lt;code&gt;bootmgr&lt;/code&gt;, boot application initialisation fails.&lt;/li&gt; &#xA; &lt;li&gt;When loading a boot application, if it has a &lt;code&gt;VERSIONINFO&lt;/code&gt; resource containing an &lt;code&gt;OriginalFilename&lt;/code&gt;, if that filename is included in a blocklist (containing &lt;code&gt;bootmgr.exe&lt;/code&gt; and &lt;code&gt;hvloader.exe&lt;/code&gt;; in Nickel, &lt;code&gt;hvloader.efi&lt;/code&gt; was added but this did not get backported), the load fails. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In Windows 8 and Windows 8.1, &lt;code&gt;hvloader.exe&lt;/code&gt; is not included in &lt;code&gt;winload&lt;/code&gt;&#39;s blocklist - it originally was, which broke Hyper-V loading!&lt;/li&gt; &#xA;   &lt;li&gt;Since Windows 10 version 1809, if a certain flags bit is set (used with &lt;code&gt;flightedbootmgr&lt;/code&gt; element to load &lt;code&gt;bootmgr&lt;/code&gt; from disk), the &lt;code&gt;OriginalFilename&lt;/code&gt; is &lt;strong&gt;required&lt;/strong&gt; to be &lt;code&gt;bootmgr.exe&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exploitation&lt;/h2&gt; &#xA;&lt;p&gt;The attacker needs to ensure the serialised Secure Boot Policy is allocated above a known physical address.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, it is allocated at the lowest possible address.&lt;/li&gt; &#xA; &lt;li&gt;Originally, the serialised Secure Boot Policy gets allocated after it is loaded, before using any configuration loaded from the BCD. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Since RS1, the serialised Secure Boot Policy gets allocated when loading a boot application.&lt;/li&gt; &#xA;   &lt;li&gt;Since RS2, any existing serialised Secure Boot Policy gets freed when serialising a Secure Boot Policy.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The serialised Secure Boot Policy gets reallocated if, when loading a boot application, the BCD entry&#39;s &lt;code&gt;osdevice&lt;/code&gt; is a BitLocker-encrypted partition where the VMK was derived using the TPM. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This can be faked by setting bit 0 of the key flags after successful TPM unsealing; this bit can be set manually in the BitLocker metadata, with additional metadata added to specify Secure Boot being used for integrity validation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;avoidlowmemory&lt;/code&gt; element can be used to ensure all allocations of physical memory are above a specified physical address:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since Windows 10, this element is disallowed if VBS is enabled, but as it is used during boot application initialisation, before the serialised Secure Boot policy is read from memory, loading &lt;code&gt;bootmgr&lt;/code&gt; and specifying a custom BCD path (using &lt;code&gt;bcdfilepath&lt;/code&gt; element aka &lt;code&gt;custom:22000023&lt;/code&gt;) can be used to bypass this.&lt;/li&gt; &#xA; &lt;li&gt;If BitLocker is present on the OS volume, or the target system is running TH1 or TH2, then this method will fail; it is therefore also possible to run the attack once with a Windows 8.x &lt;code&gt;bootmgr&lt;/code&gt; to disable VBS and then swap back to the original bootloader. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 10 changed boot application initialisation to cap all TPM PCRs once, so a Windows 8.x &lt;code&gt;bootmgr&lt;/code&gt; will fail to unseal the VMK on a Windows 10+ system.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;hvloader.efi&lt;/code&gt; can be loaded with the &lt;code&gt;nointegritychecks&lt;/code&gt; element to load a self-signed &lt;code&gt;mcupdate.dll&lt;/code&gt;, whose entry point will be called before &lt;code&gt;ExitBootServices&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, on non-AMD64 systems, &lt;code&gt;winload.efi&lt;/code&gt; before TH2 can be used with the &lt;code&gt;testsigning&lt;/code&gt; element; this allows self-signed binaries with the &lt;code&gt;szOID_NT5_CRYPTO&lt;/code&gt; EKU in the certificate.&lt;/p&gt; &#xA;&lt;p&gt;On ARMv7 systems, loading a patched self-signed &lt;code&gt;hal.dll&lt;/code&gt; with an import to &lt;code&gt;mcupdate.dll&lt;/code&gt; will be necessary to get code execution.&lt;/p&gt; &#xA;&lt;p&gt;On x86 and AMD64 systems, the file loaded as &lt;code&gt;mcupdate.dll&lt;/code&gt; must be named &lt;code&gt;mcupdate_*.dll&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is the CPUID manufacturer string (&lt;code&gt;GenuineIntel&lt;/code&gt;, &lt;code&gt;AuthenticAMD&lt;/code&gt; etc).&lt;/p&gt; &#xA;&lt;p&gt;On ARM64 systems, this technique cannot be used due to the earliest available production signed build being a WinPE of RS2; thus currently only tethered code execution can be performed (using &lt;code&gt;bootdebug&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Included files&lt;/h2&gt; &#xA;&lt;p&gt;This repository includes the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Source code for a simple payload is provided. This payload just waits for an interrupt infinitely, as without finding interesting functions and variables in the calling boot application, it is impossible to do anything else. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Because &lt;code&gt;mcupdate.dll&lt;/code&gt; runs at a virtual address with paging enabled, it is impossible to call EFI functions directly (paging needs to be disabled to call EFI functions, returning to a virtual address with paging off does not lead to a good time).&lt;/li&gt; &#xA;   &lt;li&gt;To call EFI functions, a payload would need to call &lt;code&gt;BlImgLoadPEImageEx&lt;/code&gt; or &lt;code&gt;BlImgLoadPEImageFromSourceBuffer&lt;/code&gt; with bit 0 set in the flags to load an additional payload at a 1:1 physical address-virtual address mapping. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Alternatively, it can call &lt;code&gt;BlImgAllocateImageBuffer&lt;/code&gt; with the same bit set to allocate memory at a 1:1 physical address-virtual address mapping; then load a payload itself (or remap itself there).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An ISO that exploits this issue on AMD64 using the &lt;code&gt;bootmgfw&lt;/code&gt; from Windows 8 RTM and the &lt;code&gt;hvloader&lt;/code&gt; from TH1 RTM. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The payload used here prints a message to the screen by using a function from &lt;code&gt;hvloader&lt;/code&gt; obtained by offset and then infinite loops.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An ISO that exploits this issue on AMD64 using &lt;code&gt;bootmgr&lt;/code&gt; from RS1 and the &lt;code&gt;hvloader&lt;/code&gt; from TH1 RTM.&lt;/li&gt; &#xA; &lt;li&gt;An ISO that exploits this issue on AMD64 using &lt;code&gt;bootmgr&lt;/code&gt; version 19041.1081 and the &lt;code&gt;hvloader&lt;/code&gt; from TH1 RTM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Postscript&lt;/h2&gt; &#xA;&lt;p&gt;This issue can be used to dump BitLocker keys (where Secure Boot is used for integrity validation).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Although it is possible, the exact method of getting code execution with derived BitLocker keys for an arbitrary volume in memory will not be disclosed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The fix for this issue also fixed another issue which has no CVE.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bootmgr&lt;/code&gt; ignores any BitLocker keytable already in memory and allocates a new one, without wiping the old one. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Therefore, an attacker could load RS2+ &lt;code&gt;bootmgr&lt;/code&gt; from &lt;code&gt;bootmgr&lt;/code&gt; (specifying an arbitrary &lt;code&gt;osdevice&lt;/code&gt; where Secure Boot is used for integrity validation), boot to WinPE, load a known vulnerable driver, and use it to search for and dump the existing BitLocker keytable in physical memory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No known vulnerable boot application has been revoked yet.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Until revocation happens, an attacker can just bring their own vulnerable bootloader(s).&lt;/li&gt; &#xA; &lt;li&gt;Revocation would cause all existing Windows installation/recovery media, and old backups, to fail to boot. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Boot failure would occur even with Secure Boot disabled due to &lt;code&gt;bootmgr&lt;/code&gt; checking its own signature.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bitcoin-core/secp256k1</title>
    <updated>2023-03-12T01:48:28Z</updated>
    <id>tag:github.com,2023-03-12:/bitcoin-core/secp256k1</id>
    <link href="https://github.com/bitcoin-core/secp256k1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Optimized C library for EC operations on curve secp256k1&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libsecp256k1&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cirrus-ci.com/github/bitcoin-core/secp256k1&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/bitcoin-core/secp256k1.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/dependencies-none-success&#34; alt=&#34;Dependencies: None&#34;&gt; &lt;a href=&#34;https://web.libera.chat/#secp256k1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/irc.libera.chat-%23secp256k1-success&#34; alt=&#34;irc.libera.chat #secp256k1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Optimized C library for ECDSA signatures and secret/public key operations on curve secp256k1.&lt;/p&gt; &#xA;&lt;p&gt;This library is intended to be the highest quality publicly available library for cryptography on the secp256k1 curve. However, the primary focus of its development has been for usage in the Bitcoin system and usage unlike Bitcoin&#39;s may be less well tested, verified, or suffer from a less well thought out interface. Correct usage requires some care and consideration that the library is fit for your application&#39;s purpose.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;secp256k1 ECDSA signing/verification and key generation.&lt;/li&gt; &#xA; &lt;li&gt;Additive and multiplicative tweaking of secret/public keys.&lt;/li&gt; &#xA; &lt;li&gt;Serialization/parsing of secret keys, public keys, signatures.&lt;/li&gt; &#xA; &lt;li&gt;Constant time, constant memory access signing and public key generation.&lt;/li&gt; &#xA; &lt;li&gt;Derandomized ECDSA (via RFC6979 or with a caller provided function.)&lt;/li&gt; &#xA; &lt;li&gt;Very efficient implementation.&lt;/li&gt; &#xA; &lt;li&gt;Suitable for embedded systems.&lt;/li&gt; &#xA; &lt;li&gt;No runtime dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Optional module for public key recovery.&lt;/li&gt; &#xA; &lt;li&gt;Optional module for ECDH key exchange.&lt;/li&gt; &#xA; &lt;li&gt;Optional module for Schnorr signatures according to &lt;a href=&#34;https://github.com/bitcoin/bips/raw/master/bip-0340.mediawiki&#34;&gt;BIP-340&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation details&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No runtime heap allocation.&lt;/li&gt; &#xA;   &lt;li&gt;Extensive testing infrastructure.&lt;/li&gt; &#xA;   &lt;li&gt;Structured to facilitate review and analysis.&lt;/li&gt; &#xA;   &lt;li&gt;Intended to be portable to any system with a C89 compiler and uint64_t support.&lt;/li&gt; &#xA;   &lt;li&gt;No use of floating types.&lt;/li&gt; &#xA;   &lt;li&gt;Expose only higher level interfaces to minimize the API surface and improve application security. (&#34;Be difficult to use insecurely.&#34;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Field operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimized implementation of arithmetic modulo the curve&#39;s field size (2^256 - 0x1000003D1). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using 5 52-bit limbs (including hand-optimized assembly for x86_64, by Diederik Huys).&lt;/li&gt; &#xA;     &lt;li&gt;Using 10 26-bit limbs (including hand-optimized assembly for 32-bit ARM, by Wladimir J. van der Laan). &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;This is an experimental feature that has not received enough scrutiny to satisfy the standard of quality of this library but is made available for testing and review by the community.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scalar operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimized implementation without data-dependent branches of arithmetic modulo the curve&#39;s order. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using 4 64-bit limbs (relying on __int128 support in the compiler).&lt;/li&gt; &#xA;     &lt;li&gt;Using 8 32-bit limbs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modular inverses (both field elements and scalars) based on &lt;a href=&#34;https://gcd.cr.yp.to/index.html&#34;&gt;safegcd&lt;/a&gt; with some modifications, and a variable-time variant (by Peter Dettman).&lt;/li&gt; &#xA; &lt;li&gt;Group operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Point addition formula specifically simplified for the curve equation (y^2 = x^3 + 7).&lt;/li&gt; &#xA;   &lt;li&gt;Use addition between points in Jacobian and affine coordinates where possible.&lt;/li&gt; &#xA;   &lt;li&gt;Use a unified addition/doubling formula where necessary to avoid data-dependent branches.&lt;/li&gt; &#xA;   &lt;li&gt;Point/x comparison without a field inversion by comparison in the Jacobian coordinate space.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Point multiplication for verification (a&lt;em&gt;P + b&lt;/em&gt;G). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use wNAF notation for point multiplicands.&lt;/li&gt; &#xA;   &lt;li&gt;Use a much larger window for multiples of G, using precomputed multiples.&lt;/li&gt; &#xA;   &lt;li&gt;Use Shamir&#39;s trick to do the multiplication with the public key and the generator simultaneously.&lt;/li&gt; &#xA;   &lt;li&gt;Use secp256k1&#39;s efficiently-computable endomorphism to split the P multiplicand into 2 half-sized ones.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Point multiplication for signing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use a precomputed table of multiples of powers of 16 multiplied with the generator, so general multiplication becomes a series of additions.&lt;/li&gt; &#xA;   &lt;li&gt;Intended to be completely free of timing sidechannels for secret-key operations (on reasonable hardware/toolchains) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Access the table with branch-free conditional moves so memory access is uniform.&lt;/li&gt; &#xA;     &lt;li&gt;No data-dependent branches&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Optional runtime blinding which attempts to frustrate differential power analysis.&lt;/li&gt; &#xA;   &lt;li&gt;The precomputed tables add and eventually subtract points for which no known scalar (secret key) is known, preventing even an attacker with control over the secret key used to control the data internally.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building with Autotools&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./autogen.sh&#xA;$ ./configure&#xA;$ make&#xA;$ make check  # run the test suite&#xA;$ sudo make install  # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile optional modules (such as Schnorr signatures), you need to run &lt;code&gt;./configure&lt;/code&gt; with additional flags (such as &lt;code&gt;--enable-module-schnorrsig&lt;/code&gt;). Run &lt;code&gt;./configure --help&lt;/code&gt; to see the full list of available flags.&lt;/p&gt; &#xA;&lt;h2&gt;Building with CMake (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;To maintain a pristine source tree, CMake encourages to perform an out-of-source build by using a separate dedicated build tree.&lt;/p&gt; &#xA;&lt;h3&gt;Building on POSIX systems&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake ..&#xA;$ make&#xA;$ make check  # run the test suite&#xA;$ sudo make install  # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile optional modules (such as Schnorr signatures), you need to run &lt;code&gt;cmake&lt;/code&gt; with additional flags (such as &lt;code&gt;-DSECP256K1_ENABLE_MODULE_SCHNORRSIG=ON&lt;/code&gt;). Run &lt;code&gt;cmake .. -LH&lt;/code&gt; to see the full list of available flags.&lt;/p&gt; &#xA;&lt;h3&gt;Cross compiling&lt;/h3&gt; &#xA;&lt;p&gt;To alleviate issues with cross compiling, preconfigured toolchain files are available in the &lt;code&gt;cmake&lt;/code&gt; directory. For example, to cross compile for Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/x86_64-w64-mingw32.toolchain.cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To cross compile for Android with &lt;a href=&#34;https://developer.android.com/ndk/guides/cmake&#34;&gt;NDK&lt;/a&gt; (using NDK&#39;s toolchain file, and assuming the &lt;code&gt;ANDROID_NDK_ROOT&lt;/code&gt; environment variable has been set):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake .. -DCMAKE_TOOLCHAIN_FILE=&#34;${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake&#34; -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=28&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building on Windows&lt;/h3&gt; &#xA;&lt;p&gt;To build on Windows with Visual Studio, a proper &lt;a href=&#34;https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#visual-studio-generators&#34;&gt;generator&lt;/a&gt; must be specified for a new build tree.&lt;/p&gt; &#xA;&lt;p&gt;The following example assumes using of Visual Studio 2022 and CMake v3.21+.&lt;/p&gt; &#xA;&lt;p&gt;In &#34;Developer Command Prompt for VS 2022&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;cmake -G &#34;Visual Studio 17 2022&#34; -A x64 -S . -B build&#xA;&amp;gt;cmake --build build --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage examples&lt;/h2&gt; &#xA;&lt;p&gt;Usage examples can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples&#34;&gt;examples&lt;/a&gt; directory. To compile them you need to configure with &lt;code&gt;--enable-examples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples/ecdsa.c&#34;&gt;ECDSA example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples/schnorr.c&#34;&gt;Schnorr signatures example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples/ecdh.c&#34;&gt;Deriving a shared secret (ECDH) example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To compile the Schnorr signature and ECDH examples, you also need to configure with &lt;code&gt;--enable-module-schnorrsig&lt;/code&gt; and &lt;code&gt;--enable-module-ecdh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Test coverage&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to have full coverage of the reachable lines and branches.&lt;/p&gt; &#xA;&lt;p&gt;To create a test coverage report, configure with &lt;code&gt;--enable-coverage&lt;/code&gt; (use of GCC is necessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-coverage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a report, &lt;code&gt;gcovr&lt;/code&gt; is recommended, as it includes branch coverage reporting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gcovr --exclude &#39;src/bench*&#39; --print-summary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a HTML report with coloured and annotated source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p coverage&#xA;$ gcovr --exclude &#39;src/bench*&#39; --html --html-details -o coverage/coverage.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;If configured with &lt;code&gt;--enable-benchmark&lt;/code&gt; (which is the default), binaries for benchmarking the libsecp256k1 functions will be present in the root directory after the build.&lt;/p&gt; &#xA;&lt;p&gt;To print the benchmark result to the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bench_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a CSV file for the benchmark result :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bench_name | sed &#39;2d;s/ \{1,\}//g&#39; &amp;gt; bench_name.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting a vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arthenica/ffmpeg-kit</title>
    <updated>2023-03-12T01:48:28Z</updated>
    <id>tag:github.com,2023-03-12:/arthenica/ffmpeg-kit</id>
    <link href="https://github.com/arthenica/ffmpeg-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FFmpeg Kit for applications. Supports Android, Flutter, iOS, Linux, macOS, React Native and tvOS. Supersedes MobileFFmpeg, flutter_ffmpeg and react-native-ffmpeg.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FFmpegKit &lt;img src=&#34;https://img.shields.io/badge/release-v5.1-blue.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.arthenica/ffmpeg-kit-min&#34; alt=&#34;Maven Central&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/ffmpeg-kit-ios-min&#34; alt=&#34;CocoaPods&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/ffmpeg_kit_flutter.svg?sanitize=true&#34; alt=&#34;pub&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/ffmpeg-kit-react-native.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/arthenica/ffmpeg-kit/raw/main/docs/assets/ffmpeg-kit-icon-v9.png&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; is a collection of tools to use &lt;code&gt;FFmpeg&lt;/code&gt; in &lt;code&gt;Android&lt;/code&gt;, &lt;code&gt;iOS&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;, &lt;code&gt;Flutter&lt;/code&gt; and &lt;code&gt;React Native&lt;/code&gt; applications.&lt;/p&gt; &#xA;&lt;p&gt;It includes scripts to build &lt;code&gt;FFmpeg&lt;/code&gt; native libraries, a wrapper library to run &lt;code&gt;FFmpeg&lt;/code&gt;/&lt;code&gt;FFprobe&lt;/code&gt; commands in applications and 8 prebuilt binary packages available at &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://search.maven.org&#34;&gt;Maven Central&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://pub.dev&#34;&gt;pub&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scripts to build FFmpeg native libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; wrapper library to run &lt;code&gt;FFmpeg&lt;/code&gt;/&lt;code&gt;FFprobe&lt;/code&gt; commands in applications&lt;/li&gt; &#xA; &lt;li&gt;Supports native platforms: Android, iOS, Linux, macOS and tvOS&lt;/li&gt; &#xA; &lt;li&gt;Supports hybrid platforms: Flutter, React Native&lt;/li&gt; &#xA; &lt;li&gt;Based on FFmpeg &lt;code&gt;v4.5-dev&lt;/code&gt; or later with optional system and external libraries&lt;/li&gt; &#xA; &lt;li&gt;8 prebuilt binary packages available at &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://search.maven.org&#34;&gt;Maven Central&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://pub.dev&#34;&gt;pub&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Licensed under &lt;code&gt;LGPL 3.0&lt;/code&gt; by default, &lt;code&gt;GPL v3.0&lt;/code&gt; if GPL licensed libraries are enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Android&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arthenica/ffmpeg-kit/main/android&#34;&gt;Android&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;Android&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. iOS, macOS, tvOS&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arthenica/ffmpeg-kit/main/apple&#34;&gt;Apple&lt;/a&gt; to use &lt;code&gt;FFmpegKit&lt;/code&gt; on &lt;code&gt;Apple&lt;/code&gt; platforms (&lt;code&gt;iOS&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;4. Flutter&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arthenica/ffmpeg-kit/main/flutter/flutter&#34;&gt;Flutter&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;Flutter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;5. Linux&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arthenica/ffmpeg-kit/main/linux&#34;&gt;Linux&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;Linux&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;6. React Native&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arthenica/ffmpeg-kit/main/react-native&#34;&gt;React Native&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;React Native&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;7. Build Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;android.sh&lt;/code&gt;, &lt;code&gt;ios.sh&lt;/code&gt;, &lt;code&gt;linux.sh&lt;/code&gt;, &lt;code&gt;macos.sh&lt;/code&gt; and &lt;code&gt;tvos.sh&lt;/code&gt; to build &lt;code&gt;FFmpegKit&lt;/code&gt; for each native platform.&lt;/p&gt; &#xA;&lt;p&gt;All scripts support additional options to enable optional libraries and disable platform architectures. See &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/wiki/Building&#34;&gt;Building&lt;/a&gt; wiki page for the details.&lt;/p&gt; &#xA;&lt;h3&gt;8. FFmpegKit Library&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; is a wrapper library that allows you to easily run &lt;code&gt;FFmpeg&lt;/code&gt;/&lt;code&gt;FFprobe&lt;/code&gt; commands in applications. It provides additional features on top of &lt;code&gt;FFmpeg&lt;/code&gt; to enable platform specific resources, control how commands are executed and how the results are handled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Android&lt;/code&gt; library of &lt;code&gt;FFmpegKit&lt;/code&gt; has a &lt;code&gt;Java&lt;/code&gt; API, &lt;code&gt;Apple&lt;/code&gt; libraries (&lt;code&gt;iOS&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;) have an &lt;code&gt;Objective-C&lt;/code&gt; API, &lt;code&gt;Flutter&lt;/code&gt; library comes with a &lt;code&gt;Dart&lt;/code&gt; API, &lt;code&gt;Linux&lt;/code&gt; library has a &lt;code&gt;C++&lt;/code&gt; API and &lt;code&gt;React Native&lt;/code&gt; library provides a &lt;code&gt;JavaScript&lt;/code&gt; API with &lt;code&gt;Typescript&lt;/code&gt; definitions, which are identical in terms of features and capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;9. Packages&lt;/h3&gt; &#xA;&lt;p&gt;There are eight different &lt;code&gt;ffmpeg-kit&lt;/code&gt; packages distributed on &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://search.maven.org&#34;&gt;Maven Central&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://pub.dev&#34;&gt;pub&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;. Below you can see which system libraries and external libraries are enabled in each one of them.&lt;/p&gt; &#xA;&lt;p&gt;Please remember that some parts of &lt;code&gt;FFmpeg&lt;/code&gt; are licensed under the &lt;code&gt;GPL&lt;/code&gt; and only &lt;code&gt;GPL&lt;/code&gt; licensed &lt;code&gt;ffmpeg-kit&lt;/code&gt; packages include them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;min&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;min-gpl&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;https&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;https-gpl&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;audio&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;video&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;full&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;full-gpl&lt;/sup&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;external libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;vid.stab&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x264&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x265&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;xvidcore&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vid.stab&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x264&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x265&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;xvidcore&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;lame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libilbc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvorbis&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opencore-amr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opus&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;shine&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;soxr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;speex&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;twolame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vo-amrwbenc&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;dav1d&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fontconfig&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;freetype&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fribidi&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;kvazaar&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libass&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libiconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libtheora&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvpx&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libwebp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;snappy&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zimg&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;dav1d&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fontconfig&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;freetype&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fribidi&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;kvazaar&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;lame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libass&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libiconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libilbc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libtheora&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvorbis&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvpx&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libwebp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libxml2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opencore-amr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opus&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;shine&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;snappy&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;soxr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;speex&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;twolame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vo-amrwbenc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zimg&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;dav1d&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fontconfig&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;freetype&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fribidi&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;kvazaar&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;lame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libass&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libiconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libilbc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libtheora&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvorbis&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvpx&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libwebp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libxml2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opencore-amr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opus&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;shine&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;snappy&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;soxr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;speex&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;twolame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vid.stab&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vo-amrwbenc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x264&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x265&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;xvidcore&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zimg&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;android system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;MediaCodec&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;ios system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;bzip2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AudioToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AVFoundation&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;iconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;VideoToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;macos system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;bzip2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AudioToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AVFoundation&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;Core Image&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;iconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;OpenCL&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;OpenGL&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;VideoToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;tvos system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;bzip2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AudioToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;iconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;VideoToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AVFoundation&lt;/code&gt; is not available on &lt;code&gt;tvOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VideoToolbox&lt;/code&gt; is not available on LTS releases of &lt;code&gt;iOS&lt;/code&gt; and &lt;code&gt;tvOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zimg&lt;/code&gt; is supported since &lt;code&gt;v4.5.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;10. Versions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; binaries generated use the same major and minor version numbers as the upstream &lt;code&gt;FFmpeg&lt;/code&gt; project. The third and last number in the version string, if exists, is specific to &lt;code&gt;FFmpegKit&lt;/code&gt;. It shows different releases from the same &lt;code&gt;FFmpeg&lt;/code&gt; release branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dev&lt;/code&gt; part in the version string indicates that &lt;code&gt;FFmpeg&lt;/code&gt; source code is cloned from the &lt;code&gt;FFmpeg&lt;/code&gt; &lt;code&gt;master&lt;/code&gt; branch and the exact version number of &lt;code&gt;FFmpeg&lt;/code&gt; is obtained using the &lt;code&gt;git describe --tags&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Platforms&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FFmpegKit Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FFmpeg Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Release Date&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v5.1.0&#34;&gt;5.1.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.1.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Oct 02, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flutter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v5.1.0&#34;&gt;5.1.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.1.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Oct 02, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/v5.1&#34;&gt;5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.1.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sep 29, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/v5.1&#34;&gt;5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.1.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sep 29, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v4.5.2&#34;&gt;4.5.2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;May 25, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flutter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan 02, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan 02, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan 01, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dec 30, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flutter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v4.5.0&#34;&gt;4.5.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-2008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Oct 05, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v4.5.0&#34;&gt;4.5.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-2008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Oct 01, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;br&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.5&#34;&gt;4.5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-2008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sep 18, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;br&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.4&#34;&gt;4.4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.4-dev-3015&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mar 03, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;11. LTS Releases&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; binaries are published in two release variants: &lt;code&gt;Main Release&lt;/code&gt; and &lt;code&gt;LTS Release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Main releases include complete functionality of the library and support the latest SDK/API features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LTS releases are customized to support a wider range of devices. They are built using older API/SDK versions, so some features are not available on them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This table shows the differences between two variants.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Main Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;LTS Release&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android API Level&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android Camera Access&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm-v7a-neon&lt;br&gt;arm64-v8a&lt;br&gt;x86&lt;br&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm-v7a&lt;br&gt;arm-v7a-neon&lt;br&gt;arm64-v8a&lt;br&gt;x86&lt;br&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS Min SDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS VideoToolbox&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS AVFoundation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;arm64-simulator&lt;br&gt;arm64-mac-catalyst&lt;br&gt;x86-64&lt;br&gt;x86-64-mac-catalyst&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armv7&lt;br&gt;arm64&lt;br&gt;i386&lt;br&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS Bundle Format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XCFrameworks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Frameworks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mac Catalyst Min Version&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS Min SDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS AVFoundation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS Bundle Format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XCFrameworks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Frameworks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS Min SDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS VideoToolbox&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;x86-64&lt;br&gt;arm64-simulator&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS Bundle Format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XCFrameworks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Frameworks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;12. Documentation&lt;/h3&gt; &#xA;&lt;p&gt;A more detailed documentation is available under &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;13. Test Applications&lt;/h3&gt; &#xA;&lt;p&gt;You can see how &lt;code&gt;FFmpegKit&lt;/code&gt; is used inside an application by running test applications created under &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit-test&#34;&gt;FFmpegKit Test&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;All applications are identical and supports command execution, video encoding, accessing https urls, encoding audio, burning subtitles, video stabilisation, pipe operations and concurrent command execution.&lt;/p&gt; &#xA;&lt;h3&gt;14. License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; library alone is licensed under the &lt;code&gt;LGPL v3.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; bundles (&lt;code&gt;.aar&lt;/code&gt; archives, &lt;code&gt;frameworks&lt;/code&gt;, &lt;code&gt;xcframeworks&lt;/code&gt;), which include both &lt;code&gt;FFmpegKit&lt;/code&gt; and &lt;code&gt;FFmpeg&lt;/code&gt; libraries, are also licensed under the &lt;code&gt;LGPL v3.0&lt;/code&gt;. However, if the source code is built using the optional &lt;code&gt;--enable-gpl&lt;/code&gt; flag or prebuilt binaries with &lt;code&gt;-gpl&lt;/code&gt; postfix are used, then &lt;code&gt;FFmpegKit&lt;/code&gt; bundles become subject to the &lt;code&gt;GPL v3.0&lt;/code&gt;. Because, &lt;code&gt;FFmpeg&lt;/code&gt; is licensed under the &lt;code&gt;GPL v3.0&lt;/code&gt; in those bundles. And that makes the whole bundle effectively subject to the &lt;code&gt;GPL v3.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; build scripts always configure &lt;code&gt;FFmpeg&lt;/code&gt; with &lt;code&gt;--enable-version3&lt;/code&gt; option. And never enable non-free libraries. Thus, &lt;code&gt;FFmpeg&lt;/code&gt; libraries created by &lt;code&gt;FFmpegKit&lt;/code&gt; are licensed under the &lt;code&gt;LGPL v3.0&lt;/code&gt; by default. Only when &lt;code&gt;--enable-gpl&lt;/code&gt; is provided they become subject to &lt;code&gt;GPL v3.0&lt;/code&gt;. That is how prebuilt binaries with &lt;code&gt;-gpl&lt;/code&gt; postfix are compiled.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/wiki/Licenses&#34;&gt;Licenses&lt;/a&gt; to see the licenses of all libraries. &lt;a href=&#34;https://github.com/arthenica/ffmpeg-kit/wiki/Trademark&#34;&gt;Trademark&lt;/a&gt; lists the trademarks used in the &lt;code&gt;FFmpegKit&lt;/code&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;15. Patents&lt;/h3&gt; &#xA;&lt;p&gt;It is not clearly explained in their documentation, but it is believed that &lt;code&gt;FFmpeg&lt;/code&gt;, &lt;code&gt;kvazaar&lt;/code&gt;, &lt;code&gt;x264&lt;/code&gt; and &lt;code&gt;x265&lt;/code&gt; include algorithms which are subject to software patents. If you live in a country where software algorithms are patentable then you&#39;ll probably need to pay royalty fees to patent holders. We are not lawyers though, so we recommend that you seek legal advice first. See &lt;a href=&#34;https://ffmpeg.org/legal.html&#34;&gt;FFmpeg Patent Mini-FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;openh264&lt;/code&gt; clearly states that it uses patented algorithms. Therefore, if you build &lt;code&gt;ffmpeg-kit&lt;/code&gt; with &lt;code&gt;openh264&lt;/code&gt; and distribute that library, then you are subject to pay MPEG LA licensing fees. Refer to &lt;a href=&#34;https://www.openh264.org/faq.html&#34;&gt;OpenH264 FAQ&lt;/a&gt; page for the details.&lt;/p&gt; &#xA;&lt;h3&gt;16. Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/arthenica/ffmpeg-kit/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h3&gt;17. See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/doxygen/4.0/index.html&#34;&gt;FFmpeg API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trac.ffmpeg.org/wiki/WikiStart&#34;&gt;FFmpeg Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/doxygen/4.0/md_LICENSE.html&#34;&gt;FFmpeg External Library Licenses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>