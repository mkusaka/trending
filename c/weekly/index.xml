<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T01:51:25Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gtworek/PSBits</title>
    <updated>2024-01-14T01:51:25Z</updated>
    <id>tag:github.com,2024-01-14:/gtworek/PSBits</id>
    <link href="https://github.com/gtworek/PSBits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple (relatively) things allowing you to dig a bit deeper than usual.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PSBits&lt;/h1&gt; &#xA;&lt;p&gt;Simple (relatively) solutions allowing you to dig a bit deeper than usual.&lt;/p&gt; &#xA;&lt;p&gt;Each folder should have its own readme.md explaining details. If not - the code has extensive comments at the beginning and inline.&lt;/p&gt; &#xA;&lt;p&gt;If you want to compile stuff on your own, the detailed instruction about downloading, installing, and configuring the free version of Visual Studio can be seen here:&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=rjnlDxZtZZc&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/rjnlDxZtZZc/0.jpg&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a rel=&#34;me&#34; href=&#34;https://infosec.exchange/@0gt&#34;&gt;Trying to be present on Mastodon as well.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>attractivechaos/plb2</title>
    <updated>2024-01-14T01:51:25Z</updated>
    <id>tag:github.com,2024-01-14:/attractivechaos/plb2</id>
    <link href="https://github.com/attractivechaos/plb2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programming language benchmark&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: see the figure below. Note that nqueen and matmul are implemented in all languages but sudoku and bedcov are only implemented in some.&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;100%&#34; src=&#34;https://i.ibb.co/16pCzXX/template.png?v27&#34;&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#result&#34;&gt;Results&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#overall&#34;&gt;Overall impression&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#caveat&#34;&gt;Caveats&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#startup&#34;&gt;Startup time&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#cputime&#34;&gt;Elapsed time vs CPU time&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#opt&#34;&gt;Subtle optimizations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#matmul&#34;&gt;Optimizing inner loops&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#memlayout&#34;&gt;Controlling memory layout&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#conclusion&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#table&#34;&gt;Appendix: Timing on Apple M1 Macbook Pro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;intro&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Programming Language Benchmark v2 (plb2) evaluates the performance of 25 programming languages on four CPU-intensive tasks. It is a follow-up to &lt;a href=&#34;https://github.com/attractivechaos/plb&#34;&gt;plb&lt;/a&gt; conducted in 2011. In plb2, all implementations use the same algorithm for each task and their performance bottlenecks do not fall in library functions. We do not intend to compare different algorithms or the quality of the standard libraries in these languages. Plb2 aims to evaluate the performance of a language when you have to implement a new algorithm in the language - this may happen if you can&#39;t find the algorithm in existing libraries.&lt;/p&gt; &#xA;&lt;p&gt;The four tasks in plb2 all take a few seconds for a fast implementation to complete. The tasks are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;nqueen&lt;/strong&gt;: solving a &lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;&gt;15-queens problem&lt;/a&gt;. The algorithm was inspired by the second C implementation &lt;a href=&#34;https://rosettacode.org/wiki/N-queens_problem#C&#34;&gt;from Rosetta Code&lt;/a&gt;. It involves nested loops and integer bit operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;matmul&lt;/strong&gt;: multiplying two square matrices of 1500x1500 in size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sudoku&lt;/strong&gt;: solving 4000 hard &lt;a href=&#34;https://en.wikipedia.org/wiki/Sudoku&#34;&gt;Sudokus&lt;/a&gt; (20 puzzles repeated for 200 times) using the &lt;a href=&#34;https://attractivechaos.github.io/plb/kudoku.html&#34;&gt;kudoku algorithm&lt;/a&gt;. This algorithm heavily uses small fixed-sized arrays with a bit complex logic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;bedcov&lt;/strong&gt;: finding the overlaps between two arrays of 1,000,000 intervals with &lt;a href=&#34;https://academic.oup.com/bioinformatics/article/37/9/1315/5910546&#34;&gt;implicit interval trees&lt;/a&gt;. The algorithm involves frequent array access in a pattern similar to binary searches.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every language has nqueen and matmul implementations. Some languages do not have sudoku or bedcov implementations. Most programs were initially implemented by me and a few were contributed by others. As I am mostly a C programmer, implementations in other languages may be suboptimal. &lt;strong&gt;Pull requests are welcomed!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;result&#34;&gt;&lt;/a&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;The figure at the top of the page summarizes the elapsed time of each implementation measured on an Apple M1 MacBook Pro. &lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;Hyperfine&lt;/a&gt; was used for timing except for a few slow implementations which were timed with the &#34;time&#34; bash command without repetition. A plus sign &#34;+&#34; indicates &lt;a href=&#34;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&#34;&gt;ahead-of-time compilation&lt;/a&gt; (AOT). Exact timing can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#table&#34;&gt;table below&lt;/a&gt;. The figure was &lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/analysis&#34;&gt;programmatically generated&lt;/a&gt; from the table.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;overall&#34;&gt;&lt;/a&gt;Overall impression&lt;/h3&gt; &#xA;&lt;p&gt;Programming language implementations in plb2 can be classified into three groups depending on how and when compilation is done:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Purely interpreted (QuickJS, Perl and &lt;a href=&#34;https://en.wikipedia.org/wiki/CPython&#34;&gt;CPython&lt;/a&gt;, the official Python implementation). Not surprisingly, these are among the slowest language implementations in this benchmark.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JIT compiled (Dart, Bun/Node, Java, Julia, LuaJIT, PHP, PyPy and Ruby3 with &lt;a href=&#34;https://github.com/ruby/ruby/raw/master/doc/yjit/yjit.md&#34;&gt;YJIT&lt;/a&gt;). They are generally faster than pure interpretation. Nonetheless, there is a large variance in this group. While PHP and Ruby3 are faster than Perl and CPython, they are still an order of magnitude slower than PyPy. The two JavaScript engines (Bun and Node) and Julia perform well. They are about twice as fast as PyPy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AOT compiled (the rest). Optimizing binaries for specific hardware, these compilers tend to generate the fastest executables.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;caveat&#34;&gt;&lt;/a&gt;Caveats&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;startup&#34;&gt;&lt;/a&gt;Startup time&lt;/h4&gt; &#xA;&lt;p&gt;Some JIT-based language runtimes take up to ~0.3 second to compile and warm-up. We are not separating out this startup time. Nonetheless, because most benchmarks run for several seconds, including the startup time does not greatly affect the results.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;cputime&#34;&gt;&lt;/a&gt;Elapsed time vs CPU time&lt;/h4&gt; &#xA;&lt;p&gt;Although no implementations use multithreading, language runtimes may be doing extra work, such as garbage collection, in a separate thread. In this case, the CPU time (user plus system) may be longer than elapsed wall-clock time. Julia, in particular, takes noticeably more CPU time than wall-clock time even for the simplest nqueen benchmark. In plb2, we are measuring the elapsed wall-clock time because that is the number users often see. The ranking of CPU time may be slightly different.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;opt&#34;&gt;&lt;/a&gt;Subtle optimizations&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;memlayout&#34;&gt;&lt;/a&gt;Controlling memory layout&lt;/h4&gt; &#xA;&lt;p&gt;When implementing bedcov in Julia, C and many compiled languages, it is preferred to have an array of objects in a contiguous memory block such that adjacent objects are close in memory. This helps cache efficiency. In most scripting languages, unfortunately, we have to put references to objects in an array at the cost of cache locality. The issue can be alleviated by cloning objects to a new array. This doubles the speed of PyPy and Bun.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;matmul&#34;&gt;&lt;/a&gt;Optimizing inner loops&lt;/h4&gt; &#xA;&lt;p&gt;The bottleneck of matrix multiplication falls in the following nested loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for (int i = 0; i &amp;lt; n; ++i)&#xA;    for (int k = 0; k &amp;lt; n; ++k)&#xA;        for (int j = 0; j &amp;lt; n; ++j)&#xA;            c[i][j] += a[i][k] * b[k][j];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is obvious that &lt;code&gt;c[i]&lt;/code&gt;, &lt;code&gt;b[k]&lt;/code&gt; and &lt;code&gt;a[i][k]&lt;/code&gt; can be moved out of the inner loop to reduce the frequency of matrix access. The Clang compiler can apply this optimization. Manual optimization may actually hurt performance.&lt;/p&gt; &#xA;&lt;p&gt;However, &lt;strong&gt;many other languages cannot optimize this nested loop.&lt;/strong&gt; If we manually move &lt;code&gt;a[i][k]&lt;/code&gt; to the loop above it, we can often improve their performance. Some C/C++ programmers say compilers often optimize better than human, but this might not be the case in other languages.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;Discussions&lt;/h2&gt; &#xA;&lt;p&gt;The most well-known and the longest running language benchmark is the &lt;a href=&#34;https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html&#34;&gt;Computer Language Benchmark Games&lt;/a&gt;. Plb2 differs in that it includes different languages (e.g. Nim and Crystal), different language runtimes (e.g. PyPy and LuaJIT) and new tasks, and it comes with more uniform implementations and focuses more on the performance of the language itself without library functions. &lt;strong&gt;Plb2 complements the Computer Language Benchmark Games.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;One important area that plb2 does not evaluate is the performance of memory allocation and/or garbage collection. This may contribute more to practical performance than generating machine code. Nonetheless, it is challenging to design a realistic micro-benchmark to evaluate memory allocation. If the built-in allocator in a language implementation does not work well, we can implement customized memory allocator just for the specific task but this, in my view, would not represent typical use cases.&lt;/p&gt; &#xA;&lt;p&gt;When plb was conducted in 2011, half of the languages in the figure above were not mature or even did not exist. It is exciting to see many of them have reached the 1.0 milestone and are gaining popularity among modern programmers. On the other hand, Python remains one of the two most used scripting languages despite its poor performance. In my view, this is because PyPy would not be officially endorsed while other JIT-based languages are not general or good enough. Will there be a language to displace Python in the next decade? I am not optimistic.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;table&#34;&gt;&lt;/a&gt;Appendix: Timing on Apple M1 Macbook Pro&lt;/h2&gt; &#xA;&lt;p&gt;In the following table, star &#34;*&#34; indicates AOT compilation and plus &#34;+&#34; indicates JIT compilation.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Label&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Runtime&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Plot&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;nqueen&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;matmul&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;sudoku&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;bedcov&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c:clang*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.54&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cl:sbcl*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lisp&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;SBCL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.4.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.19&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.84&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codon*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Codon&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.16.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.91&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.48&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.10&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;crystal*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crystal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.10.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.28&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.45&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c#:.net*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C#&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8.0.100&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.82&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.38&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.12&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;d:ldc2*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;D&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LDC2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.35.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.68&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.60&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.98&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart:jit+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;(JIT)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.2.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.62&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.74&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.24&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.85&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.15.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26.17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;67.39&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;f90:gcc*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fortran&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GCC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13.2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.67&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.51&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.84&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.21.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.94&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.04&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenJDK&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20.0.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.92&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:bun+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bun&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.0.20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.11&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.75&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.07&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:deno+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Deno&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.39.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.06&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.04&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:k8+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;k8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.79&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.99&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.76&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:node+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Node&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21.5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.73&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.88&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.77&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.45&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:node&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Node-nojit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21.5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55.48&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;162.84&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;63.91&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20.81&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:qjs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;QuickJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;23-12-09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;59.04&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;135.66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;67.55&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;37.56&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;julia+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Julia&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.10.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.02&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.76&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.18&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.96&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;luajit+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LuaJIT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.31&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.48&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10.52&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mojo*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mojo&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.6.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.24&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.12&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nim*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Nim&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.0.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.64&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OCaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.14.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Perl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.34.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;158.34&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;158.01&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;90.78&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;php+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;48.15&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;71.20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;py:cpy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CPython&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;159.97&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;117.81&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52.88&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;42.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;py:pypy+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PyPy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7.3.14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.91&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.89&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8.82&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;(YJIT)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.3.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;87.53&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;64.95&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17.47&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.75.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.49&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.65&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scm:ch+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scheme&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chez&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9.5.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.54&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18.98&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;swift*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.92&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.78&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;V&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.4.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.55&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.59&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zig*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Zig&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.11.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.72&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>iovisor/bcc</title>
    <updated>2024-01-14T01:51:25Z</updated>
    <id>tag:github.com,2024-01-14:/iovisor/bcc</id>
    <link href="https://github.com/iovisor/bcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/logo2.png&#34; alt=&#34;BCC Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BPF Compiler Collection (BCC)&lt;/h1&gt; &#xA;&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.&lt;/p&gt; &#xA;&lt;p&gt;eBPF was &lt;a href=&#34;https://lkml.org/lkml/2015/4/14/232&#34;&gt;described by&lt;/a&gt; Ingo Molnár as:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;This example traces a disk I/O kernel function, and populates an in-kernel power-of-2 histogram of the I/O size. For efficiency, only the histogram summary is returned to user-level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;# ./bitehist.py&#xA;Tracing... Hit Ctrl-C to end.&#xA;^C&#xA;     kbytes          : count     distribution&#xA;       0 -&amp;gt; 1        : 3        |                                      |&#xA;       2 -&amp;gt; 3        : 0        |                                      |&#xA;       4 -&amp;gt; 7        : 211      |**********                            |&#xA;       8 -&amp;gt; 15       : 0        |                                      |&#xA;      16 -&amp;gt; 31       : 0        |                                      |&#xA;      32 -&amp;gt; 63       : 0        |                                      |&#xA;      64 -&amp;gt; 127      : 1        |                                      |&#xA;     128 -&amp;gt; 255      : 800      |**************************************|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above output shows a bimodal distribution, where the largest mode of 800 I/O was between 128 and 255 Kbytes in size.&lt;/p&gt; &#xA;&lt;p&gt;See the source: &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;. What this traces, what this stores, and how the data is presented, can be entirely customized. This shows only some of many possible capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; for installation steps on your platform.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/FAQ.txt&#34;&gt;FAQ.txt&lt;/a&gt; for the most common troubleshoot questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reference guide&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/reference_guide.md&#34;&gt;docs/reference_guide.md&lt;/a&gt; for the reference guide to the bcc and bcc/BPF APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;Some of these are single files that contain both C and Python, others have a pair of .c and .py files, and some are directories of files.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing&lt;/h3&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;: Block I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop.py&#34;&gt;disksnoop.py&lt;/a&gt;: Trace block device I/O latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/hello_world.py&#34;&gt;hello_world.py&lt;/a&gt;: Prints &#34;Hello, World!&#34; for new processes.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query.py&#34;&gt;mysqld_query.py&lt;/a&gt;: Trace MySQL server queries using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server.py&#34;&gt;nodejs_http_server.py&lt;/a&gt;: Trace Node.js HTTP server requests using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop.py&#34;&gt;stacksnoop&lt;/a&gt;: Trace a kernel function and print all kernel stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop.py&#34;&gt;statsnoop&lt;/a&gt;: Trace stat() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/task_switch.py&#34;&gt;task_switch.py&lt;/a&gt;: Count task switches with from and to PIDs.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect.py&#34;&gt;tcpv4connect.py&lt;/a&gt;: Trace TCP IPv4 active connections. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/trace_fields.py&#34;&gt;trace_fields.py&lt;/a&gt;: Simple example of printing fields from traced events.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump.py&#34;&gt;undump.py&lt;/a&gt;: Dump UNIX socket packets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread.py&#34;&gt;urandomread.py&lt;/a&gt;: A kernel tracepoint example, which traces random:urandom_read. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.py&#34;&gt;vfsreadlat.py&lt;/a&gt; examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.c&#34;&gt;vfsreadlat.c&lt;/a&gt;: VFS read latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.py&#34;&gt;kvm_hypercall.py&lt;/a&gt;: Conditional static kernel tracepoints for KVM entry, exit and hypercall &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tools&lt;/h4&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34; border=&#34;0&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist.py&#34;&gt;argdist&lt;/a&gt;: Display function parameter values as a histogram or frequency count. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline.py&#34;&gt;bashreadline&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist.py&#34;&gt;bpflist&lt;/a&gt;: Display processes with active BPF programs and maps. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable.py&#34;&gt;capable&lt;/a&gt;: Trace security capability checks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop.py&#34;&gt;compactsnoop&lt;/a&gt;: Trace compact zone events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat.py&#34;&gt;criticalstat&lt;/a&gt;: Trace and report long atomic critical sections in the kernel. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock.py&#34;&gt;deadlock&lt;/a&gt;: Detect potential deadlocks on a running process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop.py&#34;&gt;drsnoop&lt;/a&gt;: Trace direct reclaim events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount.py&#34;&gt;funccount&lt;/a&gt;: Count kernel function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject.py&#34;&gt;inject&lt;/a&gt;: Targeted error injection with call chain and predicates &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat.py&#34;&gt;klockstat&lt;/a&gt;: Traces kernel mutex lock events and display locks statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop.py&#34;&gt;opensnoop&lt;/a&gt;: Trace open() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead.py&#34;&gt;readahead&lt;/a&gt;: Show performance of read-ahead cache &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace.sh&#34;&gt;reset-trace&lt;/a&gt;: Reset the state of tracing. Maintenance tool only. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount.py&#34;&gt;stackcount&lt;/a&gt;: Count kernel function calls and their stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop.py&#34;&gt;syncsnoop&lt;/a&gt;: Trace sync() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop.py&#34;&gt;threadsnoop&lt;/a&gt;: List new thread creation. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist.py&#34;&gt;tplist&lt;/a&gt;: Display kernel tracepoints or USDT probes and their formats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace.py&#34;&gt;trace&lt;/a&gt;: Trace arbitrary functions, with filters. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop.py&#34;&gt;ttysnoop&lt;/a&gt;: Watch live output from a tty or pts device. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls.py&#34;&gt;ucalls&lt;/a&gt;: Summarize method calls or Linux syscalls in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow.py&#34;&gt;uflow&lt;/a&gt;: Print a method flow graph in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc.py&#34;&gt;ugc&lt;/a&gt;: Trace garbage collection events in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew.py&#34;&gt;uobjnew&lt;/a&gt;: Summarize object allocation events by object type and number of bytes allocated. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat.py&#34;&gt;ustat&lt;/a&gt;: Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads.py&#34;&gt;uthreads&lt;/a&gt;: Trace thread creation events in Java and raw pthreads. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Memory and Process Tools&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop.py&#34;&gt;execsnoop&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop.py&#34;&gt;exitsnoop&lt;/a&gt;: Trace process termination (exit and fatal signals). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop.py&#34;&gt;killsnoop&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit.py&#34;&gt;kvmexit&lt;/a&gt;: Display the exit_reason and its statistics of each vm exit. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak.py&#34;&gt;memleak&lt;/a&gt;: Display outstanding memory allocations to find memory leaks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill.py&#34;&gt;oomkill&lt;/a&gt;: Trace the out-of-memory (OOM) killer. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec.py&#34;&gt;pidpersec&lt;/a&gt;: Count new processes (via fork). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/rdmaucma.py&#34;&gt;rdmaucma&lt;/a&gt;: Trace RDMA Userspace Connection Manager Access events. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/rdmaucma_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop.py&#34;&gt;shmsnoop&lt;/a&gt;: Trace System V shared memory syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop.py&#34;&gt;slabratetop&lt;/a&gt;: Kernel SLAB/SLUB memory cache allocation rate top. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Performance and Time Tools&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower.py&#34;&gt;dbslower&lt;/a&gt;: Trace MySQL/PostgreSQL queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat.py&#34;&gt;dbstat&lt;/a&gt;: Summarize MySQL/PostgreSQL query latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval.py&#34;&gt;funcinterval&lt;/a&gt;: Time interval between the same function as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency.py&#34;&gt;funclatency&lt;/a&gt;: Time functions and show their latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower.py&#34;&gt;funcslower&lt;/a&gt;: Trace slow kernel or user function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs.py&#34;&gt;hardirqs&lt;/a&gt;: Measure hard IRQ (hard interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower.py&#34;&gt;mysqld_qslower&lt;/a&gt;: Trace MySQL server queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ppchcalls.py&#34;&gt;ppchcalls&lt;/a&gt;: Summarize ppc hcall counts and latencies. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ppchcalls_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs.py&#34;&gt;softirqs&lt;/a&gt;: Measure soft IRQ (soft interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount.py&#34;&gt;syscount&lt;/a&gt;: Summarize syscall counts and latencies. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;CPU and Scheduler Tools&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist.py&#34;&gt;cpudist&lt;/a&gt;: Summarize on- and off-CPU time per task as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed.py&#34;&gt;cpuunclaimed&lt;/a&gt;: Sample CPU run queues and calculate unclaimed idle CPU. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat.py&#34;&gt;llcstat&lt;/a&gt;: Summarize CPU cache references and misses by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime.py&#34;&gt;offcputime&lt;/a&gt;: Summarize off-CPU time by kernel stack trace. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime.py&#34;&gt;offwaketime&lt;/a&gt;: Summarize blocked time by kernel off-CPU stack and waker stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile.py&#34;&gt;profile&lt;/a&gt;: Profile CPU usage by sampling stack traces at a timed interval. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat.py&#34;&gt;runqlat&lt;/a&gt;: Run queue (scheduler) latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen.py&#34;&gt;runqlen&lt;/a&gt;: Run queue length as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower.py&#34;&gt;runqslower&lt;/a&gt;: Trace long process scheduling delays. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime.py&#34;&gt;wakeuptime&lt;/a&gt;: Summarize sleep to wakeup time by waker kernel stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Network and Sockets Tools&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency.py&#34;&gt;gethostlatency&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop.py&#34;&gt;bindsnoop&lt;/a&gt;: Trace IPv4 and IPv6 bind() system calls (bind()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.py&#34;&gt;netqtop&lt;/a&gt; tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.c&#34;&gt;netqtop.c&lt;/a&gt;: Trace and display packets distribution on NIC queues. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop.py&#34;&gt;sofdsnoop&lt;/a&gt;: Trace FDs passed through unix sockets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten.py&#34;&gt;solisten&lt;/a&gt;: Trace TCP socket listen. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff.py&#34;&gt;sslsniff&lt;/a&gt;: Sniff OpenSSL written and readed data. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept.py&#34;&gt;tcpaccept&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect.py&#34;&gt;tcpconnect&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat.py&#34;&gt;tcpconnlat&lt;/a&gt;: Trace TCP active connection latency (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop.py&#34;&gt;tcpdrop&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife.py&#34;&gt;tcplife&lt;/a&gt;: Trace TCP sessions and summarize lifespan. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans.py&#34;&gt;tcpretrans&lt;/a&gt;: Trace TCP retransmits and TLPs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt.py&#34;&gt;tcprtt&lt;/a&gt;: Trace TCP round trip time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates.py&#34;&gt;tcpstates&lt;/a&gt;: Trace TCP session state changes with durations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet.py&#34;&gt;tcpsubnet&lt;/a&gt;: Summarize and aggregate TCP send by subnet. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl.py&#34;&gt;tcpsynbl&lt;/a&gt;: Show TCP SYN backlog. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop.py&#34;&gt;tcptop&lt;/a&gt;: Summarize TCP send/recv throughput by host. Top for TCP. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer.py&#34;&gt;tcptracer&lt;/a&gt;: Trace TCP established connections (connect(), accept(), close()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong.py&#34;&gt;tcpcong&lt;/a&gt;: Trace TCP socket congestion control status duration. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Storage and Filesystems Tools&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize.py&#34;&gt;bitesize&lt;/a&gt;: Show per process I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat.py&#34;&gt;cachestat&lt;/a&gt;: Trace page cache hit/miss ratio. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop.py&#34;&gt;cachetop&lt;/a&gt;: Trace page cache hit/miss ratio by processes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop.py&#34;&gt;dcsnoop&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat.py&#34;&gt;dcstat&lt;/a&gt;: Directory entry cache (dcache) stats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency.py&#34;&gt;biolatency&lt;/a&gt;: Summarize block device I/O latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop.py&#34;&gt;biotop&lt;/a&gt;: Top for disks: Summarize block device I/O by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern.py&#34;&gt;biopattern&lt;/a&gt;: Identify random/sequential disk access patterns. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop.py&#34;&gt;biosnoop&lt;/a&gt;: Trace block device I/O with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop.py&#34;&gt;dirtop&lt;/a&gt;: File reads and writes by directory. Top for directories. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife.py&#34;&gt;filelife&lt;/a&gt;: Trace the lifespan of short-lived files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filegone.py&#34;&gt;filegone&lt;/a&gt;: Trace why file gone (deleted or renamed). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filegone_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower.py&#34;&gt;fileslower&lt;/a&gt;: Trace slow synchronous file reads and writes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop.py&#34;&gt;filetop&lt;/a&gt;: File reads and writes by filename and process. Top for files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush.py&#34;&gt;mdflush&lt;/a&gt;: Trace md flush events. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop.py&#34;&gt;mountsnoop&lt;/a&gt;: Trace mount and umount syscalls system-wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat.py&#34;&gt;virtiostat&lt;/a&gt;: Show VIRTIO device IO statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Filesystems Tools&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist.py&#34;&gt;btrfsdist&lt;/a&gt;: Summarize btrfs operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower.py&#34;&gt;btrfsslower&lt;/a&gt;: Trace slow btrfs operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist.py&#34;&gt;ext4dist&lt;/a&gt;: Summarize ext4 operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower.py&#34;&gt;ext4slower&lt;/a&gt;: Trace slow ext4 operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower.py&#34;&gt;nfsslower&lt;/a&gt;: Trace slow NFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist.py&#34;&gt;nfsdist&lt;/a&gt;: Summarize NFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount.py&#34;&gt;vfscount&lt;/a&gt;: Count VFS calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat.py&#34;&gt;vfsstat&lt;/a&gt;: Count some VFS calls, with column output. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist.py&#34;&gt;xfsdist&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower.py&#34;&gt;xfsslower&lt;/a&gt;: Trace slow XFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist.py&#34;&gt;zfsdist&lt;/a&gt;: Summarize ZFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower.py&#34;&gt;zfsslower&lt;/a&gt;: Trace slow ZFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/distributed_bridge&#34;&gt;distributed_bridge/&lt;/a&gt;: Distributed bridge example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/http_filter&#34;&gt;http_filter/&lt;/a&gt;: Simple HTTP filter example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simple_tc.py&#34;&gt;simple_tc.py&lt;/a&gt;: Simple traffic control example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simulation.py&#34;&gt;simulation.py&lt;/a&gt;: Simulation helper.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.py&#34;&gt;tc_neighbor_sharing.py&lt;/a&gt; examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.c&#34;&gt;tc_neighbor_sharing.c&lt;/a&gt;: Per-IP classification and rate limiting.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;tunnel_monitor/&lt;/a&gt;: Efficiently monitor traffic flows.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/vlan_learning/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.py&#34;&gt;vlan_learning.py&lt;/a&gt; examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.c&#34;&gt;vlan_learning.c&lt;/a&gt;: Demux Ethernet traffic into worker veth+namespaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BPF Introspection&lt;/h3&gt; &#xA;&lt;p&gt;Tools that help to introspect BPF programs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;introspection/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps.c&#34;&gt;bps.c&lt;/a&gt;: List all BPF programs loaded into the kernel. &#39;ps&#39; for BPF programs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;BPF guarantees that the programs loaded into the kernel cannot crash, and cannot run forever, but yet BPF is general purpose enough to perform many arbitrary types of computation. Currently, it is possible to write a program in C that will compile into a valid BPF program, yet it is vastly easier to write a C program that will compile into invalid BPF (C is like that). The user won&#39;t know until trying to run the program whether it was valid or not.&lt;/p&gt; &#xA;&lt;p&gt;With a BPF-specific frontend, one should be able to write in a language and receive feedback from the compiler on the validity as it pertains to a BPF backend. This toolkit aims to provide a frontend that can only create valid BPF programs while still harnessing its full flexibility.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, current integrations with BPF have a kludgy workflow, sometimes involving compiling directly in a linux kernel source tree. This toolchain aims to minimize the time that a developer spends getting BPF compiled, and instead focus on the applications that can be written and the problems that can be solved with BPF.&lt;/p&gt; &#xA;&lt;p&gt;The features of this toolkit include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;End-to-end BPF workflow in a shared library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A modified C language for BPF backends&lt;/li&gt; &#xA;   &lt;li&gt;Integration with llvm-bpf backend for JIT&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic (un)loading of JITed programs&lt;/li&gt; &#xA;   &lt;li&gt;Support for BPF kernel hooks: socket filters, tc classifiers, tc actions, and kprobes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bindings for Python&lt;/li&gt; &#xA; &lt;li&gt;Examples for socket filters, tc classifiers, and kprobes&lt;/li&gt; &#xA; &lt;li&gt;Self-contained tools for tracing a running system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, more bindings besides python will likely be supported. Feel free to add support for the language of your choice and send a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial.md&#34;&gt;docs/tutorial.md&lt;/a&gt;: Using bcc tools to solve performance, troubleshooting, and networking issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial_bcc_python_developer.md&#34;&gt;docs/tutorial_bcc_python_developer.md&lt;/a&gt;: Developing new bcc programs using the Python interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;At Red Hat Summit 2015, BCC was presented as part of a &lt;a href=&#34;http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec&#34;&gt;session on BPF&lt;/a&gt;. A multi-host vxlan environment is simulated and a BPF program used to monitor one of the physical interfaces. The BPF program keeps statistics on the inner and outer IP addresses traversing the interface, and the userspace component turns those statistics into a graph showing the traffic distribution at multiple granularities. See the code &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Already pumped up to commit some code? Here are some resources to join the discussions in the &lt;a href=&#34;https://www.iovisor.org/&#34;&gt;IOVisor&lt;/a&gt; community and see what you want to work on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mailing List:&lt;/em&gt; &lt;a href=&#34;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&#34;&gt;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;IRC:&lt;/em&gt; #iovisor at irc.oftc.net&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;BCC Issue Tracker:&lt;/em&gt; &lt;a href=&#34;https://github.com/iovisor/bcc/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;A guide for contributing scripts:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/CONTRIBUTING-SCRIPTS.md&#34;&gt;CONTRIBUTING-SCRIPTS.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;p&gt;Looking for more information on BCC and how it&#39;s being used? You can find links to other BCC content on the web in &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/LINKS.md&#34;&gt;LINKS.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>