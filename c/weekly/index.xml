<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:47:25Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mackron/miniaudio</title>
    <updated>2024-03-10T01:47:25Z</updated>
    <id>tag:github.com,2024-03-10:/mackron/miniaudio</id>
    <link href="https://github.com/mackron/miniaudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio playback and capture library written in C, in a single source file.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://miniaud.io&#34;&gt;&lt;img src=&#34;https://miniaud.io/img/miniaudio_wide.png&#34; alt=&#34;miniaudio&#34; width=&#34;1280&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;An audio playback and capture library in a single source file.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/9vpqbjU&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/712952679415939085?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fosstodon.org/@mackron&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/109293691403797709?color=blue&amp;amp;domain=https%3A%2F%2Ffosstodon.org&amp;amp;label=mastodon&amp;amp;logo=mastodon&amp;amp;style=flat-square&#34; alt=&#34;mastodon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/miniaudio&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/miniaudio?label=r%2Fminiaudio&amp;amp;logo=reddit&amp;amp;style=flat-square&#34; alt=&#34;reddit&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#features&#34;&gt;Features&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#examples&#34;&gt;Examples&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#building&#34;&gt;Building&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#documentation&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;miniaudio is written in C with no dependencies except the standard library and should compile clean on all major compilers without the need to install any additional development packages. All major desktop and mobile platforms are supported.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple build system with no external dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Simple and flexible API.&lt;/li&gt; &#xA; &lt;li&gt;Low-level API for direct access to raw audio data.&lt;/li&gt; &#xA; &lt;li&gt;High-level API for sound management, mixing, effects and optional 3D spatialization.&lt;/li&gt; &#xA; &lt;li&gt;Flexible node graph system for advanced mixing and effect processing.&lt;/li&gt; &#xA; &lt;li&gt;Resource management for loading sound files.&lt;/li&gt; &#xA; &lt;li&gt;Decoding, with built-in support for WAV, FLAC and MP3, in addition to being able to plug in custom decoders.&lt;/li&gt; &#xA; &lt;li&gt;Encoding (WAV only).&lt;/li&gt; &#xA; &lt;li&gt;Data conversion.&lt;/li&gt; &#xA; &lt;li&gt;Resampling, including custom resamplers.&lt;/li&gt; &#xA; &lt;li&gt;Channel mapping.&lt;/li&gt; &#xA; &lt;li&gt;Basic generation of waveforms and noise.&lt;/li&gt; &#xA; &lt;li&gt;Basic effects and filters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://miniaud.io/docs/manual/&#34;&gt;Programming Manual&lt;/a&gt; for a more complete description of available features in miniaudio.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;This example shows one way to play a sound using the high level API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define MINIAUDIO_IMPLEMENTATION&#xA;#include &#34;miniaudio.h&#34;&#xA;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int main()&#xA;{&#xA;    ma_result result;&#xA;    ma_engine engine;&#xA;&#xA;    result = ma_engine_init(NULL, &amp;amp;engine);&#xA;    if (result != MA_SUCCESS) {&#xA;        return -1;&#xA;    }&#xA;&#xA;    ma_engine_play_sound(&amp;amp;engine, &#34;sound.wav&#34;, NULL);&#xA;&#xA;    printf(&#34;Press Enter to quit...&#34;);&#xA;    getchar();&#xA;&#xA;    ma_engine_uninit(&amp;amp;engine);&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows how to decode and play a sound using the low level API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define MINIAUDIO_IMPLEMENTATION&#xA;#include &#34;miniaudio.h&#34;&#xA;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;void data_callback(ma_device* pDevice, void* pOutput, const void* pInput, ma_uint32 frameCount)&#xA;{&#xA;    ma_decoder* pDecoder = (ma_decoder*)pDevice-&amp;gt;pUserData;&#xA;    if (pDecoder == NULL) {&#xA;        return;&#xA;    }&#xA;&#xA;    ma_decoder_read_pcm_frames(pDecoder, pOutput, frameCount, NULL);&#xA;&#xA;    (void)pInput;&#xA;}&#xA;&#xA;int main(int argc, char** argv)&#xA;{&#xA;    ma_result result;&#xA;    ma_decoder decoder;&#xA;    ma_device_config deviceConfig;&#xA;    ma_device device;&#xA;&#xA;    if (argc &amp;lt; 2) {&#xA;        printf(&#34;No input file.\n&#34;);&#xA;        return -1;&#xA;    }&#xA;&#xA;    result = ma_decoder_init_file(argv[1], NULL, &amp;amp;decoder);&#xA;    if (result != MA_SUCCESS) {&#xA;        return -2;&#xA;    }&#xA;&#xA;    deviceConfig = ma_device_config_init(ma_device_type_playback);&#xA;    deviceConfig.playback.format   = decoder.outputFormat;&#xA;    deviceConfig.playback.channels = decoder.outputChannels;&#xA;    deviceConfig.sampleRate        = decoder.outputSampleRate;&#xA;    deviceConfig.dataCallback      = data_callback;&#xA;    deviceConfig.pUserData         = &amp;amp;decoder;&#xA;&#xA;    if (ma_device_init(NULL, &amp;amp;deviceConfig, &amp;amp;device) != MA_SUCCESS) {&#xA;        printf(&#34;Failed to open playback device.\n&#34;);&#xA;        ma_decoder_uninit(&amp;amp;decoder);&#xA;        return -3;&#xA;    }&#xA;&#xA;    if (ma_device_start(&amp;amp;device) != MA_SUCCESS) {&#xA;        printf(&#34;Failed to start playback device.\n&#34;);&#xA;        ma_device_uninit(&amp;amp;device);&#xA;        ma_decoder_uninit(&amp;amp;decoder);&#xA;        return -4;&#xA;    }&#xA;&#xA;    printf(&#34;Press Enter to quit...&#34;);&#xA;    getchar();&#xA;&#xA;    ma_device_uninit(&amp;amp;device);&#xA;    ma_decoder_uninit(&amp;amp;decoder);&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/examples&#34;&gt;examples&lt;/a&gt; folder or online here: &lt;a href=&#34;https://miniaud.io/docs/examples/&#34;&gt;https://miniaud.io/docs/examples/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Do the following in one source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define MINIAUDIO_IMPLEMENTATION&#xA;#include &#34;miniaudio.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just compile. There&#39;s no need to install any dependencies. On Windows and macOS there&#39;s no need to link to anything. On Linux just link to &lt;code&gt;-lpthread&lt;/code&gt;, &lt;code&gt;-lm&lt;/code&gt; and &lt;code&gt;-ldl&lt;/code&gt;. On BSD just link to &lt;code&gt;-lpthread&lt;/code&gt; and &lt;code&gt;-lm&lt;/code&gt;. On iOS you need to compile as Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;If you get errors about undefined references to &lt;code&gt;__sync_val_compare_and_swap_8&lt;/code&gt;, &lt;code&gt;__atomic_load_8&lt;/code&gt;, etc. you need to link with &lt;code&gt;-latomic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer separate .h and .c files, you can find a split version of miniaudio in the extras/miniaudio_split folder. From here you can use miniaudio as a traditional .c and .h library - just add miniaudio.c to your source tree like any other source file and include miniaudio.h like a normal header. If you prefer compiling as a single translation unit (AKA unity builds), you can just #include the .c file in your main source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;miniaudio.c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the split version is auto-generated using a tool and is based on the main file in the root directory. If you want to contribute, please make the change in the main file.&lt;/p&gt; &#xA;&lt;p&gt;ABI compatibility is not guaranteed between versions so take care if compiling as a DLL/SO. The suggested way to integrate miniaudio is by adding it directly to your source tree.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Online documentation can be found here: &lt;a href=&#34;https://miniaud.io/docs/&#34;&gt;https://miniaud.io/docs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation can also be found at the top of &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/miniaudio.h&#34;&gt;miniaudio.h&lt;/a&gt; which is always the most up-to-date and authoritive source of information on how to use miniaudio. All other documentation is generated from this in-code documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Supported Platforms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;macOS, iOS&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD / OpenBSD / NetBSD&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Raspberry Pi&lt;/li&gt; &#xA; &lt;li&gt;Emscripten / HTML5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;miniaudio should compile clean on other platforms, but it will not include any support for playback or capture by default. To support that, you would need to implement a custom backend. You can do this without needing to modify the miniaudio source code. See the &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/examples/custom_backend.c&#34;&gt;custom_backend&lt;/a&gt; example.&lt;/p&gt; &#xA;&lt;h2&gt;Backends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WASAPI&lt;/li&gt; &#xA; &lt;li&gt;DirectSound&lt;/li&gt; &#xA; &lt;li&gt;WinMM&lt;/li&gt; &#xA; &lt;li&gt;Core Audio (Apple)&lt;/li&gt; &#xA; &lt;li&gt;ALSA&lt;/li&gt; &#xA; &lt;li&gt;PulseAudio&lt;/li&gt; &#xA; &lt;li&gt;JACK&lt;/li&gt; &#xA; &lt;li&gt;sndio (OpenBSD)&lt;/li&gt; &#xA; &lt;li&gt;audio(4) (NetBSD and OpenBSD)&lt;/li&gt; &#xA; &lt;li&gt;OSS (FreeBSD)&lt;/li&gt; &#xA; &lt;li&gt;AAudio (Android 8.0+)&lt;/li&gt; &#xA; &lt;li&gt;OpenSL|ES (Android only)&lt;/li&gt; &#xA; &lt;li&gt;Web Audio (Emscripten)&lt;/li&gt; &#xA; &lt;li&gt;Null (Silence)&lt;/li&gt; &#xA; &lt;li&gt;Custom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Your choice of either public domain or &lt;a href=&#34;https://github.com/aws/mit-0&#34;&gt;MIT No Attribution&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EdgeTX/edgetx</title>
    <updated>2024-03-10T01:47:25Z</updated>
    <id>tag:github.com,2024-03-10:/EdgeTX/edgetx</id>
    <link href="https://github.com/EdgeTX/edgetx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EdgeTX is the cutting edge open source firmware for your R/C radio&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Edgetx/edgetx&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EdgeTX/edgetx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/EdgeTX/edgetx/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EdgeTX/edgetx/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Edgetx/edgetx&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EdgeTX/edgetx/actions/workflows/actions.yml&#34;&gt;&lt;img src=&#34;https://github.com/EdgeTX/edgetx/actions/workflows/actions.yml/badge.svg?sanitize=true&#34; alt=&#34;Commit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/edgetx/edgetx/tree/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://conventionalcommits.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&amp;amp;logoColor=white&#34; alt=&#34;Conventional Commits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/wF9wUKnZ6H&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/839849772864503828.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/edgetx&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/edgetx&#34; alt=&#34;Support us on OpenCollective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EdgeTX/edgetx.github.io/master/docs/assets/logo.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EdgeTX/edgetx.github.io/master/docs/assets/logo.png&#34; align=&#34;center&#34; height=&#34;150&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;h1&gt;Welcome to EdgeTX!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The cutting edge open-source firmware for your R/C radio!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About EdgeTX&lt;/h3&gt; &#xA;&lt;p&gt;EdgeTX is the cutting edge of OpenTX. It is the place where innovative ideas and cutting-edge features are developed and field-tested by the enthusiasts of our hobby. EdgeTX is a community project – ideas from the community, developed by the community, and enjoyed by the community! The community will always have a say in what EdgeTX is and what EdgeTX will be in the future. Without community feedback and involvement EdgeTX cannot exist.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/wF9wUKnZ6H&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/groups/edgetx&#34;&gt;Facebook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx/discussions&#34;&gt;Github Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Navigation Links&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx.github.io/wiki/Community-Guidlines&#34;&gt;Community Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://edgetx.gitbook.io/edgetx-user-manual/edgetx-how-to/update-from-opentx-to-edgetx&#34;&gt;Installation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Y9OvW9XCjOs&#34;&gt;Installation Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx.github.io/wiki/Frequently-Asked-Questions&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx/issues/new/choose&#34;&gt;Reporting Issues / Requesting features&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx/wiki&#34;&gt;Development WIKI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://luadoc.edgetx.org/&#34;&gt;Lua Documentation Site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/flasher&#34;&gt;Flasher Info Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/flasher/releases&#34;&gt;Flasher Downloads&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx-sdcard&#34;&gt;SD Card Info Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx-sdcard/releases&#34;&gt;SD Card Downloads&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx-sdcard-sounds&#34;&gt;Sound Packs Info Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/edgetx-sdcard-sounds/releases&#34;&gt;Sound Packs Downloads&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EdgeTX/build-edgetx&#34;&gt;EdgeTX Build Environment Docker Images&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Some icon assets provided by &lt;a href=&#34;https://icons8.com&#34;&gt;ICONS8&lt;/a&gt;.&lt;br&gt; Lua Documentation site powered with the kind support of &lt;a href=&#34;https://www.gitbook.com&#34;&gt;GitBook&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eclipse-threadx/threadx</title>
    <updated>2024-03-10T01:47:25Z</updated>
    <id>tag:github.com,2024-03-10:/eclipse-threadx/threadx</id>
    <link href="https://github.com/eclipse-threadx/threadx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eclipse ThreadX is an advanced real-time operating system (RTOS) designed specifically for deeply embedded applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eclipse ThreadX RTOS&lt;/h1&gt; &#xA;&lt;p&gt;This advanced real-time operating system (RTOS) is designed specifically for deeply embedded applications. Among the multiple benefits it provides are advanced scheduling facilities, message passing, interrupt management, and messaging services. Eclipse ThreadX RTOS has many advanced features, including picokernel architecture, preemption threshold, event chaining, and a rich set of system services.&lt;/p&gt; &#xA;&lt;p&gt;Here are the key features and modules of ThreadX:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/docs/threadx-features.png&#34; alt=&#34;ThreadX Key Features&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Eclipse ThreadX has been integrated to the semiconductor&#39;s SDKs and development environment. You can develop using the tools of choice from &lt;a href=&#34;https://www.st.com/content/st_com/en/campaigns/x-cube-azrtos-azure-rtos-stm32.html&#34;&gt;STMicroelectronics&lt;/a&gt;, &lt;a href=&#34;https://www.nxp.com/design/software/embedded-software/azure-rtos-for-nxp-microcontrollers:AZURE-RTOS&#34;&gt;NXP&lt;/a&gt;, &lt;a href=&#34;https://github.com/renesas/azure-rtos&#34;&gt;Renesas&lt;/a&gt; and &lt;a href=&#34;https://mu.microchip.com/get-started-simplifying-your-iot-design-with-azure-rtos&#34;&gt;Microchip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also provide &lt;a href=&#34;https://github.com/eclipse-threadx/getting-started&#34;&gt;getting started guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/eclipse-threadx/samples&#34;&gt;samples&lt;/a&gt; using development boards from semiconductors you can build and test with.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/eclipse-threadx/rtos-docs/raw/main/rtos-docs/threadx/overview-threadx.md&#34;&gt;Overview of Eclipse ThreadX RTOS&lt;/a&gt; for the high-level overview.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Directory layout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── cmake                        # CMakelist files for building the project&#xA;├── common                       # Core ThreadX files&#xA;├── common_modules               # Core ThreadX module files&#xA;├── common_smp                   # Core ThreadX SMP files&#xA;├── docs                         # Documentation supplements&#xA;├── ports                        # Architecture and compiler specific files. See below for directory breakdown     &#xA;│   ├── cortex_m7     &#xA;│   │   ├── iar                  # Example IAR compiler sample project&#xA;│   │   │   ├── example build    # IAR workspace and sample project files&#xA;│   │   │   ├── inc              # tx_port.h for this architecture&#xA;│   │   │   └── src              # Source files for this architecture&#xA;│   │   ├── ac6                  # Example ac6/Keil sample project&#xA;│   │   ├── gnu                  # Example gnu sample project&#xA;│   │   └── ...&#xA;│   └── ...        &#xA;├── ports_modules                # Architecture and compiler specific files for threadX modules&#xA;├── ports_smp                    # Architecture and compiler specific files for threadX SMP&#xA;├── samples                      # demo_threadx.c&#xA;└── utility                      # Test cases and utilities&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Branches &amp;amp; Releases&lt;/h2&gt; &#xA;&lt;p&gt;The master branch has the most recent code with all new features and bug fixes. It does not represent the latest General Availability (GA) release of the library. Each official release (preview or GA) will be tagged to mark the commit and push it into the Github releases tab, e.g. &lt;code&gt;v6.2-rel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When you see xx-xx-xxxx, 6.x or x.x in function header, this means the file is not officially released yet. They will be updated in the next release. See example below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;/**************************************************************************/&#xA;/*                                                                        */&#xA;/*  FUNCTION                                               RELEASE        */&#xA;/*                                                                        */&#xA;/*    _tx_initialize_low_level                          Cortex-M23/GNU    */&#xA;/*                                                           6.x          */&#xA;/*  AUTHOR                                                                */&#xA;/*                                                                        */&#xA;/*    Scott Larson, Microsoft Corporation                                 */&#xA;/*                                                                        */&#xA;/*  DESCRIPTION                                                           */&#xA;/*                                                                        */&#xA;/*    This function is responsible for any low-level processor            */&#xA;/*    initialization, including setting up interrupt vectors, setting     */&#xA;/*    up a periodic timer interrupt source, saving the system stack       */&#xA;/*    pointer for use in ISR processing later, and finding the first      */&#xA;/*    available RAM memory address for tx_application_define.             */&#xA;/*                                                                        */&#xA;/*  INPUT                                                                 */&#xA;/*                                                                        */&#xA;/*    None                                                                */&#xA;/*                                                                        */&#xA;/*  OUTPUT                                                                */&#xA;/*                                                                        */&#xA;/*    None                                                                */&#xA;/*                                                                        */&#xA;/*  CALLS                                                                 */&#xA;/*                                                                        */&#xA;/*    None                                                                */&#xA;/*                                                                        */&#xA;/*  CALLED BY                                                             */&#xA;/*                                                                        */&#xA;/*    _tx_initialize_kernel_enter           ThreadX entry function        */&#xA;/*                                                                        */&#xA;/*  RELEASE HISTORY                                                       */&#xA;/*                                                                        */&#xA;/*    DATE              NAME                      DESCRIPTION             */&#xA;/*                                                                        */&#xA;/*  09-30-2020      Scott Larson            Initial Version 6.1           */&#xA;/*  xx-xx-xxxx      Scott Larson            Include tx_user.h,            */&#xA;/*                                            resulting in version 6.x    */&#xA;/*                                                                        */&#xA;/**************************************************************************/ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Architecture Ports&lt;/h2&gt; &#xA;&lt;h3&gt;ThreadX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;arc_em      cortex_a12        cortex_m0     cortex_r4&#xA;arc_hs      cortex_a15        cortex_m23    cortex_r5&#xA;arm11       cortex_a17        cortex_m3     cortex_r7&#xA;arm9        cortex_a34        cortex_m33    &#xA;c667x       cortex_a35        cortex_m4    &#xA;linux       cortex_a5         cortex_m55&#xA;risc-v32    cortex_a53        cortex_m7&#xA;rxv1        cortex_a55        cortex_m85&#xA;rxv2        cortex_a57&#xA;rxv3        cortex_a5x&#xA;win32       cortex_a65&#xA;xtensa      cortex_a65ae&#xA;            cortex_a7&#xA;            cortex_a72&#xA;            cortex_a73&#xA;            cortex_a75&#xA;            cortex_a76&#xA;            cortex_a76ae&#xA;            cortex_a77&#xA;            cortex_a8&#xA;            cortex_a9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ThreadX Modules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eclipse-threadx/rtos-docs/raw/main/rtos-docs/threadx-modules/chapter1.md&#34;&gt;Eclipse ThreadX Modules&lt;/a&gt; component provides an infrastructure for applications to dynamically load modules that are built separately from the resident portion of the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cortex_a35&#xA;cortex_a35_smp&#xA;cortex_a7&#xA;cortex_m0+&#xA;cortex_m23&#xA;cortex_m3&#xA;cortex_m33&#xA;cortex_m4&#xA;cortex_m7&#xA;cortex_r4&#xA;rxv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ThreadX SMP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eclipse-threadx/rtos-docs/raw/main/rtos-docs/threadx/threadx-smp/chapter1.md&#34;&gt;Eclipse ThreadX SMP&lt;/a&gt; is a high-performance real-time SMP kernel designed specifically for embedded applications.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;arc_hs_smp&#xA;cortex_a34_smp&#xA;cortex_a35_smp&#xA;cortex_a53_smp&#xA;cortex_a55_smp&#xA;cortex_a57_smp&#xA;cortex_a5x_smp&#xA;cortex_a5_smp&#xA;cortex_a65ae_smp&#xA;cortex_a65_smp&#xA;cortex_a72_smp&#xA;cortex_a73_smp&#xA;cortex_a75_smp&#xA;cortex_a76ae_smp&#xA;cortex_a76_smp&#xA;cortex_a77_smp&#xA;cortex_a78_smp&#xA;cortex_a7_smp&#xA;cortex_a9_smp&#xA;linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adaptation layer for ThreadX&lt;/h2&gt; &#xA;&lt;p&gt;ThreadX is an advanced real-time operating system (RTOS) designed specifically for deeply embedded applications. To help ease application migration to ThreadX RTOS, Eclipse ThreadX provides &lt;a href=&#34;https://github.com/eclipse-threadx/threadx/tree/master/utility/rtos_compatibility_layers&#34;&gt;adaption layers&lt;/a&gt; for various legacy RTOS APIs (FreeRTOS, POSIX, OSEK, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Component dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The main components of ThreadX RTOS are each provided in their own repository, but there are dependencies between them, as shown in the following graph. This is important to understand when setting up your builds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/docs/deps.png&#34; alt=&#34;dependency graph&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will have to take the dependency graph above into account when building anything other than ThreadX itself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building and using the library&lt;/h3&gt; &#xA;&lt;p&gt;Instruction for building the ThreadX as static library using Arm GNU Toolchain and CMake. If you are using toolchain and IDE from semiconductor, you might follow its own instructions to use ThreadX RTOS components as explained in the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the following tools:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake&lt;/a&gt; version 3.0 or later&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads&#34;&gt;Arm GNU Toolchain for arm-none-eabi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ninja-build.org/&#34;&gt;Ninja&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/eclipse-threadx/threadx.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define the features and addons you need in &lt;code&gt;tx_user.h&lt;/code&gt; and build together with the component source code. You can refer to &lt;a href=&#34;https://github.com/eclipse-threadx/threadx/raw/master/common/inc/tx_user_sample.h&#34;&gt;&lt;code&gt;tx_user_sample.h&lt;/code&gt;&lt;/a&gt; as an example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building as a static library&lt;/p&gt; &lt;p&gt;Each component of ThreadX RTOS comes with a composable CMake-based build system that supports many different MCUs and host systems. Integrating any of these components into your device app code is as simple as adding a git submodule and then including it in your build using the CMake &lt;code&gt;add_subdirectory()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the typical usage pattern is to include ThreadX into your device code source tree to be built &amp;amp; linked with your code, you can compile this project as a standalone static library to confirm your build is set up correctly.&lt;/p&gt; &lt;p&gt;An example of building the library for Cortex-M4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake -Bbuild -GNinja -DCMAKE_TOOLCHAIN_FILE=cmake/cortex_m4.cmake .&#xA;&#xA;$ cmake --build ./build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;License terms for using Eclipse ThreadX are defined in the LICENSE.txt file of this repo. Please refer to this file for all definitive licensing information for all content, incl. the history of this repo.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The following are references to additional ThreadX RTOS resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product introduction&lt;/strong&gt;: &lt;a href=&#34;https://github.com/eclipse-threadx/rtos-docs&#34;&gt;https://github.com/eclipse-threadx/rtos-docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product issues and bugs, or feature requests&lt;/strong&gt;: &lt;a href=&#34;https://github.com/eclipse-threadx/threadx/issues&#34;&gt;https://github.com/eclipse-threadx/threadx/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TraceX Installer&lt;/strong&gt;: &lt;a href=&#34;https://aka.ms/azrtos-tracex-installer&#34;&gt;https://aka.ms/azrtos-tracex-installer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also check &lt;a href=&#34;https://stackoverflow.com/questions/tagged/threadx-rtos+threadx&#34;&gt;previous questions&lt;/a&gt; or ask new ones on StackOverflow using the &lt;code&gt;threadx-rtos&lt;/code&gt; and &lt;code&gt;threadx&lt;/code&gt; tags.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Eclipse ThreadX provides OEMs with components to secure communication and to create code and data isolation using underlying MCU/MPU hardware protection mechanisms. It is ultimately the responsibility of the device builder to ensure the device fully meets the evolving security requirements associated with its specific use case.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the instructions provided in the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for the corresponding repository.&lt;/p&gt;</summary>
  </entry>
</feed>