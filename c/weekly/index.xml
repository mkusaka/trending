<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:05:56Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>espressif/arduino-esp32</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/espressif/arduino-esp32</id>
    <link href="https://github.com/espressif/arduino-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino core for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino core for the ESP32, ESP32-S2, ESP32-S3 and ESP32-C3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/espressif/arduino-esp32/workflows/ESP32%20Arduino%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.com/projects/espressif-arduino-esp32/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Need help or have a question? Join the chat at &lt;a href=&#34;https://gitter.im/espressif/arduino-esp32?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/espressif/arduino-esp32.svg?sanitize=true&#34; alt=&#34;https://gitter.im/espressif/arduino-esp32&#34;&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions&#34;&gt;open a new Discussion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-planning&#34;&gt;Development Planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#supported-chips&#34;&gt;Supported Chips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#decoding-exceptions&#34;&gt;Decoding exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#issuebug-report-template&#34;&gt;Issue/Bug report template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Status&lt;/h3&gt; &#xA;&lt;p&gt;Latest Stable Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Development Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32/all.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date-pre/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads-pre/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development Planning&lt;/h3&gt; &#xA;&lt;p&gt;Our Development is fully tracked on this public &lt;strong&gt;&lt;a href=&#34;https://github.com/orgs/espressif/projects/3&#34;&gt;Roadmap 🎉&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For even more information you can take a look at &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/sprints-meeting-notes&#34;&gt;Sprint Meeting notes&lt;/a&gt; or join &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/monthly-community-meetings&#34;&gt;Monthly Community Meetings 🔔&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/&#34;&gt;Arduino-ESP32 Online Documentation&lt;/a&gt; to get all information about this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html&#34;&gt;Installing (Windows, Linux and macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/libraries.html&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/esp-idf_component.html&#34;&gt;ESP-IDF as Component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Chips&lt;/h3&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#supported-soc-s&#34;&gt;supported chips&lt;/a&gt; documentation to see the list of current supported ESP32 SoCs.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding exceptions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/me-no-dev/EspExceptionDecoder&#34;&gt;EspExceptionDecoder&lt;/a&gt; to get meaningful call trace.&lt;/p&gt; &#xA;&lt;h3&gt;Issue/Bug report template&lt;/h3&gt; &#xA;&lt;p&gt;Before reporting an issue, make sure you&#39;ve searched for similar one that was already created. Also make sure to go through all the issues labelled as &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues?q=is%3Aissue+label%3A%22Type%3A+For+reference%22+&#34;&gt;Type: For reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you are sure no one else had the issue, follow the &lt;strong&gt;Issue template&lt;/strong&gt; or &lt;strong&gt;Feature request template&lt;/strong&gt; while reporting any &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues/new/choose&#34;&gt;new Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions to the Arduino ESP32 project!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/contributing.html&#34;&gt;contributing&lt;/a&gt; in the documentation for more information on how to contribute to the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sakumisu/CherryUSB</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/sakumisu/CherryUSB</id>
    <link href="https://github.com/sakumisu/CherryUSB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny and portable USB device/host stack for embedded system with USB IP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CherryUSB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sakumisu/CherryUSB/master/README_zh.md&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CherryUSB is a tiny, beautiful and portable USB host and device stack for embedded system with USB ip.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sakumisu/CherryUSB/master/docs/asserts/usb_outline.png&#34; alt=&#34;CherryUSB&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why choose&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ip-oriented programming, the same usb ip driver does not need to be written repeatedly, only the parts that are not the same need to be implemented&lt;/li&gt; &#xA; &lt;li&gt;Code tree writing makes it easier for users to understand usb concept, enumeration process, class driver loading&lt;/li&gt; &#xA; &lt;li&gt;Templating the Class driver makes it easier to use composite device and add custom drivers&lt;/li&gt; &#xA; &lt;li&gt;Simplifying the complex transfer of usb makes it easier for users to use usb as easily as uart and dma&lt;/li&gt; &#xA; &lt;li&gt;Fewer directory structures, fewer apis, fewer codesize, extreme usb bandwidth&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directoy Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── class&#xA;├── common&#xA;├── core&#xA;├── demo&#xA;├── docs&#xA;├── osal&#xA;├── packet capture&#xA;└── port&#xA;└── tools&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Directory&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;class&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usb class driver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;common&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usb spec macros and utils&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;core&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usb core implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;demo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;different chips demo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;osal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;os wrapper&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;docs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;doc for guiding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;packet capture&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;packet capture file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;port&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usb dcd and hcd porting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tools&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tool used url&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Device Stack Overview&lt;/h2&gt; &#xA;&lt;p&gt;CherryUSB Device Stack provides a unified framework of functions for standard device requests, CLASS requests, VENDOR requests and custom special requests. The object-oriented and chained approach allows the user to quickly get started with composite devices without having to worry about the underlying logic. At the same time, a standard dcd porting interface has been standardised for adapting different USB IPs to achieve ip-oriented programming.&lt;/p&gt; &#xA;&lt;p&gt;CherryUSB Device Stack has the following functions：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support USB2.0 full and high speed&lt;/li&gt; &#xA; &lt;li&gt;Support endpoint irq callback register by users, let users do whatever they wants in endpoint irq callback.&lt;/li&gt; &#xA; &lt;li&gt;Support Composite Device&lt;/li&gt; &#xA; &lt;li&gt;Support Communication Device Class (CDC)&lt;/li&gt; &#xA; &lt;li&gt;Support Human Interface Device (HID)&lt;/li&gt; &#xA; &lt;li&gt;Support Custom human Interface Device (HID)&lt;/li&gt; &#xA; &lt;li&gt;Support Mass Storage Class (MSC)&lt;/li&gt; &#xA; &lt;li&gt;Support USB VIDEO CLASS (UVC1.0、UVC1.5)&lt;/li&gt; &#xA; &lt;li&gt;Support USB AUDIO CLASS (UAC1.0、UAC2.0)&lt;/li&gt; &#xA; &lt;li&gt;Support Device Firmware Upgrade CLASS (DFU)&lt;/li&gt; &#xA; &lt;li&gt;Support USB MIDI CLASS (MIDI)&lt;/li&gt; &#xA; &lt;li&gt;Support Test and Measurement CLASS (TMC)&lt;/li&gt; &#xA; &lt;li&gt;Support Remote NDIS (RNDIS)&lt;/li&gt; &#xA; &lt;li&gt;Support WINUSB1.0、WINUSB2.0(with BOS)&lt;/li&gt; &#xA; &lt;li&gt;Support Vendor class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CherryUSB Device Stack resource usage (GCC 10.2 with -O2)：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;file&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FLASH (Byte)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;RAM (Byte)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usbd_core.c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3045&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;373&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usbd_cdc.c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;302&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usbd_msc.c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2452&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;132&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usbd_hid.c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;784&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;201&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usbd_audio.c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;438&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;usbd_video.c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;402&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Host Stack Overview&lt;/h2&gt; &#xA;&lt;p&gt;The CherryUSB Host Stack has a standard enumeration implementation for devices mounted on roothubs and external hubs, and a standard interface for the different Class to indicate what the Class driver needs to do after enumeration and after disconnection. A standard hcd porting interface has also been standardised for adapting different USB IPs for IP-oriented programming. Finally, the protocol stack is managed using os, and provides osal to make a adaptation to different os.&lt;/p&gt; &#xA;&lt;p&gt;CherryUSB Host Stack has the following functions：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic loading of supported Class drivers&lt;/li&gt; &#xA; &lt;li&gt;Support blocking transfers and asynchronous transfers&lt;/li&gt; &#xA; &lt;li&gt;Support Composite Device&lt;/li&gt; &#xA; &lt;li&gt;Multi-level HUB support, expandable up to 7 levels&lt;/li&gt; &#xA; &lt;li&gt;Support Communication Device Class (CDC)&lt;/li&gt; &#xA; &lt;li&gt;Support Human Interface Device (HID)&lt;/li&gt; &#xA; &lt;li&gt;Support Mass Storage Class (MSC)&lt;/li&gt; &#xA; &lt;li&gt;Support Remote NDIS (RNDIS)&lt;/li&gt; &#xA; &lt;li&gt;Support Vendor class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The CherryUSB Host stack also provides the lsusb function, which allows you to view information about all mounted devices, including those on external hubs, with the help of a shell plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Quickly start, USB basic concepts, API manual, Class basic concepts and examples, see &lt;a href=&#34;https://cherryusb.readthedocs.io/&#34;&gt;CherryUSB Documentation Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;USB basic concepts and how the CherryUSB Device stack is implemented, see &lt;a href=&#34;https://www.bilibili.com/video/BV1Ef4y1t73d&#34;&gt;CherryUSB Device Stack Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Graphical Config Tool&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Egahp/chryusb_configurator&#34;&gt;chryusb_configurator&lt;/a&gt; is written in &lt;strong&gt;electron + vite2 + ts&lt;/strong&gt; framework，currently used to automate the generation of descriptor arrays, with additional functionality to be added later.&lt;/p&gt; &#xA;&lt;h2&gt;Demo Repo&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Manufacturer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CHIP or Series&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;USB IP&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Repo Url&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bouffalolab&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BL702&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bouffalolab&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/bouffalolab/bl_mcu_sdk/tree/master/examples/usb&#34;&gt;bl_mcu_sdk&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Essemi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ES32F36xx&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;musb&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sakumisu/CherryUSB/tree/master/demo/es32&#34;&gt;es32f369_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AllwinnerTech&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;F1C100S&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;musb&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/CherryUSB/cherryusb_rtt_f1c100s&#34;&gt;cherryusb_rtt_f1c100s&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ST&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;STM32F103C8T6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fsdev&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sakumisu/CherryUSB/tree/master/demo/stm32/usb_device/stm32f103c8t6&#34;&gt;stm32f103_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ST&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;STM32F429IGT6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;synopsys/dwc2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sakumisu/CherryUSB/tree/master/demo/stm32/usb_device/stm32f429igt6&#34;&gt;stm32f429_device_repo&lt;/a&gt; &lt;a href=&#34;https://github.com/sakumisu/CherryUSB/tree/master/demo/stm32/usb_host/stm32f429igt6&#34;&gt;stm32f429_host_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;WCH&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CH32V307&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ch32_usbfs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sakumisu/CherryUSB/tree/master/demo/ch32/usb_device/CH32V307VCT6&#34;&gt;ch32v307_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;WCH&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CH57x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ch58x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/CherryUSB/cherryusb_ch57x&#34;&gt;ch57x_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nuvoton&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nuc442&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nuvoton&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sakumisu/CherryUSB/tree/master/demo/nuvoton/usb_device/nuc442&#34;&gt;nuc442_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nordicsemi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nrf52840&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nrf5x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/CherryUSB/cherryusb_nrf5x&#34;&gt;nrf5x_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Geehy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;APM32E10x APM32F0xx&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fsdev&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/CherryUSB/cherryusb_apm32&#34;&gt;apm32_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mindmotion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MM32L3xx&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;mm32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/CherryUSB/cherryusb_mm32&#34;&gt;mm32_repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>espressif/esp32-camera</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/espressif/esp32-camera</id>
    <link href="https://github.com/espressif/esp32-camera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32 Camera Driver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/espressif/esp32-camera/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/espressif/esp32-camera/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General Information&lt;/h2&gt; &#xA;&lt;p&gt;This repository hosts ESP32 series Soc compatible driver for image sensors. Additionally it provides a few tools, which allow converting the captured frame data to the more common BMP and JPEG formats.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Soc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32&lt;/li&gt; &#xA; &lt;li&gt;ESP32-S2&lt;/li&gt; &#xA; &lt;li&gt;ESP32-S3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Sensor&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;max resolution&lt;/th&gt; &#xA;   &lt;th&gt;color type&lt;/th&gt; &#xA;   &lt;th&gt;output format&lt;/th&gt; &#xA;   &lt;th&gt;Len Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OV2640&lt;/td&gt; &#xA;   &lt;td&gt;1600 x 1200&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV(422/420)/YCbCr422&lt;br&gt;RGB565/555&lt;br&gt;8-bit compressed data&lt;br&gt;8/10-bit Raw RGB data&lt;/td&gt; &#xA;   &lt;td&gt;1/4&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OV3660&lt;/td&gt; &#xA;   &lt;td&gt;2048 x 1536&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;raw RGB data&lt;br&gt;RGB565/555/444&lt;br&gt;CCIR656&lt;br&gt;YCbCr422&lt;br&gt;compression&lt;/td&gt; &#xA;   &lt;td&gt;1/5&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OV5640&lt;/td&gt; &#xA;   &lt;td&gt;2592 x 1944&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;RAW RGB&lt;br&gt;RGB565/555/444&lt;br&gt;CCIR656&lt;br&gt;YUV422/420&lt;br&gt;YCbCr422&lt;br&gt;compression&lt;/td&gt; &#xA;   &lt;td&gt;1/4&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OV7670&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;Raw Bayer RGB&lt;br&gt;Processed Bayer RGB&lt;br&gt;YUV/YCbCr422&lt;br&gt;GRB422&lt;br&gt;RGB565/555&lt;/td&gt; &#xA;   &lt;td&gt;1/6&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OV7725&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;Raw RGB&lt;br&gt;GRB 422&lt;br&gt;RGB565/555/444&lt;br&gt;YCbCr 422&lt;/td&gt; &#xA;   &lt;td&gt;1/4&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NT99141&lt;/td&gt; &#xA;   &lt;td&gt;1280 x 720&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YCbCr 422&lt;br&gt;RGB565/555/444&lt;br&gt;Raw&lt;br&gt;CCIR656&lt;br&gt;JPEG compression&lt;/td&gt; &#xA;   &lt;td&gt;1/4&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GC032A&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; &#xA;   &lt;td&gt;1/10&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GC0308&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; &#xA;   &lt;td&gt;1/6.5&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GC2145&lt;/td&gt; &#xA;   &lt;td&gt;1600 x 1200&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; &#xA;   &lt;td&gt;1/5&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BF3005&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;br&gt;RGB565&lt;/td&gt; &#xA;   &lt;td&gt;1/4&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BF20A6&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;/td&gt; &#xA;   &lt;td&gt;1/10&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SC030IOT&lt;/td&gt; &#xA;   &lt;td&gt;640 x 480&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;YUV/YCbCr422&lt;br&gt;RAW Bayer&lt;/td&gt; &#xA;   &lt;td&gt;1/6.5&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Important to Remember&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Except when using CIF or lower resolution with JPEG, the driver requires PSRAM to be installed and activated.&lt;/li&gt; &#xA; &lt;li&gt;Using YUV or RGB puts a lot of strain on the chip because writing to PSRAM is not particularly fast. The result is that image data might be missing. This is particularly true if WiFi is enabled. If you need RGB data, it is recommended that JPEG is captured and then turned into RGB using &lt;code&gt;fmt2rgb888&lt;/code&gt; or &lt;code&gt;fmt2bmp&lt;/code&gt;/&lt;code&gt;frame2bmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When 1 frame buffer is used, the driver will wait for the current frame to finish (VSYNC) and start I2S DMA. After the frame is acquired, I2S will be stopped and the frame buffer returned to the application. This approach gives more control over the system, but results in longer time to get the frame.&lt;/li&gt; &#xA; &lt;li&gt;When 2 or more frame bufers are used, I2S is running in continuous mode and each frame is pushed to a queue that the application can access. This approach puts more strain on the CPU/Memory, but allows for double the frame rate. Please use only with JPEG.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Using esp-idf&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone or download and extract the repository to the components folder of your ESP-IDF project&lt;/li&gt; &#xA; &lt;li&gt;Enable PSRAM in &lt;code&gt;menuconfig&lt;/code&gt; (also set Flash and PSRAM frequiencies to 80MHz)&lt;/li&gt; &#xA; &lt;li&gt;Include &lt;code&gt;esp_camera.h&lt;/code&gt; in your code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using PlatformIO&lt;/h3&gt; &#xA;&lt;p&gt;The easy way -- on the &lt;code&gt;env&lt;/code&gt; section of &lt;code&gt;platformio.ini&lt;/code&gt;, add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[env]&#xA;lib_deps =&#xA;  esp32-camera&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the &lt;code&gt;esp_camera.h&lt;/code&gt; is available to be included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;esp_camera.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable PSRAM on &lt;code&gt;menuconfig&lt;/code&gt; or type it direclty on &lt;code&gt;sdkconfig&lt;/code&gt;. Check the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#config-esp32-spiram-support&#34;&gt;official doc&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CONFIG_ESP32_SPIRAM_SUPPORT=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Arduino&lt;/strong&gt;&lt;/em&gt; The easy-way (content above) only seems to work if you&#39;re using &lt;code&gt;framework=arduino&lt;/code&gt; which seems to take a bunch of the guesswork out (thanks Arduino!) but also suck up a lot more memory and flash, almost crippling the performance. If you plan to use the &lt;code&gt;framework=espidf&lt;/code&gt; then read the sections below carefully!!&lt;/p&gt; &#xA;&lt;h2&gt;Platform.io lib/submodule (for framework=espidf)&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s probably easier to just skip the platform.io library registry version and link the git repo as a submodule. (i.e. using code outside the platform.io library management). In this example we will install this as a submodule inside the platform.io $project/lib folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd $project\lib&#xA;git submodule add -b master https://github.com/espressif/esp32-camera.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;platformio.ini&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build_flags =&#xA;   -I../lib/esp32-camera&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that &lt;code&gt;#include &#34;esp_camera.h&#34;&lt;/code&gt; statement will be available. Now the module is included, and you&#39;re hopefully back to the same place as the easy-Arduino way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning about platform.io/espidf and fresh (not initialized) git repos&lt;/strong&gt; There is a sharp-edge on you&#39;ll discover in the platform.io build process (in espidf v3.3 &amp;amp; 4.0.1) where a project which has only had &lt;code&gt;git init&lt;/code&gt; but nothing committed will crash platform.io build process with highly non-useful output. The cause is due to lack of a version (making you think you did something wrong, when you didn&#39;t at all) - the output is horribly non-descript. Solution: the devs want you to create a file called version.txt with a number in it, or simply commit any file to the projects git repo and use git. This happens because platform.io build process tries to be too clever and determine the build version number from the git repo - it&#39;s a sharp edge you&#39;ll only encounter if you&#39;re experimenting on a new project with no commits .. like wtf is my camera not working let&#39;s try a &#39;clean project&#39;?! &lt;/p&gt; &#xA;&lt;h2&gt;Platform.io Kconfig&lt;/h2&gt; &#xA;&lt;p&gt;Kconfig is used by the platform.io menuconfig (accessed by running: &lt;code&gt;pio run -t menuconfig&lt;/code&gt;) to interactively manage the various #ifdef statements throughout the espidf and supporting libraries (i.e. this repo: esp32-camera and arduino-esp32.git). The menuconfig process generates the &lt;code&gt;sdkconfig&lt;/code&gt; file which is ultimately used behind the scenes by espidf compile+build process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure to append or symlink&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp32-camera/master/Kconfig&#34;&gt;this &lt;code&gt;Kconfig&lt;/code&gt;&lt;/a&gt; content into the &lt;code&gt;Kconfig&lt;/code&gt; of your project.&lt;/p&gt; &#xA;&lt;p&gt;You symlink (or copy) the included Kconfig into your platform.io projects src directory. The file should be named &lt;code&gt;Kconfig.projbuild&lt;/code&gt; in your projects src\ directory or you could also add the library path to a CMakefile.txt and hope the &lt;code&gt;Kconfig&lt;/code&gt; (or &lt;code&gt;Kconfig.projbuild&lt;/code&gt;) gets discovered by the menuconfig process, though this unpredictable for me.&lt;/p&gt; &#xA;&lt;p&gt;The unpredictable wonky behavior in platform.io build process around Kconfig naming (Kconfig vs. Kconfig.projbuild) occurs between espidf versions 3.3 and 4.0 - but if you don&#39;t see &#34;Camera configuration&#34; in your &lt;code&gt;pio run -t menuconfig&lt;/code&gt; then there is no point trying to test camera code (it may compile, but it probably won&#39;t work!) and it seems the platform.io devs (when they built their wrapper around the espidf menuconfig) didn&#39;t implement it properly. You&#39;ve probably already figured out you can&#39;t use the espidf build tools since the files are in totally different locations and also different versions with sometimes different syntax. This is one of those times you might consider changing the &lt;code&gt;platformio.ini&lt;/code&gt; from &lt;code&gt;platform=espressif32&lt;/code&gt; to &lt;code&gt;platform=https://github.com/platformio/platform-espressif32.git#develop&lt;/code&gt; to get a more recent version of the espidf 4.0 tools.&lt;/p&gt; &#xA;&lt;p&gt;However with a bit of patience and experimenting you&#39;ll figure the Kconfig out. Once Kconfig (or Kconfig.projbuild) is working then you will be able to choose the configurations according to your setup or the camera libraries will be compiled. Although you might also need to delete your .pio/build directory before the options appear .. again, the &lt;code&gt;pio run -t menuconfig&lt;/code&gt; doens&#39;t always notice the new Kconfig files!&lt;/p&gt; &#xA;&lt;p&gt;If you miss-skip-ignore this critical step the camera module will compile but camera logic inside the library will be &#39;empty&#39; because the Kconfig sets the proper #ifdef statements during the build process to initialize the selected cameras. It&#39;s very not optional!&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;esp_camera.h&#34;&#xA;&#xA;//WROVER-KIT PIN Map&#xA;#define CAM_PIN_PWDN    -1 //power down is not used&#xA;#define CAM_PIN_RESET   -1 //software reset will be performed&#xA;#define CAM_PIN_XCLK    21&#xA;#define CAM_PIN_SIOD    26&#xA;#define CAM_PIN_SIOC    27&#xA;&#xA;#define CAM_PIN_D7      35&#xA;#define CAM_PIN_D6      34&#xA;#define CAM_PIN_D5      39&#xA;#define CAM_PIN_D4      36&#xA;#define CAM_PIN_D3      19&#xA;#define CAM_PIN_D2      18&#xA;#define CAM_PIN_D1       5&#xA;#define CAM_PIN_D0       4&#xA;#define CAM_PIN_VSYNC   25&#xA;#define CAM_PIN_HREF    23&#xA;#define CAM_PIN_PCLK    22&#xA;&#xA;static camera_config_t camera_config = {&#xA;    .pin_pwdn  = CAM_PIN_PWDN,&#xA;    .pin_reset = CAM_PIN_RESET,&#xA;    .pin_xclk = CAM_PIN_XCLK,&#xA;    .pin_sscb_sda = CAM_PIN_SIOD,&#xA;    .pin_sscb_scl = CAM_PIN_SIOC,&#xA;&#xA;    .pin_d7 = CAM_PIN_D7,&#xA;    .pin_d6 = CAM_PIN_D6,&#xA;    .pin_d5 = CAM_PIN_D5,&#xA;    .pin_d4 = CAM_PIN_D4,&#xA;    .pin_d3 = CAM_PIN_D3,&#xA;    .pin_d2 = CAM_PIN_D2,&#xA;    .pin_d1 = CAM_PIN_D1,&#xA;    .pin_d0 = CAM_PIN_D0,&#xA;    .pin_vsync = CAM_PIN_VSYNC,&#xA;    .pin_href = CAM_PIN_HREF,&#xA;    .pin_pclk = CAM_PIN_PCLK,&#xA;&#xA;    .xclk_freq_hz = 20000000,//EXPERIMENTAL: Set to 16MHz on ESP32-S2 or ESP32-S3 to enable EDMA mode&#xA;    .ledc_timer = LEDC_TIMER_0,&#xA;    .ledc_channel = LEDC_CHANNEL_0,&#xA;&#xA;    .pixel_format = PIXFORMAT_JPEG,//YUV422,GRAYSCALE,RGB565,JPEG&#xA;    .frame_size = FRAMESIZE_UXGA,//QQVGA-QXGA Do not use sizes above QVGA when not JPEG&#xA;&#xA;    .jpeg_quality = 12, //0-63 lower number means higher quality&#xA;    .fb_count = 1, //if more than one, i2s runs in continuous mode. Use only with JPEG&#xA;    .grab_mode = CAMERA_GRAB_WHEN_EMPTY//CAMERA_GRAB_LATEST. Sets when buffers should be filled&#xA;};&#xA;&#xA;esp_err_t camera_init(){&#xA;    //power up the camera if PWDN pin is defined&#xA;    if(CAM_PIN_PWDN != -1){&#xA;        pinMode(CAM_PIN_PWDN, OUTPUT);&#xA;        digitalWrite(CAM_PIN_PWDN, LOW);&#xA;    }&#xA;&#xA;    //initialize the camera&#xA;    esp_err_t err = esp_camera_init(&amp;amp;camera_config);&#xA;    if (err != ESP_OK) {&#xA;        ESP_LOGE(TAG, &#34;Camera Init Failed&#34;);&#xA;        return err;&#xA;    }&#xA;&#xA;    return ESP_OK;&#xA;}&#xA;&#xA;esp_err_t camera_capture(){&#xA;    //acquire a frame&#xA;    camera_fb_t * fb = esp_camera_fb_get();&#xA;    if (!fb) {&#xA;        ESP_LOGE(TAG, &#34;Camera Capture Failed&#34;);&#xA;        return ESP_FAIL;&#xA;    }&#xA;    //replace this with your own function&#xA;    process_image(fb-&amp;gt;width, fb-&amp;gt;height, fb-&amp;gt;format, fb-&amp;gt;buf, fb-&amp;gt;len);&#xA;  &#xA;    //return the frame buffer back to the driver for reuse&#xA;    esp_camera_fb_return(fb);&#xA;    return ESP_OK;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JPEG HTTP Capture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;esp_camera.h&#34;&#xA;#include &#34;esp_http_server.h&#34;&#xA;#include &#34;esp_timer.h&#34;&#xA;&#xA;typedef struct {&#xA;        httpd_req_t *req;&#xA;        size_t len;&#xA;} jpg_chunking_t;&#xA;&#xA;static size_t jpg_encode_stream(void * arg, size_t index, const void* data, size_t len){&#xA;    jpg_chunking_t *j = (jpg_chunking_t *)arg;&#xA;    if(!index){&#xA;        j-&amp;gt;len = 0;&#xA;    }&#xA;    if(httpd_resp_send_chunk(j-&amp;gt;req, (const char *)data, len) != ESP_OK){&#xA;        return 0;&#xA;    }&#xA;    j-&amp;gt;len += len;&#xA;    return len;&#xA;}&#xA;&#xA;esp_err_t jpg_httpd_handler(httpd_req_t *req){&#xA;    camera_fb_t * fb = NULL;&#xA;    esp_err_t res = ESP_OK;&#xA;    size_t fb_len = 0;&#xA;    int64_t fr_start = esp_timer_get_time();&#xA;&#xA;    fb = esp_camera_fb_get();&#xA;    if (!fb) {&#xA;        ESP_LOGE(TAG, &#34;Camera capture failed&#34;);&#xA;        httpd_resp_send_500(req);&#xA;        return ESP_FAIL;&#xA;    }&#xA;    res = httpd_resp_set_type(req, &#34;image/jpeg&#34;);&#xA;    if(res == ESP_OK){&#xA;        res = httpd_resp_set_hdr(req, &#34;Content-Disposition&#34;, &#34;inline; filename=capture.jpg&#34;);&#xA;    }&#xA;&#xA;    if(res == ESP_OK){&#xA;        if(fb-&amp;gt;format == PIXFORMAT_JPEG){&#xA;            fb_len = fb-&amp;gt;len;&#xA;            res = httpd_resp_send(req, (const char *)fb-&amp;gt;buf, fb-&amp;gt;len);&#xA;        } else {&#xA;            jpg_chunking_t jchunk = {req, 0};&#xA;            res = frame2jpg_cb(fb, 80, jpg_encode_stream, &amp;amp;jchunk)?ESP_OK:ESP_FAIL;&#xA;            httpd_resp_send_chunk(req, NULL, 0);&#xA;            fb_len = jchunk.len;&#xA;        }&#xA;    }&#xA;    esp_camera_fb_return(fb);&#xA;    int64_t fr_end = esp_timer_get_time();&#xA;    ESP_LOGI(TAG, &#34;JPG: %uKB %ums&#34;, (uint32_t)(fb_len/1024), (uint32_t)((fr_end - fr_start)/1000));&#xA;    return res;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JPEG HTTP Stream&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;esp_camera.h&#34;&#xA;#include &#34;esp_http_server.h&#34;&#xA;#include &#34;esp_timer.h&#34;&#xA;&#xA;#define PART_BOUNDARY &#34;123456789000000000000987654321&#34;&#xA;static const char* _STREAM_CONTENT_TYPE = &#34;multipart/x-mixed-replace;boundary=&#34; PART_BOUNDARY;&#xA;static const char* _STREAM_BOUNDARY = &#34;\r\n--&#34; PART_BOUNDARY &#34;\r\n&#34;;&#xA;static const char* _STREAM_PART = &#34;Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n&#34;;&#xA;&#xA;esp_err_t jpg_stream_httpd_handler(httpd_req_t *req){&#xA;    camera_fb_t * fb = NULL;&#xA;    esp_err_t res = ESP_OK;&#xA;    size_t _jpg_buf_len;&#xA;    uint8_t * _jpg_buf;&#xA;    char * part_buf[64];&#xA;    static int64_t last_frame = 0;&#xA;    if(!last_frame) {&#xA;        last_frame = esp_timer_get_time();&#xA;    }&#xA;&#xA;    res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);&#xA;    if(res != ESP_OK){&#xA;        return res;&#xA;    }&#xA;&#xA;    while(true){&#xA;        fb = esp_camera_fb_get();&#xA;        if (!fb) {&#xA;            ESP_LOGE(TAG, &#34;Camera capture failed&#34;);&#xA;            res = ESP_FAIL;&#xA;            break;&#xA;        }&#xA;        if(fb-&amp;gt;format != PIXFORMAT_JPEG){&#xA;            bool jpeg_converted = frame2jpg(fb, 80, &amp;amp;_jpg_buf, &amp;amp;_jpg_buf_len);&#xA;            if(!jpeg_converted){&#xA;                ESP_LOGE(TAG, &#34;JPEG compression failed&#34;);&#xA;                esp_camera_fb_return(fb);&#xA;                res = ESP_FAIL;&#xA;            }&#xA;        } else {&#xA;            _jpg_buf_len = fb-&amp;gt;len;&#xA;            _jpg_buf = fb-&amp;gt;buf;&#xA;        }&#xA;&#xA;        if(res == ESP_OK){&#xA;            res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));&#xA;        }&#xA;        if(res == ESP_OK){&#xA;            size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);&#xA;&#xA;            res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);&#xA;        }&#xA;        if(res == ESP_OK){&#xA;            res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);&#xA;        }&#xA;        if(fb-&amp;gt;format != PIXFORMAT_JPEG){&#xA;            free(_jpg_buf);&#xA;        }&#xA;        esp_camera_fb_return(fb);&#xA;        if(res != ESP_OK){&#xA;            break;&#xA;        }&#xA;        int64_t fr_end = esp_timer_get_time();&#xA;        int64_t frame_time = fr_end - last_frame;&#xA;        last_frame = fr_end;&#xA;        frame_time /= 1000;&#xA;        ESP_LOGI(TAG, &#34;MJPG: %uKB %ums (%.1ffps)&#34;,&#xA;            (uint32_t)(_jpg_buf_len/1024),&#xA;            (uint32_t)frame_time, 1000.0 / (uint32_t)frame_time);&#xA;    }&#xA;&#xA;    last_frame = 0;&#xA;    return res;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BMP HTTP Capture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;esp_camera.h&#34;&#xA;#include &#34;esp_http_server.h&#34;&#xA;#include &#34;esp_timer.h&#34;&#xA;&#xA;esp_err_t bmp_httpd_handler(httpd_req_t *req){&#xA;    camera_fb_t * fb = NULL;&#xA;    esp_err_t res = ESP_OK;&#xA;    int64_t fr_start = esp_timer_get_time();&#xA;&#xA;    fb = esp_camera_fb_get();&#xA;    if (!fb) {&#xA;        ESP_LOGE(TAG, &#34;Camera capture failed&#34;);&#xA;        httpd_resp_send_500(req);&#xA;        return ESP_FAIL;&#xA;    }&#xA;&#xA;    uint8_t * buf = NULL;&#xA;    size_t buf_len = 0;&#xA;    bool converted = frame2bmp(fb, &amp;amp;buf, &amp;amp;buf_len);&#xA;    esp_camera_fb_return(fb);&#xA;    if(!converted){&#xA;        ESP_LOGE(TAG, &#34;BMP conversion failed&#34;);&#xA;        httpd_resp_send_500(req);&#xA;        return ESP_FAIL;&#xA;    }&#xA;&#xA;    res = httpd_resp_set_type(req, &#34;image/x-windows-bmp&#34;)&#xA;       || httpd_resp_set_hdr(req, &#34;Content-Disposition&#34;, &#34;inline; filename=capture.bmp&#34;)&#xA;       || httpd_resp_send(req, (const char *)buf, buf_len);&#xA;    free(buf);&#xA;    int64_t fr_end = esp_timer_get_time();&#xA;    ESP_LOGI(TAG, &#34;BMP: %uKB %ums&#34;, (uint32_t)(buf_len/1024), (uint32_t)((fr_end - fr_start)/1000));&#xA;    return res;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>xmake-io/xmake</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/xmake-io/xmake</id>
    <link href="https://github.com/xmake-io/xmake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥 A cross-platform build utility based on Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://xmake.io&#34;&gt; &lt;img width=&#34;160&#34; heigth=&#34;160&#34; src=&#34;https://tboox.org/static/img/xmake/logo256c.png&#34;&gt; &lt;/a&gt; &#xA; &lt;h1&gt;xmake&lt;/h1&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3AWindows&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/xmake-io/xmake/Windows/master.svg?style=flat-square&amp;amp;logo=windows&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3ALinux&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/xmake-io/xmake/Linux/master.svg?style=flat-square&amp;amp;logo=linux&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/actions?query=workflow%3AmacOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/xmake-io/xmake/macOS/master.svg?style=flat-square&amp;amp;logo=apple&#34; alt=&#34;github-ci&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/xmake-io/xmake.svg?style=flat-square&#34; alt=&#34;Github All Releases&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://aur.archlinux.org/packages/xmake&#34;&gt; &lt;img src=&#34;https://img.shields.io/aur/votes/xmake.svg?style=flat-square&#34; alt=&#34;AUR votes&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/xmake-io/xmake/raw/master/LICENSE.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/xmake-io/xmake.svg?colorB=f48041&amp;amp;style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.reddit.com/r/xmake/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square&#34; alt=&#34;Reddit&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://gitter.im/xmake-io/xmake?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/gitter/room/xmake-io/xmake.svg?style=flat-square&amp;amp;colorB=96c312&#34; alt=&#34;Gitter&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://t.me/tbooxorg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square&#34; alt=&#34;Telegram&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5hpwWFv&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square&#34; alt=&#34;QQ&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://discord.gg/xmake&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?style=flat-square&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://xmake.io/#/sponsor&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/donate-us-orange.svg?style=flat-square&#34; alt=&#34;Donate&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;&lt;b&gt;A cross-platform build utility based on Lua&lt;/b&gt;&lt;br&gt; &lt;i&gt;Modern C/C++ build tool: Simple, Fast, Powerful dependency package integration&lt;/i&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Support this project&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by &lt;a href=&#34;https://xmake.io/#/about/sponsor&#34;&gt;becoming a sponsor&lt;/a&gt;. Your logo will show up here with a link to your website. 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/xmake#sponsors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/sponsors.svg?width=890&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmake#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technical Support&lt;/h2&gt; &#xA;&lt;p&gt;You can also consider sponsoring us to get extra technical support services via the &lt;a href=&#34;https://github.com/sponsors/waruqi&#34;&gt;Github sponsor program&lt;/a&gt;, This gives you access to the &lt;a href=&#34;https://github.com/xmake-io/technical-support&#34;&gt;xmake-io/technical-support&lt;/a&gt; repository, where you can get more information on consulting.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Handling Issues with higher priority&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; One-to-one technical consulting service&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Review your xmake.lua and provide suggestions for improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction (&lt;a href=&#34;https://raw.githubusercontent.com/xmake-io/xmake/master/README_zh.md&#34;&gt;中文&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Xmake is a lightweight, cross-platform build utility based on Lua.&lt;/p&gt; &#xA;&lt;p&gt;It is very lightweight and has no dependencies due to the integration of the Lua runtime.&lt;/p&gt; &#xA;&lt;p&gt;It uses xmake.lua to maintain project builds with a very simple and readable syntax.&lt;/p&gt; &#xA;&lt;p&gt;We can use it to build projects directly like Make/Ninja or generate project files like CMake/Meson. It also has a built-in package management system to help users integrate C/C++ dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although not very precise, we can still understand Xmake in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know more, please refer to: &lt;a href=&#34;https://xmake.io/#/getting_started&#34;&gt;Documents&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;Github&lt;/a&gt; and &lt;a href=&#34;https://gitee.com/tboox/xmake&#34;&gt;Gitee&lt;/a&gt;. You are also welcome to join our &lt;a href=&#34;https://xmake.io/#/about/contact&#34;&gt;community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://xmake.io/assets/img/index/xmake-basic-render.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;via curl&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -fsSL https://xmake.io/shget.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via wget&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(wget https://xmake.io/shget.text -O -)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via powershell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-Expression (Invoke-Webrequest &#39;https://xmake.io/psget.text&#39; -UseBasicParsing).Content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other installation methods&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the script to install xmake, see &lt;a href=&#34;https://xmake.io/#/guide/installation&#34;&gt;Installation Guide&lt;/a&gt; for other installation methods.&lt;/p&gt; &#xA;&lt;h2&gt;Simple description&lt;/h2&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/showcode1.png&#34; width=&#34;340px&#34;&gt; &#xA;&lt;h2&gt;Package dependences&lt;/h2&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/add_require.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;An official xmake package repository exists at: &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run target&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake run console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug target&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake run -d console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure platform&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake f -p [windows|linux|macosx|android|iphoneos ..] -a [x86|arm64 ..] -m [debug|release]&#xA;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Menu configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake f --menu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/menuconf.png&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h2&gt;Build as fast as ninja&lt;/h2&gt; &#xA;&lt;p&gt;The test project: &lt;a href=&#34;https://github.com/xmake-io/xmake/tree/master/core&#34;&gt;xmake-core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multi-task parallel compilation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;Termux (8core/-j12)&lt;/th&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;24.890s&lt;/td&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;12.264s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;25.682s&lt;/td&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;11.327s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;5.416s+28.473s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;1.203s+14.030s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;4.458s+24.842s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;0.988s+11.644s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Single task compilation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;Termux (-j1)&lt;/th&gt; &#xA;   &lt;th&gt;buildsystem&lt;/th&gt; &#xA;   &lt;th&gt;MacOS (-j1)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;1m57.707s&lt;/td&gt; &#xA;   &lt;td&gt;xmake&lt;/td&gt; &#xA;   &lt;td&gt;39.937s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;1m52.845s&lt;/td&gt; &#xA;   &lt;td&gt;ninja&lt;/td&gt; &#xA;   &lt;td&gt;38.995s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;5.416s+2m10.539s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+make)&lt;/td&gt; &#xA;   &lt;td&gt;1.203s+41.737s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;4.458s+1m54.868s&lt;/td&gt; &#xA;   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; &#xA;   &lt;td&gt;0.988s+38.022s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Package management&lt;/h2&gt; &#xA;&lt;h3&gt;Download and build&lt;/h3&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/package_manage.png&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h3&gt;Processing architecture&lt;/h3&gt; &#xA;&lt;img src=&#34;https://xmake.io/assets/img/index/package_arch.png&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h3&gt;Supported package repositories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official package repository &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt; &#xA; &lt;li&gt;Official package manager &lt;a href=&#34;https://github.com/xmake-io/xrepo&#34;&gt;Xrepo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/package/remote_package?id=using-self-built-private-package-repository&#34;&gt;User-built repositories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt; &#xA; &lt;li&gt;Conda (conda::libpng 1.3.67)&lt;/li&gt; &#xA; &lt;li&gt;Vcpkg (vcpkg:ffmpeg)&lt;/li&gt; &#xA; &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt; &#xA; &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt; &#xA; &lt;li&gt;Apt on ubuntu/debian (apt::zlib1g-dev)&lt;/li&gt; &#xA; &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt; &#xA; &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt; &#xA; &lt;li&gt;Portage on Gentoo/Linux (portage::libhandy)&lt;/li&gt; &#xA; &lt;li&gt;Nimble for nimlang (nimble::zip &amp;gt;1.3)&lt;/li&gt; &#xA; &lt;li&gt;Cargo for rust (cargo::base64 0.13.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Package management features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The official repository provides nearly 500+ packages with one-click compilation on all platforms&lt;/li&gt; &#xA; &lt;li&gt;Full platform package support, support for cross-compiled dependent packages&lt;/li&gt; &#xA; &lt;li&gt;Support package virtual environment using &lt;code&gt;xrepo env shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Precompiled package acceleration for Windows&lt;/li&gt; &#xA; &lt;li&gt;Support self-built package repositories and private repository deployment&lt;/li&gt; &#xA; &lt;li&gt;Third-party package repository support for repositories such as: vcpkg, conan, conda, etc.&lt;/li&gt; &#xA; &lt;li&gt;Supports automatic pulling of remote toolchains&lt;/li&gt; &#xA; &lt;li&gt;Supports dependency version locking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (x86, x64)&lt;/li&gt; &#xA; &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (i386, x86_64, cross-toolchains ..)&lt;/li&gt; &#xA; &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt; &#xA; &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;WatchOS (armv7k, i386)&lt;/li&gt; &#xA; &lt;li&gt;AppleTVOS (armv7, arm64, i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt; &#xA; &lt;li&gt;Cygwin (i386, x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Wasm (wasm32)&lt;/li&gt; &#xA; &lt;li&gt;Cross (cross-toolchains ..)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported toolchains&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake show -l toolchains&#xA;xcode         Xcode IDE&#xA;msvc          Microsoft Visual C/C++ Compiler&#xA;yasm          The Yasm Modular Assembler&#xA;clang         A C language family frontend for LLVM&#xA;go            Go Programming Language Compiler&#xA;dlang         D Programming Language Compiler&#xA;gfortran      GNU Fortran Programming Language Compiler&#xA;zig           Zig Programming Language Compiler&#xA;sdcc          Small Device C Compiler&#xA;cuda          CUDA Toolkit (nvcc, nvc, nvc++, nvfortran)&#xA;ndk           Android NDK&#xA;rust          Rust Programming Language Compiler&#xA;swift         Swift Programming Language Compiler&#xA;llvm          A collection of modular and reusable compiler and toolchain technologies&#xA;cross         Common cross compilation toolchain&#xA;nasm          NASM Assembler&#xA;gcc           GNU Compiler Collection&#xA;mingw         Minimalist GNU for Windows&#xA;gnu-rm        GNU Arm Embedded Toolchain&#xA;envs          Environment variables toolchain&#xA;fasm          Flat Assembler&#xA;tinycc        Tiny C Compiler&#xA;emcc          A toolchain for compiling to asm.js and WebAssembly&#xA;icc           Intel C/C++ Compiler&#xA;ifort         Intel Fortran Compiler&#xA;muslcc        The musl-based cross-compilation toolchain&#xA;fpc           Free Pascal Programming Language Compiler&#xA;wasi          WASI-enabled WebAssembly C/C++ toolchain&#xA;nim           Nim Programming Language Compiler&#xA;circle        A new C++20 compiler&#xA;armcc         ARM Compiler Version 5 of Keil MDK&#xA;armclang      ARM Compiler Version 6 of Keil MDK&#xA;c51           Keil development tools for the 8051 Microcontroller Architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C&lt;/li&gt; &#xA; &lt;li&gt;C++&lt;/li&gt; &#xA; &lt;li&gt;Objective-C and Objective-C++&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;Assembly&lt;/li&gt; &#xA; &lt;li&gt;Golang&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Dlang&lt;/li&gt; &#xA; &lt;li&gt;Fortran&lt;/li&gt; &#xA; &lt;li&gt;Cuda&lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA; &lt;li&gt;Vala&lt;/li&gt; &#xA; &lt;li&gt;Pascal&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The configuration grammar is simple and easy to use&lt;/li&gt; &#xA; &lt;li&gt;Quick, dependency-free installation&lt;/li&gt; &#xA; &lt;li&gt;One-click compilation for all platforms&lt;/li&gt; &#xA; &lt;li&gt;Supports cross compilation with intelligent analysis of cross toolchain information&lt;/li&gt; &#xA; &lt;li&gt;Extremely fast parallel compilation support&lt;/li&gt; &#xA; &lt;li&gt;C++20 module support&lt;/li&gt; &#xA; &lt;li&gt;Supports cross-platform C/C++ dependencies with built-in package manager&lt;/li&gt; &#xA; &lt;li&gt;Multi-language compilation support including mixed-language projects.&lt;/li&gt; &#xA; &lt;li&gt;Rich plug-in support with various project generators (ex. vs/makefile/cmakelists/compile_commands)&lt;/li&gt; &#xA; &lt;li&gt;REPL interactive execution support&lt;/li&gt; &#xA; &lt;li&gt;Incremental compilation support with automatic analysis of header files&lt;/li&gt; &#xA; &lt;li&gt;Quick toolchain management&lt;/li&gt; &#xA; &lt;li&gt;A large number of expansion modules&lt;/li&gt; &#xA; &lt;li&gt;Remote compilation support&lt;/li&gt; &#xA; &lt;li&gt;Distributed compilation support&lt;/li&gt; &#xA; &lt;li&gt;Local and remote build cache support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Static Library&lt;/li&gt; &#xA; &lt;li&gt;Shared Library&lt;/li&gt; &#xA; &lt;li&gt;Console&lt;/li&gt; &#xA; &lt;li&gt;Cuda Program&lt;/li&gt; &#xA; &lt;li&gt;Qt Application&lt;/li&gt; &#xA; &lt;li&gt;WDK Driver (umdf/kmdf/wdm)&lt;/li&gt; &#xA; &lt;li&gt;WinSDK Application&lt;/li&gt; &#xA; &lt;li&gt;MFC Application&lt;/li&gt; &#xA; &lt;li&gt;iOS/MacOS Application (Support .metal)&lt;/li&gt; &#xA; &lt;li&gt;Framework and Bundle Program (iOS/MacOS)&lt;/li&gt; &#xA; &lt;li&gt;SWIG Modules (Lua, python, ...)&lt;/li&gt; &#xA; &lt;li&gt;Luarocks Modules&lt;/li&gt; &#xA; &lt;li&gt;Protobuf Program&lt;/li&gt; &#xA; &lt;li&gt;Lex/yacc program&lt;/li&gt; &#xA; &lt;li&gt;C++20 Modules&lt;/li&gt; &#xA; &lt;li&gt;Linux Kernel Driver Modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Distributed Compilation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cross-platform support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for msvc, clang, gcc and cross-compilation toolchain&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for building android, ios, linux, win, macOS programs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No dependencies other than the compilation toolchain&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for build server load balancing scheduling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for real time compressed transfer of large files (lz4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Almost zero configuration cost, no shared filesystem required, more convenience and security&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;About distributed compilation and build cache, you can see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/guide/other_features?id=distributed-compilation&#34;&gt;Distributed Compilation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/guide/other_features?id=local-compilation-cache&#34;&gt;Local Build Cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmake.io/#/guide/other_features?id=remote-compilation-cache&#34;&gt;Remote Build Cache&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Remote Compilation&lt;/h2&gt; &#xA;&lt;p&gt;For more details see: &lt;a href=&#34;https://xmake.io/#/guide/other_features?id=remote-compilation&#34;&gt;Remote Compilation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;h4&gt;Debug and release profiles&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_rules(&#34;mode.debug&#34;, &#34;mode.release&#34;)&#xA;&#xA;target(&#34;console&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    if is_mode(&#34;debug&#34;) then&#xA;        add_defines(&#34;DEBUG&#34;)&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom scripts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    after_build(function (target)&#xA;        print(&#34;hello: %s&#34;, target:name())&#xA;        os.exec(&#34;echo %s&#34;, target:targetfile())&#xA;    end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatic integration of dependent packages&lt;/h4&gt; &#xA;&lt;p&gt;Download and use packages in &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; or third-party repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;tbox &amp;gt;1.6.1&#34;, &#34;libuv master&#34;, &#34;vcpkg::ffmpeg&#34;, &#34;brew::pcre2/libpcre2-8&#34;)&#xA;add_requires(&#34;conan::openssl/1.1.1g&#34;, {alias = &#34;openssl&#34;, optional = true, debug = true})&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    add_packages(&#34;tbox&#34;, &#34;libuv&#34;, &#34;vcpkg::ffmpeg&#34;, &#34;brew::pcre2/libpcre2-8&#34;, &#34;openssl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, we can also use the &lt;a href=&#34;https://github.com/xmake-io/xrepo&#34;&gt;xrepo&lt;/a&gt; command to quickly install dependencies.&lt;/p&gt; &#xA;&lt;h4&gt;Qt QuickApp Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;qt.quickapp&#34;)&#xA;    add_files(&#34;src/*.cpp&#34;)&#xA;    add_files(&#34;src/qml.qrc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cuda Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.cu&#34;)&#xA;    add_cugencodes(&#34;native&#34;)&#xA;    add_cugencodes(&#34;compute_35&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WDK/UMDF Driver Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;echo&#34;)&#xA;    add_rules(&#34;wdk.driver&#34;, &#34;wdk.env.umdf&#34;)&#xA;    add_files(&#34;driver/*.c&#34;)&#xA;    add_files(&#34;driver/*.inx&#34;)&#xA;    add_includedirs(&#34;exe&#34;)&#xA;&#xA;target(&#34;app&#34;)&#xA;    add_rules(&#34;wdk.binary&#34;, &#34;wdk.env.umdf&#34;)&#xA;    add_files(&#34;exe/*.cpp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More wdk driver program examples exist (umdf/kmdf/wdm), please see &lt;a href=&#34;https://xmake.io/#/guide/project_examples?id=wdk-driver-program&#34;&gt;WDK Program Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;iOS/MacOS Application&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;xcode.application&#34;)&#xA;    add_files(&#34;src/*.m&#34;, &#34;src/**.storyboard&#34;, &#34;src/*.xcassets&#34;)&#xA;    add_files(&#34;src/Info.plist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Framework and Bundle Program (iOS/MacOS)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    add_rules(&#34;xcode.framework&#34;) -- or xcode.bundle&#xA;    add_files(&#34;src/*.m&#34;)&#xA;    add_files(&#34;src/Info.plist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenMP Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;libomp&#34;, {optional = true})&#xA;target(&#34;loop&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.cpp&#34;)&#xA;    add_rules(&#34;c++.openmp&#34;)&#xA;    add_packages(&#34;libomp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Zig Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/main.zig&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatically fetch remote toolchain&lt;/h3&gt; &#xA;&lt;h4&gt;fetch a special version of llvm&lt;/h4&gt; &#xA;&lt;p&gt;We use Clang in &lt;code&gt;llvm-10&lt;/code&gt; to compile the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;llvm 10.x&#34;, {alias = &#34;llvm-10&#34;})&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    set_toolchains(&#34;llvm@llvm-10&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetch cross-compilation toolchain&lt;/h4&gt; &#xA;&lt;p&gt;We can also pull a specified cross-compilation toolchain to compile the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;muslcc&#34;)&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    set_toolchains(&#34;@muslcc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetch toolchain and packages&lt;/h4&gt; &#xA;&lt;p&gt;We can also use the specified &lt;code&gt;muslcc&lt;/code&gt; cross-compilation toolchain to compile and integrate all dependent packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;add_requires(&#34;muslcc&#34;)&#xA;add_requires(&#34;zlib&#34;, &#34;libogg&#34;, {system = false})&#xA;&#xA;set_toolchains(&#34;@muslcc&#34;)&#xA;&#xA;target(&#34;test&#34;)&#xA;    set_kind(&#34;binary&#34;)&#xA;    add_files(&#34;src/*.c&#34;)&#xA;    add_packages(&#34;zlib&#34;, &#34;libogg&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;h4&gt;Generate IDE project file plugin（makefile, vs2002 - vs2022 .. ）&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake project -k vsxmake -m &#34;debug,release&#34; # New vsproj generator (Recommended)&#xA;$ xmake project -k vs -m &#34;debug,release&#34;&#xA;$ xmake project -k cmake&#xA;$ xmake project -k ninja&#xA;$ xmake project -k compile_commands&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run a custom lua script plugin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xmake l ./test.lua&#xA;$ xmake l -c &#34;print(&#39;hello xmake!&#39;)&#34;&#xA;$ xmake l lib.detect.find_tool gcc&#xA;$ xmake l&#xA;&amp;gt; print(&#34;hello xmake!&#34;)&#xA;&amp;gt; {1, 2, 3}&#xA;&amp;lt; {&#xA;    1,&#xA;    2,&#xA;    3&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More builtin plugins exist, please see: &lt;a href=&#34;https://xmake.io/#/plugin/builtin_plugins&#34;&gt;Builtin plugins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please download and install other plugins from the plugins repository &lt;a href=&#34;https://github.com/xmake-io/xmake-plugins&#34;&gt;xmake-plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IDE/Editor Integration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-vscode&#34;&gt;xmake-vscode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-vscode/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-sublime&#34;&gt;xmake-sublime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-sublime/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmake-io/xmake-idea&#34;&gt;xmake-idea&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmake-io/xmake-idea/master/res/problem.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/luzhlon/xmake.vim&#34;&gt;xmake.vim&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/luzhlon&#34;&gt;@luzhlon&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HelloWorld886/xmake-visualstudio&#34;&gt;xmake-visualstudio&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/HelloWorld886&#34;&gt;@HelloWorld886&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Arthapz/xmake-project-manager&#34;&gt;xmake-qtcreator&lt;/a&gt; (third-party, thanks &lt;a href=&#34;https://github.com/Arthapz&#34;&gt;@Arthapz&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;XMake Gradle Plugin (JNI)&lt;/h3&gt; &#xA;&lt;p&gt;We can use the &lt;a href=&#34;https://github.com/xmake-io/xmake-gradle&#34;&gt;xmake-gradle&lt;/a&gt; plugin to compile JNI libraries via gradle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plugins {&#xA;  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.1.5&#39;&#xA;}&#xA;&#xA;android {&#xA;    externalNativeBuild {&#xA;        xmake {&#xA;            path &#34;jni/xmake.lua&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;xmakeBuild&lt;/code&gt; task will be injected into the &lt;code&gt;assemble&lt;/code&gt; task automatically if the &lt;code&gt;gradle-xmake-plugin&lt;/code&gt; has been applied.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./gradlew app:assembleDebug&#xA;&amp;gt; Task :nativelib:xmakeConfigureForArm64&#xA;&amp;gt; Task :nativelib:xmakeBuildForArm64&#xA;&amp;gt;&amp;gt; xmake build&#xA;[ 50%]: ccache compiling.debug nativelib.cc&#xA;[ 75%]: linking.debug libnativelib.so&#xA;[100%]: build ok!&#xA;&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a&#xA;&amp;gt; Task :nativelib:xmakeConfigureForArmv7&#xA;&amp;gt; Task :nativelib:xmakeBuildForArmv7&#xA;&amp;gt;&amp;gt; xmake build&#xA;[ 50%]: ccache compiling.debug nativelib.cc&#xA;[ 75%]: linking.debug libnativelib.so&#xA;[100%]: build ok!&#xA;&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a&#xA;&amp;gt; Task :nativelib:preBuild&#xA;&amp;gt; Task :nativelib:assemble&#xA;&amp;gt; Task :app:assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CI Integration&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;p&gt;We can use &lt;a href=&#34;https://github.com/xmake-io/github-action-setup-xmake&#34;&gt;github-action-setup-xmake&lt;/a&gt; to setup Xmake in Github Actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uses: xmake-io/github-action-setup-xmake@v1&#xA;with:&#xA;  xmake-version: latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who is using Xmake?&lt;/h2&gt; &#xA;&lt;p&gt;The user list is available &lt;a href=&#34;https://xmake.io/#/about/who_is_using_xmake&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using xmake, you are welcome to submit your information to the above list through a PR, so that others can know how many users are using it.&lt;/p&gt; &#xA;&lt;p&gt;Ihis also let users to use xmake more confidently and give us motivation to continue to maintain it. This will help the xmake project and it&#39;s community to grow stronger.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email：&lt;a href=&#34;mailto:waruqi@gmail.com&#34;&gt;waruqi@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homepage：&lt;a href=&#34;https://xmake.io&#34;&gt;xmake.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Community &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/xmake/&#34;&gt;Chat on reddit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://t.me/tbooxorg&#34;&gt;Chat on telegram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gitter.im/xmake-io/xmake?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;Chat on gitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://discord.gg/xmake&#34;&gt;Chat on discord&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Chat on QQ Group: 343118190, 662147501&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Source Code：&lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://gitee.com/tboox/xmake&#34;&gt;Gitee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wechat Public: tboox-os&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who have &lt;a href=&#34;https://raw.githubusercontent.com/xmake-io/xmake/master/CONTRIBUTING.md&#34;&gt;contributed&lt;/a&gt;: &lt;a href=&#34;https://github.com/xmake-io/xmake/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/xmake/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TitanSnow&#34;&gt;TitanSnow&lt;/a&gt;: provide the xmake &lt;a href=&#34;https://github.com/TitanSnow/ts-xmake-logo&#34;&gt;logo&lt;/a&gt; and install scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uael&#34;&gt;uael&lt;/a&gt;: provide the semantic versioning library &lt;a href=&#34;https://github.com/uael/sv&#34;&gt;sv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpportunityLiu&#34;&gt;OpportunityLiu&lt;/a&gt;: improve cuda, tests and ci&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xq114&#34;&gt;xq144&lt;/a&gt;: Improve &lt;code&gt;xrepo env shell&lt;/code&gt;, and contribute a lot of packages to the &lt;a href=&#34;https://github.com/xmake-io/xmake-repo&#34;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enderger&lt;/code&gt;: Helped smooth out the edges on the English translation of the README&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fwupd/fwupd</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/fwupd/fwupd</id>
    <link href="https://github.com/fwupd/fwupd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A system daemon to allow session software to update firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fwupd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fwupd/fwupd/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/fwupd/fwupd/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fwupd/fwupd/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/fwupd/fwupd/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/10744&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/10744/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:fwupd&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fwupd.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/fwupd/fwupd/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/fwupd/fwupd/tree/main.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project aims to make updating firmware on Linux automatic, safe and reliable.&lt;/p&gt; &#xA;&lt;p&gt;Additional information is available &lt;a href=&#34;https://fwupd.org/&#34;&gt;at the website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Where to get help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub issues &amp;amp; discussions in &lt;a href=&#34;https://github.com/fwupd/fwupd&#34;&gt;this repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Libera IRC channel &lt;code&gt;#fwupd&lt;/code&gt;. You can join through Libera&#39;s &lt;a href=&#34;https://libera.chat/&#34;&gt;IRC&lt;/a&gt; or via the IRC bridge on &lt;a href=&#34;https://matrix.to/#/#fwupd:libera.chat&#34;&gt;Matrix&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;The most up to date compilation instructions are available in the &lt;a href=&#34;https://github.com/fwupd/fwupd/wiki/Compilation&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In most cases end users should never compile fwupd from scratch; it&#39;s a complicated project with dozens of dependencies (and as many configuration options) and there&#39;s just too many things that can go wrong.&lt;/p&gt; &#xA;&lt;p&gt;Users should just have fwupd installed and updated by their distro, managed and tested by the package maintainer. The distribution will have also done some testing with how fwupd interacts with other software on your system, for instance using GNOME Software.&lt;/p&gt; &#xA;&lt;p&gt;Installing fwupd using &lt;a href=&#34;https://github.com/fwupd/fwupd/wiki/fwupd-snap&#34;&gt;Snap&lt;/a&gt; or using &lt;a href=&#34;https://github.com/fwupd/fwupd/wiki/fwupd-flatpak&#34;&gt;Flatpak&lt;/a&gt; might be useful to update a specific device on the command line that needs a bleeding edge fwupd version, but it should not be considered as a replacement to the distro-provided system version.&lt;/p&gt; &#xA;&lt;h2&gt;LVFS&lt;/h2&gt; &#xA;&lt;p&gt;This project is configured by default to download firmware from the &lt;a href=&#34;https://fwupd.org/&#34;&gt;Linux Vendor Firmware Service (LVFS)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This service is available to all OEMs and firmware creators who would like to make their firmware available to Linux users.&lt;/p&gt; &#xA;&lt;p&gt;You can find more information about the technical details of creating a firmware capsule in the hardware vendors section of the &lt;a href=&#34;https://fwupd.org&#34;&gt;fwupd website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage flow (command line)&lt;/h2&gt; &#xA;&lt;p&gt;If you have a device with firmware supported by fwupd, this is how you will check for updates and apply them using fwupd&#39;s command line tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr get-devices&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will display all devices detected by fwupd.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr refresh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will download the latest metadata from LVFS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr get-updates&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If updates are available for any devices on the system, they&#39;ll be displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr update&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will download and apply all updates for your system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updates that can be applied live will be done immediately.&lt;/li&gt; &#xA; &lt;li&gt;Updates that run at bootup will be staged for the next reboot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find more information about the update workflow in the end users section of the &lt;a href=&#34;https://fwupd.org&#34;&gt;fwupd website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting status&lt;/h2&gt; &#xA;&lt;p&gt;fwupd will encourage users to report both successful and failed updates back to LVFS. This is an optional feature, but encouraged as it provides valuable feedback to LVFS administrators and OEM developers regarding firmware update process efficacy.&lt;/p&gt; &#xA;&lt;p&gt;The privacy policy regarding this data can be viewed on the &lt;a href=&#34;https://fwupd.org/privacy&#34;&gt;fwupd website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To report the status of an update run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr report-history&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Only updates that were distributed from the LVFS will be reported to the LVFS.&lt;/p&gt; &#xA;&lt;h2&gt;Enterprise use&lt;/h2&gt; &#xA;&lt;p&gt;The flow of updates can be controlled in the enterprise using the &#34;approved updates&#34; feature. This allows the domain administrator to filter the possible updates from a central server (e.g. the LVFS, or a mirror) to only firmware that have been tested specifically in your organization.&lt;/p&gt; &#xA;&lt;p&gt;The list of approved updates can be enabled by adding &lt;code&gt;ApprovalRequired=true&lt;/code&gt; to the remote configuration file, e.g. &lt;code&gt;lvfs.conf&lt;/code&gt;. Once enabled, the list of approved updates can be set in &lt;code&gt;daemon.conf&lt;/code&gt; using a comma delimited list.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ApprovedFirmware=foo,bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;foo,bar&lt;/code&gt; refers to the container checksums that would correspond to two updates in the metadata file.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the list of approved firmware can be supplemented using &lt;code&gt;fwupdmgr set-approved-firmware baz&lt;/code&gt; or using the D-Bus interface.&lt;/p&gt; &#xA;&lt;h2&gt;Local metadata&lt;/h2&gt; &#xA;&lt;p&gt;Local metadata can be saved in &lt;code&gt;/var/lib/fwupd/local.d&lt;/code&gt; or &lt;code&gt;/usr/share/fwupd/local.d&lt;/code&gt; which are scanned at daemon startup. This can be used to add site-specific BKC tags to existing metadata stores. For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt;&#xA;&amp;lt;components origin=&#34;mycompanyname&#34;&amp;gt;&#xA;  &amp;lt;component merge=&#34;append&#34;&amp;gt;&#xA;    &amp;lt;provides&amp;gt;&#xA;      &amp;lt;firmware&amp;gt;3ef35d3b-ceeb-5e27-8c0a-ac25f90367ab&amp;lt;/firmware&amp;gt;&#xA;      &amp;lt;firmware&amp;gt;2ef35d3b-ceeb-5e27-8c0a-ac25f90367ac&amp;lt;/firmware&amp;gt;&#xA;      &amp;lt;firmware&amp;gt;1ef35d3b-ceeb-5e27-8c0a-ac25f90367ad&amp;lt;/firmware&amp;gt;&#xA;    &amp;lt;/provides&amp;gt;&#xA;    &amp;lt;releases&amp;gt;&#xA;      &amp;lt;release version=&#34;225.53.1649&#34;/&amp;gt;&#xA;      &amp;lt;release version=&#34;224.48.1605&#34;/&amp;gt;&#xA;    &amp;lt;/releases&amp;gt;&#xA;    &amp;lt;tags&amp;gt;&#xA;      &amp;lt;tag&amp;gt;mycompanyname-2022q1&amp;lt;/tag&amp;gt;&#xA;    &amp;lt;/tags&amp;gt;&#xA;  &amp;lt;/component&amp;gt;&#xA;&amp;lt;/components&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This then appears when getting the releases for that specific GUID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fwupdmgr get-releases --json 3ef35d3b-ceeb-5e27-8c0a-ac25f90367ab&#xA;{&#xA;  &#34;Releases&#34; : [&#xA;    {&#xA;      ...&#xA;      &#34;Version&#34; : &#34;225.53.1649&#34;,&#xA;      &#34;Tags&#34; : [&#xA;        &#34;mycompanyname-2022q1&#34;&#xA;      ],&#xA;      ...&#xA;    },&#xA;    {&#xA;      ...&#xA;      &#34;Version&#34; : &#34;224.48.1605&#34;,&#xA;      &#34;Tags&#34; : [&#xA;        &#34;mycompanyname-2022q1&#34;&#xA;      ],&#xA;      ...&#xA;    },&#xA;    {&#xA;      ...&#xA;      &#34;Version&#34; : &#34;224.45.1389&#34;,&#xA;      ...&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other frontends&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Software&#34;&gt;GNOME Software&lt;/a&gt; is the graphical frontend available. When compiled with firmware support, it will check for updates periodically and automatically download firmware in the background. After the firmware has been downloaded a popup will be displayed in GNOME Software to perform the update.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://userbase.kde.org/Discover&#34;&gt;KDE Discover&lt;/a&gt; is the software center, generally bundled with KDE Plasma. With the release of &lt;a href=&#34;https://www.kde.org/announcements/plasma-5.14.0.php&#34;&gt;KDE Plasma 5.14&lt;/a&gt;, a new fwupd backend has been implemented in KDE Discover for firmware updates. These firmware updates are shown with other system updates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dell.com/en-us/work/shop/wyse-endpoints-and-software/wyse-management-suite/spd/wyse-wms&#34;&gt;Wyse Management Suite&lt;/a&gt; A software suite available on Dell IoT gateways and Wyse thin clients with built-in fwupd support. The remote administration interface can be used to download and deploy firmware updates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fuzzing&lt;/h2&gt; &#xA;&lt;p&gt;There are several automated fuzzing tests in fwupd. These take some time to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=hfuzz-clang meson --default-library=static \&#xA;    -Dudevdir=/tmp -Dsystemd_root_prefix=/tmp \&#xA;    -Dplugin_redfish=disabled -Dcurl=disabled \&#xA;    -Dintrospection=false ../&#xA;ninja install&#xA;ninja fuzz-firmware&#xA;ninja fuzz-tpm-eventlog&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sumatrapdfreader/sumatrapdf</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/sumatrapdfreader/sumatrapdf</id>
    <link href="https://github.com/sumatrapdfreader/sumatrapdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SumatraPDF reader&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/sumatrapdfreader/sumatrapdf/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SumatraPDF Reader&lt;/h2&gt; &#xA;&lt;p&gt;SumatraPDF is a multi-format (PDF, EPUB, MOBI, FB2, CHM, XPS, DjVu) reader for Windows under (A)GPLv3 license, with some code under BSD license (see AUTHORS).&lt;/p&gt; &#xA;&lt;p&gt;More information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sumatrapdfreader.org/free-pdf-reader&#34;&gt;main website&lt;/a&gt; with downloads and documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sumatrapdfreader.org/manual&#34;&gt;manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To compile you need latest Visual Studio 2022. &lt;a href=&#34;https://www.visualstudio.com/vs/community/&#34;&gt;Free Community edition&lt;/a&gt; works.&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;code&gt;vs2022/SumatraPDF.sln&lt;/code&gt; and hit F5 to compile and run.&lt;/p&gt; &#xA;&lt;p&gt;For best results use the latest release available as that&#39;s what I use and test with. If things don&#39;t compile, first make sure you&#39;re using the latest version of Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s more &lt;a href=&#34;https://www.sumatrapdfreader.org/docs/Contribute-to-SumatraPDF&#34;&gt;developer information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notes on targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;asan&lt;/code&gt; target is for enabling address sanitizer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Asan notes&lt;/h3&gt; &#xA;&lt;p&gt;Docs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160&#34;&gt;https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/cppblog/asan-for-windows-x64-and-debug-build-support/&#34;&gt;https://devblogs.microsoft.com/cppblog/asan-for-windows-x64-and-debug-build-support/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/cppblog/addresssanitizer-asan-for-windows-with-msvc/&#34;&gt;https://devblogs.microsoft.com/cppblog/addresssanitizer-asan-for-windows-with-msvc/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/sanitizers/wiki/SanitizerCommonFlags&#34;&gt;https://github.com/google/sanitizers/wiki/SanitizerCommonFlags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizerFlags&#34;&gt;https://github.com/google/sanitizers/wiki/AddressSanitizerFlags&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Can be set with env variable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ASAN_OPTIONS=halt_on_error=0:allocator_may_return_null=1:verbosity=2:check_malloc_usable_size=false:print_suppressions=true:suppressions=&#34;C:\Users\kjk\src\sumatrapdf\asan.supp&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Visual Studio, this is in &lt;code&gt;Debugging&lt;/code&gt;, &lt;code&gt;Environment&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as of VS 16.6.2 &lt;code&gt;ASAN_OPTIONS=detect_leaks=1&lt;/code&gt; (i.e. memory leaks) doesn&#39;t work. Unix version relies on tcmalloc so this might never work Suppressing issues: &lt;a href=&#34;https://clang.llvm.org/docs/AddressSanitizer.html#issue-suppression&#34;&gt;https://clang.llvm.org/docs/AddressSanitizer.html#issue-suppression&lt;/a&gt; Note: I couldn&#39;t get suppressing to work.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wazuh/wazuh</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/wazuh/wazuh</id>
    <link href="https://github.com/wazuh/wazuh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wazuh - The Open Source Security Platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wazuh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wazuh.com/community/join-us-on-slack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join-blue.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/wazuh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/email-join-blue.svg?sanitize=true&#34; alt=&#34;Email&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://documentation.wazuh.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-view-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wazuh.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/web-view-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/wazuh-wazuh&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/10992/badge.svg?sanitize=true&#34; alt=&#34;Coverity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/wazuh&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/wazuh?style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=peTSzcAueEc&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/views/peTSzcAueEc?style=social&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh is a free and open source platform used for threat prevention, detection, and response. It is capable of protecting workloads across on-premises, virtualized, containerized, and cloud-based environments.&lt;/p&gt; &#xA;&lt;p&gt;Wazuh solution consists of an endpoint security agent, deployed to the monitored systems, and a management server, which collects and analyzes data gathered by the agents. Besides, Wazuh has been fully integrated with the Elastic Stack, providing a search engine and data visualization tool that allows users to navigate through their security alerts.&lt;/p&gt; &#xA;&lt;h2&gt;Wazuh capabilities&lt;/h2&gt; &#xA;&lt;p&gt;A brief presentation of some of the more common use cases of the Wazuh solution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Intrusion detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh agents scan the monitored systems looking for malware, rootkits and suspicious anomalies. They can detect hidden files, cloaked processes or unregistered network listeners, as well as inconsistencies in system call responses.&lt;/p&gt; &#xA;&lt;p&gt;In addition to agent capabilities, the server component uses a signature-based approach to intrusion detection, using its regular expression engine to analyze collected log data and look for indicators of compromise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Log data analysis&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh agents read operating system and application logs, and securely forward them to a central manager for rule-based analysis and storage. When no agent is deployed, the server can also receive data via syslog from network devices or applications.&lt;/p&gt; &#xA;&lt;p&gt;The Wazuh rules help make you aware of application or system errors, misconfigurations, attempted and/or successful malicious activities, policy violations and a variety of other security and operational issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;File integrity monitoring&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh monitors the file system, identifying changes in content, permissions, ownership, and attributes of files that you need to keep an eye on. In addition, it natively identifies users and applications used to create or modify files.&lt;/p&gt; &#xA;&lt;p&gt;File integrity monitoring capabilities can be used in combination with threat intelligence to identify threats or compromised hosts. In addition, several regulatory compliance standards, such as PCI DSS, require it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vulnerability detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh agents pull software inventory data and send this information to the server, where it is correlated with continuously updated CVE (Common Vulnerabilities and Exposure) databases, in order to identify well-known vulnerable software.&lt;/p&gt; &#xA;&lt;p&gt;Automated vulnerability assessment helps you find the weak spots in your critical assets and take corrective action before attackers exploit them to sabotage your business or steal confidential data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration assessment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh monitors system and application configuration settings to ensure they are compliant with your security policies, standards and/or hardening guides. Agents perform periodic scans to detect applications that are known to be vulnerable, unpatched, or insecurely configured.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, configuration checks can be customized, tailoring them to properly align with your organization. Alerts include recommendations for better configuration, references and mapping with regulatory compliance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Incident response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh provides out-of-the-box active responses to perform various countermeasures to address active threats, such as blocking access to a system from the threat source when certain criteria are met.&lt;/p&gt; &#xA;&lt;p&gt;In addition, Wazuh can be used to remotely run commands or system queries, identifying indicators of compromise (IOCs) and helping perform other live forensics or incident response tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regulatory compliance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh provides some of the necessary security controls to become compliant with industry standards and regulations. These features, combined with its scalability and multi-platform support help organizations meet technical compliance requirements.&lt;/p&gt; &#xA;&lt;p&gt;Wazuh is widely used by payment processing companies and financial institutions to meet PCI DSS (Payment Card Industry Data Security Standard) requirements. Its web user interface provides reports and dashboards that can help with this and other regulations (e.g. GPG13 or GDPR).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cloud security&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh helps monitoring cloud infrastructure at an API level, using integration modules that are able to pull security data from well known cloud providers, such as Amazon AWS, Azure or Google Cloud. In addition, Wazuh provides rules to assess the configuration of your cloud environment, easily spotting weaknesses.&lt;/p&gt; &#xA;&lt;p&gt;In addition, Wazuh light-weight and multi-platform agents are commonly used to monitor cloud environments at the instance level.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Containers security&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh provides security visibility into your Docker hosts and containers, monitoring their behavior and detecting threats, vulnerabilities and anomalies. The Wazuh agent has native integration with the Docker engine allowing users to monitor images, volumes, network settings, and running containers.&lt;/p&gt; &#xA;&lt;p&gt;Wazuh continuously collects and analyzes detailed runtime information. For example, alerting for containers running in privileged mode, vulnerable applications, a shell running in a container, changes to persistent volumes or images, and other possible threats.&lt;/p&gt; &#xA;&lt;h2&gt;WUI&lt;/h2&gt; &#xA;&lt;p&gt;The Wazuh WUI provides a powerful user interface for data visualization and analysis. This interface can also be used to manage Wazuh configuration and to monitor its status.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modules overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app.png&#34; alt=&#34;Modules overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security events&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app2.png&#34; alt=&#34;Module: Security events&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Integrity monitoring&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app3.png&#34; alt=&#34;Module: Integrity monitoring&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vulnerability detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app4.png&#34; alt=&#34;Module: Vulnerabilities&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regulatory compliance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app5.png&#34; alt=&#34;Module: PCI DSS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agents overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app6.png&#34; alt=&#34;Agents overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agent summary&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app7.png&#34; alt=&#34;Agent summary&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Orchestration&lt;/h2&gt; &#xA;&lt;p&gt;Here you can find all the automation tools maintained by the Wazuh team.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-cloudformation&#34;&gt;Wazuh AWS CloudFormation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-docker&#34;&gt;Docker containers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-ansible&#34;&gt;Wazuh Ansible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-chef&#34;&gt;Wazuh Chef&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-puppet&#34;&gt;Wazuh Puppet&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-kubernetes&#34;&gt;Wazuh Kubernetes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-bosh&#34;&gt;Wazuh Bosh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-salt&#34;&gt;Wazuh Salt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt; branch contains the latest code, be aware of possible bugs on this branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; branch on correspond to the last Wazuh stable version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Software and libraries used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modified version of Zlib and a embedded part of OpenSSL (SHA1, SHA256, SHA512, AES and Blowfish libraries).&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL Project for use in the OpenSSL Toolkit (&lt;a href=&#34;http://www.openssl.org/&#34;&gt;http://www.openssl.org/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic software written by Eric Young (&lt;a href=&#34;mailto:eay@cryptsoft.com&#34;&gt;eay@cryptsoft.com&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the Zlib project (Jean-loup Gailly and Mark Adler).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the cJSON project (Dave Gamble).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the MessagePack project (&lt;a href=&#34;https://msgpack.org/&#34;&gt;https://msgpack.org/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the CURL project (&lt;a href=&#34;https://curl.haxx.se/&#34;&gt;https://curl.haxx.se/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the bzip2 project (Julian Seward).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the libYAML project (Kirill Simonov).&lt;/li&gt; &#xA; &lt;li&gt;The Linux audit userspace project (&lt;a href=&#34;https://github.com/linux-audit/audit-userspace&#34;&gt;https://github.com/linux-audit/audit-userspace&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;A embedded part of the Berkeley DB library (&lt;a href=&#34;https://github.com/berkeleydb/libdb&#34;&gt;https://github.com/berkeleydb/libdb&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CPython interpreter by Guido van Rossum and the Python Software Foundation (&lt;a href=&#34;https://www.python.org&#34;&gt;https://www.python.org&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;PyPi packages: &lt;a href=&#34;https://github.com/Azure/azure-storage-python&#34;&gt;azure-storage-blob&lt;/a&gt;, &lt;a href=&#34;https://github.com/boto/boto3&#34;&gt;boto3&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;cryptography&lt;/a&gt;, &lt;a href=&#34;https://github.com/docker/docker-py&#34;&gt;docker&lt;/a&gt;, &lt;a href=&#34;https://pythonhosted.org/pytz/&#34;&gt;pytz&lt;/a&gt;, &lt;a href=&#34;http://python-requests.org/&#34;&gt;requests&lt;/a&gt; and &lt;a href=&#34;http://github.com/MagicStack/uvloop&#34;&gt;uvloop&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PCRE2 library by Philip Hazel (&lt;a href=&#34;https://www.pcre.org/&#34;&gt;https://www.pcre.org/&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://documentation.wazuh.com&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://documentation.wazuh.com/current/installation-guide/index.html&#34;&gt;Wazuh installation guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;Become part of the &lt;a href=&#34;https://wazuh.com/community/&#34;&gt;Wazuh&#39;s community&lt;/a&gt; to learn from other users, participate in discussions, talk to our developers and contribute to the project.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to our project please don’t hesitate to make pull-requests, submit issues or send commits, we will review all your questions.&lt;/p&gt; &#xA;&lt;p&gt;You can also join our &lt;a href=&#34;https://wazuh.com/community/join-us-on-slack/&#34;&gt;Slack community channel&lt;/a&gt; and &lt;a href=&#34;https://groups.google.com/d/forum/wazuh&#34;&gt;mailing list&lt;/a&gt; by sending an email to &lt;a href=&#34;mailto:wazuh+subscribe@googlegroups.com&#34;&gt;wazuh+subscribe@googlegroups.com&lt;/a&gt;, to ask questions and participate in discussions.&lt;/p&gt; &#xA;&lt;p&gt;Stay up to date on news, releases, engineering articles and more.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wazuh.com&#34;&gt;Wazuh website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/wazuh&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/wazuhsecurity&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/wazuh&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wazuh.com/blog/&#34;&gt;Wazuh blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wazuh.com/community/join-us-on-slack/&#34;&gt;Slack announcements channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Wazuh Copyright (C) 2015-2022 Wazuh Inc. (License GPLv2)&lt;/p&gt; &#xA;&lt;p&gt;Based on the OSSEC project started by Daniel Cid.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yanull/os-guide-cn</title>
    <updated>2022-06-02T02:05:56Z</updated>
    <id>tag:github.com,2022-06-02:/yanull/os-guide-cn</id>
    <link href="https://github.com/yanull/os-guide-cn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;从零开始制作一个操作系统！---- 操作系统开发指南&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;从零开始制作一个操作系统！&lt;/h1&gt; &#xA;&lt;p&gt;这只是我个人的学习项目，欢迎fork这个仓库。&lt;/p&gt; &#xA;&lt;p&gt;2022年更新，内容有所修改，原始仓库在&lt;a href=&#34;https://github.com/cfenollosa/os-tutorial&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;理论很少，不需要很深的理论基础。是的，这是一个很大的特点 - Google 就是你最好的理论导师。&lt;/li&gt; &#xA; &lt;li&gt;教程很简短，你只需要花费少量时间就可以读完。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚠️ 注意&lt;/h2&gt; &#xA;&lt;p&gt;请自行修改Makefile文件！&lt;/p&gt; &#xA;&lt;h2&gt;📒 备注&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;x86_64-elf-gcc&lt;/code&gt; 需要添加&lt;code&gt;-m32&lt;/code&gt;参数，&lt;code&gt;i386-elf-gcc&lt;/code&gt;已经废弃。&lt;/p&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/1.%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87&#34;&gt;1、前期准备&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/raw/main/2.%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA&#34;&gt;2、引导扇区&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/raw/main/3.%E5%BC%95%E5%AF%BC%E6%89%93%E5%8D%B0&#34;&gt;3、引导打印&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/raw/main/4.%E5%BC%95%E5%AF%BC%E5%86%85%E5%AD%98&#34;&gt;4、引导内存&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/raw/main/5.%E5%BC%95%E5%AF%BC%E6%A0%88&#34;&gt;5、引导栈&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/6.%E5%87%BD%E6%95%B0%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2&#34;&gt;6、函数和字符串&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/7.%E5%BC%95%E5%AF%BC%E6%AE%B5&#34;&gt;7、引导段&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/raw/main/8.%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA%E7%A3%81%E7%9B%98&#34;&gt;8、引导扇区磁盘&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/9.32%E4%BD%8D%E6%89%93%E5%8D%B0&#34;&gt;9、32位打印&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/10.32%E4%BD%8D-gdt&#34;&gt;10、32位GDT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/11.32%E4%BD%8D%E8%BE%93%E5%85%A5&#34;&gt;11、32位输入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/12.%E5%86%85%E6%A0%B8%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8&#34;&gt;12、内核交叉编译器&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/13.%E5%86%85%E6%A0%B8-C&#34;&gt;13、内核 - C&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/14.%E5%86%85%E6%A0%B8%E5%87%86%E7%B3%BB%E7%BB%9F&#34;&gt;14、内核准系统&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/15.%E6%A3%80%E6%9F%A5%E7%82%B9&#34;&gt;15、检查点&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/16.%E8%A7%86%E9%A2%91%E7%AB%AF%E5%8F%A3&#34;&gt;16、视频端口&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/17.%E8%A7%86%E9%A2%91%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F&#34;&gt;17、视频驱动程序&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/18.%E8%A7%86%E9%A2%91%E6%BB%9A%E5%8A%A8&#34;&gt;18、视频滚动&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/19.%E4%B8%AD%E6%96%AD&#34;&gt;19、中断&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/20.%E4%B8%AD%E6%96%AD-irqs&#34;&gt;20、中断 - irqs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/21.%E4%B8%AD%E6%96%AD%E5%AE%9A%E6%97%B6%E5%99%A8&#34;&gt;21、中断定时器&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/22.shell&#34;&gt;22、Shell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/23.malloc&#34;&gt;23、malloc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/24.fixes&#34;&gt;24、Fixes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yanull/os-guide-cn/tree/main/25.el-capitan&#34;&gt;25、el-capitan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;有用的教程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://littleosbook.github.io/&#34;&gt;The little book about OS development&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20160412174753/http://www.jamesmolloy.co.uk/tutorial_html/index.html&#34;&gt;Roll your own toy UNIX-clone OS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.osdev.org/Expanded_Main_Page&#34;&gt;OSDev&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>