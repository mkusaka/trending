<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T02:04:18Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flipperdevices/flipperzero-firmware</title>
    <updated>2022-07-24T02:04:18Z</updated>
    <id>tag:github.com,2022-07-24:/flipperdevices/flipperzero-firmware</id>
    <link href="https://github.com/flipperdevices/flipperzero-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flipper Zero firmware source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flipper Zero Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://flipperzero.one/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740930220399525928.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://habrastorage.org/webt/eo/m0/e4/eom0e4btudte7nrhnyic-laiog0.png&#34; alt=&#34;Show me the code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://flipperzero.one/&#34;&gt;Flipper Zero&lt;/a&gt;&#39;s Firmware repo! Our goal is to create nice and clean code with good documentation, to make it a pleasure for everyone to work with.&lt;/p&gt; &#xA;&lt;h1&gt;Clone the Repository&lt;/h1&gt; &#xA;&lt;p&gt;You should clone with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone --recursive https://github.com/flipperdevices/flipperzero-firmware.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Update firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://update.flipperzero.one/&#34;&gt;Get Latest Firmware from Update Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flipper Zero&#39;s firmware consists of two components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core2 firmware set - proprietary components by ST: FUS + radio stack. FUS is flashed at factory and you should never update it.&lt;/li&gt; &#xA; &lt;li&gt;Core1 Firmware - HAL + OS + Drivers + Applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They both must be flashed in the order described.&lt;/p&gt; &#xA;&lt;h2&gt;With offline update package&lt;/h2&gt; &#xA;&lt;p&gt;With Flipper attached over USB:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./fbt --with-updater flash_usb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just building the package:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./fbt --with-updater updater_package&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To update, copy the resulting directory to Flipper&#39;s SD card and navigate to &lt;code&gt;update.fuf&lt;/code&gt; file in Archive app.&lt;/p&gt; &#xA;&lt;h2&gt;With STLink&lt;/h2&gt; &#xA;&lt;h3&gt;Core1 Firmware&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / macOS&lt;/li&gt; &#xA; &lt;li&gt;Terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&#34;&gt;arm-gcc-none-eabi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openocd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One liner: &lt;code&gt;./fbt firmware_flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;With USB DFU&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download latest &lt;a href=&#34;https://update.flipperzero.one&#34;&gt;Firmware&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reboot Flipper to Bootloader&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press and hold &lt;code&gt;← Left&lt;/code&gt; + &lt;code&gt;↩ Back&lt;/code&gt; for reset&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;↩ Back&lt;/code&gt; and keep holding &lt;code&gt;← Left&lt;/code&gt; until blue LED lights up&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;← Left&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dfu-util -D full.dfu -a 0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Build with Docker&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker Engine and Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prepare the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose exec dev ./fbt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;p&gt;If compilation fails, make sure all submodules are all initialized. Either clone with &lt;code&gt;--recursive&lt;/code&gt; or use &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build on Linux/macOS&lt;/h1&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;documentation/fbt.md&lt;/code&gt; for details on building and flashing firmware.&lt;/p&gt; &#xA;&lt;h2&gt;macOS Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt; and install all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew bundle --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;gcc-arm-none-eabi&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;toolchain=&#34;gcc-arm-none-eabi-10.3-2021.10&#34;&#xA;toolchain_package=&#34;$toolchain-$(uname -m)-linux&#34;&#xA;&#xA;wget -P /opt &#34;https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/$toolchain_package.tar.bz2&#34;&#xA;&#xA;tar xjf /opt/$toolchain_package.tar.bz2 -C /opt&#xA;rm /opt/$toolchain_package.tar.bz2&#xA;&#xA;for file in /opt/$toolchain/bin/* ; do ln -s &#34;${file}&#34; &#34;/usr/bin/$(basename ${file})&#34; ; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openocd (debugging/flashing over SWD)&lt;/li&gt; &#xA; &lt;li&gt;heatshrink (compiling image assets)&lt;/li&gt; &#xA; &lt;li&gt;clang-format (code formatting)&lt;/li&gt; &#xA; &lt;li&gt;dfu-util (flashing over USB DFU)&lt;/li&gt; &#xA; &lt;li&gt;protobuf (compiling proto sources)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to install them on Debian, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt update&#xA;apt install openocd clang-format-13 dfu-util protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;heatshrink has to be compiled &lt;a href=&#34;https://github.com/atomicobject/heatshrink&#34;&gt;from sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./fbt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;h2&gt;Flash everything&lt;/h2&gt; &#xA;&lt;p&gt;Connect your device via ST-Link and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./fbt firmware_flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://flipp.dev/discord&#34;&gt;flipp.dev/discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://flipperzero.one&#34;&gt;flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kickstarter page: &lt;a href=&#34;https://www.kickstarter.com/projects/flipper-devices/flipper-zero-tamagochi-for-hackers&#34;&gt;kickstarter.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.flipperzero.one/&#34;&gt;forum.flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Project structure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;applications&lt;/code&gt; - Applications and services used in firmware&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt; - Assets used by applications and services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;furi&lt;/code&gt; - Furi Core: os level primitives and helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; - Debug tool: GDB-plugins, SVD-file and etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt; - Docker image sources (used for firmware build automation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;documentation&lt;/code&gt; - Documentation generation system configs and input files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firmware&lt;/code&gt; - Firmware source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; - Our and 3rd party libraries, drivers and etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt; - Supplementary scripts and python libraries home&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also pay attention to &lt;code&gt;ReadMe.md&lt;/code&gt; files inside of those directories.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>barimehdi77/42-piscine-exam</title>
    <updated>2022-07-24T02:04:18Z</updated>
    <id>tag:github.com,2022-07-24:/barimehdi77/42-piscine-exam</id>
    <link href="https://github.com/barimehdi77/42-piscine-exam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo has all exercises of &#34;C Exam Alone In The Dark - Beginner&#34; sorted from level_00 to Level_05&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C Exam Alone In The Dark - Beginner&lt;/h1&gt; &#xA;&lt;p&gt;The solutions to 42&#39;s exam exercises&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 0&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_00&#34;&gt;Level_00&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 1&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_01&#34;&gt;Level_01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 2&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_02&#34;&gt;Level_02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 3&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_03&#34;&gt;Level_03&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 4&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_04&#34;&gt;Level_04&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 5&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_05&#34;&gt;Level_05&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Good luck in The exams :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/barimehdi77&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/K3K45UOA7&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/barimehdi77&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mpv-player/mpv</title>
    <updated>2022-07-24T02:04:18Z</updated>
    <id>tag:github.com,2022-07-24:/mpv-player/mpv</id>
    <link href="https://github.com/mpv-player/mpv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎥 Command line video player&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpv-player/mpv.io/master/source/images/mpv-logo-128.png&#34; alt=&#34;mpv logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mpv&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#external-links&#34;&gt;External links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#release-cycle&#34;&gt;Release cycle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mpv.io/manual/master/&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;mpv&lt;/strong&gt; is a free (as in freedom) media player for the command line. It supports a wide variety of media file formats, audio and video codecs, and subtitle types.&lt;/p&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Releases can be found on the &lt;a href=&#34;https://github.com/mpv-player/mpv/releases&#34;&gt;release list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A not too ancient Linux, Windows 7 or later, or OSX 10.8 or later.&lt;/li&gt; &#xA; &lt;li&gt;A somewhat capable CPU. Hardware decoding might help if the CPU is too slow to decode video in realtime, but must be explicitly enabled with the &lt;code&gt;--hwdec&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;A not too crappy GPU. mpv&#39;s focus is not on power-efficient playback on embedded or integrated GPUs (for example, hardware decoding is not even enabled by default). Low power GPUs may cause issues like tearing, stutter, etc. The main video output uses shaders for video rendering and scaling, rather than GPU fixed function hardware. On Windows, you might want to make sure the graphics drivers are current. In some cases, ancient fallback video output methods can help (such as &lt;code&gt;--vo=xv&lt;/code&gt; on Linux), but this use is not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;For semi-official builds and third-party packages please see &lt;a href=&#34;https://mpv.io/installation/&#34;&gt;mpv.io/installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;There is no complete changelog; however, changes to the player core interface are listed in the &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/interface-changes.rst&#34;&gt;interface changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Changes to the C API are documented in the &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/client-api-changes.rst&#34;&gt;client API changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/mpv-player/mpv/releases&#34;&gt;release list&lt;/a&gt; has a summary of most of the important changes on every release.&lt;/p&gt; &#xA;&lt;p&gt;Changes to the default key bindings are indicated in &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/etc/restore-old-bindings.conf&#34;&gt;restore-old-bindings.conf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Compiling with full features requires development files for several external libraries. One of the two build systems supported by mpv is required: &lt;a href=&#34;https://mesonbuild.com/index.html&#34;&gt;meson&lt;/a&gt; or &lt;a href=&#34;https://waf.io/&#34;&gt;waf&lt;/a&gt;. Meson can be obtained from your distro or PyPI. Waf can be downloaded by using the &lt;code&gt;./bootstrap.py&lt;/code&gt; script. It will get the latest version of waf that was tested with mpv. Some documentation about the differences between the build systems are located in &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/build-system-differences.md&#34;&gt;build-system-differences&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;p&gt;After creating your build directory (e.g. &lt;code&gt;meson build&lt;/code&gt;), you can view a list of all the build options via &lt;code&gt;meson configure build&lt;/code&gt;. You could also just simply look at the &lt;code&gt;meson_options.txt&lt;/code&gt; file. Logs are stored in &lt;code&gt;meson-logs&lt;/code&gt; within your build directory.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson build&#xA;meson compile -C build&#xA;meson install -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Waf&lt;/h3&gt; &#xA;&lt;p&gt;For a list of the available build options use &lt;code&gt;./waf configure --help&lt;/code&gt;. If you think you have support for some feature installed but configure fails to detect it, the file &lt;code&gt;build/config.log&lt;/code&gt; may contain information about the reasons for the failure.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: To avoid cluttering the output with unreadable spam, &lt;code&gt;--help&lt;/code&gt; only shows one of the two switches for each option. If the option is autodetected or enabled by default, the &lt;code&gt;--disable-***&lt;/code&gt; switch is printed; if the option is disabled by default, the &lt;code&gt;--enable-***&lt;/code&gt; switch is printed. Either way, you can use &lt;code&gt;--enable-***&lt;/code&gt; or &lt;code&gt;--disable-**&lt;/code&gt; regardless of what is printed by &lt;code&gt;--help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the software you can use &lt;code&gt;./waf build&lt;/code&gt;: the result of the compilation will be located in &lt;code&gt;build/mpv&lt;/code&gt;. You can use &lt;code&gt;./waf install&lt;/code&gt; to install mpv to the &lt;em&gt;prefix&lt;/em&gt; after it is compiled.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bootstrap.py&#xA;./waf configure&#xA;./waf&#xA;./waf install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Essential dependencies (incomplete list):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc or clang&lt;/li&gt; &#xA; &lt;li&gt;X development headers (xlib, xrandr, xext, xscrnsaver, xinerama, libvdpau, libGL, GLX, EGL, xv, ...)&lt;/li&gt; &#xA; &lt;li&gt;Audio output development headers (libasound/ALSA, pulseaudio)&lt;/li&gt; &#xA; &lt;li&gt;FFmpeg libraries (libavutil libavcodec libavformat libswscale libavfilter and either libswresample or libavresample)&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;iconv (normally provided by the system libc)&lt;/li&gt; &#xA; &lt;li&gt;libass (OSD, OSC, text subtitles)&lt;/li&gt; &#xA; &lt;li&gt;Lua (optional, required for the OSC pseudo-GUI and youtube-dl integration)&lt;/li&gt; &#xA; &lt;li&gt;libjpeg (optional, used for screenshots only)&lt;/li&gt; &#xA; &lt;li&gt;uchardet (optional, for subtitle charset detection)&lt;/li&gt; &#xA; &lt;li&gt;nvdec and vaapi libraries for hardware decoding on Linux (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libass dependencies (when building libass):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc or clang, yasm on x86 and x86_64&lt;/li&gt; &#xA; &lt;li&gt;fribidi, freetype, fontconfig development headers (for libass)&lt;/li&gt; &#xA; &lt;li&gt;harfbuzz (required for correct rendering of combining characters, particularly for correct rendering of non-English text on OSX, and Arabic/Indic scripts on any platform)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FFmpeg dependencies (when building FFmpeg):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc or clang, yasm on x86 and x86_64&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL or GnuTLS (have to be explicitly enabled when compiling FFmpeg)&lt;/li&gt; &#xA; &lt;li&gt;libx264/libmp3lame/libfdk-aac if you want to use encoding (have to be explicitly enabled when compiling FFmpeg)&lt;/li&gt; &#xA; &lt;li&gt;For native DASH playback, FFmpeg needs to be built with --enable-libxml2 (although there are security implications, and DASH support has lots of bugs).&lt;/li&gt; &#xA; &lt;li&gt;AV1 decoding support requires dav1d.&lt;/li&gt; &#xA; &lt;li&gt;For good nvidia support on Linux, make sure nv-codec-headers is installed and can be found by configure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of the above libraries are available in suitable versions on normal Linux distributions. For ease of compiling the latest git master of everything, you may wish to use the separately available build wrapper (&lt;a href=&#34;https://github.com/mpv-player/mpv-build&#34;&gt;mpv-build&lt;/a&gt;) which first compiles FFmpeg libraries and libass, and then compiles the player statically linked against those.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build a Windows binary, you either have to use MSYS2 and MinGW, or cross-compile from Linux with MinGW. See &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/compile-windows.md&#34;&gt;Windows compilation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release cycle&lt;/h2&gt; &#xA;&lt;p&gt;Every other month, an arbitrary git snapshot is made, and is assigned a 0.X.0 version number. No further maintenance is done.&lt;/p&gt; &#xA;&lt;p&gt;The goal of releases is to make Linux distributions happy. Linux distributions are also expected to apply their own patches in case of bugs and security issues.&lt;/p&gt; &#xA;&lt;p&gt;Releases other than the latest release are unsupported and unmaintained.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/release-policy.md&#34;&gt;release policy document&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Bug reports&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/mpv-player/mpv/issues&#34;&gt;issue tracker&lt;/a&gt; provided by GitHub to send us bug reports or feature requests. Follow the template&#39;s instructions or the issue will likely be ignored or closed as invalid.&lt;/p&gt; &#xA;&lt;p&gt;Using the bug tracker as place for simple questions is fine but IRC is recommended (see &lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#Contact&#34;&gt;Contact&lt;/a&gt; below).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/contribute.md&#34;&gt;contribute.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For small changes you can just send us pull requests through GitHub. For bigger changes come and talk to us on IRC before you start working on them. It will make code review easier for both parties later on.&lt;/p&gt; &#xA;&lt;p&gt;You can check &lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/Stuff-to-do&#34;&gt;the wiki&lt;/a&gt; or the &lt;a href=&#34;https://github.com/mpv-player/mpv/issues?q=is%3Aopen+is%3Aissue+label%3Ameta%3Afeature-request&#34;&gt;issue tracker&lt;/a&gt; for ideas on what you could contribute with.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv2 &#34;or later&#34; by default, LGPLv2.1 &#34;or later&#34; with &lt;code&gt;--enable-lgpl&lt;/code&gt;. See &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/Copyright&#34;&gt;details.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This software is based on the MPlayer project. Before mpv existed as a project, the code base was briefly developed under the mplayer2 project. For details, see the &lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Most activity happens on the IRC channel and the github issue tracker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub issue tracker&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mpv-player/mpv/issues&#34;&gt;issue tracker&lt;/a&gt; (report bugs here)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User IRC Channel&lt;/strong&gt;: &lt;code&gt;#mpv&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer IRC Channel&lt;/strong&gt;: &lt;code&gt;#mpv-devel&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>