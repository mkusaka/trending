<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-18T01:38:06Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>asterisk/asterisk</title>
    <updated>2025-05-18T01:38:06Z</updated>
    <id>tag:github.com,2025-05-18:/asterisk/asterisk</id>
    <link href="https://github.com/asterisk/asterisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Asterisk Project repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Asterisk(R) Open Source PBX&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;By Mark Spencer &amp;lt;markster@digium.com&amp;gt; and the Asterisk.org developer community.&#xA;Copyright (C) 2001-2025 Sangoma Technologies Corporation and other copyright holders.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SECURITY&lt;/h2&gt; &#xA;&lt;p&gt;It is imperative that you read and fully understand the contents of the security information document before you attempt to configure and run an Asterisk server.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.asterisk.org/Deployment/Important-Security-Considerations&#34;&gt;Important Security Considerations&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;WHAT IS ASTERISK ?&lt;/h2&gt; &#xA;&lt;p&gt;Asterisk is an Open Source PBX and telephony toolkit. It is, in a sense, middleware between Internet and telephony channels on the bottom, and Internet and telephony applications at the top. However, Asterisk supports more telephony interfaces than just Internet telephony. Asterisk also has a vast amount of support for traditional PSTN telephony, as well.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the project itself, please visit the &lt;a href=&#34;https://www.asterisk.org&#34;&gt;Asterisk Home Page&lt;/a&gt; and the official &lt;a href=&#34;https://docs.asterisk.org&#34;&gt;Asterisk Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SUPPORTED OPERATING SYSTEMS&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;The Asterisk Open Source PBX is developed and tested primarily on the GNU/Linux operating system, and is supported on every major GNU/Linux distribution.&lt;/p&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;Asterisk has also been &#39;ported&#39; and reportedly runs properly on other operating systems as well, Apple&#39;s Mac OS X, and the BSD variants.&lt;/p&gt; &#xA;&lt;h2&gt;GETTING STARTED&lt;/h2&gt; &#xA;&lt;p&gt;Most users are using VoIP/SIP exclusively these days but if you need to interface to TDM or analog services or devices, be sure you&#39;ve got supported hardware.&lt;/p&gt; &#xA;&lt;p&gt;Supported telephony hardware includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Analog and Digital Interface cards from Sangoma&lt;/li&gt; &#xA; &lt;li&gt;Any full duplex sound card supported by PortAudio&lt;/li&gt; &#xA; &lt;li&gt;The Xorcom Astribank channel bank&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UPGRADING FROM AN EARLIER VERSION&lt;/h3&gt; &#xA;&lt;p&gt;If you are updating from a previous version of Asterisk, make sure you read the Change Logs.&lt;/p&gt; &#xA;&lt;!-- CHANGELOGS (the URL will change based on the location of this README) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://downloads.asterisk.org/pub/telephony/asterisk&#34;&gt;Change Logs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- END-CHANGELOGS --&gt; &#xA;&lt;h3&gt;NEW INSTALLATIONS&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that your system contains a compatible compiler and development libraries. Asterisk requires either the GNU Compiler Collection (GCC) version 4.1 or higher, or a compiler that supports the C99 specification and some of the gcc language extensions. In addition, your system needs to have the C library headers available, and the headers and libraries for ncurses.&lt;/p&gt; &#xA;&lt;p&gt;There are many modules that have additional dependencies. To see what libraries are being looked for, see &lt;code&gt;./configure --help&lt;/code&gt;, or run &lt;code&gt;make menuselect&lt;/code&gt; to view the dependencies for specific modules.&lt;/p&gt; &#xA;&lt;p&gt;On many distributions, these dependencies are installed by packages with names like &#39;glibc-devel&#39;, &#39;ncurses-devel&#39;, &#39;openssl-devel&#39; and &#39;zlib-devel&#39; or similar. The &lt;code&gt;contrib/scripts/install_prereq&lt;/code&gt; script can be used to install the dependencies for most Debian and Redhat based Linux distributions. The script also handles SUSE, Arch, Gentoo, FreeBSD, NetBSD and OpenBSD but those distributions mightnoit have complete support or they might be out of date.&lt;/p&gt; &#xA;&lt;p&gt;So, let&#39;s proceed:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Read the documentation.&lt;br&gt; The &lt;a href=&#34;https://docs.asterisk.org&#34;&gt;Asterisk Documentation&lt;/a&gt; website has full information for building, installing, configuring and running Asterisk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./configure&lt;/code&gt;&lt;br&gt; Execute the configure script to guess values for system-dependent variables used during compilation. If the script indicates that some required components are missing, you can run &lt;code&gt;./contrib/scripts/install_prereq install&lt;/code&gt; to install the necessary components. Note that this will install all dependencies for every functionality of Asterisk. After running the script, you will need to rerun &lt;code&gt;./configure&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuselect&lt;/code&gt;&lt;br&gt; This is needed if you want to select the modules that will be compiled and to check dependencies for various optional modules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt;&lt;br&gt; Assuming the build completes successfully:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make install&lt;/code&gt;&lt;br&gt; If this is your first time working with Asterisk, you may wish to install the sample PBX, with demonstration extensions, etc. If so, run:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make samples&lt;/code&gt;&lt;br&gt; Doing so will overwrite any existing configuration files you have installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, you can launch Asterisk in the foreground mode (not a daemon) with &lt;code&gt;asterisk -vvvc&lt;/code&gt;&lt;br&gt; You&#39;ll see a bunch of verbose messages fly by your screen as Asterisk initializes (that&#39;s the &#34;very very verbose&#34; mode). When it&#39;s ready, if you specified the &#34;c&#34; then you&#39;ll get a command line console, that looks like this:&lt;br&gt; &lt;code&gt;*CLI&amp;gt;&lt;/code&gt;&lt;br&gt; You can type &lt;code&gt;core show help&lt;/code&gt; at any time to get help with the system. For help with a specific command, type &lt;code&gt;core show help &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;man asterisk&lt;/code&gt; at the Unix/Linux command prompt will give you detailed information on how to start and stop Asterisk, as well as all the command line options for starting Asterisk.&lt;/p&gt; &#xA;&lt;h3&gt;ABOUT CONFIGURATION FILES&lt;/h3&gt; &#xA;&lt;p&gt;All Asterisk configuration files share a common format. Comments are delimited by &lt;code&gt;;&lt;/code&gt; (since &lt;code&gt;#&lt;/code&gt; of course, being a DTMF digit, may occur in many places). A configuration file is divided into sections whose names appear in &lt;code&gt;[]&lt;/code&gt;&#39;s. Each section typically contains statements in the form &lt;code&gt;variable = value&lt;/code&gt; although you may see &lt;code&gt;variable =&amp;gt; value&lt;/code&gt; in older samples.&lt;/p&gt; &#xA;&lt;h3&gt;SPECIAL NOTE ON TIME&lt;/h3&gt; &#xA;&lt;p&gt;Those using SIP phones should be aware that Asterisk is sensitive to large jumps in time. Manually changing the system time using date(1) (or other similar commands) may cause SIP registrations and other internal processes to fail. For this reason, you should always use a time synchronization package to keep your system time accurate. All OS/distributions make one or more of the following packages available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ntpd/ntpsec&lt;/li&gt; &#xA; &lt;li&gt;chronyd&lt;/li&gt; &#xA; &lt;li&gt;systemd-timesyncd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to install and configure one (and only one) of them.&lt;/p&gt; &#xA;&lt;h3&gt;FILE DESCRIPTORS&lt;/h3&gt; &#xA;&lt;p&gt;Depending on the size of your system and your configuration, Asterisk can consume a large number of file descriptors. In UNIX, file descriptors are used for more than just files on disk. File descriptors are also used for handling network communication (e.g. SIP, IAX2, or H.323 calls) and hardware access (e.g. analog and digital trunk hardware). Asterisk accesses many on-disk files for everything from configuration information to voicemail storage.&lt;/p&gt; &#xA;&lt;p&gt;Most systems limit the number of file descriptors that Asterisk can have open at one time. This can limit the number of simultaneous calls that your system can handle. For example, if the limit is set at 1024 (a common default value) Asterisk can handle approximately 150 SIP calls simultaneously. To change the number of file descriptors follow the instructions for your system below:&lt;/p&gt; &#xA;&lt;h4&gt;PAM-BASED LINUX SYSTEM&lt;/h4&gt; &#xA;&lt;p&gt;If your system uses PAM (Pluggable Authentication Modules) edit &lt;code&gt;/etc/security/limits.conf&lt;/code&gt;. Add these lines to the bottom of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root            soft    nofile          4096&#xA;root            hard    nofile          8196&#xA;asterisk        soft    nofile          4096&#xA;asterisk        hard    nofile          8196&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(adjust the numbers to taste). You may need to reboot the system for these changes to take effect.&lt;/p&gt; &#xA;&lt;h4&gt;GENERIC UNIX SYSTEM&lt;/h4&gt; &#xA;&lt;p&gt;If there are no instructions specifically adapted to your system above you can try adding the command &lt;code&gt;ulimit -n 8192&lt;/code&gt; to the script that starts Asterisk.&lt;/p&gt; &#xA;&lt;h2&gt;MORE INFORMATION&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.asterisk.org&#34;&gt;Asterisk Documentation&lt;/a&gt; website for more documentation on various features and please read all the configuration samples that include documentation on the configuration options.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you may wish to join the &lt;a href=&#34;https://community.asterisk.org&#34;&gt;Asterisk Community Forums&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the growing worldwide community of Asterisk users!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Mark Spencer, and the Asterisk.org development community&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Asterisk is a trademark of Sangoma Technologies Corporation&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://www.sangoma.com/&#34;&gt;Sangoma&lt;/a&gt;] [&lt;a href=&#34;https://www.asterisk.org&#34;&gt;Home Page&lt;/a&gt;] [&lt;a href=&#34;https://www.asterisk.org/support&#34;&gt;Support&lt;/a&gt;] [&lt;a href=&#34;https://docs.asterisk.org&#34;&gt;Documentation&lt;/a&gt;] [&lt;a href=&#34;https://community.asterisk.org&#34;&gt;Community Forums&lt;/a&gt;] [&lt;a href=&#34;https://github.com/asterisk/asterisk/releases&#34;&gt;Release Notes&lt;/a&gt;] [&lt;a href=&#34;https://docs.asterisk.org/Deployment/Important-Security-Considerations/&#34;&gt;Security&lt;/a&gt;] [&lt;a href=&#34;https://lists.digium.com&#34;&gt;Mailing List Archive&lt;/a&gt;]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BandarHL/BHTwitter</title>
    <updated>2025-05-18T01:38:06Z</updated>
    <id>tag:github.com,2025-05-18:/BandarHL/BHTwitter</id>
    <link href="https://github.com/BandarHL/BHTwitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Awesome tweak for Twitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BHTwitter&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Awesome tweak for Twitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Videos (even if account private).&lt;/li&gt; &#xA; &lt;li&gt;Custom Tab Bar&lt;/li&gt; &#xA; &lt;li&gt;No history feature.&lt;/li&gt; &#xA; &lt;li&gt;Hide topics tweet feature.&lt;/li&gt; &#xA; &lt;li&gt;Disable video layer caption.&lt;/li&gt; &#xA; &lt;li&gt;Padlock.&lt;/li&gt; &#xA; &lt;li&gt;Font changer.&lt;/li&gt; &#xA; &lt;li&gt;Enable the new UI of DM search.&lt;/li&gt; &#xA; &lt;li&gt;Auto load photos in highest quality feature.&lt;/li&gt; &#xA; &lt;li&gt;Undo tweet feature.&lt;/li&gt; &#xA; &lt;li&gt;Theme (like Twitter Blue).&lt;/li&gt; &#xA; &lt;li&gt;App icon changer&lt;/li&gt; &#xA; &lt;li&gt;Twitter Circle feature.&lt;/li&gt; &#xA; &lt;li&gt;Copying profile information feature.&lt;/li&gt; &#xA; &lt;li&gt;Save tweet as an image.&lt;/li&gt; &#xA; &lt;li&gt;Hide spaces bar.&lt;/li&gt; &#xA; &lt;li&gt;Disable RTL.&lt;/li&gt; &#xA; &lt;li&gt;Always open in Safari.&lt;/li&gt; &#xA; &lt;li&gt;Translate bio.&lt;/li&gt; &#xA; &lt;li&gt;Disable new tweet style (A.K.A edge to edge tweet)&lt;/li&gt; &#xA; &lt;li&gt;Enable voice tweet and voice message in DM.&lt;/li&gt; &#xA; &lt;li&gt;Hide promoted tweet from the timeline.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit the tweet button.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit like button.&lt;/li&gt; &#xA; &lt;li&gt;Confirm alert when hit follow button.&lt;/li&gt; &#xA; &lt;li&gt;FLEX for debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/1.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/2.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/3.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1604&#34; alt=&#34;screen shot 2017-08-07 at 12 18 15 pm&#34; src=&#34;https://raw.githubusercontent.com/BandarHL/BHTwitter/master/4.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;How to build the project&lt;/h1&gt; &#xA;&lt;h2&gt;Local&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;install &lt;a href=&#34;https://github.com/theos/theos&#34;&gt;Theos&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install &lt;a href=&#34;https://github.com/asdfzxcvbn/pyzule-rw&#34;&gt;cyan&lt;/a&gt; if you want to build for sideload or TrollStore&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the BHTwitter project repository:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/BandarHL/BHTwitter&#xA;cd BHTwitter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make the script executable:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the script with the desired options:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh [OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace [OPTIONS] with one of the following:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;--sideloaded: Build BHTwitter project for sideloaded deployment.&#xA;--rootless: Build BHTwitter project for rootless deployment.&#xA;--trollstore: Build BHTwitter project for TrollStore deployment.&#xA;No option: Build BHTwitter project for rootfull deployment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using GitHub Actions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repository.&lt;/li&gt; &#xA; &lt;li&gt;Open &#34;Actions&#34; tab on your fork, and press &#34;I understand my workflows, go ahead and enable them&#34; to proceed.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Build and Release BHTwitter&#34; workflow.&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Run workflow&#34; menu, and enter parameters in the popup that appears. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Don&#39;t forget to choose deployment format (&lt;code&gt;rootfull&lt;/code&gt;, &lt;code&gt;rootless&lt;/code&gt;, &lt;code&gt;sideloaded&lt;/code&gt;, &lt;code&gt;trollstore&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;For &lt;code&gt;sideloaded&lt;/code&gt; and &lt;code&gt;trollstore&lt;/code&gt; builds, a valid URL of decrypted IPA is required. For &lt;code&gt;rootfull&lt;/code&gt; and &lt;code&gt;rootless&lt;/code&gt; builds, enter any value (it won&#39;t be used).&lt;/li&gt; &#xA;   &lt;li&gt;For other parameters, defaults are usually sufficient.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Run workflow&#34; button, and after a while you should see build artifacts on &#34;Releases&#34; page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example Usages&lt;/h1&gt; &#xA;&lt;h2&gt;Build for Sideloaded Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download an IPA file for X or Twitter from AppDB or decrypt it by your self.&lt;/li&gt; &#xA; &lt;li&gt;Then rename the IPA file to &lt;code&gt;com.atebits.Tweetie2.ipa&lt;/code&gt; and move it to &lt;code&gt;packages&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh --sideloaded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the build we&#39;ll find &lt;code&gt;BHTwitter-sideloaded.ipa&lt;/code&gt; inside &lt;code&gt;packages&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build for TrollStore Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download an IPA file for X or Twitter from AppDB or decrypt it by your self.&lt;/li&gt; &#xA; &lt;li&gt;Then rename the IPA file to &lt;code&gt;com.atebits.Tweetie2.ipa&lt;/code&gt; and move it to &lt;code&gt;packages&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh --trollstore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the build we&#39;ll find &lt;code&gt;BHTwitter-trollstore.tipa&lt;/code&gt; inside &lt;code&gt;packages&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build for Rootless Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just run the build command with rootless flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh --rootless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the build we&#39;ll find &lt;code&gt;com.bandarhl.bhtwitter_4.2_iphoneos-arm64.deb&lt;/code&gt; inside &lt;code&gt;packages&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build for Rootfull Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just run the build command without any flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the build we&#39;ll find &lt;code&gt;com.bandarhl.bhtwitter_4.2_iphoneos-arm.deb&lt;/code&gt; inside &lt;code&gt;packages&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sqlcipher/sqlcipher</title>
    <updated>2025-05-18T01:38:06Z</updated>
    <id>tag:github.com,2025-05-18:/sqlcipher/sqlcipher</id>
    <link href="https://github.com/sqlcipher/sqlcipher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQLCipher is a standalone fork of SQLite that adds 256 bit AES encryption of database files and other security features.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;SQLCipher&lt;/h2&gt; &#xA;&lt;p&gt;SQLCipher is a standalone fork of the &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; database library that adds 256 bit AES encryption of database files and other security features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on-the-fly encryption&lt;/li&gt; &#xA; &lt;li&gt;tamper detection&lt;/li&gt; &#xA; &lt;li&gt;memory sanitization&lt;/li&gt; &#xA; &lt;li&gt;strong key derivation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SQLCipher is based on SQLite and stable upstream release features are periodically integrated. While SQLCipher is maintained as a separate version of the source tree, the project minimizes alterations to core SQLite code whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;SQLCipher is maintained by Zetetic, LLC, and additional information and documentation is available on the official &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast performance with as little as 5-15% overhead for encryption on many operations&lt;/li&gt; &#xA; &lt;li&gt;100% of data in the database file is encrypted&lt;/li&gt; &#xA; &lt;li&gt;Good security practices (CBC mode, HMAC, key derivation)&lt;/li&gt; &#xA; &lt;li&gt;Zero-configuration and application level cryptography&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple cryptographic providers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;SQLCipher maintains database format compatibility within the same major version number so an application on any platform can open databases created by any other application provided the major version of SQLCipher is the same between them. However, major version updates (e.g. from 3.x to 4.x) often include changes to default settings. This means that newer major versions of SQLCipher will not open databases created by older versions without using special settings. For example, SQLCipher 4 introduces many new performance and security enhancements. The new default algorithms, increased KDF iterations, and larger page size mean that SQLCipher 4 will not open databases created by SQLCipher 1.x, 2.x, or 3.x by default. Instead, an application would either need to migrate the older databases to use the new format or enable a special backwards-compatibility mode. The available options are described in SQLCipher&#39;s &lt;a href=&#34;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&#34;&gt;upgrade documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SQLCipher is also compatible with standard SQLite databases. When a key is not provided, SQLCipher will behave just like the standard SQLite library. It is also possible to convert from a plaintext database (standard SQLite) to an encrypted SQLCipher database using &lt;a href=&#34;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868&#34;&gt;ATTACH and the sqlcipher_export() convenience function&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;The SQLCipher team welcomes contributions to the core library. All contributions including pull requests and patches should be based on the &lt;code&gt;prerelease&lt;/code&gt; branch, and must be accompanied by a &lt;a href=&#34;https://www.zetetic.net/contributions/&#34;&gt;contributor agreement&lt;/a&gt;. We strongly encourage &lt;a href=&#34;https://discuss.zetetic.net/c/sqlcipher&#34;&gt;discussion&lt;/a&gt; of the proposed change prior to development and submission.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Building SQLCipher is similar to compiling a regular version of SQLite from source, with a few small exceptions. You must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;define &lt;code&gt;SQLITE_HAS_CODEC&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;define &lt;code&gt;SQLITE_TEMP_STORE=2&lt;/code&gt; or &lt;code&gt;SQLITE_TEMP_STORE=3&lt;/code&gt; (or use &lt;code&gt;configure&lt;/code&gt;&#39;s --with-tempstore=yes option)&lt;/li&gt; &#xA; &lt;li&gt;define &lt;code&gt;SQLITE_EXTRA_INIT=sqlcipher_extra_init&lt;/code&gt; and &lt;code&gt;SQLITE_EXTRA_SHUTDOWN=sqlcipher_extra_shutdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;define &lt;code&gt;SQLITE_THREADSAFE&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; (enabled automatically by &lt;code&gt;configure&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;compile and link with a supported cryptographic provider (OpenSSL, LibTomCrypt, CommonCrypto/Security.framework, or NSS)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following examples demonstrate use of OpenSSL, which is a readily available provider on most Unix-like systems. Note that, in this example, &lt;code&gt;--with-tempstore=yes&lt;/code&gt; is setting &lt;code&gt;SQLITE_TEMP_STORE=2&lt;/code&gt; for the build, and &lt;code&gt;SQLITE_THREADSAFE&lt;/code&gt; has a default value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --with-tempstore=yes CFLAGS=&#34;-DSQLITE_HAS_CODEC -DSQLITE_EXTRA_INIT=sqlcipher_extra_init -DSQLITE_EXTRA_SHUTDOWN=sqlcipher_extra_shutdown&#34; \&#xA;&#x9;LDFLAGS=&#34;-lcrypto&#34;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The full SQLite test suite will not complete successfully when using SQLCipher. In some cases encryption interferes with low-level tests that require access to database file data or features which are unsupported by SQLCipher. Those tests that are intended to support encryption are intended for non-SQLCipher implementations. In addition, because SQLite tests are not always isolated, if one test fails it can trigger a domino effect with other failures in later steps.&lt;/p&gt; &#xA;&lt;p&gt;As a result, the SQLCipher package includes it&#39;s own independent tests that exercise and verify the core functionality of the SQLCipher extensions. This test suite is intended to provide an abbreviated verification of SQLCipher&#39;s internal logic; it does not perform an exhaustive test of the SQLite database system as a whole or verify functionality on specific platforms. Because SQLCipher is based on stable upstream builds of SQLite, it is considered a basic assumption that the core SQLite library code is operating properly (the SQLite core is almost untouched in SQLCipher). Thus, the additional SQLCipher-specific test provide the requisite verification that the library is operating as expected with SQLCipher&#39;s security features enabled.&lt;/p&gt; &#xA;&lt;p&gt;To run SQLCipher specific tests, configure as described here and run the following to execute the tests and receive a report of the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --with-tempstore=yes --enable-fts5 CFLAGS=&#34;-DSQLITE_HAS_CODEC -DSQLITE_EXTRA_INIT=sqlcipher_extra_init -DSQLITE_EXTRA_SHUTDOWN=sqlcipher_extra_shutdown -DSQLCIPHER_TEST&#34; \&#xA;&#x9;LDFLAGS=&#34;-lcrypto&#34;&#xA;$ make testfixture&#xA;$ ./testfixture test/sqlcipher.test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encrypting a database&lt;/h2&gt; &#xA;&lt;p&gt;To specify an encryption passphrase for the database via the SQL interface you use a PRAGMA. The passphrase you enter is passed through PBKDF2 key derivation to obtain the encryption key for the database&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA key = &#39;passphrase&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, you can specify an exact byte sequence using a blob literal. If you use this method it is your responsibility to ensure that the data you provide is a 64 character hex string, which will be converted directly to 32 bytes (256 bits) of key data without key derivation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA key = &#34;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To encrypt a database programmatically you can use the &lt;code&gt;sqlite3_key&lt;/code&gt; function. The data provided in &lt;code&gt;pKey&lt;/code&gt; is converted to an encryption key according to the same rules as &lt;code&gt;PRAGMA key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;int sqlite3_key(sqlite3 *db, const void *pKey, int nKey);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PRAGMA key&lt;/code&gt; or &lt;code&gt;sqlite3_key&lt;/code&gt; should be called as the first operation when a database is open.&lt;/p&gt; &#xA;&lt;h2&gt;Changing a database key&lt;/h2&gt; &#xA;&lt;p&gt;To change the encryption passphrase for an existing database you may use the rekey PRAGMA after you&#39;ve supplied the correct database password;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA key = &#39;passphrase&#39;; -- start with the existing database passphrase&#xA;PRAGMA rekey = &#39;new-passphrase&#39;; -- rekey will reencrypt with the new passphrase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The hex rekey pragma may be used to rekey to a specific binary value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA rekey = &#34;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be accomplished programmatically by using sqlite3_rekey;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite3_rekey(sqlite3 *db, const void *pKey, int nKey)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The primary source for complete documentation (design, API, platforms, usage) is the SQLCipher website:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/documentation&#34;&gt;https://www.zetetic.net/sqlcipher/documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The primary avenue for support and discussions is the SQLCipher discuss site:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discuss.zetetic.net/c/sqlcipher&#34;&gt;https://discuss.zetetic.net/c/sqlcipher&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issues or support questions on using SQLCipher should be entered into the GitHub Issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sqlcipher/sqlcipher/issues&#34;&gt;https://github.com/sqlcipher/sqlcipher/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please DO NOT post issues, support questions, or other problems to blog posts about SQLCipher as we do not monitor them frequently.&lt;/p&gt; &#xA;&lt;p&gt;If you are using SQLCipher in your own software please let us know at &lt;a href=&#34;mailto:support@zetetic.net&#34;&gt;support@zetetic.net&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Community Edition Open Source License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2025, ZETETIC LLC All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the ZETETIC LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY ZETETIC LLC &#39;&#39;AS IS&#39;&#39; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;h1&gt;Begin SQLite README.md&lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;SQLite Source Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the complete source code for the &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite database engine&lt;/a&gt;, including many test scripts. However, other test scripts and most of the documentation are managed separately.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://sqlite.org/&#34;&gt;on-line documentation&lt;/a&gt; for more information about what SQLite is and how it works from a user&#39;s perspective. This README file is about the source code that goes into building SQLite, not about how SQLite is used.&lt;/p&gt; &#xA;&lt;h2&gt;Version Control&lt;/h2&gt; &#xA;&lt;p&gt;SQLite sources are managed using &lt;a href=&#34;https://fossil-scm.org/&#34;&gt;Fossil&lt;/a&gt;, a distributed version control system that was specifically designed and written to support SQLite development. The &lt;a href=&#34;https://sqlite.org/src/timeline&#34;&gt;Fossil repository&lt;/a&gt; contains the urtext.&lt;/p&gt; &#xA;&lt;p&gt;If you are reading this on GitHub or some other Git repository or service, then you are looking at a mirror. The names of check-ins and other artifacts in a Git mirror are different from the official names for those objects. The official names for check-ins are found in a footer on the check-in comment for authorized mirrors. The official check-in name can also be seen in the &lt;code&gt;manifest.uuid&lt;/code&gt; file in the root of the tree. Always use the official name, not the Git-name, when communicating about an SQLite check-in.&lt;/p&gt; &#xA;&lt;p&gt;If you pulled your SQLite source code from a secondary source and want to verify its integrity, there are hints on how to do that in the &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/#vauth&#34;&gt;Verifying Code Authenticity&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Contacting The SQLite Developers&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to ask questions or make comments about SQLite or to report bugs against SQLite is to visit the &lt;a href=&#34;https://sqlite.org/forum&#34;&gt;SQLite Forum&lt;/a&gt; at &lt;a href=&#34;https://sqlite.org/forum/&#34;&gt;https://sqlite.org/forum/&lt;/a&gt;. Anonymous postings are permitted.&lt;/p&gt; &#xA;&lt;p&gt;If you think you have found a bug that has security implications and you do not want to report it on the public forum, you can send a private email to drh at sqlite dot org.&lt;/p&gt; &#xA;&lt;h2&gt;Public Domain&lt;/h2&gt; &#xA;&lt;p&gt;The SQLite source code is in the public domain. See &lt;a href=&#34;https://sqlite.org/copyright.html&#34;&gt;https://sqlite.org/copyright.html&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Because SQLite is in the public domain, we do not normally accept pull requests, because if we did take a pull request, the changes in that pull request might carry a copyright and the SQLite source code would then no longer be fully in the public domain.&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining The SQLite Source Code&lt;/h2&gt; &#xA;&lt;p&gt;If you do not want to use Fossil, you can download tarballs or ZIP archives or &lt;a href=&#34;https://sqlite.org/cli.html#sqlar&#34;&gt;SQLite archives&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest trunk check-in as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest release as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz?r=release&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip?r=release&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar?r=release&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For other check-ins, substitute an appropriate branch name or tag or hash prefix in place of &#34;release&#34; in the URLs of the previous bullet. Or browse the &lt;a href=&#34;https://www.sqlite.org/src/timeline&#34;&gt;timeline&lt;/a&gt; to locate the check-in desired, click on its information page link, then click on the &#34;Tarball&#34; or &#34;ZIP Archive&#34; links on the information page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To access sources directly using &lt;a href=&#34;https://fossil-scm.org/home&#34;&gt;Fossil&lt;/a&gt;, first install Fossil version 2.0 or later. Source tarballs and precompiled binaries available at &lt;a href=&#34;https://fossil-scm.org/home/uv/download.html&#34;&gt;https://fossil-scm.org/home/uv/download.html&lt;/a&gt;. Fossil is a stand-alone program. To install, simply download or build the single executable file and put that file someplace on your $PATH. Then run commands like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mkdir -p ~/sqlite&#xA;    cd ~/sqlite&#xA;    fossil open https://sqlite.org/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;fossil open&#34; command will take two or three minutes. Afterwards, you can do fast, bandwidth-efficient updates to the whatever versions of SQLite you like. Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    fossil update trunk             ;# latest trunk check-in&#xA;    fossil update release           ;# latest official release&#xA;    fossil update trunk:2024-01-01  ;# First trunk check-in after 2024-01-01&#xA;    fossil update version-3.39.0    ;# Version 3.39.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or type &#34;fossil ui&#34; to get a web-based user interface.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling for Unix-like systems&lt;/h2&gt; &#xA;&lt;p&gt;First create a directory in which to place the build products. It is recommended, but not required, that the build directory be separate from the source directory. Cd into the build directory and then from the build directory run the configure script found at the root of the source tree. Then run &#34;make&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    apt install gcc make tcl-dev  ;#  Make sure you have all the necessary build tools&#xA;    tar xzf sqlite.tar.gz         ;#  Unpack the source tree into &#34;sqlite&#34;&#xA;    mkdir bld                     ;#  Build will occur in a sibling directory&#xA;    cd bld                        ;#  Change to the build directory&#xA;    ../sqlite/configure           ;#  Run the configure script&#xA;    make sqlite3                  ;#  Builds the &#34;sqlite3&#34; command-line tool&#xA;    make sqlite3.c                ;#  Build the &#34;amalgamation&#34; source file&#xA;    make sqldiff                  ;#  Builds the &#34;sqldiff&#34; command-line tool&#xA;    # Makefile targets below this point require tcl-dev&#xA;    make tclextension-install     ;#  Build and install the SQLite TCL extension&#xA;    make devtest                  ;#  Run development tests&#xA;    make releasetest              ;#  Run full release tests&#xA;    make sqlite3_analyzer         ;#  Builds the &#34;sqlite3_analyzer&#34; tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the makefile for additional targets. For debugging builds, the core developers typically run &#34;configure&#34; with options like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ../sqlite/configure --enable-all --enable-debug CFLAGS=&#39;-O0 -g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For release builds, the core developers usually do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ../sqlite/configure --enable-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Almost all makefile targets require a &#34;tclsh&#34; TCL interpreter version 8.6 or later. The &#34;tclextension-install&#34; target and the test targets that follow all require TCL development libraries too. (&#34;apt install tcl-dev&#34;). It is helpful, but is not required, to install the SQLite TCL extension (the &#34;tclextension-install&#34; target) prior to running tests. The &#34;releasetest&#34; target has additional requiremenst, such as &#34;valgrind&#34;.&lt;/p&gt; &#xA;&lt;p&gt;On &#34;make&#34; command-lines, one can add &#34;OPTIONS=...&#34; to specify additional compile-time options over and above those set by ./configure. For example, to compile with the SQLITE_OMIT_DEPRECATED compile-time option, one could say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ./configure --enable-all&#xA;    make OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configure script uses autoconf 2.61 and libtool. If the configure script does not work out for you, there is a generic makefile named &#34;Makefile.linux-gcc&#34; in the top directory of the source tree that you can copy and edit to suit your needs. Comments on the generic makefile show what changes are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling for Windows Using MSVC&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, everything can be compiled with MSVC. You will also need a working installation of TCL. See the &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/doc/compile-for-windows.md&#34;&gt;compile-for-windows.md&lt;/a&gt; document for additional information about how to install MSVC and TCL and configure your build environment.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run tests, you need to let SQLite know the location of your TCL library, using a command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    set TCLDIR=c:\Tcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite uses &#34;tclsh.exe&#34; as part of the build process, and so that program will need to be somewhere on your %PATH%. SQLite itself does not contain any TCL code, but it does use TCL to help with the build process and to run tests. You may need to install TCL development libraries in order to successfully complete some makefile targets. It is helpful, but is not required, to install the SQLite TCL extension (the &#34;tclextension-install&#34; target) prior to running tests.&lt;/p&gt; &#xA;&lt;p&gt;Build using Makefile.msc. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    nmake /f Makefile.msc sqlite3.exe&#xA;    nmake /f Makefile.msc sqlite3.c&#xA;    nmake /f Makefile.msc sqldiff.exe&#xA;    # Makefile targets below this point require TCL development libraries&#xA;    nmake /f Makefile.msc tclextension-install&#xA;    nmake /f Makefile.msc devtest&#xA;    nmake /f Makefile.msc releasetest&#xA;    nmake /f Makefile.msc sqlite3_analyzer.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many other makefile targets. See comments in Makefile.msc for details.&lt;/p&gt; &#xA;&lt;p&gt;As with the unix Makefile, the OPTIONS=... argument can be passed on the nmake command-line to enable new compile-time options. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    nmake /f Makefile.msc OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source Tree Map&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;src/&lt;/strong&gt; - This directory contains the primary source code for the SQLite core. For historical reasons, C-code used for testing is also found here. Source files intended for testing begin with &#34;&lt;code&gt;test&lt;/code&gt;&#34;. The &lt;code&gt;tclsqlite3.c&lt;/code&gt; and &lt;code&gt;tclsqlite3.h&lt;/code&gt; files are the TCL interface for SQLite and are also not part of the core.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;test/&lt;/strong&gt; - This directory and its subdirectories contains code used for testing. Files that end in &#34;&lt;code&gt;.test&lt;/code&gt;&#34; are TCL scripts that run tests using an augmented TCL interpreter named &#34;testfixture&#34;. Use a command like &#34;&lt;code&gt;make testfixture&lt;/code&gt;&#34; (unix) or &#34;&lt;code&gt;nmake /f Makefile.msc testfixture.exe&lt;/code&gt;&#34; (windows) to build that augmented TCL interpreter, then run individual tests using commands like &#34;&lt;code&gt;testfixture test/main.test&lt;/code&gt;&#34;. This test/ subdirectory also contains additional C code modules and scripts for other kinds of testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tool/&lt;/strong&gt; - This directory contains programs and scripts used to build some of the machine-generated code that goes into the SQLite core, as well as to build and run tests and perform diagnostics. The source code to &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/doc/lemon.html&#34;&gt;the Lemon parser generator&lt;/a&gt; is found here. There are also TCL scripts used to build and/or transform source code files. For example, the tool/mksqlite3h.tcl script reads the src/sqlite.h.in file and uses it as a template to construct the deliverable &#34;sqlite3.h&#34; file that defines the SQLite interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ext/&lt;/strong&gt; - Various extensions to SQLite are found under this directory. For example, the FTS5 subsystem is in &#34;ext/fts5/&#34;. Some of these extensions (ex: FTS3/4, FTS5, RTREE) might get built into the SQLite amalgamation, but not all of them. The &#34;ext/misc/&#34; subdirectory contains an assortment of one-file extensions, many of which are omitted from the SQLite core, but which are included in the &lt;a href=&#34;https://sqlite.org/cli.html&#34;&gt;SQLite CLI&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;doc/&lt;/strong&gt; - Some documentation files about SQLite internals are found here. Note, however, that the primary documentation designed for application developers and users of SQLite is in a completely separate repository. Note also that the primary API documentation is derived from specially constructed comments in the src/sqlite.h.in file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generated Source Code Files&lt;/h3&gt; &#xA;&lt;p&gt;Several of the C-language source files used by SQLite are generated from other sources rather than being typed in manually by a programmer. This section will summarize those automatically-generated files. To create all of the automatically-generated files, simply run &#34;make target_source&#34;. The &#34;target_source&#34; make target will create a subdirectory &#34;tsrc/&#34; and fill it with all the source files needed to build SQLite, both manually-edited files and automatically-generated files.&lt;/p&gt; &#xA;&lt;p&gt;The SQLite interface is defined by the &lt;strong&gt;sqlite3.h&lt;/strong&gt; header file, which is generated from src/sqlite.h.in, ./manifest.uuid, and ./VERSION. The &lt;a href=&#34;https://www.tcl.tk&#34;&gt;Tcl script&lt;/a&gt; at tool/mksqlite3h.tcl does the conversion. The manifest.uuid file contains the SHA3 hash of the particular check-in and is used to generate the SQLITE_SOURCE_ID macro. The VERSION file contains the current SQLite version number. The sqlite3.h header is really just a copy of src/sqlite.h.in with the source-id and version number inserted at just the right spots. Note that comment text in the sqlite3.h file is used to generate much of the SQLite API documentation. The Tcl scripts used to generate that documentation are in a separate source repository.&lt;/p&gt; &#xA;&lt;p&gt;The SQL language parser is &lt;strong&gt;parse.c&lt;/strong&gt; which is generated from a grammar in the src/parse.y file. The conversion of &#34;parse.y&#34; into &#34;parse.c&#34; is done by the &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/doc/lemon.html&#34;&gt;lemon&lt;/a&gt; LALR(1) parser generator. The source code for lemon is at tool/lemon.c. Lemon uses the tool/lempar.c file as a template for generating its parser. Lemon also generates the &lt;strong&gt;parse.h&lt;/strong&gt; header file, at the same time it generates parse.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;opcodes.h&lt;/strong&gt; header file contains macros that define the numbers corresponding to opcodes in the &#34;VDBE&#34; virtual machine. The opcodes.h file is generated by scanning the src/vdbe.c source file. The Tcl script at ./mkopcodeh.tcl does this scan and generates opcodes.h. A second Tcl script, ./mkopcodec.tcl, then scans opcodes.h to generate the &lt;strong&gt;opcodes.c&lt;/strong&gt; source file, which contains a reverse mapping from opcode-number to opcode-name that is used for EXPLAIN output.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;keywordhash.h&lt;/strong&gt; header file contains the definition of a hash table that maps SQL language keywords (ex: &#34;CREATE&#34;, &#34;SELECT&#34;, &#34;INDEX&#34;, etc.) into the numeric codes used by the parse.c parser. The keywordhash.h file is generated by a C-language program at tool mkkeywordhash.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;pragma.h&lt;/strong&gt; header file contains various definitions used to parse and implement the PRAGMA statements. The header is generated by a script &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt;. If you want to add a new PRAGMA, edit the &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt; file to insert the information needed by the parser for your new PRAGMA, then run the script to regenerate the &lt;strong&gt;pragma.h&lt;/strong&gt; header file.&lt;/p&gt; &#xA;&lt;h3&gt;The Amalgamation&lt;/h3&gt; &#xA;&lt;p&gt;All of the individual C source code and header files (both manually-edited and automatically-generated) can be combined into a single big source file &lt;strong&gt;sqlite3.c&lt;/strong&gt; called &#34;the amalgamation&#34;. The amalgamation is the recommended way of using SQLite in a larger application. Combining all individual source code files into a single big source code file allows the C compiler to perform more cross-procedure analysis and generate better code. SQLite runs about 5% faster when compiled from the amalgamation versus when compiled from individual source files.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation is generated from the tool/mksqlite3c.tcl Tcl script. First, all of the individual source files must be gathered into the tsrc/ subdirectory (using the equivalent of &#34;make target_source&#34;) then the tool/mksqlite3c.tcl script is run to copy them all together in just the right order while resolving internal &#34;#include&#34; references.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation source file is more than 200K lines long. Some symbolic debuggers (most notably MSVC) are unable to deal with files longer than 64K lines. To work around this, a separate Tcl script, tool/split-sqlite3c.tcl, can be run on the amalgamation to break it up into a single small C file called &lt;strong&gt;sqlite3-all.c&lt;/strong&gt; that does #include on about seven other files named &lt;strong&gt;sqlite3-1.c&lt;/strong&gt;, &lt;strong&gt;sqlite3-2.c&lt;/strong&gt;, ..., &lt;strong&gt;sqlite3-7.c&lt;/strong&gt;. In this way, all of the source code is contained within a single translation unit so that the compiler can do extra cross-procedure optimization, but no individual source file exceeds 32K lines in length.&lt;/p&gt; &#xA;&lt;h2&gt;How It All Fits Together&lt;/h2&gt; &#xA;&lt;p&gt;SQLite is modular in design. See the &lt;a href=&#34;https://www.sqlite.org/arch.html&#34;&gt;architectural description&lt;/a&gt; for details. Other documents that are useful in helping to understand how SQLite works include the &lt;a href=&#34;https://www.sqlite.org/fileformat2.html&#34;&gt;file format&lt;/a&gt; description, the &lt;a href=&#34;https://www.sqlite.org/opcode.html&#34;&gt;virtual machine&lt;/a&gt; that runs prepared statements, the description of &lt;a href=&#34;https://www.sqlite.org/atomiccommit.html&#34;&gt;how transactions work&lt;/a&gt;, and the &lt;a href=&#34;https://www.sqlite.org/optoverview.html&#34;&gt;overview of the query planner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Decades of effort have gone into optimizing SQLite, both for small size and high performance. And optimizations tend to result in complex code. So there is a lot of complexity in the current SQLite implementation. It will not be the easiest library in the world to hack.&lt;/p&gt; &#xA;&lt;h3&gt;Key source code files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqlite.h.in&lt;/strong&gt; - This file defines the public interface to the SQLite library. Readers will need to be familiar with this interface before trying to understand how the library works internally. This file is really a template that is transformed into the &#34;sqlite3.h&#34; deliverable using a script invoked by the makefile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqliteInt.h&lt;/strong&gt; - this header file defines many of the data objects used internally by SQLite. In addition to &#34;sqliteInt.h&#34;, some subsystems inside of sQLite have their own header files. These internal interfaces are not for use by applications. They can and do change from one release of SQLite to the next.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;parse.y&lt;/strong&gt; - This file describes the LALR(1) grammar that SQLite uses to parse SQL statements, and the actions that are taken at each step in the parsing process. The file is processed by the &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/doc/lemon.html&#34;&gt;Lemon Parser Generator&lt;/a&gt; to produce the actual C code used for parsing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;vdbe.c&lt;/strong&gt; - This file implements the virtual machine that runs prepared statements. There are various helper files whose names begin with &#34;vdbe&#34;. The VDBE has access to the vdbeInt.h header file which defines internal data objects. The rest of SQLite interacts with the VDBE through an interface defined by vdbe.h.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;where.c&lt;/strong&gt; - This file (together with its helper files named by &#34;where*.c&#34;) analyzes the WHERE clause and generates virtual machine code to run queries efficiently. This file is sometimes called the &#34;query optimizer&#34;. It has its own private header file, whereInt.h, that defines data objects used internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;btree.c&lt;/strong&gt; - This file contains the implementation of the B-Tree storage engine used by SQLite. The interface to the rest of the system is defined by &#34;btree.h&#34;. The &#34;btreeInt.h&#34; header defines objects used internally by btree.c and not published to the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pager.c&lt;/strong&gt; - This file contains the &#34;pager&#34; implementation, the module that implements transactions. The &#34;pager.h&#34; header file defines the interface between pager.c and the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;os_unix.c&lt;/strong&gt; and &lt;strong&gt;os_win.c&lt;/strong&gt; - These two files implement the interface between SQLite and the underlying operating system using the run-time pluggable VFS interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;shell.c.in&lt;/strong&gt; - This file is not part of the core SQLite library. This is the file that, when linked against sqlite3.a, generates the &#34;sqlite3.exe&#34; command-line shell. The &#34;shell.c.in&#34; file is transformed into &#34;shell.c&#34; as part of the build process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tclsqlite.c&lt;/strong&gt; - This file implements the Tcl bindings for SQLite. It is not part of the core SQLite library. But as most of the tests in this repository are written in Tcl, the Tcl language bindings are important.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;test*.c&lt;/strong&gt; - Files in the src/ folder that begin with &#34;test&#34; go into building the &#34;testfixture.exe&#34; program. The testfixture.exe program is an enhanced Tcl shell. The testfixture.exe program runs scripts in the test/ folder to validate the core SQLite code. The testfixture program (and some other test programs too) is built and run when you type &#34;make test&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;VERSION&lt;/strong&gt;, &lt;strong&gt;manifest&lt;/strong&gt;, and &lt;strong&gt;manifest.uuid&lt;/strong&gt; - These files define the current SQLite version number. The &#34;VERSION&#34; file is human generated, but the &#34;manifest&#34; and &#34;manifest.uuid&#34; files are automatically generated by the &lt;a href=&#34;https://fossil-scm.org/&#34;&gt;Fossil version control system&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many other source files. Each has a succinct header comment that describes its purpose and role within the larger system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;vauth&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying Code Authenticity&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;manifest&lt;/code&gt; file at the root directory of the source tree contains either a SHA3-256 hash or a SHA1 hash for every source file in the repository. The name of the version of the entire source tree is just the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file itself, possibly with the last line of that file omitted if the last line begins with &#34;&lt;code&gt;# Remove this line&lt;/code&gt;&#34;. The &lt;code&gt;manifest.uuid&lt;/code&gt; file should contain the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file. If all of the above hash comparisons are correct, then you can be confident that your source tree is authentic and unadulterated. Details on the format for the &lt;code&gt;manifest&lt;/code&gt; files are available &lt;a href=&#34;https://fossil-scm.org/home/doc/trunk/www/fileformat.wiki#manifest&#34;&gt;on the Fossil website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The process of checking source code authenticity is automated by the makefile:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;make verify-source&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Or on windows:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;nmake /f Makefile.msc verify-source&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Using the makefile to verify source integrity is good for detecting accidental changes to the source tree, but malicious changes could be hidden by also modifying the makefiles.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;p&gt;The main SQLite website is &lt;a href=&#34;https://sqlite.org/&#34;&gt;https://sqlite.org/&lt;/a&gt; with geographically distributed backups at &lt;a href=&#34;https://www2.sqlite.org&#34;&gt;https://www2.sqlite.org/&lt;/a&gt; and &lt;a href=&#34;https://www3.sqlite.org&#34;&gt;https://www3.sqlite.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contact the SQLite developers through the &lt;a href=&#34;https://sqlite.org/forum/&#34;&gt;SQLite Forum&lt;/a&gt;. In an emergency, you can send private email to the lead developer at drh at sqlite dot org.&lt;/p&gt;</summary>
  </entry>
</feed>