<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T01:54:57Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yhzhang0128/egos-2000</title>
    <updated>2023-05-28T01:54:57Z</updated>
    <id>tag:github.com,2023-05-28:/yhzhang0128/egos-2000</id>
    <link href="https://github.com/yhzhang0128/egos-2000" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal operating system (2K LOC) on QEMU and a RISC-V board&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;This project&#39;s vision is to help &lt;strong&gt;every&lt;/strong&gt; college student read &lt;strong&gt;all&lt;/strong&gt; the code of an operating system.&lt;/p&gt; &#xA;&lt;p&gt;With only &lt;strong&gt;2000&lt;/strong&gt; lines of code, egos-2000 implements every component of an operating system for education. It can run on a RISC-V board and also the QEMU software emulator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yhzhang0128/egos-2000/main/references/screenshots/egos-2000.jpg&#34; alt=&#34;Fail to load an image of egos-2000.&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# The cloc utility is used to count the lines of code (LOC).&#xA;# The command below counts the LOC of everything excluding text documents.&#xA;&amp;gt; cloc egos-2000 --exclude-ext=md,txt&#xA;...&#xA;github.com/AlDanial/cloc v 1.94  T=0.05 s (949.3 files/s, 62349.4 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;C                               37            510            665           1579&#xA;C/C++ Header                    10             68            105            285&#xA;Assembly                         4              6             31             72&#xA;make                             1             12              0             64&#xA;-------------------------------------------------------------------------------&#xA;SUM:                            52            596            801           2000 (exactly 2000!)&#xA;-------------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Earth and Grass Operating System&lt;/h2&gt; &#xA;&lt;p&gt;We use egos-2000 as a new teaching OS for &lt;a href=&#34;https://www.cs.cornell.edu/courses/cs4411/2022fa/schedule/&#34;&gt;CS5411/4411 at Cornell&lt;/a&gt;. It adopts a 3-layer architecture.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;strong&gt;earth layer&lt;/strong&gt; implements hardware-specific abstractions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;tty and disk device interfaces&lt;/li&gt; &#xA;   &lt;li&gt;interrupt and memory management interfaces&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;grass layer&lt;/strong&gt; implements hardware-independent abstractions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;processes, system calls and inter-process communications&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;application layer&lt;/strong&gt; implements file system, shell and user commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The definitions of &lt;code&gt;struct earth&lt;/code&gt; and &lt;code&gt;struct grass&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/yhzhang0128/egos-2000/main/library/egos.h&#34;&gt;this header file&lt;/a&gt; specify the layer interfaces.&lt;/p&gt; &#xA;&lt;h3&gt;Usages and Documentation&lt;/h3&gt; &#xA;&lt;p&gt;For compiling and running egos-2000, please read &lt;a href=&#34;https://raw.githubusercontent.com/yhzhang0128/egos-2000/main/references/USAGES.md&#34;&gt;this document&lt;/a&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/yhzhang0128/egos-2000/main/references/riscv-privileged-v1.10.pdf&#34;&gt;RISC-V instruction set manual&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/yhzhang0128/egos-2000/main/references/sifive-fe310-v19p04.pdf&#34;&gt;SiFive FE310 manual&lt;/a&gt; introduce the privileged ISA and processor memory map. &lt;a href=&#34;https://raw.githubusercontent.com/yhzhang0128/egos-2000/main/references/README.md&#34;&gt;This document&lt;/a&gt; further introduces the teaching plans, architecture and development history.&lt;/p&gt; &#xA;&lt;p&gt;For any questions, please contact &lt;a href=&#34;https://dolobyte.net/&#34;&gt;Yunhao Zhang&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://www.cs.cornell.edu/home/rvr/&#34;&gt;Robbert van Renesse&lt;/a&gt;, &lt;a href=&#34;https://www.cs.cornell.edu/lorenzo/&#34;&gt;Lorenzo Alvisi&lt;/a&gt;, &lt;a href=&#34;https://people.cs.uchicago.edu/~shanlu/&#34;&gt;Shan Lu&lt;/a&gt; and &lt;a href=&#34;https://www.cs.cornell.edu/~hweather/&#34;&gt;Hakim Weatherspoon&lt;/a&gt; for supporting this project. Many thanks to Meta for a &lt;a href=&#34;https://research.facebook.com/fellows/zhang-yunhao/&#34;&gt;Meta fellowship&lt;/a&gt;. Many thanks to all CS5411/4411 students at Cornell over the years for helping improve this course.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xfennec/progress</title>
    <updated>2023-05-28T01:54:57Z</updated>
    <id>tag:github.com,2023-05-28:/Xfennec/progress</id>
    <link href="https://github.com/Xfennec/progress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux tool to show progress for cp, mv, dd, ... (formerly known as cv)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;progress - Coreutils Progress Viewer &lt;a href=&#34;https://travis-ci.org/Xfennec/progress&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Xfennec/progress.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What is it&lt;/h2&gt; &#xA;&lt;p&gt;This tool can be described as a &lt;strong&gt;tiny&lt;/strong&gt;, dirty C command that looks for coreutils basic commands (cp, mv, dd, tar, gzip/gunzip, cat, etc.) currently running on your system and displays the &lt;strong&gt;percentage&lt;/strong&gt; of copied data. It can also show &lt;strong&gt;estimated time&lt;/strong&gt; and &lt;strong&gt;throughput&lt;/strong&gt;, and provides a &#34;top-like&#34; mode (monitoring).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/Xfennec/progress/master/capture.png&#34; alt=&#34;progress screenshot with cp and mv&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(After many requests: the colors in the shell come from &lt;a href=&#34;https://github.com/milkbikis/powerline-shell&#34;&gt;powerline-shell&lt;/a&gt;. Try it, it&#39;s cool.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;progress&lt;/code&gt; works on Linux, FreeBSD and macOS.&lt;/p&gt; &#xA;&lt;p&gt;Formerly known as cv (Coreutils Viewer).&lt;/p&gt; &#xA;&lt;h2&gt;How do you install it&lt;/h2&gt; &#xA;&lt;p&gt;On deb-based systems (Debian, Ubuntu, Mint, etc.) run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper install progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, with homebrew, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, with MacPorts, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;port install progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you build it from source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD, substitute &lt;code&gt;make&lt;/code&gt; with &lt;code&gt;gmake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It depends on the library ncurses, you may have to install corresponding packages (maybe something like &#39;libncurses5-dev&#39;, &#39;libncursesw6&#39; or &#39;ncurses-devel&#39;).&lt;/p&gt; &#xA;&lt;h2&gt;How do you run it&lt;/h2&gt; &#xA;&lt;p&gt;Just launch the binary, &lt;code&gt;progress&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What can I do with it&lt;/h2&gt; &#xA;&lt;p&gt;A few examples. You can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;monitor all current and upcoming instances of coreutils commands in a simple window:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  watch progress -q&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;see how your download is progressing:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  watch progress -wc firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;look at your web server activity:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  progress -c httpd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;launch and monitor any heavy command using &lt;code&gt;$!&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  cp bigfile newfile &amp;amp; progress -mp $!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and much more.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;p&gt;It simply scans &lt;code&gt;/proc&lt;/code&gt; for interesting commands*, and then looks at directories &lt;code&gt;fd&lt;/code&gt; and &lt;code&gt;fdinfo&lt;/code&gt; to find opened files and seek positions, and reports status for the largest file.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s very light and compatible with virtually any command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(*) on macOS, it does the same thing using libproc&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tsoding/nn.h</title>
    <updated>2023-05-28T01:54:57Z</updated>
    <id>tag:github.com,2023-05-28:/tsoding/nn.h</id>
    <link href="https://github.com/tsoding/nn.h" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple stb-style header-only library for Neural Networks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nn.h&lt;/h1&gt; &#xA;&lt;p&gt;Simple stb-style head-only library for Neural Networks. Created for educational purposes. Not suitable for production.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tsoding/nn.h/master/thumbnail.png&#34; alt=&#34;thumbnail&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./build.sh&#xA;$ ./img2nn ./mnist/training/8/10057.png ./mnist/training/6/10032.png&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>