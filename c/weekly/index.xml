<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-04T01:42:13Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snesrev/zelda3</title>
    <updated>2022-09-04T01:42:13Z</updated>
    <id>tag:github.com,2022-09-04:/snesrev/zelda3</id>
    <link href="https://github.com/snesrev/zelda3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zelda3&lt;/h1&gt; &#xA;&lt;p&gt;A reimplementation of Zelda 3.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is a reverse engineered clone of Zelda 3 - A Link to the Past.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s around 70-80kLOC of C code, and reimplements all parts of the original game. The game is playable from start to end.&lt;/p&gt; &#xA;&lt;p&gt;You need a copy of the ROM to extract game resources (levels, images). Then once that&#39;s done, the ROM is no longer needed.&lt;/p&gt; &#xA;&lt;p&gt;It uses the PPU and DSP implementation from &lt;a href=&#34;https://github.com/elzo-d/LakeSnes&#34;&gt;LakeSnes&lt;/a&gt;. Additionally, it can be configured to also run the original machine code side by side. Then the RAM state is compared after each frame, to verify that the C implementation is correct.&lt;/p&gt; &#xA;&lt;p&gt;I got much assistance from spannierism&#39;s Zelda 3 JP disassembly and the other ones that documented loads of function names and variables.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;code&gt;libsdl2-dev&lt;/code&gt; library (ubuntu: &lt;code&gt;apt install libsdl2-dev&lt;/code&gt;, macOS: &lt;code&gt;brew install sdl2&lt;/code&gt;). On Windows, it&#39;s installed automatically with NuGet.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;code&gt;tables/zelda3.sfc&lt;/code&gt; US ROM file (for asset extraction step only) with SHA256 hash &lt;code&gt;66871d66be19ad2c34c927d6b14cd8eb6fc3181965b6e517cb361f7316009cfb&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;pillow&lt;/code&gt; and &lt;code&gt;pyyaml&lt;/code&gt; python dependencies used by the assets extractor. &lt;code&gt;pip install pillow pyyaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cd tables&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;python3 extract_resources.py&lt;/code&gt; to extract resources from the ROM into a more human readable format.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;python3 compile_resources.py&lt;/code&gt; to produce .h files that get included by the C code.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;First extract and compile resources, see above. Then build the .sln file with Visual Studio.&lt;/p&gt; &#xA;&lt;h3&gt;Linux/macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Linux: &lt;code&gt;apt install libsdl2-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS: &lt;code&gt;brew install sdl2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;First extract and compile resources, see above. Then make sure you are in the root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang++ `sdl2-config --cflags` -O2 -ozelda3 *.c snes/*.c `sdl2-config --libs`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;code&gt;make -j$(nproc)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage and controls&lt;/h2&gt; &#xA;&lt;p&gt;The game supports snapshots. The joypad input history is also saved in the snapshot. It&#39;s thus possible to replay a playthrough in turbo mode to verify that the game behaves correctly.&lt;/p&gt; &#xA;&lt;p&gt;The game is run with &lt;code&gt;./zelda3&lt;/code&gt; and takes an optional path to the ROM-file, which will verify for each frame that the C code matches the original behavior.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Button&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Up&lt;/td&gt; &#xA;   &lt;td&gt;Up arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Down&lt;/td&gt; &#xA;   &lt;td&gt;Down arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;Left arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;Right arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Start&lt;/td&gt; &#xA;   &lt;td&gt;Enter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;   &lt;td&gt;Right shift&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additionally, the following commands are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;   &lt;td&gt;Fill health/magic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;   &lt;td&gt;Hard reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;Pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T&lt;/td&gt; &#xA;   &lt;td&gt;Toggle replay turbo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;Clear all input history from current snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F1-F10&lt;/td&gt; &#xA;   &lt;td&gt;Load snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alt+Enter&lt;/td&gt; &#xA;   &lt;td&gt;Toggle Fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shift+F1-F10&lt;/td&gt; &#xA;   &lt;td&gt;Save snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+F1-F10&lt;/td&gt; &#xA;   &lt;td&gt;Replay the snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additionally, there are a bunch of included playthrough snapshots that play all dungeons of the game. You access them with the digit keys. If you want to replay the stage in turbo mode, press Ctrl+Digit (eg Ctrl-5).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license. See &#39;LICENSE.txt&#39; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ARMmbed/DAPLink</title>
    <updated>2022-09-04T01:42:13Z</updated>
    <id>tag:github.com,2022-09-04:/ARMmbed/DAPLink</id>
    <link href="https://github.com/ARMmbed/DAPLink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://daplink.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ARMmbed/DAPLink/main/docs/images/daplink-website-logo-link.png&#34; alt=&#34;DAPLink&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ARMmbed/DAPLink/actions/workflows/linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/ARMmbed/DAPLink/actions/workflows/linux.yml/badge.svg?branch=develop&#34; alt=&#34;Linux Build (develop)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/pyocd/shared_invite/zt-zqjv6zr5-ZfGAXl_mFCGGmFlB_8riHA&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Slack&amp;amp;color=4A154B&amp;amp;logo=slack&amp;amp;style=social&amp;amp;message=Join%20us%20on%20Slack&#34; alt=&#34;Join us on Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Arm Mbed DAPLink is an open-source software project that enables programming and debugging application software running on Arm Cortex CPUs. Commonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD or JTAG port of the application MCU. This configuration is found on nearly all development boards. Enumerating as a USB composite device, it creates a bridge between your development computer and the CPU debug access port. DAPLink enables developers with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MSC - drag-n-drop programming flash memory&lt;/li&gt; &#xA; &lt;li&gt;CDC - virtual com port for log, trace and terminal emulation&lt;/li&gt; &#xA; &lt;li&gt;CMSIS-DAPv2 WinUSB (driver-less vendor-specific bulk) - CMSIS compliant debug channel&lt;/li&gt; &#xA; &lt;li&gt;CMSIS-DAPv1 HID - CMSIS compliant debug channel&lt;/li&gt; &#xA; &lt;li&gt;WebUSB CMSIS-DAP HID - CMSIS compliant debug channel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy!&lt;/p&gt; &#xA;&lt;p&gt;For more detailed usability information &lt;a href=&#34;https://raw.githubusercontent.com/ARMmbed/DAPLink/main/docs/USERS-GUIDE.md&#34;&gt;see the users guide.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;There are many ARM microcontroller-based Hardware Interface Circuits (HICs) that DAPLink interface firmware runs on. These can be found as standalone boards (debugger) or as part of a development kit. Some branded circuits that are known to be IO compatible are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.maximintegrated.com/en/products/microcontrollers/MAX32625PICO.html&#34;&gt;Maxim Integrated MAX32625PICO based on MAX32625&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nuvoton Nu-Link2-Me based on M48SSIDAE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nxp.com/support/developer-resources/hardware-development-tools/lpcxpresso-boards:LPCXPRESSO-BOARDS&#34;&gt;NXP LPC-Link2 based on LPC11U35 or LPC4322&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nxp.com/design/microcontrollers-developer-resources/mcu-link-debug-probe:MCU-LINK&#34;&gt;NXP MCU-LINK on LPC55xx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nxp.com/products/software-and-tools/run-time-software/kinetis-software-and-tools/ides-for-kinetis-mcus/opensda-serial-and-debug-adapter:OPENSDA&#34;&gt;NXP OpenSDA based on K20, K22, KL26Z and KL27Z&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.segger.com/products/debug-probes/j-link/models/j-link-ob/&#34;&gt;Segger J-Link OB based on Atmel SAM3U&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.st.com/en/evaluation-tools/stm32-nucleo-boards.html&#34;&gt;STMicroelectronics ST-LINK/V2 (on NUCLEO boards) based on STM32F103CB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;There are many board builds (board = HIC + target combination) created from this repository. Quarterly releases will contain new features and bugfixes. Standalone bugfixes are released once reported, verified and fixed. Both quarterly and bugfix releases will result in the build number being incremented. Many development kits and products ship with DAPLink interface firmware or are capable of running DAPLink firmware. &lt;strong&gt;&lt;a href=&#34;https://daplink.io/&#34;&gt;The current release builds and instructions for updating DAPLink interface firmware is hosted on the DAPLink release site.&lt;/a&gt;&lt;/strong&gt; Release notes and previous release builds can be found under GitHub releases.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to DAPLink in any area. Look for an interesting feature or defect &lt;a href=&#34;https://github.com/ARMmbed/DAPLink/issues&#34;&gt;under issues&lt;/a&gt;. Start a new thread &lt;a href=&#34;https://github.com/ARMmbed/DAPLink/discussions&#34;&gt;in the discussions&lt;/a&gt; or &lt;a href=&#34;https://join.slack.com/t/pyocd/shared_invite/zt-zqjv6zr5-ZfGAXl_mFCGGmFlB_8riHA&#34;&gt;in Slack&lt;/a&gt; to engage with the developers and maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/ARMmbed/DAPLink/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for detailed requirements for contributions.&lt;/p&gt; &#xA;&lt;p&gt;To report bugs, please &lt;a href=&#34;https://github.com/ARMmbed/DAPLink/issues/new&#34;&gt;create an issue&lt;/a&gt; in the GitHub project.&lt;/p&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;Information for setting up a development environment, running the tests or creating a release build &lt;a href=&#34;https://raw.githubusercontent.com/ARMmbed/DAPLink/main/docs/DEVELOPERS-GUIDE.md&#34;&gt;can be found in the developers guide.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DAPLink is licensed with the permissive Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/ARMmbed/DAPLink/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full text of the license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2006-2022 Arm Ltd&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>madler/zlib</title>
    <updated>2022-09-04T01:42:13Z</updated>
    <id>tag:github.com,2022-09-04:/madler/zlib</id>
    <link href="https://github.com/madler/zlib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A massively spiffy yet delicately unobtrusive compression library.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ZLIB DATA COMPRESSION LIBRARY&lt;/p&gt; &#xA;&lt;p&gt;zlib 1.2.12 is a general purpose data compression library. All the code is thread safe. The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files &lt;a href=&#34;http://tools.ietf.org/html/rfc1950&#34;&gt;http://tools.ietf.org/html/rfc1950&lt;/a&gt; (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).&lt;/p&gt; &#xA;&lt;p&gt;All functions of the compression library are documented in the file zlib.h (volunteer to write man pages welcome, contact &lt;a href=&#34;mailto:zlib@gzip.org&#34;&gt;zlib@gzip.org&lt;/a&gt;). A usage example of the library is given in the file test/example.c which also tests that the library is working correctly. Another example is given in the file test/minigzip.c. The compression library itself is composed of all source files in the root directory.&lt;/p&gt; &#xA;&lt;p&gt;To compile all files and run the test program, follow the instructions given at the top of Makefile.in. In short &#34;./configure; make test&#34;, and if that goes well, &#34;make install&#34; should work for most flavors of Unix. For Windows, use one of the special makefiles in win32/ or contrib/vstudio/ . For VMS, use make_vms.com.&lt;/p&gt; &#xA;&lt;p&gt;Questions about zlib should be sent to &lt;a href=&#34;mailto:zlib@gzip.org&#34;&gt;zlib@gzip.org&lt;/a&gt;, or to Gilles Vollant &lt;a href=&#34;mailto:info@winimage.com&#34;&gt;info@winimage.com&lt;/a&gt; for the Windows DLL version. The zlib home page is &lt;a href=&#34;http://zlib.net/&#34;&gt;http://zlib.net/&lt;/a&gt; . Before reporting a problem, please check this site to verify that you have the latest version of zlib; otherwise get the latest version and check whether the problem still exists or not.&lt;/p&gt; &#xA;&lt;p&gt;PLEASE read the zlib FAQ &lt;a href=&#34;http://zlib.net/zlib_faq.html&#34;&gt;http://zlib.net/zlib_faq.html&lt;/a&gt; before asking for help.&lt;/p&gt; &#xA;&lt;p&gt;Mark Nelson &lt;a href=&#34;mailto:markn@ieee.org&#34;&gt;markn@ieee.org&lt;/a&gt; wrote an article about zlib for the Jan. 1997 issue of Dr. Dobb&#39;s Journal; a copy of the article is available at &lt;a href=&#34;http://marknelson.us/1997/01/01/zlib-engine/&#34;&gt;http://marknelson.us/1997/01/01/zlib-engine/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;The changes made in version 1.2.12 are documented in the file ChangeLog.&lt;/p&gt; &#xA;&lt;p&gt;Unsupported third party contributions are provided in directory contrib/ .&lt;/p&gt; &#xA;&lt;p&gt;zlib is available in Java using the java.util.zip package, documented at &lt;a href=&#34;http://java.sun.com/developer/technicalArticles/Programming/compression/&#34;&gt;http://java.sun.com/developer/technicalArticles/Programming/compression/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;A Perl interface to zlib written by Paul Marquess &lt;a href=&#34;mailto:pmqs@cpan.org&#34;&gt;pmqs@cpan.org&lt;/a&gt; is available at CPAN (Comprehensive Perl Archive Network) sites, including &lt;a href=&#34;http://search.cpan.org/~pmqs/IO-Compress-Zlib/&#34;&gt;http://search.cpan.org/~pmqs/IO-Compress-Zlib/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;A Python interface to zlib written by A.M. Kuchling &lt;a href=&#34;mailto:amk@amk.ca&#34;&gt;amk@amk.ca&lt;/a&gt; is available in Python 1.5 and later versions, see &lt;a href=&#34;http://docs.python.org/library/zlib.html&#34;&gt;http://docs.python.org/library/zlib.html&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;zlib is built into tcl: &lt;a href=&#34;http://wiki.tcl.tk/4610&#34;&gt;http://wiki.tcl.tk/4610&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;An experimental package to read and write files in .zip format, written on top of zlib by Gilles Vollant &lt;a href=&#34;mailto:info@winimage.com&#34;&gt;info@winimage.com&lt;/a&gt;, is available in the contrib/minizip directory of zlib.&lt;/p&gt; &#xA;&lt;p&gt;Notes for some targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Windows DLL versions, please see win32/DLL_FAQ.txt&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For 64-bit Irix, deflate.c must be compiled without any optimization. With -O, one libpng test fails. The test works in 32 bit mode (with the -n32 compiler flag). The compiler bug has been reported to SGI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;zlib doesn&#39;t work with gcc 2.6.3 on a DEC 3000/300LX under OSF/1 2.1 it works when compiled with cc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Digital Unix 4.0D (formely OSF/1) on AlphaServer, the cc option -std1 is necessary to get gzprintf working correctly. This is done by configure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;zlib doesn&#39;t work on HP-UX 9.05 with some versions of /bin/cc. It works with other compilers. Use &#34;make test&#34; to check your compiler.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;gzdopen is not supported on RISCOS or BEOS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For PalmOs, see &lt;a href=&#34;http://palmzlib.sourceforge.net/&#34;&gt;http://palmzlib.sourceforge.net/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Acknowledgments:&lt;/p&gt; &#xA;&lt;p&gt;The deflate format used by zlib was defined by Phil Katz. The deflate and zlib specifications were written by L. Peter Deutsch. Thanks to all the people who reported problems and suggested various improvements in zlib; they are too numerous to cite here.&lt;/p&gt; &#xA;&lt;p&gt;Copyright notice:&lt;/p&gt; &#xA;&lt;p&gt;(C) 1995-2022 Jean-loup Gailly and Mark Adler&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#39;as-is&#39;, without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.&lt;/p&gt; &#xA;&lt;p&gt;Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.&lt;/li&gt; &#xA; &lt;li&gt;Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.&lt;/li&gt; &#xA; &lt;li&gt;This notice may not be removed or altered from any source distribution.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Jean-loup Gailly Mark Adler &lt;a href=&#34;mailto:jloup@gzip.org&#34;&gt;jloup@gzip.org&lt;/a&gt; &lt;a href=&#34;mailto:madler@alumni.caltech.edu&#34;&gt;madler@alumni.caltech.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use the zlib library in a product, we would appreciate &lt;em&gt;not&lt;/em&gt; receiving lengthy legal documents to sign. The sources are provided for free but without warranty of any kind. The library has been entirely written by Jean-loup Gailly and Mark Adler; it does not include third-party code. We make all contributions to and distributions of this project solely in our personal capacity, and are not conveying any rights to any intellectual property of any third parties.&lt;/p&gt; &#xA;&lt;p&gt;If you redistribute modified sources, we would appreciate that you include in the file ChangeLog history information documenting your changes. Please read the FAQ for more information on the distribution of modified source versions.&lt;/p&gt;</summary>
  </entry>
</feed>