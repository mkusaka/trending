<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-09T01:39:37Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mgba-emu/mgba</title>
    <updated>2025-02-09T01:39:37Z</updated>
    <id>tag:github.com,2025-02-09:/mgba-emu/mgba</id>
    <link href="https://github.com/mgba-emu/mgba" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mGBA Game Boy Advance Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mGBA&lt;/h1&gt; &#xA;&lt;p&gt;mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.&lt;/p&gt; &#xA;&lt;p&gt;Up-to-date news and downloads can be found at &lt;a href=&#34;https://mgba.io/&#34;&gt;mgba.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildbot.mgba.io&#34;&gt;&lt;img src=&#34;https://buildbot.mgba.io/badges/build-win32.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/mgba&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/mgba/-/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly accurate Game Boy Advance hardware support&lt;a href=&#34;https://raw.githubusercontent.com/mgba-emu/mgba/master/#missing&#34;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Game Boy/Game Boy Color hardware support.&lt;/li&gt; &#xA; &lt;li&gt;Fast emulation. Known to run at full speed even on low end hardware, such as netbooks.&lt;/li&gt; &#xA; &lt;li&gt;Qt and SDL ports for a heavy-weight and a light-weight frontend.&lt;/li&gt; &#xA; &lt;li&gt;Local (same computer) link cable support.&lt;/li&gt; &#xA; &lt;li&gt;Save type detection, even for flash memory size&lt;a href=&#34;https://raw.githubusercontent.com/mgba-emu/mgba/master/#flashdetect&#34;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for cartridges with motion sensors and rumble (only usable with game controllers).&lt;/li&gt; &#xA; &lt;li&gt;Real-time clock support, even without configuration.&lt;/li&gt; &#xA; &lt;li&gt;Solar sensor support for Boktai games.&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Camera and Game Boy Printer support.&lt;/li&gt; &#xA; &lt;li&gt;A built-in BIOS implementation, and ability to load external BIOS files.&lt;/li&gt; &#xA; &lt;li&gt;Scripting support using Lua.&lt;/li&gt; &#xA; &lt;li&gt;Turbo/fast-forward support by holding Tab.&lt;/li&gt; &#xA; &lt;li&gt;Rewind by holding Backquote.&lt;/li&gt; &#xA; &lt;li&gt;Frameskip, configurable up to 10.&lt;/li&gt; &#xA; &lt;li&gt;Screenshot support.&lt;/li&gt; &#xA; &lt;li&gt;Cheat code support.&lt;/li&gt; &#xA; &lt;li&gt;9 savestate slots. Savestates are also viewable as screenshots.&lt;/li&gt; &#xA; &lt;li&gt;Video, GIF, WebP, and APNG recording.&lt;/li&gt; &#xA; &lt;li&gt;e-Reader support.&lt;/li&gt; &#xA; &lt;li&gt;Remappable controls for both keyboards and gamepads.&lt;/li&gt; &#xA; &lt;li&gt;Loading from ZIP and 7z files.&lt;/li&gt; &#xA; &lt;li&gt;IPS, UPS and BPS patch support.&lt;/li&gt; &#xA; &lt;li&gt;Game debugging via a command-line interface and GDB remote support, compatible with Ghidra and IDA Pro.&lt;/li&gt; &#xA; &lt;li&gt;Configurable emulation rewinding.&lt;/li&gt; &#xA; &lt;li&gt;Support for loading and exporting GameShark and Action Replay snapshots.&lt;/li&gt; &#xA; &lt;li&gt;Cores available for RetroArch/Libretro and OpenEmu.&lt;/li&gt; &#xA; &lt;li&gt;Community-provided translations for several languages via &lt;a href=&#34;https://hosted.weblate.org/engage/mgba&#34;&gt;Weblate&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Many, many smaller things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Game Boy mappers&lt;/h4&gt; &#xA;&lt;p&gt;The following mappers are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MBC1&lt;/li&gt; &#xA; &lt;li&gt;MBC1M&lt;/li&gt; &#xA; &lt;li&gt;MBC2&lt;/li&gt; &#xA; &lt;li&gt;MBC3&lt;/li&gt; &#xA; &lt;li&gt;MBC3+RTC&lt;/li&gt; &#xA; &lt;li&gt;MBC30&lt;/li&gt; &#xA; &lt;li&gt;MBC5&lt;/li&gt; &#xA; &lt;li&gt;MBC5+Rumble&lt;/li&gt; &#xA; &lt;li&gt;MBC7&lt;/li&gt; &#xA; &lt;li&gt;Wisdom Tree (unlicensed)&lt;/li&gt; &#xA; &lt;li&gt;NT &#34;old type&#34; 1 and 2 (unlicensed multicart)&lt;/li&gt; &#xA; &lt;li&gt;NT &#34;new type&#34; (unlicensed MBC5-like)&lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Jade/Diamond (unlicensed)&lt;/li&gt; &#xA; &lt;li&gt;Sachen MMC1 (unlicensed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following mappers are partially supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MBC6 (missing flash memory write support)&lt;/li&gt; &#xA; &lt;li&gt;MMM01&lt;/li&gt; &#xA; &lt;li&gt;Pocket Cam&lt;/li&gt; &#xA; &lt;li&gt;TAMA5 (incomplete RTC support)&lt;/li&gt; &#xA; &lt;li&gt;HuC-1 (missing IR support)&lt;/li&gt; &#xA; &lt;li&gt;HuC-3 (missing IR support)&lt;/li&gt; &#xA; &lt;li&gt;Sachen MMC2 (missing alternate wiring support)&lt;/li&gt; &#xA; &lt;li&gt;BBD (missing logo switching)&lt;/li&gt; &#xA; &lt;li&gt;Hitek (missing logo switching)&lt;/li&gt; &#xA; &lt;li&gt;GGB-81 (missing logo switching)&lt;/li&gt; &#xA; &lt;li&gt;Li Cheng (missing logo switching)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Networked multiplayer link cable support.&lt;/li&gt; &#xA; &lt;li&gt;Dolphin/JOY bus link cable support.&lt;/li&gt; &#xA; &lt;li&gt;MP2k audio mixing, for higher quality sound than hardware.&lt;/li&gt; &#xA; &lt;li&gt;Re-recording support for tool-assist runs.&lt;/li&gt; &#xA; &lt;li&gt;A comprehensive debug suite.&lt;/li&gt; &#xA; &lt;li&gt;Wireless adapter support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 7 or newer&lt;/li&gt; &#xA; &lt;li&gt;OS X 10.9 (Mavericks)&lt;a href=&#34;https://raw.githubusercontent.com/mgba-emu/mgba/master/#osxver&#34;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; or newer&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 3DS&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Switch&lt;/li&gt; &#xA; &lt;li&gt;Wii&lt;/li&gt; &#xA; &lt;li&gt;PlayStation Vita&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other Unix-like platforms, such as OpenBSD, are known to work as well, but are untested and not fully supported.&lt;/p&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;p&gt;Requirements are minimal. Any computer that can run Windows Vista or newer should be able to handle emulation. Support for OpenGL 1.1 or newer is also required, with OpenGL 3.2 or newer for shaders and advanced features.&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Downloads can be found on the official website, in the &lt;a href=&#34;http://mgba.io/downloads.html&#34;&gt;Downloads&lt;/a&gt; section. The source code can be found on &lt;a href=&#34;https://github.com/mgba-emu/mgba/&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;p&gt;Controls are configurable in the settings menu. Many game controllers should be automatically mapped by default. The default keyboard controls are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: X&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;B&lt;/strong&gt;: Z&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;: A&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;: S&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start&lt;/strong&gt;: Enter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Select&lt;/strong&gt;: Backspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Compiling requires using CMake 3.1 or newer. GCC, Clang, and Visual Studio 2019 are known to work for compiling mGBA.&lt;/p&gt; &#xA;&lt;h4&gt;Docker building&lt;/h4&gt; &#xA;&lt;p&gt;The recommended way to build for most platforms is to use Docker. Several Docker images are provided that contain the requisite toolchain and dependencies for building mGBA across several platforms.&lt;/p&gt; &#xA;&lt;p&gt;Note: If you are on an older Windows system before Windows 10, you may need to configure your Docker to use VirtualBox shared folders to correctly map your current &lt;code&gt;mgba&lt;/code&gt; checkout directory to the Docker image&#39;s working directory. (See issue &lt;a href=&#34;https://mgba.io/i/1985&#34;&gt;#1985&lt;/a&gt; for details.)&lt;/p&gt; &#xA;&lt;p&gt;To use a Docker image to build mGBA, simply run the following command while in the root of an mGBA checkout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v ${PWD}:/home/mgba/src mgba/windows:w32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After starting the Docker container, it will produce a &lt;code&gt;build-win32&lt;/code&gt; directory with the build products. Replace &lt;code&gt;mgba/windows:w32&lt;/code&gt; with another Docker image for other platforms, which will produce a corresponding other directory. The following Docker images available on Docker Hub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mgba/3ds&lt;/li&gt; &#xA; &lt;li&gt;mgba/switch&lt;/li&gt; &#xA; &lt;li&gt;mgba/ubuntu:xenial&lt;/li&gt; &#xA; &lt;li&gt;mgba/ubuntu:bionic&lt;/li&gt; &#xA; &lt;li&gt;mgba/ubuntu:focal&lt;/li&gt; &#xA; &lt;li&gt;mgba/ubuntu:groovy&lt;/li&gt; &#xA; &lt;li&gt;mgba/vita&lt;/li&gt; &#xA; &lt;li&gt;mgba/wii&lt;/li&gt; &#xA; &lt;li&gt;mgba/windows:w32&lt;/li&gt; &#xA; &lt;li&gt;mgba/windows:w64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to speed up the build process, consider adding the flag &lt;code&gt;-e MAKEFLAGS=-jN&lt;/code&gt; to do a parallel build for mGBA with &lt;code&gt;N&lt;/code&gt; number of CPU cores.&lt;/p&gt; &#xA;&lt;h4&gt;*nix building&lt;/h4&gt; &#xA;&lt;p&gt;To use CMake to build on a Unix-based system, the recommended commands are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build and install mGBA into &lt;code&gt;/usr/bin&lt;/code&gt; and &lt;code&gt;/usr/lib&lt;/code&gt;. Dependencies that are installed will be automatically detected, and features that are disabled if the dependencies are not found will be shown after running the &lt;code&gt;cmake&lt;/code&gt; command after warnings about being unable to find them.&lt;/p&gt; &#xA;&lt;p&gt;If you are on macOS, the steps are a little different. Assuming you are using the homebrew package manager, the recommended commands to obtain the dependencies and build are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cmake ffmpeg libzip qt5 sdl2 libedit lua pkg-config&#xA;mkdir build&#xA;cd build&#xA;cmake -DCMAKE_PREFIX_PATH=`brew --prefix qt5` ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you should not do a &lt;code&gt;make install&lt;/code&gt; on macOS, as it will not work properly.&lt;/p&gt; &#xA;&lt;h4&gt;Windows developer building&lt;/h4&gt; &#xA;&lt;h5&gt;MSYS2&lt;/h5&gt; &#xA;&lt;p&gt;To build on Windows for development, using MSYS2 is recommended. Follow the installation steps found on their &lt;a href=&#34;https://msys2.github.io&#34;&gt;website&lt;/a&gt;. Make sure you&#39;re running the 32-bit version (&#34;MSYS2 MinGW 32-bit&#34;) (or the 64-bit version &#34;MSYS2 MinGW 64-bit&#34; if you want to build for x86_64) and run this additional command (including the braces) to install the needed dependencies (please note that this involves downloading over 1100MiB of packages, so it will take a long time):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -Sy --needed base-devel git ${MINGW_PACKAGE_PREFIX}-{cmake,ffmpeg,gcc,gdb,libelf,libepoxy,libzip,lua,pkgconf,qt5,SDL2,ntldd-git}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the source code by running this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/mgba-emu/mgba.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then finally build it by running these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p mgba/build&#xA;cd mgba/build&#xA;cmake .. -G &#34;MSYS Makefiles&#34;&#xA;make -j$(nproc --ignore=1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that this build of mGBA for Windows is not suitable for distribution, due to the scattering of DLLs it needs to run, but is perfect for development. However, if distributing such a build is desired (e.g. for testing on machines that don&#39;t have the MSYS2 environment installed), running &lt;code&gt;cpack -G ZIP&lt;/code&gt; will prepare a zip file with all of the necessary DLLs.&lt;/p&gt; &#xA;&lt;h5&gt;Visual Studio&lt;/h5&gt; &#xA;&lt;p&gt;To build using Visual Studio is a similarly complicated setup. To begin you will need to install &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;. After installing vcpkg you will need to install several additional packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vcpkg install ffmpeg[vpx,x264] libepoxy libpng libzip lua sdl2 sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this installation won&#39;t support hardware accelerated video encoding on Nvidia hardware. If you care about this, you&#39;ll need to install CUDA beforehand, and then substitute &lt;code&gt;ffmpeg[vpx,x264,nvcodec]&lt;/code&gt; into the previous command.&lt;/p&gt; &#xA;&lt;p&gt;You will also need to install Qt. Unfortunately due to Qt being owned and run by an ailing company as opposed to a reasonable organization there is no longer an offline open source edition installer for the latest version, so you&#39;ll need to either fall back to an &lt;a href=&#34;https://download.qt.io/official_releases/qt/5.12/5.12.9/qt-opensource-windows-x86-5.12.9.exe&#34;&gt;old version installer&lt;/a&gt; (which wants you to create an otherwise-useless account, but you can bypass temporarily setting an invalid proxy or otherwise disabling networking), use the online installer (which requires an account regardless), or use vcpkg to build it (slowly). None of these are great options. For the installer you&#39;ll want to install the applicable MSVC versions. Note that the offline installers do not support MSVC 2019. For vcpkg you&#39;ll want to install it as such, which will take quite a while, especially on quad core or less computers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vcpkg install qt5-base qt5-multimedia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open Visual Studio, select Clone Repository, and enter &lt;code&gt;https://github.com/mgba-emu/mgba.git&lt;/code&gt;. When Visual Studio is done cloning, go to File &amp;gt; CMake and open the CMakeLists.txt file at the root of the checked out repository. From there, mGBA can be developed in Visual Studio similarly to other Visual Studio CMake projects.&lt;/p&gt; &#xA;&lt;h4&gt;Toolchain building&lt;/h4&gt; &#xA;&lt;p&gt;If you have devkitARM (for 3DS), devkitPPC (for Wii), devkitA64 (for Switch), or vitasdk (for PS Vita), you can use the following commands for building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake -DCMAKE_TOOLCHAIN_FILE=../src/platform/3ds/CMakeToolchain.txt ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE&lt;/code&gt; parameter for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3DS: &lt;code&gt;../src/platform/3ds/CMakeToolchain.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Switch: &lt;code&gt;../src/platform/switch/CMakeToolchain.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vita: &lt;code&gt;../src/platform/psp2/CMakeToolchain.vitasdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wii: &lt;code&gt;../src/platform/wii/CMakeToolchain.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;mGBA has no hard dependencies, however, the following optional dependencies are required for specific features. The features will be disabled if the dependencies can&#39;t be found.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qt 5: for the GUI frontend. Qt Multimedia or SDL are required for audio.&lt;/li&gt; &#xA; &lt;li&gt;SDL: for a more basic frontend and gamepad support in the Qt frontend. SDL 2 is recommended, but 1.2 is supported.&lt;/li&gt; &#xA; &lt;li&gt;zlib and libpng: for screenshot support and savestate-in-PNG support.&lt;/li&gt; &#xA; &lt;li&gt;libedit: for command-line debugger support.&lt;/li&gt; &#xA; &lt;li&gt;ffmpeg or libav: for video, GIF, WebP, and APNG recording.&lt;/li&gt; &#xA; &lt;li&gt;libzip or zlib: for loading ROMs stored in zip files.&lt;/li&gt; &#xA; &lt;li&gt;SQLite3: for game databases.&lt;/li&gt; &#xA; &lt;li&gt;libelf: for ELF loading.&lt;/li&gt; &#xA; &lt;li&gt;Lua: for scripting.&lt;/li&gt; &#xA; &lt;li&gt;json-c: for the scripting &lt;code&gt;storage&lt;/code&gt; API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SQLite3, libpng, and zlib are included with the emulator, so they do not need to be externally compiled first.&lt;/p&gt; &#xA;&lt;h2&gt;Footnotes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;missing&#34;&gt;[1]&lt;/a&gt; Currently missing features are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OBJ window for modes 3, 4 and 5 (&lt;a href=&#34;http://mgba.io/b/5&#34;&gt;Bug #5&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;flashdetect&#34;&gt;[2]&lt;/a&gt; Flash memory size detection does not work in some cases. These can be configured at runtime, but filing a bug is recommended if such a case is encountered.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;osxver&#34;&gt;[3]&lt;/a&gt; 10.9 is only needed for the Qt port. It may be possible to build or running the Qt port on 10.7 or older, but this is not officially supported. The SDL port is known to work on 10.5, and may work on older.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;mGBA is Copyright ¬© 2013 ‚Äì 2023 Jeffrey Pfau. It is distributed under the &lt;a href=&#34;https://www.mozilla.org/MPL/2.0/&#34;&gt;Mozilla Public License version 2.0&lt;/a&gt;. A copy of the license is available in the distributed LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;mGBA contains the following third-party libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benhoyt/inih&#34;&gt;inih&lt;/a&gt;, which is copyright ¬© 2009 ‚Äì 2020 Ben Hoyt and used under a BSD 3-clause license.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.7-zip.org/sdk.html&#34;&gt;LZMA SDK&lt;/a&gt;, which is public domain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aappleby/smhasher&#34;&gt;MurmurHash3&lt;/a&gt; implementation by Austin Appleby, which is public domain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skandhurkat/Getopt-for-Visual-Studio/&#34;&gt;getopt for MSVC&lt;/a&gt;, which is public domain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite3&lt;/a&gt;, which is public domain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are a game publisher and wish to license mGBA for commercial usage, please email &lt;a href=&#34;mailto:licensing@mgba.io&#34;&gt;licensing@mgba.io&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cilium/tetragon</title>
    <updated>2025-02-09T01:39:37Z</updated>
    <id>tag:github.com,2025-02-09:/cilium/tetragon</id>
    <link href="https://github.com/cilium/tetragon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF-based Security Observability and Runtime Enforcement&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://tetragon.io&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;docs/assets/icons/logo.svg&#34; width=&#34;400&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/docs/assets/icons/logo-dark.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/license/bsd-2-clause/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/license/gpl-2-0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Cilium‚Äôs new &lt;a href=&#34;https://tetragon.io&#34;&gt;Tetragon&lt;/a&gt; component enables powerful real-time, eBPF-based Security Observability and Runtime Enforcement.&lt;/p&gt; &#xA;&lt;p&gt;Tetragon detects and is able to react to security-significant events, such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Process execution events&lt;/li&gt; &#xA; &lt;li&gt;System call activity&lt;/li&gt; &#xA; &lt;li&gt;I/O activity including network &amp;amp; file access&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When used in a Kubernetes environment, Tetragon is Kubernetes-aware - that is, it understands Kubernetes identities such as namespaces, pods and so on - so that security event detection can be configured in relation to individual workloads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tetragon.io/docs/overview/&#34;&gt;&lt;img src=&#34;https://github.com/cilium/tetragon/raw/main/docs/static/images/smart_observability.png&#34; alt=&#34;Tetragon Overview Diagram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more about &lt;a href=&#34;https://tetragon.io/docs/overview#functionality-overview&#34;&gt;how Tetragon is using eBPF&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://tetragon.io/docs/&#34;&gt;official documentation of Tetragon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get started with Tetragon, take a look at the &lt;a href=&#34;https://tetragon.io/docs/getting-started/&#34;&gt;getting started guides&lt;/a&gt; to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/getting-started/install-k8s/&#34;&gt;Try Tetragon on Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/getting-started/install-docker/&#34;&gt;Try Tetragon on Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/installation/&#34;&gt;Deploy Tetragon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/installation/tetra-cli/&#34;&gt;Install the Tetra CLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tetragon is able to observe critical hooks in the kernel through its sensors and generates events enriched with Linux and Kubernetes metadata:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Process lifecycle&lt;/strong&gt;: generating &lt;code&gt;process_exec&lt;/code&gt; and &lt;code&gt;process_exit&lt;/code&gt; events by default, enabling full process lifecycle observability. Learn more about these events on the &lt;a href=&#34;https://tetragon.io/docs/use-cases/process-lifecycle/&#34;&gt;process lifecycle use case page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generic tracing&lt;/strong&gt;: generating &lt;code&gt;process_kprobe&lt;/code&gt;, &lt;code&gt;process_tracepoint&lt;/code&gt; and &lt;code&gt;process_uprobe&lt;/code&gt; events for more advanced and custom use cases. Learn more about these events on the &lt;a href=&#34;https://tetragon.io/docs/concepts/tracing-policy/&#34;&gt;TracingPolicy concept page&lt;/a&gt; and discover &lt;a href=&#34;https://tetragon.io/docs/use-cases/&#34;&gt;multiple use cases&lt;/a&gt; like: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/use-cases/network-observability/&#34;&gt;üåè network observability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/use-cases/filename-access/&#34;&gt;üìÇ filename access&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/use-cases/linux-process-credentials/&#34;&gt;üîë credentials monitoring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/use-cases/process-lifecycle/privileged-execution/&#34;&gt;üîì privileged execution&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See further resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/resources/&#34;&gt;Conference Talks, Books, Blog Posts, and Labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/installation/faq/&#34;&gt;Frequently Asked Question&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tetragon.io/docs/reference/&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join the community&lt;/h2&gt; &#xA;&lt;p&gt;Join the Tetragon &lt;a href=&#34;https://slack.cilium.io&#34;&gt;üí¨ Slack channel&lt;/a&gt; and the &lt;a href=&#34;https://isogo.to/tetragon-meeting-notes&#34;&gt;üìÖ Community Call&lt;/a&gt; to chat with developers, maintainers, and other users. This is a good first stop to ask questions and share your experiences.&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For getting started with local development, you can refer to the &lt;a href=&#34;https://tetragon.io/docs/contribution-guide/&#34;&gt;Contribution Guide&lt;/a&gt;. If you plan to submit a PR, please &lt;a href=&#34;https://tetragon.io/docs/contribution-guide/developer-certificate-of-origin/&#34;&gt;&#34;sign-off&#34;&lt;/a&gt; your commits.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>veracrypt/VeraCrypt</title>
    <updated>2025-02-09T01:39:37Z</updated>
    <id>tag:github.com,2025-02-09:/veracrypt/VeraCrypt</id>
    <link href="https://github.com/veracrypt/VeraCrypt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Disk encryption with strong security based on TrueCrypt&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This archive contains the source code of VeraCrypt. It is based on the original TrueCrypt 7.1a with security enhancements and modifications.&lt;/p&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;p&gt;You may use the source code contained in this archive only if you accept and agree to the license terms contained in the file &#39;License.txt&#39;, which is included in this archive.&lt;/p&gt; &#xA;&lt;p&gt;Note that the license specifies, for example, that a derived work must not be called &#39;TrueCrypt&#39; or &#39;VeraCrypt&#39;&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#i-windows&#34;&gt;I. Windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#ii-linux-and-mac-os-x&#34;&gt;II. Linux and Mac OS X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#iii-freebsd&#34;&gt;III. FreeBSD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#iv-third-party-developers-contributors&#34;&gt;IV. Third-Party Developers (Contributors)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#v-legal-information&#34;&gt;V. Legal Information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#vi-further-information&#34;&gt;VI. Further Information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;I. Windows&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements for Building VeraCrypt for Windows:&lt;/h2&gt; &#xA;&lt;p&gt;A detailed guide on how to build VeraCrypt on Windows can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/doc/html/CompilingGuidelineWin.html&#34;&gt;documentation&lt;/a&gt; in the repository and it is also available &lt;a href=&#34;https://www.veracrypt.fr/en/CompilingGuidelineWin.html&#34;&gt;online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT:&lt;/p&gt; &#xA;&lt;p&gt;The 64-bit editions of Windows Vista and later versions of Windows, and in some cases (e.g. playback of HD DVD content) also the 32-bit editions do not allow the VeraCrypt driver to run without an appropriate digital signature. Therefore, all .sys files in official VeraCrypt binary packages are digitally signed with the digital certificate of the IDRIX, which was issued by GlobalSign certification authority. At the end of each official .exe and .sys file, there are embedded digital signatures and all related certificates (i.e. all certificates in the relevant certification chain, such as the certification authority certificates, CA-MS cross-certificate, and the IDRIX certificate).&lt;/p&gt; &#xA;&lt;p&gt;Keep this in mind if you compile VeraCrypt and compare your binaries with the official binaries. If your binaries are unsigned, the sizes of the official binaries will usually be approximately 10 KiB greater than the sizes of your binaries (there may be further differences if you use a different version of the compiler, or if you install a different or no service pack for Visual Studio, or different hotfixes for it, or if you use different versions of the required SDKs).&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for Signing and Packaging VeraCrypt for Windows:&lt;/h2&gt; &#xA;&lt;p&gt;First, create an environment variable &#39;WSDK81&#39; pointing to the Windows SDK for Windows 8.1 installation directory.&lt;/p&gt; &#xA;&lt;p&gt;The folder &#34;Signing&#34; contains a batch file (sign.bat) that will sign all VeraCrypt components using a code signing certificate present on the certificate store and build the final installation setup and MSI package. The batch file assumes that the code signing certificate is issued by GlobalSign. This is the case for IDRIX&#39;s certificate. If yours is issued by another CA, then you should put its intermediate certificates in the &#34;Signing&#34; folder and modify sign.bat accordingly.&lt;/p&gt; &#xA;&lt;p&gt;To generate MSI packages, WiX Toolset v3.11 must be installed.&lt;/p&gt; &#xA;&lt;h2&gt;VeraCrypt EFI Boot Loader:&lt;/h2&gt; &#xA;&lt;p&gt;VeraCrypt source code contains pre-built EFI binaries under src\Boot\EFI. The source code of VeraCrypt EFI Boot Loader is licensed under LGPL and it is available at &lt;a href=&#34;https://github.com/veracrypt/VeraCrypt-DCS&#34;&gt;https://github.com/veracrypt/VeraCrypt-DCS&lt;/a&gt;. For build instructions, please refer to the file src\Boot\EFI\Readme.txt.&lt;/p&gt; &#xA;&lt;h1&gt;II. Linux and Mac OS X&lt;/h1&gt; &#xA;&lt;p&gt;A detailed guide on how to build VeraCrypt on Linux can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/doc/html/CompilingGuidelineLinux.html&#34;&gt;documentation&lt;/a&gt; in the repository and it is also available &lt;a href=&#34;https://www.veracrypt.fr/en/CompilingGuidelineLinux.html&#34;&gt;online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements for Building VeraCrypt for Linux and Mac OS X:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;GNU C++ Compiler 4.0 or compatible&lt;/li&gt; &#xA; &lt;li&gt;Apple Xcode or Xcode command line tools (Mac OS X only)&lt;/li&gt; &#xA; &lt;li&gt;YASM 1.3.0 or newer (Linux only, x86/x64 architecture only)&lt;/li&gt; &#xA; &lt;li&gt;pkg-config&lt;/li&gt; &#xA; &lt;li&gt;wxWidgets 3.0 shared library and header files installed or wxWidgets 3.0 library source code (available at &lt;a href=&#34;https://www.wxwidgets.org&#34;&gt;https://www.wxwidgets.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;FUSE library and header files (available at &lt;a href=&#34;https://github.com/libfuse/libfuse&#34;&gt;https://github.com/libfuse/libfuse&lt;/a&gt; and &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;https://osxfuse.github.io/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PCSC-lite library and header files (available at &lt;a href=&#34;https://github.com/LudovicRousseau/PCSC&#34;&gt;https://github.com/LudovicRousseau/PCSC&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions for Building VeraCrypt for Linux and Mac OS X:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the current directory to the root of the VeraCrypt source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have no wxWidgets shared library installed, run the following command to configure the wxWidgets static library for VeraCrypt and to build it:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ make WXSTATIC=1 WX_ROOT=/usr/src/wxWidgets wxbuild&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The variable &lt;code&gt;WX_ROOT&lt;/code&gt; must point to the location of the source code of the wxWidgets library. Output files will be placed in the &#39;./wxrelease/&#39; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To build VeraCrypt, run the following command:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ make&lt;/code&gt;&lt;/p&gt; &lt;p&gt;or if you have no wxWidgets shared library installed:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ make WXSTATIC=1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If successful, the VeraCrypt executable should be located in the directory &#39;Main&#39;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default, a universal executable supporting both graphical and text user interface (through the switch --text) is built. On Linux, a console-only executable, which requires no GUI library, can be built using the &#39;NOGUI&#39; parameter:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ make NOGUI=1 WXSTATIC=1 WX_ROOT=/usr/src/wxWidgets wxbuild&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ make NOGUI=1 WXSTATIC=1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On MacOSX, building a console-only executable is not supported.&lt;/p&gt; &#xA;&lt;h2&gt;Mac OS X specifics:&lt;/h2&gt; &#xA;&lt;p&gt;Under MacOSX, the latest installed SDK is used by default. To use a different version of the SDK when building using make, you can export the environment variable VC_OSX_SDK:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ export VC_OSX_SDK=13.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For development dependencies management, you can use &lt;a href=&#34;https://brew.sh&#34;&gt;homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ brew install pkg-config yasm wxwidgets&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You also need system dependencies&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ brew install --cask macfuse packages&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing dependencies via brew, you can build a local development build&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ ./src/Build/build_veracrypt_macosx.sh -b&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to build the package, you must pass &lt;code&gt;-p&lt;/code&gt; to the build script above. The built executable will be in &lt;code&gt;.src/Main&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to build from sources, or without homebrew, pkg-config and packages must be installed.&lt;/p&gt; &#xA;&lt;p&gt;Get pkg-config from &lt;a href=&#34;https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz&#34;&gt;https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz&lt;/a&gt; and compile using the following commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ CFLAGS=&#34;-Wno-int-conversion&#34; CXXFLAGS=&#34;-Wno-int-conversion&#34; ./configure --with-internal-glib&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ sudo make install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;After making sure pkg-config is available, download and install OSXFuse from &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;https://osxfuse.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/src/Build/build_veracrypt_macosx.sh&#34;&gt;build_veracrypt_macosx.sh&lt;/a&gt; script performs the full build of VeraCrypt including the creation of the installer pkg. It expects to find the wxWidgets 3.2.5 sources at the same level as where you put VeraCrypt sources (i.e. if &#34;src&#34; path is &#34;/Users/joe/Projects/VeraCrypt/src&#34; then wxWidgets should be at &#34;/Users/joe/Projects/wxWidgets-3.2.5&#34;)&lt;/p&gt; &#xA;&lt;p&gt;The make build process uses Code Signing certificates whose ID is specified in src/Main/Main.make (look for lines containing &#34;Developer ID Application&#34; and &#34;Developer ID Installer&#34;). You&#39;ll have to modify these lines to put the ID of your Code Signing certificates or comment them out if you don&#39;t have one.&lt;/p&gt; &#xA;&lt;p&gt;Because of incompatibility issues with OSXFUSE, the SDK 10.9 generates a VeraCrypt binary that has issues communicating with the OSXFUSE kernel extension. Thus, we recommend using a different OSX SDK version for building VeraCrypt.&lt;/p&gt; &#xA;&lt;p&gt;The Packages installer that is used for the VeraCrypt official build has been notarized by IDRIX and it is available at &lt;a href=&#34;https://github.com/idrassi/packages/releases&#34;&gt;https://github.com/idrassi/packages/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;III. FreeBSD&lt;/h1&gt; &#xA;&lt;p&gt;FreeBSD is supported starting from version 11. The build requirements and instructions are the same as Linux except that gmake should be used instead of make.&lt;/p&gt; &#xA;&lt;h1&gt;IV. Third-Party Developers (Contributors)&lt;/h1&gt; &#xA;&lt;p&gt;If you intend to implement a feature, please contact us first to make sure:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;That the feature has not been implemented (we may have already implemented it, but haven&#39;t released the code yet).&lt;/li&gt; &#xA; &lt;li&gt;That the feature is acceptable.&lt;/li&gt; &#xA; &lt;li&gt;Whether we need the help of third-party developers with implementing the feature.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Information on how to contact us can be found at: &lt;a href=&#34;https://www.veracrypt.fr/&#34;&gt;https://www.veracrypt.fr/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;V. Legal Information&lt;/h1&gt; &#xA;&lt;h2&gt;Copyright Information&lt;/h2&gt; &#xA;&lt;p&gt;This software as a whole:&lt;br&gt; Copyright (c) 2013-2025 IDRIX. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Portions of this software:&lt;br&gt; Copyright (c) 2013-2025 IDRIX. All rights reserved.&lt;br&gt; Copyright (c) 2003-2012 TrueCrypt Developers Association. All rights reserved.&lt;br&gt; Copyright (c) 1998-2000 Paul Le Roux. All rights reserved.&lt;br&gt; Copyright (c) 1998-2008 Brian Gladman, Worcester, UK. All rights reserved.&lt;br&gt; Copyright (c) 1995-2023 Jean-loup Gailly and Mark Adler.&lt;br&gt; Copyright (c) 2016 Disk Cryptography Services for EFI (DCS), Alex Kolotnikov&lt;br&gt; Copyright (c) 1999-2023 Dieter Baron and Thomas Klausner.&lt;br&gt; Copyright (c) 2013, Alexey Degtyarev. All rights reserved.&lt;br&gt; Copyright (c) 1999-2016 Jack Lloyd. All rights reserved.&lt;br&gt; Copyright (c) 2013-2019 Stephan Mueller &lt;a href=&#34;mailto:smueller@chronox.de&#34;&gt;smueller@chronox.de&lt;/a&gt;&lt;br&gt; Copyright (c) 1999-2023 Igor Pavlov&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see the legal notices attached to parts of the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Trademark Information&lt;/h2&gt; &#xA;&lt;p&gt;Any trademarks contained in the source code, binaries, and/or in the documentation, are the sole property of their respective owners.&lt;/p&gt; &#xA;&lt;h1&gt;VI. Further Information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.veracrypt.fr&#34;&gt;https://www.veracrypt.fr&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>