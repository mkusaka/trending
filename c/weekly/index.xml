<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:40:59Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TelegramMessenger/MTProxy</title>
    <updated>2022-10-02T01:40:59Z</updated>
    <id>tag:github.com,2022-10-02:/TelegramMessenger/MTProxy</id>
    <link href="https://github.com/TelegramMessenger/MTProxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MTProxy&lt;/h1&gt; &#xA;&lt;p&gt;Simple MT-Proto proxy&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies, you would need common set of tools for building from source, and development packages for &lt;code&gt;openssl&lt;/code&gt; and &lt;code&gt;zlib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Debian/Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install git curl build-essential libssl-dev zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On CentOS/RHEL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install openssl-devel zlib-devel&#xA;yum groupinstall &#34;Development Tools&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/TelegramMessenger/MTProxy&#xA;cd MTProxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build, simply run &lt;code&gt;make&lt;/code&gt;, the binary will be in &lt;code&gt;objs/bin/mtproto-proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make &amp;amp;&amp;amp; cd objs/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the build has failed, you should run &lt;code&gt;make clean&lt;/code&gt; before building it again.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Obtain a secret, used to connect to telegram servers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://core.telegram.org/getProxySecret -o proxy-secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Obtain current telegram configuration. It can change (occasionally), so we encourage you to update it once per day.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://core.telegram.org/getProxyConfig -o proxy-multi.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Generate a secret to be used by users to connect to your proxy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;head -c 16 /dev/urandom | xxd -ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;mtproto-proxy&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mtproto-proxy -u nobody -p 8888 -H 443 -S &amp;lt;secret&amp;gt; --aes-pwd proxy-secret proxy-multi.conf -M 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nobody&lt;/code&gt; is the username. &lt;code&gt;mtproto-proxy&lt;/code&gt; calls &lt;code&gt;setuid()&lt;/code&gt; to drop privilegies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;443&lt;/code&gt; is the port, used by clients to connect to the proxy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;8888&lt;/code&gt; is the local port. You can use it to get statistics from &lt;code&gt;mtproto-proxy&lt;/code&gt;. Like &lt;code&gt;wget localhost:8888/stats&lt;/code&gt;. You can only get this stat via loopback.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;secret&amp;gt;&lt;/code&gt; is the secret generated at step 3. Also you can set multiple secrets: &lt;code&gt;-S &amp;lt;secret1&amp;gt; -S &amp;lt;secret2&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy-secret&lt;/code&gt; and &lt;code&gt;proxy-multi.conf&lt;/code&gt; are obtained at steps 1 and 2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt; is the number of workers. You can increase the number of workers, if you have a powerful server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also feel free to check out other options using &lt;code&gt;mtproto-proxy --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Generate the link with following schema: &lt;code&gt;tg://proxy?server=SERVER_NAME&amp;amp;port=PORT&amp;amp;secret=SECRET&lt;/code&gt; (or let the official bot generate it for you).&lt;/li&gt; &#xA; &lt;li&gt;Register your proxy with &lt;a href=&#34;https://t.me/MTProxybot&#34;&gt;@MTProxybot&lt;/a&gt; on Telegram.&lt;/li&gt; &#xA; &lt;li&gt;Set received tag with arguments: &lt;code&gt;-P &amp;lt;proxy tag&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enjoy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Random padding&lt;/h2&gt; &#xA;&lt;p&gt;Due to some ISPs detecting MTProxy by packet sizes, random padding is added to packets if such mode is enabled.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s only enabled for clients which request it.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;dd&lt;/code&gt; prefix to secret (&lt;code&gt;cafe...babe&lt;/code&gt; =&amp;gt; &lt;code&gt;ddcafe...babe&lt;/code&gt;) to enable this mode on client side.&lt;/p&gt; &#xA;&lt;h2&gt;Systemd example configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create systemd service file (it&#39;s standard path for the most Linux distros, but you should check it before):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano /etc/systemd/system/MTProxy.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Edit this basic service (especially paths and params):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]&#xA;Description=MTProxy&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;WorkingDirectory=/opt/MTProxy&#xA;ExecStart=/opt/MTProxy/mtproto-proxy -u nobody -p 8888 -H 443 -S &amp;lt;secret&amp;gt; -P &amp;lt;proxy tag&amp;gt; &amp;lt;other params&amp;gt;&#xA;Restart=on-failure&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Reload daemons:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl daemon-reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Test fresh MTProxy service:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl restart MTProxy.service&#xA;# Check status, it should be active&#xA;systemctl status MTProxy.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Enable it, to autostart service after reboot:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl enable MTProxy.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker image&lt;/h2&gt; &#xA;&lt;p&gt;Telegram is also providing &lt;a href=&#34;https://hub.docker.com/r/telegrammessenger/proxy/&#34;&gt;official Docker image&lt;/a&gt;. Note: the image is outdated.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Klipper3d/klipper</title>
    <updated>2022-10-02T01:40:59Z</updated>
    <id>tag:github.com,2022-10-02:/Klipper3d/klipper</id>
    <link href="https://github.com/Klipper3d/klipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&#34; alt=&#34;Klipper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Klipper is a 3d-Printer firmware. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&#34;https://www.klipper3d.org/Features.html&#34;&gt;features document&lt;/a&gt; for more information on why you should use Klipper.&lt;/p&gt; &#xA;&lt;p&gt;To begin using Klipper start by &lt;a href=&#34;https://www.klipper3d.org/Installation.html&#34;&gt;installing&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Klipper is Free Software. See the &lt;a href=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&#34;&gt;license&lt;/a&gt; or read the &lt;a href=&#34;https://www.klipper3d.org/Overview.html&#34;&gt;documentation&lt;/a&gt;. We depend on the generous support from our &lt;a href=&#34;https://www.klipper3d.org/Sponsors.html&#34;&gt;sponsors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libuv/libuv</title>
    <updated>2022-10-02T01:40:59Z</updated>
    <id>tag:github.com,2022-10-02:/libuv/libuv</id>
    <link href="https://github.com/libuv/libuv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform asynchronous I/O&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libuv/libuv/master/img/banner.png&#34; alt=&#34;libuv&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, but it&#39;s also used by &lt;a href=&#34;http://luvit.io/&#34;&gt;Luvit&lt;/a&gt;, &lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;, &lt;a href=&#34;https://github.com/MagicStack/uvloop&#34;&gt;uvloop&lt;/a&gt;, and &lt;a href=&#34;https://github.com/libuv/libuv/raw/v1.x/LINKS.md&#34;&gt;others&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Full-featured event loop backed by epoll, kqueue, IOCP, event ports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous TCP and UDP sockets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous DNS resolution&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous file and file system operations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;File system events&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ANSI escape code controlled TTY&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IPC with socket sharing, using Unix domain sockets or named pipes (Windows)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Child processes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread pool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Signal handling&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High resolution clock&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Threading and synchronization primitives&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Starting with version 1.0.0 libuv follows the &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt; scheme. The API change and backwards compatibility rules are those indicated by SemVer. libuv will keep a stable ABI across major releases.&lt;/p&gt; &#xA;&lt;p&gt;The ABI/API changes can be tracked &lt;a href=&#34;http://abi-laboratory.pro/tracker/timeline/libuv/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;libuv is licensed under the MIT license. Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;. The documentation is licensed under the CC BY 4.0 license. Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/LICENSE-docs&#34;&gt;LICENSE-docs file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libuv/libuv/discussions&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/libuv&#34;&gt;Mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Official documentation&lt;/h3&gt; &#xA;&lt;p&gt;Located in the docs/ subdirectory. It uses the &lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; framework, which makes it possible to build the documentation in multiple formats.&lt;/p&gt; &#xA;&lt;p&gt;Show different supported building options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as HTML and live reload it when it changes (this requires sphinx-autobuild to be installed and is only supported on Unix):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make livehtml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as man pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make man&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as ePub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make epub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Windows users need to use make.bat instead of plain &#39;make&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be browsed online &lt;a href=&#34;http://docs.libuv.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/libuv/libuv/tree/master/test&#34;&gt;tests and benchmarks&lt;/a&gt; also serve as API specification and usage examples.&lt;/p&gt; &#xA;&lt;h3&gt;Other resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=nGn60vDSxQ4&#34;&gt;LXJS 2012 talk&lt;/a&gt; — High-level introductory talk about libuv.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/libuv-dox&#34;&gt;libuv-dox&lt;/a&gt; — Documenting types and methods of libuv, mostly by reading uv.h.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/learnuv&#34;&gt;learnuv&lt;/a&gt; — Learn uv for fun and profit, a self guided workshop to libuv.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These resources are not handled by libuv maintainers and might be out of date. Please verify it before opening new issues.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading&lt;/h2&gt; &#xA;&lt;p&gt;libuv can be downloaded either from the &lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;GitHub repository&lt;/a&gt; or from the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before verifying the git tags or signature files, importing the relevant keys is necessary. Key IDs are listed in the &lt;a href=&#34;https://github.com/libuv/libuv/raw/master/MAINTAINERS.md&#34;&gt;MAINTAINERS&lt;/a&gt; file, but are also available as git blob objects for easier use.&lt;/p&gt; &#xA;&lt;p&gt;Importing a key the usual way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg --keyserver pool.sks-keyservers.net --recv-keys AE9BC059&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importing a key from a git blob object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git show pubkey-saghul | gpg --import&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verifying releases&lt;/h3&gt; &#xA;&lt;p&gt;Git tags are signed with the developer&#39;s key, they can be verified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git verify-tag v1.6.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with libuv 1.7.0, the tarballs stored in the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt; are signed and an accompanying signature file sit alongside each. Once both the release tarball and the signature file are downloaded, the file can be verified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg --verify libuv-1.7.0.tar.gz.sign&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;For UNIX-like platforms, including macOS, there are two build methods: autotools or &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; is the only supported build method and has the following prerequisites:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;One of: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/visual-cpp-build-tools/&#34;&gt;Visual C++ Build Tools&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/vs/older-downloads/&#34;&gt;Visual Studio 2015 Update 3&lt;/a&gt;, all editions including the Community edition (remember to select &#34;Common Tools for Visual C++ 2015&#34; feature during installation).&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/downloads/&#34;&gt;Visual Studio 2017&lt;/a&gt;, any edition (including the Build Tools SKU). &lt;strong&gt;Required Components:&lt;/strong&gt; &#34;MSbuild&#34;, &#34;VC++ 2017 v141 toolset&#34; and one of the Windows SDKs (10 or 8.1).&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Basic Unix tools required for some tests, &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt; includes Git Bash and tools which can be included in the global &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To build with autotools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sh autogen.sh&#xA;$ ./configure&#xA;$ make&#xA;$ make check&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p build&#xA;&#xA;$ (cd build &amp;amp;&amp;amp; cmake .. -DBUILD_TESTING=ON) # generate project with tests&#xA;$ cmake --build build                       # add `-j &amp;lt;n&amp;gt;` with cmake &amp;gt;= 3.12&#xA;&#xA;# Run tests:&#xA;$ (cd build &amp;amp;&amp;amp; ctest -C Debug --output-on-failure)&#xA;&#xA;# Or manually run tests:&#xA;$ build/uv_run_tests                        # shared library build&#xA;$ build/uv_run_tests_a                      # static library build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To cross-compile with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; (unsupported but generally works):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake ../..                 \&#xA;  -DCMAKE_SYSTEM_NAME=Windows \&#xA;  -DCMAKE_SYSTEM_VERSION=6.1  \&#xA;  -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install --HEAD libuv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note to OS X users:&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you specify the architecture you wish to build for in the &#34;ARCHS&#34; flag. You can specify more than one by delimiting with a space (e.g. &#34;x86_64 i386&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Some tests are timing sensitive. Relaxing test timeouts may be necessary on slow or overloaded machines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ env UV_TEST_TIMEOUT_MULTIPLIER=2 build/uv_run_tests # 10s instead of 5s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run one test&lt;/h4&gt; &#xA;&lt;p&gt;The list of all tests is in &lt;code&gt;test/test-list.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This invocation will cause the test driver to fork and execute &lt;code&gt;TEST_NAME&lt;/code&gt; in a child process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ build/uv_run_tests_a TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This invocation will cause the test driver to execute the test in the same process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ build/uv_run_tests_a TEST_NAME TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging tools&lt;/h4&gt; &#xA;&lt;p&gt;When running the test from within the test driver process (&lt;code&gt;build/uv_run_tests_a TEST_NAME TEST_NAME&lt;/code&gt;), tools like gdb and valgrind work normally.&lt;/p&gt; &#xA;&lt;p&gt;When running the test from a child of the test driver process (&lt;code&gt;build/uv_run_tests_a TEST_NAME&lt;/code&gt;), use these tools in a fork-aware manner.&lt;/p&gt; &#xA;&lt;h5&gt;Fork-aware gdb&lt;/h5&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/Forks.html&#34;&gt;follow-fork-mode&lt;/a&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gdb --args build/uv_run_tests_a TEST_NAME&#xA;&#xA;(gdb) set follow-fork-mode child&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fork-aware valgrind&lt;/h5&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--trace-children=yes&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ valgrind --trace-children=yes -v --tool=memcheck --leak-check=full --track-origins=yes --leak-resolution=high --show-reachable=yes --log-file=memcheck-%p.log build/uv_run_tests_a TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;See the section on running tests. The benchmark driver is &lt;code&gt;./uv_run_benchmarks_a&lt;/code&gt; and the benchmarks are listed in &lt;code&gt;test/benchmark-list.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/SUPPORTED_PLATFORMS.md&#34;&gt;SUPPORTED_PLATFORMS file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;-fno-strict-aliasing&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to turn on the &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; compiler flag in projects that use libuv. The use of ad hoc &#34;inheritance&#34; in the libuv API may not be safe in the presence of compiler optimizations that depend on strict aliasing.&lt;/p&gt; &#xA;&lt;p&gt;MSVC does not have an equivalent flag but it also does not appear to need it at the time of writing (December 2019.)&lt;/p&gt; &#xA;&lt;h3&gt;AIX Notes&lt;/h3&gt; &#xA;&lt;p&gt;AIX compilation using IBM XL C/C++ requires version 12.1 or greater.&lt;/p&gt; &#xA;&lt;p&gt;AIX support for filesystem events requires the non-default IBM &lt;code&gt;bos.ahafs&lt;/code&gt; package to be installed. This package provides the AIX Event Infrastructure that is detected by &lt;code&gt;autoconf&lt;/code&gt;. &lt;a href=&#34;http://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&#34;&gt;IBM documentation&lt;/a&gt; describes the package in more detail.&lt;/p&gt; &#xA;&lt;h3&gt;z/OS Notes&lt;/h3&gt; &#xA;&lt;p&gt;z/OS compilation requires &lt;a href=&#34;https://github.com/ibmruntimes/zoslib&#34;&gt;ZOSLIB&lt;/a&gt; to be installed. When building with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;, use the flag &lt;code&gt;-DZOSLIB_DIR&lt;/code&gt; to specify the path to &lt;a href=&#34;https://github.com/ibmruntimes/zoslib&#34;&gt;ZOSLIB&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ (cd build &amp;amp;&amp;amp; cmake .. -DBUILD_TESTING=ON -DZOSLIB_DIR=/path/to/zoslib)&#xA;$ cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;z/OS creates System V semaphores and message queues. These persist on the system after the process terminates unless the event loop is closed.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;ipcrm&lt;/code&gt; command to manually clear up System V resources.&lt;/p&gt; &#xA;&lt;h2&gt;Patches&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/libuv/libuv/raw/master/CONTRIBUTING.md&#34;&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>