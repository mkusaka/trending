<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-20T01:37:07Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hanwckf/immortalwrt-mt798x</title>
    <updated>2024-10-20T01:37:07Z</updated>
    <id>tag:github.com,2024-10-20:/hanwckf/immortalwrt-mt798x</id>
    <link href="https://github.com/hanwckf/immortalwrt-mt798x" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Immortalwrt variant fot mediatek mt798x routers.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/53193414?s=200&amp;amp;v=4&#34; alt=&#34;logo&#34; width=&#34;200&#34; height=&#34;200&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Project ImmortalWrt&lt;/h1&gt; &#xA;&lt;p&gt;ImmortalWrt is a fork of &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWrt&lt;/a&gt;, with more packages ported, more devices supported, better performance, and special optimizations for mainland China users.&lt;br&gt; Compared the official one, we allow to use hacks or non-upstreamable patches / modifications to achieve our purpose. Source from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Default login address: &lt;a href=&#34;http://192.168.1.1&#34;&gt;http://192.168.1.1&lt;/a&gt; or &lt;a href=&#34;http://immortalwrt.lan&#34;&gt;http://immortalwrt.lan&lt;/a&gt;, username: &lt;strong&gt;root&lt;/strong&gt;, password: &lt;em&gt;none&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About immortalwrt-mt798x&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmi.hanwckf.top/p/immortalwrt-mt798x/&#34;&gt;https://cmi.hanwckf.top/p/immortalwrt-mt798x/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;To build with this project, Ubuntu 20.04 LTS is preferred. And you need use the CPU based on AMD64 architecture, with at least 4GB RAM and 25 GB available disk space. Make sure the &lt;strong&gt;Internet&lt;/strong&gt; is accessible.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are needed to compile ImmortalWrt, the package names vary between distributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here is an example for Ubuntu users:&lt;br&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 1:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Setup dependencies via APT&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;  bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \&#xA;  g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \&#xA;  libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev \&#xA;  libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \&#xA;  python3 python3-pip python3-ply python3-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig \&#xA;  texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo bash -c &#39;bash &amp;lt;(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do everything as an unprivileged user, not root, without sudo.&lt;/li&gt; &#xA; &lt;li&gt;Using CPUs based on other architectures should be fine to compile ImmortalWrt, but more hacks are needed - No warranty at all.&lt;/li&gt; &#xA; &lt;li&gt;You must &lt;strong&gt;not&lt;/strong&gt; have spaces or non-ascii characters in PATH or in the work folders on the drive.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Windows Subsystem for Linux (or WSL), removing Windows folders from PATH is required, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/wsl&#34;&gt;Build system setup WSL&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;Using macOS as the host build OS is &lt;strong&gt;not&lt;/strong&gt; recommended. No warranty at all. You can get tips from &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/buildroot.exigence.macosx&#34;&gt;Build system setup macOS&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;For more details, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build system setup&lt;/a&gt; documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;git clone --depth=1 https://github.com/hanwckf/immortalwrt-mt798x.git&lt;/code&gt; to clone the source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cd immortalwrt-mt798x&lt;/code&gt; to enter source directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the configuration file for your device from the &lt;code&gt;defconfig&lt;/code&gt; directory to the project root directory and rename it &lt;code&gt;.config&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# MT7981&#xA;cp -f defconfig/mt7981-ax3000.config .config&#xA;&#xA;# MT7986&#xA;cp -f defconfig/mt7986-ax6000.config .config&#xA;&#xA;# MT7986 256M Low Memory&#xA;cp -f defconfig/mt7986-ax6000-256m.config .config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make -j$(nproc)&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the ImmortalWrt package manager called opkg. If you&#39;re looking to develop the web interface or port packages to ImmortalWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/packages&#34;&gt;ImmortalWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://t.me/ctcgfw_openwrt_discuss&#34;&gt;@ctcgfw_openwrt_discuss&lt;/a&gt; on &lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://matrix.to/#/%23immortalwrt:matrix.org&#34;&gt;#immortalwrt&lt;/a&gt; on &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ImmortalWrt is licensed under &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-only.html&#34;&gt;GPL-2.0-only&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dlercloud.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22235437/111103249-f9ec6e00-8588-11eb-9bfc-67cc55574555.png&#34; width=&#34;183&#34; height=&#34;52&#34; border=&#34;0&#34; alt=&#34;Dler Cloud&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_square.png&#34; width=&#34;120&#34; height=&#34;120&#34; border=&#34;0&#34; alt=&#34;JetBrains Black Box Logo logo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceforge.net/&#34;&gt;&lt;img src=&#34;https://sourceforge.net/sflogo.php?type=17&amp;amp;group_id=3663829&#34; alt=&#34;SourceForge&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>joeycastillo/Sensor-Watch</title>
    <updated>2024-10-20T01:37:07Z</updated>
    <id>tag:github.com,2024-10-20:/joeycastillo/Sensor-Watch</id>
    <link href="https://github.com/joeycastillo/Sensor-Watch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A board replacement for the classic Casio F-91W wristwatch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Sensor Watch&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.sensorwatch.net&#34;&gt;Sensor Watch&lt;/a&gt; is a board replacement for the classic Casio F-91W wristwatch. It is powered by a Microchip SAM L22 microcontroller with built-in segment LCD controller. You can write your own programs for the watch using the provided watch library, program the watch over USB using the built-in UF2 bootloader, and then install the board in your existing watch case to run your own software on your wrist.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joeycastillo/Sensor-Watch/main/images/sensor-watch.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ARM Cortex M0+ microcontroller&lt;/li&gt; &#xA; &lt;li&gt;32KHz crystal for real-time clock with alarm function&lt;/li&gt; &#xA; &lt;li&gt;Ten digit segment LCD, plus five indicator segments&lt;/li&gt; &#xA; &lt;li&gt;Three interrupt capable buttons&lt;/li&gt; &#xA; &lt;li&gt;Red / green PWM’able LED backlight&lt;/li&gt; &#xA; &lt;li&gt;Optional piezo buzzer (requires some light soldering)&lt;/li&gt; &#xA; &lt;li&gt;On-board USB Micro B connector&lt;/li&gt; &#xA; &lt;li&gt;Reset button with double-tap UF2 bootloader&lt;/li&gt; &#xA; &lt;li&gt;Nine-pin flex PCB connector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joeycastillo/Sensor-Watch/main/images/sensor-board.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may have noticed that there are no sensors on this board. That is by design: rather than pick sensors for you, the goal is to add a tiny flexible PCB with the sensors YOU want, and interface them over the nine-pin connector. The connector provides the following options for power and connectivity:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3V power (nominal voltage from a CR2016 coin cell, can drop to ~2.7V)&lt;/li&gt; &#xA; &lt;li&gt;An I²C interface with built-in pull-up resistors&lt;/li&gt; &#xA; &lt;li&gt;Five general purpose IO pins, which can be configured as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Five analog inputs&lt;/li&gt; &#xA;   &lt;li&gt;Five interrupt-capable digital inputs, with internal pull-up or pull-down resistors&lt;/li&gt; &#xA;   &lt;li&gt;Five digital outputs&lt;/li&gt; &#xA;   &lt;li&gt;SPI controller (with one spare analog / GPIO pin leftover)&lt;/li&gt; &#xA;   &lt;li&gt;One UART TX/RX pair (with three GPIO leftover)&lt;/li&gt; &#xA;   &lt;li&gt;Up to four PWM pins on two independent TC instances&lt;/li&gt; &#xA;   &lt;li&gt;Two external wake inputs that can wake from the ultra-low-power BACKUP mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Pin&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Digital&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Interrupt&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Analog&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;I2C&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;SPI&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;UART&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;PWM&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Ext. Wake&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[4]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[12]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;SCL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SCL&lt;br&gt;SERCOM1[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;SDA&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SDA&lt;br&gt;SERCOM1[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[9]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SCK&lt;br&gt;SERCOM3[3]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RX&lt;br&gt;SERCOM3[3]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC3[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[2]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[10]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MOSI&lt;br&gt;SERCOM3[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TX or RX&lt;br&gt;SERCOM3[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC2[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RTC/IN[1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[3]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[11]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CS&lt;br&gt;SERCOM3[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RX&lt;br&gt;SERCOM3[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC2[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[8]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MISO&lt;br&gt;SERCOM3[2]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TX or RX&lt;br&gt;SERCOM3[2]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC3[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RTC/IN[0]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These tiny “sensor boards” have a set outline, and the available area for your electronics is quite small (5.7 × 5.7 × 1 mm). Still, this is plenty of room for an environmental sensor, MEMS accelerometer or magnetometer and a couple of decoupling capacitors. Note that you will likely be limited to QFN and LGA type parts; SOICs are too large, and even SSOP packages are generally too thick. You can find reference designs for several sensor boards in the &lt;code&gt;PCB/Sensor Boards&lt;/code&gt; directory within this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Getting code on the watch&lt;/h2&gt; &#xA;&lt;p&gt;The watch library in this repository is very work-in-progress, but it should allow you to get started. To create a new project, copy the “starter-project” folder in the apps folder, and write your code in the app.c file.&lt;/p&gt; &#xA;&lt;p&gt;You will need to install &lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads/&#34;&gt;the GNU Arm Embedded Toolchain&lt;/a&gt; to build projects for the watch. The watch library has been tested with the &lt;code&gt;9-2019-q4-major&lt;/code&gt; version and the &lt;code&gt;10.3-2021.07&lt;/code&gt; versions. If you&#39;re using Debian or Ubuntu, it should be sufficient to &lt;code&gt;apt install gcc-arm-none-eabi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build your project, open your terminal and navigate to the project&#39;s &lt;code&gt;make&lt;/code&gt; folder, then type &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install the project onto your Sensor Watch board, plug the watch into your USB port and double tap the tiny Reset button on the back of the board. You should see the LED light up red and begin pulsing. (If it does not, make sure you didn’t plug the board in upside down). Once you see the “WATCHBOOT” drive appear on your desktop, type &lt;code&gt;make install&lt;/code&gt;. This will convert your compiled program to a UF2 file, and copy it over to the watch.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Movement framework&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to make minor modifications and use existing code, start with the &lt;code&gt;movement&lt;/code&gt; directory. You can build the default watch firmware with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd movement/make&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then copy &lt;code&gt;movement/make/build/watch.uf2&lt;/code&gt; to your watch. If you&#39;d like to modify which faces are built, see &lt;code&gt;movement_config.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may want to test out changes in the emulator first. To do this, you&#39;ll need to install &lt;a href=&#34;https://emscripten.org/&#34;&gt;emscripten&lt;/a&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd movement/make&#xA;emmake make&#xA;python3 -m http.server -d build-sim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, visit &lt;a href=&#34;http://localhost:8000/watch.html&#34;&gt;watch.html&lt;/a&gt; to see your work.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Different components of the project are licensed differently, see &lt;a href=&#34;https://github.com/joeycastillo/Sensor-Watch/raw/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zeldaret/oot</title>
    <updated>2024-10-20T01:37:07Z</updated>
    <id>tag:github.com,2024-10-20:/zeldaret/oot</id>
    <link href="https://github.com/zeldaret/oot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decompilation of The Legend of Zelda: Ocarina of Time&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Legend of Zelda: Ocarina of Time&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jenkins.deco.mp/job/OOT/job/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?jobUrl=https%3A%2F%2Fjenkins.deco.mp%2Fjob%2FOOT%2Fjob%2Fmain&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zelda.deco.mp/games/oot&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://zelda.deco.mp/assets/csv/progress-oot-shield.json&#34; alt=&#34;Decompilation Progress&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zeldaret/oot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/zeldaret/oot&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.zelda.deco.mp&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/688807550715560050?color=%237289DA&amp;amp;logo=discord&amp;amp;logoColor=%23FFFFFF&#34; alt=&#34;Discord Channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- WARNING! -&#xA;&#xA;This repository is a work in progress, and while it can be used to make certain changes, it&#39;s still&#xA;constantly evolving. If you use it for modding purposes in its current state, please be aware that&#xA;the codebase can drastically change at any time. Also note that some parts of the ROM may not be&#xA;&#39;shiftable&#39; yet, so modifying them could be difficult at this point.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a WIP &lt;strong&gt;decompilation&lt;/strong&gt; of &lt;em&gt;&lt;strong&gt;The Legend of Zelda: Ocarina of Time&lt;/strong&gt;&lt;/em&gt;. The purpose of the project is to recreate a source code base for the game from scratch, using information found inside the game along with static and/or dynamic analysis. &lt;strong&gt;It is not producing a PC port.&lt;/strong&gt; For more information you can get in touch with the team on our &lt;a href=&#34;https://discord.zelda.deco.mp&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It builds the following versions:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Build timestamp&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;MD5 hash of input ROM(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pal-1.0&lt;/td&gt; &#xA;   &lt;td&gt;98-11-10 14:34:22&lt;/td&gt; &#xA;   &lt;td&gt;PAL 1.0 (Europe)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;e040de91a74b61e3201db0e2323f768a&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ntsc-1.2&lt;/td&gt; &#xA;   &lt;td&gt;98-11-12 18:17:03&lt;/td&gt; &#xA;   &lt;td&gt;NTSC 1.2 (Japan/US)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2258052847bdd056c8406a9ef6427f13&lt;/code&gt;&lt;br&gt;&lt;code&gt;57a9719ad547c516342e1a15d5c28c3d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pal-1.1&lt;/td&gt; &#xA;   &lt;td&gt;98-11-18 17:36:49&lt;/td&gt; &#xA;   &lt;td&gt;PAL 1.1 (Europe)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;d714580dd74c2c033f5e1b6dc0aeac77&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-jp&lt;/td&gt; &#xA;   &lt;td&gt;02-10-29 23:49:53&lt;/td&gt; &#xA;   &lt;td&gt;GameCube Japan&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;33fb7852c180b18ea0b9620b630f413f&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-jp-mq&lt;/td&gt; &#xA;   &lt;td&gt;02-10-30 00:15:15&lt;/td&gt; &#xA;   &lt;td&gt;GameCube Japan Master Quest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;69895c5c78442260f6eafb2506dc482a&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-us&lt;/td&gt; &#xA;   &lt;td&gt;02-12-19 13:28:09&lt;/td&gt; &#xA;   &lt;td&gt;GameCube US&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cd09029edcfb7c097ac01986a0f83d3f&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-us-mq&lt;/td&gt; &#xA;   &lt;td&gt;02-12-19 14:05:42&lt;/td&gt; &#xA;   &lt;td&gt;GameCube US Master Quest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;da35577fe54579f6a266931cc75f512d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-eu-mq-dbg&lt;/td&gt; &#xA;   &lt;td&gt;03-02-21 00:16:31&lt;/td&gt; &#xA;   &lt;td&gt;GameCube Europe/PAL Master Quest Debug&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;75e344f41c26ec2ec5ad92caa9e25629&lt;/code&gt;&lt;br&gt;&lt;code&gt;8ca71e87de4ce5e9f6ec916202a623e9&lt;/code&gt;&lt;br&gt;&lt;code&gt;f751d1a097764e2337b1ac9ba1e27699&lt;/code&gt;&lt;br&gt;&lt;code&gt;dde376d47187b931820d5b2957cded14&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-eu&lt;/td&gt; &#xA;   &lt;td&gt;03-02-21 20:12:23&lt;/td&gt; &#xA;   &lt;td&gt;GameCube Europe/PAL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2c27b4e000e85fd78dbca551f1b1c965&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-eu-mq&lt;/td&gt; &#xA;   &lt;td&gt;03-02-21 20:37:19&lt;/td&gt; &#xA;   &lt;td&gt;GameCube Europe/PAL Master Quest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1618403427e4344a57833043db5ce3c3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gc-jp-ce&lt;/td&gt; &#xA;   &lt;td&gt;03-10-08 21:53:00&lt;/td&gt; &#xA;   &lt;td&gt;GameCube Japan (Collector&#39;s Edition Disc)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0c13e0449a28ea5b925cdb8af8d29768&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default version is &lt;code&gt;gc-eu-mq-dbg&lt;/code&gt;, i.e. the GameCube Europe/PAL Master Quest Debug ROM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: This repository does not include any of the assets necessary to build the ROM. A prior copy of the game is required to extract the needed assets.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://zelda.deco.mp&#34;&gt;https://zelda.deco.mp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discord:&lt;/strong&gt; &lt;a href=&#34;https://discord.zelda.deco.mp&#34;&gt;https://discord.zelda.deco.mp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using WSL on Windows, or native Linux, which the rest of this readme describes. We currently have instructions for&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/main/#Windows&#34;&gt;Windows&lt;/a&gt;, with and without WSL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/main/docs/BUILDING_MACOS.md&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/main/#Linux-Native-or-under-WSL--VM&#34;&gt;Linux&lt;/a&gt;, natively or using WSL / VM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/main/docs/BUILDING_DOCKER.md&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(These will also depend on the Linux instructions.) Some of these may also be out of date or unmaintained; usually our contributors use WSL, Linux, and macOS, so these instructions should be up to date.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;For Windows 10 or 11, install WSL and a distribution by following this &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL Installation Guide&lt;/a&gt;. We recommend using Ubuntu 20.04 as the Linux distribution.&lt;/p&gt; &#xA;&lt;p&gt;For older versions of Windows, install a Linux VM or refer to &lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/main/docs/BUILDING_DOCKER.md&#34;&gt;Docker&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Linux (Native or under WSL / VM)&lt;/h3&gt; &#xA;&lt;h4&gt;1. Install build dependencies&lt;/h4&gt; &#xA;&lt;p&gt;The build process has the following package requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;build-essential&lt;/li&gt; &#xA; &lt;li&gt;binutils-mips-linux-gnu&lt;/li&gt; &#xA; &lt;li&gt;python3&lt;/li&gt; &#xA; &lt;li&gt;python3-pip&lt;/li&gt; &#xA; &lt;li&gt;python3-venv&lt;/li&gt; &#xA; &lt;li&gt;libpng-dev&lt;/li&gt; &#xA; &lt;li&gt;libxml2-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under Debian / Ubuntu (which we recommend using), you can install them with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install git build-essential binutils-mips-linux-gnu python3 python3-pip python3-venv libpng-dev libxml2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using GCC as the compiler for Ocarina of Time, you will also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc-mips-linux-gnu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Clone the repository&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; If using WSL, we strongly encourage you to clone into WSL&#39;s Linux filesystem using Linux&#39;s &lt;code&gt;git&lt;/code&gt;. Cloning into the Windows filesystem will result in much slower read/write speeds, and often causes issues when Windows copies the files with the wrong line endings, which the compiler IDO cannot handle correctly.&lt;/p&gt; &#xA;&lt;p&gt;Clone &lt;code&gt;https://github.com/zeldaret/oot.git&lt;/code&gt; where you wish to have the project, with a command such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zeldaret/oot.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the GitHub repository contents into a new folder in the current directory called &lt;code&gt;oot&lt;/code&gt;. Change into this directory before doing anything else:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd oot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Prepare a base ROM&lt;/h4&gt; &#xA;&lt;p&gt;Place a copy of the Master Quest (Debug) ROM inside the &lt;code&gt;baseroms/gc-eu-mq-dbg/&lt;/code&gt; folder. If you are under WSL, you can run the command &lt;code&gt;explorer.exe .&lt;/code&gt; to open the current directory in the Windows file explorer.&lt;/p&gt; &#xA;&lt;p&gt;Rename the file to &lt;code&gt;baserom.z64&lt;/code&gt;, &lt;code&gt;baserom.n64&lt;/code&gt; or &lt;code&gt;baserom.v64&lt;/code&gt;, depending on the original extension.&lt;/p&gt; &#xA;&lt;h4&gt;4. Setup the ROM and build process&lt;/h4&gt; &#xA;&lt;p&gt;Setup and extract everything from your ROM with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This downloads some dependencies (from pip), and compiles tools for the build process. Then it generates a new ROM &lt;code&gt;baseroms/gc-eu-mq-dbg/baserom-decompressed.z64&lt;/code&gt; that will have the overdump removed and the header patched. It will also extract the individual assets from the ROM.&lt;/p&gt; &#xA;&lt;h4&gt;5. Build the ROM&lt;/h4&gt; &#xA;&lt;p&gt;Run make to build the ROM. Make sure your path to the project is not too long, otherwise this process may error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all goes well, a new ROM should be built at &lt;code&gt;build/gc-eu-mq-dbg/oot-gc-eu-mq-dbg.z64&lt;/code&gt;, and the following text printed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;build/gc-eu-mq-dbg/oot-gc-eu-mq-dbg.z64: OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;build/gc-eu-mq-dbg/oot-gc-eu-mq-dbg.z64: FAILED&#xA;md5sum: WARNING: 1 computed checksum did NOT match&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that the built ROM isn&#39;t the same as the base one, so something went wrong or some part of the code doesn&#39;t match.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; to speed up the build, you can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pass &lt;code&gt;-jN&lt;/code&gt; to &lt;code&gt;make setup&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;, where N is the number of threads to use in the build. The generally-accepted wisdom is to use the number of virtual cores your computer has.&lt;/li&gt; &#xA; &lt;li&gt;pass &lt;code&gt;-j&lt;/code&gt; to &lt;code&gt;make setup&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;, to use as many threads as possible, but beware that this can use too much memory on lower-end systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both of these have the disadvantage that the ordering of the terminal output is scrambled, so for debugging it is best to stick to one thread (i.e. not pass &lt;code&gt;-j&lt;/code&gt; or &lt;code&gt;-jN&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Changing build options&lt;/h2&gt; &#xA;&lt;p&gt;The project Makefile is fairly configurable and can be used to build other versions of the game or prepare the repo for modding. See the options outlined at the top of the Makefile for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome. This is a group effort, and even small contributions can make a difference. Some tasks also don&#39;t require much knowledge to get started.&lt;/p&gt; &#xA;&lt;p&gt;Most discussions happen on our &lt;a href=&#34;https://discord.zelda.deco.mp&#34;&gt;Discord Server&lt;/a&gt;, where you are welcome to ask if you need help getting started, or if you have any questions regarding this project and other decompilation projects.&lt;/p&gt;</summary>
  </entry>
</feed>