<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:04:13Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hathach/tinyusb</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/hathach/tinyusb</id>
    <link href="https://github.com/hathach/tinyusb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source cross-platform USB stack for embedded system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: docs/assets/logo.svg :alt: TinyUSB&lt;/p&gt; &#xA;&lt;p&gt;|Build Status| |Documentation Status| |License|&lt;/p&gt; &#xA;&lt;p&gt;TinyUSB is an open-source cross-platform USB Host/Device stack for embedded system, designed to be memory-safe with no dynamic allocation and thread-safe with all interrupt events are deferred then handled in the non-ISR task function.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at the online &lt;code&gt;documentation &amp;lt;https://docs.tinyusb.org/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. figure:: docs/assets/stack.svg :width: 500px :alt: stackup&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── docs            # Documentation&#xA;├── examples        # Sample with Makefile build support&#xA;├── hw&#xA;│&amp;nbsp;&amp;nbsp; ├── bsp         # Supported boards source files&#xA;│&amp;nbsp;&amp;nbsp; └── mcu         # Low level mcu core &amp;amp; peripheral drivers&#xA;├── lib             # Sources from 3rd party such as freeRTOS, fatfs ...&#xA;├── src             # All sources files for TinyUSB stack itself.&#xA;├── test            # Unit tests for the stack&#xA;└── tools           # Files used internally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported MCUs&lt;/h1&gt; &#xA;&lt;p&gt;The stack supports the following MCUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Allwinner:&lt;/strong&gt; F1C100s/F1C200s&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Broadcom:&lt;/strong&gt; BCM2837, BCM2711&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dialog:&lt;/strong&gt; DA1469x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Espressif:&lt;/strong&gt; ESP32-S2, ESP32-S3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GigaDevice:&lt;/strong&gt; GD32VF103&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infineon:&lt;/strong&gt; XMC4500&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MicroChip:&lt;/strong&gt; SAMD11, SAMD21, SAMD51, SAME5x, SAMG55, SAML21, SAML22, SAME7x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NordicSemi:&lt;/strong&gt; nRF52833, nRF52840, nRF5340&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nuvoton:&lt;/strong&gt; NUC120, NUC121/NUC125, NUC126, NUC505&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NXP:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iMX RT Series: RT1011, RT1015, RT1021, RT1052, RT1062, RT1064&lt;/li&gt; &#xA;   &lt;li&gt;Kinetis: KL25, K32L2&lt;/li&gt; &#xA;   &lt;li&gt;LPC Series: 11u, 13, 15, 17, 18, 40, 43, 51u, 54, 55&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raspberry Pi:&lt;/strong&gt; RP2040&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Renesas:&lt;/strong&gt; RX63N, RX65N, RX72N&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silabs:&lt;/strong&gt; EFM32GG&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sony:&lt;/strong&gt; CXD56&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ST:&lt;/strong&gt; STM32 series: F0, F1, F2, F3, F4, F7, H7, G4, L0, L1, L4, L4+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TI:&lt;/strong&gt; MSP430, MSP432E4, TM4C123&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ValentyUSB:&lt;/strong&gt; eptri&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the list of &lt;code&gt;Supported Devices&lt;/code&gt;_ that can be used with provided examples.&lt;/p&gt; &#xA;&lt;h1&gt;Device Stack&lt;/h1&gt; &#xA;&lt;p&gt;Supports multiple device configurations by dynamically changing USB descriptors, low power functions such like suspend, resume, and remote wakeup. The following device classes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio Class 2.0 (UAC2)&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Host Controller Interface (BTH HCI)&lt;/li&gt; &#xA; &lt;li&gt;Communication Device Class (CDC)&lt;/li&gt; &#xA; &lt;li&gt;Device Firmware Update (DFU): DFU mode (WIP) and Runtime&lt;/li&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Generic (In &amp;amp; Out), Keyboard, Mouse, Gamepad etc ...&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC): with multiple LUNs&lt;/li&gt; &#xA; &lt;li&gt;Musical Instrument Digital Interface (MIDI)&lt;/li&gt; &#xA; &lt;li&gt;Network with RNDIS, Ethernet Control Model (ECM), Network Control Model (NCM)&lt;/li&gt; &#xA; &lt;li&gt;Test and Measurement Class (USBTMC)&lt;/li&gt; &#xA; &lt;li&gt;Video class 1.5 (UVC): work in progress&lt;/li&gt; &#xA; &lt;li&gt;Vendor-specific class support with generic In &amp;amp; Out endpoints. Can be used with MS OS 2.0 compatible descriptor to load winUSB driver without INF file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebUSB &amp;lt;https://github.com/WICG/webusb&amp;gt;&lt;/code&gt;__ with vendor-specific class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have a special requirement, &lt;code&gt;usbd_app_driver_get_cb()&lt;/code&gt; can be used to write your own class driver without modifying the stack. Here is how the RPi team added their reset interface &lt;code&gt;raspberrypi/pico-sdk#197 &amp;lt;https://github.com/raspberrypi/pico-sdk/pull/197&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;Host Stack&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Keyboard, Mouse, Generic&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC)&lt;/li&gt; &#xA; &lt;li&gt;Hub currently only supports 1 level of hub (due to my laziness)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OS Abstraction layer&lt;/h1&gt; &#xA;&lt;p&gt;TinyUSB is completely thread-safe by pushing all Interrupt Service Request (ISR) events into a central queue, then processing them later in the non-ISR context task function. It also uses semaphore/mutex to access shared resources such as Communication Device Class (CDC) FIFO. Therefore the stack needs to use some of the OS&#39;s basic APIs. Following OSes are already supported out of the box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No OS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RT-Thread &amp;lt;https://github.com/RT-Thread/rt-thread&amp;gt;&lt;/code&gt;&lt;em&gt;: &lt;code&gt;repo &amp;lt;https://github.com/RT-Thread-packages/tinyusb&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mynewt&lt;/strong&gt; Due to the newt package build system, Mynewt examples are better to be on its &lt;code&gt;own repo &amp;lt;https://github.com/hathach/mynewt-tinyusb-example&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Local Docs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Info&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Uses&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Changelog&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Contributors&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Reference&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Supported Devices&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Concurrency&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Contributing&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Code of Conduct&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Structure&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Porting&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;All TinyUSB sources in the &lt;code&gt;src&lt;/code&gt; folder are licensed under MIT license, the &lt;code&gt;Full license is here &amp;lt;LICENSE&amp;gt;&lt;/code&gt;__. However, each file can be individually licensed especially those in &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;hw/mcu&lt;/code&gt; folder. Please make sure you understand all the license term for files you use in your project.&lt;/p&gt; &#xA;&lt;p&gt;.. |Build Status| image:: &lt;a href=&#34;https://github.com/hathach/tinyusb/workflows/Build/badge.svg&#34;&gt;https://github.com/hathach/tinyusb/workflows/Build/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/hathach/tinyusb/actions&#34;&gt;https://github.com/hathach/tinyusb/actions&lt;/a&gt; .. |Documentation Status| image:: &lt;a href=&#34;https://readthedocs.org/projects/tinyusb/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/tinyusb/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://docs.tinyusb.org/en/latest/?badge=latest&#34;&gt;https://docs.tinyusb.org/en/latest/?badge=latest&lt;/a&gt; .. |License| image:: &lt;a href=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg&#34;&gt;https://img.shields.io/badge/license-MIT-brightgreen.svg&lt;/a&gt; :target: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. _Uses: docs/info/uses.rst .. _Changelog: docs/info/changelog.rst .. _Contributors: CONTRIBUTORS.rst .. _Reference: docs/reference/index.rst .. _Supported Devices: docs/reference/supported.rst .. _Getting Started: docs/reference/getting_started.rst .. _Concurrency: docs/reference/concurrency.rst .. _Contributing: docs/contributing/index.rst .. _Code of Conduct: CODE_OF_CONDUCT.rst .. _Structure: docs/contributing/structure.rst .. _Porting: docs/contributing/porting.rst&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>valinet/ExplorerPatcher</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/valinet/ExplorerPatcher</id>
    <link href="https://github.com/valinet/ExplorerPatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project aims to enhance the working environment on Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExplorerPatcher&lt;/h1&gt; &#xA;&lt;p&gt;This project aims to enhance the working environment on Windows.&lt;/p&gt; &#xA;&lt;p&gt;PayPal donations: &lt;a href=&#34;https://www.paypal.com/donate?business=valentingabrielradu%40gmail.com&amp;amp;no_recurring=0&amp;amp;item_name=ExplorerPatcher&amp;amp;currency_code=EUR&#34;&gt;here&lt;/a&gt; or using e-mail address &lt;a href=&#34;mailto:valentingabrielradu@gmail.com&#34;&gt;valentingabrielradu@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/valinet/ExplorerPatcher/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose between Windows 11 or Windows 10 taskbar (with labels support, small icons and lots of customization).&lt;/li&gt; &#xA; &lt;li&gt;Disable Windows 11 context menu and command bar in File Explorer and more.&lt;/li&gt; &#xA; &lt;li&gt;Open Start to All apps by default, choose number of frequent apps to show, display on active monitor and more.&lt;/li&gt; &#xA; &lt;li&gt;Choose between the Windows 11, Windows 10 and Windows NT Alt-Tab window switcher with customization.&lt;/li&gt; &#xA; &lt;li&gt;Lots of quality of life improvements for the shell, like: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Skin tray menus to match Windows style, make them behave like flyouts and center them relative to the icon.&lt;/li&gt; &#xA;   &lt;li&gt;Choose action when left and/or right clicking the network icon.&lt;/li&gt; &#xA;   &lt;li&gt;Revert to the Windows 7 search box in File Explorer, or disable Windows Search altogether.&lt;/li&gt; &#xA;   &lt;li&gt;Disable immersive menus and use mitigations that help you run the real classic theme without glitches.&lt;/li&gt; &#xA;   &lt;li&gt;Learn more about all the functionality offered by this program starting with this article in the wiki, &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/All-features&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some features may not be available on Windows 10.&lt;/p&gt; &#xA;&lt;h2&gt;How to?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/releases/latest/download/ep_setup.exe&#34;&gt;setup program&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer. It will automatically prompt for elevation, after which it will install the necessary files.&lt;/li&gt; &#xA; &lt;li&gt;When done, you will be greeted with the familiar Windows 10 taskbar. To customize the options offered by the program, right click the taskbar and choose &#34;Properties&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it. It&#39;s that simple.&lt;/p&gt; &#xA;&lt;h2&gt;What next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consult the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki&#34;&gt;wiki&lt;/a&gt; - this is highly recommended. There you will find information about more advanced tasks, modes of operation and features offered by this patcher.&lt;/li&gt; &#xA; &lt;li&gt;Get familiar with most of the features offered by this patcher &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/All-features&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to manage updates and what to expect from new versions and new Windows builds &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Configure-updates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have a question? Consult the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some other question? Open a thread in &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Found a bug, have an issue or a problem with the application? Read &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Reporting-problems&#34;&gt;here&lt;/a&gt; what to do next.&lt;/li&gt; &#xA; &lt;li&gt;I highly encourage you to check out the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/tree/master&#34;&gt;source code&lt;/a&gt; and tinker with it. I am open to merging new features, enhancements and fixes; also, I think it provides good insights on topics of interests in this area.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Items marked with &#34;bug&#34; that are still &#34;Open&#34; represent known issues. Active work is undergone regarding an item if it is additionally marked with &#34;investigating&#34;. Help is especially required for items marked with &#34;help wanted&#34;. Consult the list in &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &#34;Programs and Features&#34; in Control Panel, or &#34;Apps and features&#34; in the Settings app or&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;ep_setup.exe /uninstall&lt;/code&gt; or&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;ep_setup.exe&lt;/code&gt; to &lt;code&gt;ep_uninstall.exe&lt;/code&gt; and run that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The program features built-in updates: go to &#34;Properties&#34; - &#34;Updates&#34; to configure, check for and install the latest updates. Learn more &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Configure-updates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version&#39;s setup file and simply run it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/How-does-it-work&#34;&gt;How does this work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Antivirus-false-positives&#34;&gt;About antivirus false positives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zephyrproject-rtos/zephyr</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/zephyrproject-rtos/zephyr</id>
    <link href="https://github.com/zephyrproject-rtos/zephyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Primary Git Repository for the Zephyr Project. Zephyr is a new generation, scalable, optimized, secure RTOS for multiple hardware architectures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.zephyrproject.org&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/doc/_static/images/logo-readme.svg?sanitize=true&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/74&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/74/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml?query=branch%3Amain&#34;&gt; &lt;img src=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml/badge.svg?event=push&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr Project is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr kernel supports multiple architectures, including ARM (Cortex-A, Cortex-R, Cortex-M), Intel x86, ARC, Nios II, Tensilica Xtensa, and RISC-V, SPARC, MIPS, and a large number of &lt;code&gt;supported boards&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. below included in doc/introduction/introduction.rst&lt;/p&gt; &#xA;&lt;p&gt;Getting Started&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Welcome to Zephyr! See the &lt;code&gt;Introduction to Zephyr&lt;/code&gt;_ for a high-level overview, and the documentation&#39;s &lt;code&gt;Getting Started Guide&lt;/code&gt;_ to start developing.&lt;/p&gt; &#xA;&lt;p&gt;.. start_include_here&lt;/p&gt; &#xA;&lt;p&gt;Community Support&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Community support is provided via mailing lists and Discord; see the Resources below for details.&lt;/p&gt; &#xA;&lt;p&gt;.. _project-resources:&lt;/p&gt; &#xA;&lt;p&gt;Resources&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of resources to help you find your way around:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Help&lt;/strong&gt;: &lt;code&gt;Asking for Help Tips&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; (&lt;code&gt;Getting Started Guide&lt;/code&gt;_)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr&#34;&gt;https://github.com/zephyrproject-rtos/zephyr&lt;/a&gt; is the main repository; &lt;a href=&#34;https://elixir.bootlin.com/zephyr/latest/source&#34;&gt;https://elixir.bootlin.com/zephyr/latest/source&lt;/a&gt; contains a searchable index&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Releases&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/releases&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Samples and example code&lt;/strong&gt;: see &lt;code&gt;Sample and Demo Code Examples&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mailing Lists&lt;/strong&gt;: &lt;a href=&#34;mailto:users@lists.zephyrproject.org&#34;&gt;users@lists.zephyrproject.org&lt;/a&gt; and &lt;a href=&#34;mailto:devel@lists.zephyrproject.org&#34;&gt;devel@lists.zephyrproject.org&lt;/a&gt; are the main user and developer mailing lists, respectively. You can join the developer&#39;s list and search its archives at &lt;code&gt;Zephyr Development mailing list&lt;/code&gt;&lt;em&gt;. The other &lt;code&gt;Zephyr mailing list subgroups&lt;/code&gt;&lt;/em&gt; have their own archives and sign-up pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nightly CI Build Status&lt;/strong&gt;: &lt;a href=&#34;https://lists.zephyrproject.org/g/builds&#34;&gt;https://lists.zephyrproject.org/g/builds&lt;/a&gt; The &lt;a href=&#34;mailto:builds@lists.zephyrproject.org&#34;&gt;builds@lists.zephyrproject.org&lt;/a&gt; mailing list archives the CI nightly build results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat&lt;/strong&gt;: Real-time chat happens in Zephyr&#39;s Discord Server. Use this &lt;code&gt;Discord Invite&lt;/code&gt;_ to register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: see the &lt;code&gt;Contribution Guide&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;code&gt;Zephyr GitHub wiki&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/issues&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security Issues&lt;/strong&gt;: Email &lt;a href=&#34;mailto:vulnerabilities@zephyrproject.org&#34;&gt;vulnerabilities@zephyrproject.org&lt;/a&gt; to report security issues; also see our &lt;code&gt;Security&lt;/code&gt;_ documentation. Security issues are tracked separately at &lt;a href=&#34;https://zephyrprojectsec.atlassian.net&#34;&gt;https://zephyrprojectsec.atlassian.net&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zephyr Project Website&lt;/strong&gt;: &lt;a href=&#34;https://zephyrproject.org&#34;&gt;https://zephyrproject.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Discord Invite: &lt;a href=&#34;https://chat.zephyrproject.org&#34;&gt;https://chat.zephyrproject.org&lt;/a&gt; .. _supported boards: &lt;a href=&#34;http://docs.zephyrproject.org/latest/boards/index.html&#34;&gt;http://docs.zephyrproject.org/latest/boards/index.html&lt;/a&gt; .. _Zephyr Documentation: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; .. _Introduction to Zephyr: &lt;a href=&#34;http://docs.zephyrproject.org/latest/introduction/index.html&#34;&gt;http://docs.zephyrproject.org/latest/introduction/index.html&lt;/a&gt; .. _Getting Started Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/getting_started/index.html&#34;&gt;http://docs.zephyrproject.org/latest/getting_started/index.html&lt;/a&gt; .. _Contribution Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/contribute/index.html&#34;&gt;http://docs.zephyrproject.org/latest/contribute/index.html&lt;/a&gt; .. _Zephyr GitHub wiki: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/wiki&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/wiki&lt;/a&gt; .. _Zephyr Development mailing list: &lt;a href=&#34;https://lists.zephyrproject.org/g/devel&#34;&gt;https://lists.zephyrproject.org/g/devel&lt;/a&gt; .. _Zephyr mailing list subgroups: &lt;a href=&#34;https://lists.zephyrproject.org/g/main/subgroups&#34;&gt;https://lists.zephyrproject.org/g/main/subgroups&lt;/a&gt; .. _Sample and Demo Code Examples: &lt;a href=&#34;http://docs.zephyrproject.org/latest/samples/index.html&#34;&gt;http://docs.zephyrproject.org/latest/samples/index.html&lt;/a&gt; .. _Security: &lt;a href=&#34;http://docs.zephyrproject.org/latest/security/index.html&#34;&gt;http://docs.zephyrproject.org/latest/security/index.html&lt;/a&gt; .. _Asking for Help Tips: &lt;a href=&#34;https://docs.zephyrproject.org/latest/getting_started/index.html#asking-for-help&#34;&gt;https://docs.zephyrproject.org/latest/getting_started/index.html#asking-for-help&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Klipper3d/klipper</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/Klipper3d/klipper</id>
    <link href="https://github.com/Klipper3d/klipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&#34; alt=&#34;Klipper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Klipper is a 3d-Printer firmware. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&#34;https://www.klipper3d.org/Features.html&#34;&gt;features document&lt;/a&gt; for more information on why you should use Klipper.&lt;/p&gt; &#xA;&lt;p&gt;To begin using Klipper start by &lt;a href=&#34;https://www.klipper3d.org/Installation.html&#34;&gt;installing&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Klipper is Free Software. See the &lt;a href=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&#34;&gt;license&lt;/a&gt; or read the &lt;a href=&#34;https://www.klipper3d.org/Overview.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s specially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/raysan5/raylib&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/4.0.0&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/raylib?label=reddit%20r%2Fraylib&amp;amp;logo=reddit&#34; alt=&#34;Subreddit Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/raysan5?style=flat&amp;amp;label=@raysan5&amp;amp;color=1da1f2&amp;amp;logo=twitter&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) in PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3 or ES 2.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, XNA fonts, AngelCode fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+120 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+50 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and it draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple &lt;a href=&#34;https://github.com/raysan5/raylib/issues/613&#34;&gt;package managers&lt;/a&gt; on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that Wiki is open for edit, if you find some issue while building raylib for your target platform, feel free to edit the Wiki or open and issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, please, if you find some issue with some template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library and a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in raylib GitHub Wiki. Here the more relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different fileformats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on raylib Wiki for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libuv/libuv</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/libuv/libuv</id>
    <link href="https://github.com/libuv/libuv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform asynchronous I/O&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libuv/libuv/master/img/banner.png&#34; alt=&#34;libuv&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, but it&#39;s also used by &lt;a href=&#34;http://luvit.io/&#34;&gt;Luvit&lt;/a&gt;, &lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;, &lt;a href=&#34;https://github.com/MagicStack/uvloop&#34;&gt;uvloop&lt;/a&gt;, and &lt;a href=&#34;https://github.com/libuv/libuv/raw/v1.x/LINKS.md&#34;&gt;others&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Full-featured event loop backed by epoll, kqueue, IOCP, event ports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous TCP and UDP sockets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous DNS resolution&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asynchronous file and file system operations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;File system events&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ANSI escape code controlled TTY&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IPC with socket sharing, using Unix domain sockets or named pipes (Windows)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Child processes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread pool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Signal handling&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High resolution clock&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Threading and synchronization primitives&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Starting with version 1.0.0 libuv follows the &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt; scheme. The API change and backwards compatibility rules are those indicated by SemVer. libuv will keep a stable ABI across major releases.&lt;/p&gt; &#xA;&lt;p&gt;The ABI/API changes can be tracked &lt;a href=&#34;http://abi-laboratory.pro/tracker/timeline/libuv/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;libuv is licensed under the MIT license. Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;. The documentation is licensed under the CC BY 4.0 license. Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/LICENSE-docs&#34;&gt;LICENSE-docs file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libuv/libuv/discussions&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/libuv&#34;&gt;Mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Official documentation&lt;/h3&gt; &#xA;&lt;p&gt;Located in the docs/ subdirectory. It uses the &lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; framework, which makes it possible to build the documentation in multiple formats.&lt;/p&gt; &#xA;&lt;p&gt;Show different supported building options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as HTML and live reload it when it changes (this requires sphinx-autobuild to be installed and is only supported on Unix):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make livehtml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as man pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make man&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build documentation as ePub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make epub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Windows users need to use make.bat instead of plain &#39;make&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be browsed online &lt;a href=&#34;http://docs.libuv.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/libuv/libuv/tree/master/test&#34;&gt;tests and benchmarks&lt;/a&gt; also serve as API specification and usage examples.&lt;/p&gt; &#xA;&lt;h3&gt;Other resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=nGn60vDSxQ4&#34;&gt;LXJS 2012 talk&lt;/a&gt; — High-level introductory talk about libuv.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/libuv-dox&#34;&gt;libuv-dox&lt;/a&gt; — Documenting types and methods of libuv, mostly by reading uv.h.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/learnuv&#34;&gt;learnuv&lt;/a&gt; — Learn uv for fun and profit, a self guided workshop to libuv.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These resources are not handled by libuv maintainers and might be out of date. Please verify it before opening new issues.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading&lt;/h2&gt; &#xA;&lt;p&gt;libuv can be downloaded either from the &lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;GitHub repository&lt;/a&gt; or from the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before verifying the git tags or signature files, importing the relevant keys is necessary. Key IDs are listed in the &lt;a href=&#34;https://github.com/libuv/libuv/raw/master/MAINTAINERS.md&#34;&gt;MAINTAINERS&lt;/a&gt; file, but are also available as git blob objects for easier use.&lt;/p&gt; &#xA;&lt;p&gt;Importing a key the usual way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg --keyserver pool.sks-keyservers.net --recv-keys AE9BC059&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importing a key from a git blob object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git show pubkey-saghul | gpg --import&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verifying releases&lt;/h3&gt; &#xA;&lt;p&gt;Git tags are signed with the developer&#39;s key, they can be verified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git verify-tag v1.6.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with libuv 1.7.0, the tarballs stored in the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt; are signed and an accompanying signature file sit alongside each. Once both the release tarball and the signature file are downloaded, the file can be verified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg --verify libuv-1.7.0.tar.gz.sign&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;For UNIX-like platforms, including macOS, there are two build methods: autotools or &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; is the only supported build method and has the following prerequisites:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;One of: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/visual-cpp-build-tools/&#34;&gt;Visual C++ Build Tools&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/vs/older-downloads/&#34;&gt;Visual Studio 2015 Update 3&lt;/a&gt;, all editions including the Community edition (remember to select &#34;Common Tools for Visual C++ 2015&#34; feature during installation).&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/downloads/&#34;&gt;Visual Studio 2017&lt;/a&gt;, any edition (including the Build Tools SKU). &lt;strong&gt;Required Components:&lt;/strong&gt; &#34;MSbuild&#34;, &#34;VC++ 2017 v141 toolset&#34; and one of the Windows SDKs (10 or 8.1).&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Basic Unix tools required for some tests, &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt; includes Git Bash and tools which can be included in the global &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To build with autotools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sh autogen.sh&#xA;$ ./configure&#xA;$ make&#xA;$ make check&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p build&#xA;&#xA;$ (cd build &amp;amp;&amp;amp; cmake .. -DBUILD_TESTING=ON) # generate project with tests&#xA;$ cmake --build build                       # add `-j &amp;lt;n&amp;gt;` with cmake &amp;gt;= 3.12&#xA;&#xA;# Run tests:&#xA;$ (cd build &amp;amp;&amp;amp; ctest -C Debug --output-on-failure)&#xA;&#xA;# Or manually run tests:&#xA;$ build/uv_run_tests                        # shared library build&#xA;$ build/uv_run_tests_a                      # static library build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To cross-compile with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; (unsupported but generally works):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake ../..                 \&#xA;  -DCMAKE_SYSTEM_NAME=Windows \&#xA;  -DCMAKE_SYSTEM_VERSION=6.1  \&#xA;  -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install --HEAD libuv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note to OS X users:&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you specify the architecture you wish to build for in the &#34;ARCHS&#34; flag. You can specify more than one by delimiting with a space (e.g. &#34;x86_64 i386&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Some tests are timing sensitive. Relaxing test timeouts may be necessary on slow or overloaded machines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ env UV_TEST_TIMEOUT_MULTIPLIER=2 build/uv_run_tests # 10s instead of 5s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run one test&lt;/h4&gt; &#xA;&lt;p&gt;The list of all tests is in &lt;code&gt;test/test-list.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This invocation will cause the test driver to fork and execute &lt;code&gt;TEST_NAME&lt;/code&gt; in a child process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ build/uv_run_tests_a TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This invocation will cause the test driver to execute the test in the same process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ build/uv_run_tests_a TEST_NAME TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging tools&lt;/h4&gt; &#xA;&lt;p&gt;When running the test from within the test driver process (&lt;code&gt;build/uv_run_tests_a TEST_NAME TEST_NAME&lt;/code&gt;), tools like gdb and valgrind work normally.&lt;/p&gt; &#xA;&lt;p&gt;When running the test from a child of the test driver process (&lt;code&gt;build/uv_run_tests_a TEST_NAME&lt;/code&gt;), use these tools in a fork-aware manner.&lt;/p&gt; &#xA;&lt;h5&gt;Fork-aware gdb&lt;/h5&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/Forks.html&#34;&gt;follow-fork-mode&lt;/a&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gdb --args build/uv_run_tests_a TEST_NAME&#xA;&#xA;(gdb) set follow-fork-mode child&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fork-aware valgrind&lt;/h5&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--trace-children=yes&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ valgrind --trace-children=yes -v --tool=memcheck --leak-check=full --track-origins=yes --leak-resolution=high --show-reachable=yes --log-file=memcheck-%p.log build/uv_run_tests_a TEST_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;See the section on running tests. The benchmark driver is &lt;code&gt;./uv_run_benchmarks_a&lt;/code&gt; and the benchmarks are listed in &lt;code&gt;test/benchmark-list.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/libuv/libuv/v1.x/SUPPORTED_PLATFORMS.md&#34;&gt;SUPPORTED_PLATFORMS file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;-fno-strict-aliasing&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to turn on the &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; compiler flag in projects that use libuv. The use of ad hoc &#34;inheritance&#34; in the libuv API may not be safe in the presence of compiler optimizations that depend on strict aliasing.&lt;/p&gt; &#xA;&lt;p&gt;MSVC does not have an equivalent flag but it also does not appear to need it at the time of writing (December 2019.)&lt;/p&gt; &#xA;&lt;h3&gt;AIX Notes&lt;/h3&gt; &#xA;&lt;p&gt;AIX compilation using IBM XL C/C++ requires version 12.1 or greater.&lt;/p&gt; &#xA;&lt;p&gt;AIX support for filesystem events requires the non-default IBM &lt;code&gt;bos.ahafs&lt;/code&gt; package to be installed. This package provides the AIX Event Infrastructure that is detected by &lt;code&gt;autoconf&lt;/code&gt;. &lt;a href=&#34;http://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&#34;&gt;IBM documentation&lt;/a&gt; describes the package in more detail.&lt;/p&gt; &#xA;&lt;h3&gt;z/OS Notes&lt;/h3&gt; &#xA;&lt;p&gt;z/OS compilation requires &lt;a href=&#34;https://github.com/ibmruntimes/zoslib&#34;&gt;ZOSLIB&lt;/a&gt; to be installed. When building with &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;, use the flag &lt;code&gt;-DZOSLIB_DIR&lt;/code&gt; to specify the path to &lt;a href=&#34;https://github.com/ibmruntimes/zoslib&#34;&gt;ZOSLIB&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ (cd build &amp;amp;&amp;amp; cmake .. -DBUILD_TESTING=ON -DZOSLIB_DIR=/path/to/zoslib)&#xA;$ cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;z/OS creates System V semaphores and message queues. These persist on the system after the process terminates unless the event loop is closed.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;ipcrm&lt;/code&gt; command to manually clear up System V resources.&lt;/p&gt; &#xA;&lt;h2&gt;Patches&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/libuv/libuv/raw/master/CONTRIBUTING.md&#34;&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eradman/entr</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/eradman/entr</id>
    <link href="https://github.com/eradman/entr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run arbitrary commands when files change&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Event Notify Test Runner&lt;/h1&gt; &#xA;&lt;p&gt;A utility for running arbitrary commands when files change. Uses &lt;a href=&#34;http://man.openbsd.org/kqueue.2&#34;&gt;kqueue(2)&lt;/a&gt; or &lt;a href=&#34;http://man.he.net/?section=all&amp;amp;topic=inotify&#34;&gt;inotify(7)&lt;/a&gt; to avoid polling. &lt;code&gt;entr&lt;/code&gt; was written to make rapid feedback and automated testing natural and completely ordinary.&lt;/p&gt; &#xA;&lt;h2&gt;Source Installation - BSD, Mac OS, and Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see available build options run &lt;code&gt;./configure -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker and WSL&lt;/h2&gt; &#xA;&lt;p&gt;Incomplete inotify support on Windows Subsystem for Linux and Docker for Mac can cause &lt;code&gt;entr&lt;/code&gt; to respond inconsistently. Setting the environment variable &lt;code&gt;ENTR_INOTIFY_WORKAROUND&lt;/code&gt; will enable &lt;code&gt;entr&lt;/code&gt; to operate in these environments.&lt;/p&gt; &#xA;&lt;h2&gt;Linux Features&lt;/h2&gt; &#xA;&lt;p&gt;Symlinks can be monitored for changes by setting the environment variable &lt;code&gt;ENTR_INOTIFY_SYMLINK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Man Page Examples&lt;/h2&gt; &#xA;&lt;p&gt;Rebuild a project if source files change, limiting output to the first 20 lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ find src/ | entr sh -c &#39;make | head -n 20&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch and auto-reload a node.js server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls *.js | entr -r node app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clear the screen and run a query after the SQL script is updated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo my.sql | entr -cp psql -f /_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rebuild project if a source file is modified or added to the src/ directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ while sleep 0.1; do ls src/*.rb | entr -d make; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Auto-reload a web server, or terminate if the server exits&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls * | entr -rz ./httpd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;A release history as well as features in the upcoming release are covered in the &lt;a href=&#34;https://raw.githubusercontent.com/eradman/entr/master/NEWS&#34;&gt;NEWS&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coolsnowwolf/lede</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/coolsnowwolf/lede</id>
    <link href="https://github.com/coolsnowwolf/lede" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean&#39;s OpenWrt source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;欢迎来到 Lean 的 Openwrt 源码仓库&lt;/h1&gt; &#xA;&lt;p&gt;如何编译自己需要的 OpenWrt 固件 &lt;a href=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;不要用 root 用户进行编译&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt; &#xA; &lt;li&gt;默认登陆IP 192.168.1.1 密码 password&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;编译命令&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;首先装好 Linux 系统，推荐 Debian 11 或 Ubuntu LTS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装编译依赖&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \&#xA;git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \&#xA;libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \&#xA;mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \&#xA;rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载源代码，更新 feeds 并选择配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/coolsnowwolf/lede&#xA;cd lede&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make download -j8&#xA;make V=s -j1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;本套代码保证肯定可以编译成功。里面包括了 R21 所有源代码，包括 IPK 的。&lt;/p&gt; &#xA;&lt;p&gt;你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！&lt;/p&gt; &#xA;&lt;p&gt;二次编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd lede&#xA;git pull&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make defconfig&#xA;make download -j8&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要重新配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./tmp &amp;amp;&amp;amp; rm -rf .config&#xA;make menuconfig&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译完成后输出路径：bin/targets&lt;/p&gt; &#xA;&lt;h3&gt;如果你使用 WSL/WSL2 进行编译&lt;/h3&gt; &#xA;&lt;p&gt;由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 &lt;code&gt;make&lt;/code&gt; 前面加上：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS 原生系统进行编译&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在 AppStore 中安装 Xcode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装 Homebrew：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 Homebrew 安装工具链、依赖与基础软件包:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew unlink awk&#xA;brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz&#xA;brew install gcc@11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;然后输入以下命令，添加到系统环境变量中：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;/usr/local/opt/coreutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/findutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-getopt/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-tar/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/grep/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/make/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;重新加载一下 shell 启动文件 &lt;code&gt;source ~/.bashrc&lt;/code&gt;，然后输入 &lt;code&gt;bash&lt;/code&gt; 进入 bash shell，就可以和 Linux 一样正常编译了&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;特别提示&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒。安全干净才是固件应该做到的；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如有技术问题需要讨论，欢迎加入 QQ 讨论群： OP 共享技术交流群 ,号码 297253733 ，加群链接: 点击链接加入群聊【 OP 共享技术交流群】：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5yCRuXL&#34; title=&#34;OP共享技术交流群&#34;&gt;点击加入&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成 报名地址：&lt;a href=&#34;http://forgotfun.org/2018/04/openwrt-training-2018.html&#34; title=&#34;报名&#34;&gt;点击报名&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QCA IPQ60xx 开源仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt-gl-ax1800&#34;&gt;https://github.com/coolsnowwolf/openwrt-gl-ax1800&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;稳定版仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt&#34;&gt;https://github.com/coolsnowwolf/openwrt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;软路由介绍&lt;/h2&gt; &#xA;&lt;p&gt;友情推荐不恰饭：如果你在寻找一个低功耗小体积性能不错的 x86 / x64 路由器，我个人建议可以考虑小马v1 的铝合金版本 (N3710 4千兆)：&lt;a href=&#34;https://item.taobao.com/item.htm?spm=a230r.1.14.20.144c763fRkK0VZ&amp;amp;id=561126544764&#34;&gt;页面介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm5.jpg&#34; alt=&#34;xm1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm6.jpg&#34; alt=&#34;xm2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;捐贈&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善&lt;/p&gt; &#xA;&lt;p&gt;支付宝 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/alipay_donate.jpg&#34; alt=&#34;alipay&#34;&gt; 微信 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/wechat_donate.jpg&#34; alt=&#34;wechat&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>VirusTotal/yara</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/VirusTotal/yara</id>
    <link href="https://github.com/VirusTotal/yara" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The pattern matching swiss knife&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/VirusTotal/yara?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/VirusTotal/yara&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/plusvic/yara&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/7glqg19w4oolm7pr?svg=true&#34; alt=&#34;AppVeyor build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/plusvic-yara&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/9057/badge.svg?flat=1&#34; alt=&#34;Coverity status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;YARA in a nutshell&lt;/h2&gt; &#xA;&lt;p&gt;YARA is a tool aimed at (but not limited to) helping malware researchers to identify and classify malware samples. With YARA you can create descriptions of malware families (or whatever you want to describe) based on textual or binary patterns. Each description, a.k.a. rule, consists of a set of strings and a boolean expression which determine its logic. Let&#39;s see an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yara&#34;&gt;rule silent_banker : banker&#xA;{&#xA;    meta:&#xA;        description = &#34;This is just an example&#34;&#xA;        threat_level = 3&#xA;        in_the_wild = true&#xA;&#xA;    strings:&#xA;        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}&#xA;        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}&#xA;        $c = &#34;UVODFRYSIHLNWPEJXQZAKCBGMT&#34;&#xA;&#xA;    condition:&#xA;        $a or $b or $c&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above rule is telling YARA that any file containing one of the three strings must be reported as &lt;em&gt;silent_banker&lt;/em&gt;. This is just a simple example, more complex and powerful rules can be created by using wild-cards, case-insensitive strings, regular expressions, special operators and many other features that you&#39;ll find explained in &lt;a href=&#34;https://yara.readthedocs.org/&#34;&gt;YARA&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;YARA is multi-platform, running on Windows, Linux and Mac OS X, and can be used through its command-line interface or from your own Python scripts with the yara-python extension.&lt;/p&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;p&gt;Do you use GitHub for storing your YARA rules? &lt;a href=&#34;https://yara-ci.cloud.virustotal.com&#34;&gt;YARA-CI&lt;/a&gt; may be a useful addition to your toolbelt. This is GitHub application that provides continuous testing for your rules, helping you to identify common mistakes and false positives.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to use YARA to scan compressed files (.zip, .tar, etc) you should take a look at &lt;a href=&#34;https://github.com/BayshoreNetworks/yextend&#34;&gt;yextend&lt;/a&gt;, a very helpful extension to YARA developed and open-sourced by Bayshore Networks.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the guys from &lt;a href=&#34;https://inquest.net/&#34;&gt;InQuest&lt;/a&gt; have curated an awesome list of &lt;a href=&#34;https://github.com/InQuest/awesome-yara&#34;&gt;YARA-related stuff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s using YARA&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://activecanopy.com/&#34;&gt;ActiveCanopy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adlice.com/&#34;&gt;Adlice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://otx.alienvault.com/&#34;&gt;AlienVault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.avast.com/&#34;&gt;Avast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.baesystems.com/home?r=ai&#34;&gt;BAE Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bayshorenetworks.com&#34;&gt;Bayshore Networks, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airbnb/binaryalert&#34;&gt;BinaryAlert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blueliv.com&#34;&gt;Blueliv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://talosintelligence.com/&#34;&gt;Cisco Talos Intelligence Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://claroty.com/continuous-threat-detection&#34;&gt;Claroty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloudina.co.uk&#34;&gt;Cloudina Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cofense.com&#34;&gt;Cofense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.conix.fr&#34;&gt;Conix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.countercraft.eu&#34;&gt;CounterCraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cuckoosandbox/cuckoo&#34;&gt;Cuckoo Sandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cybertriage.com&#34;&gt;Cyber Triage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cybereason.com&#34;&gt;Cybereason&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://digitasecurity.com/product/uxprotect&#34;&gt;Digita Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dragos.com/platform/&#34;&gt;Dragos Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dtexsystems.com&#34;&gt;Dtex Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eset.com&#34;&gt;ESET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.estsecurity.com&#34;&gt;ESTsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fidelissecurity.com/network-security-appliance/Fidelis-XPS&#34;&gt;Fidelis XPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fireeye.com&#34;&gt;FireEye, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.forcepoint.com&#34;&gt;Forcepoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fox-it.com&#34;&gt;Fox-IT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmersonElectricCo/fsf&#34;&gt;FSF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.guidancesoftware.com/endpointsecurity&#34;&gt;Guidance Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heroku.com&#34;&gt;Heroku&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hornetsecurity.com/en/&#34;&gt;Hornetsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://icsdefense.net/&#34;&gt;ICS Defense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.inquest.net/&#34;&gt;InQuest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.joesecurity.org&#34;&gt;Joe Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kaspersky.com&#34;&gt;Kaspersky Lab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.knowbe4.com&#34;&gt;KnowBe4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koodous.com/&#34;&gt;Koodous&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lmco/laikaboss&#34;&gt;Laika BOSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lastline.com&#34;&gt;Lastline, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libguestfs.org/&#34;&gt;libguestfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://limacharlie.io/&#34;&gt;LimaCharlie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://malpedia.caad.fkie.fraunhofer.de/&#34;&gt;Malpedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://malwation.com/&#34;&gt;Malwation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mcafee.com/atd&#34;&gt;McAfee Advanced Threat Defense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.metaflows.com&#34;&gt;Metaflows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nbs-system.com/&#34;&gt;NBS System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nextron-systems.com&#34;&gt;Nextron Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nozominetworks.com&#34;&gt;Nozomi Networks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.osquery.io&#34;&gt;osquery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.payload-security.com&#34;&gt;Payload Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phishme.com/&#34;&gt;PhishMe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.picussecurity.com/&#34;&gt;Picus Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rada.re&#34;&gt;Radare2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.raytheoncyber.com/capabilities/products/sureview-threatprotection/&#34;&gt;Raytheon Cyber Products, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redsocks.eu/&#34;&gt;RedSocks Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reversinglabs.com&#34;&gt;ReversingLabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.emc.com/security/rsa-ecat.htm&#34;&gt;RSA ECAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scanii.com&#34;&gt;Scanii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.secondwrite.com&#34;&gt;SecondWrite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sonicwall.com/&#34;&gt;SonicWall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spamstopshere.com&#34;&gt;SpamStopsHere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spyre-project/spyre&#34;&gt;Spyre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stoq.punchcyber.com&#34;&gt;stoQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sumologic.com&#34;&gt;SumoLogic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tanium.com/&#34;&gt;Tanium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tenable.com/&#34;&gt;Tenable Network Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitrustgroup.com/&#34;&gt;The DigiTrust Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.threatconnect.com/&#34;&gt;ThreatConnect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.threatstream.com&#34;&gt;ThreatStream, Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/buffer/thug&#34;&gt;Thug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.touchweb.fr&#34;&gt;TouchWeb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trendmicro.com&#34;&gt;Trend Micro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.virustotal.com/intelligence/&#34;&gt;VirusTotal Intelligence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vmray.com/&#34;&gt;VMRay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.volexity.com/products-overview/volcano/&#34;&gt;Volexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wewatchyourwebsite.com/&#34;&gt;We Watch Your Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x64dbg.com&#34;&gt;x64dbg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Masood-M/YALIH&#34;&gt;YALIH&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Are you using it? Want to see your site listed here?&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>obsproject/obs-studio</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/obsproject/obs-studio</id>
    <link href="https://github.com/obsproject/obs-studio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OBS Studio - Free and open source software for live streaming and screen recording&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OBS Studio &lt;a href=&#34;https://obsproject.com&#34;&gt;https://obsproject.com&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/obsproject/obs-studio/actions/workflows/main.yml/badge.svg?branch=master&amp;amp;event=push&#34;&gt;https://github.com/obsproject/obs-studio/actions/workflows/main.yml/badge.svg?branch=master&amp;amp;event=push&lt;/a&gt; :alt: OBS Studio Build Status - GitHub Actions :target: &lt;a href=&#34;https://github.com/obsproject/obs-studio/actions/workflows/main.yml?query=event%3Apush+branch%3Amaster&#34;&gt;https://github.com/obsproject/obs-studio/actions/workflows/main.yml?query=event%3Apush+branch%3Amaster&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://d322cqt584bo4o.cloudfront.net/obs-studio/localized.svg&#34;&gt;https://d322cqt584bo4o.cloudfront.net/obs-studio/localized.svg&lt;/a&gt; :alt: OBS Studio Translation Project Progress :target: &lt;a href=&#34;https://crowdin.com/project/obs-studio&#34;&gt;https://crowdin.com/project/obs-studio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/discord/348973006581923840.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34;&gt;https://img.shields.io/discord/348973006581923840.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&lt;/a&gt; :alt: OBS Studio Discord Server :target: &lt;a href=&#34;https://obsproject.com/discord&#34;&gt;https://obsproject.com/discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is OBS Studio?&lt;/h2&gt; &#xA;&lt;p&gt;OBS Studio is software designed for capturing, compositing, encoding, recording, and streaming video content, efficiently.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s distributed under the GNU General Public License v2 (or any later version) - see the accompanying COPYING file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Website: &lt;a href=&#34;https://obsproject.com&#34;&gt;https://obsproject.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Help/Documentation/Guides: &lt;a href=&#34;https://github.com/obsproject/obs-studio/wiki&#34;&gt;https://github.com/obsproject/obs-studio/wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Forums: &lt;a href=&#34;https://obsproject.com/forum/&#34;&gt;https://obsproject.com/forum/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build Instructions: &lt;a href=&#34;https://github.com/obsproject/obs-studio/wiki/Install-Instructions&#34;&gt;https://github.com/obsproject/obs-studio/wiki/Install-Instructions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer/API Documentation: &lt;a href=&#34;https://obsproject.com/docs&#34;&gt;https://obsproject.com/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Donating/backing/sponsoring: &lt;a href=&#34;https://obsproject.com/contribute&#34;&gt;https://obsproject.com/contribute&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bug Tracker: &lt;a href=&#34;https://github.com/obsproject/obs-studio/issues&#34;&gt;https://github.com/obsproject/obs-studio/issues&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you would like to help fund or sponsor the project, you can do so via &lt;code&gt;Patreon &amp;lt;https://www.patreon.com/obsproject&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;OpenCollective &amp;lt;https://opencollective.com/obsproject&amp;gt;&lt;/code&gt;&lt;/em&gt;, or &lt;code&gt;PayPal &amp;lt;https://www.paypal.me/obsproject&amp;gt;&lt;/code&gt;&lt;em&gt;. See our &lt;code&gt;contribute page &amp;lt;https://obsproject.com/contribute&amp;gt;&lt;/code&gt;&lt;/em&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to contribute code to the project, please make sure to read the coding and commit guidelines: &lt;a href=&#34;https://github.com/obsproject/obs-studio/raw/master/CONTRIBUTING.rst&#34;&gt;https://github.com/obsproject/obs-studio/blob/master/CONTRIBUTING.rst&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer/API documentation can be found here: &lt;a href=&#34;https://obsproject.com/docs&#34;&gt;https://obsproject.com/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to contribute translations, do not submit pull requests. Instead, please use Crowdin. For more information read this thread: &lt;a href=&#34;https://obsproject.com/forum/threads/how-to-contribute-translations-for-obs.16327/&#34;&gt;https://obsproject.com/forum/threads/how-to-contribute-translations-for-obs.16327/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other ways to contribute are by helping people out with support on our forums or in our community chat. Please limit support to topics you fully understand -- bad advice is worse than no advice. When it comes to something that you don&#39;t fully know or understand, please defer to the official help or official channels.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Genymobile/scrcpy</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/Genymobile/scrcpy</id>
    <link href="https://github.com/Genymobile/scrcpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display and control your Android device&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scrcpy (v1.24)&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/app/data/icon.svg?sanitize=true&#34; width=&#34;128&#34; height=&#34;128&#34; alt=&#34;scrcpy&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;pronounced &#34;&lt;strong&gt;scr&lt;/strong&gt;een &lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;py&lt;/strong&gt;&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#translations&#34;&gt;Read in another language&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This application provides display and control of Android devices connected via USB or &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#tcpip-wireless&#34;&gt;over TCP/IP&lt;/a&gt;. It does not require any &lt;em&gt;root&lt;/em&gt; access. It works on &lt;em&gt;GNU/Linux&lt;/em&gt;, &lt;em&gt;Windows&lt;/em&gt; and &lt;em&gt;macOS&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/assets/screenshot-debian-600.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It focuses on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;lightness&lt;/strong&gt;: native, displays only the device screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt;: 30~120fps, depending on the device&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;quality&lt;/strong&gt;: 1920×1080 or above&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;low latency&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Genymobile/scrcpy/pull/646&#34;&gt;35~70ms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;low startup time&lt;/strong&gt;: ~1 second to display the first image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;non-intrusiveness&lt;/strong&gt;: nothing is left installed on the Android device&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;user benefits&lt;/strong&gt;: no account, no ads, no internet required&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;freedom&lt;/strong&gt;: free and open source software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Its features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#recording&#34;&gt;recording&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;mirroring with &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#turn-screen-off&#34;&gt;Android device screen off&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#copy-paste&#34;&gt;copy-paste&lt;/a&gt; in both directions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#capture-configuration&#34;&gt;configurable quality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android device &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#v4l2loopback&#34;&gt;as a webcam (V4L2)&lt;/a&gt; (Linux-only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#physical-keyboard-simulation-hid&#34;&gt;physical keyboard simulation (HID)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#physical-mouse-simulation-hid&#34;&gt;physical mouse simulation (HID)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#otg&#34;&gt;OTG mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and more…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Android device requires at least API 21 (Android 5.0).&lt;/p&gt; &#xA;&lt;p&gt;Make sure you &lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html#Enabling&#34;&gt;enable adb debugging&lt;/a&gt; on your device(s).&lt;/p&gt; &#xA;&lt;p&gt;On some devices, you also need to enable &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/70#issuecomment-373286323&#34;&gt;an additional option&lt;/a&gt; to control it using a keyboard and mouse.&lt;/p&gt; &#xA;&lt;h2&gt;Get the app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/scrcpy/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/scrcpy.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;apt install scrcpy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/download/v1.24/scrcpy-win64-v1.24.zip&#34;&gt;download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;brew install scrcpy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Build from sources: &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md#simple&#34;&gt;simplified process&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Debian and Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Snappy_(package_manager)&#34;&gt;Snap&lt;/a&gt; package is available: &lt;a href=&#34;https://snapstats.org/snaps/scrcpy&#34;&gt;&lt;code&gt;scrcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Fedora, a &lt;a href=&#34;https://fedoraproject.org/wiki/Category:Copr&#34;&gt;COPR&lt;/a&gt; package is available: &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/zeno/scrcpy/&#34;&gt;&lt;code&gt;scrcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Gentoo, an &lt;a href=&#34;https://wiki.gentoo.org/wiki/Ebuild&#34;&gt;Ebuild&lt;/a&gt; is available: &lt;a href=&#34;https://github.com/maggu2810/maggu2810-overlay/tree/master/app-mobilephone/scrcpy&#34;&gt;&lt;code&gt;scrcpy/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md#simple&#34;&gt;simplified process&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;For Windows, a prebuilt archive with all the dependencies (including &lt;code&gt;adb&lt;/code&gt;) is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/download/v1.24/scrcpy-win64-v1.24.zip&#34;&gt;&lt;code&gt;scrcpy-win64-v1.24.zip&lt;/code&gt;&lt;/a&gt;&lt;br&gt; &lt;sub&gt;SHA-256: &lt;code&gt;6ccb64cba0a3e75715e85a188daeb4f306a1985f8ce123eba92ba74fc9b27367&lt;/code&gt;&lt;/sub&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is also available in &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install scrcpy&#xA;choco install adb    # if you don&#39;t have it yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop install scrcpy&#xA;scoop install adb    # if you don&#39;t have it yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;The application is available in &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Just install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need &lt;code&gt;adb&lt;/code&gt;, accessible from your &lt;code&gt;PATH&lt;/code&gt;. If you don&#39;t have it yet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install android-platform-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also available in &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;, which sets up &lt;code&gt;adb&lt;/code&gt; for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Plug an Android device into your computer, and execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It accepts command-line arguments, listed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Capture configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Reduce size&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes, it is useful to mirror an Android device at a lower resolution to increase performance.&lt;/p&gt; &#xA;&lt;p&gt;To limit both the width and height to some value (e.g. 1024):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --max-size 1024&#xA;scrcpy -m 1024  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other dimension is computed so that the Android device aspect ratio is preserved. That way, a device in 1920×1080 will be mirrored at 1024×576.&lt;/p&gt; &#xA;&lt;h4&gt;Change bit-rate&lt;/h4&gt; &#xA;&lt;p&gt;The default bit-rate is 8 Mbps. To change the video bitrate (e.g. to 2 Mbps):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --bit-rate 2M&#xA;scrcpy -b 2M  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Limit frame rate&lt;/h4&gt; &#xA;&lt;p&gt;The capture frame rate can be limited:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --max-fps 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is officially supported since Android 10, but may work on earlier versions.&lt;/p&gt; &#xA;&lt;p&gt;The actual capture framerate may be printed to the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy --print-fps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may also be enabled or disabled at any time with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Crop&lt;/h4&gt; &#xA;&lt;p&gt;The device screen may be cropped to mirror only part of the screen.&lt;/p&gt; &#xA;&lt;p&gt;This is useful, for example, to mirror only one eye of the Oculus Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --crop 1224:1440:0:0   # 1224x1440 at offset (0,0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;--max-size&lt;/code&gt; is also specified, resizing is applied after cropping.&lt;/p&gt; &#xA;&lt;h4&gt;Lock video orientation&lt;/h4&gt; &#xA;&lt;p&gt;To lock the orientation of the mirroring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --lock-video-orientation     # initial (current) orientation&#xA;scrcpy --lock-video-orientation=0   # natural orientation&#xA;scrcpy --lock-video-orientation=1   # 90° counterclockwise&#xA;scrcpy --lock-video-orientation=2   # 180°&#xA;scrcpy --lock-video-orientation=3   # 90° clockwise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This affects recording orientation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#rotation&#34;&gt;window may also be rotated&lt;/a&gt; independently.&lt;/p&gt; &#xA;&lt;h4&gt;Encoder&lt;/h4&gt; &#xA;&lt;p&gt;Some devices have more than one encoder, and some of them may cause issues or crash. It is possible to select a different encoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --encoder OMX.qcom.video.encoder.avc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list the available encoders, you can pass an invalid encoder name; the error will give the available encoders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --encoder _&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capture&lt;/h3&gt; &#xA;&lt;h4&gt;Recording&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to record the screen while mirroring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --record file.mp4&#xA;scrcpy -r file.mkv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable mirroring while recording:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-display --record file.mp4&#xA;scrcpy -Nr file.mkv&#xA;# interrupt recording with Ctrl+C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Skipped frames&#34; are recorded, even if they are not displayed in real time (for performance reasons). Frames are &lt;em&gt;timestamped&lt;/em&gt; on the device, so &lt;a href=&#34;https://en.wikipedia.org/wiki/Packet_delay_variation&#34;&gt;packet delay variation&lt;/a&gt; does not impact the recorded file.&lt;/p&gt; &#xA;&lt;h4&gt;v4l2loopback&lt;/h4&gt; &#xA;&lt;p&gt;On Linux, it is possible to send the video stream to a v4l2 loopback device, so that the Android device can be opened like a webcam by any v4l2-capable tool.&lt;/p&gt; &#xA;&lt;p&gt;The module &lt;code&gt;v4l2loopback&lt;/code&gt; must be installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install v4l2loopback-dkms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a v4l2 device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe v4l2loopback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new video device in &lt;code&gt;/dev/videoN&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer (more &lt;a href=&#34;https://github.com/umlaeute/v4l2loopback#options&#34;&gt;options&lt;/a&gt; are available to create several devices or devices with specific IDs).&lt;/p&gt; &#xA;&lt;p&gt;To list the enabled devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# requires v4l-utils package&#xA;v4l2-ctl --list-devices&#xA;&#xA;# simple but might be sufficient&#xA;ls /dev/video*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start &lt;code&gt;scrcpy&lt;/code&gt; using a v4l2 sink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --v4l2-sink=/dev/videoN&#xA;scrcpy --v4l2-sink=/dev/videoN --no-display  # disable mirroring window&#xA;scrcpy --v4l2-sink=/dev/videoN -N            # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(replace &lt;code&gt;N&lt;/code&gt; with the device ID, check with &lt;code&gt;ls /dev/video*&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Once enabled, you can open your video stream with a v4l2-capable tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffplay -i /dev/videoN&#xA;vlc v4l2:///dev/videoN   # VLC might add some buffering delay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, you could capture the video within &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Buffering&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to add buffering. This increases latency, but reduces jitter (see &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/2464&#34;&gt;#2464&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The option is available for display buffering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --display-buffer=50  # add 50 ms buffering for display&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and V4L2 sink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --v4l2-buffer=500    # add 500 ms buffering for v4l2 sink&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connection&lt;/h3&gt; &#xA;&lt;h4&gt;TCP/IP (wireless)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Scrcpy&lt;/em&gt; uses &lt;code&gt;adb&lt;/code&gt; to communicate with the device, and &lt;code&gt;adb&lt;/code&gt; can &lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html#wireless&#34;&gt;connect&lt;/a&gt; to a device over TCP/IP. The device must be connected on the same network as the computer.&lt;/p&gt; &#xA;&lt;h5&gt;Automatic&lt;/h5&gt; &#xA;&lt;p&gt;An option &lt;code&gt;--tcpip&lt;/code&gt; allows to configure the connection automatically. There are two variants.&lt;/p&gt; &#xA;&lt;p&gt;If the device (accessible at 192.168.1.1 in this example) already listens on a port (typically 5555) for incoming &lt;em&gt;adb&lt;/em&gt; connections, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --tcpip=192.168.1.1       # default port is 5555&#xA;scrcpy --tcpip=192.168.1.1:5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;em&gt;adb&lt;/em&gt; TCP/IP mode is disabled on the device (or if you don&#39;t know the IP address), connect the device over USB, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --tcpip    # without arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will automatically find the device IP address, enable TCP/IP mode, then connect to the device before starting.&lt;/p&gt; &#xA;&lt;h5&gt;Manual&lt;/h5&gt; &#xA;&lt;p&gt;Alternatively, it is possible to enable the TCP/IP connection manually using &lt;code&gt;adb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Plug the device into a USB port on your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect the device to the same Wi-Fi network as your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get your device IP address, in Settings → About phone → Status, or by executing this command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell ip route | awk &#39;{print $9}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;adb&lt;/code&gt; over TCP/IP on your device: &lt;code&gt;adb tcpip 5555&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unplug your device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your device: &lt;code&gt;adb connect DEVICE_IP:5555&lt;/code&gt; &lt;em&gt;(replace &lt;code&gt;DEVICE_IP&lt;/code&gt; with the device IP address you found)&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;scrcpy&lt;/code&gt; as usual.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Since Android 11, a &lt;a href=&#34;https://developer.android.com/studio/command-line/adb#connect-to-a-device-over-wi-fi-android-11+&#34;&gt;Wireless debugging option&lt;/a&gt; allows to bypass having to physically connect your device directly to your computer.&lt;/p&gt; &#xA;&lt;p&gt;If the connection randomly drops, run your &lt;code&gt;scrcpy&lt;/code&gt; command to reconnect. If it says there are no devices/emulators found, try running &lt;code&gt;adb connect DEVICE_IP:5555&lt;/code&gt; again, and then &lt;code&gt;scrcpy&lt;/code&gt; as usual. If it still says there are none found, try running &lt;code&gt;adb disconnect&lt;/code&gt;, and then run those two commands again.&lt;/p&gt; &#xA;&lt;p&gt;It may be useful to decrease the bit-rate and the resolution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --bit-rate 2M --max-size 800&#xA;scrcpy -b2M -m800  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-devices&lt;/h4&gt; &#xA;&lt;p&gt;If several devices are listed in &lt;code&gt;adb devices&lt;/code&gt;, you can specify the &lt;em&gt;serial&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --serial 0123456789abcdef&#xA;scrcpy -s 0123456789abcdef  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The serial may also be provided via the environment variable &lt;code&gt;ANDROID_SERIAL&lt;/code&gt; (also used by &lt;code&gt;adb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If the device is connected over TCP/IP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --serial 192.168.0.1:5555&#xA;scrcpy -s 192.168.0.1:5555  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If only one device is connected via either USB or TCP/IP, it is possible to select it automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Select the only device connected via USB&#xA;scrcpy -d             # like adb -d&#xA;scrcpy --select-usb   # long version&#xA;&#xA;# Select the only device connected via TCP/IP&#xA;scrcpy -e             # like adb -e&#xA;scrcpy --select-tcpip # long version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can start several instances of &lt;em&gt;scrcpy&lt;/em&gt; for several devices.&lt;/p&gt; &#xA;&lt;h4&gt;Autostart on device connection&lt;/h4&gt; &#xA;&lt;p&gt;You could use &lt;a href=&#34;https://github.com/rom1v/autoadb&#34;&gt;AutoAdb&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;autoadb scrcpy -s &#39;{}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tunnels&lt;/h4&gt; &#xA;&lt;p&gt;To connect to a remote device, it is possible to connect a local &lt;code&gt;adb&lt;/code&gt; client to a remote &lt;code&gt;adb&lt;/code&gt; server (provided they use the same version of the &lt;em&gt;adb&lt;/em&gt; protocol).&lt;/p&gt; &#xA;&lt;h5&gt;Remote ADB server&lt;/h5&gt; &#xA;&lt;p&gt;To connect to a remote &lt;em&gt;adb server&lt;/em&gt;, make the server listen on all interfaces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb kill-server&#xA;adb -a nodaemon server start&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: all communications between clients and the &lt;em&gt;adb server&lt;/em&gt; are unencrypted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suppose that this server is accessible at 192.168.1.2. Then, from another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:192.168.1.2:5037&#xA;scrcpy --tunnel-host=192.168.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;scrcpy&lt;/code&gt; uses the local port used for &lt;code&gt;adb forward&lt;/code&gt; tunnel establishment (typically &lt;code&gt;27183&lt;/code&gt;, see &lt;code&gt;--port&lt;/code&gt;). It is also possible to force a different tunnel port (it may be useful in more complex situations, when more redirections are involved):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy --tunnel-port=1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;SSH tunnel&lt;/h5&gt; &#xA;&lt;p&gt;To communicate with a remote &lt;em&gt;adb server&lt;/em&gt; securely, it is preferable to use an SSH tunnel.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure the &lt;em&gt;adb server&lt;/em&gt; is running on the remote computer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb start-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, establish an SSH tunnel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# local  5038 --&amp;gt; remote  5037&#xA;# local 27183 &amp;lt;-- remote 27183&#xA;ssh -CN -L5038:localhost:5037 -R27183:localhost:27183 your_remote_computer&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:localhost:5038&#xA;scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid enabling remote port forwarding, you could force a forward connection instead (notice the &lt;code&gt;-L&lt;/code&gt; instead of &lt;code&gt;-R&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# local  5038 --&amp;gt; remote  5037&#xA;# local 27183 --&amp;gt; remote 27183&#xA;ssh -CN -L5038:localhost:5037 -L27183:localhost:27183 your_remote_computer&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:localhost:5038&#xA;scrcpy --force-adb-forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like for wireless connections, it may be useful to reduce quality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy -b2M -m800 --max-fps 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Title&lt;/h4&gt; &#xA;&lt;p&gt;By default, the window title is the device model. It can be changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-title &#39;My device&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Position and size&lt;/h4&gt; &#xA;&lt;p&gt;The initial window position and size may be specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-x 100 --window-y 100 --window-width 800 --window-height 600&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Borderless&lt;/h4&gt; &#xA;&lt;p&gt;To disable window decorations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-borderless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Always on top&lt;/h4&gt; &#xA;&lt;p&gt;To keep the &lt;em&gt;scrcpy&lt;/em&gt; window always on top:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --always-on-top&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fullscreen&lt;/h4&gt; &#xA;&lt;p&gt;The app may be started directly in fullscreen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --fullscreen&#xA;scrcpy -f  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fullscreen can then be toggled dynamically with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Rotation&lt;/h4&gt; &#xA;&lt;p&gt;The window may be rotated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --rotation 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: no rotation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: 90 degrees counterclockwise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: 180 degrees&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3&lt;/code&gt;: 90 degrees clockwise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rotation can also be changed dynamically with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; &lt;em&gt;(left)&lt;/em&gt; and &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; &lt;em&gt;(right)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;em&gt;scrcpy&lt;/em&gt; manages 3 different rotations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; requests the device to switch between portrait and landscape (the current running app may refuse, if it does not support the requested orientation).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#lock-video-orientation&#34;&gt;&lt;code&gt;--lock-video-orientation&lt;/code&gt;&lt;/a&gt; changes the mirroring orientation (the orientation of the video sent from the device to the computer). This affects the recording.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--rotation&lt;/code&gt; (or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt;/&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt;) rotates only the window content. This affects only the display, not the recording.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other mirroring options&lt;/h3&gt; &#xA;&lt;h4&gt;Read-only&lt;/h4&gt; &#xA;&lt;p&gt;To disable controls (everything which can interact with the device: input keys, mouse events, drag&amp;amp;drop files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-control&#xA;scrcpy -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Display&lt;/h4&gt; &#xA;&lt;p&gt;If several displays are available, it is possible to select the display to mirror:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --display 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of display ids can be retrieved by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell dumpsys display   # search &#34;mDisplayId=&#34; in the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The secondary display may only be controlled if the device runs at least Android 10 (otherwise it is mirrored as read-only).&lt;/p&gt; &#xA;&lt;h4&gt;Stay awake&lt;/h4&gt; &#xA;&lt;p&gt;To prevent the device from sleeping after a delay when the device is plugged in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --stay-awake&#xA;scrcpy -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The initial state is restored when &lt;em&gt;scrcpy&lt;/em&gt; is closed.&lt;/p&gt; &#xA;&lt;h4&gt;Turn screen off&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to turn the device screen off while mirroring on start with a command-line option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --turn-screen-off&#xA;scrcpy -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by pressing &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt; at any time.&lt;/p&gt; &#xA;&lt;p&gt;To turn it back on, press &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Android, the &lt;code&gt;POWER&lt;/code&gt; button always turns the screen on. For convenience, if &lt;code&gt;POWER&lt;/code&gt; is sent via &lt;em&gt;scrcpy&lt;/em&gt; (via right-click or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;), it will force to turn the screen off after a small delay (on a best effort basis). The physical &lt;code&gt;POWER&lt;/code&gt; button will still cause the screen to be turned on.&lt;/p&gt; &#xA;&lt;p&gt;It can also be useful to prevent the device from sleeping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --turn-screen-off --stay-awake&#xA;scrcpy -Sw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Power off on close&lt;/h4&gt; &#xA;&lt;p&gt;To turn the device screen off when closing &lt;em&gt;scrcpy&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --power-off-on-close&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Power on on start&lt;/h4&gt; &#xA;&lt;p&gt;By default, on start, the device is powered on.&lt;/p&gt; &#xA;&lt;p&gt;To prevent this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-power-on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Show touches&lt;/h4&gt; &#xA;&lt;p&gt;For presentations, it may be useful to show physical touches (on the physical device).&lt;/p&gt; &#xA;&lt;p&gt;Android provides this feature in &lt;em&gt;Developers options&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Scrcpy&lt;/em&gt; provides an option to enable this feature on start and restore the initial value on exit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --show-touches&#xA;scrcpy -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it only shows &lt;em&gt;physical&lt;/em&gt; touches (by a finger on the device).&lt;/p&gt; &#xA;&lt;h4&gt;Disable screensaver&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; does not prevent the screensaver from running on the computer.&lt;/p&gt; &#xA;&lt;p&gt;To disable it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --disable-screensaver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Input control&lt;/h3&gt; &#xA;&lt;h4&gt;Rotate device screen&lt;/h4&gt; &#xA;&lt;p&gt;Press &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; to switch between portrait and landscape modes.&lt;/p&gt; &#xA;&lt;p&gt;Note that it rotates only if the application in foreground supports the requested orientation.&lt;/p&gt; &#xA;&lt;h4&gt;Copy-paste&lt;/h4&gt; &#xA;&lt;p&gt;Any time the Android clipboard changes, it is automatically synchronized to the computer clipboard.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;kbd&gt;Ctrl&lt;/kbd&gt; shortcut is forwarded to the device. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; typically copies&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; typically cuts&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; typically pastes (after computer-to-device clipboard synchronization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This typically works as you expect.&lt;/p&gt; &#xA;&lt;p&gt;The actual behavior depends on the active application though. For example, &lt;em&gt;Termux&lt;/em&gt; sends SIGINT on &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; instead, and &lt;em&gt;K-9 Mail&lt;/em&gt; composes a new message.&lt;/p&gt; &#xA;&lt;p&gt;To copy, cut and paste in such cases (but only supported on Android &amp;gt;= 7):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; injects &lt;code&gt;COPY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; injects &lt;code&gt;CUT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; injects &lt;code&gt;PASTE&lt;/code&gt; (after computer-to-device clipboard synchronization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; injects the computer clipboard text as a sequence of key events. This is useful when the component does not accept text pasting (for example in &lt;em&gt;Termux&lt;/em&gt;), but it can break non-ASCII content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; Pasting the computer clipboard to the device (either via &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;) copies the content into the Android clipboard. As a consequence, any Android application could read its content. You should avoid pasting sensitive content (like passwords) that way.&lt;/p&gt; &#xA;&lt;p&gt;Some Android devices do not behave as expected when setting the device clipboard programmatically. An option &lt;code&gt;--legacy-paste&lt;/code&gt; is provided to change the behavior of &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; and &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; so that they also inject the computer clipboard text as a sequence of key events (the same way as &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To disable automatic clipboard synchronization, use &lt;code&gt;--no-clipboard-autosync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Pinch-to-zoom&lt;/h4&gt; &#xA;&lt;p&gt;To simulate &#34;pinch-to-zoom&#34;: &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;click-and-move&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More precisely, hold down &lt;kbd&gt;Ctrl&lt;/kbd&gt; while pressing the left-click button. Until the left-click button is released, all mouse movements scale and rotate the content (if supported by the app) relative to the center of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Technically, &lt;em&gt;scrcpy&lt;/em&gt; generates additional touch events from a &#34;virtual finger&#34; at a location inverted through the center of the screen.&lt;/p&gt; &#xA;&lt;h4&gt;Physical keyboard simulation (HID)&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; uses Android key or text injection: it works everywhere, but is limited to ASCII.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;scrcpy&lt;/code&gt; can simulate a physical USB keyboard on Android to provide a better input experience (using &lt;a href=&#34;https://source.android.com/devices/accessories/aoa2#hid-support&#34;&gt;USB HID over AOAv2&lt;/a&gt;): the virtual keyboard is disabled and it works for all characters and IME.&lt;/p&gt; &#xA;&lt;p&gt;However, it only works if the device is connected via USB.&lt;/p&gt; &#xA;&lt;p&gt;Note: On Windows, it may only work in &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#otg&#34;&gt;OTG mode&lt;/a&gt;, not while mirroring (it is not possible to open a USB device if it is already open by another process like the &lt;em&gt;adb daemon&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --hid-keyboard&#xA;scrcpy -K  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it fails for some reason (for example because the device is not connected via USB), it automatically fallbacks to the default mode (with a log in the console). This allows using the same command line options when connected over USB and TCP/IP.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, raw key events (scancodes) are sent to the device, independently of the host key mapping. Therefore, if your keyboard layout does not match, it must be configured on the Android device, in Settings → System → Languages and input → &lt;a href=&#34;https://github.com/Genymobile/scrcpy/pull/2632#issuecomment-923756915&#34;&gt;Physical keyboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This settings page can be started directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell am start -a android.settings.HARD_KEYBOARD_SETTINGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the option is only available when the HID keyboard is enabled (or when a physical keyboard is connected).&lt;/p&gt; &#xA;&lt;h4&gt;Physical mouse simulation (HID)&lt;/h4&gt; &#xA;&lt;p&gt;Similarly to the physical keyboard simulation, it is possible to simulate a physical mouse. Likewise, it only works if the device is connected by USB.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; uses Android mouse events injection with absolute coordinates. By simulating a physical mouse, a mouse pointer appears on the Android device, and relative mouse motion, clicks and scrolls are injected.&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --hid-mouse&#xA;scrcpy -M  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;--forward-all-clicks&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#right-click-and-middle-click&#34;&gt;forward all mouse buttons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When this mode is enabled, the computer mouse is &#34;captured&#34; (the mouse pointer disappears from the computer and appears on the Android device instead).&lt;/p&gt; &#xA;&lt;p&gt;Special capture keys, either &lt;kbd&gt;Alt&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;, toggle (disable or enable) the mouse capture. Use one of them to give the control of the mouse back to the computer.&lt;/p&gt; &#xA;&lt;h4&gt;OTG&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to run &lt;em&gt;scrcpy&lt;/em&gt; with only physical keyboard and mouse simulation (HID), as if the computer keyboard and mouse were plugged directly to the device via an OTG cable.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, &lt;code&gt;adb&lt;/code&gt; (USB debugging) is not necessary, and mirroring is disabled.&lt;/p&gt; &#xA;&lt;p&gt;To enable OTG mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --otg&#xA;# Pass the serial if several USB devices are available&#xA;scrcpy --otg -s 0123456789abcdef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to enable only HID keyboard or HID mouse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --otg --hid-keyboard              # keyboard only&#xA;scrcpy --otg --hid-mouse                 # mouse only&#xA;scrcpy --otg --hid-keyboard --hid-mouse  # keyboard and mouse&#xA;# for convenience, enable both by default&#xA;scrcpy --otg                             # keyboard and mouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;--hid-keyboard&lt;/code&gt; and &lt;code&gt;--hid-mouse&lt;/code&gt;, it only works if the device is connected by USB.&lt;/p&gt; &#xA;&lt;h4&gt;Text injection preference&lt;/h4&gt; &#xA;&lt;p&gt;Two kinds of &lt;a href=&#34;https://blog.rom1v.com/2018/03/introducing-scrcpy/#handle-text-input&#34;&gt;events&lt;/a&gt; are generated when typing text:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;key events&lt;/em&gt;, signaling that a key is pressed or released;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;text events&lt;/em&gt;, signaling that a text has been entered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, letters are injected using key events, so that the keyboard behaves as expected in games (typically for WASD keys).&lt;/p&gt; &#xA;&lt;p&gt;But this may &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/650#issuecomment-512945343&#34;&gt;cause issues&lt;/a&gt;. If you encounter such a problem, you can avoid it by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --prefer-text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(but this will break keyboard behavior in games)&lt;/p&gt; &#xA;&lt;p&gt;On the contrary, you could force to always inject raw key events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --raw-key-events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options have no effect on HID keyboard (all key events are sent as scancodes in this mode).&lt;/p&gt; &#xA;&lt;h4&gt;Key repeat&lt;/h4&gt; &#xA;&lt;p&gt;By default, holding a key down generates repeated key events. This can cause performance problems in some games, where these events are useless anyway.&lt;/p&gt; &#xA;&lt;p&gt;To avoid forwarding repeated key events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-key-repeat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option has no effect on HID keyboard (key repeat is handled by Android directly in this mode).&lt;/p&gt; &#xA;&lt;h4&gt;Right-click and middle-click&lt;/h4&gt; &#xA;&lt;p&gt;By default, right-click triggers BACK (or POWER on) and middle-click triggers HOME. To disable these shortcuts and forward the clicks to the device instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --forward-all-clicks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File drop&lt;/h3&gt; &#xA;&lt;h4&gt;Install APK&lt;/h4&gt; &#xA;&lt;p&gt;To install an APK, drag &amp;amp; drop an APK file (ending with &lt;code&gt;.apk&lt;/code&gt;) to the &lt;em&gt;scrcpy&lt;/em&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;There is no visual feedback, a log is printed to the console.&lt;/p&gt; &#xA;&lt;h4&gt;Push file to device&lt;/h4&gt; &#xA;&lt;p&gt;To push a file to &lt;code&gt;/sdcard/Download/&lt;/code&gt; on the device, drag &amp;amp; drop a (non-APK) file to the &lt;em&gt;scrcpy&lt;/em&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;There is no visual feedback, a log is printed to the console.&lt;/p&gt; &#xA;&lt;p&gt;The target directory can be changed on start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --push-target=/sdcard/Movies/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Audio forwarding&lt;/h3&gt; &#xA;&lt;p&gt;Audio is not forwarded by &lt;em&gt;scrcpy&lt;/em&gt;. Use &lt;a href=&#34;https://github.com/rom1v/sndcpy&#34;&gt;sndcpy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/14&#34;&gt;issue #14&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;In the following list, &lt;kbd&gt;MOD&lt;/kbd&gt; is the shortcut modifier. By default, it&#39;s (left) &lt;kbd&gt;Alt&lt;/kbd&gt; or (left) &lt;kbd&gt;Super&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be changed using &lt;code&gt;--shortcut-mod&lt;/code&gt;. Possible keys are &lt;code&gt;lctrl&lt;/code&gt;, &lt;code&gt;rctrl&lt;/code&gt;, &lt;code&gt;lalt&lt;/code&gt;, &lt;code&gt;ralt&lt;/code&gt;, &lt;code&gt;lsuper&lt;/code&gt; and &lt;code&gt;rsuper&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use RCtrl for shortcuts&#xA;scrcpy --shortcut-mod=rctrl&#xA;&#xA;# use either LCtrl+LAlt or LSuper for shortcuts&#xA;scrcpy --shortcut-mod=lctrl+lalt,lsuper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;kbd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Super_key_(keyboard_button)&#34;&gt;Super&lt;/a&gt;&lt;/kbd&gt; is typically the &lt;kbd&gt;Windows&lt;/kbd&gt; or &lt;kbd&gt;Cmd&lt;/kbd&gt; key.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Shortcut&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Switch fullscreen mode&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate display left&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; &lt;em&gt;(left)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate display right&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; &lt;em&gt;(right)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resize window to 1:1 (pixel-perfect)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;g&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resize window to remove black borders&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;w&lt;/kbd&gt; | &lt;em&gt;Double-left-click¹&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;h&lt;/kbd&gt; | &lt;em&gt;Middle-click&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;BACK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;b&lt;/kbd&gt; | &lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;APP_SWITCH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;s&lt;/kbd&gt; | &lt;em&gt;4th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;MENU&lt;/code&gt; (unlock screen)⁴&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;m&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;VOLUME_UP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; &lt;em&gt;(up)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;VOLUME_DOWN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; &lt;em&gt;(down)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;POWER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Power on&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turn device screen off (keep mirroring)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turn device screen on&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate device screen&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expand notification panel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; | &lt;em&gt;5th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expand settings panel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; | &lt;em&gt;Double-5th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Collapse panels&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Copy to clipboard⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cut to clipboard⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Synchronize clipboards and paste⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inject computer clipboard text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enable/disable FPS counter (on stdout)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pinch-to-zoom&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;click-and-move&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drag &amp;amp; drop APK file&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Install APK from computer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drag &amp;amp; drop non-APK file&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#push-file-to-device&#34;&gt;Push file to device&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;¹Double-click on black borders to remove them.&lt;/em&gt;&lt;br&gt; &lt;em&gt;²Right-click turns the screen on if it was off, presses BACK otherwise.&lt;/em&gt;&lt;br&gt; &lt;em&gt;³4th and 5th mouse buttons, if your mouse has them.&lt;/em&gt;&lt;br&gt; &lt;em&gt;⁴For react-native apps in development, &lt;code&gt;MENU&lt;/code&gt; triggers development menu.&lt;/em&gt;&lt;br&gt; &lt;em&gt;⁵Only on Android &amp;gt;= 7.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shortcuts with repeated keys are executed by releasing and pressing the key a second time. For example, to execute &#34;Expand settings panel&#34;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Press and keep pressing &lt;kbd&gt;MOD&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then double-press &lt;kbd&gt;n&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Finally, release &lt;kbd&gt;MOD&lt;/kbd&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;key&lt;/em&gt; shortcuts are forwarded to the device, so they are handled by the active application.&lt;/p&gt; &#xA;&lt;h2&gt;Custom paths&lt;/h2&gt; &#xA;&lt;p&gt;To use a specific &lt;code&gt;adb&lt;/code&gt; binary, configure its path in the environment variable &lt;code&gt;ADB&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ADB=/path/to/adb scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To override the path of the &lt;code&gt;scrcpy-server&lt;/code&gt; file, configure its path in &lt;code&gt;SCRCPY_SERVER_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To override the icon, configure its path in &lt;code&gt;SCRCPY_ICON_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why the name &lt;em&gt;scrcpy&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;A colleague challenged me to find a name as unpronounceable as &lt;a href=&#34;https://github.com/Genymobile/gnirehtet&#34;&gt;gnirehtet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man3/strcpy.3.html&#34;&gt;&lt;code&gt;strcpy&lt;/code&gt;&lt;/a&gt; copies a &lt;strong&gt;str&lt;/strong&gt;ing; &lt;code&gt;scrcpy&lt;/code&gt; copies a &lt;strong&gt;scr&lt;/strong&gt;een.&lt;/p&gt; &#xA;&lt;h2&gt;How to build?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Common issues&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/DEVELOP.md&#34;&gt;developers page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2018 Genymobile&#xA;Copyright (C) 2018-2022 Romain Vimont&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.rom1v.com/2018/03/introducing-scrcpy/&#34;&gt;Introducing scrcpy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.genymotion.com/blog/open-source-project-scrcpy-now-works-wirelessly/&#34;&gt;Scrcpy now works wirelessly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter a bug, please read the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; first, then open an &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For general questions or discussions, you can also use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/scrcpy&#34;&gt;&lt;code&gt;r/scrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/scrcpy_app&#34;&gt;&lt;code&gt;@scrcpy_app&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This README is available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.de.md&#34;&gt;Deutsch (German, &lt;code&gt;de&lt;/code&gt;) - v1.22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.id.md&#34;&gt;Indonesian (Indonesia, &lt;code&gt;id&lt;/code&gt;) - v1.16&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.it.md&#34;&gt;Italiano (Italiano, &lt;code&gt;it&lt;/code&gt;) - v1.23&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.jp.md&#34;&gt;日本語 (Japanese, &lt;code&gt;jp&lt;/code&gt;) - v1.19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.ko.md&#34;&gt;한국어 (Korean, &lt;code&gt;ko&lt;/code&gt;) - v1.11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.pt-br.md&#34;&gt;Português Brasileiro (Brazilian Portuguese, &lt;code&gt;pt-BR&lt;/code&gt;) - v1.19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.sp.md&#34;&gt;Español (Spanish, &lt;code&gt;sp&lt;/code&gt;) - v1.21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.zh-Hans.md&#34;&gt;简体中文 (Simplified Chinese, &lt;code&gt;zh-Hans&lt;/code&gt;) - v1.22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.zh-Hant.md&#34;&gt;繁體中文 (Traditional Chinese, &lt;code&gt;zh-Hant&lt;/code&gt;) - v1.15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.tr.md&#34;&gt;Turkish (Turkish, &lt;code&gt;tr&lt;/code&gt;) - v1.18&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only this README file is guaranteed to be up-to-date.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FreeRTOS/FreeRTOS</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/FreeRTOS/FreeRTOS</id>
    <link href="https://github.com/FreeRTOS/FreeRTOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#39;Classic&#39; FreeRTOS distribution. Started as Git clone of FreeRTOS SourceForge SVN repo. Submodules the kernel.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS/tree/202112.00&#34;&gt;FreeRTOS 202112.00&lt;/a&gt; release adds the &lt;a href=&#34;https://github.com/aws/Fleet-Provisioning-for-AWS-IoT-embedded-sdk/&#34;&gt;Fleet Provisioning for AWS IoT&lt;/a&gt; library and the &lt;a href=&#34;https://github.com/aws/SigV4-for-AWS-IoT-embedded-sdk/&#34;&gt;Sigv4 library&lt;/a&gt;. Additionally, the update includes an &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS/tree/release-candidate/FreeRTOS-Plus/Demo/AWS/Fleet_Provisioning_Windows_Simulator/Fleet_Provisioning_With_CSR_Demo&#34;&gt;example demonstrating the use of the Fleet Provisioning library&lt;/a&gt;, as well as a modification to the &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS/tree/release-candidate/FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator/HTTP_S3_Download&#34;&gt;HTTP S3 download demo&lt;/a&gt; to demonstrate the Sigv4 library. This release also includes CBMC proofs for all public and private functions in the &lt;a href=&#34;https://github.com/aws/ota-for-aws-iot-embedded-sdk&#34;&gt;OTA Update library&lt;/a&gt;. The version of mbed TLS used in corePKCS11 and in demos has been updated.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.freertos.org&#34;&gt;FreeRTOS.org&lt;/a&gt; website contains a &lt;a href=&#34;https://www.freertos.org/FreeRTOS-quick-start-guide.html&#34;&gt;FreeRTOS Kernel Quick Start Guide&lt;/a&gt;, a &lt;a href=&#34;https://www.freertos.org/RTOS_ports.html&#34;&gt;list of supported devices and compilers&lt;/a&gt;, the &lt;a href=&#34;https://www.freertos.org/a00106.html&#34;&gt;API reference&lt;/a&gt;, and many other resources.&lt;/p&gt; &#xA;&lt;h3&gt;Getting help&lt;/h3&gt; &#xA;&lt;p&gt;You can use your Github login to get support from both the FreeRTOS community and directly from the primary FreeRTOS developers on our &lt;a href=&#34;https://forums.freertos.org&#34;&gt;active support forum&lt;/a&gt;. The &lt;a href=&#34;https://www.freertos.org/FAQ.html&#34;&gt;FAQ&lt;/a&gt; provides another support resource.&lt;/p&gt; &#xA;&lt;h2&gt;Cloning this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;Git Submodules&lt;/a&gt; to bring in dependent components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you download the ZIP file provided by the GitHub UI, you will not get the contents of the submodules. (The ZIP file is also not a valid git repository)&lt;/p&gt; &#xA;&lt;p&gt;If using Windows, because this repository and its submodules contain symbolic links, set &lt;code&gt;core.symlinks&lt;/code&gt; to true with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global core.symlinks true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to this, either enable &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34;&gt;Developer Mode&lt;/a&gt; or, whenever using a git command that writes to the system (e.g. &lt;code&gt;git pull&lt;/code&gt;, &lt;code&gt;git clone&lt;/code&gt;, and &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;), use a console elevated as administrator so that git can properly create symbolic links for this repository. Otherwise, symbolic links will be written as normal files with the symbolic links&#39; paths in them as text. &lt;a href=&#34;https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/&#34;&gt;This&lt;/a&gt; gives more explanation.&lt;/p&gt; &#xA;&lt;p&gt;To clone using HTTPS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/FreeRTOS/FreeRTOS.git --recurse-submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using SSH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:FreeRTOS/FreeRTOS.git --recurse-submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have downloaded the repo without using the &lt;code&gt;--recurse-submodules&lt;/code&gt; argument, you need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Repository structure&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the FreeRTOS Kernel, a number of supplementary libraries including the LTS ones, and a comprehensive set of example projects. Many libraries (including the FreeRTOS kernel) are included as Git submodules from their own Git repositories.&lt;/p&gt; &#xA;&lt;h3&gt;Kernel source code and example projects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS/Source&lt;/code&gt; contains the FreeRTOS kernel source code (submoduled from &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-Kernel&#34;&gt;https://github.com/FreeRTOS/FreeRTOS-Kernel&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS/Demo&lt;/code&gt; contains pre-configured example projects that demonstrate the FreeRTOS kernel executing on different hardware platforms and using different compilers.&lt;/p&gt; &#xA;&lt;h3&gt;Supplementary library source code and example projects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS-Plus/Source&lt;/code&gt; contains source code for additional FreeRTOS component libraries, as well as select partner provided libraries. These subdirectories contain further readme files and links to documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS-Plus/Demo&lt;/code&gt; contains pre-configured example projects that demonstrate the FreeRTOS kernel used with the additional FreeRTOS component libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Previous releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS/releases&#34;&gt;Releases&lt;/a&gt; contains older FreeRTOS releases.&lt;/p&gt; &#xA;&lt;h2&gt;FreeRTOS Lab Projects&lt;/h2&gt; &#xA;&lt;p&gt;FreeRTOS Lab projects are libraries and demos that are fully functional, but may be experimental or undergoing optimizations and refactorization to improve memory usage, modularity, documentation, demo usability, or test coverage.&lt;/p&gt; &#xA;&lt;p&gt;Most FreeRTOS Lab libraries can be found in the &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-Labs&#34;&gt;FreeRTOS-Labs repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A number of FreeRTOS Lab Demos can be found in the &lt;a href=&#34;https://github.com/FreeRTOS&#34;&gt;FreeRTOS Github Organization&lt;/a&gt; by searching for &#34;Lab&#34; or following &lt;a href=&#34;https://github.com/FreeRTOS?q=Lab&amp;amp;type=&amp;amp;language=&#34;&gt;this link&lt;/a&gt; to the search results.&lt;/p&gt; &#xA;&lt;h2&gt;coreMQTT Agent Demos&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/FreeRTOS/coreMQTT-Agent-Demos&#34;&gt;FreeRTOS/coreMQTT-Agent-Demos&lt;/a&gt; repository contains demos to showcase use of the &lt;a href=&#34;https://github.com/FreeRTOS/coreMQTT-Agent&#34;&gt;coreMQTT-Agent&lt;/a&gt; library to share an MQTT connection between multiple application tasks.&lt;/p&gt; &#xA;&lt;p&gt;The demos show a single MQTT connection usage between multiple application tasks for interacting with AWS services (including &lt;a href=&#34;https://docs.aws.amazon.com/freertos/latest/userguide/freertos-ota-dev.html&#34;&gt;Over-the-air-Updates&lt;/a&gt;, &lt;a href=&#34;https://docs.aws.amazon.com/iot/latest/developerguide/iot-device-shadows.html&#34;&gt;Device Shadow&lt;/a&gt;, &lt;a href=&#34;https://docs.aws.amazon.com/iot/latest/developerguide/device-defender.html&#34;&gt;Device Defender&lt;/a&gt;) alongside performing simple Publish-Subscribe operations.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>peng-zhihui/HoloCubic</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/peng-zhihui/HoloCubic</id>
    <link href="https://github.com/peng-zhihui/HoloCubic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;带网络功能的伪全息透明显示桌面站&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HoloCubic--多功能透明显示屏桌面站&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;视频介绍：&lt;/strong&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1VA411p7MD/&#34;&gt;https://www.bilibili.com/video/BV1VA411p7MD/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0. 关于本项目&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;稚晖君注：这是为了更新视频，缓解本人拖更两个月的尴尬，用一个周末时间赶出来的一个有意思的小玩意 :D&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如视频所述，本项目有意思的地方在于使用了一个分光棱镜来设计出&lt;code&gt;伪全息显示&lt;/code&gt;的效果。这个小设备总的来说功能比较多，因为搭载了WiFi和蓝牙能力可以实现很多网络应用，在本仓库中给大家提供了一个开发框架以及一些基础功能（天气、粉丝数监视器等），大家可以基于我的方案继续扩展实现更多应用。&lt;/p&gt; &#xA;&lt;p&gt;本项目的硬件方案是基于&lt;code&gt;ESP32PICO-D4&lt;/code&gt;的，乐鑫的一个很实用的MCU芯片，由于采用了SiP封装是的PCBA整板面积能做到一个硬币大小；软件方面主要是基于&lt;code&gt;lvgl-GUI&lt;/code&gt;库，我移植了ST7789 1.3寸&lt;code&gt;240x240&lt;/code&gt;分辨率屏幕的显示屏驱动，同时将&lt;code&gt;MPU6050&lt;/code&gt;作为输入设备通过感应的方式模拟编码器键值来交互。&lt;/p&gt; &#xA;&lt;h2&gt;1. 硬件打样说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PCB打样的话暂时没发现有啥需要特别注意的。&lt;/strong&gt; PCB文件可以直接拿去工厂打样，两层板很便宜，器件BOM的话也都是比较常用的，整板成本在50元以内。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Hardware&lt;/code&gt;文件内目前包含两个版本的PCB电路：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naive Version&lt;/strong&gt; ：即视频中出现的版本，板载ESP32、IMU、环境光传感器、SD卡槽、下载电路、以及两个RGB灯&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ironman Version&lt;/strong&gt; ：基于上面的版本轻微修改，删去了环境光传感器，修改了PCB形状以适配新的外壳&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为新款的外壳计划是使用CNC进行金属加工，因此环境光容易被遮挡，而且该功能使用场景不多所以在新版删去了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;外壳加工&lt;/strong&gt; 根据自己喜欢的版本选择，&lt;code&gt;3D Model&lt;/code&gt;文件夹目前包含四个版本的外壳文件：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Naive Version&lt;/strong&gt; ：即视频中出现的版本，比较简约（因为临时赶工设计的），最好使用光固化3D打印加工&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bilibili Version&lt;/strong&gt; ：视频中后面出现的B站百大奖杯形式的外壳结构，适配&lt;code&gt;Naive Version&lt;/code&gt;的PCB， &lt;strong&gt;属于娱乐性质，非百大UP不建议采用&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metal Version&lt;/strong&gt; ：视频发布后全新改版的外壳结构设计，优化了布局控件整体更紧凑精致，适配&lt;code&gt;Naive Version&lt;/code&gt;的PCB，该建议使用CNC加工制作&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ironman Version&lt;/strong&gt; ：新设计的野生钢铁侠风格结构件，该版本为和朋友合作设计的，后面可能会授权他联名量产，该结构适配&lt;code&gt;Ironman Version&lt;/code&gt;的PCB&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;野生钢铁侠联名的版本的结构件加工比较复杂，而且需要后期喷砂、阳极氧化等工艺所以单件制造成本很高（打听了下整套3个部件至少要1000元+），因此大家自己有加工渠道的可以用提供的文件自己去做。&lt;/p&gt; &#xA; &lt;p&gt;没有渠道但是又想要这个版本硬件的，&lt;strong&gt;我授权了那位朋友量产一小批&lt;/strong&gt;，他的店铺名为&lt;a href=&#34;https://shop68240117.taobao.com&#34;&gt;Xikii&lt;/a&gt;，是做客制化键盘很有经验的一个极客，大家感兴趣的可以去关注一下~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;2. 固件编译说明&lt;/h2&gt; &#xA;&lt;p&gt;固件框架主要基于Arduino开发完成，玩过Arduino的基本没有上手难度了，把Firmware/Libraries里面的库安装到Arduino库目录（如果你用的是Arduino IDE的话）即可。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;我使用的是Visual Studio上面的Visual Micro插件进行Arduino开发，因为对VS比较熟悉，大家选择自己喜欢的IDE就好了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;然后这里需要修改一个官方库文件才能正常使用：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;首先肯定得安装ESP32的Arduino支持包（百度有海量教程），然后在安装的支持包的&lt;code&gt;esp32\hardware\esp32\1.0.4\libraries\SPI\src\SPI.cpp&lt;/code&gt;文件中，&lt;strong&gt;修改以下代码中的MISO为26&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if(sck == -1 &amp;amp;&amp;amp; miso == -1 &amp;amp;&amp;amp; mosi == -1 &amp;amp;&amp;amp; ss == -1) {&#xA;    _sck = (_spi_num == VSPI) ? SCK : 14;&#xA;    _miso = (_spi_num == VSPI) ? MISO : 12; // 需要改为26&#xA;    _mosi = (_spi_num == VSPI) ? MOSI : 13;&#xA;    _ss = (_spi_num == VSPI) ? SS : 15;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这是因为，硬件上连接屏幕和SD卡分别是用两个硬件SPI，其中HSPI的默认MISO引脚是12，而12在ESP32中是用于上电时设置flash电平的，上电之前上拉会导致芯片无法启动，因此我们将默认的引脚替换为26。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;也可以通过设置芯片熔丝的方式解决这个问题，不过那样的操作是一次性不可逆的，不建议这么玩。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;另外：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于我赶视频制作，代码都是临时写的非常杂乱有很多dirty code，因此仓库中的是所有驱动调通之后的模板代码，可以自己基于这个框架自由开发。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;APP应用代码我在整理中慢慢也会更新出来。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Visual Studio模拟器 &amp;amp; 图片转换脚本&lt;/h2&gt; &#xA;&lt;p&gt;在&lt;code&gt;Software&lt;/code&gt;文件夹中包含了一个Visual Studio的工程，用VS打开（需要安装C++开发组件）后可以在电脑上模拟LVGL的界面效果，改好之后代码粘贴到Arduino固件那边就可以完成界面移植。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这样省的每次修改都要重新交叉编译Arduino的固件，提升开发效率。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImageToHolo&lt;/code&gt;文件夹下包含一个Python脚本，用于将图片转换成HoloCubic固件中用到的图像资源。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为图像资源一般都比较占空间，如果全部存在ESP32的Flash中的话存不了几张，因此我在框架中移植了LVGL的FAT文件系统支持，可以将图片资源存储在SD卡内进行读取。&lt;/p&gt; &#xA; &lt;p&gt;官方的图转换工具是在线的：&lt;a href=&#34;https://lvgl.io/tools/imageconverter&#34;&gt;https://lvgl.io/tools/imageconverter&lt;/a&gt; ，需要选择 &lt;code&gt;Indexed 4 colors&lt;/code&gt; 格式。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;但是官方工具每次只能转换一张还要上传下载很麻烦&lt;/strong&gt;，因此我自己写了个脚本用于批量转换。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;HoloCubic用到的图片资源名为&lt;code&gt;xxx.bin&lt;/code&gt;文件，大家用我提供的脚本转好后放入SD卡，然后可以像这样读取：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lv_obj_t* imgbtn = lv_imgbtn_create(lv_scr_act(), NULL);&#xA;lv_imgbtn_set_src(imgbtn, LV_BTN_STATE_PRESSED, &#34;S:/dir/icon_pressed.bin&#34;);&#xA;lv_imgbtn_set_src(imgbtn, LV_BTN_STATE_RELEASED, &#34;S:/dir/icon_released.bin&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中&lt;code&gt;S:&lt;/code&gt;指代SD卡根目录（注意&lt;strong&gt;S是大写的&lt;/strong&gt;），后面就是跟Linux中的路径完全表示一致了。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;该脚本参考了&lt;a href=&#34;https://github.com/W-Mai/lvgl_image_converter&#34;&gt;W-Mai/lvgl_image_converter&lt;/a&gt; 的实现。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;另外由于转换脚本的使用需要再Python环境下，如果大家不想安装环境的话，也可以用我预编译好的exe文件来转，使用方法很简单，把&lt;code&gt;jpg/png/bmp&lt;/code&gt;图片拖到&lt;code&gt;holo转换器.exe&lt;/code&gt;的图标上就行了（可以同时拖动多个上去），会在当前目录生成对应的&lt;code&gt;.bin&lt;/code&gt;文件。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;转换器软件的下载地址：&lt;/p&gt; &#xA; &lt;p&gt;链接：&lt;a href=&#34;https://pan.baidu.com/s/11cPOVYnKkxmd88o-Ouwb5g&#34;&gt;https://pan.baidu.com/s/11cPOVYnKkxmd88o-Ouwb5g&lt;/a&gt; 提取码：xlju&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;4. 关于分光棱镜&lt;/h2&gt; &#xA;&lt;p&gt;我用的时25.4mm x 25.4mm x 25.4mm的棱镜，淘宝应该可以搜到，单个价格80元左右。&lt;/p&gt; &#xA;&lt;p&gt;分光棱镜的固定比较麻烦，用胶水的话容易渗入屏幕导致水印，因此建议去TB搜一下&lt;code&gt;OCA胶&lt;/code&gt;，这是一种&lt;code&gt;全贴合屏幕工艺&lt;/code&gt;中用来粘合屏幕的固态胶，效果很不错也很便宜。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;但是OCA粘性非常强，大家操作一定要仔细不要留气泡，不然粘上后就很难取下了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;其他的后续再补充，有用的话记得点星星~&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>acidanthera/OpenCorePkg</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/acidanthera/OpenCorePkg</id>
    <link href="https://github.com/acidanthera/OpenCorePkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenCore bootloader&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/Logos/OpenCore_with_text_Small.png&#34; width=&#34;200&#34; height=&#34;48&#34;&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg/actions&#34;&gt;&lt;img src=&#34;https://github.com/acidanthera/OpenCorePkg/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/18169&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/18169/badge.svg?flat=1&#34; alt=&#34;Scan Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;OpenCore bootloader with development SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;p&gt;This repository also contains additional UEFI support common libraries shared by other projects in &lt;a href=&#34;https://github.com/acidanthera&#34;&gt;Acidanthera&lt;/a&gt;. The primary purpose of the library set is to provide supplemental functionality for Apple-specific UEFI drivers. Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple disk image loading support&lt;/li&gt; &#xA; &lt;li&gt;Apple keyboard input aggregation&lt;/li&gt; &#xA; &lt;li&gt;Apple PE image signature verification&lt;/li&gt; &#xA; &lt;li&gt;Apple UEFI secure boot supplemental code&lt;/li&gt; &#xA; &lt;li&gt;Audio management with screen reading support&lt;/li&gt; &#xA; &lt;li&gt;Basic ACPI and SMBIOS manipulation&lt;/li&gt; &#xA; &lt;li&gt;CPU information gathering with timer support&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic primitives (SHA-256, RSA, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Decompression primitives (zlib, lzss, lzvn, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Helper code for ACPI reads and modifications&lt;/li&gt; &#xA; &lt;li&gt;Higher level abstractions for files, strings, UEFI variables&lt;/li&gt; &#xA; &lt;li&gt;Overflow checking arithmetics&lt;/li&gt; &#xA; &lt;li&gt;PE image loading with no UEFI Secure Boot conflict&lt;/li&gt; &#xA; &lt;li&gt;Plist configuration format parsing&lt;/li&gt; &#xA; &lt;li&gt;PNG image manipulation&lt;/li&gt; &#xA; &lt;li&gt;Text output and graphics output implementations&lt;/li&gt; &#xA; &lt;li&gt;XNU kernel driver injection and patch engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Early history of the codebase could be found in &lt;a href=&#34;https://github.com/acidanthera/AppleSupportPkg&#34;&gt;AppleSupportPkg&lt;/a&gt; and PicoLib library set by The HermitCrabs Lab.&lt;/p&gt; &#xA;&lt;h4&gt;OcGuardLib&lt;/h4&gt; &#xA;&lt;p&gt;This library implements basic safety features recommended for the use within the project. It implements fast safe integral arithmetics mapping on compiler builtins, type alignment checking, and UBSan runtime, based on &lt;a href=&#34;https://blog.netbsd.org/tnf/entry/introduction_to_%C2%B5ubsan_a_clean&#34;&gt;NetBSD implementation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The use of UBSan runtime requires the use of Clang compiler and &lt;code&gt;-fsanitize=undefined&lt;/code&gt; argument. Refer to &lt;a href=&#34;https://releases.llvm.org/7.0.0/tools/clang/docs/UndefinedBehaviorSanitizer.html&#34;&gt;Clang documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Credits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The HermitCrabs Lab&lt;/li&gt; &#xA; &lt;li&gt;All projects providing third-party code (refer to file headers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://applelife.ru&#34;&gt;AppleLife&lt;/a&gt; team and user-contributed resources&lt;/li&gt; &#xA; &lt;li&gt;Chameleon and Clover teams for hints and legacy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/al3xtjames&#34;&gt;al3xtjames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Andrey1970AppleLife&#34;&gt;Andrey1970AppleLife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhaeuser&#34;&gt;mhaeuser (ex Download-Fritz)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Goldfish64&#34;&gt;Goldfish64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikeBeaton&#34;&gt;MikeBeaton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nms42&#34;&gt;nms42&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PMheart&#34;&gt;PMheart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savvamitrofanov&#34;&gt;savvamitrofanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usr-sse2&#34;&gt;usr-sse2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vit9696&#34;&gt;vit9696&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Discussion&lt;/h4&gt; &#xA;&lt;p&gt;Please refer to the following &lt;a href=&#34;https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/FORUMS.md&#34;&gt;list of OpenCore discussion forums&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FreeRDP/FreeRDP</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/FreeRDP/FreeRDP</id>
    <link href="https://github.com/FreeRDP/FreeRDP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FreeRDP is a free remote desktop protocol library and clients&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FreeRDP: A Remote Desktop Protocol Implementation&lt;/h1&gt; &#xA;&lt;p&gt;FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. Enjoy the freedom of using your software wherever you want, the way you want it, in a world where interoperability can finally liberate your computing experience.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;Project website: &lt;a href=&#34;https://www.freerdp.com/&#34;&gt;https://www.freerdp.com/&lt;/a&gt;&lt;br&gt; Issue tracker: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/issues&#34;&gt;https://github.com/FreeRDP/FreeRDP/issues&lt;/a&gt;&lt;br&gt; Sources: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/&#34;&gt;https://github.com/FreeRDP/FreeRDP/&lt;/a&gt;&lt;br&gt; Downloads: &lt;a href=&#34;https://pub.freerdp.com/releases/&#34;&gt;https://pub.freerdp.com/releases/&lt;/a&gt;&lt;br&gt; Wiki: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/wiki&#34;&gt;https://github.com/FreeRDP/FreeRDP/wiki&lt;/a&gt;&lt;br&gt; API documentation: &lt;a href=&#34;https://pub.freerdp.com/api/&#34;&gt;https://pub.freerdp.com/api/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Security policy: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/security/policy&#34;&gt;https://github.com/FreeRDP/FreeRDP/security/policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Matrix room : #FreeRDP:matrix.org (main) XMPP channel: #FreeRDP#&lt;a href=&#34;mailto:matrix.org@matrix.org&#34;&gt;matrix.org@matrix.org&lt;/a&gt; (bridged) IRC channel : #freerdp @ irc.oftc.net (bridged) Mailing list: &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/freerdp-devel&#34;&gt;https://lists.sourceforge.net/lists/listinfo/freerdp-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Open Specifications&lt;/h2&gt; &#xA;&lt;p&gt;Information regarding the Microsoft Open Specifications can be found at: &lt;a href=&#34;https://www.microsoft.com/openspecifications/&#34;&gt;https://www.microsoft.com/openspecifications/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A list of reference documentation is maintained here: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation&#34;&gt;https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on how to get started compiling FreeRDP can be found on the wiki: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/wiki/Compilation&#34;&gt;https://github.com/FreeRDP/FreeRDP/wiki/Compilation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>betaflight/betaflight</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/betaflight/betaflight</id>
    <link href="https://github.com/betaflight/betaflight" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Flight Controller Firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/docs/assets/images/bf_logo.png&#34; alt=&#34;Betaflight&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/betaflight/betaflight&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build/latest?definitionId=8&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_apis/build/status/betaflight.betaflight?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build/latest?definitionId=8&amp;amp;branchName=4.2-maintenance&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_apis/build/status/betaflight.betaflight?branchName=4.2-maintenance&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Betaflight is flight controller software (firmware) used to fly multi-rotor craft and fixed wing craft.&lt;/p&gt; &#xA;&lt;p&gt;This fork differs from Baseflight and Cleanflight in that it focuses on flight performance, leading-edge feature additions, and wide target support.&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Date&lt;/th&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements for the submission of new and updated targets&lt;/h3&gt; &#xA;&lt;p&gt;The following new requirements for pull requests adding new targets or modifying existing targets are put in place from now on:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;No new F3 based targets will be accepted;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For any new target that is to be added, only a Unified Target config into &lt;a href=&#34;https://github.com/betaflight/unified-targets/tree/master/configs/default&#34;&gt;https://github.com/betaflight/unified-targets/tree/master/configs/default&lt;/a&gt; needs to be submitted. See the &lt;a href=&#34;https://github.com/betaflight/betaflight/raw/master/docs/TargetMaintenance/CreatingAUnifiedTarget.md&#34;&gt;instructions&lt;/a&gt; for how to create a Unified Target configuration. If there is no Unified Target for the MCU type of the new target (see instructions above), then a &#39;legacy&#39; format target definition into &lt;code&gt;src/main/target/&lt;/code&gt; has to be submitted as well;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For changes to existing targets, the change needs to be applied to the Unified Target config in &lt;a href=&#34;https://github.com/betaflight/unified-targets/tree/master/configs/default&#34;&gt;https://github.com/betaflight/unified-targets/tree/master/configs/default&lt;/a&gt;. If no Unified Target configuration for the target exists, a new Unified Target configuration will have to be created and submitted. If there is no Unified Target for the MCU type of the new target (see instructions above), then an update to the &#39;legacy&#39; format target definition in &lt;code&gt;src/main/target/&lt;/code&gt; has to be submitted alongside the update to the Unified Target configuration.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Betaflight has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-color RGB LED strip support (each LED can be a different color using variable length WS2811 Addressable RGB strips - use for Orientation Indicators, Low Battery Warning, Flight Mode Status, Initialization Troubleshooting, etc)&lt;/li&gt; &#xA; &lt;li&gt;DShot (150, 300 and 600), Multishot, Oneshot (125 and 42) and Proshot1000 motor protocol support&lt;/li&gt; &#xA; &lt;li&gt;Blackbox flight recorder logging (to onboard flash or external microSD card where equipped)&lt;/li&gt; &#xA; &lt;li&gt;Support for targets that use the STM32 F4, G4, F7 and H7 processors&lt;/li&gt; &#xA; &lt;li&gt;PWM, PPM, SPI, and Serial (SBus, SumH, SumD, Spektrum 1024/2048, XBus, etc) RX connection with failsafe detection&lt;/li&gt; &#xA; &lt;li&gt;Multiple telemetry protocols (CRSF, FrSky, HoTT smart-port, MSP, etc)&lt;/li&gt; &#xA; &lt;li&gt;RSSI via ADC - Uses ADC to read PWM RSSI signals, tested with FrSky D4R-II, X8R, X4R-SB, &amp;amp; XSR&lt;/li&gt; &#xA; &lt;li&gt;OSD support &amp;amp; configuration without needing third-party OSD software/firmware/comm devices&lt;/li&gt; &#xA; &lt;li&gt;OLED Displays - Display information on: Battery voltage/current/mAh, profile, rate profile, mode, version, sensors, etc&lt;/li&gt; &#xA; &lt;li&gt;In-flight manual PID tuning and rate adjustment&lt;/li&gt; &#xA; &lt;li&gt;PID and filter tuning using sliders&lt;/li&gt; &#xA; &lt;li&gt;Rate profiles and in-flight selection of them&lt;/li&gt; &#xA; &lt;li&gt;Configurable serial ports for Serial RX, Telemetry, ESC telemetry, MSP, GPS, OSD, Sonar, etc - Use most devices on any port, softserial included&lt;/li&gt; &#xA; &lt;li&gt;VTX support for Unify Pro and IRC Tramp&lt;/li&gt; &#xA; &lt;li&gt;and MUCH, MUCH more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/betaflight/betaflight/wiki&#34;&gt;https://github.com/betaflight/betaflight/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support and Developers Channel&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a dedicated Slack chat channel here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://slack.betaflight.com/&#34;&gt;https://slack.betaflight.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also have a Facebook Group. Join us to get a place to talk about Betaflight, ask configuration questions, or just hang out with fellow pilots.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/groups/betaflightgroup/&#34;&gt;https://www.facebook.com/groups/betaflightgroup/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Etiquette: Don&#39;t ask to ask and please wait around long enough for a reply - sometimes people are out flying, asleep or at work and can&#39;t answer immediately.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Tool&lt;/h2&gt; &#xA;&lt;p&gt;To configure Betaflight you should use the Betaflight-configurator GUI tool (Windows/OSX/Linux) which can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight-configurator/releases/latest&#34;&gt;https://github.com/betaflight/betaflight-configurator/releases/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and encouraged. You can contribute in many ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;implement a new feature in the firmware or in configurator (see &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/#Developers&#34;&gt;below&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;documentation updates and corrections;&lt;/li&gt; &#xA; &lt;li&gt;How-To guides - received help? Help others!&lt;/li&gt; &#xA; &lt;li&gt;bug reporting &amp;amp; fixes;&lt;/li&gt; &#xA; &lt;li&gt;new feature ideas &amp;amp; suggestions;&lt;/li&gt; &#xA; &lt;li&gt;provide a new translation for configurator, or help us maintain the existing ones (see &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/#Translators&#34;&gt;below&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The best place to start is the Betaflight Slack (registration &lt;a href=&#34;https://slack.betaflight.com/&#34;&gt;here&lt;/a&gt;). Next place is the github issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight/issues&#34;&gt;https://github.com/betaflight/betaflight/issues&lt;/a&gt; &lt;a href=&#34;https://github.com/betaflight/betaflight-configurator/issues&#34;&gt;https://github.com/betaflight/betaflight-configurator/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before creating new issues please check to see if there is an existing one, search first otherwise you waste people&#39;s time when they could be coding instead!&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to our efforts financially, please consider making a donation to us through &lt;a href=&#34;https://paypal.me/betaflight&#34;&gt;PayPal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute financially on an ongoing basis, you should consider becoming a patron for us on &lt;a href=&#34;https://www.patreon.com/betaflight&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Contribution of bugfixes and new features is encouraged. Please be aware that we have a thorough review process for pull requests, and be prepared to explain what you want to achieve with your pull request. Before starting to write code, please read our &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/docs/development/Development.md&#34;&gt;development guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/docs/development/CodingStyle.md&#34;&gt;coding style definition&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Azure Pipelines are used to run automatic builds&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build&#34;&gt;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translators&lt;/h2&gt; &#xA;&lt;p&gt;We want to make Betaflight accessible for pilots who are not fluent in English, and for this reason we are currently maintaining translations into 18 languages for Betaflight Configurator: Català, Deutsch, Español, Euskera, Français, Galego, Hrvatski, Bahasa Indonesia, Italiano, 日本語, 한국어, Latviešu, Português, Português Brasileiro, polski, Русский язык, Svenska, 简体中文. We have got a team of volunteer translators who do this work, but additional translators are always welcome to share the workload, and we are keen to add additional languages. If you would like to help us with translations, you have got the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you help by suggesting some updates or improvements to translations in a language you are familiar with, head to &lt;a href=&#34;https://crowdin.com/project/betaflight-configurator&#34;&gt;crowdin&lt;/a&gt; and add your suggested translations there;&lt;/li&gt; &#xA; &lt;li&gt;if you would like to start working on the translation for a new language, or take on responsibility for proof-reading the translation for a language you are very familiar with, please head to the Betaflight Slack (registration &lt;a href=&#34;https://slack.betaflight.com/&#34;&gt;here&lt;/a&gt;), and join the &#39;#team_translation&#39; channel - the people in there can help you to get a new language added, or set you up as a proof reader.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hardware Issues&lt;/h2&gt; &#xA;&lt;p&gt;Betaflight does not manufacture or distribute their own hardware. While we are collaborating with and supported by a number of manufacturers, we do not do any kind of hardware support. If you encounter any hardware issues with your flight controller or another component, please contact the manufacturer or supplier of your hardware, or check RCGroups &lt;a href=&#34;https://rcgroups.com/forums/showthread.php?t=2464844&#34;&gt;https://rcgroups.com/forums/showthread.php?t=2464844&lt;/a&gt; to see if others with the same problem have found a solution.&lt;/p&gt; &#xA;&lt;h2&gt;Betaflight Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight/releases&#34;&gt;https://github.com/betaflight/betaflight/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Open Source / Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Betaflight is software that is &lt;strong&gt;open source&lt;/strong&gt; and is available free of charge without warranty to all users.&lt;/p&gt; &#xA;&lt;p&gt;Betaflight is forked from Cleanflight, so thanks goes to all those whom have contributed to Cleanflight and its origins.&lt;/p&gt; &#xA;&lt;p&gt;Origins for this fork (Thanks!):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alexinparis&lt;/strong&gt; (for MultiWii),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;timecop&lt;/strong&gt; (for Baseflight),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dominic Clifton&lt;/strong&gt; (for Cleanflight),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;borisbstyle&lt;/strong&gt; (for Betaflight), and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sambas&lt;/strong&gt; (for the original STM32F4 port).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Betaflight Configurator is forked from Cleanflight Configurator and its origins.&lt;/p&gt; &#xA;&lt;p&gt;Origins for Betaflight Configurator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dominic Clifton&lt;/strong&gt; (for Cleanflight configurator), and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ctn&lt;/strong&gt; (for the original Configurator).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Big thanks to current and past contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Budden, Martin (martinbudden)&lt;/li&gt; &#xA; &lt;li&gt;Bardwell, Joshua (joshuabardwell)&lt;/li&gt; &#xA; &lt;li&gt;Blackman, Jason (blckmn)&lt;/li&gt; &#xA; &lt;li&gt;ctzsnooze&lt;/li&gt; &#xA; &lt;li&gt;Höglund, Anders (andershoglund)&lt;/li&gt; &#xA; &lt;li&gt;Ledvina, Petr (ledvinap) - &lt;strong&gt;IO code awesomeness!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;kc10kevin&lt;/li&gt; &#xA; &lt;li&gt;Keeble, Gary (MadmanK)&lt;/li&gt; &#xA; &lt;li&gt;Keller, Michael (mikeller) - &lt;strong&gt;Configurator brilliance&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kravcov, Albert (skaman82) - &lt;strong&gt;Configurator brilliance&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;MJ666&lt;/li&gt; &#xA; &lt;li&gt;Nathan (nathantsoi)&lt;/li&gt; &#xA; &lt;li&gt;ravnav&lt;/li&gt; &#xA; &lt;li&gt;sambas - &lt;strong&gt;bringing us the F4&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;savaga&lt;/li&gt; &#xA; &lt;li&gt;Stålheim, Anton (KiteAnton)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many many others who haven&#39;t been mentioned....&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepmind/mujoco</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/deepmind/mujoco</id>
    <link href="https://github.com/deepmind/mujoco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Joint dynamics with Contact. A general purpose physics simulator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MuJoCo Physics&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco/actions/workflows/build.yml?query=branch%3Amain&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/deepmind/mujoco/build/main&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MuJoCo&lt;/strong&gt; stands for &lt;strong&gt;Mu&lt;/strong&gt;lti-&lt;strong&gt;Jo&lt;/strong&gt;int dynamics with &lt;strong&gt;Co&lt;/strong&gt;ntact. It is a general purpose physics engine that aims to facilitate research and development in robotics, biomechanics, graphics and animation, machine learning, and other areas which demand fast and accurate simulation of articulated structures interacting with their environment.&lt;/p&gt; &#xA;&lt;p&gt;This repository is maintained by DeepMind, please see our &lt;a href=&#34;https://www.deepmind.com/blog/opening-up-a-physics-simulator-for-robotics&#34;&gt;acquisition&lt;/a&gt; and &lt;a href=&#34;https://www.deepmind.com/blog/open-sourcing-mujoco&#34;&gt;open sourcing&lt;/a&gt; announcements.&lt;/p&gt; &#xA;&lt;p&gt;MuJoCo has a C API and is intended for researchers and developers. The runtime simulation module is tuned to maximize performance and operates on low-level data structures that are preallocated by the built-in XML compiler. The library includes interactive visualization with a native GUI, rendered in OpenGL. MuJoCo further exposes a large number of utility functions for computing physics-related quantities. We also provide Python bindings and a plug-in for the &lt;a href=&#34;https://unity.com/&#34;&gt;Unity&lt;/a&gt; game engine.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo&#39;s documentation is available at &lt;a href=&#34;https://mujoco.readthedocs.io&#34;&gt;mujoco.readthedocs.io&lt;/a&gt;, which serves webpages derived from the &lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/doc&#34;&gt;documentation source files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Versioned releases are available as precompiled binaries from the GitHub &lt;a href=&#34;https://github.com/deepmind/mujoco/releases&#34;&gt;releases page&lt;/a&gt;, built for Linux (x86-64 and AArch64), Windows (x86-64 only), and macOS (universal). This is the recommended way to use the software.&lt;/p&gt; &#xA;&lt;p&gt;Users who wish to build MuJoCo from source, please consult the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming.html#building-mujoco-from-source&#34;&gt;build from source&lt;/a&gt; section of the documentation. However, please note that the commit at the tip of the &lt;code&gt;main&lt;/code&gt; branch may be unstable.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There are two easy ways to get started with MuJoCo:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run &lt;code&gt;simulate&lt;/code&gt; on your machine.&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0ORsj_E17B0&#34;&gt;This video&lt;/a&gt; shows a screen capture of &lt;code&gt;simulate&lt;/code&gt;, MuJoCo&#39;s native interactive viewer. Follow the steps described in the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming.html#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of the documentation to get &lt;code&gt;simulate&lt;/code&gt; running on your machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Explore our online IPython notebooks.&lt;/strong&gt; If you are a Python user, you might want to start with our tutorial notebooks, running on Google Colab:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first tutorial focuses on the basic MuJoCo Python bindings: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/dm_control/blob/main/dm_control/mujoco/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second tutorial includes more examples of &lt;code&gt;dm_control&lt;/code&gt;-specific functionality: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/dm_control/blob/main/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use MuJoCo for published research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{todorov2012mujoco,&#xA;  title={MuJoCo: A physics engine for model-based control},&#xA;  author={Todorov, Emanuel and Erez, Tom and Tassa, Yuval},&#xA;  booktitle={2012 IEEE/RSJ International Conference on Intelligent Robots and Systems},&#xA;  pages={5026--5033},&#xA;  year={2012},&#xA;  organization={IEEE},&#xA;  doi={10.1109/IROS.2012.6386109}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2021 DeepMind Technologies Limited.&lt;/p&gt; &#xA;&lt;p&gt;Box collision code (&lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/src/engine/engine_collision_box.c&#34;&gt;&lt;code&gt;engine_collision_box.c&lt;/code&gt;&lt;/a&gt;) is Copyright 2016 Svetoslav Kolev.&lt;/p&gt; &#xA;&lt;p&gt;ReStructuredText documents, images, and videos in the &lt;code&gt;doc&lt;/code&gt; directory are made available under the terms of the Creative Commons Attribution 4.0 (CC BY 4.0) license. You may obtain a copy of the License at &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qmk/qmk_firmware</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/qmk/qmk_firmware</id>
    <link href="https://github.com/qmk/qmk_firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source keyboard firmware for Atmel AVR and Arm USB families&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quantum Mechanical Keyboard Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qmk/qmk_firmware/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Uq7gcHh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/440868230475677696.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.qmk.fm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-ready-orange.svg?sanitize=true&#34; alt=&#34;Docs Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulse/monthly&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/qmk/qmk_firmware.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a keyboard firmware based on the &lt;a href=&#34;https://github.com/tmk/tmk_keyboard&#34;&gt;tmk_keyboard firmware&lt;/a&gt; with some useful features for Atmel AVR and ARM controllers, and more specifically, the &lt;a href=&#34;https://olkb.com&#34;&gt;OLKB product line&lt;/a&gt;, the &lt;a href=&#34;https://ergodox-ez.com&#34;&gt;ErgoDox EZ&lt;/a&gt; keyboard, and the &lt;a href=&#34;https://clueboard.co&#34;&gt;Clueboard product line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qmk.fm&#34;&gt;See the official documentation on docs.qmk.fm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The docs are powered by &lt;a href=&#34;https://docsify.js.org/&#34;&gt;Docsify&lt;/a&gt; and hosted on &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/docs/&#34;&gt;GitHub&lt;/a&gt;. They are also viewable offline; see &lt;a href=&#34;https://docs.qmk.fm/#/contributing?id=previewing-the-documentation&#34;&gt;Previewing the Documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can request changes by making a fork and opening a &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulls&#34;&gt;pull request&lt;/a&gt;, or by clicking the &#34;Edit this page&#34; link at the bottom of any page.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Keyboards&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/planck/&#34;&gt;Planck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/preonic/&#34;&gt;Preonic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/ergodox_ez/&#34;&gt;ErgoDox EZ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/&#34;&gt;Clueboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/17/&#34;&gt;Cluepad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/atreus/&#34;&gt;Atreus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The project also includes community support for &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/&#34;&gt;lots of other keyboards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;QMK is developed and maintained by Jack Humbert of OLKB with contributions from the community, and of course, &lt;a href=&#34;https://github.com/tmk&#34;&gt;Hasu&lt;/a&gt;. The OLKB product firmwares are maintained by &lt;a href=&#34;https://github.com/jackhumbert&#34;&gt;Jack Humbert&lt;/a&gt;, the Ergodox EZ by &lt;a href=&#34;https://github.com/zsa&#34;&gt;ZSA Technology Labs&lt;/a&gt;, the Clueboard by &lt;a href=&#34;https://github.com/skullydazed&#34;&gt;Zach White&lt;/a&gt;, and the Atreus by &lt;a href=&#34;https://github.com/technomancy&#34;&gt;Phil Hagelberg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Official Website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qmk.fm&#34;&gt;qmk.fm&lt;/a&gt; is the official website of QMK, where you can find links to this page, the documentation, and the keyboards supported by QMK.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emscripten-core/emscripten</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/emscripten-core/emscripten</id>
    <link href="https://github.com/emscripten-core/emscripten" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emscripten: An LLVM-to-WebAssembly Compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emscripten-core/emscripten/main/media/switch_logo.png&#34; alt=&#34;emscripten logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main project page: &lt;a href=&#34;https://emscripten.org&#34;&gt;https://emscripten.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub CI status: &lt;a href=&#34;https://circleci.com/gh/emscripten-core/emscripten/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/emscripten-core/emscripten.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chromium builder status: &lt;a href=&#34;https://ci.chromium.org/p/emscripten-releases&#34;&gt;emscripten-releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten compiles C and C++ to &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/LLVM&#34;&gt;LLVM&lt;/a&gt; and &lt;a href=&#34;https://github.com/WebAssembly/binaryen/&#34;&gt;Binaryen&lt;/a&gt;. Emscripten output can run on the Web, in Node.js, and in &lt;a href=&#34;https://v8.dev/blog/emscripten-standalone-wasm#running-in-wasm-runtimes&#34;&gt;wasm runtimes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Emscripten provides Web support for popular portable APIs such as OpenGL and SDL2, allowing complex graphical native applications to be ported, such as the &lt;a href=&#34;https://docs.unity3d.com/Manual/webgl-gettingstarted.html&#34;&gt;Unity game engine&lt;/a&gt; and &lt;a href=&#34;https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html&#34;&gt;Google Earth&lt;/a&gt;. It can probably port your codebase, too!&lt;/p&gt; &#xA;&lt;p&gt;While Emscripten mostly focuses on compiling C and C++ using &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt;, it can be integrated with other LLVM-using compilers (for example, Rust has Emscripten integration, with the &lt;code&gt;wasm32-unknown-emscripten&lt;/code&gt; and &lt;code&gt;asmjs-unknown-emscripten&lt;/code&gt; targets).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten is available under 2 licenses, the MIT license and the University of Illinois/NCSA Open Source License.&lt;/p&gt; &#xA;&lt;p&gt;Both are permissive open source licenses, with little if any practical difference between them.&lt;/p&gt; &#xA;&lt;p&gt;The reason for offering both is that (1) the MIT license is well-known and suitable for a compiler toolchain, while (2) LLVM&#39;s original license, the University of Illinois/NCSA Open Source License, was also offered to allow Emscripten&#39;s code to be integrated upstream into LLVM. The second reason became less important after Emscripten switched to the LLVM wasm backend, at which point there isn&#39;t any code we expect to move back and forth between the projects; also, LLVM relicensed to Apache 2.0 + exceptions meanwhile. In practice you can just consider Emscripten as MIT licensed (which allows you to do pretty much anything you want with a compiler, including commercial and non-commercial use).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;LICENSE&lt;/code&gt; for the full content of the licenses.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iovisor/bcc</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/iovisor/bcc</id>
    <link href="https://github.com/iovisor/bcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/logo2.png&#34; alt=&#34;BCC Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BPF Compiler Collection (BCC)&lt;/h1&gt; &#xA;&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.&lt;/p&gt; &#xA;&lt;p&gt;eBPF was &lt;a href=&#34;https://lkml.org/lkml/2015/4/14/232&#34;&gt;described by&lt;/a&gt; Ingo Molnár as:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;This example traces a disk I/O kernel function, and populates an in-kernel power-of-2 histogram of the I/O size. For efficiency, only the histogram summary is returned to user-level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;# ./bitehist.py&#xA;Tracing... Hit Ctrl-C to end.&#xA;^C&#xA;     kbytes          : count     distribution&#xA;       0 -&amp;gt; 1        : 3        |                                      |&#xA;       2 -&amp;gt; 3        : 0        |                                      |&#xA;       4 -&amp;gt; 7        : 211      |**********                            |&#xA;       8 -&amp;gt; 15       : 0        |                                      |&#xA;      16 -&amp;gt; 31       : 0        |                                      |&#xA;      32 -&amp;gt; 63       : 0        |                                      |&#xA;      64 -&amp;gt; 127      : 1        |                                      |&#xA;     128 -&amp;gt; 255      : 800      |**************************************|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above output shows a bimodal distribution, where the largest mode of 800 I/O was between 128 and 255 Kbytes in size.&lt;/p&gt; &#xA;&lt;p&gt;See the source: &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;. What this traces, what this stores, and how the data is presented, can be entirely customized. This shows only some of many possible capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; for installation steps on your platform.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/FAQ.txt&#34;&gt;FAQ.txt&lt;/a&gt; for the most common troubleshoot questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reference guide&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/reference_guide.md&#34;&gt;docs/reference_guide.md&lt;/a&gt; for the reference guide to the bcc and bcc/BPF APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;Some of these are single files that contain both C and Python, others have a pair of .c and .py files, and some are directories of files.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing&lt;/h3&gt; &#xA;&lt;h4&gt;Examples:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;: Block I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop.py&#34;&gt;disksnoop.py&lt;/a&gt;: Trace block device I/O latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/hello_world.py&#34;&gt;hello_world.py&lt;/a&gt;: Prints &#34;Hello, World!&#34; for new processes.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query.py&#34;&gt;mysqld_query.py&lt;/a&gt;: Trace MySQL server queries using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server.py&#34;&gt;nodejs_http_server.py&lt;/a&gt;: Trace Node.js HTTP server requests using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop.py&#34;&gt;stacksnoop&lt;/a&gt;: Trace a kernel function and print all kernel stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop.py&#34;&gt;statsnoop&lt;/a&gt;: Trace stat() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/task_switch.py&#34;&gt;task_switch.py&lt;/a&gt;: Count task switches with from and to PIDs.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect.py&#34;&gt;tcpv4connect.py&lt;/a&gt;: Trace TCP IPv4 active connections. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/trace_fields.py&#34;&gt;trace_fields.py&lt;/a&gt;: Simple example of printing fields from traced events.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump.py&#34;&gt;undump.py&lt;/a&gt;: Dump UNIX socket packets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread.py&#34;&gt;urandomread.py&lt;/a&gt;: A kernel tracepoint example, which traces random:urandom_read. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.py&#34;&gt;vfsreadlat.py&lt;/a&gt; examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.c&#34;&gt;vfsreadlat.c&lt;/a&gt;: VFS read latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.py&#34;&gt;kvm_hypercall.py&lt;/a&gt;: Conditional static kernel tracepoints for KVM entry, exit and hypercall &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tools:&lt;/h4&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34; border=&#34;0&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist.py&#34;&gt;argdist&lt;/a&gt;: Display function parameter values as a histogram or frequency count. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline.py&#34;&gt;bashreadline&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop.py&#34;&gt;bindsnoop&lt;/a&gt;: Trace IPv4 and IPv6 bind() system calls (bind()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency.py&#34;&gt;biolatency&lt;/a&gt;: Summarize block device I/O latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop.py&#34;&gt;biotop&lt;/a&gt;: Top for disks: Summarize block device I/O by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern.py&#34;&gt;biopattern&lt;/a&gt;: Identify random/sequential disk access patterns. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop.py&#34;&gt;biosnoop&lt;/a&gt;: Trace block device I/O with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize.py&#34;&gt;bitesize&lt;/a&gt;: Show per process I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist.py&#34;&gt;bpflist&lt;/a&gt;: Display processes with active BPF programs and maps. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist.py&#34;&gt;btrfsdist&lt;/a&gt;: Summarize btrfs operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower.py&#34;&gt;btrfsslower&lt;/a&gt;: Trace slow btrfs operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable.py&#34;&gt;capable&lt;/a&gt;: Trace security capability checks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat.py&#34;&gt;cachestat&lt;/a&gt;: Trace page cache hit/miss ratio. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop.py&#34;&gt;cachetop&lt;/a&gt;: Trace page cache hit/miss ratio by processes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop.py&#34;&gt;compactsnoop&lt;/a&gt;: Trace compact zone events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist.py&#34;&gt;cpudist&lt;/a&gt;: Summarize on- and off-CPU time per task as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed.py&#34;&gt;cpuunclaimed&lt;/a&gt;: Sample CPU run queues and calculate unclaimed idle CPU. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat.py&#34;&gt;criticalstat&lt;/a&gt;: Trace and report long atomic critical sections in the kernel. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower.py&#34;&gt;dbslower&lt;/a&gt;: Trace MySQL/PostgreSQL queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat.py&#34;&gt;dbstat&lt;/a&gt;: Summarize MySQL/PostgreSQL query latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop.py&#34;&gt;dcsnoop&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat.py&#34;&gt;dcstat&lt;/a&gt;: Directory entry cache (dcache) stats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock.py&#34;&gt;deadlock&lt;/a&gt;: Detect potential deadlocks on a running process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop.py&#34;&gt;dirtop&lt;/a&gt;: File reads and writes by directory. Top for directories. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop.py&#34;&gt;drsnoop&lt;/a&gt;: Trace direct reclaim events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop.py&#34;&gt;execsnoop&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop.py&#34;&gt;exitsnoop&lt;/a&gt;: Trace process termination (exit and fatal signals). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist.py&#34;&gt;ext4dist&lt;/a&gt;: Summarize ext4 operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower.py&#34;&gt;ext4slower&lt;/a&gt;: Trace slow ext4 operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife.py&#34;&gt;filelife&lt;/a&gt;: Trace the lifespan of short-lived files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower.py&#34;&gt;fileslower&lt;/a&gt;: Trace slow synchronous file reads and writes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop.py&#34;&gt;filetop&lt;/a&gt;: File reads and writes by filename and process. Top for files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount.py&#34;&gt;funccount&lt;/a&gt;: Count kernel function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval.py&#34;&gt;funcinterval&lt;/a&gt;: Time interval between the same function as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency.py&#34;&gt;funclatency&lt;/a&gt;: Time functions and show their latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower.py&#34;&gt;funcslower&lt;/a&gt;: Trace slow kernel or user function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency.py&#34;&gt;gethostlatency&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs.py&#34;&gt;hardirqs&lt;/a&gt;: Measure hard IRQ (hard interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject.py&#34;&gt;inject&lt;/a&gt;: Targeted error injection with call chain and predicates &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop.py&#34;&gt;killsnoop&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat.py&#34;&gt;klockstat&lt;/a&gt;: Traces kernel mutex lock events and display locks statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit.py&#34;&gt;kvmexit&lt;/a&gt;: Display the exit_reason and its statistics of each vm exit. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat.py&#34;&gt;llcstat&lt;/a&gt;: Summarize CPU cache references and misses by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush.py&#34;&gt;mdflush&lt;/a&gt;: Trace md flush events. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak.py&#34;&gt;memleak&lt;/a&gt;: Display outstanding memory allocations to find memory leaks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop.py&#34;&gt;mountsnoop&lt;/a&gt;: Trace mount and umount syscalls system-wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower.py&#34;&gt;mysqld_qslower&lt;/a&gt;: Trace MySQL server queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.py&#34;&gt;netqtop&lt;/a&gt; tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.c&#34;&gt;netqtop.c&lt;/a&gt;: Trace and display packets distribution on NIC queues. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower.py&#34;&gt;nfsslower&lt;/a&gt;: Trace slow NFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist.py&#34;&gt;nfsdist&lt;/a&gt;: Summarize NFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime.py&#34;&gt;offcputime&lt;/a&gt;: Summarize off-CPU time by kernel stack trace. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime.py&#34;&gt;offwaketime&lt;/a&gt;: Summarize blocked time by kernel off-CPU stack and waker stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill.py&#34;&gt;oomkill&lt;/a&gt;: Trace the out-of-memory (OOM) killer. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop.py&#34;&gt;opensnoop&lt;/a&gt;: Trace open() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec.py&#34;&gt;pidpersec&lt;/a&gt;: Count new processes (via fork). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile.py&#34;&gt;profile&lt;/a&gt;: Profile CPU usage by sampling stack traces at a timed interval. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead.py&#34;&gt;readahead&lt;/a&gt;: Show performance of read-ahead cache &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace.sh&#34;&gt;reset-trace&lt;/a&gt;: Reset the state of tracing. Maintenance tool only. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat.py&#34;&gt;runqlat&lt;/a&gt;: Run queue (scheduler) latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen.py&#34;&gt;runqlen&lt;/a&gt;: Run queue length as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower.py&#34;&gt;runqslower&lt;/a&gt;: Trace long process scheduling delays. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop.py&#34;&gt;shmsnoop&lt;/a&gt;: Trace System V shared memory syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop.py&#34;&gt;sofdsnoop&lt;/a&gt;: Trace FDs passed through unix sockets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop.py&#34;&gt;slabratetop&lt;/a&gt;: Kernel SLAB/SLUB memory cache allocation rate top. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs.py&#34;&gt;softirqs&lt;/a&gt;: Measure soft IRQ (soft interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten.py&#34;&gt;solisten&lt;/a&gt;: Trace TCP socket listen. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff.py&#34;&gt;sslsniff&lt;/a&gt;: Sniff OpenSSL written and readed data. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount.py&#34;&gt;stackcount&lt;/a&gt;: Count kernel function calls and their stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop.py&#34;&gt;syncsnoop&lt;/a&gt;: Trace sync() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount.py&#34;&gt;syscount&lt;/a&gt;: Summarize syscall counts and latencies. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept.py&#34;&gt;tcpaccept&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect.py&#34;&gt;tcpconnect&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat.py&#34;&gt;tcpconnlat&lt;/a&gt;: Trace TCP active connection latency (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop.py&#34;&gt;tcpdrop&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife.py&#34;&gt;tcplife&lt;/a&gt;: Trace TCP sessions and summarize lifespan. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans.py&#34;&gt;tcpretrans&lt;/a&gt;: Trace TCP retransmits and TLPs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt.py&#34;&gt;tcprtt&lt;/a&gt;: Trace TCP round trip time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates.py&#34;&gt;tcpstates&lt;/a&gt;: Trace TCP session state changes with durations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet.py&#34;&gt;tcpsubnet&lt;/a&gt;: Summarize and aggregate TCP send by subnet. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl.py&#34;&gt;tcpsynbl&lt;/a&gt;: Show TCP SYN backlog. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop.py&#34;&gt;tcptop&lt;/a&gt;: Summarize TCP send/recv throughput by host. Top for TCP. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer.py&#34;&gt;tcptracer&lt;/a&gt;: Trace TCP established connections (connect(), accept(), close()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong.py&#34;&gt;tcpcong&lt;/a&gt;: Trace TCP socket congestion control status duration. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop.py&#34;&gt;threadsnoop&lt;/a&gt;: List new thread creation. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist.py&#34;&gt;tplist&lt;/a&gt;: Display kernel tracepoints or USDT probes and their formats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace.py&#34;&gt;trace&lt;/a&gt;: Trace arbitrary functions, with filters. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop.py&#34;&gt;ttysnoop&lt;/a&gt;: Watch live output from a tty or pts device. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls.py&#34;&gt;ucalls&lt;/a&gt;: Summarize method calls or Linux syscalls in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow.py&#34;&gt;uflow&lt;/a&gt;: Print a method flow graph in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc.py&#34;&gt;ugc&lt;/a&gt;: Trace garbage collection events in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew.py&#34;&gt;uobjnew&lt;/a&gt;: Summarize object allocation events by object type and number of bytes allocated. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat.py&#34;&gt;ustat&lt;/a&gt;: Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads.py&#34;&gt;uthreads&lt;/a&gt;: Trace thread creation events in Java and raw pthreads. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount.py&#34;&gt;vfscount&lt;/a&gt;: Count VFS calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat.py&#34;&gt;vfsstat&lt;/a&gt;: Count some VFS calls, with column output. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat.py&#34;&gt;virtiostat&lt;/a&gt;: Show VIRTIO device IO statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime.py&#34;&gt;wakeuptime&lt;/a&gt;: Summarize sleep to wakeup time by waker kernel stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist.py&#34;&gt;xfsdist&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower.py&#34;&gt;xfsslower&lt;/a&gt;: Trace slow XFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist.py&#34;&gt;zfsdist&lt;/a&gt;: Summarize ZFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower.py&#34;&gt;zfsslower&lt;/a&gt;: Trace slow ZFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/distributed_bridge&#34;&gt;distributed_bridge/&lt;/a&gt;: Distributed bridge example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/http_filter&#34;&gt;http_filter/&lt;/a&gt;: Simple HTTP filter example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simple_tc.py&#34;&gt;simple_tc.py&lt;/a&gt;: Simple traffic control example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simulation.py&#34;&gt;simulation.py&lt;/a&gt;: Simulation helper.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.py&#34;&gt;tc_neighbor_sharing.py&lt;/a&gt; examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.c&#34;&gt;tc_neighbor_sharing.c&lt;/a&gt;: Per-IP classification and rate limiting.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;tunnel_monitor/&lt;/a&gt;: Efficiently monitor traffic flows.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/vlan_learning/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.py&#34;&gt;vlan_learning.py&lt;/a&gt; examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.c&#34;&gt;vlan_learning.c&lt;/a&gt;: Demux Ethernet traffic into worker veth+namespaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BPF Introspection:&lt;/h3&gt; &#xA;&lt;p&gt;Tools that help to introspect BPF programs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;introspection/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps.c&#34;&gt;bps.c&lt;/a&gt;: List all BPF programs loaded into the kernel. &#39;ps&#39; for BPF programs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;BPF guarantees that the programs loaded into the kernel cannot crash, and cannot run forever, but yet BPF is general purpose enough to perform many arbitrary types of computation. Currently, it is possible to write a program in C that will compile into a valid BPF program, yet it is vastly easier to write a C program that will compile into invalid BPF (C is like that). The user won&#39;t know until trying to run the program whether it was valid or not.&lt;/p&gt; &#xA;&lt;p&gt;With a BPF-specific frontend, one should be able to write in a language and receive feedback from the compiler on the validity as it pertains to a BPF backend. This toolkit aims to provide a frontend that can only create valid BPF programs while still harnessing its full flexibility.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, current integrations with BPF have a kludgy workflow, sometimes involving compiling directly in a linux kernel source tree. This toolchain aims to minimize the time that a developer spends getting BPF compiled, and instead focus on the applications that can be written and the problems that can be solved with BPF.&lt;/p&gt; &#xA;&lt;p&gt;The features of this toolkit include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;End-to-end BPF workflow in a shared library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A modified C language for BPF backends&lt;/li&gt; &#xA;   &lt;li&gt;Integration with llvm-bpf backend for JIT&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic (un)loading of JITed programs&lt;/li&gt; &#xA;   &lt;li&gt;Support for BPF kernel hooks: socket filters, tc classifiers, tc actions, and kprobes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bindings for Python&lt;/li&gt; &#xA; &lt;li&gt;Examples for socket filters, tc classifiers, and kprobes&lt;/li&gt; &#xA; &lt;li&gt;Self-contained tools for tracing a running system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, more bindings besides python will likely be supported. Feel free to add support for the language of your choice and send a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial.md&#34;&gt;docs/tutorial.md&lt;/a&gt;: Using bcc tools to solve performance, troubleshooting, and networking issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial_bcc_python_developer.md&#34;&gt;docs/tutorial_bcc_python_developer.md&lt;/a&gt;: Developing new bcc programs using the Python interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;At Red Hat Summit 2015, BCC was presented as part of a &lt;a href=&#34;http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec&#34;&gt;session on BPF&lt;/a&gt;. A multi-host vxlan environment is simulated and a BPF program used to monitor one of the physical interfaces. The BPF program keeps statistics on the inner and outer IP addresses traversing the interface, and the userspace component turns those statistics into a graph showing the traffic distribution at multiple granularities. See the code &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Already pumped up to commit some code? Here are some resources to join the discussions in the &lt;a href=&#34;https://www.iovisor.org/&#34;&gt;IOVisor&lt;/a&gt; community and see what you want to work on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mailing List:&lt;/em&gt; &lt;a href=&#34;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&#34;&gt;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;IRC:&lt;/em&gt; #iovisor at irc.oftc.net&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;BCC Issue Tracker:&lt;/em&gt; &lt;a href=&#34;https://github.com/iovisor/bcc/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;A guide for contributing scripts:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/CONTRIBUTING-SCRIPTS.md&#34;&gt;CONTRIBUTING-SCRIPTS.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;p&gt;Looking for more information on BCC and how it&#39;s being used? You can find links to other BCC content on the web in &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/LINKS.md&#34;&gt;LINKS.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>taviso/123elf</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/taviso/123elf</id>
    <link href="https://github.com/taviso/123elf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native port of Lotus 1-2-3 to Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lotus 1-2-3 for Linux&lt;/h1&gt; &#xA;&lt;p&gt;This is a native port of Lotus 1-2-3 Release 3 to Linux. This is possible because Lotus 1-2-3 for UNIX SystemV used a trick called &lt;a href=&#34;https://sourceware.org/binutils/docs-2.38/ld/Options.html#:~:text=This%20is%20often%20called%20partial%20linking.&#34;&gt;partial linking&lt;/a&gt; to workaround a technical limitation in early UNIX systems. Surprisingly, that can be used to modify it to support new platforms.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s an article documenting how this is possible &lt;a href=&#34;https://lock.cmpxchg8b.com/linux123.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://lock.cmpxchg8b.com/img/123linux.png&#34; alt=&#34;Lotus 1-2-3 for Linux&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;First, you need a version of binutils that is compiled with &lt;code&gt;coff-i386&lt;/code&gt; target support. You can check like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ objdump --info | grep coff-i386&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Most distributions do not enable this for some reason.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run the included &lt;code&gt;binutils.sh&lt;/code&gt; to download and compile a version of binutils known to work for this.&lt;/p&gt; &#xA;&lt;p&gt;Secondly, you need a copy of Lotus 1-2-3 for UNIX, you can download it &lt;a href=&#34;https://archive.org/details/123-unix&#34;&gt;here&lt;/a&gt;. Just place the raw disk images in the build directory and run &lt;code&gt;extract.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, just run &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Packages&lt;/h4&gt; &#xA;&lt;p&gt;The following packages are required&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Ubuntu&lt;/th&gt; &#xA;   &lt;th&gt;Fedora&lt;/th&gt; &#xA;   &lt;th&gt;Debian (bookworm)&lt;/th&gt; &#xA;   &lt;th&gt;Ubuntu (bionic)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;build-essential&lt;/td&gt; &#xA;   &lt;td&gt;glibc-devel.i686&lt;/td&gt; &#xA;   &lt;td&gt;build-essential&lt;/td&gt; &#xA;   &lt;td&gt;build-essential&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gcc-multilib&lt;/td&gt; &#xA;   &lt;td&gt;libgcc.i686&lt;/td&gt; &#xA;   &lt;td&gt;gcc-multilib&lt;/td&gt; &#xA;   &lt;td&gt;gcc-multilib&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lib32ncurses-dev&lt;/td&gt; &#xA;   &lt;td&gt;ncurses-static.i686&lt;/td&gt; &#xA;   &lt;td&gt;lib32ncurses-dev&lt;/td&gt; &#xA;   &lt;td&gt;libncurses-dev:i386&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Binutils&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, most distributions do not enable &lt;code&gt;coff-i386&lt;/code&gt; support in binutils.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s very easy to enable it yourself, download &lt;a href=&#34;https://www.gnu.org/software/binutils/&#34;&gt;binutils&lt;/a&gt; and configure it with &lt;code&gt;--enable-targets=all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: binutils-2.38 is known to work, some earlier versions have been found to not work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There&#39;s no need to install it, just build it with &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When that&#39;s complete, copy &lt;code&gt;objcopy&lt;/code&gt; and &lt;code&gt;objdump&lt;/code&gt; from the &lt;code&gt;binutils&lt;/code&gt; directory, and &lt;code&gt;ld-new&lt;/code&gt; from the &lt;code&gt;ld&lt;/code&gt; directory to &lt;code&gt;123elf&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: Remember to rename &lt;code&gt;ld-new&lt;/code&gt; to &lt;code&gt;ld&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Makefile should automatically use the new binaries, and continue to build.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Just run &lt;code&gt;./123&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;There is a quick start guide in the wiki &lt;a href=&#34;https://github.com/taviso/123elf/wiki/Getting-Started&#34;&gt;here&lt;/a&gt;, and the full manual can be seen here &lt;a href=&#34;https://archive.org/details/lotus-1-2-3-release-3.1-reference/Lotus%201-2-3%20Release%203.1%20-%20Tutorial&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a man page in &lt;code&gt;./root/lotus/man/man1/123.1&lt;/code&gt; that describes the command line options.&lt;/p&gt; &#xA;&lt;p&gt;Lotus 1-2-3 has context sensitive online help, you can press &lt;kbd&gt;F1&lt;/kbd&gt; at most times to see some hints.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You use the &lt;kbd&gt;/&lt;/kbd&gt; key to open the 123 menu!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you&#39;ve used any spreadsheet before, you should be able to get started quickly. Functions use &lt;code&gt;@&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;, but the common functions like &lt;code&gt;@SUM&lt;/code&gt;, &lt;code&gt;@AVG&lt;/code&gt;, &lt;code&gt;@INDEX&lt;/code&gt;, and even &lt;code&gt;@HLOOKUP&lt;/code&gt; all work as you would expect.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Q. How do I quit 123?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the status indicator in the top right says &lt;code&gt;READY&lt;/code&gt;, try &lt;code&gt;/Quit Yes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If it doesn&#39;t say &lt;code&gt;READY&lt;/code&gt; (it might say &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;HELP&lt;/code&gt; &lt;code&gt;POINT&lt;/code&gt;, &lt;code&gt;MENU&lt;/code&gt; or something else), try hitting &lt;code&gt;Esc&lt;/code&gt; until it goes back to &lt;code&gt;READY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Q. I get the error &#39;invalid compressed data--code out of range&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You have a &lt;em&gt;very&lt;/em&gt; old gzip with broken lzw/pack support. You can try running the &lt;code&gt;gzip.sh&lt;/code&gt; script to build a more recent gzip, then rerun the extract script.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;The keyboard map seems to be incomplete&lt;/del&gt; This seems to be working in xterm, please test other terminals!&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Graphs don&#39;t work yet&lt;/del&gt; (Partially working!, see &lt;a href=&#34;https://github.com/taviso/123elf/issues/5&#34;&gt;#5&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Printing doesn&#39;t work yet&lt;/del&gt; (Print to file works, print to lpr is being worked on, see &lt;a href=&#34;https://github.com/taviso/123elf/issues/50&#34;&gt;#50&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;File an issue if you notice something, there are probably lots of minor issues that can be fixed!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;By default, 123 allows Autoexec macros in worksheets. Lotus macros are very powerful, and can run shell commands, read and write arbitrary files, load plugins and so on.&lt;/p&gt; &#xA;&lt;p&gt;However, you can disable Autoexec macros via &lt;code&gt;/Worksheet Global Default Autoexec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I am thinking of changing this default before we reach a first release, see &lt;a href=&#34;https://github.com/taviso/123elf/issues/27&#34;&gt;#27&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you disable Autoexec then in &lt;em&gt;theory&lt;/em&gt; it&#39;s safe to open untrusted worksheets -- &lt;em&gt;&lt;strong&gt;but&lt;/strong&gt;&lt;/em&gt; this software hasn&#39;t been maintained for over 30 years, and may contain security bugs!&lt;/p&gt; &#xA;&lt;p&gt;We can fix bugs with &lt;code&gt;coffsyrup&lt;/code&gt;, by redirecting unsafe functions to new safe versions, so we will make a best effort to fix vulnerabilities if you &lt;a href=&#34;https://github.com/taviso/123elf/issues/new&#34;&gt;report&lt;/a&gt; them!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>espressif/esp-idf</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/espressif/esp-idf</id>
    <link href="https://github.com/espressif/esp-idf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Espressif IoT Development Framework. Official development framework for Espressif SoCs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif IoT Development Framework&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/README_CN.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.&lt;/p&gt; &#xA;&lt;h1&gt;ESP-IDF Release Support Schedule&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.espressif.com/dl/esp-idf/support-periods.svg?sanitize=true&#34; alt=&#34;Support Schedule&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/SUPPORT_POLICY.md&#34;&gt;the support policy&lt;/a&gt; and &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;the documentation&lt;/a&gt; for more information about ESP-IDF versions.&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://www.espressif.com/en/support/documents/advisories?keys=&amp;amp;field_type_of_advisory_tid%5B%5D=817&#34;&gt;End-of-Life Advisories&lt;/a&gt; for information about ESP-IDF releases with discontinued support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ESP-IDF Release and SoC Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;The following table shows ESP-IDF support of Espressif SoCs where &lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt; and &lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt; denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Chip&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.3&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.4&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_S3&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://blog.espressif.com/esp32-c2-and-why-it-matter-s-bcf4d7d0b2c6&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-H2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_H2&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Espressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by &lt;a href=&#34;https://github.com/espressif/ESP8266_RTOS_SDK&#34;&gt;RTOS SDK&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h1&gt;Developing With ESP-IDF&lt;/h1&gt; &#xA;&lt;h2&gt;Setting Up ESP-IDF&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://idf.espressif.com/&#34;&gt;https://idf.espressif.com/&lt;/a&gt; for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each SoC series and each ESP-IDF release has its own documentation. Please see Section &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;Versions&lt;/a&gt; on how to find documentation and how to checkout specific release of ESP-IDF.&lt;/p&gt; &#xA;&lt;h3&gt;Non-GitHub forks&lt;/h3&gt; &#xA;&lt;p&gt;ESP-IDF uses relative locations as its submodules URLs (&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/.gitmodules&#34;&gt;.gitmodules&lt;/a&gt;). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/tools/set-submodules-to-github.sh&#34;&gt;tools/set-submodules-to-github.sh&lt;/a&gt; after git clone.&lt;/p&gt; &#xA;&lt;p&gt;The script sets absolute URLs for all submodules, allowing &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to complete. If cloning ESP-IDF from GitHub, this step is not needed.&lt;/p&gt; &#xA;&lt;h2&gt;Finding a Project&lt;/h2&gt; &#xA;&lt;p&gt;As well as the &lt;a href=&#34;https://github.com/espressif/esp-idf-template&#34;&gt;esp-idf-template&lt;/a&gt; project mentioned in Getting Started, ESP-IDF comes with some example projects in the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve found the project you want to work with, change to its directory and you can configure and build it.&lt;/p&gt; &#xA;&lt;p&gt;To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Reference&lt;/h1&gt; &#xA;&lt;p&gt;See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:&lt;/p&gt; &#xA;&lt;h2&gt;Setup Build Environment&lt;/h2&gt; &#xA;&lt;p&gt;(See the Getting Started guide listed above for a full list of required steps with more details.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install host build dependencies mentioned in the Getting Started guide.&lt;/li&gt; &#xA; &lt;li&gt;Run the install script to set up the build environment. The options include &lt;code&gt;install.bat&lt;/code&gt; or &lt;code&gt;install.ps1&lt;/code&gt; for Windows, and &lt;code&gt;install.sh&lt;/code&gt; or &lt;code&gt;install.fish&lt;/code&gt; for Unix shells.&lt;/li&gt; &#xA; &lt;li&gt;Run the export script on Windows (&lt;code&gt;export.bat&lt;/code&gt;) or source it on Unix (&lt;code&gt;source export.sh&lt;/code&gt;) in every shell environment before using ESP-IDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the Project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py set-target &amp;lt;chip_name&amp;gt;&lt;/code&gt; sets the target of the project to &lt;code&gt;&amp;lt;chip_name&amp;gt;&lt;/code&gt;. Run &lt;code&gt;idf.py set-target&lt;/code&gt; without any arguments to see a list of supported targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;/code&gt; opens a text-based configuration menu where you can configure the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling the Project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;... will compile app, bootloader and generate a partition table based on the config.&lt;/p&gt; &#xA;&lt;h2&gt;Flashing the Project&lt;/h2&gt; &#xA;&lt;p&gt;When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py -p PORT flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace PORT with the name of your serial port (like &lt;code&gt;COM3&lt;/code&gt; on Windows, &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; on Linux, or &lt;code&gt;/dev/cu.usbserial-X&lt;/code&gt; on MacOS. If the &lt;code&gt;-p&lt;/code&gt; option is left out, &lt;code&gt;idf.py flash&lt;/code&gt; will try to flash the first available serial port.&lt;/p&gt; &#xA;&lt;p&gt;This will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with &lt;code&gt;idf.py menuconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to run &lt;code&gt;idf.py build&lt;/code&gt; before running &lt;code&gt;idf.py flash&lt;/code&gt;, &lt;code&gt;idf.py flash&lt;/code&gt; will automatically rebuild anything which needs it.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing Serial Output&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py monitor&lt;/code&gt; target uses the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;idf_monitor tool&lt;/a&gt; to display serial output from Espressif SoCs. idf_monitor also has a range of features to decode crash output and interact with the device. &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;Check the documentation page for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Exit the monitor by typing Ctrl-].&lt;/p&gt; &#xA;&lt;p&gt;To build, flash and monitor output in one pass, you can run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py flash monitor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling &amp;amp; Flashing Only the App&lt;/h2&gt; &#xA;&lt;p&gt;After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app&lt;/code&gt; - build just the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; - flash just the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; will automatically rebuild the app if any source files have changed.&lt;/p&gt; &#xA;&lt;p&gt;(In normal development there&#39;s no downside to reflashing the bootloader and partition table each time, if they haven&#39;t changed.)&lt;/p&gt; &#xA;&lt;h2&gt;Erasing Flash&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py flash&lt;/code&gt; target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run &lt;code&gt;idf.py erase-flash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can be combined with other targets, ie &lt;code&gt;idf.py -p PORT erase-flash flash&lt;/code&gt; will erase everything and then re-flash the new app, bootloader and partition table.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation for the latest version: &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/&#34;&gt;https://docs.espressif.com/projects/esp-idf/&lt;/a&gt;. This documentation is built from the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/docs&#34;&gt;docs directory&lt;/a&gt; of this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://esp32.com/&#34;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/espressif/esp-idf/issues&#34;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing to ESP-IDF, please check the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html&#34;&gt;Contributions Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Azure/sonic-buildimage</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/Azure/sonic-buildimage</id>
    <link href="https://github.com/Azure/sonic-buildimage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripts which perform an installable binary image build for SONiC&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;static analysis&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lgtm.com/projects/g/Azure/sonic-buildimage/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/Azure/sonic-buildimage.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/Azure/sonic-buildimage/context:python&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/python/g/Azure/sonic-buildimage.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Python&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;master builds&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=master&amp;amp;label=Barefoot&#34; alt=&#34;Barefoot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=master&amp;amp;label=Broadcom&#34; alt=&#34;Broadcom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=master&amp;amp;label=Centec&#34; alt=&#34;Centec&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=master&amp;amp;label=Centec-arm64&#34; alt=&#34;Centec(arm64)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=master&amp;amp;label=Innovium&#34; alt=&#34;Innovium&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=master&amp;amp;label=Mellanox&#34; alt=&#34;Mellanox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=master&amp;amp;label=Marvell-armhf&#34; alt=&#34;Marvell(armhf)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=master&amp;amp;label=Nephos&#34; alt=&#34;Nephos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/p4/job/buildimage-p4-all&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/p4/job/buildimage-p4-all/badge/icon?subject=P4&#34; alt=&#34;P4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=master&amp;amp;label=VS&#34; alt=&#34;VS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;202012 builds&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202012&amp;amp;label=Barefoot&#34; alt=&#34;Barefoot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202012&amp;amp;label=Broadcom&#34; alt=&#34;Broadcom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202012&amp;amp;label=Centec&#34; alt=&#34;Centec&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202012&amp;amp;label=Centec-arm64&#34; alt=&#34;Centec(arm64)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202012&amp;amp;label=Innovium&#34; alt=&#34;Innovium&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202012&amp;amp;label=Marvell-armhf&#34; alt=&#34;Marvell(armhf)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202012&amp;amp;label=Mellanox&#34; alt=&#34;Mellanox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202012&amp;amp;label=Nephos&#34; alt=&#34;Nephos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202012&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202012&amp;amp;label=VS&#34; alt=&#34;VS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;201911 builds&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=201911&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=201911&amp;amp;label=Barefoot&#34; alt=&#34;Barefoot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=201911&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201911&amp;amp;label=Broadcom&#34; alt=&#34;Broadcom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=201911&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201911&amp;amp;label=Innovium&#34; alt=&#34;Innovium&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=201911&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201911&amp;amp;label=Mellanox&#34; alt=&#34;Mellanox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=201911&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201911&amp;amp;label=Nephos&#34; alt=&#34;Nephos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=201911&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201911&amp;amp;label=VS&#34; alt=&#34;VS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;201811 builds&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=201811&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201811&amp;amp;label=Broadcom&#34; alt=&#34;Broadcom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=201811&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201811&amp;amp;label=Mellanox&#34; alt=&#34;Mellanox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=201811&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201811&amp;amp;label=Innovium&#34; alt=&#34;Innovium&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=201811&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201811&amp;amp;label=Nephos&#34; alt=&#34;Nephos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=201811&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201811&amp;amp;label=VS&#34; alt=&#34;VS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;201807 builds&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201807/&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201807/badge/icon?subject=Broadcom&#34; alt=&#34;Broadcom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/barefoot/job/buildimage-bf-201807/&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/barefoot/job/buildimage-bf-201807/badge/icon?subject=Barefoot&#34; alt=&#34;Barefoot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;201803 builds&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201803/&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201803/badge/icon?subject=Broadcom&#34; alt=&#34;Broadcom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/nephos/job/buildimage-nephos-201803/&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/nephos/job/buildimage-nephos-201803/badge/icon?subject=Nephos&#34; alt=&#34;Nephos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/marvell/job/buildimage-mrvl-201803/&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/marvell/job/buildimage-mrvl-201803/badge/icon?subject=Marvell&#34; alt=&#34;Marvell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/mellanox/job/buildimage-mlnx-201803/&#34;&gt;&lt;img src=&#34;https://sonic-jenkins.westus2.cloudapp.azure.com/job/mellanox/job/buildimage-mlnx-201803/badge/icon?subject=Mellanox&#34; alt=&#34;Mellanox&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;sonic-buildimage&lt;/h1&gt; &#xA;&lt;h2&gt;Build SONiC Switch Images&lt;/h2&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Following is the instruction on how to build an &lt;a href=&#34;https://github.com/opencomputeproject/onie&#34;&gt;(ONIE)&lt;/a&gt; compatible network operating system (NOS) installer image for network switches, and also how to build docker images running inside the NOS. Note that SONiC image are build per ASIC platform. Switches using the same ASIC platform share a common image. For a list of supported switches and ASIC, please refer to this &lt;a href=&#34;https://github.com/Azure/SONiC/wiki/Supported-Devices-and-Platforms&#34;&gt;list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Hardware&lt;/h1&gt; &#xA;&lt;p&gt;Any server can be a build image server as long as it has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple cores to increase build speed&lt;/li&gt; &#xA; &lt;li&gt;Plenty of RAM (less than 8 GiB is likely to cause issues)&lt;/li&gt; &#xA; &lt;li&gt;300G of free disk space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A good choice of OS for building SONiC is currently Ubuntu 20.04.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install pip and jinja in host build machine, execute below commands if j2/j2cli is not available:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install -y python3-pip&#xA;sudo pip3 install j2cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt; and configure your system to allow running the &#39;docker&#39; command without &#39;sudo&#39;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add current user to the docker group: &lt;code&gt;sudo gpasswd -a ${USER} docker&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Log out and log back in so that your group membership is re-evaluated&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Clone or fetch the code repository with all git submodules&lt;/h2&gt; &#xA;&lt;p&gt;To clone the code repository recursively, assuming git version 1.9 or newer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Azure/sonic-buildimage.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To build SONiC installer image and docker images, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Ensure the &#39;overlay&#39; module is loaded on your development system&#xA;sudo modprobe overlay&#xA;&#xA;# Enter the source directory&#xA;cd sonic-buildimage&#xA;&#xA;# (Optional) Checkout a specific branch. By default, it uses master branch. For example, to checkout the branch 201911, use &#34;git checkout 201911&#34;&#xA;git checkout [branch_name]&#xA;&#xA;# Execute make init once after cloning the repo, or after fetching remote repo with submodule updates&#xA;make init&#xA;&#xA;# Execute make configure once to configure ASIC&#xA;make configure PLATFORM=[ASIC_VENDOR]&#xA;&#xA;# Build SONiC image with 4 jobs in parallel.&#xA;# Note: You can set this higher, but 4 is a good number for most cases&#xA;# and is well-tested.&#xA;make SONIC_BUILD_JOBS=4 all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The supported ASIC vendors are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PLATFORM=broadcom&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=marvell&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=mellanox&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=cavium&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=centec&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=nephos&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=innovium&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=p4&lt;/li&gt; &#xA; &lt;li&gt;PLATFORM=vs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage for ARM Architecture&lt;/h2&gt; &#xA;&lt;p&gt;To build Arm32 bit for (ARMHF) platform ARM build has dependency in docker version 18, if docker version is 19, downgrade to 18 as below sudo apt-get install --allow-downgrades -y docker-ce=5:18.09.0&lt;del&gt;3-0&lt;/del&gt;ubuntu-xenial sudo apt-get install --allow-downgrades -y docker-ce-cli=5:18.09.0&lt;del&gt;3-0&lt;/del&gt;ubuntu-xenial&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Execute make configure once to configure ASIC and ARCH&#xA;&#xA;make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=armhf&#xA;&#xA;make target/sonic-[ASIC_VENDER]-armhf.bin&#xA;&#xA;# example:&#xA;&#xA;make configure PLATFORM=marvell-armhf PLATFORM_ARCH=armhf&#xA;&#xA;make target/sonic-marvell-armhf.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build Arm64 bit for platform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Execute make configure once to configure ASIC and ARCH&#xA;&#xA;make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=arm64&#xA;&#xA;# example:&#xA;&#xA;make configure PLATFORM=marvell-arm64 PLATFORM_ARCH=arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Recommend reserving at least 100G free space to build one platform with a single job. The build process will use more disk if you are setting &lt;code&gt;SONIC_BUILD_JOBS&lt;/code&gt; to more than 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Docker&#39;s workspace folder, &lt;code&gt;/var/lib/docker&lt;/code&gt;, resides on a partition without sufficient free space, you may encounter an error like the following during a Docker container build job:&lt;/p&gt; &lt;p&gt;&lt;code&gt;/usr/bin/tar: /path/to/sonic-buildimage/&amp;lt;some_file&amp;gt;: Cannot write: No space left on device&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The solution is to &lt;a href=&#34;https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux&#34;&gt;move the directory&lt;/a&gt; to a partition with more free space.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;http_proxy=[your_proxy] https_proxy=[your_proxy] no_proxy=[your_no_proxy] make&lt;/code&gt; to enable http(s) proxy in the build process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your user account to &lt;code&gt;docker&lt;/code&gt; group and use your user account to make. &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The SONiC installer contains all docker images needed. SONiC uses one image for all devices of a same ASIC vendor.&lt;/p&gt; &#xA;&lt;p&gt;For Broadcom ASIC, we build ONIE and EOS image. EOS image is used for Arista devices, ONIE image is used for all other Broadcom ASIC based devices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make configure PLATFORM=broadcom&#xA;# build debian stretch required targets&#xA;BLDENV=stretch make stretch&#xA;# build ONIE image&#xA;make target/sonic-broadcom.bin&#xA;# build EOS image&#xA;make target/sonic-aboot-broadcom.swi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may find the rules/config file useful. It contains configuration options for the build process, like adding more verbosity or showing dependencies, username and password for base image etc.&lt;/p&gt; &#xA;&lt;p&gt;Every docker image is built and saved to target/ directory. So, for instance, to build only docker-database, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make target/docker-database.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same goes for debian packages, which are under target/debs/:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make target/debs/swss_1.0.0_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every target has a clean target, so in order to clean swss, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make target/debs/swss_1.0.0_amd64.deb-clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to use clean targets to clean all packages that are built together, like dev packages for instance. In order to be more familiar with build process and make some changes to it, it is recommended to read this short &lt;a href=&#34;https://raw.githubusercontent.com/Azure/sonic-buildimage/master/README.buildsystem.md&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build debug dockers and debug SONiC installer image:&lt;/h2&gt; &#xA;&lt;p&gt;SONiC build system supports building dockers and ONIE-image with debug tools and debug symbols, to help with live &amp;amp; core debugging. For details refer to &lt;a href=&#34;https://github.com/Azure/sonic-buildimage/raw/master/README.buildsystem.md&#34;&gt;(SONiC Buildimage Guide)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SAI Version&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/Azure/SONiC/wiki/Sonic-Roadmap-Planning&#34;&gt;SONiC roadmap&lt;/a&gt; on the SAI version for each SONiC release.&lt;/p&gt; &#xA;&lt;h2&gt;Notes:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running make for the first time, a sonic-slave-${USER} docker image will be built automatically. This may take a while, but it is a one-time action, so please be patient.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The root user account is disabled. However, the created user can &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The target directory is &lt;code&gt;./target&lt;/code&gt;, containing the NOS installer image and docker images.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sonic-generic.bin: SONiC switch installer image (ONIE compatible)&lt;/li&gt; &#xA;   &lt;li&gt;sonic-aboot.bin: SONiC switch installer image (Aboot compatible)&lt;/li&gt; &#xA;   &lt;li&gt;docker-base.gz: base docker image where other docker images are built from, only used in build process (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-database.gz: docker image for in-memory key-value store, used as inter-process communication (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-fpm.gz: docker image for quagga with fpm module enabled (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-orchagent.gz: docker image for SWitch State Service (SWSS) (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-syncd-brcm.gz: docker image for the daemon to sync database and Broadcom switch ASIC (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-syncd-cavm.gz: docker image for the daemon to sync database and Cavium switch ASIC (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-syncd-mlnx.gz: docker image for the daemon to sync database and Mellanox switch ASIC (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-syncd-nephos.gz: docker image for the daemon to sync database and Nephos switch ASIC (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-syncd-invm.gz: docker image for the daemon to sync database and Innovium switch ASIC (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-sonic-p4.gz: docker image for all-in-one for p4 software switch (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-sonic-vs.gz: docker image for all-in-one for software virtual switch (gzip tar archive)&lt;/li&gt; &#xA;   &lt;li&gt;docker-sonic-mgmt.gz: docker image for &lt;a href=&#34;https://github.com/Azure/sonic-mgmt&#34;&gt;managing, configuring and monitoring SONiC&lt;/a&gt; (gzip tar archive)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;p&gt;All contributors must sign a contribution license agreement before contributions can be accepted. Contact &lt;a href=&#34;mailto:sonic-cla-agreements@microsoft.com&#34;&gt;sonic-cla-agreements@microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub Workflow&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re following basic GitHub Flow. If you have no idea what we&#39;re talking about, check out &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;GitHub&#39;s official guide&lt;/a&gt;. Note that merge is only performed by the repository maintainer.&lt;/p&gt; &#xA;&lt;p&gt;Guide for performing commits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Isolate each commit to one component/bugfix/issue/feature&lt;/li&gt; &#xA; &lt;li&gt;Use a standard commit message format:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;[component/folder touched]: Description intent of your changes&#xA;&#xA;[List of changes]&#xA;&#xA;Signed-off-by: Your Name your@email.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;swss-common: Stabilize the ConsumerTable&#xA;&#xA;* Fixing autoreconf&#xA;* Fixing unit-tests by adding checkers and initialize the DB before start&#xA;* Adding the ability to select from multiple channels&#xA;* Health-Monitor - The idea of the patch is that if something went wrong with the notification channel,&#xA;  we will have the option to know about it (Query the LLEN table length).&#xA;&#xA;  Signed-off-by: user@dev.null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each developer should fork this repository and &lt;a href=&#34;https://help.github.com/articles/adding-collaborators-to-a-personal-repository&#34;&gt;add the team as a Contributor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push your changes to your private fork and do &#34;pull-request&#34; to this repository&lt;/li&gt; &#xA; &lt;li&gt;Use a pull request to do code review&lt;/li&gt; &#xA; &lt;li&gt;Use issues to keep track of what is going on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>littlefs-project/littlefs</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/littlefs-project/littlefs</id>
    <link href="https://github.com/littlefs-project/littlefs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little fail-safe filesystem designed for microcontrollers&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;littlefs&lt;/h2&gt; &#xA;&lt;p&gt;A little fail-safe filesystem designed for microcontrollers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   | | |     .---._____&#xA;  .-----.   |          |&#xA;--|o    |---| littlefs |&#xA;--|     |---|          |&#xA;  &#39;-----&#39;   &#39;----------&#39;&#xA;   | | |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Power-loss resilience&lt;/strong&gt; - littlefs is designed to handle random power failures. All file operations have strong copy-on-write guarantees and if power is lost the filesystem will fall back to the last known good state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dynamic wear leveling&lt;/strong&gt; - littlefs is designed with flash in mind, and provides wear leveling over dynamic blocks. Additionally, littlefs can detect bad blocks and work around them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bounded RAM/ROM&lt;/strong&gt; - littlefs is designed to work with a small amount of memory. RAM usage is strictly bounded, which means RAM consumption does not change as the filesystem grows. The filesystem contains no unbounded recursion and dynamic memory is limited to configurable buffers that can be provided statically.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a simple example that updates a file named &lt;code&gt;boot_count&lt;/code&gt; every time main runs. The program can be interrupted at any time without losing track of how many times it has been booted and without corrupting the filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;lfs.h&#34;&#xA;&#xA;// variables used by the filesystem&#xA;lfs_t lfs;&#xA;lfs_file_t file;&#xA;&#xA;// configuration of the filesystem is provided by this struct&#xA;const struct lfs_config cfg = {&#xA;    // block device operations&#xA;    .read  = user_provided_block_device_read,&#xA;    .prog  = user_provided_block_device_prog,&#xA;    .erase = user_provided_block_device_erase,&#xA;    .sync  = user_provided_block_device_sync,&#xA;&#xA;    // block device configuration&#xA;    .read_size = 16,&#xA;    .prog_size = 16,&#xA;    .block_size = 4096,&#xA;    .block_count = 128,&#xA;    .cache_size = 16,&#xA;    .lookahead_size = 16,&#xA;    .block_cycles = 500,&#xA;};&#xA;&#xA;// entry point&#xA;int main(void) {&#xA;    // mount the filesystem&#xA;    int err = lfs_mount(&amp;amp;lfs, &amp;amp;cfg);&#xA;&#xA;    // reformat if we can&#39;t mount the filesystem&#xA;    // this should only happen on the first boot&#xA;    if (err) {&#xA;        lfs_format(&amp;amp;lfs, &amp;amp;cfg);&#xA;        lfs_mount(&amp;amp;lfs, &amp;amp;cfg);&#xA;    }&#xA;&#xA;    // read current count&#xA;    uint32_t boot_count = 0;&#xA;    lfs_file_open(&amp;amp;lfs, &amp;amp;file, &#34;boot_count&#34;, LFS_O_RDWR | LFS_O_CREAT);&#xA;    lfs_file_read(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));&#xA;&#xA;    // update boot count&#xA;    boot_count += 1;&#xA;    lfs_file_rewind(&amp;amp;lfs, &amp;amp;file);&#xA;    lfs_file_write(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));&#xA;&#xA;    // remember the storage is not updated until the file is closed successfully&#xA;    lfs_file_close(&amp;amp;lfs, &amp;amp;file);&#xA;&#xA;    // release any resources we were using&#xA;    lfs_unmount(&amp;amp;lfs);&#xA;&#xA;    // print the boot count&#xA;    printf(&#34;boot_count: %d\n&#34;, boot_count);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation (or at least as much detail as is currently available) can be found in the comments in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&#34;&gt;lfs.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;littlefs takes in a configuration structure that defines how the filesystem operates. The configuration struct provides the filesystem with the block device operations and dimensions, tweakable parameters that tradeoff memory usage for performance, and optional static buffers if the user wants to avoid dynamic memory.&lt;/p&gt; &#xA;&lt;p&gt;The state of the littlefs is stored in the &lt;code&gt;lfs_t&lt;/code&gt; type which is left up to the user to allocate, allowing multiple filesystems to be in use simultaneously. With the &lt;code&gt;lfs_t&lt;/code&gt; and configuration struct, a user can format a block device or mount the filesystem.&lt;/p&gt; &#xA;&lt;p&gt;Once mounted, the littlefs provides a full set of POSIX-like file and directory functions, with the deviation that the allocation of filesystem structures must be provided by the user.&lt;/p&gt; &#xA;&lt;p&gt;All POSIX operations, such as remove and rename, are atomic, even in event of power-loss. Additionally, file updates are not actually committed to the filesystem until sync or close is called on the file.&lt;/p&gt; &#xA;&lt;h2&gt;Other notes&lt;/h2&gt; &#xA;&lt;p&gt;Littlefs is written in C, and specifically should compile with any compiler that conforms to the &lt;code&gt;C99&lt;/code&gt; standard.&lt;/p&gt; &#xA;&lt;p&gt;All littlefs calls have the potential to return a negative error code. The errors can be either one of those found in the &lt;code&gt;enum lfs_error&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&#34;&gt;lfs.h&lt;/a&gt;, or an error returned by the user&#39;s block device operations.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration struct, the &lt;code&gt;prog&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; function provided by the user may return a &lt;code&gt;LFS_ERR_CORRUPT&lt;/code&gt; error if the implementation already can detect corrupt blocks. However, the wear leveling does not depend on the return code of these functions, instead all data is read back and checked for integrity.&lt;/p&gt; &#xA;&lt;p&gt;If your storage caches writes, make sure that the provided &lt;code&gt;sync&lt;/code&gt; function flushes all the data to memory and ensures that the next read fetches the data from memory, otherwise data integrity can not be guaranteed. If the &lt;code&gt;write&lt;/code&gt; function does not perform caching, and therefore each &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; call hits the memory, the &lt;code&gt;sync&lt;/code&gt; function can simply return 0.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, littlefs is a block based filesystem that uses small logs to store metadata and larger copy-on-write (COW) structures to store file data.&lt;/p&gt; &#xA;&lt;p&gt;In littlefs, these ingredients form a sort of two-layered cake, with the small logs (called metadata pairs) providing fast updates to metadata anywhere on storage, while the COW structures store file data compactly and without any wear amplification cost.&lt;/p&gt; &#xA;&lt;p&gt;Both of these data structures are built out of blocks, which are fed by a common block allocator. By limiting the number of erases allowed on a block per allocation, the allocator provides dynamic wear leveling over the entire filesystem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                    root&#xA;                   .--------.--------.&#xA;                   | A&#39;| B&#39;|         |&#xA;                   |   |   |-&amp;gt;       |&#xA;                   |   |   |         |&#xA;                   &#39;--------&#39;--------&#39;&#xA;                .----&#39;   &#39;--------------.&#xA;       A       v                 B       v&#xA;      .--------.--------.       .--------.--------.&#xA;      | C&#39;| D&#39;|         |       | E&#39;|new|         |&#xA;      |   |   |-&amp;gt;       |       |   | E&#39;|-&amp;gt;       |&#xA;      |   |   |         |       |   |   |         |&#xA;      &#39;--------&#39;--------&#39;       &#39;--------&#39;--------&#39;&#xA;      .-&#39;   &#39;--.                  |   &#39;------------------.&#xA;     v          v              .-&#39;                        v&#xA;.--------.  .--------.        v                       .--------.&#xA;|   C    |  |   D    |   .--------.       write       | new E  |&#xA;|        |  |        |   |   E    |        ==&amp;gt;        |        |&#xA;|        |  |        |   |        |                   |        |&#xA;&#39;--------&#39;  &#39;--------&#39;   |        |                   &#39;--------&#39;&#xA;                         &#39;--------&#39;                   .-&#39;    |&#xA;                         .-&#39;    &#39;-.    .-------------|------&#39;&#xA;                        v          v  v              v&#xA;                   .--------.  .--------.       .--------.&#xA;                   |   F    |  |   G    |       | new F  |&#xA;                   |        |  |        |       |        |&#xA;                   |        |  |        |       |        |&#xA;                   &#39;--------&#39;  &#39;--------&#39;       &#39;--------&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on how littlefs works can be found in &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&#34;&gt;DESIGN.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&#34;&gt;SPEC.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&#34;&gt;DESIGN.md&lt;/a&gt; - A fully detailed dive into how littlefs works. I would suggest reading it as the tradeoffs at work are quite interesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&#34;&gt;SPEC.md&lt;/a&gt; - The on-disk specification of littlefs with all the nitty-gritty details. May be useful for tooling development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The littlefs comes with a test suite designed to run on a PC using the &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/bd/lfs_testbd.h&#34;&gt;emulated block device&lt;/a&gt; found in the &lt;code&gt;bd&lt;/code&gt; directory. The tests assume a Linux environment and can be started with make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The littlefs is provided under the &lt;a href=&#34;https://spdx.org/licenses/BSD-3-Clause.html&#34;&gt;BSD-3-Clause&lt;/a&gt; license. See &lt;a href=&#34;https://raw.githubusercontent.com/littlefs-project/littlefs/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for more information. Contributions to this project are accepted under the same license.&lt;/p&gt; &#xA;&lt;p&gt;Individual files contain the following tag instead of the full license text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SPDX-License-Identifier:    BSD-3-Clause&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables machine processing of license information based on the SPDX License Identifiers that are here available: &lt;a href=&#34;http://spdx.org/licenses/&#34;&gt;http://spdx.org/licenses/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geky/littlefs-fuse&#34;&gt;littlefs-fuse&lt;/a&gt; - A &lt;a href=&#34;https://github.com/libfuse/libfuse&#34;&gt;FUSE&lt;/a&gt; wrapper for littlefs. The project allows you to mount littlefs directly on a Linux machine. Can be useful for debugging littlefs if you have an SD card handy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geky/littlefs-js&#34;&gt;littlefs-js&lt;/a&gt; - A javascript wrapper for littlefs. I&#39;m not sure why you would want this, but it is handy for demos. You can see it in action &lt;a href=&#34;http://littlefs.geky.net/demo.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/littlefs-python/&#34;&gt;littlefs-python&lt;/a&gt; - A Python wrapper for littlefs. The project allows you to create images of the filesystem on your PC. Check if littlefs will fit your needs, create images for a later download to the target memory or inspect the content of a binary image of the target memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/whitecatboard/Lua-RTOS-ESP32/tree/master/components/mklfs/src&#34;&gt;mklfs&lt;/a&gt; - A command line tool built by the &lt;a href=&#34;https://github.com/whitecatboard/Lua-RTOS-ESP32&#34;&gt;Lua RTOS&lt;/a&gt; guys for making littlefs images from a host PC. Supports Windows, Mac OS, and Linux.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/armmbed/mbed-os&#34;&gt;Mbed OS&lt;/a&gt; - The easiest way to get started with littlefs is to jump into Mbed which already has block device drivers for most forms of embedded storage. littlefs is available in Mbed OS as the &lt;a href=&#34;https://os.mbed.com/docs/mbed-os/v5.12/apis/littlefilesystem.html&#34;&gt;LittleFileSystem&lt;/a&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pellepl/spiffs&#34;&gt;SPIFFS&lt;/a&gt; - Another excellent embedded filesystem for NOR flash. As a more traditional logging filesystem with full static wear-leveling, SPIFFS will likely outperform littlefs on small memories such as the internal flash on microcontrollers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dlbeer/dhara&#34;&gt;Dhara&lt;/a&gt; - An interesting NAND flash translation layer designed for small MCUs. It offers static wear-leveling and power-resilience with only a fixed &lt;em&gt;O(|address|)&lt;/em&gt; pointer structure stored on each block and in RAM.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LuaJIT/LuaJIT</title>
    <updated>2022-06-01T02:04:13Z</updated>
    <id>tag:github.com,2022-06-01:/LuaJIT/LuaJIT</id>
    <link href="https://github.com/LuaJIT/LuaJIT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the LuaJIT git repository&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;README for LuaJIT 2.1.0-beta3&lt;/h2&gt; &#xA;&lt;p&gt;LuaJIT is a Just-In-Time (JIT) compiler for the Lua programming language.&lt;/p&gt; &#xA;&lt;p&gt;Project Homepage: &lt;a href=&#34;https://luajit.org/&#34;&gt;https://luajit.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LuaJIT is Copyright (C) 2005-2022 Mike Pall. LuaJIT is free software, released under the MIT license. See full Copyright Notice in the COPYRIGHT file or in luajit.h.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for LuaJIT is available in HTML format. Please point your favorite browser to:&lt;/p&gt; &#xA;&lt;p&gt;doc/luajit.html&lt;/p&gt;</summary>
  </entry>
</feed>