<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-13T01:56:25Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kokke/tiny-AES-c</title>
    <updated>2025-04-13T01:56:25Z</updated>
    <id>tag:github.com,2025-04-13:/kokke/tiny-AES-c</id>
    <link href="https://github.com/kokke/tiny-AES-c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Small portable AES128/192/256 in C&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/kokke/tiny-AES-c/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tiny AES in C&lt;/h3&gt; &#xA;&lt;p&gt;This is a small and portable implementation of the AES &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_.28ECB.29&#34;&gt;ECB&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29&#34;&gt;CTR&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29&#34;&gt;CBC&lt;/a&gt; encryption algorithms written in C.&lt;/p&gt; &#xA;&lt;p&gt;You can override the default key-size of 128 bit with 192 or 256 bit by defining the symbols AES192 or AES256 in &lt;a href=&#34;https://github.com/kokke/tiny-AES-c/raw/master/aes.h&#34;&gt;&lt;code&gt;aes.h&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The API is very simple and looks like this (I am using C99 &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;-style annotated types):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;/* Initialize context calling one of: */&#xA;void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key);&#xA;void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv);&#xA;&#xA;/* ... or reset IV at random point: */&#xA;void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv);&#xA;&#xA;/* Then start encrypting and decrypting with the functions below: */&#xA;void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf);&#xA;void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf);&#xA;&#xA;void AES_CBC_encrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length);&#xA;void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length);&#xA;&#xA;/* Same function for encrypting as for decrypting in CTR mode */&#xA;void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Important notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No padding is provided so for CBC and ECB all buffers should be multiples of 16 bytes. For padding &lt;a href=&#34;https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7&#34;&gt;PKCS7&lt;/a&gt; is recommendable.&lt;/li&gt; &#xA; &lt;li&gt;ECB mode is considered unsafe for most uses and is not implemented in streaming mode. If you need this mode, call the function for every block of 16 bytes you need encrypted. See &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_(ECB)&#34;&gt;wikipedia&#39;s article on ECB&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;This library is designed for small code size and simplicity, intended for cases where small binary size, low memory footprint and portability is more important than high performance. If speed is a concern, you can try more complex libraries, e.g. &lt;a href=&#34;https://tls.mbed.org/&#34;&gt;Mbed TLS&lt;/a&gt;, &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can choose to use any or all of the modes-of-operations, by defining the symbols CBC, CTR or ECB in &lt;a href=&#34;https://github.com/kokke/tiny-AES-c/raw/master/aes.h&#34;&gt;&lt;code&gt;aes.h&lt;/code&gt;&lt;/a&gt; (read the comments for clarification).&lt;/p&gt; &#xA;&lt;p&gt;C++ users should &lt;code&gt;#include&lt;/code&gt; &lt;a href=&#34;https://github.com/kokke/tiny-AES-c/raw/master/aes.hpp&#34;&gt;aes.hpp&lt;/a&gt; instead of &lt;a href=&#34;https://github.com/kokke/tiny-AES-c/raw/master/aes.h&#34;&gt;aes.h&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is no built-in error checking or protection from out-of-bounds memory access errors as a result of malicious input.&lt;/p&gt; &#xA;&lt;p&gt;The module uses less than 200 bytes of RAM and 1-2K ROM when compiled for ARM, but YMMV depending on which modes are enabled.&lt;/p&gt; &#xA;&lt;p&gt;It is one of the smallest implementations in C I&#39;ve seen yet, but do contact me if you know of something smaller (or have improvements to the code here).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve successfully used the code on 64bit x86, 32bit ARM and 8 bit AVR platforms.&lt;/p&gt; &#xA;&lt;p&gt;GCC size output when only CTR mode is compiled for ARM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ arm-none-eabi-gcc -Os -DCBC=0 -DECB=0 -DCTR=1 -c aes.c&#xA;$ size aes.o&#xA;   text    data     bss     dec     hex filename&#xA;   1171       0       0    1171     493 aes.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. and when compiling for the THUMB instruction set, we end up well below 1K in code size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ arm-none-eabi-gcc -Os -mthumb -DCBC=0 -DECB=0 -DCTR=1 -c aes.c&#xA;$ size aes.o&#xA;   text    data     bss     dec     hex filename&#xA;    903       0       0     903     387 aes.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I am using the Free Software Foundation, ARM GCC compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ arm-none-eabi-gcc --version&#xA;arm-none-eabi-gcc (4.8.4-1+11-1) 4.8.4 20141219 (release)&#xA;Copyright (C) 2013 Free Software Foundation, Inc.&#xA;This is free software; see the source for copying conditions.  There is NO&#xA;warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This implementation is verified against the data in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf&#34;&gt;National Institute of Standards and Technology Special Publication 800-38A 2001 ED&lt;/a&gt; Appendix F: Example Vectors for Modes of Operation of the AES.&lt;/p&gt; &#xA;&lt;p&gt;The other appendices in the document are valuable for implementation details on e.g. padding, generation of IVs and nonces in CTR-mode etc.&lt;/p&gt; &#xA;&lt;p&gt;A heartfelt thank-you to &lt;a href=&#34;https://github.com/kokke/tiny-AES-c/graphs/contributors&#34;&gt;all the nice people&lt;/a&gt; out there who have contributed to this project.&lt;/p&gt; &#xA;&lt;p&gt;All material in this repository is in the public domain.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openssh/openssh-portable</title>
    <updated>2025-04-13T01:56:25Z</updated>
    <id>tag:github.com,2025-04-13:/openssh/openssh-portable</id>
    <link href="https://github.com/openssh/openssh-portable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Portable OpenSSH&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Portable OpenSSH&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openssh/openssh-portable/actions/workflows/c-cpp.yml&#34;&gt;&lt;img src=&#34;https://github.com/openssh/openssh-portable/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;C/C++ CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:openssh&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/openssh.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/openssh-portable&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/21341/badge.svg?sanitize=true&#34; alt=&#34;Coverity Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenSSH is a complete implementation of the SSH protocol (version 2) for secure remote login, command execution and file transfer. It includes a client &lt;code&gt;ssh&lt;/code&gt; and server &lt;code&gt;sshd&lt;/code&gt;, file transfer utilities &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;sftp&lt;/code&gt; as well as tools for key generation (&lt;code&gt;ssh-keygen&lt;/code&gt;), run-time key storage (&lt;code&gt;ssh-agent&lt;/code&gt;) and a number of supporting programs.&lt;/p&gt; &#xA;&lt;p&gt;This is a port of OpenBSD&#39;s &lt;a href=&#34;https://openssh.com&#34;&gt;OpenSSH&lt;/a&gt; to most Unix-like operating systems, including Linux, OS X and Cygwin. Portable OpenSSH polyfills OpenBSD APIs that are not available elsewhere, adds sshd sandboxing for more operating systems and includes support for OS-native authentication and auditing (e.g. using PAM).&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The official documentation for OpenSSH are the man pages for each tool:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/ssh.1&#34;&gt;ssh(1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/sshd.8&#34;&gt;sshd(8)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/ssh-keygen.1&#34;&gt;ssh-keygen(1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/ssh-agent.1&#34;&gt;ssh-agent(1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/scp.1&#34;&gt;scp(1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/sftp.1&#34;&gt;sftp(1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/ssh-keyscan.8&#34;&gt;ssh-keyscan(8)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man.openbsd.org/sftp-server.8&#34;&gt;sftp-server(8)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stable Releases&lt;/h2&gt; &#xA;&lt;p&gt;Stable release tarballs are available from a number of &lt;a href=&#34;https://www.openssh.com/portable.html#downloads&#34;&gt;download mirrors&lt;/a&gt;. We recommend the use of a stable release for most users. Please read the &lt;a href=&#34;https://www.openssh.com/releasenotes.html&#34;&gt;release notes&lt;/a&gt; for details of recent changes and potential incompatibilities.&lt;/p&gt; &#xA;&lt;h2&gt;Building Portable OpenSSH&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Portable OpenSSH is built using autoconf and make. It requires a working C compiler, standard library and headers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libcrypto&lt;/code&gt; from either &lt;a href=&#34;https://www.libressl.org/&#34;&gt;LibreSSL&lt;/a&gt; or &lt;a href=&#34;https://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt; may also be used. OpenSSH may be built without either of these, but the resulting binaries will have only a subset of the cryptographic algorithms normally available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; is optional; without it transport compression is not supported.&lt;/p&gt; &#xA;&lt;p&gt;FIDO security token support needs &lt;a href=&#34;https://github.com/Yubico/libfido2&#34;&gt;libfido2&lt;/a&gt; and its dependencies and will be enabled automatically if they are found.&lt;/p&gt; &#xA;&lt;p&gt;In addition, certain platforms and build-time options may require additional dependencies; see README.platform for details about your platform.&lt;/p&gt; &#xA;&lt;h3&gt;Building a release&lt;/h3&gt; &#xA;&lt;p&gt;Release tarballs and release branches in git include a pre-built copy of the &lt;code&gt;configure&lt;/code&gt; script and may be built using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tar zxvf openssh-X.YpZ.tar.gz&#xA;cd openssh&#xA;./configure # [options]&#xA;make &amp;amp;&amp;amp; make tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openssh/openssh-portable/master/#build-time-customisation&#34;&gt;Build-time Customisation&lt;/a&gt; section below for configure options. If you plan on installing OpenSSH to your system, then you will usually want to specify destination paths.&lt;/p&gt; &#xA;&lt;h3&gt;Building from git&lt;/h3&gt; &#xA;&lt;p&gt;If building from the git master branch, you&#39;ll need &lt;a href=&#34;https://www.gnu.org/software/autoconf/&#34;&gt;autoconf&lt;/a&gt; installed to build the &lt;code&gt;configure&lt;/code&gt; script. The following commands will check out and build portable OpenSSH from git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssh/openssh-portable # or https://anongit.mindrot.org/openssh.git&#xA;cd openssh-portable&#xA;autoreconf&#xA;./configure&#xA;make &amp;amp;&amp;amp; make tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build-time Customisation&lt;/h3&gt; &#xA;&lt;p&gt;There are many build-time customisation options available. All Autoconf destination path flags (e.g. &lt;code&gt;--prefix&lt;/code&gt;) are supported (and are usually required if you want to install OpenSSH).&lt;/p&gt; &#xA;&lt;p&gt;For a full list of available flags, run &lt;code&gt;./configure --help&lt;/code&gt; but a few of the more frequently-used ones are described below. Some of these flags will require additional libraries and/or headers be installed.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--with-pam&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable &lt;a href=&#34;https://en.wikipedia.org/wiki/Pluggable_authentication_module&#34;&gt;PAM&lt;/a&gt; support. &lt;a href=&#34;https://www.openpam.org/&#34;&gt;OpenPAM&lt;/a&gt;, &lt;a href=&#34;http://www.linux-pam.org/&#34;&gt;Linux PAM&lt;/a&gt; and Solaris PAM are supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--with-libedit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable &lt;a href=&#34;https://www.thrysoee.dk/editline/&#34;&gt;libedit&lt;/a&gt; support for sftp.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--with-kerberos5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable Kerberos/GSSAPI support. Both &lt;a href=&#34;https://www.h5l.org/&#34;&gt;Heimdal&lt;/a&gt; and &lt;a href=&#34;https://web.mit.edu/kerberos/&#34;&gt;MIT&lt;/a&gt; Kerberos implementations are supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--with-selinux&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable &lt;a href=&#34;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&#34;&gt;SELinux&lt;/a&gt; support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Portable OpenSSH development is discussed on the &lt;a href=&#34;https://lists.mindrot.org/mailman/listinfo/openssh-unix-dev&#34;&gt;openssh-unix-dev mailing list&lt;/a&gt; (&lt;a href=&#34;https://marc.info/?l=openssh-unix-dev&#34;&gt;archive mirror&lt;/a&gt;). Bugs and feature requests are tracked on our &lt;a href=&#34;https://bugzilla.mindrot.org/&#34;&gt;Bugzilla&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Non-security&lt;/em&gt; bugs may be reported to the developers via &lt;a href=&#34;https://bugzilla.mindrot.org/&#34;&gt;Bugzilla&lt;/a&gt; or via the mailing list above. Security bugs should be reported to &lt;a href=&#34;mailto:openssh.openssh.com&#34;&gt;openssh@openssh.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NixOS/patchelf</title>
    <updated>2025-04-13T01:56:25Z</updated>
    <id>tag:github.com,2025-04-13:/NixOS/patchelf</id>
    <link href="https://github.com/NixOS/patchelf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small utility to modify the dynamic linker and RPATH of ELF executables&lt;/p&gt;&lt;hr&gt;&lt;p&gt;PatchELF is a simple utility for modifying existing ELF executables and libraries. In particular, it can do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the dynamic loader (&#34;ELF interpreter&#34;) of executables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --set-interpreter /lib/my-ld-linux.so.2 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the &lt;code&gt;RPATH&lt;/code&gt; of executables and libraries:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --set-rpath /opt/my-libs/lib:/other-libs my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shrink the &lt;code&gt;RPATH&lt;/code&gt; of executables and libraries:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --shrink-rpath my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This removes from the &lt;code&gt;RPATH&lt;/code&gt; all directories that do not contain a library referenced by &lt;code&gt;DT_NEEDED&lt;/code&gt; fields of the executable or library. For instance, if an executable references one library &lt;code&gt;libfoo.so&lt;/code&gt;, has an RPATH &lt;code&gt;/lib:/usr/lib:/foo/lib&lt;/code&gt;, and &lt;code&gt;libfoo.so&lt;/code&gt; can only be found in &lt;code&gt;/foo/lib&lt;/code&gt;, then the new &lt;code&gt;RPATH&lt;/code&gt; will be &lt;code&gt;/foo/lib&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In addition, the &lt;code&gt;--allowed-rpath-prefixes&lt;/code&gt; option can be used for further rpath tuning. For instance, if an executable has an &lt;code&gt;RPATH&lt;/code&gt; &lt;code&gt;/tmp/build-foo/.libs:/foo/lib&lt;/code&gt;, it is probably desirable to keep the &lt;code&gt;/foo/lib&lt;/code&gt; reference instead of the &lt;code&gt;/tmp&lt;/code&gt; entry. To accomplish that, use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --shrink-rpath --allowed-rpath-prefixes /usr/lib:/foo/lib my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove declared dependencies on dynamic libraries (&lt;code&gt;DT_NEEDED&lt;/code&gt; entries):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --remove-needed libfoo.so.1 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This option can be given multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a declared dependency on a dynamic library (&lt;code&gt;DT_NEEDED&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --add-needed libfoo.so.1 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This option can be give multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace a declared dependency on a dynamic library with another one (&lt;code&gt;DT_NEEDED&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --replace-needed liboriginal.so.1 libreplacement.so.1 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This option can be give multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change &lt;code&gt;SONAME&lt;/code&gt; of a dynamic library:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --set-soname libnewname.so.3.4.5 path/to/libmylibrary.so.1.2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling and Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Via Autotools&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./bootstrap.sh&#xA;./configure&#xA;make&#xA;make check&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via Nix&lt;/h3&gt; &#xA;&lt;p&gt;You can build with Nix in several ways.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Building via &lt;code&gt;nix build&lt;/code&gt; will produce the result in &lt;code&gt;./result/bin/patchelf&lt;/code&gt;. If you would like to build &lt;em&gt;patchelf&lt;/em&gt; with &lt;em&gt;musl&lt;/em&gt; try &lt;code&gt;nix build .#patchelf-musl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can launch a development environment with &lt;code&gt;nix develop&lt;/code&gt; and follow the autotools steps above. If you would like to develop with &lt;em&gt;musl&lt;/em&gt; try &lt;code&gt;nix develop .#musl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2004-2019 Eelco Dolstra &lt;a href=&#34;mailto:edolstra@gmail.com&#34;&gt;edolstra@gmail.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>