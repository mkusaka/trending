<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-16T01:39:11Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>neutrinolabs/xrdp</title>
    <updated>2024-06-16T01:39:11Z</updated>
    <id>tag:github.com,2024-06-16:/neutrinolabs/xrdp</id>
    <link href="https://github.com/neutrinolabs/xrdp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;xrdp: an open source RDP server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/neutrinolabs/xrdp/actions&#34;&gt;&lt;img src=&#34;https://github.com/neutrinolabs/xrdp/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/neutrinolabs/xrdp-questions&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;Apache-License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neutrinolabs/xrdp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/neutrinolabs/xrdp.svg?label=Latest%20Version&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;xrdp - an open source RDP server&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;xrdp&lt;/strong&gt; provides a graphical login to remote machines using Microsoft Remote Desktop Protocol (RDP). xrdp accepts connections from a variety of RDP clients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeRDP&lt;/li&gt; &#xA; &lt;li&gt;rdesktop&lt;/li&gt; &#xA; &lt;li&gt;KRDC&lt;/li&gt; &#xA; &lt;li&gt;NeutrinoRDP&lt;/li&gt; &#xA; &lt;li&gt;Windows MSTSC (Microsoft Terminal Services Client, aka &lt;code&gt;mstsc.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Remote Desktop (found on Microsoft Store, which is distinct from MSTSC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many of these work on some or all of Windows, Mac OS, iOS, and/or Android.&lt;/p&gt; &#xA;&lt;p&gt;RDP transport is encrypted using TLS by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/neutrinolabs/xrdp/raw/gh-pages/xrdp_demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Remote Desktop Access&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to a Linux desktop using RDP from anywhere (requires &lt;a href=&#34;https://github.com/neutrinolabs/xorgxrdp&#34;&gt;xorgxrdp&lt;/a&gt; Xorg module)&lt;/li&gt; &#xA; &lt;li&gt;Reconnect to an existing session&lt;/li&gt; &#xA; &lt;li&gt;Session resizing (both on-connect and on-the-fly)&lt;/li&gt; &#xA; &lt;li&gt;RDP/VNC proxy (connect to another RDP/VNC server via xrdp)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Access to Remote Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two-way clipboard transfer (text, bitmap, file)&lt;/li&gt; &#xA; &lt;li&gt;Audio redirection (&lt;a href=&#34;https://github.com/neutrinolabs/xrdp/wiki/How-to-set-up-audio-redirection&#34;&gt;requires to build additional modules&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Microphone redirection (&lt;a href=&#34;https://github.com/neutrinolabs/xrdp/wiki/How-to-set-up-audio-redirection&#34;&gt;requires to build additional modules&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Drive redirection (mount local client drives on remote machine)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;xrdp&lt;/strong&gt; primarily targets GNU/Linux operating system. x86 (including x86-64) and ARM processors are most mature architecture to run xrdp on. See also &lt;a href=&#34;https://github.com/neutrinolabs/xrdp/wiki/Platform-Support-Tier&#34;&gt;Platform Support Tier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some components such as xorgxrdp and RemoteFX codec have special optimization for x86 using SIMD instructions. So running xrdp on x86 processors will get fully accelerated experience.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Most Linux distributions should distribute the latest release of xrdp in their repository. You would need xrdp and xorgxrdp packages for the best experience. It is recommended that xrdp depends on xorgxrdp, so it should be sufficient to install xrdp. If xorgxrdp is not provided, use Xvnc server.&lt;/p&gt; &#xA;&lt;p&gt;xrdp listens on 3389/tcp. Make sure your firewall accepts connection to 3389/tcp from where you want to access.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu / Debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install xrdp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora, RHEL and derivatives&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re not running Fedora, make sure to enable EPEL packages first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install epel-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(All systems) Install xrdp with:-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install xrdp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/neutrinolabs/xrdp/wiki#building-from-sources&#34;&gt;https://github.com/neutrinolabs/xrdp/wiki#building-from-sources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To compile xrdp from the packaged sources, you need basic build tools - a compiler (&lt;strong&gt;gcc&lt;/strong&gt; or &lt;strong&gt;clang&lt;/strong&gt;) and the &lt;strong&gt;make&lt;/strong&gt; program. Additionally, you would need &lt;strong&gt;openssl-devel&lt;/strong&gt;, &lt;strong&gt;pam-devel&lt;/strong&gt;, &lt;strong&gt;libX11-devel&lt;/strong&gt;, &lt;strong&gt;libXfixes-devel&lt;/strong&gt;, &lt;strong&gt;libXrandr-devel&lt;/strong&gt;. More additional software would be needed depending on your configuration.&lt;/p&gt; &#xA;&lt;p&gt;To compile xrdp from a checked out git repository, you would additionally need &lt;strong&gt;autoconf&lt;/strong&gt;, &lt;strong&gt;automake&lt;/strong&gt;, &lt;strong&gt;libtool&lt;/strong&gt; and &lt;strong&gt;pkg-config&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get the source and build it&lt;/h3&gt; &#xA;&lt;p&gt;If compiling from the packaged source, unpack the tarball and change to the resulting directory.&lt;/p&gt; &#xA;&lt;p&gt;If compiling from a checked out repository, please make sure you&#39;ve got the submodules cloned too (use &lt;code&gt;git clone --recursive https://github.com/neutrinolabs/xrdp&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Then run following commands to compile and install xrdp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bootstrap&#xA;./configure&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use audio redirection, you need to build and install additional pulseaudio modules. The build instructions can be found at wiki.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neutrinolabs/xrdp/wiki/How-to-set-up-audio-redirection&#34;&gt;How to set up audio redirection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;xrdp&#xA;├── common ······ common code&#xA;├── docs ········ documentation&#xA;├── fontutils ··· font handling utilities&#xA;├── genkeymap ··· keymap generator&#xA;├── instfiles ··· installable data file&#xA;├── keygen ······ xrdp RSA key pair generator&#xA;├── libpainter ·· painter library&#xA;├── librfxcodec · RFX codec library&#xA;├── libxrdp ····· core RDP protocol implementation&#xA;├── m4 ·········· Autoconf macros&#xA;├── mc ·········· media center module&#xA;├── neutrinordp · RDP client module for proxying RDP connections using NeutrinoRDP&#xA;├── pkgconfig ··· pkg-config configuration&#xA;├── scripts ····· build scripts&#xA;├┬─ sesman ······ session manager for xrdp&#xA;|├── chansrv ···· channel server for xrdp&#xA;|├── libsesman ·· Code common to sesman and its related executables&#xA;|└── tools ······ session management tools for sys admins&#xA;├── tests ······· tests for the code&#xA;├┬─ tools ······· tools&#xA;|└┬─ devel ······ development tools&#xA;| ├── gtcp_proxy  GTK app that forwards TCP connections to a remote host&#xA;| └── tcp_proxy · CLI app that forwards TCP connections to a remote host&#xA;├── vnc ········· VNC client module for xrdp&#xA;├── vrplayer ···· QT player redirecting video/audio to clients over xrdpvr channel&#xA;├── xrdp ········ main server code&#xA;├── xrdpapi ····· virtual channel API&#xA;├── xrdpvr ······ API for playing media over RDP&#xA;└── xup ········· xorgxrdp client module&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>RubyMetric/chsrc</title>
    <updated>2024-06-16T01:39:11Z</updated>
    <id>tag:github.com,2024-06-16:/RubyMetric/chsrc</id>
    <link href="https://github.com/RubyMetric/chsrc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;chsrc 全平台通用换源工具. Change Source for every software on every platform from the command line.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;chsrc logo&#34; src=&#34;https://raw.githubusercontent.com/RubyMetric/chsrc/main/image/chsrc.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;a href=&#34;https://repology.org/project/chsrc/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/chsrc.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;全平台命令行换源工具，&lt;strong&gt;目标支持 Linux (包括麒麟、openEuler、deepin 等), Windows, macOS, BSD 等尽可能多的操作系统，龙芯、飞腾、RISC-V 等尽可能多的 CPU&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;我们使用 &lt;strong&gt;C99&lt;/strong&gt; 来完成上述目标。我们并不使用 Python 或 JS 等解释语言，因为一个简单的换源工具，不应该强行塞给用户一个庞大的解释器和数十、数百 MB 其他文件。&lt;/p&gt; &#xA;&lt;p&gt;本软件为&lt;strong&gt;自由软件&lt;/strong&gt;，SDPX 软件许可证为 &lt;code&gt;GPL-3.0-or-later and MIT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;code&gt;chsrc&lt;/code&gt; 的设计理念&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.yuque.com/ccmywish/blog/no-ufo&#34;&gt;No UFO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;我已经受够了各种软件在我的C盘或&lt;code&gt;$HOME&lt;/code&gt;里给我塞一堆&lt;strong&gt;零散&lt;/strong&gt;的不知名文件，它往往&lt;strong&gt;连后缀都没有&lt;/strong&gt;，它的文件名足够隐晦以致于&lt;strong&gt;你无论如何都猜不到是哪个软件在用它&lt;/strong&gt;。等你抱着好奇心打开一看，这竟然还是一种&lt;strong&gt;自定义格式&lt;/strong&gt;。&lt;/p&gt; &lt;p&gt;好吧，对此我要创造一个新词：&lt;strong&gt;UFO: Unidentified File Objects&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;chsrc&lt;/code&gt; 除了一个二进制文件外，别无他物。不会在你计算机的某个犄角旮旯里放一些莫名其妙的文件&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Convention over Configuration&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;来自Ruby社区的优良传统。想想看: &lt;code&gt;/etc&lt;/code&gt; 里每个文件都有一套自己的配置格式&lt;/p&gt; &lt;p&gt;我不想要有任何类似 &lt;code&gt;CHSRC_CONF&lt;/code&gt; 的环境变量，也不想有任何类似 &lt;code&gt;.chsrc&lt;/code&gt; 的配置文件 (&lt;strong&gt;如果你是BSD用户，你会愤怒，因为你还存在一个叫作 &lt;code&gt;.cshrc&lt;/code&gt; 的文件&lt;/strong&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;示例&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;chsrc logo&#34; src=&#34;https://raw.githubusercontent.com/RubyMetric/chsrc/main/image/example.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;需要你的帮助&lt;/h2&gt; &#xA;&lt;p&gt;如果你想要通过 &lt;code&gt;scoop&lt;/code&gt;，&lt;code&gt;brew&lt;/code&gt;，&lt;code&gt;yay&lt;/code&gt; 等系统包管理工具来安装和更新&lt;code&gt;chsrc&lt;/code&gt;，请帮助我们达到下面的要求。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;缺乏 &lt;code&gt;AUR&lt;/code&gt; 维护者&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;&lt;code&gt;homebrew&lt;/code&gt; 维护者&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;缺乏 &lt;code&gt;scoop&lt;/code&gt; 维护者&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;code&gt;scoop&lt;/code&gt; 要求英文输出&lt;/p&gt; &lt;p&gt;&lt;code&gt;chsrc&lt;/code&gt;本意进行中文输出，但是我们将尽可能提供选项来进行英文输出。该选项同时有利于 BSD 用户&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;请访问 &lt;a href=&#34;https://github.com/RubyMetric/chsrc&#34;&gt;chsrc on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;若您可提供维护，请访问 &lt;a href=&#34;https://github.com/RubyMetric/chsrc/issues/16&#34;&gt;issue#16 on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;p&gt;以下方式均下载到当前目录，可直接通过 &lt;code&gt;./chsrc&lt;/code&gt; 运行。&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# x64&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-windows.exe -o chsrc.exe&#xA;&#xA;# x86&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x86-windows.exe -o chsrc.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# x64&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc; chmod +x ./chsrc&#xA;&#xA;# aarch64&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-aarch64-linux -o chsrc; chmod +x ./chsrc&#xA;&#xA;# riscv64&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-riscv64-linux -o chsrc; chmod +x ./chsrc&#xA;&#xA;# armv7&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-armv7-linux -o chsrc; chmod +x ./chsrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;可以通过 &lt;code&gt;homebrew&lt;/code&gt; 安装，感谢 &lt;a href=&#34;https://github.com/Aaron-212&#34;&gt;@Aaron-212&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/chenrui333&#34;&gt;@chenrui333&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install chsrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或手动下载二进制文件 (最新版，有时比 &lt;code&gt;homebrew&lt;/code&gt; 提供的更新)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# M1/aarch64&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-aarch64-macos -o chsrc; chmod +x ./chsrc&#xA;&#xA;# x64&#xA;curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-macos -o chsrc; chmod +x ./chsrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BSD&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://gitee.com/RubyMetric/chsrc.git; cd chsrc&#xA;clang -Iinclude src/chsrc.c -o chsrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;其他平台&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://gitee.com/RubyMetric/chsrc.git; cd chsrc; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;使用: chsrc &amp;lt;command&amp;gt; [options] [target] [mirror]&#xA;&#xA;help                      # 打印此帮助，或 h, -h, --help&#xA;issue                     # 查看相关issue&#xA;list (或 ls, 或 l)        # 列出可用镜像源，和可换源软件&#xA;list mirror/target        # 列出可用镜像源，或可换源软件&#xA;list os/lang/ware         # 列出可换源的操作系统/编程语言/软件&#xA;list &amp;lt;target&amp;gt;             # 查看该软件可以使用哪些源&#xA;&#xA;cesu &amp;lt;target&amp;gt;             # 对该软件所有源测速&#xA;get  &amp;lt;target&amp;gt;             # 查看当前软件的源使用情况&#xA;&#xA;set  &amp;lt;target&amp;gt;             # 换源，自动测速后挑选最快源&#xA;set  &amp;lt;target&amp;gt;  first      # 换源，使用维护团队测速第一的源&#xA;set  &amp;lt;target&amp;gt; &amp;lt;mirror&amp;gt;    # 换源，指定使用某镜像站 (通过list命令查看)&#xA;set  &amp;lt;target&amp;gt; https://abc # 换源，用户自定义源URL&#xA;reset &amp;lt;target&amp;gt;            # 重置，使用上游默认使用的源&#xA;&#xA;选项:&#xA;-ipv6                     # 使用IPv6测速&#xA;-local                    # 仅对某项目而非全局换源 (仅部分软件如bundler,pdm支持)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当你&lt;strong&gt;不想自动测速的时候&lt;/strong&gt;，你可以直接指定某镜像站，源URL，以及指定维护团队已测试的最快镜像站。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsrc set ruby           # 测速，寻找最快者，换源&#xA;# 或&#xA;chsrc ls  ruby           # 列出可用的镜像站&#xA;chsrc set ruby rubychina # 使用 RubyChina 作为镜像站&#xA;# 或您有自己的镜像地址&#xA;chsrc set ruby https://gems.ruby-china.com/ # 使用自定义URL&#xA;# 或&#xA;chsrc set ruby first     # 使用维护团队测试的最快镜像站&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对部分&lt;a href=&#34;https://gitee.com/RubyMetric/chsrc/issues/I9V5I0&#34;&gt;支持局部换源&lt;/a&gt;的，可以避免全局换源。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsrc set -local bundler&#xA;chsrc set -local pdm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;编程语言开发&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsrc set ruby    或 set gem&#xA;chsrc set python  或 set pip / pdm # 同时换pip和pdm&#xA;chsrc set node    或 set npm / nodejs / yarn / pnpm # 同时换3个&#xA;chsrc set perl    或 set cpan&#xA;chsrc set php     或 set composer&#xA;chsrc set lua     或 set luarocks&#xA;&#xA;chsrc set go&#xA;chsrc set rust    或 set cargo / crate&#xA;chsrc set java    或 set maven / mvn / gradle&#xA;chsrc set clojure 或 set clojars&#xA;chsrc set dart    或 set pub / flutter # 同时会为flutter换源&#xA;chsrc set haskell 或 set hackage/cabal/stack&#xA;chsrc set ocaml   或 set opam&#xA;&#xA;# 同时会为 bioconductor 换源&#xA;chsrc set r       或 set cran&#xA;chsrc set julia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;操作系统&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chsrc set ubuntu&#xA;sudo chsrc set mint  或 linuxmint&#xA;sudo chsrc set debian&#xA;sudo chsrc set fedora&#xA;sudo chsrc set suse  或 set opensuse&#xA;sudo chsrc set kali&#xA;sudo chsrc set arch  # 同时使用 archlinuxcn&#xA;sudo chsrc set manjaro&#xA;sudo chsrc set gentoo&#xA;sudo chsrc set rocky 或 set rockylinux&#xA;sudo chsrc set alma  或 set almalinux&#xA;sudo chsrc set alpine&#xA;sudo chsrc set void  或 set voidlinux&#xA;sudo chsrc set solus&#xA;sudo chsrc set ros   或 set ros2&#xA;sudo chsrc set trisquel&#xA;sudo chsrc set lite  或 set linuxlite&#xA;sudo chsrc set raspi 或 set raspberrypi&#xA;&#xA;sudo chsrc set euler  或 set openeuler&#xA;sudo chsrc set anolis 或 set openanolis&#xA;sudo chsrc set kylin  或 set openkylin&#xA;sudo chsrc set deepin&#xA;&#xA;chsrc set msys2 或 set msys&#xA;&#xA;# BSD&#xA;sudo chsrc set freebsd&#xA;sudo chsrc set openbsd&#xA;sudo chsrc set netbsd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;软件&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsrc set winget&#xA;chsrc set brew      或 set homebrew&#xA;chsrc set cocoapods 或 set cocoa / pod&#xA;chsrc set dockerhub 或 set docker&#xA;chsrc set flathub&#xA;chsrc set nix&#xA;chsrc set guix&#xA;chsrc set emacs  或 set elpa&#xA;chsrc set tex    或 set ctan / latex / texlive / miktex&#xA;chsrc set conda  或 set anaconda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;开发&lt;/h2&gt; &#xA;&lt;p&gt;请安装好 &lt;code&gt;gcc&lt;/code&gt;或&lt;code&gt;clang&lt;/code&gt; 和 &lt;code&gt;make&lt;/code&gt; 以及 &lt;code&gt;curl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 使用 dev 分支开发&#xA;git clone https://gitee.com/RubyMetric/chsrc.git -b dev&#xA;&#xA;make          # 默认使用 cc 编译&#xA;make CC=clang # 使用 clang 编译&#xA;make CC=gcc   # 使用 gcc   编译&#xA;&#xA;make test    # 测试命令&#xA;make test-xy # 测试 xy.h&#xA;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;许可证&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chsrc&lt;/code&gt; 主程序采用 &lt;code&gt;GPL-3.0-or-later&lt;/code&gt; 许可证，保证该软件的永久自由&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xy.h&lt;/code&gt; 使用 &lt;code&gt;MIT&lt;/code&gt; 许可证，保证该库可以在尽可能多的情况下复用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢各个镜像站提供的优质免费镜像服务，使用的镜像站见 &lt;a href=&#34;https://raw.githubusercontent.com/RubyMetric/chsrc/main/include/source.h&#34;&gt;source.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;另外感谢以下项目:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.mirrors.cernet.edu.cn/&#34;&gt;MirrorZ 教育网镜像站&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/&#34;&gt;清华大学 Tuna&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/Thanks-Mirror&#34;&gt;Thanks Mirror 项目&lt;/a&gt; by &lt;a href=&#34;https://github.com/eryajf&#34;&gt;@eryajf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>meetecho/janus-gateway</title>
    <updated>2024-06-16T01:39:11Z</updated>
    <id>tag:github.com,2024-06-16:/meetecho/janus-gateway</id>
    <link href="https://github.com/meetecho/janus-gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Janus WebRTC Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Janus WebRTC Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/meetecho/janus-gateway/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-brightgreen.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/meetecho/janus-gateway/workflows/janus-ci/badge.svg?sanitize=true&#34; alt=&#34;janus-ci&#34;&gt; &lt;a href=&#34;https://scan.coverity.com/projects/meetecho-janus-gateway&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/13265/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:janus-gateway&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/janus-gateway.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Janus is an open source, general purpose, WebRTC server designed and developed by &lt;a href=&#34;https://www.meetecho.com&#34;&gt;Meetecho&lt;/a&gt;. This version of the server is tailored for Linux systems, although it can be compiled for, and installed on, MacOS machines as well. Windows is not supported, but if that&#39;s a requirement, Janus is known to work in the &#34;Windows Subsystem for Linux&#34; on Windows 10: do &lt;strong&gt;NOT&lt;/strong&gt; trust repos that provide .exe builds of Janus, they are not official and will not be supported.&lt;/p&gt; &#xA;&lt;p&gt;For some online demos and documentations, make sure you pay the &lt;a href=&#34;https://janus.conf.meetecho.com/&#34;&gt;project website&lt;/a&gt; a visit!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note well:&lt;/strong&gt; this is the main branch for the &lt;code&gt;multistream&lt;/code&gt; version of Janus, which is the new version. If you want to check the legacy version of Janus instead (i.e., &lt;code&gt;0.x&lt;/code&gt;, a.k.a. &#34;legacy&#34;) click &lt;a href=&#34;https://github.com/meetecho/janus-gateway/tree/0.x&#34;&gt;here&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have questions on Janus, or wish to discuss Janus with us and other users, please join our &lt;a href=&#34;https://janus.discourse.group/&#34;&gt;Community&lt;/a&gt;. If you encounter bugs, please submit an issue on &lt;a href=&#34;https://github.com/meetecho/janus-gateway/issues&#34;&gt;GitHub&lt;/a&gt;: make sure you read the &lt;a href=&#34;https://raw.githubusercontent.com/meetecho/janus-gateway/master/.github/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt; before opening an issue or a pull request, though.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To install it, you&#39;ll need to satisfy the following dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gtk.org/glib/&#34;&gt;GLib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zlib.net/&#34;&gt;zlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akheron/jansson&#34;&gt;Jansson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hyperrealm.github.io/libconfig/&#34;&gt;libconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libnice.freedesktop.org/&#34;&gt;libnice&lt;/a&gt; (at least v0.1.16 suggested, v0.1.18 recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; (at least v1.0.1e)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cisco/libsrtp&#34;&gt;libsrtp&lt;/a&gt; (at least v2.x suggested)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are optional dependencies, depending on which features you&#39;re interested in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sctplab/usrsctp&#34;&gt;usrsctp&lt;/a&gt; (only needed if you are interested in Data Channels)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/libmicrohttpd/&#34;&gt;libmicrohttpd&lt;/a&gt; (at least v0.9.59; only needed if you are interested in REST support for the Janus API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libwebsockets.org/&#34;&gt;libwebsockets&lt;/a&gt; (at least v4.x suggested; only needed if you are interested in WebSockets support for the Janus API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cmake.org/&#34;&gt;cmake&lt;/a&gt; (only needed if you are interested in WebSockets and/or BoringSSL support, as they make use of it)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alanxz/rabbitmq-c&#34;&gt;rabbitmq-c&lt;/a&gt; (only needed if you are interested in RabbitMQ support for the Janus API or events)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eclipse.org/paho/clients/c&#34;&gt;paho.mqtt.c&lt;/a&gt; (only needed if you are interested in MQTT support for the Janus API or events)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nanomsg.org/&#34;&gt;nanomsg&lt;/a&gt; (only needed if you are interested in Nanomsg support for the Janus API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt; (only needed if you are interested in the TURN REST API support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A couple of plugins depend on a few more libraries (you only need to install the ones for the plugins you need):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freeswitch/sofia-sip&#34;&gt;Sofia-SIP&lt;/a&gt; (only needed for the SIP plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opus-codec.org/&#34;&gt;libopus&lt;/a&gt; (only needed for the AudioBridge plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xiph.org/ogg/&#34;&gt;libogg&lt;/a&gt; (needed for the recordings post-processor, and optionally AudioBridge and Streaming plugins)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt; (only needed if you are interested in RTSP support in the Streaming plugin or in the sample Event Handler plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lua.org/download.html&#34;&gt;Lua&lt;/a&gt; (only needed for the Lua plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://duktape.org/&#34;&gt;Duktape&lt;/a&gt; (only needed for the Duktape plugin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of those libraries are usually available on most of the most common distributions. Installing these libraries on a recent Fedora, for instance, is very simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yum install libmicrohttpd-devel jansson-devel \&#xA;   openssl-devel libsrtp-devel sofia-sip-devel glib2-devel \&#xA;   opus-devel libogg-devel libcurl-devel pkgconfig \&#xA;   libconfig-devel libtool autoconf automake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that you may have to &lt;code&gt;yum install epel-release&lt;/code&gt; as well if you&#39;re attempting an installation on a CentOS machine instead.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu or Debian, it would require something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install libmicrohttpd-dev libjansson-dev \&#xA;&#x9;libssl-dev libsofia-sip-ua-dev libglib2.0-dev \&#xA;&#x9;libopus-dev libogg-dev libcurl4-openssl-dev liblua5.3-dev \&#xA;&#x9;libconfig-dev pkg-config libtool automake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; please notice that libopus may not be available out of the box on your distro. In that case, you&#39;ll have to &lt;a href=&#34;https://www.opus-codec.org&#34;&gt;install it manually&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While &lt;code&gt;libnice&lt;/code&gt; is typically available in most distros as a package, the version available out of the box in Ubuntu is known to cause problems. As such, we always recommend manually compiling and installing the master version of libnice. To build libnice, you need Python 3, Meson and Ninja:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://gitlab.freedesktop.org/libnice/libnice&#xA;cd libnice&#xA;meson --prefix=/usr build &amp;amp;&amp;amp; ninja -C build &amp;amp;&amp;amp; sudo ninja -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; Make sure you remove the distro version first, or you&#39;ll cause conflicts between the installations. In case you want to keep both for some reason, for custom installations of libnice you can also run &lt;code&gt;pkg-config --cflags --libs nice&lt;/code&gt; to make sure Janus can find the right installation. If that fails, you may need to set the &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; environment variable prior to compiling Janus, e.g., &lt;code&gt;export PKG_CONFIG_PATH=/path/to/libnice/lib/pkgconfig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you&#39;re interested in compiling the sample Event Handler plugin, you&#39;ll need to install the development version of libcurl as well (usually &lt;code&gt;libcurl-devel&lt;/code&gt; on Fedora/CentOS, &lt;code&gt;libcurl4-openssl-dev&lt;/code&gt; on Ubuntu/Debian).&lt;/p&gt; &#xA;&lt;p&gt;If your distro ships a pre-1.5 version of libsrtp, you&#39;ll have to uninstall that version and &lt;a href=&#34;https://github.com/cisco/libsrtp/releases&#34;&gt;install 1.5.x, 1.6.x or 2.x manually&lt;/a&gt;. In fact, 1.4.x is known to cause several issues with WebRTC. While 1.5.x is supported, we recommend installing 2.x instead. Notice that the following steps are for version 2.2.0, but there may be more recent versions available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/cisco/libsrtp/archive/v2.2.0.tar.gz&#xA;tar xfv v2.2.0.tar.gz&#xA;cd libsrtp-2.2.0&#xA;./configure --prefix=/usr --enable-openssl&#xA;make shared_library &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the &lt;code&gt;--enable-openssl&lt;/code&gt; part is &lt;em&gt;important&lt;/em&gt;, as it&#39;s needed for AES-GCM support. As an alternative, you can also pass &lt;code&gt;--enable-nss&lt;/code&gt; to have libsrtp use NSS instead of OpenSSL. A failure to configure libsrtp with either might cause undefined references when starting Janus, as we&#39;d be trying to use methods that aren&#39;t there.&lt;/p&gt; &#xA;&lt;p&gt;The Janus configure script autodetects which one you have installed and links to the correct library automatically, choosing 2.x if both are installed. If you want 1.5 or 1.6 to be picked (which is NOT recommended), pass &lt;code&gt;--disable-libsrtp2&lt;/code&gt; when configuring Janus to force it to use the older version instead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; when installing libsrtp, no matter which version, you may need to pass &lt;code&gt;--libdir=/usr/lib64&lt;/code&gt; to the configure script if you&#39;re installing on a x86_64 distribution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to make use of BoringSSL instead of OpenSSL (e.g., because you want to take advantage of &lt;code&gt;--enable-dtls-settimeout&lt;/code&gt;), you&#39;ll have to manually install it to a specific location. Use the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://boringssl.googlesource.com/boringssl&#xA;cd boringssl&#xA;# Don&#39;t barf on errors&#xA;sed -i s/&#34; -Werror&#34;//g CMakeLists.txt&#xA;# Build&#xA;mkdir -p build&#xA;cd build&#xA;cmake -DCMAKE_CXX_FLAGS=&#34;-lrt&#34; ..&#xA;make&#xA;cd ..&#xA;# Install&#xA;sudo mkdir -p /opt/boringssl&#xA;sudo cp -R include /opt/boringssl/&#xA;sudo mkdir -p /opt/boringssl/lib&#xA;sudo cp build/ssl/libssl.a /opt/boringssl/lib/&#xA;sudo cp build/crypto/libcrypto.a /opt/boringssl/lib/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the library is installed, you&#39;ll have to pass an additional &lt;code&gt;--enable-boringssl&lt;/code&gt; flag to the configure script, as by default Janus will be built assuming OpenSSL will be used. By default, Janus expects BoringSSL to be installed in &lt;code&gt;/opt/boringssl&lt;/code&gt; -- if it&#39;s installed in another location, pass the path to the configure script as such: &lt;code&gt;--enable-boringssl=/path/to/boringssl&lt;/code&gt; If you were using OpenSSL and want to switch to BoringSSL, make sure you also do a &lt;code&gt;make clean&lt;/code&gt; in the Janus folder before compiling with the new BoringSSL support. If you enabled BoringSSL support and also want Janus to detect and react to DTLS timeouts with faster retransmissions, then pass &lt;code&gt;--enable-dtls-settimeout&lt;/code&gt; to the configure script too.&lt;/p&gt; &#xA;&lt;p&gt;For what concerns usrsctp, which is needed for Data Channels support, it is usually not available in repositories, so if you&#39;re interested in them (support is optional) you&#39;ll have to install it manually. It is a pretty easy and standard process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/sctplab/usrsctp&#xA;cd usrsctp&#xA;./bootstrap&#xA;./configure --prefix=/usr --disable-programs --disable-inet --disable-inet6&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; you may need to pass &lt;code&gt;--libdir=/usr/lib64&lt;/code&gt; to the configure script if you&#39;re installing on a x86_64 distribution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The same applies for libwebsockets, which is needed for the optional WebSockets support. If you&#39;re interested in supporting WebSockets to control Janus, as an alternative (or replacement) to the default plain HTTP REST API, you&#39;ll have to install it manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://libwebsockets.org/repo/libwebsockets&#xA;cd libwebsockets&#xA;# If you want the stable version of libwebsockets, uncomment the next line&#xA;# git checkout v4.3-stable&#xA;mkdir build&#xA;cd build&#xA;# See https://github.com/meetecho/janus-gateway/issues/732 re: LWS_MAX_SMP&#xA;# See https://github.com/meetecho/janus-gateway/issues/2476 re: LWS_WITHOUT_EXTENSIONS&#xA;cmake -DLWS_MAX_SMP=1 -DLWS_WITHOUT_EXTENSIONS=0 -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_C_FLAGS=&#34;-fpic&#34; ..&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if libwebsockets.org is unreachable for any reason, replace the first line with this:&lt;/p&gt; &lt;p&gt;git clone &lt;a href=&#34;https://github.com/warmcat/libwebsockets.git&#34;&gt;https://github.com/warmcat/libwebsockets.git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The same applies for Eclipse Paho MQTT C client library, which is needed for the optional MQTT support. If you&#39;re interested in integrating MQTT channels as an alternative (or replacement) to HTTP and/or WebSockets to control Janus, or as a carrier of Janus Events, you can install the latest version with the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/eclipse/paho.mqtt.c.git&#xA;cd paho.mqtt.c&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; you may want to set up a different install path for the library, to achieve that, replace the last command by &#39;sudo prefix=/usr make install&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you&#39;re interested in Nanomsg support, you&#39;ll need to install the related C library. It is usually available as an easily installable package in pretty much all repositories. The following is an example on how to install it on Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aptitude install libnanomsg-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, the same can be said for rabbitmq-c as well, which is needed for the optional RabbitMQ support. In fact, several different versions of the library can be found, and the versions usually available in most distribution repositories are not up-do-date with respect to the current state of the development. As such, if you&#39;re interested in integrating RabbitMQ queues as an alternative (or replacement) to HTTP and/or WebSockets to control Janus, you can install the latest version with the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/alanxz/rabbitmq-c&#xA;cd rabbitmq-c&#xA;git submodule init&#xA;git submodule update&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake -DCMAKE_INSTALL_PREFIX=/usr ..&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; you may need to pass &lt;code&gt;--libdir=/usr/lib64&lt;/code&gt; to the configure script if you&#39;re installing on a x86_64 distribution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To conclude, should you be interested in building the Janus documentation as well, you&#39;ll need some additional tools too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.doxygen.org&#34;&gt;Doxygen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.graphviz.org/&#34;&gt;Graphviz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yum install doxygen graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Ubuntu/Debian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aptitude install doxygen graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed all the dependencies, get the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/meetecho/janus-gateway.git&#xA;cd janus-gateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh autogen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to generate the configure file. After that, configure and compile as usual to start the whole compilation process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/janus&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since Janus requires configuration files for both the core and its modules in order to work, you&#39;ll probably also want to install the default configuration files to use, which you can do this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make configs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to only do this once, or otherwise a subsequent &lt;code&gt;make configs&lt;/code&gt; will overwrite any configuration file you may have modified in the meanwhile.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve installed the above libraries but are not interested, for instance, in Data Channels, WebSockets, MQTT and/or RabbitMQ, you can disable them when configuring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --disable-websockets --disable-data-channels --disable-rabbitmq --disable-mqtt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are configuration flags for pretty much all external modules and many of the features, so you may want to issue a &lt;code&gt;./configure --help&lt;/code&gt; to dig through the available options. A summary of what&#39;s going to be built will always appear after you do a configure, allowing you to double check if what you need and don&#39;t need is there.&lt;/p&gt; &#xA;&lt;p&gt;If Doxygen and graphviz are available, the process can also build the documentation for you. By default the compilation process will not try to build the documentation, so if you instead prefer to build it, use the &lt;code&gt;--enable-docs&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --enable-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also selectively enable/disable other features (e.g., specific plugins you don&#39;t care about, or whether or not you want to build the recordings post-processor). Use the --help option when configuring for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Building on FreeBSD&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: rtp_forward of streams only works streaming to IPv6, because of #2051 and thus the feature is not supported on FreeBSD at the moment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When building on FreeBSD you can install the depencencies from ports or packages, here only pkg method is used. You also need to use &lt;code&gt;gmake&lt;/code&gt; instead of &lt;code&gt;make&lt;/code&gt;, since it is a GNU makefile. &lt;code&gt;./configure&lt;/code&gt; can be run without arguments since the default prefix is &lt;code&gt;/usr/local&lt;/code&gt; which is your default &lt;code&gt;LOCALBASE&lt;/code&gt;. Note that the &lt;code&gt;configure.ac&lt;/code&gt; is coded to use openssl in base. If you wish to use openssl from ports or any other ssl you must change &lt;code&gt;configure.ac&lt;/code&gt; accordingly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install libsrtp2 libusrsctp jansson libnice libmicrohttpd libwebsockets curl opus sofia-sip libogg jansson libnice libconfig \&#xA;    libtool gmake autoconf autoconf-wrapper glib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building on MacOS&lt;/h3&gt; &#xA;&lt;p&gt;While most of the above instructions will work when compiling Janus on MacOS as well, there are a few aspects to highlight when doing that.&lt;/p&gt; &#xA;&lt;p&gt;First of all, you can use &lt;code&gt;brew&lt;/code&gt; to install most of the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install jansson libnice openssl srtp libusrsctp libmicrohttpd \&#xA;&#x9;libwebsockets cmake rabbitmq-c sofia-sip opus libogg curl glib \&#xA;&#x9;libconfig pkg-config autoconf automake libtool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For what concerns libwebsockets, though, make sure that the installed version is higher than &lt;code&gt;2.4.1&lt;/code&gt;, or you might encounter the problems described in &lt;a href=&#34;https://groups.google.com/forum/#!topic/meetecho-janus/HsFaEXBz4Cg&#34;&gt;this post&lt;/a&gt;. If &lt;code&gt;brew&lt;/code&gt; doesn&#39;t provide a more recent version, you&#39;ll have to install the library manually.&lt;/p&gt; &#xA;&lt;p&gt;Notice that you may need to provide a custom &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; when configuring Janus as well, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/usr/local/janus PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything else works exactly the same way as on Linux.&lt;/p&gt; &#xA;&lt;h2&gt;Configure and start&lt;/h2&gt; &#xA;&lt;p&gt;To start the server, you can use the &lt;code&gt;janus&lt;/code&gt; executable. There are several things you can configure, either in a configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;installdir&amp;gt;/etc/janus/janus.jcfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;installdir&amp;gt;/bin/janus --help&#xA;&#xA;Usage: janus [OPTIONS]...&#xA;&#xA;-h, --help                    Print help and exit&#xA;-V, --version                 Print version and exit&#xA;-b, --daemon                  Launch Janus in background as a daemon&#xA;                              (default=off)&#xA;-p, --pid-file=path           Open the specified PID file when starting Janus&#xA;                              (default=none)&#xA;-N, --disable-stdout          Disable stdout based logging  (default=off)&#xA;-L, --log-file=path           Log to the specified file (default=stdout only)&#xA;-H  --cwd-path                Working directory for Janus daemon process&#xA;                              (default=/)&#xA;-i, --interface=ipaddress     Interface to use (will be the public IP)&#xA;-P, --plugins-folder=path     Plugins folder (default=./plugins)&#xA;-C, --config=filename         Configuration file to use&#xA;-F, --configs-folder=path     Configuration files folder (default=./conf)&#xA;-c, --cert-pem=filename       DTLS certificate&#xA;-k, --cert-key=filename       DTLS certificate key&#xA;-K, --cert-pwd=text           DTLS certificate key passphrase (if needed)&#xA;-S, --stun-server=address:port&#xA;                              STUN server(:port) to use, if needed (e.g.,&#xA;                              Janus behind NAT, default=none)&#xA;-1, --nat-1-1=ip              Public IP to put in all host candidates,&#xA;                              assuming a 1:1 NAT is in place (e.g., Amazon&#xA;                              EC2 instances, default=none)&#xA;-2, --keep-private-host       When nat-1-1 is used (e.g., Amazon EC2&#xA;                              instances), don&#39;t remove the private host,&#xA;                              but keep both to simulate STUN  (default=off)&#xA;-E, --ice-enforce-list=list   Comma-separated list of the only interfaces to&#xA;                              use for ICE gathering; partial strings are&#xA;                              supported (e.g., eth0 or eno1,wlan0,&#xA;                              default=none)&#xA;-X, --ice-ignore-list=list    Comma-separated list of interfaces or IP&#xA;                              addresses to ignore for ICE gathering;&#xA;                              partial strings are supported (e.g.,&#xA;                              vmnet8,192.168.0.1,10.0.0.1 or&#xA;                              vmnet,192.168., default=vmnet)&#xA;-6, --ipv6-candidates         Whether to enable IPv6 candidates or not&#xA;                              (experimental)  (default=off)&#xA;-O, --ipv6-link-local         Whether IPv6 link-local candidates should be&#xA;                              gathered as well  (default=off)&#xA;-l, --libnice-debug           Whether to enable libnice debugging or not&#xA;                              (default=off)&#xA;-f, --full-trickle            Do full-trickle instead of half-trickle&#xA;                              (default=off)&#xA;-I, --ice-lite                Whether to enable the ICE Lite mode or not&#xA;                              (default=off)&#xA;-T, --ice-tcp                 Whether to enable ICE-TCP or not (warning: only&#xA;                              works with ICE Lite)&#xA;                              (default=off)&#xA;-Q, --min-nack-queue=number   Minimum size of the NACK queue (in ms) per user&#xA;                              for retransmissions, no matter the RTT&#xA;-t, --no-media-timer=number   Time (in s) that should pass with no media&#xA;                              (audio or video) being received before Janus&#xA;                              notifies you about this&#xA;-W, --slowlink-threshold=number&#xA;                              Number of lost packets (per s) that should&#xA;                              trigger a &#39;slowlink&#39; Janus API event to users&#xA;                              (default=0, feature disabled)&#xA;-r, --rtp-port-range=min-max  Port range to use for RTP/RTCP (only available&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  if the installed libnice supports it)&#xA;-B, --twcc-period=number      How often (in ms) to send TWCC feedback back to&#xA;                              senders, if negotiated (default=200ms)&#xA;-n, --server-name=name        Public name of this Janus instance&#xA;                              (default=MyJanusInstance)&#xA;-s, --session-timeout=number  Session timeout value, in seconds (default=60)&#xA;-m, --reclaim-session-timeout=number&#xA;                              Reclaim session timeout value, in seconds&#xA;                              (default=0)&#xA;-d, --debug-level=1-7         Debug/logging level (0=disable debugging,&#xA;                              7=maximum debug level; default=4)&#xA;-D, --debug-timestamps        Enable debug/logging timestamps  (default=off)&#xA;-o, --disable-colors          Disable color in the logging  (default=off)&#xA;-M, --debug-locks             Enable debugging of locks/mutexes (very&#xA;                              verbose!)  (default=off)&#xA;-a, --apisecret=randomstring  API secret all requests need to pass in order&#xA;                              to be accepted by Janus (useful when wrapping&#xA;                              Janus API requests in a server, none by&#xA;                              default)&#xA;-A, --token-auth              Enable token-based authentication for all&#xA;                              requests  (default=off)&#xA;-e, --event-handlers          Enable event handlers  (default=off)&#xA;-w, --no-webrtc-encryption    Disable WebRTC encryption, so no DTLS or SRTP&#xA;                              (only for debugging!)  (default=off)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options passed through the command line have the precedence on those specified in the configuration file. To start the server, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;installdir&amp;gt;/bin/janus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the server, and have it look at the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have a look at all of the configuration files, to tailor Janus to your specific needs: each configuration file is documented, so it shouldn&#39;t be hard to make changes according to your requirements. The repo comes with some defaults (assuming you issues &lt;code&gt;make configs&lt;/code&gt; after installing the server) that tend to make sense for generic deployments, and also includes some sample configurations for all the plugins (e.g., web servers to listen on, conference rooms to create, streaming mountpoints to make available at startup, etc.).&lt;/p&gt; &#xA;&lt;p&gt;To test whether it&#39;s working correctly, you can use the demos provided with this package in the &lt;code&gt;html&lt;/code&gt; folder: these are exactly the same demos available online on the &lt;a href=&#34;https://janus.conf.meetecho.com/&#34;&gt;project website&lt;/a&gt;. Just copy the file it contains in a webserver, or use a userspace webserver to serve the files in the &lt;code&gt;html&lt;/code&gt; folder (e.g., with php or python), and open the &lt;code&gt;index.html&lt;/code&gt; page in either Chrome or Firefox. A list of demo pages exploiting the different plugins will be available. Remember to edit the transport/port details in the demo JavaScript files if you changed any transport-related configuration from its defaults. Besides, the demos refer to the pre-configured plugin resources, so if you add some new resources (e.g., a new videoconference) you may have to tweak the demo pages to actually use them.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Janus is thoroughly documented. You can find the current documentation, automatically generated with Doxygen, on the &lt;a href=&#34;https://janus.conf.meetecho.com/docs/&#34;&gt;project website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help us!&lt;/h2&gt; &#xA;&lt;p&gt;Any thought, feedback or (hopefully not!) insult is welcome!&lt;/p&gt; &#xA;&lt;p&gt;Developed by &lt;a href=&#34;https://github.com/meetecho&#34;&gt;@meetecho&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>