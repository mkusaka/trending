<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:53:32Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ataradov/usb-sniffer</title>
    <updated>2023-06-25T01:53:32Z</updated>
    <id>tag:github.com,2023-06-25:/ataradov/usb-sniffer</id>
    <link href="https://github.com/ataradov/usb-sniffer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-cost LS/FS/HS USB sniffer with Wireshark interface&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Low-cost USB Sniffer (LS/FS/HS) with Wireshark interface&lt;/h1&gt; &#xA;&lt;p&gt;This sniffer can be used standalone from a command line or as a plugin for &lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; with direct control from the UI.&lt;/p&gt; &#xA;&lt;p&gt;Either way, the capture is saved in a standard &lt;a href=&#34;https://pcapng.com/&#34;&gt;PcapNG&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/wireshark.png&#34; alt=&#34;Wireshark UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are some example capture files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/usb_ls_mouse.pcapng&#34;&gt;Mouse (Low-Speed)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/usb_fs_vcp.pcapng&#34;&gt;Virtual COM-Port Adapter (Full-Speed)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/usb_hs_flash_drive.pcapng&#34;&gt;USB Flash Drive (High-Speed)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: You will need a recent version of Wireshark (v4.x.x). Older versions may not be able to decode USB payload, but should still show the raw data.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;The sniffer is based around Cypress CY7C68013A MCU, Lattice LCMXO2 FPGA, and Microchip USB3343 USB PHY.&lt;/p&gt; &#xA;&lt;p&gt;Prices and availability of ICs vary, but the total BOM should be less than $50.&lt;/p&gt; &#xA;&lt;p&gt;LCMXO2-2000HC speed grades 5 and 6 were tested and the provided JED file was built for the speed grade 5, so it should work for both. Speed grade 4 is too slow and does not meet timing requirements.&lt;/p&gt; &#xA;&lt;p&gt;Caution: Do not buy CY7C68013A from eBay or AliExpress, they all are either fake or sketchy in some way. This IC can be quite expensive from regular suppliers, but &lt;a href=&#34;https://www.lcsc.com/&#34;&gt;LCSC&lt;/a&gt; is a legitimate supplier and they often have it at much cheaper prices.&lt;/p&gt; &#xA;&lt;p&gt;PCBs can be ordered from &lt;a href=&#34;https://oshpark.com/shared_projects/avWPFMNs&#34;&gt;OSH Park&lt;/a&gt; or any other PCB manufacturer, &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/usb-sniffer-gerbers.zip&#34;&gt;gerber files&lt;/a&gt; are provided.&lt;/p&gt; &#xA;&lt;p&gt;There are also STL files for the case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/pcb.jpg&#34; alt=&#34;Bare PCB&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/case.jpg&#34; alt=&#34;3D Printed Case&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hardware bring up&lt;/h2&gt; &#xA;&lt;p&gt;This hardware does not require external programmers, both MCU and FPGA are programmed using a USB interface.&lt;/p&gt; &#xA;&lt;p&gt;When a board with a blank EEPROM is connected, it would enumerate as an unconfigured FX2LP device.&lt;/p&gt; &#xA;&lt;p&gt;Note: on Windows blank FX2LP will enumerate as an unknown USB device. Use supplied dummy &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/blank_fx2lp.inf&#34;&gt;INF file&lt;/a&gt; as a driver. It will associate blank FX2LP device with a generic WinUSB driver, so it would be recognized by the tools. Once the firmware runs, it would supply necessary descripptors automatically.&lt;/p&gt; &#xA;&lt;p&gt;Note: on Linux copy &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/90-usb-sniffer.rules&#34;&gt;90-usb-sniffer.rules&lt;/a&gt; to /etc/udev/rules.d to set the permissions to access the device under a regular user.&lt;/p&gt; &#xA;&lt;p&gt;The first step is to load the firmware into the MCU SRAM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --mcu-sram usb_sniffer.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The device would reset and enumerate as a USB Sniffer with a dummy serial number. After that, program the EEPROM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --mcu-eeprom usb_sniffer.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After resetting or power cycling, the device would enumerate as a USB Sniffer with a real serial number. The serial number is derived from the FPGA unique identifier, so if this step succeeds, it means that FPGA is also functional.&lt;/p&gt; &#xA;&lt;p&gt;After that program the FPGA flash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --fpga-flash usb_sniffer_impl.jed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MCU EEPROM can be reprogrammed at any time as long as it is running valid firmware.&lt;/p&gt; &#xA;&lt;p&gt;In case the firmware gets corrupted, it is possible to run the MCU in the unconfigured mode by shorting BOOT and VCC test points (located near the EEPROM IC on the board) and resetting the device. You would need to repeat both steps for programming the MCU firmware to recover it to the working state.&lt;/p&gt; &#xA;&lt;p&gt;The functionality and performance of the MCU and FPGA connection can be tested using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be getting 40-50 MB/s. If the speed is significantly slower, connect the sniffer directly into the root USB port without intermediate hubs.&lt;/p&gt; &#xA;&lt;p&gt;It is a good idea to run this test after each work session.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Pre-built binaries are provided for &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/usb_sniffer_linux&#34;&gt;Linux&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/usb_sniffer_win.exe&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use with Wireshark, copy the file into the extcap plugin directory: &lt;code&gt;~/.config/wireshark/extcap&lt;/code&gt; on Linux, and &lt;code&gt;C:/Users/&amp;lt;user&amp;gt;/AppData/Roaming/Wireshark/extcap/&lt;/code&gt; on Windows.&lt;/p&gt; &#xA;&lt;p&gt;For Linux, make sure that the binary file has an executable attribute set.&lt;/p&gt; &#xA;&lt;p&gt;After that, refresh the list of interfaced in Wireshark and you should see &#34;USB Sniffer&#34; as one of the interfaces. Configure capture settings and start/stop the capture as with any other interface.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raspberrypi/linux</title>
    <updated>2023-06-25T01:53:32Z</updated>
    <id>tag:github.com,2023-06-25:/raspberrypi/linux</id>
    <link href="https://github.com/raspberrypi/linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kernel source tree for Raspberry Pi-provided kernel builds. Issues unrelated to the linux kernel should be posted on the community forum at https://forums.raspberrypi.com/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux kernel&lt;/h1&gt; &#xA;&lt;p&gt;There are several guides for kernel developers and users. These guides can be rendered in a number of formats, like HTML and PDF. Please read Documentation/admin-guide/README.rst first.&lt;/p&gt; &#xA;&lt;p&gt;In order to build the documentation, use &lt;code&gt;make htmldocs&lt;/code&gt; or &lt;code&gt;make pdfdocs&lt;/code&gt;. The formatted documentation can also be read online at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://www.kernel.org/doc/html/latest/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are various text files in the Documentation/ subdirectory, several of them using the Restructured Text markup notation.&lt;/p&gt; &#xA;&lt;p&gt;Please read the Documentation/process/changes.rst file, as it contains the requirements for building and running the kernel, and information about the problems which may result by upgrading your kernel.&lt;/p&gt; &#xA;&lt;p&gt;Build status for rpi-5.15.y: &lt;a href=&#34;https://github.com/raspberrypi/linux/actions/workflows/kernel-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/raspberrypi/linux/actions/workflows/kernel-build.yml/badge.svg?branch=rpi-5.15.y&#34; alt=&#34;Pi kernel build tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raspberrypi/linux/actions/workflows/dtoverlaycheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/raspberrypi/linux/actions/workflows/dtoverlaycheck.yml/badge.svg?branch=rpi-5.15.y&#34; alt=&#34;dtoverlaycheck&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build status for rpi-6.1.y: &lt;a href=&#34;https://github.com/raspberrypi/linux/actions/workflows/kernel-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/raspberrypi/linux/actions/workflows/kernel-build.yml/badge.svg?branch=rpi-6.1.y&#34; alt=&#34;Pi kernel build tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raspberrypi/linux/actions/workflows/dtoverlaycheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/raspberrypi/linux/actions/workflows/dtoverlaycheck.yml/badge.svg?branch=rpi-6.1.y&#34; alt=&#34;dtoverlaycheck&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build status for rpi-6.2.y: &lt;a href=&#34;https://github.com/raspberrypi/linux/actions/workflows/kernel-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/raspberrypi/linux/actions/workflows/kernel-build.yml/badge.svg?branch=rpi-6.2.y&#34; alt=&#34;Pi kernel build tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raspberrypi/linux/actions/workflows/dtoverlaycheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/raspberrypi/linux/actions/workflows/dtoverlaycheck.yml/badge.svg?branch=rpi-6.2.y&#34; alt=&#34;dtoverlaycheck&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xianyi/OpenBLAS</title>
    <updated>2023-06-25T01:53:32Z</updated>
    <id>tag:github.com,2023-06-25:/xianyi/OpenBLAS</id>
    <link href="https://github.com/xianyi/OpenBLAS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenBLAS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/xianyi/OpenBLAS?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/xianyi/OpenBLAS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Travis CI: &lt;a href=&#34;https://travis-ci.com/xianyi/OpenBLAS&#34;&gt;&lt;img src=&#34;https://travis-ci.com/xianyi/OpenBLAS.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AppVeyor: &lt;a href=&#34;https://ci.appveyor.com/project/xianyi/openblas/branch/develop&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/09sohd35n8nkkx64/branch/develop?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cirrus CI: &lt;a href=&#34;https://cirrus-ci.com/github/xianyi/OpenBLAS&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/xianyi/OpenBLAS.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Drone CI: [![Build Status](https://cloud.drone.io/api/badges/xianyi/OpenBLAS/status.svg?branch=develop)](https://cloud.drone.io/xianyi/OpenBLAS/)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/xianyi/OpenBLAS/_build/latest?definitionId=1&amp;amp;branchName=develop&#34;&gt;&lt;img src=&#34;https://dev.azure.com/xianyi/OpenBLAS/_apis/build/status/xianyi.OpenBLAS?branchName=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OpenBLAS is an optimized BLAS (Basic Linear Algebra Subprograms) library based on GotoBLAS2 1.13 BSD version.&lt;/p&gt; &#xA;&lt;p&gt;Please read the documentation on the OpenBLAS wiki pages: &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a general introduction to the BLAS routines, please refer to the extensive documentation of their reference implementation hosted at netlib: &lt;a href=&#34;https://www.netlib.org/blas&#34;&gt;https://www.netlib.org/blas&lt;/a&gt;. On that site you will likewise find documentation for the reference implementation of the higher-level library LAPACK - the &lt;strong&gt;L&lt;/strong&gt;inear &lt;strong&gt;A&lt;/strong&gt;lgebra &lt;strong&gt;Pack&lt;/strong&gt;age that comes included with OpenBLAS. If you are looking for a general primer or refresher on Linear Algebra, the set of six 20-minute lecture videos by Prof. Gilbert Strang on either MIT OpenCourseWare &lt;a href=&#34;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/&#34;&gt;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/&lt;/a&gt; or Youtube &lt;a href=&#34;https://www.youtube.com/playlist?list=PLUl4u3cNGP61iQEFiWLE21EJCxwmWvvek&#34;&gt;https://www.youtube.com/playlist?list=PLUl4u3cNGP61iQEFiWLE21EJCxwmWvvek&lt;/a&gt; may be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Binary Packages&lt;/h2&gt; &#xA;&lt;p&gt;We provide official binary packages for the following platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows x86/x86_64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can download them from &lt;a href=&#34;https://sourceforge.net/projects/openblas/files/&#34;&gt;file hosting on sourceforge.net&lt;/a&gt; or from the Releases section of the github project page, &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/releases&#34;&gt;https://github.com/xianyi/OpenBLAS/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from Source&lt;/h2&gt; &#xA;&lt;p&gt;Download from project homepage, &lt;a href=&#34;https://xianyi.github.com/OpenBLAS/&#34;&gt;https://xianyi.github.com/OpenBLAS/&lt;/a&gt;, or check out the code using Git from &lt;a href=&#34;https://github.com/xianyi/OpenBLAS.git&#34;&gt;https://github.com/xianyi/OpenBLAS.git&lt;/a&gt;. (If you want the most up to date version, be sure to use the develop branch - master is several years out of date due to a change of maintainership.) Buildtime parameters can be chosen in Makefile.rule, see there for a short description of each option. Most can also be given directly on the make or cmake command line.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Building OpenBLAS requires the following to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;A C compiler, e.g. GCC or Clang&lt;/li&gt; &#xA; &lt;li&gt;A Fortran compiler (optional, for LAPACK)&lt;/li&gt; &#xA; &lt;li&gt;IBM MASS (optional, see below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Normal compile&lt;/h3&gt; &#xA;&lt;p&gt;Simply invoking &lt;code&gt;make&lt;/code&gt; (or &lt;code&gt;gmake&lt;/code&gt; on BSD) will detect the CPU automatically. To set a specific target CPU, use &lt;code&gt;make TARGET=xxx&lt;/code&gt;, e.g. &lt;code&gt;make TARGET=NEHALEM&lt;/code&gt;. The full target list is in the file &lt;code&gt;TargetList.txt&lt;/code&gt;. For building with &lt;code&gt;cmake&lt;/code&gt;, the usual conventions apply, i.e. create a build directory either underneath the toplevel OpenBLAS source directory or separate from it, and invoke &lt;code&gt;cmake&lt;/code&gt; there with the path to the source tree and any build options you plan to set.&lt;/p&gt; &#xA;&lt;h3&gt;Cross compile&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;FC&lt;/code&gt; to point to the cross toolchains, and set &lt;code&gt;HOSTCC&lt;/code&gt; to your host C compiler. The target must be specified explicitly when cross compiling.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On an x86 box, compile this library for a loongson3a CPU:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make BINARY=64 CC=mips64el-unknown-linux-gnu-gcc FC=mips64el-unknown-linux-gnu-gfortran HOSTCC=gcc TARGET=LOONGSON3A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or same with the newer mips-crosscompiler put out by Loongson that defaults to the 32bit ABI:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc CC=&#39;/opt/mips-loongson-gcc7.3-linux-gnu/2019.06-29/bin/mips-linux-gnu-gcc -mabi=64&#39; FC=&#39;/opt/mips-loongson-gcc7.3-linux-gnu/2019.06-29/bin/mips-linux-gnu-gfortran -mabi=64&#39; TARGET=LOONGSON3A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On an x86 box, compile this library for a loongson3a CPU with loongcc (based on Open64) compiler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make CC=loongcc FC=loongf95 HOSTCC=gcc TARGET=LOONGSON3A CROSS=1 CROSS_SUFFIX=mips64el-st-linux-gnu-   NO_LAPACKE=1 NO_SHARED=1 BINARY=32&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debug version&lt;/h3&gt; &#xA;&lt;p&gt;A debug version can be built using &lt;code&gt;make DEBUG=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compile with MASS support on Power CPU (optional)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ibm.com/support/home/product/W511326D80541V01/other_software/mathematical_acceleration_subsystem&#34;&gt;IBM MASS&lt;/a&gt; library consists of a set of mathematical functions for C, C++, and Fortran applications that are tuned for optimum performance on POWER architectures. OpenBLAS with MASS requires a 64-bit, little-endian OS on POWER. The library can be installed as shown:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -q http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/public.gpg -O- | sudo apt-key add -&#xA;echo &#34;deb http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/ trusty main&#34; | sudo tee /etc/apt/sources.list.d/ibm-xl-compiler-eval.list&#xA;sudo apt-get update&#xA;sudo apt-get install libxlmass-devel.8.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On RHEL/CentOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/repodata/repomd.xml.key&#xA;sudo rpm --import repomd.xml.key&#xA;wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/ibm-xl-compiler-eval.repo&#xA;sudo cp ibm-xl-compiler-eval.repo /etc/yum.repos.d/&#xA;sudo yum install libxlmass-devel.8.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing the MASS library, compile OpenBLAS with &lt;code&gt;USE_MASS=1&lt;/code&gt;. For example, to compile on Power8 with MASS support: &lt;code&gt;make USE_MASS=1 TARGET=POWER8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install to a specific directory (optional)&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;PREFIX=&lt;/code&gt; when invoking &lt;code&gt;make&lt;/code&gt;, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make install PREFIX=your_installation_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default installation directory is &lt;code&gt;/opt/OpenBLAS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported CPUs and Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;code&gt;GotoBLAS_01Readme.txt&lt;/code&gt; for older CPU models already supported by the 2010 GotoBLAS.&lt;/p&gt; &#xA;&lt;h3&gt;Additional supported CPUs&lt;/h3&gt; &#xA;&lt;h4&gt;x86/x86-64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Xeon 56xx (Westmere)&lt;/strong&gt;: Used GotoBLAS2 Nehalem codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Sandy Bridge&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Haswell&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX2 and FMA on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Skylake-X&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX512 and FMA on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Cooper Lake&lt;/strong&gt;: as Skylake-X with improved BFLOAT16 support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD Bobcat&lt;/strong&gt;: Used GotoBLAS2 Barcelona codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD Bulldozer&lt;/strong&gt;: x86-64 ?GEMM FMA4 kernels. (Thanks to Werner Saar)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD PILEDRIVER&lt;/strong&gt;: Uses Bulldozer codes with some optimizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD STEAMROLLER&lt;/strong&gt;: Uses Bulldozer codes with some optimizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD ZEN&lt;/strong&gt;: Uses Haswell codes with some optimizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MIPS32&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS 1004K&lt;/strong&gt;: uses P5600 codes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS 24K&lt;/strong&gt;: uses P5600 codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MIPS64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ICT Loongson 3A&lt;/strong&gt;: Optimized Level-3 BLAS and the part of Level-1,2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ICT Loongson 3B&lt;/strong&gt;: Experimental&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ARM&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv6&lt;/strong&gt;: Optimized BLAS for vfpv2 and vfpv3-d16 (e.g. BCM2835, Cortex M0+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv7&lt;/strong&gt;: Optimized BLAS for vfpv3-d32 (e.g. Cortex A8, A9 and A15)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ARM64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv8&lt;/strong&gt;: Basic ARMV8 with small caches, optimized Level-3 and Level-2 BLAS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-A53&lt;/strong&gt;: same as ARMV8 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-A55&lt;/strong&gt;: same as ARMV8 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A57&lt;/strong&gt;: Optimized Level-3 and Level-2 functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A72&lt;/strong&gt;: same as A57 ( different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A73&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Falkor&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX&lt;/strong&gt;: Optimized some Level-1 functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX2T99&lt;/strong&gt;: Optimized Level-3 BLAS and parts of Levels 1 and 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX3T110&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TSV110&lt;/strong&gt;: Optimized some Level-3 helper functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EMAG 8180&lt;/strong&gt;: preliminary support based on A57&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neoverse N1&lt;/strong&gt;: (AWS Graviton2) preliminary support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Apple Vortex&lt;/strong&gt;: preliminary support based on ARMV8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PPC/PPC64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;POWER8&lt;/strong&gt;: Optimized BLAS, only for PPC64LE (Little Endian), only with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POWER9&lt;/strong&gt;: Optimized Level-3 BLAS (real) and some Level-1,2. PPC64LE with OpenMP only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POWER10&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IBM zEnterprise System&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Z13&lt;/strong&gt;: Optimized Level-3 BLAS and Level-1,2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Z14&lt;/strong&gt;: Optimized Level-3 BLAS and (single precision) Level-1,2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;RISC-V&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C910V&lt;/strong&gt;: Optimized Level-3 BLAS (real) and Level-1,2 by RISC-V Vector extension 0.7.1. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc TARGET=C910V CC=riscv64-unknown-linux-gnu-gcc FC=riscv64-unknown-linux-gnu-gfortran&#xA;&lt;/code&gt;&lt;/pre&gt; (also known to work on C906)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support for multiple targets in a single library&lt;/h3&gt; &#xA;&lt;p&gt;OpenBLAS can be built for multiple targets with runtime detection of the target cpu by specifiying &lt;code&gt;DYNAMIC_ARCH=1&lt;/code&gt; in Makefile.rule, on the gmake command line or as &lt;code&gt;-DDYNAMIC_ARCH=TRUE&lt;/code&gt; in cmake.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;x86_64&lt;/strong&gt;, the list of targets this activates contains Prescott, Core2, Nehalem, Barcelona, Sandybridge, Bulldozer, Piledriver, Steamroller, Excavator, Haswell, Zen, SkylakeX. For cpu generations not included in this list, the corresponding older model is used. If you also specify &lt;code&gt;DYNAMIC_OLDER=1&lt;/code&gt;, specific support for Penryn, Dunnington, Opteron, Opteron/SSE3, Bobcat, Atom and Nano is added. Finally there is an option &lt;code&gt;DYNAMIC_LIST&lt;/code&gt; that allows to specify an individual list of targets to include instead of the default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DYNAMIC_ARCH&lt;/code&gt; is also supported on &lt;strong&gt;x86&lt;/strong&gt;, where it translates to Katmai, Coppermine, Northwood, Prescott, Banias, Core2, Penryn, Dunnington, Nehalem, Athlon, Opteron, Opteron_SSE3, Barcelona, Bobcat, Atom and Nano.&lt;/p&gt; &#xA;&lt;p&gt;On &lt;strong&gt;ARMV8&lt;/strong&gt;, it enables support for CortexA53, CortexA57, CortexA72, CortexA73, Falkor, ThunderX, ThunderX2T99, TSV110 as well as generic ARMV8 cpus.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;POWER&lt;/strong&gt;, the list encompasses POWER6, POWER8 and POWER9, on &lt;strong&gt;ZARCH&lt;/strong&gt; it comprises Z13 and Z14.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;TARGET&lt;/code&gt; option can be used in conjunction with &lt;code&gt;DYNAMIC_ARCH=1&lt;/code&gt; to specify which cpu model should be assumed for all the common code in the library, usually you will want to set this to the oldest model you expect to encounter. Please note that it is not possible to combine support for different architectures, so no combined 32 and 64 bit or x86_64 and arm64 in the same library.&lt;/p&gt; &#xA;&lt;h3&gt;Supported OS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GNU/Linux&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MinGW or Visual Studio (CMake)/Windows&lt;/strong&gt;: Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Darwin/macOS/OSX/iOS&lt;/strong&gt;: Experimental. Although GotoBLAS2 already supports Darwin, we are not OSX/iOS experts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DragonFly BSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: Supported by the community. Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AIX&lt;/strong&gt;: Supported on PPC up to POWER8&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Haiku&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SunOS&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-M&lt;/strong&gt;: Supported by the community. Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-on-Cortex-M&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-on-Cortex-M&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Statically link with &lt;code&gt;libopenblas.a&lt;/code&gt; or dynamically link with &lt;code&gt;-lopenblas&lt;/code&gt; if OpenBLAS was compiled as a shared library.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the number of threads using environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Environment variables are used to specify a maximum number of threads. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OPENBLAS_NUM_THREADS=4&#xA;export GOTO_NUM_THREADS=4&#xA;export OMP_NUM_THREADS=4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The priorities are &lt;code&gt;OPENBLAS_NUM_THREADS&lt;/code&gt; &amp;gt; &lt;code&gt;GOTO_NUM_THREADS&lt;/code&gt; &amp;gt; &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you compile this library with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;, you should set the &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt; environment variable; OpenBLAS ignores &lt;code&gt;OPENBLAS_NUM_THREADS&lt;/code&gt; and &lt;code&gt;GOTO_NUM_THREADS&lt;/code&gt; when compiled with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the number of threads at runtime&lt;/h3&gt; &#xA;&lt;p&gt;We provide the following functions to control the number of threads at runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void goto_set_num_threads(int num_threads);&#xA;void openblas_set_num_threads(int num_threads);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these are only used once at library initialization, and are not available for fine-tuning thread numbers in individual BLAS calls. If you compile this library with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;, you should use the above functions too.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please submit an issue in &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/issues&#34;&gt;https://github.com/xianyi/OpenBLAS/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenBLAS users mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/openblas-users&#34;&gt;https://groups.google.com/forum/#!forum/openblas-users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenBLAS developers mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/openblas-dev&#34;&gt;https://groups.google.com/forum/#!forum/openblas-dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see Changelog.txt to view the differences between OpenBLAS and GotoBLAS2 1.13 BSD version.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/Faq&#34;&gt;FAQ&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;Please use GCC version 4.6 and above to compile Sandy Bridge AVX kernels on Linux/MinGW/BSD.&lt;/li&gt; &#xA; &lt;li&gt;Please use Clang version 3.1 and above to compile the library on Sandy Bridge microarchitecture. Clang 3.0 will generate the wrong AVX binary code.&lt;/li&gt; &#xA; &lt;li&gt;Please use GCC version 6 or LLVM version 6 and above to compile Skylake AVX512 kernels.&lt;/li&gt; &#xA; &lt;li&gt;The number of CPUs/cores should be less than or equal to 256. On Linux &lt;code&gt;x86_64&lt;/code&gt; (&lt;code&gt;amd64&lt;/code&gt;), there is experimental support for up to 1024 CPUs/cores and 128 numa nodes if you build the library with &lt;code&gt;BIGNUMA=1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;OpenBLAS does not set processor affinity by default. On Linux, you can enable processor affinity by commenting out the line &lt;code&gt;NO_AFFINITY=1&lt;/code&gt; in Makefile.rule. However, note that this may cause &lt;a href=&#34;https://stat.ethz.ch/pipermail/r-sig-hpc/2012-April/001348.html&#34;&gt;a conflict with R parallel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Loongson 3A, &lt;code&gt;make test&lt;/code&gt; may fail with a &lt;code&gt;pthread_create&lt;/code&gt; error (&lt;code&gt;EAGAIN&lt;/code&gt;). However, it will be okay when you run the same test case on the shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xianyi/OpenBLAS/issues&#34;&gt;Check for open issues&lt;/a&gt; or open a fresh issue to start a discussion around a feature idea or a bug.&lt;/li&gt; &#xA; &lt;li&gt;Fork the &lt;a href=&#34;https://github.com/xianyi/OpenBLAS&#34;&gt;OpenBLAS&lt;/a&gt; repository to start making your changes.&lt;/li&gt; &#xA; &lt;li&gt;Write a test which shows that the bug was fixed or that the feature works as expected.&lt;/li&gt; &#xA; &lt;li&gt;Send a pull request. Make sure to add yourself to &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/Donation&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>