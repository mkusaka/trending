<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:40:29Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cnlohr/mini-rv32ima</title>
    <updated>2022-12-11T01:40:29Z</updated>
    <id>tag:github.com,2022-12-11:/cnlohr/mini-rv32ima</id>
    <link href="https://github.com/cnlohr/mini-rv32ima" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny C header-only risc-v emulator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;riscv_emufun (mini-rv32ima)&lt;/h1&gt; &#xA;&lt;p&gt;Click below for the YouTube video introducing this project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=YT5vB3UqU_E&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/YT5vB3UqU_E/0.jpg&#34; alt=&#34;Writing a Really Tiny RISC-V Emulator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=uZMNK17VCMU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/uZMNK17VCMU/0.jpg&#34; alt=&#34;But Will It Run Doom?&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&lt;/h2&gt; &#xA;&lt;p&gt;mini-rv32ima is a single-file-header, &lt;a href=&#34;https://github.com/cnlohr/riscv_emufun/raw/master/mini-rv32ima/mini-rv32ima.h&#34;&gt;mini-rv32ima.h&lt;/a&gt;, in the &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;STB Style library&lt;/a&gt; that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implements a RISC-V &lt;strong&gt;rv32ima/Zifencei+Zicsr&lt;/strong&gt; (and partial su), with CLINT and MMIO.&lt;/li&gt; &#xA; &lt;li&gt;Is about &lt;strong&gt;400 lines&lt;/strong&gt; of actual code.&lt;/li&gt; &#xA; &lt;li&gt;Has &lt;strong&gt;no dependencies&lt;/strong&gt;, not even libc.&lt;/li&gt; &#xA; &lt;li&gt;Is &lt;strong&gt;easily extensible&lt;/strong&gt;. So you can easily add CSRs, instructions, MMIO, etc!&lt;/li&gt; &#xA; &lt;li&gt;Is pretty &lt;strong&gt;performant&lt;/strong&gt;. (~450 coremark on my laptop, about 1/2 the speed of QEMU)&lt;/li&gt; &#xA; &lt;li&gt;Is human-readable and in &lt;strong&gt;basic C&lt;/strong&gt; code.&lt;/li&gt; &#xA; &lt;li&gt;Is &#34;&lt;strong&gt;incomplete&lt;/strong&gt;&#34; in that it didn&#39;t implement the tons of the spec that Linux doesn&#39;t (and you shouldn&#39;t) use.&lt;/li&gt; &#xA; &lt;li&gt;Is trivially &lt;strong&gt;embeddable&lt;/strong&gt; in applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has a &lt;a href=&#34;https://github.com/cnlohr/riscv_emufun/raw/master/mini-rv32ima/mini-rv32ima.c&#34;&gt;demo wrapper&lt;/a&gt; that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implements a CLI, SYSCON, UART, DTB and Kernel image loading.&lt;/li&gt; &#xA; &lt;li&gt;And it only around &lt;strong&gt;250 lines&lt;/strong&gt; of code, itself.&lt;/li&gt; &#xA; &lt;li&gt;Compiles down to a &lt;strong&gt;~18kB executable&lt;/strong&gt; and only relies on libc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Just see the &lt;code&gt;mini-rv32ima&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s &#34;fully functional&#34; now in that I can run Linux, apps, etc. Compile flat binaries and drop them in an image.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m working on a really really simple C Risc-V emulator. So simple it doesn&#39;t even have an MMU (Memory Management Unit). I have a few goals, they include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Furthering RV32-NOMMU work to improve Linux support for RV32-NOMMU. (Imagine if we could run Linux on the $1 ESP32-C3)&lt;/li&gt; &#xA; &lt;li&gt;Learning more about RV32 and writing emulators.&lt;/li&gt; &#xA; &lt;li&gt;Being further inspired by @pimaker&#39;s amazing work on &lt;a href=&#34;https://blog.pimaker.at/texts/rvc1/&#34;&gt;Running Linux in a Pixel Shader&lt;/a&gt; and having the sneaking suspicion performance could be even better!&lt;/li&gt; &#xA; &lt;li&gt;Hoping to port it to some weird places.&lt;/li&gt; &#xA; &lt;li&gt;Understand the &lt;em&gt;most simplistic&lt;/em&gt; system you can run Linux on and trying to push that boundary.&lt;/li&gt; &#xA; &lt;li&gt;Continue to include my [education of people about assembly language].(&lt;a href=&#34;https://www.youtube.com/watch?v=Gelf0AyVGy4&#34;&gt;https://www.youtube.com/watch?v=Gelf0AyVGy4&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How&lt;/h2&gt; &#xA;&lt;p&gt;Windows instructions (Just playing with the image)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;Install or have TinyCC. &lt;a href=&#34;https://github.com/cntools/Install-TCC&#34;&gt;Powershell Installer&lt;/a&gt; or &lt;a href=&#34;https://github.com/cnlohr/tinycc-win64-installer/releases/tag/v0_0.9.27&#34;&gt;Regular Windows Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;winrun.ps&lt;/code&gt; in the &lt;code&gt;windows&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;WSL (For full toolchain and image build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You will need to remove all spaces from your path i.e. &lt;code&gt;export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/c/Windows/system32:/snap/bin&lt;/code&gt; and continue the instructions. P.S. What in the world was Windows thinking, putting a space between &#34;Program&#34; and &#34;Files&#34;??!?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Linux instructions (both):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;git build-essential&lt;/code&gt; and/or whatever other requirements are in place for &lt;a href=&#34;https://buildroot.org/&#34;&gt;buildroot&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make testdlimage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;It automatically downloads the image (~1MB) and runs the emulator.&lt;/li&gt; &#xA; &lt;li&gt;Should be up and running in about 2.5s depending on internet speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can do in-depth work on Linux by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make everything&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to play with the bare metal system, see below, or if you have the toolchain installed, just:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make testbare&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you just want to play emdoom, and use the prebuilt image:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Windows, run &lt;code&gt;windows\winrundoom.ps1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Linux, &lt;code&gt;cd mini-rv32ima&lt;/code&gt;, and type &lt;code&gt;make testdoom&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why not rv64? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Because then I can&#39;t run it as easily in a pixel shader if I ever hope to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Can I add an MMU? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Yes. It actually probably wouldn&#39;t be too difficult.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Should I add an MMU? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No. It is important to further support for nommu systems to empower minimal Risc-V designs!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything else: Contact us on my Discord: &lt;a href=&#34;https://discord.com/invite/CCeyWyZ&#34;&gt;https://discord.com/invite/CCeyWyZ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hopeful goals?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Further drive down needed features to run Linux. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remove need for RV32A extension on systems with only one CPU.&lt;/li&gt; &#xA;   &lt;li&gt;Support for relocatable ELF executables.&lt;/li&gt; &#xA;   &lt;li&gt;Add support for an unreal UART. One that&#39;s &lt;strong&gt;much&lt;/strong&gt; simpler than the current 8250 driver.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Maybe run this in a pixelshader too!&lt;/li&gt; &#xA; &lt;li&gt;Get opensbi working with this.&lt;/li&gt; &#xA; &lt;li&gt;Be able to &#34;embed&#34; rv32 emulators in random projects.&lt;/li&gt; &#xA; &lt;li&gt;Can I use early console to be a full system console?&lt;/li&gt; &#xA; &lt;li&gt;Can I increase the maximum contiguous memory allocatable?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For @regymm and their &lt;a href=&#34;https://github.com/regymm/buildroot&#34;&gt;patches to buildroot&lt;/a&gt; and help! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;callout: Regymm&#39;s &lt;a href=&#34;https://github.com/regymm/quasiSoC/&#34;&gt;quazisoc project&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Buildroot (For being so helpful).&lt;/li&gt; &#xA; &lt;li&gt;@vowstar and their team working on &lt;a href=&#34;https://github.com/vowstar/k210-linux-nommu&#34;&gt;k210-linux-nommu&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;This &lt;a href=&#34;https://jborza.com/emulation/2020/04/09/riscv-environment.html&#34;&gt;guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://luplab.gitlab.io/rvcodecjs/&#34;&gt;rvcodecjs&lt;/a&gt; I probably went through over 1,000 codes here.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More details&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build the kernel yourself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make everything&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;About 20 minutes. (Or 4+ hours if you&#39;re on &lt;a href=&#34;https://github.com/microsoft/WSL/issues/4197&#34;&gt;Windows Subsytem for Linux 2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;And you should be dropped into a Linux busybox shell with some little tools that were compiled here.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Emdoom notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emdoom building is in the &lt;code&gt;experiments/emdoom&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;You &lt;em&gt;MUST&lt;/em&gt; build your kernel with &lt;code&gt;MAX_ORDER&lt;/code&gt; set to &amp;gt;12 in &lt;code&gt;buildroot/output/build/linux-5.19/include/linux/mmzone.h&lt;/code&gt; if you are building your own image.&lt;/li&gt; &#xA; &lt;li&gt;You CAN use the pre-existing image that is described above.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, it will be very slow. Not sure why.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use bare metal to build your binaries so you don&#39;t need buildroot, you can use the rv64 gcc in 32-bit mode built into Ubuntu 20.04 and up.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install gcc-multilib gcc-riscv64-unknown-elf make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Hackaday Supercon 2022: Charles Lohr - Assembly in 2022: Yes! We Still Use it and Here&#39;s Why&#34; : &lt;a href=&#34;https://www.youtube.com/watch?v=Gelf0AyVGy4&#34;&gt;https://www.youtube.com/watch?v=Gelf0AyVGy4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attic&lt;/h2&gt; &#xA;&lt;h2&gt;General notes:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cnlohr/riscv_emufun/commit/2f09cdeb378dc0215c07eb63f5a6fb43dbbf1871#diff-b48ccd795ae9aced07d022bf010bf9376232c4d78210c3113d90a8d349c59b3dL440&#34;&gt;https://github.com/cnlohr/riscv_emufun/commit/2f09cdeb378dc0215c07eb63f5a6fb43dbbf1871#diff-b48ccd795ae9aced07d022bf010bf9376232c4d78210c3113d90a8d349c59b3dL440&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(These things don&#39;t currently work)&lt;/p&gt; &#xA;&lt;h3&gt;Building Tests&lt;/h3&gt; &#xA;&lt;p&gt;(This does not work, now)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd riscv-tests&#xA;export CROSS_COMPILE=riscv64-linux-gnu-&#xA;export PLATFORM_RISCV_XLEN=32&#xA;CC=riscv64-linux-gnu-gcc ./configure&#xA;make XLEN=32 RISCV_PREFIX=riscv64-unknown-elf- RISCV_GCC_OPTS=&#34;-g -O1 -march=rv32imaf -mabi=ilp32f -I/usr/include&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building OpenSBI&lt;/h3&gt; &#xA;&lt;p&gt;(This does not currently work!)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd opensbi&#xA;export CROSS_COMPILE=riscv64-unknown-elf-&#xA;export PLATFORM_RISCV_XLEN=32&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clear outline of CSRs: &lt;a href=&#34;https://five-embeddev.com/riscv-isa-manual/latest/priv-csrs.html&#34;&gt;https://five-embeddev.com/riscv-isa-manual/latest/priv-csrs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fonts used in videos: &lt;a href=&#34;https://audiolink.dev/&#34;&gt;https://audiolink.dev/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using custom build&lt;/h3&gt; &#xA;&lt;p&gt;Where yminpatch is the patch from the mailing list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf buildroot&#xA;git clone git://git.buildroot.net/buildroot&#xA;cd buildroot&#xA;git am &amp;lt; ../yminpatch.txt&#xA;make qemu_riscv32_nommu_virt_defconfig&#xA;make&#xA;# Or use our configs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For emdoom you will need to modify include/linux/mmzone.h and change MAX_ORDER to 13.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/age</title>
    <updated>2022-12-11T01:40:29Z</updated>
    <id>tag:github.com,2022-12-11:/apache/age</id>
    <link href="https://github.com/apache/age" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Graph database optimized for fast analysis and real-time data processing. It is provided as an extension to PostgreSQL.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; &#34; height=&#34;30% alt=&#34; Apache AGE&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; is a leading multi-model graph database &lt;/h3&gt;  &#xA;&lt;h3 align=&#34;center&#34;&gt;Graph Processing &amp;amp; Analytics for Relational Databases&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/apache/age/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Release-v1.1.0-FFA500?labelColor=gray&amp;amp;style=flat&amp;amp;link=https://github.com/apache/age/releases&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/network/members&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://discord.gg/NMsBs9X8Ss&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1022177873127280680.svg?label=discord&amp;amp;style=flat&amp;amp;color=5a66f6&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/AGE.png&#34;&gt;&amp;nbsp;&amp;nbsp;What is Apache AGE?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://age.apache.org/#&#34;&gt;Apache AGE&lt;/a&gt; is an extension for PostgreSQL that enables users to leverage a graph database on top of the existing relational databases. AGE is an acronym for A Graph Extension and is inspired by Bitnine&#39;s AgensGraph, a multi-model database fork of PostgreSQL. The basic principle of the project is to create a single storage that handles both the relational and graph data model so that the users can use the standard ANSI SQL along with openCypher, one of the most popular graph query languages today. &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/age-01.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Since AGE is based on the powerful PostgreSQL RDBMS, it is robust and fully featured. AGE is optimized for handling complex connected graph data. It provides plenty of robust databases features essential to the database environment, including ACID transactions, multi-version concurrency control (MVCC), stored procedure, triggers, constraints, sophisticated monitoring, and a flexible data model (JSON). Users with a relational background who require graph data analytics can use this extension with minimal effort because they can use existing data without having to go through migration.&lt;/p&gt; &#xA;&lt;p&gt;There is a strong need for cohesive, easy-to-implement multi-model databases. As an extension of PostgreSQL, AGE supports all the functionalities and features of PostgreSQL while also offering a graph model to boot.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/tick.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Apache AGE is :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful&lt;/strong&gt;: adds graph database support to the already popular PostgreSQL database: PostgreSQL is used by organizations including Apple, Spotify, and NASA.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: allows you to perform openCypher queries, which makes complex queries much easier to write. It also enables multiple graphs at the same time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intelligent&lt;/strong&gt;: allows you to perform graph queries that are the basis for many next-level web services such as fraud detection, master data management, product recommendations, identity and relationship management, experience personalization, knowledge management, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/features.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Features&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/age-03.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cypher Query&lt;/strong&gt;: supports graph query language&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hybrid Querying&lt;/strong&gt;: enables SQL and/or Cypher&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Querying&lt;/strong&gt;: enables multiple graphs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hierarchical&lt;/strong&gt;: graph label organization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Property Indexes&lt;/strong&gt;: on both vertices(nodes) and edges&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full PostgreSQL&lt;/strong&gt;: supports PG features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/documentation.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Refer to our latest &lt;a href=&#34;https://age.apache.org/age-manual/master/index.html&#34;&gt;Apache AGE documentation&lt;/a&gt; to learn about installation, features, built-in functions, and Cypher queries.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/installation.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Pre-Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the following essential libraries according to each OS. Building AGE from the source depends on the following Linux libraries (Ubuntu package names shown below):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CentOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install gcc glibc glib-common readline readline-devel zlib zlib-devel flex bison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fedora&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install gcc glibc bison flex readline readline-devel zlib zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/installation.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Apache AGE is intended to be simple to install and run. It can be installed with Docker and other traditional ways.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a&gt;&lt;img width=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/pg.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp;Install PosgtreSQL &lt;/h4&gt; &#xA;&lt;p&gt;You will need to install an AGE compatible version of Postgres&lt;a&gt;, for now AGE supports Postgres 11 and 12. Supporting the latest versions is on AGE roadmap.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a&gt; &lt;h4&gt; &amp;nbsp;Install From Package Manager &lt;/h4&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a&gt;You can use a &lt;/a&gt;&lt;a href=&#34;https://www.postgresql.org/download/&#34;&gt;package management &lt;/a&gt; that your OS provides to download AGE.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install postgresql &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt; &amp;nbsp;Install From Source Code &lt;/h4&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://www.postgresql.org/ftp/source/&#34;&gt; download the Postgres &lt;/a&gt; source code and install your own instance of Postgres. You can read instructions on how to install from source code for different versions on the &lt;a href=&#34;https://www.postgresql.org/docs/11/installation.html&#34;&gt;offical Postgres Website.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;img width=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/tux.svg?sanitize=true&#34;&gt;&lt;img width=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/apple.svg?sanitize=true&#34;&gt; &amp;nbsp;Install AGE on Linux and MacOS &lt;/h4&gt; &#xA;&lt;p&gt;Clone the &lt;a href=&#34;https://github.com/apache/age&#34;&gt;github repository&lt;/a&gt; or download the&lt;a href=&#34;https://github.com/apache/age/releases&#34;&gt;download an official release. &lt;/a&gt; Run the pg_config utility and check the version of PostgreSQL. Currently, only PostgreSQL versions 11 &amp;amp; 12 are supported. If you have any other version of Postgres, you will need to install PostgreSQL version 11 &amp;amp; 12. &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pg_config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command in the source code directory of Apache AGE to build and install the extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the path to your Postgres installation is not in the PATH variable, add the path in the arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make PG_CONFIG=/path/to/postgres/bin/pg_config install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;img width=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/docker.svg?sanitize=true&#34;&gt; &amp;nbsp;Run using Docker &lt;/h4&gt; &#xA;&lt;h5&gt; Get the docker image &lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull apache/age&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt; Create AGE docker container &lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;    --name age  \&#xA;    -p 5455:5432 \&#xA;    -e POSTGRES_USER=postgresUser \&#xA;    -e POSTGRES_PASSWORD=postgresPW \&#xA;    -e POSTGRES_DB=postgresDB \&#xA;    -d \&#xA;    apache/age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/contents.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Post Installation&lt;/h2&gt; &#xA;&lt;p&gt;For every connection of AGE you start, you will need to load the AGE extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CREATE EXTENSION age;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LOAD &#39;age&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SET search_path = ag_catalog, &#34;$user&#34;, public;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/contents.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To create a graph, use the create_graph function located in the ag_catalog namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;create_graph(graph_name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a single vertex, use the CREATE clause.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    CREATE (n)&#xA;$$) as (v agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a single vertex with the label, use the CREATE clause.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    CREATE (:label)&#xA;$$) as (v agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To query the graph, you can use the MATCH clause.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * FROM cypher(&#39;graph_name&#39;, $$&#xA;MATCH (v)&#xA;RETURN v&#xA;$$) as (v agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the following to create an edge, for example, between two nodes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    MATCH (a:lable), (b:lable)&#xA;    WHERE a.property = &#39;Node A&#39; AND b.property = &#39;Node B&#39;&#xA;    CREATE (a)-[e:RELTYPE]-&amp;gt;(b)&#xA;    RETURN e&#xA;$$) as (e agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create an edge and set properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    MATCH (a:label), (b:label)&#xA;    WHERE a.property = &#39;Node A&#39; AND b.property = &#39;Node B&#39;&#xA;    CREATE (a)-[e:RELTYPE {property:a.property + &#39;&amp;lt;-&amp;gt;&#39; + b.property}]-&amp;gt;(b)&#xA;    RETURN e&#xA;$$) as (e agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    MATCH (a:Person), (b:Person)&#xA;    WHERE a.name = &#39;Node A&#39; AND b.name = &#39;Node B&#39;&#xA;    CREATE (a)-[e:RELTYPE {name:a.name + &#39;&amp;lt;-&amp;gt;&#39; + b.name}]-&amp;gt;(b)&#xA;    RETURN e&#xA;$$) as (e agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/gettingstarted.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Language Specific Drivers&lt;/h2&gt; &#xA;&lt;p&gt;Starting with Apache AGE is very simple. You can easily&amp;nbsp;select&amp;nbsp;your platform and incorporate&amp;nbsp;the relevant SDK into your code. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/age-02.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Built-in&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/golang&#34;&gt;Go driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/jdbc&#34;&gt;Java driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/nodejs&#34;&gt;NodeJs driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/python&#34;&gt;Python driver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Community-driven Driver&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dzordzu/rust-apache-age.git&#34;&gt;Apache AGE Rust Driver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/contributing.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join the AGE community for help, questions, discussions, and contributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check our &lt;a href=&#34;https://age.apache.org/&#34;&gt;website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat live with us on &lt;a href=&#34;https://discord.com/invite/NMsBs9X8Ss/&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://twitter.com/apache_age?s=20&amp;amp;t=7Hu8Txk4vjvuEp-ryakacg&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://lists.apache.org/list.html?dev@age.apache.org&#34;&gt;Dev community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/visualization.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Graph Visualization Tool for AGE&lt;/h2&gt; &#xA;&lt;p&gt;Apache AGE Viewer is a user interface for Apache AGE that provides visualization and exploration of data. This web visualization tool allows users to enter complex graph queries and explore the results in graph and table forms. Apache AGE Viewer is enhanced to proceed with extensive graph data and discover insights through various graph algorithms. Apache AGE Viewer will become a graph data administration and development platform for Apache AGE to support multiple relational databases: &lt;a href=&#34;https://github.com/apache/age-viewer&#34;&gt;https://github.com/apache/age-viewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a visualization tool.&lt;/strong&gt; After installing AGE Extension, you may use this tool to get access to the visualization features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/agce.gif&#34; alt=&#34;Viewer gdb, and graph&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/community.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can improve ongoing efforts or initiate new ones by sending pull requests to &lt;a href=&#34;https://github.com/apache/age&#34;&gt;this repository&lt;/a&gt;. Also, you can learn from the code review process, how to merge pull requests, and from code style compliance to documentation by visiting the &lt;a href=&#34;https://age.apache.org/contribution/guide&#34;&gt;Apache AGE official site - Developer Guidelines&lt;/a&gt;. Send all your comments and inquiries to the user mailing list, &lt;a href=&#34;mailto:users@age.apache.org&#34;&gt;users@age.apache.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>php/php-src</title>
    <updated>2022-12-11T01:40:29Z</updated>
    <id>tag:github.com,2022-12-11:/php/php-src</id>
    <link href="https://github.com/php/php-src" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The PHP Interpreter&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://php.net&#34;&gt; &lt;img alt=&#34;PHP&#34; src=&#34;https://www.php.net/images/logos/new-php-logo.svg?sanitize=true&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;The PHP Interpreter&lt;/h1&gt; &#xA;&lt;p&gt;PHP is a popular general-purpose scripting language that is especially suited to web development. Fast, flexible and pragmatic, PHP powers everything from your blog to the most popular websites in the world. PHP is distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/LICENSE&#34;&gt;PHP License v3.01&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/php/php-src/actions/workflows/push.yml&#34;&gt;&lt;img src=&#34;https://github.com/php/php-src/actions/workflows/push.yml/badge.svg?sanitize=true&#34; alt=&#34;Push&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/github/php/php-src&#34;&gt;&lt;img src=&#34;https://travis-ci.com/php/php-src.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/php/php-src&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/meyur6fviaxgdwdy/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/phpazuredevops/php/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/phpazuredevops/php/_apis/build/status/php.php-src?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:php&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/php.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The PHP manual is available at &lt;a href=&#34;https://php.net/docs&#34;&gt;php.net/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prebuilt packages and binaries&lt;/h3&gt; &#xA;&lt;p&gt;Prebuilt packages and binaries can be used to get up and running fast with PHP.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, the PHP binaries can be obtained from &lt;a href=&#34;https://windows.php.net&#34;&gt;windows.php.net&lt;/a&gt;. After extracting the archive the &lt;code&gt;*.exe&lt;/code&gt; files are ready to use.&lt;/p&gt; &#xA;&lt;p&gt;For other systems, see the &lt;a href=&#34;https://php.net/install&#34;&gt;installation chapter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building PHP source code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;For Windows, see &lt;a href=&#34;https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2&#34;&gt;Build your own PHP on Windows&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a minimal PHP build from Git, you will need autoconf, bison, and re2c. For a default build, you will additionally need libxml2 and libsqlite3.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, you can install these using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install -y pkg-config build-essential autoconf bison re2c \&#xA;                    libxml2-dev libsqlite3-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, you can install these using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf install re2c bison autoconf make libtool ccache libxml2-devel sqlite-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./buildconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure your build. &lt;code&gt;--enable-debug&lt;/code&gt; is recommended for development, see &lt;code&gt;./configure --help&lt;/code&gt; for a full list of options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# For development&#xA;./configure --enable-debug&#xA;# For production&#xA;./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build PHP. To speed up the build, specify the maximum number of jobs using &lt;code&gt;-j&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number of jobs should usually match the number of available cores, which can be determined using &lt;code&gt;nproc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing PHP source code&lt;/h2&gt; &#xA;&lt;p&gt;PHP ships with an extensive test suite, the command &lt;code&gt;make test&lt;/code&gt; is used after successful compilation of the sources to run this test suite.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to run tests using multiple cores by setting &lt;code&gt;-jN&lt;/code&gt; in &lt;code&gt;TEST_PHP_ARGS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make TEST_PHP_ARGS=-j4 test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shall run &lt;code&gt;make test&lt;/code&gt; with a maximum of 4 concurrent jobs: Generally the maximum number of jobs should not exceed the number of cores available.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://qa.php.net&#34;&gt;qa.php.net&lt;/a&gt; site provides more detailed info about testing and quality assurance.&lt;/p&gt; &#xA;&lt;h2&gt;Installing PHP built from source&lt;/h2&gt; &#xA;&lt;p&gt;After a successful build (and test), PHP may be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your permissions and prefix, &lt;code&gt;make install&lt;/code&gt; may need super user permissions.&lt;/p&gt; &#xA;&lt;h2&gt;PHP extensions&lt;/h2&gt; &#xA;&lt;p&gt;Extensions provide additional functionality on top of PHP. PHP consists of many essential bundled extensions. Additional extensions can be found in the PHP Extension Community Library - &lt;a href=&#34;https://pecl.php.net&#34;&gt;PECL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The PHP source code is located in the Git repository at &lt;a href=&#34;https://github.com/php/php-src&#34;&gt;github.com/php/php-src&lt;/a&gt;. Contributions are most welcome by forking the repository and sending a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Discussions are done on GitHub, but depending on the topic can also be relayed to the official PHP developer mailing list &lt;a href=&#34;mailto:internals@lists.php.net&#34;&gt;internals@lists.php.net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New features require an RFC and must be accepted by the developers. See &lt;a href=&#34;https://wiki.php.net/rfc&#34;&gt;Request for comments - RFC&lt;/a&gt; and &lt;a href=&#34;https://wiki.php.net/rfc/voting&#34;&gt;Voting on PHP features&lt;/a&gt; for more information on the process.&lt;/p&gt; &#xA;&lt;p&gt;Bug fixes don&#39;t require an RFC. If the bug has a GitHub issue, reference it in the commit message using &lt;code&gt;GH-NNNNNN&lt;/code&gt;. Use &lt;code&gt;#NNNNNN&lt;/code&gt; for tickets in the old &lt;a href=&#34;https://bugs.php.net&#34;&gt;bugs.php.net&lt;/a&gt; bug tracker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fix GH-7815: php_uname doesn&#39;t recognise latest Windows versions&#xA;Fix #55371: get_magic_quotes_gpc() throws deprecation warning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wiki.php.net/vcs/gitworkflow&#34;&gt;Git workflow&lt;/a&gt; for details on how pull requests are merged.&lt;/p&gt; &#xA;&lt;h3&gt;Guidelines for contributors&lt;/h3&gt; &#xA;&lt;p&gt;See further documents in the repository for more information on how to contribute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/CONTRIBUTING.md&#34;&gt;Contributing to PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/CODING_STANDARDS.md&#34;&gt;PHP coding standards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/docs/mailinglist-rules.md&#34;&gt;Mailing list rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/docs/release-process.md&#34;&gt;PHP release process&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;For the list of people who&#39;ve put work into PHP, please see the &lt;a href=&#34;https://php.net/credits.php&#34;&gt;PHP credits page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>