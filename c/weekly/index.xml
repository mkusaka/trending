<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:43:25Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebook/zstd</title>
    <updated>2022-08-28T01:43:25Z</updated>
    <id>tag:github.com,2022-08-28:/facebook/zstd</id>
    <link href="https://github.com/facebook/zstd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zstandard - Fast real-time compression algorithm&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/zstd_logo86.png&#34; alt=&#34;Zstandard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zstandard&lt;/strong&gt;, or &lt;code&gt;zstd&lt;/code&gt; as short version, is a fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios. It&#39;s backed by a very fast entropy stage, provided by &lt;a href=&#34;https://github.com/Cyan4973/FiniteStateEntropy&#34;&gt;Huff0 and FSE library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Zstandard&#39;s format is stable and documented in &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8878&#34;&gt;RFC8878&lt;/a&gt;. Multiple independent implementations are already available. This repository represents the reference implementation, provided as an open-source dual &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/LICENSE&#34;&gt;BSD&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/COPYING&#34;&gt;GPLv2&lt;/a&gt; licensed &lt;strong&gt;C&lt;/strong&gt; library, and a command line utility producing and decoding &lt;code&gt;.zst&lt;/code&gt;, &lt;code&gt;.gz&lt;/code&gt;, &lt;code&gt;.xz&lt;/code&gt; and &lt;code&gt;.lz4&lt;/code&gt; files. Should your project require another programming language, a list of known ports and bindings is provided on &lt;a href=&#34;http://www.zstd.net/#other-languages&#34;&gt;Zstandard homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Development branch status:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/facebook/zstd&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/facebook/zstd.svg?branch=dev&#34; alt=&#34;Build Status&#34; title=&#34;Continuous Integration test suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/YannCollet/zstd-p0yf0&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/xt38wbdxjk5mrbem/branch/dev?svg=true&#34; alt=&#34;Build status&#34; title=&#34;Windows test suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/zstd&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/zstd/tree/dev.svg?style=shield&#34; alt=&#34;Build status&#34; title=&#34;Short test suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/facebook/zstd&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/facebook/zstd.svg?branch=dev&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:zstd&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/zstd.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;For reference, several fast compression algorithms were tested and compared on a desktop running Ubuntu 20.04 (&lt;code&gt;Linux 5.11.0-41-generic&lt;/code&gt;), with a Core i7-9700K CPU @ 4.9GHz, using &lt;a href=&#34;https://github.com/inikep/lzbench&#34;&gt;lzbench&lt;/a&gt;, an open-source in-memory benchmark by @inikep compiled with &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt; 9.3.0, on the &lt;a href=&#34;http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia&#34;&gt;Silesia compression corpus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compressor name&lt;/th&gt; &#xA;   &lt;th&gt;Ratio&lt;/th&gt; &#xA;   &lt;th&gt;Compression&lt;/th&gt; &#xA;   &lt;th&gt;Decompress.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 -1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.887&lt;/td&gt; &#xA;   &lt;td&gt;530 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;1700 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; 1.2.11 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.743&lt;/td&gt; &#xA;   &lt;td&gt;95 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;400 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;brotli 1.0.9 -0&lt;/td&gt; &#xA;   &lt;td&gt;2.702&lt;/td&gt; &#xA;   &lt;td&gt;395 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;450 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 --fast=1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.437&lt;/td&gt; &#xA;   &lt;td&gt;600 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2150 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 --fast=3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.239&lt;/td&gt; &#xA;   &lt;td&gt;670 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2250 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quicklz 1.5.0 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.238&lt;/td&gt; &#xA;   &lt;td&gt;540 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;760 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 --fast=4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.148&lt;/td&gt; &#xA;   &lt;td&gt;710 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2300 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lzo1x 2.10 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.106&lt;/td&gt; &#xA;   &lt;td&gt;660 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;845 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.lz4.org/&#34;&gt;lz4&lt;/a&gt; 1.9.3&lt;/td&gt; &#xA;   &lt;td&gt;2.101&lt;/td&gt; &#xA;   &lt;td&gt;740 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;4500 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lzf 3.6 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.077&lt;/td&gt; &#xA;   &lt;td&gt;410 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;830 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snappy 1.1.9&lt;/td&gt; &#xA;   &lt;td&gt;2.073&lt;/td&gt; &#xA;   &lt;td&gt;550 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;1750 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The negative compression levels, specified with &lt;code&gt;--fast=#&lt;/code&gt;, offer faster compression and decompression speed at the cost of compression ratio (compared to level 1).&lt;/p&gt; &#xA;&lt;p&gt;Zstd can also offer stronger compression ratios at the cost of compression speed. Speed vs Compression trade-off is configurable by small increments. Decompression speed is preserved and remains roughly the same at all settings, a property shared by most LZ compression algorithms, such as &lt;a href=&#34;http://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; or lzma.&lt;/p&gt; &#xA;&lt;p&gt;The following tests were run on a server running Linux Debian (&lt;code&gt;Linux version 4.14.0-3-amd64&lt;/code&gt;) with a Core i7-6700K CPU @ 4.0GHz, using &lt;a href=&#34;https://github.com/inikep/lzbench&#34;&gt;lzbench&lt;/a&gt;, an open-source in-memory benchmark by @inikep compiled with &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt; 7.3.0, on the &lt;a href=&#34;http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia&#34;&gt;Silesia compression corpus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compression Speed vs Ratio&lt;/th&gt; &#xA;   &lt;th&gt;Decompression Speed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/CSpeed2.png&#34; alt=&#34;Compression Speed vs Ratio&#34; title=&#34;Compression Speed vs Ratio&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/DSpeed3.png&#34; alt=&#34;Decompression Speed&#34; title=&#34;Decompression Speed&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph. For a larger picture including slow modes, &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/DCspeed5.png&#34;&gt;click on this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The case for Small Data compression&lt;/h2&gt; &#xA;&lt;p&gt;Previous charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives.&lt;/p&gt; &#xA;&lt;p&gt;The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no &#34;past&#34; to build upon.&lt;/p&gt; &#xA;&lt;p&gt;To solve this situation, Zstd offers a &lt;strong&gt;training mode&lt;/strong&gt;, which can be used to tune the algorithm for a selected type of data. Training Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called &#34;dictionary&#34;, which must be loaded before compression and decompression. Using this dictionary, the compression ratio achievable on small data improves dramatically.&lt;/p&gt; &#xA;&lt;p&gt;The following example uses the &lt;code&gt;github-users&lt;/code&gt; &lt;a href=&#34;https://github.com/facebook/zstd/releases/tag/v1.1.3&#34;&gt;sample set&lt;/a&gt;, created from &lt;a href=&#34;https://developer.github.com/v3/users/#get-all-users&#34;&gt;github public API&lt;/a&gt;. It consists of roughly 10K records weighing about 1KB each.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compression Ratio&lt;/th&gt; &#xA;   &lt;th&gt;Compression Speed&lt;/th&gt; &#xA;   &lt;th&gt;Decompression Speed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/dict-cr.png&#34; alt=&#34;Compression Ratio&#34; title=&#34;Compression Ratio&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/dict-cs.png&#34; alt=&#34;Compression Speed&#34; title=&#34;Compression Speed&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/dict-ds.png&#34; alt=&#34;Decompression Speed&#34; title=&#34;Decompression Speed&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These compression gains are achieved while simultaneously providing &lt;em&gt;faster&lt;/em&gt; compression and decompression speeds.&lt;/p&gt; &#xA;&lt;p&gt;Training works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no &lt;em&gt;universal dictionary&lt;/em&gt;). Hence, deploying one dictionary per type of data will provide the greatest benefits. Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previously decoded content to better compress the rest of the file.&lt;/p&gt; &#xA;&lt;h3&gt;Dictionary compression How To:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the dictionary&lt;/p&gt; &lt;p&gt;&lt;code&gt;zstd --train FullPathToTrainingSet/* -o dictionaryName&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compress with dictionary&lt;/p&gt; &lt;p&gt;&lt;code&gt;zstd -D dictionaryName FILE&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Decompress with dictionary&lt;/p&gt; &lt;p&gt;&lt;code&gt;zstd -D dictionaryName --decompress FILE.zst&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; is the officially maintained build system of this project. All other build systems are &#34;compatible&#34; and 3rd-party maintained, they may feature small differences in advanced options. When your system allows it, prefer using &lt;code&gt;make&lt;/code&gt; to build &lt;code&gt;zstd&lt;/code&gt; and &lt;code&gt;libzstd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;p&gt;If your system is compatible with standard &lt;code&gt;make&lt;/code&gt; (or &lt;code&gt;gmake&lt;/code&gt;), invoking &lt;code&gt;make&lt;/code&gt; in root directory will generate &lt;code&gt;zstd&lt;/code&gt; cli in root directory. It will also create &lt;code&gt;libzstd&lt;/code&gt; into &lt;code&gt;lib/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other available options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make install&lt;/code&gt; : create and install zstd cli, library and man pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make check&lt;/code&gt; : create and run &lt;code&gt;zstd&lt;/code&gt;, test its behavior on local platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; follows the &lt;a href=&#34;https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html&#34;&gt;GNU Standard Makefile conventions&lt;/a&gt;, allowing staged install, standard flags, directory variables and command variables.&lt;/p&gt; &#xA;&lt;h3&gt;cmake&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;cmake&lt;/code&gt; project generator is provided within &lt;code&gt;build/cmake&lt;/code&gt;. It can generate Makefiles or other build scripts to create &lt;code&gt;zstd&lt;/code&gt; binary, and &lt;code&gt;libzstd&lt;/code&gt; dynamic and static libraries.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; is set to &lt;code&gt;Release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;p&gt;A Meson project is provided within &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/build/meson&#34;&gt;&lt;code&gt;build/meson&lt;/code&gt;&lt;/a&gt;. Follow build instructions in that directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also take a look at &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; file for an example about how Meson is used to build this project.&lt;/p&gt; &#xA;&lt;p&gt;Note that default build type is &lt;strong&gt;release&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VCPKG&lt;/h3&gt; &#xA;&lt;p&gt;You can build and install zstd &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install zstd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The zstd port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Going into &lt;code&gt;build&lt;/code&gt; directory, you will find additional possibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Projects for Visual Studio 2005, 2008 and 2010. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VS2010 project is compatible with VS2012, VS2013, VS2015 and VS2017.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automated build scripts for Visual compiler by &lt;a href=&#34;https://github.com/KrzysFR&#34;&gt;@KrzysFR&lt;/a&gt;, in &lt;code&gt;build/VS_scripts&lt;/code&gt;, which will build &lt;code&gt;zstd&lt;/code&gt; cli and &lt;code&gt;libzstd&lt;/code&gt; library without any need to open Visual Studio solution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buck&lt;/h3&gt; &#xA;&lt;p&gt;You can build the zstd binary via buck by executing: &lt;code&gt;buck build programs:zstd&lt;/code&gt; from the root of the repo. The output binary will be in &lt;code&gt;buck-out/gen/programs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;You can run quick local smoke tests by executing the &lt;code&gt;playTest.sh&lt;/code&gt; script from the &lt;code&gt;src/tests&lt;/code&gt; directory. Two env variables &lt;code&gt;$ZSTD_BIN&lt;/code&gt; and &lt;code&gt;$DATAGEN_BIN&lt;/code&gt; are needed for the test script to locate the zstd and datagen binary. For information on CI testing, please refer to TESTING.md&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Zstandard is currently deployed within Facebook. It is used continuously to compress large amounts of data in multiple formats and use cases. Zstandard is considered safe for production environments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Zstandard is dual-licensed under &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/LICENSE&#34;&gt;BSD&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/COPYING&#34;&gt;GPLv2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;dev&lt;/code&gt; branch is the one where all contributions are merged before reaching &lt;code&gt;release&lt;/code&gt;. If you plan to propose a patch, please commit into the &lt;code&gt;dev&lt;/code&gt; branch, or its own feature branch. Direct commit to &lt;code&gt;release&lt;/code&gt; are not permitted. For more information, please read &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zephyrproject-rtos/zephyr</title>
    <updated>2022-08-28T01:43:25Z</updated>
    <id>tag:github.com,2022-08-28:/zephyrproject-rtos/zephyr</id>
    <link href="https://github.com/zephyrproject-rtos/zephyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Primary Git Repository for the Zephyr Project. Zephyr is a new generation, scalable, optimized, secure RTOS for multiple hardware architectures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.zephyrproject.org&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/doc/_static/images/logo-readme.svg?sanitize=true&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/74&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/74/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml?query=branch%3Amain&#34;&gt; &lt;img src=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml/badge.svg?event=push&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr Project is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr kernel supports multiple architectures, including ARM (Cortex-A, Cortex-R, Cortex-M), Intel x86, ARC, Nios II, Tensilica Xtensa, and RISC-V, SPARC, MIPS, and a large number of &lt;code&gt;supported boards&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. below included in doc/introduction/introduction.rst&lt;/p&gt; &#xA;&lt;p&gt;Getting Started&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Welcome to Zephyr! See the &lt;code&gt;Introduction to Zephyr&lt;/code&gt;_ for a high-level overview, and the documentation&#39;s &lt;code&gt;Getting Started Guide&lt;/code&gt;_ to start developing.&lt;/p&gt; &#xA;&lt;p&gt;.. start_include_here&lt;/p&gt; &#xA;&lt;p&gt;Community Support&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Community support is provided via mailing lists and Discord; see the Resources below for details.&lt;/p&gt; &#xA;&lt;p&gt;.. _project-resources:&lt;/p&gt; &#xA;&lt;p&gt;Resources&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of resources to help you find your way around:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Help&lt;/strong&gt;: &lt;code&gt;Asking for Help Tips&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; (&lt;code&gt;Getting Started Guide&lt;/code&gt;_)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr&#34;&gt;https://github.com/zephyrproject-rtos/zephyr&lt;/a&gt; is the main repository; &lt;a href=&#34;https://elixir.bootlin.com/zephyr/latest/source&#34;&gt;https://elixir.bootlin.com/zephyr/latest/source&lt;/a&gt; contains a searchable index&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Releases&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/releases&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Samples and example code&lt;/strong&gt;: see &lt;code&gt;Sample and Demo Code Examples&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mailing Lists&lt;/strong&gt;: &lt;a href=&#34;mailto:users@lists.zephyrproject.org&#34;&gt;users@lists.zephyrproject.org&lt;/a&gt; and &lt;a href=&#34;mailto:devel@lists.zephyrproject.org&#34;&gt;devel@lists.zephyrproject.org&lt;/a&gt; are the main user and developer mailing lists, respectively. You can join the developer&#39;s list and search its archives at &lt;code&gt;Zephyr Development mailing list&lt;/code&gt;&lt;em&gt;. The other &lt;code&gt;Zephyr mailing list subgroups&lt;/code&gt;&lt;/em&gt; have their own archives and sign-up pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nightly CI Build Status&lt;/strong&gt;: &lt;a href=&#34;https://lists.zephyrproject.org/g/builds&#34;&gt;https://lists.zephyrproject.org/g/builds&lt;/a&gt; The &lt;a href=&#34;mailto:builds@lists.zephyrproject.org&#34;&gt;builds@lists.zephyrproject.org&lt;/a&gt; mailing list archives the CI nightly build results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat&lt;/strong&gt;: Real-time chat happens in Zephyr&#39;s Discord Server. Use this &lt;code&gt;Discord Invite&lt;/code&gt;_ to register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: see the &lt;code&gt;Contribution Guide&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;code&gt;Zephyr GitHub wiki&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/issues&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security Issues&lt;/strong&gt;: Email &lt;a href=&#34;mailto:vulnerabilities@zephyrproject.org&#34;&gt;vulnerabilities@zephyrproject.org&lt;/a&gt; to report security issues; also see our &lt;code&gt;Security&lt;/code&gt;_ documentation. Security issues are tracked separately at &lt;a href=&#34;https://zephyrprojectsec.atlassian.net&#34;&gt;https://zephyrprojectsec.atlassian.net&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zephyr Project Website&lt;/strong&gt;: &lt;a href=&#34;https://zephyrproject.org&#34;&gt;https://zephyrproject.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Discord Invite: &lt;a href=&#34;https://chat.zephyrproject.org&#34;&gt;https://chat.zephyrproject.org&lt;/a&gt; .. _supported boards: &lt;a href=&#34;http://docs.zephyrproject.org/latest/boards/index.html&#34;&gt;http://docs.zephyrproject.org/latest/boards/index.html&lt;/a&gt; .. _Zephyr Documentation: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; .. _Introduction to Zephyr: &lt;a href=&#34;http://docs.zephyrproject.org/latest/introduction/index.html&#34;&gt;http://docs.zephyrproject.org/latest/introduction/index.html&lt;/a&gt; .. _Getting Started Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/develop/getting_started/index.html&#34;&gt;http://docs.zephyrproject.org/latest/develop/getting_started/index.html&lt;/a&gt; .. _Contribution Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/contribute/index.html&#34;&gt;http://docs.zephyrproject.org/latest/contribute/index.html&lt;/a&gt; .. _Zephyr GitHub wiki: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/wiki&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/wiki&lt;/a&gt; .. _Zephyr Development mailing list: &lt;a href=&#34;https://lists.zephyrproject.org/g/devel&#34;&gt;https://lists.zephyrproject.org/g/devel&lt;/a&gt; .. _Zephyr mailing list subgroups: &lt;a href=&#34;https://lists.zephyrproject.org/g/main/subgroups&#34;&gt;https://lists.zephyrproject.org/g/main/subgroups&lt;/a&gt; .. _Sample and Demo Code Examples: &lt;a href=&#34;http://docs.zephyrproject.org/latest/samples/index.html&#34;&gt;http://docs.zephyrproject.org/latest/samples/index.html&lt;/a&gt; .. _Security: &lt;a href=&#34;http://docs.zephyrproject.org/latest/security/index.html&#34;&gt;http://docs.zephyrproject.org/latest/security/index.html&lt;/a&gt; .. _Asking for Help Tips: &lt;a href=&#34;https://docs.zephyrproject.org/latest/develop/getting_started/index.html#asking-for-help&#34;&gt;https://docs.zephyrproject.org/latest/develop/getting_started/index.html#asking-for-help&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>taosdata/TDengine</title>
    <updated>2022-08-28T01:43:25Z</updated>
    <id>tag:github.com,2022-08-28:/taosdata/TDengine</id>
    <link href="https://github.com/taosdata/TDengine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TDengine is an open source, high-performance, cloud native time-series database optimized for Internet of Things (IoT), Connected Cars, Industrial IoT and DevOps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tdengine.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/taosdata/TDengine/main/docs/assets/tdengine.svg?sanitize=true&#34; alt=&#34;TDengine&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.drone.io/taosdata/TDengine&#34;&gt;&lt;img src=&#34;https://cloud.drone.io/api/badges/taosdata/TDengine/status.svg?ref=refs/heads/master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/sangshuduo/tdengine-2n8ge/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/kf3pwh2or5afsgl9/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/taosdata/TDengine?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/taosdata/TDengine/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4201&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4201/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/main/README-CN.md&#34;&gt;简体中文&lt;/a&gt; | We are hiring, check &lt;a href=&#34;https://tdengine.com/careers&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is TDengine？&lt;/h1&gt; &#xA;&lt;p&gt;TDengine is an open source, high-performance, cloud native &lt;a href=&#34;https://tdengine.com/tsdb/what-is-a-time-series-database/&#34;&gt;time-series database&lt;/a&gt; optimized for Internet of Things (IoT), Connected Cars, and Industrial IoT. It enables efficient, real-time data ingestion, processing, and monitoring of TB and even PB scale data per day, generated by billions of sensors and data collectors. TDengine differentiates itself from other time-seires databases with the following advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/high-performance-time-series-database/&#34;&gt;High-Performance&lt;/a&gt;&lt;/strong&gt;: TDengine is the only time-series database to solve the high cardinality issue to support billions of data collection points while out performing other time-series databases for data ingestion, querying and data compression.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/simplified-time-series-data-solution/&#34;&gt;Simplified Solution&lt;/a&gt;&lt;/strong&gt;: Through built-in caching, stream processing and data subscription features, TDengine provides a simplified solution for time-series data processing. It reduces system design complexity and operation costs significantly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/cloud-native-time-series-database/&#34;&gt;Cloud Native&lt;/a&gt;&lt;/strong&gt;: Through native distributed design, sharding and partitioning, separation of compute and storage, RAFT, support for kubernetes deployment and full observability, TDengine is a cloud native Time-Series Database and can be deployed on public, private or hybrid clouds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.tdengine.com/get-started/docker/&#34;&gt;Ease of Use&lt;/a&gt;&lt;/strong&gt;: For administrators, TDengine significantly reduces the effort to deploy and maintain. For developers, it provides a simple interface, simplified solution and seamless integrations for third party tools. For data users, it gives easy data access.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/time-series-data-analytics-made-easy/&#34;&gt;Easy Data Analytics&lt;/a&gt;&lt;/strong&gt;: Through super tables, storage and compute separation, data partitioning by time interval, pre-computation and other means, TDengine makes it easy to explore, format, and get access to data in a highly efficient way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/open-source-time-series-database/&#34;&gt;Open Source&lt;/a&gt;&lt;/strong&gt;: TDengine’s core modules, including cluster feature, are all available under open source licenses. It has gathered 18.8k stars on GitHub. There is an active developer community, and over 139k running instances worldwide.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For user manual, system design and architecture, please refer to &lt;a href=&#34;https://docs.tdengine.com&#34;&gt;TDengine Documentation&lt;/a&gt; (&lt;a href=&#34;https://docs.taosdata.com&#34;&gt;TDengine 文档&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;At the moment, TDengine server supports running on Linux and Windows systems. Any application can also choose the RESTful interface provided by taosAdapter to connect the taosd service . TDengine supports X64/ARM64 CPU, and it will support MIPS64, Alpha64, ARM32, RISC-V and other CPU architectures in the future.&lt;/p&gt; &#xA;&lt;p&gt;You can choose to install through source code, &lt;a href=&#34;https://docs.tdengine.com/get-started/docker/&#34;&gt;container&lt;/a&gt;, &lt;a href=&#34;https://docs.tdengine.com/get-started/package/&#34;&gt;installation package&lt;/a&gt; or &lt;a href=&#34;https://docs.tdengine.com/deployment/k8s/&#34;&gt;Kubernetes&lt;/a&gt;. This quick guide only applies to installing from source.&lt;/p&gt; &#xA;&lt;p&gt;TDengine provide a few useful tools such as taosBenchmark (was named taosdemo) and taosdump. They were part of TDengine. By default, TDengine compiling does not include taosTools. You can use &lt;code&gt;cmake .. -DBUILD_TOOLS=true&lt;/code&gt; to make them be compiled with TDengine.&lt;/p&gt; &#xA;&lt;p&gt;To build TDengine, use &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.0.2 or higher versions in the project directory.&lt;/p&gt; &#xA;&lt;h2&gt;Install build tools&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 18.04 and above or Debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y gcc cmake build-essential git libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools&lt;/h4&gt; &#xA;&lt;p&gt;To build the &lt;a href=&#34;https://github.com/taosdata/taos-tools&#34;&gt;taosTools&lt;/a&gt; on Ubuntu/Debian, the following packages need to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential libjansson-dev libsnappy-dev liblzma-dev libz-dev pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 7.9&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install epel-release&#xA;sudo yum update&#xA;sudo yum install -y gcc gcc-c++ make cmake3 git openssl-devel&#xA;sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 8 &amp;amp; Fedora&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y gcc gcc-c++ make cmake epel-release git openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools on CentOS&lt;/h4&gt; &#xA;&lt;h4&gt;CentOS 7.9&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install -y zlib-devel xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libstdc++-static openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CentOS 8/Rocky Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install -y epel-release&#xA;sudo yum install -y dnf-plugins-core&#xA;sudo yum config-manager --set-enabled powertools&#xA;sudo yum install -y zlib-devel xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libstdc++-static openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Since snappy lacks pkg-config support (refer to &lt;a href=&#34;https://github.com/google/snappy/pull/86&#34;&gt;link&lt;/a&gt;), it leads a cmake prompt libsnappy not found. But snappy still works well.&lt;/p&gt; &#xA;&lt;p&gt;If the PowerTools installation fails, you can try to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum config-manager --set-enabled powertools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup golang environment&lt;/h3&gt; &#xA;&lt;p&gt;TDengine includes a few components like taosAdapter developed by Go language. Please refer to golang.org official documentation for golang environment setup.&lt;/p&gt; &#xA;&lt;p&gt;Please use version 1.14+. For the user in China, we recommend using a proxy to accelerate package downloading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on&#xA;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default will not build taosAdapter, but you can use the following command to build taosAdapter as the service for RESTful interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DBUILD_HTTP=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup rust environment&lt;/h3&gt; &#xA;&lt;p&gt;TDengine includes a few components developed by Rust language. Please refer to rust-lang.org official documentation for rust environment setup.&lt;/p&gt; &#xA;&lt;h2&gt;Get the source codes&lt;/h2&gt; &#xA;&lt;p&gt;First of all, you may clone the source codes from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/taosdata/TDengine.git&#xA;cd TDengine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify the file ~/.gitconfig to use ssh protocol instead of https for better download speed. You will need to upload ssh public key to GitHub first. Please refer to GitHub official documentation for detail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[url &#34;git@github.com:&#34;]&#xA;    insteadOf = https://github.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special Note&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taosdata/taos-connector-jdbc&#34;&gt;JDBC Connector&lt;/a&gt;， &lt;a href=&#34;https://github.com/taosdata/driver-go&#34;&gt;Go Connector&lt;/a&gt;，&lt;a href=&#34;https://github.com/taosdata/taos-connector-python&#34;&gt;Python Connector&lt;/a&gt;，&lt;a href=&#34;https://github.com/taosdata/taos-connector-node&#34;&gt;Node.js Connector&lt;/a&gt;，&lt;a href=&#34;https://github.com/taosdata/taos-connector-dotnet&#34;&gt;C# Connector&lt;/a&gt; ，&lt;a href=&#34;https://github.com/taosdata/taos-connector-rust&#34;&gt;Rust Connector&lt;/a&gt; and &lt;a href=&#34;https://github.com/taosdata/grafanaplugin&#34;&gt;Grafana plugin&lt;/a&gt; has been moved to standalone repository.&lt;/p&gt; &#xA;&lt;h2&gt;Build TDengine&lt;/h2&gt; &#xA;&lt;h3&gt;On Linux platform&lt;/h3&gt; &#xA;&lt;p&gt;You can run the bash script &lt;code&gt;build.sh&lt;/code&gt; to build both TDengine and taosTools including taosBenchmark and taosdump as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It equals to execute following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir debug&#xA;cd debug&#xA;cmake .. -DBUILD_TOOLS=true&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Jemalloc as memory allocator instead of glibc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install autoconf&#xA;cmake .. -DJEMALLOC_ENABLED=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TDengine build script can detect the host machine&#39;s architecture on X86-64, X86, arm64 platform. You can also specify CPUTYPE option like aarch64 too if the detection result is not correct:&lt;/p&gt; &#xA;&lt;p&gt;aarch64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=aarch64 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows platform&lt;/h3&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2013, please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;amd64&#34; for 64 bits Windows or specify &#34;x86&#34; for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat&#34; &amp;lt; amd64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2019 or 2017:&lt;/p&gt; &#xA;&lt;p&gt;please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;x64&#34; for 64 bits Windows or specify &#34;x86&#34; for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;c:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat&#34; &amp;lt; x64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can simply open a command window by clicking Windows Start -&amp;gt; &#34;Visual Studio &amp;lt; 2019 | 2017 &amp;gt;&#34; folder -&amp;gt; &#34;x64 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; or &#34;x86 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; depends what architecture your Windows is, then execute commands as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ### On macOS platform&#xA;&#xA;Please install XCode command line tools and cmake. Verified with XCode 11.4+ on Catalina and Big Sur.&#xA;&#xA;```shell&#xA;mkdir debug &amp;&amp; cd debug&#xA;cmake .. &amp;&amp; cmake --build .&#xA;``` --&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;h2&gt;On Linux platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can find more information about directories installed on the system in the &lt;a href=&#34;https://docs.taosdata.com/reference/directory/&#34;&gt;directory and files&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Installing from source code will also configure service management for TDengine.Users can also choose to &lt;a href=&#34;https://docs.taosdata.com/get-started/package/&#34;&gt;install from packages&lt;/a&gt; for it.&lt;/p&gt; &#xA;&lt;p&gt;To start the service after installation, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl start taosd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then users can use the TDengine CLI to connect the TDengine server. In a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TDengine CLI connects the server successfully, welcome messages and version info are printed. Otherwise, an error message is shown.&lt;/p&gt; &#xA;&lt;h2&gt;On Windows platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;nmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &#xA;## On macOS platform&#xA;&#xA;After building successfully, TDengine can be installed by:&#xA;&#xA;```bash&#xA;sudo make install&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Quick Run&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to run TDengine as a service, you can run it in current shell. For example, to quickly start a TDengine server after building, run the command below in terminal: (We take Linux as an example, command on Windows will be &lt;code&gt;taosd.exe&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taosd -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, use the TDengine CLI to connect the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taos -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;option &#34;-c test/cfg&#34; specifies the system configuration file directory.&lt;/p&gt; &#xA;&lt;h1&gt;Try TDengine&lt;/h1&gt; &#xA;&lt;p&gt;It is easy to run SQL commands from TDengine CLI which is the same as other SQL databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE demo;&#xA;USE demo;&#xA;CREATE TABLE t (ts TIMESTAMP, speed INT);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 00:00:00&#39;, 10);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 01:00:00&#39;, 20);&#xA;SELECT * FROM t;&#xA;          ts          |   speed   |&#xA;===================================&#xA; 19-07-15 00:00:00.000|         10|&#xA; 19-07-15 01:00:00.000|         20|&#xA;Query OK, 2 row(s) in set (0.001700s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Developing with TDengine&lt;/h1&gt; &#xA;&lt;h2&gt;Official Connectors&lt;/h2&gt; &#xA;&lt;p&gt;TDengine provides abundant developing tools for users to develop on TDengine. Follow the links below to find your desired connectors and relevant documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/java/&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/cpp/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/python/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/go/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/node/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/csharp/&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/rest-api/&#34;&gt;RESTful API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute to TDengine&lt;/h1&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; to contribute to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Join TDengine WeChat Group&lt;/h1&gt; &#xA;&lt;p&gt;Add WeChat “tdengine” to join the group，you can communicate with other users.&lt;/p&gt;</summary>
  </entry>
</feed>