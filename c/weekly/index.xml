<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-27T01:41:09Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>axboe/liburing</title>
    <updated>2025-07-27T01:41:09Z</updated>
    <id>tag:github.com,2025-07-27:/axboe/liburing</id>
    <link href="https://github.com/axboe/liburing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library providing helpers for the Linux kernel io_uring support&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;liburing&lt;/h2&gt; &#xA;&lt;p&gt;This is the io_uring library, liburing. liburing provides helpers to setup and teardown io_uring instances, and also a simplified interface for applications that don&#39;t need (or want) to deal with the full kernel side implementation.&lt;/p&gt; &#xA;&lt;p&gt;For more info on io_uring, please see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kernel.dk/io_uring.pdf&#34;&gt;https://kernel.dk/io_uring.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subscribe to &lt;a href=&#34;mailto:io-uring@vger.kernel.org&#34;&gt;io-uring@vger.kernel.org&lt;/a&gt; for io_uring related discussions and development for both kernel and userspace. The list is archived here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/io-uring/&#34;&gt;https://lore.kernel.org/io-uring/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;kernel version dependency&lt;/h2&gt; &#xA;&lt;p&gt;liburing itself is not tied to any specific kernel release, and hence it&#39;s possible to use the newest liburing release even on older kernels (and vice versa). Newer features may only be available on more recent kernels, obviously.&lt;/p&gt; &#xA;&lt;h2&gt;ulimit settings&lt;/h2&gt; &#xA;&lt;p&gt;io_uring accounts memory it needs under the rlimit memlocked option, which can be quite low on some setups (64K). The default is usually enough for most use cases, but bigger rings or things like registered buffers deplete it quickly. root isn&#39;t under this restriction, but regular users are. Going into detail on how to bump the limit on various systems is beyond the scope of this little blurb, but check /etc/security/limits.conf for user specific settings, or /etc/systemd/user.conf and /etc/systemd/system.conf for systemd setups. This affects 5.11 and earlier, new kernels are less dependent on RLIMIT_MEMLOCK as it is only used for registering buffers.&lt;/p&gt; &#xA;&lt;h2&gt;Regressions tests&lt;/h2&gt; &#xA;&lt;p&gt;The bulk of liburing is actually regression/unit tests for both liburing and the kernel io_uring support. Please note that this suite isn&#39;t expected to pass on older kernels, and may even crash or hang older kernels!&lt;/p&gt; &#xA;&lt;h2&gt;Building liburing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;#&#xA;# Prepare build config (optional).&#xA;#&#xA;#  --cc  specifies the C   compiler.&#xA;#  --cxx specifies the C++ compiler.&#xA;#&#xA;./configure --cc=gcc --cxx=g++;&#xA;&#xA;#&#xA;# Build liburing.&#xA;#&#xA;make -j$(nproc);&#xA;&#xA;#&#xA;# Build liburing.pc&#xA;#&#xA;make liburing.pc&#xA;&#xA;#&#xA;# Install liburing (headers, shared/static libs, and manpage).&#xA;#&#xA;sudo make install;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &#39;./configure --help&#39; for more information about build config options.&lt;/p&gt; &#xA;&lt;h2&gt;FFI support&lt;/h2&gt; &#xA;&lt;p&gt;By default, the build results in 4 lib files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2 shared libs:&#xA;&#xA;    liburing.so&#xA;    liburing-ffi.so&#xA;&#xA;2 static libs:&#xA;&#xA;    liburing.a&#xA;    liburing-ffi.a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Languages and applications that can&#39;t use &#39;static inline&#39; functions in liburing.h should use the FFI variants.&lt;/p&gt; &#xA;&lt;p&gt;liburing&#39;s main public interface lives in liburing.h as &#39;static inline&#39; functions. Users wishing to consume liburing purely as a binary dependency should link against liburing-ffi. It contains definitions for every &#39;static inline&#39; function.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All software contained within this repo is dual licensed LGPL and MIT, see COPYING and LICENSE, except for a header coming from the kernel which is dual licensed GPL with a Linux-syscall-note exception and MIT, see COPYING.GPL and &lt;a href=&#34;https://spdx.org/licenses/Linux-syscall-note.html&#34;&gt;https://spdx.org/licenses/Linux-syscall-note.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Jens Axboe 2022-05-19&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>u-boot/u-boot</title>
    <updated>2025-07-27T01:41:09Z</updated>
    <id>tag:github.com,2025-07-27:/u-boot/u-boot</id>
    <link href="https://github.com/u-boot/u-boot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;Das U-Boot&#34; Source Tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SPDX-License-Identifier: GPL-2.0+&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;(C) Copyright 2000 - 2013&lt;/h1&gt; &#xA;&lt;h1&gt;Wolfgang Denk, DENX Software Engineering, &lt;a href=&#34;mailto:wd@denx.de&#34;&gt;wd@denx.de&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;h1&gt;Summary:&lt;/h1&gt; &#xA;&lt;p&gt;This directory contains the source code for U-Boot, a boot loader for Embedded boards based on PowerPC, ARM, MIPS and several other processors, which can be installed in a boot ROM and used to initialize and test the hardware or to download and run application code.&lt;/p&gt; &#xA;&lt;p&gt;The development of U-Boot is closely related to Linux: some parts of the source code originate in the Linux source tree, we have some header files in common, and special provision has been made to support booting of Linux images.&lt;/p&gt; &#xA;&lt;p&gt;Some attention has been paid to make this software easily configurable and extendable. For instance, all monitor commands are implemented with the same call interface, so that it&#39;s very easy to add new commands. Also, instead of permanently adding rarely used code (for instance hardware test utilities) to the monitor, you can load and run it dynamically.&lt;/p&gt; &#xA;&lt;h1&gt;Status:&lt;/h1&gt; &#xA;&lt;p&gt;In general, all boards for which a default configuration file exists in the configs/ directory have been tested to some extent and can be considered &#34;working&#34;. In fact, many of them are used in production systems.&lt;/p&gt; &#xA;&lt;p&gt;In case of problems you can use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; scripts/get_maintainer.pl &amp;lt;path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to identify the people or companies responsible for various boards and subsystems. Or have a look at the git log.&lt;/p&gt; &#xA;&lt;h1&gt;Where to get help:&lt;/h1&gt; &#xA;&lt;p&gt;In case you have questions about, problems with or contributions for U-Boot, you should send a message to the U-Boot mailing list at &lt;a href=&#34;mailto:u-boot@lists.denx.de&#34;&gt;u-boot@lists.denx.de&lt;/a&gt;. There is also an archive of previous traffic on the mailing list - please search the archive before asking FAQ&#39;s. Please see &lt;a href=&#34;https://lists.denx.de/pipermail/u-boot&#34;&gt;https://lists.denx.de/pipermail/u-boot&lt;/a&gt; and &lt;a href=&#34;https://marc.info/?l=u-boot&#34;&gt;https://marc.info/?l=u-boot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Where to get source code:&lt;/h1&gt; &#xA;&lt;p&gt;The U-Boot source code is maintained in the Git repository at &lt;a href=&#34;https://source.denx.de/u-boot/u-boot.git&#34;&gt;https://source.denx.de/u-boot/u-boot.git&lt;/a&gt; ; you can browse it online at &lt;a href=&#34;https://source.denx.de/u-boot/u-boot&#34;&gt;https://source.denx.de/u-boot/u-boot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &#34;Tags&#34; links on this page allow you to download tarballs of any version you might be interested in. Official releases are also available from the DENX file server through HTTPS or FTP. &lt;a href=&#34;https://ftp.denx.de/pub/u-boot/&#34;&gt;https://ftp.denx.de/pub/u-boot/&lt;/a&gt; &lt;a href=&#34;ftp://ftp.denx.de/pub/u-boot/&#34;&gt;ftp://ftp.denx.de/pub/u-boot/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Where we come from:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;start from 8xxrom sources&lt;/li&gt; &#xA; &lt;li&gt;create PPCBoot project (&lt;a href=&#34;https://sourceforge.net/projects/ppcboot&#34;&gt;https://sourceforge.net/projects/ppcboot&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;clean up code&lt;/li&gt; &#xA; &lt;li&gt;make it easier to add custom boards&lt;/li&gt; &#xA; &lt;li&gt;make it possible to add other [PowerPC] CPUs&lt;/li&gt; &#xA; &lt;li&gt;extend functions, especially: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Provide extended interface to Linux boot loader&lt;/li&gt; &#xA;   &lt;li&gt;S-Record download&lt;/li&gt; &#xA;   &lt;li&gt;network boot&lt;/li&gt; &#xA;   &lt;li&gt;ATA disk / SCSI ... boot&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;create ARMBoot project (&lt;a href=&#34;https://sourceforge.net/projects/armboot&#34;&gt;https://sourceforge.net/projects/armboot&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;add other CPU families (starting with ARM)&lt;/li&gt; &#xA; &lt;li&gt;create U-Boot project (&lt;a href=&#34;https://sourceforge.net/projects/u-boot&#34;&gt;https://sourceforge.net/projects/u-boot&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;current project page: see &lt;a href=&#34;https://www.denx.de/wiki/U-Boot&#34;&gt;https://www.denx.de/wiki/U-Boot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Names and Spelling:&lt;/h1&gt; &#xA;&lt;p&gt;The &#34;official&#34; name of this project is &#34;Das U-Boot&#34;. The spelling &#34;U-Boot&#34; shall be used in all written text (documentation, comments in source files etc.). Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This is the README file for the U-Boot project.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;File names etc. shall be based on the string &#34;u-boot&#34;. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;include/asm-ppc/u-boot.h&#xA;&#xA;#include &amp;lt;asm/u-boot.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variable names, preprocessor constants etc. shall be either based on the string &#34;u_boot&#34; or on &#34;U_BOOT&#34;. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;U_BOOT_VERSION&#x9;&#x9;u_boot_logo&#xA;IH_OS_U_BOOT&#x9;&#x9;u_boot_hush_start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Software Configuration:&lt;/h1&gt; &#xA;&lt;h2&gt;Selection of Processor Architecture and Board Type:&lt;/h2&gt; &#xA;&lt;p&gt;For all supported boards there are ready-to-use default configurations available; just type &#34;make &amp;lt;board_name&amp;gt;_defconfig&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Example: For a TQM823L module type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd u-boot&#xA;make TQM823L_defconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you&#39;re looking for the default configuration file for a board you&#39;re sure used to be there but is now missing, check the file doc/README.scrapyard for a list of no longer supported boards.&lt;/p&gt; &#xA;&lt;h2&gt;Sandbox Environment:&lt;/h2&gt; &#xA;&lt;p&gt;U-Boot can be built natively to run on a Linux host using the &#39;sandbox&#39; board. This allows feature development which is not board- or architecture- specific to be undertaken on a native platform. The sandbox is also used to run some of U-Boot&#39;s tests.&lt;/p&gt; &#xA;&lt;p&gt;See doc/arch/sandbox/sandbox.rst for more details.&lt;/p&gt; &#xA;&lt;p&gt;The following options need to be configured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CPU Type: Define exactly one, e.g. CONFIG_MPC85XX.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Board Type: Define exactly one, e.g. CONFIG_MPC8540ADS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;85xx CPU Options: CONFIG_SYS_PPC64&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Specifies that the core is a 64-bit PowerPC implementation (implements&#xA;  the &#34;64&#34; category of the Power ISA). This is necessary for ePAPR&#xA;  compliance, among other possible reasons.&#xA;&#xA;  CONFIG_SYS_FSL_ERRATUM_A004510&#xA;&#xA;  Enables a workaround for erratum A004510.  If set,&#xA;  then CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV and&#xA;  CFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY must be set.&#xA;&#xA;  CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV&#xA;  CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV2 (optional)&#xA;&#xA;  Defines one or two SoC revisions (low 8 bits of SVR)&#xA;  for which the A004510 workaround should be applied.&#xA;&#xA;  The rest of SVR is either not relevant to the decision&#xA;  of whether the erratum is present (e.g. p2040 versus&#xA;  p2041) or is implied by the build target, which controls&#xA;  whether CONFIG_SYS_FSL_ERRATUM_A004510 is set.&#xA;&#xA;  See Freescale App Note 4493 for more information about&#xA;  this erratum.&#xA;&#xA;  CFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY&#xA;&#xA;  This is the value to write into CCSR offset 0x18600&#xA;  according to the A004510 workaround.&#xA;&#xA;  CONFIG_SYS_FSL_SINGLE_SOURCE_CLK&#xA;  Single Source Clock is clocking mode present in some of FSL SoC&#39;s.&#xA;  In this mode, a single differential clock is used to supply&#xA;  clocks to the sysclock, ddrclock and usbclock.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generic CPU options:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_SYS_FSL_DDR&#xA;  Freescale DDR driver in use. This type of DDR controller is&#xA;  found in mpc83xx, mpc85xx as well as some ARM core SoCs.&#xA;&#xA;  CFG_SYS_FSL_DDR_ADDR&#xA;  Freescale DDR memory-mapped register base.&#xA;&#xA;  CONFIG_SYS_FSL_IFC_CLK_DIV&#xA;  Defines divider of platform clock(clock input to IFC controller).&#xA;&#xA;  CONFIG_SYS_FSL_LBC_CLK_DIV&#xA;  Defines divider of platform clock(clock input to eLBC controller).&#xA;&#xA;  CFG_SYS_FSL_DDR_SDRAM_BASE_PHY&#xA;  Physical address from the view of DDR controllers. It is the&#xA;  same as CFG_SYS_DDR_SDRAM_BASE for  all Power SoCs. But&#xA;  it could be different for ARM SoCs.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ARM options: CFG_SYS_EXCEPTION_VECTORS_HIGH&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Select high exception vectors of the ARM core, e.g., do not&#xA;  clear the V bit of the c1 register of CP15.&#xA;&#xA;  COUNTER_FREQUENCY&#xA;  Generic timer clock source frequency.&#xA;&#xA;  COUNTER_FREQUENCY_REAL&#xA;  Generic timer clock source frequency if the real clock is&#xA;  different from COUNTER_FREQUENCY, and can only be determined&#xA;  at run time.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux Kernel Interface: CONFIG_OF_LIBFDT&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  New kernel versions are expecting firmware settings to be&#xA;  passed using flattened device trees (based on open firmware&#xA;  concepts).&#xA;&#xA;  CONFIG_OF_LIBFDT&#xA;   * New libfdt-based support&#xA;   * Adds the &#34;fdt&#34; command&#xA;   * The bootm command automatically updates the fdt&#xA;&#xA;  OF_TBCLK - The timebase frequency.&#xA;&#xA;  boards with QUICC Engines require OF_QE to set UCC MAC&#xA;  addresses&#xA;&#xA;  CONFIG_OF_IDE_FIXUP&#xA;&#xA;  U-Boot can detect if an IDE device is present or not.&#xA;  If not, and this new config option is activated, U-Boot&#xA;  removes the ATA node from the DTS before booting Linux,&#xA;  so the Linux IDE driver does not probe the device and&#xA;  crash. This is needed for buggy hardware (uc101) where&#xA;  no pull down resistor is connected to the signal IDE5V_DD7.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;vxWorks boot parameters:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bootvx constructs a valid bootline using the following&#xA;  environments variables: bootdev, bootfile, ipaddr, netmask,&#xA;  serverip, gatewayip, hostname, othbootargs.&#xA;  It loads the vxWorks image pointed bootfile.&#xA;&#xA;  Note: If a &#34;bootargs&#34; environment is defined, it will override&#xA;  the defaults discussed just above.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cache Configuration for ARM: CFG_SYS_PL310_BASE - Physical base address of PL310 controller register space&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Serial Ports: CFG_PL011_CLOCK&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have Amba PrimeCell PL011 UARTs, set this variable to&#xA;  the clock speed of the UARTs.&#xA;&#xA;  CFG_PL01x_PORTS&#xA;&#xA;  If you have Amba PrimeCell PL010 or PL011 UARTs on your board,&#xA;  define this to a list of base addresses for each (supported)&#xA;  port. See e.g. include/configs/versatile.h&#xA;&#xA;  CONFIG_SERIAL_HW_FLOW_CONTROL&#xA;&#xA;  Define this variable to enable hw flow control in serial driver.&#xA;  Current user of this option is drivers/serial/nsl16550.c driver&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Removal of commands If no commands are needed to boot, you can disable CONFIG_CMDLINE to remove them. In this case, the command line will not be available, and when U-Boot wants to execute the boot command (on start-up) it will call board_run_command() instead. This can reduce image size significantly for very simple boot procedures.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Regular expression support: CONFIG_REGEX If this variable is defined, U-Boot is linked against the SLRE (Super Light Regular Expression) library, which adds regex support to some commands, as for example &#34;env grep&#34; and &#34;setexpr&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Watchdog: CFG_SYS_WATCHDOG_FREQ Some platforms automatically call WATCHDOG_RESET() from the timer interrupt handler every CFG_SYS_WATCHDOG_FREQ interrupts. If not set by the board configuration file, a default of CONFIG_SYS_HZ/2 (i.e. 500) is used. Setting CFG_SYS_WATCHDOG_FREQ to 0 disables calling WATCHDOG_RESET() from the timer interrupt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GPIO Support: The CFG_SYS_I2C_PCA953X_WIDTH option specifies a list of chip-ngpio pairs that tell the PCA953X driver the number of pins supported by a particular chip.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Note that if the GPIO device uses I2C, then the I2C interface&#xA;  must also be configured. See I2C Support, below.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I/O tracing: When CONFIG_IO_TRACE is selected, U-Boot intercepts all I/O accesses and can checksum them or write a list of them out to memory. See the &#39;iotrace&#39; command for details. This is useful for testing device drivers since it can confirm that the driver behaves the same way before and after a code change. Currently this is supported on sandbox and arm. To add support for your architecture, add &#39;#include &amp;lt;iotrace.h&amp;gt;&#39; to the bottom of arch/&#xA;   &lt;arch&gt;&#xA;    /include/asm/io.h and test.&#xA;   &lt;/arch&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Example output from the &#39;iotrace stats&#39; command is below.&#xA;  Note that if the trace buffer is exhausted, the checksum will&#xA;  still continue to operate.&#xA;&#xA;  &#x9;iotrace is enabled&#xA;  &#x9;Start:  10000000&#x9;(buffer start address)&#xA;  &#x9;Size:   00010000&#x9;(buffer size)&#xA;  &#x9;Offset: 00000120&#x9;(current buffer offset)&#xA;  &#x9;Output: 10000120&#x9;(start + offset)&#xA;  &#x9;Count:  00000018&#x9;(number of trace records)&#xA;  &#x9;CRC32:  9526fb66&#x9;(CRC32 of all trace records)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Timestamp Support:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  When CONFIG_TIMESTAMP is selected, the timestamp&#xA;  (date and time) of an image is printed by image&#xA;  commands like bootm or iminfo. This option is&#xA;  automatically enabled when you select CONFIG_CMD_DATE .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Partition Labels (disklabels) Supported: Zero or more of the following: CONFIG_MAC_PARTITION Apple&#39;s MacOS partition table. CONFIG_ISO_PARTITION ISO partition table, used on CDROM etc. CONFIG_EFI_PARTITION GPT partition table, common when EFI is the bootloader. Note 2TB partition limit; see disk/part_efi.c CONFIG_SCSI) you must configure support for at least one non-MTD partition type as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NETWORK Support (PCI): CONFIG_E1000_SPI Utility code for direct access to the SPI bus on Intel 8257x. This does not do anything useful unless you set at least one of CONFIG_CMD_E1000 or CONFIG_E1000_SPI_GENERIC.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_NATSEMI&#xA;  Support for National dp83815 chips.&#xA;&#xA;  CONFIG_NS8382X&#xA;  Support for National dp8382[01] gigabit chips.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NETWORK Support (other): CONFIG_CALXEDA_XGMAC Support for the Calxeda XGMAC device&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_LAN91C96&#xA;  Support for SMSC&#39;s LAN91C96 chips.&#xA;&#xA;  &#x9;CONFIG_LAN91C96_USE_32_BIT&#xA;  &#x9;Define this to enable 32 bit addressing&#xA;&#xA;  &#x9;CFG_SYS_DAVINCI_EMAC_PHY_COUNT&#xA;  &#x9;Define this if you have more then 3 PHYs.&#xA;&#xA;  CONFIG_FTGMAC100&#xA;  Support for Faraday&#39;s FTGMAC100 Gigabit SoC Ethernet&#xA;&#xA;  &#x9;CONFIG_FTGMAC100_EGIGA&#xA;  &#x9;Define this to use GE link update with gigabit PHY.&#xA;  &#x9;Define this if FTGMAC100 is connected to gigabit PHY.&#xA;  &#x9;If your system has 10/100 PHY only, it might not occur&#xA;  &#x9;wrong behavior. Because PHY usually return timeout or&#xA;  &#x9;useless data when polling gigabit status and gigabit&#xA;  &#x9;control registers. This behavior won&#39;t affect the&#xA;  &#x9;correctnessof 10/100 link speed update.&#xA;&#xA;  CONFIG_SH_ETHER&#xA;  Support for Renesas on-chip Ethernet controller&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TPM Support: CONFIG_TPM Support TPM devices.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_TPM_TIS_INFINEON&#xA;  Support for Infineon i2c bus TPM devices. Only one device&#xA;  per system is supported at this time.&#xA;&#xA;  &#x9;CONFIG_TPM_TIS_I2C_BURST_LIMITATION&#xA;  &#x9;Define the burst count bytes upper limit&#xA;&#xA;  CONFIG_TPM_ST33ZP24&#xA;  Support for STMicroelectronics TPM devices. Requires DM_TPM support.&#xA;&#xA;  &#x9;CONFIG_TPM_ST33ZP24_I2C&#xA;  &#x9;Support for STMicroelectronics ST33ZP24 I2C devices.&#xA;  &#x9;Requires TPM_ST33ZP24 and I2C.&#xA;&#xA;  &#x9;CONFIG_TPM_ST33ZP24_SPI&#xA;  &#x9;Support for STMicroelectronics ST33ZP24 SPI devices.&#xA;  &#x9;Requires TPM_ST33ZP24 and SPI.&#xA;&#xA;  CONFIG_TPM_ATMEL_TWI&#xA;  Support for Atmel TWI TPM device. Requires I2C support.&#xA;&#xA;  CONFIG_TPM_TIS_LPC&#xA;  Support for generic parallel port TPM devices. Only one device&#xA;  per system is supported at this time.&#xA;&#xA;  CONFIG_TPM&#xA;  Define this to enable the TPM support library which provides&#xA;  functional interfaces to some TPM commands.&#xA;  Requires support for a TPM device.&#xA;&#xA;  CONFIG_TPM_AUTH_SESSIONS&#xA;  Define this to enable authorized functions in the TPM library.&#xA;  Requires CONFIG_TPM and CONFIG_SHA1.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;USB Support: At the moment only the UHCI host controller is supported (PIP405, MIP405); define CONFIG_USB_UHCI to enable it. define CONFIG_USB_KEYBOARD to enable the USB Keyboard and define CONFIG_USB_STORAGE to enable the USB storage devices. Note: Supported are USB Keyboards and USB Floppy drives (TEAC FD-05PUB).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_USB_DWC2_REG_ADDR the physical CPU address of the DWC2&#xA;  HW module registers.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;USB Device: Define the below if you wish to use the USB console. Once firmware is rebuilt from a serial console issue the command &#34;setenv stdin usbtty; setenv stdout usbtty&#34; and attach your USB cable. The Unix command &#34;dmesg&#34; should print it has found a new device. The environment variable usbtty can be set to gserial or cdc_acm to enable your device to appear to a USB host as a Linux gserial device or a Common Device Class Abstract Control Model serial device. If you select usbtty = gserial you should be able to enumerate a Linux host by # modprobe usbserial vendor=0xVendorID product=0xProductID else if using cdc_acm, simply setting the environment variable usbtty to be cdc_acm should suffice. The following might be defined in YourBoardName.h&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have a USB-IF assigned VendorID then you may wish to&#xA;  define your own vendor specific values either in BoardName.h&#xA;  or directly in usbd_vendor_info.h. If you don&#39;t define&#xA;  CONFIG_USBD_MANUFACTURER, CONFIG_USBD_PRODUCT_NAME,&#xA;  CONFIG_USBD_VENDORID and CONFIG_USBD_PRODUCTID, then U-Boot&#xA;  should pretend to be a Linux device to it&#39;s target host.&#xA;&#xA;  &#x9;CONFIG_USBD_MANUFACTURER&#xA;  &#x9;Define this string as the name of your company for&#xA;  &#x9;- CONFIG_USBD_MANUFACTURER &#34;my company&#34;&#xA;&#xA;  &#x9;CONFIG_USBD_PRODUCT_NAME&#xA;  &#x9;Define this string as the name of your product&#xA;  &#x9;- CONFIG_USBD_PRODUCT_NAME &#34;acme usb device&#34;&#xA;&#xA;  &#x9;CONFIG_USBD_VENDORID&#xA;  &#x9;Define this as your assigned Vendor ID from the USB&#xA;  &#x9;Implementors Forum. This *must* be a genuine Vendor ID&#xA;  &#x9;to avoid polluting the USB namespace.&#xA;  &#x9;- CONFIG_USBD_VENDORID 0xFFFF&#xA;&#xA;  &#x9;CONFIG_USBD_PRODUCTID&#xA;  &#x9;Define this as the unique Product ID&#xA;  &#x9;for your device&#xA;  &#x9;- CONFIG_USBD_PRODUCTID 0xFFFF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MMC Support: CONFIG_SH_MMCIF Support for Renesas on-chip MMCIF controller&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &#x9;CONFIG_SH_MMCIF_ADDR&#xA;  &#x9;Define the base address of MMCIF registers&#xA;&#xA;  &#x9;CONFIG_SH_MMCIF_CLK&#xA;  &#x9;Define the clock frequency for MMCIF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;USB Device Firmware Update (DFU) class support: CONFIG_DFU_OVER_USB This enables the USB portion of the DFU USB class&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_DFU_NAND&#xA;  This enables support for exposing NAND devices via DFU.&#xA;&#xA;  CONFIG_DFU_RAM&#xA;  This enables support for exposing RAM via DFU.&#xA;  Note: DFU spec refer to non-volatile memory usage, but&#xA;  allow usages beyond the scope of spec - here RAM usage,&#xA;  one that would help mostly the developer.&#xA;&#xA;  CONFIG_SYS_DFU_DATA_BUF_SIZE&#xA;  Dfu transfer uses a buffer before writing data to the&#xA;  raw storage device. Make the size (in bytes) of this buffer&#xA;  configurable. The size of this buffer is also configurable&#xA;  through the &#34;dfu_bufsiz&#34; environment variable.&#xA;&#xA;  CONFIG_SYS_DFU_MAX_FILE_SIZE&#xA;  When updating files rather than the raw storage device,&#xA;  we use a static buffer to copy the file into and then write&#xA;  the buffer once we&#39;ve been given the whole file.  Define&#xA;  this to the maximum filesize (in bytes) for the buffer.&#xA;  Default is 4 MiB if undefined.&#xA;&#xA;  DFU_DEFAULT_POLL_TIMEOUT&#xA;  Poll timeout [ms], is the timeout a device can send to the&#xA;  host. The host must wait for this timeout before sending&#xA;  a subsequent DFU_GET_STATUS request to the device.&#xA;&#xA;  DFU_MANIFEST_POLL_TIMEOUT&#xA;  Poll timeout [ms], which the device sends to the host when&#xA;  entering dfuMANIFEST state. Host waits this timeout, before&#xA;  sending again an USB request to the device.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keyboard Support: See Kconfig help for available keyboard drivers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MII/PHY support: CONFIG_PHY_CLOCK_FREQ (ppc4xx)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The clock frequency of the MII bus&#xA;&#xA;  CONFIG_PHY_CMD_DELAY (ppc4xx)&#xA;&#xA;  Some PHY like Intel LXT971A need extra delay after&#xA;  command issued before MII status register can be read&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BOOTP Recovery Mode: CONFIG_BOOTP_RANDOM_DELAY&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have many targets in a network that try to&#xA;  boot using BOOTP, you may want to avoid that all&#xA;  systems send out BOOTP requests at precisely the same&#xA;  moment (which would happen for instance at recovery&#xA;  from a power failure, when all systems will try to&#xA;  boot, thus flooding the BOOTP server. Defining&#xA;  CONFIG_BOOTP_RANDOM_DELAY causes a random delay to be&#xA;  inserted before sending out BOOTP requests. The&#xA;  following delays are inserted then:&#xA;&#xA;  1st BOOTP request:&#x9;delay 0 ... 1 sec&#xA;  2nd BOOTP request:&#x9;delay 0 ... 2 sec&#xA;  3rd BOOTP request:&#x9;delay 0 ... 4 sec&#xA;  4th and following&#xA;  BOOTP requests:&#x9;&#x9;delay 0 ... 8 sec&#xA;&#xA;  CFG_BOOTP_ID_CACHE_SIZE&#xA;&#xA;  BOOTP packets are uniquely identified using a 32-bit ID. The&#xA;  server will copy the ID from client requests to responses and&#xA;  U-Boot will use this to determine if it is the destination of&#xA;  an incoming response. Some servers will check that addresses&#xA;  aren&#39;t in use before handing them out (usually using an ARP&#xA;  ping) and therefore take up to a few hundred milliseconds to&#xA;  respond. Network congestion may also influence the time it&#xA;  takes for a response to make it back to the client. If that&#xA;  time is too long, U-Boot will retransmit requests. In order&#xA;  to allow earlier responses to still be accepted after these&#xA;  retransmissions, U-Boot&#39;s BOOTP client keeps a small cache of&#xA;  IDs. The CFG_BOOTP_ID_CACHE_SIZE controls the size of this&#xA;  cache. The default is to keep IDs for up to four outstanding&#xA;  requests. Increasing this will allow U-Boot to accept offers&#xA;  from a BOOTP client in networks with unusually high latency.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DHCP Advanced Options:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Link-local IP address negotiation: Negotiate with other link-local clients on the local network for an address that doesn&#39;t require explicit configuration. This is especially useful if a DHCP server cannot be guaranteed to exist in all environments that the device must operate.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; See doc/README.link-local for more information.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MAC address from environment variables&lt;/p&gt; &lt;pre&gt;&lt;code&gt; FDT_SEQ_MACADDR_FROM_ENV&#xA;&#xA; Fix-up device tree with MAC addresses fetched sequentially from&#xA; environment variables. This config work on assumption that&#xA; non-usable ethernet node of device-tree are either not present&#xA; or their status has been marked as &#34;disabled&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CDP Options: CONFIG_CDP_DEVICE_ID&lt;/p&gt; &lt;pre&gt;&lt;code&gt; The device id used in CDP trigger frames.&#xA;&#xA; CONFIG_CDP_DEVICE_ID_PREFIX&#xA;&#xA; A two character string which is prefixed to the MAC address&#xA; of the device.&#xA;&#xA; CONFIG_CDP_PORT_ID&#xA;&#xA; A printf format string which contains the ascii name of&#xA; the port. Normally is set to &#34;eth%d&#34; which sets&#xA; eth0 for the first Ethernet, eth1 for the second etc.&#xA;&#xA; CONFIG_CDP_CAPABILITIES&#xA;&#xA; A 32bit integer which indicates the device capabilities;&#xA; 0x00000010 for a normal host which does not forwards.&#xA;&#xA; CONFIG_CDP_VERSION&#xA;&#xA; An ascii string containing the version of the software.&#xA;&#xA; CONFIG_CDP_PLATFORM&#xA;&#xA; An ascii string containing the name of the platform.&#xA;&#xA; CONFIG_CDP_TRIGGER&#xA;&#xA; A 32bit integer sent on the trigger.&#xA;&#xA; CONFIG_CDP_POWER_CONSUMPTION&#xA;&#xA; A 16bit integer containing the power consumption of the&#xA; device in .1 of milliwatts.&#xA;&#xA; CONFIG_CDP_APPLIANCE_VLAN_TYPE&#xA;&#xA; A byte containing the id of the VLAN.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Status LED: CONFIG_LED_STATUS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Several configurations allow to display the current&#xA;  status using a LED. For instance, the LED will blink&#xA;  fast while running U-Boot code, stop blinking as&#xA;  soon as a reply to a BOOTP request was received, and&#xA;  start blinking slow once the Linux kernel is running&#xA;  (supported by a status LED driver in the Linux&#xA;  kernel). Defining CONFIG_LED_STATUS enables this&#xA;  feature in U-Boot.&#xA;&#xA;  Additional options:&#xA;&#xA;  CONFIG_LED_STATUS_GPIO&#xA;  The status LED can be connected to a GPIO pin.&#xA;  In such cases, the gpio_led driver can be used as a&#xA;  status LED backend implementation. Define CONFIG_LED_STATUS_GPIO&#xA;  to include the gpio_led driver in the U-Boot binary.&#xA;&#xA;  CFG_GPIO_LED_INVERTED_TABLE&#xA;  Some GPIO connected LEDs may have inverted polarity in which&#xA;  case the GPIO high value corresponds to LED off state and&#xA;  GPIO low value corresponds to LED on state.&#xA;  In such cases CFG_GPIO_LED_INVERTED_TABLE may be defined&#xA;  with a list of GPIO LEDs that have inverted polarity.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I2C Support: CFG_SYS_NUM_I2C_BUSES Hold the number of i2c buses you want to use.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CFG_SYS_I2C_BUSES&#xA;  hold a list of buses you want to use&#xA;&#xA;   CFG_SYS_I2C_BUSES&#x9;{{0, {I2C_NULL_HOP}}, \&#xA;  &#x9;&#x9;&#x9;{0, {{I2C_MUX_PCA9547, 0x70, 1}}}, \&#xA;  &#x9;&#x9;&#x9;{0, {{I2C_MUX_PCA9547, 0x70, 2}}}, \&#xA;  &#x9;&#x9;&#x9;{0, {{I2C_MUX_PCA9547, 0x70, 3}}}, \&#xA;  &#x9;&#x9;&#x9;{0, {{I2C_MUX_PCA9547, 0x70, 4}}}, \&#xA;  &#x9;&#x9;&#x9;{0, {{I2C_MUX_PCA9547, 0x70, 5}}}, \&#xA;  &#x9;&#x9;&#x9;{1, {I2C_NULL_HOP}}, \&#xA;  &#x9;&#x9;&#x9;{1, {{I2C_MUX_PCA9544, 0x72, 1}}}, \&#xA;  &#x9;&#x9;&#x9;{1, {{I2C_MUX_PCA9544, 0x72, 2}}}, \&#xA;  &#x9;&#x9;&#x9;}&#xA;&#xA;  which defines&#xA;  &#x9;bus 0 on adapter 0 without a mux&#xA;  &#x9;bus 1 on adapter 0 with a PCA9547 on address 0x70 port 1&#xA;  &#x9;bus 2 on adapter 0 with a PCA9547 on address 0x70 port 2&#xA;  &#x9;bus 3 on adapter 0 with a PCA9547 on address 0x70 port 3&#xA;  &#x9;bus 4 on adapter 0 with a PCA9547 on address 0x70 port 4&#xA;  &#x9;bus 5 on adapter 0 with a PCA9547 on address 0x70 port 5&#xA;  &#x9;bus 6 on adapter 1 without a mux&#xA;  &#x9;bus 7 on adapter 1 with a PCA9544 on address 0x72 port 1&#xA;  &#x9;bus 8 on adapter 1 with a PCA9544 on address 0x72 port 2&#xA;&#xA;  If you do not have i2c muxes on your board, omit this define.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Legacy I2C Support: If you use the software i2c interface (CONFIG_SYS_I2C_SOFT) then the following macros need to be defined (examples are from include/configs/lwmon.h):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  I2C_INIT&#xA;&#xA;  (Optional). Any commands necessary to enable the I2C&#xA;  controller or configure ports.&#xA;&#xA;  eg: #define I2C_INIT (immr-&amp;gt;im_cpm.cp_pbdir |=&#x9;PB_SCL)&#xA;&#xA;  I2C_ACTIVE&#xA;&#xA;  The code necessary to make the I2C data line active&#xA;  (driven).  If the data line is open collector, this&#xA;  define can be null.&#xA;&#xA;  eg: #define I2C_ACTIVE (immr-&amp;gt;im_cpm.cp_pbdir |=  PB_SDA)&#xA;&#xA;  I2C_TRISTATE&#xA;&#xA;  The code necessary to make the I2C data line tri-stated&#xA;  (inactive).  If the data line is open collector, this&#xA;  define can be null.&#xA;&#xA;  eg: #define I2C_TRISTATE (immr-&amp;gt;im_cpm.cp_pbdir &amp;amp;= ~PB_SDA)&#xA;&#xA;  I2C_READ&#xA;&#xA;  Code that returns true if the I2C data line is high,&#xA;  false if it is low.&#xA;&#xA;  eg: #define I2C_READ ((immr-&amp;gt;im_cpm.cp_pbdat &amp;amp; PB_SDA) != 0)&#xA;&#xA;  I2C_SDA(bit)&#xA;&#xA;  If &amp;lt;bit&amp;gt; is true, sets the I2C data line high. If it&#xA;  is false, it clears it (low).&#xA;&#xA;  eg: #define I2C_SDA(bit) \&#xA;  &#x9;if(bit) immr-&amp;gt;im_cpm.cp_pbdat |=  PB_SDA; \&#xA;  &#x9;else&#x9;immr-&amp;gt;im_cpm.cp_pbdat &amp;amp;= ~PB_SDA&#xA;&#xA;  I2C_SCL(bit)&#xA;&#xA;  If &amp;lt;bit&amp;gt; is true, sets the I2C clock line high. If it&#xA;  is false, it clears it (low).&#xA;&#xA;  eg: #define I2C_SCL(bit) \&#xA;  &#x9;if(bit) immr-&amp;gt;im_cpm.cp_pbdat |=  PB_SCL; \&#xA;  &#x9;else&#x9;immr-&amp;gt;im_cpm.cp_pbdat &amp;amp;= ~PB_SCL&#xA;&#xA;  I2C_DELAY&#xA;&#xA;  This delay is invoked four times per clock cycle so this&#xA;  controls the rate of data transfer.  The data rate thus&#xA;  is 1 / (I2C_DELAY * 4). Often defined to be something&#xA;  like:&#xA;&#xA;  #define I2C_DELAY  udelay(2)&#xA;&#xA;  CONFIG_SOFT_I2C_GPIO_SCL / CONFIG_SOFT_I2C_GPIO_SDA&#xA;&#xA;  If your arch supports the generic GPIO framework (asm/gpio.h),&#xA;  then you may alternatively define the two GPIOs that are to be&#xA;  used as SCL / SDA.  Any of the previous I2C_xxx macros will&#xA;  have GPIO-based defaults assigned to them as appropriate.&#xA;&#xA;  You should define these to the GPIO value as given directly to&#xA;  the generic GPIO functions.&#xA;&#xA;  CFG_SYS_I2C_NOPROBES&#xA;&#xA;  This option specifies a list of I2C devices that will be skipped&#xA;  when the &#39;i2c probe&#39; command is issued.&#xA;&#xA;  e.g.&#xA;  &#x9;#define CFG_SYS_I2C_NOPROBES {0x50,0x68}&#xA;&#xA;  will skip addresses 0x50 and 0x68 on a board with one I2C bus&#xA;&#xA;  CONFIG_SOFT_I2C_READ_REPEATED_START&#xA;&#xA;  defining this will force the i2c_read() function in&#xA;  the soft_i2c driver to perform an I2C repeated start&#xA;  between writing the address pointer and reading the&#xA;  data.  If this define is omitted the default behaviour&#xA;  of doing a stop-start sequence will be used.  Most I2C&#xA;  devices can use either method, but some require one or&#xA;  the other.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SPI Support: CONFIG_SPI&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Enables SPI driver (so far only tested with&#xA;  SPI EEPROM, also an instance works with Crystal A/D and&#xA;  D/As on the SACSng board)&#xA;&#xA;  CFG_SYS_SPI_MXC_WAIT&#xA;  Timeout for waiting until spi transfer completed.&#xA;  default: (CONFIG_SYS_HZ/100)     /* 10 ms */&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FPGA Support: CONFIG_FPGA&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Enables FPGA subsystem.&#xA;&#xA;  CONFIG_FPGA_&amp;lt;vendor&amp;gt;&#xA;&#xA;  Enables support for specific chip vendors.&#xA;  (ALTERA, XILINX)&#xA;&#xA;  CONFIG_FPGA_&amp;lt;family&amp;gt;&#xA;&#xA;  Enables support for FPGA family.&#xA;  (SPARTAN2, SPARTAN3, VIRTEX2, CYCLONE2, ACEX1K, ACEX)&#xA;&#xA;  CONFIG_SYS_FPGA_CHECK_BUSY&#xA;&#xA;  Enable checks on FPGA configuration interface busy&#xA;  status by the configuration function. This option&#xA;  will require a board or device specific function to&#xA;  be written.&#xA;&#xA;  CFG_FPGA_DELAY&#xA;&#xA;  If defined, a function that provides delays in the FPGA&#xA;  configuration driver.&#xA;&#xA;  CFG_SYS_FPGA_CHECK_ERROR&#xA;&#xA;  Check for configuration errors during FPGA bitfile&#xA;  loading. For example, abort during Virtex II&#xA;  configuration if the INIT_B line goes low (which&#xA;  indicated a CRC error).&#xA;&#xA;  CFG_SYS_FPGA_WAIT_INIT&#xA;&#xA;  Maximum time to wait for the INIT_B line to de-assert&#xA;  after PROB_B has been de-asserted during a Virtex II&#xA;  FPGA configuration sequence. The default time is 500&#xA;  ms.&#xA;&#xA;  CFG_SYS_FPGA_WAIT_BUSY&#xA;&#xA;  Maximum time to wait for BUSY to de-assert during&#xA;  Virtex II FPGA configuration. The default is 5 ms.&#xA;&#xA;  CFG_SYS_FPGA_WAIT_CONFIG&#xA;&#xA;  Time to wait after FPGA configuration. The default is&#xA;  200 ms.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vendor Parameter Protection:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  U-Boot considers the values of the environment&#xA;  variables &#34;serial#&#34; (Board Serial Number) and&#xA;  &#34;ethaddr&#34; (Ethernet Address) to be parameters that&#xA;  are set once by the board vendor / manufacturer, and&#xA;  protects these variables from casual modification by&#xA;  the user. Once set, these variables are read-only,&#xA;  and write or delete attempts are rejected. You can&#xA;  change this behaviour:&#xA;&#xA;  If CONFIG_ENV_OVERWRITE is #defined in your config&#xA;  file, the write protection for vendor parameters is&#xA;  completely disabled. Anybody can change or delete&#xA;  these parameters.&#xA;&#xA;  The same can be accomplished in a more flexible way&#xA;  for any variable by configuring the type of access&#xA;  to allow for those variables in the &#34;.flags&#34; variable&#xA;  or define CFG_ENV_FLAGS_LIST_STATIC.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Protected RAM: CFG_PRAM&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Define this variable to enable the reservation of&#xA;  &#34;protected RAM&#34;, i. e. RAM which is not overwritten&#xA;  by U-Boot. Define CFG_PRAM to hold the number of&#xA;  kB you want to reserve for pRAM. You can overwrite&#xA;  this default value by defining an environment&#xA;  variable &#34;pram&#34; to the number of kB you want to&#xA;  reserve. Note that the board info structure will&#xA;  still show the full amount of RAM. If pRAM is&#xA;  reserved, a new environment variable &#34;mem&#34; will&#xA;  automatically be defined to hold the amount of&#xA;  remaining RAM in a form that can be passed as boot&#xA;  argument to Linux, for instance like that:&#xA;&#xA;  &#x9;setenv bootargs ... mem=\${mem}&#xA;  &#x9;saveenv&#xA;&#xA;  This way you can tell Linux not to use this memory,&#xA;  either, which results in a memory region that will&#xA;  not be affected by reboots.&#xA;&#xA;  *WARNING* If your board configuration uses automatic&#xA;  detection of the RAM size, you must make sure that&#xA;  this memory test is non-destructive. So far, the&#xA;  following board configurations are known to be&#xA;  &#34;pRAM-clean&#34;:&#xA;&#xA;  &#x9;IVMS8, IVML24, SPD8xx,&#xA;  &#x9;HERMES, IP860, RPXlite, LWMON,&#xA;  &#x9;FLAGADM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Error Recovery: Note:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  In the current implementation, the local variables&#xA;  space and global environment variables space are&#xA;  separated. Local variables are those you define by&#xA;  simply typing `name=value&#39;. To access a local&#xA;  variable later on, you have write `$name&#39; or&#xA;  `${name}&#39;; to execute the contents of a variable&#xA;  directly type `$name&#39; at the command prompt.&#xA;&#xA;  Global environment variables are those you use&#xA;  setenv/printenv to work with. To run a command stored&#xA;  in such a variable, you need to use the run command,&#xA;  and you must not use the &#39;$&#39; sign to access them.&#xA;&#xA;  To store commands and special characters in a&#xA;  variable, please use double quotation marks&#xA;  surrounding the whole text of the variable, instead&#xA;  of the backslashes before semicolons and special&#xA;  symbols.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Default Environment: CFG_EXTRA_ENV_SETTINGS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Define this to contain any number of null terminated&#xA;  strings (variable = value pairs) that will be part of&#xA;  the default environment compiled into the boot image.&#xA;&#xA;  For example, place something like this in your&#xA;  board&#39;s config file:&#xA;&#xA;  #define CFG_EXTRA_ENV_SETTINGS \&#xA;  &#x9;&#34;myvar1=value1\0&#34; \&#xA;  &#x9;&#34;myvar2=value2\0&#34;&#xA;&#xA;  Warning: This method is based on knowledge about the&#xA;  internal format how the environment is stored by the&#xA;  U-Boot code. This is NOT an official, exported&#xA;  interface! Although it is unlikely that this format&#xA;  will change soon, there is no guarantee either.&#xA;  You better know what you are doing here.&#xA;&#xA;  Note: overly (ab)use of the default environment is&#xA;  discouraged. Make sure to check other ways to preset&#xA;  the environment like the &#34;source&#34; command or the&#xA;  boot command first.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatic software updates via TFTP server CONFIG_UPDATE_TFTP CONFIG_UPDATE_TFTP_CNT_MAX CONFIG_UPDATE_TFTP_MSEC_MAX&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  These options enable and control the auto-update feature;&#xA;  for a more detailed description refer to doc/README.update.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MTD Support (mtdparts command, UBI support) CONFIG_MTD_UBI_WL_THRESHOLD This parameter defines the maximum difference between the highest erase counter value and the lowest erase counter value of eraseblocks of UBI devices. When this threshold is exceeded, UBI starts performing wear leveling by means of moving data from eraseblock with low erase counter to eraseblocks with high erase counter.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The default value should be OK for SLC NAND flashes, NOR flashes and&#xA;  other flashes which have eraseblock life-cycle 100000 or more.&#xA;  However, in case of MLC NAND flashes which typically have eraseblock&#xA;  life-cycle less than 10000, the threshold should be lessened (e.g.,&#xA;  to 128 or 256, although it does not have to be power of 2).&#xA;&#xA;  default: 4096&#xA;&#xA;  CONFIG_MTD_UBI_BEB_LIMIT&#xA;  This option specifies the maximum bad physical eraseblocks UBI&#xA;  expects on the MTD device (per 1024 eraseblocks). If the&#xA;  underlying flash does not admit of bad eraseblocks (e.g. NOR&#xA;  flash), this value is ignored.&#xA;&#xA;  NAND datasheets often specify the minimum and maximum NVM&#xA;  (Number of Valid Blocks) for the flashes&#39; endurance lifetime.&#xA;  The maximum expected bad eraseblocks per 1024 eraseblocks&#xA;  then can be calculated as &#34;1024 * (1 - MinNVB / MaxNVB)&#34;,&#xA;  which gives 20 for most NANDs (MaxNVB is basically the total&#xA;  count of eraseblocks on the chip).&#xA;&#xA;  To put it differently, if this value is 20, UBI will try to&#xA;  reserve about 1.9% of physical eraseblocks for bad blocks&#xA;  handling. And that will be 1.9% of eraseblocks on the entire&#xA;  NAND chip, not just the MTD partition UBI attaches. This means&#xA;  that if you have, say, a NAND flash chip admits maximum 40 bad&#xA;  eraseblocks, and it is split on two MTD partitions of the same&#xA;  size, UBI will reserve 40 eraseblocks when attaching a&#xA;  partition.&#xA;&#xA;  default: 20&#xA;&#xA;  CONFIG_MTD_UBI_FASTMAP&#xA;  Fastmap is a mechanism which allows attaching an UBI device&#xA;  in nearly constant time. Instead of scanning the whole MTD device it&#xA;  only has to locate a checkpoint (called fastmap) on the device.&#xA;  The on-flash fastmap contains all information needed to attach&#xA;  the device. Using fastmap makes only sense on large devices where&#xA;  attaching by scanning takes long. UBI will not automatically install&#xA;  a fastmap on old images, but you can set the UBI parameter&#xA;  CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT to 1 if you want so. Please note&#xA;  that fastmap-enabled images are still usable with UBI implementations&#xA;  without&#x9;fastmap support. On typical flash devices the whole fastmap&#xA;  fits into one PEB. UBI will reserve PEBs to hold two fastmaps.&#xA;&#xA;  CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT&#xA;  Set this parameter to enable fastmap automatically on images&#xA;  without a fastmap.&#xA;  default: 0&#xA;&#xA;  CONFIG_MTD_UBI_FM_DEBUG&#xA;  Enable UBI fastmap debug&#xA;  default: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SPL framework CONFIG_SPL Enable building of SPL globally.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_SPL_PANIC_ON_RAW_IMAGE&#xA;  When defined, SPL will panic() if the image it has&#xA;  loaded does not have a signature.&#xA;  Defining this is useful when code which loads images&#xA;  in SPL cannot guarantee that absolutely all read errors&#xA;  will be caught.&#xA;  An example is the LPC32XX MLC NAND driver, which will&#xA;  consider that a completely unreadable NAND block is bad,&#xA;  and thus should be skipped silently.&#xA;&#xA;  CONFIG_SPL_DISPLAY_PRINT&#xA;  For ARM, enable an optional function to print more information&#xA;  about the running system.&#xA;&#xA;  CONFIG_SPL_MPC83XX_WAIT_FOR_NAND&#xA;  Set this for NAND SPL on PPC mpc83xx targets, so that&#xA;  start.S waits for the rest of the SPL to load before&#xA;  continuing (the hardware starts execution after just&#xA;  loading the first page rather than the full 4K).&#xA;&#xA;  CONFIG_SPL_UBI&#xA;  Support for a lightweight UBI (fastmap) scanner and&#xA;  loader&#xA;&#xA;  CONFIG_SYS_NAND_5_ADDR_CYCLE, CONFIG_SYS_NAND_PAGE_SIZE,&#xA;  CONFIG_SYS_NAND_OOBSIZE, CONFIG_SYS_NAND_BLOCK_SIZE,&#xA;  CONFIG_SYS_NAND_BAD_BLOCK_POS, CFG_SYS_NAND_ECCPOS,&#xA;  CFG_SYS_NAND_ECCSIZE, CFG_SYS_NAND_ECCBYTES&#xA;  Defines the size and behavior of the NAND that SPL uses&#xA;  to read U-Boot&#xA;&#xA;  CFG_SYS_NAND_U_BOOT_DST&#xA;  Location in memory to load U-Boot to&#xA;&#xA;  CFG_SYS_NAND_U_BOOT_SIZE&#xA;  Size of image to load&#xA;&#xA;  CFG_SYS_NAND_U_BOOT_START&#xA;  Entry point in loaded image to jump to&#xA;&#xA;  CONFIG_SPL_RAM_DEVICE&#xA;  Support for running image already present in ram, in SPL binary&#xA;&#xA;  CONFIG_SPL_FIT_PRINT&#xA;  Printing information about a FIT image adds quite a bit of&#xA;  code to SPL. So this is normally disabled in SPL. Use this&#xA;  option to re-enable it. This will affect the output of the&#xA;  bootm command when booting a FIT image.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interrupt support (PPC):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  There are common interrupt_init() and timer_interrupt()&#xA;  for all PPC archs. interrupt_init() calls interrupt_init_cpu()&#xA;  for CPU specific initialization. interrupt_init_cpu()&#xA;  should set decrementer_count to appropriate value. If&#xA;  CPU resets decrementer automatically after interrupt&#xA;  (ppc4xx) it should set decrementer_count to zero.&#xA;  timer_interrupt() calls timer_interrupt_cpu() for CPU&#xA;  specific handling. If board has watchdog / status_led&#xA;  / other_activity_monitor it works automatically from&#xA;  general timer_interrupt().&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Board initialization settings:&lt;/h2&gt; &#xA;&lt;p&gt;During Initialization u-boot calls a number of board specific functions to allow the preparation of board specific prerequisites, e.g. pin setup before drivers are initialized. To enable these callbacks the following configuration macros have to be defined. Currently this is architecture specific, so please check arch/your_architecture/lib/board.c typically in board_init_f() and board_init_r().&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CONFIG_BOARD_EARLY_INIT_F: Call board_early_init_f()&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_BOARD_EARLY_INIT_R: Call board_early_init_r()&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_BOARD_LATE_INIT: Call board_late_init()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration Settings:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_LONGHELP: Defined when you want long help messages included; undefine this when you&#39;re short of memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_HELP_CMD_WIDTH: Defined when you want to override the default width of the commands listed in the &#39;help&#39; command output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_PROMPT: This is what U-Boot prints on the console to prompt for user input.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_BAUDRATE_TABLE: List of legal baudrate settings for this board.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_MEM_RESERVE_SECURE Only implemented for ARMv8 for now. If defined, the size of CFG_SYS_MEM_RESERVE_SECURE memory is substracted from total RAM and won&#39;t be reported to OS. This memory can be used as secure memory. A variable gd-&amp;gt;arch.secure_ram is used to track the location. In systems the RAM base is not zero, or RAM is divided into banks, this variable needs to be recalcuated to get the address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_SDRAM_BASE: Physical start address of SDRAM. &lt;em&gt;Must&lt;/em&gt; be 0 here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_FLASH_BASE: Physical start address of Flash memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_MALLOC_LEN: Size of DRAM reserved for malloc() use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_BOOTMAPSZ: Maximum size of memory mapped by the startup code of the Linux kernel; all data that must be processed by the Linux kernel (bd_info, boot arguments, FDT blob if used) must be put below this limit, unless &#34;bootm_low&#34; environment variable is defined and non-zero. In such case all data for the Linux kernel must be between &#34;bootm_low&#34; and &#34;bootm_low&#34; + CFG_SYS_BOOTMAPSZ. The environment variable &#34;bootm_mapsize&#34; will override the value of CFG_SYS_BOOTMAPSZ. If CFG_SYS_BOOTMAPSZ is undefined, then the value in &#34;bootm_size&#34; will be used instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_BOOT_GET_CMDLINE: Enables allocating and saving kernel cmdline in space between &#34;bootm_low&#34; and &#34;bootm_low&#34; + BOOTMAPSZ.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_BOOT_GET_KBD: Enables allocating and saving a kernel copy of the bd_info in space between &#34;bootm_low&#34; and &#34;bootm_low&#34; + BOOTMAPSZ.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_PROTECTION If defined, hardware flash sectors protection is used instead of U-Boot software protection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_CFI: Define if the flash driver uses extra elements in the common flash structure for storing flash geometry.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_FLASH_CFI_DRIVER This option also enables the building of the cfi_flash driver in the drivers directory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_FLASH_CFI_MTD This option enables the building of the cfi_mtd driver in the drivers directory. The driver exports CFI flash to the MTD layer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_USE_BUFFER_WRITE Use buffered writes to flash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_ENV_FLAGS_LIST_DEFAULT&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_ENV_FLAGS_LIST_STATIC Enable validation of the values given to environment variables when calling env set. Variables can be restricted to only decimal, hexadecimal, or boolean. If CONFIG_CMD_NET is also defined, the variables can also be restricted to IP address or MAC address.&lt;/p&gt; &lt;p&gt;The format of the list is: type_attribute = [s|d|x|b|i|m] access_attribute = [a|r|o|c] attributes = type_attribute[access_attribute] entry = variable_name[:attributes] list = entry[,list]&lt;/p&gt; &lt;p&gt;The type attributes are: s - String (default) d - Decimal x - Hexadecimal b - Boolean ([1yYtT|0nNfF]) i - IP address m - MAC address&lt;/p&gt; &lt;p&gt;The access attributes are: a - Any (default) r - Read-only o - Write-once c - Change-default&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;CONFIG_ENV_FLAGS_LIST_DEFAULT Define this to a list (string) to define the &#34;.flags&#34; environment variable in the default or embedded environment.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;CFG_ENV_FLAGS_LIST_STATIC Define this to a list (string) to define validation that should be done if an entry is not found in the &#34;.flags&#34; environment variable. To override a setting in the static list, simply add an entry for the same variable name to the &#34;.flags&#34; variable.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If CONFIG_REGEX is defined, the variable_name above is evaluated as a regular expression. This allows multiple variables to define the same flags without explicitly listing them for each variable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following definitions that deal with the placement and management of environment data (variable area); in general, we support the following configurations:&lt;/p&gt; &#xA;&lt;p&gt;BE CAREFUL! The first access to the environment happens quite early in U-Boot initialization (when we try to get the setting of for the console baudrate). You &lt;em&gt;MUST&lt;/em&gt; have mapped your NVRAM area then, or U-Boot will hang.&lt;/p&gt; &#xA;&lt;p&gt;Please note that even with NVRAM we still use a copy of the environment in RAM: we could work on NVRAM directly, but we want to keep settings there always unmodified except somebody uses &#34;saveenv&#34; to save the current settings.&lt;/p&gt; &#xA;&lt;p&gt;BE CAREFUL! For some special cases, the local device can not use &#34;saveenv&#34; command. For example, the local device will get the environment stored in a remote NOR flash by SRIO or PCIE link, but it can not erase, write this NOR flash by SRIO or PCIE interface.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_NAND_ENV_DST&lt;/p&gt; &lt;p&gt;Defines address in RAM to which the nand_spl code should copy the environment. If redundant environment is used, it will be copied to CONFIG_NAND_ENV_DST + CONFIG_ENV_SIZE.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that the environment is read-only until the monitor has been relocated to RAM and a RAM copy of the environment has been created; also, when using EEPROM you will have to use env_get_f() until then to read environment variables.&lt;/p&gt; &#xA;&lt;p&gt;The environment is protected by a CRC32 checksum. Before the monitor is relocated into RAM, as a result of a bad CRC you will be working with the compiled-in default environment - &lt;em&gt;silently&lt;/em&gt;!!! [This is necessary, because the first environment variable we need is the &#34;baudrate&#34; setting for the console - if we have a bad CRC, we don&#39;t have any device yet where we could complain.]&lt;/p&gt; &#xA;&lt;p&gt;Note: once the monitor has been relocated, then it will complain if the default environment is used; a new CRC is computed as soon as you use the &#34;saveenv&#34; command to store a valid environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_FAULT_MII_ADDR: MII address of the PHY to check for the Ethernet link state.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_DISPLAY_BOARDINFO Display information about the board that U-Boot is running on when U-Boot starts up. The board function checkboard() is called to do this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_DISPLAY_BOARDINFO_LATE Similar to the previous option, but display this information later, once stdio is running and output goes to the LCD, if present.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Low Level (hardware related) configuration options:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_CACHELINE_SIZE: Cache Line Size of the CPU.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_CCSRBAR_DEFAULT: Default (power-on reset) physical address of CCSR on Freescale PowerPC SOCs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR: Virtual address of CCSR. On a 32-bit build, this is typically the same value as CONFIG_SYS_CCSRBAR_DEFAULT.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS: Physical address of CCSR. CCSR can be relocated to a new physical address, if desired. In this case, this macro should be set to that address. Otherwise, it should be set to the same value as CONFIG_SYS_CCSRBAR_DEFAULT. For example, CCSR is typically relocated on 36-bit builds. It is recommended that this macro be defined via the _HIGH and _LOW macros:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  #define CFG_SYS_CCSRBAR_PHYS ((CFG_SYS_CCSRBAR_PHYS_HIGH&#xA;  &#x9;* 1ull) &amp;lt;&amp;lt; 32 | CFG_SYS_CCSRBAR_PHYS_LOW)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS_HIGH: Bits 33-36 of CFG_SYS_CCSRBAR_PHYS. This value is typically either 0 (32-bit build) or 0xF (36-bit build). This macro is used in assembly code, so it must not contain typecasts or integer size suffixes (e.g. &#34;ULL&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS_LOW: Lower 32-bits of CFG_SYS_CCSRBAR_PHYS. This macro is used in assembly code, so it must not contain typecasts or integer size suffixes (e.g. &#34;ULL&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_IMMR: Physical address of the Internal Memory. DO NOT CHANGE unless you know exactly what you&#39;re doing! (11-4) [MPC8xx systems only]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CFG_SYS_INIT_RAM_ADDR:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Start address of memory area that can be used for&#xA;  initial data and stack; please note that this must be&#xA;  writable memory that is working WITHOUT special&#xA;  initialization, i. e. you CANNOT use normal RAM which&#xA;  will become available only after programming the&#xA;  memory controller and running certain initialization&#xA;  sequences.&#xA;&#xA;  U-Boot uses the following memory types:&#xA;  - MPC8xx: IMMR (internal memory of the CPU)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_SCCR: System Clock and reset Control Register (15-27)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_OR_TIMING_SDRAM: SDRAM timing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_VIRT: Virtual Address of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_PHYxS: Physical Address of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_SIZE: Size of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_NAND_BUSWIDTH_16BIT Defined to tell the NAND controller that the NAND chip is using a 16 bit bus. Not all NAND drivers use this symbol. Example of drivers that use it: - drivers/mtd/nand/raw/ndfc.c - drivers/mtd/nand/raw/mxc_nand.c&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_NDFC_EBC0_CFG Sets the EBC0_CFG register for the NDFC. If not defined a default value will be used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_SPD_BUS_NUM If SPD EEPROM is on an I2C bus other than the first one, specify here. Note that the value must resolve to something your driver can deal with.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_INTERACTIVE Enable interactive DDR debugging. See doc/README.fsl-ddr.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_SYNC_REFRESH Enable sync of refresh for multiple controllers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_BIST Enable built-in memory test for Freescale DDR controllers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_RMII Enable RMII mode for all FECs. Note that this is a global option, we can&#39;t have one FEC in standard MII mode and another in RMII mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_CRC32_VERIFY Add a verify option to the crc32 command. The syntax is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  =&amp;gt; crc32 -v &amp;lt;address&amp;gt; &amp;lt;count&amp;gt; &amp;lt;crc32&amp;gt;&#xA;&#xA;  Where address/count indicate a memory area&#xA;  and crc32 is the correct crc32 which the&#xA;  area should have.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_LOOPW Add the &#34;loopw&#34; memory command. This only takes effect if the memory commands are activated globally (CONFIG_CMD_MEMORY).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_CMD_MX_CYCLIC Add the &#34;mdc&#34; and &#34;mwc&#34; memory commands. These are cyclic &#34;md/mw&#34; commands. Examples:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  =&amp;gt; mdc.b 10 4 500&#xA;  This command will print 4 bytes (10,11,12,13) each 500 ms.&#xA;&#xA;  =&amp;gt; mwc.l 100 12345678 10&#xA;  This command will write 12345678 to address 100 all 10 ms.&#xA;&#xA;  This only takes effect if the memory commands are activated&#xA;  globally (CONFIG_CMD_MEMORY).&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_XPL_BUILD Set when the currently running compilation is for an artifact that will end up in one of the &#39;xPL&#39; builds, i.e. SPL, TPL or VPL. Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_TPL_BUILD Set when the currently running compilation is for an artifact that will end up in the TPL build (as opposed to SPL, VPL or U-Boot proper). Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_VPL_BUILD Set when the currently running compilation is for an artifact that will end up in the VPL build (as opposed to the SPL, TPL or U-Boot proper). Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_ARCH_MAP_SYSMEM Generally U-Boot (and in particular the md command) uses effective address. It is therefore not necessary to regard U-Boot address as virtual addresses that need to be translated to physical addresses. However, sandbox requires this, since it maintains its own little RAM buffer which contains all addressable memory. This option causes some memory accesses to be mapped through map_sysmem() / unmap_sysmem().&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_X86_RESET_VECTOR If defined, the x86 reset vector code is included. This is not needed when U-Boot is running from Coreboot.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Freescale QE/FMAN Firmware Support:&lt;/h2&gt; &#xA;&lt;p&gt;The Freescale QUICCEngine (QE) and Frame Manager (FMAN) both support the loading of &#34;firmware&#34;, which is encoded in the QE firmware binary format. This firmware often needs to be loaded during U-Boot booting, so macros are used to identify the storage device (NOR flash, SPI, etc) and the address within that device.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_FMAN_FW_ADDR The address in the storage device where the FMAN microcode is located. The meaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro is also specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FW_ADDR The address in the storage device where the QE microcode is located. The meaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro is also specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_LENGTH The maximum possible size of the firmware. The firmware binary format has a field that specifies the actual size of the firmware, but it might not be possible to read any part of the firmware unless some local storage is allocated to hold the entire firmware first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_NOR Specifies that QE/FMAN firmware is located in NOR flash, mapped as normal addressable memory via the LBC. CONFIG_SYS_FMAN_FW_ADDR is the virtual address in NOR flash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_NAND Specifies that QE/FMAN firmware is located in NAND flash. CONFIG_SYS_FMAN_FW_ADDR is the offset within NAND flash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_MMC Specifies that QE/FMAN firmware is located on the primary SD/MMC device. CONFIG_SYS_FMAN_FW_ADDR is the byte offset on that device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_REMOTE Specifies that QE/FMAN firmware is located in the remote (master) memory space. CONFIG_SYS_FMAN_FW_ADDR is a virtual address which can be mapped from slave TLB-&amp;gt;slave LAW-&amp;gt;slave SRIO or PCIE outbound window-&amp;gt;master inbound window-&amp;gt;master LAW-&amp;gt;the ucode address in master&#39;s memory space.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Freescale Layerscape Management Complex Firmware Support:&lt;/h2&gt; &#xA;&lt;p&gt;The Freescale Layerscape Management Complex (MC) supports the loading of &#34;firmware&#34;. This firmware often needs to be loaded during U-Boot booting, so macros are used to identify the storage device (NOR flash, SPI, etc) and the address within that device.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CONFIG_FSL_MC_ENET Enable the MC driver for Layerscape SoCs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Freescale Layerscape Debug Server Support:&lt;/h2&gt; &#xA;&lt;p&gt;The Freescale Layerscape Debug Server Support supports the loading of &#34;Debug Server firmware&#34; and triggering SP boot-rom. This firmware often needs to be loaded during U-Boot booting.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CONFIG_SYS_MC_RSV_MEM_ALIGN Define alignment of reserved memory MC requires&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building the Software:&lt;/h1&gt; &#xA;&lt;p&gt;Building U-Boot has been tested in several native build environments and in many different cross environments. Of course we cannot support all possibly existing versions of cross development tools in all (potentially obsolete) versions. In case of tool chain problems we recommend to use the ELDK (see &lt;a href=&#34;https://www.denx.de/wiki/DULG/ELDK&#34;&gt;https://www.denx.de/wiki/DULG/ELDK&lt;/a&gt;) which is extensively used to build and test U-Boot.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using a native environment, it is assumed that you have GNU cross compiling tools available in your path. In this case, you must set the environment variable CROSS_COMPILE in your shell. Note that no changes to the Makefile or any other source files are necessary. For example using the ELDK on a 4xx CPU, please enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ CROSS_COMPILE=ppc_4xx-&#xA;$ export CROSS_COMPILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;U-Boot is intended to be simple to build. After installing the sources you must configure U-Boot for one specific board type. This is done by typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make NAME_defconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &#34;NAME_defconfig&#34; is the name of one of the existing configu- rations; see configs/*_defconfig for supported names.&lt;/p&gt; &#xA;&lt;p&gt;Note: for some boards special configuration names may exist; check if additional information is available from the board vendor; for instance, the TQM823L systems are available without (standard) or with LCD support. You can select such additional &#34;features&#34; when choosing the configuration, i. e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  make TQM823L_defconfig&#xA;- will configure for a plain TQM823L, i. e. no LCD support&#xA;&#xA;  make TQM823L_LCD_defconfig&#xA;- will configure for a TQM823L with U-Boot console on LCD&#xA;&#xA;  etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, type &#34;make all&#34;, and you should get some working U-Boot images ready for download to / installation on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;u-boot.bin&#34; is a raw binary image&lt;/li&gt; &#xA; &lt;li&gt;&#34;u-boot&#34; is an image in ELF binary format&lt;/li&gt; &#xA; &lt;li&gt;&#34;u-boot.srec&#34; is in Motorola S-Record format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;User specific CPPFLAGS, AFLAGS and CFLAGS can be passed to the compiler by setting the according environment variables KCPPFLAGS, KAFLAGS and KCFLAGS. For example to treat all compiler warnings as errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make KCFLAGS=-Werror&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please be aware that the Makefiles assume you are using GNU make, so for instance on NetBSD you might need to use &#34;gmake&#34; instead of native &#34;make&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If the system board that you have is not listed, then you will need to port U-Boot to your hardware platform. To do this, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new directory to hold your board specific code. Add any files you need. In your board directory, you will need at least the &#34;Makefile&#34; and a &#34;&#xA;  &lt;board&gt;&#xA;   .c&#34;.&#xA;  &lt;/board&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new configuration file &#34;include/configs/&#xA;  &lt;board&gt;&#xA;   .h&#34; for your board.&#xA;  &lt;/board&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re porting U-Boot to a new CPU, then also create a new directory to hold your CPU specific code. Add any files you need.&lt;/li&gt; &#xA; &lt;li&gt;Run &#34;make &#xA;  &lt;board&gt;&#xA;   _defconfig&#34; with your new name.&#xA;  &lt;/board&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type &#34;make&#34;, and you should get a working &#34;u-boot.srec&#34; file to be installed on your target system.&lt;/li&gt; &#xA; &lt;li&gt;Debug and solve any problems that might arise. [Of course, this last step is much harder than it sounds.]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Testing of U-Boot Modifications, Ports to New Hardware, etc.:&lt;/h1&gt; &#xA;&lt;p&gt;If you have modified U-Boot sources (for instance added a new board or support for new devices, a new CPU, etc.) you are expected to provide feedback to the other developers. The feedback normally takes the form of a &#34;patch&#34;, i.e. a context diff against a certain (latest official or latest in the git repository) version of U-Boot sources.&lt;/p&gt; &#xA;&lt;p&gt;But before you submit such a patch, please verify that your modifi- cation did not break existing code. At least make sure that &lt;em&gt;ALL&lt;/em&gt; of the supported boards compile WITHOUT ANY compiler warnings. To do so, just run the buildman script (tools/buildman/buildman), which will configure and build U-Boot for ALL supported system. Be warned, this will take a while. Please see the buildman README, or run &#39;buildman -H&#39; for documentation.&lt;/p&gt; &#xA;&lt;p&gt;See also &#34;U-Boot Porting Guide&#34; below.&lt;/p&gt; &#xA;&lt;h1&gt;Monitor Commands - Overview:&lt;/h1&gt; &#xA;&lt;p&gt;go - start application at address &#39;addr&#39; run - run commands in an environment variable bootm - boot application image from memory bootp - boot image via network using BootP/TFTP protocol bootz - boot zImage from memory tftpboot- boot image via network using TFTP protocol and env variables &#34;ipaddr&#34; and &#34;serverip&#34; (and eventually &#34;gatewayip&#34;) tftpput - upload a file via network using TFTP protocol rarpboot- boot image via network using RARP/TFTP protocol diskboot- boot from IDE devicebootd - boot default, i.e., run &#39;bootcmd&#39; loads - load S-Record file over serial line loadb - load binary file over serial line (kermit mode) loadm - load binary blob from source address to destination address md - memory display mm - memory modify (auto-incrementing) nm - memory modify (constant address) mw - memory write (fill) ms - memory search cp - memory copy cmp - memory compare crc32 - checksum calculation i2c - I2C sub-system sspi - SPI utility commands base - print or set address offset printenv- print environment variables pwm - control pwm channels seama - load SEAMA NAND image setenv - set environment variables saveenv - save environment variables to persistent storage protect - enable or disable FLASH write protection erase - erase FLASH memory flinfo - print FLASH memory information nand - NAND memory operations (see doc/README.nand) bdinfo - print Board Info structure iminfo - print header information for application image coninfo - print console devices and informations ide - IDE sub-system loop - infinite loop on address range loopw - infinite write loop on address range mtest - simple RAM test icache - enable or disable instruction cache dcache - enable or disable data cache reset - Perform RESET of the CPU echo - echo args to console version - print monitor version help - print online help ? - alias for &#39;help&#39;&lt;/p&gt; &#xA;&lt;h1&gt;Monitor Commands - Detailed Description:&lt;/h1&gt; &#xA;&lt;p&gt;TODO.&lt;/p&gt; &#xA;&lt;p&gt;For now: just type &#34;help &lt;command&gt;&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;Note for Redundant Ethernet Interfaces:&lt;/h1&gt; &#xA;&lt;p&gt;Some boards come with redundant Ethernet interfaces; U-Boot supports such configurations and is capable of automatic selection of a &#34;working&#34; interface when needed. MAC assignment works as follows:&lt;/p&gt; &#xA;&lt;p&gt;Network interfaces are numbered eth0, eth1, eth2, ... Corresponding MAC addresses can be stored in the environment as &#34;ethaddr&#34; (=&amp;gt;eth0), &#34;eth1addr&#34; (=&amp;gt;eth1), &#34;eth2addr&#34;, ...&lt;/p&gt; &#xA;&lt;p&gt;If the network interface stores some valid MAC address (for instance in SROM), this is used as default address if there is NO correspon- ding setting in the environment; if the corresponding environment variable is set, this overrides the settings in the card; that means:&lt;/p&gt; &#xA;&lt;p&gt;o If the SROM has a valid MAC address, and there is no address in the environment, the SROM&#39;s address is used.&lt;/p&gt; &#xA;&lt;p&gt;o If there is no valid address in the SROM, and a definition in the environment exists, then the value from the environment variable is used.&lt;/p&gt; &#xA;&lt;p&gt;o If both the SROM and the environment contain a MAC address, and both addresses are the same, this MAC address is used.&lt;/p&gt; &#xA;&lt;p&gt;o If both the SROM and the environment contain a MAC address, and the addresses differ, the value from the environment is used and a warning is printed.&lt;/p&gt; &#xA;&lt;p&gt;o If neither SROM nor the environment contain a MAC address, an error is raised. If CONFIG_NET_RANDOM_ETHADDR is defined, then in this case a random, locally-assigned MAC is used.&lt;/p&gt; &#xA;&lt;p&gt;If Ethernet drivers implement the &#39;write_hwaddr&#39; function, valid MAC addresses will be programmed into hardware as part of the initialization process. This may be skipped by setting the appropriate &#39;ethmacskip&#39; environment variable. The naming convention is as follows: &#34;ethmacskip&#34; (=&amp;gt;eth0), &#34;eth1macskip&#34; (=&amp;gt;eth1) etc.&lt;/p&gt; &#xA;&lt;h1&gt;Image Formats:&lt;/h1&gt; &#xA;&lt;p&gt;U-Boot is capable of booting (and performing other auxiliary operations on) images in two formats:&lt;/p&gt; &#xA;&lt;h2&gt;New uImage format (FIT)&lt;/h2&gt; &#xA;&lt;p&gt;Flexible and powerful format based on Flattened Image Tree -- FIT (similar to Flattened Device Tree). It allows the use of images with multiple components (several kernels, ramdisks, etc.), with contents protected by SHA1, MD5 or CRC32. More details are found in the doc/uImage.FIT directory.&lt;/p&gt; &#xA;&lt;h2&gt;Old uImage format&lt;/h2&gt; &#xA;&lt;p&gt;Old image format is based on binary files which can be basically anything, preceded by a special header; see the definitions in include/image.h for details; basically, the header defines the following image properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Target Operating System (Provisions for OpenBSD, NetBSD, FreeBSD, 4.4BSD, Linux, SVR4, Esix, Solaris, Irix, SCO, Dell, NCR, VxWorks, LynxOS, pSOS, QNX, RTEMS, INTEGRITY; Currently supported: Linux, NetBSD, VxWorks, QNX, RTEMS, INTEGRITY).&lt;/li&gt; &#xA; &lt;li&gt;Target CPU Architecture (Provisions for Alpha, ARM, Intel x86, IA64, MIPS, Nios II, PowerPC, IBM S390, SuperH, Sparc, Sparc 64 Bit; Currently supported: ARM, Intel x86, MIPS, Nios II, PowerPC).&lt;/li&gt; &#xA; &lt;li&gt;Compression Type (uncompressed, gzip, bzip2)&lt;/li&gt; &#xA; &lt;li&gt;Load Address&lt;/li&gt; &#xA; &lt;li&gt;Entry Point&lt;/li&gt; &#xA; &lt;li&gt;Image Name&lt;/li&gt; &#xA; &lt;li&gt;Image Timestamp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The header is marked by a special Magic Number, and both the header and the data portions of the image are secured against corruption by CRC32 checksums.&lt;/p&gt; &#xA;&lt;h1&gt;Linux Support:&lt;/h1&gt; &#xA;&lt;p&gt;Although U-Boot should support any OS or standalone application easily, the main focus has always been on Linux during the design of U-Boot.&lt;/p&gt; &#xA;&lt;p&gt;U-Boot includes many features that so far have been part of some special &#34;boot loader&#34; code within the Linux kernel. Also, any &#34;initrd&#34; images to be used are no longer part of one big Linux image; instead, kernel and &#34;initrd&#34; are separate images. This implementation serves several purposes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the same features can be used for other OS or standalone applications (for instance: using compressed images to reduce the Flash memory footprint)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;it becomes much easier to port new Linux kernel versions because lots of low-level, hardware dependent stuff are done by U-Boot&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the same Linux kernel image can now be used with different &#34;initrd&#34; images; of course this also means that different kernel images can be run with the same &#34;initrd&#34;. This makes testing easier (you don&#39;t have to build a new &#34;zImage.initrd&#34; Linux image when you just change a file in your &#34;initrd&#34;). Also, a field-upgrade of the software is easier now.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Linux HOWTO:&lt;/h1&gt; &#xA;&lt;h2&gt;Porting Linux to U-Boot based systems:&lt;/h2&gt; &#xA;&lt;p&gt;U-Boot cannot save you from doing all the necessary modifications to configure the Linux device drivers for use with your target hardware (no, we don&#39;t intend to provide a full virtual machine interface to Linux :-).&lt;/p&gt; &#xA;&lt;p&gt;But now you can ignore ALL boot loader code (in arch/powerpc/mbxboot).&lt;/p&gt; &#xA;&lt;p&gt;Just make sure your machine specific header file (for instance include/asm-ppc/tqm8xx.h) includes the same definition of the Board Information structure as we define in include/asm-&#xA; &lt;arch&gt;&#xA;  /u-boot.h, and make sure that your definition of IMAP_ADDR uses the same value as your U-Boot configuration in CONFIG_SYS_IMMR.&#xA; &lt;/arch&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that U-Boot now has a driver model, a unified model for drivers. If you are adding a new driver, plumb it into driver model. If there is no uclass available, you are encouraged to create one. See doc/driver-model.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring the Linux kernel:&lt;/h2&gt; &#xA;&lt;p&gt;No specific requirements for U-Boot. Make sure you have some root device (initial ramdisk, NFS) for your target system.&lt;/p&gt; &#xA;&lt;h2&gt;Building a Linux Image:&lt;/h2&gt; &#xA;&lt;p&gt;With U-Boot, &#34;normal&#34; build targets like &#34;zImage&#34; or &#34;bzImage&#34; are not used. If you use recent kernel source, a new build target &#34;uImage&#34; will exist which automatically builds an image usable by U-Boot. Most older kernels also have support for a &#34;pImage&#34; target, which was introduced for our predecessor project PPCBoot and uses a 100% compatible format.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make TQM850L_defconfig&#xA;make oldconfig&#xA;make dep&#xA;make uImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;uImage&#34; build target uses a special tool (in &#39;tools/mkimage&#39;) to encapsulate a compressed Linux kernel image with header information, CRC32 checksum etc. for use with U-Boot. This is what we are doing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;build a standard &#34;vmlinux&#34; kernel image (in ELF binary format):&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;convert the kernel into a raw binary image:&lt;/p&gt; &lt;p&gt;${CROSS_COMPILE}-objcopy -O binary &lt;br&gt; -R .note -R .comment &lt;br&gt; -S vmlinux linux.bin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;compress the binary image:&lt;/p&gt; &lt;p&gt;gzip -9 linux.bin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;package compressed binary image for U-Boot:&lt;/p&gt; &lt;p&gt;mkimage -A ppc -O linux -T kernel -C gzip &lt;br&gt; -a 0 -e 0 -n &#34;Linux Kernel Image&#34; &lt;br&gt; -d linux.bin.gz uImage&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &#34;mkimage&#34; tool can also be used to create ramdisk images for use with U-Boot, either separated from the Linux kernel image, or combined into one file. &#34;mkimage&#34; encapsulates the images with a 64 byte header containing information about target architecture, operating system, image type, compression method, entry points, time stamp, CRC32 checksums, etc.&lt;/p&gt; &#xA;&lt;p&gt;&#34;mkimage&#34; can be called in two ways: to verify existing images and print the header information, or to build new images.&lt;/p&gt; &#xA;&lt;p&gt;In the first form (with &#34;-l&#34; option) mkimage lists the information contained in the header of an existing U-Boot image; this includes checksum verification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/mkimage -l image&#xA;  -l ==&amp;gt; list image header information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second form (with &#34;-d&#34; option) is used to build a U-Boot image from a &#34;data file&#34; which is used as image payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/mkimage -A arch -O os -T type -C comp -a addr -e ep \&#xA;&#x9;      -n name -d data_file image&#xA;  -A ==&amp;gt; set architecture to &#39;arch&#39;&#xA;  -O ==&amp;gt; set operating system to &#39;os&#39;&#xA;  -T ==&amp;gt; set image type to &#39;type&#39;&#xA;  -C ==&amp;gt; set compression type &#39;comp&#39;&#xA;  -a ==&amp;gt; set load address to &#39;addr&#39; (hex)&#xA;  -e ==&amp;gt; set entry point to &#39;ep&#39; (hex)&#xA;  -n ==&amp;gt; set image name to &#39;name&#39;&#xA;  -d ==&amp;gt; use image data from &#39;datafile&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Right now, all Linux kernels for PowerPC systems use the same load address (0x00000000), but the entry point address depends on the kernel version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.2.x kernels have the entry point at 0x0000000C,&lt;/li&gt; &#xA; &lt;li&gt;2.3.x and later kernels have the entry point at 0x00000000.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So a typical call to build a U-Boot image would read:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -n &#39;2.4.4 kernel for TQM850L&#39; \&#xA;&amp;gt; -A ppc -O linux -T kernel -C gzip -a 0 -e 0 \&#xA;&amp;gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz \&#xA;&amp;gt; examples/uImage.TQM850L&#xA;Image Name:   2.4.4 kernel for TQM850L&#xA;Created:      Wed Jul 19 02:34:59 2000&#xA;Image Type:   PowerPC Linux Kernel Image (gzip compressed)&#xA;Data Size:    335725 Bytes = 327.86 kB = 0.32 MB&#xA;Load Address: 0x00000000&#xA;Entry Point:  0x00000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To verify the contents of the image (or check for corruption):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -l examples/uImage.TQM850L&#xA;Image Name:   2.4.4 kernel for TQM850L&#xA;Created:      Wed Jul 19 02:34:59 2000&#xA;Image Type:   PowerPC Linux Kernel Image (gzip compressed)&#xA;Data Size:    335725 Bytes = 327.86 kB = 0.32 MB&#xA;Load Address: 0x00000000&#xA;Entry Point:  0x00000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: for embedded systems where boot time is critical you can trade speed for memory and install an UNCOMPRESSED image instead: this needs more space in Flash, but boots much faster since it does not need to be uncompressed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-&amp;gt; gunzip /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz&#xA;-&amp;gt; tools/mkimage -n &#39;2.4.4 kernel for TQM850L&#39; \&#xA;&amp;gt; -A ppc -O linux -T kernel -C none -a 0 -e 0 \&#xA;&amp;gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux \&#xA;&amp;gt; examples/uImage.TQM850L-uncompressed&#xA;Image Name:   2.4.4 kernel for TQM850L&#xA;Created:      Wed Jul 19 02:34:59 2000&#xA;Image Type:   PowerPC Linux Kernel Image (uncompressed)&#xA;Data Size:    792160 Bytes = 773.59 kB = 0.76 MB&#xA;Load Address: 0x00000000&#xA;Entry Point:  0x00000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar you can build U-Boot images from a &#39;ramdisk.image.gz&#39; file when your kernel is intended to use an initial ramdisk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -n &#39;Simple Ramdisk Image&#39; \&#xA;&amp;gt; -A ppc -O linux -T ramdisk -C gzip \&#xA;&amp;gt; -d /LinuxPPC/images/SIMPLE-ramdisk.image.gz examples/simple-initrd&#xA;Image Name:   Simple Ramdisk Image&#xA;Created:      Wed Jan 12 14:01:50 2000&#xA;Image Type:   PowerPC Linux RAMDisk Image (gzip compressed)&#xA;Data Size:    566530 Bytes = 553.25 kB = 0.54 MB&#xA;Load Address: 0x00000000&#xA;Entry Point:  0x00000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;dumpimage&#34; tool can be used to disassemble or list the contents of images built by mkimage. See dumpimage&#39;s help output (-h) for details.&lt;/p&gt; &#xA;&lt;h2&gt;Installing a Linux Image:&lt;/h2&gt; &#xA;&lt;p&gt;To downloading a U-Boot image over the serial (console) interface, you must convert the image to S-Record format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;objcopy -I binary -O srec examples/image examples/image.srec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#39;objcopy&#39; does not understand the information in the U-Boot image header, so the resulting S-Record file will be relative to address 0x00000000. To load it to a given address, you need to specify the target address as &#39;offset&#39; parameter with the &#39;loads&#39; command.&lt;/p&gt; &#xA;&lt;p&gt;Example: install the image to address 0x40100000 (which on the TQM8xxL is in the first Flash bank):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt; erase 40100000 401FFFFF&#xA;&#xA;.......... done&#xA;Erased 8 sectors&#xA;&#xA;=&amp;gt; loads 40100000&#xA;## Ready for S-Record download ...&#xA;~&amp;gt;examples/image.srec&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 ...&#xA;...&#xA;15989 15990 15991 15992&#xA;[file transfer complete]&#xA;[connected]&#xA;## Start Addr = 0x00000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the success of the download using the &#39;iminfo&#39; command; this includes a checksum verification so you can be sure no data corruption happened:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt; imi 40100000&#xA;&#xA;## Checking Image at 40100000 ...&#xA;   Image Name:&#x9; 2.2.13 for initrd on TQM850L&#xA;   Image Type:&#x9; PowerPC Linux Kernel Image (gzip compressed)&#xA;   Data Size:&#x9; 335725 Bytes = 327 kB = 0 MB&#xA;   Load Address: 00000000&#xA;   Entry Point:&#x9; 0000000c&#xA;   Verifying Checksum ... OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Boot Linux:&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;bootm&#34; command is used to boot an application that is stored in memory (RAM or Flash). In case of a Linux kernel image, the contents of the &#34;bootargs&#34; environment variable is passed to the kernel as parameters. You can check and modify this variable using the &#34;printenv&#34; and &#34;setenv&#34; commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt; printenv bootargs&#xA;bootargs=root=/dev/ram&#xA;&#xA;=&amp;gt; setenv bootargs root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2&#xA;&#xA;=&amp;gt; printenv bootargs&#xA;bootargs=root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2&#xA;&#xA;=&amp;gt; bootm 40020000&#xA;## Booting Linux kernel at 40020000 ...&#xA;   Image Name:&#x9; 2.2.13 for NFS on TQM850L&#xA;   Image Type:&#x9; PowerPC Linux Kernel Image (gzip compressed)&#xA;   Data Size:&#x9; 381681 Bytes = 372 kB = 0 MB&#xA;   Load Address: 00000000&#xA;   Entry Point:&#x9; 0000000c&#xA;   Verifying Checksum ... OK&#xA;   Uncompressing Kernel Image ... OK&#xA;Linux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:35:17 MEST 2000&#xA;Boot arguments: root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2&#xA;time_init: decrementer frequency = 187500000/60&#xA;Calibrating delay loop... 49.77 BogoMIPS&#xA;Memory: 15208k available (700k kernel code, 444k data, 32k init) [c0000000,c1000000]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to boot a Linux kernel with initial RAM disk, you pass the memory addresses of both the kernel and the initrd image (PPBCOOT format!) to the &#34;bootm&#34; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt; imi 40100000 40200000&#xA;&#xA;## Checking Image at 40100000 ...&#xA;   Image Name:&#x9; 2.2.13 for initrd on TQM850L&#xA;   Image Type:&#x9; PowerPC Linux Kernel Image (gzip compressed)&#xA;   Data Size:&#x9; 335725 Bytes = 327 kB = 0 MB&#xA;   Load Address: 00000000&#xA;   Entry Point:&#x9; 0000000c&#xA;   Verifying Checksum ... OK&#xA;&#xA;## Checking Image at 40200000 ...&#xA;   Image Name:&#x9; Simple Ramdisk Image&#xA;   Image Type:&#x9; PowerPC Linux RAMDisk Image (gzip compressed)&#xA;   Data Size:&#x9; 566530 Bytes = 553 kB = 0 MB&#xA;   Load Address: 00000000&#xA;   Entry Point:&#x9; 00000000&#xA;   Verifying Checksum ... OK&#xA;&#xA;=&amp;gt; bootm 40100000 40200000&#xA;## Booting Linux kernel at 40100000 ...&#xA;   Image Name:&#x9; 2.2.13 for initrd on TQM850L&#xA;   Image Type:&#x9; PowerPC Linux Kernel Image (gzip compressed)&#xA;   Data Size:&#x9; 335725 Bytes = 327 kB = 0 MB&#xA;   Load Address: 00000000&#xA;   Entry Point:&#x9; 0000000c&#xA;   Verifying Checksum ... OK&#xA;   Uncompressing Kernel Image ... OK&#xA;## Loading RAMDisk Image at 40200000 ...&#xA;   Image Name:&#x9; Simple Ramdisk Image&#xA;   Image Type:&#x9; PowerPC Linux RAMDisk Image (gzip compressed)&#xA;   Data Size:&#x9; 566530 Bytes = 553 kB = 0 MB&#xA;   Load Address: 00000000&#xA;   Entry Point:&#x9; 00000000&#xA;   Verifying Checksum ... OK&#xA;   Loading Ramdisk ... OK&#xA;Linux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:32:08 MEST 2000&#xA;Boot arguments: root=/dev/ram&#xA;time_init: decrementer frequency = 187500000/60&#xA;Calibrating delay loop... 49.77 BogoMIPS&#xA;...&#xA;RAMDISK: Compressed image found at block 0&#xA;VFS: Mounted root (ext2 filesystem).&#xA;&#xA;bash#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Boot Linux and pass a flat device tree:&lt;/h2&gt; &#xA;&lt;p&gt;First, U-Boot must be compiled with the appropriate defines. See the section titled &#34;Linux Kernel Interface&#34; above for a more in depth explanation. The following is an example of how to start a kernel and pass an updated flat device tree:&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; print oftaddr oftaddr=0x300000 =&amp;gt; print oft oft=oftrees/mpc8540ads.dtb =&amp;gt; tftp $oftaddr $oft Speed: 1000, full duplex Using TSEC0 device TFTP from server 192.168.1.1; our IP address is 192.168.1.101 Filename &#39;oftrees/mpc8540ads.dtb&#39;. Load address: 0x300000 Loading: # done Bytes transferred = 4106 (100a hex) =&amp;gt; tftp $loadaddr $bootfile Speed: 1000, full duplex Using TSEC0 device TFTP from server 192.168.1.1; our IP address is 192.168.1.2 Filename &#39;uImage&#39;. Load address: 0x200000 Loading:############ done Bytes transferred = 1029407 (fb51f hex) =&amp;gt; print loadaddr loadaddr=200000 =&amp;gt; print oftaddr oftaddr=0x300000 =&amp;gt; bootm $loadaddr - $oftaddr&lt;/p&gt; &#xA;&lt;h2&gt;Booting image at 00200000 ...&lt;/h2&gt; &#xA;&lt;p&gt;Image Name: Linux-2.6.17-dirty Image Type: PowerPC Linux Kernel Image (gzip compressed) Data Size: 1029343 Bytes = 1005.2 kB Load Address: 00000000 Entry Point: 00000000 Verifying Checksum ... OK Uncompressing Kernel Image ... OK Booting using flat device tree at 0x300000 Using MPC85xx ADS machine description Memory CAM mapping: CAM0=256Mb, CAM1=256Mb, CAM2=0Mb residual: 0Mb [snip]&lt;/p&gt; &#xA;&lt;h2&gt;More About U-Boot Image Types:&lt;/h2&gt; &#xA;&lt;p&gt;U-Boot supports the following image types:&lt;/p&gt; &#xA;&lt;p&gt;&#34;Standalone Programs&#34; are directly runnable in the environment provided by U-Boot; it is expected that (if they behave well) you can continue to work in U-Boot after return from the Standalone Program. &#34;OS Kernel Images&#34; are usually images of some Embedded OS which will take over control completely. Usually these programs will install their own set of exception handlers, device drivers, set up the MMU, etc. - this means, that you cannot expect to re-enter U-Boot except by resetting the CPU. &#34;RAMDisk Images&#34; are more or less just data blocks, and their parameters (address, size) are passed to an OS kernel that is being started. &#34;Multi-File Images&#34; contain several images, typically an OS (Linux) kernel image and one or more data images like RAMDisks. This construct is useful for instance when you want to boot over the network using BOOTP etc., where the boot server provides just a single image file, but you want to get for instance an OS kernel and a RAMDisk image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Multi-File Images&#34; start with a list of image sizes, each&#xA;image size (in bytes) specified by an &#34;uint32_t&#34; in network&#xA;byte order. This list is terminated by an &#34;(uint32_t)0&#34;.&#xA;Immediately after the terminating 0 follow the images, one by&#xA;one, all aligned on &#34;uint32_t&#34; boundaries (size rounded up to&#xA;a multiple of 4 bytes).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Firmware Images&#34; are binary images containing firmware (like U-Boot or FPGA images) which usually will be programmed to flash memory.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Script files&#34; are command sequences that will be executed by U-Boot&#39;s command interpreter; this feature is especially useful when you configure U-Boot to use a real shell (hush) as command interpreter.&lt;/p&gt; &#xA;&lt;h2&gt;Booting the Linux zImage:&lt;/h2&gt; &#xA;&lt;p&gt;On some platforms, it&#39;s possible to boot Linux zImage. This is done using the &#34;bootz&#34; command. The syntax of &#34;bootz&#34; command is the same as the syntax of &#34;bootm&#34; command.&lt;/p&gt; &#xA;&lt;p&gt;Note, defining the CONFIG_SUPPORT_RAW_INITRD allows user to supply kernel with raw initrd images. The syntax is slightly different, the address of the initrd must be augmented by it&#39;s size, in the following format: &#34;&#xA; &lt;initrd addres&gt;&#xA;  :&#xA;  &lt;initrd size&gt;&#xA;   &#34;.&#xA;  &lt;/initrd&gt;&#xA; &lt;/initrd&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Standalone HOWTO:&lt;/h1&gt; &#xA;&lt;p&gt;One of the features of U-Boot is that you can dynamically load and run &#34;standalone&#34; applications, which can use some resources of U-Boot like console I/O functions or interrupt services.&lt;/p&gt; &#xA;&lt;p&gt;Two simple examples are included with the sources:&lt;/p&gt; &#xA;&lt;h2&gt;&#34;Hello World&#34; Demo:&lt;/h2&gt; &#xA;&lt;p&gt;&#39;examples/hello_world.c&#39; contains a small &#34;Hello World&#34; Demo application; it is automatically compiled when you build U-Boot. It&#39;s configured to run at address 0x00040004, so you can play with it like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt; loads&#xA;## Ready for S-Record download ...&#xA;~&amp;gt;examples/hello_world.srec&#xA;1 2 3 4 5 6 7 8 9 10 11 ...&#xA;[file transfer complete]&#xA;[connected]&#xA;## Start Addr = 0x00040004&#xA;&#xA;=&amp;gt; go 40004 Hello World! This is a test.&#xA;## Starting application at 0x00040004 ...&#xA;Hello World&#xA;argc = 7&#xA;argv[0] = &#34;40004&#34;&#xA;argv[1] = &#34;Hello&#34;&#xA;argv[2] = &#34;World!&#34;&#xA;argv[3] = &#34;This&#34;&#xA;argv[4] = &#34;is&#34;&#xA;argv[5] = &#34;a&#34;&#xA;argv[6] = &#34;test.&#34;&#xA;argv[7] = &#34;&amp;lt;NULL&amp;gt;&#34;&#xA;Hit any key to exit ...&#xA;&#xA;## Application terminated, rc = 0x0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example, which demonstrates how to register a CPM interrupt handler with the U-Boot code, can be found in &#39;examples/timer.c&#39;. Here, a CPM timer is set up to generate an interrupt every second. The interrupt service routine is trivial, just printing a &#39;.&#39; character, but this is just a demo program. The application can be controlled by the following keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;? - print current values og the CPM Timer registers&#xA;b - enable interrupts and start timer&#xA;e - stop timer and disable interrupts&#xA;q - quit application&#xA;&#xA;=&amp;gt; loads&#xA;## Ready for S-Record download ...&#xA;~&amp;gt;examples/timer.srec&#xA;1 2 3 4 5 6 7 8 9 10 11 ...&#xA;[file transfer complete]&#xA;[connected]&#xA;## Start Addr = 0x00040004&#xA;&#xA;=&amp;gt; go 40004&#xA;## Starting application at 0x00040004 ...&#xA;TIMERS=0xfff00980&#xA;Using timer 1&#xA;  tgcr @ 0xfff00980, tmr @ 0xfff00990, trr @ 0xfff00994, tcr @ 0xfff00998, tcn @ 0xfff0099c, ter @ 0xfff009b0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hit &#39;b&#39;: [q, b, e, ?] Set interval 1000000 us Enabling timer Hit &#39;?&#39;: [q, b, e, ?] ........ tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0xef6, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x2ad4, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x1efc, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x169d, ter=0x0 Hit &#39;e&#39;: [q, b, e, ?] ...Stopping timer Hit &#39;q&#39;: [q, b, e, ?] ## Application terminated, rc = 0x0&lt;/p&gt; &#xA;&lt;h1&gt;Implementation Internals:&lt;/h1&gt; &#xA;&lt;p&gt;The following is not intended to be a complete description of every implementation detail. However, it should help to understand the inner workings of U-Boot and make it easier to port it to custom hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Initial Stack, Global Data:&lt;/h2&gt; &#xA;&lt;p&gt;The implementation of U-Boot is complicated by the fact that U-Boot starts running out of ROM (flash memory), usually without access to system RAM (because the memory controller is not initialized yet). This means that we don&#39;t have writable Data or BSS segments, and BSS is not initialized as zero. To be able to get a C environment working at all, we have to allocate at least a minimal stack. Implementation options for this are defined and restricted by the CPU used: Some CPU models provide on-chip memory (like the IMMR area on MPC8xx and MPC826x processors), on others (parts of) the data cache can be locked as (mis-) used as memory, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Chris Hallinan posted a good summary of these issues to the&#xA;U-Boot mailing list:&#xA;&#xA;Subject: RE: [U-Boot-Users] RE: More On Memory Bank x (nothingness)?&#xA;From: &#34;Chris Hallinan&#34; &amp;lt;clh@net1plus.com&amp;gt;&#xA;Date: Mon, 10 Feb 2003 16:43:46 -0500 (22:43 MET)&#xA;...&#xA;&#xA;Correct me if I&#39;m wrong, folks, but the way I understand it&#xA;is this: Using DCACHE as initial RAM for Stack, etc, does not&#xA;require any physical RAM backing up the cache. The cleverness&#xA;is that the cache is being used as a temporary supply of&#xA;necessary storage before the SDRAM controller is setup. It&#39;s&#xA;beyond the scope of this list to explain the details, but you&#xA;can see how this works by studying the cache architecture and&#xA;operation in the architecture and processor-specific manuals.&#xA;&#xA;OCM is On Chip Memory, which I believe the 405GP has 4K. It&#xA;is another option for the system designer to use as an&#xA;initial stack/RAM area prior to SDRAM being available. Either&#xA;option should work for you. Using CS 4 should be fine if your&#xA;board designers haven&#39;t used it for something that would&#xA;cause you grief during the initial boot! It is frequently not&#xA;used.&#xA;&#xA;CFG_SYS_INIT_RAM_ADDR should be somewhere that won&#39;t interfere&#xA;with your processor/board/system design. The default value&#xA;you will find in any recent u-boot distribution in&#xA;walnut.h should work for you. I&#39;d set it to a value larger&#xA;than your SDRAM module. If you have a 64MB SDRAM module, set&#xA;it above 400_0000. Just make sure your board has no resources&#xA;that are supposed to respond to that address! That code in&#xA;start.S has been around a while and should work as is when&#xA;you get the config right.&#xA;&#xA;-Chris Hallinan&#xA;DS4.COM, Inc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is essential to remember this, since it has some impact on the C code for the initialization procedures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialized global data (data segment) is read-only. Do not attempt to write it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Do not use any uninitialized global data (or implicitly initialized as zero data - BSS segment) at all - this is undefined, initiali- zation is performed later (when relocating to RAM).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stack space is very limited. Avoid big data buffers or things like that.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Having only the stack as writable memory limits means we cannot use normal global data to share information between the code. But it turned out that the implementation of U-Boot can be greatly simplified by making a global data structure (gd_t) available to all functions. We could pass a pointer to this data as argument to &lt;em&gt;all&lt;/em&gt; functions, but this would bloat the code. Instead we use a feature of the GCC compiler (Global Register Variables) to share the data: we place a pointer (gd) to the global data into a register which we reserve for this purpose.&lt;/p&gt; &#xA;&lt;p&gt;When choosing a register for such a purpose we are restricted by the relevant (E)ABI specifications for the current architecture, and by GCC&#39;s implementation.&lt;/p&gt; &#xA;&lt;p&gt;For PowerPC, the following registers have specific use: R1: stack pointer R2: reserved for system use R3-R4: parameter passing and return values R5-R10: parameter passing R13: small data area pointer R30: GOT pointer R31: frame pointer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(U-Boot also uses R12 as internal GOT pointer. r12&#xA;is a volatile register so r12 needs to be reset when&#xA;going back and forth between asm and C)&#xA;&#xA;==&amp;gt; U-Boot will use R2 to hold a pointer to the global data&#xA;&#xA;Note: on PPC, we could use a static initializer (since the&#xA;address of the global data structure is known at compile time),&#xA;but it turned out that reserving a register results in somewhat&#xA;smaller code - although the code savings are not that big (on&#xA;average for all boards 752 bytes for the whole U-Boot image,&#xA;624 text + 127 data).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On ARM, the following registers are used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;R0:&#x9;function argument word/integer result&#xA;R1-R3:&#x9;function argument word&#xA;R9:&#x9;platform specific&#xA;R10:&#x9;stack limit (used only if stack checking is enabled)&#xA;R11:&#x9;argument (frame) pointer&#xA;R12:&#x9;temporary workspace&#xA;R13:&#x9;stack pointer&#xA;R14:&#x9;link register&#xA;R15:&#x9;program counter&#xA;&#xA;==&amp;gt; U-Boot will use R9 to hold a pointer to the global data&#xA;&#xA;Note: on ARM, only R_ARM_RELATIVE relocations are supported.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Nios II, the ABI is documented here: &lt;a href=&#34;https://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf&#34;&gt;https://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;==&amp;gt; U-Boot will use gp to hold a pointer to the global data&#xA;&#xA;Note: on Nios II, we give &#34;-G0&#34; option to gcc and don&#39;t use gp&#xA;to access small data sections, so gp is free.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On RISC-V, the following registers are used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;x0: hard-wired zero (zero)&#xA;x1: return address (ra)&#xA;x2:&#x9;stack pointer (sp)&#xA;x3:&#x9;global pointer (gp)&#xA;x4:&#x9;thread pointer (tp)&#xA;x5:&#x9;link register (t0)&#xA;x8:&#x9;frame pointer (fp)&#xA;x10-x11:&#x9;arguments/return values (a0-1)&#xA;x12-x17:&#x9;arguments (a2-7)&#xA;x28-31:&#x9; temporaries (t3-6)&#xA;pc:&#x9;program counter (pc)&#xA;&#xA;==&amp;gt; U-Boot will use gp to hold a pointer to the global data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;System Initialization:&lt;/h2&gt; &#xA;&lt;p&gt;In the reset configuration, U-Boot starts at the reset entry point (on most PowerPC systems at address 0x00000100). Because of the reset configuration for CS0# this is a mirror of the on board Flash memory. To be able to re-map memory U-Boot then jumps to its link address. To be able to implement the initialization code in C, a (small!) initial stack is set up in the internal Dual Ported RAM (in case CPUs which provide such a feature like), or in a locked part of the data cache. After that, U-Boot initializes the CPU core, the caches and the SIU.&lt;/p&gt; &#xA;&lt;p&gt;Next, all (potentially) available memory banks are mapped using a preliminary mapping. For example, we put them on 512 MB boundaries (multiples of 0x20000000: SDRAM on 0x00000000 and 0x20000000, Flash on 0x40000000 and 0x60000000, SRAM on 0x80000000). Then UPM A is programmed for SDRAM access. Using the temporary configuration, a simple memory test is run that determines the size of the SDRAM banks.&lt;/p&gt; &#xA;&lt;p&gt;When there is more than one SDRAM bank, and the banks are of different size, the largest is mapped first. For equal size, the first bank (CS2#) is mapped first. The first mapping is always for address 0x00000000, with any additional banks following immediately to create contiguous memory starting from 0.&lt;/p&gt; &#xA;&lt;p&gt;Then, the monitor installs itself at the upper end of the SDRAM area and allocates memory for use by malloc() and for the global Board Info data; also, the exception vector code is copied to the low RAM pages, and the final stack is set up.&lt;/p&gt; &#xA;&lt;p&gt;Only after this relocation will you have a &#34;normal&#34; C environment; until that you are restricted in several ways, mostly because you are running from ROM, and because the code will have to be relocated to a new address in RAM.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;The U-Boot projects depends on contributions from the user community. If you want to participate, please, have a look at the &#39;General&#39; section of &lt;a href=&#34;https://docs.u-boot.org/en/latest/develop/index.html&#34;&gt;https://docs.u-boot.org/en/latest/develop/index.html&lt;/a&gt; where we describe coding standards and the patch submission process.&lt;/p&gt;</summary>
  </entry>
</feed>