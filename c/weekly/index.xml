<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:50:22Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CoretechR/OMOTE</title>
    <updated>2023-07-23T01:50:22Z</updated>
    <id>tag:github.com,2023-07-23:/CoretechR/OMOTE</id>
    <link href="https://github.com/CoretechR/OMOTE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Remote Using ESP32 and LVGL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OMOTE - Open Universal Remote&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CoretechR/OMOTE/main/P1030424_small.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;OMOTE is an ESP32 based open source universal remote. Its capacitive 2.8” touchscreen provides an intuitive and snappy user interface for switching devices and settings. No hub or docking station is required as the remote features infrared, Wi-Fi and Bluetooth connectivity. With its well optimized power consumption, OMOTE can run for months on a charge. And since the design files are open source, you can fully customize them to your devices and needs.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/CoretechR/OMOTE/main/Menu.gif&#34; width=&#34;50%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.8” 320x240px capacitive touchscreen&lt;/li&gt; &#xA; &lt;li&gt;Ergonomic, fully 3D printed case&lt;/li&gt; &#xA; &lt;li&gt;Responsive LVGL user interface&lt;/li&gt; &#xA; &lt;li&gt;Built in infrared, Wi-Fi and Bluetooth&lt;/li&gt; &#xA; &lt;li&gt;Press any button or simply lift the remote to wake it up&lt;/li&gt; &#xA; &lt;li&gt;Up to 6 months of battery life using a 2000 mAh Li-Po battery&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/platformio/platform-espressif32&#34;&gt;espressif32&lt;/a&gt;@^6.1.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lvgl/lvgl&#34;&gt;lvgl/lvgl&lt;/a&gt;@^8.3.4&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bodmer/TFT_eSPI&#34;&gt;bodmer/TFT_eSPI&lt;/a&gt;@^2.5.23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sparkfun/SparkFun_LIS3DH_Arduino_Library&#34;&gt;sparkfun/SparkFun LIS3DH Arduino Library&lt;/a&gt;@^1.0.3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crankyoldgit/IRremoteESP8266&#34;&gt;crankyoldgit/IRremoteESP8266&lt;/a&gt;@^2.8.4&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_FT6206_Library&#34;&gt;adafruit/Adafruit FT6206 Library&lt;/a&gt;@^1.0.6&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knolleary/PubSubClient&#34;&gt;knolleary/PubSubClient&lt;/a&gt;@^2.8&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Chris--A/Keypad&#34;&gt;Chris--A/Keypad&lt;/a&gt; (modified for inverted logic)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The State of This Project&lt;/h3&gt; &#xA;&lt;p&gt;The hardware for OMOTE is designed to be easily replicated, using 3D-printed parts, a 2-layer PCB and commonly available components. The mechanical and PCB design can be considered mostly complete. Still, there might be areas for improvement, for example the IR range could be further optimized.&lt;/p&gt; &#xA;&lt;p&gt;There is still a lot of work left to be done in terms of software. Right now, network settings, buttons and screen layouts are hard-coded. Controlling devices via MQTT is more of a tech demo at the moment and the network connection might not be perfectly reliable. Making the interface configurable, e.g. using a web interface, is a long-term goal.&lt;/p&gt; &#xA;&lt;h3&gt;To Do&lt;/h3&gt; &#xA;&lt;p&gt;Right now I have no idea if and when this will be done. But these would be the next steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Easier configuration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Document the current process of custromization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Store the configuration in Flash (e.g. as a editable json file)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add an interface for graphically editing the configuration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Complete the on-device settings page&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make the Wi-Fi connection more stable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/CoretechR/OMOTE/issues&#34;&gt;open issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/CoretechR/OMOTE/discussions&#34;&gt;discussions&lt;/a&gt; for a full list of proposed features (and known issues).&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;OMOTE might look like a finished product, but especially the software is &lt;em&gt;&lt;strong&gt;not &#34;consumer-friendly&#34;&lt;/strong&gt;&lt;/em&gt; yet. If you want to build your own remote and customize it to your devices, you should be &lt;em&gt;&lt;strong&gt;somewhat experienced with electronics and programming&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;p&gt;The central component of OMOTE is its PCB. If you want to build the PCB yourself, you will need SMT-reflow tools like a hot plate or a hot-air station. The 2-layered board and a solder paste stencil can be ordered from any PCB manufacturer using the &lt;a href=&#34;https://github.com/CoretechR/OMOTE/tree/main/PCB&#34;&gt;KiCad files&lt;/a&gt;. Manufacturers like OSHPARK or Aisler will accept these files directly. For JLCPCB or PCBWay, you can use their plugin to export the optimized Gerber files.&lt;/p&gt; &#xA;&lt;p&gt;I sourced the electrical parts from LCSC, but most of them should be available from the usual suppliers like Digikey or Mouser as well. You can check out the &lt;a href=&#34;https://github.com/CoretechR/OMOTE/raw/main/PCB/BOM.csv&#34;&gt;BOM&lt;/a&gt; for all the necessary components.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/CoretechR/OMOTE/main/parts.jpg&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/CoretechR/OMOTE/tree/main/CAD&#34;&gt;housing and buttons&lt;/a&gt; can be printed using PLA or PETG. I sliced the models with PrusaSlicer with a layer height of 0.25mm and printed them using ColorFabb PETG. It is important that the case part is printed with its flat side towards the print bed using lots of support structures. If your printer is well calibrated, the cover plate will snap onto the case.&lt;/p&gt; &#xA;&lt;h3&gt;Software&lt;/h3&gt; &#xA;&lt;p&gt;The remote can be charged and programmed via its USB-C port. Open the &lt;a href=&#34;https://github.com/CoretechR/OMOTE/tree/main/Platformio&#34;&gt;PlatformIO project&lt;/a&gt; to compile and upload the code to the ESP32. Within the code, you can edit the Wi-Fi settings and the button mapping. OMOTE features a IR-receiver which is not currently implemented in the code. You can still modify the &lt;a href=&#34;https://github.com/crankyoldgit/IRremoteESP8266/raw/master/examples/IRrecvDumpV2/IRrecvDumpV2.ino&#34;&gt;ESp8266-IRRemote RecvDump example&lt;/a&gt; to read the codes from your TV remote.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have a suggestion for an improvement, please fork the repo and create a pull request. You can also simply open an issue or for more general feature requests, head over to the discussions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the GPL v3 License. See &lt;a href=&#34;https://github.com/CoretechR/OMOTE/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Maximilian Kern - &lt;a href=&#34;https://raw.githubusercontent.com/CoretechR/OMOTE/main/kernm.de&#34;&gt;kernm.de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://hackaday.io/project/191752-omote-diy-universal-remote&#34;&gt;https://hackaday.io/project/191752-omote-diy-universal-remote&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jedisct1/libsodium</title>
    <updated>2023-07-23T01:50:22Z</updated>
    <id>tag:github.com,2023-07-23:/jedisct1/libsodium</id>
    <link href="https://github.com/jedisct1/libsodium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, portable, easy to use crypto library.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jedisct1/libsodium/actions&#34;&gt;&lt;img src=&#34;https://github.com/jedisct1/libsodium/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/jedisct1/libsodium&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/fu8s2elx25il98hj?svg=true&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/2397&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/2397/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jedisct1.visualstudio.com/Libsodium/_build/latest?definitionId=3&amp;amp;branchName=stable&#34;&gt;&lt;img src=&#34;https://jedisct1.visualstudio.com/Libsodium/_apis/build/status/jedisct1.libsodium?branchName=stable&#34; alt=&#34;Azure build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jedisct1/libsodium/actions&#34;&gt;&lt;img src=&#34;https://github.com/jedisct1/libsodium/workflows/CodeQL%20scan/badge.svg?sanitize=true&#34; alt=&#34;CodeQL scan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.github.com/jedisct1/libsodium/master/logo.png&#34; alt=&#34;libsodium&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Sodium is a new, easy-to-use software library for encryption, decryption, signatures, password hashing and more.&lt;/p&gt; &#xA;&lt;p&gt;It is a portable, cross-compilable, installable, packageable fork of &lt;a href=&#34;http://nacl.cr.yp.to/&#34;&gt;NaCl&lt;/a&gt;, with a compatible API, and an extended API to improve usability even further.&lt;/p&gt; &#xA;&lt;p&gt;Its goal is to provide all of the core operations needed to build higher-level cryptographic tools.&lt;/p&gt; &#xA;&lt;p&gt;Sodium supports a variety of compilers and operating systems, including Windows (with MingW or Visual Studio, x86 and x64), iOS, Android, as well as Javascript and Webassembly.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available on Gitbook and built from the &lt;a href=&#34;https://github.com/jedisct1/libsodium-doc&#34;&gt;libsodium-doc&lt;/a&gt; repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.libsodium.org&#34;&gt;libsodium documentation&lt;/a&gt; - online, requires Javascript.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrity Checking&lt;/h2&gt; &#xA;&lt;p&gt;The integrity checking instructions (including the signing key for libsodium) are available in the &lt;a href=&#34;https://download.libsodium.org/doc/installation#integrity-checking&#34;&gt;installation&lt;/a&gt; section of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;A mailing-list is available to discuss libsodium.&lt;/p&gt; &#xA;&lt;p&gt;In order to join, just send a random mail to &lt;code&gt;sodium-subscribe&lt;/code&gt; {at} &lt;code&gt;pureftpd&lt;/code&gt; {dot} &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://github.com/jedisct1/libsodium/graphs/contributors&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jedisct1/libsodium/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/libsodium/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/libsodium/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals &lt;a href=&#34;https://opencollective.com/libsodium&#34;&gt;&lt;img src=&#34;https://opencollective.com/libsodium/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/libsodium/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/libsodium/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/libsodium/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISC_license&#34;&gt;ISC license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ldpreload/BlackLotus</title>
    <updated>2023-07-23T01:50:22Z</updated>
    <id>tag:github.com,2023-07-23:/ldpreload/BlackLotus</id>
    <link href="https://github.com/ldpreload/BlackLotus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BlackLotus UEFI Windows Bootkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BlackLotus&lt;/h1&gt; &#xA;&lt;p&gt;BlackLotus is an innovative UEFI Bootkit designed specifically for Windows. It incorporates a built-in Secure Boot bypass and Ring0/Kernel protection to safeguard against any attempts at removal. This software serves the purpose of functioning as an HTTP Loader. Thanks to its robust persistence, there is no necessity for frequent updates of the Agent with new encryption methods. Once deployed, traditional antivirus software will be incapable of scanning and eliminating it. The software comprises two primary components: the Agent, which is installed on the targeted device, and the Web Interface, utilized by administrators to manage the bots. In this context, a bot refers to a device equipped with the installed Agent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FYI&lt;/strong&gt;: This version of BlackLotus (v2) has removed baton drop, and replaced the original version SHIM loaders with bootlicker. UEFI loading, infection and post-exploitation persistence are all the same.&lt;/p&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in C and x86asm&lt;/li&gt; &#xA; &lt;li&gt;Utilizes on Windows API, NTAPI, EFIAPI (NO 3rd party libraries used),&lt;/li&gt; &#xA; &lt;li&gt;NO CRT (C Runtime Library).&lt;/li&gt; &#xA; &lt;li&gt;Compiled binary including the user-mode loader is only 80kb in size&lt;/li&gt; &#xA; &lt;li&gt;Uses secure HTTPS C2 communication by using RSA and AES encryption&lt;/li&gt; &#xA; &lt;li&gt;Dynamic configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HVCI bypass&lt;/li&gt; &#xA; &lt;li&gt;UAC bypass&lt;/li&gt; &#xA; &lt;li&gt;Secure Boot bypass&lt;/li&gt; &#xA; &lt;li&gt;BitLocker boot sequence bypass&lt;/li&gt; &#xA; &lt;li&gt;Windows Defender bypass (patch Windows Defender drivers in memory, and prevent Windows Defender usermode engine from scanning/uploading files)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic hashed API calls (hell&#39;s gate)&lt;/li&gt; &#xA; &lt;li&gt;x86&amp;lt;=&amp;gt;x64 process injection&lt;/li&gt; &#xA; &lt;li&gt;API Hooking engine&lt;/li&gt; &#xA; &lt;li&gt;Anti-Hooking engine (for disabling, bypassing, and controlling EDRs)&lt;/li&gt; &#xA; &lt;li&gt;Modular plugin system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setup by modifying the config.c file by including your C2s hostname or IP address. After that compliation should be easy, just keep the included settings in the Visual Studio solution.&lt;/p&gt; &#xA;&lt;h2&gt;Default Panel Credentials:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;user&lt;/strong&gt;: yukari&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;: default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Welivesecurity: &lt;a href=&#34;https://www.welivesecurity.com/2023/03/01/blacklotus-uefi-bootkit-myth-confirmed&#34;&gt;https://www.welivesecurity.com/2023/03/01/blacklotus-uefi-bootkit-myth-confirmed&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Binarly: &lt;a href=&#34;https://www.binarly.io/posts/The_Untold_Story_of_the_BlackLotus_UEFI_Bootkit/index.html&#34;&gt;https://www.binarly.io/posts/The_Untold_Story_of_the_BlackLotus_UEFI_Bootkit/index.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NSA Mitigation Guide: &lt;a href=&#34;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3435305/nsa-releases-guide-to-mitigate-blacklotus-threat&#34;&gt;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3435305/nsa-releases-guide-to-mitigate-blacklotus-threat&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TheHackerNews: &lt;a href=&#34;https://thehackernews.com/2023/03/blacklotus-becomes-first-uefi-bootkit.html&#34;&gt;https://thehackernews.com/2023/03/blacklotus-becomes-first-uefi-bootkit.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bootlicker: &lt;a href=&#34;https://github.com/realoriginal/bootlicker&#34;&gt;https://github.com/realoriginal/bootlicker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>