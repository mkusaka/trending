<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:39:29Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tukaani-project/xz</title>
    <updated>2024-11-10T01:39:29Z</updated>
    <id>tag:github.com,2024-11-10:/tukaani-project/xz</id>
    <link href="https://github.com/tukaani-project/xz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;XZ Utils&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XZ Utils&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;0. Overview&#xA;1. Documentation&#xA;   1.1. Overall documentation&#xA;   1.2. Documentation for command-line tools&#xA;   1.3. Documentation for liblzma&#xA;2. Version numbering&#xA;3. Reporting bugs&#xA;4. Translations&#xA;5. Other implementations of the .xz format&#xA;6. Contact information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Overview&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;XZ Utils provide a general-purpose data-compression library plus&#xA;command-line tools. The native file format is the .xz format, but&#xA;also the legacy .lzma format is supported. The .xz format supports&#xA;multiple compression algorithms, which are called &#34;filters&#34; in the&#xA;context of XZ Utils. The primary filter is currently LZMA2. With&#xA;typical files, XZ Utils create about 30 % smaller files than gzip.&#xA;&#xA;To ease adapting support for the .xz format into existing applications&#xA;and scripts, the API of liblzma is somewhat similar to the API of the&#xA;popular zlib library. For the same reason, the command-line tool xz&#xA;has a command-line syntax similar to that of gzip.&#xA;&#xA;When aiming for the highest compression ratio, the LZMA2 encoder uses&#xA;a lot of CPU time and may use, depending on the settings, even&#xA;hundreds of megabytes of RAM. However, in fast modes, the LZMA2 encoder&#xA;competes with bzip2 in compression speed, RAM usage, and compression&#xA;ratio.&#xA;&#xA;LZMA2 is reasonably fast to decompress. It is a little slower than&#xA;gzip, but a lot faster than bzip2. Being fast to decompress means&#xA;that the .xz format is especially nice when the same file will be&#xA;decompressed very many times (usually on different computers), which&#xA;is the case e.g. when distributing software packages. In such&#xA;situations, it&#39;s not too bad if the compression takes some time,&#xA;since that needs to be done only once to benefit many people.&#xA;&#xA;With some file types, combining (or &#34;chaining&#34;) LZMA2 with an&#xA;additional filter can improve the compression ratio. A filter chain may&#xA;contain up to four filters, although usually only one or two are used.&#xA;For example, putting a BCJ (Branch/Call/Jump) filter before LZMA2&#xA;in the filter chain can improve compression ratio of executable files.&#xA;&#xA;Since the .xz format allows adding new filter IDs, it is possible that&#xA;some day there will be a filter that is, for example, much faster to&#xA;compress than LZMA2 (but probably with worse compression ratio).&#xA;Similarly, it is possible that some day there is a filter that will&#xA;compress better than LZMA2.&#xA;&#xA;XZ Utils supports multithreaded compression. XZ Utils doesn&#39;t support&#xA;multithreaded decompression yet. It has been planned though and taken&#xA;into account when designing the .xz file format. In the future, files&#xA;that were created in threaded mode can be decompressed in threaded&#xA;mode too.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;1.1. Overall documentation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;README                This file&#xA;&#xA;INSTALL.generic       Generic install instructions for those not&#xA;                      familiar with packages using GNU Autotools&#xA;INSTALL               Installation instructions specific to XZ Utils&#xA;PACKAGERS             Information to packagers of XZ Utils&#xA;&#xA;COPYING               XZ Utils copyright and license information&#xA;COPYING.0BSD          BSD Zero Clause License&#xA;COPYING.GPLv2         GNU General Public License version 2&#xA;COPYING.GPLv3         GNU General Public License version 3&#xA;COPYING.LGPLv2.1      GNU Lesser General Public License version 2.1&#xA;&#xA;AUTHORS               The main authors of XZ Utils&#xA;THANKS                Incomplete list of people who have helped making&#xA;                      this software&#xA;NEWS                  User-visible changes between XZ Utils releases&#xA;ChangeLog             Detailed list of changes (commit log)&#xA;TODO                  Known bugs and some sort of to-do list&#xA;&#xA;Note that only some of the above files are included in binary&#xA;packages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.2. Documentation for command-line tools&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The command-line tools are documented as man pages. In source code&#xA;releases (and possibly also in some binary packages), the man pages&#xA;are also provided in plain text (ASCII only) format in the directory&#xA;&#34;doc/man&#34; to make the man pages more accessible to those whose&#xA;operating system doesn&#39;t provide an easy way to view man pages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.3. Documentation for liblzma&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The liblzma API headers include short docs about each function&#xA;and data type as Doxygen tags. These docs should be quite OK as&#xA;a quick reference.&#xA;&#xA;There are a few example/tutorial programs that should help in&#xA;getting started with liblzma. In the source package the examples&#xA;are in &#34;doc/examples&#34; and in binary packages they may be under&#xA;&#34;examples&#34; in the same directory as this README.&#xA;&#xA;Since the liblzma API has similarities to the zlib API, some people&#xA;may find it useful to read the zlib docs and tutorial too:&#xA;&#xA;    https://zlib.net/manual.html&#xA;    https://zlib.net/zlib_how.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Version numbering&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;The version number format of XZ Utils is X.Y.ZS:&#xA;&#xA;  - X is the major version. When this is incremented, the library&#xA;    API and ABI break.&#xA;&#xA;  - Y is the minor version. It is incremented when new features&#xA;    are added without breaking the existing API or ABI. An even Y&#xA;    indicates a stable release and an odd Y indicates unstable&#xA;    (alpha or beta version).&#xA;&#xA;  - Z is the revision. This has a different meaning for stable and&#xA;    unstable releases:&#xA;&#xA;      * Stable: Z is incremented when bugs get fixed without adding&#xA;        any new features. This is intended to be convenient for&#xA;        downstream distributors that want bug fixes but don&#39;t want&#xA;        any new features to minimize the risk of introducing new bugs.&#xA;&#xA;      * Unstable: Z is just a counter. API or ABI of features added&#xA;        in earlier unstable releases having the same X.Y may break.&#xA;&#xA;  - S indicates stability of the release. It is missing from the&#xA;    stable releases, where Y is an even number. When Y is odd, S&#xA;    is either &#34;alpha&#34; or &#34;beta&#34; to make it very clear that such&#xA;    versions are not stable releases. The same X.Y.Z combination is&#xA;    not used for more than one stability level, i.e. after X.Y.Zalpha,&#xA;    the next version can be X.Y.(Z+1)beta but not X.Y.Zbeta.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Reporting bugs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;Naturally it is easiest for me if you already know what causes the&#xA;unexpected behavior. Even better if you have a patch to propose.&#xA;However, quite often the reason for unexpected behavior is unknown,&#xA;so here are a few things to do before sending a bug report:&#xA;&#xA;  1. Try to create a small example how to reproduce the issue.&#xA;&#xA;  2. Compile XZ Utils with debugging code using configure switches&#xA;     --enable-debug and, if possible, --disable-shared. If you are&#xA;     using GCC, use CFLAGS=&#39;-O0 -ggdb3&#39;. Don&#39;t strip the resulting&#xA;     binaries.&#xA;&#xA;  3. Turn on core dumps. The exact command depends on your shell;&#xA;     for example in GNU bash it is done with &#34;ulimit -c unlimited&#34;,&#xA;     and in tcsh with &#34;limit coredumpsize unlimited&#34;.&#xA;&#xA;  4. Try to reproduce the suspected bug. If you get &#34;assertion failed&#34;&#xA;     message, be sure to include the complete message in your bug&#xA;     report. If the application leaves a coredump, get a backtrace&#xA;     using gdb:&#xA;       $ gdb /path/to/app-binary   # Load the app to the debugger.&#xA;       (gdb) core core   # Open the coredump.&#xA;       (gdb) bt   # Print the backtrace. Copy &amp;amp; paste to bug report.&#xA;       (gdb) quit   # Quit gdb.&#xA;&#xA;Report your bug via email or IRC (see Contact information below).&#xA;Don&#39;t send core dump files or any executables. If you have a small&#xA;example file(s) (total size less than 256 KiB), please include&#xA;it/them as an attachment. If you have bigger test files, put them&#xA;online somewhere and include a URL to the file(s) in the bug report.&#xA;&#xA;Always include the exact version number of XZ Utils in the bug report.&#xA;If you are using a snapshot from the git repository, use &#34;git describe&#34;&#xA;to get the exact snapshot version. If you are using XZ Utils shipped&#xA;in an operating system distribution, mention the distribution name,&#xA;distribution version, and exact xz package version; if you cannot&#xA;repeat the bug with the code compiled from unpatched source code,&#xA;you probably need to report a bug to your distribution&#39;s bug tracking&#xA;system.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Translations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;The xz command line tool and all man pages can be translated.&#xA;The translations are handled via the Translation Project. If you&#xA;wish to help translating xz, please join the Translation Project:&#xA;&#xA;    https://translationproject.org/html/translators.html&#xA;&#xA;Below are notes and testing instructions specific to xz&#xA;translations.&#xA;&#xA;Testing can be done by installing xz into a temporary directory:&#xA;&#xA;    ./configure --disable-shared --prefix=/tmp/xz-test&#xA;    # &amp;lt;Edit the .po file in the po directory.&amp;gt;&#xA;    make -C po update-po&#xA;    make install&#xA;    bash debug/translation.bash | less&#xA;    bash debug/translation.bash | less -S  # For --list outputs&#xA;&#xA;Repeat the above as needed (no need to re-run configure though).&#xA;&#xA;Note especially the following:&#xA;&#xA;  - The output of --help and --long-help must look nice on&#xA;    an 80-column terminal. It&#39;s OK to add extra lines if needed.&#xA;&#xA;  - In contrast, don&#39;t add extra lines to error messages and such.&#xA;    They are often preceded with e.g. a filename on the same line,&#xA;    so you have no way to predict where to put a \n. Let the terminal&#xA;    do the wrapping even if it looks ugly. Adding new lines will be&#xA;    even uglier in the generic case even if it looks nice in a few&#xA;    limited examples.&#xA;&#xA;  - Be careful with column alignment in tables and table-like output&#xA;    (--list, --list --verbose --verbose, --info-memory, --help, and&#xA;    --long-help):&#xA;&#xA;      * All descriptions of options in --help should start in the&#xA;        same column (but it doesn&#39;t need to be the same column as&#xA;        in the English messages; just be consistent if you change it).&#xA;        Check that both --help and --long-help look OK, since they&#xA;        share several strings.&#xA;&#xA;      * --list --verbose and --info-memory print lines that have&#xA;        the format &#34;Description:   %s&#34;. If you need a longer&#xA;        description, you can put extra space between the colon&#xA;        and %s. Then you may need to add extra space to other&#xA;        strings too so that the result as a whole looks good (all&#xA;        values start at the same column).&#xA;&#xA;      * The columns of the actual tables in --list --verbose --verbose&#xA;        should be aligned properly. Abbreviate if necessary. It might&#xA;        be good to keep at least 2 or 3 spaces between column headings&#xA;        and avoid spaces in the headings so that the columns stand out&#xA;        better, but this is a matter of opinion. Do what you think&#xA;        looks best.&#xA;&#xA;  - Be careful to put a period at the end of a sentence when the&#xA;    original version has it, and don&#39;t put it when the original&#xA;    doesn&#39;t have it. Similarly, be careful with \n characters&#xA;    at the beginning and end of the strings.&#xA;&#xA;  - Read the TRANSLATORS comments that have been extracted from the&#xA;    source code and included in xz.pot. Some comments suggest&#xA;    testing with a specific command which needs an .xz file. You&#xA;    may use e.g. any tests/files/good-*.xz. However, these test&#xA;    commands are included in translations.bash output, so reading&#xA;    translations.bash output carefully can be enough.&#xA;&#xA;  - If you find language problems in the original English strings,&#xA;    feel free to suggest improvements. Ask if something is unclear.&#xA;&#xA;  - The translated messages should be understandable (sometimes this&#xA;    may be a problem with the original English messages too). Don&#39;t&#xA;    make a direct word-by-word translation from English especially if&#xA;    the result doesn&#39;t sound good in your language.&#xA;&#xA;Thanks for your help!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Other implementations of the .xz format&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;7-Zip and the p7zip port of 7-Zip support the .xz format starting&#xA;from the version 9.00alpha.&#xA;&#xA;    https://7-zip.org/&#xA;    https://p7zip.sourceforge.net/&#xA;&#xA;XZ Embedded is a limited implementation written for use in the Linux&#xA;kernel, but it is also suitable for other embedded use.&#xA;&#xA;    https://tukaani.org/xz/embedded.html&#xA;&#xA;XZ for Java is a complete implementation written in pure Java.&#xA;&#xA;    https://tukaani.org/xz/java.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Contact information&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;XZ Utils in general:&#xA;  - Home page: https://tukaani.org/xz/&#xA;  - Email to maintainer(s): xz@tukaani.org&#xA;  - IRC: #tukaani on Libera Chat&#xA;  - GitHub: https://github.com/tukaani-project/xz&#xA;&#xA;Lead maintainer:&#xA;  - Email: Lasse Collin &amp;lt;lasse.collin@tukaani.org&amp;gt;&#xA;  - IRC: Larhzu on Libera Chat&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>