<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-27T01:37:25Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>netero1010/EDRSilencer</title>
    <updated>2024-10-27T01:37:25Z</updated>
    <id>tag:github.com,2024-10-27:/netero1010/EDRSilencer</id>
    <link href="https://github.com/netero1010/EDRSilencer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool uses Windows Filtering Platform (WFP) to block Endpoint Detection and Response (EDR) agents from reporting security events to the server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EDRSilencer&lt;/h1&gt; &#xA;&lt;p&gt;Inspired by the closed source FireBlock tool &lt;a href=&#34;https://www.mdsec.co.uk/2023/09/nighthawk-0-2-6-three-wise-monkeys/&#34;&gt;FireBlock&lt;/a&gt; from MdSec NightHawk, I decided to create my own version and this tool was created with the aim of blocking the outbound traffic of running EDR processes using Windows Filtering Platform (WFP) APIs.&lt;/p&gt; &#xA;&lt;p&gt;This tool offers the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search known running EDR processes and add WFP filter to block its outbound traffic&lt;/li&gt; &#xA; &lt;li&gt;Add WFP filter for a specific process&lt;/li&gt; &#xA; &lt;li&gt;Remove all WFP filters created by this tool&lt;/li&gt; &#xA; &lt;li&gt;Remove a specific WFP filter by filter id&lt;/li&gt; &#xA; &lt;li&gt;Support to run in C2 with in-memory PE execution module (e.g., &lt;code&gt;BruteRatel&#39;s memexec&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Some EDR controls (e.g., minifilter) deny access when a process attempts to obtain a file handle of its EDR processes (e.g., through &lt;code&gt;CreateFileW&lt;/code&gt;). However, the &lt;code&gt;FwpmGetAppIdFromFileName0&lt;/code&gt; API, which is used to obtain the FWP app id of the targeted EDR process, calls &lt;code&gt;CreateFileW&lt;/code&gt; internally. To avoid this, a custom &lt;code&gt;FwpmGetAppIdFromFileName0&lt;/code&gt; was implemented to construct the app id without invoking &lt;code&gt;CreateFileW&lt;/code&gt;, thus preventing unexpected failures when adding a WFP filter to an EDR process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tool currently supports the following EDRs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Defender for Endpoint and Microsoft Defender Antivirus&lt;/li&gt; &#xA; &lt;li&gt;Elastic EDR&lt;/li&gt; &#xA; &lt;li&gt;Trellix EDR&lt;/li&gt; &#xA; &lt;li&gt;Qualys EDR&lt;/li&gt; &#xA; &lt;li&gt;SentinelOne&lt;/li&gt; &#xA; &lt;li&gt;Cylance&lt;/li&gt; &#xA; &lt;li&gt;Cybereason&lt;/li&gt; &#xA; &lt;li&gt;Carbon Black EDR&lt;/li&gt; &#xA; &lt;li&gt;Carbon Black Cloud&lt;/li&gt; &#xA; &lt;li&gt;Tanium&lt;/li&gt; &#xA; &lt;li&gt;Palo Alto Networks Traps/Cortex XDR&lt;/li&gt; &#xA; &lt;li&gt;FortiEDR&lt;/li&gt; &#xA; &lt;li&gt;Cisco Secure Endpoint (Formerly Cisco AMP)&lt;/li&gt; &#xA; &lt;li&gt;ESET Inspect&lt;/li&gt; &#xA; &lt;li&gt;Harfanglab EDR&lt;/li&gt; &#xA; &lt;li&gt;TrendMicro Apex One&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;As I do not have access to all these EDRs for testing, please do not hesitate to correct me if the listed processes (edrProcess in &lt;code&gt;EDRSilencer.c&lt;/code&gt;) prove insufficient in blocking all alert, detection, or event forward traffic.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing Environment&lt;/h2&gt; &#xA;&lt;p&gt;Tested in Windows 10 and Windows Server 2016&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: EDRSilencer.exe &amp;lt;blockedr/block/unblockall/unblock&amp;gt;&#xA;- Add WFP filters to block the IPv4 and IPv6 outbound traffic of all detected EDR processes:&#xA;  EDRSilencer.exe blockedr&#xA;&#xA;- Add WFP filters to block the IPv4 and IPv6 outbound traffic of a specific process (full path is required):&#xA;  EDRSilencer.exe block &#34;C:\Windows\System32\curl.exe&#34;&#xA;&#xA;- Remove all WFP filters applied by this tool:&#xA;  EDRSilencer.exe unblockall&#xA;&#xA;- Remove a specific WFP filter based on filter id:&#xA;  EDRSilencer.exe unblock &amp;lt;filter id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;x86_64-w64-mingw32-gcc EDRSilencer.c utils.c -o EDRSilencer.exe -lfwpuclnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;Detect and block the outbound traffic of running EDR processes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;EDRSilencer.exe blockedr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/netero1010/EDRSilencer/raw/main/example.png&#34; alt=&#34;HowTo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2023/09/nighthawk-0-2-6-three-wise-monkeys/&#34;&gt;https://www.mdsec.co.uk/2023/09/nighthawk-0-2-6-three-wise-monkeys/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>