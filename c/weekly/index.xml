<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-15T01:38:14Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ProtonVPN/android-app</title>
    <updated>2025-06-15T01:38:14Z</updated>
    <id>tag:github.com,2025-06-15:/ProtonVPN/android-app</id>
    <link href="https://github.com/ProtonVPN/android-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official ProtonVPN Android app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ProtonVPN for Android&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2019 Proton AG&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ProtonVPN/android-app/master/metadata/en-US/images/phoneScreenshots/2.jpg&#34; height=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ProtonVPN/android-app/master/metadata/en-US/images/phoneScreenshots/3.jpg&#34; height=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ProtonVPN/android-app/master/metadata/en-US/images/phoneScreenshots/4.jpg&#34; height=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ProtonVPN/android-app/master/metadata/en-US/images/phoneScreenshots/5.jpg&#34; height=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=ch.protonvpn.android&#34;&gt; &lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://f-droid.org/packages/ch.protonvpn.android&#34;&gt; &lt;img src=&#34;https://f-droid.org/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ProtonVPN/android-app/releases&#34;&gt; &lt;img src=&#34;https://i.postimg.cc/kXfbyWjL/get-it-on-github.png&#34; alt=&#34;Get it on GitHub&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install sdk, ndk, cmake, swig&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew assembleProductionVanillaOpenSourceDebug&lt;/code&gt; or open and build in Android Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build release&lt;/h3&gt; &#xA;&lt;p&gt;To complete a release build signing keys need to be provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew assembleProductionVanillaOpenSourceRelease -PkeyStoreFilePath=&amp;lt;keystore&amp;gt; -PkeyStoreKeyAlias=&amp;lt;alias&amp;gt; -PkeyStorePassword=&amp;lt;pass&amp;gt; -PkeyStoreKeyPassword=&amp;lt;key-pass&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code style&lt;/h2&gt; &#xA;&lt;p&gt;Project uses agreed code style ProtonStyle.xml for java. Import it in Android studio via &lt;code&gt;File&amp;gt;&amp;gt;Settings&amp;gt;&amp;gt;Editor&amp;gt;&amp;gt;Code style&amp;gt;&amp;gt;Import Scheme&lt;/code&gt; For kotlin&#39;s code style we use ktlint with default rules&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute, please keep in mind the following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try to stick to the project&#39;s existing code style and naming conventions&lt;/li&gt; &#xA; &lt;li&gt;The code base is mostly written in Java, but we are transitioning to Kotlin, so new code should be written in Kotlin where possible&lt;/li&gt; &#xA; &lt;li&gt;Our preferred tech stack is Kotlin, MVVM, data-binding and coroutines, so any new features or large refactors should conform to this preferred tech stack&lt;/li&gt; &#xA; &lt;li&gt;After adding/updating open source dependencies run &lt;code&gt;gradlew updateLicensesJson&lt;/code&gt; to update attributions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internally our CI automatically checks all pull requests for code style issues, and runs our tests. However you can run those locally as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gradlew checkstyle&#xA;gradlew detekt&#xA;gradlew test&#xA;gradlew androidTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By making a contribution to this project you agree to the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I assign any and all copyright related to the contribution to Proton AG;&lt;/li&gt; &#xA; &lt;li&gt;I certify that the contribution was created in whole by me;&lt;/li&gt; &#xA; &lt;li&gt;I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it) is maintained indefinitely and may be redistributed with this project or the open source license(s) involved.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Signature&lt;/h2&gt; &#xA;&lt;p&gt;All our builds (except for F-droid) will be signed with same key. SHA256 fingerprint for signing certificate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ch.protonvpn.android&#xA;DC:C9:43:9E:C1:A6:C6:A8:D0:20:3F:34:23:EE:42:BC:C8:B9:70:62:8E:53:CB:73:A0:39:3F:39:8D:D5:B8:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version matches format: &lt;code&gt;[major][minor][patch][hotfix]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and datafiles in this distribution are licensed under the terms of the GPLv3 as published by the Free Software Foundation. See &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt; for a copy of this license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2019 Proton AG&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libimobiledevice/libimobiledevice</title>
    <updated>2025-06-15T01:38:14Z</updated>
    <id>tag:github.com,2025-06-15:/libimobiledevice/libimobiledevice</id>
    <link href="https://github.com/libimobiledevice/libimobiledevice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform protocol library to communicate with iOS devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libimobiledevice&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;A library to communicate with services on iOS devices using native protocols.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/libimobiledevice/libimobiledevice/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;libimobiledevice is a cross-platform software library that talks the protocols to interact with iOS devices.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other projects, it does not depend on using any existing proprietary libraries and does not require jailbreaking.&lt;/p&gt; &#xA;&lt;p&gt;Some key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt;: Implements many high-level interfaces for device services&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: Object oriented architecture and service abstraction layer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-Platform:&lt;/strong&gt; Tested on Linux, macOS, Windows and Android platforms&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Utilities&lt;/strong&gt;: Provides various command-line utilities for device services&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SSL&lt;/strong&gt;: Allows choosing between OpenSSL, GnuTLS, or MbedTLS to handle SSL communication&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Supports network connections with &#34;WiFi sync&#34; enabled devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; Provides Cython based bindings for Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The implemented interfaces of many device service protocols allow applications to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access filesystem of a device&lt;/li&gt; &#xA; &lt;li&gt;Access documents of file sharing apps&lt;/li&gt; &#xA; &lt;li&gt;Retrieve information about a device and modify various settings&lt;/li&gt; &#xA; &lt;li&gt;Backup and restore the device in a native way compatible with iTunes&lt;/li&gt; &#xA; &lt;li&gt;Manage app icons arrangement on the device&lt;/li&gt; &#xA; &lt;li&gt;Install, remove, list and basically manage apps&lt;/li&gt; &#xA; &lt;li&gt;Activate a device using official servers&lt;/li&gt; &#xA; &lt;li&gt;Manage contacts, calendars, notes and bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Retrieve and remove crashreports&lt;/li&gt; &#xA; &lt;li&gt;Retrieve various diagnostics information&lt;/li&gt; &#xA; &lt;li&gt;Establish a debug connection for app debugging&lt;/li&gt; &#xA; &lt;li&gt;Mount filesystem images&lt;/li&gt; &#xA; &lt;li&gt;Forward device notifications&lt;/li&gt; &#xA; &lt;li&gt;Manage device provisioning&lt;/li&gt; &#xA; &lt;li&gt;Take screenshots from the device screen (requires mounted developer image)&lt;/li&gt; &#xA; &lt;li&gt;Simulate changed geolocation of the device (requires mounted developer image)&lt;/li&gt; &#xA; &lt;li&gt;Relay the syslog of the device&lt;/li&gt; &#xA; &lt;li&gt;Expose a connection for WebKit remote debugging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and much more.&lt;/p&gt; &#xA;&lt;p&gt;The library is in development since August 2007 with the goal to bring support for these devices to the Linux Desktop.&lt;/p&gt; &#xA;&lt;h2&gt;Installation / Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Debian / Ubuntu Linux&lt;/h3&gt; &#xA;&lt;p&gt;First install all required dependencies and build tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install \&#xA;&#x9;build-essential \&#xA;&#x9;pkg-config \&#xA;&#x9;checkinstall \&#xA;&#x9;git \&#xA;&#x9;autoconf \&#xA;&#x9;automake \&#xA;&#x9;libtool-bin \&#xA;&#x9;libplist-dev \&#xA;&#x9;libusbmuxd-dev \&#xA;&#x9;libimobiledevice-glue-dev \&#xA;&#x9;libtatsu-dev \&#xA;&#x9;libssl-dev \&#xA;&#x9;usbmuxd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: &lt;a href=&#34;https://github.com/libimobiledevice/libtatsu&#34;&gt;libtatsu&lt;/a&gt; (and thus &lt;code&gt;libtatsu-dev&lt;/code&gt;) is a new library that was just published recently, you have to &lt;a href=&#34;https://github.com/libimobiledevice/libtatsu?tab=readme-ov-file#building&#34;&gt;build it from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to optionally build the documentation or Python bindings use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install \&#xA;&#x9;doxygen \&#xA;&#x9;cython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then clone the actual project repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/libimobiledevice/libimobiledevice.git&#xA;cd libimobiledevice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can build and install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./autogen.sh&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you require a custom prefix or other option being passed to &lt;code&gt;./configure&lt;/code&gt; you can pass them directly to &lt;code&gt;./autogen.sh&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh --prefix=/opt/local --enable-debug&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, OpenSSL will be used as TLS/SSL library. If you prefer GnuTLS, configure with &lt;code&gt;--with-gnutls&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh --with-gnutls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MbedTLS is also supported and can be enabled by passing &lt;code&gt;--with-mbedtls&lt;/code&gt; to configure. If mbedTLS is not installed in a default location, you need to set the environment variables &lt;code&gt;mbedtls_INCLUDES&lt;/code&gt; to the path that contains the MbedTLS headers and &lt;code&gt;mbedtls_LIBDIR&lt;/code&gt; to set the library path. Optionally, &lt;code&gt;mbedtls_LIBS&lt;/code&gt; can be used to set the library names directly. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh --with-mbedtls mbedtls_INCLUDES=/opt/local/include mbedtls_LIBDIR=/opt/local/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Documentation about using the library in your application is not available yet. The &#34;hacker way&#34; for now is to look at the implementation of the included utilities.&lt;/p&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;p&gt;The library bundles the following command-line utilities in the tools directory:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Utility&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevice_id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List attached devices or print device name of given device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicebackup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create or restore backup for devices (legacy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicebackup2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create or restore backups for devices running iOS 4 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicebtlogger&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Capture Bluetooth HCI traffic from a device (requires log profile)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicecrashreport&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Retrieve crash reports from a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicedate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the current date or set it on a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicedebug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interact with the debugserver service of a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicedebugserverproxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Proxy a debugserver connection from a device for remote debugging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicediagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interact with the diagnostics interface of a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceenterrecovery&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make a device enter recovery mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceimagemounter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mount disk images on the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceinfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show information about a connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicename&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display or set the device name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicenotificationproxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Post or observe notifications on a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicepair&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Manage host pairings with devices and usbmuxd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceprovision&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Manage provisioning profiles on a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicescreenshot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gets a screenshot from the connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicesetlocation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simulate location on device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicesyslog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Relay syslog of a connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;afcclient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interact with device filesystem via AFC/HouseArrest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please consult the usage information or manual pages of each utility for a documentation of available command line options and usage examples like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ideviceinfo --help&#xA;man ideviceinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from anyone and are grateful for every pull request!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute, please fork the &lt;code&gt;master&lt;/code&gt; branch, change, commit and send a pull request for review. Once approved it can be merged into the main code base.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to contribute larger changes or a major refactoring, please create a ticket first to discuss the idea upfront to ensure less effort for everyone.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure your contribution adheres to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try to follow the code style of the project&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should describe the change well without being too short&lt;/li&gt; &#xA; &lt;li&gt;Try to split larger changes into individual commits of a common domain&lt;/li&gt; &#xA; &lt;li&gt;Use your real name and a valid email address for your commits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are still working on the guidelines so bear with us!&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://libimobiledevice.org/&#34;&gt;https://libimobiledevice.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repository: &lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice.git&#34;&gt;https://github.com/libimobiledevice/libimobiledevice.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repository (Mirror): &lt;a href=&#34;https://git.libimobiledevice.org/libimobiledevice.git&#34;&gt;https://git.libimobiledevice.org/libimobiledevice.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue Tracker: &lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice/issues&#34;&gt;https://github.com/libimobiledevice/libimobiledevice/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing List: &lt;a href=&#34;https://lists.libimobiledevice.org/mailman/listinfo/libimobiledevice-devel&#34;&gt;https://lists.libimobiledevice.org/mailman/listinfo/libimobiledevice-devel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/libimobiledev&#34;&gt;https://twitter.com/libimobiledev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library and utilities are licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-2.1.en.html&#34;&gt;GNU Lesser General Public License v2.1&lt;/a&gt;, also included in the repository in the &lt;code&gt;COPYING&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Apple, iPhone, iPad, iPod, iPod Touch, Apple TV, Apple Watch, Mac, iOS, iPadOS, tvOS, watchOS, and macOS are trademarks of Apple Inc.&lt;/p&gt; &#xA;&lt;p&gt;This project is an independent software and has not been authorized, sponsored, or otherwise approved by Apple Inc.&lt;/p&gt; &#xA;&lt;p&gt;README Updated on: 2024-10-22&lt;/p&gt;</summary>
  </entry>
</feed>