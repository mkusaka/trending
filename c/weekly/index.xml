<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:47:35Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FFmpeg/FFmpeg</title>
    <updated>2023-10-22T01:47:35Z</updated>
    <id>tag:github.com,2023-10-22:/FFmpeg/FFmpeg</id>
    <link href="https://github.com/FFmpeg/FFmpeg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of https://git.ffmpeg.org/ffmpeg.git&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FFmpeg README&lt;/h1&gt; &#xA;&lt;p&gt;FFmpeg is a collection of libraries and tools to process multimedia content such as audio, video, subtitles and related metadata.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libavcodec&lt;/code&gt; provides implementation of a wider range of codecs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavformat&lt;/code&gt; implements streaming protocols, container formats and basic I/O access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavutil&lt;/code&gt; includes hashers, decompressors and miscellaneous utility functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavfilter&lt;/code&gt; provides means to alter decoded audio and video through a directed graph of connected filters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavdevice&lt;/code&gt; provides an abstraction to access capture and playback devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libswresample&lt;/code&gt; implements audio mixing and resampling routines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libswscale&lt;/code&gt; implements color conversion and scaling routines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;ffmpeg&lt;/a&gt; is a command line toolbox to manipulate, convert and stream multimedia content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffplay.html&#34;&gt;ffplay&lt;/a&gt; is a minimalistic multimedia player.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffprobe.html&#34;&gt;ffprobe&lt;/a&gt; is a simple analysis tool to inspect multimedia content.&lt;/li&gt; &#xA; &lt;li&gt;Additional small tools such as &lt;code&gt;aviocat&lt;/code&gt;, &lt;code&gt;ismindex&lt;/code&gt; and &lt;code&gt;qt-faststart&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The offline documentation is available in the &lt;strong&gt;doc/&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The online documentation is available in the main &lt;a href=&#34;https://ffmpeg.org&#34;&gt;website&lt;/a&gt; and in the &lt;a href=&#34;https://trac.ffmpeg.org&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Coding examples are available in the &lt;strong&gt;doc/examples&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FFmpeg codebase is mainly LGPL-licensed with optional components licensed under GPL. Please refer to the LICENSE file for detailed information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Patches should be submitted to the ffmpeg-devel mailing list using &lt;code&gt;git format-patch&lt;/code&gt; or &lt;code&gt;git send-email&lt;/code&gt;. Github pull requests should be avoided because they are not part of our review process and will be ignored.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>immortalwrt/immortalwrt</title>
    <updated>2023-10-22T01:47:35Z</updated>
    <id>tag:github.com,2023-10-22:/immortalwrt/immortalwrt</id>
    <link href="https://github.com/immortalwrt/immortalwrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opensource OpenWrt variant for mainland China users.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/53193414?s=200&amp;amp;v=4&#34; alt=&#34;logo&#34; width=&#34;200&#34; height=&#34;200&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Project ImmortalWrt&lt;/h1&gt; &#xA;&lt;p&gt;ImmortalWrt is a fork of &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWrt&lt;/a&gt;, with more packages ported, more devices supported, better performance, and special optimizations for mainland China users.&lt;br&gt; Compared the official one, we allow to use hacks or non-upstreamable patches / modifications to achieve our purpose. Source from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Default login address: &lt;a href=&#34;http://192.168.1.1&#34;&gt;http://192.168.1.1&lt;/a&gt; or &lt;a href=&#34;http://immortalwrt.lan&#34;&gt;http://immortalwrt.lan&lt;/a&gt;, username: &lt;strong&gt;root&lt;/strong&gt;, password: &lt;em&gt;none&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Built firmware images are available for many architectures and come with a package selection to be used as WiFi home router. To quickly find a factory image usable to migrate from a vendor stock firmware to ImmortalWrt, try the &lt;em&gt;Firmware Selector&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firmware-selector.immortalwrt.org/&#34;&gt;ImmortalWrt Firmware Selector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your device is supported, please follow the &lt;strong&gt;Info&lt;/strong&gt; link to see install instructions or consult the support resources listed below.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;To build with this project, Ubuntu 20.04 LTS is preferred. And you need use the CPU based on AMD64 architecture, with at least 4GB RAM and 25 GB available disk space. Make sure the &lt;strong&gt;Internet&lt;/strong&gt; is accessible.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are needed to compile ImmortalWrt, the package names vary between distributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here is an example for Ubuntu users:&lt;br&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 1:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Setup dependencies via APT&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;  bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \&#xA;  g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \&#xA;  libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \&#xA;  libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \&#xA;  nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \&#xA;  python-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \&#xA;  texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo bash -c &#39;bash &amp;lt;(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do everything as an unprivileged user, not root, without sudo.&lt;/li&gt; &#xA; &lt;li&gt;Using CPUs based on other architectures should be fine to compile ImmortalWrt, but more hacks are needed - No warranty at all.&lt;/li&gt; &#xA; &lt;li&gt;You must &lt;strong&gt;not&lt;/strong&gt; have spaces or non-ascii characters in PATH or in the work folders on the drive.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Windows Subsystem for Linux (or WSL), removing Windows folders from PATH is required, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/wsl&#34;&gt;Build system setup WSL&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;Using macOS as the host build OS is &lt;strong&gt;not&lt;/strong&gt; recommended. No warranty at all. You can get tips from &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/buildroot.exigence.macosx&#34;&gt;Build system setup macOS&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;For more details, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build system setup&lt;/a&gt; documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone -b &amp;lt;branch&amp;gt; --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt&lt;/code&gt; to clone the source code.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd immortalwrt&lt;/code&gt; to enter source directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called opkg. If you&#39;re looking to develop the web interface or port packages to ImmortalWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/packages&#34;&gt;ImmortalWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openwrt/video&#34;&gt;OpenWrt Video&lt;/a&gt;: Packages specifically focused on display servers and clients (Xorg and Wayland).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://t.me/ctcgfw_openwrt_discuss&#34;&gt;@ctcgfw_openwrt_discuss&lt;/a&gt; on &lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://matrix.to/#/#immortalwrt:matrix.org&#34;&gt;#immortalwrt&lt;/a&gt; on &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ImmortalWrt is licensed under &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-only.html&#34;&gt;GPL-2.0-only&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dlercloud.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22235437/111103249-f9ec6e00-8588-11eb-9bfc-67cc55574555.png&#34; width=&#34;183&#34; height=&#34;52&#34; border=&#34;0&#34; alt=&#34;Dler Cloud&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_square.png&#34; width=&#34;120&#34; height=&#34;120&#34; border=&#34;0&#34; alt=&#34;JetBrains Black Box Logo logo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceforge.net/&#34;&gt;&lt;img src=&#34;https://sourceforge.net/sflogo.php?type=17&amp;amp;group_id=3663829&#34; alt=&#34;SourceForge&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>apache/nuttx</title>
    <updated>2023-10-22T01:47:35Z</updated>
    <id>tag:github.com,2023-10-22:/apache/nuttx</id>
    <link href="https://github.com/apache/nuttx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache NuttX is a mature, real-time embedded operating system (RTOS)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;APACHE NUTTX&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA; &lt;li&gt;Community &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Getting Help&lt;/li&gt; &#xA;   &lt;li&gt;Mailing Lists&lt;/li&gt; &#xA;   &lt;li&gt;Issue Tracker&lt;/li&gt; &#xA;   &lt;li&gt;Source Code&lt;/li&gt; &#xA;   &lt;li&gt;Website Source Code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environments &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Installing Cygwin&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu Bash under Windows 10&lt;/li&gt; &#xA;   &lt;li&gt;Using macOS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Installation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download and Unpack&lt;/li&gt; &#xA;   &lt;li&gt;Semi-Optional apps/ Package&lt;/li&gt; &#xA;   &lt;li&gt;Installation Directories with Spaces in the Path&lt;/li&gt; &#xA;   &lt;li&gt;Downloading from Repositories&lt;/li&gt; &#xA;   &lt;li&gt;Related Repositories&lt;/li&gt; &#xA;   &lt;li&gt;Notes about Header Files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configuring NuttX &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Instantiating &#34;Canned&#34; Configurations&lt;/li&gt; &#xA;   &lt;li&gt;Refreshing Configurations&lt;/li&gt; &#xA;   &lt;li&gt;NuttX Configuration Tool&lt;/li&gt; &#xA;   &lt;li&gt;Finding Selections in the Configuration Menus&lt;/li&gt; &#xA;   &lt;li&gt;Reveal Hidden Configuration Options&lt;/li&gt; &#xA;   &lt;li&gt;Make Sure that You are on the Right Platform&lt;/li&gt; &#xA;   &lt;li&gt;Comparing Two Configurations&lt;/li&gt; &#xA;   &lt;li&gt;Making defconfig Files&lt;/li&gt; &#xA;   &lt;li&gt;Incompatibilities with Older Configurations&lt;/li&gt; &#xA;   &lt;li&gt;NuttX Configuration Tool under DOS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Toolchains &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cross-Development Toolchains&lt;/li&gt; &#xA;   &lt;li&gt;NuttX Buildroot Toolchain&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Shells&lt;/li&gt; &#xA; &lt;li&gt;Building NuttX &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Building&lt;/li&gt; &#xA;   &lt;li&gt;Re-building&lt;/li&gt; &#xA;   &lt;li&gt;Build Targets and Options&lt;/li&gt; &#xA;   &lt;li&gt;Native Windows Build&lt;/li&gt; &#xA;   &lt;li&gt;Installing GNUWin32&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cygwin Build Problems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Strange Path Problems&lt;/li&gt; &#xA;   &lt;li&gt;Window Native Toolchain Issues&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;INTRODUCTION&lt;/h1&gt; &#xA;&lt;p&gt;Apache NuttX is a real-time operating system (RTOS) with an emphasis on standards compliance and small footprint. Scalable from 8-bit to 64-bit microcontroller environments, the primary governing standards in NuttX are POSIX and ANSI standards. Additional standard APIs from Unix and other common RTOSs (such as VxWorks) are adopted for functionality not available under these standards, or for functionality that is not appropriate for deeply-embedded environments (such as fork()).&lt;/p&gt; &#xA;&lt;p&gt;Extensive documentation can be found on the project wiki: &lt;a href=&#34;https://cwiki.apache.org/NUTTX/NuttX&#34;&gt;https://cwiki.apache.org/NUTTX/NuttX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For brevity, many parts of the documentation will refer to Apache NuttX as simply NuttX.&lt;/p&gt; &#xA;&lt;h1&gt;COMMUNITY&lt;/h1&gt; &#xA;&lt;p&gt;Every volunteer project obtains its strength from the people involved in it. We invite you to participate as much or as little as you choose.&lt;/p&gt; &#xA;&lt;p&gt;We encourage you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use our project and provide feedback.&lt;/li&gt; &#xA; &lt;li&gt;Provide us with use-cases.&lt;/li&gt; &#xA; &lt;li&gt;Report bugs and submit patches.&lt;/li&gt; &#xA; &lt;li&gt;Contribute code or documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;The best place to get help is the developer&#39;s mailing list. Please see the following section:&lt;/p&gt; &#xA;&lt;h2&gt;Mailing Lists&lt;/h2&gt; &#xA;&lt;p&gt;Get help using NuttX or contribute to the project on our mailing lists:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;mailto:dev@nuttx.apache.org&#34;&gt;dev@nuttx.apache.org&lt;/a&gt; is for people who want to contribute code to NuttX.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To subscribe, send an email to &lt;a href=&#34;mailto:dev-subscribe@nuttx.apache.org&#34;&gt;dev-subscribe@nuttx.apache.org&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;To unsubscribe, send an email to &lt;a href=&#34;mailto:dev-unsubscribe@nuttx.apache.org&#34;&gt;dev-unsubscribe@nuttx.apache.org&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;View the archives at: &lt;a href=&#34;https://www.mail-archive.com/dev@nuttx.apache.org/&#34;&gt;https://www.mail-archive.com/dev@nuttx.apache.org/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;mailto:commits@nuttx.apache.org&#34;&gt;commits@nuttx.apache.org&lt;/a&gt; is a read-only list that notifies subscribers about commit messages and patches to NuttX.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To subscribe, send an email to &lt;a href=&#34;mailto:commits-subscribe@nuttx.apache.org&#34;&gt;commits-subscribe@nuttx.apache.org&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;To unsubscribe, send an email to &lt;a href=&#34;mailto:commits-unsubscribe@nuttx.apache.org&#34;&gt;commits-unsubscribe@nuttx.apache.org&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;View the archives at: &lt;a href=&#34;https://www.mail-archive.com/commits@nuttx.apache.org/&#34;&gt;https://www.mail-archive.com/commits@nuttx.apache.org/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Security Issues&lt;/h2&gt; &#xA;&lt;p&gt;Found a vulnerability? See our security policy &lt;a href=&#34;https://raw.githubusercontent.com/apache/nuttx/master/.github/SECURITY.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issue Tracker&lt;/h2&gt; &#xA;&lt;h3&gt;Bug Reports:&lt;/h3&gt; &#xA;&lt;p&gt;Found bug? Send an email to the dev list: &lt;a href=&#34;mailto:dev@nuttx.apache.org&#34;&gt;dev@nuttx.apache.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before submitting an issue, please:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that the bug does in fact exist.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search the mailing list archives to verify there is no existing issue reporting the bug you&#39;ve found.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consider tracking down the bug yourself in the NuttX source code and submitting a patch along with your bug report. This is a great time saver for the NuttX developers and helps ensure the bug will be fixed quickly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Feature Requests:&lt;/h3&gt; &#xA;&lt;p&gt;Enhancement requests for new features are also welcome. The more concrete and rational the request is, the greater the chance it will incorporated into future releases.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;p&gt;The project sources are in two Git repositories. The core OS is in nuttx and the apps repository is in nuttx-apps. These are housed in GitBox on ASF servers and also mirrored at GitHub. These are kept in sync, so you can use whichever option you prefer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;NuttX core OS repository:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Primary: &lt;a href=&#34;https://gitbox.apache.org/repos/asf?p=nuttx.git&#34;&gt;https://gitbox.apache.org/repos/asf?p=nuttx.git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;GitHub Mirror: &lt;a href=&#34;https://github.com/apache/nuttx&#34;&gt;https://github.com/apache/nuttx&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apps repository:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Primary: &lt;a href=&#34;https://gitbox.apache.org/repos/asf?p=nuttx-apps.git&#34;&gt;https://gitbox.apache.org/repos/asf?p=nuttx-apps.git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;GitHub Mirror: &lt;a href=&#34;https://github.com/apache/nuttx-apps&#34;&gt;https://github.com/apache/nuttx-apps&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Website Source Code&lt;/h2&gt; &#xA;&lt;p&gt;The project website sources are accessible via the website source code repository which is also mirrored in GitHub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Primary: &lt;a href=&#34;https://gitbox.apache.org/repos/asf?p=nuttx-website.git&#34;&gt;https://gitbox.apache.org/repos/asf?p=nuttx-website.git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GitHub Mirror: &lt;a href=&#34;https://github.com/apache/nuttx-website&#34;&gt;https://github.com/apache/nuttx-website&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ENVIRONMENTS&lt;/h1&gt; &#xA;&lt;p&gt;NuttX requires a POSIX development environment such as you would find under Linux or macOS. NuttX may also be installed and built on Windows system if you also provide such a POSIX development environment. Options for a POSIX development environment under Windows include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An installation of Linux on a virtual machine (VM) in Windows. I have not been happy using a VM myself. I have had stability problems with open source VMs and commercial VMs cost more than I want to spend. Sharing files with Linux running in a VM is awkward; sharing devices connected to the Windows box with Linux in a VM is, at the very least, confusing; Using Windows tools (such as Segger J-Link) with files built under the Linux VM is not a possibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Cygwin environment. Instructions for installation of Cygwin on a Windows system are provided in the following paragraph, &#34;Installing Cygwin&#34;. Cygwin is a mature, well-tested, and very convenient environment. It is especially convenient if you need to integrate with Windows tools and files. Downsides are that the installation time is very long and the compile times are slow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu/Bash shell under Windows 10. This is a new option under Windows 10. See the section &#34;Ubuntu Bash under Windows 10&#34; below. This is an improvement over Cygwin if your concern is compile time; its build performance is comparable to native Linux, certainly better than the Cygwin build time. It also installs in a tiny fraction of the time as Cygwin, perhaps 20 minutes for the basic Ubuntu install (vs. more than a day for the complete Cygwin install).&lt;/p&gt; &lt;p&gt;There have been even more recent ports of Linux environment to Windows. I need to update this section to include some mention of these alternatives.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The MSYS environment. MSYS derives from an older version of Cygwin simplified and adapted to work more naturally in the Windows environment. See &lt;a href=&#34;http://www.mingw.org/wiki/MSYS&#34;&gt;http://www.mingw.org/wiki/MSYS&lt;/a&gt; if you are interested in using MSYS. The advantages of the MSYS environment is that it is better integrted with the native Windows environment and lighter weight; it uses only a minimal number of add-on POSIX-land tools.&lt;/p&gt; &lt;p&gt;The download link in that Wiki takes you to the SourceForge download site. The SourceForge MSYS project has been stagnant for some time. The MSYS project has more recently moved to &lt;a href=&#34;http://odsn.net/projects/sfnet_mingwbundle&#34;&gt;http://odsn.net/projects/sfnet_mingwbundle&lt;/a&gt;. Downloads of current .zip files are available there but no instructions for the installation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MSYS2 appears to be a re-write of MSYS based on a newer version of Cygwin. Is it available at &lt;a href=&#34;https://www.msys2.org&#34;&gt;https://www.msys2.org&lt;/a&gt;. A windows installer is available at that site along with very good installation instructions. The download is relatively quick (at least compared to Cygwin) and the &#39;pacman&#39; package management tool supports supports simple system updates. For example, &#39;pacman -S git&#39; will install the GIT command line utilities.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other POSIX environments. Check out:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UnxUtils: &lt;a href=&#34;https://sourceforge.net/projects/unxutils/&#34;&gt;https://sourceforge.net/projects/unxutils/&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/UnxUtils&#34;&gt;https://en.wikipedia.org/wiki/UnxUtils&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MobaXterm: &lt;a href=&#34;https://mobaxterm.mobatek.net/&#34;&gt;https://mobaxterm.mobatek.net/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Gow: &lt;a href=&#34;https://github.com/bmatzelle/gow/wiki&#34;&gt;https://github.com/bmatzelle/gow/wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: In principle, these should work. However, I have never used any of these environments and cannot guarantee that there is not some less-than-obvious issues.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NuttX can also be installed and built on a native Windows system, but with some potential tool-related issues (see the discussion &#34;Native Windows Build&#34; under &#34;Building NuttX&#34; below). GNUWin32 is used to provide compatible native windows tools.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Cygwin&lt;/h2&gt; &#xA;&lt;p&gt;Installing Cygwin on your Windows PC is simple, but time consuming. See &lt;a href=&#34;http://www.cygwin.com/&#34;&gt;http://www.cygwin.com/&lt;/a&gt; for installation instructions. Basically you just need to download a tiny setup.exe program and it does the real, network installation for you.&lt;/p&gt; &#xA;&lt;p&gt;Some Cygwin installation tips:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install at &lt;code&gt;C:\cygwin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;strong&gt;everything&lt;/strong&gt;: &#34;Only the minimal base packages from the Cygwin distribution are installed by default. Clicking on categories and packages in the setup.exe package installation screen will provide you with the ability to control what is installed or updated. Clicking on the &#34;Default&#34; field next to the &#34;All&#34; category will provide you with the opportunity to install every Cygwin package. Be advised that this will download and install hundreds of megabytes to your computer.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you use the &#34;default&#34; installation, you will be missing many of the Cygwin utilities that you will need to build NuttX. The build will fail in numerous places because of missing packages.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: The last time I installed &lt;strong&gt;everything&lt;/strong&gt;, the download was about 5GiB. The server I selected was also very slow so it took over a day to do the whole install!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You don&#39;t really have to install &lt;strong&gt;everything&lt;/strong&gt; but I cannot answer the question &#34;Then what should I install?&#34; I don&#39;t know the answer to that and so will continue to recommend installing &lt;strong&gt;everything&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should certainly be able to omit &#34;Science&#34;, &#34;Math&#34;, and &#34;Publishing&#34;. You can try omitting KDE, Gnome, GTK, and other graphics packages if you don&#39;t plan to use them.&lt;/p&gt; &#xA;&lt;p&gt;Perhaps a minimum set would be those packages listed below for the &#34;Ubuntu Bash under Windows 10&#34; installation?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Sergey Frolov had success with the following minimal Cygwin configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;After starting the Cygwin installer, keep the recommended packages that are pre-selected in the default configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the installation tools, add the following packages:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make (GNU make)  bison        libgmp3-dev&#xA;gcc-core         byacc        libmpfr-dev&#xA;gcc-g++          gperf        libmpc-dev&#xA;flex             gdb          automake-1.15&#xA;libncurses-dev   libgmp-dev   curl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After installing Cygwin, you will get lots of links for installed tools and shells. I use the RXVT native shell. It is fast and reliable and does not require you to run the Cygwin X server (which is neither fast nor reliable). Unless otherwise noted, the rest of these instructions assume that you are at a bash command line prompt in either Linux or in Cygwin shell.&lt;/p&gt; &#xA;&lt;h2&gt;Using MSYS&lt;/h2&gt; &#xA;&lt;p&gt;MSYS is an environment the derives from Cygwin. Thus, most things said about Cygwin apply equally to MSYS. This section will, then, focus on the differences when using MSYS, specifically MSYS2.&lt;/p&gt; &#xA;&lt;p&gt;Here is it assumed that you have already downloaded and installed MSYS2 from &lt;a href=&#34;https://www.msys2.org&#34;&gt;https://www.msys2.org&lt;/a&gt; using the windows installer available at that location. It is also assumed that you have brought in the necessary tools using the &#39;pacman&#39; package management tool Tools needed including:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S git&#xA;pacman -S make&#xA;pacman -S gcc&#xA;pacman -S gdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And possibly others depending upon your usage. Then you will need to build and install kconfig-frontends per the instructions of the top-level README.txt file in the tools repository. This requires the following additional tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S bison&#xA;pacman -S curl&#xA;pacman -S gperf&#xA;pacman -S ncurses-devel&#xA;pacman -S automake-wrapper&#xA;pacman -S autoconf&#xA;pacman -S pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because of some versioning issues, I had to run &#39;aclocal&#39; prior to running the kconfig-frontends configure script. See &#34;Configuring NuttX&#34; below for further information.&lt;/p&gt; &#xA;&lt;p&gt;Unlike Cygwin, MSYS does not support symbolic links. The &#39;ln -s&#39; command will, in fact, copy a directory! This means that you Make.defs file will have to include definitions like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ifeq ($(CONFIG_WINDOWS_MSYS),y)&#xA;  DIRLINK = $(TOPDIR)/tools/copydir.sh&#xA;  DIRUNLINK = $(TOPDIR)/tools/unlink.sh&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will force the directory copies to work in a way that can be handled by the NuttX build system. NOTE: The default link.sh script has been updated so that is should now be MSYS2 compatible. The above is preferred but no longer necessary in the Make.defs file.&lt;/p&gt; &#xA;&lt;p&gt;To build the simulator under MSYS, you also need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It appears that you cannot use directory names with spaces in them like &#34;/c/Program\ Files (86)&#34; in the MSYS path variable. I worked around this by create Windows junctions like this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the a windows command terminal,&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cd to &lt;code&gt;c:\msys64&lt;/code&gt;, then&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mklink /j programfiles &#34;C:/Program\ Files&#34;&lt;/code&gt; and&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mklink /j programfiles86 &#34;C:/Program\ Files\ \(x86\)&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;They then show up as &lt;code&gt;/programfiles&lt;/code&gt; and &lt;code&gt;/programfiles86&lt;/code&gt; with the MSYS2 sandbox. Those paths can then be used with the PATH variable. I had to do something similar for the path to the GNU Tools &#34;ARM Embedded Toolchain&#34; which also has spaces in the path name.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Ubuntu Bash under Windows 10&lt;/h2&gt; &#xA;&lt;p&gt;A better version of a command-line only Ubuntu under Windows 10 (beta) has recently been made available from Microsoft.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Installation instructions abound on the Internet complete with screen shots. I will attempt to duplicate those instructions in full here. Here are the simplified installation steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;em&gt;Settings&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;em&gt;Update &amp;amp; security&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;em&gt;For Developers&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under &lt;em&gt;Use developer features&lt;/em&gt;, select the &lt;em&gt;Developer mode&lt;/em&gt; option to setup the environment to install Bash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A message box should pop up. Click &lt;em&gt;Yes&lt;/em&gt; to turn on developer mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the necessary components install, you&#39;ll need to restart your computer.&lt;/p&gt; &lt;p&gt;Once your computer reboots:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;em&gt;Control Panel&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;em&gt;Programs&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;em&gt;Turn Windows features on or off&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A list of features will pop up, check the &lt;em&gt;Windows Subsystem for Linux (beta)&lt;/em&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click &lt;em&gt;OK&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the components installed on your computer, click the &lt;em&gt;Restart now&lt;/em&gt; button to complete the task.&lt;/p&gt; &lt;p&gt;After your computer restarts, you will notice that Bash will not appear in the &lt;em&gt;Recently added&lt;/em&gt; list of apps, this is because Bash isn&#39;t actually installed yet. Now that you have setup the necessary components, use the following steps to complete the installation of Bash:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;em&gt;Start&lt;/em&gt;, do a search for &lt;code&gt;bash.exe&lt;/code&gt;, and press &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On the command prompt, type &lt;code&gt;y&lt;/code&gt; and press Enter to download and install Bash from the Windows Store. This will take awhile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then you&#39;ll need to create a default UNIX user account. This account doesn&#39;t have to be the same as your Windows account. Enter the username in the required field and press Enter (you can&#39;t use the username &lt;code&gt;admin&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Close the &lt;code&gt;bash.exe&lt;/code&gt; command prompt.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that you completed the installation and setup, you can open the Bash tool from the Start menu like you would with any other app.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing Windows Files from Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;File systems will be mounted under &lt;code&gt;/mnt&lt;/code&gt; so for example &lt;code&gt;C:\Program Files&lt;/code&gt; appears at &lt;code&gt;/mnt/c/Program Files&lt;/code&gt;. This is as opposed to Cygwin where the same directory would appear at &lt;code&gt;/cygdrive/c/Program Files&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With these differences (perhaps a few other Windows quirks) the Ubuntu install works just like Ubuntu running natively on your PC.&lt;/p&gt; &#xA;&lt;p&gt;A good tip for file sharing is to use symbolic links within your Ubuntu home directory. For example, suppose you have your &lt;code&gt;projects&lt;/code&gt; directory at &lt;code&gt;C:\Documents\projects&lt;/code&gt;. Then you can set up a link to the &lt;code&gt;projects/&lt;/code&gt; directory in your Ubuntu directory like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s /mnt/c/Documents/projects projects&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing Ubuntu Files From Windows&lt;/h3&gt; &#xA;&lt;p&gt;In Ubuntu Userspace for Windows, the Ubuntu file system root directory is at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%localappdata%\lxss\rootfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\Username\AppData\Local\lxss\rootfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, I am unable to see my files under the rootfs\home directory. After some looking around, I find the home directory &lt;code&gt;%localappdata%\lxss\home&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With that trick access to the &lt;code&gt;/home&lt;/code&gt; directory, you should actually be able to use Windows tools outside of the Ubuntu sandbox with versions of NuttX built within the sandbox using that path.&lt;/p&gt; &#xA;&lt;h3&gt;Executing Windows Tools from Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;You can also execute Windows tools from within the Ubuntu sandbox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/mnt/c/Program\ Files\ \(x86\)/Microchip/xc32/v1.43/bin/xc32-gcc.exe --version&#xA;Unable to translate current working directory. Using C:\WINDOWS\System32&#xA;xc32-gcc.exe (Microchip Technology) 4.8.3 MPLAB XC32 Compiler v1.43 Build date: Mar  1 2017&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The error message indicates that there are more issues: You cannot mix Windows tools that use Windows style paths in an environment that uses POSIX paths. I think you would have to use Linux tools only from within the Ubuntu sandbox.&lt;/p&gt; &#xA;&lt;h3&gt;Install Ubuntu Software&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;sudo apt-get install &amp;lt;package name&amp;gt;&lt;/code&gt;. As examples, this is how you would get GIT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will get you a compiler for your host PC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will get you an ARM compiler for your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install gcc-arm-none-eabi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: That is just an example. I am not sure if apt-get will give you a current or usable compiler. You should carefully select your toolchain for the needs of your project.&lt;/p&gt; &#xA;&lt;p&gt;You will also need to get the kconfig-frontends configuration as described below under &lt;em&gt;NuttX Configuration Tool&lt;/em&gt;. In order to build the kconfig-frontends configuration tool you will also need: &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;gperf&lt;/code&gt;, &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;bison&lt;/code&gt;, and &lt;code&gt;libncurses-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That is enough to do a basic NuttX build.&lt;/p&gt; &#xA;&lt;h3&gt;Integrating with Windows Tools&lt;/h3&gt; &#xA;&lt;p&gt;If you want to integrate with Windows native tools, then you would need deal with the same kind of craziness as with integrating Cygwin with native toolchains, see the section &lt;em&gt;Cygwin Build Problems&lt;/em&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;However, there is currently no build support for using Windows native tools with Ubuntu under Windows. This tool combination is made to work with Cygwin through the use of the &lt;code&gt;cygpath -w&lt;/code&gt; tool that converts paths from say &lt;code&gt;/cydrive/c/Program Files&lt;/code&gt; to &lt;code&gt;C:\Program Files&lt;/code&gt;. There is, however, no corresponding tool to convert &lt;code&gt;/mnt/c/Program Files&lt;/code&gt; in the Ubuntu environment.&lt;/p&gt; &#xA;&lt;h3&gt;Graphics Support&lt;/h3&gt; &#xA;&lt;p&gt;The Ubuntu version support by Microsoft is a command-line only version. There is no support for Linux graphics utilities.&lt;/p&gt; &#xA;&lt;p&gt;This limitation is not a limitation of Ubuntu, however, only in what Microsoft is willing to support. If you install a X-Server, then you can also use basic graphics utilities. See for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.howtogeek.com/261575/how-to-run-graphical-linux-desktop-applications-from-windows-10s-bash-shell/&#34;&gt;http://www.howtogeek.com/261575/how-to-run-graphical-linux-desktop-applications-from-windows-10s-bash-shell/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many Linux graphics programs would, however, also require a graphics framework like GTK or Qt. So this might be a trip down the rabbit hole.&lt;/p&gt; &#xA;&lt;h3&gt;Using macOS&lt;/h3&gt; &#xA;&lt;p&gt;You need to install at least the following tools specific to macOS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flock (used by APPDIR build logic)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A macOS port is available at: &lt;a href=&#34;https://github.com/discoteq/flock&#34;&gt;https://github.com/discoteq/flock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap discoteq/discoteq&#xA;brew install flock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to build the sim:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Xcode (the native compiler and the rest of the toolchain)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ELF toolchain (if you want to build modules for CONFIG_LIBC_MODLIB)&lt;/p&gt; &lt;p&gt;brew install x86_64-elf-gcc&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;INSTALLATION&lt;/h1&gt; &#xA;&lt;p&gt;There are two ways to get NuttX: You may download released, stable tarballs from either the project website. Or you may get NuttX by cloning the GIT repositories. Let&#39;s consider the released tarballs first:&lt;/p&gt; &#xA;&lt;h2&gt;Download and Unpack&lt;/h2&gt; &#xA;&lt;p&gt;Download and unpack the NuttX tarball. If you are reading this, then you have probably already done that. After unpacking, you will end up with a directory called nuttx-version (where version is the NuttX version number). You might want to rename that directory nuttx to match the various instructions in the documentation and some scripts in the source tree.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download location:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://nuttx.apache.org/download/&#34;&gt;https://nuttx.apache.org/download/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Legacy download locations:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://bitbucket.org/nuttx/nuttx/downloads&#34;&gt;https://bitbucket.org/nuttx/nuttx/downloads&lt;/a&gt; &lt;a href=&#34;https://sourceforge.net/projects/nuttx/files/nuttx/&#34;&gt;https://sourceforge.net/projects/nuttx/files/nuttx/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Semi-Optional apps/ Package&lt;/h2&gt; &#xA;&lt;p&gt;All NuttX libraries and example code used to be in included within the NuttX source tree. As of NuttX-6.0, this application code was moved into a separate tarball, the apps tarball. If you are just beginning with NuttX, then you will want to download the versioned apps tarball along with the NuttX tarball. If you already have your own product application directory, then you may not need the apps tarball.&lt;/p&gt; &#xA;&lt;p&gt;It is called &#34;Semi-optional&#34; because if you don&#39;t have some &lt;code&gt;apps/&lt;/code&gt; directory, NuttX will &lt;em&gt;fail&lt;/em&gt; to build! You do not necessarily need to use the NuttX apps tarball but may, instead, provide your own custom application directory. Such a custom directory would need to include a valid Makefile to support the build and a valid Kconfig file to support the configuration. More about these files later.&lt;/p&gt; &#xA;&lt;p&gt;Download then unpack the apps tarball in the same directory where you unpacked the NuttX tarball. After you unpack the apps tarball, you will have a new directory called apps-version (where the version should exactly match the version of the NuttX tarball). Again, you might want to rename the directory to simply apps/ to match what you read in the documentation&lt;/p&gt; &#xA;&lt;p&gt;After unpacking (and renaming) the apps tarball, you will have two directories side by side like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;         |&#xA;    +----+----+&#xA;    |         |&#xA;  nuttx/     apps/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is important because the NuttX build will expect to find the apps directory in that (default) location. That default location can be changed by modifying your NuttX configuration file, but that is another story.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Directories with Spaces in the Path&lt;/h2&gt; &#xA;&lt;p&gt;The nuttx build directory should reside in a path that contains no spaces in any higher level directory name. For example, under Cygwin, your home directory might be formed from your first and last names like: &lt;code&gt;/home/First Last&lt;/code&gt;. That will cause strange errors when the make system tries to build.&lt;/p&gt; &#xA;&lt;p&gt;[Actually, that problem is probably not too difficult to fix. Some Makefiles probably just need some paths within double quotes]&lt;/p&gt; &#xA;&lt;p&gt;I work around spaces in the home directory name, by creating a new directory that does not contain any spaces, such as &lt;code&gt;/home/nuttx&lt;/code&gt;. Then I install NuttX in &lt;code&gt;/home/nuttx&lt;/code&gt; and always build from &lt;code&gt;/home/nuttx/nuttx-code&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading from Repositories&lt;/h2&gt; &#xA;&lt;h3&gt;Cloning the Repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;BEFORE&lt;/strong&gt; cloning repositories on any Windows platform do the following GIT command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global core.autocrlf false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will avoid conversions of linefeeds (newlines, \n) to carriage return plus linefeed sequences (\r\n)&lt;/p&gt; &#xA;&lt;p&gt;The current NuttX du jour is available in from a GIT repository. Here are instructions for cloning the core NuttX RTOS (corresponding to the nuttx tarball discussed above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://gitbox.apache.org/repos/asf/nuttx.git nuttx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-or-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/apache/nuttx.git nuttx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the semi-optional apps/ application directory and be cloned like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://gitbox.apache.org/repos/asf/nuttx-apps.git apps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-or-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/apache/nuttx-apps.git apps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will give you the same directory structure like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;         |&#xA;    +----+----+&#xA;    |         |&#xA;  nuttx/     apps/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring the Clones&lt;/h3&gt; &#xA;&lt;p&gt;The following steps need to be performed for each of the repositories. After changing to the clone directory:&lt;/p&gt; &#xA;&lt;p&gt;Set your identity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global user.name &#34;My Name&#34;&#xA;git config --global user.email my.name@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Colorized diffs are much easier to read:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global color.branch auto&#xA;git config --global color.diff auto&#xA;git config --global color.interactive auto&#xA;git config --global color.status auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout other settings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cloning NuttX Inside Cygwin&lt;/h3&gt; &#xA;&lt;p&gt;If you are cloning the NuttX repository, it is recommended to avoid automatic end of lines conversions by git. These conversions may break some scripts like configure.sh. Before cloning, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global core.autocrlf false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Repositories&lt;/h2&gt; &#xA;&lt;p&gt;These are standalone repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gitbox.apache.org/repos/asf/nuttx-apps&#34;&gt;https://gitbox.apache.org/repos/asf/nuttx-apps&lt;/a&gt; or &lt;a href=&#34;https://github.com/apache/nuttx-apps.git&#34;&gt;https://github.com/apache/nuttx-apps.git&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This directory holds an optional package of applications and libraries can be used with the NuttX RTOS. There is a README.txt file there that will provide more information about that package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bitbucket.org/nuttx/nxwidgets&#34;&gt;https://bitbucket.org/nuttx/nxwidgets&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This is the NuttX C++ graphics support. This includes NxWM, the tiny NuttX Window Manager.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bitbucket.org/nuttx/uclibc&#34;&gt;https://bitbucket.org/nuttx/uclibc&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This repository contains a version of the uClibc++ C++ library. This code originates from &lt;a href=&#34;http://cxx.uclibc.org/&#34;&gt;http://cxx.uclibc.org/&lt;/a&gt; and has been adapted for NuttX by the RGMP team (&lt;a href=&#34;http://rgmp.sourceforge.net/wiki/index.php/Main_Page&#34;&gt;http://rgmp.sourceforge.net/wiki/index.php/Main_Page&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bitbucket.org/nuttx/buildroot&#34;&gt;https://bitbucket.org/nuttx/buildroot&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A environment that you can to use to build a custom, NuttX GNU toolchain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bitbucket.org/nuttx/tools&#34;&gt;https://bitbucket.org/nuttx/tools&lt;/a&gt;&lt;/p&gt; &lt;p&gt;There are snapshots of some tools here that you will need to work with NuttX: kconfig-frontends, genromfs, and others.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes about Header Files&lt;/h2&gt; &#xA;&lt;h3&gt;Other C-Library Header Files&lt;/h3&gt; &#xA;&lt;p&gt;When a GCC toolchain is built, it must be built against a C library. The compiler together with the contents of the C library completes the C language definition and provides the complete C development environment. NuttX provides its own, built-in C library. So the complete, consistent C language definition for use with NuttX comes from the combination of the compiler and the header files provided by the NuttX C library.&lt;/p&gt; &#xA;&lt;p&gt;When a GCC toolchain is built, it incorporates the C library header files into the compiler internal directories and, in this way, the C library really becomes a part of the toolchain. If you use the NuttX buildroot toolchain as described below under &#34;NuttX Buildroot Toolchain&#34;, your GCC toolchain will build against the NuttX C library and will incorporate the NuttX C library header files as part of the toolchain.&lt;/p&gt; &#xA;&lt;p&gt;If you use some other, third-party tool chain, this will not be the case, however. Those toolchains were probably built against some other, incompatible C library distribution (such as newlib). Those tools will have incorporated the incompatible C library header files as part of the toolchain. These incompatible header files must &lt;em&gt;not&lt;/em&gt; be used with NuttX because they will conflict with definitions in the NuttX built-in C-Library. For such toolchains that include header files from a foreign C-Library, NuttX must be compiled without using the standard header files that are distributed with your toolchain. This prevents including conflicting, incompatible header files such as stdio.h.&lt;/p&gt; &#xA;&lt;p&gt;The math.h and stdarg.h are probably the two most trouble some header files to deal with. These troublesome header files are discussed in more detail below.&lt;/p&gt; &#xA;&lt;h3&gt;Header Files Provided by Your Toolchain&lt;/h3&gt; &#xA;&lt;p&gt;Certain header files, such as &lt;code&gt;setjmp.h&lt;/code&gt;, &lt;code&gt;stdarg.h&lt;/code&gt;, and &lt;code&gt;math.h&lt;/code&gt;, may still be needed from your toolchain and your compiler may not, however, be able to find these if you compile NuttX without using standard header files (i.e., with &lt;code&gt;-nostdinc&lt;/code&gt;). If that is the case, one solution is to copy those header file from your toolchain into the NuttX include directory.&lt;/p&gt; &#xA;&lt;h3&gt;Duplicated Header Files&lt;/h3&gt; &#xA;&lt;p&gt;There are also a few header files that can be found in the &lt;code&gt;nuttx/include&lt;/code&gt; directory which are duplicated by the header files from your toolchain. stdint.h and stdbool.h are examples. If you prefer to use the &lt;code&gt;stdint.h&lt;/code&gt; and &lt;code&gt;stdbool.h&lt;/code&gt; header files from your toolchain, those could be copied into the &lt;code&gt;nuttx/include/&lt;/code&gt; directory. Using most other header files from your toolchain would probably cause errors.&lt;/p&gt; &#xA;&lt;h3&gt;math.h&lt;/h3&gt; &#xA;&lt;p&gt;Even though you should not use a foreign C-Library, you may still need to use other, external libraries with NuttX. In particular, you may need to use the math library, libm.a. NuttX supports a generic, built-in math library that can be enabled using &lt;code&gt;CONFIG_LIBM=y&lt;/code&gt;. However, you may still want to use a higher performance external math library that has been tuned for your CPU. Sometimes such tuned math libraries are bundled with your toolchain.&lt;/p&gt; &#xA;&lt;p&gt;The math library header file, &lt;code&gt;math.h&lt;/code&gt;, is a then special case. If you do nothing, the standard math.h header file that is provided with your toolchain will be used.&lt;/p&gt; &#xA;&lt;p&gt;If you have a custom, architecture specific math.h header file, then that header file should be placed at &lt;code&gt;arch/&amp;lt;cpu&amp;gt;/include/math.h&lt;/code&gt;. There is a stub &lt;code&gt;math.h&lt;/code&gt; header file located at &lt;code&gt;include/nuttx/lib/math.h&lt;/code&gt;. This stub header file can be used to &#34;redirect&#34; the inclusion to an architecture- specific math.h header file. If you add an architecture specific math.h header file then you should also define &lt;code&gt;CONFIG_ARCH_MATH_H=y&lt;/code&gt; in your NuttX Configuration file. If &lt;code&gt;CONFIG_ARCH_MATH_H&lt;/code&gt; is selected, then the top-level Makefile will copy the stub math.h header file from &lt;code&gt;include/nuttx/lib/math.h&lt;/code&gt; to &lt;code&gt;include/math.h&lt;/code&gt; where it will become the system &lt;code&gt;math.h&lt;/code&gt; header file. The stub &lt;code&gt;math.h&lt;/code&gt; header file does nothing other than to include that architecture-specific &lt;code&gt;math.h&lt;/code&gt; header file as the system &lt;code&gt;math.h&lt;/code&gt; header file.&lt;/p&gt; &#xA;&lt;h3&gt;float.h&lt;/h3&gt; &#xA;&lt;p&gt;If you enable the generic, built-in math library, then that math library will expect your toolchain to provide the standard &lt;code&gt;float.h&lt;/code&gt; header file. The float.h header file defines the properties of your floating point implementation. It would always be best to use your toolchain&#39;s &lt;code&gt;float.h&lt;/code&gt; header file but if none is available, a default &lt;code&gt;float.h&lt;/code&gt; header file will be provided if this option is selected. However, there is no assurance that the settings in this &lt;code&gt;float.h&lt;/code&gt; are actually correct for your platform!&lt;/p&gt; &#xA;&lt;h3&gt;stdarg.h&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, the correct version of stdarg.h is the version provided with your toolchain. However, sometimes there are issues with using your toolchains &lt;code&gt;stdarg.h&lt;/code&gt;. For example, it may attempt to draw in header files that do not exist in NuttX or perhaps the header files that it uses are not compatible with the NuttX header files. In those cases, you can use an architecture-specific &lt;code&gt;stdarg.h&lt;/code&gt; header file by defining &lt;code&gt;CONFIG_ARCH_STDARG_H=y&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the discussion above for the &lt;code&gt;math.h&lt;/code&gt; header. This setting works exactly the same for the &lt;code&gt;stdarg.h&lt;/code&gt; header file.&lt;/p&gt; &#xA;&lt;h1&gt;CONFIGURING NUTTX&lt;/h1&gt; &#xA;&lt;h2&gt;Instantiating &#34;Canned&#34; Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;configure.sh&lt;/code&gt; and &lt;code&gt;configure.bat&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&#34;Canned&#34; NuttX configuration files are retained in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/configs/&amp;lt;config-dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;&amp;lt;board-name&amp;gt;&lt;/code&gt; is the name of your development board and &lt;code&gt;&amp;lt;config-dir&amp;gt;&lt;/code&gt; is the name of the sub-directory containing a specific configuration for that board. &lt;code&gt;&amp;lt;arch-name&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;chip-name&amp;gt;&lt;/code&gt; refer to characteristics of the MCU used on the board: &lt;code&gt;&amp;lt;arch-name&amp;gt;&lt;/code&gt; is the CPU architecture implemented by the MCU; &lt;code&gt;&amp;lt;chip-name&amp;gt;&lt;/code&gt; identifies the MCU chip family. Only a few steps are required to instantiate a NuttX configuration, but to make the configuration even easier there are scripts available in the tools/ sub-directory combines those simple steps into one command.&lt;/p&gt; &#xA;&lt;p&gt;There is one tool for use with any Bash-like shell that does configuration steps. It is used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/configure.sh &amp;lt;board-name&amp;gt;:&amp;lt;config-dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an alternative Windows batch file that can be used in the windows native environment like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools\configure.bat &amp;lt;board-name&amp;gt;:&amp;lt;config-dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And, to make sure that other platforms are supported, there is also a C program at tools/configure.c that can be compiled to establish the board configuration.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;tools/README.txt&lt;/code&gt; for more information about these scripts.&lt;/p&gt; &#xA;&lt;p&gt;General information about configuring NuttX can be found in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{TOPDIR}/boards/README.txt&#xA;{TOPDIR}/boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/README.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The Hidden Configuration Scripts:&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned above, there are only a few simple steps to instantiating a NuttX configuration. Those steps are hidden by the configuration scripts but are summarized below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy Files&lt;/p&gt; &lt;p&gt;Configuring NuttX requires only copying two files from the &lt;code&gt;&amp;lt;config-dir&amp;gt;&lt;/code&gt; to the directory where you installed NuttX (TOPDIR):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/configs/&amp;lt;config-dir&amp;gt;/Make.def&lt;/code&gt; to &lt;code&gt;{TOPDIR}/Make.defs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;OR&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/scripts/Make.def&lt;/code&gt; to &lt;code&gt;{TOPDIR}/Make.defs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Make.defs describes the rules needed by your tool chain to compile and link code. You may need to modify this file to match the specific needs of your toolchain. NOTE that a configuration may have its own unique Make.defs file in its configuration directory or it may use a common Make.defs file for the board in the scripts/ directory. The first takes precedence.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/configs/&amp;lt;config-dir&amp;gt;/defconfig&lt;/code&gt; to &lt;code&gt;{TOPDIR}/.config&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The defconfig file holds the actual build configuration. This file is included by all other make files to determine what is included in the build and what is not. This file is also used to generate a C configuration header at &lt;code&gt;include/nuttx/config.h&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy other, environment-specific files to &lt;code&gt;{TOPDIR}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This might include files like .gdbinit or IDE configuration files like .project or .cproject.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refresh the Configuration&lt;/p&gt; &lt;p&gt;New configuration setting may be added or removed. Existing settings may also change there values or options. This must be handled by refreshing the configuration as described below.&lt;/p&gt; &lt;p&gt;NOTE: NuttX uses only compressed defconfig files. For the NuttX defconfig files, this refreshing step is &lt;em&gt;NOT&lt;/em&gt; optional; it is also necessary to uncompress and regenerate the full making file. This is discussed further below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Refreshing Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Configurations can get out of date. As new configuration settings are added or removed or as dependencies between configuration settings change, the contents of a default configuration can become out of synch with the build systems. Hence, it is a good practice to &#34;refresh&#34; each configuration after configuring and before making. To refresh the configuration, use the NuttX Configuration Tool like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make oldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AFTER you have instantiated the NuttX configuration as described above. The configuration step copied the .config file into place in the top-level NuttX directory; &#39;make oldconfig&#39; step will then operate on that .config file to bring it up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;If your configuration is out of date, you will be prompted by &#39;make oldconfig&#39; to resolve the issues detected by the configuration tool, that is, to provide values for the new configuration options in the build system. Doing this can save you a lot of problems down the road due to obsolete settings in the default board configuration file. The NuttX configuration tool is discussed in more detail in the following paragraph.&lt;/p&gt; &#xA;&lt;p&gt;Confused about what the correct value for a new configuration item should be? Enter ? in response to the &#39;make oldconfig&#39; prompt and it will show you the help text that goes with the option.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to make any decisions are willing to just accept the recommended default value for each new configuration item, an even easier way is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make olddefconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The olddefconfig target will simply bring your configuration up to date with the current Kconfig files, setting any new options to the default value. No questions asked.&lt;/p&gt; &#xA;&lt;h2&gt;NuttX Configuration Tool&lt;/h2&gt; &#xA;&lt;p&gt;An automated tool has been incorporated to support re-configuration of NuttX. This tool is based on the kconfig-frontends application available at &lt;a href=&#34;https://bitbucket.org/nuttx/tools/src/master/kconfig-frontends/&#34;&gt;https://bitbucket.org/nuttx/tools/src/master/kconfig-frontends/&lt;/a&gt;. (This is a snapshot of the old &lt;a href=&#34;http://ymorin.is-a-geek.org/projects/kconfig-frontends&#34;&gt;http://ymorin.is-a-geek.org/projects/kconfig-frontends&lt;/a&gt; which is no longer available.) This application provides a tool called &lt;code&gt;kconfig-mconf&lt;/code&gt; that is used by the NuttX top-level Makefile. The following make target is provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This make target will bring up NuttX configuration menus.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Never do &lt;code&gt;make menuconfig&lt;/code&gt; on a configuration that has not been converted to use the kconfig-frontends tools! This will damage your configuration (see &lt;a href=&#34;https://cwiki.apache.org/confluence/display/NUTTX/Converting+Legacy+Configurations+to+Use+kconfig-mconf&#34;&gt;https://cwiki.apache.org/confluence/display/NUTTX/Converting+Legacy+Configurations+to+Use+kconfig-mconf&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;NuttX also supports kconfiglib(&lt;a href=&#34;https://github.com/ulfalizer/Kconfiglib&#34;&gt;https://github.com/ulfalizer/Kconfiglib&lt;/a&gt;) by default, which is a Kconfig tool implemented in Python 2/3. Compared with kconfig-frontends, kconfiglib provides NuttX with the possibility of multi-platform support(configure NuttX in Winodws native/Visual Studio), and also kconfiglib has a stronger Kconfig syntax check, this will help developers to avoid some Kconfig syntax errors. Install kconfiglib via following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install kconfiglib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are a working on Windows, which also need the support of windows-curses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install windows-curses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It should be noted that kconfiglib does not support &lt;strong&gt;modules&lt;/strong&gt; attributes. (&lt;a href=&#34;https://github.com/ulfalizer/Kconfiglib/raw/master/kconfiglib.py#L3239-L3254&#34;&gt;https://github.com/ulfalizer/Kconfiglib/blob/master/kconfiglib.py#L3239-L3254&lt;/a&gt;, the community seems to have stopped updating), if the features depends on &lt;code&gt;CONFIG_BUILD_LOADABLE&lt;/code&gt;, kconfiglib may not be a good choice.&lt;/p&gt; &#xA;&lt;p&gt;How do we tell a new configuration from an old one? See &#34;Incompatibilities with Older Configurations&#34; below.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;menuconfig&lt;/code&gt; make target depends on two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The Kconfig configuration data files that appear in almost all NuttX directories. These data files are the part that is still under development (patches are welcome!). The Kconfig files contain configuration information for the configuration settings relevant to the directory in which the Kconfig file resides.&lt;/p&gt; &lt;p&gt;NOTE: For a description of the syntax of this configuration file, see kconfig-language.txt in the tools repository at &lt;a href=&#34;https://bitbucket.org/nuttx/tools&#34;&gt;https://bitbucket.org/nuttx/tools&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;kconfig-mconf&lt;/code&gt; tool. &lt;code&gt;kconfig-mconf&lt;/code&gt; is part of the kconfig-frontends package. You can download that package from the snapshot in the tools repository at &lt;a href=&#34;https://bitbucket.org/nuttx/tools&#34;&gt;https://bitbucket.org/nuttx/tools&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Building kconfig-frontends under Linux may be as simple as &lt;code&gt;configure; make; make install&lt;/code&gt; but there may be some build complexities, especially if you are building under Cygwin. See the more detailed build instructions in the top-level README.txt file of the tools repository at &lt;a href=&#34;https://bitbucket.org/nuttx/tools&#34;&gt;https://bitbucket.org/nuttx/tools&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;make install&lt;/code&gt; step will, by default, install the &lt;code&gt;kconfig-mconf&lt;/code&gt; tool at &lt;code&gt;/usr/local/bin/mconf&lt;/code&gt;. Where ever you choose to install &lt;code&gt;kconfig-mconf&lt;/code&gt;, make certain that your PATH variable includes a path to that installation directory.&lt;/p&gt; &lt;p&gt;The kconfig-frontends tools will not build in a native Windows environment directly &#34;out-of-the-box&#34;. For the Windows native case, you can use the modified version of kconfig-frontends that can be found at&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://uvc.de/posts/linux-kernel-configuration-tool-kconfig-under-windows.html&#34;&gt;http://uvc.de/posts/linux-kernel-configuration-tool-kconfig-under-windows.html&lt;/a&gt;&lt;/p&gt; &lt;p&gt;or a more recent port that can be found at&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://reclonelabs.com/more-kconfig-awesomeness-for-windows/&#34;&gt;http://reclonelabs.com/more-kconfig-awesomeness-for-windows/&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The basic configuration order is &#34;bottom-up&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the build environment,&lt;/li&gt; &#xA; &lt;li&gt;Select the processor,&lt;/li&gt; &#xA; &lt;li&gt;Select the board,&lt;/li&gt; &#xA; &lt;li&gt;Select the supported peripherals&lt;/li&gt; &#xA; &lt;li&gt;Configure the device drivers,&lt;/li&gt; &#xA; &lt;li&gt;Configure the application options on top of this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is pretty straight forward for creating new configurations but may be less intuitive for modifying existing configurations.&lt;/p&gt; &#xA;&lt;p&gt;Another ncurses-based tool that is an option to kconfig-mconf is kconfig-nconf. The differences are primary in in the aesthetics of the UI. If you have kconfig-nconf built, then you can invoke that front end with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make nconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have an environment that supports the Qt or GTK graphical systems (probably KDE or gnome, respectively, or Cygwin under Windows with Qt or GTK installed), then you can also build the graphical kconfig-frontends, kconfig-qconf and kconfig-gconf. In these case, you can start the graphical configurator with either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make qconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make gconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some keyboard shortcuts supported by kconfig-mconf, the tool that runs when you do &#39;make menuconfig&#39;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;?&lt;/code&gt; will bring up the mconfig help display.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/&lt;/code&gt; can be used find configuration selections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Z&lt;/code&gt; can be used to reveal hidden configuration options&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These last two shortcuts are described further in the following paragraphs.&lt;/p&gt; &#xA;&lt;h2&gt;Finding Selections in the Configuration Menus&lt;/h2&gt; &#xA;&lt;p&gt;The NuttX configuration options have gotten complex and it can be very difficult to find options in the menu trees if you are not sure where to look. The &#34;basic configuration order&#34; describe above can help to narrow things down.&lt;/p&gt; &#xA;&lt;p&gt;But if you know exactly what configuration setting you want to select, say &lt;code&gt;CONFIG_XYZ&lt;/code&gt;, but not where to find it, then the &lt;code&gt;make menuconfig&lt;/code&gt; version of the tool offers some help: By pressing the &#39;/&#39; key, the tool will bring up a menu that will allow you to search for a configuration item. Just enter the string &lt;code&gt;CONFIG_XYZ&lt;/code&gt; and press ENTER. It will show you not only where to find the configuration item, but also all of the dependencies related to the configuration item.&lt;/p&gt; &#xA;&lt;h2&gt;Reveal Hidden Configuration Options&lt;/h2&gt; &#xA;&lt;p&gt;If you type &lt;code&gt;Z&lt;/code&gt;, then &lt;code&gt;kconfig-mconf&lt;/code&gt; will change what is displayed. Normally, only enabled features that have all of their dependencies met are displayed. That is, of course, not very useful if you would like to discover new options or if you are looking for an option and do not realize that the dependencies have not yet been selected and, hence, it is not displayed.&lt;/p&gt; &#xA;&lt;p&gt;But if you enter &lt;code&gt;Z&lt;/code&gt;, then every option will be shown, whether or not its dependencies have been met. You can then see everything that could be selected with the right dependency selections. These additional options will be shown the &lt;code&gt;-&lt;/code&gt; for the selection and for the value (since it cannot be selected and has no value). About all you do is to select the &lt;code&gt;&amp;lt;Help&amp;gt;&lt;/code&gt; option to see what the dependencies are.&lt;/p&gt; &#xA;&lt;h2&gt;Make Sure that You are on the Right Platform&lt;/h2&gt; &#xA;&lt;p&gt;Saved configurations may run on Linux, Cygwin (32- or 64-bit), or other platforms. The platform characteristics can be changed use &lt;code&gt;make menuconfig&lt;/code&gt;. Sometimes this can be confusing due to the differences between the platforms. Enter &lt;code&gt;sethost.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;sethost.sh is a simple script that changes a configuration to your host platform. This can greatly simplify life if you use many different configurations. For example, if you are running on Linux and you configure like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/configure.sh board:configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The you can use the following command to both (1) make sure that the configuration is up to date, AND (2) the configuration is set up correctly for Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/sethost.sh -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you are on a Windows/Cygwin 64-bit platform:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/sethost.sh -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, for MSYS/MSYS2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/sethost.sh -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other options are available from the help option built into the script. You can see all options with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/sethost.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recently, the options to the configure.sh (and configure.bat) scripts have been extended so that you both setup the configuration, select for the host platform that you use, and uncompress and refresh the defconfig file all in one command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/configure.sh -l board:configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a Linux host or for a Windows/Cygwin host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/configure.sh -c board:configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other options are available from the help option built into the script. You can see all options with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/configure.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comparing Two Configurations&lt;/h2&gt; &#xA;&lt;p&gt;If you try to compare two configurations using &#39;diff&#39;, you will probably not be happy with the result. There are superfluous things added to the configuration files that make comparisons with the human eye difficult.&lt;/p&gt; &#xA;&lt;p&gt;There is a tool at nuttx/tools/cmpconfig.c that can be built to simplify these comparisons. The output from this difference tool will show only the meaningful differences between two configuration files. This tool is built as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd nuttx/tools&#xA;make -f Makefile.host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a program called &#39;cmpconfig&#39; or &#39;comconfig.exe&#39; on Windows.&lt;/p&gt; &#xA;&lt;p&gt;Why would you want to compare two configuration files? Here are a few of the reasons why I do this&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;When I create a new configuration I usually base it on an older configuration and I want to know, &#34;What are the options that I need to change to add the new feature to the older configurations?&#34; For example, suppose that I have a boardA/nsh configuration and I want to create a boardA/nxwm configuration. Suppose I already have boardB/nsh and boardB/nxwm configurations. Then by comparing the boardB/nsh with the boardB/nxwm I can see the modifications that I would need to make to my boardA/nsh to create a new boardA/nxwm.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;But the most common reason that I use the &#39;cmpconfig&#39; program is to check the results of &#34;refreshing&#34; a configuration with &#39;make oldconfig&#39; (see the paragraph &#34;Refreshing Configurations&#34; above). The &#39;make oldconfig&#39; command will make changes to my configuration and using &#39;cmpconfig&#39;, I can see precisely what those changes were and if any should be of concern to me.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#39;cmpconfig&#39; tool can also be useful when converting older, legacy manual configurations to the current configurations based on the kconfig-frontends tools. See the following paragraph.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Making &lt;code&gt;defconfig&lt;/code&gt; Files&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;.config&lt;/code&gt; Files as &lt;code&gt;defconfig&lt;/code&gt; Files:&lt;/h3&gt; &#xA;&lt;p&gt;The minimum &lt;code&gt;defconfig&lt;/code&gt; file is simply the generated &lt;code&gt;.config&lt;/code&gt; file with CONFIG_APPS_DIR setting removed or commented out. That setting provides the name and location of the &lt;code&gt;apps/&lt;/code&gt; directory relative to the &lt;code&gt;nuttx&lt;/code&gt; build directory. The default is &lt;code&gt;../apps/&lt;/code&gt;, however, the apps directory may be any other location and may have a different name. For example, the name of versioned NuttX releases are always in the form &lt;code&gt;apps-xx.yy&lt;/code&gt; where &lt;code&gt;xx.yy&lt;/code&gt; is the version number.&lt;/p&gt; &#xA;&lt;h3&gt;Finding the &lt;code&gt;apps/&lt;/code&gt; Directory Path:&lt;/h3&gt; &#xA;&lt;p&gt;When the default configuration is installed using one of the scripts or programs in the NuttX tools directory, there will be an option to provide the path to the &lt;code&gt;apps/&lt;/code&gt; directory. If not provided, then the configure tool will look around and try to make a reasonable decision about where the &lt;code&gt;apps/&lt;/code&gt; directory is located.&lt;/p&gt; &#xA;&lt;h3&gt;Compressed &lt;code&gt;defconfig&lt;/code&gt; Files:&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; also supports an option to generate very small &lt;code&gt;defconfig&lt;/code&gt; files. The &lt;code&gt;.config&lt;/code&gt; files are quite large and complex. But most of the settings in the &lt;code&gt;.config&lt;/code&gt; file simply have the default settings from the &lt;code&gt;Kconfig&lt;/code&gt; files. These &lt;code&gt;.config&lt;/code&gt; files can be converted into small &lt;code&gt;defconfig&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make savedefconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That make target will generate a defconfig file in the top-level directory. The size reduction is really quite remarkable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wc -l .config defconfig&#xA; 1085 .config&#xA;   82 defconfig&#xA; 1167 total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to be usable, the &lt;code&gt;.config&lt;/code&gt; file installed from the compressed defconfig file must be reconstituted using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make olddefconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE 1&lt;/strong&gt;: Only compressed defconfig files are retained in the NuttX repository. All patches and PRs that attempt to add or modify a defconfig file MUST use the compressed defconfig format as created by &#39;make savdefconfig.&#39;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE 2&lt;/strong&gt;: When &#39;make savedefconfig&#39; runs it will try several things some of which are expected to fail. In these cases you will see an error message from make followed by &#34;(ignored).&#34; You should also ignore these messages&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt;: This size reduction was accomplished by removing all setting from the &lt;code&gt;.config&lt;/code&gt; file that were at the default value. &lt;code&gt;make olddefconfig&lt;/code&gt; can regenerate the original &lt;code&gt;.config&lt;/code&gt; file by simply restoring those default settings. The underlying assumption here is, of course, that the default settings do not change. If the default settings change, and they often do, then the original &lt;code&gt;.config&lt;/code&gt; may not be reproducible.&lt;/p&gt; &#xA;&lt;p&gt;So if your project requires 100% reproducibility over a long period of time, you make want to save the complete &lt;code&gt;.config&lt;/code&gt; files vs. the standard, compressed &lt;code&gt;defconfig&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring with &#34;Compressed&#34; defconfig Files:&lt;/h3&gt; &#xA;&lt;p&gt;As described above &lt;code&gt;defconfig&lt;/code&gt;, all NuttX &lt;code&gt;defconfig&lt;/code&gt; files are compressed using &lt;code&gt;make savedeconfig&lt;/code&gt;. These compressed &lt;code&gt;defconfig&lt;/code&gt; files are generally not fully usable as they are and may not build the target binaries that you want because the compression process removed all of the default settings from the &lt;code&gt;defconfig&lt;/code&gt; file. To restore the default settings, you should run the following after configuring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make olddefconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will restore the the missing defaulted values.&lt;/p&gt; &#xA;&lt;p&gt;Using this command after configuring is generally a good practice anyway: Even if the &lt;code&gt;defconfig&lt;/code&gt; files are not &#34;compressed&#34; in this fashion, the &lt;code&gt;defconfig&lt;/code&gt; file may be old and the only way to assure that the installed &lt;code&gt;.config&lt;/code&gt; is is up to date is via &lt;code&gt;make oldconfig&lt;/code&gt; or &lt;code&gt;make olddefconfig&lt;/code&gt;. See the paragraph above entitled &#34;Refreshing Configurations&#34; for additional information.&lt;/p&gt; &#xA;&lt;h2&gt;Incompatibilities with Older Configurations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The current NuttX build system supports &lt;em&gt;only&lt;/em&gt; the new compressed, &lt;code&gt;defconfig&lt;/code&gt; configuration files generated using the &lt;code&gt;kconfig-frontends&lt;/code&gt; tools as described in the preceding section. Support for the older, legacy, manual configurations was eliminated in NuttX 7.0; support for uncompressed &lt;code&gt;.config-files-as-defconfig&lt;/code&gt; files was eliminated after NuttX-7.21. All configurations must now be done using the &lt;code&gt;kconfig-frontends&lt;/code&gt; tool. The older manual configurations and the new &lt;code&gt;kconfig-frontends&lt;/code&gt; configurations are not compatible. Old legacy configurations can &lt;em&gt;not&lt;/em&gt; be used with the &lt;code&gt;kconfig-frontends&lt;/code&gt; tool and, hence, cannot be used with releases of NuttX 7.0 and beyond:&lt;/p&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;make menuconfig&lt;/code&gt; with a legacy configuration the resulting configuration will probably not be functional.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q: How can I tell if a configuration is a new kconfig-frontends configuration or an older, manual configuration?&lt;/p&gt; &#xA; &lt;p&gt;A: Only old, manual configurations will have an appconfig file&lt;/p&gt; &#xA; &lt;p&gt;Q: How can I convert a older, manual configuration into a new, kconfig-frontends toolchain.&lt;/p&gt; &#xA; &lt;p&gt;A: Refer to &lt;a href=&#34;https://cwiki.apache.org/confluence/display/NUTTX/Converting+Legacy+Configurations+to+Use+kconfig-mconf&#34;&gt;https://cwiki.apache.org/confluence/display/NUTTX/Converting+Legacy+Configurations+to+Use+kconfig-mconf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As described above, whenever you use a configuration, you really should always refresh the configuration with the following command &lt;em&gt;before&lt;/em&gt; you make NuttX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make oldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make olddefconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will make sure that the configuration is up-to-date in the event that it has lapsed behind the current NuttX development (see the paragraph &#34;Refreshing Configurations&#34; above). But this only works with &lt;em&gt;new&lt;/em&gt; configuration files created with the kconfig-frontends tools.&lt;/p&gt; &#xA;&lt;p&gt;Further, this step is &lt;em&gt;NOT&lt;/em&gt; optional with the new, compressed defconfig files. It is a necessary step that will also uncompress the defconfig file, regenerating the &lt;code&gt;.config&lt;/code&gt; and making it usable for NuttX builds.&lt;/p&gt; &#xA;&lt;p&gt;Never do &lt;code&gt;make oldconfig&lt;/code&gt; (OR &lt;code&gt;make menuconfig&lt;/code&gt;) on a configuration that has not been converted to use the kconfig-frontends tools! This will damage your configuration (see &lt;a href=&#34;https://cwiki.apache.org/confluence/display/NUTTX/Converting+Legacy+Configurations+to+Use+kconfig-mconf&#34;&gt;https://cwiki.apache.org/confluence/display/NUTTX/Converting+Legacy+Configurations+to+Use+kconfig-mconf&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;NuttX Configuration Tool under DOS&lt;/h2&gt; &#xA;&lt;p&gt;Recent versions of NuttX support building NuttX from a native Windows console window (see &lt;em&gt;Native Windows Build&lt;/em&gt; below). But &lt;code&gt;kconfig-frontends&lt;/code&gt; is a Linux tool. At one time this was a problem for Windows users, but now there are two specially modified versions of the &lt;code&gt;kconfig-frontends&lt;/code&gt; tools that can be used. One can be found here: &lt;a href=&#34;http://uvc.de/posts/linux-kernel-configuration-tool-kconfig-under-windows.html&#34;&gt;http://uvc.de/posts/linux-kernel-configuration-tool-kconfig-under-windows.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration steps of the most recent versions of NuttX require the &lt;code&gt;kconfig-tweak&lt;/code&gt; tool that is not not available in the the above. However, there has been an update to this &lt;code&gt;Kconfig&lt;/code&gt; Windows tools that does include &lt;code&gt;kconfig-tweak&lt;/code&gt;: &lt;a href=&#34;http://reclonelabs.com/more-kconfig-awesomeness-for-windows/&#34;&gt;http://reclonelabs.com/more-kconfig-awesomeness-for-windows/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source code is available here: &lt;a href=&#34;https://github.com/reclone/kconfig-frontends-win32&#34;&gt;https://github.com/reclone/kconfig-frontends-win32&lt;/a&gt; and &lt;a href=&#34;https://github.com/reclone/kconfig-frontends-win32/releases&#34;&gt;https://github.com/reclone/kconfig-frontends-win32/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to use the version of &lt;code&gt;kconfig-frontends&lt;/code&gt; built under Cygwin outside of the Cygwin &lt;em&gt;sandbox&lt;/em&gt; in a native Windows environment:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You can run the configuration tool using Cygwin. However, the Cygwin &lt;code&gt;Win.mk&lt;/code&gt; will complain so to do this will, you have to manually edit the &lt;code&gt;.config&lt;/code&gt; file:&lt;/p&gt; &lt;p&gt;a. Delete the line: &lt;code&gt;CONFIG_WINDOWS_NATIVE=y&lt;/code&gt;&lt;/p&gt; &lt;p&gt;b. Change the apps/ directory path, &lt;code&gt;CONFIG_APPS_DIR&lt;/code&gt; to use Unix style delimiters. For example, change &lt;code&gt;..\apps&lt;/code&gt; to &lt;code&gt;../apps&lt;/code&gt;&lt;/p&gt; &lt;p&gt;And of course, after you use the configuration tool you need to restore &lt;code&gt;CONFIG_WINDOWS_NATIVE=y&lt;/code&gt; and the correct &lt;code&gt;CONFIG_APPS_DIR&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can, with some effort, run the Cygwin &lt;code&gt;kconfig-mconf&lt;/code&gt; tool directly in the Windows console window. In this case, you do not have to modify the &lt;code&gt;.config&lt;/code&gt; file, but there are other complexities:&lt;/p&gt; &lt;p&gt;a. You need to temporarily set the Cygwin directories in the PATH variable then run &lt;code&gt;kconfig-mconf&lt;/code&gt; manually like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; kconfig-mconf Kconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is a Windows batch file at &lt;code&gt;tools/kconfig.bat&lt;/code&gt; that automates these steps:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tools/kconfig menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;b. There is an issue with accessing DOS environment variables from the Cygwin &lt;code&gt;kconfig-mconf&lt;/code&gt; running in the Windows console. The following change to the top-level &lt;code&gt;Kconfig&lt;/code&gt; file seems to work around these problems:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; config APPSDIR&#xA;     string&#xA; -   option env=&#34;APPSDIR&#34;&#xA; +   default &#34;../apps&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;TOOLCHAINS&lt;/h1&gt; &#xA;&lt;h2&gt;Cross-Development Toolchains&lt;/h2&gt; &#xA;&lt;p&gt;In order to build NuttX for your board, you will have to obtain a cross- compiler to generate code for your target CPU. For each board, configuration, there is a &lt;code&gt;README.txt&lt;/code&gt; file (at &lt;code&gt;boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/README.txt&lt;/code&gt;). That README file contains suggestions and information about appropriate tools and development environments for use with your board.&lt;/p&gt; &#xA;&lt;p&gt;In any case, the PATH environment variable will need to be updated to include the location where the build can find the toolchain binaries.&lt;/p&gt; &#xA;&lt;h2&gt;NuttX Buildroot Toolchain&lt;/h2&gt; &#xA;&lt;p&gt;For many configurations, a DIY set of tools is available for NuttX. These tools can be downloaded from the NuttX Bitbucket.org file repository. After unpacking the buildroot tarball, you can find instructions for building the tools in the &lt;code&gt;buildroot/boards/README.txt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Check the README.txt file in the configuration directory for your board to see if you can use the buildroot toolchain with your board (this README.txt file is located in &lt;code&gt;boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/README.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This toolchain is available for both the Linux and Cygwin development environments.&lt;/p&gt; &#xA;&lt;p&gt;Advantages: (1) NuttX header files are built into the tool chain, and (2) related support tools like NXFLAT tools, the ROMFS genromfs tools, and the kconfig-frontends tools can be built into your toolchain.&lt;/p&gt; &#xA;&lt;p&gt;Disadvantages: This tool chain is not was well supported as some other toolchains. GNU tools are not my priority and so the buildroot tools often get behind. For example, until recently there was no EABI support in the NuttX buildroot toolchain for ARM.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: For Cortex-M3/4, there are OABI and EABI versions of the buildroot toolchains. If you are using the older OABI toolchain the prefix for the tools will be &lt;code&gt;arm-nuttx-elf-&lt;/code&gt;; for the EABI toolchain the prefix will be &lt;code&gt;arm-nuttx-eabi-&lt;/code&gt;. If you are using the older OABI toolchain with an ARM Cortex-M3/4, you will need to set CONFIG_ARM_TOOLCHAIN_BUILDROOT_OABI in the &lt;code&gt;.config&lt;/code&gt; file in order to pick the right tool prefix.&lt;/p&gt; &#xA;&lt;p&gt;If the make system ever picks the wrong prefix for your toolchain, you can always specify the prefix on the command to override the default like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CROSSDEV=arm-nuttx-elf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;SHELLS&lt;/h1&gt; &#xA;&lt;p&gt;The NuttX build relies on some shell scripts. Some are inline in the Makefiles and many are executable scripts in the &lt;code&gt;tools/&lt;/code&gt;. directory. The scripts were all developed using bash and many contain bash shell dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Most of the scripts begin with &lt;code&gt;#!/bin/bash&lt;/code&gt; to specifically select the bash shell. Some still have &lt;code&gt;#!/bin/sh&lt;/code&gt; but I haven&#39;t heard any complaints so these must not have bash dependencies.&lt;/p&gt; &#xA;&lt;p&gt;There are two shell issues that I have heard of:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux where &lt;code&gt;/bin/sh&lt;/code&gt; refers to an incompatible shell (like &lt;code&gt;ksh&lt;/code&gt; or &lt;code&gt;csh&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;In this case, bash is probably available and the &lt;code&gt;#!/bin/bash&lt;/code&gt; at the beginning of the file should do the job. If any scripts with &lt;code&gt;#!/bin/sh&lt;/code&gt; fail, try changing that to &lt;code&gt;#!/bin/bash&lt;/code&gt; and let me know about the change.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FreeBSD with the Bourne Shell and no bash shell.&lt;/p&gt; &lt;p&gt;The other, reverse case has also been reported on FreeBSD setups that have the Bourne shell, but not bash. In this base, &lt;code&gt;#!/bin/bash&lt;/code&gt; fails but &lt;code&gt;#!/bin/sh&lt;/code&gt; works okay. My recommendation in this case is to create a symbolic link at &lt;code&gt;/bin/bash&lt;/code&gt; that refers to the Bourne shell.&lt;/p&gt; &lt;p&gt;There may still be issues, however, with certain the &lt;code&gt;bash&lt;/code&gt;-centric scripts that will require modifications.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;BUILDING NUTTX&lt;/h1&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;NuttX builds in-place in the source tree. You do not need to create any special build directories. Assuming that your Make.defs is setup properly for your tool chain and that PATH environment variable contains the path to where your cross-development tools are installed, the following steps are all that are required to build NuttX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd {TOPDIR}&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At least one configuration (eagle100) requires additional command line arguments on the make command. Read &lt;code&gt;{TOPDIR}/boards/&amp;lt;arch-name&amp;gt;/&amp;lt;chip-name&amp;gt;/&amp;lt;board-name&amp;gt;/README.txt&lt;/code&gt; to see if that applies to your target.&lt;/p&gt; &#xA;&lt;h2&gt;Re-building&lt;/h2&gt; &#xA;&lt;p&gt;Re-building is normally simple -- just type make again.&lt;/p&gt; &#xA;&lt;p&gt;But there are some things that can &#34;get you&#34; when you use the Cygwin development environment with Windows native tools. The native Windows tools do not understand Cygwin&#39;s symbolic links, so the NuttX make system does something weird: It copies the configuration directories instead of linking to them (it could, perhaps, use the NTFS &lt;code&gt;mklink&lt;/code&gt; command, but it doesn&#39;t).&lt;/p&gt; &#xA;&lt;p&gt;A consequence of this is that you can easily get confused when you edit a file in one of the linked (i.e., copied) directories, re-build NuttX, and then not see your changes when you run the program. That is because build is still using the version of the file in the copied directory, not your modified file!&lt;/p&gt; &#xA;&lt;p&gt;Older versions of NuttX did not support dependencies in this configuration. So a simple work around this annoying behavior in this case was the following when you re-build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make clean_context all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &#39;make&#39; command will remove of the copied directories, re-copy them, then make NuttX.&lt;/p&gt; &#xA;&lt;p&gt;However, more recent versions of NuttX do support dependencies for the Cygwin build. As a result, the above command will cause everything to be rebuilt (because it removes and will cause recreating the &lt;code&gt;include/nuttx/config.h&lt;/code&gt; header file). A much less gracefully but still effective command in this case is the following for the ARM configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf arch/arm/src/chip arch/arm/src/board&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &#34;kludge&#34; simple removes the copied directories. These directories will be re-created when you do a normal &#39;make&#39; and your edits will then be effective.&lt;/p&gt; &#xA;&lt;h2&gt;Build Targets and Options&lt;/h2&gt; &#xA;&lt;h3&gt;Build Targets&lt;/h3&gt; &#xA;&lt;p&gt;Below is a summary of the build targets available in the top-level NuttX Makefile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The default target builds the NuttX executable in the selected output formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Removes derived object files, archives, executables, and temporary files, but retains the configuration and context files and directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;distclean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Does &#39;clean&#39; then also removes all configuration and context files. This essentially restores the directory structure to its original, unconfigured stated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Application housekeeping targets. The APPDIR variable refers to the user application directory. A sample &lt;code&gt;apps/&lt;/code&gt; directory is included with NuttX, however, this is not treated as part of NuttX and may be replaced with a different application directory. For the most part, the application directory is treated like any other build directory in the &lt;code&gt;Makefile&lt;/code&gt; script. However, as a convenience, the following targets are included to support housekeeping functions in the user application directory from the NuttX build directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apps_clean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Perform the clean operation only in the user application directory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apps_distclean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Perform the distclean operation only in the user application directory. The apps/.config file is preserved so that this is not a &#34;full&#34; distclean but more of a configuration &#34;reset&#34; for the application directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;export&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The export target will package the NuttX libraries and header files into an exportable package. Caveats: (1) These needs some extension for the KERNEL build. (2) The logic in tools/mkexport.sh only supports GCC and, for example, explicitly assumes that the archiver is &#39;ar&#39;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;flash&lt;/code&gt; (or &lt;code&gt;download&lt;/code&gt; : DEPRECATED)&lt;/p&gt; &lt;p&gt;This is a helper target that will rebuild NuttX and flash it to the target system in one step. The operation of this target depends completely upon implementation of the FLASH command in the user Make.defs file. It will generate an error if the FLASH command is not defined.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following targets are used internally by the make logic but can be invoked from the command under certain conditions if necessary.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;depend&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Create build dependencies. (NOTE: There is currently no support for build dependencies under Cygwin using Windows-native toolchains.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;context&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The context target is invoked on each target build to assure that NuttX is properly configured. The basic configuration steps include creation of the the &lt;code&gt;config.h&lt;/code&gt; and &lt;code&gt;version.h&lt;/code&gt; header files in the &lt;code&gt;include/nuttx&lt;/code&gt; directory and the establishment of symbolic links to configured directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean_context&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is part of the &lt;code&gt;distclean&lt;/code&gt; target. It removes all of the header files and symbolic links created by the context target.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Options&lt;/h3&gt; &#xA;&lt;p&gt;Of course, the value any make variable an be overridden from the make command line. However, there is one particular variable assignment option that may be useful to you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;V=1&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is the build &#34;verbosity flag.&#34; If you specify &lt;code&gt;V=1&lt;/code&gt; on the make command line, you will see the exact commands used in the build. This can be very useful when adding new boards or tracking down compile time errors and warnings (Contributed by Richard Cochran).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Native Windows Build&lt;/h2&gt; &#xA;&lt;p&gt;The beginnings of a Windows native build are in place but still not often used as of this writing. The build was functional but because of lack of use may find some issues to be resolved with this build configuration.&lt;/p&gt; &#xA;&lt;p&gt;The windows native build logic initiated if CONFIG_WINDOWS_NATIVE=y is defined in the NuttX configuration file:&lt;/p&gt; &#xA;&lt;p&gt;This build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses all Windows style paths&lt;/li&gt; &#xA; &lt;li&gt;Uses primarily Windows batch commands from cmd.exe, with&lt;/li&gt; &#xA; &lt;li&gt;A few extensions from GNUWin32&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In this build, you cannot use a Cygwin or MSYS shell. Rather the build must be performed in a Windows console window. Here is a better terminal than the standard issue, CMD.exe terminal: ConEmu which can be downloaded from: &lt;a href=&#34;https://sourceforge.net/projects/conemu/&#34;&gt;https://sourceforge.net/projects/conemu/&lt;/a&gt; or &lt;a href=&#34;https://conemu.github.io/&#34;&gt;https://conemu.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Build Tools. The build still relies on some Unix-like commands. I use the GNUWin32 tools that can be downloaded from &lt;a href=&#34;http://gnuwin32.sourceforge.net/&#34;&gt;http://gnuwin32.sourceforge.net/&lt;/a&gt; using the &lt;em&gt;Download all&lt;/em&gt; selection. Individual packages can be download instead if you know what you are doing and want a faster download (No, I can&#39;t tell you which packages you should or should not download).&lt;/p&gt; &#xA;&lt;p&gt;NOTE: It should be possible to use Cygwin or MSYS2 in place of the GNUWin32 tools. There are, however, complexities in doing that because those tools depend on the shell environment and use DLLs that are not found (at least not without the correct setup).&lt;/p&gt; &#xA;&lt;p&gt;Host Compiler: I use the MingGW GCC compiler which can be downloaded from &lt;a href=&#34;http://www.mingw.org/&#34;&gt;http://www.mingw.org/&lt;/a&gt;. If you are using GNUWin32, then it is recommended the you not install the optional MSYS components as there may be conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Kconfig-frontends: See the section entitled &#34;NuttX Configuration Tool under DOS&#34; for information about installing the &lt;code&gt;kconfig-frontend&lt;/code&gt; tools to run natively under Windows.&lt;/p&gt; &#xA;&lt;p&gt;This capability should still be considered a work in progress because:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It has not been verified on all targets and tools, and&lt;/li&gt; &#xA; &lt;li&gt;it still lacks some of the creature-comforts of the more mature environments.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installing GNUWin32&lt;/h2&gt; &#xA;&lt;p&gt;The Windows native build will depend upon a few Unix-like tools that can be provided either by MSYS or GNUWin32. The GNUWin32 are available from &lt;a href=&#34;http://gnuwin32.sourceforge.net/&#34;&gt;http://gnuwin32.sourceforge.net/&lt;/a&gt;. GNUWin32 provides ports of tools with a GPL or similar open source license to modern MS-Windows (Microsoft Windows 2000 / XP / 2003 / Vista / 2008 / 7). See &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages.html&#34;&gt;http://gnuwin32.sourceforge.net/packages.html&lt;/a&gt; for a list of all of the tools available in the GNUWin32 package.&lt;/p&gt; &#xA;&lt;p&gt;The SourceForge project is located here: &lt;a href=&#34;http://sourceforge.net/projects/gnuwin32/&#34;&gt;http://sourceforge.net/projects/gnuwin32/&lt;/a&gt;. The project is still being actively supported (although some of the Windows ports have gotten very old).&lt;/p&gt; &#xA;&lt;p&gt;Some commercial toolchains include a subset of the GNUWin32 tools in the installation. My recommendation is that you download the GNUWin32 tools directly from the sourceforge.net website so that you will know what you are using and can reproduce your build environment.&lt;/p&gt; &#xA;&lt;p&gt;GNUWin32 Installation Steps:&lt;/p&gt; &#xA;&lt;p&gt;The following steps will download and execute the GNUWin32 installer.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;code&gt;GetGNUWin32-x.x.x.exe&lt;/code&gt; from &lt;a href=&#34;http://sourceforge.net/projects/getgnuwin32/files/&#34;&gt;http://sourceforge.net/projects/getgnuwin32/files/&lt;/a&gt;. This is the installer. The current version as of this writing is 0.6.3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the installer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Accept the license.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the installation directory. My recommendation is the directory that contains this README file (&lt;code&gt;&amp;lt;this-directory&amp;gt;&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After running &lt;code&gt;GetGNUWin32-0.x.x.exe&lt;/code&gt;, you will have a new directory &lt;code&gt;&amp;lt;this-directory&amp;gt;/GetGNUWin32&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Note that the GNUWin32 installer didn&#39;t install GNUWin32. Instead, it installed another, smarter downloader. That downloader is the GNUWin32 package management tool developed by the Open SSL project.&lt;/p&gt; &lt;p&gt;The following steps probably should be performed from inside a DOS shell.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change to the directory created by &lt;code&gt;GetGNUWin32-x.x.x.exe&lt;/code&gt;&lt;/p&gt; &lt;p&gt;cd GetGNUWin32&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the download.bat script. The download.bat script will download about 446 packages! Enough to have a very complete Linux-like environment under the DOS shell. This will take awhile. This step only downloads the packages and the next step will install the packages.&lt;/p&gt; &lt;p&gt;download&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This step will install the downloaded packages. The argument of the install.bat script is the installation location. C:\gnuwin32 is the standard install location:&lt;/p&gt; &lt;p&gt;install C:\gnuwin32&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This installation step will install &lt;em&gt;all&lt;/em&gt; GNUWin32 packages... far more than you will ever need. If disc space is a problem for you, you might need to perform a manual installation of the individual ZIP files that you will find in the &lt;code&gt;&amp;lt;this directory&amp;gt;/GetGNUWin32/packages&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you add the GNUWin32 tools to your path variable:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  set PATH=C:\gnuwin32\bin;%PATH%&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Make sure you have &lt;code&gt;C:\MinGW\bin&lt;/code&gt; in your path before any other directory that contains &lt;code&gt;libiconv-2.dll&lt;/code&gt;. Apparently the &lt;code&gt;as.exe&lt;/code&gt; in some MinGW distributions are dependent on that DLL, and having an old version of it in the path somewhere (for example GnuWin32 tools) will cause as.exe to pick up the older version that doesn&#39;t have the entry point it&#39;s looking for.&lt;/p&gt; &#xA;&lt;h1&gt;CYGWIN BUILD PROBLEMS&lt;/h1&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Build performance under Cygwin is really not so bad, certainly not as good as a Linux build. However, often you will find that the performance is not just bad but terrible. If you are seeing awful performance.. like two or three compilations per second.. the culprit is usually your Windows Anti-Virus protection interfering with the build tool program execution.&lt;/p&gt; &#xA;&lt;p&gt;I use Cygwin quite often and I use Windows Defender. In order to get good build performance, I routinely keep the Windows Defender &#34;Virus &amp;amp; Threat Protections Settings&#34; screen up: I disable &#34;Real-Time Protection&#34; just before entering &#39;make&#39; then turn &#34;Real-Time Protection&#34; back on when the build completes. With this additional nuisance step, I find that build performance under Cygwin is completely acceptable.&lt;/p&gt; &#xA;&lt;h2&gt;Strange Path Problems&lt;/h2&gt; &#xA;&lt;p&gt;If you see strange behavior when building under Cygwin then you may have a problem with your PATH variable. For example, if you see failures to locate files that are clearly present, that may mean that you are using the wrong version of a tool. For example, you may not be using Cygwin&#39;s &#39;make&#39; program at /usr/bin/make. Try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;which make&#xA;/usr/bin/make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you install some toolchains (such as Yargarto or CodeSourcery tools), they may modify your PATH variable to include a path to their binaries. At that location, they may have GNUWin32 versions of the tools. So you might actually be using a version of make that does not understand Cygwin paths.&lt;/p&gt; &#xA;&lt;p&gt;The solution is either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit your PATH to remove the path to the GNUWin32 tools, or&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put /usr/local/bin, /usr/bin, and /bin at the front of your path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:/usr/bin:/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Window Native Toolchain Issues&lt;/h2&gt; &#xA;&lt;p&gt;There are many popular Windows native toolchains that may be used with NuttX. Examples include CodeSourcery (for Windows), devkitARM, and several vendor- provided toolchains. There are several limitations with using a and Windows based toolchain in a Cygwin environment. The three biggest are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The Windows toolchain cannot follow Cygwin paths. Path conversions are performed automatically in the Cygwin makefiles using the &#39;cygpath&#39; utility but you might easily find some new path problems. If so, check out &#39;cygpath -w&#39;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows toolchains cannot follow Cygwin symbolic links. Many symbolic links are used in NuttX (e.g., include/arch). The make system works around these problems for the Windows tools by copying directories instead of linking them. But this can also cause some confusion for you: For example, you may edit a file in a &#34;linked&#34; directory and find that your changes had no effect. That is because you are building the copy of the file in the &#34;fake&#34; symbolic directory. If you use a Windows toolchain, you should get in the habit of making like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make clean_context all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;An alias in your .bashrc file might make that less painful. The rebuild is not a long as you might think because there is no dependency checking if you are using a native Windows toolchain. That bring us to #3:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;General Pre-built Toolchain Issues&lt;/h2&gt; &#xA;&lt;p&gt;To continue with the list of &#34;Window Native Toolchain Issues&#34; we can add the following. These, however, are really just issues that you will have if you use any pre-built toolchain (vs. building the NuttX toolchain from the NuttX buildroot package):&lt;/p&gt; &#xA;&lt;p&gt;There may be incompatibilities with header files, libraries, and compiler built-in functions detailed below. For the most part, these issues are handled in the existing make logic. But if you are breaking new ground, then you may encounter these:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Header Files. Most pre-built toolchains will build with a foreign C library (usually newlib, but maybe uClibc or glibc if you are using a Linux toolchain). This means that the header files from the foreign C library will be built into the toolchain. So if you &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;, you will get the stdio.h from the incompatible, foreign C library and not the nuttx &lt;code&gt;stdio.h&lt;/code&gt; (at &lt;code&gt;nuttx/include/stdio.h&lt;/code&gt;) that you wanted.&lt;/p&gt; &lt;p&gt;This can cause confusion in the builds and you must always be sure the &lt;code&gt;-nostdinc&lt;/code&gt; is included in the &lt;code&gt;CFLAGS&lt;/code&gt;. That will assure that you take the include files only from&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Libraries. What was said above header files applies to libraries. You do not want to include code from the libraries of any foreign C libraries built into your toolchain. If this happens you will get perplexing errors about undefined symbols. To avoid these errors, you will need to add &lt;code&gt;-nostdlib&lt;/code&gt; to your &lt;code&gt;CFLAGS&lt;/code&gt; flags to assure that you only take code from the NuttX libraries.&lt;/p&gt; &lt;p&gt;This, however, may causes other issues for libraries in the toolchain that you do want (like &lt;code&gt;libgcc.a&lt;/code&gt; or &lt;code&gt;libm.a&lt;/code&gt;). These are special-cased in most Makefiles, but you could still run into issues of missing libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-Ins. Some compilers target a particular operating system. Many people would, for example, like to use the same toolchain to develop Linux and NuttX software. Compilers built for other operating systems may generate incompatible built-in logic and, for this reason, &lt;code&gt;-fno-builtin&lt;/code&gt; should also be included in your C flags&lt;/p&gt; &lt;p&gt;And finally you may not be able to use NXFLAT.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NXFLAT. If you use a pre-built toolchain, you will lose all support for NXFLAT. NXFLAT is a binary format described in Documentation/NuttXNxFlat.html. It may be possible to build standalone versions of the NXFLAT tools; there are a few examples of this in the buildroot repository at &lt;a href=&#34;https://bitbucket.org/nuttx/buildroot&#34;&gt;https://bitbucket.org/nuttx/buildroot&lt;/a&gt; However, it is possible that there could be interoperability issues with your toolchain since they will be using different versions of binutils and possibly different ABIs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building Original Linux Boards in Cygwin&lt;/h2&gt; &#xA;&lt;p&gt;Some default board configurations are set to build under Linux and others to build under Windows with Cygwin. Various default toolchains may also be used in each configuration. It is possible to change the default setup. Here, for example, is what you must do in order to compile a default Linux configuration in the Cygwin environment using the CodeSourcery for Windows toolchain. After instantiating a &#34;canned&#34; NuttX configuration, run the target &#39;menuconfig&#39; and set the following items:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Build Setup-&amp;gt;Build Host Platform-&amp;gt;Windows&#xA;Build Setup-&amp;gt;Windows Build Environment-&amp;gt;Cygwin&#xA;System Type-&amp;gt;Toolchain Selection-&amp;gt;CodeSourcery GNU Toolchain under Windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Windows 7 it may be required to open the Cygwin shell as Administrator (&#34;Run As&#34; option, right button) you find errors like &#34;Permission denied&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Recovering from Bad Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Many people make the mistake of configuring NuttX with the &#34;canned&#34; configuration and then just typing &lt;code&gt;make&lt;/code&gt; with disastrous consequences; the build may fail with mysterious, uninterpretable, and irrecoverable build errors. If, for example, you do this with an unmodified Linux configuration in a Windows/Cgwin environment, you will corrupt the build environment. The environment will be corrupted because of POSIX vs Windows path issues and with issues related to symbolic links. If you make the mistake of doing this, the easiest way to recover is to just start over: Do &lt;code&gt;make distclean&lt;/code&gt; to remove every trace of the corrupted configuration, reconfigure from scratch, and make certain that the set the configuration correctly for your platform before attempting to make again.&lt;/p&gt; &#xA;&lt;p&gt;Just fixing the configuration file after you have instantiated the bad configuration with &#39;make&#39; is not enough.&lt;/p&gt; &#xA;&lt;h1&gt;DOCUMENTATION&lt;/h1&gt; &#xA;&lt;p&gt;Additional information can be found in the Documentation/ directory and also in README files that are scattered throughout the source tree. The documentation is in HTML and can be access by loading the following file into your Web browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Documentation/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NuttX documentation is also available online at &lt;a href=&#34;https://nuttx.apache.org/&#34;&gt;https://nuttx.apache.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is a guide to the available README files in the NuttX source tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nuttx/&#xA; |&#xA; |- arch/&#xA; |   |&#xA; |   |- arm/&#xA; |   |   `- src&#xA; |   |       |- common&#xA; |   |       |   `- README_lwl_console.txt&#xA; |   |       |- lpc214x&#xA; |   |       |    `-README.txt&#xA; |   |       `- stm32l4&#xA; |   |           `- README.txt&#xA; |   |- renesas/&#xA; |   |   |- include/&#xA; |   |   |   `-README.txt&#xA; |   |   |- src/&#xA; |   |   |   `-README.txt&#xA; |   |- x86/&#xA; |   |   |- include/&#xA; |   |   |   `-README.txt&#xA; |   |   `- src/&#xA; |   |       `-README.txt&#xA; |   `- z80/&#xA; |   |   `- src/&#xA; |   |       |- z80/README.txt&#xA; |   |       `- z180/README.txt, z180_mmu.txt&#xA; |   `- README.txt&#xA; |- audio/&#xA; |   `-README.txt&#xA; |- boards/&#xA; |   |- arm/&#xA; |   |   |- a1x/&#xA; |   |   |   `- pcduino-a10/&#xA; |   |   |       `- README.txt&#xA; |   |   |- am335x/&#xA; |   |   |   `- beaglebone-black/&#xA; |   |   |       `- README.txt&#xA; |   |   |- c5471/&#xA; |   |   |   `- c5471evm/&#xA; |   |   |       `- README.txt&#xA; |   |   |- cxd56xx/&#xA; |   |   |   `- spresense/&#xA; |   |   |       `- README.txt&#xA; |   |   |- dm320/&#xA; |   |   |   `- ntosd-dm320/&#xA; |   |   |       |- doc/README.txt&#xA; |   |   |       `- README.txt&#xA; |   |   |- efm32/&#xA; |   |   |   |- efm32-g8xx-stk/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- efm32gg-stk3700/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- olimex-efm32g880f128-stk/&#xA; |   |   |       `- README.txt&#xA; |   |   |- imx6/&#xA; |   |   |   `- sabre-6quad/&#xA; |   |   |       `- README.txt&#xA; |   |   |- imxrt/&#xA; |   |   |   |- imxrt1050-evk/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- imxrt1060-evk/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- teensy-4.x/&#xA; |   |   |       `- README.txt&#xA; |   |   |- kinetis/&#xA; |   |   |   |- freedom-k28f/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- freedom-k64f/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- freedom-k66f/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- kwikstik-k40/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- teensy-3.x/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- twr-k60n512/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- twr-k64f120m/&#xA; |   |   |       `- README.txt&#xA; |   |   |- kl/&#xA; |   |   |   |- freedom-kl25z/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- freedom-kl26z/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- teensy-lc/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lc823450/&#xA; |   |   |   `- lc823450-xgevk/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lpc17xx_40xx/&#xA; |   |   |   |- lincoln60/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lpc4088-devkit/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lpc4088-quickstart/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lpcxpresso-lpc1768/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lx_cpu/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- mbed/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- mcb1700/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- olimex-lpc1766stk/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- open1788/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- pnev5180b/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- u-blox-c027/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- zkit-arm-1769/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lpc214x/&#xA; |   |   |   |- mcu123-lpc214x/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- zp214xpa/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lpc2378/&#xA; |   |   |   `- olimex-lpc2378/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lpc31xx/&#xA; |   |   |   |- ea3131/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- ea3152/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- olimex-lpc-h3131/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lpc43xx/&#xA; |   |   |   |- bambino-200e/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lpc4330-xplorer/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lpc4337-ws/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lpc4357-evb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- lpc4370-link2/&#xA; |   |   |       `- README.txt&#xA; |   |   |- lpc54xx/&#xA; |   |   |   `- lpcxpresso-lpc54628/&#xA; |   |   |       `- README.txt&#xA; |   |   |- max326xx/&#xA; |   |   |   `- max32660-evsys/&#xA; |   |   |       `- README.txt&#xA; |   |   |- moxart/&#xA; |   |   |   `- moxa/&#xA; |   |   |- nrf52/&#xA; |   |   |   `- nrf52-generic/&#xA; |   |   |       `- README.txt&#xA; |   |   |- nuc1xx/&#xA; |   |   |   `- nutiny-nuc120/&#xA; |   |   |       `- README.txt&#xA; |   |   |- s32k1xx/&#xA; |   |   |   |- s32k118evb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- s32k146evb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- s32k148evb/&#xA; |   |   |       `- README.txt&#xA; |   |   |- sam34/&#xA; |   |   |   |- arduino-due/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- flipnclick-sam3x/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sam3u-ek/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sam4cmp-db/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sam4e-ek/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sam4l-xplained/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sam4s-xplained/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- sam4s-xplained-pro/&#xA; |   |   |       `- README.txt&#xA; |   |   |- sama5/&#xA; |   |   |   |- sama5d2-xult/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- giant-board/&#xA; |   |   |   |   `- README.md&#xA; |   |   |   |- sama5d3x-ek/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sama5d3-xplained/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- sama5d4-ek/&#xA; |   |   |       `- README.txt&#xA; |   |   |- samd2l2/&#xA; |   |   |   |- arduino-m0/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- samd20-xplained/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- samd21-xplained/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- saml21-xplained/&#xA; |   |   |       `- README.txt&#xA; |   |   |- samd5e5/&#xA; |   |   |   `- metro-m4/&#xA; |   |   |      `- README.txt&#xA; |   |   |- samv7/&#xA; |   |   |   |- same70-qmtech/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- same70-xplained/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- samv71-xult/&#xA; |   |   |      `- README.txt&#xA; |   |   |- stm32/&#xA; |   |   |   |- axoloti/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- b-g474e-dpow1/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- clicker2-stm32/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- cloudctrl/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- emw3162/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- fire-stm32v2/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- hymini-stm32v/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- maple/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- mikroe-stm32f4/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f103rb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f207zg/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f302r8/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f303re/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f303ze/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f334r8/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f410rb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f446re/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f4x1re/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-l152re/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- olimexino-stm32/&#xA; |   |   |   |- olimex-stm32-e407/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- olimex-stm32-h405/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- olimex-stm32-h407/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- olimex-stm32-p107/&#xA; |   |   |   |- olimex-stm32-p207/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- olimex-stm32-p407/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- omnibusf4/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- photon/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- shenzhou/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32_tiny/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm3210e-eval/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm3220g-eval/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm3240g-eval/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32butterfly2/&#xA; |   |   |   |- stm32f103-minimum/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f334-disco/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f3discovery/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f411e-disco/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f429i-disco/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f4discovery/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32ldiscovery/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32vldiscovery/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- viewtool-stm32f107/&#xA; |   |   |       `- README.txt&#xA; |   |   |- stm32f0l0g0/&#xA; |   |   |   |- b-l072z-lrwan1/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f072rb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-f091rc/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-g070rb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-g071rb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-l073rz/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f051-discovery/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- stm32f072-discovery/&#xA; |   |   |       `- README.txt&#xA; |   |   |- stm32f7/&#xA; |   |   |   |- nucleo-144/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f746g-disco/&#xA; |   |   |   |   |- configs/fb/README.txt&#xA; |   |   |   |   |- configs/nxdemo/README.txt&#xA; |   |   |   |   |- configs/nxterm/README.txt&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32f746-ws/&#xA; |   |   |   `- stm32f769i-disco/&#xA; |   |   |       `- README.txt&#xA; |   |   |- stm32h7/&#xA; |   |   |   `- nucleo-h743zi/&#xA; |   |   |       `- README.txt&#xA; |   |   |- stm32l4/&#xA; |   |   |   |- b-l475e-iot01a/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-l432kc/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-l452re/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-l476rg/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- nucleo-l496zg/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32l476-mdk/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- stm32l476vg-disco/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- stm32l4r9ai-disco/&#xA; |   |   |       `- README.txt&#xA; |   |   |- str71x/&#xA; |   |   |   `- olimex-strp711/&#xA; |   |   |       `- README.txt&#xA; |   |   |- tiva/&#xA; |   |   |   |- dk-tm4c129x/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- eagle100/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- ekk-lm3s9b96/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- launchxl-cc1310/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- launchxl-cc1312r1/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lm3s6432-s2e/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lm3s6965-ek/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lm3s8962-ek/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- lm4f120-launchpad/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- tm4c123g-launchpad/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- tm4c1294-launchpad/&#xA; |   |   |       `- README.txt&#xA; |   |   |- tms570/&#xA; |   |   |   |- launchxl-tms57004/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- tms570ls31x-usb-kit/&#xA; |   |   |       `- README.txt&#xA; |   |   `- xmc4/&#xA; |   |       `- xmc4500-relax/&#xA; |   |           `- README.txt&#xA; |   |- avr/&#xA; |   |   |- at32uc3/&#xA; |   |   |   `- avr32dev1/&#xA; |   |   |       `- README.txt&#xA; |   |   |- at90usb/&#xA; |   |   |   |- micropendous3/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- teensy-2.0/&#xA; |   |   |       `- README.txt&#xA; |   |   `- atmega/&#xA; |   |       |- amber/&#xA; |   |       |   `- README.txt&#xA; |   |       |- arduino-mega2560/&#xA; |   |       |   `- README.txt&#xA; |   |       `- moteino-mega/&#xA; |   |           `- README.txt&#xA; |   |- hc/&#xA; |   |   `- m9s12/&#xA; |   |       |- demo9s12ne64/&#xA; |   |       |   `- README.txt&#xA; |   |       `- ne64badge/&#xA; |   |           `- README.txt&#xA; |   |- mips/&#xA; |   |   |- pic32mx/&#xA; |   |   |   |- mirtoo/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- pic32mx7mmb/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- pic32mx-starterkit/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- sure-pic32mx/&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- ubw32/&#xA; |   |   |       `- README.txt&#xA; |   |   `-pic32mz/&#xA; |   |       |- chipkit-wifire/&#xA; |   |       |   `- README.txt&#xA; |   |       |- flipnclick-pic32mz/&#xA; |   |       |   `- README.txt&#xA; |   |       `- pic32mz-starterkit/&#xA; |   |           `- README.txt&#xA; |   |- misoc/&#xA; |   |   `- lm32/&#xA; |   |       `- misoc/&#xA; |   |           `- README.txt&#xA; |   |- or1k/&#xA; |   |   `- mor1kx/&#xA; |   |       `- or1k/&#xA; |   |           `- README.txt&#xA; |   |- renesas/&#xA; |   |   |- m16c/&#xA; |   |   |   `- skp16c26/&#xA; |   |   |       `- README.txt&#xA; |   |   `-sh1/&#xA; |   |       `- us7032evb1/&#xA; |   |           `- README.txt&#xA; |   |- risc-v/&#xA; |   |- sim/&#xA; |   |   `- sim/&#xA; |   |       `- sim/&#xA; |   |           |- include/README.txt&#xA; |   |           `- README.txt&#xA; |   |- x86/&#xA; |   |   `- qemu/&#xA; |   |       `- qemu-i486/&#xA; |   |           `- README.txt&#xA; |   |- xtensa/&#xA; |   |   `- esp32/&#xA; |   |       `- esp32-core/&#xA; |   |           `- README.txt&#xA; |   |- z16/&#xA; |   |   `- z16f/&#xA; |   |       `- z16f2800100zcog/&#xA; |   |           |- configs/nsh/README.txt&#xA; |   |           |- configs/ostest/README.txt&#xA; |   |           |- configs/pashello/README.txt&#xA; |   |           `- README.txt&#xA; |   |- z80/&#xA; |   |   |- ez80/&#xA; |   |   |   |- ez80f910200kitg/&#xA; |   |   |   |   |- configs/ostest/README.txt&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- ez80f910200zco/&#xA; |   |   |   |   |- configs/dhcpd/README.txt&#xA; |   |   |   |   |- configs/httpd/README.txt&#xA; |   |   |   |   |- configs/nettest/README.txt&#xA; |   |   |   |   |- configs/nsh/README.txt&#xA; |   |   |   |   |- configs/poll/README.txt&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   |- makerlisp/&#xA; |   |   |   |   |- configs/nsh_flash/README.txt&#xA; |   |   |   |   |- configs/nsh_ram/README.txt&#xA; |   |   |   |   |- configs/sdboot/README.txt&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- z80x/&#xA; |   |   |       |- configs/nsh_flash/README.txt&#xA; |   |   |       |- configs/nsh_ram/README.txt&#xA; |   |   |       |- configs/sdboot/README.txt&#xA; |   |   |       `- README.txt&#xA; |   |   |- z180/&#xA; |   |   |   `- p112/&#xA; |   |   |       `- README.txt&#xA; |   |   |- z8/&#xA; |   |   |   |- z8encore000zco/&#xA; |   |   |   |   |- configs/ostest/README.txt&#xA; |   |   |   |   `- README.txt&#xA; |   |   |   `- z8f64200100kit/&#xA; |   |   |       |- configs/ostest/README.txt&#xA; |   |   |       `- README.txt&#xA; |   |   `- z80/&#xA; |   |       `- z80sim/&#xA; |   |           `- README.txt&#xA; |   `-README.txt&#xA; |- drivers/&#xA; |   |- eeprom/&#xA; |   |   `- README.txt&#xA; |   |- lcd/&#xA; |   |   | README.txt&#xA; |   |   `- pcf8574_lcd_backpack_readme.txt&#xA; |   |- mtd/&#xA; |   |   `- README.txt&#xA; |   |- sensors/&#xA; |   |   `- README.txt&#xA; |   |- syslog/&#xA; |   |   `- README.txt&#xA; |   `- README.txt&#xA; |- fs/&#xA; |   |- binfs/&#xA; |   |   `- README.txt&#xA; |   |- cromfs/&#xA; |   |   `- README.txt&#xA; |   |- mmap/&#xA; |   |   `- README.txt&#xA; |   |- nxffs/&#xA; |   |   `- README.txt&#xA; |   |- smartfs/&#xA; |   |   `- README.txt&#xA; |   |- procfs/&#xA; |   |   `- README.txt&#xA; |   |- spiffs/&#xA; |   |   `- README.md&#xA; |   `- unionfs/&#xA; |       `- README.txt&#xA; |- graphics/&#xA; |   `- README.txt&#xA; |- libs/&#xA; |   |- README.txt&#xA; |   |- libc/&#xA; |   |   |- zoneinfo&#xA; |   |   |   `- README.txt&#xA; |   |   `- README.txt&#xA; |   |- libdsp/&#xA; |   |   `- README.txt&#xA; |   |- libnx/&#xA; |   |   |- nxfongs&#xA; |   |   |   `- README.txt&#xA; |   |   `- README.txt&#xA; |   |- libxx/&#xA; |   `- README.txt&#xA; |- mm/&#xA; |   |- shm/&#xA; |   |   `- README.txt&#xA; |   `- README.txt&#xA; |- net/&#xA; |   |- sixlowpan&#xA; |   |   `- README.txt&#xA; |   `- README.txt&#xA; |- pass1/&#xA; |   `- README.txt&#xA; |- syscall/&#xA; |   `- README.txt&#xA; `- tools/&#xA;     `- README.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is a guide to the available README files in the semi-optional apps/ source tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apps/&#xA; |- examples/&#xA; |   |- bastest/README.txt&#xA; |   |- json/README.txt&#xA; |   |- pashello/README.txt&#xA; |   `- README.txt&#xA; |- gpsutils/&#xA; |   `- minmea/README.txt&#xA; |- graphics/&#xA; |   |- tiff/README.txt&#xA; |   `- traveler/tools/tcledit/README.txt&#xA; |- interpreters/&#xA; |   |- bas/&#xA; |   |  `- README.txt&#xA; |   |- ficl/&#xA; |   |  `- README.txt&#xA; |   `- README.txt&#xA; |- modbus/&#xA; |   `- README.txt&#xA; |- netutils/&#xA; |   |- discover/&#xA; |   |  `- README.txt&#xA; |   |- ftpc/&#xA; |   |  `- README.txt&#xA; |   |- json/&#xA; |   |  `- README.txt&#xA; |   |- telnetd/&#xA; |   |  `- README.txt&#xA; |   `- README.txt&#xA; |- nshlib/&#xA; |   `- README.txt&#xA; |- NxWidgets/&#xA; |   `- README.txt&#xA; |- system/&#xA; |   |- cdcacm/&#xA; |   |  `- README.txt&#xA; |   |- i2c/&#xA; |   |  `- README.txt&#xA; |   |- inifile/&#xA; |   |  `- README.txt&#xA; |   |- install/&#xA; |   |  `- README.txt&#xA; |   |- nsh/&#xA; |   |  `- README.txt&#xA; |   |- nxplayer/&#xA; |   |  `- README.txt&#xA; |   |- psmq/&#xA; |   |  `- README.txt&#xA; |   |- symtab/&#xA; |   |   `- README.txt&#xA; |   |- termcurses/&#xA; |   |   `- README.txt&#xA; |   |- usbmsc/&#xA; |   |  `- README.txt&#xA; |   `- zmodem/&#xA; |      `- README.txt&#xA; `- wireless&#xA;     |- bluetooth/&#xA;     |  `- btsak/&#xA;     |     `- README.txt&#xA;     `- ieee802154&#xA;        `- i8sak/&#xA;           `- README.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional README.txt files in the other, related repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NxWidgets/&#xA; |- Doxygen&#xA; |   `- README.txt&#xA; |- tools&#xA; |   `- README.txt&#xA; |- UnitTests&#xA; |   `- README.txt&#xA; `- README.txt&#xA;&#xA;buildroot/&#xA; `- README.txt&#xA;&#xA;tools/&#xA; `- README.txt&#xA;&#xA;uClibc++/&#xA; `- README.txt&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>