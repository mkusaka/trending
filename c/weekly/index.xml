<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:42:29Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leesh3288/CVE-2023-4911</title>
    <updated>2023-10-15T01:42:29Z</updated>
    <id>tag:github.com,2023-10-15:/leesh3288/CVE-2023-4911</id>
    <link href="https://github.com/leesh3288/CVE-2023-4911" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PoC for CVE-2023-4911&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PoC of CVE-2023-4911 &#34;Looney Tunables&#34;&lt;/h1&gt; &#xA;&lt;p&gt;This is a PoC of CVE-2023-4911 (a.k.a. &#34;Looney Tunables&#34;) exploiting a bug in glibc dynamic loader&#39;s &lt;code&gt;GLIBC_TUNABLES&lt;/code&gt; environment variable parsing function &lt;code&gt;parse_tunables()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Code has been tested on Ubuntu 22.04.3 with glibc version &lt;code&gt;2.35-0ubuntu3.3&lt;/code&gt;. No attempts have been made to generalize the PoC (read: &#34;Works On My Machine&#34;), so your mileage may vary.&lt;/p&gt; &#xA;&lt;p&gt;As always, big kudos to the &lt;a href=&#34;https://www.qualys.com/tru/&#34;&gt;Qualys Threat Research Unit&lt;/a&gt; for the discovery of the vulnerability and for the &lt;a href=&#34;https://seclists.org/oss-sec/2023/q4/18&#34;&gt;very detailed writeup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Written by &lt;a href=&#34;https://twitter.com/0x10n&#34;&gt;Xion&lt;/a&gt; of &lt;a href=&#34;https://kaist-hacking.github.io/&#34;&gt;KAIST Hacking Lab&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AxxAxx/AxxSolder</title>
    <updated>2023-10-15T01:42:29Z</updated>
    <id>tag:github.com,2023-10-15:/AxxAxx/AxxSolder</id>
    <link href="https://github.com/AxxAxx/AxxSolder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;STM32 Based soldering station for JBC cartridges&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FAxxAxx%2FAxxSolder&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/axxaxx&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;35&#34; style=&#34;border:0px;height:20px;&#34; src=&#34;https://github.com/AxxAxx/kofi-button/raw/main/Ko-fi_Buy-me-a-coffee_button.png?raw=true&#34; border=&#34;0&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://ko-fi.com/axxaxx&#34; target=&#34;_blank&#34;&gt; &lt;h1&gt;AxxSolder Overview&lt;/h1&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/axxaxx&#34; target=&#34;_blank&#34;&gt;AxxSolder is a STM32 based soldering iron controller for JBC C210 and C245 cartridges. Two different versions are designed around the same PCB and software - one soldering station based on the &lt;/a&gt;&lt;a href=&#34;https://www.jbctools.com/ad-sf-stand-for-t210-t245-handles-product-2018.html&#34;&gt;JBC ADS stand&lt;/a&gt; and one portable version. The hardware takes a DC input source of 9-24V. The software is written for the &lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32g431kb.html&#34;&gt;STM32G431KB&lt;/a&gt; and implements a PID for temperature control, LCD driver and a sleep function when the handle is at rest. Enclosures for both station and portable versions are 3D printed and design files are availible under &lt;a href=&#34;https://github.com/AxxAxx/AxxSolder/tree/main/CAD&#34;&gt;/CAD&lt;/a&gt;. A video showing the AxxSolder station can be found under &lt;a href=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/#demo&#34;&gt;DEMO&lt;/a&gt;. A &lt;em&gt;bill of materials&lt;/em&gt; (BOM) with individual component prices can be found under &lt;a href=&#34;https://github.com/AxxAxx/AxxSolder/tree/main/PCB/AxxSolder/bom&#34;&gt;/bom&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_cover.jpg&#34; alt=&#34;coverphoto&#34;&gt; The schematic for AxxSolder is shown below. Both station and portable versions use the same PCB and software. The MCU is a &lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32g431kb.html&#34;&gt;STM32G431KB&lt;/a&gt; and the PCB footprint allows for either UFQFPN32 or LQFP32 package.&lt;/p&gt; &#xA;&lt;p&gt;The OLED display used in this project is a 1.5 inch 128 x 128 pixel SPI Display &lt;a href=&#34;https://www.waveshare.com/wiki/1.5inch_OLED_Module&#34;&gt;WaveShare 1.5inch OLED Module&lt;/a&gt; and shows information about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set temperature&lt;/li&gt; &#xA; &lt;li&gt;Actual temperature&lt;/li&gt; &#xA; &lt;li&gt;Current power as a bar graph&lt;/li&gt; &#xA; &lt;li&gt;In case of sleep mode, the power bar shows &#34;ZzZzZz&#34;&lt;/li&gt; &#xA; &lt;li&gt;Input voltage&lt;/li&gt; &#xA; &lt;li&gt;Ambient temperature&lt;/li&gt; &#xA; &lt;li&gt;Current handle type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cartridges from JBC do all contain a thermocouple element to read the tip temperature and a resistive heater element. The configuration of thermocouple and heater element differ slightly between cartridge models. This has previously been shown by several other authors, for example: &lt;a href=&#34;http://adgd.ru/2021/01/04/jbc-soldering-cartridges-pinouts/&#34;&gt;http://adgd.ru/2021/01/04/jbc-soldering-cartridges-pinouts/&lt;/a&gt;. As the thermocouple output also differs (see my measurements &lt;a href=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/#temperature-calibration&#34;&gt;Temperature calibration&lt;/a&gt;) the correct handle/cartridge type has to be set. The PID parameters will be set as well based on selected handle type. The selection is done by holding down the encoder knob while starting the AxxSolder. A menu will then allow the user to select the proper handle (T210 or T245). The default handle is T210.&lt;/p&gt; &#xA;&lt;p&gt;The AxxSolder goes into sleep mode when the soldering iron is not used. This happens when the handle is placed in the soldering iron holder or is in contact with the cartrigde pull-out bracket on the station. On the portable version an aluminium plate is mounted and allows the AxxSolder to go into sleep when the cartridge or handle rests againts it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_Schematic.png&#34; alt=&#34;AxxSolder_station&#34;&gt; A 3D view (from and back) of the AxxSolder PCB is generated with KiCAD and shown below. &lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/PCB_3D.jpg&#34; alt=&#34;AxxSolder_station&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DEMO&lt;/h2&gt; &#xA;&lt;p&gt;Click on the gif to get to YouTube and see the demo in full resolution.&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=-3MtJyTwZFQ&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_DEMO.gif&#34; alt=&#34;AxxSolder DEMO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AxxSolder Station&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_station.jpg&#34; alt=&#34;AxxSolder_station&#34;&gt; The connections from the station to the PCB throught the BINDER 99 0624 00 07 connector is shown below. The Stand_sense input on AxxSolder is connected to both pin 4 and 5. These are in turn connected in the stand to the tip changer and the iron holder respectively. The yellow wire is connected to pin 2 and is used to determine which handle is connected. &lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/Station_connections.jpg&#34; alt=&#34;AxxSolder_station&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AxxSolder Portable&lt;/h2&gt; &#xA;&lt;p&gt;It is often nice to have a compact and portable soldering iron controller for when you are away from your comfortable desk. A neat powerful package with the same capabilities as your main soldering station. This is why AxxSolder Portable was designed. The only difference between AxxSolder station and Portable is the enclosure. As AxxSolder accepts an input of 9-24 V it is compatible with a range of battery options. The author usually use a battery pack consisting of 12 Samsung INR18650 35E in a 3S4P configuration which works very well. The portable version has an aluminium tab on the enclosure connected to the same input on the PCB as the &#34;handle rest&#34; on the station version. This allows the user to rest the iron onto the aluminium tab and automatically enter sleep mode.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_portable.jpg&#34; alt=&#34;AxxSolder_portable&#34;&gt; The connections from the handle to the PCB throught the Hirose RPC1-12RB-6P(71) connector is shown below. The blue wire in the portable version is connected to the aluminium plate which tells the AxxSolder to go into sleep mode when in contact with the soldering iron. The yellow wire is connected to pin 6 and is used to determine which handle is connected. &lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/Portable_connections.jpg&#34; alt=&#34;AxxSolder_portable&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Programming/Firmware update&lt;/h2&gt; &#xA;&lt;p&gt;Programming the STM32 MCU is done by using a SWD programmer. These come in a variety of models and are availible from several different places online. In the below eaxample a &lt;a href=&#34;https://www.st.com/en/development-tools/stlink-v3minie.html&#34;&gt;STLINK-V3MINIE&lt;/a&gt; SWD programmer is is used. The MCU is programmed by the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Disconnect any soldering iron handles from AxxSolder during the firmware update processs.&lt;/li&gt; &#xA; &lt;li&gt;Download the latest AxxSolder.bin file from &lt;a href=&#34;https://github.com/AxxAxx/AxxSolder/releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect your SWD programmer to the target MCU with GND, 3.3V, (N)RST, SWCLK, SWDIO&lt;/li&gt; &#xA; &lt;li&gt;If your SWD programmer &lt;em&gt;can not&lt;/em&gt; supply 3.3V it is necessary to power the AxxSolder from an external supply.&lt;/li&gt; &#xA; &lt;li&gt;Start your programming software. &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubeprog.html&#34;&gt;STM32CubeProgrammer&lt;/a&gt; is used in this example.&lt;/li&gt; &#xA; &lt;li&gt;Connect to the target by selecting &lt;em&gt;ST-LINK&lt;/em&gt; and click on &lt;em&gt;Connect&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load the latest AxxSolder.bin donwloaded in &lt;em&gt;Step 2&lt;/em&gt; by clicking &lt;em&gt;Open file&lt;/em&gt; and select the donwloaded binary file.&lt;/li&gt; &#xA; &lt;li&gt;Write the firmware to the MCU by clicking &lt;em&gt;Download&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you get the message &lt;em&gt;File download complete&lt;/em&gt; everything succeded and the SWD programmer can be disconnected and power cycled once and AxxSolder should boot.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_SWD_connection.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/AxxSolder_SWD_programming.png&#34; alt=&#34;AxxSolder_SWD_programming&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PID control&lt;/h2&gt; &#xA;&lt;p&gt;As the thermal mass of each cartridge differs the PID parameters should in theory be adjusted to each different cartridge. As a matter of simplification the PID parameters are only different between the different handle types, T210 and T245. This gives a good enough PID performance in my tests. The Max allowed power is also different between handle types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;&#x9;/* If the handle_sense is high -&amp;gt; T210 handle is detected */&#xA;&#x9;if(sensor_values.handle_sense &amp;gt; 0.5){&#xA;&#x9;&#x9;handle = T210;&#xA;&#x9;&#x9;max_power_watt = 60;&#xA;&#x9;&#x9;Kp = 20;&#xA;&#x9;&#x9;Ki = 60;&#xA;&#x9;&#x9;Kd = 0.5;&#xA;&#x9;}&#xA;&#x9;/* If the handle_sense is low -&amp;gt; T245 Handle */&#xA;&#x9;else{&#xA;&#x9;&#x9;handle = T245;&#xA;&#x9;&#x9;max_power_watt = 120;&#xA;&#x9;&#x9;Kp = 30;&#xA;&#x9;&#x9;Ki = 60;&#xA;&#x9;&#x9;Kd = 1;&#xA;&#x9;}&#xA;&#x9;PID_SetTunings(&amp;amp;TPID, Kp, Ki, Kd); // Update PID parameters based on handle type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The PID parameters are adjusted to achieve a fast response with minimum overshoot and oscillation. The below image is showing the set temperature, actual temperature response as well as the P, I and D contributions during a heat-up cycle from 25 deg C to 330 deg C. This heat-up sequence takes ~1.5 seconds for a C210-007 cartridge.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/PID_TUNING.png&#34; alt=&#34;AxxSolder_pid&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Temperature calibration&lt;/h2&gt; &#xA;&lt;p&gt;The voltage from the thermocouple embedded inside the cartridge is amplified by an OPA2333 operational amplifier and then read by the ADC of the MCU. To correlate the measured ADC value to the cartridge temperature experiments were done. A constant power was applied to the heating element of the cartridge and the ADC value was read as well as the actual tip temperature. The tip temperature was measured by a &#34;Soldering Tip Thermocouple&#34; used in e.g. the Hakko FG-100.&lt;br&gt; The measured data was recorded and plotted for both the C210 and C245 cartridges. The specific cartridges used were the C210-007 and C245-945. The measured data were fitted to polynomial equations:&lt;br&gt; $Temp_{C210}[deg] = -6.798e^{-9} * ADC^3 -6.084e^{-6} * ADC^2 + 0.271* ADC + 25.399$&lt;br&gt; $Temp_{C245}[deg] = 2.092e^9 * ADC^3 -1.213e^{-5} * ADC^2 + 0.118* ADC + 25.052$&lt;br&gt; These are then used in the software to retrieve correct tip temperatures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/Temp_calibration_data.png&#34; alt=&#34;Temp_calibration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Temperature measurement&lt;/h2&gt; &#xA;&lt;p&gt;As the thermocouple and heater element is connected in series inside the JBC cartridges and the thermocouple voltage measures over the same pins as the heating element we have to be careful when to do the temperature measurement. In order to not disturb the thermocouple measurement with heater element switching, the switching is turned off for 10 ms just before the temperature measurement is taken. The 10 ms delay ensures that the switching is turned off and the thermocouple signal is stabilized around a stable voltage.&lt;br&gt; The measured signal over the thermocouple is clamped to 3.3V with a BAT54S Schottky diode in order to protect the opamp OPA2333. The voltage measurement is taken by the internal ADC in DMA mode with a circular buffer. The buffer holds several measurements which are averaged and filtered in software.&lt;br&gt; The yellow curve in the image below (Channel 1) shows every time the circular buffer is filled. Just after the 10 ms delay time the measurements are taken from the buffer. In the image below the time period where the last thermocouple measurements are taken is indicated as a red rectangle. The green curve shows the amplified voltage between GREEN and RED wire in the JBC handle for at 330 degree C and 5% power and the purple 25 degree C and at 100% power (the tip held under water trying to heat up). &lt;img src=&#34;https://raw.githubusercontent.com/AxxAxx/AxxSolder/main/photos/Temp_sensing_oscilloscope.png&#34; alt=&#34;Oscilloscope_image_PWM&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/msquic</title>
    <updated>2023-10-15T01:42:29Z</updated>
    <id>tag:github.com,2023-10-15:/microsoft/msquic</id>
    <link href="https://github.com/microsoft/msquic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform, C implementation of the IETF QUIC protocol, exposed to C, C++, C# and Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/images/readme_logo.png&#34; width=&#34;500&#34; alt=&#34;MsQuic logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/msquic/msquicdocs/docs/API.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Documentation&amp;amp;message=Dashboard&amp;amp;color=blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://microsoft.github.io/msquic/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Performance&amp;amp;message=Dashboard&amp;amp;color=blue&#34; alt=&#34;Perf Dashboard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/msquic/actions/workflows/build.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/microsoft/msquic/build.yml?query=branch%3Amain&amp;amp;label=Build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/msquic/actions/workflows/test.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/microsoft/msquic/test.yml?query=branch%3Amain&amp;amp;label=Test&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/msquic/actions/workflows/stress.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/microsoft/msquic/stress.yml?query=branch%3Amain&amp;amp;label=Stress&#34; alt=&#34;Stress Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/microsoft/msquic&#34;&gt;&lt;img src=&#34;https://codecov.io/github/microsoft/msquic/branch/main/graph/badge.svg?token=xAjIMDn7wy&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/microsoft/msquic/workflows/CodeQL/badge.svg?branch=main&#34; alt=&#34;CodeQL&#34;&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4846&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4846/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YGAtCwTSsc&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/827744285595271168?label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=7289DA&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/msquic&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/msquic&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/profiles/msquic&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Microsoft.Native.Quic.MsQuic.Schannel?style=plastic&#34; alt=&#34;nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MsQuic is a Microsoft implementation of the &lt;a href=&#34;https://datatracker.ietf.org/wg/quic/about/&#34;&gt;IETF QUIC&lt;/a&gt; protocol. It is cross-platform, written in C and designed to be a general purpose QUIC library. MsQuic also has C++ API wrapper classes and exposes interop layers for both Rust and C#.&lt;/p&gt; &#xA;&lt;h2&gt;Protocol Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc9000&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9000&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc9001&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9001&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc9002&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9002&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc9221&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9221&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc9287&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9287&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc9368&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9368&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc9369&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=RFC&amp;amp;message=9369&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-quic-load-balancers&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=Load%20Balancers&amp;amp;color=blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-quic-ack-frequency&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=ACK%20Frequency&amp;amp;color=blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/draft-banks-quic-disable-encryption&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=Disable%20Encryption&amp;amp;color=blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/draft-banks-quic-performance&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=Performance&amp;amp;color=blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/draft-banks-quic-cibir&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=CIBIR&amp;amp;color=blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/draft-huitema-quic-ts&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=Timestamps&amp;amp;color=blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-quic-reliable-stream-reset/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Draft&amp;amp;message=ReliableReset&amp;amp;color=blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;QUIC has many benefits when compared to existing &#34;TLS over TCP&#34; scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All packets are encrypted and handshake is authenticated with TLS 1.3.&lt;/li&gt; &#xA; &lt;li&gt;Parallel streams of (reliable and unreliable) application data.&lt;/li&gt; &#xA; &lt;li&gt;Exchange application data in the first round trip (0-RTT).&lt;/li&gt; &#xA; &lt;li&gt;Improved congestion control and loss recovery.&lt;/li&gt; &#xA; &lt;li&gt;Survives a change in the clients IP address or port.&lt;/li&gt; &#xA; &lt;li&gt;Stateless load balancing.&lt;/li&gt; &#xA; &lt;li&gt;Easily extendable for new features and extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Library Features&lt;/h2&gt; &#xA;&lt;p&gt;MsQuic has several features that differentiates it from other QUIC implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized for client and server.&lt;/li&gt; &#xA; &lt;li&gt;Optimized for maximal throughput and minimal latency.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous IO.&lt;/li&gt; &#xA; &lt;li&gt;Receive side scaling (&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/network/introduction-to-receive-side-scaling&#34;&gt;RSS&lt;/a&gt;) support.&lt;/li&gt; &#xA; &lt;li&gt;UDP send and receive coalescing support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For platform support details, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/Platforms.md&#34;&gt;Platforms docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For release details, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/Release.md&#34;&gt;Release docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For performance data, see the &lt;a href=&#34;https://aka.ms/msquicperformance&#34;&gt;Performance dashboard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For building the library, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/BUILD.md&#34;&gt;Build docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For testing the library, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/TEST.md&#34;&gt;Testing docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For using the API, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/API.md&#34;&gt;API docs&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/src/tools/sample/sample.c&#34;&gt;Sample&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For deploying QUIC, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/Deployment.md&#34;&gt;Deployment docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For diagnosing issues, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/Diagnostics.md&#34;&gt;Diagnostics docs&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/TSG.md&#34;&gt;Trouble Shooting Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For other frequently asked questions, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/docs/FAQ.md&#34;&gt;FAQs&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;For information on contributing, please see our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/msquic/main/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. Feel free to take a look at our &lt;a href=&#34;https://github.com/microsoft/msquic/labels/good%20first%20issue&#34;&gt;Good First Issues&lt;/a&gt; list if you&#39;re looking for somewhere to start. If you&#39;d just like to talk, come chat with us &lt;a href=&#34;https://discord.gg/YGAtCwTSsc&#34;&gt;on Discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>