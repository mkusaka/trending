<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:38:14Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vanhauser-thc/thc-hydra</title>
    <updated>2024-05-12T01:38:14Z</updated>
    <id>tag:github.com,2024-05-12:/vanhauser-thc/thc-hydra</id>
    <link href="https://github.com/vanhauser-thc/thc-hydra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;hydra&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;&#x9;  H Y D R A&#xA;&#xA;                  (c) 2001-2023 by van Hauser / THC&#xA;         &amp;lt;vh@thc.org&amp;gt; https://github.com/vanhauser-thc/thc-hydra&#xA;   many modules were written by David (dot) Maciejak @ gmail (dot) com&#xA;             BFG code by Jan Dlabal &amp;lt;dlabaljan@gmail.com&amp;gt;&#xA;&#xA;&#x9;    Licensed under AGPLv3 (see LICENSE file)&#xA;&#xA;       Please do not use in military or secret service organizations,&#xA;                      or for illegal purposes.&#xA;  (This is the wish of the author and non-binding. Many people working&#xA;   in these organizations do not care for laws and ethics anyways.&#xA;        You are not one of the &#34;good&#34; ones if you ignore this.)&#xA;&#xA;       NOTE: no this is not meant to be a markdown doc! old school!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hydra in the most current github state can be directly downloaded via docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull vanhauser/hydra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;INTRODUCTION&lt;/h2&gt; &#xA;&lt;p&gt;Number one of the biggest security holes are passwords, as every password security study shows. This tool is a proof of concept code, to give researchers and security consultants the possibility to show how easy it would be to gain unauthorized access from remote to a system.&lt;/p&gt; &#xA;&lt;p&gt;THIS TOOL IS FOR LEGAL PURPOSES ONLY!&lt;/p&gt; &#xA;&lt;p&gt;There are already several login hacker tools available, however, none does either support more than one protocol to attack or support parallelized connects.&lt;/p&gt; &#xA;&lt;p&gt;It was tested to compile cleanly on Linux, Windows/Cygwin, Solaris, FreeBSD/OpenBSD, QNX (Blackberry 10) and MacOS.&lt;/p&gt; &#xA;&lt;p&gt;Currently this tool supports the following protocols: Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-POST, HTTP-PROXY, HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST, HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MEMCACHED, MONGODB, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener, Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, Radmin, RDP, Rexec, Rlogin, Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5, SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth, VNC and XMPP.&lt;/p&gt; &#xA;&lt;p&gt;However the module engine for new services is very easy so it won&#39;t take a long time until even more services are supported. Your help in writing, enhancing or fixing modules is highly appreciated!! :-)&lt;/p&gt; &#xA;&lt;h2&gt;WHERE TO GET&lt;/h2&gt; &#xA;&lt;p&gt;You can always find the newest release/production version of hydra at its project page at &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra/releases&#34;&gt;https://github.com/vanhauser-thc/thc-hydra/releases&lt;/a&gt; If you are interested in the current development state, the public development repository is at Github: svn co &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt; or git clone &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt; Use the development version at your own risk. It contains new features and new bugs. Things might not work!&lt;/p&gt; &#xA;&lt;p&gt;Alternatively (and easier) to can pull it as a docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull vanhauser/hydra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HOW TO COMPILE&lt;/h2&gt; &#xA;&lt;p&gt;To configure, compile and install hydra, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the ssh module, you have to setup libssh (not libssh2!) on your system, get it from &lt;a href=&#34;https://www.libssh.org&#34;&gt;https://www.libssh.org&lt;/a&gt;, for ssh v1 support you also need to add &#34;-DWITH_SSH1=On&#34; option in the cmake command line. IMPORTANT: If you compile on MacOS then you must do this - do not install libssh via brew!&lt;/p&gt; &#xA;&lt;p&gt;If you use Ubuntu/Debian, this will install supplementary libraries needed for a few optional modules (note that some might not be available on your distribution):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install libssl-dev libssh-dev libidn11-dev libpcre3-dev \&#xA;                 libgtk2.0-dev libmysqlclient-dev libpq-dev libsvn-dev \&#xA;                 firebird-dev libmemcached-dev libgpg-error-dev \&#xA;                 libgcrypt11-dev libgcrypt20-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables all optional modules and features with the exception of Oracle, SAP R/3, NCP and the apple filing protocol - which you will need to download and install from the vendor&#39;s web sites.&lt;/p&gt; &#xA;&lt;p&gt;For all other Linux derivates and BSD based systems, use the system software installer and look for similarly named libraries like in the command above. In all other cases, you have to download all source libraries and compile them manually.&lt;/p&gt; &#xA;&lt;h2&gt;SUPPORTED PLATFORMS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All UNIX platforms (Linux, *BSD, Solaris, etc.)&lt;/li&gt; &#xA; &lt;li&gt;MacOS (basically a BSD clone)&lt;/li&gt; &#xA; &lt;li&gt;Windows with Cygwin (both IPv4 and IPv6)&lt;/li&gt; &#xA; &lt;li&gt;Mobile systems based on Linux, MacOS or QNX (e.g. Android, iPhone, Blackberry 10, Zaurus, iPaq)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HOW TO USE&lt;/h2&gt; &#xA;&lt;p&gt;If you just enter &lt;code&gt;hydra&lt;/code&gt;, you will see a short summary of the important options available. Type &lt;code&gt;./hydra -h&lt;/code&gt; to see all available command line options.&lt;/p&gt; &#xA;&lt;p&gt;Note that NO login/password file is included. Generate them yourself. A default password list is however present, use &#34;dpl4hydra.sh&#34; to generate a list.&lt;/p&gt; &#xA;&lt;p&gt;For Linux users, a GTK GUI is available, try &lt;code&gt;./xhydra&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the command line usage, the syntax is as follows: For attacking one target or a network, you can use the new &#34;://&#34; style: hydra [some command line options] PROTOCOL://TARGET:PORT/MODULE-OPTIONS The old mode can be used for these too, and additionally if you want to specify your targets from a text file, you &lt;em&gt;must&lt;/em&gt; use this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra [some command line options] [-s PORT] TARGET PROTOCOL [MODULE-OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Via the command line options you specify which logins to try, which passwords, if SSL should be used, how many parallel tasks to use for attacking, etc.&lt;/p&gt; &#xA;&lt;p&gt;PROTOCOL is the protocol you want to use for attacking, e.g. ftp, smtp, http-get or many others are available TARGET is the target you want to attack MODULE-OPTIONS are optional values which are special per PROTOCOL module&lt;/p&gt; &#xA;&lt;p&gt;FIRST - select your target you have three options on how to specify the target you want to attack:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a single target on the command line: just put the IP or DNS address in&lt;/li&gt; &#xA; &lt;li&gt;a network range on the command line: CIDR specification like &#34;192.168.0.0/24&#34;&lt;/li&gt; &#xA; &lt;li&gt;a list of hosts in a text file: one line per entry (see below)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;SECOND - select your protocol Try to avoid telnet, as it is unreliable to detect a correct or false login attempt. Use a port scanner to see which protocols are enabled on the target.&lt;/p&gt; &#xA;&lt;p&gt;THIRD - check if the module has optional parameters hydra -U PROTOCOL e.g. hydra -U smtp&lt;/p&gt; &#xA;&lt;p&gt;FOURTH - the destination port this is optional, if no port is supplied the default common port for the PROTOCOL is used. If you specify SSL to use (&#34;-S&#34; option), the SSL common port is used by default.&lt;/p&gt; &#xA;&lt;p&gt;If you use &#34;://&#34; notation, you must use &#34;[&#34; &#34;]&#34; brackets if you want to supply IPv6 addresses or CIDR (&#34;192.168.0.0/24&#34;) notations to attack: hydra [some command line options] ftp://[192.168.0.0/24]/ hydra [some command line options] -6 smtps://[2001:db8::1]/NTLM&lt;/p&gt; &#xA;&lt;p&gt;Note that everything hydra does is IPv4 only! If you want to attack IPv6 addresses, you must add the &#34;-6&#34; command line option. All attacks are then IPv6 only!&lt;/p&gt; &#xA;&lt;p&gt;If you want to supply your targets via a text file, you can not use the :// notation but use the old style and just supply the protocol (and module options): hydra [some command line options] -M targets.txt ftp You can also supply the port for each target entry by adding &#34;:&#xA; &lt;port&gt;&#xA;  &#34; after a target entry in the file, e.g.:&#xA; &lt;/port&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo.bar.com&#xA;target.com:21&#xA;unusual.port.com:2121&#xA;default.used.here.com&#xA;127.0.0.1&#xA;127.0.0.1:2121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you want to attach IPv6 targets, you must supply the -6 option and &lt;em&gt;must&lt;/em&gt; put IPv6 addresses in brackets in the file(!) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo.bar.com&#xA;target.com:21&#xA;[fe80::1%eth0]&#xA;[2001::1]&#xA;[2002::2]:8080&#xA;[2a01:24a:133:0:00:123:ff:1a]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LOGINS AND PASSWORDS&lt;/h2&gt; &#xA;&lt;p&gt;You have many options on how to attack with logins and passwords With -l for login and -p for password you tell hydra that this is the only login and/or password to try. With -L for logins and -P for passwords you supply text files with entries. e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra -l admin -p password ftp://localhost/&#xA;hydra -L default_logins.txt -p test ftp://localhost/&#xA;hydra -l admin -P common_passwords.txt ftp://localhost/&#xA;hydra -L logins.txt -P passwords.txt ftp://localhost/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can try passwords based on the login via the &#34;-e&#34; option. The &#34;-e&#34; option has three parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;s - try the login as password&#xA;n - try an empty password&#xA;r - reverse the login and try it as password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to, e.g. try &#34;try login as password and &#34;empty password&#34;, you specify &#34;-e sn&#34; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;But there are two more modes for trying passwords than -p/-P: You can use text file which where a login and password pair is separated by a colon, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;admin:password&#xA;test:test&#xA;foo:bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a common default account style listing, that is also generated by the dpl4hydra.sh default account file generator supplied with hydra. You use such a text file with the -C option - note that in this mode you can not use -l/-L/-p/-P options (-e nsr however you can). Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra -C default_accounts.txt ftp://localhost/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, there is a bruteforce mode with the -x option (which you can not use with -p/-P/-C):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-x minimum_length:maximum_length:charset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the charset definition is &lt;code&gt;a&lt;/code&gt; for lowercase letters, &lt;code&gt;A&lt;/code&gt; for uppercase letters, &lt;code&gt;1&lt;/code&gt; for numbers and for anything else you supply it is their real representation. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-x 1:3:a generate passwords from length 1 to 3 with all lowercase letters&#xA;-x 2:5:/ generate passwords from length 2 to 5 containing only slashes&#xA;-x 5:8:A1 generate passwords from length 5 to 8 with uppercase and numbers&#xA;-x &#39;3:3:aA1&amp;amp;~#\\ &#34;\&#39;&amp;lt;{([-|_^@)]=}&amp;gt;$%*?./§,;:!`&#39; -v generates lenght 3 passwords with all 95 characters, and verbose. &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra -l ftp -x 3:3:a ftp://localhost/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SPECIAL OPTIONS FOR MODULES&lt;/h2&gt; &#xA;&lt;p&gt;Via the third command line parameter (TARGET SERVICE OPTIONAL) or the -m command line option, you can pass one option to a module. Many modules use this, a few require it!&lt;/p&gt; &#xA;&lt;p&gt;To see the special option of a module, type:&lt;/p&gt; &#xA;&lt;p&gt;hydra -U &#xA; &lt;module&gt;&lt;/module&gt;&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;p&gt;./hydra -U http-post-form&lt;/p&gt; &#xA;&lt;p&gt;The special options can be passed via the -m parameter, as 3rd command line option or in the service://target/option format.&lt;/p&gt; &#xA;&lt;p&gt;Examples (they are all equal):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./hydra -l test -p test -m PLAIN 127.0.0.1 imap&#xA;./hydra -l test -p test 127.0.0.1 imap PLAIN&#xA;./hydra -l test -p test imap://127.0.0.1/PLAIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RESTORING AN ABORTED/CRASHED SESSION&lt;/h2&gt; &#xA;&lt;p&gt;When hydra is aborted with Control-C, killed or crashes, it leaves a &#34;hydra.restore&#34; file behind which contains all necessary information to restore the session. This session file is written every 5 minutes. NOTE: the hydra.restore file can NOT be copied to a different platform (e.g. from little endian to big endian, or from Solaris to AIX)&lt;/p&gt; &#xA;&lt;h2&gt;HOW TO SCAN/CRACK OVER A PROXY&lt;/h2&gt; &#xA;&lt;p&gt;The environment variable HYDRA_PROXY_HTTP defines the web proxy (this works just for the http services!). The following syntax is valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HYDRA_PROXY_HTTP=&#34;http://123.45.67.89:8080/&#34;&#xA;HYDRA_PROXY_HTTP=&#34;http://login:password@123.45.67.89:8080/&#34;&#xA;HYDRA_PROXY_HTTP=&#34;proxylist.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last example is a text file containing up to 64 proxies (in the same format definition as the other examples).&lt;/p&gt; &#xA;&lt;p&gt;For all other services, use the HYDRA_PROXY variable to scan/crack. It uses the same syntax. eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HYDRA_PROXY=[connect|socks4|socks5]://[login:password@]proxy_addr:proxy_port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HYDRA_PROXY=connect://proxy.anonymizer.com:8000&#xA;HYDRA_PROXY=socks4://auth:pw@127.0.0.1:1080&#xA;HYDRA_PROXY=socksproxylist.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ADDITIONAL HINTS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sort your password files by likelihood and use the -u option to find passwords much faster!&lt;/li&gt; &#xA; &lt;li&gt;uniq your dictionary files! this can save you a lot of time :-) cat words.txt | sort | uniq &amp;gt; dictionary.txt&lt;/li&gt; &#xA; &lt;li&gt;if you know that the target is using a password policy (allowing users only to choose a password with a minimum length of 6, containing a least one letter and one number, etc. use the tool pw-inspector which comes along with the hydra package to reduce the password list: cat dictionary.txt | pw-inspector -m 6 -c 2 -n &amp;gt; passlist.txt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RESULTS OUTPUT&lt;/h2&gt; &#xA;&lt;p&gt;The results are output to stdio along with the other information. Via the -o command line option, the results can also be written to a file. Using -b, the format of the output can be specified. Currently, these are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; - plain text format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jsonv1&lt;/code&gt; - JSON data using version 1.x of the schema (defined below).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json&lt;/code&gt; - JSON data using the latest version of the schema, currently there is only version 1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If using JSON output, the results file may not be valid JSON if there are serious errors in booting Hydra.&lt;/p&gt; &#xA;&lt;h2&gt;JSON Schema&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example of the JSON output. Notes on some of the fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;errormessages&lt;/code&gt; - an array of zero or more strings that are normally printed to stderr at the end of the Hydra&#39;s run. The text is very free form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;success&lt;/code&gt; - indication if Hydra ran correctly without error (&lt;strong&gt;NOT&lt;/strong&gt; if passwords were detected). This parameter is either the JSON value &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on completion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quantityfound&lt;/code&gt; - How many username+password combinations discovered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jsonoutputversion&lt;/code&gt; - Version of the schema, 1.00, 1.01, 1.11, 2.00, 2.03, etc. Hydra will make second tuple of the version to always be two digits to make it easier for downstream processors (as opposed to v1.1 vs v1.10). The minor-level versions are additive, so 1.02 will contain more fields than version 1.00 and will be backward compatible. Version 2.x will break something from version 1.x output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.00 example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;errormessages&#34;: [&#xA;        &#34;[ERROR] Error Message of Something&#34;,&#xA;        &#34;[ERROR] Another Message&#34;,&#xA;        &#34;These are very free form&#34;&#xA;    ],&#xA;    &#34;generator&#34;: {&#xA;        &#34;built&#34;: &#34;2021-03-01 14:44:22&#34;,&#xA;        &#34;commandline&#34;: &#34;hydra -b jsonv1 -o results.json ... ...&#34;,&#xA;        &#34;jsonoutputversion&#34;: &#34;1.00&#34;,&#xA;        &#34;server&#34;: &#34;127.0.0.1&#34;,&#xA;        &#34;service&#34;: &#34;http-post-form&#34;,&#xA;        &#34;software&#34;: &#34;Hydra&#34;,&#xA;        &#34;version&#34;: &#34;v8.5&#34;&#xA;    },&#xA;    &#34;quantityfound&#34;: 2,&#xA;    &#34;results&#34;: [&#xA;        {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;login&#34;: &#34;bill@example.com&#34;,&#xA;            &#34;password&#34;: &#34;bill&#34;,&#xA;            &#34;port&#34;: 9999,&#xA;            &#34;service&#34;: &#34;http-post-form&#34;&#xA;        },&#xA;        {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;login&#34;: &#34;joe@example.com&#34;,&#xA;            &#34;password&#34;: &#34;joe&#34;,&#xA;            &#34;port&#34;: 9999,&#xA;            &#34;service&#34;: &#34;http-post-form&#34;&#xA;        }&#xA;    ],&#xA;    &#34;success&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SPEED&lt;/h2&gt; &#xA;&lt;p&gt;through the parallelizing feature, this password cracker tool can be very fast, however it depends on the protocol. The fastest are generally POP3 and FTP. Experiment with the task option (-t) to speed things up! The higher - the faster ;-) (but too high - and it disables the service)&lt;/p&gt; &#xA;&lt;h2&gt;STATISTICS&lt;/h2&gt; &#xA;&lt;p&gt;Run against a SuSE Linux 7.2 on localhost with a &#34;-C FILE&#34; containing 295 entries (294 tries invalid logins, 1 valid). Every test was run three times (only for &#34;1 task&#34; just once), and the average noted down.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;&#x9;P A R A L L E L    T A S K S&#xA;SERVICE&#x9;1&#x9;4&#x9;8&#x9;16&#x9;32&#x9;50&#x9;64&#x9;100&#x9;128&#xA;------- --------------------------------------------------------------------&#xA;telnet&#x9;23:20&#x9;5:58&#x9;2:58&#x9;1:34&#x9;1:05&#x9;0:33&#x9;0:45*&#x9;0:25*&#x9;0:55*&#xA;ftp&#x9;45:54&#x9;11:51&#x9;5:54&#x9;3:06&#x9;1:25&#x9;0:58&#x9;0:46&#x9;0:29&#x9;0:32&#xA;pop3&#x9;92:10&#x9;27:16&#x9;13:56&#x9;6:42&#x9;2:55&#x9;1:57&#x9;1:24&#x9;1:14&#x9;0:50&#xA;imap&#x9;31:05&#x9;7:41&#x9;3:51&#x9;1:58&#x9;1:01&#x9;0:39&#x9;0:32&#x9;0:25&#x9;0:21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(*) Note: telnet timings can be VERY different for 64 to 128 tasks! e.g. with 128 tasks, running four times resulted in timings between 28 and 97 seconds! The reason for this is unknown...&lt;/p&gt; &#xA;&lt;p&gt;guesses per task (rounded up):&lt;/p&gt; &#xA;&lt;p&gt;295 74 38 19 10 6 5 3 3&lt;/p&gt; &#xA;&lt;p&gt;guesses possible per connect (depends on the server software and config):&lt;/p&gt; &#xA;&lt;p&gt;telnet 4 ftp 6 pop3 1 imap 3&lt;/p&gt; &#xA;&lt;h2&gt;BUGS &amp;amp; FEATURES&lt;/h2&gt; &#xA;&lt;p&gt;Hydra: Email me or David if you find bugs or if you have written a new module. &lt;a href=&#34;mailto:vh@thc.org&#34;&gt;vh@thc.org&lt;/a&gt; (and put &#34;antispam&#34; in the subject line)&lt;/p&gt; &#xA;&lt;p&gt;You should use PGP to encrypt emails to &lt;a href=&#34;mailto:vh@thc.org&#34;&gt;vh@thc.org&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----&#xA;Version: GnuPG v3.3.3 (vh@thc.org)&#xA;&#xA;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&#xA;zB3yrr+vYBT0uDWmxwPjiJs=&#xA;=ytEf&#xA;-----END PGP PUBLIC KEY BLOCK-----&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>linux-rdma/rdma-core</title>
    <updated>2024-05-12T01:38:14Z</updated>
    <id>tag:github.com,2024-05-12:/linux-rdma/rdma-core</id>
    <link href="https://github.com/linux-rdma/rdma-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RDMA core userspace libraries and daemons&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/ucfconsort/rdma-core/_build/latest?definitionId=2&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/ucfconsort/rdma-core/_apis/build/status/linux-rdma.rdma-core?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;RDMA Core Userspace Libraries and Daemons&lt;/h1&gt; &#xA;&lt;p&gt;This is the userspace components for the Linux Kernel&#39;s drivers/infiniband subsystem. Specifically this contains the userspace libraries for the following device nodes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/dev/infiniband/uverbsX (libibverbs)&lt;/li&gt; &#xA; &lt;li&gt;/dev/infiniband/rdma_cm (librdmacm)&lt;/li&gt; &#xA; &lt;li&gt;/dev/infiniband/umadX (libibumad)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The userspace component of the libibverbs RDMA kernel drivers are included under the providers/ directory. Support for the following Kernel RDMA drivers is included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bnxt_re.ko&lt;/li&gt; &#xA; &lt;li&gt;efa.ko&lt;/li&gt; &#xA; &lt;li&gt;erdma.ko&lt;/li&gt; &#xA; &lt;li&gt;iw_cxgb4.ko&lt;/li&gt; &#xA; &lt;li&gt;hfi1.ko&lt;/li&gt; &#xA; &lt;li&gt;hns-roce.ko&lt;/li&gt; &#xA; &lt;li&gt;irdma.ko&lt;/li&gt; &#xA; &lt;li&gt;ib_qib.ko&lt;/li&gt; &#xA; &lt;li&gt;mana_ib.ko&lt;/li&gt; &#xA; &lt;li&gt;mlx4_ib.ko&lt;/li&gt; &#xA; &lt;li&gt;mlx5_ib.ko&lt;/li&gt; &#xA; &lt;li&gt;ib_mthca.ko&lt;/li&gt; &#xA; &lt;li&gt;ocrdma.ko&lt;/li&gt; &#xA; &lt;li&gt;qedr.ko&lt;/li&gt; &#xA; &lt;li&gt;rdma_rxe.ko&lt;/li&gt; &#xA; &lt;li&gt;siw.ko&lt;/li&gt; &#xA; &lt;li&gt;vmw_pvrdma.ko&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional service daemons are provided for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;srp_daemon (ib_srp.ko)&lt;/li&gt; &#xA; &lt;li&gt;iwpmd (for iwarp kernel providers)&lt;/li&gt; &#xA; &lt;li&gt;ibacm (for InfiniBand communication management assistant)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;This project uses a cmake based build system. Quick start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bash build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;build/bin&lt;/em&gt; will contain the sample programs and &lt;em&gt;build/lib&lt;/em&gt; will contain the shared libraries. The build is configured to run all the programs &#39;in-place&#39; and cannot be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Debian Derived&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ apt-get install build-essential cmake gcc libudev-dev libnl-3-dev libnl-route-3-dev ninja-build pkg-config valgrind python3-dev cython3 python3-docutils pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian 9 (stretch) or newer&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 16.04 LTS (xenial) or newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fedora, CentOS 8&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dnf builddep redhat/rdma-core.spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Fedora Core uses the name &#39;ninja-build&#39; for the &#39;ninja&#39; command.&lt;/p&gt; &#xA;&lt;h3&gt;openSUSE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ zypper install cmake gcc libnl3-devel libudev-devel ninja pkg-config valgrind-devel python3-devel python3-Cython python3-docutils pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building on CentOS 7, Amazon Linux 2&lt;/h2&gt; &#xA;&lt;p&gt;Install required packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install cmake gcc libnl3-devel libudev-devel make pkgconfig valgrind-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers on CentOS 7 or Amazon Linux 2 are suggested to install more modern tooling for the best experience.&lt;/p&gt; &#xA;&lt;p&gt;CentOS 7:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install epel-release&#xA;$ yum install cmake3 ninja-build pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Amazon Linux 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ amazon-linux-extras install epel&#xA;$ yum install cmake3 ninja-build pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: EPEL uses the name &#39;ninja-build&#39; for the &#39;ninja&#39; command, and &#39;cmake3&#39; for the &#39;cmake&#39; command.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;To set up software RDMA on an existing interface with either of the available drivers, use the following commands, substituting &lt;code&gt;&amp;lt;DRIVER&amp;gt;&lt;/code&gt; with the name of the driver of your choice (&lt;code&gt;rdma_rxe&lt;/code&gt; or &lt;code&gt;siw&lt;/code&gt;) and &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; with the type corresponding to the driver (&lt;code&gt;rxe&lt;/code&gt; or &lt;code&gt;siw&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# modprobe &amp;lt;DRIVER&amp;gt;&#xA;# rdma link add &amp;lt;NAME&amp;gt; type &amp;lt;TYPE&amp;gt; netdev &amp;lt;DEVICE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that you need version of &lt;code&gt;iproute2&lt;/code&gt; recent enough is required for the command above to work.&lt;/p&gt; &#xA;&lt;p&gt;You can use either &lt;code&gt;ibv_devices&lt;/code&gt; or &lt;code&gt;rdma link&lt;/code&gt; to verify that the device was successfully added.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;Bugs should be reported to the &lt;a href=&#34;mailto:linux-rdma@vger.kernel.org&#34;&gt;linux-rdma@vger.kernel.org&lt;/a&gt; mailing list In your bug report, please include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Information about your system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux distribution and version&lt;/li&gt; &#xA;   &lt;li&gt;Linux kernel and version&lt;/li&gt; &#xA;   &lt;li&gt;InfiniBand hardware and firmware version&lt;/li&gt; &#xA;   &lt;li&gt;... any other relevant information&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to reproduce the bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the bug is a crash, the exact output printed out when the crash occurred, including any kernel messages produced.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Submitting patches&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/linux-rdma/rdma-core/master/Documentation/contributing.md&#34;&gt;Contributing to rdma-core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Stable branches&lt;/h1&gt; &#xA;&lt;p&gt;Stable versions are released regularly with backported fixes (see Documentation/stable.md) The current minimum version still maintained is &#39;v30.X&#39;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libvips/libvips</title>
    <updated>2024-05-12T01:38:14Z</updated>
    <id>tag:github.com,2024-05-12:/libvips/libvips</id>
    <link href="https://github.com/libvips/libvips" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast image processing library with low memory needs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libvips: an image processing library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libvips/libvips/actions&#34;&gt;&lt;img src=&#34;https://github.com/libvips/libvips/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=2&amp;amp;q=proj:libvips&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/libvips.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/jcupitt-libvips&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/6503/badge.svg?sanitize=true&#34; alt=&#34;Coverity Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/libvips/devchat?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/libvips/devchat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;libvips is a &lt;a href=&#34;https://github.com/libvips/libvips/wiki/Why-is-libvips-quick&#34;&gt;demand-driven, horizontally threaded&lt;/a&gt; image processing library. Compared to similar libraries, &lt;a href=&#34;https://github.com/libvips/libvips/wiki/Speed-and-memory-use&#34;&gt;libvips runs quickly and uses little memory&lt;/a&gt;. libvips is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&#34;&gt;LGPL 2.1+&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It has around &lt;a href=&#34;https://libvips.github.io/libvips/API/current/func-list.html&#34;&gt;300 operations&lt;/a&gt; covering arithmetic, histograms, convolution, morphological operations, frequency filtering, colour, resampling, statistics and others. It supports a large range of &lt;a href=&#34;https://libvips.github.io/libvips/API/current/VipsImage.html#VipsBandFormat&#34;&gt;numeric types&lt;/a&gt;, from 8-bit int to 128-bit complex. Images can have any number of bands. It supports a good range of image formats, including JPEG, JPEG2000, JPEG-XL, TIFF, PNG, WebP, HEIC, AVIF, FITS, Matlab, OpenEXR, PDF, SVG, HDR, PPM / PGM / PFM, CSV, GIF, Analyze, NIfTI, DeepZoom, and OpenSlide. It can also load images via ImageMagick or GraphicsMagick, letting it work with formats like DICOM.&lt;/p&gt; &#xA;&lt;p&gt;It comes with bindings for &lt;a href=&#34;https://libvips.github.io/libvips/API/current/using-from-c.html&#34;&gt;C&lt;/a&gt;, &lt;a href=&#34;https://libvips.github.io/libvips/API/current/libvips-from-C++.html&#34;&gt;C++&lt;/a&gt;, and the &lt;a href=&#34;https://libvips.github.io/libvips/API/current/using-cli.html&#34;&gt;command-line&lt;/a&gt;. Full bindings are available for :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Binding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rubygems.org/gems/ruby-vips&#34;&gt;ruby-vips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pyvips&#34;&gt;pyvips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libvips/php-vips&#34;&gt;php-vips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# / .NET&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/NetVips&#34;&gt;NetVips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/davidbyttow/govips&#34;&gt;govips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libvips/lua-vips&#34;&gt;lua-vips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/naqvis/crystal-vips&#34;&gt;crystal-vips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akash-akya/vix&#34;&gt;vix&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;libvips is used as an image processing engine by:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.org/package/sharp&#34;&gt;sharp (on node.js)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/imgproxy/imgproxy&#34;&gt;imgproxy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/h2non/bimg&#34;&gt;bimg&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DAddYE/vips&#34;&gt;sharp for Go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgeguides.rubyonrails.org/active_storage_overview.html&#34;&gt;Ruby on Rails&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eltiare/carrierwave-vips&#34;&gt;carrierwave-vips&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mediawiki.org/wiki/Extension:VipsScaler&#34;&gt;mediawiki&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aferrero2707/PhotoFlow&#34;&gt;PhotoFlow&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;and others. The official libvips GUI is &lt;a href=&#34;https://github.com/libvips/nip2&#34;&gt;nip2&lt;/a&gt;, a strange combination of a spreadsheet and a photo editor.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;There are packages for most Unix-like operating systems, including macOS. Check your package manager.&lt;/p&gt; &#xA;&lt;p&gt;There are binaries for Windows in &lt;a href=&#34;https://github.com/libvips/libvips/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://libvips.github.io/libvips&#34;&gt;libvips website&lt;/a&gt; has &lt;a href=&#34;https://libvips.github.io/libvips/install.html&#34;&gt;detailed install notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building from source&lt;/h1&gt; &#xA;&lt;p&gt;libvips uses the &lt;a href=&#34;https://mesonbuild.com&#34;&gt;Meson build system&lt;/a&gt;, version 0.56 or later. Meson can use &lt;a href=&#34;https://ninja-build.org&#34;&gt;&lt;code&gt;ninja&lt;/code&gt;&lt;/a&gt;, Visual Studio or XCode as a backend, so you&#39;ll also need one of them.&lt;/p&gt; &#xA;&lt;p&gt;libvips must have &lt;code&gt;build-essential&lt;/code&gt;, &lt;code&gt;pkg-config&lt;/code&gt;, &lt;code&gt;libglib2.0-dev&lt;/code&gt;, &lt;code&gt;libexpat1-dev&lt;/code&gt;. See the &lt;strong&gt;Dependencies&lt;/strong&gt; section below for a full list of the libvips optional dependencies.&lt;/p&gt; &#xA;&lt;p&gt;There are basic bash completions in &lt;code&gt;completions/&lt;/code&gt;, see the README in there.&lt;/p&gt; &#xA;&lt;h2&gt;Cheatsheet&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd libvips-x.y.x&#xA;meson setup build --prefix /my/install/prefix&#xA;cd build&#xA;meson compile&#xA;meson test&#xA;meson install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the output of &lt;code&gt;meson setup&lt;/code&gt; carefully and make sure it found everything you wanted it to find. Add arguments to &lt;code&gt;meson setup&lt;/code&gt; to change the build configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add flags like &lt;code&gt;-Dnsgif=false&lt;/code&gt; to turn libvips options on and off, see &lt;code&gt;meson_options.txt&lt;/code&gt; for a list of all the build options libvips supports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add flags like &lt;code&gt;-Dmagick=disabled&lt;/code&gt; to turn libvips dependencies on and off, see &lt;code&gt;meson_options.txt&lt;/code&gt; and the list below for a summary of all the libvips dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You might need to add &lt;code&gt;--libdir lib&lt;/code&gt; on Debian if you don&#39;t want the arch name in the library path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;--default-library static&lt;/code&gt; for a static build.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use eg. &lt;code&gt;CC=clang CXX=clang++ meson setup ...&lt;/code&gt; to change compiler.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can have many &lt;code&gt;build-dir&lt;/code&gt;, pick whatever names you like, for example one for release and one for debug.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s a more comprehensive test suite you can run once libvips has been installed. Use &lt;code&gt;pytest&lt;/code&gt; in the libvips base directory.&lt;/p&gt; &#xA;&lt;h2&gt;Optional dependencies&lt;/h2&gt; &#xA;&lt;p&gt;If suitable versions are found, libvips will add support for the following libraries automatically. Packages are generally found with &lt;code&gt;pkg-config&lt;/code&gt;, so make sure that is working.&lt;/p&gt; &#xA;&lt;h3&gt;libjpeg&lt;/h3&gt; &#xA;&lt;p&gt;Anything that is compatible with the IJG JPEG library. Use &lt;code&gt;mozjpeg&lt;/code&gt; if you can. Another option is &lt;code&gt;libjpeg-turbo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;libexif&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips adds support for EXIF metadata in JPEG files.&lt;/p&gt; &#xA;&lt;h3&gt;librsvg&lt;/h3&gt; &#xA;&lt;p&gt;The usual SVG loader. If this is not present, vips will try to load SVGs via imagemagick instead.&lt;/p&gt; &#xA;&lt;h3&gt;PDFium&lt;/h3&gt; &#xA;&lt;p&gt;If present, libvips will attempt to load PDFs with PDFium. Download the prebuilt pdfium binary from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/bblanchon/pdfium-binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Untar to the libvips install prefix, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/vips&#xA;tar xf ~/pdfium-linux.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;pdfium.pc&lt;/code&gt; like this (update the version number):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VIPSHOME=/home/john/vips&#xA;cat &amp;gt; $VIPSHOME/lib/pkgconfig/pdfium.pc &amp;lt;&amp;lt; EOF&#xA;     prefix=$VIPSHOME&#xA;     exec_prefix=\${prefix}&#xA;     libdir=\${exec_prefix}/lib&#xA;     includedir=\${prefix}/include&#xA;     Name: pdfium&#xA;     Description: pdfium&#xA;     Version: 4290&#xA;     Requires:&#xA;     Libs: -L\${libdir} -lpdfium&#xA;     Cflags: -I\${includedir}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If PDFium is not detected, libvips will look for &lt;code&gt;poppler-glib&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;poppler-glib&lt;/h3&gt; &#xA;&lt;p&gt;The Poppler PDF renderer, with a glib API. If this is not present, vips will try to load PDFs via imagemagick.&lt;/p&gt; &#xA;&lt;h3&gt;cgif&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips will save GIFs with &lt;a href=&#34;https://github.com/dloebl/cgif&#34;&gt;cgif&lt;/a&gt;. If this is not present, vips will try to save gifs via imagemagick instead.&lt;/p&gt; &#xA;&lt;h3&gt;libarchive&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips adds support for creating image pyramids with &lt;code&gt;dzsave&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;libtiff&lt;/h3&gt; &#xA;&lt;p&gt;The TIFF library. It needs to be built with support for JPEG and ZIP compression. 3.4b037 and later are known to be OK.&lt;/p&gt; &#xA;&lt;h3&gt;fftw3&lt;/h3&gt; &#xA;&lt;p&gt;If libvips finds this library, it uses it for fourier transforms.&lt;/p&gt; &#xA;&lt;h3&gt;lcms2&lt;/h3&gt; &#xA;&lt;p&gt;If present, &lt;code&gt;vips_icc_import()&lt;/code&gt;, &lt;code&gt;vips_icc_export()&lt;/code&gt; and &lt;code&gt;vips_icc_transform()&lt;/code&gt; can be used to manipulate images with ICC profiles.&lt;/p&gt; &#xA;&lt;h3&gt;libspng&lt;/h3&gt; &#xA;&lt;p&gt;If present, libvips will load and save PNG files using libspng. If not, it will look for the standard libpng package.&lt;/p&gt; &#xA;&lt;h3&gt;libimagequant, quantizr&lt;/h3&gt; &#xA;&lt;p&gt;If one of these quantisation packages is present, libvips can write 8-bit palette-ised PNGs and GIFs.&lt;/p&gt; &#xA;&lt;h3&gt;ImageMagick, or optionally GraphicsMagick&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips adds support for loading and saving all libMagick-supported image file types. You can enable and disable load and save separately.&lt;/p&gt; &#xA;&lt;p&gt;Imagemagick 6.9+ needs to have been built with &lt;code&gt;--with-modules&lt;/code&gt;. Most packaged IMs are, I think.&lt;/p&gt; &#xA;&lt;p&gt;If you are going to be using libvips with untrusted images, perhaps in a web server, for example, you should consider the security implications of enabling a package with such a large attack surface.&lt;/p&gt; &#xA;&lt;h3&gt;pangocairo&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips adds support for text rendering. You need the package pangocairo in &lt;code&gt;pkg-config --list-all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;highway&lt;/h3&gt; &#xA;&lt;p&gt;If present, libvips will accelerate some operations with SIMD. If not, it will look for the orc-0.4 package.&lt;/p&gt; &#xA;&lt;h3&gt;matio&lt;/h3&gt; &#xA;&lt;p&gt;If available, vips can load images from Matlab save files.&lt;/p&gt; &#xA;&lt;h3&gt;cfitsio&lt;/h3&gt; &#xA;&lt;p&gt;If available, vips can load FITS images.&lt;/p&gt; &#xA;&lt;h3&gt;libwebp&lt;/h3&gt; &#xA;&lt;p&gt;If available, vips can load and save WebP images.&lt;/p&gt; &#xA;&lt;h3&gt;libniftiio&lt;/h3&gt; &#xA;&lt;p&gt;If available, vips can load and save NIfTI images.&lt;/p&gt; &#xA;&lt;h3&gt;OpenEXR&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips will directly read (but not write, sadly) OpenEXR images.&lt;/p&gt; &#xA;&lt;h3&gt;OpenJPEG&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips will read and write JPEG2000 images.&lt;/p&gt; &#xA;&lt;h3&gt;libjxl&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips will read and write JPEG-XL images.&lt;/p&gt; &#xA;&lt;h3&gt;OpenSlide&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips can load OpenSlide-supported virtual slide files: Aperio, Hamamatsu, Leica, MIRAX, Sakura, Trestle, and Ventana.&lt;/p&gt; &#xA;&lt;h3&gt;libheif&lt;/h3&gt; &#xA;&lt;p&gt;If available, libvips can load and save HEIC and AVIF images. Your libheif (in turn) needs to be built with the correct decoders and encoders. You can check with eg.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ heif-convert --list-decoders&#xA;HEIC decoders:&#xA;- libde265 = libde265 HEVC decoder, version 1.0.9&#xA;AVIF decoders:&#xA;- dav1d = dav1d v6.6.0&#xA;- aom = AOMedia Project AV1 Decoder v3.5.0&#xA;$ heif-enc --list-encoders&#xA;HEIC encoders:&#xA;- x265 = x265 HEVC encoder (3.5+1-f0c1022b6) [default]&#xA;AVIF encoders:&#xA;- aom = AOMedia Project AV1 Encoder v3.5.0 [default]&#xA;- svt = SVT-AV1 encoder v1.1.0&#xA;- rav1e = Rav1e encoder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libvips/libvips/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/libvips/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Organizations&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve had generous financial support from our sponsors. Thank you very much!&lt;/p&gt; &#xA;&lt;img src=&#34;https://opencollective.com/libvips/sponsors.svg?width=890&amp;amp;button=false&#34;&gt;</summary>
  </entry>
</feed>