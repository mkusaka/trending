<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T01:51:00Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iNavFlight/inav</title>
    <updated>2023-12-17T01:51:00Z</updated>
    <id>tag:github.com,2023-12-17:/iNavFlight/inav</id>
    <link href="https://github.com/iNavFlight/inav" rel="alternate"></link>
    <summary type="html">&lt;p&gt;INAV: Navigation-enabled flight control software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;INAV - navigation capable flight controller&lt;/h1&gt; &#xA;&lt;h1&gt;PSA&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;INAV no longer accepts targets based on STM32 F411 MCU.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;INAV 7 is the last INAV official release available for F411 based flight controllers. The next milestone, INAV 8 will not be available for F411 boards.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://static.rcgroups.net/forums/attachments/6/1/0/3/7/6/a9088858-102-inav.png&#34; alt=&#34;INAV&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;INAV Community&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/peg2hhbYwN&#34;&gt;INAV Discord Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/groups/INAVOfficial&#34;&gt;INAV Official on Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/INAVFlight&#34;&gt;INAV Official on Telegram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs on the most popular F4, F7 and H7 flight controllers&lt;/li&gt; &#xA; &lt;li&gt;On Screen Display (OSD) - both character and pixel style&lt;/li&gt; &#xA; &lt;li&gt;DJI OSD integration: all elements, system messages and warnings&lt;/li&gt; &#xA; &lt;li&gt;Outstanding performance out of the box&lt;/li&gt; &#xA; &lt;li&gt;Position Hold, Altitude Hold, Return To Home and Waypoint Missions&lt;/li&gt; &#xA; &lt;li&gt;Excellent support for fixed wing UAVs: airplanes, flying wings&lt;/li&gt; &#xA; &lt;li&gt;Fully configurable mixer that allows to run any hardware you want: multirotor, fixed wing, rovers, boats and other experimental devices&lt;/li&gt; &#xA; &lt;li&gt;Multiple sensor support: GPS, Pitot tube, sonar, lidar, temperature, ESC with BlHeli_32 telemetry&lt;/li&gt; &#xA; &lt;li&gt;SmartAudio and IRC Tramp VTX support&lt;/li&gt; &#xA; &lt;li&gt;Blackbox flight recorder logging&lt;/li&gt; &#xA; &lt;li&gt;Telemetry: SmartPort, FPort, MAVlink, LTM, CRSF&lt;/li&gt; &#xA; &lt;li&gt;Multi-color RGB LED Strip support&lt;/li&gt; &#xA; &lt;li&gt;Advanced gyro filtering&lt;/li&gt; &#xA; &lt;li&gt;Logic Conditions, Global Functions and Global Variables: you can program INAV with a GUI&lt;/li&gt; &#xA; &lt;li&gt;And many more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a list of features, changes and some discussion please review consult the releases &lt;a href=&#34;https://github.com/iNavFlight/inav/releases&#34;&gt;page&lt;/a&gt; and the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;INAV Configurator&lt;/h3&gt; &#xA;&lt;p&gt;Official tool for INAV can be downloaded &lt;a href=&#34;https://github.com/iNavFlight/inav-configurator/releases&#34;&gt;here&lt;/a&gt;. It can be run on Windows, MacOS and Linux machines and standalone application.&lt;/p&gt; &#xA;&lt;h3&gt;INAV Blackbox Explorer&lt;/h3&gt; &#xA;&lt;p&gt;Tool for Blackbox logs analysis is available &lt;a href=&#34;https://github.com/iNavFlight/blackbox-log-viewer/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;INAV Blackbox Tools&lt;/h3&gt; &#xA;&lt;p&gt;Command line tools (&lt;code&gt;blackbox_decode&lt;/code&gt;, &lt;code&gt;blackbox_render&lt;/code&gt;) for Blackbox log conversion and analysis &lt;a href=&#34;https://github.com/iNavFlight/blackbox-tools&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Telemetry screen for EdgeTX and OpenTX&lt;/h3&gt; &#xA;&lt;p&gt;Users of EdgeTX and OpenTX radios (Taranis, Horus, Jumper, Radiomaster, Nirvana) can use INAV OpenTX Telemetry Widget screen. Software and installation instruction are available here: &lt;a href=&#34;https://github.com/iNavFlight/OpenTX-Telemetry-Widget&#34;&gt;https://github.com/iNavFlight/OpenTX-Telemetry-Widget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;INAV magnetometer alignment helper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kernel-machine.github.io/INavMagAlignHelper/&#34;&gt;INAV Magnetometer Alignment helper&lt;/a&gt; allows to align INAV magnetometer despite position and orientation. This simplifies the process of INAV setup on multirotors with tilted GPS modules.&lt;/p&gt; &#xA;&lt;h3&gt;OSD layout Copy, Move, or Replace helper tool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mrd-rc.com/tutorials-tools-and-testing/useful-tools/inav-osd-switcher-tool/&#34;&gt;Easy INAV OSD switcher tool&lt;/a&gt; allows you to easily switch your OSD layouts around in INAV. Choose the from and to OSD layouts, and the method of transfering the layouts.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/iNavFlight/inav/raw/master/docs/Installation.md&#34;&gt;https://github.com/iNavFlight/inav/blob/master/docs/Installation.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation, support and learning resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLOUQ8o2_nCLkZlulvqsX_vRMfXd5zM7Ha&#34;&gt;INAV 5 on a flying wing full tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLOUQ8o2_nCLkfcKsWobDLtBNIBzwlwRC8&#34;&gt;INAV on a multirotor drone tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Fixed_Wing_Setup_Guide.pdf&#34;&gt;Fixed Wing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Autolaunch.pdf&#34;&gt;Autolaunch Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Modes.pdf&#34;&gt;Modes Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iNavFlight/inav/master/docs/INAV_Wing_Tuning_Masterclass.pdf&#34;&gt;Wing Tuning Masterclass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iNavFlight/inav/tree/master/docs&#34;&gt;Official documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iNavFlight/inav/wiki&#34;&gt;Official Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLOUQ8o2_nCLloACrA6f1_daCjhqY2x0fB&#34;&gt;Video series by Pawe≈Ç Spychalski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iNavFlight/inav/tree/master/docs/boards&#34;&gt;Target documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and encouraged. You can contribute in many ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation updates and corrections.&lt;/li&gt; &#xA; &lt;li&gt;How-To guides - received help? help others!&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;New features.&lt;/li&gt; &#xA; &lt;li&gt;Telling us your ideas and suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Buying your hardware from this &lt;a href=&#34;https://inavflight.com/shop/u/bg/&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A good place to start is the Discord channel, Telegram channel or Facebook group. Drop in, say hi.&lt;/p&gt; &#xA;&lt;p&gt;Github issue tracker is a good place to search for existing issues or report a new bug/feature request:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iNavFlight/inav/issues&#34;&gt;https://github.com/iNavFlight/inav/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iNavFlight/inav-configurator/issues&#34;&gt;https://github.com/iNavFlight/inav-configurator/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before creating new issues please check to see if there is an existing one, search first otherwise you waste peoples time when they could be coding instead!&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the development section in the &lt;a href=&#34;https://github.com/iNavFlight/inav/tree/master/docs/development&#34;&gt;docs/development&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;INAV Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iNavFlight/inav/releases&#34;&gt;https://github.com/iNavFlight/inav/releases&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/mimalloc</title>
    <updated>2023-12-17T01:51:00Z</updated>
    <id>tag:github.com,2023-12-17:/microsoft/mimalloc</id>
    <link href="https://github.com/microsoft/mimalloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mimalloc is a compact general purpose allocator with excellent performance.&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/mimalloc-logo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Daan0324/mimalloc/_build?definitionId=1&amp;amp;_a=summary&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://dev.azure.com/Daan0324/mimalloc/_apis/build/status/microsoft.mimalloc?branchName=dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mimalloc&lt;/h1&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;mimalloc (pronounced &#34;me-malloc&#34;) is a general purpose allocator with excellent &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#performance&#34;&gt;performance&lt;/a&gt; characteristics. Initially developed by Daan Leijen for the runtime systems of the &lt;a href=&#34;https://koka-lang.github.io&#34;&gt;Koka&lt;/a&gt; and &lt;a href=&#34;https://github.com/leanprover/lean&#34;&gt;Lean&lt;/a&gt; languages.&lt;/p&gt; &#xA;&lt;p&gt;Latest release tag: &lt;code&gt;v2.1.2&lt;/code&gt; (2023-04-24). Latest stable tag: &lt;code&gt;v1.8.2&lt;/code&gt; (2023-04-24).&lt;/p&gt; &#xA;&lt;p&gt;mimalloc is a drop-in replacement for &lt;code&gt;malloc&lt;/code&gt; and can be used in other programs without code changes, for example, on dynamically linked ELF-based systems (Linux, BSD, etc.) you can use it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; LD_PRELOAD=/usr/lib/libmimalloc.so  myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also includes a robust way to override the default allocator in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#override_on_windows&#34;&gt;Windows&lt;/a&gt;. Notable aspects of the design include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;small and consistent&lt;/strong&gt;: the library is about 8k LOC using simple and consistent data structures. This makes it very suitable to integrate and adapt in other projects. For runtime systems it provides hooks for a monotonic &lt;em&gt;heartbeat&lt;/em&gt; and deferred freeing (for bounded worst-case times with reference counting). Partly due to its simplicity, mimalloc has been ported to many systems (Windows, macOS, Linux, WASM, various BSD&#39;s, Haiku, MUSL, etc) and has excellent support for dynamic overriding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;free list sharding&lt;/strong&gt;: instead of one big free list (per size class) we have many smaller lists per &#34;mimalloc page&#34; which reduces fragmentation and increases locality -- things that are allocated close in time get allocated close in memory. (A mimalloc page contains blocks of one size class and is usually 64KiB on a 64-bit system).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;free list multi-sharding&lt;/strong&gt;: the big idea! Not only do we shard the free list per mimalloc page, but for each page we have multiple free lists. In particular, there is one list for thread-local &lt;code&gt;free&lt;/code&gt; operations, and another one for concurrent &lt;code&gt;free&lt;/code&gt; operations. Free-ing from another thread can now be a single CAS without needing sophisticated coordination between threads. Since there will be thousands of separate free lists, contention is naturally distributed over the heap, and the chance of contending on a single location will be low -- this is quite similar to randomized algorithms like skip lists where adding a random oracle removes the need for a more complex algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;eager page purging&lt;/strong&gt;: when a &#34;page&#34; becomes empty (with increased chance due to free list sharding) the memory is marked to the OS as unused (reset or decommitted) reducing (real) memory pressure and fragmentation, especially in long running programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;secure&lt;/strong&gt;: &lt;em&gt;mimalloc&lt;/em&gt; can be built in secure mode, adding guard pages, randomized allocation, encrypted free lists, etc. to protect against various heap vulnerabilities. The performance penalty is usually around 10% on average over our benchmarks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;first-class heaps&lt;/strong&gt;: efficiently create and use multiple heaps to allocate across different regions. A heap can be destroyed at once instead of deallocating each object separately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bounded&lt;/strong&gt;: it does not suffer from &lt;em&gt;blowup&lt;/em&gt; [1], has bounded worst-case allocation times (&lt;em&gt;wcat&lt;/em&gt;) (upto OS primitives), bounded space overhead (~0.2% meta-data, with low internal fragmentation), and has no internal points of contention using only atomic operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fast&lt;/strong&gt;: In our benchmarks (see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#performance&#34;&gt;below&lt;/a&gt;), &lt;em&gt;mimalloc&lt;/em&gt; outperforms other leading allocators (&lt;em&gt;jemalloc&lt;/em&gt;, &lt;em&gt;tcmalloc&lt;/em&gt;, &lt;em&gt;Hoard&lt;/em&gt;, etc), and often uses less memory. A nice property is that it does consistently well over a wide range of benchmarks. There is also good huge OS page support for larger server programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://microsoft.github.io/mimalloc&#34;&gt;documentation&lt;/a&gt; gives a full overview of the API. You can read more on the design of &lt;em&gt;mimalloc&lt;/em&gt; in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action&#34;&gt;technical report&lt;/a&gt; which also has detailed benchmark results.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: latest stable release (based on &lt;code&gt;dev-slice&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: development branch for mimalloc v1. Use this branch for submitting PR&#39;s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev-slice&lt;/code&gt;: development branch for mimalloc v2. This branch is downstream of &lt;code&gt;dev&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Note: the &lt;code&gt;v2.x&lt;/code&gt; version has a new algorithm for managing internal mimalloc pages that tends to reduce memory usage and fragmentation compared to mimalloc &lt;code&gt;v1.x&lt;/code&gt; (especially for large workloads). Should otherwise have similar performance (see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#performance&#34;&gt;below&lt;/a&gt;); please report if you observe any significant performance regression.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2023-04-24, &lt;code&gt;v1.8.2&lt;/code&gt;, &lt;code&gt;v2.1.2&lt;/code&gt;: Fixes build issues on freeBSD, musl, and C17 (UE 5.1.1). Reduce code size/complexity by removing regions and segment-cache&#39;s and only use arenas with improved memory purging -- this may improve memory usage as well for larger services. Renamed options for consistency. Improved Valgrind and ASAN checking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2023-04-03, &lt;code&gt;v1.8.1&lt;/code&gt;, &lt;code&gt;v2.1.1&lt;/code&gt;: Fixes build issues on some platforms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2023-03-29, &lt;code&gt;v1.8.0&lt;/code&gt;, &lt;code&gt;v2.1.0&lt;/code&gt;: Improved support dynamic overriding on Windows 11. Improved tracing precision with &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#asan&#34;&gt;asan&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#valgrind&#34;&gt;Valgrind&lt;/a&gt;, and added Windows event tracing &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#ETW&#34;&gt;ETW&lt;/a&gt; (contributed by Xinglong He). Created an OS abstraction layer to make it easier to port and separate platform dependent code (in &lt;code&gt;src/prim&lt;/code&gt;). Fixed C++ STL compilation on older Microsoft C++ compilers, and various small bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-12-23, &lt;code&gt;v1.7.9&lt;/code&gt;, &lt;code&gt;v2.0.9&lt;/code&gt;: Supports building with &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#asan&#34;&gt;asan&lt;/a&gt; and improved &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#valgrind&#34;&gt;Valgrind&lt;/a&gt; support. Support abitrary large alignments (in particular for &lt;code&gt;std::pmr&lt;/code&gt; pools). Added C++ STL allocators attached to a specific heap (thanks @vmarkovtsev). Heap walks now visit all object (including huge objects). Support Windows nano server containers (by Johannes Schindelin,@dscho). Various small bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-11-03, &lt;code&gt;v1.7.7&lt;/code&gt;, &lt;code&gt;v2.0.7&lt;/code&gt;: Initial support for &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#valgrind&#34;&gt;Valgrind&lt;/a&gt; for leak testing and heap block overflow detection. Initial support for attaching heaps to a speficic memory area (only in v2). Fix &lt;code&gt;realloc&lt;/code&gt; behavior for zero size blocks, remove restriction to integral multiple of the alignment in &lt;code&gt;alloc_align&lt;/code&gt;, improved aligned allocation performance, reduced contention with many threads on few processors (thank you @dposluns!), vs2022 support, support &lt;code&gt;pkg-config&lt;/code&gt;, .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-04-14, &lt;code&gt;v1.7.6&lt;/code&gt;, &lt;code&gt;v2.0.6&lt;/code&gt;: fix fallback path for aligned OS allocation on Windows, improve Windows aligned allocation even when compiling with older SDK&#39;s, fix dynamic overriding on macOS Monterey, fix MSVC C++ dynamic overriding, fix warnings under Clang 14, improve performance if many OS threads are created and destroyed, fix statistics for large object allocations, using MIMALLOC_VERBOSE=1 has no maximum on the number of error messages, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-02-14, &lt;code&gt;v1.7.5&lt;/code&gt;, &lt;code&gt;v2.0.5&lt;/code&gt; (alpha): fix malloc override on Windows 11, fix compilation with musl, potentially reduced committed memory, add &lt;code&gt;bin/minject&lt;/code&gt; for Windows, improved wasm support, faster aligned allocation, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/#older-release-notes&#34;&gt;Older release notes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devnexen.blogspot.com/&#34;&gt;David Carlier&lt;/a&gt; (@devnexen) for his many contributions, and making mimalloc work better on many less common operating systems, like Haiku, Dragonfly, etc.&lt;/li&gt; &#xA; &lt;li&gt;Mary Feofanova (@mary3000), Evgeniy Moiseenko, and Manuel P√∂ter (@mpoeter) for making mimalloc TSAN checkable, and finding memory model bugs using the &lt;a href=&#34;https://plv.mpi-sws.org/genmc/&#34;&gt;genMC&lt;/a&gt; model checker.&lt;/li&gt; &#xA; &lt;li&gt;Weipeng Liu (@pongba), Zhuowei Li, Junhua Wang, and Jakub Szymanski, for their early support of mimalloc and deployment at large scale services, leading to many improvements in the mimalloc algorithms for large workloads.&lt;/li&gt; &#xA; &lt;li&gt;Jason Gibson (@jasongibson) for exhaustive testing on large scale workloads and server environments, and finding complex bugs in (early versions of) &lt;code&gt;mimalloc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manuel P√∂ter (@mpoeter) and Sam Gross(@colesbury) for finding an ABA concurrency issue in abandoned segment reclamation. Sam also created the &lt;a href=&#34;https://github.com/colesbury/nogil&#34;&gt;no GIL&lt;/a&gt; Python fork which uses mimalloc internally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;mimalloc is used in various large scale low-latency services and programs, for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bing.com&#34;&gt;&lt;img height=&#34;50&#34; align=&#34;left&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e9/Bing_logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://azure.microsoft.com/&#34;&gt;&lt;img height=&#34;50&#34; align=&#34;left&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a8/Microsoft_Azure_Logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deathstrandingpc.505games.com&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/ds-logo.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.unrealengine.com/4.26/en-US/WhatsNew/Builds/ReleaseNotes/4_25/&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/unreal-logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cab.spbu.ru/software/spades/&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/spades-logo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;ide/vs2019/mimalloc.sln&lt;/code&gt; in Visual Studio 2019 and build. The &lt;code&gt;mimalloc&lt;/code&gt; project builds a static library (in &lt;code&gt;out/msvc-x64&lt;/code&gt;), while the &lt;code&gt;mimalloc-override&lt;/code&gt; project builds a DLL for overriding malloc in the entire program.&lt;/p&gt; &#xA;&lt;h2&gt;macOS, Linux, BSD, etc.&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://cmake.org&#34;&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; as the build system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/release&#xA;&amp;gt; cd out/release&#xA;&amp;gt; cmake ../..&#xA;&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the library as a shared (dynamic) library (&lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt;), a static library (&lt;code&gt;.a&lt;/code&gt;), and as a single object file (&lt;code&gt;.o&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; sudo make install&lt;/code&gt; (install the library and header files in &lt;code&gt;/usr/local/lib&lt;/code&gt; and &lt;code&gt;/usr/local/include&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;You can build the debug version which does many internal checks and maintains detailed statistics as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/debug&#xA;&amp;gt; cd out/debug&#xA;&amp;gt; cmake -DCMAKE_BUILD_TYPE=Debug ../..&#xA;&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will name the shared library as &lt;code&gt;libmimalloc-debug.so&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can build a &lt;em&gt;secure&lt;/em&gt; version that uses guard pages, encrypted free lists, etc., as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/secure&#xA;&amp;gt; cd out/secure&#xA;&amp;gt; cmake -DMI_SECURE=ON ../..&#xA;&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will name the shared library as &lt;code&gt;libmimalloc-secure.so&lt;/code&gt;. Use &lt;code&gt;ccmake&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt; instead of &lt;code&gt;cmake&lt;/code&gt; to see and customize all the available build options.&lt;/p&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install CMake: &lt;code&gt;sudo apt-get install cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install CCMake: &lt;code&gt;sudo apt-get install cmake-curses-gui&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Single source&lt;/h2&gt; &#xA;&lt;p&gt;You can also directly build the single &lt;code&gt;src/static.c&lt;/code&gt; file as part of your project without needing &lt;code&gt;cmake&lt;/code&gt; at all. Make sure to also add the mimalloc &lt;code&gt;include&lt;/code&gt; directory to the include path.&lt;/p&gt; &#xA;&lt;h1&gt;Using the library&lt;/h1&gt; &#xA;&lt;p&gt;The preferred usage is including &lt;code&gt;&amp;lt;mimalloc.h&amp;gt;&lt;/code&gt;, linking with the shared- or static library, and using the &lt;code&gt;mi_malloc&lt;/code&gt; API exclusively for allocation. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; gcc -o myprogram -lmimalloc myfile.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mimalloc uses only safe OS calls (&lt;code&gt;mmap&lt;/code&gt; and &lt;code&gt;VirtualAlloc&lt;/code&gt;) and can co-exist with other allocators linked to the same program. If you use &lt;code&gt;cmake&lt;/code&gt;, you can simply use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(mimalloc 1.4 REQUIRED)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your &lt;code&gt;CMakeLists.txt&lt;/code&gt; to find a locally installed mimalloc. Then use either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target_link_libraries(myapp PUBLIC mimalloc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to link with the shared (dynamic) library, or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target_link_libraries(myapp PUBLIC mimalloc-static)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to link with the static library. See &lt;code&gt;test\CMakeLists.txt&lt;/code&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;For best performance in C++ programs, it is also recommended to override the global &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; operators. For convience, mimalloc provides &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc-new-delete.h&#34;&gt;&lt;code&gt;mimalloc-new-delete.h&lt;/code&gt;&lt;/a&gt; which does this for you -- just include it in a single(!) source file in your project. In C++, mimalloc also provides the &lt;code&gt;mi_stl_allocator&lt;/code&gt; struct which implements the &lt;code&gt;std::allocator&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;You can pass environment variables to print verbose messages (&lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt;) and statistics (&lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;) (in the debug version):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_SHOW_STATS=1 ./cfrac 175451865205073170563711388363&#xA;&#xA;175451865205073170563711388363 = 374456281610909315237213 * 468551&#xA;&#xA;heap stats:     peak      total      freed       unit&#xA;normal   2:    16.4 kb    17.5 mb    17.5 mb      16 b   ok&#xA;normal   3:    16.3 kb    15.2 mb    15.2 mb      24 b   ok&#xA;normal   4:      64 b      4.6 kb     4.6 kb      32 b   ok&#xA;normal   5:      80 b    118.4 kb   118.4 kb      40 b   ok&#xA;normal   6:      48 b       48 b       48 b       48 b   ok&#xA;normal  17:     960 b      960 b      960 b      320 b   ok&#xA;&#xA;heap stats:     peak      total      freed       unit&#xA;    normal:    33.9 kb    32.8 mb    32.8 mb       1 b   ok&#xA;      huge:       0 b        0 b        0 b        1 b   ok&#xA;     total:    33.9 kb    32.8 mb    32.8 mb       1 b   ok&#xA;malloc requested:         32.8 mb&#xA;&#xA; committed:    58.2 kb    58.2 kb    58.2 kb       1 b   ok&#xA;  reserved:     2.0 mb     2.0 mb     2.0 mb       1 b   ok&#xA;     reset:       0 b        0 b        0 b        1 b   ok&#xA;  segments:       1          1          1&#xA;-abandoned:       0&#xA;     pages:       6          6          6&#xA;-abandoned:       0&#xA;     mmaps:       3&#xA; mmap fast:       0&#xA; mmap slow:       1&#xA;   threads:       0&#xA;   elapsed:     2.022s&#xA;   process: user: 1.781s, system: 0.016s, faults: 756, reclaims: 0, rss: 2.7 mb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above model of using the &lt;code&gt;mi_&lt;/code&gt; prefixed API is not always possible though in existing programs that already use the standard malloc interface, and another option is to override the standard malloc interface completely and redirect all calls to the &lt;em&gt;mimalloc&lt;/em&gt; library instead .&lt;/p&gt; &#xA;&lt;h2&gt;Environment Options&lt;/h2&gt; &#xA;&lt;p&gt;You can set further options either programmatically (using &lt;a href=&#34;https://microsoft.github.io/mimalloc/group__options.html&#34;&gt;&lt;code&gt;mi_option_set&lt;/code&gt;&lt;/a&gt;), or via environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;: show statistics when the program terminates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt;: show verbose messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_SHOW_ERRORS=1&lt;/code&gt;: show error and warning messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advanced options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_PURGE_DELAY=N&lt;/code&gt;: the delay in &lt;code&gt;N&lt;/code&gt; milli-seconds (by default &lt;code&gt;10&lt;/code&gt;) after which mimalloc will purge OS pages that are not in use. This signals to the OS that the underlying physical memory can be reused which can reduce memory fragmentation especially in long running (server) programs. Setting &lt;code&gt;N&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; purges immediately when a page becomes unused which can improve memory usage but also decreases performance. Setting &lt;code&gt;N&lt;/code&gt; to a higher value like &lt;code&gt;100&lt;/code&gt; can improve performance (sometimes by a lot) at the cost of potentially using more memory at times. Setting it to &lt;code&gt;-1&lt;/code&gt; disables purging completely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_ARENA_EAGER_COMMIT=1&lt;/code&gt;: turns on eager commit for the large arenas (usually 1GiB) from which mimalloc allocates segments and pages. This is by default only enabled on overcommit systems (e.g. Linux) but enabling it explicitly on other systems (like Windows or macOS) may improve performance. Note that eager commit only increases the commit but not the actual the peak resident set (rss) so it is generally ok to enable this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Further options for large workloads and services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_USE_NUMA_NODES=N&lt;/code&gt;: pretend there are at most &lt;code&gt;N&lt;/code&gt; NUMA nodes. If not set, the actual NUMA nodes are detected at runtime. Setting &lt;code&gt;N&lt;/code&gt; to 1 may avoid problems in some virtual environments. Also, setting it to a lower number than the actual NUMA nodes is fine and will only cause threads to potentially allocate more memory across actual NUMA nodes (but this can happen in any case as NUMA local allocation is always a best effort but not guaranteed).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_ALLOW_LARGE_OS_PAGES=1&lt;/code&gt;: use large OS pages (2MiB) when available; for some workloads this can significantly improve performance. Use &lt;code&gt;MIMALLOC_VERBOSE&lt;/code&gt; to check if the large OS pages are enabled -- usually one needs to explicitly allow large OS pages (as on &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows?view=sql-server-2017&#34;&gt;Windows&lt;/a&gt; and &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/tuning_and_optimizing_red_hat_enterprise_linux_for_oracle_9i_and_10g_databases/sect-oracle_9i_and_10g_tuning_guide-large_memory_optimization_big_pages_and_huge_pages-configuring_huge_pages_in_red_hat_enterprise_linux_4_or_5&#34;&gt;Linux&lt;/a&gt;). However, sometimes the OS is very slow to reserve contiguous physical memory for large OS pages so use with care on systems that can have fragmented memory (for that reason, we generally recommend to use &lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES&lt;/code&gt; instead whenever possible).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES=N&lt;/code&gt;: where &lt;code&gt;N&lt;/code&gt; is the number of 1GiB &lt;em&gt;huge&lt;/em&gt; OS pages. This reserves the huge pages at startup and sometimes this can give a large (latency) performance improvement on big workloads. Usually it is better to not use &lt;code&gt;MIMALLOC_ALLOW_LARGE_OS_PAGES=1&lt;/code&gt; in combination with this setting. Just like large OS pages, use with care as reserving contiguous physical memory can take a long time when memory is fragmented (but reserving the huge pages is done at startup only once). Note that we usually need to explicitly enable huge OS pages (as on &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows?view=sql-server-2017&#34;&gt;Windows&lt;/a&gt; and &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/tuning_and_optimizing_red_hat_enterprise_linux_for_oracle_9i_and_10g_databases/sect-oracle_9i_and_10g_tuning_guide-large_memory_optimization_big_pages_and_huge_pages-configuring_huge_pages_in_red_hat_enterprise_linux_4_or_5&#34;&gt;Linux&lt;/a&gt;)). With huge OS pages, it may be beneficial to set the setting &lt;code&gt;MIMALLOC_EAGER_COMMIT_DELAY=N&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt; is 1 by default) to delay the initial &lt;code&gt;N&lt;/code&gt; segments (of 4MiB) of a thread to not allocate in the huge OS pages; this prevents threads that are short lived and allocate just a little to take up space in the huge OS page area (which cannot be purged). The huge pages are usually allocated evenly among NUMA nodes. We can use &lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES_AT=N&lt;/code&gt; where &lt;code&gt;N&lt;/code&gt; is the numa node (starting at 0) to allocate all the huge pages at a specific numa node instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use caution when using &lt;code&gt;fork&lt;/code&gt; in combination with either large or huge OS pages: on a fork, the OS uses copy-on-write for all pages in the original process including the huge OS pages. When any memory is now written in that area, the OS will copy the entire 1GiB huge page (or 2MiB large page) which can cause the memory usage to grow in large increments.&lt;/p&gt; &#xA;&lt;h2&gt;Secure Mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;mimalloc&lt;/em&gt; can be build in secure mode by using the &lt;code&gt;-DMI_SECURE=ON&lt;/code&gt; flags in &lt;code&gt;cmake&lt;/code&gt;. This build enables various mitigations to make mimalloc more robust against exploits. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All internal mimalloc pages are surrounded by guard pages and the heap metadata is behind a guard page as well (so a buffer overflow exploit cannot reach into the metadata).&lt;/li&gt; &#xA; &lt;li&gt;All free list pointers are &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/783e3377f79ee82af43a0793910a9f2d01ac7863/include/mimalloc-internal.h#L396&#34;&gt;encoded&lt;/a&gt; with per-page keys which is used both to prevent overwrites with a known pointer, as well as to detect heap corruption.&lt;/li&gt; &#xA; &lt;li&gt;Double free&#39;s are detected (and ignored).&lt;/li&gt; &#xA; &lt;li&gt;The free lists are initialized in a random order and allocation randomly chooses between extension and reuse within a page to mitigate against attacks that rely on a predicable allocation order. Similarly, the larger heap blocks allocated by mimalloc from the OS are also address randomized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As always, evaluate with care as part of an overall security strategy as all of the above are mitigations but not guarantees.&lt;/p&gt; &#xA;&lt;h2&gt;Debug Mode&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;em&gt;mimalloc&lt;/em&gt; is built using debug mode, various checks are done at runtime to catch development errors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Statistics are maintained in detail for each object size. They can be shown using &lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt; at runtime.&lt;/li&gt; &#xA; &lt;li&gt;All objects have padding at the end to detect (byte precise) heap block overflows.&lt;/li&gt; &#xA; &lt;li&gt;Double free&#39;s, and freeing invalid heap pointers are detected.&lt;/li&gt; &#xA; &lt;li&gt;Corrupted free-lists and some forms of use-after-free are detected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overriding Standard Malloc&lt;/h1&gt; &#xA;&lt;p&gt;Overriding the standard &lt;code&gt;malloc&lt;/code&gt; (and &lt;code&gt;new&lt;/code&gt;) can be done either &lt;em&gt;dynamically&lt;/em&gt; or &lt;em&gt;statically&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic override&lt;/h2&gt; &#xA;&lt;p&gt;This is the recommended way to override the standard malloc interface.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Override on Linux, BSD&lt;/h3&gt; &#xA;&lt;p&gt;On these ELF-based systems we preload the mimalloc shared library so all calls to the standard &lt;code&gt;malloc&lt;/code&gt; interface are resolved to the &lt;em&gt;mimalloc&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env LD_PRELOAD=/usr/lib/libmimalloc.so myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set extra environment variables to check that mimalloc is running, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_VERBOSE=1 LD_PRELOAD=/usr/lib/libmimalloc.so myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or run with the debug version to get detailed statistics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_SHOW_STATS=1 LD_PRELOAD=/usr/lib/libmimalloc-debug.so myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Override on MacOS&lt;/h3&gt; &#xA;&lt;p&gt;On macOS we can also preload the mimalloc shared library so all calls to the standard &lt;code&gt;malloc&lt;/code&gt; interface are resolved to the &lt;em&gt;mimalloc&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env DYLD_INSERT_LIBRARIES=/usr/lib/libmimalloc.dylib myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that certain security restrictions may apply when doing this from the &lt;a href=&#34;https://stackoverflow.com/questions/43941322/dyld-insert-libraries-ignored-when-calling-application-through-bash&#34;&gt;shell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Override on Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span id=&#34;override_on_windows&#34;&gt;Overriding on Windows&lt;/span&gt; is robust and has the particular advantage to be able to redirect all malloc/free calls that go through the (dynamic) C runtime allocator, including those from other DLL&#39;s or libraries.&lt;/p&gt; &#xA;&lt;p&gt;The overriding on Windows requires that you link your program explicitly with the mimalloc DLL and use the C-runtime library as a DLL (using the &lt;code&gt;/MD&lt;/code&gt; or &lt;code&gt;/MDd&lt;/code&gt; switch). Also, the &lt;code&gt;mimalloc-redirect.dll&lt;/code&gt; (or &lt;code&gt;mimalloc-redirect32.dll&lt;/code&gt;) must be put in the same folder as the main &lt;code&gt;mimalloc-override.dll&lt;/code&gt; at runtime (as it is a dependency). The redirection DLL ensures that all calls to the C runtime malloc API get redirected to mimalloc (in &lt;code&gt;mimalloc-override.dll&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To ensure the mimalloc DLL is loaded at run-time it is easiest to insert some call to the mimalloc API in the &lt;code&gt;main&lt;/code&gt; function, like &lt;code&gt;mi_version()&lt;/code&gt; (or use the &lt;code&gt;/INCLUDE:mi_version&lt;/code&gt; switch on the linker). See the &lt;code&gt;mimalloc-override-test&lt;/code&gt; project for an example on how to use this. For best performance on Windows with C++, it is also recommended to also override the &lt;code&gt;new&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt; operations (by including &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc-new-delete.h&#34;&gt;&lt;code&gt;mimalloc-new-delete.h&lt;/code&gt;&lt;/a&gt; a single(!) source file in your project).&lt;/p&gt; &#xA;&lt;p&gt;The environment variable &lt;code&gt;MIMALLOC_DISABLE_REDIRECT=1&lt;/code&gt; can be used to disable dynamic overriding at run-time. Use &lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt; to check if mimalloc was successfully redirected.&lt;/p&gt; &#xA;&lt;p&gt;(Note: in principle, it is possible to even patch existing executables without any recompilation if they are linked with the dynamic C runtime (&lt;code&gt;ucrtbase.dll&lt;/code&gt;) -- just put the &lt;code&gt;mimalloc-override.dll&lt;/code&gt; into the import table (and put &lt;code&gt;mimalloc-redirect.dll&lt;/code&gt; in the same folder) Such patching can be done for example with &lt;a href=&#34;https://ntcore.com/?page_id=388&#34;&gt;CFF Explorer&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Static override&lt;/h2&gt; &#xA;&lt;p&gt;On Unix-like systems, you can also statically link with &lt;em&gt;mimalloc&lt;/em&gt; to override the standard malloc interface. The recommended way is to link the final program with the &lt;em&gt;mimalloc&lt;/em&gt; single object file (&lt;code&gt;mimalloc.o&lt;/code&gt;). We use an object file instead of a library file as linkers give preference to that over archives to resolve symbols. To ensure that the standard malloc interface resolves to the &lt;em&gt;mimalloc&lt;/em&gt; library, link it as the first object file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; gcc -o myprogram mimalloc.o  myfile1.c ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to override statically that works on all platforms, is to link statically to mimalloc (as shown in the introduction) and include a header file in each source file that re-defines &lt;code&gt;malloc&lt;/code&gt; etc. to &lt;code&gt;mi_malloc&lt;/code&gt;. This is provided by &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc-override.h&#34;&gt;&lt;code&gt;mimalloc-override.h&lt;/code&gt;&lt;/a&gt;. This only works reliably though if all sources are under your control or otherwise mixing of pointers from different heaps may occur!&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;Generally, we recommend using the standard allocator with memory tracking tools, but mimalloc can also be build to support the &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizer&#34;&gt;address sanitizer&lt;/a&gt; or the excellent &lt;a href=&#34;https://valgrind.org/&#34;&gt;Valgrind&lt;/a&gt; tool. Moreover, it can be build to support Windows event tracing (&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/test/wpt/event-tracing-for-windows&#34;&gt;ETW&lt;/a&gt;). This has a small performance overhead but does allow detecting memory leaks and byte-precise buffer overflows directly on final executables. See also the &lt;code&gt;test/test-wrong.c&lt;/code&gt; file to test with various tools.&lt;/p&gt; &#xA;&lt;h3&gt;Valgrind&lt;/h3&gt; &#xA;&lt;p&gt;To build with &lt;a href=&#34;https://valgrind.org/&#34;&gt;valgrind&lt;/a&gt; support, use the &lt;code&gt;MI_TRACK_VALGRIND=ON&lt;/code&gt; cmake option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -DMI_TRACK_VALGRIND=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be combined with secure mode or debug mode. You can then run your programs directly under valgrind:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; valgrind &amp;lt;myprogram&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you rely on overriding &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt; by mimalloc (instead of using the &lt;code&gt;mi_malloc&lt;/code&gt;/&lt;code&gt;mi_free&lt;/code&gt; API directly), you also need to tell &lt;code&gt;valgrind&lt;/code&gt; to not intercept those calls itself, and use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; MIMALLOC_SHOW_STATS=1 valgrind  --soname-synonyms=somalloc=*mimalloc* -- &amp;lt;myprogram&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting the &lt;code&gt;MIMALLOC_SHOW_STATS&lt;/code&gt; environment variable you can check that mimalloc is indeed used and not the standard allocator. Even though the &lt;a href=&#34;https://valgrind.org/docs/manual/manual-core.html#opt.soname-synonyms&#34;&gt;Valgrind option&lt;/a&gt; is called &lt;code&gt;--soname-synonyms&lt;/code&gt;, this also works when overriding with a static library or object file. Unfortunately, it is not possible to dynamically override mimalloc using &lt;code&gt;LD_PRELOAD&lt;/code&gt; together with &lt;code&gt;valgrind&lt;/code&gt;. See also the &lt;code&gt;test/test-wrong.c&lt;/code&gt; file to test with &lt;code&gt;valgrind&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Valgrind support is in its initial development -- please report any issues.&lt;/p&gt; &#xA;&lt;h3&gt;ASAN&lt;/h3&gt; &#xA;&lt;p&gt;To build with the address sanitizer, use the &lt;code&gt;-DMI_TRACK_ASAN=ON&lt;/code&gt; cmake option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -DMI_TRACK_ASAN=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be combined with secure mode or debug mode. You can then run your programs as:&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; ASAN_OPTIONS=verbosity=1 &amp;lt;myprogram&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you link a program with an address sanitizer build of mimalloc, you should generally compile that program too with the address sanitizer enabled. For example, assuming you build mimalloc in &lt;code&gt;out/debug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang -g -o test-wrong -Iinclude test/test-wrong.c out/debug/libmimalloc-asan-debug.a -lpthread -fsanitize=address -fsanitize-recover=address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the address sanitizer redirects the standard allocation functions, on some platforms (macOSX for example) it is required to compile mimalloc with &lt;code&gt;-DMI_OVERRIDE=OFF&lt;/code&gt;. Adress sanitizer support is in its initial development -- please report any issues.&lt;/p&gt; &#xA;&lt;h3&gt;ETW&lt;/h3&gt; &#xA;&lt;p&gt;Event tracing for Windows (&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/test/wpt/event-tracing-for-windows&#34;&gt;ETW&lt;/a&gt;) provides a high performance way to capture all allocations though mimalloc and analyze them later. To build with ETW support, use the &lt;code&gt;-DMI_TRACK_ETW=ON&lt;/code&gt; cmake option.&lt;/p&gt; &#xA;&lt;p&gt;You can then capture an allocation trace using the Windows performance recorder (WPR), using the &lt;code&gt;src/prim/windows/etw-mimalloc.wprp&lt;/code&gt; profile. In an admin prompt, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; wpr -start src\prim\windows\etw-mimalloc.wprp -filemode&#xA;&amp;gt; &amp;lt;my_mimalloc_program&amp;gt;&#xA;&amp;gt; wpr -stop &amp;lt;my_mimalloc_program&amp;gt;.etl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then open &lt;code&gt;&amp;lt;my_mimalloc_program&amp;gt;.etl&lt;/code&gt; in the Windows Performance Analyzer (WPA), or use a tool like &lt;a href=&#34;https://github.com/xinglonghe/TraceControl&#34;&gt;TraceControl&lt;/a&gt; that is specialized for analyzing mimalloc traces.&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Last update: 2021-01-30&lt;/p&gt; &#xA;&lt;p&gt;We tested &lt;em&gt;mimalloc&lt;/em&gt; against many other top allocators over a wide range of benchmarks, ranging from various real world programs to synthetic benchmarks that see how the allocator behaves under more extreme circumstances. In our benchmark suite, &lt;em&gt;mimalloc&lt;/em&gt; outperforms other leading allocators (&lt;em&gt;jemalloc&lt;/em&gt;, &lt;em&gt;tcmalloc&lt;/em&gt;, &lt;em&gt;Hoard&lt;/em&gt;, etc), and has a similar memory footprint. A nice property is that it does consistently well over the wide range of benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;General memory allocators are interesting as there exists no algorithm that is optimal -- for a given allocator one can usually construct a workload where it does not do so well. The goal is thus to find an allocation strategy that performs well over a wide range of benchmarks without suffering from (too much) underperformance in less common situations.&lt;/p&gt; &#xA;&lt;p&gt;As always, interpret these results with care since some benchmarks test synthetic or uncommon situations that may never apply to your workloads. For example, most allocators do not do well on &lt;code&gt;xmalloc-testN&lt;/code&gt; but that includes even the best industrial allocators like &lt;em&gt;jemalloc&lt;/em&gt; and &lt;em&gt;tcmalloc&lt;/em&gt; that are used in some of the world&#39;s largest systems (like Chrome or FreeBSD).&lt;/p&gt; &#xA;&lt;p&gt;Also, the benchmarks here do not measure the behaviour on very large and long-running server workloads, or worst-case latencies of allocation. Much work has gone into &lt;code&gt;mimalloc&lt;/code&gt; to work well on such workloads (for example, to reduce virtual memory fragmentation on long-running services) but such optimizations are not always reflected in the current benchmark suite.&lt;/p&gt; &#xA;&lt;p&gt;We show here only an overview -- for more specific details and further benchmarks we refer to the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action&#34;&gt;technical report&lt;/a&gt;. The benchmark suite is automated and available separately as &lt;a href=&#34;https://github.com/daanx/mimalloc-bench&#34;&gt;mimalloc-bench&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark Results on a 16-core AMD 5950x (Zen3)&lt;/h2&gt; &#xA;&lt;p&gt;Testing on the 16-core AMD 5950x processor at 3.4Ghz (4.9Ghz boost), with with 32GiB memory at 3600Mhz, running Ubuntu 20.04 with glibc 2.31 and GCC 9.3.0.&lt;/p&gt; &#xA;&lt;p&gt;We measure three versions of &lt;em&gt;mimalloc&lt;/em&gt;: the main version &lt;code&gt;mi&lt;/code&gt; (tag:v1.7.0), the new v2.0 beta version as &lt;code&gt;xmi&lt;/code&gt; (tag:v2.0.0), and the main version in secure mode as &lt;code&gt;smi&lt;/code&gt; (tag:v1.7.0).&lt;/p&gt; &#xA;&lt;p&gt;The other allocators are Google&#39;s &lt;a href=&#34;https://github.com/gperftools/gperftools&#34;&gt;&lt;em&gt;tcmalloc&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;tc&lt;/code&gt;, tag:gperftools-2.8.1) used in Chrome, Facebook&#39;s &lt;a href=&#34;https://github.com/jemalloc/jemalloc&#34;&gt;&lt;em&gt;jemalloc&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;je&lt;/code&gt;, tag:5.2.1) by Jason Evans used in Firefox and FreeBSD, the Intel thread building blocks &lt;a href=&#34;https://github.com/intel/tbb&#34;&gt;allocator&lt;/a&gt; (&lt;code&gt;tbb&lt;/code&gt;, tag:v2020.3), &lt;a href=&#34;https://github.com/mjansson/rpmalloc&#34;&gt;rpmalloc&lt;/a&gt; (&lt;code&gt;rp&lt;/code&gt;,tag:1.4.1) by Mattias Jansson, the original scalable &lt;a href=&#34;https://github.com/emeryberger/Hoard&#34;&gt;&lt;em&gt;Hoard&lt;/em&gt;&lt;/a&gt; (git:d880f72) allocator by Emery Berger [1], the memory compacting &lt;a href=&#34;https://github.com/plasma-umass/Mesh&#34;&gt;&lt;em&gt;Mesh&lt;/em&gt;&lt;/a&gt; (git:67ff31a) allocator by Bobby Powers &lt;em&gt;et al&lt;/em&gt; [8], and finally the default system allocator (&lt;code&gt;glibc&lt;/code&gt;, 2.31) (based on &lt;em&gt;PtMalloc2&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/bench-2021/bench-amd5950x-2021-01-30-a.svg?sanitize=true&#34;&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/bench-2021/bench-amd5950x-2021-01-30-b.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;Any benchmarks ending in &lt;code&gt;N&lt;/code&gt; run on all 32 logical cores in parallel. Results are averaged over 10 runs and reported relative to mimalloc (where 1.2 means it took 1.2√ó longer to run). The legend also contains the &lt;em&gt;overall relative score&lt;/em&gt; between the allocators where 100 points is the maximum if an allocator is fastest on all benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;The single threaded &lt;em&gt;cfrac&lt;/em&gt; benchmark by Dave Barrett is an implementation of continued fraction factorization which uses many small short-lived allocations. All allocators do well on such common usage, where &lt;em&gt;mimalloc&lt;/em&gt; is just a tad faster than &lt;em&gt;tcmalloc&lt;/em&gt; and &lt;em&gt;jemalloc&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;leanN&lt;/em&gt; program is interesting as a large realistic and concurrent workload of the &lt;a href=&#34;https://github.com/leanprover/lean&#34;&gt;Lean&lt;/a&gt; theorem prover compiling its own standard library, and there is a 13% speedup over &lt;em&gt;tcmalloc&lt;/em&gt;. This is quite significant: if Lean spends 20% of its time in the allocator that means that &lt;em&gt;mimalloc&lt;/em&gt; is 1.6√ó faster than &lt;em&gt;tcmalloc&lt;/em&gt; here. (This is surprising as that is not measured in a pure allocation benchmark like &lt;em&gt;alloc-test&lt;/em&gt;. We conjecture that we see this outsized improvement here because &lt;em&gt;mimalloc&lt;/em&gt; has better locality in the allocation which improves performance for the &lt;em&gt;other&lt;/em&gt; computations in a program as well).&lt;/p&gt; &#xA;&lt;p&gt;The single threaded &lt;em&gt;redis&lt;/em&gt; benchmark again show that most allocators do well on such workloads.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;larsonN&lt;/em&gt; server benchmark by Larson and Krishnan [2] allocates and frees between threads. They observed this behavior (which they call &lt;em&gt;bleeding&lt;/em&gt;) in actual server applications, and the benchmark simulates this. Here, &lt;em&gt;mimalloc&lt;/em&gt; is quite a bit faster than &lt;em&gt;tcmalloc&lt;/em&gt; and &lt;em&gt;jemalloc&lt;/em&gt; probably due to the object migration between different threads.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;mstressN&lt;/em&gt; workload performs many allocations and re-allocations, and migrates objects between threads (as in &lt;em&gt;larsonN&lt;/em&gt;). However, it also creates and destroys the &lt;em&gt;N&lt;/em&gt; worker threads a few times keeping some objects alive beyond the life time of the allocating thread. We observed this behavior in many larger server applications.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/mjansson/rpmalloc-benchmark&#34;&gt;&lt;em&gt;rptestN&lt;/em&gt;&lt;/a&gt; benchmark by Mattias Jansson is a allocator test originally designed for &lt;em&gt;rpmalloc&lt;/em&gt;, and tries to simulate realistic allocation patterns over multiple threads. Here the differences between allocators become more apparent.&lt;/p&gt; &#xA;&lt;p&gt;The second benchmark set tests specific aspects of the allocators and shows even more extreme differences between them.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;alloc-test&lt;/em&gt;, by &lt;a href=&#34;http://ithare.com/testing-memory-allocators-ptmalloc2-tcmalloc-hoard-jemalloc-while-trying-to-simulate-real-world-loads/&#34;&gt;OLogN Technologies AG&lt;/a&gt;, is a very allocation intensive benchmark doing millions of allocations in various size classes. The test is scaled such that when an allocator performs almost identically on &lt;em&gt;alloc-test1&lt;/em&gt; as &lt;em&gt;alloc-testN&lt;/em&gt; it means that it scales linearly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;sh6bench&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; benchmarks are developed by &lt;a href=&#34;http://www.microquill.com/&#34;&gt;MicroQuill&lt;/a&gt; as part of SmartHeap. In &lt;em&gt;sh6bench&lt;/em&gt; &lt;em&gt;mimalloc&lt;/em&gt; does much better than the others (more than 2.5√ó faster than &lt;em&gt;jemalloc&lt;/em&gt;). We cannot explain this well but believe it is caused in part by the &#34;reverse&#34; free-ing pattern in &lt;em&gt;sh6bench&lt;/em&gt;. The &lt;em&gt;sh8bench&lt;/em&gt; is a variation with object migration between threads; whereas &lt;em&gt;tcmalloc&lt;/em&gt; did well on &lt;em&gt;sh6bench&lt;/em&gt;, the addition of object migration causes it to be 10√ó slower than before.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;xmalloc-testN&lt;/em&gt; benchmark by Lever and Boreham [5] and Christian Eder, simulates an asymmetric workload where some threads only allocate, and others only free -- they observed this pattern in larger server applications. Here we see that the &lt;em&gt;mimalloc&lt;/em&gt; technique of having non-contended sharded thread free lists pays off as it outperforms others by a very large margin. Only &lt;em&gt;rpmalloc&lt;/em&gt;, &lt;em&gt;tbb&lt;/em&gt;, and &lt;em&gt;glibc&lt;/em&gt; also scale well on this benchmark.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;cache-scratch&lt;/em&gt; benchmark by Emery Berger [1], and introduced with the Hoard allocator to test for &lt;em&gt;passive-false&lt;/em&gt; sharing of cache lines. With a single thread they all perform the same, but when running with multiple threads the potential allocator induced false sharing of the cache lines can cause large run-time differences. Crundal [6] describes in detail why the false cache line sharing occurs in the &lt;em&gt;tcmalloc&lt;/em&gt; design, and also discusses how this can be avoided with some small implementation changes. Only the &lt;em&gt;tbb&lt;/em&gt;, &lt;em&gt;rpmalloc&lt;/em&gt; and &lt;em&gt;mesh&lt;/em&gt; allocators also avoid the cache line sharing completely, while &lt;em&gt;Hoard&lt;/em&gt; and &lt;em&gt;glibc&lt;/em&gt; seem to mitigate the effects. Kukanov and Voss [7] describe in detail how the design of &lt;em&gt;tbb&lt;/em&gt; avoids the false cache line sharing.&lt;/p&gt; &#xA;&lt;h2&gt;On a 36-core Intel Xeon&lt;/h2&gt; &#xA;&lt;p&gt;For completeness, here are the results on a big Amazon &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/#Compute_Optimized&#34;&gt;c5.18xlarge&lt;/a&gt; instance consisting of a 2√ó18-core Intel Xeon (Cascade Lake) at 3.4GHz (boost 3.5GHz) with 144GiB ECC memory, running Ubuntu 20.04 with glibc 2.31, GCC 9.3.0, and Clang 10.0.0. This time, the mimalloc allocators (mi, xmi, and smi) were compiled with the Clang compiler instead of GCC. The results are similar to the AMD results but it is interesting to see the differences in the &lt;em&gt;larsonN&lt;/em&gt;, &lt;em&gt;mstressN&lt;/em&gt;, and &lt;em&gt;xmalloc-testN&lt;/em&gt; benchmarks.&lt;/p&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/bench-2021/bench-c5-18xlarge-2021-01-30-a.svg?sanitize=true&#34;&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/bench-2021/bench-c5-18xlarge-2021-01-30-b.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;Peak Working Set&lt;/h2&gt; &#xA;&lt;p&gt;The following figure shows the peak working set (rss) of the allocators on the benchmarks (on the c5.18xlarge instance).&lt;/p&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/bench-2021/bench-c5-18xlarge-2021-01-30-rss-a.svg?sanitize=true&#34;&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/master/doc/bench-2021/bench-c5-18xlarge-2021-01-30-rss-b.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;Note that the &lt;em&gt;xmalloc-testN&lt;/em&gt; memory usage should be disregarded as it allocates more the faster the program runs. Similarly, memory usage of &lt;em&gt;larsonN&lt;/em&gt;, &lt;em&gt;mstressN&lt;/em&gt;, &lt;em&gt;rptestN&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; can vary depending on scheduling and speed. Nevertheless, we hope to improve the memory usage on &lt;em&gt;mstressN&lt;/em&gt; and &lt;em&gt;rptestN&lt;/em&gt; (just as &lt;em&gt;cfrac&lt;/em&gt;, &lt;em&gt;larsonN&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; have a small working set which skews the results).&lt;/p&gt; &#xA;&lt;!--&#xA;# Previous Benchmarks&#xA;&#xA;Todo: should we create a separate page for this?&#xA;&#xA;## Benchmark Results on 36-core Intel: 2020-01-20&#xA;&#xA;Testing on a big Amazon EC2 compute instance&#xA;([c5.18xlarge](https://aws.amazon.com/ec2/instance-types/#Compute_Optimized))&#xA;consisting of a 72 processor Intel Xeon at 3GHz&#xA;with 144GiB ECC memory, running&#x9;Ubuntu 18.04.1 with glibc 2.27 and GCC 7.4.0.&#xA;The measured allocators are _mimalloc_ (xmi, tag:v1.4.0, page reset enabled)&#xA;and its secure build as _smi_,&#xA;Google&#39;s [_tcmalloc_](https://github.com/gperftools/gperftools) (tc, tag:gperftools-2.7) used in Chrome,&#xA;Facebook&#39;s [_jemalloc_](https://github.com/jemalloc/jemalloc) (je, tag:5.2.1) by Jason Evans used in Firefox and FreeBSD,&#xA;the Intel thread building blocks [allocator](https://github.com/intel/tbb) (tbb, tag:2020),&#xA;[rpmalloc](https://github.com/mjansson/rpmalloc) (rp,tag:1.4.0) by Mattias Jansson,&#xA;the original scalable [_Hoard_](https://github.com/emeryberger/Hoard) (tag:3.13) allocator by Emery Berger \[1],&#xA;the memory compacting [_Mesh_](https://github.com/plasma-umass/Mesh) (git:51222e7) allocator by&#xA;Bobby Powers _et al_ \[8],&#xA;and finally the default system allocator (glibc, 2.27) (based on _PtMalloc2_).&#xA;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-a.svg&#34;/&gt;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-b.svg&#34;/&gt;&#xA;&#xA;The following figure shows the peak working set (rss) of the allocators&#xA;on the benchmarks (on the c5.18xlarge instance).&#xA;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-rss-a.svg&#34;/&gt;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-rss-b.svg&#34;/&gt;&#xA;&#xA;&#xA;## On 24-core AMD Epyc, 2020-01-16&#xA;&#xA;For completeness, here are the results on a&#xA;[r5a.12xlarge](https://aws.amazon.com/ec2/instance-types/#Memory_Optimized) instance&#xA;having a 48 processor AMD Epyc 7000 at 2.5GHz with 384GiB of memory.&#xA;The results are similar to the Intel results but it is interesting to&#xA;see the differences in the _larsonN_, _mstressN_, and _xmalloc-testN_ benchmarks.&#xA;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-r5a-12xlarge-2020-01-16-a.svg&#34;/&gt;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-r5a-12xlarge-2020-01-16-b.svg&#34;/&gt;&#xA;&#xA;--&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[1] Emery D. Berger, Kathryn S. McKinley, Robert D. Blumofe, and Paul R. Wilson. &lt;em&gt;Hoard: A Scalable Memory Allocator for Multithreaded Applications&lt;/em&gt; the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-IX). Cambridge, MA, November 2000. &lt;a href=&#34;http://www.cs.utexas.edu/users/mckinley/papers/asplos-2000.pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[2] P. Larson and M. Krishnan. &lt;em&gt;Memory allocation for long-running server applications&lt;/em&gt;. In ISMM, Vancouver, B.C., Canada, 1998. &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.45.1947&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[3] D. Grunwald, B. Zorn, and R. Henderson. &lt;em&gt;Improving the cache locality of memory allocation&lt;/em&gt;. In R. Cartwright, editor, Proceedings of the Conference on Programming Language Design and Implementation, pages 177‚Äì186, New York, NY, USA, June 1993. &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.43.6621&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[4] J. Barnes and P. Hut. &lt;em&gt;A hierarchical O(n*log(n)) force-calculation algorithm&lt;/em&gt;. Nature, 324:446-449, 1986.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[5] C. Lever, and D. Boreham. &lt;em&gt;Malloc() Performance in a Multithreaded Linux Environment.&lt;/em&gt; In USENIX Annual Technical Conference, Freenix Session. San Diego, CA. Jun. 2000. Available at &lt;a href=&#34;https://github.com/kuszmaul/SuperMalloc/tree/master/tests&#34;&gt;https://github.com/kuszmaul/SuperMalloc/tree/master/tests&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[6] Timothy Crundal. &lt;em&gt;Reducing Active-False Sharing in TCMalloc&lt;/em&gt;. 2016. CS16S1 project at the Australian National University. &lt;a href=&#34;http://courses.cecs.anu.edu.au/courses/CSPROJECTS/16S1/Reports/Timothy_Crundal_Report.pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[7] Alexey Kukanov, and Michael J Voss. &lt;em&gt;The Foundations for Scalable Multi-Core Software in Intel Threading Building Blocks.&lt;/em&gt; Intel Technology Journal 11 (4). 2007&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[8] Bobby Powers, David Tench, Emery D. Berger, and Andrew McGregor. &lt;em&gt;Mesh: Compacting Memory Management for C/C++&lt;/em&gt; In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI&#39;19), June 2019, pages 333-‚Äì346.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;- \[9] Paul Li√©tar, Theodore Butler, Sylvan Clebsch, Sophia Drossopoulou, Juliana Franco, Matthew J Parkinson,&#xA;  Alex Shamis, Christoph M Wintersteiger, and David Chisnall.&#xA;  _Snmalloc: A Message Passing Allocator._&#xA;  In Proceedings of the 2019 ACM SIGPLAN International Symposium on Memory Management, 122‚Äì135. ACM. 2019.&#xA;--&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;h1&gt;Older Release Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-11-14, &lt;code&gt;v1.7.3&lt;/code&gt;, &lt;code&gt;v2.0.3&lt;/code&gt; (beta): improved WASM support, improved macOS support and performance (including M1), improved performance for v2 for large objects, Python integration improvements, more standard installation directories, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-06-17, &lt;code&gt;v1.7.2&lt;/code&gt;, &lt;code&gt;v2.0.2&lt;/code&gt; (beta): support M1, better installation layout on Linux, fix thread_id on Android, prefer 2-6TiB area for aligned allocation to work better on pre-windows 8, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-04-06, &lt;code&gt;v1.7.1&lt;/code&gt;, &lt;code&gt;v2.0.1&lt;/code&gt; (beta): fix bug in arena allocation for huge pages, improved aslr on large allocations, initial M1 support (still experimental).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-01-31, &lt;code&gt;v2.0.0&lt;/code&gt;: beta release 2.0: new slice algorithm for managing internal mimalloc pages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-01-31, &lt;code&gt;v1.7.0&lt;/code&gt;: stable release 1.7: support explicit user provided memory regions, more precise statistics, improve macOS overriding, initial support for Apple M1, improved DragonFly support, faster memcpy on Windows, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-09-24, &lt;code&gt;v1.6.7&lt;/code&gt;: stable release 1.6: using standard C atomics, passing tsan testing, improved handling of failing to commit on Windows, add &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc.h#L156&#34;&gt;&lt;code&gt;mi_process_info&lt;/code&gt;&lt;/a&gt; api call.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-08-06, &lt;code&gt;v1.6.4&lt;/code&gt;: stable release 1.6: improved error recovery in low-memory situations, support for IllumOS and Haiku, NUMA support for Vista/XP, improved NUMA detection for AMD Ryzen, ubsan support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-05-05, &lt;code&gt;v1.6.3&lt;/code&gt;: stable release 1.6: improved behavior in out-of-memory situations, improved malloc zones on macOS, build PIC static libraries by default, add option to abort on out-of-memory, line buffered statistics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-04-20, &lt;code&gt;v1.6.2&lt;/code&gt;: stable release 1.6: fix compilation on Android, MingW, Raspberry, and Conda, stability fix for Windows 7, fix multiple mimalloc instances in one executable, fix &lt;code&gt;strnlen&lt;/code&gt; overload, fix aligned debug padding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-02-17, &lt;code&gt;v1.6.1&lt;/code&gt;: stable release 1.6: minor updates (build with clang-cl, fix alignment issue for small objects).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-02-09, &lt;code&gt;v1.6.0&lt;/code&gt;: stable release 1.6: fixed potential memory leak, improved overriding and thread local support on FreeBSD, NetBSD, DragonFly, and macOSX. New byte-precise heap block overflow detection in debug mode (besides the double-free detection and free-list corruption detection). Add &lt;code&gt;nodiscard&lt;/code&gt; attribute to most allocation functions. Enable &lt;code&gt;MIMALLOC_PAGE_RESET&lt;/code&gt; by default. New reclamation strategy for abandoned heap pages for better memory footprint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-02-09, &lt;code&gt;v1.5.0&lt;/code&gt;: stable release 1.5: improved free performance, small bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-01-22, &lt;code&gt;v1.4.0&lt;/code&gt;: stable release 1.4: improved performance for delayed OS page reset, more eager concurrent free, addition of STL allocator, fixed potential memory leak.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-01-15, &lt;code&gt;v1.3.0&lt;/code&gt;: stable release 1.3: bug fixes, improved randomness and &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/783e3377f79ee82af43a0793910a9f2d01ac7863/include/mimalloc-internal.h#L396&#34;&gt;stronger free list encoding&lt;/a&gt; in secure mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-12-22, &lt;code&gt;v1.2.2&lt;/code&gt;: stable release 1.2: minor updates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-11-22, &lt;code&gt;v1.2.0&lt;/code&gt;: stable release 1.2: bug fixes, improved secure mode (free list corruption checks, double free mitigation). Improved dynamic overriding on Windows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-10-07, &lt;code&gt;v1.1.0&lt;/code&gt;: stable release 1.1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-09-01, &lt;code&gt;v1.0.8&lt;/code&gt;: pre-release 8: more robust windows dynamic overriding, initial huge page support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-08-10, &lt;code&gt;v1.0.6&lt;/code&gt;: pre-release 6: various performance improvements.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rockchip-linux/rknn-toolkit2</title>
    <updated>2023-12-17T01:51:00Z</updated>
    <id>tag:github.com,2023-12-17:/rockchip-linux/rknn-toolkit2</id>
    <link href="https://github.com/rockchip-linux/rknn-toolkit2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;RKNN software stack can help users to quickly deploy AI models to Rockchip chips. The overall framework is as follows: &lt;/p&gt;&#xA;&lt;center class=&#34;half&#34;&gt; &#xA; &lt;div style=&#34;background-color:#ffffff;&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/rockchip-linux/rknn-toolkit2/master/res/framework.png&#34; title=&#34;RKNN&#34;&gt; &#xA; &lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;In order to use RKNPU, users need to first run the RKNN-Toolkit2 tool on the computer, convert the trained model into an RKNN format model, and then inference on the development board using the RKNN C API or Python API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;RKNN-Toolkit2 is a software development kit for users to perform model conversion, inference and performance evaluation on PC and Rockchip NPU platforms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RKNN-Toolkit-Lite2 provides Python programming interfaces for Rockchip NPU platform to help users deploy RKNN models and accelerate the implementation of AI applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RKNN Runtime provides C/C++ programming interfaces for Rockchip NPU platform to help users deploy RKNN models and accelerate the implementation of AI applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RKNPU kernel driver is responsible for interacting with NPU hardware. It has been open source and can be found in the Rockchip kernel code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support Platform&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RK3566/RK3568 Series&lt;/li&gt; &#xA; &lt;li&gt;RK3588 Series&lt;/li&gt; &#xA; &lt;li&gt;RK3562 Series&lt;/li&gt; &#xA; &lt;li&gt;RV1103/RV1106&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;p&gt;‚Äã &lt;strong&gt;For RK1808/RV1109/RV1126/RK3399Pro, please refer to :&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚Äã &lt;a href=&#34;https://github.com/airockchip/rknn-toolkit&#34;&gt;https://github.com/airockchip/rknn-toolkit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚Äã &lt;a href=&#34;https://github.com/airockchip/rknpu&#34;&gt;https://github.com/airockchip/rknpu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚Äã &lt;a href=&#34;https://github.com/airockchip/RK3399Pro_npu&#34;&gt;https://github.com/airockchip/RK3399Pro_npu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also download all packages, docker image, examples, docs and platform-tools from &lt;a href=&#34;https://console.zbox.filez.com/l/I00fc3&#34;&gt;RKNPU2_SDK&lt;/a&gt;, fetch code: rknn&lt;/li&gt; &#xA; &lt;li&gt;You can get more examples from &lt;a href=&#34;https://github.com/airockchip/rknn_model_zoo&#34;&gt;rknn mode zoo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RKNN-Toolkit2 is not compatible with &lt;a href=&#34;https://github.com/airockchip/rknn-toolkit&#34;&gt;RKNN-Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Currently only support on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu 18.04 python 3.6/3.7&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu 20.04 python 3.8/3.9&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu 22.04 python 3.10/3.11&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Latest version:1.6.0(Release version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;CHANGELOG&lt;/h1&gt; &#xA;&lt;h2&gt;1.6.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support ONNX model of OPSET 12~19&lt;/li&gt; &#xA; &lt;li&gt;Support custom operators (including CPU and GPU)&lt;/li&gt; &#xA; &lt;li&gt;Optimization operators support such as dynamic weighted convolution, Layernorm, RoiAlign, Softmax, ReduceL2, Gelu, GLU, etc.&lt;/li&gt; &#xA; &lt;li&gt;Added support for python3.7/3.9/3.11&lt;/li&gt; &#xA; &lt;li&gt;Add rknn_convert function&lt;/li&gt; &#xA; &lt;li&gt;Optimize transformer support&lt;/li&gt; &#xA; &lt;li&gt;Optimize the MatMul API, such as increasing the K limit length, RK3588 adding int4 * int4 -&amp;gt; int16 support, etc.&lt;/li&gt; &#xA; &lt;li&gt;Optimize RV1106 rknn_init initialization time, memory consumption, etc.&lt;/li&gt; &#xA; &lt;li&gt;RV1106 adds int16 support for some operators&lt;/li&gt; &#xA; &lt;li&gt;Fixed the problem that the convolution operator of RV1106 platform may make random errors in some cases.&lt;/li&gt; &#xA; &lt;li&gt;Optimize user manual&lt;/li&gt; &#xA; &lt;li&gt;Reconstruct the rknn model zoo and add support for multiple models such as detection, segmentation, OCR, and license plate recognition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;for older version, please refer &lt;a href=&#34;https://raw.githubusercontent.com/rockchip-linux/rknn-toolkit2/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Feedback and Community Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redmine.rock-chips.com&#34;&gt;Redmine&lt;/a&gt; (&lt;strong&gt;Feedback recommended, Please consult our sales or FAE for the redmine account&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;QQ Group Chat: 1025468710 (full, please join group 3)&lt;/li&gt; &#xA; &lt;li&gt;QQ Group Chat2: 547021958 (full, please join group 3)&lt;/li&gt; &#xA; &lt;li&gt;QQ Group Chat3: 469385426&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;center class=&#34;half&#34;&gt; &#xA; &lt;img width=&#34;200&#34; height=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/rockchip-linux/rknn-toolkit2/master/res/QQGroupQRCode.png&#34; title=&#34;QQ Group Chat&#34;&gt; &#xA; &lt;img width=&#34;200&#34; height=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/rockchip-linux/rknn-toolkit2/master/res/QQGroup2QRCode.png&#34; title=&#34;QQ Group Chat2&#34;&gt; &#xA; &lt;img width=&#34;200&#34; height=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/rockchip-linux/rknn-toolkit2/master/res/QQGroup3QRCode.png&#34; title=&#34;QQ Group Chat3&#34;&gt; &#xA;&lt;/center&gt;</summary>
  </entry>
</feed>