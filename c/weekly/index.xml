<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:47:41Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shauninman/MinUI</title>
    <updated>2023-11-19T01:47:41Z</updated>
    <id>tag:github.com,2023-11-19:/shauninman/MinUI</id>
    <link href="https://github.com/shauninman/MinUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A custom launcher for the RGB30, Trimui Smart (and Pro), Miyoo Mini(s), and Anbernic RG35XX with more to come...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MinUI&lt;/h1&gt; &#xA;&lt;p&gt;MinUI is a focused, custom launcher and libretro frontend for the RGB30, Trimui Smart (and Pro), Miyoo Mini (and Plus), M17, and Anbernic RG35XX.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shauninman/MinUI/main/github/minui-main.png&#34; width=&#34;320&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shauninman/MinUI/main/github/minui-menu-gbc.png&#34; width=&#34;320&#34;&gt;&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/shauninman/MinUI/main/github/&#34;&gt;more screenshots&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple launcher, simple SD card&lt;/li&gt; &#xA; &lt;li&gt;No settings or configuration&lt;/li&gt; &#xA; &lt;li&gt;No boxart, themes, or distractions&lt;/li&gt; &#xA; &lt;li&gt;Automatically hides hidden files and extension and region/version cruft in display names&lt;/li&gt; &#xA; &lt;li&gt;Consistent in-emulator menu with quick access to save states, disc changing, and emulator options&lt;/li&gt; &#xA; &lt;li&gt;Automatically sleeps after 30 seconds or press POWER to sleep (and wake)&lt;/li&gt; &#xA; &lt;li&gt;Automatically powers off while asleep after two minutes or hold POWER for one second&lt;/li&gt; &#xA; &lt;li&gt;Automatically resumes right where you left off if powered off while in-game, manually or while asleep&lt;/li&gt; &#xA; &lt;li&gt;Resume from manually created, last used save state by pressing X in the launcher instead of A&lt;/li&gt; &#xA; &lt;li&gt;Streamlined emulator frontend (minarch + libretro cores)&lt;/li&gt; &#xA; &lt;li&gt;Single SD card compatible with multiple devices from different manufacturers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://github.com/shauninman/MinUI/releases&#34;&gt;grab the latest version here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Devices with a physical power switch use MENU to sleep and wake instead of POWER. Once asleep the device can safely be powered off manually with the switch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Supported consoles&lt;/h2&gt; &#xA;&lt;p&gt;Base:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Game Boy&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Color&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Advance&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Entertainment System&lt;/li&gt; &#xA; &lt;li&gt;Super Nintendo Entertainment System&lt;/li&gt; &#xA; &lt;li&gt;Sega Genesis&lt;/li&gt; &#xA; &lt;li&gt;PlayStation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Extras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo Geo Pocket (and Color)&lt;/li&gt; &#xA; &lt;li&gt;Pico-8&lt;/li&gt; &#xA; &lt;li&gt;PokeÃÅmon mini&lt;/li&gt; &#xA; &lt;li&gt;Sega Game Gear&lt;/li&gt; &#xA; &lt;li&gt;Sega Master System&lt;/li&gt; &#xA; &lt;li&gt;Super Game Boy&lt;/li&gt; &#xA; &lt;li&gt;TurboGrafx-16 (and TurboGrafx-CD)&lt;/li&gt; &#xA; &lt;li&gt;Virtual Boy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Legacy versions&lt;/h2&gt; &#xA;&lt;p&gt;The original Trimui Model S version of MinUI has been archived &lt;a href=&#34;https://github.com/shauninman/MinUI-Legacy-Trimui-Model-S&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The sequel, MiniUI for the Miyoo Mini, has been archived &lt;a href=&#34;https://github.com/shauninman/MiniUI-Legacy-Miyoo-Mini&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The return of MinUI for the Anbernic RG35XX has been archived &lt;a href=&#34;https://github.com/shauninman/MinUI-Legacy-RG35XX&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esnet/iperf</title>
    <updated>2023-11-19T01:47:41Z</updated>
    <id>tag:github.com,2023-11-19:/esnet/iperf</id>
    <link href="https://github.com/esnet/iperf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iperf3: A TCP, UDP, and SCTP network bandwidth measurement tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iperf3: A TCP, UDP, and SCTP network bandwidth measurement tool&lt;/h1&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;iperf is a tool for active measurements of the maximum achievable bandwidth on IP networks. It supports tuning of various parameters related to timing, protocols, and buffers. For each test it reports the measured throughput / bitrate, loss, and other parameters.&lt;/p&gt; &#xA;&lt;p&gt;This version, sometimes referred to as iperf3, is a redesign of an original version developed at NLANR/DAST. iperf3 is a new implementation from scratch, with the goal of a smaller, simpler code base, and a library version of the functionality that can be used in other programs. iperf3 also has a number of features found in other tools such as nuttcp and netperf, but were missing from the original iperf. These include, for example, a zero-copy mode and optional JSON output. Note that iperf3 is &lt;em&gt;not&lt;/em&gt; backwards compatible with the original iperf.&lt;/p&gt; &#xA;&lt;p&gt;Primary development for iperf3 takes place on Ubuntu Linux, FreeBSD, and macOS. At this time, these are the only officially supported platforms, however there have been some reports of success with OpenBSD, NetBSD, Android, Solaris, and other Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;iperf3 is principally developed by ESnet / Lawrence Berkeley National Laboratory. It is released under a three-clause BSD license.&lt;/p&gt; &#xA;&lt;p&gt;For more information see: &lt;a href=&#34;https://software.es.net/iperf&#34;&gt;https://software.es.net/iperf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source code and issue tracker: &lt;a href=&#34;https://github.com/esnet/iperf&#34;&gt;https://github.com/esnet/iperf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discussion forums: &lt;a href=&#34;https://github.com/esnet/iperf/discussions&#34;&gt;https://github.com/esnet/iperf/discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reporting security vulnerabilities: &lt;a href=&#34;mailto:iperf@es.net&#34;&gt;iperf@es.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining iperf3&lt;/h2&gt; &#xA;&lt;p&gt;Downloads of iperf3 are available at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://downloads.es.net/pub/iperf/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check out the most recent code, clone the git repository at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/esnet/iperf.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building iperf3&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites:&lt;/h3&gt; &#xA;&lt;p&gt;None.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure; make; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: If configure fails, try running &lt;code&gt;./bootstrap.sh&lt;/code&gt; first)&lt;/p&gt; &#xA;&lt;h2&gt;Invoking iperf3&lt;/h2&gt; &#xA;&lt;p&gt;iperf3 includes a manual page listing all of the command-line options. The manual page is the most up-to-date reference to the various flags and parameters.&lt;/p&gt; &#xA;&lt;p&gt;For sample command line usage, see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fasterdata.es.net/performance-testing/network-troubleshooting-tools/iperf/&#34;&gt;https://fasterdata.es.net/performance-testing/network-troubleshooting-tools/iperf/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the default options, iperf is meant to show typical well designed application performance. &#34;Typical well designed application&#34; means avoiding artificial enhancements that work only for testing (such as splice()&#39;ing the data to /dev/null). iperf does also have flags for &#34;extreme best case&#34; optimizations, but they must be explicitly activated.&lt;/p&gt; &#xA;&lt;p&gt;These flags include:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Z, --zerocopy            use a &#39;zero copy&#39; sendfile() method of sending data&#xA;-A, --affinity n/n,m      set CPU affinity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bug and Security Reports&lt;/h2&gt; &#xA;&lt;p&gt;Before submitting a bug report, please make sure you&#39;re running the latest version of the code, and confirm that your issue has not already been fixed. Then submit to the iperf3 issue tracker on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/esnet/iperf/issues&#34;&gt;https://github.com/esnet/iperf/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In your issue submission, please indicate the version of iperf3 and what platform you&#39;re trying to run on (provide the platform information even if you&#39;re not using a supported platform, we &lt;em&gt;might&lt;/em&gt; be able to help anyway). Exact command-line arguments will help us recreate your problem. If you&#39;re getting error messages, please include them verbatim if possible, but remember to sanitize any sensitive information.&lt;/p&gt; &#xA;&lt;p&gt;If you have a question about usage or about the code, please do &lt;em&gt;not&lt;/em&gt; submit an issue. Please use one of the mailing lists for that.&lt;/p&gt; &#xA;&lt;p&gt;If you suspect there is a potential security issue, please contact the developers at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:iperf@es.net&#34;&gt;iperf@es.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Relation to iperf 2.x&lt;/h2&gt; &#xA;&lt;p&gt;Although iperf2 and iperf3 both measure network performance, they are not compatible with each other. The projects (as of mid-2021) are in active, but separate, development. The continuing iperf2 development project can be found at &lt;a href=&#34;https://sourceforge.net/projects/iperf2/&#34;&gt;https://sourceforge.net/projects/iperf2/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;A set of known issues is maintained on the iperf3 Web pages:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://software.es.net/iperf/dev.html#known-issues&#34;&gt;https://software.es.net/iperf/dev.html#known-issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;This section lists links to user-contributed Web pages regarding iperf3. ESnet and Lawrence Berkeley National Laboratory bear no responsibility for the content of these pages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation instructions for Debian Linux (by Cameron Camp &lt;a href=&#34;mailto:cameron@ivdatacenter.com&#34;&gt;cameron@ivdatacenter.com&lt;/a&gt;):&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://cheatsheet.logicalwebhost.com/iperf-network-testing/&#34;&gt;http://cheatsheet.logicalwebhost.com/iperf-network-testing/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;iperf, Copyright (c) 2014-2023, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Dept. of Energy). All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about your rights to use or distribute this software, please contact Berkeley Lab&#39;s Technology Transfer Department at &lt;a href=&#34;mailto:TTD@lbl.gov&#34;&gt;TTD@lbl.gov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTICE. This software is owned by the U.S. Department of Energy. As such, the U.S. Government has been granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software to reproduce, prepare derivative works, and perform publicly and display publicly. Beginning five (5) years after the date permission to assert copyright is obtained from the U.S. Department of Energy, and subject to any subsequent five (5) year renewals, the U.S. Government is granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software to reproduce, prepare derivative works, distribute copies to the public, perform publicly and display publicly, and to permit others to do so.&lt;/p&gt; &#xA;&lt;p&gt;This code is distributed under a BSD style license, see the LICENSE file for complete information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grafana/beyla</title>
    <updated>2023-11-19T01:47:41Z</updated>
    <id>tag:github.com,2023-11-19:/grafana/beyla</id>
    <link href="https://github.com/grafana/beyla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF-based autoinstrumentation of HTTP and HTTPS services&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/beyla/main/docs/sources/assets/logo.png&#34; height=&#34;226&#34; alt=&#34;Grafana Beyla logo&#34;&gt; &#xA;&lt;h1&gt;Grafana Beyla&lt;/h1&gt; &#xA;&lt;p&gt;Open source zero-code automatic instrumentation with eBPF and OpenTelemetry.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drone.grafana.net/grafana/beyla&#34;&gt;&lt;img src=&#34;https://drone.grafana.net/api/badges/grafana/beyla/status.svg?ref=refs/heads/main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Beyla is a vendor agnostic, eBPF-based, OpenTelemetry application auto-instrumentation tool, which lets you easily get started with Application Observability. eBPF is used to automatically inspect application executables and the OS networking layer, allowing us to capture essential application observability events for HTTP/S and gRPC services. From these captured eBPF events, we produce OpenTelemetry web transaction trace spans and Rate-Errors-Duration (RED) metrics. As with most eBPF tools, all data capture and instrumentation occurs without any modifications to your application code or configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To try out Beyla, you need to run a network service for Beyla to instrument. Beyla supports a wide range of programming languages (Go, Java, .NET, NodeJS, Python, Ruby, Rust, etc.), so if you already have an example service you can use it. If you don&#39;t have an example, you can download and run &lt;code&gt;example-http-service.go&lt;/code&gt; from the &lt;code&gt;examples/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -OL https://raw.githubusercontent.com/grafana/beyla/main/examples/example-http-service/example-http-service.go&#xA;go run ./example-http-service.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, generate some traffic. The following command will trigger a GET request to &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; every two seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;watch curl -s http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that we have an example running, we are ready to download and run Beyla.&lt;/p&gt; &#xA;&lt;p&gt;First, download and unpack the latest release from the &lt;a href=&#34;https://github.com/grafana/beyla/releases&#34;&gt;GitHub releases page&lt;/a&gt;. The release should contain the &lt;code&gt;./beyla&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;Beyla supports multiple ways to find the service to be instrumented (by network port, executable name, process ID), and multiple exposition formats (Prometheus, OpenTelemetry metrics, Single Span traces).&lt;/p&gt; &#xA;&lt;p&gt;For getting started, we&#39;ll tell Beyla to instrument the service running on port 8080 (our example service) and expose metrics in Prometheus format on port 9400.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export BEYLA_PROMETHEUS_PORT=9400&#xA;export BEYLA_OPEN_PORT=8080&#xA;sudo -E ./beyla&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you should see metrics on &lt;a href=&#34;http://localhost:9400/metrics&#34;&gt;http://localhost:9400/metrics&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://grafana.com/docs/grafana-cloud/monitor-applications/beyla/&#34;&gt;Documentation&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/grafana/beyla/main/docs/sources/tutorial/index.md&#34;&gt;quickstart tutorial&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux with Kernel 4.18 or higher with &lt;a href=&#34;https://www.kernel.org/doc/html/latest/bpf/btf.html&#34;&gt;BTF&lt;/a&gt; enabled. BTF became enabled by default on most Linux distributions with kernel 5.14 or higher. You can check if your kernel has BTF enabled by verifying if &lt;code&gt;/sys/kernel/btf/vmlinux&lt;/code&gt; exists on your system. If you need to recompile your kernel to enable BTF, the configuration option &lt;code&gt;CONFIG_DEBUG_INFO_BTF=y&lt;/code&gt; must be set.&lt;/li&gt; &#xA; &lt;li&gt;eBPF enabled in the host&lt;/li&gt; &#xA; &lt;li&gt;For instrumenting Go programs, they must have been compiled with at least Go 1.17. We currently support Go applications built with a major &lt;strong&gt;Go version no earlier than 3 versions&lt;/strong&gt; behind the current stable major release.&lt;/li&gt; &#xA; &lt;li&gt;Administrative access to execute the instrumenter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Or execute it from a user enabling the &lt;code&gt;SYS_ADMIN&lt;/code&gt; capability.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Working&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kernel-level HTTP calls&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenSSL library&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Standard Go &lt;code&gt;net/http&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gorilla/mux&#34;&gt;Gorilla Mux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gin-gonic.com/&#34;&gt;Gin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;gRPC-Go&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Kubernetes&lt;/h2&gt; &#xA;&lt;p&gt;You can just trigger the Kubernetes descriptors in the &lt;code&gt;deployments/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide your Grafana credentials. Use the following &lt;a href=&#34;https://raw.githubusercontent.com/grafana/beyla/main/deployments/01-grafana-credentials.template.yml&#34;&gt;K8s Secret template&lt;/a&gt; to introduce the endpoints, usernames and API keys for Mimir and Tempo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp deployments/01-grafana-credentials.template.yml 01-grafana-credentials.yml&#xA;$ # EDIT the fields&#xA;$ vim 01-grafana-credentials.yml&#xA;$ kubectl apply -f 01-grafana-credentials.yml &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy the Grafana Agent:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;kubectl apply -f deployments/02-grafana-agent.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy a demo app with the auto-instrumenter as a sidecar. You can use the blog example in the &lt;a href=&#34;https://raw.githubusercontent.com/grafana/beyla/main/deployments/03-instrumented-app.yml&#34;&gt;deployments/03-instrumented-app.yml&lt;/a&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ kubectl apply -f ./deployments/03-instrumented-app.yml&#xA;$ kubectl port-forward service/goblog 8443:8443&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should be able to query traces and metrics in your Grafana board.&lt;/p&gt; &#xA;&lt;h2&gt;Development recipes&lt;/h2&gt; &#xA;&lt;h3&gt;How to regenerate the eBPF Kernel binaries&lt;/h3&gt; &#xA;&lt;p&gt;The eBPF program is embedded into the &lt;code&gt;pkg/internal/ebpf/bpf_*&lt;/code&gt; generated files. This step is generally not needed unless you change the C code in the &lt;code&gt;bpf&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If you have Docker installed, you just need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make docker-generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you can&#39;t install docker, you should locally install the following required packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install -y kernel-devel make llvm clang glibc-devel.i686&#xA;make generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tested in Fedora 35, 38 and Red Hat Enterprise Linux 8.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Part of the code is taken from: &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go-instrumentation&#34;&gt;https://github.com/open-telemetry/opentelemetry-go-instrumentation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>