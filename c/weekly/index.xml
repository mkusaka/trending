<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-25T01:38:37Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pjsip/pjproject</title>
    <updated>2024-08-25T01:38:37Z</updated>
    <id>tag:github.com,2024-08-25:/pjsip/pjproject</id>
    <link href="https://github.com/pjsip/pjproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PJSIP project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/pjsip/pjproject/actions/workflows/ci-linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/pjsip/pjproject/actions/workflows/ci-linux.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pjsip/pjproject/actions/workflows/ci-mac.yml&#34;&gt;&lt;img src=&#34;https://github.com/pjsip/pjproject/actions/workflows/ci-mac.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Mac&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pjsip/pjproject/actions/workflows/ci-win.yml&#34;&gt;&lt;img src=&#34;https://github.com/pjsip/pjproject/actions/workflows/ci-win.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Windows&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#pjsip&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/pjsip.png&#34; alt=&#34;OSS-Fuzz&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/pjsip&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/905/badge.svg?sanitize=true&#34; alt=&#34;Coverity-Scan&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pjsip/pjproject/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/pjsip/pjproject/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.pjsip.org/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pjsip/badge/?version=latest&#34; alt=&#34;docs.pjsip.org&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PJSIP&lt;/h1&gt; &#xA;&lt;p&gt;PJSIP is a free and open source multimedia communication library written in C with high level API in C, C++, Java, C#, and Python languages. It implements standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. It combines signaling protocol (SIP) with rich multimedia framework and NAT traversal functionality into high level API that is portable and suitable for almost any type of systems ranging from desktops, embedded systems, to mobile handsets.&lt;/p&gt; &#xA;&lt;h2&gt;Getting PJSIP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main repository: &lt;a href=&#34;https://github.com/pjsip/pjproject&#34;&gt;https://github.com/pjsip/pjproject&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Releases: &lt;a href=&#34;https://github.com/pjsip/pjproject/releases&#34;&gt;https://github.com/pjsip/pjproject/releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Main documentation site: &lt;a href=&#34;https://docs.pjsip.org&#34;&gt;https://docs.pjsip.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Table of contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/overview/intro.html&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/overview/features.html&#34;&gt;Features (Datasheet)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/overview/license.html&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Getting started&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/getting.html&#34;&gt;Getting PJSIP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/general_guidelines.html&#34;&gt;General Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/android/index.html&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/ios/index.html&#34;&gt;iPhone&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/posix/index.html&#34;&gt;Mac/Linux/Unix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/windows/index.html&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/get-started/windows-phone/index.html&#34;&gt;Windows Phone&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PJSUA2 - High level API guide &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/pjsua2/intro.html&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/pjsua2/building.html&#34;&gt;Building PJSUA2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/pjsua2/general_concept.html&#34;&gt;General concepts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/pjsua2/building.html&#34;&gt;Hello world!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/pjsua2/using/index.html&#34;&gt;Using PJSUA2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/pjsua2/samples.html&#34;&gt;Sample applications&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Specific guides &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#audio&#34;&gt;Audio&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#audio-troubleshooting&#34;&gt;Audio Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#build-integration&#34;&gt;Build and integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#development-programming&#34;&gt;Development and programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#media&#34;&gt;Media&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#network-nat&#34;&gt;Network and NAT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#performance-footprint&#34;&gt;Performance and footprint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#sip&#34;&gt;SIP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#video&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/specific-guides/index.html#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;API reference &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjsua2/index.html&#34;&gt;PJSUA2&lt;/a&gt; - high level API (Java/C#/Python/C++/swig)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjsua-lib/index.html&#34;&gt;PJSUA-LIB&lt;/a&gt; - high level API (C)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjsip/index.html&#34;&gt;PJSIP&lt;/a&gt; - SIP stack&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjmedia/index.html&#34;&gt;PJMEDIA&lt;/a&gt; - media framework&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjnath/index.html&#34;&gt;PJNATH&lt;/a&gt; - NAT traversal helper&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjlib-util/index.html&#34;&gt;PJLIB-UTIL&lt;/a&gt; - utilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.pjsip.org/en/latest/api/pjlib/index.html&#34;&gt;PJLIB&lt;/a&gt; - portable library&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AOMediaCodec/libavif</title>
    <updated>2024-08-25T01:38:37Z</updated>
    <id>tag:github.com,2024-08-25:/AOMediaCodec/libavif</id>
    <link href="https://github.com/AOMediaCodec/libavif" rel="alternate"></link>
    <summary type="html">&lt;p&gt;libavif - Library for encoding and decoding .avif files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libavif &lt;a href=&#34;https://ci.appveyor.com/project/louquillio/libavif&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/louquillio/libavif?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/AOMediaCodec/libavif&#34;&gt;&lt;img src=&#34;https://travis-ci.com/AOMediaCodec/libavif.svg?branch=master&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This library aims to be a friendly, portable C implementation of the AV1 Image File Format, as described here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aomediacodec.github.io/av1-avif/&#34;&gt;https://aomediacodec.github.io/av1-avif/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It can encode and decode all AV1 supported YUV formats and bit depths (with alpha).&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that you check out/use &lt;a href=&#34;https://github.com/AOMediaCodec/libavif/releases&#34;&gt;tagged releases&lt;/a&gt; instead of just using the main branch. We will regularly create new versions as bug fixes and features are added.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please see the examples in the &#34;examples&#34; directory. If you&#39;re already building &lt;code&gt;libavif&lt;/code&gt;, enable the CMake option &lt;code&gt;AVIF_BUILD_EXAMPLES&lt;/code&gt; in order to build and run the examples too.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;libavif&lt;/code&gt; is a package in most major OSs.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vcpkg install libavif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download the official windows binaries on the &lt;a href=&#34;https://github.com/AOMediaCodec/libavif/releases&#34;&gt;release&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install libavif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo port install libavif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Debian-based distributions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libavif-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Red Hat-based distributions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum -y install libavif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MinGW&lt;/h3&gt; &#xA;&lt;p&gt;For the &#34;default&#34; MSYS2 UCRT64 environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S mingw-w64-ucrt-x86_64-libavif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Notes&lt;/h2&gt; &#xA;&lt;p&gt;Building libavif requires &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;No AV1 codecs are enabled by default. Enable them by setting any of the following CMake options to &lt;code&gt;LOCAL&lt;/code&gt; or &lt;code&gt;SYSTEM&lt;/code&gt; whether you want to use a locally built or a system installed version (e.g. &lt;code&gt;-DAVIF_CODEC_AOM=LOCAL&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_AOM&lt;/code&gt; for &lt;a href=&#34;https://aomedia.googlesource.com/aom/&#34;&gt;libaom&lt;/a&gt; (encoder and decoder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_DAV1D&lt;/code&gt; for &lt;a href=&#34;https://code.videolan.org/videolan/dav1d&#34;&gt;dav1d&lt;/a&gt; (decoder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_LIBGAV1&lt;/code&gt; for &lt;a href=&#34;https://chromium.googlesource.com/codecs/libgav1/&#34;&gt;libgav1&lt;/a&gt; (decoder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_RAV1E&lt;/code&gt; for &lt;a href=&#34;https://github.com/xiph/rav1e&#34;&gt;rav1e&lt;/a&gt; (encoder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_SVT&lt;/code&gt; for &lt;a href=&#34;https://gitlab.com/AOMediaCodec/SVT-AV1&#34;&gt;SVT-AV1&lt;/a&gt; (encoder)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When set to &lt;code&gt;SYSTEM&lt;/code&gt;, these libraries (in their C API form) must be externally available (discoverable via CMake&#39;s &lt;code&gt;FIND_LIBRARY&lt;/code&gt;) to use them, or if libavif is a child CMake project, the appropriate CMake target must already exist by the time libavif&#39;s CMake scripts are executed.&lt;/p&gt; &#xA;&lt;h3&gt;Local / Static Builds&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ext/&lt;/code&gt; subdirectory contains a handful of basic scripts which each pull down a known-good copy of an AV1 codec and make a local static library build. Most scripts require CMake, Ninja and NASM. dav1d uses Meson instead of CMake, and rav1e uses cargo (Rust). Check each library&#39;s documentation for an exact list of requirements.&lt;/p&gt; &#xA;&lt;p&gt;If you want to statically link any codec into your local (static) build of libavif, building using one of these scripts and then setting the associated &lt;code&gt;AVIF_CODEC_*&lt;/code&gt; to &lt;code&gt;LOCAL&lt;/code&gt; is a convenient method, but you must make sure to disable &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; in CMake to instruct it to make a static libavif library.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build/install shared libraries for AV1 codecs, you can still peek inside of each script to see where the current known-good SHA is for each codec.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;A few tests written in C can be built by enabling the &lt;code&gt;AVIF_BUILD_TESTS&lt;/code&gt; CMake option.&lt;/p&gt; &#xA;&lt;p&gt;The remaining tests can be built by enabling the &lt;code&gt;AVIF_BUILD_TESTS&lt;/code&gt; and &lt;code&gt;AVIF_ENABLE_GTEST&lt;/code&gt; CMake options. They require GoogleTest to be built locally with ext/googletest.cmd or installed on the system.&lt;/p&gt; &#xA;&lt;h3&gt;Command Lines&lt;/h3&gt; &#xA;&lt;p&gt;The following instructions can be used to build the libavif library and the &lt;code&gt;avifenc&lt;/code&gt; and &lt;code&gt;avifdec&lt;/code&gt; tools.&lt;/p&gt; &#xA;&lt;h4&gt;Build using installed dependencies&lt;/h4&gt; &#xA;&lt;p&gt;To link against the already installed &lt;code&gt;aom&lt;/code&gt;, &lt;code&gt;libjpeg&lt;/code&gt; and &lt;code&gt;libpng&lt;/code&gt; dependency libraries (recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone -b v1.0.3 https://github.com/AOMediaCodec/libavif.git&#xA;cd libavif&#xA;cmake -S . -B build -DAVIF_CODEC_AOM=SYSTEM -DAVIF_BUILD_APPS=ON&#xA;cmake --build build --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build everything from scratch&lt;/h4&gt; &#xA;&lt;p&gt;For development and debugging purposes, or to generate fully static binaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone -b v1.0.3 https://github.com/AOMediaCodec/libavif.git&#xA;cd libavif/ext&#xA;./aom.cmd&#xA;./libyuv.cmd&#xA;./libsharpyuv.cmd&#xA;./libjpeg.cmd&#xA;./zlibpng.cmd&#xA;cd ..&#xA;cmake -S . -B build -DBUILD_SHARED_LIBS=OFF -DAVIF_CODEC_AOM=LOCAL -DAVIF_LIBYUV=LOCAL -DAVIF_LIBSHARPYUV=LOCAL -DAVIF_JPEG=LOCAL -DAVIF_ZLIBPNG=LOCAL -DAVIF_BUILD_APPS=ON&#xA;cmake --build build --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prebuilt Library (Windows)&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re building on Windows with Visual Studio 2022 and want to try out libavif without going through the build process, static library builds for both Debug and Release are available on &lt;a href=&#34;https://ci.appveyor.com/project/louquillio/libavif&#34;&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Notes&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://github.com/AOMediaCodec/libavif/wiki&#34;&gt;wiki&lt;/a&gt; for extra resources on libavif, such as the Release Checklist.&lt;/p&gt; &#xA;&lt;p&gt;The libavif library is written in C99. Most of the tests are written in C++14.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;clang-format&lt;/a&gt; to format the C sources from the top-level folder (&lt;code&gt;clang-format-16&lt;/code&gt; preferred):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;clang-format -style=file -i \&#xA;  apps/*.c apps/*/*.c apps/*/*.cc apps/*/*.h examples/*.c \&#xA;  include/avif/*.h src/*.c src/*.cc \&#xA;  tests/*.c tests/*/*.cc tests/*/*.h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/cheshirekow/cmake_format&#34;&gt;cmake-format&lt;/a&gt; to format the CMakeLists.txt files from the top-level folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake-format -i \&#xA;  CMakeLists.txt \&#xA;  tests/CMakeLists.txt \&#xA;  cmake/Modules/*.cmake \&#xA;  contrib/CMakeLists.txt \&#xA;  contrib/gdk-pixbuf/CMakeLists.txt \&#xA;  android_jni/avifandroidjni/src/main/jni/CMakeLists.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the BSD License.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Copyright 2019 Joe Drago. All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;1. Redistributions of source code must retain the above copyright notice, this&#xA;list of conditions and the following disclaimer.&#xA;&#xA;2. Redistributions in binary form must reproduce the above copyright notice,&#xA;this list of conditions and the following disclaimer in the documentation&#xA;and/or other materials provided with the distribution.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE&#xA;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&#xA;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#xA;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER&#xA;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xA;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>raspberrypi/pico-examples</title>
    <updated>2024-08-25T01:38:37Z</updated>
    <id>tag:github.com,2024-08-25:/raspberrypi/pico-examples</id>
    <link href="https://github.com/raspberrypi/pico-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raspberry Pi RP2350 Pico SDK Examples - Early Access&lt;/h1&gt; &#xA;&lt;h2&gt;RP2350 Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Everything below this section is from the stock pico-examples, so ignore URLs etc., but generally instructions are the same.&lt;/p&gt; &#xA;&lt;p&gt;The Pico SDK default continues to be to build for RP2040 (PICO_PLATFORM=rp2040), so to build for RP2350, you need to pass &lt;code&gt;-DPICO_PLATFORM=rp2350&lt;/code&gt; to CMake (or &lt;code&gt;-DPICO_PLATFORM=rp2350-riscv&lt;/code&gt; for RISC-V).&lt;/p&gt; &#xA;&lt;p&gt;Most, but not all examples, currently work on RP2350 however you should be able to do a full build with any of the above platforms (PICO_PLATFORM=host however currently fails on some examples)&lt;/p&gt; &#xA;&lt;p&gt;For RISC-V compilation, you should take a compiler from here: &lt;a href=&#34;https://www.embecosm.com/resources/tool-chain-downloads/#riscv-stable&#34;&gt;https://www.embecosm.com/resources/tool-chain-downloads/#riscv-stable&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Original pico-examples docs&lt;/h1&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-get-started&#34;&gt;Getting Started with the Raspberry Pi Pico&lt;/a&gt; and the README in the &lt;a href=&#34;https://github.com/raspberrypi/pico-sdk&#34;&gt;pico-sdk&lt;/a&gt; for information on getting up and running.&lt;/p&gt; &#xA;&lt;h3&gt;First Examples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link to prebuilt UF2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/hello_world/serial&#34;&gt;hello_serial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The obligatory Hello World program for Pico (Output over serial version)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/hello_world/usb&#34;&gt;hello_usb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The obligatory Hello World program for Pico (Output over USB version)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rptl.io/pico-hello-usb&#34;&gt;https://rptl.io/pico-hello-usb&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/blink&#34;&gt;blink&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blink an LED on and off. Works on both boards with regular LEDs and Pico W&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rptl.io/pico-blink&#34;&gt;https://rptl.io/pico-blink&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/blink_simple&#34;&gt;blink_simple&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blink an LED on and off. Does not work on Pico W.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rptl.io/pico-blink&#34;&gt;https://rptl.io/pico-blink&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/blink&#34;&gt;picow_blink&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blinks the Pico W on-board LED (which is connected via the WiFi chip).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://rptl.io/pico-w-blink&#34;&gt;http://rptl.io/pico-w-blink&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ADC&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/hello_adc&#34;&gt;hello_adc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the voltage from an ADC input.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/joystick_display&#34;&gt;joystick_display&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display a Joystick X/Y input based on two ADC inputs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/adc_console&#34;&gt;adc_console&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive shell for playing with the ADC. Includes example of free-running capture mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/onboard_temperature&#34;&gt;onboard_temperature&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the value of the onboard temperature sensor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/microphone_adc&#34;&gt;microphone_adc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read analog values from a microphone and plot the measured sound amplitude.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/dma_capture&#34;&gt;dma_capture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the DMA to capture many samples from the ADC.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/adc/read_vsys&#34;&gt;read_vsys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to read VSYS to get the voltage of the power supply.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Bootloaders (RP2350 Only)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/bootloaders/encrypted&#34;&gt;enc_bootloader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A bootloader which decrypts binaries from flash into SRAM. See the separate &lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/bootloaders/encrypted/README.md&#34;&gt;README&lt;/a&gt; for more information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Clocks&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/clocks/hello_48MHz&#34;&gt;hello_48MHz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the system clock frequency to 48 MHz while running.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/clocks/hello_gpout&#34;&gt;hello_gpout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the general purpose clock outputs (GPOUT) to drive divisions of internal clocks onto GPIO outputs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/clocks/hello_resus&#34;&gt;hello_resus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable the clock resuscitate feature, &#34;accidentally&#34; stop the system clock, and show how we recover.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/clocks/detached_clk_peri&#34;&gt;detached_clk_peri&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Detach peripheral clock and vary system clock.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/cmake/build_variants&#34;&gt;build_variants&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builds two version of the same app with different configurations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;DCP&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/dcp/hello_dcp&#34;&gt;hello_dcp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the double-precision coprocessor directly in assembler.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;DMA&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/dma/hello_dma&#34;&gt;hello_dma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the DMA to copy data in memory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/dma/control_blocks&#34;&gt;control_blocks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build a control block list, to program a longer sequence of DMA transfers to the UART.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/dma/channel_irq&#34;&gt;channel_irq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use an IRQ handler to reconfigure a DMA channel, in order to continuously drive data through a PIO state machine.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/dma/sniff_crc&#34;&gt;sniff_crc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the DMA engine&#39;s &#39;sniff&#39; capability to calculate a CRC32 on a data buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;HSTX&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/dvi_out_hstx_encoder&#34;&gt;dvi_out_hstx_encoder&lt;/a&gt; &lt;code&gt;RP2350&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the HSTX to output a DVI signal with 3:3:2 RGB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Flash&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/cache_perfctr&#34;&gt;cache_perfctr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read and clear the cache performance counters. Show how they are affected by different types of flash reads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/nuke&#34;&gt;nuke&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Obliterate the contents of flash. An example of a NO_FLASH binary (UF2 loaded directly into SRAM and runs in-place there). A useful utility to drag and drop onto your Pico if the need arises.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/program&#34;&gt;program&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase a flash sector, program one flash page, and read back the data.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/xip_stream&#34;&gt;xip_stream&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stream data using the XIP stream hardware, which allows data to be DMA&#39;d in the background whilst executing code from flash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/ssi_dma&#34;&gt;ssi_dma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DMA directly from the flash interface (continuous SCK clocking) for maximum bulk read performance.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/runtime_flash_permissions&#34;&gt;runtime_flash_permissions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates adding partitions at runtime to change the flash permissions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;FreeRTOS&lt;/h3&gt; &#xA;&lt;p&gt;These examples require you to set the &lt;code&gt;FREERTOS_KERNEL_PATH&lt;/code&gt; to point to the FreeRTOS Kernel. See &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-Kernel&#34;&gt;https://github.com/FreeRTOS/FreeRTOS-Kernel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/freertos/hello_freertos&#34;&gt;hello_freertos&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Examples that demonstrate how run FreeRTOS and tasks on 1 or 2 cores.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;GPIO&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/gpio/hello_7segment&#34;&gt;hello_7segment&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the GPIOs to drive a seven segment LED display.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/gpio/hello_gpio_irq&#34;&gt;hello_gpio_irq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Register an interrupt handler to run when a GPIO is toggled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/gpio/dht_sensor&#34;&gt;dht_sensor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use GPIO to bitbang the serial protocol for a DHT temperature/humidity sensor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/blink&#34;&gt;blink&lt;/a&gt;, blinking an LED attached to a GPIO.&lt;/p&gt; &#xA;&lt;h3&gt;HW divider&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/divider&#34;&gt;hello_divider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show how to directly access the hardware integer dividers, in case AEABI injection is disabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;I2C&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/bus_scan&#34;&gt;bus_scan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan the I2C bus for devices and display results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/bmp280_i2c&#34;&gt;bmp280_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read and convert temperature and pressure data from a BMP280 sensor, attached to an I2C bus.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/lcd_1602_i2c&#34;&gt;lcd_1602_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display some text on a generic 16x2 character LCD display, via I2C.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/lis3dh_i2c&#34;&gt;lis3dh_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read acceleration and temperature value from a LIS3DH sensor via I2C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/mcp9808_i2c&#34;&gt;mcp9808_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read temperature, set limits and raise alerts when limits are surpassed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/mma8451_i2c&#34;&gt;mma8451_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read acceleration from a MMA8451 accelerometer and set range and precision for the data.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/mpl3115a2_i2c&#34;&gt;mpl3115a2_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interface with an MPL3115A2 altimeter, exploring interrupts and advanced board features, via I2C.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/mpu6050_i2c&#34;&gt;mpu6050_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read acceleration and angular rate values from a MPU6050 accelerometer/gyro, attached to an I2C bus.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/ssd1306_i2c&#34;&gt;ssd1306_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert and display a bitmap on a 128x32 or 128x64 SSD1306-driven OLED display&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/pa1010d_i2c&#34;&gt;pa1010d_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read GPS location data, parse and display data via I2C.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/pcf8523_i2c&#34;&gt;pcf8523_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read time and date values from a real time clock. Set current time and alarms on it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/ht16k33_i2c&#34;&gt;ht16k33_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drive a 4 digit 14 segment LED with an HT16K33.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/i2c/slave_mem_i2c&#34;&gt;slave_mem_i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;i2c slave example where the slave implements a 256 byte memory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Interpolator&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/interp/hello_interp&#34;&gt;hello_interp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A bundle of small examples, showing how to access the core-local interpolator hardware, and use most of its features.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Multicore&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/multicore/hello_multicore&#34;&gt;hello_multicore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Launch a function on the second core, printf some messages on each core, and pass data back and forth through the mailbox FIFOs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/multicore/multicore_fifo_irqs&#34;&gt;multicore_fifo_irqs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;On each core, register and interrupt handler for the mailbox FIFOs. Show how the interrupt fires when that core receives a message.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/multicore/multicore_runner&#34;&gt;multicore_runner&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set up the second core to accept, and run, any function pointer pushed into its mailbox FIFO. Push in a few pieces of code and get answers back.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/multicore/multicore_doorbell&#34;&gt;multicore_doorbell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Claims two doorbells for signaling between the cores. Counts how many doorbell IRQs occur on the second core and uses doorbells to coordinate exit.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;OTP&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/otp/hello_otp&#34;&gt;hello_otp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrate reading and writing from the OTP on RP2350, along with some of the features of OTP (error correction and page locking).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Pico Board&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/picoboard/blinky&#34;&gt;blinky&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blink &#34;hello, world&#34; in Morse code on Pico&#39;s LED&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/picoboard/button&#34;&gt;button&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use Pico&#39;s BOOTSEL button as a regular button input, by temporarily suspending flash access.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Pico W Networking&lt;/h3&gt; &#xA;&lt;p&gt;These examples are for the Pico W, and are only available for &lt;code&gt;PICO_BOARD=pico_w&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/access_point&#34;&gt;picow_access_point&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starts a WiFi access point, and fields DHCP requests.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/blink&#34;&gt;picow_blink&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blinks the on-board LED (which is connected via the WiFi chip).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/blink_slow_clock&#34;&gt;picow_blink_slow_clock&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blinks the on-board LED (which is connected via the WiFi chip) with a slower system clock to show how to reconfigure communication with the WiFi chip under those circumstances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/iperf&#34;&gt;picow_iperf_server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs an &#34;iperf&#34; server for WiFi speed testing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/ntp_client&#34;&gt;picow_ntp_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connects to an NTP server to fetch and display the current time.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/tcp_client&#34;&gt;picow_tcp_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple TCP client. You can run &lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/python_test_tcp/python_test_tcp_server.py&#34;&gt;python_test_tcp_server.py&lt;/a&gt; for it to connect to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/tcp_server&#34;&gt;picow_tcp_server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple TCP server. You can use &lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w//wifi/python_test_tcp/python_test_tcp_client.py&#34;&gt;python_test_tcp_client.py&lt;/a&gt; to connect to it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/tls_client&#34;&gt;picow_tls_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to make a HTTPS request using TLS.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/tls_client&#34;&gt;picow_tls_verify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to make a HTTPS request using TLS with certificate verification.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/wifi_scan&#34;&gt;picow_wifi_scan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scans for WiFi networks and prints the results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/udp_beacon&#34;&gt;picow_udp_beacon&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple UDP transmitter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/httpd&#34;&gt;picow_httpd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs a LWIP HTTP server test app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;FreeRTOS examples&lt;/h4&gt; &#xA;&lt;p&gt;These are examples of integrating Pico W networking under FreeRTOS, and require you to set the &lt;code&gt;FREERTOS_KERNEL_PATH&lt;/code&gt; to point to the FreeRTOS Kernel. See &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-Kernel&#34;&gt;https://github.com/FreeRTOS/FreeRTOS-Kernel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/iperf&#34;&gt;picow_freertos_iperf_server_nosys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs an &#34;iperf&#34; server for WiFi speed testing under FreeRTOS in NO_SYS=1 mode. The LED is blinked in another task&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/iperf&#34;&gt;picow_freertos_iperf_server_sys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs an &#34;iperf&#34; server for WiFi speed testing under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode. The LED is blinked in another task&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/ping&#34;&gt;picow_freertos_ping_nosys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs the lwip-contrib/apps/ping test app under FreeRTOS in NO_SYS=1 mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/ping&#34;&gt;picow_freertos_ping_sys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs the lwip-contrib/apps/ping test app under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode. The test app uses the lwIP &lt;em&gt;socket&lt;/em&gt; API in this case.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/ntp_client_socket&#34;&gt;picow_freertos_ntp_client_socket&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connects to an NTP server using the LwIP Socket API with FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/httpd&#34;&gt;pico_freertos_httpd_nosys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs a LWIP HTTP server test app under FreeRTOS in NO_SYS=1 mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/wifi/freertos/httpd&#34;&gt;pico_freertos_httpd_sys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs a LWIP HTTP server test app under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Pico W Bluetooth&lt;/h3&gt; &#xA;&lt;p&gt;These examples are for the Pico W, and are only available for &lt;code&gt;PICO_BOARD=pico_w&lt;/code&gt;. They are examples from the Blue Kitchen Bluetooth stack, see &lt;a href=&#34;https://bluekitchen-gmbh.com/btstack/#examples/examples/index.html&#34;&gt;here&lt;/a&gt; for a full description.&lt;/p&gt; &#xA;&lt;p&gt;By default, the Bluetooth examples are only built in one &#34;mode&#34; only (&lt;em&gt;background&lt;/em&gt;, &lt;em&gt;poll&lt;/em&gt;, or &lt;em&gt;freertos&lt;/em&gt;), with the default being &lt;em&gt;background&lt;/em&gt;. This can be changed by passing &lt;code&gt;-DBTSTACK_EXAMPLE_TYPE=poll&lt;/code&gt; etc. to &lt;code&gt;CMake&lt;/code&gt;, or all examples can be built (which may be slow) by passing &lt;code&gt;-DBTSTACK_EXAMPLE_TYPE=all&lt;/code&gt; Freertos versions can only be built if &lt;code&gt;FREERTOS_KERNEL_PATH&lt;/code&gt; is defined.&lt;/p&gt; &#xA;&lt;p&gt;The Bluetooth examples that use audio require code in &lt;a href=&#34;https://github.com/raspberrypi/pico-extras&#34;&gt;pico-extras&lt;/a&gt;. Pass &lt;code&gt;-DPICO_EXTRAS_PATH=${HOME}/pico-extras&lt;/code&gt; on the cmake command line or define &lt;code&gt;PICO_EXTRAS_PATH=${HOME}/pico-extras&lt;/code&gt; in your environment and re-run cmake to include them in the build.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/a2dp_sink_demo.c&#34;&gt;picow_bt_example_a2dp_sink_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A2DP Sink - Receive Audio Stream and Control Playback.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/a2dp_source_demo.c&#34;&gt;picow_bt_example_a2dp_source_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A2DP Source - Stream Audio and Control Volume.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/ancs_client_demo.c&#34;&gt;picow_bt_example_ancs_client_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE ANCS Client - Apple Notification Service.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/att_delayed_response.c&#34;&gt;picow_bt_example_att_delayed_response&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Peripheral - Delayed Response.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/audio_duplex.c&#34;&gt;picow_bt_example_audio_duplex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Audio Driver - Forward Audio from Source to Sink.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/avrcp_browsing_client.c&#34;&gt;picow_bt_example_avrcp_browsing_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AVRCP Browsing - Browse Media Players and Media Information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/dut_mode_classic.c&#34;&gt;picow_bt_example_dut_mode_classic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Testing - Enable Device Under Test (DUT.c) Mode for Classic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gap_dedicated_bonding.c&#34;&gt;picow_bt_example_gap_dedicated_bonding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GAP bonding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gap_inquiry.c&#34;&gt;picow_bt_example_gap_inquiry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GAP Classic Inquiry.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gap_le_advertisements.c&#34;&gt;picow_bt_example_gap_le_advertisements&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GAP LE Advertisements Scanner.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gap_link_keys.c&#34;&gt;picow_bt_example_gap_link_keys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GAP Link Key Management (Classic.c).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gatt_battery_query.c&#34;&gt;picow_bt_example_gatt_battery_query&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GATT Battery Service Client.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gatt_browser.c&#34;&gt;picow_bt_example_gatt_browser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GATT Client - Discover Primary Services.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gatt_counter.c&#34;&gt;picow_bt_example_gatt_counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GATT Server - Heartbeat Counter over GATT.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gatt_device_information_query.c&#34;&gt;picow_bt_example_gatt_device_information_query&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GATT Device Information Service Client.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gatt_heart_rate_client.c&#34;&gt;picow_bt_example_gatt_heart_rate_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GATT Heart Rate Sensor Client.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/gatt_streamer_server.c&#34;&gt;picow_bt_example_gatt_streamer_server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Performance - Stream Data over GATT (Server.c).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hfp_ag_demo.c&#34;&gt;picow_bt_example_hfp_ag_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HFP AG - Audio Gateway.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hfp_hf_demo.c&#34;&gt;picow_bt_example_hfp_hf_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HFP HF - Hands-Free.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hid_host_demo.c&#34;&gt;picow_bt_example_hid_host_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Host Classic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hid_keyboard_demo.c&#34;&gt;picow_bt_example_hid_keyboard_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Keyboard Classic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hid_mouse_demo.c&#34;&gt;picow_bt_example_hid_mouse_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Mouse Classic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hog_boot_host_demo.c&#34;&gt;picow_bt_example_hog_boot_host_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Boot Host LE.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hog_host_demo.c&#34;&gt;picow_bt_example_hog_host_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Host LE.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hog_keyboard_demo.c&#34;&gt;picow_bt_example_hog_keyboard_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Keyboard LE.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hog_mouse_demo.c&#34;&gt;picow_bt_example_hog_mouse_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HID Mouse LE.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hsp_ag_demo.c&#34;&gt;picow_bt_example_hsp_ag_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HSP AG - Audio Gateway.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/hsp_hs_demo.c&#34;&gt;picow_bt_example_hsp_hs_demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HSP HS - Headset.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/le_credit_based_flow_control_mode_client.c&#34;&gt;picow_bt_example_le_credit_based_flow_control_mode_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Credit-Based Flow-Control Mode Client - Send Data over L2CAP.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/le_credit_based_flow_control_mode_server.c&#34;&gt;picow_bt_example_le_credit_based_flow_control_mode_server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Credit-Based Flow-Control Mode Server - Receive data over L2CAP.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/led_counter.c&#34;&gt;picow_bt_example_led_counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hello World - Blinking a LED without Bluetooth.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/le_mitm.c&#34;&gt;picow_bt_example_le_mitm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Man-in-the-Middle Tool.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/le_streamer_client.c&#34;&gt;picow_bt_example_le_streamer_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Performance - Stream Data over GATT (Client.c).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/mod_player.c&#34;&gt;picow_bt_example_mod_player&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Audio Driver - Play 80&#39;s MOD Song.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/nordic_spp_le_counter.c&#34;&gt;picow_bt_example_nordic_spp_le_counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Nordic SPP-like Heartbeat Server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/nordic_spp_le_streamer.c&#34;&gt;picow_bt_example_nordic_spp_le_streamer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Nordic SPP-like Streamer Server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/sdp_general_query.c&#34;&gt;picow_bt_example_sdp_general_query&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SDP Client - Query Remote SDP Records.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/sdp_rfcomm_query.c&#34;&gt;picow_bt_example_sdp_rfcomm_query&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SDP Client - Query RFCOMM SDP record.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/sine_player.c&#34;&gt;picow_bt_example_sine_player&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Audio Driver - Play Sine.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/sm_pairing_central.c&#34;&gt;picow_bt_example_sm_pairing_central&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Central - Test Pairing Methods.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/sm_pairing_peripheral.c&#34;&gt;picow_bt_example_sm_pairing_peripheral&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE Peripheral - Test Pairing Methods.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/spp_and_gatt_counter.c&#34;&gt;picow_bt_example_spp_and_gatt_counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dual Mode - SPP and LE Counter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/spp_and_gatt_streamer.c&#34;&gt;picow_bt_example_spp_and_gatt_streamer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dual Mode - SPP and LE streamer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/spp_counter.c&#34;&gt;picow_bt_example_spp_counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SPP Server - Heartbeat Counter over RFCOMM.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/spp_flowcontrol.c&#34;&gt;picow_bt_example_spp_flowcontrol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SPP Server - RFCOMM Flow Control.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/spp_streamer_client.c&#34;&gt;picow_bt_example_spp_streamer_client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Performance - Stream Data over SPP (Client.c).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/tree/master/example/spp_streamer.c&#34;&gt;picow_bt_example_spp_streamer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Performance - Stream Data over SPP (Server.c).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bluekitchen/btstack/raw/master/example/ublox_spp_le_counter.c&#34;&gt;picow_bt_example_ublox_spp_le_counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LE u-blox SPP-like Heartbeat Server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Some Standalone Bluetooth examples (without all the common example build infrastructure) are also available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/bt/standalone&#34;&gt;picow_ble_temp_sensor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reads from the on board temperature sensor and sends notifications via BLE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/bt/standalone&#34;&gt;picow_ble_temp_sensor_with_wifi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Same as above but also connects to Wi-Fi and starts an &#34;iperf&#34; server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pico_w/bt/standalone&#34;&gt;picow_ble_temp_reader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connects to one of the above &#34;sensors&#34; and reads the temperature&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;PIO&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/hello_pio&#34;&gt;hello_pio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Absolutely minimal example showing how to control an LED by pushing values into a PIO FIFO.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/apa102&#34;&gt;apa102&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rainbow pattern on on a string of APA102 addressable RGB LEDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/clocked_input&#34;&gt;clocked_input&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shift in serial data, sampling with an external clock.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/differential_manchester&#34;&gt;differential_manchester&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send and receive differential Manchester-encoded serial (BMC).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/hub75&#34;&gt;hub75&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display an image on a 128x64 HUB75 RGB LED matrix.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/i2c&#34;&gt;i2c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan an I2C bus.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/ir_nec&#34;&gt;ir_nec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sending and receiving IR (infra-red) codes using the PIO.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/logic_analyser&#34;&gt;logic_analyser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use PIO and DMA to capture a logic trace of some GPIOs, whilst a PWM unit is driving them.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/manchester_encoding&#34;&gt;manchester_encoding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send and receive Manchester-encoded serial.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/onewire&#34;&gt;onewire&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A library for interfacing to 1-Wire devices, with an example for the DS18B20 temperature sensor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/pio_blink&#34;&gt;pio_blink&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set up some PIO state machines to blink LEDs at different frequencies, according to delay counts pushed into their FIFOs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/pwm&#34;&gt;pwm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pulse width modulation on PIO. Use it to gradually fade the brightness of an LED.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/spi&#34;&gt;spi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use PIO to erase, program and read an external SPI flash chip. A second example runs a loopback test with all four CPHA/CPOL combinations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/squarewave&#34;&gt;squarewave&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drive a fast square wave onto a GPIO. This example accesses low-level PIO registers directly, instead of using the SDK functions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/squarewave&#34;&gt;squarewave_div_sync&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generates a square wave on three GPIOs and synchronises the divider on all the state machines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/st7789_lcd&#34;&gt;st7789_lcd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set up PIO for 62.5 Mbps serial output, and use this to display a spinning image on a ST7789 serial LCD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/quadrature_encoder&#34;&gt;quadrature_encoder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A quadrature encoder using PIO to maintain counts independent of the CPU.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/quadrature_encoder_substep&#34;&gt;quadrature_encoder_substep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;High resolution speed measurement using a standard quadrature encoder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/uart_rx&#34;&gt;uart_rx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Implement the receive component of a UART serial port. Attach it to the spare Arm UART to see it receive characters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/uart_tx&#34;&gt;uart_tx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Implement the transmit component of a UART serial port, and print hello world.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/ws2812&#34;&gt;ws2812&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Examples of driving WS2812 addressable RGB LEDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pio/addition&#34;&gt;addition&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add two integers together using PIO. Only around 8 billion times slower than Cortex-M0+.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;PWM&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pwm/hello_pwm&#34;&gt;hello_pwm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimal example of driving PWM output on GPIOs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pwm/led_fade&#34;&gt;led_fade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fade an LED between low and high brightness. An interrupt handler updates the PWM slice&#39;s output level each time the counter wraps.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/pwm/measure_duty_cycle&#34;&gt;measure_duty_cycle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drives a PWM output at a range of duty cycles, and uses another PWM slice in input mode to measure the duty cycle.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Reset&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/reset/hello_reset&#34;&gt;hello_reset&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Perform a hard reset on some peripherals, then bring them back up.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;RTC&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/rtc/hello_rtc&#34;&gt;hello_rtc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a date/time on the RTC, then repeatedly print the current time, 10 times per second, to show it updating.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/rtc/rtc_alarm&#34;&gt;rtc_alarm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set an alarm on the RTC to trigger an interrupt at a date/time 5 seconds into the future.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/rtc/rtc_alarm_repeat&#34;&gt;rtc_alarm_repeat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Trigger an RTC interrupt once per minute.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SHA-256&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/sha/sha256&#34;&gt;hello_sha256&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use the pico_sha256 library to calculate a checksum using the hardware in rp2350&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/sha/mbedtls_sha256&#34;&gt;mbedtls_sha256&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates using the SHA-256 hardware acceleration in mbedtls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SPI&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/bme280_spi&#34;&gt;bme280_spi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attach a BME280 temperature/humidity/pressure sensor via SPI.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/mpu9250_spi&#34;&gt;mpu9250_spi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attach a MPU9250 accelerometer/gyoscope via SPI.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/spi_dma&#34;&gt;spi_dma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use DMA to transfer data both to and from the SPI simultaneously. The SPI is configured for loopback.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/spi_flash&#34;&gt;spi_flash&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase, program and read a serial flash device attached to one of the SPI controllers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/spi_master_slave&#34;&gt;spi_master_slave&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrate SPI communication as master and slave.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/max7219_8x7seg_spi&#34;&gt;max7219_8x7seg_spi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attaching a Max7219 driving an 8 digit 7 segment display via SPI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/spi/max7219_32x8_spi&#34;&gt;max7219_32x8_spi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attaching a Max7219 driving an 32x8 LED display via SPI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;System&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/system/boot_info&#34;&gt;boot_info&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrate how to read and interpret sys info boot info.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/system/hello_double_tap&#34;&gt;hello_double_tap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An LED blink with the &lt;code&gt;pico_bootsel_via_double_reset&lt;/code&gt; library linked. This enters the USB bootloader when it detects the system being reset twice in quick succession, which is useful for boards with a reset button but no BOOTSEL button.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/system/rand&#34;&gt;rand&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrate how to use the pico random number functions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/system/narrow_io_write&#34;&gt;narrow_io_write&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrate the effects of 8-bit and 16-bit writes on a 32-bit IO register.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/system/unique_board_id&#34;&gt;unique_board_id&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read the 64 bit unique ID from external flash, which serves as a unique identifier for the board.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Timer&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/timer/hello_timer&#34;&gt;hello_timer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set callbacks on the system timer, which repeat at regular intervals. Cancel the timer when we&#39;re done.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/timer/periodic_sampler&#34;&gt;periodic_sampler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sample GPIOs in a timer callback, and push the samples into a concurrency-safe queue. Pop data from the queue in code running in the foreground.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/timer/timer_lowlevel&#34;&gt;timer_lowlevel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example of direct access to the timer hardware. Not generally recommended, as the SDK may use the timer for IO timeouts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;UART&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/uart/hello_uart&#34;&gt;hello_uart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print some text from one of the UART serial ports, without going through &lt;code&gt;stdio&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/uart/lcd_uart&#34;&gt;lcd_uart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display text and symbols on a 16x02 RGB LCD display via UART&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/uart/uart_advanced&#34;&gt;uart_advanced&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use some other UART features like RX interrupts, hardware control flow, and data formats other than 8n1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Universal&lt;/h3&gt; &#xA;&lt;p&gt;These are examples of how to build universal binaries which run on RP2040, and RP2350 Arm &amp;amp; RISC-V. These require you to set &lt;code&gt;PICO_ARM_TOOLCHAIN_PATH&lt;/code&gt; and &lt;code&gt;PICO_RISCV_TOOLCHAIN_PATH&lt;/code&gt; to appropriate paths, to ensure you have compilers for both architectures.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/universal/hello_universal&#34;&gt;hello_universal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The obligatory Hello World program for Pico (USB and serial output). On RP2350 it will reboot to the other architecture after every 10 prints.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/universal/CMakeLists.txt#L107&#34;&gt;nuke_universal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Same as the &lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/flash/nuke&#34;&gt;nuke&lt;/a&gt; binary, but universal. On RP2350 runs as a packaged SRAM binary, so is written to flash and copied to SRAM by the bootloader&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;USB Device&lt;/h3&gt; &#xA;&lt;h4&gt;TinyUSB Examples&lt;/h4&gt; &#xA;&lt;p&gt;Most of the USB device examples come directly from the TinyUSB device examples directory &lt;a href=&#34;https://github.com/hathach/tinyusb/tree/master/examples/device&#34;&gt;here&lt;/a&gt;. Those that are supported on RP2040 devices are automatically included as part of the pico-examples build as targets named &lt;code&gt;tinyusb_dev_&amp;lt;example_name&amp;gt;&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/hathach/tinyusb/tree/master/examples/device/hid_composite&#34;&gt;https://github.com/hathach/tinyusb/tree/master/examples/device/hid_composite&lt;/a&gt; is built as &lt;code&gt;tinyusb_dev_hid_composite&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At the time of writing, these examples are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tinyusb_dev_audio_4_channel_mic&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_audio_test&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_board_test&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_cdc_dual_ports&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_cdc_msc&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_dfu&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_dfu_runtime&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_dynamic_configuration&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_hid_composite&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_hid_generic_inout&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_hid_multiple_interface&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_midi_test&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_msc_dual_lun&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_net_lwip_webserver&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_uac2_headset&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_usbtmc&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_video_capture&lt;/li&gt; &#xA; &lt;li&gt;tinyusb_dev_webusb_serial&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Whilst these examples ably demonstrate how to use TinyUSB in device mode, their &lt;code&gt;CMakeLists.txt&lt;/code&gt; is set up in a way tailored to how TinyUSB builds their examples within their source tree.&lt;/p&gt; &#xA;&lt;p&gt;For a better example of how to configure &lt;code&gt;CMakeLists.txt&lt;/code&gt; for using TinyUSB in device mode with the Raspberry Pi SDK see below:&lt;/p&gt; &#xA;&lt;h4&gt;SDK build example&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/usb/device/dev_hid_composite&#34;&gt;dev_hid_composite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A copy of the TinyUSB device example with the same name, but with a CMakeLists.txt which demonstrates how to add a dependency on the TinyUSB device libraries with the Raspberry Pi Pico SDK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Low Level example&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/usb/device/dev_lowlevel&#34;&gt;dev_lowlevel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A USB Bulk loopback implemented with direct access to the USB hardware (no TinyUSB)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;USB Host&lt;/h3&gt; &#xA;&lt;p&gt;All the USB host examples come directly from the TinyUSB host examples directory &lt;a href=&#34;https://github.com/hathach/tinyusb/tree/master/examples/host&#34;&gt;here&lt;/a&gt;. Those that are supported on RP2040 devices are automatically included as part of the pico-examples build as targets named &lt;code&gt;tinyusb_host_&amp;lt;example_name&amp;gt;&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/hathach/tinyusb/tree/master/examples/host/cdc_msc_hid&#34;&gt;https://github.com/hathach/tinyusb/tree/master/examples/host/cdc_msc_hid&lt;/a&gt; is built as &lt;code&gt;tinyusb_host_cdc_msc_hid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At the time of writing, there is only one host example available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tinyusb_host_cdc_msc_hid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;USB Dual Mode&lt;/h3&gt; &#xA;&lt;p&gt;USB Dual Mode uses PIO as a USB host controller and the RP2040 USB device controller as a device controller. All the USB dual examples come directly from the TinyUSB dual examples directory &lt;a href=&#34;https://github.com/hathach/tinyusb/tree/master/examples/dual&#34;&gt;here&lt;/a&gt;. Those that are supported on RP2040 devices are automatically included as part of the pico-examples build as targets named &lt;code&gt;tinyusb_dual_&amp;lt;example_name&amp;gt;&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/hathach/tinyusb/tree/master/examples/dual/host_hid_to_device_cdc&#34;&gt;https://github.com/hathach/tinyusb/tree/master/examples/dual/host_hid_to_device_cdc&lt;/a&gt; is built as &lt;code&gt;tinyusb_dual_host_hid_to_device_cdc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At the time of writing, there is only one dual example available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tinyusb_dual_host_hid_to_device_cdc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Watchdog&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raspberrypi/pico-examples/master/watchdog/hello_watchdog&#34;&gt;hello_watchdog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the watchdog timer, and let it expire. Detect the reboot, and halt.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>