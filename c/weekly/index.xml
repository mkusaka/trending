<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-25T01:38:09Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/WSL2-Linux-Kernel</title>
    <updated>2025-05-25T01:38:09Z</updated>
    <id>tag:github.com,2025-05-25:/microsoft/WSL2-Linux-Kernel</id>
    <link href="https://github.com/microsoft/WSL2-Linux-Kernel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The source for the Linux kernel used in Windows Subsystem for Linux 2 (WSL2)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/microsoft/WSL2-Linux-Kernel&#34;&gt;WSL2-Linux-Kernel&lt;/a&gt; repo contains the kernel source code and configuration files for the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/about#what-is-wsl-2&#34;&gt;WSL2&lt;/a&gt; kernel.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting Bugs&lt;/h1&gt; &#xA;&lt;p&gt;If you discover an issue relating to WSL or the WSL2 kernel, please report it on the &lt;a href=&#34;https://github.com/microsoft/WSL/issues/new/choose&#34;&gt;WSL GitHub project&lt;/a&gt;. It is not possible to report issues on the &lt;a href=&#34;https://github.com/microsoft/WSL2-Linux-Kernel&#34;&gt;WSL2-Linux-Kernel&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re able to determine that the bug is present in the upstream Linux kernel, you may want to work directly with the upstream developers. Please note that there are separate processes for reporting a &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/bug-hunting.html#reporting-the-bug&#34;&gt;normal bug&lt;/a&gt; and a &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/security-bugs.html&#34;&gt;security bug&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feature Requests&lt;/h1&gt; &#xA;&lt;p&gt;Is there a missing feature that you&#39;d like to see? Please request it on the &lt;a href=&#34;https://github.com/microsoft/WSL/issues/new/choose&#34;&gt;WSL GitHub project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re able and interested in contributing kernel code for your feature request, we encourage you to &lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/submitting-patches.html&#34;&gt;submit the change upstream&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build Instructions&lt;/h1&gt; &#xA;&lt;p&gt;Instructions for building an x86_64 WSL2 kernel with an Ubuntu distribution using bash are as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the build dependencies:&lt;br&gt; &lt;code&gt;$ sudo apt install build-essential flex bison dwarves libssl-dev libelf-dev cpio qemu-utils&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify WSL2 kernel configs (optional):&lt;br&gt; &lt;code&gt;$ make menuconfig KCONFIG_CONFIG=Microsoft/config-wsl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the kernel using the WSL2 kernel configuration and put the modules in a &lt;code&gt;modules&lt;/code&gt; folder under the current working directory:&lt;br&gt; &lt;code&gt;$ make KCONFIG_CONFIG=Microsoft/config-wsl &amp;amp;&amp;amp; make INSTALL_MOD_PATH=&#34;$PWD/modules&#34; modules_install&lt;/code&gt;&lt;/p&gt; &lt;p&gt;You may wish to include &lt;code&gt;-j$(nproc)&lt;/code&gt; on the first &lt;code&gt;make&lt;/code&gt; command to build in parallel.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then, you can use a provided script to create a VHDX containing the modules: &lt;code&gt;$ sudo ./Microsoft/scripts/gen_modules_vhdx.sh &#34;$PWD/modules&#34; $(make -s kernelrelease) modules.vhdx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To save space, you can now delete the compilation artifacts: &lt;code&gt;$ make clean &amp;amp;&amp;amp; rm -r &#34;$PWD/modules&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you can also build the modules VHDX manually as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Calculate the modules size (plus 256MiB for slack): &lt;code&gt;modules_size=$(du -bs &#34;$PWD/modules&#34; | awk &#39;{print $1;}&#39;); modules_size=$((modules_size + (256 * (1&amp;lt;&amp;lt;20))));&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a blank image file for the modules: &lt;code&gt;dd if=/dev/zero of=&#34;$PWD/modules.img&#34; bs=1024 count=$((modules_size / 1024))&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup filesystem and mount img file: &lt;code&gt;lo_dev=$(sudo losetup --find --show &#34;$PWD/modules.img&#34;) &amp;amp;&amp;amp; sudo mkfs -t ext4 &#34;$lo_dev&#34; &amp;amp;&amp;amp; mkdir &#34;$PWD/modules_img&#34; &amp;amp;&amp;amp; sudo mount &#34;$lo_dev&#34; &#34;$PWD/modules_img&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy over the modules, unmount the img now that we&#39;re done with it: &lt;code&gt;sudo cp -r &#34;$PWD/modules/lib/modules/$(make -s kernelrelease)&#34;/* &#34;$PWD/modules_img&#34; &amp;amp;&amp;amp; sudo umount &#34;$PWD/modules_img&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Convert the img to VHDX: &lt;code&gt;qemu-img convert -O vhdx &#34;$PWD/modules.img&#34; &#34;$PWD/modules.vhdx&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clean up: &lt;code&gt;rm modules.img # optionally $PWD/modules dir and the now-empty $PWD_modules_img dir too&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Install Instructions&lt;/h1&gt; &#xA;&lt;p&gt;Please see the documentation on the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/wsl-config#configure-global-options-with-wslconfig&#34;&gt;.wslconfig configuration file&lt;/a&gt; for information on using a custom built kernel.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xilinx/linux-xlnx</title>
    <updated>2025-05-25T01:38:09Z</updated>
    <id>tag:github.com,2025-05-25:/Xilinx/linux-xlnx</id>
    <link href="https://github.com/Xilinx/linux-xlnx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Linux kernel from Xilinx&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux kernel&lt;/h1&gt; &#xA;&lt;p&gt;There are several guides for kernel developers and users. These guides can be rendered in a number of formats, like HTML and PDF. Please read Documentation/admin-guide/README.rst first.&lt;/p&gt; &#xA;&lt;p&gt;In order to build the documentation, use &lt;code&gt;make htmldocs&lt;/code&gt; or &lt;code&gt;make pdfdocs&lt;/code&gt;. The formatted documentation can also be read online at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://www.kernel.org/doc/html/latest/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are various text files in the Documentation/ subdirectory, several of them using the reStructuredText markup notation.&lt;/p&gt; &#xA;&lt;p&gt;Please read the Documentation/process/changes.rst file, as it contains the requirements for building and running the kernel, and information about the problems which may result by upgrading your kernel.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PerformanC/ReZygisk</title>
    <updated>2025-05-25T01:38:09Z</updated>
    <id>tag:github.com,2025-05-25:/PerformanC/ReZygisk</id>
    <link href="https://github.com/PerformanC/ReZygisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transparent implementation of Zygisk.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReZygisk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_id-ID.md&#34;&gt;Bahasa Indonesia&lt;/a&gt;|&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_vi-VN.md&#34;&gt;Tiếng Việt&lt;/a&gt;|&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_pt-BR.md&#34;&gt;Português Brasileiro&lt;/a&gt;|&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_fr-FR.md&#34;&gt;French&lt;/a&gt;|&lt;a href=&#34;https://raw.githubusercontent.com/PerformanC/ReZygisk/main/READMEs/README_ja-JP.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ReZygisk is a fork of Zygisk Next, a standalone implementation of Zygisk, providing Zygisk API support for KernelSU, APatch and Magisk (Official and Kitsune).&lt;/p&gt; &#xA;&lt;p&gt;It aims to modernize and re-write the codebase to C entirely, allowing a more efficient and faster implementation of the Zygisk API with a more permissive, and FOSS friendly, license.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;The latest releases of Zygisk Next are not open-source, reserving entirely the code for its developers. Not only does that limit our ability to contribute to the project, but also impossibilities the audit of the code, which is a major security concern, as Zygisk Next is a module that runs with superuser (root) privileges, having access to the entire system.&lt;/p&gt; &#xA;&lt;p&gt;The Zygisk Next developers are famous and trusted in the Android community, however, this doesn&#39;t mean that the code is not malicious or vulnerable. We (PerformanC) understand they have their reasons to keep the code closed-source, but we believe the contrary.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FOSS (Forever)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Android NDK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native Development Kit for Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;C++ Dependencies&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dependency&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsplt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple PLT Hook for Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;1. Select the right zip&lt;/h3&gt; &#xA;&lt;p&gt;The selection of the build/zip is important, as it will determine how hidden and stable ReZygisk will be. This, however, is not a hard task:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;release&lt;/code&gt; should be the one chosen for most cases, it removes app-level logging and offers more optimized binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;, however, offers the opposite, with heavy logging and no optimizations, For this reason, &lt;strong&gt;you should only use it for debugging purposes&lt;/strong&gt; and &lt;strong&gt;when obtaining logs for creating an Issue&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As for branches, you should always use the &lt;code&gt;main&lt;/code&gt; branch, unless told otherwise by the developers, or if you want to test upcoming features and are aware of the risks involved.&lt;/p&gt; &#xA;&lt;h3&gt;2. Flash the zip&lt;/h3&gt; &#xA;&lt;p&gt;After choosing the right build, you should flash it using your current root manager, like Magisk or KernelSU. You can do this by going to the &lt;code&gt;Modules&lt;/code&gt; section of your root manager and selecting the zip you downloaded.&lt;/p&gt; &#xA;&lt;p&gt;After flashing, check the installation logs to ensure there are no errors, and if everything is fine, you can reboot your device.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Magisk users should disable built-in Zygisk, as it will conflict with ReZygisk. This can be done by going to the &lt;code&gt;Settings&lt;/code&gt; section of Magisk and disabling the &lt;code&gt;Zygisk&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3. Verify the installation&lt;/h3&gt; &#xA;&lt;p&gt;After rebooting, you can verify if ReZygisk is working properly by checking the module description in the &lt;code&gt;Modules&lt;/code&gt; section of your root manager. The description should indicate that the necessary daemons are running. For example, if your environment supports both 64-bit and 32-bit, it should look similar to this: &lt;code&gt;[monitor: 😋 tracing, zygote64: 😋 injected, daemon64: 😋 running (...) zygote32: 😋 injected, daemon32: 😋 running (...)] Standalone implementation of Zygisk.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;There are currently two different ways to contribute translations for ReZygisk:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For translations of the README, you can create a new file in the &lt;code&gt;READMEs&lt;/code&gt; folder, following the naming convention of &lt;code&gt;README_&amp;lt;language&amp;gt;.md&lt;/code&gt;, where &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; is the language code (e.g., &lt;code&gt;README_pt-BR.md&lt;/code&gt; for Brazilian Portuguese), and open a pull request to the &lt;code&gt;main&lt;/code&gt; branch with your changes.&lt;/li&gt; &#xA; &lt;li&gt;For translations of the ReZygisk WebUI, you should first contribute to our &lt;a href=&#34;https://crowdin.com/project/rezygisk&#34;&gt;Crowdin&lt;/a&gt;. Once approved retrieve the &lt;code&gt;.json&lt;/code&gt; file from there and open a pull request with your changes -- adding the &lt;code&gt;.json&lt;/code&gt; file to the &lt;code&gt;webroot/lang&lt;/code&gt; folder and your credits to the &lt;code&gt;TRANSLATOR.md&lt;/code&gt; file, in alphabetic order.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For any question related to ReZygisk or other PerformanC projects, feel free to join any of the following channels below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord Channel: &lt;a href=&#34;https://discord.gg/uPveNfTuCJ&#34;&gt;PerformanC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ReZygisk Telegram Channel: &lt;a href=&#34;https://t.me/rezygisk&#34;&gt;@rezygisk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PerformanC Telegram Channel: &lt;a href=&#34;https://t.me/performancorg&#34;&gt;@performancorg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PerformanC Signal Group: &lt;a href=&#34;https://signal.group/#CjQKID3SS8N5y4lXj3VjjGxVJnzNsTIuaYZjj3i8UhipAS0gEhAedxPjT5WjbOs6FUuXptcT&#34;&gt;@performanc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;It is mandatory to follow PerformanC&#39;s &lt;a href=&#34;https://github.com/PerformanC/contributing&#34;&gt;Contribution Guidelines&lt;/a&gt; to contribute to ReZygisk. Following its Security Policy, Code of Conduct, and syntax standard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ReZygisk is licensed majoritaly under GPL, by Dr-TSNG, but also AGPL 3.0, by The PerformanC Organization, for re-written code. You can read more about it on &lt;a href=&#34;https://opensource.org/licenses/AGPL-3.0&#34;&gt;Open Source Initiative&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>