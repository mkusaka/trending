<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-30T01:39:39Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pgbackrest/pgbackrest</title>
    <updated>2024-06-30T01:39:39Z</updated>
    <id>tag:github.com,2024-06-30:/pgbackrest/pgbackrest</id>
    <link href="https://github.com/pgbackrest/pgbackrest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reliable PostgreSQL Backup &amp; Restore&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgBackRest &lt;br&gt; Reliable PostgreSQL Backup &amp;amp; Restore&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;pgBackRest is a reliable backup and restore solution for PostgreSQL that seamlessly scales up to the largest databases and workloads.&lt;/p&gt; &#xA;&lt;p&gt;pgBackRest &lt;a href=&#34;https://github.com/pgbackrest/pgbackrest/releases/tag/release/2.52&#34;&gt;v2.52&lt;/a&gt; is the current stable release. Release notes are on the &lt;a href=&#34;http://www.pgbackrest.org/release.html&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Please find us on &lt;a href=&#34;https://github.com/pgbackrest/pgbackrest&#34;&gt;GitHub&lt;/a&gt; and give us a star if you like pgBackRest!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Parallel Backup &amp;amp; Restore&lt;/h3&gt; &#xA;&lt;p&gt;Compression is usually the bottleneck during backup operations so pgBackRest solves this problem with parallel processing and more efficient compression algorithms such as lz4 and zstd.&lt;/p&gt; &#xA;&lt;h3&gt;Local or Remote Operation&lt;/h3&gt; &#xA;&lt;p&gt;A custom protocol allows pgBackRest to backup, restore, and archive locally or remotely via TLS/SSH with minimal configuration. An interface to query PostgreSQL is also provided via the protocol layer so that remote access to PostgreSQL is never required, which enhances security.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Repositories&lt;/h3&gt; &#xA;&lt;p&gt;Multiple repositories allow, for example, a local repository with minimal retention for fast restores and a remote repository with a longer retention for redundancy and access across the enterprise.&lt;/p&gt; &#xA;&lt;h3&gt;Full, Differential, &amp;amp; Incremental Backups (at File or Block Level)&lt;/h3&gt; &#xA;&lt;p&gt;Full, differential, and incremental backups are supported. pgBackRest is not susceptible to the time resolution issues of rsync, making differential and incremental backups safe without the requirement to checksum each file. Block-level backups save space by only copying the parts of files that have changed.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Rotation &amp;amp; Archive Expiration&lt;/h3&gt; &#xA;&lt;p&gt;Retention polices can be set for full and differential backups to create coverage for any time frame. The WAL archive can be maintained for all backups or strictly for the most recent backups. In the latter case WAL required to make older backups consistent will be maintained in the archive.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Integrity&lt;/h3&gt; &#xA;&lt;p&gt;Checksums are calculated for every file in the backup and rechecked during a restore or verify. After a backup finishes copying files, it waits until every WAL segment required to make the backup consistent reaches the repository.&lt;/p&gt; &#xA;&lt;p&gt;Backups in the repository may be stored in the same format as a standard PostgreSQL cluster (including tablespaces). If compression is disabled and hard links are enabled it is possible to snapshot a backup in the repository and bring up a PostgreSQL cluster directly on the snapshot. This is advantageous for terabyte-scale databases that are time consuming to restore in the traditional way.&lt;/p&gt; &#xA;&lt;p&gt;All operations utilize file and directory level fsync to ensure durability.&lt;/p&gt; &#xA;&lt;h3&gt;Page Checksums&lt;/h3&gt; &#xA;&lt;p&gt;If page checksums are enabled pgBackRest will validate the checksums for every file that is copied during a backup. All page checksums are validated during a full backup and checksums in files that have changed are validated during differential and incremental backups.&lt;/p&gt; &#xA;&lt;p&gt;Validation failures do not stop the backup process, but warnings with details of exactly which pages have failed validation are output to the console and file log.&lt;/p&gt; &#xA;&lt;p&gt;This feature allows page-level corruption to be detected early, before backups that contain valid copies of the data have expired.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Resume&lt;/h3&gt; &#xA;&lt;p&gt;An interrupted backup can be resumed from the point where it was stopped. Files that were already copied are compared with the checksums in the manifest to ensure integrity. Since this operation can take place entirely on the repository host, it reduces load on the PostgreSQL host and saves time since checksum calculation is faster than compressing and retransmitting data.&lt;/p&gt; &#xA;&lt;h3&gt;Streaming Compression &amp;amp; Checksums&lt;/h3&gt; &#xA;&lt;p&gt;Compression and checksum calculations are performed in stream while files are being copied to the repository, whether the repository is located locally or remotely.&lt;/p&gt; &#xA;&lt;p&gt;If the repository is on a repository host, compression is performed on the PostgreSQL host and files are transmitted in a compressed format and simply stored on the repository host. When compression is disabled a lower level of compression is utilized to make efficient use of available bandwidth while keeping CPU cost to a minimum.&lt;/p&gt; &#xA;&lt;h3&gt;Delta Restore&lt;/h3&gt; &#xA;&lt;p&gt;The manifest contains checksums for every file in the backup so that during a restore it is possible to use these checksums to speed processing enormously. On a delta restore any files not present in the backup are first removed and then checksums are generated for the remaining files. Files that match the backup are left in place and the rest of the files are restored as usual. Parallel processing can lead to a dramatic reduction in restore times.&lt;/p&gt; &#xA;&lt;h3&gt;Parallel, Asynchronous WAL Push &amp;amp; Get&lt;/h3&gt; &#xA;&lt;p&gt;Dedicated commands are included for pushing WAL to the archive and getting WAL from the archive. Both commands support parallelism to accelerate processing and run asynchronously to provide the fastest possible response time to PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;WAL push automatically detects WAL segments that are pushed multiple times and de-duplicates when the segment is identical, otherwise an error is raised. Asynchronous WAL push allows transfer to be offloaded to another process which compresses WAL segments in parallel for maximum throughput. This can be a critical feature for databases with extremely high write volume.&lt;/p&gt; &#xA;&lt;p&gt;Asynchronous WAL get maintains a local queue of WAL segments that are decompressed and ready for replay. This reduces the time needed to provide WAL to PostgreSQL which maximizes replay speed. Higher-latency connections and storage (such as S3) benefit the most.&lt;/p&gt; &#xA;&lt;p&gt;The push and get commands both ensure that the database and repository match by comparing PostgreSQL versions and system identifiers. This virtually eliminates the possibility of misconfiguring the WAL archive location.&lt;/p&gt; &#xA;&lt;h3&gt;Tablespace &amp;amp; Link Support&lt;/h3&gt; &#xA;&lt;p&gt;Tablespaces are fully supported and on restore tablespaces can be remapped to any location. It is also possible to remap all tablespaces to one location with a single command which is useful for development restores.&lt;/p&gt; &#xA;&lt;p&gt;File and directory links are supported for any file or directory in the PostgreSQL cluster. When restoring it is possible to restore all links to their original locations, remap some or all links, or restore some or all links as normal files or directories within the cluster directory.&lt;/p&gt; &#xA;&lt;h3&gt;S3, Azure, and GCS Compatible Object Store Support&lt;/h3&gt; &#xA;&lt;p&gt;pgBackRest repositories can be located in S3, Azure, and GCS compatible object stores to allow for virtually unlimited capacity and retention.&lt;/p&gt; &#xA;&lt;h3&gt;Encryption&lt;/h3&gt; &#xA;&lt;p&gt;pgBackRest can encrypt the repository to secure backups wherever they are stored.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility with ten versions of PostgreSQL&lt;/h3&gt; &#xA;&lt;p&gt;pgBackRest includes support for ten versions of PostgreSQL, the five supported versions and the last five EOL versions. This allows ample time to upgrade to a supported version.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;pgBackRest strives to be easy to configure and operate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.pgbackrest.org/user-guide-index.html&#34;&gt;User guides&lt;/a&gt; for various operating systems and PostgreSQL versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.pgbackrest.org/command.html&#34;&gt;Command reference&lt;/a&gt; for command-line operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.pgbackrest.org/configuration.html&#34;&gt;Configuration reference&lt;/a&gt; for creating pgBackRest configurations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation for v1 can be found &lt;a href=&#34;http://www.pgbackrest.org/1&#34;&gt;here&lt;/a&gt;. No further releases are planned for v1 because v2 is backward-compatible with v1 options and repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to pgBackRest are always welcome! Please see our &lt;a href=&#34;https://github.com/pgbackrest/pgbackrest/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; for details on how to contribute features, improvements or issues.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;pgBackRest is completely free and open source under the &lt;a href=&#34;https://github.com/pgbackrest/pgbackrest/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license. You may use it for personal or commercial purposes without any restrictions whatsoever. Bug reports are taken very seriously and will be addressed as quickly as possible.&lt;/p&gt; &#xA;&lt;p&gt;Creating a robust disaster recovery policy with proper replication and backup strategies can be a very complex and daunting task. You may find that you need help during the architecture phase and ongoing support to ensure that your enterprise continues running smoothly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.crunchydata.com&#34;&gt;Crunchy Data&lt;/a&gt; provides packaged versions of pgBackRest for major operating systems and expert full life-cycle commercial support for pgBackRest and all things PostgreSQL. &lt;a href=&#34;http://www.crunchydata.com&#34;&gt;Crunchy Data&lt;/a&gt; is committed to providing open source solutions with no vendor lock-in, ensuring that cross-compatibility with the community version of pgBackRest is always strictly maintained.&lt;/p&gt; &#xA;&lt;p&gt;Please visit &lt;a href=&#34;http://www.crunchydata.com&#34;&gt;Crunchy Data&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Recognition&lt;/h2&gt; &#xA;&lt;p&gt;Primary recognition goes to Stephen Frost for all his valuable advice and criticism during the development of pgBackRest.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.crunchydata.com&#34;&gt;Crunchy Data&lt;/a&gt; has contributed significant time and resources to pgBackRest and continues to actively support development. &lt;a href=&#34;http://www.resonate.com&#34;&gt;Resonate&lt;/a&gt; also contributed to the development of pgBackRest and allowed early (but well tested) versions to be installed as their primary PostgreSQL backup solution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thenounproject.com/search/?q=lounge+chair&amp;amp;i=129971&#34;&gt;Armchair&lt;/a&gt; graphic by &lt;a href=&#34;https://thenounproject.com/sandorsz&#34;&gt;Sandor Szabo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MrForExample/ComfyUI-3D-Pack</title>
    <updated>2024-06-30T01:39:39Z</updated>
    <id>tag:github.com,2024-06-30:/MrForExample/ComfyUI-3D-Pack</id>
    <link href="https://github.com/MrForExample/ComfyUI-3D-Pack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensive node suite that enables ComfyUI to process 3D inputs (Mesh &amp; UV Texture, etc) using cutting edge algorithms (3DGS, NeRF, etc.)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ComfyUI-3D-Pack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make ComfyUI generates 3D assets as good &amp;amp; convenient as it generates image/video!&lt;/strong&gt; &lt;br&gt; This is an extensive node suite that enables ComfyUI to process 3D inputs (Mesh &amp;amp; UV Texture, etc.) using cutting edge algorithms (3DGS, NeRF, etc.) and models (InstantMesh, CRM, TripoSR, etc.)&lt;/p&gt; &#xA;&lt;span style=&#34;font-size:1.5em;&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#currently-support&#34;&gt;Features&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#install&#34;&gt;Install&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#run&#34;&gt;Run&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#tips&#34;&gt;Tips&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#supporters&#34;&gt;Supporters&lt;/a&gt; &lt;/span&gt; &#xA;&lt;h2&gt;Currently support:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For use case please check &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/&#34;&gt;Example Workflows&lt;/a&gt;. [&lt;strong&gt;Last update: 07/06/2024&lt;/strong&gt;]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; you need to put &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Inputs_Files/&#34;&gt;Example Inputs Files &amp;amp; Folders&lt;/a&gt; under ComfyUI Root Directory\ComfyUI\input folder before you can run the example workflow&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/C0nsumption/Consume-ComfyUI-Workflows/tree/main/assets/tripo_sr/00&#34;&gt;tripoSR-layered-diffusion workflow&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/c0nsumption_&#34;&gt;@Consumption&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unique3D&lt;/strong&gt;: &lt;a href=&#34;https://github.com/AiuniAI/Unique3D&#34;&gt;AiuniAI/Unique3D&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Four stages pipeline: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Single image to 4 multi-view images with resulution: 256X256&lt;/li&gt; &#xA;     &lt;li&gt;Consistent Multi-view images Upscale to 512X512, super resolution to 2048X2048&lt;/li&gt; &#xA;     &lt;li&gt;Multi-view images to Normal maps with resulution: 512X512, super resolution to 2048X2048&lt;/li&gt; &#xA;     &lt;li&gt;Multi-view images &amp;amp; Normal maps to 3D mesh with texture&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;To use the &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/Unique3D/Unique3D_All_Stages.json&#34;&gt;pure Unique3D workflow&lt;/a&gt;, Download Models: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://huggingface.co/spaces/Wuvin/Unique3D/tree/main/ckpt/img2mvimg&#34;&gt;img2mvimg&lt;/a&gt; and put it into &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/checkpoints/Wuvin/Unique3D/image2mvimage&#34;&gt;./checkpoints/Wuvin/Unique3D/image2mvimage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://huggingface.co/spaces/Wuvin/Unique3D/tree/main/ckpt/image2normal&#34;&gt;image2normal&lt;/a&gt; and put it into &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/checkpoints/Wuvin/Unique3D/image2normal&#34;&gt;./checkpoints/Wuvin/Unique3D/image2normal&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://huggingface.co/spaces/Wuvin/Unique3D/tree/main/ckpt/controlnet-tile&#34;&gt;fine-tuned controlnet-tile&lt;/a&gt; and put it into &lt;code&gt;Your ComfyUI root directory/ComfyUI/models/controlnet&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/blob/main/models/ip-adapter_sd15.safetensors&#34;&gt;ip-adapter_sd15&lt;/a&gt; and put it into &lt;code&gt;Your ComfyUI root directory/ComfyUI/models/ipadapter&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth&#34;&gt;RealESRGAN_x4plus&lt;/a&gt; and put it into &lt;code&gt;Your ComfyUI root directory/ComfyUI/models/upscale_models&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&#xA;   &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/45dd6bfc-4f2b-4b1f-baed-13a1b0722896&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Era3D Diffusion Model&lt;/strong&gt;: &lt;a href=&#34;https://github.com/pengHTYX/Era3D&#34;&gt;pengHTYX/Era3D&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Single image to 6 multi-view images &amp;amp; normal maps with resulution: 512X512&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Note: you need at least 16GB vram to run this model&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&#xA;   &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/fc210cac-6c7d-4a55-926c-adb5fb7b0c57&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;InstantMesh Reconstruction Model&lt;/strong&gt;: &lt;a href=&#34;https://github.com/TencentARC/InstantMesh&#34;&gt;TencentARC/InstantMesh&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sparse multi-view images with white background to 3D Mesh with RGB texture&lt;/li&gt; &#xA;   &lt;li&gt;Works with arbitrary MVDiffusion models (Probably works best with Zero123++, but also works with CRM MVDiffusion model)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&#xA;   &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/a0648a44-f8cb-4f78-9704-a907f9174936&#34;&gt;&lt;/video&gt; &#xA;   &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/33aecedb-f595-4c12-90dd-89d5f718598e&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero123++&lt;/strong&gt;: &lt;a href=&#34;https://github.com/SUDO-AI-3D/zero123plus&#34;&gt;SUDO-AI-3D/zero123plus&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Single image to 6 view images with resulution: 320X320&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CRM&lt;/strong&gt;: &lt;a href=&#34;https://github.com/thu-ml/CRM&#34;&gt;thu-ml/CRM&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Three stages pipeline:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Single image to 6 view images (Front, Back, Left, Right, Top &amp;amp; Down)&lt;/li&gt; &#xA;     &lt;li&gt;Single image &amp;amp; 6 view images to 6 same views CCMs (Canonical Coordinate Maps)&lt;/li&gt; &#xA;     &lt;li&gt;6 view images &amp;amp; CCMs to 3D mesh&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Note: For low vram pc, if you can&#39;t fit all three models for each stages into your GPU memory, then you can divide those three stages into different comfy workflow and run them separately&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/cf68bb83-9244-44df-9db8-f80eb3fdc29e&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TripoSR&lt;/strong&gt;: &lt;a href=&#34;https://github.com/VAST-AI-Research/TripoSR&#34;&gt;VAST-AI-Research/TripoSR&lt;/a&gt; | &lt;a href=&#34;https://github.com/flowtyone/ComfyUI-Flowty-TripoSR&#34;&gt;ComfyUI-Flowty-TripoSR&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Generate NeRF representation and using marching cube to turn it into 3D mesh&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/ec4f8df5-5907-4bbf-ba19-c0565fe95a97&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wonder3D&lt;/strong&gt;: &lt;a href=&#34;https://github.com/xxlong0/Wonder3D&#34;&gt;xxlong0/Wonder3D&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generate spatial consistent 6 views images &amp;amp; normal maps from a single image &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Wonder3D_FatCat_MVs.jpg&#34; alt=&#34;Wonder3D_FatCat_MVs&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Large Multiview Gaussian Model&lt;/strong&gt;: &lt;a href=&#34;https://github.com/3DTopia/LGM&#34;&gt;3DTopia/LGM&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Enable single image to 3D Gaussian in less than 30 seconds on a RTX3080 GPU, later you can also convert 3D Gaussian to mesh&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/e221d7f8-49ac-4ed4-809b-d4c790b6270e&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Triplane Gaussian Transformers&lt;/strong&gt;: &lt;a href=&#34;https://github.com/VAST-AI-Research/TriplaneGaussian&#34;&gt;VAST-AI-Research/TriplaneGaussian&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Enable single image to 3D Gaussian in less than 10 seconds on a RTX3080 GPU, later you can also convert 3D Gaussian to mesh&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/90e7f298-bdbd-4c15-9378-1ca46cbb4871&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Preview 3DGS and 3D Mesh&lt;/strong&gt;: 3D Visualization inside ComfyUI:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/huggingface/gsplat.js/tree/main&#34;&gt;gsplat.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/mrdoob/three.js/tree/dev&#34;&gt;three.js&lt;/a&gt; for 3DGS &amp;amp; 3D Mesh visualization respectively&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Custumizable background base on JS library: &lt;a href=&#34;https://github.com/mdbassit/Coloris&#34;&gt;mdbassit/Coloris&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/9f3c56b1-afb3-4bf1-8845-ab1025a87463&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stack Orbit Camera Poses&lt;/strong&gt;: Automatically generate all range of camera pose combinations&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can use it to conditioning the &lt;a href=&#34;https://comfyanonymous.github.io/ComfyUI_examples/3d/&#34;&gt;StableZero123 (You need to Download the checkpoint first)&lt;/a&gt;, with full range of camera poses in one prompt pass&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can use it to generate the orbit camera poses and directly input to other 3D process node (e.g. GaussianSplatting and BakeTextureToMesh)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Example usage:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Clockwise_Camposes.png&#34; width=&#34;256&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Counter_Clockwise_Camposes.png&#34; width=&#34;256&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Clockwise.gif&#34; width=&#34;256&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Counter_Clockwise.gif&#34; width=&#34;256&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Coordinate system:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Azimuth: In top view, from angle 0 rotate 360 degree with step -90 you get (0, -90, -180/180, 90, 0), in this case camera rotates clock-wise, vice versa.&lt;/li&gt; &#xA;     &lt;li&gt;Elevation: 0 when camera points horizontally forward, pointing down to the ground is negitive angle, vice versa.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;FlexiCubes&lt;/strong&gt;: &lt;a href=&#34;https://github.com/nv-tlabs/FlexiCubes&#34;&gt;nv-tlabs/FlexiCubes&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Multi-View depth &amp;amp; mask (optional normal maps) as inputs&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Export to 3D Mesh&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Usage guide:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;em&gt;voxel_grids_resolution&lt;/em&gt;: determine mesh resolution/quality&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;depth_min_distance&lt;/em&gt; &lt;em&gt;depth_max_distance&lt;/em&gt; : distance from object to camera, object parts in the render that is closer(futher) to camera than depth_min_distance(depth_max_distance) will be rendered with pure white(black) RGB value 1, 1, 1(0, 0, 0)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;mask_loss_weight&lt;/em&gt;: Control the silhouette of reconstrocted 3D mesh&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;depth_loss_weight&lt;/em&gt;: Control the shape of reconstrocted 3D mesh, this loss will also affect the mesh deform detail on the surface, so results depends on quality of the depth map&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;normal_loss_weight&lt;/em&gt;: Optional. Use to refine the mesh deform detail on the surface&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;sdf_regularizer_weight&lt;/em&gt;: Helps to remove floaters in areas of the shape that are not supervised by the application objective, such as internal faces when using image supervision only&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;remove_floaters_weight&lt;/em&gt;: This can be increased if you observe artifacts in flat areas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;cube_stabilizer_weight&lt;/em&gt;: This does not have a significant impact during the optimization of a single shape, however it helps to stabilizing training in somecases&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/166bbc1f-04b7-42c8-87bb-302e3f5aabb2&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Instant NGP&lt;/strong&gt;: &lt;a href=&#34;https://github.com/nerfstudio-project/nerfacc&#34;&gt;nerfacc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-View images as inputs&lt;/li&gt; &#xA;   &lt;li&gt;Export to 3D Mesh using marching cubes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;3D Gaussian Splatting&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ashawkey/diff-gaussian-rasterization&#34;&gt;Improved Differential Gaussian Rasterization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Better Compactness-based Densification method from &lt;a href=&#34;https://gsgen3d.github.io/&#34;&gt;Gsgen&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Support initialize gaussians from given 3D mesh (Optional)&lt;/li&gt; &#xA;   &lt;li&gt;Support mini-batch optimazation&lt;/li&gt; &#xA;   &lt;li&gt;Multi-View images as inputs&lt;/li&gt; &#xA;   &lt;li&gt;Export to standard 3DGS .ply format supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Gaussian Splatting Orbit Renderer&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Render 3DGS to images sequences or video, given a 3DGS file and camera poses generated by &lt;strong&gt;Stack Orbit Camera Poses&lt;/strong&gt; node&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mesh Orbit Renderer&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Render 3D mesh to images sequences or video, given a mesh file and camera poses generated by &lt;strong&gt;Stack Orbit Camera Poses&lt;/strong&gt; node&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fitting_Mesh_With_Multiview_Images&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bake Multi-View images into UVTexture of given 3D mesh using &lt;a href=&#34;https://github.com/NVlabs/nvdiffrast&#34;&gt;Nvdiffrast&lt;/a&gt;, supports:&lt;/li&gt; &#xA;   &lt;li&gt;Export to .obj, .ply, .glb&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NeuS&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fit a coarse mesh from sparse multi-view images &amp;amp; normal maps, as little as 4 to 6 views, pretty good at reconstruct the shape from reference images but texture lacking details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deep Marching Tetrahedrons&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow convert 3DGS .ply file to 3D mesh &lt;br&gt; &lt;em&gt;Note: I didn&#39;t spent time to turn the hyperprameters yet, the result will be improved in the future!&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Save &amp;amp; Load 3D file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.obj, .ply, .glb for 3D Mesh&lt;/li&gt; &#xA;   &lt;li&gt;.ply for 3DGS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Switch Axis for 3DGS &amp;amp; 3D Mesh&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Since different algorithms likely use different coordinate system, so the ability to re-mapping the axis of coordinate is crucial for passing generated result between differnt nodes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/configs/system.conf&#34;&gt;Customizable system config file&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Custom clients IP address&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add DMTet algorithm to allow conversion from points cloud(Gaussian/.ply) to mesh (.obj, .ply, .glb)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Integrate &lt;a href=&#34;https://zouzx.github.io/TriplaneGaussian/&#34;&gt;Triplane Meets Gaussian Splatting: Fast and Generalizable Single-View 3D Reconstruction with Transformers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add interactive 3D UI inside ComfuUI to visulaize training and generated results for 3D representations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add a new node to generate renderer image sequence given a 3D gaussians and orbit camera poses (So we can later feed it to the differentiable renderer to bake it onto a given mesh)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Integrate &lt;a href=&#34;https://me.kiui.moe/lgm/&#34;&gt;LGM: Large Multi-View Gaussian Model for High-Resolution 3D Content Creation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Add camera pose estimation from raw multi-views images&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Add &amp;amp; Improve a few best MVS algorithms (e.g instant-ngp, NeuS2, GaussianPro, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Improve 3DGS/Nerf to Mesh conversion algorithms:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support to training DMTet with images(RGB, Alpha, Normal Map)&lt;/li&gt; &#xA;   &lt;li&gt;Find better methods to converts 3DGS or Points Cloud to Mesh (Normal maps reconstruction maybe?)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a general SDS/ISM Optimization algorithm to allow training 3D representations with diffusion model&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Need to do some in-depth research on Interval Score Matching (ISM), since math behind it makes perfect sense and also there are so many ways we could improve upon the result obtained from &lt;a href=&#34;https://github.com/EnVision-Research/LucidDreamer&#34;&gt;LucidDreamer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;On Hold since runtime cost to generate an is too big (3+hours for an average RTX GPU like 3080)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;[IMPORTANT!!!]&lt;/strong&gt; &lt;br&gt; Currently this package is only been tested in following setups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10/11 (Tested on my laptop)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 23.10 &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/16&#34;&gt;(Tested by @watsieboi)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ComfyUI python_embed/Miniconda/Conda Python 3.11.x&lt;/li&gt; &#xA; &lt;li&gt;Torch version &amp;gt;= 2.1.2+cu121&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Assume you have already downloaded &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt; &amp;amp; Configed your &lt;a href=&#34;https://developer.nvidia.com/cuda-12-1-0-download-archive&#34;&gt;CUDA&lt;/a&gt; environment.&lt;/p&gt; &#xA;&lt;h3&gt;Install Method 0: Directly inside ComfyUI Windows Python Embeded Environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Currently support: (python3.10/3.11/3.12 cuda12.1)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;First install &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/?q=build+tools&#34;&gt;Visual Studio Build Tools 2022/2019&lt;/a&gt; with Workloads: Desktop development with C++ (There are a few JIT torch cpp extension that builds in runtime)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively, according to &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/5&#34;&gt;@doctorpangloss&lt;/a&gt;, you can setup the c++/cuda build environments in windows by using &lt;a href=&#34;https://chocolatey.org/&#34;&gt;chocolatey&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Go to the Comfy3D root directory: &lt;em&gt;ComfyUI Root Directory\ComfyUI\custom_nodes\ComfyUI-3D-Pack&lt;/em&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run .bat with python version corresponding to the version of your ComfyUI python environment&#xA;&#xA;# install_windows_portable_win_py310_cu121.bat&#xA;install_windows_portable_win_py311_cu121.bat&#xA;# install_windows_portable_win_py312_cu121.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Method 1: Using Miniconda(Works on Windows &amp;amp; Linux &amp;amp; Mac)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note: &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/49&#34;&gt;In some edge cases Miniconda fails but Anaconda could fix the issue&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup with Miniconda:&lt;/h4&gt; &#xA;&lt;p&gt;First download &lt;a href=&#34;https://docs.conda.io/projects/miniconda/en/latest/&#34;&gt;Miniconda&lt;/a&gt; (&lt;em&gt;One of the best way to manage a clean and separated python envirments&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Then running following commands to setup the Miniconda environment for ComfyUI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go to your Your ComfyUI root directory, for my example:&#xA;cd C:\Users\reall\Softwares\ComfyUI_windows_portable &#xA;&#xA;conda create -p ./python_miniconda_env/ComfyUI python=3.11&#xA;&#xA;# conda will tell what command to use to activate the env&#xA;conda activate C:\Users\reall\Softwares\ComfyUI_windows_portable\python_miniconda_env\ComfyUI&#xA;&#xA;# update pip&#xA;python -m pip install --upgrade pip&#xA;&#xA;# You can using following command to installing CUDA only in the miniconda environment you just created if you don&#39;t want to donwload and install it manually &amp;amp; globally:&#xA;# conda install -c &#34;nvidia/label/cuda-12.1.0&#34; cuda-toolkit&#xA;&#xA;# Install the main packahes&#xA;pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121&#xA;&#xA;pip install -r ./ComfyUI/requirements.txt&#xA;&#xA;# Then go to ComfyUI-3D-Pack directory under the ComfyUI Root Directory\ComfyUI\custom_nodes for my example is:&#xA;cd C:\Users\reall\Softwares\ComfyUI_windows_portable\ComfyUI\custom_nodes\ComfyUI-3D-Pack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively you can check this tutorial: &lt;a href=&#34;https://www.comflowy.com/preparation-for-study/install#step-two-download-comfyui&#34;&gt;Installing ComfyUI with Miniconda On Windows and Mac&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install with Miniconda:&lt;/h4&gt; &#xA;&lt;p&gt;Go to the Comfy3D root directory: &lt;em&gt;ComfyUI Root Directory\ComfyUI\custom_nodes\ComfyUI-3D-Pack&lt;/em&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;install_miniconda.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just in case &lt;code&gt;install_miniconda.bat&lt;/code&gt; may not working in your OS, you could also run the following commands under the same directory: (Works with Linux &amp;amp; macOS)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&#xA;pip install -r requirements_post.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plus:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For those who want to run it inside Google Colab, you can check the &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/13&#34;&gt;install instruction from @lovisdotio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can find some of the pre-build wheels for Linux here: &lt;a href=&#34;https://github.com/remsky/ComfyUI3D-Assorted-Wheels&#34;&gt;remsky/ComfyUI3D-Assorted-Wheels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install and run with docker:&lt;/h4&gt; &#xA;&lt;p&gt;Gpu support during Docker build time is required to install all requirenents. On Linux host you could setup &lt;code&gt;nvidia-container-runtime&lt;/code&gt;. On Windows it is quite different and not checked at moment.&lt;/p&gt; &#xA;&lt;h5&gt;Linux setup:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install nvidia-container-runtime:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install nvidia-container-runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit/create the /etc/docker/daemon.json with content:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;runtimes&#34;: {&#xA;        &#34;nvidia&#34;: {&#xA;            &#34;path&#34;: &#34;/usr/bin/nvidia-container-runtime&#34;,&#xA;            &#34;runtimeArgs&#34;: []&#xA;        } &#xA;    },&#xA;    &#34;default-runtime&#34;: &#34;nvidia&#34; &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart docker daemon:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Finally build and run docker container with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t comfy3d . &amp;amp;&amp;amp; docker run --rm -it -p 8188:8188 --gpus all comfy3d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run:&lt;/h2&gt; &#xA;&lt;p&gt;Copy the files inside folder &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_New_ComfyUI_Bats/&#34;&gt;__New_ComfyUI_Bats&lt;/a&gt; to your ComfyUI root directory, and double click run_nvidia_gpu_miniconda.bat to start ComfyUI!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively you can just activate the Conda env: &lt;code&gt;python_miniconda_env\ComfyUI&lt;/code&gt;, and go to your ComfyUI root directory then run command &lt;code&gt;python ./ComfyUI/main.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL world &amp;amp; camera coordinate system:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    World            Camera        &#xA;  &#xA;     +y              up  target                                              &#xA;     |               |  /                                            &#xA;     |               | /                                                &#xA;     |______+x       |/______right                                      &#xA;    /                /         &#xA;   /                /          &#xA;  /                /           &#xA; +z               forward           &#xA;&#xA;elevation: in (-90, 90), from +y to -y is (-90, 90)&#xA;azimuth: in (-180, 180), from +z to +x is (0, 90)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wonder3D world &amp;amp; camera coordinate system:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/wonder3d_coordinate.png&#34; alt=&#34;wonder3d_coordinate&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Three.js coordinate system: (z-axis is pointing towards you and is coming out of the screen)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/right_hand_coordinate_system.png&#34; alt=&#34;right_hand_coordinate_system&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter OpenGL errors (e.g., &lt;code&gt;[F glutil.cpp:338] eglInitialize() failed&lt;/code&gt;), then set &lt;code&gt;force_cuda_rasterize&lt;/code&gt; to true on corresponding node&lt;/li&gt; &#xA; &lt;li&gt;If after the installation, your ComfyUI get stucked at starting or running, you could following the instruction in following link to solve the problem: &lt;a href=&#34;https://github.com/lava-nc/lava-dl/discussions/211&#34;&gt;Code Hangs Indefinitely When Evaluating Neuron Models on GPU&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/janusch_patas&#34;&gt;MrNeRF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bytecodealliance/wasm-micro-runtime</title>
    <updated>2024-06-30T01:39:39Z</updated>
    <id>tag:github.com,2024-06-30:/bytecodealliance/wasm-micro-runtime</id>
    <link href="https://github.com/bytecodealliance/wasm-micro-runtime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebAssembly Micro Runtime (WAMR)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebAssembly Micro Runtime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A &lt;a href=&#34;https://bytecodealliance.org/&#34;&gt;Bytecode Alliance&lt;/a&gt; project&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://wamr.gitbook.io/&#34;&gt;Guide&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev&#34;&gt;Website&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&#34;https://bytecodealliance.zulipchat.com/#narrow/stream/290350-wamr&#34;&gt;Chat&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/build_wamr.md&#34;&gt;Build WAMR&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/wamr-compiler/README.md&#34;&gt;Build AOT Compiler&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/embed_wamr.md&#34;&gt;Embed WAMR&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/export_native_api.md&#34;&gt;Export Native API&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/build_wasm_app.md&#34;&gt;Build Wasm Apps&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/README.md&#34;&gt;Samples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WebAssembly Micro Runtime (WAMR) is a lightweight standalone WebAssembly (Wasm) runtime with small footprint, high performance and highly configurable features for applications cross from embedded, IoT, edge to Trusted Execution Environment (TEE), smart contract, cloud native and so on. It includes a few parts as below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/core/iwasm/&#34;&gt;&lt;strong&gt;VMcore&lt;/strong&gt;&lt;/a&gt;: A set of runtime libraries for loading and running Wasm modules. It supports rich running modes including interpreter, Ahead-of-Time compilation(AoT) and Just-in-Time compilation (JIT). WAMR supports two JIT tiers - Fast JIT, LLVM JIT, and dynamic tier-up from Fast JIT to LLVM JIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/&#34;&gt;&lt;strong&gt;iwasm&lt;/strong&gt;&lt;/a&gt;: The executable binary built with WAMR VMcore which supports WASI and command line interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/wamr-compiler/&#34;&gt;&lt;strong&gt;wamrc&lt;/strong&gt;&lt;/a&gt;: The AOT compiler to compile Wasm file into AOT file&lt;/li&gt; &#xA; &lt;li&gt;Useful components and tools for building real solutions with WAMR vmcore: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/bytecodealliance/wamr-app-framework/raw/main/app-framework/README.md&#34;&gt;App-framework&lt;/a&gt;: A framework for supporting APIs for the Wasm applications&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/bytecodealliance/wamr-app-framework/raw/main/app-mgr/README.md&#34;&gt;App-manager&lt;/a&gt;: A framework for dynamical loading the Wasm module remotely&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/test-tools/wamr-ide&#34;&gt;WAMR-IDE&lt;/a&gt;: An experimental VSCode extension for developping WebAssembly applications with C/C++&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full compliant to the W3C Wasm MVP&lt;/li&gt; &#xA; &lt;li&gt;Small runtime binary size (core vmlib on cortex-m4f with tail-call/bulk memroy/shared memroy support, text size from bloaty) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;~58.9K for fast interpreter&lt;/li&gt; &#xA;   &lt;li&gt;~56.3K for classic interpreter&lt;/li&gt; &#xA;   &lt;li&gt;~29.4K for aot runtime&lt;/li&gt; &#xA;   &lt;li&gt;~21.4K for libc-wasi library&lt;/li&gt; &#xA;   &lt;li&gt;~3.7K for libc-builtin library&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Near to native speed by AOT and JIT&lt;/li&gt; &#xA; &lt;li&gt;Self-implemented AOT module loader to enable AOT working on Linux, Windows, MacOS, Android, SGX and MCU systems&lt;/li&gt; &#xA; &lt;li&gt;Choices of Wasm application libc support: the built-in libc subset for the embedded environment or &lt;a href=&#34;https://github.com/WebAssembly/WASI&#34;&gt;WASI&lt;/a&gt; for the standard libc&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/embed_wamr.md&#34;&gt;The simple C APIs to embed WAMR into host environment&lt;/a&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/embed_wamr.md&#34;&gt;how to integrate WAMR&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/core/iwasm/include/wasm_export.h&#34;&gt;API list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/export_native_api.md&#34;&gt;The mechanism to export native APIs to Wasm applications&lt;/a&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/export_native_api.md&#34;&gt;how to register native APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/multi_module.md&#34;&gt;Multiple modules as dependencies&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/multi_module.md&#34;&gt;document&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/multi-module&#34;&gt;sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/pthread_library.md&#34;&gt;Multi-thread, pthread APIs and thread management&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/pthread_library.md&#34;&gt;document&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/multi-thread&#34;&gt;sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/pthread_impls.md#wasi-threads-new&#34;&gt;wasi-threads&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/pthread_impls.md#wasi-threads-new&#34;&gt;document&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/wasi-threads&#34;&gt;sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/linux_sgx.md&#34;&gt;Linux SGX (Intel Software Guard Extension) support&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/linux_sgx.md&#34;&gt;document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/source_debugging.md&#34;&gt;Source debugging support&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/source_debugging.md&#34;&gt;document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/xip.md&#34;&gt;XIP (Execution In Place) support&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/xip.md&#34;&gt;document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/socket_api.md&#34;&gt;Berkeley/Posix Socket support&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/socket_api.md&#34;&gt;document&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/socket-api&#34;&gt;sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini#linux&#34;&gt;Multi-tier JIT&lt;/a&gt; and &lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/&#34;&gt;Running mode control&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language bindings: &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/language-bindings/go/README.md&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/language-bindings/python/README.md&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/language-bindings/rust/README.md&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wasm post-MVP features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/wasm-c-api&#34;&gt;wasm-c-api&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/wasm_c_api.md&#34;&gt;document&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/wasm-c-api&#34;&gt;sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/simd&#34;&gt;128-bit SIMD&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/workload&#34;&gt;samples/workload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/reference-types&#34;&gt;Reference Types&lt;/a&gt;, ref to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/ref_types.md&#34;&gt;document&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples/ref-types&#34;&gt;sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/bulk-memory-operations&#34;&gt;Bulk memory operations&lt;/a&gt;, &lt;a href=&#34;https://github.com/WebAssembly/threads/raw/main/proposals/threads/Overview.md#shared-linear-memory&#34;&gt;Shared memory&lt;/a&gt;, &lt;a href=&#34;https://github.com/WebAssembly/memory64&#34;&gt;Memory64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/tail-call&#34;&gt;Tail-call&lt;/a&gt;, &lt;a href=&#34;https://github.com/WebAssembly/gc&#34;&gt;Garbage Collection&lt;/a&gt;, &lt;a href=&#34;https://github.com/WebAssembly/exception-handling&#34;&gt;Exception Handling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported architectures and platforms&lt;/h3&gt; &#xA;&lt;p&gt;The WAMR VMcore supports the following architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X86-64, X86-32&lt;/li&gt; &#xA; &lt;li&gt;ARM, THUMB (ARMV7 Cortex-M7 and Cortex-A15 are tested)&lt;/li&gt; &#xA; &lt;li&gt;AArch64 (Cortex-A57 and Cortex-A53 are tested)&lt;/li&gt; &#xA; &lt;li&gt;RISCV64, RISCV32 (RISC-V LP64 and RISC-V LP64D are tested)&lt;/li&gt; &#xA; &lt;li&gt;XTENSA, MIPS, ARC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following platforms are supported, click each link below for how to build iwasm on that platform. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/port_wamr.md&#34;&gt;WAMR porting guide&lt;/a&gt; for how to port WAMR to a new platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#linux&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/linux_sgx.md&#34;&gt;Linux SGX (Intel Software Guard Extension)&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#macos&#34;&gt;MacOS&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#android&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#windows&#34;&gt;Windows&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#mingw&#34;&gt;Windows (MinGW)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#zephyr&#34;&gt;Zephyr&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#alios-things&#34;&gt;AliOS-Things&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#vxworks&#34;&gt;VxWorks&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#nuttx&#34;&gt;NuttX&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#RT-Thread&#34;&gt;RT-Thread&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#esp-idf&#34;&gt;ESP-IDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/build_wamr.md&#34;&gt;Build VM core&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/wamr-compiler/README.md&#34;&gt;Build wamrc AOT compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md&#34;&gt;Build iwasm (mini product)&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#linux&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/linux_sgx.md&#34;&gt;SGX&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#macos&#34;&gt;MacOS&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/product-mini/README.md#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/embed_wamr.md&#34;&gt;Embed into C/C++&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/language-bindings/python&#34;&gt;Embed into Python&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/language-bindings/go&#34;&gt;Embed into Go&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/language-bindings/rust&#34;&gt;Embed in Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/export_native_api.md&#34;&gt;Register native APIs for Wasm applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/wamr-compiler/README.md&#34;&gt;Build wamrc AOT compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/build_wasm_app.md&#34;&gt;Build Wasm applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/port_wamr.md&#34;&gt;Port WAMR to a new platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/devcontainer.md&#34;&gt;VS Code development container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/samples&#34;&gt;Samples&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/tests/benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/apis/&#34;&gt;End-user APIs documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Performance and memory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/blog/the-wamr-memory-model/&#34;&gt;Blog: The WAMR memory model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/&#34;&gt;Blog: Understand WAMR heaps&lt;/a&gt; and &lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-stacks/&#34;&gt;stacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/blog/introduction-to-wamr-running-modes/&#34;&gt;Blog: Introduction to WAMR running modes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/memory_tune.md&#34;&gt;Memory usage tuning&lt;/a&gt;: the memory model and how to tune the memory usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/build_wamr.md#enable-memory-profiling-experiment&#34;&gt;Memory usage profiling&lt;/a&gt;: how to profile the memory usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/doc/perf_tune.md&#34;&gt;Performance tuning&lt;/a&gt;: how to tune the performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/tests/benchmarks&#34;&gt;Benchmarks&lt;/a&gt;: checkout these links for how to run the benchmarks: &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/tests/benchmarks/polybench&#34;&gt;PolyBench&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/tests/benchmarks/coremark&#34;&gt;CoreMark&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/tests/benchmarks/sightglass&#34;&gt;Sightglass&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/tests/benchmarks/jetstream&#34;&gt;JetStream2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytecodealliance/wasm-micro-runtime/wiki/Performance&#34;&gt;Performance and footprint data&lt;/a&gt;: the performance and footprint data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Project Technical Steering Committee&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/bytecodealliance/wasm-micro-runtime/main/TSC_Charter.md&#34;&gt;WAMR PTSC Charter&lt;/a&gt; governs the operations of the project TSC. The current TSC members:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dongsheng28849455&#34;&gt;dongsheng28849455&lt;/a&gt; - &lt;strong&gt;Dongsheng Yan&lt;/strong&gt;, &lt;a href=&#34;mailto:dongsheng.yan@sony.com&#34;&gt;dongsheng.yan@sony.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/loganek&#34;&gt;loganek&lt;/a&gt; - &lt;strong&gt;Marcin Kolny&lt;/strong&gt;, &lt;a href=&#34;mailto:mkolny@amazon.co.uk&#34;&gt;mkolny@amazon.co.uk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lum1n0us&#34;&gt;lum1n0us&lt;/a&gt; - &lt;strong&gt;Liang He&lt;/strong&gt;， &lt;a href=&#34;mailto:liang.he@intel.com&#34;&gt;liang.he@intel.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/no1wudi&#34;&gt;no1wudi&lt;/a&gt; &lt;strong&gt;Qi Huang&lt;/strong&gt;, &lt;a href=&#34;mailto:huangqi3@xiaomi.com&#34;&gt;huangqi3@xiaomi.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qinxk-inter&#34;&gt;qinxk-inter&lt;/a&gt; - &lt;strong&gt;Xiaokang Qin&lt;/strong&gt;， &lt;a href=&#34;mailto:xiaokang.qxk@antgroup.com&#34;&gt;xiaokang.qxk@antgroup.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ttrenner&#34;&gt;ttrenner &lt;/a&gt; - &lt;strong&gt;Trenner, Thomas&lt;/strong&gt;， &lt;a href=&#34;mailto:trenner.thomas@siemens.com&#34;&gt;trenner.thomas@siemens.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wei-tang&#34;&gt;wei-tang&lt;/a&gt; - &lt;strong&gt;Wei Tang&lt;/strong&gt;， &lt;a href=&#34;mailto:tangwei.tang@antgroup.com&#34;&gt;tangwei.tang@antgroup.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wenyongh&#34;&gt;wenyongh&lt;/a&gt; - &lt;strong&gt;Wenyong Huang&lt;/strong&gt;， &lt;a href=&#34;mailto:wenyong.huang@intel.com&#34;&gt;wenyong.huang@intel.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woodsmc&#34;&gt;woodsmc&lt;/a&gt; - &lt;strong&gt;Woods, Chris&lt;/strong&gt;， &lt;a href=&#34;mailto:chris.woods@siemens.com&#34;&gt;chris.woods@siemens.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xujuntwt95329&#34;&gt;xujuntwt95329&lt;/a&gt; - &lt;strong&gt;Jun Xu&lt;/strong&gt;， &lt;a href=&#34;mailto:Jun1.Xu@intel.com&#34;&gt;Jun1.Xu@intel.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xwang98&#34;&gt;xwang98&lt;/a&gt; - &lt;strong&gt;Xin Wang&lt;/strong&gt;， &lt;a href=&#34;mailto:xin.wang@intel.com&#34;&gt;xin.wang@intel.com&lt;/a&gt; (chair)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yamt&#34;&gt;yamt&lt;/a&gt; - &lt;strong&gt;Takashi Yamamoto&lt;/strong&gt;, &lt;a href=&#34;mailto:yamamoto@midokura.com&#34;&gt;yamamoto@midokura.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;WAMR uses the same license as LLVM: the &lt;code&gt;Apache 2.0 license&lt;/code&gt; with the LLVM exception. See the LICENSE file for details. This license allows you to freely use, modify, distribute and sell your own products based on WAMR. Any contributions you make will be under the same license.&lt;/p&gt; &#xA;&lt;h1&gt;More resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytecodealliance/wasm-micro-runtime/wiki&#34;&gt;Who use WAMR?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/blog/&#34;&gt;WAMR Blogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytecodealliance.github.io/wamr.dev/events/&#34;&gt;Community news and events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytecodealliance/wasm-micro-runtime/wiki/TSC-meeting-notes&#34;&gt;WAMR TSC meetings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>