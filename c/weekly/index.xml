<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-28T01:36:26Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>strongtz/i915-sriov-dkms</title>
    <updated>2024-07-28T01:36:26Z</updated>
    <id>tag:github.com,2024-07-28:/strongtz/i915-sriov-dkms</id>
    <link href="https://github.com/strongtz/i915-sriov-dkms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dkms module of Linux i915 driver with SR-IOV support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux i915 driver (dkms module) with SR-IOV support for linux 6.1 ~ linux 6.9&lt;/h1&gt; &#xA;&lt;p&gt;Originally from &lt;a href=&#34;https://github.com/intel/linux-intel-lts/tree/lts-v5.15.49-adl-linux-220826T092047Z/drivers/gpu/drm/i915&#34;&gt;linux-intel-lts&lt;/a&gt; Update to &lt;a href=&#34;https://github.com/intel/linux-intel-lts/tree/lts-v6.1.12-linux-230415T124447Z/drivers/gpu/drm/i915&#34;&gt;6.1.12&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Update Notice&lt;/h2&gt; &#xA;&lt;p&gt;The i915 module parameter to enable SR-IOV functionality has changed since &lt;a href=&#34;https://github.com/strongtz/i915-sriov-dkms/commit/092d1cf126f31eca3c1de4673e537c3c5f1e6ab4&#34;&gt;commit #092d1cf&lt;/a&gt;. If you are updating from previous version, please modify &lt;code&gt;i915.enable_guc=7&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;i915.enable_guc=3 i915.max_vfs=7&lt;/code&gt;&lt;/strong&gt; in your kernel command line or in the corresponding modprobe config file.&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;This package is &lt;strong&gt;highly experimental&lt;/strong&gt;, you should only use it when you know what you are doing.&lt;/p&gt; &#xA;&lt;p&gt;You need to install this dkms module in &lt;strong&gt;both host and guest!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Arch Linux users, it is available in AUR. &lt;a href=&#34;https://aur.archlinux.org/packages/i915-sriov-dkms-git&#34;&gt;i915-sriov-dkms-git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tested kernel versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proxmox VE Host: &lt;code&gt;pve-kernel-6.1.0-1-pve ~ 6.2.9-1-pve&lt;/code&gt;, &lt;code&gt;proxmox-kernel-6.5.13-3-pve ~ 6.8.8-2-pve&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian 12 VM Guest: &lt;code&gt;linux-image-6.5.0-0.deb12.4-amd64 ~ 6.7.12+bpo&lt;/code&gt; (6.1 requires custom kernel, see below)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 22.04 VM Guest: &lt;code&gt;linux-image-6.2.0-39-generic ~ 6.5.0-44-generic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo VM Guest: &lt;code&gt;gentoo-sources-6.1.19-gentoo ~ 6.2.11-gentoo&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tested usages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VA-API video acceleration in VM (need to remove any other display device such as virtio-gpu)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Required Kernel Parameters&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;intel_iommu=on i915.enable_guc=3 i915.max_vfs=7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating Virtual Functions (VF)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo 2 &amp;gt; /sys/devices/pci0000:00/0000:00:02.0/sriov_numvfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create up to 7 VFs on Intel UHD Graphics&lt;/p&gt; &#xA;&lt;h2&gt;PVE Host Installation Steps (Tested Kernel 6.5 and 6.8)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA; &lt;li&gt;Install build tools: &lt;code&gt;apt install build-* dkms&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the kernel and headers for desired version: &lt;code&gt;apt install proxmox-headers-6.8.8-2-pve proxmox-kernel-6.8.8-2-pve&lt;/code&gt; (for unsigned kernel).&lt;/li&gt; &#xA; &lt;li&gt;Change into the root of the cloned repository and run &lt;code&gt;dkms add .&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;dkms install -m i915-sriov-dkms -v 2024.07.19 --force&lt;/code&gt; or &lt;code&gt;dkms install -m i915-sriov-dkms -v $(cat VERSION) --force&lt;/code&gt; for a version-independent command.&lt;/li&gt; &#xA; &lt;li&gt;Once finished, the kernel commandline needs to be adjusted: &lt;code&gt;nano /etc/default/grub&lt;/code&gt; and change &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; to &lt;code&gt;intel_iommu=on i915.enable_guc=3 i915.max_vfs=7&lt;/code&gt;, or add to it if you have other arguments there already.&lt;/li&gt; &#xA; &lt;li&gt;Optionally pin the kernel version and update the boot config via &lt;code&gt;proxmox-boot-tool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In order to enable the VFs, a &lt;code&gt;sysfs&lt;/code&gt; attribute must be set. Install &lt;code&gt;sysfsutils&lt;/code&gt;, then do &lt;code&gt;echo &#34;devices/pci0000:00/0000:00:02.0/sriov_numvfs = 7&#34; &amp;gt; /etc/sysfs.conf&lt;/code&gt;, assuming your iGPU is on 00:02 bus. If not, use &lt;code&gt;lspci | grep VGA&lt;/code&gt; to find the PCIe bus your iGPU is on.&lt;/li&gt; &#xA; &lt;li&gt;Reboot the system.&lt;/li&gt; &#xA; &lt;li&gt;When the system is back up again, you should see the number of VFs under 02:00.1 - 02:00.7. Again, assuming your iGPU is on 00:02 bus.&lt;/li&gt; &#xA; &lt;li&gt;You can passthrough the VFs to LXCs or VMs. However, never touch the PF which is 02:00.0 under any circumstances.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;PVE Host Installation Steps (Tested Kernel 6.1 and 6.2)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA; &lt;li&gt;Install some tools. &lt;code&gt;apt install build-* dkms&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go inside the repo, edit the &lt;code&gt;dkms.conf&lt;/code&gt;file, change the &lt;code&gt;PACKAGE_NAME&lt;/code&gt; to &lt;code&gt;i915-sriov-dkms&lt;/code&gt;, and change the &lt;code&gt;PACKAGE_VERSION&lt;/code&gt; to &lt;code&gt;6.1&lt;/code&gt;. Save the file.&lt;/li&gt; &#xA; &lt;li&gt;Move the entire content of the repository to &lt;code&gt;/usr/src/i915-sriov-dkms-6.1&lt;/code&gt;. The folder name will be the DKMS package name.&lt;/li&gt; &#xA; &lt;li&gt;Execute command &lt;code&gt;dkms install -m i915-sriov-dkms -v 6.1 --force&lt;/code&gt;. &lt;code&gt;-m&lt;/code&gt; argument denotes the package name, and it should be the same as the folder name which contains the package content. &lt;code&gt;-v&lt;/code&gt; argument denotes the package version, which we have specified in the &lt;code&gt;dkms.conf&lt;/code&gt; as &lt;code&gt;6.1&lt;/code&gt;. &lt;code&gt;--force&lt;/code&gt; argument will reinstall the module even if a module with same name has been already installed.&lt;/li&gt; &#xA; &lt;li&gt;The kernel module should begin building.&lt;/li&gt; &#xA; &lt;li&gt;Once finished, we need to make a few changes to the kernel commandline. &lt;code&gt;nano /etc/default/grub&lt;/code&gt; and change &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; to &#39;intel_iommu=on i915.enable_guc=3 i915.max_vfs=7`, or add to it if you have other arguments there already.&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;grub&lt;/code&gt; and &lt;code&gt;initramfs&lt;/code&gt; by executing &lt;code&gt;update-grub&lt;/code&gt; and &lt;code&gt;update-initramfs -u&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In order to enable the VFs, we need to modify some variables in the &lt;code&gt;sysfs&lt;/code&gt;. Install &lt;code&gt;sysfsutils&lt;/code&gt;, then do &lt;code&gt;echo &#34;devices/pci0000:00/0000:00:02.0/sriov_numvfs = 7&#34; &amp;gt; /etc/sysfs.conf&lt;/code&gt;, assuming your iGPU is on 00:02 bus. If not, use &lt;code&gt;lspci | grep VGA&lt;/code&gt; to find the PCIe bus your iGPU is on.&lt;/li&gt; &#xA; &lt;li&gt;Reboot the system.&lt;/li&gt; &#xA; &lt;li&gt;When the system is back up again, you should see the number of VFs you specified show up under 02:00.1 - 02:00.7. Again, assuming your iGPU is on 00:02 bus.&lt;/li&gt; &#xA; &lt;li&gt;You can passthrough the VFs to LXCs or VMs. However, never touch the PF which is 02:00.0 under any circumstances.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Linux Guest Installation Steps (Tested Kernel 6.2)&lt;/h2&gt; &#xA;&lt;p&gt;We will need to run the same driver under Linux guests. We can repeat the steps for installing the driver. However, when modifying command line defaults, we use &lt;code&gt;i915.enable_guc=3&lt;/code&gt; instead of &lt;code&gt;i915.enable_guc=3 i915.max_vfs=7&lt;/code&gt;. Furthermore, we don&#39;t need to use &lt;code&gt;sysfsutils&lt;/code&gt; to create any more VFs since we ARE using a VF. Once that&#39;s done, update &lt;code&gt;grub&lt;/code&gt; and &lt;code&gt;initramfs&lt;/code&gt;, then reboot. Once the VM is back up again, do &lt;code&gt;dmesg | grep i915&lt;/code&gt; to see if your VF is recognized by the kernel. Optionally, install &lt;code&gt;vainfo&lt;/code&gt;, then do &lt;code&gt;vainfo&lt;/code&gt; to see if the iGPU has been picked up by the VAAPI.&lt;/p&gt; &#xA;&lt;h2&gt;Windows Guest&lt;/h2&gt; &#xA;&lt;p&gt;It is required to set the host CPU type in Proxmox to &#34;host&#34;. I was able to get it working without further fiddling in the config files but your mileage may vary (i5-12500T with UHD 770). I&#39;ve used Intel gfx version 4316 to get it working. Here&#39;s a link to download it. (&lt;a href=&#34;https://www.intel.com/content/www/us/en/download/741626/780560/intel-arc-pro-graphics-windows.html&#34;&gt;https://www.intel.com/content/www/us/en/download/741626/780560/intel-arc-pro-graphics-windows.html&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Debian Guest Installation&lt;/h2&gt; &#xA;&lt;p&gt;Debian poses some additional challenges because not all of the necessary modules are compiled in by default. That leads us to building a custom kernel with a modified version of their configuration. The following steps were tested on Debian 11.6 &#34;bullseye&#34; which includes the 5.10.0 kernel out-of-the-box. We need, at minimum, the 6.1 kernel&lt;/p&gt; &#xA;&lt;p&gt;First, the VM configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BIOS: OVMF (UEFI)&lt;/li&gt; &#xA; &lt;li&gt;Display: Default&lt;/li&gt; &#xA; &lt;li&gt;Machine: q35&lt;/li&gt; &#xA; &lt;li&gt;Secure boot must be disabled in the UEFI BIOS, otherwise the new, unsigned, kernel will not start.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With the 6.1 kernel not being available in the stable repository, the testing repository must be added. The following steps are based on &lt;a href=&#34;https://serverfault.com/questions/22414/how-can-i-run-debian-stable-but-install-some-packages-from-testing&#34;&gt;these instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; All of these commands were run by the root user. Run as a regular user by prepending &lt;code&gt;sudo&lt;/code&gt;, if you prefer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;/etc/apt/preferences.d/stable.pref&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOT &amp;gt;&amp;gt; /etc/apt/preferences.d/stable.pref&#xA;# 500 &amp;lt;= P &amp;lt; 990: causes a version to be installed unless there is a&#xA;# version available belonging to the target release or the installed&#xA;# version is more recent&#xA;Package: *&#xA;Pin: release a=stable&#xA;Pin-Priority: 900&#xA;EOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;/etc/apt/preferences.d/testing.pref&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOT &amp;gt;&amp;gt; /etc/apt/preferences.d/testing.pref&#xA;# 100 &amp;lt;= P &amp;lt; 500: causes a version to be installed unless there is a&#xA;# version available belonging to some other distribution or the installed&#xA;# version is more recent&#xA;Package: *&#xA;Pin: release a=testing&#xA;Pin-Priority: 400&#xA;EOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Move &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; to &lt;code&gt;/etc/apt/sources.list.d/stable.list&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv /etc/apt/sources.list /etc/apt/sources.list.d/stable.list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;/etc/apt/sources.list.d/testing.list&lt;/code&gt; as follows:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sed &#39;s/bullseye/testing/g&#39; /etc/apt/sources.list.d/stable.list &amp;gt; /etc/apt/sources.list.d/testing.list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the process of building and installing a new kernel begins&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;apt&lt;/code&gt; to fully update the system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt -y dist-upgrade &amp;amp;&amp;amp; apt -y autoremove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find the latest version of the 6.1 kernel and install it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt search &#39;^linux-image-6.*-amd64&#39;&#xA;  linux-image-6.1.0-7-amd64/testing 6.1.20-1 amd64&#xA;    Linux 6.1 for 64-bit PCs (signed)&#xA;apt -y install linux-image-6.1.0-7-amd64&#xA;reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the 6.1 kernel source and configure it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt -y install dkms dwarves git linux-source-6.1 pahole vainfo&#xA;cd /usr/src&#xA;tar xJvf linux-source-6.1.tar.xz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy Debian&#39;s original build configuration into the source tree:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp /boot/config-6.1.*-amd64 /usr/src/linux-source-6.1/.config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;/usr/src/linux-source-6.1/.config&lt;/code&gt; and ensure the following parameters exist:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;CONFIG_INTEL_MEI_PXP=m&#xA;CONFIG_DRM_I915_PXP=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and install the kernel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /usr/src/linux-source-6.1&#xA;make deb-pkg LOCALVERSION=-sriov KDEB_PKGVERSION=$(make kernelversion)-1&#xA;&#xA;    ...four hours later...&#xA;&#xA;dpkg -i /usr/src/*.deb&#xA;reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify the new kernel is indeed running:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;uname -r&#xA;6.1.15-sriov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and install the i915-sriov module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /usr/src&#xA;git clone https://github.com/strongtz/i915-sriov-dkms i915-sriov-dkms-6.1&#xA;&#xA;    edit /usr/src/i915-sriov-dkms-6.1/dkms.conf with the following:&#xA;    PACKAGE_NAME=&#34;i915-sriov-dkms&#34;&#xA;    PACKAGE_VERSION=&#34;6.1&#34;&#xA;&#xA;dkms install --force -m i915-sriov-dkms -v 6.1&#xA;&#xA;    edit /etc/default/grub with the following:&#xA;    GRUB_CMDLINE_LINUX_DEFAULT=&#34;quiet i915.enable_guc=3&#34;&#xA;&#xA;update-grub&#xA;update-initramfs -u&#xA;poweroff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Proxmox, add one of the 0000:00:02.x devices to the VM, then start the VM&lt;/li&gt; &#xA; &lt;li&gt;Log into the machine and verify that the module has loaded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# lspci | grep -i vga&#xA;06:10.0 VGA compatible controller: Intel Corporation Alder Lake-S GT1 [UHD Graphics 730] (rev 0c)&#xA;&#xA;# lspci -vs 06:10.0&#xA;06:10.0 VGA compatible controller: Intel Corporation Alder Lake-S GT1 [UHD Graphics 730] (rev 0c) (prog-if 00 [VGA controller])&#xA;&#x9;Subsystem: ASRock Incorporation Alder Lake-S GT1 [UHD Graphics 730]&#xA;&#x9;Physical Slot: 16-2&#xA;&#x9;Flags: bus master, fast devsel, latency 0, IRQ 42&#xA;&#x9;Memory at c1000000 (64-bit, non-prefetchable) [size=16M]&#xA;&#x9;Memory at 800000000 (64-bit, prefetchable) [size=512M]&#xA;&#x9;Capabilities: [ac] MSI: Enable+ Count=1/1 Maskable+ 64bit-&#xA;&#x9;Kernel driver in use: i915&#xA;&#x9;Kernel modules: i915&#xA;&#xA;# dmesg | grep i915&#xA;[    6.461702] i915: loading out-of-tree module taints kernel.&#xA;[    6.462463] i915: module verification failed: signature and/or required key missing - tainting kernel&#xA;[    6.591228] i915 0000:06:10.0: Running in SR-IOV VF mode&#xA;[    6.592001] i915 0000:06:10.0: GuC interface version 0.1.0.0&#xA;[    6.592212] i915 0000:06:10.0: [drm] VT-d active for gfx access&#xA;[    6.592225] i915 0000:06:10.0: [drm] Using Transparent Hugepages&#xA;[    6.593437] i915 0000:06:10.0: GuC interface version 0.1.0.0&#xA;[    6.593564] i915 0000:06:10.0: GuC firmware PRELOADED version 1.0 submission:SR-IOV VF&#xA;[    6.593565] i915 0000:06:10.0: HuC firmware PRELOADED&#xA;[    6.595883] i915 0000:06:10.0: [drm] Protected Xe Path (PXP) protected content support initialized&#xA;[    6.595886] i915 0000:06:10.0: [drm] PMU not supported for this GPU.&#xA;[    6.595951] [drm] Initialized i915 1.6.0 20201103 for 0000:06:10.0 on minor 1&#xA;&#xA;# ls /dev/dri/render*&#xA;crw-rw---- 1 root render 226, 128 Jan 00 00:00 renderD128&#xA;&#xA;# vainfo&#xA;libva info: VA-API version 1.17.0&#xA;libva info: Trying to open /usr/lib/x86_64-linux-gnu/dri/iHD_drv_video.so&#xA;libva info: Found init function __vaDriverInit_1_17&#xA;libva info: va_openDriver() returns 0&#xA;vainfo: VA-API version: 1.17 (libva 2.12.0)&#xA;vainfo: Driver version: Intel iHD driver for Intel(R) Gen Graphics - 23.1.1 ()&#xA;vainfo: Supported profile and entrypoints&#xA;&#xA;    ... List of all the compression formats and profiles ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The kernel DEB installation files can be copied to other, similar, Debian systems for use without recompiling.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aircrack-ng/aircrack-ng</title>
    <updated>2024-07-28T01:36:26Z</updated>
    <id>tag:github.com,2024-07-28:/aircrack-ng/aircrack-ng</id>
    <link href="https://github.com/aircrack-ng/aircrack-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WiFi security auditing tools suite&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aircrack-ng&lt;/h1&gt; &#xA;&lt;h2&gt;Badges&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub CI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/almalinux.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/almalinux.yml/badge.svg?event=push&#34; alt=&#34;Alma Linux CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/alpine.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/alpine.yml/badge.svg?event=push&#34; alt=&#34;Alpine Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/dragonflybsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/dragonflybsd.yml/badge.svg?event=push&#34; alt=&#34;DragonFlyBSD CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/freebsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/freebsd.yml/badge.svg?event=push&#34; alt=&#34;FreeBSD CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/gentoo.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/gentoo.yml/badge.svg?sanitize=true&#34; alt=&#34;Gentoo CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/kali.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/kali.yml/badge.svg?event=push&#34; alt=&#34;Kali Linux CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux.yml/badge.svg?event=push&#34; alt=&#34;Linux CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux-pcre.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux-pcre.yml/badge.svg?event=push&#34; alt=&#34;Linux PCRE CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/macos.yml/badge.svg?event=push&#34; alt=&#34;macOS CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/netbsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/netbsd.yml/badge.svg?event=push&#34; alt=&#34;NetBSD CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/openbsd.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/openbsd.yml/badge.svg?event=push&#34; alt=&#34;OpenBSD CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/windows.yml/badge.svg?event=push&#34; alt=&#34;Windows CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/scanbuild.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/scanbuild.yml/badge.svg?sanitize=true&#34; alt=&#34;Clang Scan-build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/codespell.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/codespell.yml/badge.svg?sanitize=true&#34; alt=&#34;Codespell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/coverity.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/coverity.yml/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/docker.yml/badge.svg?event=push&#34; alt=&#34;Docker (git) push to DockerHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/markdown-link.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/markdown-link.yml/badge.svg?event=push&#34; alt=&#34;Markdown link&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/pvs-studio.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/pvs-studio.yml/badge.svg?event=push&#34; alt=&#34;PVS-Studio Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/style.yml&#34;&gt;&lt;img src=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/style.yml/badge.svg?event=push&#34; alt=&#34;Style &amp;amp; Consistency&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Repository versions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/archlinux/v/extra/x86_64/aircrack-ng&#34; alt=&#34;Arch Linux package&#34;&gt; &lt;img src=&#34;https://img.shields.io/debian/v/aircrack-ng/stable?label=debian%20stable&#34; alt=&#34;Debian package&#34;&gt; &lt;img src=&#34;https://img.shields.io/debian/v/aircrack-ng/testing?label=debian%20testing&#34; alt=&#34;Debian package&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/v/aircrackng/git?color=blue&amp;amp;label=Docker%20Tag%20%7C%20git&#34; alt=&#34;Docker Image Version (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/fedora/v/aircrack-ng&#34; alt=&#34;Fedora package&#34;&gt; &lt;img src=&#34;https://img.shields.io/homebrew/v/aircrack-ng&#34; alt=&#34;homebrew version&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/bionic?label=Ubuntu%2018.04&#34; alt=&#34;Ubuntu package&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/focal?label=Ubuntu%2020.04&#34; alt=&#34;Ubuntu package&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/jammy?label=Ubuntu%2022.04&#34; alt=&#34;Ubuntu package&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/kinetic?label=Ubuntu%2022.10&#34; alt=&#34;Ubuntu package&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/lunar?label=Ubuntu%2023.04&#34; alt=&#34;Ubuntu package&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/mantic?label=Ubuntu%2023.10&#34; alt=&#34;Ubuntu package&#34;&gt; &lt;img src=&#34;https://img.shields.io/ubuntu/v/aircrack-ng/noble?label=Ubuntu%2024.04&#34; alt=&#34;Ubuntu package&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Aircrack-ng is a complete suite of tools to assess WiFi network security.&lt;/p&gt; &#xA;&lt;p&gt;It focuses on different areas of WiFi security:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monitoring: Packet capture and export of data to text files for further processing by third party tools.&lt;/li&gt; &#xA; &lt;li&gt;Attacking: Replay attacks, deauthentication, fake access points and others via packet injection.&lt;/li&gt; &#xA; &lt;li&gt;Testing: Checking WiFi cards and driver capabilities (capture and injection).&lt;/li&gt; &#xA; &lt;li&gt;Cracking: WEP and WPA PSK (WPA 1 and 2).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All tools are command line which allows for heavy scripting. A lot of GUIs have taken advantage of this feature. It works primarily on Linux but also Windows, macOS, FreeBSD, OpenBSD, NetBSD, as well as Solaris and even eComStation 2.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Autoconf&lt;/li&gt; &#xA; &lt;li&gt;Automake&lt;/li&gt; &#xA; &lt;li&gt;Libtool&lt;/li&gt; &#xA; &lt;li&gt;shtool&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL development package or libgcrypt development package.&lt;/li&gt; &#xA; &lt;li&gt;Airmon-ng (Linux) requires ethtool, usbutils, and often pciutils.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, cygwin has to be used and it also requires w32api package.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, if using clang, libiconv and libiconv-devel&lt;/li&gt; &#xA; &lt;li&gt;Linux: LibNetlink 1 or 3. It can be disabled by passing --disable-libnl to configure.&lt;/li&gt; &#xA; &lt;li&gt;pkg-config (pkgconf on FreeBSD, DragonFlyBSD, OpenBSD and NetBSD)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD, DragonFlyBSD, OpenBSD, NetBSD, Solaris and OS X with Macports: gmake&lt;/li&gt; &#xA; &lt;li&gt;Linux/Cygwin: make and Standard C++ Library development package (Debian: libstdc++-dev)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Airmon-ng only requires pciutils if the system has a PCI/PCIe bus and it is populated. Such bus can be present even if not physically visible. For example, it is present, and populated on the Raspberry Pi 4, therefore pciutils is required on that device.&lt;/p&gt; &#xA;&lt;h2&gt;Optional stuff&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want SSID filtering with regular expression in airodump-ng (--essid-regex) PCRE or PCRE2 development package is required.&lt;/li&gt; &#xA; &lt;li&gt;If you want to use airolib-ng and &#39;-r&#39; option in aircrack-ng, SQLite development package &amp;gt;= 3.3.17 (3.6.X version or better is recommended)&lt;/li&gt; &#xA; &lt;li&gt;If you want to use Airpcap, the &#39;developer&#39; directory from the CD/ISO/SDK is required.&lt;/li&gt; &#xA; &lt;li&gt;In order to build &lt;code&gt;besside-ng&lt;/code&gt;, &lt;code&gt;besside-ng-crawler&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;tkiptun-ng&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt;, libpcap development package is required (on Cygwin, use the Airpcap SDK instead; see above)&lt;/li&gt; &#xA; &lt;li&gt;rfkill&lt;/li&gt; &#xA; &lt;li&gt;If you want Airodump-ng to log GPS coordinates, gpsd is needed&lt;/li&gt; &#xA; &lt;li&gt;For best performance on SMP machines, ensure the hwloc library and headers are installed. It is strongly recommended on high core count systems, it may give a serious speed boost&lt;/li&gt; &#xA; &lt;li&gt;CMocka and expect for testing&lt;/li&gt; &#xA; &lt;li&gt;For integration testing on Linux only: tcpdump, HostAPd, WPA Supplicant and screen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing required and optional dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Below are instructions for installing the basic requirements to build &lt;code&gt;aircrack-ng&lt;/code&gt; for a number of operating systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: CMocka, tcpdump, screen, HostAPd and WPA Supplicant should not be dependencies when packaging Aircrack-ng.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -Sy base-devel libnl openssl ethtool util-linux zlib libpcap sqlite pcre2 hwloc cmocka hostapd wpa_supplicant tcpdump screen iw usbutils pciutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian/Ubuntu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential autoconf automake libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev libpcre2-dev libhwloc-dev libcmocka-dev hostapd wpasupplicant tcpdump screen iw usbutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CentOS/RHEL 7&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install epel-release&#xA;sudo ./centos_autotools.sh&#xA;# Remove older installation of automake/autoconf&#xA;sudo yum remove autoconf automake&#xA;sudo yum install sqlite-devel openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: autoconf, automake, libtool, and pkgconfig in the repositories are too old. The script centos_autotools.sh automatically installs dependencies to compile then install the tools.&lt;/p&gt; &#xA;&lt;h4&gt;CentOS/RHEL 8&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum config-manager --set-enabled powertools&#xA;sudo yum install epel-release&#xA;sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper install autoconf automake libtool pkg-config libnl3-devel libopenssl-1_1-devel zlib-devel libpcap-devel sqlite3-devel pcre2-devel hwloc-devel libcmocka-devel hostapd wpa_supplicant tcpdump screen iw gcc-c++ gcc ethtool pciutils usbutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mageia&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo urpmi autoconf automake libtool pkgconfig libnl3-devel libopenssl-devel zlib-devel libpcap-devel sqlite3-devel pcre2-devel hwloc-devel libcmocka-devel hostapd wpa_supplicant tcpdump screen iw gcc-c++ gcc make expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alpine&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apk add gcc g++ make autoconf automake libtool libnl3-dev openssl-dev ethtool libpcap-dev cmocka-dev hostapd wpa_supplicant tcpdump screen iw pkgconf util-linux sqlite-dev pcre2-dev linux-headers zlib-dev pciutils usbutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Community repository needs to be enabled for iw&lt;/p&gt; &#xA;&lt;h4&gt;Clear Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo swupd bundle-add c-basic devpkg-openssl devpkg-libgcrypt devpkg-libnl devpkg-hwloc devpkg-libpcap devpkg-pcre2 devpkg-sqlite-autoconf ethtool wget network-basic software-testing sysadmin-basic wpa_supplicant os-testsuite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: hostapd must be compiled manually, it is not present in the repository&lt;/p&gt; &#xA;&lt;h3&gt;BSD&lt;/h3&gt; &#xA;&lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install pkgconf shtool libtool gcc9 automake autoconf pcre2 sqlite3 openssl gmake hwloc cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DragonflyBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install pkgconf shtool libtool gcc8 automake autoconf pcre2 sqlite3 libgcrypt gmake cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add pkgconf shtool libtool gcc automake autoconf pcre2 sqlite3 openssl gmake cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NetBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add pkgconf libtool gcc7 automake autoconf pcre2 sqlite3 openssl gmake cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;XCode, Xcode command line tools and HomeBrew are required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install autoconf automake libtool openssl shtool pkg-config hwloc pcre2 sqlite3 libpcap cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Cygwin&lt;/h4&gt; &#xA;&lt;p&gt;Cygwin requires the full path to the &lt;code&gt;setup.exe&lt;/code&gt; utility, in order to automate the installation of the necessary packages. In addition, it requires the location of your installation, a path to the cached packages download location, and a mirror URL.&lt;/p&gt; &#xA;&lt;p&gt;An example of automatically installing all the dependencies is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;c:\cygwin\setup-x86.exe -qnNdO -R C:/cygwin -s http://cygwin.mirror.constant.com -l C:/cygwin/var/cache/setup -P autoconf -P automake -P bison -P gcc-core -P gcc-g++ -P mingw-runtime -P mingw-binutils -P mingw-gcc-core -P mingw-gcc-g++ -P mingw-pthreads -P mingw-w32api -P libtool -P make -P python -P gettext-devel -P gettext -P intltool -P libiconv -P pkg-config -P git -P wget -P curl -P libpcre2-devel -P libssl-devel -P libsqlite3-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MSYS2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -Sy autoconf automake-wrapper libtool msys2-w32api-headers msys2-w32api-runtime gcc pkg-config git python openssl-devel openssl libopenssl msys2-runtime-devel gcc binutils make pcre2-devel libsqlite-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU/Hurd&lt;/h3&gt; &#xA;&lt;h4&gt;Debian&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install build-essential autoconf automake libtool pkg-config libssl-dev shtool zlib1g-dev libpcap-dev libsqlite3-dev libpcre2-dev libhwloc-dev libcmocka-dev screen expect libbsd-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker containers&lt;/h2&gt; &#xA;&lt;p&gt;We have two repositories on DockerHub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/aircrackng/release&#34;&gt;aircrackng/release&lt;/a&gt;: Each release&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/aircrackng/git&#34;&gt;aircrackng/git&lt;/a&gt;: every commit in the git repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Base command for the &lt;code&gt;git&lt;/code&gt; version:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo docker run --rm -it aircrackng/git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available platforms/CPU architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux/386 (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/amd64 (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/arm/v5 (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/arm/v6 (base image: alpine:3)&lt;/li&gt; &#xA; &lt;li&gt;linux/arm/v7 (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/arm64/v8 (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/mips64le (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/ppc64le (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/riscv64 (base image: debian:unstable-slim)&lt;/li&gt; &#xA; &lt;li&gt;linux/s390x (base image: debian:unstable-slim)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;To build &lt;code&gt;aircrack-ng&lt;/code&gt;, the Autotools build system is utilized. Autotools replaces the older method of compilation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If utilizing a developer version, eg: one checked out from source control, you will need to run a pre-&lt;code&gt;configure&lt;/code&gt; script. The script to use is one of the following: &lt;code&gt;autoreconf -i&lt;/code&gt; or &lt;code&gt;env NOCONFIGURE=1 ./autogen.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, &lt;code&gt;./configure&lt;/code&gt; the project for building with the appropriate options specified for your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure &amp;lt;options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: If the above fails, please see above about developer source control versions.&lt;/p&gt; &#xA;&lt;p&gt;Next, compile the project (respecting if &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;gmake&lt;/code&gt; is needed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Compilation:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compilation on *BSD or Solaris:&lt;/p&gt; &lt;p&gt;&lt;code&gt;gmake&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, the additional targets listed below may be of use in your environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute all unit testing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make check&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute all integration testing (requires root):&lt;/p&gt; &lt;p&gt;&lt;code&gt;make integration&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uninstall:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make uninstall&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;./configure&lt;/code&gt; flags&lt;/h3&gt; &#xA;&lt;p&gt;When configuring, the following flags can be used and combined to adjust the suite to your choosing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-airpcap=DIR&lt;/strong&gt;: needed for supporting airpcap devices on Windows (Cygwin or MSYS2 only). Replace DIR above with the absolute location to the root of the extracted source code from the Airpcap CD or downloaded SDK available online. Required on Windows to build &lt;code&gt;besside-ng&lt;/code&gt;, &lt;code&gt;besside-ng-crawler&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;tkiptun-ng&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt; when building experimental tools. The developer pack (Compatible with version 4.1.1 and 4.1.3) can be downloaded at &lt;a href=&#34;https://support.riverbed.com/content/support/software/steelcentral-npm/airpcap.html&#34;&gt;https://support.riverbed.com/content/support/software/steelcentral-npm/airpcap.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-experimental&lt;/strong&gt;: needed to compile &lt;code&gt;tkiptun-ng&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;buddy-ng&lt;/code&gt;, &lt;code&gt;buddy-ng-crawler&lt;/code&gt;, &lt;code&gt;airventriloquist&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt;. libpcap development package is also required to compile most of the tools. If not present, not all experimental tools will be built. On Cygwin, libpcap is not present and the Airpcap SDK replaces it. See --with-airpcap option above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-ext-scripts&lt;/strong&gt;: needed to build &lt;code&gt;airoscript-ng&lt;/code&gt;, &lt;code&gt;versuck-ng&lt;/code&gt;, &lt;code&gt;airgraph-ng&lt;/code&gt; and &lt;code&gt;airdrop-ng&lt;/code&gt;. Note: Each script has its own dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-gcrypt&lt;/strong&gt;: Use libgcrypt crypto library instead of the default OpenSSL. And also use internal fast sha1 implementation (borrowed from GIT). Dependency (Debian): libgcrypt20-dev&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-duma&lt;/strong&gt;: Compile with DUMA support. DUMA is a library to detect buffer overruns and underruns. Dependency (Debian): duma&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;disable-libnl&lt;/strong&gt;: Set up the project to be compiled without libnl (1 or 3). Linux option only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;without-opt&lt;/strong&gt;: Do not enable -O3 optimizations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;enable-shared&lt;/strong&gt;: Make OSdep a shared library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;disable-shared&lt;/strong&gt;: When combined with &lt;strong&gt;enable-static&lt;/strong&gt;, it will statically compile Aircrack-ng.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-avx512&lt;/strong&gt;: On x86, add support for AVX512 instructions in aircrack-ng. Only use it when the current CPU supports AVX512.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-static-simd=&#xA;    &lt;simd&gt;&lt;/simd&gt;&lt;/strong&gt;: Compile a single optimization in aircrack-ng binary. Useful when compiling statically and/or for space-constrained devices. Valid SIMD options: x86-sse2, x86-avx, x86-avx2, x86-avx512, ppc-altivec, ppc-power8, arm-neon, arm-asimd. Must be used with --enable-static --disable-shared. When using those 2 options, the default is to compile the generic optimization in the binary. --with-static-simd merely allows to choose another one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;enable-maintainer-mode&lt;/strong&gt;: It is important to enable this flag when developing with Aircrack-ng. This flag enables additional compile warnings and safety features.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure and compiling:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling with gcrypt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-gcrypt&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing (strip binaries):&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install-strip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing, with external scripts:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental --with-ext-scripts&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Testing (with sqlite, experimental and pcre2)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on OS X with macports (and all options):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on macOS running on M1/AARCH64 and Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;autoreconf -vif&#xA;env CPPFLAGS=&#34;-Wno-deprecated-declarations&#34; ./configure --with-experimental&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on OS X 10.10 with XCode 7.1 and Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc-4.9 CXX=g++-4.9 ./configure&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Older XCode ships with a version of LLVM that does not support CPU feature detection; which causes the &lt;code&gt;./configure&lt;/code&gt; to fail. To work around this older LLVM, it is required that a different compile suite is used, such as GCC or a newer LLVM from Homebrew.&lt;/p&gt; &lt;p&gt;If you wish to use OpenSSL from Homebrew, you may need to specify the location to its installation. To figure out where OpenSSL lives, run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew --prefix openssl&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the output above as the DIR for &lt;code&gt;--with-openssl=DIR&lt;/code&gt; in the &lt;code&gt;./configure&lt;/code&gt; line:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc-4.9 CXX=g++-4.9 ./configure --with-openssl=DIR&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on FreeBSD with gcc9&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc9 CXX=g++9 MAKE=gmake ./configure&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on Cygwin with Airpcap (assuming Airpcap devpack is unpacked in Aircrack-ng directory)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src&#xA;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-osdep&#xA;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-crypto&#xA;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-util&#xA;dlltool -D Airpcap_Devpack/bin/x86/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x86/libairpcap.dll.a&#xA;autoreconf -i&#xA;./configure --with-experimental --with-airpcap=$(pwd)&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on DragonflyBSD with gcrypt using GCC 8&lt;/p&gt; &lt;pre&gt;&lt;code&gt;autoreconf -i&#xA;env CC=gcc8 CXX=g++8 MAKE=gmake ./configure --with-experimental --with-gcrypt&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on OpenBSD (with autoconf 2.69 and automake 1.16)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export AUTOCONF_VERSION=2.69&#xA;export AUTOMAKE_VERSION=1.16&#xA;autoreconf -i&#xA;env MAKE=gmake CC=cc CXX=c++ ./configure&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling and debugging aircrack-ng&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CFLAGS=&#39;-O0 -g&#39;&#xA;export CXXFLAGS=&#39;-O0 -g&#39;&#xA;./configure --with-experimental --enable-maintainer-mode --without-opt&#xA;make&#xA;LD_LIBRARY_PATH=.libs gdb --args ./aircrack-ng [PARAMETERS]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;IDE development&lt;/h1&gt; &#xA;&lt;h2&gt;VS Code - devcontainers&lt;/h2&gt; &#xA;&lt;p&gt;A VS Code development environment is provided, as is, for rapid setup of a development environment. This additionally adds support for GitHub Codespaces.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The first requirement is a working &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker Engine&lt;/a&gt; environment.&lt;/p&gt; &#xA;&lt;p&gt;Next, an installation of &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; with the following extension(s):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;&lt;code&gt;Remote - Containers&lt;/code&gt;&lt;/a&gt; by Microsoft.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &#34;Remote - Containers&#34; extension will refuse to work with OSS Code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to your working folder:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/aircrack-ng/aircrack-ng.git&#xA;$ cd aircrack-ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After cloning this repository, open the folder inside VS Code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ code .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;IMPORTANT: You should answer &#34;Yes&#34;, if it asks if the folder should be opened inside a remote container. If it does not ask, then press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and type &lt;code&gt;open in container&lt;/code&gt;. This should bring up the correct command, for which pressing enter will run said command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;A number of warnings might appear about a missing &lt;code&gt;compile_commands.json&lt;/code&gt; file. These are safe to ignore for a moment, as this file is automatically generated after the initial compilation.&lt;/li&gt; &#xA; &lt;li&gt;Now build the entire project by pressing &lt;code&gt;Ctrl+R&lt;/code&gt; and selecting &lt;code&gt;Build Full&lt;/code&gt; from the pop-up menu that appears.&lt;/li&gt; &#xA; &lt;li&gt;VS Code should detect the &lt;code&gt;compile_commands.json&lt;/code&gt; file and ask if it should be used; selecting &#34;Yes, always&#34; will complete the initial setup of a fully working IDE.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;IMPORTANT: If it doesn&#39;t detect the file, pressing &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and typing &lt;code&gt;reload window&lt;/code&gt; will bring up the selection to fully reload the environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;At this point, nearly all features of VS Code will function; from Intellisense, auto-completion, live documentation, to code formatting. Additionally, there are pre-configured tasks for builds and tests, as well as an example GDB/LLDB configuration for debugging &lt;code&gt;aircrack-ng&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Packaging&lt;/h1&gt; &#xA;&lt;p&gt;Automatic detection of CPU optimization is done at run time. This behavior &lt;strong&gt;is&lt;/strong&gt; desirable when packaging Aircrack-ng (for a Linux or other distribution.)&lt;/p&gt; &#xA;&lt;p&gt;Also, in some cases it may be desired to provide your own flags completely and not having the suite auto-detect a number of optimizations. To do this, add the additional flag &lt;code&gt;--without-opt&lt;/code&gt; to the &lt;code&gt;./configure&lt;/code&gt; line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./configure --without-opt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Using pre-compiled binaries&lt;/h1&gt; &#xA;&lt;h2&gt;Linux/BSD&lt;/h2&gt; &#xA;&lt;p&gt;Aircrack-ng is available in most distributions repositories. However, it is not always up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the appropriate &#34;monitor&#34; driver for your card; standard drivers don&#39;t work for capturing data.&lt;/li&gt; &#xA; &lt;li&gt;Aircrack-ng suite is command line tools. So, you have to open a command-line &lt;code&gt;Start menu -&amp;gt; Run... -&amp;gt; cmd.exe&lt;/code&gt; then use them&lt;/li&gt; &#xA; &lt;li&gt;Run the executables without any parameters to have help&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Some more information is present in the &lt;a href=&#34;https://raw.githubusercontent.com/aircrack-ng/aircrack-ng/master/README&#34;&gt;README&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Documentation, tutorials, ... can be found on &lt;a href=&#34;https://aircrack-ng.org&#34;&gt;https://aircrack-ng.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support is available in the &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; and on IRC (in #aircrack-ng on Libera Chat).&lt;/p&gt; &#xA;&lt;p&gt;Every tool has its own manpage. For aircrack-ng, &lt;code&gt;man aircrack-ng&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Infrastructure sponsors&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>bol-van/zapret</title>
    <updated>2024-07-28T01:36:26Z</updated>
    <id>tag:github.com,2024-07-28:/bol-van/zapret</id>
    <link href="https://github.com/bol-van/zapret" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DPI bypass multi platform&lt;/p&gt;&lt;hr&gt;&lt;p&gt;zapret v.60&lt;/p&gt; &#xA;&lt;h2&gt;English&lt;/h2&gt; &#xA;&lt;p&gt;For english version refer to docs/readme.eng.txt&lt;/p&gt; &#xA;&lt;h2&gt;Для чего это надо&lt;/h2&gt; &#xA;&lt;p&gt;Автономное, без задействования сторонних серверов, средство противодействия DPI. Может помочь обойти блокировки или замедление сайтов http(s), сигнатурный анализ tcp и udp протоколов, например с целью блокировки VPN.&lt;/p&gt; &#xA;&lt;p&gt;Проект нацелен прежде всего на маломощные embedded устройства - роутеры, работающие под openwrt. Поддерживаются традиционные Linux системы, FreeBSD, OpenBSD, частично MacOS. В некоторых случаях возможна самостоятельная прикрутка решения к различным прошивкам.&lt;/p&gt; &#xA;&lt;p&gt;Большая часть функционала работает на windows.&lt;/p&gt; &#xA;&lt;h2&gt;Как побыстрее начать&lt;/h2&gt; &#xA;&lt;p&gt;Читайте docs/quick_start.txt для linux и openwrt, docs/quick_start_windows.txt для windows.&lt;/p&gt; &#xA;&lt;h2&gt;Как это работает&lt;/h2&gt; &#xA;&lt;p&gt;В самом простейшем случае вы имеете дело с пассивным DPI. Пассивный DPI может читать трафик из потока, может инжектить свои пакеты, но не может блокировать проходящие пакеты. Если запрос &#34;плохой&#34;, пассивный DPI инжектит пакет RST, опционально дополняя его пакетом http redirect. Если фейк пакет инжектится только для клиента, в этом случае можно обойтись командами iptables для дропа RST и/или редиректа на заглушку по определенным условиям, которые нужно подбирать для каждого провайдера индивидуально. Так мы обходим последствия срабатывания триггера запрета. Если пассивный DPI направляет пакет RST в том числе и серверу, то вы ничего с этим не сможете сделать. Ваша задача - не допустить срабатывания триггера запрета. Одними iptables уже не обойдетесь. Этот проект нацелен именно на предотвращение срабатывания запрета, а не ликвидацию его последствий.&lt;/p&gt; &#xA;&lt;p&gt;Активный DPI ставится в разрез провода и может дропать пакеты по любым критериям, в том числе распознавать TCP потоки и блокировать любые пакеты, принадлежащие потоку.&lt;/p&gt; &#xA;&lt;p&gt;Как не допустить срабатывания триггера запрета ? Послать то, на что DPI не расчитывает и что ломает ему алгоритм распознавания запросов и их блокировки.&lt;/p&gt; &#xA;&lt;p&gt;Некоторые DPI не могут распознать http запрос, если он разделен на TCP сегменты. Например, запрос вида &#34;GET / HTTP/1.1\r\nHost: kinozal.tv......&#34; мы посылаем 2 частями : сначала идет &#34;GET &#34;, затем &#34;/ HTTP/1.1\r\nHost: kinozal.tv.....&#34;. Другие DPI спотыкаются, когда заголовок &#34;Host:&#34; пишется в другом регистре : например, &#34;host:&#34;. Кое-где работает добавление дополнительного пробела после метода : &#34;GET /&#34; =&amp;gt; &#34;GET /&#34; или добавление точки в конце имени хоста : &#34;Host: kinozal.tv.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Существует и более продвинутая магия, направленная на преодоление DPI на пакетном уровне.&lt;/p&gt; &#xA;&lt;p&gt;Подробнее про DPI : &lt;a href=&#34;https://habr.com/ru/post/335436&#34;&gt;https://habr.com/ru/post/335436&lt;/a&gt; &lt;a href=&#34;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&#34;&gt;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Что сейчас происходит в России&lt;/h2&gt; &#xA;&lt;p&gt;Раньше , до внедрения повсеместных систем ТСПУ, использовался зоопарк различных DPI у провайдеров. Какие-то были активными, какие-то пассивными. Сейчас время простых iptables окончательно ушло. Везде активный DPI ТСПУ, но кое-где могут оставаться невыключенными дополнительные старые DPI из зоопарка. В этом случае приходится обходить сразу несколько DPI. Все больше становится внереестровых блокировок, о которых вы узнаете только по факту недоступности чего-либо, в списках этого нет. Применяются блокировки некоторых диапазонов ip адресов (автономный обход невозможен) и протоколов (VPN). На некоторых диапазонах IP используется более строгий фильтр, распознающий попытки обмана через сегментацию. Должно быть это связано с некоторыми сервисами, которые пытаются таким образом обмануть DPI.&lt;/p&gt; &#xA;&lt;h2&gt;Как это реализовать на практике в системе linux&lt;/h2&gt; &#xA;&lt;p&gt;Если кратко, то варианты можно классифицировать по следующей схеме :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Пассивный DPI, не отправляющий RST серверу. Помогут индивидуально настраиваемые под провайдера команды iptables. На rutracker в разделе &#34;обход блокировок - другие способы&#34; по этому вопросу существует отдельная тема. В данном проекте не рассматривается. Если вы не допустите срабатывание триггера запрета, то и не придется бороться с его последствиями.&lt;/li&gt; &#xA; &lt;li&gt;Модификация TCP соединения на уровне потока. Реализуется через proxy или transparent proxy.&lt;/li&gt; &#xA; &lt;li&gt;Модификация TCP соединения на уровне пакетов. Реализуется через обработчик очереди NFQUEUE и raw сокеты.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Для вариантов 2 и 3 реализованы программы tpws и nfqws соответственно. Чтобы они работали, необходимо их запустить с нужными параметрами и перенаправить на них определенный трафик средствами iptables или nftables.&lt;/p&gt; &#xA;&lt;p&gt;Для перенаправления tcp соединения на transparent proxy используются команды следующего вида :&lt;/p&gt; &#xA;&lt;p&gt;проходящий трафик : iptables -t nat -I PREROUTING -i &amp;lt;внутренний_интерфейс&amp;gt; -p tcp --dport 80 -j DNAT --to 127.0.0.127:988 исходящий трафик : iptables -t nat -I OUTPUT -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m owner ! --uid-owner tpws -j DNAT --to 127.0.0.127:988&lt;/p&gt; &#xA;&lt;p&gt;DNAT на localhost работает в цепочке OUTPUT, но не работает в цепочке PREROUTING без включения параметра route_localnet :&lt;/p&gt; &#xA;&lt;p&gt;sysctl -w net.ipv4.conf.&amp;lt;внутренний_интерфейс&amp;gt;.route_localnet=1&lt;/p&gt; &#xA;&lt;p&gt;Можно использовать &#34;-j REDIRECT --to-port 988&#34; вместо DNAT , однако в этом случае процесс transparent proxy должен слушать на ip адресе входящего интерфейса или на всех адресах. Слушать на всех - не есть хорошо с точки зрения безопасности. Слушать на одном (локальном) можно, но в случае автоматизированного скрипта придется его узнавать, потом динамически вписывать в команду. В любом случае требуются дополнительные усилия. Использование route_localnet тоже имеет потенциальные проблемы с безопасностью. Вы делаете доступным все, что висит на 127.0.0.0/8 для локальной подсети &amp;lt;внутренний_интерфейс&amp;gt;. Службы обычно привязываются к 127.0.0.1, поэтому можно средствами iptables запретить входящие на 127.0.0.1 не с интерфейса lo, либо повесить tpws на любой другой IP из из 127.0.0.0/8, например на 127.0.0.127, и разрешить входящие не с lo только на этот IP.&lt;/p&gt; &#xA;&lt;p&gt;iptables -A INPUT ! -i lo -d 127.0.0.127 -j ACCEPT iptables -A INPUT ! -i lo -d 127.0.0.0/8 -j DROP&lt;/p&gt; &#xA;&lt;p&gt;Фильтр по owner необходим для исключения рекурсивного перенаправления соединений от самого tpws. tpws запускается под пользователем &#34;tpws&#34;, для него задается исключающее правило.&lt;/p&gt; &#xA;&lt;p&gt;tpws может использоваться в режиме socks proxy. В этом случае iptables не нужны, а нужно прописать socks в настройки программы (например, броузера), с которой будем обходить блокировки. transparent proxy отличается от socks именно тем, что в варианте transparent настраивать клиентские программы не нужно.&lt;/p&gt; &#xA;&lt;p&gt;Для перенаправления на очередь NFQUEUE исходящего и проходящего в сторону внешнего интерфейса трафика используются команды следующего вида :&lt;/p&gt; &#xA;&lt;p&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -j NFQUEUE --queue-num 200 --queue-bypass&lt;/p&gt; &#xA;&lt;p&gt;Чтобы не трогать трафик на незаблокированные адреса, можно взять список заблокированных хостов, заресолвить его в IP адреса и загнать в ipset zapret, затем добавить фильтр в команду :&lt;/p&gt; &#xA;&lt;p&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m set --match-set zapret dst -j NFQUEUE --queue-num 200 --queue-bypass&lt;/p&gt; &#xA;&lt;p&gt;DPI может ловить только первый http запрос, игнорируя последующие запросы в keep-alive сессии. Тогда можем уменьшить нагрузку на проц, отказавшись от процессинга ненужных пакетов.&lt;/p&gt; &#xA;&lt;p&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -m set --match-set zapret dst -j NFQUEUE --queue-num 200 --queue-bypass&lt;/p&gt; &#xA;&lt;p&gt;Фильтр по mark нужен для отсечения от очереди пакетов, сгенерированных внутри nfqws. Если применяется фильтр по connbytes 1:6, то обязательно добавлять в iptables и фильтр по mark. Иначе возможно перепутывание порядка следования пакетов, что приведет к неработоспособности метода.&lt;/p&gt; &#xA;&lt;p&gt;Для некоторых атак на DPI требуется перенаправлять один или несколько входящих пакетов от соединения :&lt;/p&gt; &#xA;&lt;p&gt;iptables -t mangle -I PREROUTING -i &amp;lt;внешний_интерфейс&amp;gt; -p tcp --sport 80 -m connbytes --connbytes-dir=reply --connbytes-mode=packets --connbytes 1:6 -m set --match-set zapret src -j NFQUEUE --queue-num 200 --queue-bypass&lt;/p&gt; &#xA;&lt;p&gt;Получаемые пакеты будут фильтровться по входящему интерфейсу, порту и IP источника, то есть наоборот прямому правилу.&lt;/p&gt; &#xA;&lt;p&gt;Некоторые техники, ломающие NAT, не всегда можно реализовать через iptables. Требуются nftables.&lt;/p&gt; &#xA;&lt;p&gt;Если ваше устройство поддерживает аппаратное ускорение (flow offloading, hardware nat, hardware acceleration), то iptables могут не работать. При включенном offloading пакет не проходит по обычному пути netfilter. Необходимо или его отключить, или выборочно им управлять.&lt;/p&gt; &#xA;&lt;p&gt;В новых ядрах (и в более старых, openwrt портировал изменение на 4.14) присутствует software flow offloading (SFO). Пакеты, проходящие через SFO, так же проходят мимо большей части механизмов iptables. При включенном SFO работает DNAT/REDIRECT (tpws). Эти соединения исключаются из offloading. Однако, остальные соединения идут через SFO, потому NFQUEUE будет срабатывать только до помещения соединения в flowtable. Практически это означает, что nfqws будет работать на window size changing, но не будут работать опции по модификации содержимого пакетов. Offload включается через специальный target в iptables &#34;FLOWOFFLOAD&#34;. Не обязательно пропускать весь трафик через offload. Можно исключить из offload соединения, которые должны попасть на tpws или nfqws. openwrt не предусматривает выборочного управления offload. Поэтому скрипты zapret поддерживают свою систему выборочного управления offload в openwrt.&lt;/p&gt; &#xA;&lt;h2&gt;Особенности применения ip6tables&lt;/h2&gt; &#xA;&lt;p&gt;ip6tables работают почти точно так же, как и ipv4, но есть ряд важных нюансов. В DNAT следует брать адрес --to в квадратные скобки. Например :&lt;/p&gt; &#xA;&lt;p&gt;ip6tables -t nat -I OUTPUT -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m owner ! --uid-owner tpws -j DNAT --to [::1]:988&lt;/p&gt; &#xA;&lt;p&gt;Параметра route_localnet не существует для ipv6. DNAT на localhost (::1) возможен только в цепочке OUTPUT. В цепочке PREROUTING DNAT возможен на любой global address или на link local address того же интерфейса, откуда пришел пакет. NFQUEUE работает без изменений.&lt;/p&gt; &#xA;&lt;h2&gt;Особенности применения nftables&lt;/h2&gt; &#xA;&lt;p&gt;Более подробно преимущества и недостатки nftables применительно к данной системе описаны в docs/nftables_notes.txt Если коротко, то в nftables невозможно работать с большими ip листами на системах с малым количеством RAM. Остальные рассматриваемые здесь функции могут быть перенесены на nftables.&lt;/p&gt; &#xA;&lt;p&gt;Рекомендуется версия nft 1.0.2 или выше. Но чем выше версия, тем лучше. В nft регулярно находят баги.&lt;/p&gt; &#xA;&lt;p&gt;Относительно старые версии ядра и/или утилиты nft могут вызывать ошибки. В частности, на ubuntu 18.04 с ядром 4.15 будут проблемы. В 20.04 - работает.&lt;/p&gt; &#xA;&lt;p&gt;Некоторые техники можно полноценно использовать только с nftables. Например, в iptables невозможно перенаправить пакеты на nfqws после NAT. Следовательно, при использовании NAT невозможно произвести атаку, не совместимую с NAT. В nftables этой проблемы не существует, потому что приоритеты хука выставляете вы сами, а не привязаны к фиксированным значениям, соответствующим разным таблицам iptables. В iptables нет таблицы, способной перехватить пакеты после MASQUERDADE.&lt;/p&gt; &#xA;&lt;h2&gt;Когда это работать не будет&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Если подменяется DNS. С этой проблемой легко справиться.&lt;/li&gt; &#xA; &lt;li&gt;Если блокировка осуществляется по IP.&lt;/li&gt; &#xA; &lt;li&gt;Если соединение проходит через фильтр, способный реконструировать TCP соединение, и который следует всем стандартам. Например, нас заворачивают на squid. Соединение идет через полноценный стек tcpip операционной системы, фрагментация отпадает сразу как средство обхода. Squid правильный, он все найдет как надо, обманывать его бесполезно. НО. Заворачивать на squid могут позволить себе лишь небольшие провайдеры, поскольку это очень ресурсоемко. Большие компании обычно используют DPI, который расчитан на гораздо большую пропускную способность. Может применяться комбинированный подход, когда на DPI заворачивают только IP из &#34;плохого&#34; списка, и дальше уже DPI решает пропускать или нет. Так можно снизить нагрузку на DPI в десятки, если не сотни раз, а следовательно не покупать очень дорогие решения, обойдясь чем-то существенно более дешевым. Мелкие провайдеры могут покупать услугу фильтрации у вышестоящих, чтобы самим не морочиться, и они уже будут применять DPI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;nfqws&lt;/h2&gt; &#xA;&lt;p&gt;Эта программа - модификатор пакетов и обработчик очереди NFQUEUE. Для BSD систем существует адаптированный вариант - dvtws, собираемый из тех же исходников (см. bsd.txt).&lt;/p&gt; &#xA;&lt;p&gt;--debug=0|1 ; 1=выводить отладочные сообщения --daemon ; демонизировать прогу --pidfile=&#xA; &lt;file&gt;&#xA;   ; сохранить PID в файл --user=&#xA;  &lt;username&gt;&#xA;    ; менять uid процесса --uid=uid[:gid] ; менять uid процесса --qnum=N ; номер очереди N --bind-fix4 ; пытаться решить проблему неверного выбора исходящего интерфейса для сгенерированных ipv4 пакетов --bind-fix6 ; пытаться решить проблему неверного выбора исходящего интерфейса для сгенерированных ipv6 пакетов --wsize=&#xA;   &lt;winsize&gt;&#xA;    [:&amp;lt;scale_factor&amp;gt;] ; менять tcp window size на указанный размер в SYN,ACK. если не задан scale_factor, то он не меняется (устарело !) --wssize=&#xA;    &lt;winsize&gt;&#xA;     [:&amp;lt;scale_factor&amp;gt;] ; менять tcp window size на указанный размер в исходящих пакетах. scale_factor по умолчанию 0. (см. conntrack !) --wssize-cutoff=[n|d|s]N ; изменять server window size в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N --ctrack-timeouts=S:E:F[:U] ; таймауты внутреннего conntrack в состояниях SYN, ESTABLISHED, FIN, таймаут udp. по умолчанию 60:300:60:60 --hostcase ; менять регистр заголовка &#34;Host:&#34; по умолчанию на &#34;host:&#34;. --hostnospace ; убрать пробел после &#34;Host:&#34; и переместить его в конец значения &#34;User-Agent:&#34; для сохранения длины пакета --hostspell=HoST ; точное написание заголовка Host (можно &#34;HOST&#34; или &#34;HoSt&#34;). автоматом включает --hostcase --domcase ; домен после Host: сделать таким : TeSt.cOm --dpi-desync=[&#xA;     &lt;mode0&gt;&#xA;      ,]&#xA;      &lt;mode&gt;&#xA;       [,&amp;lt;mode2] ; атака по десинхронизации DPI. mode : synack syndata fake fakeknown rst rstack hopbyhop destopt ipfrag1 disorder disorder2 split split2 ipfrag2 udplen tamper --dpi-desync-fwmark=&amp;lt;int|0xHEX&amp;gt; ; бит fwmark для пометки десинхронизирующих пакетов, чтобы они повторно не падали в очередь. default = 0x40000000 --dpi-desync-ttl=&#xA;       &lt;int&gt;&#xA;         ; установить ttl для десинхронизирующих пакетов --dpi-desync-ttl6=&#xA;        &lt;int&gt;&#xA;          ; установить ipv6 hop limit для десинхронизирующих пакетов. если не указано, используется значение ttl --dpi-desync-autottl=[&#xA;         &lt;delta&gt;&#xA;          [:&#xA;          &lt;min&gt;&#xA;           [-&#xA;           &lt;max&gt;&#xA;            ]]] ; режим auto ttl для ipv4 и ipv6. по умолчанию: 1:3-20. delta=0 отключает функцию. --dpi-desync-autottl6=[&#xA;            &lt;delta&gt;&#xA;             [:&#xA;             &lt;min&gt;&#xA;              [-&#xA;              &lt;max&gt;&#xA;               ]]] ; переопределение предыдущего параметра для ipv6 --dpi-desync-fooling=&#xA;               &lt;fooling&gt;&#xA;                 ; дополнительные методики как сделать, чтобы фейковый пакет не дошел до сервера. none md5sig badseq badsum datanoack hopbyhop hopbyhop2 --dpi-desync-repeats=&#xA;                &lt;n&gt;&#xA;                  ; посылать каждый генерируемый в nfqws пакет N раз (не влияет на остальные пакеты) --dpi-desync-skip-nosni=0| 1 ; 1(default)=не применять dpi desync для запросов без hostname в SNI, в частности для ESNI --dpi-desync-split-pos=&amp;lt;1..1500&amp;gt; ; (только для split*, disorder*) разбивать пакет на указанной позиции --dpi-desync-split-http-req=method|host ; разбивка http request на указанном логическом месте --dpi-desync-split-tls=sni|sniext ; разбивка tls client hello на указанном логическом месте --dpi-desync-split-seqovl=&#xA;                 &lt;int&gt;&#xA;                   ; использовать sequence overlap перед первым отсылаемым оригинальным tcp сегментом --dpi-desync-split-seqovl-pattern=&#xA;                  &lt;filename&gt;&#xA;                   |0xHEX ; чем заполнять фейковую часть overlap --dpi-desync-badseq-increment=&amp;lt;int|0xHEX&amp;gt; ; инкремент sequence number для badseq. по умолчанию -10000 --dpi-desync-badack-increment=&amp;lt;int|0xHEX&amp;gt; ; инкремент ack sequence number для badseq. по умолчанию -66000 --dpi-desync-any-protocol=0|1 ; 0(default)=работать только по http request и tls clienthello 1=по всем непустым пакетам данных --dpi-desync-fake-http=&#xA;                   &lt;filename&gt;&#xA;                    |0xHEX ; файл, содержащий фейковый http запрос для dpi-desync=fake, на замену стандартному &#xA;                    &lt;a href=&#34;http://www.iana.org&#34;&gt;www.iana.org&lt;/a&gt; --dpi-desync-fake-tls=&#xA;                    &lt;filename&gt;&#xA;                     |0xHEX ; файл, содержащий фейковый tls clienthello для dpi-desync=fake, на замену стандартному &#xA;                     &lt;a href=&#34;http://www.iana.org&#34;&gt;www.iana.org&lt;/a&gt; --dpi-desync-fake-unknown=&#xA;                     &lt;filename&gt;&#xA;                      |0xHEX ; файл, содержащий фейковый пейлоад неизвестного протокола для dpi-desync=fake, на замену стандартным нулям 256 байт --dpi-desync-fake-syndata=&#xA;                      &lt;filename&gt;&#xA;                       |0xHEX ; файл, содержащий фейковый пейлоад пакета SYN для режима десинхронизации syndata --dpi-desync-fake-quic=&#xA;                       &lt;filename&gt;&#xA;                        |0xHEX ; файл, содержащий фейковый QUIC Initial --dpi-desync-fake-dht=&#xA;                        &lt;filename&gt;&#xA;                         |0xHEX ; файл, содержащий фейковый пейлоад DHT протокола для dpi-desync=fake, на замену стандартным нулям 64 байт --dpi-desync-fake-unknown-udp=&#xA;                         &lt;filename&gt;&#xA;                          |0xHEX ; файл, содержащий фейковый пейлоад неизвестного udp протокола для dpi-desync=fake, на замену стандартным нулям 64 байт --dpi-desync-udplen-increment=&#xA;                          &lt;int&gt;&#xA;                            ; насколько увеличивать длину udp пейлоада в режиме udplen --dpi-desync-udplen-pattern=&#xA;                           &lt;filename&gt;&#xA;                            |0xHEX ; чем добивать udp пакет в режиме udplen. по умолчанию - нули --dpi-desync-start=[n|d|s]N ; применять dpi desync только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру больше или равно N --dpi-desync-cutoff=[n|d|s]N ; применять dpi desync только в исходящих пакетах (n), пакетах данных (d), относительных sequence (s) по номеру меньше N --hostlist=&#xA;                            &lt;filename&gt;&#xA;                              ; применять дурение только к хостам из листа. может быть множество листов, они обьединяются. пустой обший лист = его отсутствие --hostlist-exclude=&#xA;                             &lt;filename&gt;&#xA;                               ; не применять дурение к хостам из листа. может быть множество листов, они обьединяются --hostlist-auto=&#xA;                              &lt;filename&gt;&#xA;                                ; обнаруживать автоматически блокировки и заполнять автоматический hostlist (требует перенаправления входящего трафика) --hostlist-auto-fail-threshold=&#xA;                               &lt;int&gt;&#xA;                                 ; сколько раз нужно обнаружить ситуацию, похожую на блокировку, чтобы добавить хост в лист (по умолчанию: 3) --hostlist-auto-fail-time=&#xA;                                &lt;int&gt;&#xA;                                  ; все эти ситуации должны быть в пределах указанного количества секунд (по умолчанию: 60) --hostlist-auto-retrans-threshold=&#xA;                                 &lt;int&gt;&#xA;                                   ; сколько ретрансмиссий запроса считать блокировкой (по умолчанию: 3) --hostlist-auto-debug=&#xA;                                  &lt;logfile&gt;&#xA;                                    ; лог положительных решений по autohostlist. позволяет разобраться почему там появляются хосты.&#xA;                                  &lt;/logfile&gt;&#xA;                                 &lt;/int&gt;&#xA;                                &lt;/int&gt;&#xA;                               &lt;/int&gt;&#xA;                              &lt;/filename&gt;&#xA;                             &lt;/filename&gt;&#xA;                            &lt;/filename&gt;&#xA;                           &lt;/filename&gt;&#xA;                          &lt;/int&gt;&#xA;                         &lt;/filename&gt;&#xA;                        &lt;/filename&gt;&#xA;                       &lt;/filename&gt;&#xA;                      &lt;/filename&gt;&#xA;                     &lt;/filename&gt;&#xA;                    &lt;/filename&gt;&#xA;                   &lt;/filename&gt;&#xA;                  &lt;/filename&gt;&#xA;                 &lt;/int&gt;&#xA;                &lt;/n&gt;&#xA;               &lt;/fooling&gt;&#xA;              &lt;/max&gt;&#xA;             &lt;/min&gt;&#xA;            &lt;/delta&gt;&#xA;           &lt;/max&gt;&#xA;          &lt;/min&gt;&#xA;         &lt;/delta&gt;&#xA;        &lt;/int&gt;&#xA;       &lt;/int&gt;&#xA;      &lt;/mode&gt;&#xA;     &lt;/mode0&gt;&#xA;    &lt;/winsize&gt;&#xA;   &lt;/winsize&gt;&#xA;  &lt;/username&gt;&#xA; &lt;/file&gt;&lt;/p&gt; &#xA;&lt;p&gt;Параметры манипуляции могут сочетаться в любых комбинациях.&lt;/p&gt; &#xA;&lt;p&gt;ЗАМЕЧАНИЕ. Параметр --wsize считается устаревшим и более не поддерживается в скриптах. Функции сплита выполняются в рамках атаки десинхронизации. Это быстрее и избавляет от целого ряда недостатков wsize.&lt;/p&gt; &#xA;&lt;p&gt;АТАКА ДЕСИНХРОНИЗАЦИИ DPI Суть ее в следующем. После выполнения tcp 3-way handshake идет первый пакет с данными от клиента. Там обычно &#34;GET / ...&#34; или TLS ClientHello. Мы дропаем этот пакет, заменяя чем-то другим. Это может быть поддельная версия с безобидным, но валидным запросом http или https (вариант fake), пакет сброса соединения (варианты rst, rstack), разбитый на части оригинальный пакет с перепутанным порядком следования сегментов + обрамление первого сегмента фейками (disorder), то же самое без перепутывания порядка сегментов (split). fakeknown отличается от fake тем, что применяется только к распознанному протоколу. В литературе такие атаки еще называют TCB desynchronization и TCB teardown. Надо, чтобы фейковые пакеты дошли до DPI, но не дошли до сервера. На вооружении есть следующие возможности : установить низкий TTL, посылать пакет с инвалидной чексуммой, добавлять tcp option &#34;MD5 signature&#34;, испортить sequence numbers. Все они не лишены недостатков.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;md5sig работает не на всех серверах. Пакеты с md5 обычно отбрасывают только linux.&lt;/li&gt; &#xA; &lt;li&gt;badsum не сработает, если ваше устройство за NAT, который не пропускает пакеты с инвалидной суммой. Наиболее распространенная настройка NAT роутера в Linux их не пропускает. На Linux построено большинство домашних роутеров. Непропускание обеспечивается так : настройка ядра sysctl по умолчанию net.netfilter.nf_conntrack_checksum=1 заставляет conntrack проверять tcp и udp чексуммы входящих пакетов и выставлять state INVALID для пакетов с инвалидной суммой. Обычно в правилах iptables вставляется правило для дропа пакетов с состоянием INVALID в цепочке FORWARD. Совместное сочетание этих факторов приводит к непрохождению badsum через такой роутер. В openwrt из коробки net.netfilter.nf_conntrack_checksum=0, в других роутерах часто нет, и не всегда это можно изменить. Чтобы nfqws мог работать через роутер, нужно на нем выставить указанное значение sysctl в 0. nfqws на самом роутере будет работать и без этой настройки, потому что чексумма локально созданных пакетов не проверяется никогда. Если роутер за другим NAT, например провайдерским, и он не пропускает invalid packets вы ничего не сможете с этим сделать. Но обычно провайдеры все же пропускают badsum. На некоторых адаптерах/свитчах/драйверах принудительно включен rx-checksum offload, badsum пакеты отсекаются еще до получения в ОС. В этом случае если что-то и можно сделать, то только модифицировать драйвер, что представляется задачей крайне нетривиальной. Установлено, что так себя ведут некоторые роутеры на базе mediatek. badsum пакеты уходят с клиентской ОС, но роутером не видятся в br-lan через tcpdump. При этом если nfqws выполняется на самом роутере, обход может работать. badsum нормально уходят с внешнего интерфейса.&lt;/li&gt; &#xA; &lt;li&gt;Пакеты с badseq будут наверняка отброшены принимающим узлом, но так же и DPI, если он ориентируется на sequence numbers. По умолчанию смещение seq выбирается -10000. Практика показала, что некоторые DPI не пропускают seq вне определенного окна. Однако, такое небольшое смещение может вызвать проблемы при существенной потоковой передаче и потере пакетов. Если вы используете --dpi-desync-any-protocol, может понадобится установить badseq increment 0x80000000. Это обеспечит надежную гарантию, что поддельный пакет не вклинится в tcp window на сервере. Так же было замечено, что badseq ломает логику некоторых DPI при анализе http, вызывая зависание соединения. Причем на тех же DPI TLS с badseq работает нормально.&lt;/li&gt; &#xA; &lt;li&gt;TTL казалось бы - лучший вариант, но он требует индивидуальной настройки под каждого провайдера. Если DPI находится дальше локальных сайтов провайдера, то вы можете отрезать себе доступ к ним. Ситуация усугубляется наличием ТСПУ на магистралах, что вынуждает делать TTL достаточно высоким, увеличивая риск пробоя фейка до сервера. Необходим ip exclude list, заполняемый вручную. Вместе с ttl можно применять md5sig. Это ничего не испортит, зато дает неплохой шанс работы сайтов, до которых &#34;плохой&#34; пакет дойдет по TTL. Если не удается найти автоматическое решение, воспользуйтесь файлом zapret-hosts-user-exclude.txt. Некоторые стоковые прошивки роутеров фиксируют исходящий TTL, без отключения этой опции через них работать не будет. КАКИМ СТОИТ ВЫБИРАТЬ TTL : найдите минимальное значение, при котором обход еще работает. Это и будет номер хопа вашего DPI.&lt;/li&gt; &#xA; &lt;li&gt;hopbyhop относится только к ipv6. Добавляется ipv6 extenstion header &#34;hop-by-hop options&#34;. В варианте hopbyhop2 добавляются 2 хедера, что является нарушением стандарта и гарантированно отбрасывается стеком протоколов во всех ОС. Один хедер hop-by-hop принимается всеми ОС, однако на некоторых каналах/провайдерах такие пакеты могут фильтроваться и не доходить. Расчет идет на то, что DPI проанализирует пакет с hop-by-hop, но он либо не дойдет до адресата всилу фильтров провайдера, либо будет отброшен сервером, потому что хедера два.&lt;/li&gt; &#xA; &lt;li&gt;datanoack высылает фейки со снятым tcp флагом ACK. Сервера такое не принимают, а DPI может принять. Эта техника может ломать NAT и не всегда работает с iptables, если используется masquerade, даже с локальной системы (почти всегда на роутерах ipv4). На системах c iptables без masquerade и на nftables работает без ограничений. Экспериментально выяснено, что многие провайдерские NAT не отбрасывают эти пакеты, потому работает даже с внутренним провайдерским IP. Но linux NAT оно не пройдет, так что за домашним роутером эта техника не сработает, но может сработать с него.&lt;/li&gt; &#xA; &lt;li&gt;autottl. Суть режима в автоматическом определении TTL, чтобы он почти наверняка прошел DPI и немного не дошел до сервера. Берутся базовые значения TTL 64,128,255, смотрится входящий пакет (да, требуется направить первый входящий пакет на nfqws !). Вычисляется длина пути, отнимается delta (1 по умолчанию). Если TTL вне диапазона (min,max - 3,20 по умолчанию), то берутся значения min,max, чтобы вписаться в диапазон. Если при этом полученый TTL больше длины пути, то автоматизм не сработал и берутся фиксированные значения TTL для атаки. Техника позволяет решить вопрос , когда вся сеть перегорожена шлагбаумами (DPI, ТСПУ) везде где только можно, включая магистралов. Но потенциально может давать сбои. Например, при ассиметрии входящего и исходящего канала до конкретного сервера. На каких-то провайдерах эта техника будет работать неплохо, на других доставит больше проблем, чем пользы. Где-то может потребоваться тюнинг параметров. Лучше использовать с дополнительным ограничителем. Не рекомендуется для BSD систем, поскольку там нельзя ограничить количество входящих пакетов через connbytes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Режимы дурения могут сочетаться в любых комбинациях. --dpi-desync-fooling берет множество значений через запятую.&lt;/p&gt; &#xA;&lt;p&gt;Для режимов fake, rst, rstack после фейка отправляем оригинальный пакет.&lt;/p&gt; &#xA;&lt;p&gt;Режим disorder делит оригинальный пакет на 2 части и отправляет следующую комбинацию в указанном порядке :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;2-я часть пакета&lt;/li&gt; &#xA; &lt;li&gt;поддельная 1-я часть пакета, поле данных заполнено нулями&lt;/li&gt; &#xA; &lt;li&gt;1-я часть пакета&lt;/li&gt; &#xA; &lt;li&gt;поддельная 1-я часть пакета, поле данных заполнено нулями. отсылка 2-й раз. Оригинальный пакет дропается всегда. Параметр --dpi-desync-split-pos позволяет указать байтовую позицию, на которой происходит разбивка. По умолчанию - 2. Если позиция больше длины пакета, позиция выбирается 1. Этой последовательностью для DPI максимально усложняется задача реконструкции начального сообщения, по которому принимается решение о блокировке. Некоторым DPI хватит и tcp сегментов в неправильном порядке, поддельные части сделаны для дополнительной надежности и более сложных алгоритмов реконструкции. Режим disorder2 отключает отправку поддельных частей.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Режим split очень похож на disorder, только нет изменения порядка следования сегментов :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;поддельная 1-я часть пакета, поле данных заполнено нулями&lt;/li&gt; &#xA; &lt;li&gt;1-я часть пакета&lt;/li&gt; &#xA; &lt;li&gt;поддельная 1-я часть пакета, поле данных заполнено нулями. отсылка 2-й раз.&lt;/li&gt; &#xA; &lt;li&gt;2-я часть пакета Режим split2 отключает отправку поддельных частей. Он может быть использован как более быстрая альтернатива --wsize.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;disorder2 и split2 не предполагают отсылку фейк пакетов, поэтому опции ttl и fooling неактуальны.&lt;/p&gt; &#xA;&lt;p&gt;seqovl добавляет в начало первой отсылаемой части оригинального пакета (1 часть для split и 2 часть для disorder) seqovl байт со смещенным в минус sequence number на величину seqovl. В случае split2 расчет идет на то, что предыдущий отсыл, если он был, уже попал в сокет серверного приложения, поэтому новая пришедшая часть лишь частично находится в пределах текущего окна (in-window). Спереди фейковая часть отбрасывается, а оставшаяся часть содержит оригинал и начинается с начала window, поэтому попадает в сокет. Серверное приложение получает все, что реально отсылает клиент, отбрасывая фейковую out-of-window часть. Но DPI не может этого понять, поэтому у него происходит sequence десинхронизация.&lt;/p&gt; &#xA;&lt;p&gt;Для disorder2 overlap идет на 2-ю часть пакета. Обязательно, чтобы seqovl был меньше split_pos, иначе все отосланное будет передано в сокет сразу же, включая фейк, ломая протокол прикладного уровня. При соблюдении этого условия 2-я часть пакета является полностью in-window, поэтому серверная ОС принимает ее целиком, включая фейк. Но поскольку начальная часть данных из 1 пакета еще не принята, то фейк и реальные данные остаются в памяти ядра, не отправляясь в серверное приложение. Как только приходит 1-я часть пакета, она переписывает фейковую часть в памяти ядра. Ядро получает данные из 1 и 2 части, поэтому далее идет отправка в сокет приложения. Таково поведение всех unix ОС, кроме solaris - оставлять последние принятые данные. Windows оставляет старые данные, поэтому disorder с seqovl будет приводить к зависаниям соединения при работе с Windows серверами. Solaris практически мертв, windows серверов очень немного. Можно использовать листы при необходимости. Метод позволяет обойтись без fooling и TTL. Фейки перемешаны с реальным данными. split/disorder вместо split2/disorder2 по-прежнему добавляют дополнительные отдельные фейки.&lt;/p&gt; &#xA;&lt;p&gt;Режимы десинхронизации hopbyhop, destopt и ipfrag1 (не путать с fooling !) относятся только к ipv6 и заключается в добавлении хедера &#34;hop-by-hop options&#34; , &#34;destination options&#34; или &#34;fragment&#34; во все пакеты, попадающие под десинхронизацию. Здесь надо обязательно понимать, что добавление хедера увеличивает размер пакета, потому не может быть применено к пакетам максимального размера. Это имеет место при передаче больших сообщений. В случае невозможности отослать пакет дурение будет отменено, пакет будет выслан в оригинале. Расчет идет на то, что DPI увидит 0 в поле next header основного заголовка ipv6 и не будет скакать по extension хедерам в поисках транспортного хедера. Таким образом не поймет, что это tcp или udp, и пропустит пакет без анализа. Возможно, какие-то DPI на это купятся. Может сочетаться с любыми режимами 2-й фазы, кроме варианта &#34;ipfrag1+ipfrag2&#34;. Например, &#34;hopbyhop,split2&#34; означает разбить tcp пакет на 2 сегмента, в каждый из них добавить hop-by-hop. При &#34;hopbyhop,ipfrag2&#34; последовательность хедеров будет : ipv6,hop-by-hop,fragment,tcp/udp. Режим &#34;ipfrag1&#34; может срабатывать не всегда без специальной подготовки. См. раздел &#34;IP фрагментация&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Есть DPI, которые анализируют ответы от сервера, в частности сертификат из ServerHello, где прописаны домены. Подтверждением доставки ClientHello является ACK пакет от сервера с номером ACK sequence, соответствующим длине ClientHello+1. В варианте disorder обычно приходит сперва частичное подтверждение (SACK), потом полный ACK. Если вместо ACK или SACK идет RST пакет с минимальной задержкой, то DPI вас отсекает еще на этапе вашего запроса. Если RST идет после полного ACK спустя задержку, равную примерно пингу до сервера, тогда вероятно DPI реагирует на ответ сервера. DPI может отстать от потока, если ClientHello его удовлетворил и не проверять ServerHello. Тогда вам повезло. Вариант fake может сработать. Если же он не отстает и упорно проверяет ServerHello, то можно попробовать заставить сервер высылать ServerHello частями через параметр --wssize (см. conntrack). Если и это не помогает, то сделать с этим что-либо вряд ли возможно без помощи со стороны сервера. Лучшее решение - включить на сервере поддержку TLS 1.3. В нем сертификат сервера передается в зашифрованном виде. Это рекомендация ко всем админам блокируемых сайтов. Включайте TLS 1.3. Так вы дадите больше возможностей преодолеть DPI.&lt;/p&gt; &#xA;&lt;p&gt;Хосты извлекаются из Host: хедера обычных http запросов и из SNI в TLS ClientHello. Субдомены учитываются автоматически. Поддерживаются листы gzip.&lt;/p&gt; &#xA;&lt;p&gt;iptables для задействования атаки на первый пакет данных :&lt;/p&gt; &#xA;&lt;p&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp -m multiport --dports 80,443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass&lt;/p&gt; &#xA;&lt;p&gt;Этот вариант применяем, когда DPI не следит за всеми запросами http внутри keep-alive сессии. Если следит, направляем только первый пакет от https и все пакеты от http :&lt;/p&gt; &#xA;&lt;p&gt;iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:6 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass iptables -t mangle -I POSTROUTING -o &amp;lt;внешний_интерфейс&amp;gt; -p tcp --dport 80 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num 200 --queue-bypass&lt;/p&gt; &#xA;&lt;p&gt;mark нужен, чтобы сгенерированный поддельный пакет не попал опять к нам на обработку. nfqws выставляет fwmark при его отсылке. хотя nfqws способен самостоятельно различать помеченные пакеты, фильтр в iptables по mark нужен при использовании connbytes, чтобы не допустить изменения порядка следования пакетов. Процессинг очереди - процесс отложенный. Если ядро имеет пакеты на отсылку вне очереди - оно их отправляет незамедлительно. Изменение правильного порядка следования пакетов при десинхронизации ломает всю идею. При отсутствии ограничения на connbytes, атака будет работать и без фильтра по mark. Но лучше его все же оставить для увеличения скорости.&lt;/p&gt; &#xA;&lt;p&gt;Почему --connbytes 1:6 : 1 - для работы методов десинхронизации 0-й фазы и wssize 2 - иногда данные идут в 3-м пакете 3-way handshake 3 - стандартная ситуация приема одного пакета запроса 4-6 - на случай ретрансмиссии или запроса длиной в несколько пакетов (TLSClientHello с kyber, например)&lt;/p&gt; &#xA;&lt;p&gt;КОМБИНИРОВАНИЕ МЕТОДОВ ДЕСИНХРОНИЗАЦИИ В параметре dpi-desync можно указать до 3 режимов через запятую. 0 фаза предполагает работу на этапе установления соединения. Может быть synack или syndata. На 0 фазу не действует фильтр по hostlist. Последующие режимы отрабатывают на пакетах с данными. Режим 1-й фазы может быть fake,rst,rstack. Режим 2-й фазы может быть disorder,disorder2,split,split2,ipfrag2. Может быть полезно, когда у провайдера стоит не один DPI.&lt;/p&gt; &#xA;&lt;p&gt;РЕЖИМ SYNACK В документации по geneva это называется &#34;TCB turnaround&#34;. Попытка ввести DPI в заблуждение относительно ролей клиента и сервера. !!! Поскольку режим нарушает работу NAT, техника может сработать только если между атакующим устройством и DPI нет NAT. Атака не сработает через NAT роутер, но может сработать с него. Для реализации атаки в linux обязательно требуется отключить стандартное правило firewall, дропающее инвалидные пакеты в цепочке OUTPUT. Например : -A OUTPUT -m state --state INVALID -j DROP В openwrt можно отключить drop INVALID в OUTPUT и FORWARD через опцию в /etc/config/firewall :&lt;/p&gt; &#xA;&lt;p&gt;config zone option name &#39;wan&#39; ......... option masq_allow_invalid &#39;1&#39;&lt;/p&gt; &#xA;&lt;p&gt;К сожалению, отключить только в OUTPUT таким образом нельзя. Но можно сделать иначе. Вписать в /etc/firewall.user :&lt;/p&gt; &#xA;&lt;p&gt;iptables -D zone_wan_output -m comment --comment &#39;!fw3&#39; -j zone_wan_dest_ACCEPT ip6tables -D zone_wan_output -m comment --comment &#39;!fw3&#39; -j zone_wan_dest_ACCEPT&lt;/p&gt; &#xA;&lt;p&gt;Лучше делать так, потому что отсутствие дропа INVALID в FORWARD может привести к нежелательным утечкам пакетов из LAN. Если не принять эти меры, отсылка SYN,ACK сегмента вызовет ошибку и операция будет прервана. Остальные режимы тоже не сработают. Если поймете, что вам synack не нужен, обязательно верните правило дропа INVALID.&lt;/p&gt; &#xA;&lt;p&gt;РЕЖИМ SYNDATA Тут все просто. Добавляются данные в пакет SYN. Все ОС их игнорируют, если не используется TCP fast open (TFO), а DPI может воспринять, не разобравшись есть там TFO или нет. Оригинальные соединения с TFO не трогаются, поскольку это их точно сломает. Без уточняющего параметра добавляются 16 нулевых байтов.&lt;/p&gt; &#xA;&lt;p&gt;ВИРТУАЛЬНЫЕ МАШИНЫ Изнутри VM от virtualbox и vmware в режиме NAT не работают многие техники пакетной магии nfqws. Принудительно заменяется ttl, не проходят фейк пакеты. Необходимо настроить сеть в режиме bridge.&lt;/p&gt; &#xA;&lt;p&gt;CONNTRACK nfqws оснащен ограниченной реализацией слежения за состоянием tcp соединений (conntrack). Он включается для реализации некоторых методов противодействия DPI. conntrack способен следить за фазой соединения : SYN,ESTABLISHED,FIN , количеством пакетов в каждую сторону, sequence numbers. conntrack способен &#34;кормиться&#34; пакетами в обе или только в одну сторону. Соединение попадает в таблицу при обнаружении пакетов с выставленными флагами SYN или SYN,ACK. Поэтому если необходим conntrack, в правилах перенаправления iptables соединение должно идти на nfqws с самого первого пакета, хотя затем может обрываться по фильтру connbytes. Для UDP инициатором попадания в таблицу является первый UDP пакет. Он же и определяет направление потока. Считается, что первый UDP пакет исходит от клиента к серверу. Далее все пакеты с совпадающими src_ip,src_port,dst_ip,dst_port считаются принадлежащими этому потоку до истечения времени неактивности. conntrack - простенький, он не писался с учетом всевозможных атак на соединение, он не проверяет пакеты на валидность sequence numbers или чексумму. Его задача - лишь обслуживание нужд nfqws, он обычно кормится только исходящим трафиком, потому нечувствителен к подменам со стороны внешней сети. Соединение удаляется из таблицы, как только отпадает нужда в слежении за ним или по таймауту неактивности. Существуют отдельные таймауты на каждую фазу соединения. Они могут быть изменены параметром --ctrack-timeouts.&lt;/p&gt; &#xA;&lt;p&gt;--wssize позволяет изменить с клиента размер tcp window для сервера, чтобы он послал следующие ответы разбитыми на части. Чтобы это подействовало на все серверные ОС, необходимо менять window size в каждом исходящем с клиента пакете до отсылки сообщения, ответ на который должен быть разбит (например, TLS ClientHello). Именно поэтому и необходим conntrack, чтобы знать когда надо остановиться. Если не остановиться и все время устанавливать низкий wssize, скорость упадет катастрофически. В linux это может быть купировано через connbytes, но в BSD системах такой возможности нет. В случае http(s) останавливаемся сразу после отсылки первого http запроса или TLS ClientHello. Если вы имеете дело с не http(s), то вам потребуется параметр --wssize-cutoff. Он устанавливает предел, с которого действие wssize прекращается. Префикс d перед номером означает учитывать только пакеты с data payload, префикс s - relative sequence number, проще говоря количество переданных клиентом байтов + 1. Если проскочит пакет с http request или TLS ClientHello, действие wssize прекращается сразу же, не дожидаясь wssize-cutoff. Если ваш протокол склонен к долгому бездействию, следует увеличить таймаут фазы ESTABLISHED через параметр --ctrack-timeouts. Таймаут по умолчанию низкий - всего 5 минут. Не забывайте, что nfqws кормится приходящими на него пакетами. Если вы ограничили поступление пакетов через connbytes, то в таблице могут остаться повисшие соединения в фазе ESTABLISHED, которые отвалятся только по таймауту. Для диагностики состояния conntrack пошлите сигнал SIGUSR1 процессу nfqws : killall -SIGUSR1 nfqws. Текущая таблица будет выведена nfqws в stdout.&lt;/p&gt; &#xA;&lt;p&gt;Обычно в SYN пакете клиент отсылает кроме window size еще и TCP extension &#34;scaling factor&#34;. scaling factor представляет из себя степень двойки, на которую умножается window size : 0=&amp;gt;1, 1=&amp;gt;2, 2=&amp;gt;4, ..., 8=&amp;gt;256, ... В параметре wssize scaling factor указывается через двоеточие. Scaling factor может только снижаться, увеличение заблокировано, чтобы не допустить превышение размера окна со стороны сервера. Для принуждения сервера к фрагментации ServerHello, чтобы избежать просекание имени сервера из сертификата сервера на DPI, лучше всего использовать --wssize=1:6 . Основное правило - делать scale_factor как можно больше, чтобы после восстановления window size итоговый размер окна стал максимально возможным. Если вы сделаете 64:0, будет очень медленно. С другой стороны нельзя допустить, чтобы ответ сервера стал достаточно большим, чтобы DPI нашел там искомое.&lt;/p&gt; &#xA;&lt;p&gt;На --wssize не влияет фильтр hostlist, поскольку он действует с самого начала соединения, когда еще нельзя принять решение о попадании в лист. --wssize может замедлять скорость и/или увеличивать время ответа сайтов, поэтому если есть другие работающие способы обхода DPI, лучше применять их.&lt;/p&gt; &#xA;&lt;p&gt;--dpi-desync-cutoff позволяет задать предел, при достижении которого прекращается применение dpi-desync. Доступны префиксы n,d,s по аналогии с --wssize-cutoff. Полезно совместно с --dpi-desync-any-protocol=1. На склонных к бездействию соединениях следует изменить таймауты conntrack. Если соединение выпало из conntrack и задана опция --dpi-desync-cutoff, dpi desync применяться не будет.&lt;/p&gt; &#xA;&lt;p&gt;РЕАССЕМБЛИНГ nfqws поддерживает реассемблинг некоторых видов запросов. На текущий момент это TLS и QUIC ClientHello. Они бывает длинными, если в chrome включить пост-квантовую криптографию tls-kyber, и занимают как правило 2 или 3 пакета. kyber включен по умолчанию, начиная с chromium 124. chrome рандомизирует фингерпринт TLS. SNI может оказаться как в начале, так и в конце, то есть попасть любой пакет. stateful DPI обычно реассемблирует запрос целиком, и только потом принимает решение о блокировке. В случае получения TLS или QUIC пакета с частичным ClientHello начинается процесс сборки, а пакеты задерживаются и не отсылаются до ее окончания. По окончании сборки пакеты проходит через десинхронизацию на основании полностью собранного ClientHello. При любой ошибке в процессе сборки задержанные пакеты немедленно отсылаются в сеть, а десинхронизация отменяется.&lt;/p&gt; &#xA;&lt;p&gt;Есть специальная поддержка всех вариантов tcp сплита для многосегментного TLS. Если указать позицию сплита больше длины первого пакета или использовать --dpi-desync-split-tls, то разбивка происходит не обязательно первого пакета, а того, на который пришлась итоговая позиция. Если, допустим, клиент послал TLS ClientHello длиной 2000, а SNI начинается с 1700, и заданы опции fake,split2, то перед первым пакетом идет fake, затем первый пакет в оригинале, а последний пакет разбивается на 2 сегмента. В итоге имеем фейк в начале и 3 реальных сегмента.&lt;/p&gt; &#xA;&lt;p&gt;ПОДДЕРЖКА UDP Атаки на udp более ограничены в возможностях. udp нельзя фрагментировать иначе, чем на уровне ip. Для UDP действуют только режимы десинхронизации fake,hopbyhop,destopt,ipfrag1,ipfrag2,udplen,tamper. Возможно сочетание fake,hopbyhop,destopt с ipfrag2, fake,fakeknown с udplen и tamper. udplen увеличивает размер udp пакета на указанное в --dpi-desync-udplen-increment количество байтов. Паддинг заполняется нулями по умолчанию, но можно задать свой паттерн. Предназначено для обмана DPI, ориентирующегося на размеры пакетов. Может сработать, если пользовательсткий протокол не привязан жестко к размеру udp пейлоада. Режим tamper означает модификацию пакетов известных протоколов особенным для протокола образом. На текущий момент работает только с DHT. Поддерживается определение пакетов QUIC Initial с расшифровкой содержимого и имени хоста, то есть параметр --hostlist будет работать. Определяются пакеты wireguard handshake initiation и DHT (начинается с &#39;d1&#39;, кончается &#39;e&#39;). Для десинхронизации других протоколов обязательно указывать --dpi-desync-any-protocol. Реализован conntrack для udp. Можно пользоваться --dpi-desync-cutoff. Таймаут conntrack для udp можно изменить 4-м параметром в --ctrack-timeouts. Атака fake полезна только для stateful DPI, она бесполезна для анализа на уровне отдельных пакетов. По умолчанию fake наполнение - 64 нуля. Можно указать файл в --dpi-desync-fake-unknown-udp.&lt;/p&gt; &#xA;&lt;p&gt;IP ФРАГМЕНТАЦИЯ Современная сеть практически не пропускает фрагментированные tcp на уровне ip. На udp с этим дело получше, поскольку некоторые udp протоколы могут опираться на этот механизм (IKE старых версий). Однако, кое-где бывает, что режут и фрагментированный udp. Роутеры на базе linux могут самопроизвольно собирать или перефрагментировать пакеты. Позиция фрагментации задается отдельно для tcp и udp. По умолчанию 24 и 8 соответственно, должна быть кратна 8. Смещение считается с транспортного заголовка.&lt;/p&gt; &#xA;&lt;p&gt;Существует ряд моментов вокруг работы с фрагментами на Linux, без понимания которых может ничего не получиться.&lt;/p&gt; &#xA;&lt;p&gt;ipv4 : Linux дает отсылать ipv4 фрагменты, но стандартные настройки iptables в цепочке OUTPUT могут вызывать ошибки отправки.&lt;/p&gt; &#xA;&lt;p&gt;ipv6 : Нет способа для приложения гарантированно отослать фрагменты без дефрагментации в conntrack. На разных системах получается по-разному. Где-то нормально уходят, где-то пакеты дефрагментируются. Для ядер &amp;lt;4.16 похоже, что нет иного способа решить эту проблему, кроме как выгрузить модуль nf_conntrack, который подтягивает зависимость nf_defrag_ipv6. Он то как раз и выполняет дефрагментацию. Для ядер 4.16+ ситуация чуть лучше. Из дефрагментации исключаются пакеты в состоянии NOTRACK. Чтобы не загромождать описание, смотрите пример решения этой проблемы в blockcheck.sh.&lt;/p&gt; &#xA;&lt;p&gt;Иногда требуется подгружать модуль ip6table_raw с параметром raw_before_defrag=1. В openwrt параметры модулей указываются через пробел после их названий в файлах /etc/modules.d. В традиционных системах посмотрите используется ли iptables-legacy или iptables-nft. Если legacy, то нужно создать файл /etc/modprobe.d/ip6table_raw.conf с содержимым : options ip6table_raw raw_before_defrag=1 В некоторых традиционных дистрибутивах можно изменить текущий ip6tables через : update-alternatives --config ip6tables Если вы хотите оставаться на iptables-nft, вам придется пересобрать патченную версию. Патч совсем небольшой. В nft.c найдите фрагмент : { .name = &#34;PREROUTING&#34;, .type = &#34;filter&#34;, .prio = -300, /* NF_IP_PRI_RAW &lt;em&gt;/ .hook = NF_INET_PRE_ROUTING, }, { .name = &#34;OUTPUT&#34;, .type = &#34;filter&#34;, .prio = -300, /&lt;/em&gt; NF_IP_PRI_RAW */ .hook = NF_INET_LOCAL_OUT, }, и замените везде -300 на -450.&lt;/p&gt; &#xA;&lt;p&gt;Это нужно сделать вручную, никакой автоматики в blockcheck.sh нет.&lt;/p&gt; &#xA;&lt;p&gt;Либо можно раз и навсегда избавиться от этой проблемы, используя nftables. Там можно создать netfilter hook с любым приоритетом. Используйте приоритет -401 и ниже.&lt;/p&gt; &#xA;&lt;p&gt;При использовании iptables и NAT, похоже, что нет способа прицепить обработчик очереди после NAT. Пакет попадает в nfqws с source адресом внутренней сети, затем фрагментируется и уже не обрабатывается NAT. Так и уходит во внешюю сеть с src ip 192.168.x.x. Следовательно, метод не срабатывает. Видимо единственный рабочий метод - отказаться от iptables и использовать nftables. Хук должен быть с приоритетом 101 или выше.&lt;/p&gt; &#xA;&lt;h2&gt;tpws&lt;/h2&gt; &#xA;&lt;p&gt;tpws - это transparent proxy. --debug=0|1|2 ; Количество буковок в output : 0(default)=тихо, 1=подробно, 2=отладка --daemon ; демонизировать прогу --pidfile=&#xA; &lt;file&gt;&#xA;   ; сохранить PID в файл --user=&#xA;  &lt;username&gt;&#xA;    ; менять uid процесса --uid=uid[:gid] ; менять uid процесса --bind-addr ; на каком адресе слушать. может быть ipv4 или ipv6 адрес ; если указан ipv6 link local, то требуется указать с какого он интерфейса : fe80::1%br-lan --bind-linklocal=no|unwanted|prefer|force ; no : биндаться только на global ipv6 ; unwanted (default) : предпочтительно global, если нет - LL ; prefer : предпочительно LL, если нет - global ; force : биндаться только на LL --bind-iface4=&#xA;   &lt;iface&gt;&#xA;     ; слушать на первом ipv4 интерфейса iface --bind-iface6=&#xA;    &lt;iface&gt;&#xA;      ; слушать на первом ipv6 интерфейса iface --bind-wait-ifup=&#xA;     &lt;sec&gt;&#xA;       ; ждать до N секунд появления и поднятия интерфейса --bind-wait-ip=&#xA;      &lt;sec&gt;&#xA;        ; ждать до N секунд получения IP адреса (если задан --bind-wait-ifup - время идет после поднятия интерфейса) --bind-wait-ip-linklocal=&#xA;       &lt;sec&gt;&#xA;         ; имеет смысл только при задании --bind-wait-ip ; --bind-linklocal=unwanted : согласиться на LL после N секунд ; --bind-linklocal=prefer : согласиться на global address после N секунд --bind-wait-only ; подождать все бинды и выйти. результат 0 в случае успеха, иначе не 0. --socks ; вместо прозрачного прокси реализовать socks4/5 proxy --no-resolve ; запретить ресолвинг имен через socks5 --resolve-threads ; количество потоков ресолвера --port=&#xA;        &lt;port&gt;&#xA;          ; на каком порту слушать --maxconn=&amp;lt;max_connections&amp;gt; ; максимальное количество соединений от клиентов к прокси --maxfiles=&amp;lt;max_open_files&amp;gt; ; макс количество файловых дескрипторов (setrlimit). мин требование (X&#xA;         &lt;em&gt;connections+16), где X=6 в tcp proxy mode, X=4 в режиме тамперинга. ; стоит сделать запас с коэффициентом как минимум 1.5. по умолчанию maxfiles (X&lt;/em&gt;connections)*1.5+16 --max-orphan-time=&#xA;         &lt;sec&gt;&#xA;          ; если вы запускаете через tpws торрент-клиент с множеством раздач, он пытается установить очень много исходящих соединений, ; большая часть из которых отваливается по таймату (юзера сидят за NAT, firewall, ...) ; установление соединения в linux может длиться очень долго. локальный конец отвалился, перед этим послав блок данных, ; tpws ждет подключения удаленного конца, чтобы отослать ему этот блок, и зависает надолго. ; настройка позволяет сбрасывать такие подключения через N секунд, теряя блок данных. по умолчанию 5 сек. 0 означает отключить функцию ; эта функция не действует на успешно подключенные ранее соединения&#xA;         &lt;/sec&gt;&#xA;        &lt;/port&gt;&#xA;       &lt;/sec&gt;&#xA;      &lt;/sec&gt;&#xA;     &lt;/sec&gt;&#xA;    &lt;/iface&gt;&#xA;   &lt;/iface&gt;&#xA;  &lt;/username&gt;&#xA; &lt;/file&gt;&lt;/p&gt; &#xA;&lt;p&gt;--local-rcvbuf=&#xA; &lt;bytes&gt;&#xA;   ; SO_RCVBUF для соединений client-proxy --local-sndbuf=&#xA;  &lt;bytes&gt;&#xA;    ; SO_SNDBUF для соединений client-proxy --remote-rcvbuf=&#xA;   &lt;bytes&gt;&#xA;     ; SO_RCVBUF для соединений proxy-target --remote-sndbuf=&#xA;    &lt;bytes&gt;&#xA;      ; SO_SNDBUF для соединений proxy-target --nosplice ; не использовать splice на linux системах --skip-nodelay ; не устанавливать в исходящих соединения TCP_NODELAY. несовместимо со split.&#xA;    &lt;/bytes&gt;&#xA;   &lt;/bytes&gt;&#xA;  &lt;/bytes&gt;&#xA; &lt;/bytes&gt;&lt;/p&gt; &#xA;&lt;p&gt;--split-http-req=method|host ; способ разделения http запросов на сегменты : около метода (GET,POST) или около заголовка Host --split-pos=&#xA; &lt;offset&gt;&#xA;   ; делить все посылы на сегменты в указанной позиции. единственная опция, работающая на не-http. при указании split-http-req он имеет преимущество на http. --split-any-protocol ; применять split-pos к любым пакетам. по умолчанию - только к http и TLS ClientHello --disorder[=http|tls] ; путем манипуляций с сокетом вынуждает отправлять первым второй сегмент разделенного запроса --oob[=http|tls] ; отправить байт out-of-band data (OOB) в конце первой части сплита --oob-data=&#xA;  &lt;char&gt;&#xA;   |0xHEX ; переопределить байт OOB. по умолчанию 0x00. --hostcase ; менять регистр заголовка &#34;Host:&#34;. по умолчанию на &#34;host:&#34;. --hostspell=HoST ; точное написание заголовка Host (можно &#34;HOST&#34; или &#34;HoSt&#34;). автоматом включает --hostcase --hostdot ; добавление точки после имени хоста : &#34;Host: kinozal.tv.&#34; --hosttab ; добавление табуляции после имени хоста : &#34;Host: kinozal.tv\t&#34; --hostnospace ; убрать пробел после &#34;Host:&#34; --hostpad=&#xA;   &lt;bytes&gt;&#xA;     ; добавить паддинг-хедеров общей длиной &#xA;    &lt;bytes&gt;&#xA;      перед Host: --domcase ; домен после Host: сделать таким : TeSt.cOm --methodspace ; добавить пробел после метода : &#34;GET /&#34; =&amp;gt; &#34;GET /&#34; --methodeol ; добавить перевод строки перед методом : &#34;GET /&#34; =&amp;gt; &#34;\r\nGET /&#34; --unixeol ; конвертировать 0D0A в 0A и использовать везде 0A --tlsrec=sni|sniext ; разбивка TLS ClientHello на 2 TLS records. режем между 1 и 2 символами hostname в SNI или между байтами длины SNI extension. Если SNI нет - отмена. --tlsrec-pos=&#xA;     &lt;pos&gt;&#xA;       ; разбивка TLS ClientHello на 2 TLS records. режем на указанной позиции, если длина слишком мелкая - на позиции 1. --mss=&#xA;      &lt;int&gt;&#xA;        ; установить MSS для клиента. может заставить сервер разбивать ответы, но существенно снижает скорость --mss-pf=[~]port1[-port2] ; применять MSS только к портам назначения, подпадающим под фильтр. ~ означает инверсию --tamper-start=[n]&#xA;       &lt;pos&gt;&#xA;         ; начинать дурение только с указанной байтовой позиции или номера блока исходяшего потока (считается позиция начала принятого блока) --tamper-cutoff=[n]&#xA;        &lt;pos&gt;&#xA;          ; закончить дурение на указанной байтовой позиции или номере блока исходящего потока (считается позиция начала принятого блока) --hostlist=&#xA;         &lt;filename&gt;&#xA;           ; действовать только над доменами, входящими в список из filename. поддомены автоматически учитываются. ; в файле должен быть хост на каждой строке. ; список читается 1 раз при старте и хранится в памяти в виде иерархической структуры для быстрого поиска. ; по сигналу HUP список будет перечитан при следующем принятом соединении ; список может быть запакован в gzip. формат автоматически распознается и разжимается ; списков может быть множество, они обьединяются. пустой общий лист = его отсутствие ; хосты извлекаются из Host: хедера обычных http запросов и из SNI в TLS ClientHello. --hostlist-exclude=&#xA;          &lt;filename&gt;&#xA;            ; не применять дурение к доменам из листа. может быть множество листов, они обьединяются --hostlist-auto=&#xA;           &lt;filename&gt;&#xA;             ; обнаруживать автоматически блокировки и заполнять автоматический hostlist (требует перенаправления входящего трафика) --hostlist-auto-fail-threshold=&#xA;            &lt;int&gt;&#xA;              ; сколько раз нужно обнаружить ситуацию, похожую на блокировку, чтобы добавить хост в лист (по умолчанию: 3) --hostlist-auto-fail-time=&#xA;             &lt;int&gt;&#xA;               ; все эти ситуации должны быть в пределах указанного количества секунд (по умолчанию: 60) --hostlist-auto-debug=&#xA;              &lt;logfile&gt;&#xA;                ; лог положительных решений по autohostlist. позволяет разобраться почему там появляются хосты.&#xA;              &lt;/logfile&gt;&#xA;             &lt;/int&gt;&#xA;            &lt;/int&gt;&#xA;           &lt;/filename&gt;&#xA;          &lt;/filename&gt;&#xA;         &lt;/filename&gt;&#xA;        &lt;/pos&gt;&#xA;       &lt;/pos&gt;&#xA;      &lt;/int&gt;&#xA;     &lt;/pos&gt;&#xA;    &lt;/bytes&gt;&#xA;   &lt;/bytes&gt;&#xA;  &lt;/char&gt;&#xA; &lt;/offset&gt;&lt;/p&gt; &#xA;&lt;p&gt;Параметры манипуляции могут сочетаться в любых комбинациях.&lt;/p&gt; &#xA;&lt;p&gt;В случае http запроса split-http-req имеет преимущество над split-pos. split-pos по умолчанию работает только на http и TLS ClientHello. Чтобы он работал на любых пакетах, укажите --split-any-protocol.&lt;/p&gt; &#xA;&lt;p&gt;На прикладном уровне в общем случае нет гарантированного средства заставить ядро выплюнуть блок данных, порезанным в определенном месте. ОС держит буфер отсылки (SNDBUF) у каждого сокета. Если у сокета включена опция TCP_NODELAY и буфер пуст, то каждый send приводит к отсылке отдельного ip пакета или группы пакетов, если блок не вмещается в один ip пакет. Однако, если в момент send уже имеется неотосланный буфер, то ОС присоединит данные к нему, никакой отсылки отдельным пакетом не будет. Но в этом случае и так нет никакой гарантии, что какой-то блок сообщения пойдет в начале пакета, на что собственно и заточены DPI. Разбиение будет производится согласно MSS, который зависит от MTU исходящего интерфейса. Таким образом DPI, смотрящие в начало поля данных TCP пакета, будут поломаны в любом случае. Протокол http относится к запрос-ответным протоколам. Новое сообщение посылается только тогда, когда сервер получил запрос и полностью вернул ответ. Значит запрос фактически был не только отослан, но и принят другой стороной, а следовательно буфер отсылки пуст, и следующие 2 send приведут к отсылке сегментов данных разными ip пакетами. Резюме : tpws гарантирует сплит только за счет раздельных вызовов send, что на практике вполне достаточно для протоколов http(s).&lt;/p&gt; &#xA;&lt;p&gt;tpws может биндаться на множество интерфейсов и IP адресов (до 32 шт). Порт всегда только один. Параметры --bind-iface* и --bind-addr создают новый бинд. Остальные параметры --bind-* относятся к последнему бинду. Для бинда на все ipv4 укажите --bind-addr &#34;0.0.0.0&#34;, на все ipv6 - &#34;::&#34;. --bind-addr=&#34;&#34; - биндаемся на все ipv4 и ipv6. Выбор режима использования link local ipv6 адресов (fe80::/8) : --bind-iface6 --bind-linklocal=no : сначала приватный адрес fc00::/7, затем глобальный адрес --bind-iface6 --bind-linklocal=unwanted : сначала приватный адрес fc00::/7, затем глобальный адрес, затем link local. --bind-iface6 --bind-linklocal=prefer : сначала link local, затем приватный адрес fc00::/7, затем глобальный адрес. --bind-iface6 --bind-linklocal=force : только link local Если не указано ни одного бинда, то создается бинд по умолчанию на все адреса всех интерфейсов. Для бинда на конкретный link-local address делаем так : --bind-iface6=fe80::aaaa:bbbb:cccc:dddd%iface-name Параметры --bind-wait* могут помочь в ситуациях, когда нужно взять IP с интерфейса, но его еще нет, он не поднят или не сконфигурирован. В разных системах события ifup ловятся по-разному и не гарантируют, что интерфейс уже получил IP адрес определенного типа. В общем случае не существует единого механизма повеситься на событие типа &#34;на интерфейсе X появился link local address&#34;. Для бинда на известный ip, когда еще интерфейс не сконфигурирован, нужно делать так : --bind-addr=192.168.5.3 --bind-wait-ip=20 В режиме transparent бинд возможен на любой несуществующий адрес, в режиме socks - только на существующий.&lt;/p&gt; &#xA;&lt;p&gt;Параметры rcvbuf и sndbuf позволяют установить setsockopt SO_RCVBUF SO_SNDBUF для локального и удаленного соединения.&lt;/p&gt; &#xA;&lt;p&gt;Если не указан ни один из параметров модификации содержимого, tpws работает в режиме &#34;tcp proxy mode&#34;. Он отличается тем, что в оба конца применяется splice для переброски данных из одного сокета в другой без копирования в память процесса. Практически - это то же самое, но может быть чуть побыстрее. TCP проксирование может быть полезно для обхода блокировок, когда DPI спотыкается на экзотических хедерах IP или TCP. Вы вряд ли сможете поправить хедеры, исходящие от айфончиков и гаджетиков, но на linux сможете влиять на них в какой-то степени через sysctl. Когда соединение проходит через tpws, фактически прокси-сервер сам устанавливает подключение к удаленному узлу от своего имени, и на это распространяются настройки системы, на которой работает прокси. tpws можно использовать на мобильном устройстве, раздающем интернет на тарифе сотового оператора, где раздача запрещена, в socks режиме даже без рута. Соединения от tpws неотличимы от соединений с самого раздающего устройства. Отличить можно только по содержанию (типа обновлений windows). Заодно можно и обойти блокировки. 2 зайца одним выстрелом. Более подробную информацию по вопросу обхода ограничений операторов гуглите на 4pda.ru.&lt;/p&gt; &#xA;&lt;p&gt;Режим &#34;--socks&#34; не требует повышенных привилегий (кроме бинда на привилегированные порты 1..1023). Поддерживаются версии socks 4 и 5 без авторизации. Версия протокола распознается автоматически. Подключения к IP того же устройства, на котором работает tpws, включая localhost, запрещены. socks5 позволяет удаленно ресолвить хосты (curl : --socks5-hostname firefox : socks_remote_dns=true). tpws поддерживает эту возможность асинхронно, не блокируя процессинг других соединений, используя многопоточный пул ресолверов. Количество потоков определяется автоматически в зависимости от &#34;--maxconn&#34;, но можно задать и вручную через параметр &#34;--resolver-threads&#34;. Запрос к socks выставляется на паузу, пока домен не будет преобразован в ip адрес в одном из потоков ресолвера. Ожидание может быть более длинным, если все потоки заняты. Если задан параметр &#34;--no-resolve&#34;, то подключения по именам хостов запрещаются, а пул ресолверов не создается. Тем самым экономятся ресурсы.&lt;/p&gt; &#xA;&lt;p&gt;Параметр --hostpad=&#xA; &lt;bytes&gt;&#xA;   добавляет паддинг-хедеров перед Host: на указанное количество байтов. Если размер &#xA;  &lt;bytes&gt;&#xA;    слишком большой, то идет разбивка на разные хедеры по 2K. Общий буфер приема http запроса - 64K, больший паддинг не поддерживается, да и http сервера такое уже не принимают. Полезно против DPI, выполняющих реассемблинг TCP с ограниченным буфером. Если техника работает, то после некоторого количества bytes http запрос начнет проходить до сайта. Если при этом критический размер padding около MTU, значит скорее всего DPI не выполняет реассемблинг пакетов, и лучше будет использовать обычные опции --split-… Если все же реассемблинг выполняется, то критический размер будет около размера буфера DPI. Он может быть 4K или 8K, возможны и другие значения.&#xA;  &lt;/bytes&gt;&#xA; &lt;/bytes&gt;&lt;/p&gt; &#xA;&lt;p&gt;--disorder - это попытка симулировать режим disorder2 nfqws , используя особенности ОС по реализации stream сокетов. Однако, в отличие от nfqws, здесь не требуются повышенные привилегии. Реализовано это следующим образом. У сокета есть возможность выставить TTL. Все пакеты будут отправляться с ним. Перед отправкой первого сегмента ставим TTL=1. Пакет будет дропнут на первом же роутере, он не дойдет ни до DPI, ни до сервера. Затем возвращаем TTL в значение по умолчанию. ОС отсылает второй сегмент, и он уже доходит до сервера. Сервер возвращает SACK, потому что не получил первый кусок, и ОС его отправляет повторно, но здесь уже мы ничего не делаем. Этот режим работает как ожидается на Linux и MacOS. Однако, на FreeBSD и OpenBSD он работает не так хорошо. Ядро этих ОС отсылает ретрансмиссию в виде полного пакета. Потому выходит, что до сервера идет сначала второй кусок, а потом полный запрос без сплита. На него может отреагировать DPI штатным образом. --disorder является дополнительным флагом к любому сплиту. Сам по себе он не делает ничего.&lt;/p&gt; &#xA;&lt;p&gt;--tlsrec и --tlsrec-pos позволяют внутри одного tcp сегмента разрезать TLS ClientHello на 2 TLS records. --tlsrec=sni режет между 1 и 2 символами hostname в SNI, делая невозможным бинарный поиск паттерна без анализа структуры данных. В случае отсутствия SNI разбиение отменяется. --tlsrec-pos режет на указанной позиции. Если длина блока данных TLS меньше указанной позиции, режем на позиции 1. Параметр сочетается с --split-pos. В этом случае происходит сначала разделение на уровне TLS record layer, потом на уровне TCP. Самая изорщенная атака --tslrec, --split-pos и --disorder вместе. --tlsrec ломает значительное количество сайтов. Криптобиблиотеки (openssl, ...) на оконечных http серверах без проблем принимают разделенные tls сегменты, но мидлбоксы - не всегда. К мидлбоксам можно отнести CDN или системы ddos-защиты. Поэтому применение --tlsrec без ограничителей вряд ли целесообразно. В РФ --tlsrec обычно не работает с TLS 1.2, потому что цензор парсит сертификат сервера из ServerHello. Работает только с TLS 1.3, поскольку там эта информация шифруется. Впрочем, сейчас сайтов, не поддерживающих TLS 1.3, осталось немного.&lt;/p&gt; &#xA;&lt;p&gt;--mss устанавливает опцию сокета TCP_MAXSEG. Клиент выдает это значение в tcp опциях SYN пакета. Сервер в ответ в SYN,ACK выдает свой MSS. На практике сервера обычно снижают размеры отсылаемых ими пакетов, но они все равно не вписываются в низкий MSS, указанный клиентом. Обычно чем больше указал клиент, тем больше шлет сервер. На TLS 1.2 если сервер разбил заброс так, чтобы домен из сертификата не попал в первый пакет, это может обмануть DPI, секущий ответ сервера. Схема может значительно снизить скорость и сработать не на всех сайтах. С фильтром по hostlist совместимо только в режиме socks при включенном удаленном ресолвинге хостов. (firefox network.proxy.socks_remote_dns). Это единственный вариант, когда tpws может узнать имя хоста еще на этапе установления соединения. Невозможен фильтр по версии TLS. Взамен имеется фильтр по портам --mss-pf. --mss-pf=443 применяет дурение только к https. Применяя данную опцию к сайтам TLS1.3, если броузер тоже поддерживает TLS1.3, то вы делаете только хуже. Но нет способа автоматически узнать когда надо применять, когда нет, поскольку MSS идет только в 3-way handshake еще до обмена данными, а версию TLS можно узнать только по ответу сервера, который может привести к реакции DPI. Использовать только когда нет ничего лучше или для отдельных ресурсов. Работает только на linux, не работает на BSD и MacOS.&lt;/p&gt; &#xA;&lt;p&gt;--skip-nodelay может быть полезен, чтобы привести MTU к MTU системы, на которой работает tpws. Это может быть полезно для скрытия факта использования VPN. Пониженный MTU - 1 из способов обнаружения подозрительного подключения. С tcp proxy ваши соединения неотличимы от тех, что сделал бы сам шлюз.&lt;/p&gt; &#xA;&lt;h2&gt;Способы получения списка заблокированных IP&lt;/h2&gt; &#xA;&lt;p&gt;!!! nftables не могут работать с ipset-ами. Собственный аналогичный механизм требует огромного количество RAM !!! для загрузки больших листов. Например, для загона 100K записей в nfset не хватает даже 256 Mb. !!! Если вам нужны большие листы на домашних роутерах, откатывайтесь на iptables+ipset.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Внесите заблокированные домены в ipset/zapret-hosts-user.txt и запустите ipset/get_user.sh На выходе получите ipset/zapret-ip-user.txt с IP адресами.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Cкрипты с названием get_reestr_* оперируют дампом реестра заблокированных сайтов :&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_reestr_resolve.sh получает список доменов от rublacklist и дальше их ресолвит в ip адреса в файл ipset/zapret-ip.txt.gz. В этом списке есть готовые IP адреса, но судя во всему они там в точности в том виде, что вносит в реестр РосКомПозор. Адреса могут меняться, позор не успевает их обновлять, а провайдеры редко банят по IP : вместо этого они банят http запросы с &#34;нехорошим&#34; заголовком &#34;Host:&#34; вне зависимости от IP адреса. Поэтому скрипт ресолвит все сам, хотя это и занимает много времени. Используется мультипоточный ресолвер mdig (собственная разработка).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_reestr_preresolved.sh. то же самое, что и 2), только берется уже заресолвленый список со стороннего ресурса.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_reestr_preresolved_smart.sh. то же самое, что и 3), с добавлением всего диапазона некоторых автономных систем (прыгающие IP адреса из cloudflare, facebook, ...) и некоторых поддоменов блокируемых сайтов&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Cкрипты с названием get_antifilter_* оперируют списками адресов и масок подсетей с сайтов antifilter.network и antifilter.download :&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_antifilter_ip.sh. получает лист &lt;a href=&#34;https://antifilter.download/list/ip.lst&#34;&gt;https://antifilter.download/list/ip.lst&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_antifilter_ipsmart.sh. получает лист &lt;a href=&#34;https://antifilter.network/download/ipsmart.lst&#34;&gt;https://antifilter.network/download/ipsmart.lst&lt;/a&gt;. умная суммаризация отдельных адресов из ip.lst по маскам от /32 до /22&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_antifilter_ipsum.sh. получает лист &lt;a href=&#34;https://antifilter.download/list/ipsum.lst&#34;&gt;https://antifilter.download/list/ipsum.lst&lt;/a&gt;. суммаризация отдельных адресов из ip.lst по маске /24&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_antifilter_ipresolve.sh. получает лист &lt;a href=&#34;https://antifilter.download/list/ipresolve.lst&#34;&gt;https://antifilter.download/list/ipresolve.lst&lt;/a&gt;. пре-ресолвленный список, аналогичный получаемый при помощи get_reestr_resolve. только ipv4.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ipset/get_antifilter_allyouneed.sh. получает лист &lt;a href=&#34;https://antifilter.download/list/allyouneed.lst&#34;&gt;https://antifilter.download/list/allyouneed.lst&lt;/a&gt;. Суммарный список префиксов, созданный из ipsum.lst и subnet.lst.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Все варианты рассмотренных скриптов автоматически создают и заполняют ipset. Варианты 2-9 дополнительно вызывают вариант 1.&lt;/p&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;ipset/get_config.sh. этот скрипт вызывает то, что прописано в переменной GETLIST из файла config Если переменная не определена, то ресолвятся лишь листы для ipset nozapret/nozapret6.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Листы РКН все время изменяются. Возникают новые тенденции. Требования к RAM могут меняться. Поэтому необходима нечастая, но все же регулярная ревизия что же вообще у вас происходит на роутере. Или вы можете узнать о проблеме лишь когда у вас начнет постоянно пропадать wifi, и вам придется его перезагружать каждые 2 часа (метод кувалды).&lt;/p&gt; &#xA;&lt;p&gt;Самые щадящие варианты по RAM - get_antifilter_allyouneed.sh, get_antifilter_ipsum.sh.&lt;/p&gt; &#xA;&lt;p&gt;Листы zapret-ip.txt и zapret-ipban.txt сохраняются в сжатом виде в файлы .gz. Это позволяет снизить их размер во много раз и сэкономить место на роутере. Отключить сжатие листов можно параметром конфига GZIP_LISTS=0.&lt;/p&gt; &#xA;&lt;p&gt;На роутерах не рекомендуется вызывать эти скрипты чаще раза за 2 суток, поскольку сохранение идет либо во внутреннюю флэш память роутера, либо в случае extroot - на флэшку. В обоих случаях слишком частая запись может убить флэшку, но если это произойдет с внутренней флэш памятью, то вы просто убьете роутер.&lt;/p&gt; &#xA;&lt;p&gt;Принудительное обновление ipset выполняет скрипт ipset/create_ipset.sh. Если передан параметр &#34;no-update&#34;, скрипт не обновляет ipset, а только создает его при его отсутствии и заполняет. Это полезно, когда могут случиться несколько последовательных вызовов скрипта. Нет смысла несколько раз перезаполнять ipset, это длительная операция на больших листах. Листы можно обновлять раз в несколько суток, и только тогда вызывать create_ipset без параметра &#34;no-update&#34;. Во всех остальных случаях стоит применять &#34;no-update&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Список РКН уже достиг внушительных размеров в сотни тысяч IP адресов. Поэтому для оптимизации ipset применяется утилита ip2net. Она берет список отдельных IP адресов и пытается интеллектуально создать из него подсети для сокращения количества адресов. ip2net отсекает неправильные записи в листах, гарантируя осутствие ошибок при их загрузке. ip2net написан на языке C, поскольку операция ресурсоемкая. Иные способы роутер может не потянуть.&lt;/p&gt; &#xA;&lt;p&gt;Можно внести список доменов в ipset/zapret-hosts-user-ipban.txt. Их ip адреса будут помещены в отдельный ipset &#34;ipban&#34;. Он может использоваться для принудительного завертывания всех соединений на прозрачный proxy &#34;redsocks&#34; или на VPN.&lt;/p&gt; &#xA;&lt;p&gt;IPV6 : если включен ipv6, то дополнительно создаются листы с таким же именем, но с &#34;6&#34; на конце перед расширением. zapret-ip.txt =&amp;gt; zapret-ip6.txt Создаются ipset-ы zapret6 и ipban6. Листы с antifilter не содержат список ipv6 адресов.&lt;/p&gt; &#xA;&lt;p&gt;СИСТЕМА ИСКЛЮЧЕНИЯ IP. Все скрипты ресолвят файл zapret-hosts-user-exclude.txt, создавая zapret-ip-exclude.txt и zapret-ip-exclude6.txt. Они загоняются в ipset-ы nozapret и nozapret6. Все правила, создаваемые init скриптами, создаются с учетом этих ipset. Помещенные в них IP не участвуют в процессе. zapret-hosts-user-exclude.txt может содержать домены, ipv4 и ipv6 адреса или подсети.&lt;/p&gt; &#xA;&lt;p&gt;FreeBSD. Скрипты ipset/*.sh работают так же на FreeBSD. Вместо ipset они создают lookup таблицы ipfw с аналогичными именами. ipfw таблицы в отличие от ipset могут содержать как ipv4, так и ipv6 адреса и подсети в одной таблице, поэтому разделения нет.&lt;/p&gt; &#xA;&lt;p&gt;Параметр конфига LISTS_RELOAD задает произвольную команду для перезагрузки листов. Это особенно полезно на BSD системах с PF. LISTS_RELOAD=- отключает перезагрузку листов.&lt;/p&gt; &#xA;&lt;h2&gt;ip2net&lt;/h2&gt; &#xA;&lt;p&gt;Утилита ip2net предназначена для преобразования ipv4 или ipv6 списка ip в список подсетей с целью сокращения размера списка. Входные данные берутся из stdin, выходные выдаются в stdout.&lt;/p&gt; &#xA;&lt;p&gt;-4 ; лист - ipv4 (по умолчанию) -6 ; лист - ipv6 --prefix-length=min[-max] ; диапазон рассматриваемых длин префиксов. например : 22-30 (ipv4), 56-64 (ipv6) --v4-threshold=mul/div ; ipv4 : включать подсети, в которых заполнено по крайней мере mul/div адресов. например : 3/4 --v6-threshold=N ; ipv6 : минимальное количество ip для создания подсети&lt;/p&gt; &#xA;&lt;p&gt;В списке могут присутствовать записи вида ip/prefix и ip1-ip2. Такие записи выкидываются в stdout без изменений. Они принимаются командой ipset. ipset умеет для листов hash:net из ip1-ip2 делать оптимальное покрытие ip/prefix. ipfw из FreeBSD понимает ip/prefix, но не понимает ip1-ip2. ip2net фильтрует входные данные, выкидывая неправильные IP адреса.&lt;/p&gt; &#xA;&lt;p&gt;Выбирается подсеть, в которой присутствует указанный минимум адресов. Для ipv4 минимум задается как процент от размера подсети (mul/div. например, 3/4), для ipv6 минимум задается напрямую.&lt;/p&gt; &#xA;&lt;p&gt;Размер подсети выбирается следующим алгоритмом : Сначала в указанном диапазоне длин префиксов ищутся подсети, в которых количество адресов - максимально. Если таких сетей найдено несколько, берется наименьшая сеть (префикс больше). Например, заданы параметры v6_threshold=2 prefix_length=32-64, имеются следующие ipv6 : 1234:5678:aaaa::5 1234:5678:aaaa::6 1234:5678:aaac::5 Результат будет : 1234:5678:aaa8::/45 Эти адреса так же входят в подсеть /32. Однако, нет смысла проходиться ковровой бомбардировкой, когда те же самые адреса вполне влезают в /45 и их ровно столько же. Если изменить v6_threshold=4, то результат будет : 1234:5678:aaaa::5 1234:5678:aaaa::6 1234:5678:aaac::5 То есть ip не объединятся в подсеть, потому что их слишком мало. Если изменить prefix_length=56-64, результат будет : 1234:5678:aaaa::/64 1234:5678:aaac::5&lt;/p&gt; &#xA;&lt;p&gt;Требуемое процессорное время для вычислений сильно зависит от ширины диапазона длин префиксов, размера искомых подсетей и длины листа. Если ip2net думает слишком долго, не используйте слишком большие подсети и уменьшите диапазон длин префиксов. Учтите, что арифметика mul/div - целочисленная. При превышении разрядной сетки 32 bit результат непредсказуем. Не надо делать такое : 5000000/10000000. 1/2 - гораздо лучше.&lt;/p&gt; &#xA;&lt;h2&gt;Фильтрация по именам доменов&lt;/h2&gt; &#xA;&lt;p&gt;Альтернативой ipset является использование tpws или nfqws со списком доменов. Оба демона принимают неограниченное количество листов include (--hostlist) и exclude (--hostlist-exclude). Все листы одного типа обьединяются, и таким образом остаются только 2 листа. Прежде всего проверяется exclude list. При вхождении в него происходит отказ от дурения. Далее при наличии include list проверяется домен на вхождение в него. При невхождении в список отказ от дурения. Пустой список приравнивается к его отсутствию. В иных случаях происходит дурение. Нет ни одного списка - дурение всегда. Есть только exclude список - дурение всех, кроме. Есть только include список - дурение только их. Есть оба - дурение только include, кроме exclude.&lt;/p&gt; &#xA;&lt;p&gt;В системе запуска это обыграно следующим образом. Присутствуют 2 include списка : ipset/zapret-hosts-users.txt.gz или ipset/zapret-hosts-users.txt ipset/zapret-hosts.txt.gz или ipset/zapret-hosts.txt и 1 exclude список ipset/zapret-hosts-users-exclude.txt.gz или ipset/zapret-hosts-users-exclude.txt&lt;/p&gt; &#xA;&lt;p&gt;При режиме фильтрации MODE_FILTER=hostlist система запуска передает nfqws или tpws все листы, файлы которых присутствуют. Если вдруг листы include присутствуют, но все они пустые, то работа аналогична отсутствию include листа. Файл есть, но не смотря на это дурится все, кроме exclude. Если вам нужен именно такой режим - не обязательно удалять zapret-hosts-users.txt. Достаточно сделать его пустым.&lt;/p&gt; &#xA;&lt;p&gt;Поддомены учитываются автоматически. Например, строчка &#34;ru&#34; вносит в список &#34;&lt;em&gt;.ru&#34;. Строчка &#34;&lt;/em&gt;.ru&#34; в списке не сработает.&lt;/p&gt; &#xA;&lt;p&gt;Список доменов РКН может быть получен скриптами ipset/get_reestr_hostlist.sh или ipset/get_antizapret_domains.sh&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;кладется в ipset/zapret-hosts.txt.gz.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Чтобы обновить списки, перезапускать nfqws или tpws не нужно. Обновляете файлы, затем даете сигнал HUP. По HUP листы будут перечитаны. Если вдруг какого-то листа не окажется, процесс завершится с ошибкой. Скрипты получения листов из ipset сами выдают HUP в конце.&lt;/p&gt; &#xA;&lt;p&gt;При фильтрации по именам доменов демон должен запускаться без фильтрации по ipset. tpws и nfqws решают нужно ли применять дурение в зависимости от хоста, полученного из протокола прикладного уровня (http, tls, quic). При использовании больших списков, в том числе списка РКН, оцените объем RAM на роутере ! Если после запуска демона RAM под завязку или случаются oom, значит нужно отказаться от таких больших списков.&lt;/p&gt; &#xA;&lt;h2&gt;Режим фильтрации autohostlist&lt;/h2&gt; &#xA;&lt;p&gt;Этот режим позволяет проанализировать как запросы со стороны клиента, так и ответы от сервера. Если хост еще не находится ни в каких листах и обнаруживается ситуация, похожая на блокировку, происходит автоматическое добавление хоста в список autohostlist как в памяти, так и в файле. nfqws или tpws сами ведут этот файл. Чтобы какой-то хост не смог попась в autohostlist используйте hostlist-exclude. Если он все-же туда попал - удалите запись из файла вручную. Процессы автоматически перечитают файл. tpws/nfqws сами назначают владельцем файла юзера, под которым они работают после сброса привилегий, чтобы иметь возможность обновлять лист.&lt;/p&gt; &#xA;&lt;p&gt;В случае nfqws данный режим требует перенаправления в том числе и входящего трафика. Крайне рекомендовано использовать ограничитель connbytes, чтобы nfqws не обрабатывал гигабайты. По этой же причине не рекомендуется использование режима на BSD системах. Там нет фильтра connbytes.&lt;/p&gt; &#xA;&lt;p&gt;На linux системах при использовании nfqws и фильтра connbytes может понадобится : sysctl net.netfilter.nf_conntrack_tcp_be_liberal=1 Было замечено, что некоторые DPI в России возвращают RST с неверным ACK. Это принимается tcp/ip стеком linux, но через раз приобретает статус INVALID в conntrack. Поэтому правила с connbytes срабатывают через раз, не пересылая RST пакет nfqws.&lt;/p&gt; &#xA;&lt;p&gt;Как вообще могут вести себя DPI, получив &#34;плохой запрос&#34; и приняв решение о блокировке :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Зависание : просто отмораживается, блокируя прохождение пакетов по TCP каналу.&lt;/li&gt; &#xA; &lt;li&gt;RST : отправляет RST клиенту и/или серверу&lt;/li&gt; &#xA; &lt;li&gt;Редирект : (только для http) отправляет редирект на сайт-заглушку&lt;/li&gt; &#xA; &lt;li&gt;Подмена сертификата : (только для https) полный перехват TLS сеанса с попыткой всунуть что-то свое клиенту. Применяется нечасто, поскольку броузеры на такое ругаются.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;nfqws и tpws могут сечь варианты 1-3, 4 они не распознают. Всилу специфики работы с отдельными пакетами или с TCP каналом tpws и nfqws распознают эти ситуации по-разному. Что считается ситуацией, похожей на блокировку :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[nfqws] Несколько ретрансмиссий первого запроса в TCP сеансе, в котором имеется host.&lt;/li&gt; &#xA; &lt;li&gt;[nfqws,tpws] RST, пришедший в ответ на первый запрос с хостом.&lt;/li&gt; &#xA; &lt;li&gt;[nfqws,tpws] HTTP редирект, пришедший в ответ на первый запрос с хостом, на глобальный адрес с доменом 2 уровня, не совпадающим с доменом 2 уровня оригинального запроса.&lt;/li&gt; &#xA; &lt;li&gt;[tpws] закрытие соединения клиентом после отправки первого запроса с хостом, если не было на него ответа со стороны сервера. Это обычно случается по таймауту, когда нет ответа (случай &#34;зависание&#34;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Чтобы снизить вероятность ложных срабатываний, имеется счетчик ситуаций, похожих на блокировку. Если за определенное время произойдет более определенного их количества, хост считается заблокированным и заносится в autohostlist. По нему сразу же начинает работать стратегия по обходу блокировки. Если в процессе счета вебсайт отвечает без признаков блокировки, счетчик сбрасывается. Вероятно, это был временный сбой сайта.&lt;/p&gt; &#xA;&lt;p&gt;На практике работа с данным режимом выглядит так. Первый раз пользователь заходит на сайт и получает заглушку, сброс соединения или броузер подвисает, вываливаясь по таймауту с сообщением о невозможности загрузить страницу. Надо долбить F5, принуждая броузер повторять попытки. После некоторой попытки сайт начинает работать, и дальше он будет работать всегда.&lt;/p&gt; &#xA;&lt;p&gt;С этим режимом можно использовать техники обхода, ломающие значительное количество сайтов. Если сайт не ведет себя как заблокированный, значит обход применен не будет. В противном случае терять все равно нечего. Однако, могут быть временные сбои сервера, приводящие к ситуации, аналогичной блокировке. Могут происходит ложные срабатывания. Если такое произошло, стратегия может начать ломать незаблокированный сайт. Эту ситуацию, увы, придется вам контролировать вручную. Заносите такие домены в ipset/zapret-hosts-user-exclude.txt, чтобы избежать повторения. Чтобы впоследствии разобраться почему домен был занесен в лист, можно включить autohostlist debug log. Он полезен тем, что работает без постоянного просмотра вывода nfqws в режиме debug. В лог заносятся только основные события, ведущие к занесению хоста в лист. По логу можно понять как избежать ложных срабатываний и подходит ли вообще вам этот режим.&lt;/p&gt; &#xA;&lt;p&gt;Можно использовать один autohostlist с множеством процессов. Все процессы проверяют время модификации файла. Если файл был изменен в другом процессе, то происходит перечитывание всех include листов, включая autohostlist. Все процессы должны работать под одним uid, чтобы были права доступа на файл.&lt;/p&gt; &#xA;&lt;p&gt;Скрипты zapret ведут autohostlist в ipset/zapret-hosts-auto.txt. install_easy.sh при апгрейде zapret сохраняет этот файл. Режим autohostlist включает в себя режим hostlist. Можно вести ipset/zapret-hosts-user.txt, ipset/zapret-hosts-user-exclude.txt.&lt;/p&gt; &#xA;&lt;h2&gt;Проверка провайдера&lt;/h2&gt; &#xA;&lt;p&gt;Перед настройкой нужно провести исследование какую бяку устроил вам ваш провайдер.&lt;/p&gt; &#xA;&lt;p&gt;Нужно выяснить не подменяет ли он DNS и какой метод обхода DPI работает. В этом вам поможет скрипт blockcheck.sh.&lt;/p&gt; &#xA;&lt;p&gt;Если DNS подменяется, но провайдер не перехватывает обращения к сторонним DNS, поменяйте DNS на публичный. Например : 8.8.8.8, 8.8.4.4, 1.1.1.1, 1.0.0.1, 9.9.9.9 Если DNS подменяется и провайдер перехватывает обращения к сторонним DNS, настройте dnscrypt. Еще один эффективный вариант - использовать ресолвер от yandex 77.88.8.88 на нестандартном порту 1253. Многие провайдеры не анализируют обращения к DNS на нестандартных портах.&lt;/p&gt; &#xA;&lt;p&gt;Следует прогнать blockcheck по нескольким заблокированным сайтам и выявить общий характер блокировок. Разные сайты могут быть заблокированы по-разному, нужно искать такую технику, которая работает на большинстве. Чтобы записать вывод blockcheck.sh в файл, выполните : ./blockcheck.sh | tee /tmp/blockcheck.txt&lt;/p&gt; &#xA;&lt;p&gt;Проанализируйте какие методы дурения DPI работают, в соответствии с ними настройте /opt/zapret/config.&lt;/p&gt; &#xA;&lt;p&gt;Имейте в виду, что у провайдеров может быть несколько DPI или запросы могут идти через разные каналы по методу балансировки нагрузки. Балансировка может означать, что на разных ветках разные DPI или они находятся на разных хопах. Такая ситуация может выражаться в нестабильности работы обхода. Дернули несколько раз curl. То работает, то connection reset или редирект. blockcheck.sh выдает странноватые результаты. То split работает на 2-м. хопе, то на 4-м. Достоверность результата вызывает сомнения. В этом случае задайте несколько повторов одного и того же теста. Тест будет считаться успешным только, если все попытки пройдут успешно.&lt;/p&gt; &#xA;&lt;p&gt;При использовании autottl следует протестировать как можно больше разных доменов. Эта техника может на одних провайдерах работать стабильно, на других потребуется выяснить при каких параметрах она стабильна, на третьих полный хаос, и проще отказаться.&lt;/p&gt; &#xA;&lt;p&gt;Blockcheck имеет 3 уровня сканирования. Цель режима quick - максимально быстро найти хоть что-то работающее. standard дает возможность провести исследование как и на что реагирует DPI в плане методов обхода. force дает максимум проверок даже в случаях, когда ресурс работает без обхода или с более простыми стратегиями.&lt;/p&gt; &#xA;&lt;p&gt;СКАН ПОРТОВ Если в системе присутствует совместимый netcat (ncat от nmap или openbsd ncat. в openwrt по умолчанию нет.), то выполняется сканирование портов http или https всех IP адресов домена. Если ни один IP не отвечает, то результат очевиден. Можно останавливать сканирование. Автоматически оно не остановится, потому что netcat-ы недостаточно подробно информируют о причинах ошибки. Если доступна только часть IP, то можно ожидать хаотичных сбоев, т.к. подключение идет к случайному адресу из списка.&lt;/p&gt; &#xA;&lt;p&gt;ПРОВЕРКА НА ЧАСТИЧНЫЙ IP block Под частичным блоком подразумевается ситуация, когда конект на порты есть, но по определенному транспортному или прикладному протоколу всегда идет реакция DPI вне зависимости от запрашиваемого домена. Эта проверка так же не выдаст автоматического вердикта/решения, потому что может быть очень много вариаций. Вместо этого анализ происходящего возложен на самого пользователя или тех, кто будет читать лог. Суть этой проверки в попытке дернуть неблокированный IP с блокированным доменом и наоборот, анализируя при этом реакцию DPI. Реакция DPI обычно проявляется в виде таймаута (зависание запроса), connection reset или http redirect на заглушку. Любой другой вариант скорее всего говорит об отсутствии реакции DPI. В частности, любые http коды, кроме редиректа, ведущего именно на заглушку, а не куда-то еще. На TLS - ошибки handshake без задержек. Ошибка сертификата может говорить как о реакции DPI с MiTM атакой (подмена сертификата), так и о том, что принимающий сервер неблокированного домена все равно принимает ваш TLS handshake с чужим доменом, пытаясь при этом выдать сертификат без запрошенного домена. Требуется дополнительный анализ. Если на заблокированный домен есть реакция на всех IP адресах, значит есть блокировака по домену. Если на неблокированный домен есть реакция на IP адресах блокированного домена, значит имеет место блок по IP. Соответственно, если есть и то, и другое, значит есть и блок по IP, и блок по домену. Неблокированный домен первым делом проверяется на доступность на оригинальном адресе. При недоступности тест отменяется, поскольку он будет неинформативен.&lt;/p&gt; &#xA;&lt;p&gt;Если выяснено, что есть частичный блок по IP на DPI, то скорее всего все остальные тесты будут провалены вне зависимости от стратегий обхода. Но бывают и некоторые исключения. Например, пробитие через ipv6 option headers. Или сделать так, чтобы он не мог распознать протокол прикладного уровня. Дальнейшие тесты могут быть не лишены смысла.&lt;/p&gt; &#xA;&lt;p&gt;ПРИМЕРЫ БЛОКИРОВКИ ТОЛЬКО ПО ДОМЕНУ БЕЗ БЛОКА ПО IP&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;testing iana.org on it&#39;s original ip !!!!! AVAILABLE !!!!! testing rutracker.org on 192.0.43.8 (iana.org) curl: (28) Operation timed out after 1002 milliseconds with 0 bytes received testing iana.org on 172.67.182.196 (rutracker.org) HTTP/1.1 409 Conflict testing iana.org on 104.21.32.39 (rutracker.org) HTTP/1.1 409 Conflict&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;testing iana.org on it&#39;s original ip !!!!! AVAILABLE !!!!! testing rutracker.org on 192.0.43.8 (iana.org) curl: (28) Connection timed out after 1001 milliseconds testing iana.org on 172.67.182.196 (rutracker.org) curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure testing iana.org on 104.21.32.39 (rutracker.org) curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;testing iana.org on it&#39;s original ip !!!!! AVAILABLE !!!!! testing rutracker.org on 192.0.43.8 (iana.org) HTTP/1.1 307 Temporary Redirect Location: &lt;a href=&#34;https://www.gblnet.net/blocked.php&#34;&gt;https://www.gblnet.net/blocked.php&lt;/a&gt; testing iana.org on 172.67.182.196 (rutracker.org) HTTP/1.1 409 Conflict testing iana.org on 104.21.32.39 (rutracker.org) HTTP/1.1 409 Conflict&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;testing iana.org on it&#39;s original ip !!!!! AVAILABLE !!!!! testing rutracker.org on 192.0.43.8 (iana.org) curl: (35) Recv failure: Connection reset by peer testing iana.org on 172.67.182.196 (rutracker.org) curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure testing iana.org on 104.21.32.39 (rutracker.org) curl: (35) OpenSSL/3.2.1: error:0A000410:SSL routines::ssl/tls alert handshake failure&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;ПРИМЕР ПОЛНОГО IP БЛОКА ИЛИ БЛОКА TCP ПОРТА ПРИ ОТСУТСТВИИ БЛОКА ПО ДОМЕНУ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;port block tests ipv4 startmail.com:80 ncat -z -w 1 145.131.90.136 80 145.131.90.136 does not connect. netcat code 1 ncat -z -w 1 145.131.90.152 80 145.131.90.152 does not connect. netcat code 1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;curl_test_http ipv4 startmail.com&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;checking without DPI bypass curl: (28) Connection timed out after 2002 milliseconds UNAVAILABLE code=28&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IP block tests (requires manual interpretation)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;testing iana.org on it&#39;s original ip !!!!! AVAILABLE !!!!! testing startmail.com on 192.0.43.8 (iana.org) HTTP/1.1 302 Found Location: &lt;a href=&#34;https://www.iana.org/&#34;&gt;https://www.iana.org/&lt;/a&gt; testing iana.org on 145.131.90.136 (startmail.com) curl: (28) Connection timed out after 2002 milliseconds testing iana.org on 145.131.90.152 (startmail.com) curl: (28) Connection timed out after 2002 milliseconds&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Выбор параметров&lt;/h2&gt; &#xA;&lt;p&gt;Файл /opt/zapret/config используется различными компонентами системы и содержит основные настройки. Его нужно просмотреть и при необходимости отредактировать.&lt;/p&gt; &#xA;&lt;p&gt;На linux системах можно выбрать использовать iptables или nftables. По умолчанию на традиционных linux выбирается nftables, если установлен nft. На openwrt по умолчанию выбирается nftables на новых версиях с firewall4.&lt;/p&gt; &#xA;&lt;p&gt;FWTYPE=iptables&lt;/p&gt; &#xA;&lt;p&gt;Основной режим : tpws - tpws в режиме transparent tpws-socks - tpws в режиме socks вешается на localhost и LAN интерфейс (если задан IFACE_LAN или если система - OpenWRT). порт 988 nfqws - nfqws filter - только заполнить ipset или загрузить hostlist custom - нужно самому запрограммировать запуск демонов в init скрипте и правила iptables&lt;/p&gt; &#xA;&lt;p&gt;MODE=tpws&lt;/p&gt; &#xA;&lt;p&gt;Применять ли дурение к HTTP :&lt;/p&gt; &#xA;&lt;p&gt;MODE_HTTP=1&lt;/p&gt; &#xA;&lt;p&gt;Применять ли дурение к последовательным http запросам в одном tcp соединении (http keeaplive). Относится только к nfqws. Выключение данной функции способно сэкономить загрузку процессора. tpws всегда работает с http keepalive&lt;/p&gt; &#xA;&lt;p&gt;MODE_HTTP_KEEPALIVE=0&lt;/p&gt; &#xA;&lt;p&gt;Применять ли дурение к HTTPS :&lt;/p&gt; &#xA;&lt;p&gt;MODE_HTTPS=1&lt;/p&gt; &#xA;&lt;p&gt;Применять ли дурение к QUIC :&lt;/p&gt; &#xA;&lt;p&gt;MODE_QUIC=0&lt;/p&gt; &#xA;&lt;p&gt;Режим фильтрации хостов : none - применять дурение ко всем хостам ipset - ограничить дурение ipset-ом zapret/zapret6 hostlist - ограничить дурение списком хостов из файла autohostlist - режим hostlist + распознавание блокировок и ведения автоматического листа&lt;/p&gt; &#xA;&lt;p&gt;MODE_FILTER=none&lt;/p&gt; &#xA;&lt;p&gt;Опции tpws :&lt;/p&gt; &#xA;&lt;p&gt;TPWS_OPT=&#34;--hostspell=HOST --split-http-req=method --split-pos=3&#34;&lt;/p&gt; &#xA;&lt;p&gt;Опции nfqws для атаки десинхронизации DPI :&lt;/p&gt; &#xA;&lt;p&gt;DESYNC_MARK=0x40000000 DESYNC_MARK_POSTNAT=0x20000000 NFQWS_OPT_DESYNC=&#34;--dpi-desync=fake --dpi-desync-ttl=0 --dpi-desync-fooling=badsum&#34;&lt;/p&gt; &#xA;&lt;p&gt;Задание раздельных опций nfqws для http и https и для версий ip протоколов 4,6 :&lt;/p&gt; &#xA;&lt;p&gt;NFQWS_OPT_DESYNC_HTTP=&#34;--dpi-desync=split --dpi-desync-ttl=0 --dpi-desync-fooling=badsum&#34; NFQWS_OPT_DESYNC_HTTPS=&#34;--wssize=1:6 --dpi-desync=split --dpi-desync-ttl=0 --dpi-desync-fooling=badsum&#34; NFQWS_OPT_DESYNC_HTTP6=&#34;--dpi-desync=split --dpi-desync-ttl=5 --dpi-desync-fooling=none&#34; NFQWS_OPT_DESYNC_HTTPS6=&#34;--wssize=1:6 --dpi-desync=split --dpi-desync-ttl=5 --dpi-desync-fooling=none&#34;&lt;/p&gt; &#xA;&lt;p&gt;Если какая-то из переменных NFQWS_OPT_DESYNC_HTTP/NFQWS_OPT_DESYNC_HTTPS не определена, берется значение NFQWS_OPT_DESYNC. Если какая-то из переменных NFQWS_OPT_DESYNC_HTTP6/NFQWS_OPT_DESYNC_HTTPS6 не определена, берется значение NFQWS_OPT_DESYNC_HTTP/NFQWS_OPT_DESYNC_HTTPS.&lt;/p&gt; &#xA;&lt;p&gt;Опции дурения для QUIC : NFQWS_OPT_DESYNC_QUIC=&#34;--dpi-desync=fake&#34; NFQWS_OPT_DESYNC_QUIC6=&#34;--dpi-desync=hopbyhop&#34; Если NFQWS_OPT_DESYNC_QUIC6 не задано, то берется NFQWS_OPT_DESYNC_QUIC.&lt;/p&gt; &#xA;&lt;p&gt;Настройка системы управления выборочным traffic offload (только если поддерживается) donttouch : выборочное управление отключено, используется системная настройка, простой инсталятор выключает системную настройку, если она не совместима с выбранным режимом none : выборочное управление отключено, простой инсталятор выключает системную настройку software : выборочное управление включено в режиме software, простой инсталятор выключает системную настройку hardware : выборочное управление включено в режиме hardware, простой инсталятор выключает системную настройку&lt;/p&gt; &#xA;&lt;p&gt;FLOWOFFLOAD=donttouch&lt;/p&gt; &#xA;&lt;p&gt;Параметр GETLIST указывает инсталятору install_easy.sh какой скрипт дергать для обновления списка заблокированных ip или хостов. Он же вызывается через get_config.sh из запланированных заданий (crontab или systemd timer). Поместите сюда название скрипта, который будете использовать для обновления листов. Если не нужно, то параметр следует закомментировать.&lt;/p&gt; &#xA;&lt;p&gt;Можно индивидуально отключить ipv4 или ipv6. Если параметр закомментирован или не равен &#34;1&#34;, использование протокола разрешено. #DISABLE_IPV4=1 DISABLE_IPV6=1&lt;/p&gt; &#xA;&lt;p&gt;Количество потоков для многопоточного DNS ресолвера mdig (1..100). Чем их больше, тем быстрее, но не обидится ли на долбежку ваш DNS сервер ? MDIG_THREADS=30&lt;/p&gt; &#xA;&lt;p&gt;Место для хранения временных файлов. При скачивании огромных реестров в /tmp места может не хватить. Если файловая система на нормальном носителе (не встроенная память роутера), то можно указать место на флэшке или диске. TMPDIR=/opt/zapret/tmp&lt;/p&gt; &#xA;&lt;p&gt;Опции для создания ipset-ов и nfset-ов&lt;/p&gt; &#xA;&lt;p&gt;SET_MAXELEM=262144 IPSET_OPT=&#34;hashsize 262144 maxelem 2097152&#34;&lt;/p&gt; &#xA;&lt;p&gt;Хук, позволяющий внести ip адреса динамически. $1 = имя таблицы Адреса выводятся в stdout. В случае nfset автоматически решается проблема возможного пересечения интервалов. IPSET_HOOK=&#34;/etc/zapret.ipset.hook&#34;&lt;/p&gt; &#xA;&lt;p&gt;ПРО РУГАНЬ в dmesg по поводу нехватки памяти. Может так случиться, что памяти в системе достаточно, но при попытке заполнить огромный ipset ядро начинает громко ругаться, ipset заполняется не полностью. Вероятная причина в том, что превышается hashsize, заданный при создании ipset (create_ipset.sh). Происходит переаллокация списка, не находится непрерывных фрагментов памяти нужной длины. Это лечится увеличением hashsize. Но чем больше hashsize, тем больше занимает ipset в памяти. Задавать слишком большой hashsize для недостаточно больших списков нецелесообразно.&lt;/p&gt; &#xA;&lt;p&gt;Опции для вызова ip2net. Отдельно для листов ipv4 и ipv6. IP2NET_OPT4=&#34;--prefix-length=22-30 --v4-threshold=3/4&#34; IP2NET_OPT6=&#34;--prefix-length=56-64 --v6-threshold=5&#34;&lt;/p&gt; &#xA;&lt;p&gt;Настройка режима autohostlist. AUTOHOSTLIST_RETRANS_THRESHOLD=3 AUTOHOSTLIST_FAIL_THRESHOLD=2 AUTOHOSTLIST_FAIL_TIME=60 AUTOHOSTLIST_DEBUG=0&lt;/p&gt; &#xA;&lt;p&gt;Включить или выключить сжатие больших листов в скриптах ipset/*.sh. По умолчанию включено. GZIP_LISTS=1&lt;/p&gt; &#xA;&lt;p&gt;Команда для перезагрузки ip таблиц фаервола. Если не указано или пустое, выбирается автоматически ipset или ipfw при их наличии. На BSD системах с PF нет автоматической загрузки. Там нужно указать команду явно : pfctl -f /etc/pf.conf На более новых pfctl (есть в новых FreeBSD, нет в OpenBSD 6.8) можно дать команду загрузки только таблиц : pfctl -Tl -f /etc/pf.conf &#34;-&#34; означает отключение загрузки листов даже при наличии поддерживаемого backend. #LISTS_RELOAD=&#34;pfctl -f /etc/pf.conf&#34; #LISTS_RELOAD=-&lt;/p&gt; &#xA;&lt;p&gt;В openwrt существует сеть по умолчанию &#39;lan&#39;. Только трафик с этой сети будет перенаправлен на tpws. Но возможно задать другие сети или список сетей : OPENWRT_LAN=&#34;lan lan2 lan3&#34;&lt;/p&gt; &#xA;&lt;p&gt;В openwrt в качестве wan берутся интерфейсы, имеющие default route. Отдельно для ipv4 и ipv6. Это можно переопределить : OPENWRT_WAN4=&#34;wan4 vpn&#34; OPENWRT_WAN6=&#34;wan6 vpn6&#34;&lt;/p&gt; &#xA;&lt;p&gt;Параметр INIT_APPLY_FW=1 разрешает init скрипту самостоятельно применять правила iptables. При иных значениях или если параметр закомментирован, правила применены не будут. Это полезно, если у вас есть система управления фаерволом, в настройки которой и следует прикрутить правила. На openwrt неприменимо при использовании firewall3+iptables.&lt;/p&gt; &#xA;&lt;p&gt;Следующие настройки не актуальны для openwrt :&lt;/p&gt; &#xA;&lt;p&gt;Если ваша система работает как роутер, то нужно вписать названия внутренних и внешних интерфейсов : IFACE_LAN=eth0 IFACE_WAN=eth1 IFACE_WAN6=&#34;henet ipsec0&#34; Несколько интерфейсов могут быть вписаны через пробел. Если IFACE_WAN6 не задан, то берется значение IFACE_WAN.&lt;/p&gt; &#xA;&lt;p&gt;ВАЖНО : настройка маршрутизации , маскарада и т.д. не входит в задачу zapret. Включаются только режимы, обеспечивающие перехват транзитного трафика. Возможно определить несколько интерфейсов следующим образом : IFACE_LAN=&#34;eth0 eth1 eth2&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Прикручивание к системе управления фаерволом или своей системе запуска&lt;/h2&gt; &#xA;&lt;p&gt;Если вы используете какую-то систему управления фаерволом, то она может вступать в конфликт с имеющимся скриптом запуска. При повторном применении правил она могла бы поломать настройки iptables от zapret. В этом случае правила для iptables должны быть прикручены к вашему фаерволу отдельно от запуска tpws или nfqws.&lt;/p&gt; &#xA;&lt;p&gt;Следующие вызовы позволяют применить или убрать правила iptables отдельно :&lt;/p&gt; &#xA;&lt;p&gt;/opt/zapret/init.d/sysv/zapret start_fw /opt/zapret/init.d/sysv/zapret stop_fw /opt/zapret/init.d/sysv/zapret restart_fw&lt;/p&gt; &#xA;&lt;p&gt;А так можно запустить или остановить демоны отдельно от фаервола :&lt;/p&gt; &#xA;&lt;p&gt;/opt/zapret/init.d/sysv/zapret start_daemons /opt/zapret/init.d/sysv/zapret stop_daemons /opt/zapret/init.d/sysv/zapret restart_daemons&lt;/p&gt; &#xA;&lt;p&gt;nftables сводят практически на нет конфликты между разными системами управления, поскольку позволяют использовать независимые таблицы и хуки. Используется отдельная nf-таблица &#34;zapret&#34;. Если ваша система ее не будет трогать, скорее всего все будет нормально.&lt;/p&gt; &#xA;&lt;p&gt;Для nftables предусмотрено несколько дополнительных вызовов :&lt;/p&gt; &#xA;&lt;p&gt;Посмотреть set-ы интерфейсов, относящихся к lan, wan и wan6. По ним идет завертывание трафика. А так же таблицу flow table с именами интерфейсов ingress hook. /opt/zapret/init.d/sysv/zapret list_ifsets&lt;/p&gt; &#xA;&lt;p&gt;Обновить set-ы интерфейсов, относящихся к lan, wan и wan6. Для традиционных linux список интерфейсов берется из переменных конфига IFACE_LAN, IFACE_WAN. Для openwrt определяется автоматически. Множество lanif может быть расширено параметром OPENWRT_LAN. Все интерфейсы lan и wan так же добавляются в ingress hook от flow table. /opt/zapret/init.d/sysv/zapret reload_ifsets&lt;/p&gt; &#xA;&lt;p&gt;Просмотр таблицы без содержимого set-ов. Вызывает nft -t list table inet zapret /opt/zapret/init.d/sysv/zapret list_table&lt;/p&gt; &#xA;&lt;p&gt;Так же возможно прицепиться своим скриптом к любой стадии применения и снятия фаервола со стороны zapret скриптов :&lt;/p&gt; &#xA;&lt;p&gt;INIT_FW_PRE_UP_HOOK=&#34;/etc/firewall.zapret.hook.pre_up&#34; INIT_FW_POST_UP_HOOK=&#34;/etc/firewall.zapret.hook.post_up&#34; INIT_FW_PRE_DOWN_HOOK=&#34;/etc/firewall.zapret.hook.pre_down&#34; INIT_FW_POST_DOWN_HOOK=&#34;/etc/firewall.zapret.hook.post_down&#34;&lt;/p&gt; &#xA;&lt;p&gt;Эти настройки доступны в config. Может быть полезно, если вам нужно использовать nftables set-ы, например ipban/ipban6. nfset-ы принадлежат только одной таблице, следовательно вам придется писать правила для таблицы zapret, а значит нужно синхронизироваться с применением/снятием правил со стороны zapret скриптов.&lt;/p&gt; &#xA;&lt;h2&gt;Вариант custom&lt;/h2&gt; &#xA;&lt;p&gt;custom код вынесен в отдельный shell include /opt/zapret/init.d/sysv/custom или /opt/zapret/init.d/openwrt/custom&lt;/p&gt; &#xA;&lt;p&gt;Нужно свой код вписать в функции : zapret_custom_daemons zapret_custom_firewall zapret_custom_firewall_nft&lt;/p&gt; &#xA;&lt;p&gt;В файле custom пишите ваш код, пользуясь хелперами из &#34;functions&#34; или &#34;zapret&#34;. Смотрите как там сделано добавление iptables или запуск демонов. Используя хелпер функции, вы избавитесь от необходимости учитывать все возможные случаи типа наличия/отсутствия ipv6, является ли система роутером, имена интерфейсов, ... Хелперы это учитывают , вам нужно сосредоточиться лишь на фильтрах {ip,nf}tables и параметрах демонов.&lt;/p&gt; &#xA;&lt;p&gt;Код для openwrt и sysv немного отличается. В sysv нужно обрабатывать и запуск, и остановку демонов. Запуск это или остановка передается в параметре $1 (0 или 1). В openwrt за остановку отвечает procd.&lt;/p&gt; &#xA;&lt;p&gt;Для фаервола кастом пишется отдельно для iptables и nftables. Все очень похоже, но отличается написание фильтров и названия процедур хелперов. Если вам не нужны iptables или nftables - можете не писать соответствующую функцию.&lt;/p&gt; &#xA;&lt;p&gt;Готовый custom скрипт custom-tpws4http-nfqws4https позволяет применить дурение tpws к http и nfqws к https. При этом поддерживаются установки из config. Его можно использовать как стартовую точку для написания своих скриптов.&lt;/p&gt; &#xA;&lt;h2&gt;Простая установка&lt;/h2&gt; &#xA;&lt;p&gt;install_easy.sh автоматизирует ручные варианты процедур установки (см manual_setup.txt). Он поддерживает OpenWRT, linux системы на базе systemd или openrc и MacOS.&lt;/p&gt; &#xA;&lt;p&gt;Для более гибкой настройки перед запуском инсталятора следует выполнить раздел &#34;Выбор параметров&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Если система запуска поддерживается, но используется не поддерживаемый инсталятором менеджер пакетов или названия пакетов не соответствуют прописанным в инсталятор, пакеты нужно установить вручную. Всегда требуется curl. ipset - только для режима iptables, для nftables - не нужен.&lt;/p&gt; &#xA;&lt;p&gt;Для совсем обрезанных дистрибутивов (alpine) требуется отдельно установить iptables и ip6tables, либо nftables.&lt;/p&gt; &#xA;&lt;p&gt;В комплекте идут статические бинарики для большинства архитектур. Какой-то из них подойдет с вероятностью 99%. Но если у вас экзотическая система, инсталятор попробует собрать бинарики сам через make. Для этого нужны gcc, make и необходимые -dev пакеты. Можно форсировать режим компиляции следующим вызовом :&lt;/p&gt; &#xA;&lt;p&gt;install_easy.sh make&lt;/p&gt; &#xA;&lt;p&gt;Под openwrt все уже сразу готово для использования системы в качестве роутера. Имена интерфейсов WAN и LAN известны из настроек системы. Под другими системами роутер вы настраиваете самостоятельно. Инсталятор в это не вмешивается. Инсталятор в зависимости от выбранного режима может спросить LAN и WAN интерфейсы. Нужно понимать, что заворот проходящего трафика на tpws в прозрачном режиме происходит до выполнения маршрутизации, следовательно возможна фильтрация по LAN и невозможна по WAN. Решение о завороте на tpws локального исходящего трафика принимается после выполнения маршрутизации, следовательно ситуация обратная : LAN не имеет смысла, фильтрация по WAN возможна. Заворот на nfqws происходит всегда после маршрутизации, поэтому к нему применима только фильтрация по WAN. Возможность прохождения трафика в том или ином направлении настраивается вами в процессе конфигурации роутера.&lt;/p&gt; &#xA;&lt;p&gt;Деинсталяция выполняется через uninstall_easy.sh&lt;/p&gt; &#xA;&lt;h2&gt;Простая установка на openwrt&lt;/h2&gt; &#xA;&lt;p&gt;Работает только если у вас на роутере достаточно места.&lt;/p&gt; &#xA;&lt;p&gt;Копируем zapret на роутер в /tmp.&lt;/p&gt; &#xA;&lt;p&gt;Запускаем установщик : sh /tmp/zapret/install_easy.sh Он скопирует в /opt/zapret только необходимый минимум файлов.&lt;/p&gt; &#xA;&lt;p&gt;После успешной установки можно удалить zapret из tmp для освобождения RAM : rm -r /tmp/zapret&lt;/p&gt; &#xA;&lt;p&gt;Для более гибкой настройки перед запуском инсталятора следует выполнить раздел &#34;Выбор параметров&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Система простой инсталяции заточена на любое умышленное или неумышленное изменение прав доступа на файлы. Устойчива к репаку под windows. После копирования в /opt права будут принудительно восстановлены.&lt;/p&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;Без рута забудьте про nfqws и tpws в режиме transparent proxy. tpws будет работать только в режиме --socks.&lt;/p&gt; &#xA;&lt;p&gt;Ядра Android имеют поддержку NFQUEUE. nfqws работает.&lt;/p&gt; &#xA;&lt;p&gt;В стоковых ядрах нет поддержки ipset. В общем случае сложность задачи по поднятию ipset варьируется от &#34;не просто&#34; до &#34;почти невозможно&#34;. Если только вы не найдете готовое собранное ядро под ваш девайс.&lt;/p&gt; &#xA;&lt;p&gt;tpws будет работать в любом случае, он не требует чего-либо особенного. В android нет /etc/passwd, потому опция --user не будет работать. Вместо нее можно пользоваться числовыми user id и опцией --uid. Рекомендую использовать gid 3003 (AID_INET). Иначе можете получить permission denied на создание сокета. Например : --uid 1:3003 В iptables укажите : &#34;! --uid-owner 1&#34; вместо &#34;! --uid-owner tpws&#34;. Напишите шелл скрипт с iptables и tpws, запускайте его средствами вашего рут менеджера. Скрипты автозапуска лежат тут : magisk : /data/adb/service.d supersu : /system/su.d&lt;/p&gt; &#xA;&lt;p&gt;nfqws может иметь такой глюк. При запуске с uid по умолчанию (0x7FFFFFFF) при условии работы на сотовом интерфейсе и отключенном кабеле внешнего питания система может частично виснуть. Перестает работать тач и кнопки, но анимация на экране может продолжаться. Если экран был погашен, то включить его кнопкой power невозможно. Это, видимо, связано с переводом в suspend процессов с определенным UID. UID соответствует приложению или системному сервису. По UID android определяет политику power saving. Так же возможно, что глюк связан с кривым драйвером сотового интерфейса от китайцев, поскольку при использовании wifi такого не наблюдается. suspend обработчика nfqueue на обычном linux не вызывает подобных фатальных последствий. Изменение UID на низкий (--uid 1 подойдет) позволяет решить эту проблему. Глюк был замечен на android 8.1 на девайсе , основанном на платформе mediatek.&lt;/p&gt; &#xA;&lt;p&gt;Ответ на вопрос куда поместить tpws на android без рута, чтобы потом его запускать из приложений. Файл заливаем через adb shell в /data/local/tmp/, лучше всего в субфолдер. mkdir /data/local/tmp/zapret adb push tpws /data/local/tmp/zapret chmod 755 /data/local/tmp/zapret /data/local/tmp/zapret/tpws chcon u:object_r:system_file:s0 /data/local/tmp/zapret/tpws&lt;/p&gt; &#xA;&lt;p&gt;Как найти стратегию обхода сотового оператора : проще всего раздать инет на комп с linux. Можно записать live image linux на флэшку и загрузиться с нее или запустить виртуалку с linux и пробросить в нее usb устройство от режима модема с телефона. На компе с linux прогнать стандартную процедуру blockcheck. При переносе правил на телефон уменьшить TTL на 1, если правила с TTL присутствуют в стратегии. Можно развернуть rootfs какого-нибудь дистрибутива linux прямо на телефоне, имея рута. Это лучше всего делать с компа через adb shell. Если компа нет, то это единственный вариант, хотя и неудобный. Подойдет что-то легковесное, например, alpine или даже openwrt. Если это не эмулятор android, то универсальная архитектура - arm (любой вариант). Если вы точно знаете, что ОС у вас 64-разрядная, то лучше вместо arm - aarch64.&lt;/p&gt; &#xA;&lt;p&gt;mount --bind /dev /data/linux/dev mount --bind /proc /data/linux/proc mount --bind /sys /data/linux/sys chroot /data/linux&lt;/p&gt; &#xA;&lt;p&gt;Первым делом вам нужно будет один раз настроить DNS. Сам он не заведется.&lt;/p&gt; &#xA;&lt;p&gt;echo nameserver 1.1.1.1 &amp;gt;/etc/resolv.conf&lt;/p&gt; &#xA;&lt;p&gt;Далее нужно средствами пакетного менеджера установить iptables-legacy. Обязательно НЕ iptables-nft, который как правило присутствует по умолчанию. В ядре android нет nftables. ls -la $(which iptables) Линк должен указывать на legacy вариант. Если нет, значит устанавливайте нужные пакеты вашего дестрибутива, и убеждайтесь в правильности ссылок. iptables -S Так можно проверить, что ваш iptables увидел то, что туда насовал android. iptables-nft выдаст ошибку. Далее качаем zapret в /opt/zapret. Обычные действия с install_prereq.sh, install_bin.sh, blockcheck.sh.&lt;/p&gt; &#xA;&lt;p&gt;Учтите, что стратегии обхода сотового оператора и домашнего wifi вероятно будут разные. Выделить сотового оператора легко через параметр iptables -o &amp;lt;имя интерфейса&amp;gt;. Имя может быть , например, ccmni0. Его легко увидеть через ifconfig. Wifi сеть - обычно wlan0.&lt;/p&gt; &#xA;&lt;p&gt;Переключать blockcheck между оператором и wifi можно вместе со всем инетом - включив или выключив wifi. Если найдете стратегию для wifi и впишите ее в автостарт, то при подключении к другому wifi она может не сработать или вовсе что-то поломать, потому подумайте стоит ли. Может быть лучше сделать скрипты типа &#34;запустить обход домашнего wifi&#34;, &#34;снять обход домашнего wifi&#34;, и пользоваться ими по необходимости из терминала. Но домашний wifi лучше все-же обходить на роутере.&lt;/p&gt; &#xA;&lt;h2&gt;Мобильные модемы и роутеры huawei&lt;/h2&gt; &#xA;&lt;p&gt;Устройства типа E3372, E8372, E5770 разделяют общую идеологию построения системы. Имеются 2 вычислительных ядра. Одно ядро выполняет vxworks, другое - linux. На 4pda имеются модицифированные прошивки с telnet и adb. Их и нужно использовать.&lt;/p&gt; &#xA;&lt;p&gt;Дальнейшие утверждения проверены на E8372. На других может быть аналогично или похоже. Присутствуют дополнительные аппаратные блоки для offload-а сетевых функций. Не весь трафик идет через linux. Исходящий трафик с самого модема проходит цепочку OUTPUT нормально, на FORWARD =&amp;gt;wan часть пакетов выпадает из tcpdump.&lt;/p&gt; &#xA;&lt;p&gt;tpws работает обычным образом.&lt;/p&gt; &#xA;&lt;p&gt;nfqueue поломан. можно собрать фиксящий модуль &lt;a href=&#34;https://github.com/im-0/unfuck-nfqueue-on-e3372h&#34;&gt;https://github.com/im-0/unfuck-nfqueue-on-e3372h&lt;/a&gt;, используя исходники с huawei open source. Исходники содержат тулчейн и полусобирающееся, неактуальное ядро. Конфиг можно взять с рабочего модема из /proc/config.gz. С помощью этих исходников умельцы могут собрать модуль unfuck_nfqueue.ko. После его применения NFQUEUE и nfqws для arm работают нормально.&lt;/p&gt; &#xA;&lt;p&gt;Чтобы избежать проблемы с offload-ом при использвании nfqws, следует комбинировать tpws в режиме tcp proxy и nfqws. Правила NFQUEUE пишутся для цепочки OUTPUT. connbytes придется опускать, поскольку модуля в ядре нет. Но это не смертельно.&lt;/p&gt; &#xA;&lt;p&gt;Скрипт автозапуска - /system/etc/autorun.sh. Создайте свой скрипт настройки zapret, запускайте из конца autorun.sh через &#34;&amp;amp;&#34;. Скрипт должен в начале делать sleep 5, чтобы дождаться поднятия сети и iptables от huawei.&lt;/p&gt; &#xA;&lt;p&gt;ПРЕДУПРЕЖДЕНИЕ. На этом модеме происходят хаотические сбросы соединений tcp по непонятным причинам. Выглядит это так, если запускать curl с самого модема : curl &lt;a href=&#34;http://www.ru&#34;&gt;www.ru&lt;/a&gt; curl: (7) Failed to connect to &lt;a href=&#34;http://www.ru&#34;&gt;www.ru&lt;/a&gt; port 80: Host is unreachable Возникает ошибка сокета EHOSTUNREACH (errno -113). То же самое видно в tpws. В броузере не подгружаются части веб страниц, картинки, стили. В tcpdump на внешнем интерфейсе eth_x виден только единственный и безответный SYN пакет, без сообщений ICMP. ОС каким-то образом узнает о невозможности установить TCP соединение и выдает ошибку. Если выполнять подключение с клиента, то SYN пропадают, соединение не устанавливается. ОС клиента проводит ретрансмиссию, и с какого-то раза подключение удается. Поэтому без tcp проксирования в этой ситуации сайты тупят, но загружаются, а с проксированием подключение выполняется, но вскоре сбрасывается без каких-либо данных, и броузеры не пытаются установить его заново. Поэтому качество броузинга с tpws может быть хуже, но дело не в tpws. Частота сбросов заметно возрастает, если запущен торент клиент, имеется много tcp соединений. Однако, причина не в переполнении таблицы conntrack. Увеличение лимитов и очистка conntrack не помогают. Предположительно эта особенность связана с обработкой пакетов сброса соединения в hardware offload. Точного ответа на вопрос у меня нет. Если вы знаете - поделитесь, пожалуйста. Чтобы не ухудшать качество броузинга, можно фильтровать заворот на tpws по ip фильтру. Поддержка ipset отсутствует. Значит, все, что можно сделать - создать индивидуальные правила на небольшое количество хостов.&lt;/p&gt; &#xA;&lt;p&gt;Некоторые наброски скриптов присутствуют в files/huawei. Не готовое решение ! Смотрите, изучайте, приспосабливайте. Здесь можно скачать готовые полезные статические бинарики для arm, включая curl : &lt;a href=&#34;https://github.com/bol-van/bins&#34;&gt;https://github.com/bol-van/bins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FreeBSD, OpenBSD, MacOS&lt;/h2&gt; &#xA;&lt;p&gt;Описано в docs/bsd.txt&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Описано в docs/windows.txt&lt;/p&gt; &#xA;&lt;h2&gt;Другие прошивки&lt;/h2&gt; &#xA;&lt;p&gt;Для статических бинариков не имеет значения на чем они запущены : PC, android, приставка, роутер, любой другой девайс. Подойдет любая прошивка, дистрибутив linux. Статические бинарики запустятся на всем. Им нужно только ядро с необходимыми опциями сборки или модулями. Но кроме бинариков в проекте используются еще и скрипты, в которых задействуются некоторые стандартные программы.&lt;/p&gt; &#xA;&lt;p&gt;Основные причины почему нельзя просто так взять и установить эту систему на что угодно :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;отсутствие доступа к девайсу через shell&lt;/li&gt; &#xA; &lt;li&gt;отсутствие рута&lt;/li&gt; &#xA; &lt;li&gt;отсутствие раздела r/w для записи и энергонезависимого хранения файлов&lt;/li&gt; &#xA; &lt;li&gt;отсутствие возможности поставить что-то в автозапуск&lt;/li&gt; &#xA; &lt;li&gt;отсутствие cron&lt;/li&gt; &#xA; &lt;li&gt;неотключаемый flow offload или другая проприетарщина в netfilter&lt;/li&gt; &#xA; &lt;li&gt;недостаток модулей ядра или опций его сборки&lt;/li&gt; &#xA; &lt;li&gt;недостаток модулей iptables (/usr/lib/iptables/lib*.so)&lt;/li&gt; &#xA; &lt;li&gt;недостаток стандартных программ (типа ipset, curl) или их кастрированность (облегченная замена)&lt;/li&gt; &#xA; &lt;li&gt;кастрированный или нестандартный шелл sh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Если в вашей прошивке есть все необходимое, то вы можете адаптировать zapret под ваш девайс в той или иной степени. Может быть у вас не получится поднять все части системы, однако вы можете хотя бы попытаться поднять tpws и завернуть на него через -j REDIRECT весь трафик на порт 80. Если вам есть куда записать tpws, есть возможность выполнять команды при старте, то как минимум это вы сделать сможете. Скорее всего поддержка REDIRECT в ядре есть. Она точно есть на любом роутере, на других устройствах под вопросом. NFQUEUE, ipset на большинстве прошивок отсутствуют из-за ненужности.&lt;/p&gt; &#xA;&lt;p&gt;Пересобрать ядро или модули для него будет скорее всего достаточно трудно. Для этого вам необходимо будет по крайней мере получить исходники вашей прошивки. User mode компоненты могут быть привнесены относительно безболезненно, если есть место куда их записать. Специально для девайсов, имеющих область r/w, существует проект entware. Некоторые прошивки даже имеют возможность его облегченной установки через веб интерфейс. entware содержит репозиторий user-mode компонент, которые устанавливаются в /opt. С их помощью можно компенсировать недостаток ПО основной прошивки, за исключением ядра.&lt;/p&gt; &#xA;&lt;p&gt;Можно попытаться использовать sysv init script таким образом, как это описано в разделе &#34;Прикручивание к системе управления фаерволом или своей системе запуска&#34;. В случае ругани на отсутствие каких-то базовых программ, их следует восполнить посредством entware. Перед запуском скрипта путь к дополнительным программам должен быть помещен в PATH.&lt;/p&gt; &#xA;&lt;p&gt;Подробное описание настроек для других прошивок выходит за рамки данного проекта.&lt;/p&gt; &#xA;&lt;p&gt;Openwrt является одной из немногих относительно полноценных linux систем для embedded devices. Она характеризуется следующими вещами, которые и послужили основой выбора именно этой прошивки :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;полный root доступ к девайсу через shell. на заводских прошивках чаще всего отсутствует, на многих альтернативных есть&lt;/li&gt; &#xA; &lt;li&gt;корень r/w. это практически уникальная особенность openwrt. заводские и большинство альтернативных прошивок построены на базе squashfs root (r/o), а конфигурация хранится в специально отформатированной области встроенной памяти, называемой nvram. не имеющие r/w корня системы сильно кастрированы. они не имеют возможности доустановки ПО из репозитория без специальных вывертов и заточены в основном на чуть более продвинутого, чем обычно, пользователя и управление имеющимся функционалом через веб интерфейс, но функционал фиксированно ограничен. альтернативные прошивки как правило могут монтировать r/w раздел в какую-то область файловой системы, заводские обычно могут монтировать лишь флэшки, подключенные к USB, и не факт, что есть поддержка unix файловых системы. может быть поддержка только fat и ntfs.&lt;/li&gt; &#xA; &lt;li&gt;возможность выноса корневой файловой системы на внешний носитель (extroot) или создания на нем оверлея (overlay)&lt;/li&gt; &#xA; &lt;li&gt;наличие менеджера пакетов opkg и репозитория софта&lt;/li&gt; &#xA; &lt;li&gt;flow offload предсказуемо, стандартно и выборочно управляем, а так же отключаем&lt;/li&gt; &#xA; &lt;li&gt;в репозитории есть все модули ядра, их можно доустановить через opkg. ядро пересобирать не нужно.&lt;/li&gt; &#xA; &lt;li&gt;в репозитории есть все модули iptables, их можно доустановить через opkg&lt;/li&gt; &#xA; &lt;li&gt;в репозитории есть огромное количество стандартных программ и дополнительного софта&lt;/li&gt; &#xA; &lt;li&gt;наличие SDK, позволяющего собрать недостающее&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Обход блокировки через сторонний хост&lt;/h2&gt; &#xA;&lt;p&gt;Если не работает автономный обход, приходится перенаправлять трафик через сторонний хост. Предлагается использовать прозрачный редирект через socks5 посредством iptables+redsocks, либо iptables+iproute+vpn. Настройка варианта с redsocks на openwrt описана в redsocks.txt. Настройка варианта с iproute+wireguard - в wireguard_iproute_openwrt.txt.&lt;/p&gt; &#xA;&lt;h2&gt;Почему стоит вложиться в покупку VPS&lt;/h2&gt; &#xA;&lt;p&gt;VPS - это виртуальный сервер. Существует огромное множество датацентров, предлагающих данную услугу. На VPS могут выполняться какие угодно задачи. От простого веб сайта до навороченной системы собственной разработки. Можно использовать VPS и для поднятия собственного vpn или прокси. Сама широта возможных способов применения , распространенность услуги сводят к минимуму возможности регуляторов по бану сервисов такого типа. Да, если введут белые списки, то решение загнется, но это будет уже другая реальность, в которой придется изобретать иные решения. Пока этого не сделали, никто не будет банить хостинги просто потому , что они предоставляют хостинг услуги. Вы как индивидуум скорее всего никому не нужны. Подумайте чем вы отличаетесь от известного VPN провайдера. VPN провайдер предоставляет &lt;em&gt;простую&lt;/em&gt; и &lt;em&gt;доступную&lt;/em&gt; услугу по обходу блокировок для масс. Этот факт делает его первоочередной целью блокировки. РКН направит уведомление, после отказа сотрудничать заблокирует VPN. Предоплаченная сумма пропадет. У регуляторов нет и никогда не будет ресурсов для тотальной проверки каждого сервера в сети. Возможен китайский расклад, при котором DPI выявляет vpn протоколы и динамически банит IP серверов, предоставляющих нелицензированный VPN. Но имея знания, голову, вы всегда можете обфусцировать vpn трафик или применить другие типы VPN, более устойчивые к анализу на DPI или просто менее широкоизвестные, а следовательно с меньшей вероятностью обнаруживамые регулятором. У вас есть свобода делать на вашем VPS все что вы захотите, адаптируясь к новым условиям. Да, это потребует знаний. Вам выбирать учиться и держать ситуацию под контролем, когда вам ничего запретить не могут, или покориться системе.&lt;/p&gt; &#xA;&lt;p&gt;VPS можно прибрести в множестве мест. Существуют специализированные на поиске предложений VPS порталы. Например, вот этот : &lt;a href=&#34;https://vps.today/&#34;&gt;https://vps.today/&lt;/a&gt; Для персонального VPN сервера обычно достаточно самой минимальной конфигурации, но с безлимитным трафиком или с большим лимитом по трафику (терабайты). Важен и тип VPS. Openvz подойдет для openvpn, но вы не поднимете на нем wireguard, ipsec, то есть все, что требует kernel mode. Для kernel mode требуется тип виртуализации, предполагающий запуск полноценного экземпляра ОС linux вместе с ядром. Подойдут kvm, xen, hyper-v, vmware.&lt;/p&gt; &#xA;&lt;p&gt;По цене можно найти предложения, которые будут дешевле готовой VPN услуги, но при этом вы сам хозяин в своей лавке и не рискуете попасть под бан регулятора, разве что &#34;заодно&#34; под ковровую бомбардировку с баном миллионов IP. Кроме того, если вам совсем все кажется сложным, прочитанное вызывает ступор, и вы точно знаете, что ничего из описанного сделать не сможете, то вы сможете хотя бы использовать динамическое перенаправление портов ssh для получения шифрованного socks proxy и прописать его в броузер. Знания linux не нужны совсем. Это вариант наименее напряжный для чайников, хотя и не самый удобный в использовании.&lt;/p&gt;</summary>
  </entry>
</feed>