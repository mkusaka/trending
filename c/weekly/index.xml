<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:03:49Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>screetsec/TheFatRat</title>
    <updated>2022-06-03T02:03:49Z</updated>
    <id>tag:github.com,2022-06-03:/screetsec/TheFatRat</id>
    <link href="https://github.com/screetsec/TheFatRat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Thefatrat a massive exploiting tool : Easy tool to generate backdoor and easy tool to post exploitation attack like browser attack and etc . This tool compiles a malware with popular payload and then the compiled malware can be execute on windows, android, mac . The malware that created with this tool also have an ability to bypass most AV softw…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TheFatRat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TheFatRat-1.9.8-brightgreen.svg?maxAge=259200&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Codename-Target-red.svg?maxAge=259200&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Release-Testing-brightgreen.svg?sanitize=true&#34; alt=&#34;Stage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Supported_OS-Linux-orange.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Available-BlackArch-red.svg?maxAge=259200&#34; alt=&#34;Available&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ManhNho/CEHv10/tree/master/Slides&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CEHv10-eccouncil-blue.svg?maxAge=259200&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-blue.svg?style=flat&#34; alt=&#34;Contributions Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A Massive Exploiting Tool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17976841/65820028-6ae17e00-e24e-11e9-894f-35836481cc2c.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TheFatRat&lt;/strong&gt; is an exploiting tool which compiles a malware with famous payload, and then the compiled maware can be executed on Linux , Windows , Mac and Android. &lt;strong&gt;TheFatRat&lt;/strong&gt; Provides An Easy way to create Backdoors and Payload which can bypass most anti-virus.&lt;/p&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;p&gt;This tool is for educational purpose only, usage of TheFatRat for attacking targets without prior mutual consent is illegal. Developers assume no liability and are not responsible for any misuse or damage cause by this program.&lt;/p&gt; &#xA;&lt;h2&gt;Features !&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully Automating MSFvenom &amp;amp; Metasploit.&lt;/li&gt; &#xA; &lt;li&gt;Local or remote listener Generation.&lt;/li&gt; &#xA; &lt;li&gt;Easily Make Backdoor by category Operating System.&lt;/li&gt; &#xA; &lt;li&gt;Generate payloads in Various formats.&lt;/li&gt; &#xA; &lt;li&gt;Bypass anti-virus backdoors.&lt;/li&gt; &#xA; &lt;li&gt;File pumper that you can use for increasing the size of your files.&lt;/li&gt; &#xA; &lt;li&gt;The ability to detect external IP &amp;amp; Interface address .&lt;/li&gt; &#xA; &lt;li&gt;Automatically creates AutoRun files for USB / CDROM exploitation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;But it&#39;s shit! And your implementation sucks!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yes, you&#39;re probably correct. Feel free to &#34;Not use it&#34; and there is a pull button to &#34;Make it better&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Instructions on how to install &lt;em&gt;TheFatRat&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Screetsec/TheFatRat.git&#xA;cd TheFatRat&#xA;chmod +x setup.sh &amp;amp;&amp;amp; ./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd TheFatRat&#xA;./update &amp;amp;&amp;amp; chmod +x setup.sh &amp;amp;&amp;amp; ./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshoot on TheFatRat&lt;/h3&gt; &#xA;&lt;p&gt;chk_tools script to use in case of problems in setup.sh of fatrat this script will check if everything is in the right version to run fatrat and will also provide you a solution for the problem&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd TheFatRat&#xA;chmod +x chk_tools &#xA;./chk_tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools Overview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Front View&lt;/th&gt; &#xA;   &lt;th&gt;Sample Feature&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/17976841/25420100/9ee12cf6-2a80-11e7-8dfa-c2e3cfe71366.png&#34; alt=&#34;Index&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17976841/65820886-91a4b200-e258-11e9-9a00-1e5905f6be16.jpg&#34; alt=&#34;f&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation Available in Modules CEH v9 and V10 , Download source here &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/khanhnnvn/CEHv10/raw/master/Labs/CEHv10%20Module%2006%20System%20Hacking.pdf&#34;&gt;CEHv10 Module 06 System Hacking.pdf&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/khanhnnvn/CEHv10/raw/master/Labs/CEHv10%20Module%2017%20Hacking%20Mobile%20Platforms.pdf&#34;&gt;CEHv10 Module 17 Hacking Mobile Platforms.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Published in International Journal of Cyber-Security and Digital Forensics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/323574673_MALWARE_ANALYSIS_OF_BACKDOOR_CREATOR_FATRAT&#34;&gt;Malware Analysis Of Backdoor Creator : TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Youtube Videos &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FsSgJFxyzFQ&#34;&gt;How To Download &amp;amp; Install TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NCsrcqhUBCc&amp;amp;feature=youtu.be&amp;amp;list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8&#34;&gt;TheFatRat 1.9.6 - Trodebi ( Embed Trojan into Debian Package )&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bFXVAXRXE9Q&#34;&gt;hacking windows 10 with TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FlXMslSjnGw&#34;&gt;Hacking Windows using TheFatRat + Apache2 Server + Ettercap + Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lglOXojT84M&#34;&gt;Hacking with a Microsoft Office Word Document from TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pbvg7pgxVjo&#34;&gt;XSS to powershell attack and bypass Antivirus using BeEF + TheFatRat + Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XLNigYZ5-fM&#34;&gt;TheFatRat - Hacking Over WAN - Embedding Payload in Original Android APK - Without Port Forwarding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=C_Og6LnEZSg&#34;&gt;How To Automatically Embed Payloads In APK&#39;s - Evil-Droid, Thefatrat &amp;amp; Apkinjector&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VPl1TMCAIy8&#34;&gt;Bind FUD Payload with JPG and Hack over WAN with TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;All notable changes to this project will be documented in this &lt;a href=&#34;https://github.com/Screetsec/thefatrat/raw/master/CHANGELOG.md&#34;&gt;file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;About issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/Screetsec/TheFatRat/raw/master/issues.md&#34;&gt;document&lt;/a&gt; before making an issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternative Best Tool - Generating Backdoor &amp;amp; Bypass&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Veil-Framework/Veil&#34;&gt;Veil-Framework /Veil&lt;/a&gt; - Veil Framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.shellterproject.com/download/&#34;&gt;Shellter&lt;/a&gt; - Shellter AV Evasion Artware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/unicorn&#34;&gt;Unicorn&lt;/a&gt; - Trustedsec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g0tmi1k/msfpc&#34;&gt;MSFvenom Payload Creator (MSFPC)&lt;/a&gt; - g0tmi1k&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r00t-3xp10it/venom&#34;&gt;Venom&lt;/a&gt; - Pedro Ubuntu&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oddcod3/Phantom-Evasion&#34;&gt;Phantom-Evasion&lt;/a&gt; - Diego Cornacchini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.offensive-security.com/&#34;&gt;Offensive Security&lt;/a&gt; - Offensive Security&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dracos-linux.org/&#34;&gt;dracOs Linux&lt;/a&gt; - Penetration Testing OS From Indonesia&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterpt&#34;&gt;peterpt&lt;/a&gt; - Maintainer &amp;amp; Contributor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dana-at-cp/backdoor-apk&#34;&gt;Dana James Traversie&lt;/a&gt; - backdoor_apk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/z0noxz/powerstager&#34;&gt;z0noxz&lt;/a&gt; - Powerstager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/unicorn&#34;&gt;TrustedSec&lt;/a&gt; - Unicorn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rsmudge&#34;&gt;Raphael Mudge&lt;/a&gt; - External Source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astr0baby.wordpress.com&#34;&gt;astr0baby&lt;/a&gt; - Reference Source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ngesec.id/&#34;&gt;NgeSEC&lt;/a&gt; Community&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gauli.net/&#34;&gt;Gauli(dot)Net&lt;/a&gt; - Lab Penetration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TheFatRat is made with 🖤 by Edo Maland &amp;amp; All &lt;a href=&#34;https://github.com/Screetsec/TheFatRat/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;. See the &lt;strong&gt;License&lt;/strong&gt; file for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>civetweb/civetweb</title>
    <updated>2022-06-03T02:03:49Z</updated>
    <id>tag:github.com,2022-06-03:/civetweb/civetweb</id>
    <link href="https://github.com/civetweb/civetweb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embedded C/C++ web server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/civetweb_64x64.png&#34; alt=&#34;CivetWeb&#34; title=&#34;CivetWeb&#34;&gt; CivetWeb&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The official home of CivetWeb is on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb&#34;&gt;https://github.com/civetweb/civetweb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/CREDITS.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Continuous integration for Linux and macOS (&lt;a href=&#34;https://app.travis-ci.com/github/civetweb/civetweb&#34;&gt;Travis CI&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/civetweb/civetweb&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/civetweb/civetweb.svg?branch=master&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Continuous integration for Windows (&lt;a href=&#34;https://ci.appveyor.com/project/civetweb/civetweb&#34;&gt;AppVeyor&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/civetweb/civetweb/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/civetweb/civetweb?svg=true&#34; alt=&#34;Appveyor Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test coverage check (&lt;a href=&#34;https://coveralls.io/github/civetweb/civetweb&#34;&gt;coveralls&lt;/a&gt;, &lt;a href=&#34;https://codecov.io/gh/civetweb/civetweb/branch/master&#34;&gt;codecov&lt;/a&gt;) (using different tools/settings):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/civetweb/civetweb.svg?maxAge=3600&#34; alt=&#34;Coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/civetweb/civetweb?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/civetweb/civetweb/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/civetweb/civetweb&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/civetweb/civetweb/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Static source code analysis (&lt;a href=&#34;https://scan.coverity.com/projects/5784&#34;&gt;Coverity&lt;/a&gt;): &lt;a href=&#34;https://scan.coverity.com/projects/5784&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/5784/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CodeQL semantic code analysis: &lt;a href=&#34;https://github.com/civetweb/civetweb/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/civetweb/civetweb/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Mission&lt;/h2&gt; &#xA;&lt;p&gt;Project mission is to provide easy to use, powerful, C (C/C++) embeddable web server with optional CGI, SSL and Lua support. CivetWeb has a MIT license so you can innovate without restrictions.&lt;/p&gt; &#xA;&lt;p&gt;CivetWeb can be used by developers as a library, to add web server functionality to an existing application.&lt;/p&gt; &#xA;&lt;p&gt;It can also be used by end users as a stand-alone web server running on a Windows or Linux PC. It is available as single executable, no installation is required.&lt;/p&gt; &#xA;&lt;h2&gt;Where to find the official version?&lt;/h2&gt; &#xA;&lt;p&gt;End users can download CivetWeb binaries / releases from here on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb/releases&#34;&gt;https://github.com/civetweb/civetweb/releases&lt;/a&gt; or SourceForge &lt;a href=&#34;https://sourceforge.net/projects/civetweb/&#34;&gt;https://sourceforge.net/projects/civetweb/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Developers can contribute to CivetWeb via GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb&#34;&gt;https://github.com/civetweb/civetweb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to a &lt;a href=&#34;https://github.com/git-for-windows/git/issues/2435&#34;&gt;bug in Git for Windows V2.24&lt;/a&gt; CivetWeb must be used with an earlier or later version (see also &lt;a href=&#34;https://github.com/civetweb/civetweb/issues/812&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Bugs and requests should be filed on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb/issues&#34;&gt;https://github.com/civetweb/civetweb/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;New releases are announced on Google Groups &lt;a href=&#34;https://groups.google.com/d/forum/civetweb&#34;&gt;https://groups.google.com/d/forum/civetweb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Formerly some support question and discussion threads have been at &lt;a href=&#34;https://groups.google.com/d/forum/civetweb&#34;&gt;Google groups&lt;/a&gt;. Recent questions and discussions use &lt;a href=&#34;https://github.com/civetweb/civetweb/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source releases can be found on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb/releases&#34;&gt;https://github.com/civetweb/civetweb/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A very brief overview can be found on GitHub Pages &lt;a href=&#34;https://civetweb.github.io/civetweb/&#34;&gt;https://civetweb.github.io/civetweb/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Installing.md&#34;&gt;docs/Installing.md&lt;/a&gt; - Install Guide (for end users using pre-built binaries)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/UserManual.md&#34;&gt;docs/UserManual.md&lt;/a&gt; - End User Guide&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Building.md&#34;&gt;docs/Building.md&lt;/a&gt; - Building the Server (quick start guide)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Embedding.md&#34;&gt;docs/Embedding.md&lt;/a&gt; - Embedding (how to add HTTP support to an existing application)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/OpenSSL.md&#34;&gt;docs/OpenSSL.md&lt;/a&gt; - Adding HTTPS (SSL/TLS) support using OpenSSL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/tree/master/docs/api&#34;&gt;API documentation&lt;/a&gt; - Additional documentation on the civetweb application programming interface (&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/include/civetweb.h&#34;&gt;civetweb.h&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/RELEASE_NOTES.md&#34;&gt;RELEASE_NOTES.md&lt;/a&gt; - Release Notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; - Security Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; - Copyright License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;CivetWeb keeps the balance between functionality and simplicity by a carefully selected list of features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forked from &lt;a href=&#34;https://code.google.com/p/mongoose/&#34;&gt;Mongoose&lt;/a&gt; in 2013, before it changed the licence from MIT to commercial + GPL. A lot of enhancements have been added since then, see &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/RELEASE_NOTES.md&#34;&gt;RELEASE_NOTES.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Maintains the liberal, permissive, commercial-friendly, &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Project is free from copy-left licenses, like GPL, because you should innovate without restrictions.&lt;/li&gt; &#xA; &lt;li&gt;Works on Windows, Mac, Linux, UNIX, IOS, Android, Buildroot, and many other platforms.&lt;/li&gt; &#xA; &lt;li&gt;Scripting and database support (CGI, Lua Server Pages, Server side Lua scripts, Lua SQLite database, Server side JavaScript). This provides a ready to go, powerful web development platform in a one single-click executable with &lt;strong&gt;no dependencies&lt;/strong&gt;. 0&lt;/li&gt; &#xA; &lt;li&gt;Support for CGI, SSI, HTTP digest (MD5) authorization, WebSocket, WebDAV.&lt;/li&gt; &#xA; &lt;li&gt;Experimental HTTP/2 support.&lt;/li&gt; &#xA; &lt;li&gt;HTTPS (SSL/TLS) support using &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Optional support for authentication using client side X.509 certificates.&lt;/li&gt; &#xA; &lt;li&gt;Resumed download, URL rewrite, file blacklist, IP-based ACL.&lt;/li&gt; &#xA; &lt;li&gt;Can run as a Windows service or systemd service.&lt;/li&gt; &#xA; &lt;li&gt;Download speed limit based on client subnet or URI pattern.&lt;/li&gt; &#xA; &lt;li&gt;Simple and clean embedding API.&lt;/li&gt; &#xA; &lt;li&gt;The source is in single file for drop in compilation.&lt;/li&gt; &#xA; &lt;li&gt;Embedding examples included.&lt;/li&gt; &#xA; &lt;li&gt;HTTP client capable of sending arbitrary HTTP/HTTPS requests.&lt;/li&gt; &#xA; &lt;li&gt;Websocket client functionality available (WS/WSS).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optionally included software&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lua.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/lua-logo.jpg&#34; alt=&#34;Lua&#34; title=&#34;Lua Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://keplerproject.github.io/luafilesystem/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luafilesystem-logo.jpg&#34; alt=&#34;LuaFileSystem&#34; title=&#34;LuaFileSystem Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lua.sqlite.org/index.cgi/index&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luasqlite-logo.jpg&#34; alt=&#34;LuaSQLite3&#34; title=&#34;LuaSQLite3 Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sqlite.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/sqlite3-logo.jpg&#34; alt=&#34;Sqlite3&#34; title=&#34;Sqlite3 Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/n1tehawk/LuaXML&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luaxml-logo.jpg&#34; alt=&#34;LuaXML&#34; title=&#34;LuaXML Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://duktape.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/duktape-logo.png&#34; alt=&#34;Duktape&#34; title=&#34;Duktape Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zlib.net&#34;&gt;zlib&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ARMmbed/mbedtls&#34;&gt;Mbed TLS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This project is very easy to install and use. Please read the &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/&#34;&gt;documentation&lt;/a&gt; and have a look at the &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/examples/&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Recent questions and discussions usually use &lt;a href=&#34;https://github.com/civetweb/civetweb/issues&#34;&gt;GitHub issues&lt;/a&gt;. Some old information may be found on the &lt;a href=&#34;https://groups.google.com/d/forum/civetweb&#34;&gt;mailing list&lt;/a&gt;, but this information may be outdated.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to create a GitHub issue for bugs, feature requests, questions, suggestions or if you want to share tips and tricks. When creating an issues for a bug, add enough description to reproduce the issue - at least add CivetWeb version and operating system. Please see also the guidelines for &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Contribution.md&#34;&gt;Contributions&lt;/a&gt; and the &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: We do not take any liability or warranty for any linked contents. Visit these pages and try the community support suggestions at your own risk. Any link provided in this project (including source and documentation) is provided in the hope that this information will be helpful. However, we cannot accept any responsibility for any content on an external page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome provided all contributions carry the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;DO NOT APPLY fixes copied from Mongoose to this project to prevent GPL tainting. Since 2013, CivetWeb and Mongoose have been developed independently. By now the code base differs, so patches cannot be safely transferred in either direction.&lt;/p&gt; &#xA;&lt;p&gt;Some guidelines can be found in &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Contribution.md&#34;&gt;docs/Contribution.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;CivetWeb was forked from the last MIT version of Mongoose in August 2013. Since then, CivetWeb has seen many improvements from various authors (Copyright (c) 2013-2021 the CivetWeb developers, MIT license).&lt;/p&gt; &#xA;&lt;p&gt;A list of authors can be found in &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/CREDITS.md&#34;&gt;CREDITS.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CivetWeb is based on the &lt;a href=&#34;https://github.com/cesanta/mongoose&#34;&gt;Mongoose project&lt;/a&gt;. The original author of Mongoose was Sergey Lyubka(2004-2013) who released it under the MIT license. However, on August 16, 2013, &lt;a href=&#34;https://groups.google.com/forum/#!topic/mongoose-users/aafbOnHonkI&#34;&gt;Mongoose was relicensed to a dual GPL V2 + commercial license&lt;/a&gt; and CiwetWeb was created by Thomas Davis (sunsetbrew) as &#34;the MIT fork of mongoose&#34;. The license change and CivetWeb fork was mentioned on the Mongoose &lt;a href=&#34;https://en.wikipedia.org/wiki/Mongoose_(web_server)&#34;&gt;Wikipedia&lt;/a&gt; page as well, but it&#39;s getting deleted (and added again) there every now and then.&lt;/p&gt; &#xA;&lt;p&gt;Using the CivetWeb project ensures the MIT licenses terms are applied and GPL cannot be imposed on any of this code, as long as it is sourced from here. This code will remain free with the MIT license protection.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pocoproject/poco</title>
    <updated>2022-06-03T02:03:49Z</updated>
    <id>tag:github.com,2022-06-03:/pocoproject/poco</id>
    <link href="https://github.com/pocoproject/poco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The POCO C++ Libraries are powerful cross-platform C++ libraries for building network- and internet-based applications that run on desktop, server, mobile, IoT, and embedded systems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pocoproject/poco/master/doc/images/logo.png&#34; alt=&#34;alt text&#34; title=&#34;Poco Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pocoproject/poco/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/pocoproject/poco/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;poco-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/370&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/370/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;POCO (Portable Components) C++ Libraries are:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A collection of C++ class libraries, conceptually similar to the Java Class Library or the .NET Framework.&lt;/li&gt; &#xA; &lt;li&gt;Focused on solutions to frequently-encountered practical problems.&lt;/li&gt; &#xA; &lt;li&gt;Focused on &#34;internet-age&#34; network-centric applications.&lt;/li&gt; &#xA; &lt;li&gt;Written in efficient, modern, 100% ANSI/ISO Standard C++.&lt;/li&gt; &#xA; &lt;li&gt;Based on and complementing the C++ Standard Library/STL.&lt;/li&gt; &#xA; &lt;li&gt;Highly portable and available on many different platforms, from embedded to server.&lt;/li&gt; &#xA; &lt;li&gt;Open Source, licensed under the &lt;a href=&#34;https://spdx.org/licenses/BSL-1.0&#34;&gt;Boost Software License&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pocoproject/poco/master/doc/images/overview.png&#34; alt=&#34;alt text&#34; title=&#34;Poco Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To start using POCO, see the &lt;a href=&#34;https://pocoproject.org/docs/00100-GuidedTour.html&#34;&gt;Guided Tour&lt;/a&gt; and &lt;a href=&#34;https://pocoproject.org/docs/00200-GettingStarted.html&#34;&gt;Getting Started&lt;/a&gt; documents.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start (with CMake)&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake 3.5 or newer&lt;/li&gt; &#xA; &lt;li&gt;A C++14 compiler (Visual C++ 2015, GCC 5.0, Clang 3.4, or newer)&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL headers and libraries (optional, but recommended)&lt;/li&gt; &#xA; &lt;li&gt;MySQL, PostgreSQL and ODBC client libraries (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most Unix/Linux systems already have OpenSSL preinstalled. If your system does not have OpenSSL, please get it from &lt;a href=&#34;http://www.openssl.org&#34;&gt;http://www.openssl.org&lt;/a&gt; or another source. You do not have to build OpenSSL yourself - a binary distribution is fine. For example, via Debian APT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install openssl libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, the easiest way to install OpenSSL is via &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The easiest way to install OpenSSL on Windows is to use a binary (prebuild) release, for example the one from Shining Light Productions that comes with a &lt;a href=&#34;https://www.slproweb.com/products/Win32OpenSSL.html&#34;&gt;Windows installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, POCO can also use the native Windows TLS APIs (SChannel).&lt;/p&gt; &#xA;&lt;h3&gt;Installing All Dependencies (Linux and macOS)&lt;/h3&gt; &#xA;&lt;p&gt;All dependencies can be installed with the following commands:&lt;/p&gt; &#xA;&lt;h4&gt;Debian Linux (including Ubuntu and Raspbian)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y update &amp;amp;&amp;amp; sudo apt-get -y install git g++ make cmake libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;RedHat Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install -y git gcc-c++ make cmake3 openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS (with Homebrew)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cmake openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building with CMake (Linux, macOS, Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt; (version 3.5 or newer) is the recommended build system for building the POCO C++ Libraries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone -b master https://github.com/pocoproject/poco.git&#xA;$ cd poco&#xA;$ mkdir cmake-build&#xA;$ cd cmake-build&#xA;$ cmake ..&#xA;$ cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, it&#39;s necessary to tell CMake where to find the OpenSSL headers and libraries by setting the &lt;code&gt;OPENSSL_ROOT_DIR&lt;/code&gt; CMake variable. For example, if OpenSSL has been installed with Homebrew, the &lt;code&gt;cmake&lt;/code&gt; invocation becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake .. -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other common ways of building with CMake (e.g., &lt;code&gt;cmake-gui&lt;/code&gt;) will also work.&lt;/p&gt; &#xA;&lt;p&gt;There are also a number of project-specific CMake variables that can be changed.&lt;/p&gt; &#xA;&lt;h4&gt;Cross-Compiling&lt;/h4&gt; &#xA;&lt;p&gt;With a proper CMake toolchain file (specified via the &lt;code&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt; CMake variable), the POCO C++ Libraries can be cross-compiled for embedded Linux systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake .. -DCMAKE_TOOLCHAIN_FILE=/path/to/mytoolchain.cmake -DCMAKE_INSTALL_PREFIX=/path/to/target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing&lt;/h4&gt; &#xA;&lt;p&gt;The POCO C++ Libraries headers and libraries can be optionally be installed by building the &lt;code&gt;install&lt;/code&gt; target.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo cmake --build . --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default install location is &lt;code&gt;/usr/local/&lt;/code&gt; on Linux and macOS and &lt;code&gt;C:\Program Files (x64)\&lt;/code&gt; on Windows and can be overridden by setting the &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; CMake variable.&lt;/p&gt; &#xA;&lt;h3&gt;Building Without CMake&lt;/h3&gt; &#xA;&lt;p&gt;If you do not want to or cannot use CMake, POCO can also be built with Visual Studio (project and solution files included) or GNU Make (Linux, macOS and other supported Unix platforms).&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://pocoproject.org/docs&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Getting POCO via a Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;POCO can also be obtained via different &lt;a href=&#34;https://pocoproject.org/download.html&#34;&gt;package managers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;POCO has an active user and contributing community, please visit our &lt;a href=&#34;https://pocoproject.org&#34;&gt;website&lt;/a&gt; and &lt;a href=&#34;https://pocoproject.org/blog&#34;&gt;blog&lt;/a&gt;. Answers to POCO-related questions can also be found on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/poco-libraries&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/pocoproject/poco/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for submitting contributions, bugs reports, feature requests or security issues.&lt;/p&gt; &#xA;&lt;h3&gt;POCO vs. Boost&lt;/h3&gt; &#xA;&lt;p&gt;In regards to Boost, in spite of some functional overlapping, POCO is best thought of as a Boost complement (rather than replacement). Side-by-side use of Boost and POCO is a very common occurrence.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThrowTheSwitch/Unity</title>
    <updated>2022-06-03T02:03:49Z</updated>
    <id>tag:github.com,2022-06-03:/ThrowTheSwitch/Unity</id>
    <link href="https://github.com/ThrowTheSwitch/Unity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Unit Testing for C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity Test &lt;img src=&#34;https://github.com/ThrowTheSwitch/Unity/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Copyright (c) 2007 - 2021 Unity Project by Mike Karlesky, Mark VanderVoord, and Greg Williams&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the Unity Test Project, one of the main projects of ThrowTheSwitch.org. Unity Test is a unit testing framework built for C, with a focus on working with embedded toolchains.&lt;/p&gt; &#xA;&lt;p&gt;This project is made to test code targetting microcontrollers big and small. The core project is a single C file and a pair of headers, allowing it to the added to your existing build setup without too much headache. You may use any compiler you wish, and may use most existing build systems including Make, CMake, etc. If you&#39;d like to leave the hard work to us, you might be interested in Ceedling, a build tool also by ThrowTheSwitch.org.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to Unity, we encourage you to tour the &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/&#34;&gt;docs&lt;/a&gt; folder contains a &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&#34;&gt;getting started guide&lt;/a&gt; and much more tips about using Unity.&lt;/p&gt; &#xA;&lt;h2&gt;Unity Assertion Summary&lt;/h2&gt; &#xA;&lt;p&gt;For the full list, see &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityAssertionsReference.md&#34;&gt;UnityAssertionsReference.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Validity Tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_TRUE(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to false&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FALSE(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_TRUE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_UNLESS(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_FALSE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_FAIL()&#xA;TEST_FAIL_MESSAGE(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test is automatically marked as a failure. The message is output stating why.&lt;/p&gt; &#xA;&lt;h3&gt;Numerical Assertions: Integers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_INT(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT8(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT16(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT32(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two integers for equality and display errors as signed integers. A cast will be performed to your natural integer size so often this can just be used. When you need to specify the exact size, like when comparing arrays, you can use a specific version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_UINT(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT8(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT16(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT32(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two integers for equality and display errors as unsigned integers. Like INT, there are variants for different sizes also.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX8(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX16(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX32(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compares two integers for equality and display errors as hexadecimal. Like the other integer comparisons, you can specify the size... here the size will also effect how many nibbles are shown (for example, &lt;code&gt;HEX16&lt;/code&gt; will show 4 nibbles).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling TEST_ASSERT_EQUAL_INT&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_INT_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_GREATER_THAN(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is greater than the threshold. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is less than the threshold. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;h3&gt;Arrays&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;_ARRAY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can append &lt;code&gt;_ARRAY&lt;/code&gt; to any of these macros to make an array comparison of that type. Here you will need to care a bit more about the actual size of the value being checked. You will also specify an additional argument which is the number of elements to compare. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, elements)&#xA;&#xA;_EACH_EQUAL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another array comparison option is to check that EVERY element of an array is equal to a single expected value. You do this by specifying the EACH_EQUAL macro. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, elements)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numerical Assertions: Bitwise&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS(mask, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be compared between two other integers. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_HIGH(mask, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set high. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_LOW(mask, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set low. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_HIGH(bit, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test a single bit and verify that it is high. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_LOW(bit, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test a single bit and verify that it is low. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; &#xA;&lt;h3&gt;Numerical Assertions: Floats&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)&#xA;TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_NOT_WITHIN(delta, expected, actual)&#xA;TEST_ASSERT_DOUBLE_NOT_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is NOT within plus or minus delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_FLOAT(expected, actual)&#xA;TEST_ASSERT_EQUAL_DOUBLE(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that two floating point values are &#34;equal&#34; within a small % delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_EQUAL_FLOAT(expected, actual)&#xA;TEST_ASSERT_NOT_EQUAL_DOUBLE(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that two floating point values are NOT &#34;equal&#34; within a small % delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN_FLOAT(threshold, actual)&#xA;TEST_ASSERT_LESS_THAN_DOUBLE(threshold, actual)&#xA;TEST_ASSERT_GREATER_THAN_FLOAT(threshold, actual)&#xA;TEST_ASSERT_GREATER_THAN_DOUBLE(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is less than or greater than the threshold.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;LESS_OR_EQUAL&lt;/code&gt; and &lt;code&gt;GREATER_OR_EQUAL&lt;/code&gt; variations. These obey the same rules for equality as do &lt;code&gt;TEST_ASSERT_EQUAL_FLOAT&lt;/code&gt; and &lt;code&gt;TEST_ASSERT_EQUAL_DOUBLE&lt;/code&gt;: If the two values are within a small % delta of the expected value, the assertion will pass.&lt;/p&gt; &#xA;&lt;h3&gt;String Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different. Output a custom message on failure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters. Output a custom message on failure.&lt;/p&gt; &#xA;&lt;h3&gt;Pointer Assertions&lt;/h3&gt; &#xA;&lt;p&gt;Most pointer operations can be performed by simply using the integer comparisons above. However, a couple of special cases are added for clarity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NULL(pointer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fails if the pointer is not equal to NULL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_NULL(pointer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fails if the pointer is equal to NULL&lt;/p&gt; &#xA;&lt;h3&gt;Memory Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two blocks of memory. This is a good generic assertion for types that can&#39;t be coerced into acting like standard types... but since it&#39;s a memory compare, you have to be careful that your data types are packed.&lt;/p&gt; &#xA;&lt;h3&gt;_MESSAGE&lt;/h3&gt; &#xA;&lt;p&gt;You can append &lt;code&gt;\_MESSAGE&lt;/code&gt; to any of the macros to make them take an additional argument. This argument is a string that will be printed at the end of the failure strings. This is useful for specifying more information about the problem.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hepingood/nrf905</title>
    <updated>2022-06-03T02:03:49Z</updated>
    <id>tag:github.com,2022-06-03:/hepingood/nrf905</id>
    <link href="https://github.com/hepingood/nrf905" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nrf905 full function driver&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/README_zh-Hans.md&#34;&gt; 简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/README_zh-Hant.md&#34;&gt;繁體中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/README_ja.md&#34;&gt;日本語&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/README_de.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/README_ko.md&#34;&gt;한국어&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/doc/image/logo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;LibDriver NRF905&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/misra/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/misra-compliant-brightgreen.svg?sanitize=true&#34; alt=&#34;MISRA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.libdriver.com/docs/nrf905/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-reference-blue.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NRF905 is a single chip radio transceiver for the 433/868/915MHz ISM band. The transceiver consists of a fully integrated frequency synthesizer, receiver chain with demodulator, a power amplifier, a crystal oscillator and, a modulator. The ShockBurst™ feature automatically handles preamble and CRC. You can easily configure the nRF905 through the SPI. Current consumption is very low, in transmit only 9mA at an output power of -10dBm, and in receive mode 12.5mA. Built-in power down modes makes power saving easily realizable.NRF905 is used in wireless data communication, alarm security system, home automation, remote control and so on.&lt;/p&gt; &#xA;&lt;p&gt;LibDriver NRF905 is the full function driver of NRF905 launched by LibDriver.It provides functions of wireless senting, wireless receiving, etc. LibDriver is MISRA compliant.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#Instruction&#34;&gt;Instruction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#Install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#Usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#example-basic-sent&#34;&gt;example basic sent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#example-basic-receive&#34;&gt;example basic receive&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#Document&#34;&gt;Document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#License&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/nrf905/master/#Contact-Us&#34;&gt;Contact Us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instruction&lt;/h3&gt; &#xA;&lt;p&gt;/src includes LibDriver NRF905 source files.&lt;/p&gt; &#xA;&lt;p&gt;/interface includes LibDriver NRF905 SPI platform independent template。&lt;/p&gt; &#xA;&lt;p&gt;/test includes LibDriver NRF905 driver test code and this code can test the chip necessary function simply。&lt;/p&gt; &#xA;&lt;p&gt;/example includes LibDriver NRF905 sample code.&lt;/p&gt; &#xA;&lt;p&gt;/doc includes LibDriver NRF905 offline document.&lt;/p&gt; &#xA;&lt;p&gt;/datasheet includes NRF905 datasheet。&lt;/p&gt; &#xA;&lt;p&gt;/project includes the common Linux and MCU development board sample code. All projects use the shell script to debug the driver and the detail instruction can be found in each project&#39;s README.md.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Reference /interface SPI platform independent template and finish your platform SPI driver.&lt;/p&gt; &#xA;&lt;p&gt;Add /src, /interface and /example to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;example basic sent&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;uint8_t (*g_gpio_irq)(void) = NULL;&#xA;uint8_t res;&#xA;uint8_t addr[4] = NRF905_BASIC_DEFAULT_RX_ADDR;&#xA;char data[] = &#34;libdriver&#34;;&#xA;&#xA;...&#xA;&#xA;static void a_callback(uint8_t type, uint8_t *buf, uint8_t len)&#xA;{&#xA;    switch (type)&#xA;    {&#xA;        case NRF905_STATUS_AM :&#xA;        {&#xA;            nrf905_interface_debug_print(&#34;nrf905: address match.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case NRF905_STATUS_TX_DONE :&#xA;        {&#xA;            nrf905_interface_debug_print(&#34;nrf905: tx done.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case NRF905_STATUS_RX_DONE :&#xA;        {&#xA;            uint8_t i;&#xA;            &#xA;            nrf905_interface_debug_print(&#34;nrf905: irq receive with length %d.\n&#34;, len);&#xA;            for (i = 0; i &amp;lt; len; i++)&#xA;            {&#xA;                nrf905_interface_debug_print(&#34;%c&#34;, buf[i]);&#xA;            }&#xA;            nrf905_interface_debug_print(&#34;.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        default :&#xA;        {&#xA;            nrf905_interface_debug_print(&#34;nrf905: unknown code.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;...&#xA;    &#xA;res = gpio_interrupt_init();&#xA;if (res != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;g_gpio_irq = nrf905_interrupt_irq_handler;&#xA;res = nrf905_basic_init(NRF905_MODE_TX, a_callback);&#xA;if (res != 0)&#xA;{&#xA;    (void)gpio_interrupt_deinit();&#xA;    g_gpio_irq = NULL;&#xA;&#xA;    return 1;&#xA;}&#xA;&#xA;...&#xA;&#xA;if (nrf905_basic_sent((uint8_t *)addr, (uint8_t *)data, (uint8_t)strlen(data)) != 0)&#xA;{&#xA;    (void)nrf905_basic_deinit();&#xA;    (void)gpio_interrupt_deinit();&#xA;    g_gpio_irq = NULL;&#xA;}&#xA;&#xA;...&#xA;&#xA;if (nrf905_basic_deinit() != 0)&#xA;{&#xA;    (void)gpio_interrupt_deinit();&#xA;    g_gpio_irq = NULL;&#xA;}&#xA;(void)gpio_interrupt_deinit();&#xA;g_gpio_irq = NULL;&#xA;&#xA;...&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;example basic receive&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;uint8_t (*g_gpio_irq)(void) = NULL;&#xA;uint8_t res;&#xA;uint32_t timeout;&#xA;uint8_t addr[4] = NRF905_BASIC_DEFAULT_RX_ADDR;&#xA;&#xA;...&#xA;&#xA;static void a_callback(uint8_t type, uint8_t *buf, uint8_t len)&#xA;{&#xA;    switch (type)&#xA;    {&#xA;        case NRF905_STATUS_AM :&#xA;        {&#xA;            nrf905_interface_debug_print(&#34;nrf905: address match.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case NRF905_STATUS_TX_DONE :&#xA;        {&#xA;            nrf905_interface_debug_print(&#34;nrf905: tx done.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case NRF905_STATUS_RX_DONE :&#xA;        {&#xA;            uint8_t i;&#xA;            &#xA;            nrf905_interface_debug_print(&#34;nrf905: irq receive with length %d.\n&#34;, len);&#xA;            for (i = 0; i &amp;lt; len; i++)&#xA;            {&#xA;                nrf905_interface_debug_print(&#34;%c&#34;, buf[i]);&#xA;            }&#xA;            nrf905_interface_debug_print(&#34;.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        default :&#xA;        {&#xA;            nrf905_interface_debug_print(&#34;nrf905: unknown code.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;...&#xA;    &#xA;timeout = 5000;&#xA;res = gpio_interrupt_init();&#xA;if (res != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;g_gpio_irq = nrf905_interrupt_irq_handler;&#xA;res = nrf905_basic_init(NRF905_MODE_RX, a_callback);&#xA;if (res != 0)&#xA;{&#xA;    (void)gpio_interrupt_deinit();&#xA;    g_gpio_irq = NULL;&#xA;&#xA;    return 1;&#xA;}&#xA;&#xA;...&#xA;&#xA;nrf905_interface_delay_ms(timeout);&#xA;&#xA;...&#xA;&#xA;if (nrf905_basic_deinit() != 0)&#xA;{&#xA;    (void)gpio_interrupt_deinit();&#xA;    g_gpio_irq = NULL;&#xA;}&#xA;(void)gpio_interrupt_deinit();&#xA;g_gpio_irq = NULL;&#xA;&#xA;...&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Document&lt;/h3&gt; &#xA;&lt;p&gt;Online documents: &lt;a href=&#34;https://www.libdriver.com/docs/nrf905/index.html&#34;&gt;https://www.libdriver.com/docs/nrf905/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Offline documents: /doc/html/index.html&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please sent an e-mail to &lt;a href=&#34;mailto:lishifenging@outlook.com&#34;&gt;lishifenging@outlook.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (c) 2015 - present LibDriver All rights reserved&lt;/p&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy&lt;/p&gt; &#xA;&lt;p&gt;of this software and associated documentation files (the &#34;Software&#34;), to deal&lt;/p&gt; &#xA;&lt;p&gt;in the Software without restriction, including without limitation the rights&lt;/p&gt; &#xA;&lt;p&gt;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&lt;/p&gt; &#xA;&lt;p&gt;copies of the Software, and to permit persons to whom the Software is&lt;/p&gt; &#xA;&lt;p&gt;furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all&lt;/p&gt; &#xA;&lt;p&gt;copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&lt;/p&gt; &#xA;&lt;p&gt;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&lt;/p&gt; &#xA;&lt;p&gt;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&lt;/p&gt; &#xA;&lt;p&gt;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&lt;/p&gt; &#xA;&lt;p&gt;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&lt;/p&gt; &#xA;&lt;p&gt;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/p&gt; &#xA;&lt;p&gt;SOFTWARE.&lt;/p&gt; &#xA;&lt;h3&gt;Contact Us&lt;/h3&gt; &#xA;&lt;p&gt;Please sent an e-mail to &lt;a href=&#34;mailto:lishifenging@outlook.com&#34;&gt;lishifenging@outlook.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>