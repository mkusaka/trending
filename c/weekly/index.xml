<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-18T01:36:04Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sumatrapdfreader/sumatrapdf</title>
    <updated>2024-08-18T01:36:04Z</updated>
    <id>tag:github.com,2024-08-18:/sumatrapdfreader/sumatrapdf</id>
    <link href="https://github.com/sumatrapdfreader/sumatrapdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SumatraPDF reader&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sumatrapdfreader/sumatrapdf/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/sumatrapdfreader/sumatrapdf/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SumatraPDF Reader&lt;/h2&gt; &#xA;&lt;p&gt;SumatraPDF is a multi-format (PDF, EPUB, MOBI, CBZ, CBR, FB2, CHM, XPS, DjVu) reader for Windows under (A)GPLv3 license, with some code under BSD license (see AUTHORS).&lt;/p&gt; &#xA;&lt;p&gt;More Information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sumatrapdfreader.org/free-pdf-reader&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sumatrapdfreader.org/manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sumatrapdfreader.org/docs/Contribute-to-SumatraPDF&#34;&gt;Developer Information&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>erincatto/box2d</title>
    <updated>2024-08-18T01:36:04Z</updated>
    <id>tag:github.com,2024-08-18:/erincatto/box2d</id>
    <link href="https://github.com/erincatto/box2d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Box2D is a 2D physics engine for games&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://box2d.org/images/logo.svg?sanitize=true&#34; alt=&#34;Box2D Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build Status&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/erincatto/box2d/actions&#34;&gt;&lt;img src=&#34;https://github.com/erincatto/box2d/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Box2D&lt;/h1&gt; &#xA;&lt;p&gt;Box2D is a 2D physics engine for games.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dAoM-xjOWtA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/dAoM-xjOWtA/0.jpg&#34; alt=&#34;Box2D Version 3.0 Release Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Collision&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Continuous collision detection&lt;/li&gt; &#xA; &lt;li&gt;Contact events and sensors&lt;/li&gt; &#xA; &lt;li&gt;Convex polygons, capsules, circles, rounded polygons, segments, and chains&lt;/li&gt; &#xA; &lt;li&gt;Multiple shapes per body&lt;/li&gt; &#xA; &lt;li&gt;Collision filtering&lt;/li&gt; &#xA; &lt;li&gt;Ray casts, shape casts, and overlap queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Physics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robust &lt;em&gt;Soft Step&lt;/em&gt; rigid body solver&lt;/li&gt; &#xA; &lt;li&gt;Continuous physics for fast translations and rotations&lt;/li&gt; &#xA; &lt;li&gt;Island based sleep&lt;/li&gt; &#xA; &lt;li&gt;Revolute, prismatic, distance, mouse joint, weld, and wheel joints&lt;/li&gt; &#xA; &lt;li&gt;Joint limits, motors, springs, and friction&lt;/li&gt; &#xA; &lt;li&gt;Joint and contact forces&lt;/li&gt; &#xA; &lt;li&gt;Body movement events and sleep notification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data-oriented design&lt;/li&gt; &#xA; &lt;li&gt;Written in portable C17&lt;/li&gt; &#xA; &lt;li&gt;Extensive multithreading and SIMD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL with GLFW and enkiTS&lt;/li&gt; &#xA; &lt;li&gt;Graphical user interface with imgui&lt;/li&gt; &#xA; &lt;li&gt;Many samples to demonstrate features and performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ensure CMake is in the user &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio: run &lt;code&gt;build.bat&lt;/code&gt; from the command prompt&lt;/li&gt; &#xA; &lt;li&gt;Otherwise: run &lt;code&gt;build.sh&lt;/code&gt; from a bash shell&lt;/li&gt; &#xA; &lt;li&gt;Results are in the build sub-folder&lt;/li&gt; &#xA; &lt;li&gt;On Windows you can open box2d.sln&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building for Xcode&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add Cmake to the path in .zprofile (the default Terminal shell is zsh) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;export PATH=&#34;/Applications/CMake.app/Contents/bin:$PATH&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;mkdir build&lt;/li&gt; &#xA; &lt;li&gt;cd build&lt;/li&gt; &#xA; &lt;li&gt;cmake -G Xcode ..&lt;/li&gt; &#xA; &lt;li&gt;open box2d.xcodeproj&lt;/li&gt; &#xA; &lt;li&gt;Select the samples scheme&lt;/li&gt; &#xA; &lt;li&gt;Edit the scheme to set a custom working directory, make this be in box2d/samples&lt;/li&gt; &#xA; &lt;li&gt;You can now build and run the samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The Box2D library and samples build and run on Windows, Linux, and Mac.&lt;/p&gt; &#xA;&lt;p&gt;Box2D should be built on recent versions of clang and gcc. You will need the latest Visual Studio version for C11 atomics to compile (17.8.3+).&lt;/p&gt; &#xA;&lt;p&gt;AVX2 CPU support is assumed on x64. You can turn this off in the CMake options and use SSE2 instead. There are some compatibility issues with very old CPUs.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://box2d.org/documentation/&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erincatto/box2d/raw/main/docs/migration.md&#34;&gt;Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/NKYgCBP&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please do not submit pull requests. Instead, please file an issue for bugs or feature requests. For support, please visit the Discord server.&lt;/p&gt; &#xA;&lt;h1&gt;Giving Feedback&lt;/h1&gt; &#xA;&lt;p&gt;Please file an issue or start a chat on discord.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Box2D is developed by Erin Catto and uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Support development of Box2D through &lt;a href=&#34;https://github.com/sponsors/erincatto&#34;&gt;Github Sponsors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ports, wrappers, and bindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EnokViking/Box2DBeef&#34;&gt;https://github.com/EnokViking/Box2DBeef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HolyBlackCat/box2cpp&#34;&gt;https://github.com/HolyBlackCat/box2cpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>riscv-collab/riscv-gnu-toolchain</title>
    <updated>2024-08-18T01:36:04Z</updated>
    <id>tag:github.com,2024-08-18:/riscv-collab/riscv-gnu-toolchain</id>
    <link href="https://github.com/riscv-collab/riscv-gnu-toolchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU toolchain for RISC-V, including GCC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V GNU Compiler Toolchain&lt;/h1&gt; &#xA;&lt;p&gt;This is the RISC-V C and C++ cross-compiler. It supports two build modes: a generic ELF/Newlib toolchain and a more sophisticated Linux-ELF/glibc toolchain.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the sources&lt;/h3&gt; &#xA;&lt;p&gt;This repository uses submodules, but submodules will fetch automatically on demand, so &lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; is not needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/riscv/riscv-gnu-toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: git clone takes around 6.65 GB of disk and download size&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Several standard packages are needed to build the toolchain.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install autoconf automake autotools-dev curl python3 python3-pip libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev libslirp-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora/CentOS/RHEL OS, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install autoconf automake python3 libmpc-devel mpfr-devel gmp-devel gawk  bison flex texinfo patchutils gcc gcc-c++ zlib-devel expat-devel libslirp-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syyu autoconf automake curl python3 libmpc mpfr gmp gawk base-devel bison flex texinfo gperf libtool patchutils bc zlib expat libslirp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also available for Arch users on the AUR: &lt;a href=&#34;https://aur.archlinux.org/packages/riscv-gnu-toolchain-bin&#34;&gt;https://aur.archlinux.org/packages/riscv-gnu-toolchain-bin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On OS X, you can use &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install python3 gawk gnu-sed gmp mpfr libmpc isl zlib expat texinfo flock libslirp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the glibc (Linux) on OS X, you will need to build within a case-sensitive file system. The simplest approach is to create and mount a new disk image with a case sensitive format. Make sure that the mount point does not contain spaces. This is not necessary to build newlib or gcc itself on OS X.&lt;/p&gt; &#xA;&lt;p&gt;This process will start by downloading about 200 MiB of upstream sources, then will patch, build, and install the toolchain. If a local cache of the upstream sources exists in $(DISTDIR), it will be used; the default location is /var/cache/distfiles. Your computer will need about 8 GiB of disk space to complete the process.&lt;/p&gt; &#xA;&lt;h3&gt;Installation (Newlib)&lt;/h3&gt; &#xA;&lt;p&gt;To build the Newlib cross-compiler, pick an install path (that is writeable). If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Then, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now be able to use riscv64-unknown-elf-gcc and its cousins.&lt;/p&gt; &#xA;&lt;p&gt;Note: If you&#39;re planning to use an external library that replaces part of newlib (for example &lt;code&gt;libgloss-htif&lt;/code&gt;), &lt;a href=&#34;https://raw.githubusercontent.com/riscv-collab/riscv-gnu-toolchain/master/#ensuring-code-model-consistency&#34;&gt;read the FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation (Linux)&lt;/h3&gt; &#xA;&lt;p&gt;To build the Linux cross-compiler, pick an install path (that is writeable). If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Then, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv&#xA;make linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build defaults to targeting RV64GC (64-bit) with glibc, even on a 32-bit build environment. To build the 32-bit RV32GC toolchain, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --with-arch=rv32gc --with-abi=ilp32d&#xA;make linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you prefer musl libc over glibc, configure just like above and opt for &lt;code&gt;make musl&lt;/code&gt; instead of &lt;code&gt;make linux&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported architectures are rv32i or rv64i plus standard extensions (a)tomics, (m)ultiplication and division, (f)loat, (d)ouble, or (g)eneral for MAFD.&lt;/p&gt; &#xA;&lt;p&gt;Supported ABIs are ilp32 (32-bit soft-float), ilp32d (32-bit hard-float), ilp32f (32-bit with single-precision in registers and double in memory, niche use only), lp64 lp64f lp64d (same but with 64-bit long and pointers).&lt;/p&gt; &#xA;&lt;h3&gt;Installation (Newlib/Linux multilib)&lt;/h3&gt; &#xA;&lt;p&gt;To build either cross-compiler with support for both 32-bit and 64-bit, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --enable-multilib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then either &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;make linux&lt;/code&gt; or &lt;code&gt;make musl&lt;/code&gt; for the Newlib, Linux glibc-based or Linux musl libc-based cross-compiler, respectively.&lt;/p&gt; &#xA;&lt;p&gt;The multilib compiler will have the prefix riscv64-unknown-elf- or riscv64-unknown-linux-gnu- but will be able to target both 32-bit and 64-bit systems. It will support the most common &lt;code&gt;-march&lt;/code&gt;/&lt;code&gt;-mabi&lt;/code&gt; options, which can be seen by using the &lt;code&gt;--print-multi-lib&lt;/code&gt; flag on either cross-compiler.&lt;/p&gt; &#xA;&lt;p&gt;The musl compiler (riscv64-unknown-linux-musl-) will only be able to target 64-bit systems due to limitations in the upstream musl architecture support. The &lt;code&gt;--enable-multilib&lt;/code&gt; flag therefore does not actually enable multilib support for musl libc.&lt;/p&gt; &#xA;&lt;p&gt;Linux toolchain has an additional option &lt;code&gt;--enable-default-pie&lt;/code&gt; to control the default PIE enablement for GCC, which is disable by default.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting Build Problems&lt;/h3&gt; &#xA;&lt;p&gt;Builds work best if installing into an empty directory. If you build a hard-float toolchain and then try to build a soft-float toolchain with the same --prefix directory, then the build scripts may get confused and exit with a linker error complaining that hard float code can&#39;t be linked with soft float code. Removing the existing toolchain first, or using a different prefix for the second build, avoids the problem. It is OK to build one newlib and one linux toolchain with the same prefix. But you should avoid building two newlib or two linux toolchains with the same prefix.&lt;/p&gt; &#xA;&lt;p&gt;If building a linux toolchain on a MacOS system, or on a Windows system using the Linux subsystem or cygwin, you must ensure that the filesystem is case-sensitive. A build on a case-insensitive filesystem will fail when building glibc because *.os and *.oS files will clobber each other during the build eventually resulting in confusing link errors.&lt;/p&gt; &#xA;&lt;p&gt;Centos (and RHEL) provide old GNU tools versions that may be too old to build a RISC-V toolchain. There is an alternate toolset provided that includes current versions of the GNU tools. This is the devtoolset provided as part of the Software Collection service. For more info, see the &lt;a href=&#34;https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/&#34;&gt;devtoolset-7&lt;/a&gt; URL. There are various versions of the devtoolset that are available, so you can also try other versions of it, but we have at least one report that devtoolset-7 works.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Options&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of additional options that may be passed to configure. See &#39;./configure --help&#39; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Also you can define extra flags to pass to specific projects: &lt;code&gt;BINUTILS_NATIVE_FLAGS_EXTRA, BINUTILS_TARGET_FLAGS_EXTRA, GCC_EXTRA_CONFIGURE_FLAGS, GDB_NATIVE_FLAGS_EXTRA, GDB_TARGET_FLAGS_EXTRA, GLIBC_TARGET_FLAGS_EXTRA, NEWLIB_TARGET_FLAGS_EXTRA&lt;/code&gt;. Example: &lt;code&gt;GCC_EXTRA_CONFIGURE_FLAGS=--with-gmp=/opt/gmp make linux&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Set default ISA spec version&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-isa-spec=&lt;/code&gt; can specify the default version of the RISC-V Unprivileged (formerly User-Level) ISA specification.&lt;/p&gt; &#xA;&lt;p&gt;Possible options are: &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;20190608&lt;/code&gt; and &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default version is &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More details about this option you can refer this post &lt;a href=&#34;https://groups.google.com/a/groups.riscv.org/g/sw-dev/c/aE1ZeHHCYf4&#34;&gt;RISC-V GNU toolchain bumping default ISA spec to 20191213&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Build with customized multi-lib configure.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-multilib-generator=&lt;/code&gt; can specify what multilibs to build. The argument is a semicolon separated list of values, possibly consisting of a single value. Currently only supported for riscv*-&lt;em&gt;-elf&lt;/em&gt;. The accepted values and meanings are given below.&lt;/p&gt; &#xA;&lt;p&gt;Every config is constructed with four components: architecture string, ABI, reuse rule with architecture string and reuse rule with sub-extension.&lt;/p&gt; &#xA;&lt;p&gt;Re-use part support expansion operator (*) to simplify the combination of different sub-extensions, example 4 demonstrate how it uses and works.&lt;/p&gt; &#xA;&lt;p&gt;Example 1: Add multi-lib support for rv32i with ilp32.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv32i-ilp32--&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 2: Add multi-lib support for rv32i with ilp32 and rv32imafd with ilp32.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv32i-ilp32--;rv32imafd-ilp32--&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 3: Add multi-lib support for rv32i with ilp32; rv32im with ilp32 and rv32ic with ilp32 will reuse this multi-lib set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv32i-ilp32-rv32im-c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 4: Add multi-lib support for rv64ima with lp64; rv64imaf with lp64, rv64imac with lp64 and rv64imafc with lp64 will reuse this multi-lib set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv64ima-lp64--f*c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test Suite&lt;/h3&gt; &#xA;&lt;p&gt;The Dejagnu test suite has been ported to RISC-V. This can be run with a simulator for the elf and linux toolchains. The simulator can be selected by the SIM variable in the Makefile, e.g. SIM=qemu, SIM=gdb, or SIM=spike (experimental).In addition, the simulator can also be selected with the configure time option &lt;code&gt;--with-sim=&lt;/code&gt;.However, the testsuite allowlist is only mintained for qemu.Other simulators might get extra failures.&lt;/p&gt; &#xA;&lt;h4&gt;Additional Prerequisite&lt;/h4&gt; &#xA;&lt;p&gt;A helper script to setup testing environment requires &lt;a href=&#34;https://github.com/eliben/pyelftools&#34;&gt;pyelftools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On newer versions of Ubuntu, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python3-pyelftools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On newer versions of Fedora and CentOS/RHEL OS (9 or later), executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install python3-pyelftools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syyu python-pyelftools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your distribution/OS does not have pyelftools package, you can install it using PIP.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Assuming that PIP is installed&#xA;$ pip3 install --user pyelftools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing GCC&lt;/h4&gt; &#xA;&lt;p&gt;To test GCC, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=$RISCV --disable-linux --with-arch=rv64ima # or --with-arch=rv32ima&#xA;make newlib&#xA;make report-newlib SIM=gdb # Run with gdb simulator&#xA;&#xA;./configure --prefix=$RISCV&#xA;make linux&#xA;make report-linux SIM=qemu # Run with qemu&#xA;&#xA;./configure --prefix=$RISCV --with-sim=spike&#xA;make linux&#xA;make report               # Run with spike&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spike only support rv64* bare-metal/elf toolchain.&lt;/li&gt; &#xA; &lt;li&gt;gdb simulator only support bare-metal/elf toolchain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Selecting the tests to run in GCC&#39;s regression test suite&lt;/h4&gt; &#xA;&lt;p&gt;By default GCC will execute all tests of its regression test suite. While running them in parallel (e.g. &lt;code&gt;make -j$(nproc) report&lt;/code&gt;) will significanlty speed up the execution time on multi-processor systems, the required time for executing all tests is usually too high for typical development cycles. Therefore GCC allows to select the tests that are being executed using the environment variable &lt;code&gt;RUNTESTFLAGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To restrict a test run to only RISC-V specific tests the following command can be used:&lt;/p&gt; &#xA;&lt;p&gt;RUNTESTFLAGS=&#34;riscv.exp&#34; make report&lt;/p&gt; &#xA;&lt;p&gt;To restrict a test run to only RISC-V specific tests with match the pattern &#34;zb*.c&#34; and &#34;sm*.c&#34; the following command can be used:&lt;/p&gt; &#xA;&lt;p&gt;RUNTESTFLAGS=&#34;riscv.exp=zb*.c\ sm*.c&#34; make report&lt;/p&gt; &#xA;&lt;h4&gt;Testing GCC, Binutils, and glibc of a Linux toolchain&lt;/h4&gt; &#xA;&lt;p&gt;The default Makefile target to run toolchain tests is &lt;code&gt;report&lt;/code&gt;. This will run all tests of the GCC regression test suite. Alternatively, the following command can be used to do the same:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following command can be used to run the Binutils tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check-binutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command below can be used to run the glibc tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check-glibc-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Adding more arch/abi combination for testing without introducing multilib&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; can be used when you want to test more combination of arch/ABI, for example: built a linux toolchain with multilib with &lt;code&gt;rv64gc/lp64d&lt;/code&gt; and &lt;code&gt;rv64imac/lp64&lt;/code&gt;, but you want to test more configuration like &lt;code&gt;rv64gcv/lp64d&lt;/code&gt; or &lt;code&gt;rv64gcv_zba/lp64d&lt;/code&gt;, then you can use --with-extra-multilib-test to specify that via &lt;code&gt;--with-extra-multilib-test=&#34;rv64gcv-lp64d;rv64gcv_zba-lp64d&#34;&lt;/code&gt;, then the testing will run for &lt;code&gt;rv64gc/lp64d&lt;/code&gt;, &lt;code&gt;rv64imac/lp64&lt;/code&gt;, &lt;code&gt;rv64gcv/lp64d&lt;/code&gt; and &lt;code&gt;rv64gcv_zba/lp64d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; support bare-metal and linux toolchain and support even multilib is disable, but the user must ensure extra multilib test configuration can be work with existing lib/multilib, e.g. rv32gcv/ilp32 test can&#39;t work if multilib didn&#39;t have any rv32 multilib.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; also support more complicated format to fit the requirements of end-users. First of all, the argument is a list of test configurations. Each test configuration are separated by &lt;code&gt;;&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rv64gcv-lp64d;rv64_zvl256b_zvfh-lp64d&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For each test configuration, it has two parts, aka required arch-abi part and optional build flags. We leverage &lt;code&gt;:&lt;/code&gt; to separate them with some restrictions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;arch-abi should be required and there must be only one at the begining of the test configuration.&lt;/li&gt; &#xA; &lt;li&gt;build flags is a array-like flags after the arch-abi, there will be two ways to arrange them, aka AND, OR operation.&lt;/li&gt; &#xA; &lt;li&gt;If you would like the flags in build flags array acts on arch-abi &lt;strong&gt;simultaneously&lt;/strong&gt;, you can use &lt;code&gt;:&lt;/code&gt; to separate them. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic:--param=riscv-autovec-preference=fixed-vlmax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be consider as one target board same as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic/--param=riscv-autovec-preference=fixed-vlmax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you would like the flags in build flags array acts on arch-abi &lt;strong&gt;respectively&lt;/strong&gt;, you can use &#39;,&#39; to separate them. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic,--param=riscv-autovec-preference=fixed-vlmax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be consider as two target boards same as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-preference=fixed-vlmax&#xA;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;However, you can also leverage AND(&lt;code&gt;:&lt;/code&gt;), OR(&lt;code&gt;,&lt;/code&gt;) operator together but the OR(&lt;code&gt;,&lt;/code&gt;) will always have the higher priority. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic:--param=riscv-autovec-preference=fixed-vlmax,--param=riscv-autovec-lmul=m2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be consider as tow target boars same as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic/--param=riscv-autovec-preference=fixed-vlmax&#xA;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=m2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LLVM / clang&lt;/h3&gt; &#xA;&lt;p&gt;LLVM can be used in combination with the RISC-V GNU Compiler Toolchain to build RISC-V applications. To build LLVM with C and C++ support the configure flag &lt;code&gt;--enable-llvm&lt;/code&gt; can be used.&lt;/p&gt; &#xA;&lt;p&gt;E.g. to build LLVM on top of a RV64 Linux toolchain the following commands can be used:&lt;/p&gt; &#xA;&lt;p&gt;./configure --prefix=$RISCV --enable-llvm --enable-linux make&lt;/p&gt; &#xA;&lt;p&gt;Note, that a combination of &lt;code&gt;--enable-llvm&lt;/code&gt; and multilib configuration flags is not supported.&lt;/p&gt; &#xA;&lt;p&gt;Below are examples how to build a rv64gc Linux/newlib toolchain with LLVM support, how to use it to build a C and a C++ application using clang, and how to execute the generated binaries using QEMU.&lt;/p&gt; &#xA;&lt;p&gt;Build Linux toolchain and run examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build rv64gc toolchain with LLVM&#xA;./configure --prefix=$RISCV --enable-llvm --enable-linux --with-arch=rv64gc --with-abi=lp64d&#xA;make -j$(nproc) all build-sim SIM=qemu&#xA;# Build C application with clang&#xA;$RISCV/bin/clang -march=rv64imafdc -o hello_world hello_world.c&#xA;$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world&#xA;# Build C++ application with clang&#xA;$RISCV/bin/clang++ -march=rv64imafdc -stdlib=libc++ -o hello_world_cpp hello_world_cpp.cxx&#xA;$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world_cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build newlib toolchain and run examples (don&#39;t work with &lt;code&gt;--with-multilib-generator=&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build rv64gc bare-metal toolchain with LLVM&#xA;./configure --prefix=$RISCV --enable-llvm --disable-linux --with-arch=rv64gc --with-abi=lp64d&#xA;make -j$(nproc) all build-sim SIM=qemu&#xA;# Build C application with clang&#xA;$RISCV/bin/clang -march=rv64imafdc -o hello_world hello_world.c&#xA;$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world&#xA;# Build C++ application with clang using static link&#xA;$RISCV/bin/clang++ -march=rv64imafdc -static -o hello_world_cpp hello_world_cpp.cxx&#xA;$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world_cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;This section is only for developer or advanced user, or you want to build toolchain with your own source tree.&lt;/p&gt; &#xA;&lt;h4&gt;Update Source Tree&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; contain stable but not latest source for each submodule, in case you want to using latest develoment tree, you can use following command to upgrade all submodule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can upgrade specific submodule only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --remote &amp;lt;component&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, upgrade gcc only, you can using following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --remote gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to Check Which Branch are Used for Specific submodule&lt;/h4&gt; &#xA;&lt;p&gt;The branch info has recorded in &lt;code&gt;.gitmodules&lt;/code&gt; file, which can set or update via &lt;code&gt;git submodule add -b&lt;/code&gt; or &lt;code&gt;git submodule set-branch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However the only way to check which branch are using is to check &lt;code&gt;.gitmodules&lt;/code&gt; file, here is the example for &lt;code&gt;gcc&lt;/code&gt;, it&#39;s using releases/gcc-12 branch, so it will has a section named &lt;code&gt;gcc&lt;/code&gt; and has a field &lt;code&gt;branch&lt;/code&gt; is &lt;code&gt;releases/gcc-12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[submodule &#34;gcc&#34;]&#xA;        path = gcc&#xA;        url = ../gcc.git&#xA;        branch = releases/gcc-12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use Source Tree Other Than &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; also support using out-of-tree source to build toolchain, there is couple configure option to specify the source tree of each submodule/component.&lt;/p&gt; &#xA;&lt;p&gt;For example you have a gcc in &lt;code&gt;$HOME/gcc&lt;/code&gt;, use &lt;code&gt;--with-gcc-src&lt;/code&gt; can specify that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-gcc-src=$HOME/gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the list of configure option for specify source tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--with-binutils-src&#xA;--with-gcc-src&#xA;--with-gdb-src&#xA;--with-glibc-src&#xA;--with-linux-headers-src&#xA;--with-llvm-src&#xA;--with-musl-src&#xA;--with-newlib-src&#xA;--with-pk-src&#xA;--with-qemu-src&#xA;--with-spike-src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build host GCC to check for compiler warnings&lt;/h4&gt; &#xA;&lt;p&gt;GCC contributions have to meet several requirements to qualify for upstream inclusion. Warning free compilation with a compiler build from the same sources is among them. The flag &lt;code&gt;--enable-host-gcc&lt;/code&gt; does exaclty that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initially a host GCC will be built&lt;/li&gt; &#xA; &lt;li&gt;This host GCC is then used to build the cross compiler&lt;/li&gt; &#xA; &lt;li&gt;The cross compiler will be built with &lt;code&gt;-Werror&lt;/code&gt; to identify code issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;Ensuring Code Model Consistency&lt;/h4&gt; &#xA;&lt;p&gt;If parts of newlib are going to be replaced with an external library (such as with &lt;a href=&#34;https://github.com/ucb-bar/libgloss-htif&#34;&gt;libgloss-htif&lt;/a&gt; for Berkeley Host-Target Interface), you should take care to ensure that both newlib and the external library are built using the same code model. For more information about RISC-V code models, &lt;a href=&#34;https://www.sifive.com/blog/all-aboard-part-4-risc-v-code-models&#34;&gt;read this SiFive blog article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Errors that indicate a code model mismatch include &#34;relocation overflow&#34; or &#34;relocation truncated&#34; errors from the linker being unable to successfully relocate symbols in the executable.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; builds newlib with &lt;code&gt;-mcmodel=medlow&lt;/code&gt;. You can use the alternative &lt;code&gt;medany&lt;/code&gt; code model (as used in libgloss-htif) by passing &lt;code&gt;--with-cmodel=medany&lt;/code&gt; to the configure script.&lt;/p&gt;</summary>
  </entry>
</feed>