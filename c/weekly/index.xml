<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:44:35Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>48d31kh413k/1337-Piscine-42</title>
    <updated>2022-09-18T01:44:35Z</updated>
    <id>tag:github.com,2022-09-18:/48d31kh413k/1337-Piscine-42</id>
    <link href="https://github.com/48d31kh413k/1337-Piscine-42" rel="alternate"></link>
    <summary type="html">&lt;p&gt;June Piscine 2021 from 1337 Benguerir 42 Network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;1337&lt;/h1&gt; &#xA;&lt;p&gt;My solutions for the June Piscine 2021. &lt;br&gt; Please open an issue on github if you find anything incorrect.&lt;br&gt; If you have any tips I would like to hear, any feedback is appreciated. Thank you. &lt;br&gt; &lt;code&gt;Don&#39;t Copy, Learn.&lt;/code&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;READ THIS BEFORE YOU PASS THE EXAM &lt;br&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Logging into and setting up an exam&lt;/strong&gt; &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;1-Login with exam / exam at the login screen &lt;br&gt; 2-Open a terminal and type kinit username and your password after the prompt &lt;br&gt; 3-Type examshell in a terminal to begin &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;During the exam&lt;/strong&gt; &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;1-Don&#39;t forget to clean up, comment, remove your testing code execs, and libraries prior to submission &lt;br&gt; 2-Don&#39;t forget to push your code regularly in the rendu/&#xA; &lt;test question&gt;&#xA;   directory to vogsphere before typing grademe and y in the examshell terminal &#xA;  &lt;br&gt; 3-Read through all of the subjects and examples again before final submission &#xA;  &lt;br&gt;&#xA; &lt;/test&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Before Exams&lt;/strong&gt; &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;1- You should Learn Functions Loops Condition Arrays Strings before exam 00 &lt;br&gt; 2- You should Learn argc &amp;amp; argv &amp;amp; malloc and free before exam01/exam02 &lt;br&gt; 3- You Should Learn Makefile Library Header Pointers-Functions before final exam &lt;br&gt; &lt;strong&gt;You need 25 points to validate any exam&lt;/strong&gt; &lt;br&gt; &lt;strong&gt;You need 50 points to validate the days except rushes and bsq and C09 and C10 which it need 100%&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Piscine tips &lt;br&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week1:&lt;/strong&gt; Shell00, Shell01, C00, C01 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-don&#39;t waste your time on shell01 project, you must learn language C and work on C00 and C01, because the exam is on c Language. &lt;br&gt; -validate Shell01 on weekend and work on this rush because is so easy. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week2:&lt;/strong&gt; C02, C03, C04, C06 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-it&#39;s better to validate C06 before C05, because the exam01 is on argc &amp;amp; argv. &lt;br&gt; -Dont waste your time on rush01, it&#39;s better to work on your days and prepare for exam on weekends and know your mistakes that you made on the previous exams. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week3:&lt;/strong&gt; C05, C07, C08, C09 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-try to improve your code skills and your algorithms. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week4:&lt;/strong&gt; C11 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-don&#39;t waste your time on rush02 and BSQ and C10, it&#39;s better to validate the previous days with 100% and prepare for the final exam. &lt;br&gt; for more tips: &lt;a href=&#34;https://www.42.us.org/top-21-tips-surviving-42-piscine-basic-training/&#34;&gt;https://www.42.us.org/top-21-tips-surviving-42-piscine-basic-training/&lt;/a&gt; &lt;br&gt; &lt;code&gt;SLEEP WELL + EAT WELL = LIVE WELL + SUCCESS&lt;/code&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Content&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Projects&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Solutions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shell00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/Shell00&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shell01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/Shell01&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C00&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C01&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C02&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C03&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C04&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C05&#34;&gt;80%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C06&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C07&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C08&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C09&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C10&#34;&gt;not rated&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C11&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C12&#34;&gt;not rated&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C13&#34;&gt;not rated&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM01&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM00&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM02&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM03&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rush01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rush00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/Rush00&#34;&gt;120%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rush02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BSQ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;Enjoy coding and GOOD LUCK in your piscine.&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Palakis/obs-ndi</title>
    <updated>2022-09-18T01:44:35Z</updated>
    <id>tag:github.com,2022-09-18:/Palakis/obs-ndi</id>
    <link href="https://github.com/Palakis/obs-ndi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NewTek NDI integration for OBS Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;obs-ndi&lt;/h1&gt; &#xA;&lt;h2&gt;YOU HAVE STUMBLED UPON THE DEV BRANCH FOR V5.0.0&lt;/h2&gt; &#xA;&lt;p&gt;Network A/V in OBS Studio with NewTek&#39;s NDI (5.0) technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/LePalakis&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&amp;amp;label=Follow%20%40LePalakis&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/obs-websocket&#34;&gt;&lt;img src=&#34;https://opencollective.com/obs-websocket/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NDI Input (Source)&lt;/strong&gt;: Receive NDI video and audio in OBS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NDI Output&lt;/strong&gt;: Transmit video and audio from OBS via NDI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NDI Filter&lt;/strong&gt; (a.k.a NDI Dedicated Output): Transmit a single input (source) or scene via NDI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Binaries for Windows, macOS and Linux are available in the &lt;a href=&#34;https://github.com/Palakis/obs-ndi/releases&#34;&gt;Releases&lt;/a&gt; section.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>floooh/sokol</title>
    <updated>2022-09-18T01:44:35Z</updated>
    <id>tag:github.com,2022-09-18:/floooh/sokol</id>
    <link href="https://github.com/floooh/sokol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;minimal cross-platform standalone C headers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sokol&lt;/h1&gt; &#xA;&lt;p&gt;Simple &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/stb_howto.txt&#34;&gt;STB-style&lt;/a&gt; cross-platform libraries for C and C++, written in C.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/CHANGELOG.md&#34;&gt;&lt;strong&gt;See what&#39;s new&lt;/strong&gt;&lt;/a&gt; (&lt;strong&gt;10-Sep-2022&lt;/strong&gt; an important compatibility fix for Emscripten 3.21 in sokol_app.h and sokol_args.h)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/gen_bindings.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/gen_bindings.yml/badge.svg?sanitize=true&#34; alt=&#34;Bindings&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-zig/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-zig/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-nim/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-nim/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-odin/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-odin/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Odin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/sokol-html5/index.html&#34;&gt;Live Samples&lt;/a&gt; via WASM (&lt;a href=&#34;https://github.com/floooh/sokol-samples&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/doom-sokol/&#34;&gt;Doom Shareware&lt;/a&gt; ported to the Sokol headers (&lt;a href=&#34;https://github.com/floooh/doom-sokol&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/edubart/sokol_gp&#34;&gt;sokol_gp.h&lt;/a&gt; a 2D shape drawing library on top of sokol_gfx.h&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.geertarien.com/learnopengl-examples-html5/&#34;&gt;LearnOpenGL examples ported to sokol-gfx&lt;/a&gt; by @geertarien (cool stuff!)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/cimgui-sokol-starterkit&#34;&gt;Dear ImGui starterkit&lt;/a&gt; a self-contained starterkit for writing Dear ImGui apps in C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/qoiview&#34;&gt;qoiview&lt;/a&gt; a basic viewer for the new QOI image file format&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/tiny8bit/&#34;&gt;Tiny 8-bit emulators&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &#39;single-file&#39; &lt;a href=&#34;https://github.com/floooh/pacman.c/&#34;&gt;Pacman clone in C99&lt;/a&gt;, also available in &lt;a href=&#34;https://github.com/floooh/pacman.zig/&#34;&gt;Zig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://mgerdes.github.io/minigolf.html&#34;&gt;Minigolf game&lt;/a&gt; (&lt;a href=&#34;https://github.com/mgerdes/minigolf&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dealers-dungeon.com/demo/&#34;&gt;&#39;Dealer&#39;s Dungeon&#39;&lt;/a&gt; (&lt;a href=&#34;https://dealers-dungeon.com/demo/?q=3&#34;&gt;lower graphics quality&lt;/a&gt;, &lt;a href=&#34;https://github.com/bqqbarbhg/spear&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol-tools&#34;&gt;Command line tools&lt;/a&gt; (shader compiler)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol-samples#how-to-build-without-a-build-system&#34;&gt;How to build without a build system&lt;/a&gt;: useful details for integrating the Sokol headers into your own project with your favourite C/C++ build system&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_gfx.h&#34;&gt;&lt;strong&gt;sokol_gfx.h&lt;/strong&gt;&lt;/a&gt;: 3D-API wrapper (GL + Metal + D3D11)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_app.h&#34;&gt;&lt;strong&gt;sokol_app.h&lt;/strong&gt;&lt;/a&gt;: app framework wrapper (entry + window + 3D-context + input)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_time.h&#34;&gt;&lt;strong&gt;sokol_time.h&lt;/strong&gt;&lt;/a&gt;: time measurement&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_audio.h&#34;&gt;&lt;strong&gt;sokol_audio.h&lt;/strong&gt;&lt;/a&gt;: minimal buffer-streaming audio playback&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_fetch.h&#34;&gt;&lt;strong&gt;sokol_fetch.h&lt;/strong&gt;&lt;/a&gt;: asynchronous data streaming from HTTP and local filesystem&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_args.h&#34;&gt;&lt;strong&gt;sokol_args.h&lt;/strong&gt;&lt;/a&gt;: unified cmdline/URL arg parser for web and native apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Utility libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_imgui.h&#34;&gt;&lt;strong&gt;sokol_imgui.h&lt;/strong&gt;&lt;/a&gt;: sokol_gfx.h rendering backend for &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_nuklear.h&#34;&gt;&lt;strong&gt;sokol_nuklear.h&lt;/strong&gt;&lt;/a&gt;: sokol_gfx.h rendering backend for &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear&#34;&gt;Nuklear&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_gl.h&#34;&gt;&lt;strong&gt;sokol_gl.h&lt;/strong&gt;&lt;/a&gt;: OpenGL 1.x style immediate-mode rendering API on top of sokol_gfx.h&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_fontstash.h&#34;&gt;&lt;strong&gt;sokol_fontstash.h&lt;/strong&gt;&lt;/a&gt;: sokol_gl.h rendering backend for &lt;a href=&#34;https://github.com/memononen/fontstash&#34;&gt;fontstash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_gfx_imgui.h&#34;&gt;&lt;strong&gt;sokol_gfx_imgui.h&lt;/strong&gt;&lt;/a&gt;: debug-inspection UI for sokol_gfx.h (implemented with Dear ImGui)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_debugtext.h&#34;&gt;&lt;strong&gt;sokol_debugtext.h&lt;/strong&gt;&lt;/a&gt;: a simple text renderer using vintage home computer fonts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_memtrack.h&#34;&gt;&lt;strong&gt;sokol_memtrack.h&lt;/strong&gt;&lt;/a&gt;: easily track memory allocations in sokol headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_shape.h&#34;&gt;&lt;strong&gt;sokol_shape.h&lt;/strong&gt;&lt;/a&gt;: generate simple shapes and plug them into sokol-gfx resource creation structs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_color.h&#34;&gt;&lt;strong&gt;sokol_color.h&lt;/strong&gt;&lt;/a&gt;: X11 style color constants and functions for creating sg_color objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&#39;Official&#39; Language Bindings&lt;/h2&gt; &#xA;&lt;p&gt;These are automatically updated on changes to the C headers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-zig&#34;&gt;sokol-zig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-odin&#34;&gt;sokol-odin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-nim&#34;&gt;sokol-nim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;WebAssembly is a &#39;first-class citizen&#39;, one important motivation for the Sokol headers is to provide a collection of cross-platform APIs with a minimal footprint on the web platform while still being useful.&lt;/p&gt; &#xA;&lt;p&gt;The core headers are standalone and can be used independently from each other.&lt;/p&gt; &#xA;&lt;h3&gt;Why C:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;easier integration with other languages&lt;/li&gt; &#xA; &lt;li&gt;easier integration into other projects&lt;/li&gt; &#xA; &lt;li&gt;adds only minimal size overhead to executables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A blog post with more background info: &lt;a href=&#34;http://floooh.github.io/2017/07/29/sokol-gfx-tour.html&#34;&gt;A Tour of sokol_gfx.h&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;sokol_gfx.h:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple, modern wrapper around GLES2/WebGL, GLES3/WebGL2, GL3.3, D3D11 and Metal&lt;/li&gt; &#xA; &lt;li&gt;buffers, images, shaders, pipeline-state-objects and render-passes&lt;/li&gt; &#xA; &lt;li&gt;does &lt;em&gt;not&lt;/em&gt; handle window creation or 3D API context initialization&lt;/li&gt; &#xA; &lt;li&gt;does &lt;em&gt;not&lt;/em&gt; provide shader dialect cross-translation (&lt;strong&gt;BUT&lt;/strong&gt; there&#39;s now an &#39;official&#39; shader-cross-compiler solution which seamlessly integrates with sokol_gfx.h and IDEs: &lt;a href=&#34;https://github.com/floooh/sokol-tools/raw/master/docs/sokol-shdc.md&#34;&gt;see here for details&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A triangle in C99 with GLFW:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define SOKOL_IMPL&#xA;#define SOKOL_GLCORE33&#xA;#include &#34;sokol_gfx.h&#34;&#xA;#define GLFW_INCLUDE_NONE&#xA;#include &#34;GLFW/glfw3.h&#34;&#xA;&#xA;int main() {&#xA;&#xA;    /* create window and GL context via GLFW */&#xA;    glfwInit();&#xA;    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);&#xA;    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);&#xA;    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);&#xA;    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);&#xA;    GLFWwindow* w = glfwCreateWindow(640, 480, &#34;Sokol Triangle GLFW&#34;, 0, 0);&#xA;    glfwMakeContextCurrent(w);&#xA;    glfwSwapInterval(1);&#xA;&#xA;    /* setup sokol_gfx */&#xA;    sg_setup(&amp;amp;(sg_desc){0});&#xA;&#xA;    /* a vertex buffer */&#xA;    const float vertices[] = {&#xA;        // positions            // colors&#xA;         0.0f,  0.5f, 0.5f,     1.0f, 0.0f, 0.0f, 1.0f,&#xA;         0.5f, -0.5f, 0.5f,     0.0f, 1.0f, 0.0f, 1.0f,&#xA;        -0.5f, -0.5f, 0.5f,     0.0f, 0.0f, 1.0f, 1.0f&#xA;    };&#xA;    sg_buffer vbuf = sg_make_buffer(&amp;amp;(sg_buffer_desc){&#xA;        .data = SG_RANGE(vertices)&#xA;    });&#xA;&#xA;    /* a shader */&#xA;    sg_shader shd = sg_make_shader(&amp;amp;(sg_shader_desc){&#xA;        .vs.source =&#xA;            &#34;#version 330\n&#34;&#xA;            &#34;layout(location=0) in vec4 position;\n&#34;&#xA;            &#34;layout(location=1) in vec4 color0;\n&#34;&#xA;            &#34;out vec4 color;\n&#34;&#xA;            &#34;void main() {\n&#34;&#xA;            &#34;  gl_Position = position;\n&#34;&#xA;            &#34;  color = color0;\n&#34;&#xA;            &#34;}\n&#34;,&#xA;        .fs.source =&#xA;            &#34;#version 330\n&#34;&#xA;            &#34;in vec4 color;\n&#34;&#xA;            &#34;out vec4 frag_color;\n&#34;&#xA;            &#34;void main() {\n&#34;&#xA;            &#34;  frag_color = color;\n&#34;&#xA;            &#34;}\n&#34;&#xA;    });&#xA;&#xA;    /* a pipeline state object (default render states are fine for triangle) */&#xA;    sg_pipeline pip = sg_make_pipeline(&amp;amp;(sg_pipeline_desc){&#xA;        .shader = shd,&#xA;        .layout = {&#xA;            .attrs = {&#xA;                [0].format=SG_VERTEXFORMAT_FLOAT3,&#xA;                [1].format=SG_VERTEXFORMAT_FLOAT4&#xA;            }&#xA;        }&#xA;    });&#xA;&#xA;    /* resource bindings */&#xA;    sg_bindings bind = {&#xA;        .vertex_buffers[0] = vbuf&#xA;    };&#xA;&#xA;    /* default pass action (clear to grey) */&#xA;    sg_pass_action pass_action = {0};&#xA;&#xA;    /* draw loop */&#xA;    while (!glfwWindowShouldClose(w)) {&#xA;        int cur_width, cur_height;&#xA;        glfwGetFramebufferSize(w, &amp;amp;cur_width, &amp;amp;cur_height);&#xA;        sg_begin_default_pass(&amp;amp;pass_action, cur_width, cur_height);&#xA;        sg_apply_pipeline(pip);&#xA;        sg_apply_bindings(&amp;amp;bind);&#xA;        sg_draw(0, 3, 1);&#xA;        sg_end_pass();&#xA;        sg_commit();&#xA;        glfwSwapBuffers(w);&#xA;        glfwPollEvents();&#xA;    }&#xA;&#xA;    /* cleanup */&#xA;    sg_shutdown();&#xA;    glfwTerminate();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_app.h&lt;/h1&gt; &#xA;&lt;p&gt;A minimal cross-platform application-wrapper library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;unified application entry&lt;/li&gt; &#xA; &lt;li&gt;single window or canvas for 3D rendering&lt;/li&gt; &#xA; &lt;li&gt;3D context initialization&lt;/li&gt; &#xA; &lt;li&gt;event-based keyboard, mouse and touch input&lt;/li&gt; &#xA; &lt;li&gt;supported platforms: Win32, MacOS, Linux (X11), iOS, WASM, Android, UWP&lt;/li&gt; &#xA; &lt;li&gt;supported 3D-APIs: GL3.3 (GLX/WGL), Metal, D3D11, GLES2/WebGL, GLES3/WebGL2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple clear-loop sample using sokol_app.h and sokol_gfx.h (does not include separate sokol.c/.m implementation file which is necessary to split the Objective-C code from the C code of the sample):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_gfx.h&#34;&#xA;#include &#34;sokol_app.h&#34;&#xA;#include &#34;sokol_glue.h&#34;&#xA;&#xA;sg_pass_action pass_action;&#xA;&#xA;void init(void) {&#xA;    sg_setup(&amp;amp;(sg_desc){&#xA;        .context = sapp_sgcontext()&#xA;    });&#xA;    pass_action = (sg_pass_action) {&#xA;        .colors[0] = { .action=SG_ACTION_CLEAR, .value={1.0f, 0.0f, 0.0f, 1.0f} }&#xA;    };&#xA;}&#xA;&#xA;void frame(void) {&#xA;    float g = pass_action.colors[0].value.g + 0.01f;&#xA;    pass_action.colors[0].value.g = (g &amp;gt; 1.0f) ? 0.0f : g;&#xA;    sg_begin_default_pass(&amp;amp;pass_action, sapp_width(), sapp_height());&#xA;    sg_end_pass();&#xA;    sg_commit();&#xA;}&#xA;&#xA;void cleanup(void) {&#xA;    sg_shutdown();&#xA;}&#xA;&#xA;sapp_desc sokol_main(int argc, char* argv[]) {&#xA;    return (sapp_desc){&#xA;        .init_cb = init,&#xA;        .frame_cb = frame,&#xA;        .cleanup_cb = cleanup,&#xA;        .width = 400,&#xA;        .height = 300,&#xA;        .window_title = &#34;Clear Sample&#34;,&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_audio.h&lt;/h1&gt; &#xA;&lt;p&gt;A minimal audio-streaming API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you provide a mono- or stereo-stream of 32-bit float samples which sokol_audio.h forwards into platform-specific backends&lt;/li&gt; &#xA; &lt;li&gt;two ways to provide the data: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;directly fill backend audio buffer from your callback function running in the audio thread&lt;/li&gt; &#xA;   &lt;li&gt;alternatively push small packets of audio data from your main loop, or a separate thread created by you&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;platform backends: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: WASAPI&lt;/li&gt; &#xA;   &lt;li&gt;macOS/iOS: CoreAudio&lt;/li&gt; &#xA;   &lt;li&gt;Linux: ALSA&lt;/li&gt; &#xA;   &lt;li&gt;emscripten: WebAudio + ScriptProcessorNode (doesn&#39;t use the emscripten-provided OpenAL or SDL Audio wrappers)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple mono square-wave generator using the callback model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// the sample callback, running in audio thread&#xA;static void stream_cb(float* buffer, int num_frames, int num_channels) {&#xA;    assert(1 == num_channels);&#xA;    static uint32_t count = 0;&#xA;    for (int i = 0; i &amp;lt; num_frames; i++) {&#xA;        buffer[i] = (count++ &amp;amp; (1&amp;lt;&amp;lt;3)) ? 0.5f : -0.5f;&#xA;    }&#xA;}&#xA;&#xA;int main() {&#xA;    // init sokol-audio with default params&#xA;    saudio_setup(&amp;amp;(saudio_desc){&#xA;        .stream_cb = stream_cb&#xA;    });&#xA;&#xA;    // run main loop&#xA;    ...&#xA;&#xA;    // shutdown sokol-audio&#xA;    saudio_shutdown();&#xA;    return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same code using the push-model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define BUF_SIZE (32)&#xA;int main() {&#xA;    // init sokol-audio with default params, no callback&#xA;    saudio_setup(&amp;amp;(saudio_desc){0});&#xA;    assert(saudio_channels() == 1);&#xA;&#xA;    // a small intermediate buffer so we don&#39;t need to push&#xA;    // individual samples, which would be quite inefficient&#xA;    float buf[BUF_SIZE];&#xA;    int buf_pos = 0;&#xA;    uint32_t count = 0;&#xA;&#xA;    // push samples from main loop&#xA;    bool done = false;&#xA;    while (!done) {&#xA;        // generate and push audio samples...&#xA;        int num_frames = saudio_expect();&#xA;        for (int i = 0; i &amp;lt; num_frames; i++) {&#xA;            // simple square wave generator&#xA;            buf[buf_pos++] = (count++ &amp;amp; (1&amp;lt;&amp;lt;3)) ? 0.5f : -0.5f;&#xA;            if (buf_pos == BUF_SIZE) {&#xA;                buf_pos = 0;&#xA;                saudio_push(buf, BUF_SIZE);&#xA;            }&#xA;        }&#xA;        // handle other per-frame stuff...&#xA;        ...&#xA;    }&#xA;&#xA;    // shutdown sokol-audio&#xA;    saudio_shutdown();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_fetch.h&lt;/h1&gt; &#xA;&lt;p&gt;Load entire files, or stream data asynchronously over HTTP (emscripten/wasm) or the local filesystem (all native platforms).&lt;/p&gt; &#xA;&lt;p&gt;Simple C99 example loading a file into a static buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_fetch.h&#34;&#xA;&#xA;static void response_callback(const sfetch_response*);&#xA;&#xA;#define MAX_FILE_SIZE (1024*1024)&#xA;static uint8_t buffer[MAX_FILE_SIZE];&#xA;&#xA;// application init&#xA;static void init(void) {&#xA;    ...&#xA;    // setup sokol-fetch with default config:&#xA;    sfetch_setup(&amp;amp;(sfetch_desc_t){0});&#xA;&#xA;    // start loading a file into a statically allocated buffer:&#xA;    sfetch_send(&amp;amp;(sfetch_request_t){&#xA;        .path = &#34;hello_world.txt&#34;,&#xA;        .callback = response_callback&#xA;        .buffer_ptr = buffer,&#xA;        .buffer_size = sizeof(buffer)&#xA;    });&#xA;}&#xA;&#xA;// per frame...&#xA;static void frame(void) {&#xA;    ...&#xA;    // need to call sfetch_dowork() once per frame to &#39;turn the gears&#39;:&#xA;    sfetch_dowork();&#xA;    ...&#xA;}&#xA;&#xA;// the response callback is where the interesting stuff happens:&#xA;static void response_callback(const sfetch_response_t* response) {&#xA;    if (response-&amp;gt;fetched) {&#xA;        // data has been loaded into the provided buffer, do something&#xA;        // with the data...&#xA;        const void* data = response-&amp;gt;buffer_ptr;&#xA;        uint64_t data_size = response-&amp;gt;fetched_size;&#xA;    }&#xA;    // the finished flag is set both on success and failure&#xA;    if (response-&amp;gt;failed) {&#xA;        // oops, something went wrong&#xA;        switch (response-&amp;gt;error_code) {&#xA;            SFETCH_ERROR_FILE_NOT_FOUND: ...&#xA;            SFETCH_ERROR_BUFFER_TOO_SMALL: ...&#xA;            ...&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// application shutdown&#xA;static void shutdown(void) {&#xA;    ...&#xA;    sfetch_shutdown();&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_time.h:&lt;/h1&gt; &#xA;&lt;p&gt;Simple cross-platform time measurement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_time.h&#34;&#xA;...&#xA;/* initialize sokol_time */&#xA;stm_setup();&#xA;&#xA;/* take start timestamp */&#xA;uint64_t start = stm_now();&#xA;&#xA;...some code to measure...&#xA;&#xA;/* compute elapsed time */&#xA;uint64_t elapsed = stm_since(start);&#xA;&#xA;/* convert to time units */&#xA;double seconds = stm_sec(elapsed);&#xA;double milliseconds = stm_ms(elapsed);&#xA;double microseconds = stm_us(elapsed);&#xA;double nanoseconds = stm_ns(elapsed);&#xA;&#xA;/* difference between 2 time stamps */&#xA;uint64_t start = stm_now();&#xA;...&#xA;uint64_t end = stm_now();&#xA;uint64_t elapsed = stm_diff(end, start);&#xA;&#xA;/* compute a &#39;lap time&#39; (e.g. for fps) */&#xA;uint64_t last_time = 0;&#xA;while (!done) {&#xA;    ...render something...&#xA;    double frame_time_ms = stm_ms(stm_laptime(&amp;amp;last_time));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_args.h&lt;/h1&gt; &#xA;&lt;p&gt;Unified argument parsing for web and native apps. Uses argc/argv on native platforms and the URL query string on the web.&lt;/p&gt; &#xA;&lt;p&gt;Example URL with one arg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4&#34;&gt;https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The same as command line app:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;kc85 type=kc85_4&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Parsed like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_args.h&#34;&#xA;&#xA;int main(int argc, char* argv[]) {&#xA;    sargs_setup(&amp;amp;(sargs_desc){ .argc=argc, .argv=argv });&#xA;    if (sargs_exists(&#34;type&#34;)) {&#xA;        if (sargs_equals(&#34;type&#34;, &#34;kc85_4&#34;)) {&#xA;            // start as KC85/4&#xA;        }&#xA;        else if (sargs_equals(&#34;type&#34;, &#34;kc85_3&#34;)) {&#xA;            // start as KC85/3&#xA;        }&#xA;        else {&#xA;            // start as KC85/2&#xA;        }&#xA;    }&#xA;    sargs_shutdown();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the sokol_args.h header for a more complete documentation, and the &lt;a href=&#34;https://floooh.github.io/tiny8bit/&#34;&gt;Tiny Emulators&lt;/a&gt; for more interesting usage examples.&lt;/p&gt;</summary>
  </entry>
</feed>