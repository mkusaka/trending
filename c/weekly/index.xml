<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:46:27Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jakkra/ZSWatch</title>
    <updated>2023-12-24T01:46:27Z</updated>
    <id>tag:github.com,2023-12-24:/jakkra/ZSWatch</id>
    <link href="https://github.com/jakkra/ZSWatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZSWatch - the Open Source Zephyr™ based Smartwatch, including both HW and FW.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;ZSWatch&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%203.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/8XfNBmDfbY&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-blue?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/in_use.jpg&#34; width=&#34;67.5%&#34; object-fit=&#34;cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/v3_case.jpg&#34; width=&#34;31%&#34; object-fit=&#34;cover&#34;&gt; &lt;/p&gt; &#xA; &lt;sub&gt; ZSWatch v4 CNC:ed Stainless Steel (left), Clear Resin 3D print (right) &lt;/sub&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Smartwatch built from scratch, both hardware and software. Built on the &lt;a href=&#34;https://www.zephyrproject.org/&#34;&gt;Zephyr™ Project&lt;/a&gt; RTOS, hence the name &lt;strong&gt;ZSWatch&lt;/strong&gt; - &lt;em&gt;Zephyr Smartwatch&lt;/em&gt;. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;&lt;img title=&#34;Overview&#34; src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/overview.jpg&#34;&gt;&lt;/kbd&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Synced remote control over BLE&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jakkra/ZSWatch/assets/4318648/8d0f40c2-d519-4db1-8634-b43caa502cbe&#34;&gt;https://user-images.githubusercontent.com/64562059/234390129-321d4f35-cb4b-45e8-89d9-20ae292f34fc.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=MmCzV0jV9hs&#34;&gt;&lt;img width=&#34;55%&#34; src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/presentation.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Watch my presentation at Zephyr Developer Summit 2023&lt;/p&gt; &#xA;&lt;h2&gt;Building or getting one&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Head over to the hardware repos &lt;a href=&#34;https://github.com/jakkra/ZSWatch-HW&#34;&gt;https://github.com/jakkra/ZSWatch-HW&lt;/a&gt; and &lt;a href=&#34;https://github.com/jakkra/ZSWatch-Dock&#34;&gt;https://github.com/jakkra/ZSWatch-Dock&lt;/a&gt; for information about ordering the PCBs and assembly from PCBWay.&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/jakkra/ZSWatch/wiki/Case,-3D-printing-and-assembling&#34;&gt;Wiki&lt;/a&gt; for information how to print parts and assemble ZSWatch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some things are still in progress:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work in progress &lt;a href=&#34;https://github.com/jakkra/ZSWatch/wiki/Case,-3D-printing-and-assembling&#34;&gt;building instructions in Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dock casing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;ll also build a few initial kits&lt;/strong&gt; (assembled) for those who don&#39;t want or can build ZSWatch themselves.&lt;br&gt; In addition to assembled ZSWatch and dock you will get the following compared to if you build it yourself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A magnetic dock connector and cable&lt;/strong&gt;. I have got custom ordered cables to fit the needs of ZSWatch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dock with onboard SEGGER J-Link OB debgger&lt;/strong&gt;, which means you won&#39;t need an external debugger for ZSWatch development and flashing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Possibly CNC:ed casing in Stainless steel&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in a kit, or want to get notified when the missing parts above are resolved, fill in your &lt;strong&gt;&lt;a href=&#34;https://forms.gle/G48Sm5zDe9aCaYtT9&#34;&gt;mail here (Google form)&lt;/a&gt;&lt;/strong&gt; and I&#39;ll send a reminder when it&#39;s ready.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or&lt;/strong&gt; if you want to get notified for releases and when the missing parts are finished simply press the &lt;code&gt;Watch&lt;/code&gt; button (next to Fork and Star) -&amp;gt; &lt;code&gt;Custom -&amp;gt; Releases&lt;/code&gt; and you will see in your feed when it&#39;s officially released. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of content ZSWatch&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#building-or-getting-one&#34;&gt;Building or getting one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#hardware-features&#34;&gt;Hardware features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#chargerdock&#34;&gt;Charger/Dock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#enclosurecasing&#34;&gt;Enclosure/Casing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#software-features&#34;&gt;Software Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#features-and-progress&#34;&gt;Features and progress&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#watchfaces&#34;&gt;Watchfaces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#smartphone-communication&#34;&gt;Smartphone communication&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#android-phone-communication&#34;&gt;Android phone communication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#ios-device-communication&#34;&gt;iOS device communication&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#pcb&#34;&gt;PCB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#zswatch-v1-in-action-note-old-not-updated-for-latest-hw-and-sw&#34;&gt;ZSWatch v1 in action (Note old, not updated for latest HW and SW).&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#environment-compiling-and-running-the-code&#34;&gt;Environment, Compiling and running the code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#writing-apps-for-the-application-manager&#34;&gt;Writing apps for the Application Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#other-tools&#34;&gt;Other tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#licence-gpl-30&#34;&gt;Licence GPL-3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#thanks&#34;&gt;Thanks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hardware features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nRF5340 BLE chip (u-blox NORA-B10 module). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;128 MHz Dual core.&lt;/li&gt; &#xA;   &lt;li&gt;512 KB RAM.&lt;/li&gt; &#xA;   &lt;li&gt;1 MB Flash.&lt;/li&gt; &#xA;   &lt;li&gt;30 MHz SPI for display.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buydisplay.com/240x240-round-ips-tft-lcd-display-1-28-inch-capactive-touch-circle-screen&#34;&gt;240x240 round display&lt;/a&gt; with touch screen.&lt;/li&gt; &#xA; &lt;li&gt;IMU &lt;a href=&#34;https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmi270-ds000.pdf&#34;&gt;Bosch BMI270&lt;/a&gt;, with this one it&#39;s possible to do many fancy things such as navigation using gestures and the typical smartwatch wakeup by moving the arm so the display is viewable.&lt;/li&gt; &#xA; &lt;li&gt;Bosch &lt;a href=&#34;https://www.bosch-sensortec.com/products/environmental-sensors/gas-sensors/bme688/&#34;&gt;BME688&lt;/a&gt; Environmental sensor with AI.&lt;/li&gt; &#xA; &lt;li&gt;Bosch &lt;a href=&#34;https://www.bosch-sensortec.com/products/environmental-sensors/pressure-sensors/bmp581/&#34;&gt;BMP581&lt;/a&gt; High performance pressure sensor accuracy in units of ~20cm&#39;s.&lt;/li&gt; &#xA; &lt;li&gt;ST &lt;a href=&#34;https://www.st.com/resource/en/datasheet/lis2mdl.pdf&#34;&gt;LIS2MDLTR&lt;/a&gt; Magnetometer.&lt;/li&gt; &#xA; &lt;li&gt;Renesas &lt;a href=&#34;https://eu.mouser.com/datasheet/2/698/REN_DS_AT25SL128A_109S_032023_DST_20230329-3076025.pdf&#34;&gt;AT25SL128A&lt;/a&gt; 16 MB external flash.&lt;/li&gt; &#xA; &lt;li&gt;Broadcom &lt;a href=&#34;https://docs.broadcom.com/docs/AV02-4755EN&#34;&gt;APDS-9306-065&lt;/a&gt; Light Sensor for automatic brightness control.&lt;/li&gt; &#xA; &lt;li&gt;Option to not mount some sensors to save BOM cost.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Charger/Dock&lt;/h2&gt; &#xA;&lt;p&gt;Option with and without onboard SEGGER J-Link OB debugger.&lt;br&gt; As the debugger requires a license, this will only be availible as part of a kit.&lt;/p&gt; &#xA;&lt;p&gt;See more at &lt;a href=&#34;https://github.com/jakkra/ZSWatch-Dock&#34;&gt;https://github.com/jakkra/ZSWatch-Dock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/dock.jpg&#34; width=&#34;48%&#34; object-fit=&#34;cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/dock_connector.jpg&#34; width=&#34;49%&#34; object-fit=&#34;cover&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Enclosure/Casing&lt;/h2&gt; &#xA;&lt;p&gt;3D printed casing with 3D printed buttons, option CNC:able casing in metal.&lt;/p&gt; &#xA;&lt;h2&gt;Software Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bluetooth LE communications with &lt;a href=&#34;https://codeberg.org/Freeyourgadget/Gadgetbridge&#34;&gt;GadgetBridge&lt;/a&gt; Android app.&lt;/li&gt; &#xA; &lt;li&gt;Also support Bluetooth Direction Finding so the watch can act as a tag and is trackable using any &lt;a href=&#34;https://www.u-blox.com/en/product/ant-b10-antenna-board&#34;&gt;u-blox AoA antenna board&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple Watchfaces showing: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Standard stuff as time, date, battery&lt;/li&gt; &#xA;   &lt;li&gt;Weather&lt;/li&gt; &#xA;   &lt;li&gt;Step count&lt;/li&gt; &#xA;   &lt;li&gt;Number unread notifications&lt;/li&gt; &#xA;   &lt;li&gt;Environmental data&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pop-up notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#writing-apps-for-the-application-manager&#34;&gt;Application picker and app concept&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/settings/&#34;&gt;Setting menu system, with easy extendability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/music_control/&#34;&gt;Music control app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/settings/&#34;&gt;Settings app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/compass/&#34;&gt;Compass app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Step counting&lt;/li&gt; &#xA; &lt;li&gt;Gestures&lt;/li&gt; &#xA; &lt;li&gt;And much more ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features and progress&lt;/h3&gt; &#xA;&lt;p&gt;There are almost endless of posiblities for features that could be implemented, see &lt;a href=&#34;https://github.com/users/jakkra/projects/1&#34;&gt;here for full progress&lt;/a&gt; and in GitHub issues.&lt;/p&gt; &#xA;&lt;h2&gt;Watchfaces&lt;/h2&gt; &#xA;&lt;p&gt;Alternative watch faces can be chosen by selecting one or many of the appropriate Kconfig. &lt;br&gt; Swiping left to right will change the watchface. for something else, and can then be disabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CONFIG_WATCHFACE_ANALOG=n&lt;/code&gt;&lt;br&gt; &lt;code&gt;CONFIG_WATCHFACE_DIGITAL=y&lt;/code&gt;&lt;br&gt; &lt;code&gt;CONFIG_WATCHFACE_MINIMAL=y&lt;/code&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;To select watchface background see below config in prj.conf:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CONFIG_WATCHFACE_BACKGROUND_SPACE=y&lt;/code&gt;&lt;br&gt; &lt;code&gt;CONFIG_WATCHFACE_BACKGROUND_FLOWER=n&lt;/code&gt;&lt;br&gt; &lt;code&gt;CONFIG_WATCHFACE_BACKGROUND_PLANET=n&lt;/code&gt;&lt;br&gt; &lt;code&gt;CONFIG_WATCHFACE_BACKGROUND_NONE=n&lt;/code&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/watchfaces.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Smartphone communication&lt;/h2&gt; &#xA;&lt;h3&gt;Android phone communication&lt;/h3&gt; &#xA;&lt;p&gt;Fortunately there is a great Android app called &lt;a href=&#34;https://codeberg.org/Freeyourgadget&#34;&gt;GadgetBridge&lt;/a&gt; which handles everything needed on the phone side, such as notifications management, music control and so much more... The ZSWatch right now pretends to be one of the supported Smart Watches in Gadgetbridge, following the same API as it does. In future there may be a point adding native support, we&#39;ll see.&lt;/p&gt; &#xA;&lt;h4&gt;Pairing&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the watch go to Settings -&amp;gt; Bluetooth -&amp;gt; Enable pairing&lt;/li&gt; &#xA; &lt;li&gt;Now go reconnect to the watch from Gadgetbridge app.&lt;/li&gt; &#xA; &lt;li&gt;You should now be paired.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iOS device communication&lt;/h3&gt; &#xA;&lt;p&gt;Apple exposes &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/CoreBluetooth/Reference/AppleNotificationCenterServiceSpecification/Specification/Specification.html&#34;&gt;Apple Notification Center Service&lt;/a&gt; GATT server which handles notifications management on the phone side, music control is done in the same fashion using &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/CoreBluetooth/Reference/AppleMediaService_Reference/Specification/Specification.html&#34;&gt;Apple Media Service&lt;/a&gt;... The ZSWatch communicates straight to the iOS with no extra Apps.&lt;/p&gt; &#xA;&lt;h4&gt;Pairing&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the watch go to Settings -&amp;gt; Bluetooth -&amp;gt; Enable pairing&lt;/li&gt; &#xA; &lt;li&gt;Now go to your device settings -&amp;gt; Bluetooth and choose &#34;ZSWatch&#34;&lt;/li&gt; &#xA; &lt;li&gt;You should be prompted to pair and allow share notifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PCB&lt;/h2&gt; &#xA;&lt;p&gt;A 4 layer board which measures 38mm in diameter designed in KiCad.&lt;br&gt; More info here: &lt;a href=&#34;https://github.com/jakkra/ZSWatch-HW&#34;&gt;https://github.com/jakkra/ZSWatch-HW&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/pcb.jpg&#34; width=&#34;83%&#34; object-fit=&#34;cover&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/front_pcb_render.png&#34; width=&#34;43%&#34; object-fit=&#34;cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/back_pcb_render.png&#34; width=&#34;40%&#34; object-fit=&#34;cover&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;ZSWatch v1 in action (Note old, not updated for latest HW and SW).&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Music control&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Accelerometer for step count and tap detection&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/music.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/accel.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Notifications from phone (Gmail here)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/notifications.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/settings.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jakkra/ZSWatch/assets/4318648/8d8ec724-8145-4a30-b241-e69a8c2853bf&#34;&gt;https://github.com/jakkra/ZSWatch/assets/4318648/8d8ec724-8145-4a30-b241-e69a8c2853bf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Environment, Compiling and running the code&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/GETTING_STARTED.md&#34;&gt;GETTING_STARTED.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Writing apps for the Application Manager&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jakkra/ZSWatch/wiki/Apps&#34;&gt;Wiki page about apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://jakkra.github.io/ZSWatch-Web-Dashboard&#34;&gt;https://jakkra.github.io/ZSWatch-Web-Dashboard&lt;/a&gt; to connect and view sensor data in a browser that supports Web Bluetooth &lt;a href=&#34;https://github.com/jakkra/ZSWatch-Web-Dashboard&#34;&gt;(Source code)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licence GPL-3.0&lt;/h2&gt; &#xA;&lt;p&gt;Main difference from MIT is now that if anyone want to build something more with this, then they need to also open source their changes back to the project, which I thinks is fair. This is so everyone can benefit from those improvements. If you think this is wrong for some reason feel free to contact me, I&#39;m open to change the LICENCE.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.segger.com/&#34;&gt;&lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/images/SEGGER-Logo-the-embedded-experts-RGB.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SEGGER for supporting with SEGGER-OB licenses which makes the dock a fully functional programmer and debugger for ZSWatch. Thanks to this the project will be much more approchable for persons without a J-Link debugger, letting them have full development and debugging capabilites.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vedderb/bldc</title>
    <updated>2023-12-24T01:46:27Z</updated>
    <id>tag:github.com,2023-12-24:/vedderb/bldc</id>
    <link href="https://github.com/vedderb/bldc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The VESC motor control firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VESC firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/vedderb/bldc&#34;&gt;&lt;img src=&#34;https://travis-ci.com/vedderb/bldc.svg?branch=master&#34; alt=&#34;Travis CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/vedderb/bldc?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=vedderb/bldc&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/75e90ffbd46841a3a7be2a9f7a94c242&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open source motor controller firmware.&lt;/p&gt; &#xA;&lt;p&gt;This is the source code for the VESC DC/BLDC/FOC controller. Read more at &lt;a href=&#34;https://vesc-project.com/&#34;&gt;https://vesc-project.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported boards&lt;/h2&gt; &#xA;&lt;p&gt;All of them!&lt;/p&gt; &#xA;&lt;p&gt;Check the supported boards by typing &lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Firmware]&#xA;     fw   - Build firmware for default target&#xA;                            supported boards are: 100_250 100_250_no_limits 100_500...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also many other options that can be changed in &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/conf_general.h&#34;&gt;conf_general.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tools: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional Linux requirements: &lt;code&gt;libgl-dev&lt;/code&gt; and &lt;code&gt;libxcb-xinerama0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helpful Ubuntu commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git build-essential libgl-dev libxcb-xinerama0 wget git-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helpful macOS tools:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install stlink&#xA;brew install openocd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chocolately: &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;https://chocolatey.org/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git: &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;https://git-scm.com/download/win&lt;/a&gt;. Make sure to click any boxes to add Git to your Environment (aka PATH)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install Dev environment and build&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Open up a terminal&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up a Windows Powershell terminal (Resist the urge to run Powershell as administrator, that will break things)&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;choco install make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On all platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git checkout origin/master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make arm_sdk_install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; &amp;lt;-- Pick out the name of your target device from the supported boards list. For instance, I have a Trampa &lt;strong&gt;VESC 100/250&lt;/strong&gt;, so my target is &lt;code&gt;100_250&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make 100_250&lt;/code&gt; &amp;lt;-- This will build the &lt;strong&gt;VESC 100/250&lt;/strong&gt; firmware and place it into the &lt;code&gt;bldc/builds/100_250/&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux Optional - Add udev rules to use the stlink v2 programmer without being root&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget vedder.se/Temp/49-stlinkv2.rules&#xA;sudo mv 49-stlinkv2.rules /etc/udev/rules.d/&#xA;sudo udevadm trigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;On macOS/Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python3&lt;/code&gt;, and &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;On Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;. Make sure to click the box to add Python3 to your Environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;All platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install aqtinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make qt_install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Qt Creator IDE installed in &lt;code&gt;tools/Qt/Tools/QtCreator/bin/qtcreator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;With Qt Creator, open the vesc firmware Qt Creator project, named vesc.pro. You will find it in &lt;code&gt;Project/Qt Creator/vesc.pro&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The IDE is configured by default to build 100_250 firmware, this can be changed in the bottom of the left panel, there you will find all hardware variants supported by VESC&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upload to VESC&lt;/h2&gt; &#xA;&lt;h3&gt;Method 1 - Flash it using an STLink SWD debugger&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build and flash the &lt;a href=&#34;https://github.com/vedderb/bldc-bootloader&#34;&gt;bootloader&lt;/a&gt; first&lt;/li&gt; &#xA; &lt;li&gt;Then &lt;code&gt;_flash&lt;/code&gt; to the target of your choice. So for instance, for the VESC 100/250:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make 100_250_flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2 - Upload Firmware via VESC tool through USB&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone and build the firmware in &lt;strong&gt;.bin&lt;/strong&gt; format as in the above Build instructions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In VESC tool&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Connect to the VESC&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the Firmware tab on the left side menu&lt;/li&gt; &#xA; &lt;li&gt;Click on Custom file tab&lt;/li&gt; &#xA; &lt;li&gt;Click on the folder icon to select the built firmware in .bin format (e.g. &lt;code&gt;build/100_250/100_250.bin&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;[ Reminder : It is normal to see VESC disconnects during the firmware upload process ]&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : DO NOT DISCONNECT POWER/USB to VESC during the upload process, or you will risk bricking your VESC ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : ONLY DISCONNECT your VESC 10s after the upload loading bar completed and &#34;FW Upload DONE&#34; ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Press the upload firmware button (downward arrow) on the bottom right to start upload the selected firmware.&lt;/li&gt; &#xA; &lt;li&gt;Wait for &lt;strong&gt;10s&lt;/strong&gt; after the loading bar completed (Warning: unplug sooner will risk bricking your VESC)&lt;/li&gt; &#xA; &lt;li&gt;The VESC will disconnect itself after new firmware is uploaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;In case you bricked your VESC&lt;/h2&gt; &#xA;&lt;p&gt;you will need to upload a new working firmware to the VESC.&lt;br&gt; However, to upload a firmware to a bricked VESC, you have to use a SWD Debugger.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://vesc-project.com/forum&#34;&gt;forums&lt;/a&gt; to get involved and improve this project. Join the &lt;a href=&#34;https://discord.gg/JgvV5NwYts&#34;&gt;Discord&lt;/a&gt; for real-time support and chat&lt;/p&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;Every firmware release has a tag. They are created as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git tag -a [version] [commit] -m &#34;VESC Firmware Version [version]&#34;&#xA;git push --tags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The software is released under the GNU General Public License version 3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>webui-dev/webui</title>
    <updated>2023-12-24T01:46:27Z</updated>
    <id>tag:github.com,2023-12-24:/webui-dev/webui</id>
    <link href="https://github.com/webui-dev/webui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use any web browser as GUI, with your preferred language in the backend and HTML5 in the frontend, all in a lightweight portable lib.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/c92e712f-0698-486a-a460-d4acea28a4f8&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;WebUI v2.4.2&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/webui-dev/webui/ci.yml?branch=main&amp;amp;style=for-the-badge&amp;amp;logo=githubactions&amp;amp;labelColor=414868&amp;amp;logoColor=C0CAF5&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webui-dev/webui/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/webui-dev/webui?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=C0CAF5&amp;amp;labelColor=414868&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webui-dev/webui/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/webui-dev/webui?style=for-the-badge&amp;amp;logo=webtrees&amp;amp;logoColor=C0CAF5&amp;amp;labelColor=414868&amp;amp;color=7664C6&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webui-dev/webui/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/webui-dev/webui?style=for-the-badge&amp;amp;logo=opensourcehardware&amp;amp;label=License&amp;amp;logoColor=C0CAF5&amp;amp;labelColor=414868&amp;amp;color=8c73cc&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;WebUI is not a web-server solution or a framework, but it allows you to use any web browser as a GUI, with your preferred language in the backend and HTML5 in the frontend. All in a lightweight portable lib.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/57992ef1-4f7f-4d60-8045-7b07df4088c6&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/releases&#34;&gt;Latest Stable Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/releases/tag/nightly&#34;&gt;Nightly Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#showcase&#34;&gt;Showcase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#ui--the-web-technologies&#34;&gt;UI &amp;amp; The Web Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#wrappers&#34;&gt;Wrappers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#supported-web-browsers&#34;&gt;Supported Web Browsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable (&lt;em&gt;Needs only a web browser at runtime&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;One header file&lt;/li&gt; &#xA; &lt;li&gt;Lightweight (&lt;em&gt;Few Kb library&lt;/em&gt;) &amp;amp; Small memory footprint&lt;/li&gt; &#xA; &lt;li&gt;Fast binary communication protocol&lt;/li&gt; &#xA; &lt;li&gt;Multi-platform &amp;amp; Multi-Browser&lt;/li&gt; &#xA; &lt;li&gt;Using private profile for safety&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/webui-dev/webui/tree/main/examples/C/text-editor&#34;&gt;text editor&lt;/a&gt; is a lightweight and portable example written in C using WebUI as the GUI library.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/c1ccf29c-806a-4742-bfd7-a3dc30cab70b&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;UI &amp;amp; The Web Technologies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ibob.bg/&#34;&gt;Borislav Stanimirov&lt;/a&gt; discusses using HTML5 in the web browser as GUI at the &lt;a href=&#34;https://www.youtube.com/watch?v=bbbcZd4cuxg&#34;&gt;C++ Conference 2019 (&lt;em&gt;YouTube&lt;/em&gt;)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- &lt;div align=&#34;center&#34;&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=bbbcZd4cuxg&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/bbbcZd4cuxg/0.jpg&#34; alt=&#34;Embrace Modern Technology: Using HTML 5 for GUI in C++ - Borislav Stanimirov - CppCon 2019&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/4e830caa-4ca0-44ff-825f-7cd6d94083c8&#34; alt=&#34;CPPCon&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Web application UI design is not just about how a product looks but how it works. Using web technologies in your UI makes your product modern and professional, And a well-designed web application will help you make a solid first impression on potential customers. Great web application design also assists you in nurturing leads and increasing conversions. In addition, it makes navigating and using your web app easier for your users.&lt;/p&gt; &#xA;&lt;h3&gt;Why Use Web Browsers?&lt;/h3&gt; &#xA;&lt;p&gt;Today&#39;s web browsers have everything a modern UI needs. Web browsers are very sophisticated and optimized. Therefore, using it as a GUI will be an excellent choice. While old legacy GUI lib is complex and outdated, a WebView-based app is still an option. However, a WebView needs a huge SDK to build and many dependencies to run, and it can only provide some features like a real web browser. That is why WebUI uses real web browsers to give you full features of comprehensive web technologies while keeping your software lightweight and portable.&lt;/p&gt; &#xA;&lt;h3&gt;How Does it Work?&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/ttytm/webui/assets/34311583/dbde3573-3161-421e-925c-392a39f45ab3&#34; alt=&#34;Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Think of WebUI like a WebView controller, but instead of embedding the WebView controller in your program, which makes the final program big in size, and non-portable as it needs the WebView runtimes. Instead, by using WebUI, you use a tiny static/dynamic library to run any installed web browser and use it as GUI, which makes your program small, fast, and portable. &lt;strong&gt;All it needs is a web browser&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Runtime Dependencies Comparison&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;WebView&lt;/th&gt; &#xA;   &lt;th&gt;Qt&lt;/th&gt; &#xA;   &lt;th&gt;WebUI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runtime Dependencies on Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;WebView2&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;QtCore, QtGui, QtWidgets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;A Web Browser&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runtime Dependencies on Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;GTK3, WebKitGTK&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;QtCore, QtGui, QtWidgets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;A Web Browser&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runtime Dependencies on macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Cocoa, WebKit&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;QtCore, QtGui, QtWidgets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;A Web Browser&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; We are currently writing documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webui.me/docs/#/c_api&#34;&gt;Online Documentation - C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webui.me/docs/#/cpp_api&#34;&gt;Online Documentation - C++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# GCC&#xA;mingw32-make&#xA;&#xA;# MSVC&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Windows SSL/TLS (&lt;em&gt;Optional&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Download and install the OpenSSL pre-compiled binaries for Windows:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MSVC: &lt;a href=&#34;https://slproweb.com/download/Win64OpenSSL-3_1_3.msi&#34;&gt;x64 OpenSSL v3.1.3&lt;/a&gt; or &lt;a href=&#34;https://slproweb.com/download/Win32OpenSSL-3_1_3.msi&#34;&gt;&lt;em&gt;32Bit&lt;/em&gt;&lt;/a&gt;. Please check this &lt;a href=&#34;https://wiki.openssl.org/index.php/Binaries&#34;&gt;Wiki list&lt;/a&gt; for more info.&lt;/li&gt; &#xA;   &lt;li&gt;MinGW: &lt;a href=&#34;https://curl.se/windows/&#34;&gt;Curl for Windows win OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# GCC&#xA;mingw32-make WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE=&#34;C:\curl-xxx-xxx-mingw\curl-xxx-xxx-mingw\include&#34; WEBUI_TLS_LIB=&#34;C:\curl-xxx-xxx-mingw\curl-xxx-xxx-mingw\lib&#34;&#xA;&#xA;# MSVC&#xA;nmake WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE=&#34;C:\Program Files\OpenSSL-xxx\include&#34; WEBUI_TLS_LIB=&#34;C:\Program Files\OpenSSL-xxx\lib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# GCC&#xA;make&#xA;&#xA;# Clang&#xA;make CC=clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Linux SSL/TLS (&lt;em&gt;Optional&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo apt install libssl-dev&#xA;&#xA;# GCC&#xA;make WEBUI_USE_TLS=1&#xA;&#xA;# Clang&#xA;make WEBUI_USE_TLS=1 CC=clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;macOS SSL/TLS (&lt;em&gt;Optional&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install openssl&#xA;make WEBUI_USE_TLS=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/tree/main/examples/C&#34;&gt;C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/tree/main/examples/C++&#34;&gt;C++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wrappers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/go-webui&#34;&gt;Go-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/nim-webui&#34;&gt;Nim-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pascal&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/pascal-webui&#34;&gt;Pascal-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/python-webui&#34;&gt;Python-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not complete&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/rust-webui&#34;&gt;Rust-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript / JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/deno-webui&#34;&gt;Deno-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/v-webui&#34;&gt;V-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not complete&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/zig-webui&#34;&gt;Zig-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Odin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not complete&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/odin-webui&#34;&gt;Odin-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported Web Browsers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Browser&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mozilla Firefox&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Chrome&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft Edge&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chromium&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yandex&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Brave&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vivaldi&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Epic&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not available&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple Safari&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not available&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not available&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Opera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Licensed under MIT License.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Stargazers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/webui-dev/webui&#34; alt=&#34;Stargazers repo roster for @webui-dev/webui&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>