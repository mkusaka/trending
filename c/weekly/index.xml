<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:51:29Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>djpohly/dwl</title>
    <updated>2023-02-26T01:51:29Z</updated>
    <id>tag:github.com,2023-02-26:/djpohly/dwl</id>
    <link href="https://github.com/djpohly/dwl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dwm for Wayland&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dwl - dwm for Wayland&lt;/h1&gt; &#xA;&lt;p&gt;Join us on our &lt;a href=&#34;https://discord.gg/jJxZnrGPWN&#34;&gt;Discord server&lt;/a&gt; or at &lt;a href=&#34;https://web.libera.chat/?channels=#dwl&#34;&gt;#dwl&lt;/a&gt; on irc.libera.chat.&lt;/p&gt; &#xA;&lt;p&gt;dwl is a compact, hackable compositor for &lt;a href=&#34;https://wayland.freedesktop.org/&#34;&gt;Wayland&lt;/a&gt; based on &lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots/&#34;&gt;wlroots&lt;/a&gt;. It is intended to fill the same space in the Wayland world that dwm does in X11, primarily in terms of philosophy, and secondarily in terms of functionality. Like dwm, dwl is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to understand, hack on, and extend with patches&lt;/li&gt; &#xA; &lt;li&gt;One C source file (or a very small number) configurable via &lt;code&gt;config.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Limited to 2200 SLOC to promote hackability&lt;/li&gt; &#xA; &lt;li&gt;Tied to as few external dependencies as possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;dwl is not meant to provide every feature under the sun. Instead, like dwm, it sticks to features which are necessary, simple, and straightforward to implement given the base on which it is built. Implemented default features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any features provided by dwm/Xlib: simple window borders, tags, keybindings, client rules, mouse move/resize. Providing a built-in status bar is an exception to this goal, to avoid dependencies on font rendering and/or drawing libraries when an external bar could work well.&lt;/li&gt; &#xA; &lt;li&gt;Configurable multi-monitor layout support, including position and rotation&lt;/li&gt; &#xA; &lt;li&gt;Configurable HiDPI/multi-DPI support&lt;/li&gt; &#xA; &lt;li&gt;Idle-inhibit protocol which lets applications such as mpv disable idle monitoring&lt;/li&gt; &#xA; &lt;li&gt;Provide information to external status bars via stdout/stdin&lt;/li&gt; &#xA; &lt;li&gt;Urgency hints via xdg-activate protocol&lt;/li&gt; &#xA; &lt;li&gt;Support screen lockers via input-inhibitor protocol&lt;/li&gt; &#xA; &lt;li&gt;Various Wayland protocols&lt;/li&gt; &#xA; &lt;li&gt;XWayland support as provided by wlroots (can be enabled in &lt;code&gt;config.mk&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Zero flickering - Wayland users naturally expect that &#34;every frame is perfect&#34;&lt;/li&gt; &#xA; &lt;li&gt;Layer shell popups (used by Waybar)&lt;/li&gt; &#xA; &lt;li&gt;Damage tracking provided by scenegraph API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features under consideration (possibly as patches) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protocols made trivial by wlroots&lt;/li&gt; &#xA; &lt;li&gt;Implement the text-input and input-method protocols to support IME once ibus implements input-method v2 (see &lt;a href=&#34;https://github.com/ibus/ibus/pull/2256&#34;&gt;https://github.com/ibus/ibus/pull/2256&lt;/a&gt; and &lt;a href=&#34;https://github.com/djpohly/dwl/pull/235&#34;&gt;https://github.com/djpohly/dwl/pull/235&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feature &lt;em&gt;non-goals&lt;/em&gt; for the main codebase include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client-side decoration (any more than is necessary to tell the clients not to)&lt;/li&gt; &#xA; &lt;li&gt;Client-initiated window management, such as move, resize, and close, which can be done through the compositor&lt;/li&gt; &#xA; &lt;li&gt;Animations and visual effects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building dwl&lt;/h2&gt; &#xA;&lt;p&gt;dwl has only two dependencies: &lt;code&gt;wlroots&lt;/code&gt; and &lt;code&gt;wayland-protocols&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply install these (and their &lt;code&gt;-devel&lt;/code&gt; versions if your distro has separate development packages) and run &lt;code&gt;make&lt;/code&gt;. If you wish to build against a Git version of wlroots, check out the &lt;a href=&#34;https://github.com/djpohly/dwl/tree/wlroots-next&#34;&gt;wlroots-next branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable XWayland, you should also install xorg-xwayland and uncomment its flag in &lt;code&gt;config.mk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;All configuration is done by editing &lt;code&gt;config.h&lt;/code&gt; and recompiling, in the same manner as dwm. There is no way to separately restart the window manager in Wayland without restarting the entire display server, so any changes will take effect the next time dwl is executed.&lt;/p&gt; &#xA;&lt;p&gt;As in the dwm community, we encourage users to share patches they have created. Check out the &lt;a href=&#34;https://github.com/djpohly/dwl/wiki/Patches&#34;&gt;patches page on our wiki&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Running dwl&lt;/h2&gt; &#xA;&lt;p&gt;dwl can be run on any of the backends supported by wlroots. This means you can run it as a separate window inside either an X11 or Wayland session, as well as directly from a VT console. Depending on your distro&#39;s setup, you may need to add your user to the &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; groups before you can run dwl on a VT. If you are using &lt;code&gt;elogind&lt;/code&gt; or &lt;code&gt;systemd-logind&lt;/code&gt; you need to install polkit; otherwise you need to add yourself in the &lt;code&gt;seat&lt;/code&gt; group and enable/start the seatd daemon.&lt;/p&gt; &#xA;&lt;p&gt;When dwl is run with no arguments, it will launch the server and begin handling any shortcuts configured in &lt;code&gt;config.h&lt;/code&gt;. There is no status bar or other decoration initially; these are instead clients that can be run within the Wayland session.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to run a script or command automatically at startup, you can specify the command using the &lt;code&gt;-s&lt;/code&gt; option. This command will be executed as a shell command using &lt;code&gt;/bin/sh -c&lt;/code&gt;. It serves a similar function to &lt;code&gt;.xinitrc&lt;/code&gt;, but differs in that the display server will not shut down when this process terminates. Instead, dwl will send this process a SIGTERM at shutdown and wait for it to terminate (if it hasn&#39;t already). This makes it ideal for execing into a user service manager like &lt;a href=&#34;https://skarnet.org/software/s6/&#34;&gt;s6&lt;/a&gt;, &lt;a href=&#34;https://jjacky.com/anopa/&#34;&gt;anopa&lt;/a&gt;, &lt;a href=&#34;http://smarden.org/runit/faq.html#userservices&#34;&gt;runit&lt;/a&gt;, or &lt;a href=&#34;https://wiki.archlinux.org/title/Systemd/User&#34;&gt;&lt;code&gt;systemd --user&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: The &lt;code&gt;-s&lt;/code&gt; command is run as a &lt;em&gt;child process&lt;/em&gt; of dwl, which means that it does not have the ability to affect the environment of dwl or of any processes that it spawns. If you need to set environment variables that affect the entire dwl session, these must be set prior to running dwl. For example, Wayland requires a valid &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt;, which is usually set up by a session manager such as &lt;code&gt;elogind&lt;/code&gt; or &lt;code&gt;systemd-logind&lt;/code&gt;. If your system doesn&#39;t do this automatically, you will need to configure it prior to launching &lt;code&gt;dwl&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export XDG_RUNTIME_DIR=/tmp/xdg-runtime-$(id -u)&#xA;mkdir -p $XDG_RUNTIME_DIR&#xA;dwl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Status information&lt;/h3&gt; &#xA;&lt;p&gt;Information about selected layouts, current window title, and selected/occupied/urgent tags is written to the stdin of the &lt;code&gt;-s&lt;/code&gt; command (see the &lt;code&gt;printstatus()&lt;/code&gt; function for details). This information can be used to populate an external status bar with a script that parses the information. Failing to read this information will cause dwl to block, so if you do want to run a startup command that does not consume the status information, you can close standard input with the &lt;code&gt;&amp;lt;&amp;amp;-&lt;/code&gt; shell redirection, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dwl -s &#39;foot --server &amp;lt;&amp;amp;-&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your startup command is a shell script, you can achieve the same inside the script with the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exec &amp;lt;&amp;amp;-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a list of status bars that work with dwl consult our &lt;a href=&#34;https://github.com/djpohly/dwl/wiki#compatible-status-bars&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Replacements for X applications&lt;/h2&gt; &#xA;&lt;p&gt;You can find a &lt;a href=&#34;https://github.com/djpohly/dwl/wiki#migrating-from-x&#34;&gt;list of useful resources on our wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;dwl began by extending the TinyWL example provided (CC0) by the sway/wlroots developers. This was made possible in many cases by looking at how sway accomplished something, then trying to do the same in as suckless a way as possible.&lt;/p&gt; &#xA;&lt;p&gt;Many thanks to suckless.org and the dwm developers and community for the inspiration, and to the various contributors to the project, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Courtis for the XWayland implementation&lt;/li&gt; &#xA; &lt;li&gt;Guido Cella for the layer-shell protocol implementation, patch maintenance, and for helping to keep the project running&lt;/li&gt; &#xA; &lt;li&gt;Stivvo for output management and fullscreen support, and patch maintenance&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tporadowski/redis</title>
    <updated>2023-02-26T01:51:29Z</updated>
    <id>tag:github.com,2023-02-26:/tporadowski/redis</id>
    <link href="https://github.com/tporadowski/redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native port of Redis for Windows. Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs. This repository contains unofficial port of Redis to Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redis 5.0.14 for Windows&lt;/h1&gt; &#xA;&lt;p&gt;You can find the release of &lt;strong&gt;Redis 5.0.14 for Windows&lt;/strong&gt; on &lt;a href=&#34;https://github.com/tporadowski/redis/releases&#34;&gt;releases page&lt;/a&gt;. Please test it and &lt;a href=&#34;https://github.com/tporadowski/redis/wiki/Submitting-an-Issue&#34;&gt;report any issues&lt;/a&gt;, thanks in advance!&lt;/p&gt; &#xA;&lt;h2&gt;Redis 4.0.14 for Windows&lt;/h2&gt; &#xA;&lt;p&gt;You can find the release of &lt;strong&gt;Redis 4.0.14 for Windows&lt;/strong&gt; on &lt;a href=&#34;https://github.com/tporadowski/redis/releases&#34;&gt;releases page&lt;/a&gt;. Please test it and &lt;a href=&#34;https://github.com/tporadowski/redis/wiki/Submitting-an-Issue&#34;&gt;report any issues&lt;/a&gt;, thanks in advance!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;At the moment &lt;a href=&#34;https://github.com/tporadowski/redis/tree/win-4.0.14&#34;&gt;win-4.0.14 branch&lt;/a&gt; provides a &lt;strong&gt;stable port of &lt;a href=&#34;https://github.com/antirez/redis/releases/tag/4.0.14&#34;&gt;Redis 4.0.14&lt;/a&gt; for Windows x64&lt;/strong&gt; and &lt;a href=&#34;https://github.com/tporadowski/redis/tree/win-5.0&#34;&gt;win-5.0 branch&lt;/a&gt; provides a &lt;strong&gt;stable port of &lt;a href=&#34;https://github.com/redis/redis/releases/tag/5.0.14&#34;&gt;Redis 5.0.14&lt;/a&gt; for Windows x64&lt;/strong&gt;, both merged with archived port of &lt;a href=&#34;https://github.com/MicrosoftArchive/redis/releases/tag/win-3.2.100&#34;&gt;win-3.2.100 version&lt;/a&gt; from MS Open Tech team. Since the latter is no longer maintained - the sources were merged by hand, projects updated to Visual Studio 2019 (v16.2.5) and any findings (mostly via unit tests) were fixed.&lt;/p&gt; &#xA;&lt;p&gt;You can find the original description of what this fork provides, how it evolved, what are its requirements, etc. on Wiki: &lt;a href=&#34;https://github.com/tporadowski/redis/wiki/Old-MSOpenTech-redis-README.md&#34;&gt;https://github.com/tporadowski/redis/wiki/Old-MSOpenTech-redis-README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building from source code&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In order to build this project from source code you need to have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visual Studio 2019 (i.e. Community Edition, version 16.2.5 or newer) with &#34;C/C++ features&#34; enabled,&lt;/li&gt; &#xA; &lt;li&gt;Windows SDK 10,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git Bash&lt;/a&gt; for Windows or &lt;a href=&#34;http://cygwin.com/&#34;&gt;Cygwin&lt;/a&gt; with Git - after cloning this repository you need to run &lt;code&gt;src/mkreleasehdr.sh&lt;/code&gt; script that creates &lt;code&gt;src/release.h&lt;/code&gt; with some information taken from Git; optionally you can create that file by hand.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project depends on &lt;a href=&#34;https://github.com/jemalloc/jemalloc&#34;&gt;&lt;code&gt;jemalloc&lt;/code&gt;&lt;/a&gt; memory allocator, which is slightly customized in regard to calls to &lt;code&gt;VirtualAlloc&lt;/code&gt; and &lt;code&gt;VirtualFree&lt;/code&gt; WinAPI functions. They are being replaced with calls to &lt;code&gt;AllocHeapBlock/PurgePages&lt;/code&gt; and &lt;code&gt;FreeHeapBlock&lt;/code&gt; from &lt;code&gt;src/Win32_Interop/Win32_QFork.cpp&lt;/code&gt; in order to keep track which memory regions are to be made available to child processes (for saving RDB/AOF).&lt;/p&gt; &#xA;&lt;p&gt;Changes to &lt;code&gt;jemalloc&lt;/code&gt; that provide those customizations are being maintained in &lt;a href=&#34;https://github.com/tporadowski/jemalloc&#34;&gt;tporadowski/jemalloc repository&lt;/a&gt; and are copied over to &lt;code&gt;deps/jemalloc&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qemu/qemu</title>
    <updated>2023-02-26T01:51:29Z</updated>
    <id>tag:github.com,2023-02-26:/qemu/qemu</id>
    <link href="https://github.com/qemu/qemu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official QEMU mirror. Please see http://wiki.qemu.org/Contribute/SubmitAPatch for how to submit changes to QEMU. Pull Requests are ignored. Please only use release tarballs from the QEMU website.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;=========== QEMU README&lt;/h1&gt; &#xA;&lt;p&gt;QEMU is a generic and open source machine &amp;amp; userspace emulator and virtualizer.&lt;/p&gt; &#xA;&lt;p&gt;QEMU is capable of emulating a complete machine in software without any need for hardware virtualization support. By using dynamic translation, it achieves very good performance. QEMU can also integrate with the Xen and KVM hypervisors to provide emulated hardware while allowing the hypervisor to manage the CPU. With hypervisor support, QEMU can achieve near native performance for CPUs. When QEMU emulates CPUs directly it is capable of running operating systems made for one machine (e.g. an ARMv7 board) on a different machine (e.g. an x86_64 PC board).&lt;/p&gt; &#xA;&lt;p&gt;QEMU is also capable of providing userspace API virtualization for Linux and BSD kernel interfaces. This allows binaries compiled against one architecture ABI (e.g. the Linux PPC64 ABI) to be run on a host using a different architecture ABI (e.g. the Linux x86_64 ABI). This does not involve any hardware emulation, simply CPU and syscall emulation.&lt;/p&gt; &#xA;&lt;p&gt;QEMU aims to fit into a variety of use cases. It can be invoked directly by users wishing to have full control over its behaviour and settings. It also aims to facilitate integration into higher level management layers, by providing a stable command line interface and monitor API. It is commonly invoked indirectly via the libvirt library when using open source applications such as oVirt, OpenStack and virt-manager.&lt;/p&gt; &#xA;&lt;p&gt;QEMU as a whole is released under the GNU General Public License, version 2. For full licensing details, consult the LICENSE file.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Documentation can be found hosted online at &lt;code&gt;&amp;lt;https://www.qemu.org/documentation/&amp;gt;&lt;/code&gt;&lt;em&gt;. The documentation for the current development version that is available at &lt;code&gt;&amp;lt;https://www.qemu.org/docs/master/&amp;gt;&lt;/code&gt;&lt;/em&gt; is generated from the &lt;code&gt;docs/&lt;/code&gt; folder in the source tree, and is built by &lt;code&gt;Sphinx &amp;lt;https://www.sphinx-doc.org/en/master/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;QEMU is multi-platform software intended to be buildable on all modern Linux platforms, OS-X, Win32 (via the Mingw64 toolchain) and a variety of other UNIX targets. The simple steps to build QEMU are:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;mkdir build cd build ../configure make&lt;/p&gt; &#xA;&lt;p&gt;Additional information can also be found online via the QEMU website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Hosts/Linux&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Hosts/Mac&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Hosts/W32&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Submitting patches&lt;/h1&gt; &#xA;&lt;p&gt;The QEMU source code is maintained under the GIT version control system.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://gitlab.com/qemu-project/qemu.git&#34;&gt;https://gitlab.com/qemu-project/qemu.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When submitting patches, one common approach is to use &#39;git format-patch&#39; and/or &#39;git send-email&#39; to format &amp;amp; send the mail to the &lt;a href=&#34;mailto:qemu-devel@nongnu.org&#34;&gt;qemu-devel@nongnu.org&lt;/a&gt; mailing list. All patches submitted must contain a &#39;Signed-off-by&#39; line from the author. Patches should follow the guidelines set out in the &lt;code&gt;style section &amp;lt;https://www.qemu.org/docs/master/devel/style.html&amp;gt;&lt;/code&gt;_ of the Developers Guide.&lt;/p&gt; &#xA;&lt;p&gt;Additional information on submitting patches can be found online via the QEMU website&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/SubmitAPatch&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/TrivialPatches&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The QEMU website is also maintained under source control.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://gitlab.com/qemu-project/qemu-web.git&#34;&gt;https://gitlab.com/qemu-project/qemu-web.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://www.qemu.org/2017/02/04/the-new-qemu-website-is-up/&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &#39;git-publish&#39; utility was created to make above process less cumbersome, and is highly recommended for making regular contributions, or even just for sending consecutive patch series revisions. It also requires a working &#39;git send-email&#39; setup, and by default doesn&#39;t automate everything, so you may want to go through the above steps manually for once.&lt;/p&gt; &#xA;&lt;p&gt;For installation instructions, please go to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://github.com/stefanha/git-publish&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The workflow with &#39;git-publish&#39; is:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;$ git checkout master -b my-feature $ # work on new commits, add your &#39;Signed-off-by&#39; lines to each $ git publish&lt;/p&gt; &#xA;&lt;p&gt;Your patch series will be sent and tagged as my-feature-v1 if you need to refer back to it in the future.&lt;/p&gt; &#xA;&lt;p&gt;Sending v2:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;$ git checkout my-feature # same topic branch $ # making changes to the commits (using &#39;git rebase&#39;, for example) $ git publish&lt;/p&gt; &#xA;&lt;p&gt;Your patch series will be sent with &#39;v2&#39; tag in the subject and the git tip will be tagged as my-feature-v2.&lt;/p&gt; &#xA;&lt;h1&gt;Bug reporting&lt;/h1&gt; &#xA;&lt;p&gt;The QEMU project uses GitLab issues to track bugs. Bugs found when running code built from QEMU git or upstream released sources should be reported via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://gitlab.com/qemu-project/qemu/-/issues&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If using QEMU via an operating system vendor pre-built binary package, it is preferable to report bugs to the vendor&#39;s own bug tracker first. If the bug is also known to affect latest upstream code, it can also be reported via GitLab.&lt;/p&gt; &#xA;&lt;p&gt;For additional information on bug reporting consult:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/ReportABug&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ChangeLog&lt;/h1&gt; &#xA;&lt;p&gt;For version history and release notes, please visit &lt;code&gt;&amp;lt;https://wiki.qemu.org/ChangeLog/&amp;gt;&lt;/code&gt;_ or look at the git history for more detailed information.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;The QEMU community can be contacted in a number of ways, with the two main methods being email and IRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;mailto:qemu-devel@nongnu.org&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://lists.nongnu.org/mailman/listinfo/qemu-devel&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;#qemu on irc.oftc.net&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Information on additional methods of contacting the community can be found online via the QEMU website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/StartHere&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>