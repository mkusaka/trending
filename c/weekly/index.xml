<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-29T01:38:24Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>klonyyy/MCUViewer</title>
    <updated>2025-06-29T01:38:24Z</updated>
    <id>tag:github.com,2025-06-29:/klonyyy/MCUViewer</id>
    <link href="https://github.com/klonyyy/MCUViewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time embedded variable &amp; trace viewer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;p&gt;To download MCUViewer installer please proceed to the &lt;a href=&#34;https://mcuviewer.com/#downloads&#34;&gt;downloads&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;MCUViewer is now closed-source. This repo holds sources for the 1.1.0 release.&lt;/strong&gt; ⚠️&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Feel free to start a new issue here in case of any problems or contact me directly at &lt;a href=&#34;mailto:contact@mcuviewer.com&#34;&gt;contact@mcuviewer.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MCUViewer&lt;/h1&gt; &#xA;&lt;p&gt;MCUViewer (formerly STMViewer) is an open-source GUI debug tool for microcontrollers that consists of two modules.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Variable Viewer - used for viewing, logging, and manipulating variables data in realtime using debug interface (SWDIO / SWCLK / GND)&lt;/li&gt; &#xA; &lt;li&gt;Trace Viewer - used for graphically representing real-time SWO trace output (SWDIO / SWCLK / SWO / GND)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The only piece of hardware required is an STLink or JLink programmer.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;Variable Viewer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/klonyyy/MCUViewer/main/docs/VarViewer.gif&#34; alt=&#34;_&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Variable Viewer can be used to visualize your embedded application data in real time with no overhead in a non-intrusive way. The software works by reading variables&#39; values directly from RAM using probe&#39;s debug interface. Addresses are read from the *.elf file which is created when you build your embedded project. This approach&#39;s main downside is that the object&#39;s address must stay constant throughout the whole program&#39;s lifetime, which means the object has to be global. Even though it seems to be a small price to pay in comparison to running some debug protocol over for example UART which is also not free in terms of intrusiveness.&lt;/p&gt; &#xA;&lt;p&gt;Variable Viewer is a great tool for debugging, but might be not enough for some high frequency signals - in such cases check out the Trace Viewer below.&lt;/p&gt; &#xA;&lt;h3&gt;Trace Viewer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/klonyyy/MCUViewer/main/docs/TraceViewer.gif&#34; alt=&#34;_&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trace Viewer is a new module that lets you visualize SWO trace data. It can serve multiple purposes such as profiling a function execution time, confirming the timer&#39;s interrupt frequency, or displaying very high frequency signals. All this is possible thanks to hardware trace peripherals embedded into Cortex M3/M4/M7/M33 cores. For prerequisites and usage please see the Quick Start section.&lt;/p&gt; &#xA;&lt;p&gt;TraceViewer is not influenced by optimizations, which means it is a great tool to use for profiling on release builds. Moreover it has a very low influence on the program execution as each datapoint is a single register write.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First make sure you&#39;ve got GDB installed and that it&#39;s at least 12.1.&lt;/li&gt; &#xA; &lt;li&gt;Download the *.deb package and install it using: &lt;code&gt;sudo apt install ./MCUViewer-x.y.z-Linux.deb&lt;/code&gt; All dependencies should be installed and you should be ready to go.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Stlink users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in case your STLink is not detected, please copy the &lt;code&gt;launch/install/Unix/udevrules/&lt;/code&gt; folder contents to your &lt;code&gt;/etc/udev/rules.d/&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and run the MCUViewer installer from the releases page (right hand side menu of the main repo page).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Stlink users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make sure the STLink is in &#34;STM32 Debug + Mass Storage + VCP&#34; mode as for some reason &#34;STM32 Debug + VCP&#34; throws libusb errors on Windows. This needs further investigation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can assign the external GPU to MCUViewer for improved performance.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Variable Viewer&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Options -&amp;gt; Acqusition&lt;/code&gt; Settings window in the top menu.&lt;/li&gt; &#xA; &lt;li&gt;Select your project&#39;s elf file. Make sure the project is compiled in debug mode. Click done.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;Import variables form *.elf&lt;/code&gt;. Select variables and click &lt;code&gt;Import&lt;/code&gt;. Note: the import feature is still in beta. If your variable is not automatically detected just click &lt;code&gt;Add variable&lt;/code&gt; and input the name yourself. Please let me know if that happens by opening a new issue with *.elf file attached.&lt;/li&gt; &#xA; &lt;li&gt;After adding all variables click &lt;code&gt;Update variable addresses&lt;/code&gt;. The type and address of the variables you&#39;ve added should change from &#34;NOT FOUND!&#34; to a valid address based on the *.elf file you&#39;ve provided. Note: 64-bit variables (such as uint64_t and double) are not yet supported #13.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop the variable to the plot area.``&lt;/li&gt; &#xA; &lt;li&gt;Make sure the debug probe is connected and a proper type is selected (STLink/JLink). Download your executable to the microcontroller and press the &lt;code&gt;STOPPED&lt;/code&gt; button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In case of any problems, please try the example/MCUViewer_test CubeIDE project and the corresponding MCUViewer_test.cfg project file. Please remember to build the project and update the elf file path in the &lt;code&gt;Options -&amp;gt; Acqusition&lt;/code&gt; Settings.&lt;/p&gt; &#xA;&lt;h3&gt;Trace Viewer&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Turn on the SWO pin functionality - in CubeMX System Core -&amp;gt; SYS Mode and Configuration -&amp;gt; choose Trace Asynchronous Sw&lt;/li&gt; &#xA; &lt;li&gt;Place enter and exit markers in the code you&#39;d like to profile. Example for digital data:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ITM-&amp;gt;PORT[x].u8 = 0xaa; //enter tag 0xaa - plot state high&#xA;foo();&#xA;ITM-&amp;gt;PORT[x].u8 = 0xbb; //exit tag 0xbb - plot state low&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for tracing &#34;analog&#34; signals you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;float a = sin(10.0f * i);          // some high frequency signal to trace&#xA;ITM-&amp;gt;PORT[x].u32 = *(uint32_t*)&amp;amp;a; // type-punn to desired size: sizeof(float) = sizeof(uint32_t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uint16_t a = getAdcSample();       // some high frequency signal to trace&#xA;ITM-&amp;gt;PORT[x].u16 = a;              &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ITM registers are defined in CMSIS headers (core_xxxx.h).&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Compile and download the program to your STM32 target.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;Settings&lt;/code&gt; window type in the correct System Core Clock value in kHz (very important as it affects the timebase)&lt;/li&gt; &#xA; &lt;li&gt;Try different trace prescallers that result in a trace speed lower than the max trace speed of your programmer (for example STLINK V2 can read trace up to 2Mhz, whereas ST-Link V3 is theoretically able to do 24Mhz). Example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System Core Clock is 160 000 kHz (160 Mhz)&lt;/li&gt; &#xA; &lt;li&gt;We&#39;re using ST-link V2 so the prescaler should be at least 160 Mhz / 2 Mhz = 80 It works similar with other probes such as JLink, so be sure to check the maximum SWO speed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;analog&lt;/code&gt; channels types according to the type used in your code.&lt;/li&gt; &#xA; &lt;li&gt;Press the &lt;code&gt;STOPPED&lt;/code&gt; button to start recording.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example project with MCUViewer config file is located in test/MCUViewer_test directory.&lt;/p&gt; &#xA;&lt;p&gt;FAQ and common issues:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Problem: My trace doesn&#39;t look like it&#39;s supposed to and I get a lot of error frames Answer: Try lowering the trace prescaller and check the SWO pin connection - the SWO pin output is high frequency and it shouldn&#39;t be too long.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Problem: My trace looks like it&#39;s supposed to but I get the &#34;delayed timestamp 3&#34; indicator Answer: Try logging fewer channels simultaneously. It could be that you&#39;ve saturated the SWO pin bandwidth.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Problem: My trace looks like it&#39;s supposed to but I get the &#34;delayed timestamp 1&#34; indicator Answer: This is not a critical error, however, you should be cautious as some of the trace frames may be delayed. To fix try logging fewer channels simultaneously.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please remember that although SWO is ARM standardized, there might be some differences the setup process. It should work without problems in most cases, but some MCUs might require some additional steps. Please see the &lt;a href=&#34;https://wiki.segger.com/SWO&#34;&gt;SEGGER&#39;s wiki page&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;MCUViewer is build like any other CMake project:&lt;/p&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a Linux user be sure to install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;libusb-1.0-0-dev&lt;/li&gt; &#xA; &lt;li&gt;libglfw3-dev&lt;/li&gt; &#xA; &lt;li&gt;libgtk-3-dev&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After a successful build, copy the &lt;code&gt;./third_party/stlink/chips&lt;/code&gt; directory to where the binary is located. Otherwise the STlink will not detect your STM32 target.&lt;/p&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.msys2.org&#34;&gt;MSYS2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the MinGW console run &lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the following packages &lt;code&gt;pacman -S base-devel mingw-w64-ucrt-x86_64-toolchain mingw-w64-ucrt-x86_64-llvm mingw-w64-x86_64-lld&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you&#39;ve added minGW folder to the PATH (&lt;code&gt;C:\msys64\usr\bin&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In the main repo directory call &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd build &lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmake .. -G&#34;MinGW Makefiles&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mingw32-make.exe -j8&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After a successful build, copy the &lt;code&gt;./third_party/stlink/chips&lt;/code&gt; directory to where the binary is located. Otherwise the STlink will not detect your STM32 target.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m working in the motor control industry where it is crucial to visualize some of the process data in real-time. Since the beginning, I have been working with &lt;a href=&#34;https://www.st.com/en/development-tools/stm-studio-stm32.html&#34;&gt;STMStudio&lt;/a&gt;, which is, or rather was a great tool. Unfortunately, ST stopped supporting it which means there are some annoying bugs, and it doesn&#39;t work well with mangled c++ object names. Also, it works only on Windows and with STM32 microcontrollers which is a big downside. If you&#39;ve ever used it you probably see how big of an inspiration it was for creating MCUViewer :) ST&#39;s other project in this area - &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubemonitor.html&#34;&gt;Cube Monitor&lt;/a&gt; - has, in my opinion, too much overhead on adding variables, plots and writing values. I think it&#39;s designed for creating dashboards, and thus it serves a very different purpose. On top of that, I think the plot manipulation is much worse compared to STMStudio or MCUViewer.&lt;/p&gt; &#xA;&lt;p&gt;Since the Trace Viewer module was added MCUViewer has a unique property of displaying SWO trace data which both CubeMonitor and STMStudio currently lack. Moreover it now fully supports JLink programmer as well.&lt;/p&gt; &#xA;&lt;h2&gt;Support and sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Maintaining and improving MCUViewer takes a lot of time and effort. If you find MCUViewer useful in your project or work you can support the development by becoming a &lt;a href=&#34;https://github.com/sponsors/klonyyy&#34;&gt;Github sponsor&lt;/a&gt; or simply &lt;a href=&#34;https://buymeacoffee.com/klonyyy&#34;&gt;&#34;buying a coffe&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in special features, priority feature implementations, or support you can contact me directly.&lt;/p&gt; &#xA;&lt;h2&gt;3rd party projects used in MCUViewer&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stlink-org/stlink&#34;&gt;stlink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libusb/libusb&#34;&gt;libusb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;imgui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/epezent/implot&#34;&gt;implot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pulzed/mINI&#34;&gt;mINI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btzy/nativefiledialog-extended&#34;&gt;nfd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.segger.com/downloads/jlink/&#34;&gt;SEGGER JLink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11&#34;&gt;CLI11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>HarbourMasters/Starship</title>
    <updated>2025-06-29T01:38:24Z</updated>
    <id>tag:github.com,2025-06-29:/HarbourMasters/Starship</id>
    <link href="https://github.com/HarbourMasters/Starship" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SF64 PC Port&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Starship&lt;/h1&gt; &#xA;&lt;p&gt;Lead Developers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/sonicdcer&#34;&gt;SonicDcer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/kiritodv&#34;&gt;Lywx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;Official Discord: &lt;a href=&#34;https://discord.com/invite/shipofharkinian&#34;&gt;https://discord.com/invite/shipofharkinian&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re having any trouble after reading through this &lt;code&gt;README&lt;/code&gt;, feel free ask for help in the Starship Support text channels. Please keep in mind that we do not condone piracy.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;Starship does not include any copyrighted assets. You are required to provide a supported copy of the game.&lt;/p&gt; &#xA;&lt;h3&gt;1. Verify your ROM dump&lt;/h3&gt; &#xA;&lt;p&gt;The supported ROMs are US 1.0 and US 1.1 Rev A versions. You can verify you have dumped a supported copy of the game by using the SHA-1 File Checksum Online at &lt;a href=&#34;https://www.romhacking.net/hash/&#34;&gt;https://www.romhacking.net/hash/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The SHA-1 hash for a US 1.0 ROM is D8B1088520F7C5F81433292A9258C1184AFA1457.&lt;/li&gt; &#xA; &lt;li&gt;The SHA-1 hash for a US 1.1 ROM is 09F0D105F476B00EFA5303A3EBC42E60A7753B7A.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Starship also supports voice language replacement use from both EU (Lylat) and JP (Japanese) when used in conjunction with an US ROM.&lt;/p&gt; &#xA;&lt;p&gt;Note: JP and EU versions of the game are not supported for the base asset O2R creation, a US ROM must be used for it, and you can only use one voice language replacement at a time (Either EU or JP).&lt;/p&gt; &#xA;&lt;h3&gt;2. Verify your ROM is in .z64 format&lt;/h3&gt; &#xA;&lt;p&gt;Your ROM needs to be in .z64 format. If it&#39;s in .n64 format, use the following to convert it to a .z64: &lt;a href=&#34;https://hack64.net/tools/swapper.php&#34;&gt;https://hack64.net/tools/swapper.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Download Starship from &lt;a href=&#34;https://github.com/HarbourMasters/Starship/releases&#34;&gt;Releases&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;3. Generating the OTR from the ROM and Play!&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract every file from the zip into a folder of your choosing.&lt;/li&gt; &#xA; &lt;li&gt;Run starship.exe and select your US 1.0 or US 1.1 ROM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract every file from the zip into a folder of your choosing.&lt;/li&gt; &#xA; &lt;li&gt;Execute starship.appimage. You may have to chmod +x the appimage via terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract every file from the zip into a folder of your choosing.&lt;/li&gt; &#xA; &lt;li&gt;Run starship and select your US 1.0 or US 1.1 ROM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Nintendo Switch&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run one of the PC releases to generate an &lt;code&gt;sf64.o2r&lt;/code&gt; file. After launching the game on PC, you will be able to find these files in the same directory as &lt;code&gt;starship.exe&lt;/code&gt; or &lt;code&gt;starship.appimage&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the files to your sd card&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;h3&gt;Default keyboard configuration&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;N64&lt;/th&gt; &#xA;   &lt;th&gt;A&lt;/th&gt; &#xA;   &lt;th&gt;B&lt;/th&gt; &#xA;   &lt;th&gt;Z&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Analog stick&lt;/th&gt; &#xA;   &lt;th&gt;C buttons&lt;/th&gt; &#xA;   &lt;th&gt;D-Pad&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keyboard&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;   &lt;td&gt;Space&lt;/td&gt; &#xA;   &lt;td&gt;WASD&lt;/td&gt; &#xA;   &lt;td&gt;Arrow keys&lt;/td&gt; &#xA;   &lt;td&gt;TFGH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other shortcuts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keys&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F1&lt;/td&gt; &#xA;   &lt;td&gt;Toggle menubar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F4&lt;/td&gt; &#xA;   &lt;td&gt;Reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F11&lt;/td&gt; &#xA;   &lt;td&gt;Fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tab&lt;/td&gt; &#xA;   &lt;td&gt;Toggle Alternate assets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Graphics Backends&lt;/h3&gt; &#xA;&lt;p&gt;Currently, there are three rendering APIs supported: DirectX11 (Windows), OpenGL (all platforms), and Metal (macOS). You can change which API to use in the &lt;code&gt;Settings&lt;/code&gt; menu of the menubar, which requires a restart. If you&#39;re having an issue with crashing, you can change the API in the &lt;code&gt;starship.cfg.json&lt;/code&gt; file by finding the line &lt;code&gt;&#34;Backend&#34;:{&lt;/code&gt;... and changing the &lt;code&gt;id&lt;/code&gt; value to &lt;code&gt;3&lt;/code&gt; and set the &lt;code&gt;Name&lt;/code&gt; to &lt;code&gt;OpenGL&lt;/code&gt;. &lt;code&gt;DirectX 11&lt;/code&gt; with id &lt;code&gt;2&lt;/code&gt; is the default on Windows. &lt;code&gt;Metal&lt;/code&gt; with id &lt;code&gt;4&lt;/code&gt; is the default on macOS.&lt;/p&gt; &#xA;&lt;h1&gt;Custom Assets&lt;/h1&gt; &#xA;&lt;p&gt;Custom assets are packed in &lt;code&gt;.o2r&lt;/code&gt; or &lt;code&gt;.otr&lt;/code&gt; files. To use custom assets, place them in the &lt;code&gt;mods&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in creating and/or packing your own custom asset &lt;code&gt;.o2r&lt;/code&gt;/&lt;code&gt;.otr&lt;/code&gt; files, check out the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HarbourMasters64/retro&#34;&gt;&lt;strong&gt;retro - OTR and O2R generator&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HarbourMasters/fast64&#34;&gt;&lt;strong&gt;fast64 - Blender plugin (Note that SF64 is not supported at this time)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;If you want to manually compile Starship, please consult the &lt;a href=&#34;https://github.com/HarbourMasters/Starship/raw/main/docs/BUILDING.md&#34;&gt;building instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Playtesting&lt;/h3&gt; &#xA;&lt;p&gt;If you want to playtest a continuous integration build, you can find them at the links below. Keep in mind that these are for playtesting only, and you will likely encounter bugs and possibly crashes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Starship/workflows/main/main/starship-windows.zip&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Starship/workflows/main/main/starship-mac-x64.zip&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Starship/workflows/main/main/Starship-linux.zip&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Starship/workflows/main/main/Starship-switch.zip&#34;&gt;Switch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://github.com/Kenix3/libultraship/&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./docs/poweredbylus.darkmode.png&#34;&gt; &#xA;  &lt;img alt=&#34;Powered by libultraship&#34; src=&#34;https://raw.githubusercontent.com/HarbourMasters/Starship/main/docs/poweredbylus.lightmode.png&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Special Thanks:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zeldaret&#34;&gt;ZeldaRET&lt;/a&gt; : for teaching me the fundamental knowledge of N64 decompilation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/decompals&#34;&gt;Decompals&lt;/a&gt; : for helping in the initial disassembly and decompilation of the game.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/harbourMasters&#34;&gt;HM64 Team&lt;/a&gt; : for creating Libultraship and helping with various issues.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/DarioSamo&#34;&gt;DarioSamo&lt;/a&gt; : for providing important fixes to the renderer and information about the inner workings of the game graphics system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/garrettjoecox&#34;&gt;garrettjoecox&lt;/a&gt; : for contributing with interpolation fixes to this port.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/inspectredc&#34;&gt;inspectredc&lt;/a&gt; : for contributing to the &lt;a href=&#34;https://github.com/sonicdcer/sf64&#34;&gt;SF64 decompilation project&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/KiritoDv&#34;&gt;Lywx&lt;/a&gt; : for co-developing this port as a lead and creating &lt;a href=&#34;https://github.com/HarbourMasters/Torch&#34;&gt;Torch&lt;/a&gt; asset extraction system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/m4xw&#34;&gt;m4xw&lt;/a&gt; : for helping with audio issues in this port.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Malkierian&#34;&gt;Malkierian&lt;/a&gt; : for contributing with important fixes to this port.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/petrie911&#34;&gt;petrie911&lt;/a&gt; : for contributing to the &lt;a href=&#34;https://github.com/sonicdcer/sf64&#34;&gt;SF64 decompilation project&lt;/a&gt; as a lead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Ryan-Myers&#34;&gt;Ryan-Myers&lt;/a&gt; : for contributing to the &lt;a href=&#34;https://github.com/sonicdcer/sf64&#34;&gt;SF64 decompilation project&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Thar0&#34;&gt;Thar0&lt;/a&gt; : for contributing with an improved Starfield that can be interpolated to any framerate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/TheBoy181&#34;&gt;TheBoy181&lt;/a&gt; : for contributing to this project with various widescreen enhancements such as level floors, an extended Starfield among other things.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Wiseguy&#34;&gt;Wiseguy&lt;/a&gt; : for providing important information about the inner workings of the N64 platform, as well as helping with the decompilation process.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gnuton/asuswrt-merlin.ng</title>
    <updated>2025-06-29T01:38:24Z</updated>
    <id>tag:github.com,2025-06-29:/gnuton/asuswrt-merlin.ng</id>
    <link href="https://github.com/gnuton/asuswrt-merlin.ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extends the support of Merlin firmware to more ASUS routers&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://nw-dlcdnet.asus.com/plugin/productIcons/DSL-AX82U.png&#34; alt=&#34;logo&#34; width=&#34;200&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/About-Asuswrt&#34;&gt;AsusWrt Merlin&lt;/a&gt; GNUton&#39;s builds &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A powerful third-party firmware designed for Asus routers. &lt;br&gt; &lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin.ng/wiki/About-Asuswrt&#34;&gt;&lt;strong&gt;Explore Asus Merlin docs»&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/latest&#34;&gt;Download latest firmware&lt;/a&gt; · &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=feature_request.md&#34;&gt;Request feature&lt;/a&gt; · &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&#34;&gt;Report bug&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.snbforums.com/threads/gnutons-merlin-builds-for-dsl-router-386-1_2-released.70980/&#34;&gt;Support forum&lt;/a&gt; · &lt;a href=&#34;https://retro.pizza/@gnuton&#34;&gt;@Mastodon&lt;/a&gt; · &lt;a href=&#34;https://discord.gg/pm7q6KFSzp&#34;&gt;Chat&lt;/a&gt; · &lt;a href=&#34;https://gitter.im/asuswrt/merlin-dsl&#34;&gt;Old Chat&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Aim&lt;/h3&gt; &#xA;&lt;p&gt;This is an official &lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin.ng&#34;&gt;Merlin fork&lt;/a&gt; which is supported by &lt;a href=&#34;https://twitter.com/ASUS&#34;&gt;ASUS&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/RMerlinDev?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&#34;&gt;RMerlin&lt;/a&gt;: Aim of this project is to make Merlin running on additional routers.&lt;/p&gt; &#xA;&lt;p&gt;My builds are intended to support all features present in the original Merlin firmware. Occasionally, I also incorporate additional features for specific models. The images are built in the cloud to ensure transparency, and the open-source code is publicly accessible in this GitHub repository.&lt;/p&gt; &#xA;&lt;p&gt;If you enjoy this project feel free to scroll all the way down and check on how you can ❤️ this project!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;⬇️ Firmware downloads&lt;/h3&gt; &#xA;&lt;p&gt;3006.102.x firmware downloads: latest &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/tag/3006.102.3_1-gnuton0_beta1&#34;&gt;testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rog.asus.com/networking/rog-rapture-gt-be98-model&#34;&gt;GT-BE98/GT-BE2500&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3004.388.x firmware downloads: &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/latest&#34;&gt;stable&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/WiFi-6/All-series/DSL-AX82U/&#34;&gt;DSL-AX82U/DSL-AX5400&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/WiFi-6/All-series/RT-AX82U/&#34;&gt;RT-AX82U v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/WiFi-6/All-series/RT-AX82U/&#34;&gt;RT-AX82U v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/WiFi-Routers/ASUS-Gaming-Routers/RT-AX92U/&#34;&gt;RT-AX92U&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/WiFi-Routers/ASUS-Gaming-Routers/TUF-Gaming-AX5400/&#34;&gt;TUF-AX5400 v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/WiFi-Routers/ASUS-Gaming-Routers/TUF-Gaming-AX3000/&#34;&gt;TUF-AX3000 v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/networking-iot-servers/wifi-routers/asus-gaming-routers/tuf-gaming-ax3000-v2/&#34;&gt;TUF-AX3000 v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uk.store.asus.com/rt-ac58u-v2-122214131-90ig06q0-mu9b00.html&#34;&gt;RT-AX58U v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/networking-iot-servers/wifi-routers/asus-wifi-routers/rt-ax5400/&#34;&gt;RT-AX5400&lt;/a&gt; - 🔥 New 🔥&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/Whole-Home-Mesh-WiFi-System/ZenWiFi-WiFi-Systems/ASUS-ZenWiFi-AX-XT8/&#34;&gt;ZenWiFi XT8 / RT-AX95Q v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/networking-iot-servers/whole-home-mesh-wifi-system/zenwifi-wifi-systems/asus-zenwifi-et8/&#34;&gt;ZenWifi ET8 / RT-AXE95Q&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;386.x firmware downloads: &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/tag/386.12_0-gnuton1&#34;&gt;stable&lt;/a&gt; or &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/tag/386.14_0-gnuton0_beta1&#34;&gt;testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/Networking-IoT-Servers/Modem-Routers/All-series/DSLAC68U/&#34;&gt;DSL-AC68U&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you cannot find your router in the above list, please read &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/issues/523&#34;&gt;🔥 here 🔥&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Not sure which version you have? V1? V2? Enable SSH, then ssh into your router and run &lt;code&gt;nvram get productid&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Experimental builds:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DSL-AC68U &amp;amp; DSL-AX82U &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/tag/gnuton-snapshot-feature-repeater&#34;&gt;Repeater Mode&lt;/a&gt; Unleash Repeater along with all other &lt;a href=&#34;https://www.asus.com/support/FAQ/1015007/&#34;&gt;operational modes&lt;/a&gt;. Please note that AiMesh is supported by standard images and it&#39;s much performant than repeater but it works only with other Asus routers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://somsubhra.github.io/github-release-stats/?username=gnuton&amp;amp;repository=asuswrt-merlin.ng&#34;&gt;Stats&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Latest release: &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/gnuton/asuswrt-merlin.ng.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-date/gnuton/asuswrt-merlin.ng.svg?sanitize=true&#34; alt=&#34;GitHub Release Date&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/gnuton/asuswrt-merlin.ng/latest/total.svg?sanitize=true&#34; alt=&#34;GitHub Releases&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest pre-release: &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/releases/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/gnuton/asuswrt-merlin.ng?include_prereleases&amp;amp;label=pre-release&#34; alt=&#34;GitHub tag (latest SemVer pre-release)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-date-pre/gnuton/asuswrt-merlin.ng&#34; alt=&#34;GitHub (Pre-)Release Date&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads-pre/gnuton/asuswrt-merlin.ng/latest/total&#34; alt=&#34;GitHub release (latest by date including pre-releases)&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All releases: &lt;img src=&#34;https://img.shields.io/github/downloads/gnuton/asuswrt-merlin.ng/total.svg?sanitize=true&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Merlin firmware version: &lt;img src=&#34;https://img.shields.io/github/tag/RMerl/asuswrt-merlin.ng.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Thanks to&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asus for the GPLs and HW samples.&lt;/li&gt; &#xA; &lt;li&gt;Upstream Asus Merlin &lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin.ng/graphs/contributors&#34;&gt;devs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub for providing the runners to build new images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt; for having provided a powerful CI infra for building the images on the cloud.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;How can I help?&lt;/h3&gt; &#xA;&lt;p&gt;Do you love this project? All kinds of contributions are welcome 🙌!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⭐️ star the project&lt;/li&gt; &#xA; &lt;li&gt;raise 🐞 issues&lt;/li&gt; &#xA; &lt;li&gt;send 🙇 code. (&lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/raw/master/www/DEV.md&#34;&gt;Are you a dev? Click here!&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Help other people in the community via &lt;a href=&#34;https://discord.com/channels/1155054060848807976/1168099691477614642&#34;&gt;chat&lt;/a&gt; or &lt;a href=&#34;https://github.com/gnuton/asuswrt-merlin.ng/issues?q=is%3Aissue+is%3Aopen+label%3Asuppport&#34;&gt;support tickets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💰 donations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.paypal.me/gnuton&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gnuton/asuswrt-merlin.ng/master/www/donate.png&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt; &lt;br&gt; or &lt;br&gt; ₿itcoin: 3GMqBLaLvH4c6d1bNd35NDjiqDv4pApKpi &lt;/p&gt;</summary>
  </entry>
</feed>