<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:51:36Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pgvector/pgvector</title>
    <updated>2023-04-30T01:51:36Z</updated>
    <id>tag:github.com,2023-04-30:/pgvector/pgvector</id>
    <link href="https://github.com/pgvector/pgvector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgvector&lt;/h1&gt; &#xA;&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt; &#xA;&lt;p&gt;Supports&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;exact and approximate nearest neighbor search&lt;/li&gt; &#xA; &lt;li&gt;L2 distance, inner product, and cosine distance&lt;/li&gt; &#xA; &lt;li&gt;any &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#languages&#34;&gt;language&lt;/a&gt; with a Postgres client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector/actions&#34;&gt;&lt;img src=&#34;https://github.com/pgvector/pgvector/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Compile and install the extension (supports Postgres 11+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /tmp&#xA;git clone --branch v0.4.1 https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;make&#xA;make install # may need sudo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then load it in databases where you want to use it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION vector;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes&#34;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; &#xA;&lt;p&gt;You can also install it with &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&#34;&gt;Docker&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#pgxn&#34;&gt;PGXN&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#yum&#34;&gt;Yum&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&#34;&gt;conda-forge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Create a vector column with 3 dimensions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also supports inner product (&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt;) and cosine distance (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product since Postgres only supports &lt;code&gt;ASC&lt;/code&gt; order index scans on operators&lt;/p&gt; &#xA;&lt;h2&gt;Storing&lt;/h2&gt; &#xA;&lt;p&gt;Create a new table with a vector column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add a vector column to an existing table&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE items ADD COLUMN embedding vector(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upsert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (id, embedding) VALUES (1, &#39;[1,2,3]&#39;), (2, &#39;[4,5,6]&#39;)&#xA;    ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE items SET embedding = &#39;[1,2,3]&#39; WHERE id = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM items WHERE id = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Querying&lt;/h2&gt; &#xA;&lt;p&gt;Get the nearest neighbors to a vector&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors to a row&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items WHERE id != 1 ORDER BY embedding &amp;lt;-&amp;gt; (SELECT embedding FROM items WHERE id = 1) LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get rows within a certain distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items WHERE embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; &amp;lt; 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Combine with &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; to use an index&lt;/p&gt; &#xA;&lt;h4&gt;Distances&lt;/h4&gt; &#xA;&lt;p&gt;Get the distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; AS distance FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For inner product, multiply by -1 (since &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT (embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39;) * -1 AS inner_product FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For cosine similarity, use 1 - cosine distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) AS cosine_similarity FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Aggregates&lt;/h4&gt; &#xA;&lt;p&gt;Average vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT AVG(embedding) FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Average groups of vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT category_id, AVG(embedding) FROM items GROUP BY category_id;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Indexing&lt;/h2&gt; &#xA;&lt;p&gt;By default, pgvector performs exact nearest neighbor search, which provides perfect recall.&lt;/p&gt; &#xA;&lt;p&gt;You can add an index to use approximate nearest neighbor search, which trades some recall for performance. Unlike typical indexes, you will see different results for queries after adding an approximate index.&lt;/p&gt; &#xA;&lt;p&gt;Three keys to achieving good recall are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the index &lt;em&gt;after&lt;/em&gt; the table has some data&lt;/li&gt; &#xA; &lt;li&gt;Choose an appropriate number of lists - a good place to start is &lt;code&gt;rows / 1000&lt;/code&gt; for up to 1M rows and &lt;code&gt;sqrt(rows)&lt;/code&gt; for over 1M rows&lt;/li&gt; &#xA; &lt;li&gt;When querying, specify an appropriate number of &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#query-options&#34;&gt;probes&lt;/a&gt; (higher is better for recall, lower is better for speed) - a good place to start is &lt;code&gt;lists / 10&lt;/code&gt; for up to 1M rows and &lt;code&gt;sqrt(lists)&lt;/code&gt; for over 1M rows&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; &#xA;&lt;p&gt;L2 distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inner product&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_ip_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cosine distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vectors with up to 2,000 dimensions can be indexed.&lt;/p&gt; &#xA;&lt;h3&gt;Query Options&lt;/h3&gt; &#xA;&lt;p&gt;Specify the number of probes (1 by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET ivfflat.probes = 10;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A higher value provides better recall at the cost of speed, and it can be set to the number of lists for exact nearest neighbor search (at which point the planner wonâ€™t use the index)&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL ivfflat.probes = 10;&#xA;SELECT ...&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Indexing Progress&lt;/h3&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&#34;&gt;indexing progress&lt;/a&gt; with Postgres 12+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT phase, tuples_done, tuples_total FROM pg_stat_progress_create_index;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The phases are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;performing k-means&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sorting tuples&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;tuples_done&lt;/code&gt; and &lt;code&gt;tuples_total&lt;/code&gt; are only populated during the &lt;code&gt;loading tuples&lt;/code&gt; phase&lt;/p&gt; &#xA;&lt;h3&gt;Partial Indexes&lt;/h3&gt; &#xA;&lt;p&gt;Consider &lt;a href=&#34;https://www.postgresql.org/docs/current/indexes-partial.html&#34;&gt;partial indexes&lt;/a&gt; for queries with a &lt;code&gt;WHERE&lt;/code&gt; clause&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items WHERE category_id = 123 ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be indexed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100) WHERE (category_id = 123);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To index many different values of &lt;code&gt;category_id&lt;/code&gt;, consider &lt;a href=&#34;https://www.postgresql.org/docs/current/ddl-partitioning.html&#34;&gt;partitioning&lt;/a&gt; on &lt;code&gt;category_id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (embedding vector(3), category_id int) PARTITION BY LIST(category_id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; to debug performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;EXPLAIN ANALYZE SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exact Search&lt;/h3&gt; &#xA;&lt;p&gt;To speed up queries without an index, increase &lt;code&gt;max_parallel_workers_per_gather&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET max_parallel_workers_per_gather = 4;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If vectors are normalized to length 1 (like &lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings/which-distance-function-should-i-use&#34;&gt;OpenAI embeddings&lt;/a&gt;), use inner product for best performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Approximate Search&lt;/h3&gt; &#xA;&lt;p&gt;To speed up queries with an index, increase the number of inverted lists (at the expense of recall).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;Use pgvector from any language with a Postgres client. You can even generate and store vectors in one language and query them in another.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Libraries / Examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-cpp&#34;&gt;pgvector-cpp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-dotnet&#34;&gt;pgvector-dotnet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-crystal&#34;&gt;pgvector-crystal&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-elixir&#34;&gt;pgvector-elixir&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-go&#34;&gt;pgvector-go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-haskell&#34;&gt;pgvector-haskell&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java, Scala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-java&#34;&gt;pgvector-java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-julia&#34;&gt;pgvector-julia&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-lua&#34;&gt;pgvector-lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-node&#34;&gt;pgvector-node&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-perl&#34;&gt;pgvector-perl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-php&#34;&gt;pgvector-php&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-python&#34;&gt;pgvector-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-r&#34;&gt;pgvector-r&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-ruby&#34;&gt;pgvector-ruby&lt;/a&gt;, &lt;a href=&#34;https://github.com/ankane/neighbor&#34;&gt;Neighbor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-rust&#34;&gt;pgvector-rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-swift&#34;&gt;pgvector-swift&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h4&gt;How many vectors can be stored in a single table?&lt;/h4&gt; &#xA;&lt;p&gt;A non-partitioned table has a limit of 32 TB by default in Postgres. A partitioned table can have thousands of partitions of that size.&lt;/p&gt; &#xA;&lt;h4&gt;Is replication supported?&lt;/h4&gt; &#xA;&lt;p&gt;Yes, pgvector uses the write-ahead log (WAL), which allows for replication and point-in-time recovery.&lt;/p&gt; &#xA;&lt;h4&gt;What if I want to index vectors with more than 2,000 dimensions?&lt;/h4&gt; &#xA;&lt;p&gt;Two things you can try are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;use dimensionality reduction&lt;/li&gt; &#xA; &lt;li&gt;compile Postgres with a larger block size (&lt;code&gt;./configure --with-blocksize=32&lt;/code&gt;) and edit the limit in &lt;code&gt;src/ivfflat.h&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Vector Type&lt;/h3&gt; &#xA;&lt;p&gt;Each vector takes &lt;code&gt;4 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a single precision floating-point number (like the &lt;code&gt;real&lt;/code&gt; type in Postgres), and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Vectors can have up to 16,000 dimensions.&lt;/p&gt; &#xA;&lt;h3&gt;Vector Operators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;   &lt;td&gt;element-wise addition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;element-wise subtraction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;negative inner product&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vector Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cosine_distance(vector, vector) â†’ double precision&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inner_product(vector, vector) â†’ double precision&lt;/td&gt; &#xA;   &lt;td&gt;inner product&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_distance(vector, vector) â†’ double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vector_dims(vector) â†’ integer&lt;/td&gt; &#xA;   &lt;td&gt;number of dimensions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vector_norm(vector) â†’ double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean norm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Aggregate Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avg(vector) â†’ vector&lt;/td&gt; &#xA;   &lt;td&gt;arithmetic mean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Postgres Location&lt;/h3&gt; &#xA;&lt;p&gt;If your machine has multiple Postgres installations, specify the path to &lt;a href=&#34;https://www.postgresql.org/docs/current/app-pgconfig.html&#34;&gt;pg_config&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PG_CONFIG=/Applications/Postgres.app/Contents/Versions/latest/bin/pg_config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then re-run the installation instructions (run &lt;code&gt;make clean&lt;/code&gt; before &lt;code&gt;make&lt;/code&gt; if needed)&lt;/p&gt; &#xA;&lt;h3&gt;Missing Header&lt;/h3&gt; &#xA;&lt;p&gt;If compilation fails with &lt;code&gt;fatal error: postgres.h: No such file or directory&lt;/code&gt;, make sure Postgres development files are installed on the server.&lt;/p&gt; &#xA;&lt;p&gt;For Ubuntu and Debian, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install postgresql-server-dev-15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;15&lt;/code&gt; with your Postgres server version&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Support for Windows is currently experimental. Use &lt;code&gt;nmake&lt;/code&gt; to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;set &#34;PGROOT=C:\Program Files\PostgreSQL\15&#34;&#xA;git clone --branch v0.4.1 https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;nmake /F Makefile.win&#xA;nmake /F Makefile.win install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Installation Methods&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Get the &lt;a href=&#34;https://hub.docker.com/r/ankane/pgvector&#34;&gt;Docker image&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull ankane/pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds pgvector to the &lt;a href=&#34;https://hub.docker.com/_/postgres&#34;&gt;Postgres image&lt;/a&gt; (run it the same way).&lt;/p&gt; &#xA;&lt;p&gt;You can also build the image manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --branch v0.4.1 https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;docker build -t pgvector .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;With Homebrew Postgres, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PGXN&lt;/h3&gt; &#xA;&lt;p&gt;Install from the &lt;a href=&#34;https://pgxn.org/dist/vector&#34;&gt;PostgreSQL Extension Network&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pgxn install vector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Yum&lt;/h3&gt; &#xA;&lt;p&gt;RPM packages are available from the &lt;a href=&#34;https://yum.postgresql.org/&#34;&gt;PostgreSQL Yum Repository&lt;/a&gt;. Follow the &lt;a href=&#34;https://www.postgresql.org/download/linux/redhat/&#34;&gt;setup instructions&lt;/a&gt; for your distribution and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum install pgvector_15&#xA;# or&#xA;sudo dnf install pgvector_15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;15&lt;/code&gt; with your Postgres server version&lt;/p&gt; &#xA;&lt;h3&gt;conda-forge&lt;/h3&gt; &#xA;&lt;p&gt;With Conda Postgres, install from &lt;a href=&#34;https://anaconda.org/conda-forge/pgvector&#34;&gt;conda-forge&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conda install -c conda-forge pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is &lt;a href=&#34;https://github.com/conda-forge/pgvector-feedstock&#34;&gt;community-maintained&lt;/a&gt; by &lt;a href=&#34;https://github.com/mmcauliffe&#34;&gt;@mmcauliffe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hosted Postgres&lt;/h2&gt; &#xA;&lt;p&gt;pgvector is available on &lt;a href=&#34;https://github.com/pgvector/pgvector/issues/54&#34;&gt;these providers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To request a new extension on other providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Amazon RDS - follow the instructions on &lt;a href=&#34;https://aws.amazon.com/rds/postgresql/faqs/&#34;&gt;this page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Cloud SQL - vote or comment on &lt;a href=&#34;https://issuetracker.google.com/issues/265172065&#34;&gt;this page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Azure Database - vote or comment on &lt;a href=&#34;https://feedback.azure.com/d365community/idea/7b423322-6189-ed11-a81b-000d3ae49307&#34;&gt;this page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DigitalOcean Managed Databases - vote or comment on &lt;a href=&#34;https://ideas.digitalocean.com/app-framework-services/p/pgvector-extension-for-postgresql&#34;&gt;this page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Heroku Postgres - vote or comment on &lt;a href=&#34;https://github.com/heroku/roadmap/issues/156&#34;&gt;this page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;Install the latest version and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER EXTENSION vector UPDATE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade Notes&lt;/h2&gt; &#xA;&lt;h3&gt;0.4.0&lt;/h3&gt; &#xA;&lt;p&gt;If upgrading with Postgres &amp;lt; 13, remove this line from &lt;code&gt;sql/vector--0.3.2--0.4.0.sql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TYPE vector SET (STORAGE = extended);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;make install&lt;/code&gt; and &lt;code&gt;ALTER EXTENSION vector UPDATE;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;0.3.1&lt;/h3&gt; &#xA;&lt;p&gt;If upgrading from 0.2.7 or 0.3.0, recreate all &lt;code&gt;ivfflat&lt;/code&gt; indexes after upgrading to ensure all data is indexed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Postgres 12+&#xA;REINDEX INDEX CONCURRENTLY index_name;&#xA;&#xA;-- Postgres &amp;lt; 12&#xA;CREATE INDEX CONCURRENTLY temp_name ON table USING ivfflat (column opclass);&#xA;DROP INDEX CONCURRENTLY index_name;&#xA;ALTER INDEX temp_name RENAME TO index_name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3318464.3386131&#34;&gt;PASE: PostgreSQL Ultra-High-Dimensional Approximate Nearest Neighbor Search Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss: A Library for Efficient Similarity Search and Clustering of Dense Vectors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aaai.org/Papers/ICML/2003/ICML03-022.pdf&#34;&gt;Using the Triangle Inequality to Accelerate k-means&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf&#34;&gt;k-means++: The Advantage of Careful Seeding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.utexas.edu/users/inderjit/public_papers/concept_mlj.pdf&#34;&gt;Concept Decompositions for Large Sparse Text Data using Clustering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://github.com/pgvector/pgvector/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector/issues&#34;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and &lt;a href=&#34;https://github.com/pgvector/pgvector/pulls&#34;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; &#xA; &lt;li&gt;Suggest or add new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started with development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make installcheck        # regression tests&#xA;make prove_installcheck  # TAP tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run single tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make installcheck REGRESS=functions                    # regression test&#xA;make prove_installcheck PROVE_TESTS=test/t/001_wal.pl  # TAP test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable benchmarking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=-DIVFFLAT_BENCH make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resources for contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/extend-pgxs.html&#34;&gt;Extension Building Infrastructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/indexam.html&#34;&gt;Index Access Method Interface Definition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/13/generic-wal.html&#34;&gt;Generic WAL Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pmret/papermario</title>
    <updated>2023-04-30T01:51:36Z</updated>
    <id>tag:github.com,2023-04-30:/pmret/papermario</id>
    <link href="https://github.com/pmret/papermario" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decompilation of Paper Mario&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paper Mario&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jenkins.deco.mp/job/papermario/job/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?jobUrl=https%3A%2F%2Fjenkins.deco.mp%2Fjob%2Fpapermario%2Fjob%2Fmain&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/urUm3VG&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/279322074412089344?color=%237289DA&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34; alt=&#34;Discord Channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a work-in-progress decompilation of Paper Mario.&lt;/p&gt; &#xA;&lt;p&gt;It builds the following ROMs:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Region&lt;/th&gt; &#xA;   &lt;th&gt;SHA1 hash&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Progress&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;US&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;3837f44cda784b466c9a2d99df70d77c322b97a0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://papermar.io/progress-us&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://papermar.io/reports/progress_us_shield.json&#34; alt=&#34;Progress (US)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;JP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;b9cca3ff260b9ff427d981626b82f96de73586d3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://papermar.io/progress-jp&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://papermar.io/reports/progress_jp_shield.json&#34; alt=&#34;Progress (JP)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PAL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2111d39265a317414d359e35a7d971c4dfa5f9e1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://papermar.io/progress-pal&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://papermar.io/reports/progress_pal_shield.json&#34; alt=&#34;Progress (PAL)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iQue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5c724685085eba796537573dd6f84aaddedc8582&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://papermar.io/progress-ique&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://papermar.io/reports/progress_ique_shield.json&#34; alt=&#34;Progress (iQue)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To set up the repository, see &lt;a href=&#34;https://raw.githubusercontent.com/pmret/papermario/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/pmret/papermario/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information on how to contribute to the project. Any and all help is welcome!&lt;/p&gt; &#xA;&lt;p&gt;Also see our website at &lt;a href=&#34;https://papermar.io/&#34;&gt;papermar.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>audacity/audacity</title>
    <updated>2023-04-30T01:51:36Z</updated>
    <id>tag:github.com,2023-04-30:/audacity/audacity</id>
    <link href="https://github.com/audacity/audacity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio Editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.audacityteam.org&#34;&gt;&lt;img src=&#34;https://forum.audacityteam.org/styles/prosilver/theme/images/Audacity-logo_75px_trans_forum.png&#34; alt=&#34;Audacity&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.audacityteam.org&#34;&gt;&lt;strong&gt;Audacity&lt;/strong&gt;&lt;/a&gt; is an easy-to-use, multi-track audio editor and recorder for Windows, macOS, GNU/Linux and other operating systems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recording&lt;/strong&gt; from any real or virtual audio device that is available to the host system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Export / Import&lt;/strong&gt; a wide range of audio formats, extensible with FFmpeg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High quality&lt;/strong&gt; using 32-bit float audio processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugin Support&lt;/strong&gt; for multiple audio plugin formats, including VST, LV2, and AU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Macros&lt;/strong&gt; for chaining commands and batch processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scripting&lt;/strong&gt; in Python, Perl, or any other language that supports named pipes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nyquist&lt;/strong&gt; a powerful built-in scripting language that may also be used to create plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editing&lt;/strong&gt; multi-track editing with sample accuracy and arbitrary sample rates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; for VI users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analysis and visualization&lt;/strong&gt; tools to analyze audio or other signal data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;p&gt;For end users, the latest Windows and macOS release version of Audacity is available from the &lt;a href=&#34;https://www.audacityteam.org/download/&#34;&gt;Audacity website&lt;/a&gt;. Help with using Audacity is available at &lt;a href=&#34;https://audacityteam.org/help&#34;&gt;https://audacityteam.org/help&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Build instructions are available &lt;a href=&#34;https://github.com/audacity/audacity/raw/master/BUILDING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional development resources may be found in the &lt;a href=&#34;https://github.com/audacity/audacity/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Audacity is open source software licensed GPLv3. Most code files are GPLv2-or-later, with the notable exceptions being /lib-src (which contains third party libraries), as well as VST3-related code. Documentation is licensed CC-by 3.0 unless otherwise noted. Details can be found in &lt;a href=&#34;https://raw.githubusercontent.com/audacity/audacity/master/LICENSE.txt&#34;&gt;the license file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>