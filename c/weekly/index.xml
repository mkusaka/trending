<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T01:51:12Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>redis/hiredis</title>
    <updated>2023-07-16T01:51:12Z</updated>
    <id>tag:github.com,2023-07-16:/redis/hiredis</id>
    <link href="https://github.com/redis/hiredis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimalistic C client for Redis &gt;= 1.2&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/redis/hiredis/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/redis/hiredis/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This Readme reflects the latest changed in the master branch. See &lt;a href=&#34;https://github.com/redis/hiredis/tree/v1.0.0&#34;&gt;v1.0.0&lt;/a&gt; for the Readme and documentation for the latest release (&lt;a href=&#34;https://abi-laboratory.pro/?view=timeline&amp;amp;l=hiredis&#34;&gt;API/ABI history&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HIREDIS&lt;/h1&gt; &#xA;&lt;p&gt;Hiredis is a minimalistic C client library for the &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; database.&lt;/p&gt; &#xA;&lt;p&gt;It is minimalistic because it just adds minimal support for the protocol, but at the same time it uses a high level printf-alike API in order to make it much higher level than otherwise suggested by its minimal code base and the lack of explicit bindings for every Redis command.&lt;/p&gt; &#xA;&lt;p&gt;Apart from supporting sending commands and receiving replies, it comes with a reply parser that is decoupled from the I/O layer. It is a stream parser designed for easy reusability, which can for instance be used in higher level language bindings for efficient reply parsing.&lt;/p&gt; &#xA;&lt;p&gt;Hiredis only supports the binary-safe Redis protocol, so you can use it with any Redis version &amp;gt;= 1.2.0.&lt;/p&gt; &#xA;&lt;p&gt;The library comes with multiple APIs. There is the &lt;em&gt;synchronous API&lt;/em&gt;, the &lt;em&gt;asynchronous API&lt;/em&gt; and the &lt;em&gt;reply parsing API&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading to &lt;code&gt;1.1.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Almost all users will simply need to recompile their applications against the newer version of hiredis.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Hiredis can now return &lt;code&gt;nan&lt;/code&gt; in addition to &lt;code&gt;-inf&lt;/code&gt; and &lt;code&gt;inf&lt;/code&gt; in a &lt;code&gt;REDIS_REPLY_DOUBLE&lt;/code&gt;. Applications that deal with &lt;code&gt;RESP3&lt;/code&gt; doubles should make sure to account for this.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading to &lt;code&gt;1.0.2&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;NOTE: v1.0.1 erroneously bumped SONAME, which is why it is skipped here.&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Version 1.0.2 is simply 1.0.0 with a fix for &lt;a href=&#34;https://github.com/redis/hiredis/security/advisories/GHSA-hfm9-39pp-55p2&#34;&gt;CVE-2021-32765&lt;/a&gt;. They are otherwise identical.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading to &lt;code&gt;1.0.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.0.0 marks the first stable release of Hiredis. It includes some minor breaking changes, mostly to make the exposed API more uniform and self-explanatory. It also bundles the updated &lt;code&gt;sds&lt;/code&gt; library, to sync up with upstream and Redis. For code changes see the &lt;a href=&#34;https://raw.githubusercontent.com/redis/hiredis/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: As described below, a few member names have been changed but most applications should be able to upgrade with minor code changes and recompiling.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT: Breaking changes from &lt;code&gt;0.14.1&lt;/code&gt; -&amp;gt; &lt;code&gt;1.0.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;redisContext&lt;/code&gt; has two additional members (&lt;code&gt;free_privdata&lt;/code&gt;, and &lt;code&gt;privctx&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redisOptions.timeout&lt;/code&gt; has been renamed to &lt;code&gt;redisOptions.connect_timeout&lt;/code&gt;, and we&#39;ve added &lt;code&gt;redisOptions.command_timeout&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redisReplyObjectFunctions.createArray&lt;/code&gt; now takes &lt;code&gt;size_t&lt;/code&gt; instead of &lt;code&gt;int&lt;/code&gt; for its length parameter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IMPORTANT: Breaking changes when upgrading from 0.13.x -&amp;gt; 0.14.x&lt;/h2&gt; &#xA;&lt;p&gt;Bulk and multi-bulk lengths less than -1 or greater than &lt;code&gt;LLONG_MAX&lt;/code&gt; are now protocol errors. This is consistent with the RESP specification. On 32-bit platforms, the upper bound is lowered to &lt;code&gt;SIZE_MAX&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Change &lt;code&gt;redisReply.len&lt;/code&gt; to &lt;code&gt;size_t&lt;/code&gt;, as it denotes the the size of a string&lt;/p&gt; &#xA;&lt;p&gt;User code should compare this to &lt;code&gt;size_t&lt;/code&gt; values as well. If it was used to compare to other values, casting might be necessary or can be removed, if casting was applied before.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading from &lt;code&gt;&amp;lt;0.9.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Version 0.9.0 is a major overhaul of hiredis in every aspect. However, upgrading existing code using hiredis should not be a big pain. The key thing to keep in mind when upgrading is that hiredis &amp;gt;= 0.9.0 uses a &lt;code&gt;redisContext*&lt;/code&gt; to keep state, in contrast to the stateless 0.0.1 that only has a file descriptor to work with.&lt;/p&gt; &#xA;&lt;h2&gt;Synchronous API&lt;/h2&gt; &#xA;&lt;p&gt;To consume the synchronous API, there are only a few function calls that need to be introduced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *redisConnect(const char *ip, int port);&#xA;void *redisCommand(redisContext *c, const char *format, ...);&#xA;void freeReplyObject(void *reply);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisConnect&lt;/code&gt; is used to create a so-called &lt;code&gt;redisContext&lt;/code&gt;. The context is where Hiredis holds state for a connection. The &lt;code&gt;redisContext&lt;/code&gt; struct has an integer &lt;code&gt;err&lt;/code&gt; field that is non-zero when the connection is in an error state. The field &lt;code&gt;errstr&lt;/code&gt; will contain a string with a description of the error. More information on errors can be found in the &lt;strong&gt;Errors&lt;/strong&gt; section. After trying to connect to Redis using &lt;code&gt;redisConnect&lt;/code&gt; you should check the &lt;code&gt;err&lt;/code&gt; field to see if establishing the connection was successful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *c = redisConnect(&#34;127.0.0.1&#34;, 6379);&#xA;if (c == NULL || c-&amp;gt;err) {&#xA;    if (c) {&#xA;        printf(&#34;Error: %s\n&#34;, c-&amp;gt;errstr);&#xA;        // handle error&#xA;    } else {&#xA;        printf(&#34;Can&#39;t allocate redis context\n&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One can also use &lt;code&gt;redisConnectWithOptions&lt;/code&gt; which takes a &lt;code&gt;redisOptions&lt;/code&gt; argument that can be configured with endpoint information as well as many different flags to change how the &lt;code&gt;redisContext&lt;/code&gt; will be configured.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisOptions opt = {0};&#xA;&#xA;/* One can set the endpoint with one of our helper macros */&#xA;if (tcp) {&#xA;    REDIS_OPTIONS_SET_TCP(&amp;amp;opt, &#34;localhost&#34;, 6379);&#xA;} else {&#xA;    REDIS_OPTIONS_SET_UNIX(&amp;amp;opt, &#34;/tmp/redis.sock&#34;);&#xA;}&#xA;&#xA;/* And privdata can be specified with another helper */&#xA;REDIS_OPTIONS_SET_PRIVDATA(&amp;amp;opt, myPrivData, myPrivDataDtor);&#xA;&#xA;/* Finally various options may be set via the `options` member, as described below */&#xA;opt-&amp;gt;options |= REDIS_OPT_PREFER_IPV4;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a connection is lost, &lt;code&gt;int redisReconnect(redisContext *c)&lt;/code&gt; can be used to restore the connection using the same endpoint and options as the given context.&lt;/p&gt; &#xA;&lt;h3&gt;Configurable redisOptions flags&lt;/h3&gt; &#xA;&lt;p&gt;There are several flags you may set in the &lt;code&gt;redisOptions&lt;/code&gt; struct to change default behavior. You can specify the flags via the &lt;code&gt;redisOptions-&amp;gt;options&lt;/code&gt; member.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_OPT_NONBLOCK&lt;/td&gt; &#xA;   &lt;td&gt;Tells hiredis to make a non-blocking connection.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_OPT_REUSEADDR&lt;/td&gt; &#xA;   &lt;td&gt;Tells hiredis to set the &lt;a href=&#34;https://man7.org/linux/man-pages/man7/socket.7.html&#34;&gt;SO_REUSEADDR&lt;/a&gt; socket option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_OPT_PREFER_IPV4&lt;br&gt;REDIS_OPT_PREFER_IPV6&lt;br&gt;REDIS_OPT_PREFER_IP_UNSPEC&lt;/td&gt; &#xA;   &lt;td&gt;Informs hiredis to either prefer IPv4 or IPv6 when invoking &lt;a href=&#34;https://man7.org/linux/man-pages/man3/gai_strerror.3.html&#34;&gt;getaddrinfo&lt;/a&gt;. &lt;code&gt;REDIS_OPT_PREFER_IP_UNSPEC&lt;/code&gt; will cause hiredis to specify &lt;code&gt;AF_UNSPEC&lt;/code&gt; in the getaddrinfo call, which means both IPv4 and IPv6 addresses will be searched simultaneously.&lt;br&gt;Hiredis prefers IPv4 by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_OPT_NO_PUSH_AUTOFREE&lt;/td&gt; &#xA;   &lt;td&gt;Tells hiredis to not install the default RESP3 PUSH handler (which just intercepts and frees the replies). This is useful in situations where you want to process these messages in-band.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_OPT_NOAUTOFREEREPLIES&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ASYNC&lt;/strong&gt;: tells hiredis not to automatically invoke &lt;code&gt;freeReplyObject&lt;/code&gt; after executing the reply callback.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_OPT_NOAUTOFREE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ASYNC&lt;/strong&gt;: Tells hiredis not to automatically free the &lt;code&gt;redisAsyncContext&lt;/code&gt; on connection/communication failure, but only if the user makes an explicit call to &lt;code&gt;redisAsyncDisconnect&lt;/code&gt; or &lt;code&gt;redisAsyncFree&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: A &lt;code&gt;redisContext&lt;/code&gt; is not thread-safe.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other configuration using socket options&lt;/h3&gt; &#xA;&lt;p&gt;The following socket options are applied directly to the underlying socket. The values are not stored in the &lt;code&gt;redisContext&lt;/code&gt;, so they are not automatically applied when reconnecting using &lt;code&gt;redisReconnect()&lt;/code&gt;. These functions return &lt;code&gt;REDIS_OK&lt;/code&gt; on success. On failure, &lt;code&gt;REDIS_ERR&lt;/code&gt; is returned and the underlying connection is closed.&lt;/p&gt; &#xA;&lt;p&gt;To configure these for an asyncronous context (see &lt;em&gt;Asynchronous API&lt;/em&gt; below), use &lt;code&gt;ac-&amp;gt;c&lt;/code&gt; to get the redisContext out of an asyncRedisContext.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int redisEnableKeepAlive(redisContext *c);&#xA;int redisEnableKeepAliveWithInterval(redisContext *c, int interval);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enables TCP keepalive by setting the following socket options (with some variations depending on OS):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SO_KEEPALIVE&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TCP_KEEPALIVE&lt;/code&gt; or &lt;code&gt;TCP_KEEPIDLE&lt;/code&gt;, value configurable using the &lt;code&gt;interval&lt;/code&gt; parameter, default 15 seconds;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TCP_KEEPINTVL&lt;/code&gt; set to 1/3 of &lt;code&gt;interval&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TCP_KEEPCNT&lt;/code&gt; set to 3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int redisSetTcpUserTimeout(redisContext *c, unsigned int timeout);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;TCP_USER_TIMEOUT&lt;/code&gt; Linux-specific socket option which is as described in the &lt;code&gt;tcp&lt;/code&gt; man page:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When the value is greater than 0, it specifies the maximum amount of time in milliseconds that trans mitted data may remain unacknowledged before TCP will forcibly close the corresponding connection and return ETIMEDOUT to the application. If the option value is specified as 0, TCP will use the system default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Sending commands&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways to issue commands to Redis. The first that will be introduced is &lt;code&gt;redisCommand&lt;/code&gt;. This function takes a format similar to printf. In the simplest form, it is used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET foo bar&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The specifier &lt;code&gt;%s&lt;/code&gt; interpolates a string in the command, and uses &lt;code&gt;strlen&lt;/code&gt; to determine the length of the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET foo %s&#34;, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you need to pass binary safe strings in a command, the &lt;code&gt;%b&lt;/code&gt; specifier can be used. Together with a pointer to the string, it requires a &lt;code&gt;size_t&lt;/code&gt; length argument of the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET foo %b&#34;, value, (size_t) valuelen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Internally, Hiredis splits the command in different arguments and will convert it to the protocol used to communicate with Redis. One or more spaces separates arguments, so you can use the specifiers anywhere in an argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET key:%s %s&#34;, myid, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using replies&lt;/h3&gt; &#xA;&lt;p&gt;The return value of &lt;code&gt;redisCommand&lt;/code&gt; holds a reply when the command was successfully executed. When an error occurs, the return value is &lt;code&gt;NULL&lt;/code&gt; and the &lt;code&gt;err&lt;/code&gt; field in the context will be set (see section on &lt;strong&gt;Errors&lt;/strong&gt;). Once an error is returned the context cannot be reused and you should set up a new connection.&lt;/p&gt; &#xA;&lt;p&gt;The standard replies that &lt;code&gt;redisCommand&lt;/code&gt; are of the type &lt;code&gt;redisReply&lt;/code&gt;. The &lt;code&gt;type&lt;/code&gt; field in the &lt;code&gt;redisReply&lt;/code&gt; should be used to test what kind of reply was received:&lt;/p&gt; &#xA;&lt;h3&gt;RESP2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_STATUS&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with a status reply. The status string can be accessed using &lt;code&gt;reply-&amp;gt;str&lt;/code&gt;. The length of this string can be accessed using &lt;code&gt;reply-&amp;gt;len&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_ERROR&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with an error. The error string can be accessed identical to &lt;code&gt;REDIS_REPLY_STATUS&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_INTEGER&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with an integer. The integer value can be accessed using the &lt;code&gt;reply-&amp;gt;integer&lt;/code&gt; field of type &lt;code&gt;long long&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_NIL&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with a &lt;strong&gt;nil&lt;/strong&gt; object. There is no data to access.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_STRING&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A bulk (string) reply. The value of the reply can be accessed using &lt;code&gt;reply-&amp;gt;str&lt;/code&gt;. The length of this string can be accessed using &lt;code&gt;reply-&amp;gt;len&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_ARRAY&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A multi bulk reply. The number of elements in the multi bulk reply is stored in &lt;code&gt;reply-&amp;gt;elements&lt;/code&gt;. Every element in the multi bulk reply is a &lt;code&gt;redisReply&lt;/code&gt; object as well and can be accessed via &lt;code&gt;reply-&amp;gt;element[..index..]&lt;/code&gt;. Redis may reply with nested arrays but this is fully supported.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RESP3&lt;/h3&gt; &#xA;&lt;p&gt;Hiredis also supports every new &lt;code&gt;RESP3&lt;/code&gt; data type which are as follows. For more information about the protocol see the &lt;code&gt;RESP3&lt;/code&gt; &lt;a href=&#34;https://github.com/antirez/RESP3/raw/master/spec.md&#34;&gt;specification.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_DOUBLE&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with a double-precision floating point number. The value is stored as a string in the &lt;code&gt;str&lt;/code&gt; member, and can be converted with &lt;code&gt;strtod&lt;/code&gt; or similar.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_BOOL&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A boolean true/false reply. The value is stored in the &lt;code&gt;integer&lt;/code&gt; member and will be either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_MAP&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array with the added invariant that there will always be an even number of elements. The MAP is functionally equivalent to &lt;code&gt;REDIS_REPLY_ARRAY&lt;/code&gt; except for the previously mentioned invariant.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_SET&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array response where each entry is unique. Like the MAP type, the data is identical to an array response except there are no duplicate values.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_PUSH&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array that can be generated spontaneously by Redis. This array response will always contain at least two subelements. The first contains the type of &lt;code&gt;PUSH&lt;/code&gt; message (e.g. &lt;code&gt;message&lt;/code&gt;, or &lt;code&gt;invalidate&lt;/code&gt;), and the second being a sub-array with the &lt;code&gt;PUSH&lt;/code&gt; payload itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_ATTR&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array structurally identical to a &lt;code&gt;MAP&lt;/code&gt; but intended as meta-data about a reply. &lt;em&gt;As of Redis 6.0.6 this reply type is not used in Redis&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_BIGNUM&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A string representing an arbitrarily large signed or unsigned integer value. The number will be encoded as a string in the &lt;code&gt;str&lt;/code&gt; member of &lt;code&gt;redisReply&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_VERB&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A verbatim string, intended to be presented to the user without modification. The string payload is stored in the &lt;code&gt;str&lt;/code&gt; member, and type data is stored in the &lt;code&gt;vtype&lt;/code&gt; member (e.g. &lt;code&gt;txt&lt;/code&gt; for raw text or &lt;code&gt;md&lt;/code&gt; for markdown).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Replies should be freed using the &lt;code&gt;freeReplyObject()&lt;/code&gt; function. Note that this function will take care of freeing sub-reply objects contained in arrays and nested arrays, so there is no need for the user to free the sub replies (it is actually harmful and will corrupt the memory).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; the current version of hiredis (1.0.0) frees replies when the asynchronous API is used. This means you should not call &lt;code&gt;freeReplyObject&lt;/code&gt; when you use this API. The reply is cleaned up by hiredis &lt;em&gt;after&lt;/em&gt; the callback returns. We may introduce a flag to make this configurable in future versions of the library.&lt;/p&gt; &#xA;&lt;h3&gt;Cleaning up&lt;/h3&gt; &#xA;&lt;p&gt;To disconnect and free the context the following function can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisFree(redisContext *c);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function immediately closes the socket and then frees the allocations done in creating the context.&lt;/p&gt; &#xA;&lt;h3&gt;Sending commands (cont&#39;d)&lt;/h3&gt; &#xA;&lt;p&gt;Together with &lt;code&gt;redisCommand&lt;/code&gt;, the function &lt;code&gt;redisCommandArgv&lt;/code&gt; can be used to issue commands. It has the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes the number of arguments &lt;code&gt;argc&lt;/code&gt;, an array of strings &lt;code&gt;argv&lt;/code&gt; and the lengths of the arguments &lt;code&gt;argvlen&lt;/code&gt;. For convenience, &lt;code&gt;argvlen&lt;/code&gt; may be set to &lt;code&gt;NULL&lt;/code&gt; and the function will use &lt;code&gt;strlen(3)&lt;/code&gt; on every argument to determine its length. Obviously, when any of the arguments need to be binary safe, the entire array of lengths &lt;code&gt;argvlen&lt;/code&gt; should be provided.&lt;/p&gt; &#xA;&lt;p&gt;The return value has the same semantic as &lt;code&gt;redisCommand&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pipelining&lt;/h3&gt; &#xA;&lt;p&gt;To explain how Hiredis supports pipelining in a blocking connection, there needs to be understanding of the internal execution flow.&lt;/p&gt; &#xA;&lt;p&gt;When any of the functions in the &lt;code&gt;redisCommand&lt;/code&gt; family is called, Hiredis first formats the command according to the Redis protocol. The formatted command is then put in the output buffer of the context. This output buffer is dynamic, so it can hold any number of commands. After the command is put in the output buffer, &lt;code&gt;redisGetReply&lt;/code&gt; is called. This function has the following two execution paths:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The input buffer is non-empty: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Try to parse a single reply from the input buffer and return it&lt;/li&gt; &#xA;   &lt;li&gt;If no reply could be parsed, continue at &lt;em&gt;2&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The input buffer is empty: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Write the &lt;strong&gt;entire&lt;/strong&gt; output buffer to the socket&lt;/li&gt; &#xA;   &lt;li&gt;Read from the socket until a single reply could be parsed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisGetReply&lt;/code&gt; is exported as part of the Hiredis API and can be used when a reply is expected on the socket. To pipeline commands, the only thing that needs to be done is filling up the output buffer. For this cause, two commands can be used that are identical to the &lt;code&gt;redisCommand&lt;/code&gt; family, apart from not returning a reply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisAppendCommand(redisContext *c, const char *format, ...);&#xA;void redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After calling either function one or more times, &lt;code&gt;redisGetReply&lt;/code&gt; can be used to receive the subsequent replies. The return value for this function is either &lt;code&gt;REDIS_OK&lt;/code&gt; or &lt;code&gt;REDIS_ERR&lt;/code&gt;, where the latter means an error occurred while reading a reply. Just as with the other commands, the &lt;code&gt;err&lt;/code&gt; field in the context can be used to find out what the cause of this error is.&lt;/p&gt; &#xA;&lt;p&gt;The following examples shows a simple pipeline (resulting in only a single call to &lt;code&gt;write(2)&lt;/code&gt; and a single call to &lt;code&gt;read(2)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisReply *reply;&#xA;redisAppendCommand(context,&#34;SET foo bar&#34;);&#xA;redisAppendCommand(context,&#34;GET foo&#34;);&#xA;redisGetReply(context,(void**)&amp;amp;reply); // reply for SET&#xA;freeReplyObject(reply);&#xA;redisGetReply(context,(void**)&amp;amp;reply); // reply for GET&#xA;freeReplyObject(reply);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This API can also be used to implement a blocking subscriber:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context,&#34;SUBSCRIBE foo&#34;);&#xA;freeReplyObject(reply);&#xA;while(redisGetReply(context,(void *)&amp;amp;reply) == REDIS_OK) {&#xA;    // consume message&#xA;    freeReplyObject(reply);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;When a function call is not successful, depending on the function either &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;REDIS_ERR&lt;/code&gt; is returned. The &lt;code&gt;err&lt;/code&gt; field inside the context will be non-zero and set to one of the following constants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_IO&lt;/code&gt;&lt;/strong&gt;: There was an I/O error while creating the connection, trying to write to the socket or read from the socket. If you included &lt;code&gt;errno.h&lt;/code&gt; in your application, you can use the global &lt;code&gt;errno&lt;/code&gt; variable to find out what is wrong.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_EOF&lt;/code&gt;&lt;/strong&gt;: The server closed the connection which resulted in an empty read.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_PROTOCOL&lt;/code&gt;&lt;/strong&gt;: There was an error while parsing the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_OTHER&lt;/code&gt;&lt;/strong&gt;: Any other error. Currently, it is only used when a specified hostname to connect to cannot be resolved.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In every case, the &lt;code&gt;errstr&lt;/code&gt; field in the context will be set to hold a string representation of the error.&lt;/p&gt; &#xA;&lt;h2&gt;Asynchronous API&lt;/h2&gt; &#xA;&lt;p&gt;Hiredis comes with an asynchronous API that works easily with any event library. Examples are bundled that show using Hiredis with &lt;a href=&#34;http://software.schmorp.de/pkg/libev.html&#34;&gt;libev&lt;/a&gt; and &lt;a href=&#34;http://monkey.org/~provos/libevent/&#34;&gt;libevent&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisAsyncConnect&lt;/code&gt; can be used to establish a non-blocking connection to Redis. It returns a pointer to the newly created &lt;code&gt;redisAsyncContext&lt;/code&gt; struct. The &lt;code&gt;err&lt;/code&gt; field should be checked after creation to see if there were errors creating the connection. Because the connection that will be created is non-blocking, the kernel is not able to instantly return if the specified host and port is able to accept a connection. In case of error, it is the caller&#39;s responsibility to free the context using &lt;code&gt;redisAsyncFree()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: A &lt;code&gt;redisAsyncContext&lt;/code&gt; is not thread-safe.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;An application function creating a connection might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void appConnect(myAppData *appData)&#xA;{&#xA;    redisAsyncContext *c = redisAsyncConnect(&#34;127.0.0.1&#34;, 6379);&#xA;    if (c-&amp;gt;err) {&#xA;        printf(&#34;Error: %s\n&#34;, c-&amp;gt;errstr);&#xA;        // handle error&#xA;        redisAsyncFree(c);&#xA;        c = NULL;&#xA;    } else {&#xA;        appData-&amp;gt;context = c;&#xA;        appData-&amp;gt;connecting = 1;&#xA;        c-&amp;gt;data = appData; /* store application pointer for the callbacks */&#xA;        redisAsyncSetConnectCallback(c, appOnConnect);&#xA;        redisAsyncSetDisconnectCallback(c, appOnDisconnect);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The asynchronous context &lt;em&gt;should&lt;/em&gt; hold a &lt;em&gt;connect&lt;/em&gt; callback function that is called when the connection attempt completes, either successfully or with an error. It &lt;em&gt;can&lt;/em&gt; also hold a &lt;em&gt;disconnect&lt;/em&gt; callback function that is called when the connection is disconnected (either because of an error or per user request). Both callbacks should have the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void(const redisAsyncContext *c, int status);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On a &lt;em&gt;connect&lt;/em&gt;, the &lt;code&gt;status&lt;/code&gt; argument is set to &lt;code&gt;REDIS_OK&lt;/code&gt; if the connection attempt succeeded. In this case, the context is ready to accept commands. If it is called with &lt;code&gt;REDIS_ERR&lt;/code&gt; then the connection attempt failed. The &lt;code&gt;err&lt;/code&gt; field in the context can be accessed to find out the cause of the error. After a failed connection attempt, the context object is automatically freed by the library after calling the connect callback. This may be a good point to create a new context and retry the connection.&lt;/p&gt; &#xA;&lt;p&gt;On a disconnect, the &lt;code&gt;status&lt;/code&gt; argument is set to &lt;code&gt;REDIS_OK&lt;/code&gt; when disconnection was initiated by the user, or &lt;code&gt;REDIS_ERR&lt;/code&gt; when the disconnection was caused by an error. When it is &lt;code&gt;REDIS_ERR&lt;/code&gt;, the &lt;code&gt;err&lt;/code&gt; field in the context can be accessed to find out the cause of the error.&lt;/p&gt; &#xA;&lt;p&gt;The context object is always freed after the disconnect callback fired. When a reconnect is needed, the disconnect callback is a good point to do so.&lt;/p&gt; &#xA;&lt;p&gt;Setting the connect or disconnect callbacks can only be done once per context. For subsequent calls the api will return &lt;code&gt;REDIS_ERR&lt;/code&gt;. The function to set the callbacks have the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* Alternatively you can use redisAsyncSetConnectCallbackNC which will be passed a non-const&#xA;   redisAsyncContext* on invocation (e.g. allowing writes to the privdata member). */&#xA;int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn);&#xA;int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ac-&amp;gt;data&lt;/code&gt; may be used to pass user data to both callbacks. A typical implementation might look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void appOnConnect(redisAsyncContext *c, int status)&#xA;{&#xA;    myAppData *appData = (myAppData*)c-&amp;gt;data; /* get my application specific context*/&#xA;    appData-&amp;gt;connecting = 0;&#xA;    if (status == REDIS_OK) {&#xA;        appData-&amp;gt;connected = 1;&#xA;    } else {&#xA;        appData-&amp;gt;connected = 0;&#xA;        appData-&amp;gt;err = c-&amp;gt;err;&#xA;        appData-&amp;gt;context = NULL; /* avoid stale pointer when callback returns */&#xA;    }&#xA;    appAttemptReconnect();&#xA;}&#xA;&#xA;void appOnDisconnect(redisAsyncContext *c, int status)&#xA;{&#xA;    myAppData *appData = (myAppData*)c-&amp;gt;data; /* get my application specific context*/&#xA;    appData-&amp;gt;connected = 0;&#xA;    appData-&amp;gt;err = c-&amp;gt;err;&#xA;    appData-&amp;gt;context = NULL; /* avoid stale pointer when callback returns */&#xA;    if (status == REDIS_OK) {&#xA;        appNotifyDisconnectCompleted(mydata);&#xA;    } else {&#xA;        appNotifyUnexpectedDisconnect(mydata);&#xA;        appAttemptReconnect();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending commands and their callbacks&lt;/h3&gt; &#xA;&lt;p&gt;In an asynchronous context, commands are automatically pipelined due to the nature of an event loop. Therefore, unlike the synchronous API, there is only a single way to send commands. Because commands are sent to Redis asynchronously, issuing a command requires a callback function that is called when the reply is received. Reply callbacks should have the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void(redisAsyncContext *c, void *reply, void *privdata);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;privdata&lt;/code&gt; argument can be used to curry arbitrary data to the callback from the point where the command is initially queued for execution.&lt;/p&gt; &#xA;&lt;p&gt;The functions that can be used to issue commands in an asynchronous context are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int redisAsyncCommand(&#xA;  redisAsyncContext *ac, redisCallbackFn *fn, void *privdata,&#xA;  const char *format, ...);&#xA;int redisAsyncCommandArgv(&#xA;  redisAsyncContext *ac, redisCallbackFn *fn, void *privdata,&#xA;  int argc, const char **argv, const size_t *argvlen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both functions work like their blocking counterparts. The return value is &lt;code&gt;REDIS_OK&lt;/code&gt; when the command was successfully added to the output buffer and &lt;code&gt;REDIS_ERR&lt;/code&gt; otherwise. Example: when the connection is being disconnected per user-request, no new commands may be added to the output buffer and &lt;code&gt;REDIS_ERR&lt;/code&gt; is returned on calls to the &lt;code&gt;redisAsyncCommand&lt;/code&gt; family.&lt;/p&gt; &#xA;&lt;p&gt;If the reply for a command with a &lt;code&gt;NULL&lt;/code&gt; callback is read, it is immediately freed. When the callback for a command is non-&lt;code&gt;NULL&lt;/code&gt;, the memory is freed immediately following the callback: the reply is only valid for the duration of the callback.&lt;/p&gt; &#xA;&lt;p&gt;All pending callbacks are called with a &lt;code&gt;NULL&lt;/code&gt; reply when the context encountered an error.&lt;/p&gt; &#xA;&lt;p&gt;For every command issued, with the exception of &lt;strong&gt;SUBSCRIBE&lt;/strong&gt; and &lt;strong&gt;PSUBSCRIBE&lt;/strong&gt;, the callback is called exactly once. Even if the context object id disconnected or deleted, every pending callback will be called with a &lt;code&gt;NULL&lt;/code&gt; reply.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;SUBSCRIBE&lt;/strong&gt; and &lt;strong&gt;PSUBSCRIBE&lt;/strong&gt;, the callbacks may be called repeatedly until an &lt;code&gt;unsubscribe&lt;/code&gt; message arrives. This will be the last invocation of the callback. In case of error, the callbacks may receive a final &lt;code&gt;NULL&lt;/code&gt; reply instead.&lt;/p&gt; &#xA;&lt;h3&gt;Disconnecting&lt;/h3&gt; &#xA;&lt;p&gt;An asynchronous connection can be terminated using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisAsyncDisconnect(redisAsyncContext *ac);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this function is called, the connection is &lt;strong&gt;not&lt;/strong&gt; immediately terminated. Instead, new commands are no longer accepted and the connection is only terminated when all pending commands have been written to the socket, their respective replies have been read and their respective callbacks have been executed. After this, the disconnection callback is executed with the &lt;code&gt;REDIS_OK&lt;/code&gt; status and the context object is freed.&lt;/p&gt; &#xA;&lt;p&gt;The connection can be forcefully disconnected using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisAsyncFree(redisAsyncContext *ac);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, nothing more is written to the socket, all pending callbacks are called with a &lt;code&gt;NULL&lt;/code&gt; reply and the disconnection callback is called with &lt;code&gt;REDIS_OK&lt;/code&gt;, after which the context object is freed.&lt;/p&gt; &#xA;&lt;h3&gt;Hooking it up to event library &lt;em&gt;X&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are a few hooks that need to be set on the context object after it is created. See the &lt;code&gt;adapters/&lt;/code&gt; directory for bindings to &lt;em&gt;libev&lt;/em&gt; and &lt;em&gt;libevent&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reply parsing API&lt;/h2&gt; &#xA;&lt;p&gt;Hiredis comes with a reply parsing API that makes it easy for writing higher level language bindings.&lt;/p&gt; &#xA;&lt;p&gt;The reply parsing API consists of the following functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisReader *redisReaderCreate(void);&#xA;void redisReaderFree(redisReader *reader);&#xA;int redisReaderFeed(redisReader *reader, const char *buf, size_t len);&#xA;int redisReaderGetReply(redisReader *reader, void **reply);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same set of functions are used internally by hiredis when creating a normal Redis context, the above API just exposes it to the user for a direct usage.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisReaderCreate&lt;/code&gt; creates a &lt;code&gt;redisReader&lt;/code&gt; structure that holds a buffer with unparsed data and state for the protocol parser.&lt;/p&gt; &#xA;&lt;p&gt;Incoming data -- most likely from a socket -- can be placed in the internal buffer of the &lt;code&gt;redisReader&lt;/code&gt; using &lt;code&gt;redisReaderFeed&lt;/code&gt;. This function will make a copy of the buffer pointed to by &lt;code&gt;buf&lt;/code&gt; for &lt;code&gt;len&lt;/code&gt; bytes. This data is parsed when &lt;code&gt;redisReaderGetReply&lt;/code&gt; is called. This function returns an integer status and a reply object (as described above) via &lt;code&gt;void **reply&lt;/code&gt;. The returned status can be either &lt;code&gt;REDIS_OK&lt;/code&gt; or &lt;code&gt;REDIS_ERR&lt;/code&gt;, where the latter means something went wrong (either a protocol error, or an out of memory error).&lt;/p&gt; &#xA;&lt;p&gt;The parser limits the level of nesting for multi bulk payloads to 7. If the multi bulk nesting level is higher than this, the parser returns an error.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing replies&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisReaderGetReply&lt;/code&gt; creates &lt;code&gt;redisReply&lt;/code&gt; and makes the function argument &lt;code&gt;reply&lt;/code&gt; point to the created &lt;code&gt;redisReply&lt;/code&gt; variable. For instance, if the response of type &lt;code&gt;REDIS_REPLY_STATUS&lt;/code&gt; then the &lt;code&gt;str&lt;/code&gt; field of &lt;code&gt;redisReply&lt;/code&gt; will hold the status as a vanilla C string. However, the functions that are responsible for creating instances of the &lt;code&gt;redisReply&lt;/code&gt; can be customized by setting the &lt;code&gt;fn&lt;/code&gt; field on the &lt;code&gt;redisReader&lt;/code&gt; struct. This should be done immediately after creating the &lt;code&gt;redisReader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://github.com/pietern/hiredis-rb/raw/master/ext/hiredis_ext/reader.c&#34;&gt;hiredis-rb&lt;/a&gt; uses customized reply object functions to create Ruby objects.&lt;/p&gt; &#xA;&lt;h3&gt;Reader max buffer&lt;/h3&gt; &#xA;&lt;p&gt;Both when using the Reader API directly or when using it indirectly via a normal Redis context, the redisReader structure uses a buffer in order to accumulate data from the server. Usually this buffer is destroyed when it is empty and is larger than 16 KiB in order to avoid wasting memory in unused buffers&lt;/p&gt; &#xA;&lt;p&gt;However when working with very big payloads destroying the buffer may slow down performances considerably, so it is possible to modify the max size of an idle buffer changing the value of the &lt;code&gt;maxbuf&lt;/code&gt; field of the reader structure to the desired value. The special value of 0 means that there is no maximum value for an idle buffer, so the buffer will never get freed.&lt;/p&gt; &#xA;&lt;p&gt;For instance if you have a normal Redis context you can set the maximum idle buffer to zero (unlimited) just with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;context-&amp;gt;reader-&amp;gt;maxbuf = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should be done only in order to maximize performances when working with large payloads. The context should be set back to &lt;code&gt;REDIS_READER_MAX_BUF&lt;/code&gt; again as soon as possible in order to prevent allocation of useless memory.&lt;/p&gt; &#xA;&lt;h3&gt;Reader max array elements&lt;/h3&gt; &#xA;&lt;p&gt;By default the hiredis reply parser sets the maximum number of multi-bulk elements to 2^32 - 1 or 4,294,967,295 entries. If you need to process multi-bulk replies with more than this many elements you can set the value higher or to zero, meaning unlimited with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;context-&amp;gt;reader-&amp;gt;maxelements = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SSL/TLS Support&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;SSL/TLS support is not built by default and requires an explicit flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make USE_SSL=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires OpenSSL development package (e.g. including header files to be available.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, SSL/TLS support is built into extra &lt;code&gt;libhiredis_ssl.a&lt;/code&gt; and &lt;code&gt;libhiredis_ssl.so&lt;/code&gt; static/dynamic libraries. This leaves the original libraries unaffected so no additional dependencies are introduced.&lt;/p&gt; &#xA;&lt;h3&gt;Using it&lt;/h3&gt; &#xA;&lt;p&gt;First, you&#39;ll need to make sure you include the SSL header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;hiredis/hiredis.h&amp;gt;&#xA;#include &amp;lt;hiredis/hiredis_ssl.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to link against &lt;code&gt;libhiredis_ssl&lt;/code&gt;, &lt;strong&gt;in addition&lt;/strong&gt; to &lt;code&gt;libhiredis&lt;/code&gt; and add &lt;code&gt;-lssl -lcrypto&lt;/code&gt; to satisfy its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Hiredis implements SSL/TLS on top of its normal &lt;code&gt;redisContext&lt;/code&gt; or &lt;code&gt;redisAsyncContext&lt;/code&gt;, so you will need to establish a connection first and then initiate an SSL/TLS handshake.&lt;/p&gt; &#xA;&lt;h4&gt;Hiredis OpenSSL Wrappers&lt;/h4&gt; &#xA;&lt;p&gt;Before Hiredis can negotiate an SSL/TLS connection, it is necessary to initialize OpenSSL and create a context. You can do that in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Work directly with the OpenSSL API to initialize the library&#39;s global context and create &lt;code&gt;SSL_CTX *&lt;/code&gt; and &lt;code&gt;SSL *&lt;/code&gt; contexts. With an &lt;code&gt;SSL *&lt;/code&gt; object you can call &lt;code&gt;redisInitiateSSL()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Work with a set of Hiredis-provided wrappers around OpenSSL, create a &lt;code&gt;redisSSLContext&lt;/code&gt; object to hold configuration and use &lt;code&gt;redisInitiateSSLWithContext()&lt;/code&gt; to initiate the SSL/TLS handshake.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* An Hiredis SSL context. It holds SSL configuration and can be reused across&#xA; * many contexts.&#xA; */&#xA;redisSSLContext *ssl_context;&#xA;&#xA;/* An error variable to indicate what went wrong, if the context fails to&#xA; * initialize.&#xA; */&#xA;redisSSLContextError ssl_error = REDIS_SSL_CTX_NONE;&#xA;&#xA;/* Initialize global OpenSSL state.&#xA; *&#xA; * You should call this only once when your app initializes, and only if&#xA; * you don&#39;t explicitly or implicitly initialize OpenSSL it elsewhere.&#xA; */&#xA;redisInitOpenSSL();&#xA;&#xA;/* Create SSL context */&#xA;ssl_context = redisCreateSSLContext(&#xA;    &#34;cacertbundle.crt&#34;,     /* File name of trusted CA/ca bundle file, optional */&#xA;    &#34;/path/to/certs&#34;,       /* Path of trusted certificates, optional */&#xA;    &#34;client_cert.pem&#34;,      /* File name of client certificate file, optional */&#xA;    &#34;client_key.pem&#34;,       /* File name of client private key, optional */&#xA;    &#34;redis.mydomain.com&#34;,   /* Server name to request (SNI), optional */&#xA;    &amp;amp;ssl_error);&#xA;&#xA;if(ssl_context == NULL || ssl_error != REDIS_SSL_CTX_NONE) {&#xA;    /* Handle error and abort... */&#xA;    /* e.g.&#xA;    printf(&#34;SSL error: %s\n&#34;,&#xA;        (ssl_error != REDIS_SSL_CTX_NONE) ?&#xA;            redisSSLContextGetError(ssl_error) : &#34;Unknown error&#34;);&#xA;    // Abort&#xA;    */&#xA;}&#xA;&#xA;/* Create Redis context and establish connection */&#xA;c = redisConnect(&#34;localhost&#34;, 6443);&#xA;if (c == NULL || c-&amp;gt;err) {&#xA;    /* Handle error and abort... */&#xA;}&#xA;&#xA;/* Negotiate SSL/TLS */&#xA;if (redisInitiateSSLWithContext(c, ssl_context) != REDIS_OK) {&#xA;    /* Handle error, in c-&amp;gt;err / c-&amp;gt;errstr */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RESP3 PUSH replies&lt;/h2&gt; &#xA;&lt;p&gt;Redis 6.0 introduced PUSH replies with the reply-type &lt;code&gt;&amp;gt;&lt;/code&gt;. These messages are generated spontaneously and can arrive at any time, so must be handled using callbacks.&lt;/p&gt; &#xA;&lt;h3&gt;Default behavior&lt;/h3&gt; &#xA;&lt;p&gt;Hiredis installs handlers on &lt;code&gt;redisContext&lt;/code&gt; and &lt;code&gt;redisAsyncContext&lt;/code&gt; by default, which will intercept and free any PUSH replies detected. This means existing code will work as-is after upgrading to Redis 6 and switching to &lt;code&gt;RESP3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom PUSH handler prototypes&lt;/h3&gt; &#xA;&lt;p&gt;The callback prototypes differ between &lt;code&gt;redisContext&lt;/code&gt; and &lt;code&gt;redisAsyncContext&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;redisContext&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void my_push_handler(void *privdata, void *reply) {&#xA;    /* Handle the reply */&#xA;&#xA;    /* Note: We need to free the reply in our custom handler for&#xA;             blocking contexts.  This lets us keep the reply if&#xA;             we want. */&#xA;    freeReplyObject(reply);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;redisAsyncContext&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void my_async_push_handler(redisAsyncContext *ac, void *reply) {&#xA;    /* Handle the reply */&#xA;&#xA;    /* Note:  Because async hiredis always frees replies, you should&#xA;              not call freeReplyObject in an async push callback. */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing a custom handler&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to set your own PUSH handlers.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;push_cb&lt;/code&gt; or &lt;code&gt;async_push_cb&lt;/code&gt; in the &lt;code&gt;redisOptions&lt;/code&gt; struct and connect with &lt;code&gt;redisConnectWithOptions&lt;/code&gt; or &lt;code&gt;redisAsyncConnectWithOptions&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisOptions = {0};&#xA;REDIS_OPTIONS_SET_TCP(&amp;amp;options, &#34;127.0.0.1&#34;, 6379);&#xA;options-&amp;gt;push_cb = my_push_handler;&#xA;redisContext *context = redisConnectWithOptions(&amp;amp;options);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;redisSetPushCallback&lt;/code&gt; or &lt;code&gt;redisAsyncSetPushCallback&lt;/code&gt; on a connected context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *context = redisConnect(&#34;127.0.0.1&#34;, 6379);&#xA;redisSetPushCallback(context, my_push_handler);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note &lt;code&gt;redisSetPushCallback&lt;/code&gt; and &lt;code&gt;redisAsyncSetPushCallback&lt;/code&gt; both return any currently configured handler, making it easy to override and then return to the old value.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Specifying no handler&lt;/h3&gt; &#xA;&lt;p&gt;If you have a unique use-case where you don&#39;t want hiredis to automatically intercept and free PUSH replies, you will want to configure no handler at all. This can be done in two ways.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the &lt;code&gt;REDIS_OPT_NO_PUSH_AUTOFREE&lt;/code&gt; flag in &lt;code&gt;redisOptions&lt;/code&gt; and leave the callback function pointer &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisOptions = {0};&#xA;REDIS_OPTIONS_SET_TCP(&amp;amp;options, &#34;127.0.0.1&#34;, 6379);&#xA;options-&amp;gt;options |= REDIS_OPT_NO_PUSH_AUTOFREE;&#xA;redisContext *context = redisConnectWithOptions(&amp;amp;options);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;redisSetPushCallback&lt;/code&gt; with &lt;code&gt;NULL&lt;/code&gt; once connected.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *context = redisConnect(&#34;127.0.0.1&#34;, 6379);&#xA;redisSetPushCallback(context, NULL);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: With no handler configured, calls to &lt;code&gt;redisCommand&lt;/code&gt; may generate more than one reply, so this strategy is only applicable when there&#39;s some kind of blocking &lt;code&gt;redisGetReply()&lt;/code&gt; loop (e.g. &lt;code&gt;MONITOR&lt;/code&gt; or &lt;code&gt;SUBSCRIBE&lt;/code&gt; workloads).&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Allocator injection&lt;/h2&gt; &#xA;&lt;p&gt;Hiredis uses a pass-thru structure of function pointers defined in &lt;a href=&#34;https://github.com/redis/hiredis/raw/f5d25850/alloc.h#L41&#34;&gt;alloc.h&lt;/a&gt; that contain the currently configured allocation and deallocation functions. By default they just point to libc (&lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;calloc&lt;/code&gt;, &lt;code&gt;realloc&lt;/code&gt;, etc).&lt;/p&gt; &#xA;&lt;h3&gt;Overriding&lt;/h3&gt; &#xA;&lt;p&gt;One can override the allocators like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hiredisAllocFuncs myfuncs = {&#xA;    .mallocFn = my_malloc,&#xA;    .callocFn = my_calloc,&#xA;    .reallocFn = my_realloc,&#xA;    .strdupFn = my_strdup,&#xA;    .freeFn = my_free,&#xA;};&#xA;&#xA;// Override allocators (function returns current allocators if needed)&#xA;hiredisAllocFuncs orig = hiredisSetAllocators(&amp;amp;myfuncs);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reset the allocators to their default libc function simply call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hiredisResetAllocators();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AUTHORS&lt;/h2&gt; &#xA;&lt;p&gt;Salvatore Sanfilippo (antirez at gmail),&lt;br&gt; Pieter Noordhuis (pcnoordhuis at gmail)&lt;br&gt; Michael Grunder (michael dot grunder at gmail)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Hiredis is released under the BSD license.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>riscv-software-src/riscv-isa-sim</title>
    <updated>2023-07-16T01:51:12Z</updated>
    <id>tag:github.com,2023-07-16:/riscv-software-src/riscv-isa-sim</id>
    <link href="https://github.com/riscv-software-src/riscv-isa-sim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spike, a RISC-V ISA Simulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spike RISC-V ISA Simulator&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Spike, the RISC-V ISA Simulator, implements a functional model of one or more RISC-V harts. It is named after the golden spike used to celebrate the completion of the US transcontinental railway.&lt;/p&gt; &#xA;&lt;p&gt;Spike supports the following RISC-V ISA features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RV32I and RV64I base ISAs, v2.1&lt;/li&gt; &#xA; &lt;li&gt;RV32E and RV64E base ISAs, v1.9&lt;/li&gt; &#xA; &lt;li&gt;Zifencei extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;Zicsr extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;M extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;A extension, v2.1&lt;/li&gt; &#xA; &lt;li&gt;F extension, v2.2&lt;/li&gt; &#xA; &lt;li&gt;D extension, v2.2&lt;/li&gt; &#xA; &lt;li&gt;Q extension, v2.2&lt;/li&gt; &#xA; &lt;li&gt;C extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;Zbkb, Zbkc, Zbkx, Zknd, Zkne, Zknh, Zksed, Zksh scalar cryptography extensions (Zk, Zkn, and Zks groups), v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zkr virtual entropy source emulation, v1.0&lt;/li&gt; &#xA; &lt;li&gt;V extension, v1.0 (&lt;em&gt;requires a 64-bit host&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;P extension, v0.9.2&lt;/li&gt; &#xA; &lt;li&gt;Zba extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zbb extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zbc extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zbs extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zfh and Zfhmin half-precision floating-point extensions, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zfinx extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zmmul integer multiplication extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zicbom, Zicbop, Zicboz cache-block maintenance extensions, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Conformance to both RVWMO and RVTSO (Spike is sequentially consistent)&lt;/li&gt; &#xA; &lt;li&gt;Machine, Supervisor, and User modes, v1.11&lt;/li&gt; &#xA; &lt;li&gt;Hypervisor extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Svnapot extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Svpbmt extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Svinval extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Sdext extension, v1.0-STABLE&lt;/li&gt; &#xA; &lt;li&gt;Sdtrig extension, v1.0-STABLE &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4 triggers support type={2, 3, 4, 5, 6, 15} (mcontrol, icount, itrigger, etrigger, mcontrol6, disabled)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Smepmp extension v1.0&lt;/li&gt; &#xA; &lt;li&gt;Smstateen extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Sscofpmf v0.5.2&lt;/li&gt; &#xA; &lt;li&gt;Zca extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zcb extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zcf extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zcd extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zcmp extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zcmt extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zfbfmin extension, v0.6&lt;/li&gt; &#xA; &lt;li&gt;Zvfbfmin extension, v0.6&lt;/li&gt; &#xA; &lt;li&gt;Zvfbfwma extension, v0.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning and APIs&lt;/h2&gt; &#xA;&lt;p&gt;Projects are versioned primarily to indicate when the API has been extended or rendered incompatible. In that spirit, Spike aims to follow the &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; versioning scheme, in which major version numbers are incremented when backwards-incompatible API changes are made; minor version numbers are incremented when new APIs are added; and patch version numbers are incremented when bugs are fixed in a backwards-compatible manner.&lt;/p&gt; &#xA;&lt;p&gt;Spike&#39;s principal public API is the RISC-V ISA. &lt;em&gt;The C++ interface to Spike&#39;s internals is &lt;strong&gt;not&lt;/strong&gt; considered a public API at this time&lt;/em&gt;, and backwards-incompatible changes to this interface &lt;em&gt;will&lt;/em&gt; be made without incrementing the major version number.&lt;/p&gt; &#xA;&lt;h2&gt;Build Steps&lt;/h2&gt; &#xA;&lt;p&gt;We assume that the RISCV environment variable is set to the RISC-V tools install path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install device-tree-compiler&#xA;$ mkdir build&#xA;$ cd build&#xA;$ ../configure --prefix=$RISCV&#xA;$ make&#xA;$ [sudo] make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system uses the &lt;code&gt;yum&lt;/code&gt; package manager, you can substitute &lt;code&gt;yum install dtc&lt;/code&gt; for the first step.&lt;/p&gt; &#xA;&lt;h2&gt;Build Steps on OpenBSD&lt;/h2&gt; &#xA;&lt;p&gt;Install bash, gmake, dtc, and use clang.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pkg_add bash gmake dtc&#xA;$ exec bash&#xA;$ export CC=cc; export CXX=c++&#xA;$ mkdir build&#xA;$ cd build&#xA;$ ../configure --prefix=$RISCV&#xA;$ gmake&#xA;$ [doas] make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling and Running a Simple C Program&lt;/h2&gt; &#xA;&lt;p&gt;Install spike (see Build Steps), riscv-gnu-toolchain, and riscv-pk.&lt;/p&gt; &#xA;&lt;p&gt;Write a short C program and name it hello.c. Then, compile it into a RISC-V ELF binary named hello:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ riscv64-unknown-elf-gcc -o hello hello.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can simulate the program atop the proxy kernel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spike pk hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simulating a New Instruction&lt;/h2&gt; &#xA;&lt;p&gt;Adding an instruction to the simulator requires two steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Describe the instruction&#39;s functional behavior in the file riscv/insns/&amp;lt;new_instruction_name&amp;gt;.h. Examine other instructions in that directory as a starting point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the opcode and opcode mask to riscv/opcodes.h. Alternatively, add it to the riscv-opcodes package, and it will do so for you:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd ../riscv-opcodes&#xA; $ vi opcodes       // add a line for the new instruction&#xA; $ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rebuild the simulator.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Interactive Debug Mode&lt;/h2&gt; &#xA;&lt;p&gt;To invoke interactive debug mode, launch spike with -d:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spike -d pk hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the contents of an integer register (0 is for core 0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: reg 0 a0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the contents of a floating point register:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: fregs 0 ft0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: fregd 0 ft0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;depending upon whether you wish to print the register as single- or double-precision.&lt;/p&gt; &#xA;&lt;p&gt;To see the contents of a memory location (physical address in hex):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: mem 2020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the contents of memory with a virtual address (0 for core 0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: mem 0 2020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can advance by one instruction by pressing the enter key. You can also execute until a desired equality is reached:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: until pc 0 2020                   (stop when pc=2020)&#xA;: until reg 0 mie a                 (stop when register mie=0xa)&#xA;: until mem 2020 50a9907311096993   (stop when mem[2020]=50a9907311096993)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can execute as long as an equality is true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: while mem 2020 50a9907311096993&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can continue execution indefinitely by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At any point during execution (even without -d), you can enter the interactive debug mode with &lt;code&gt;&amp;lt;control&amp;gt;-&amp;lt;c&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To end the simulation from the debug prompt, press &lt;code&gt;&amp;lt;control&amp;gt;-&amp;lt;c&amp;gt;&lt;/code&gt; or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging With Gdb&lt;/h2&gt; &#xA;&lt;p&gt;An alternative to interactive debug mode is to attach using gdb. Because spike tries to be like real hardware, you also need OpenOCD to do that. OpenOCD doesn&#39;t currently know about address translation, so it&#39;s not possible to easily debug programs that are run under &lt;code&gt;pk&lt;/code&gt;. We&#39;ll use the following test program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat rot13.c &#xA;char text[] = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;;&#xA;&#xA;// Don&#39;t use the stack, because sp isn&#39;t set up.&#xA;volatile int wait = 1;&#xA;&#xA;int main()&#xA;{&#xA;    while (wait)&#xA;        ;&#xA;&#xA;    // Doesn&#39;t actually go on the stack, because there are lots of GPRs.&#xA;    int i = 0;&#xA;    while (text[i]) {&#xA;        char lower = text[i] | 32;&#xA;        if (lower &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;m&#39;)&#xA;            text[i] += 13;&#xA;        else if (lower &amp;gt; &#39;m&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;z&#39;)&#xA;            text[i] -= 13;&#xA;        i++;&#xA;    }&#xA;&#xA;done:&#xA;    while (!wait)&#xA;        ;&#xA;}&#xA;$ cat spike.lds &#xA;OUTPUT_ARCH( &#34;riscv&#34; )&#xA;&#xA;SECTIONS&#xA;{&#xA;  . = 0x10110000;&#xA;  .text : { *(.text) }&#xA;  .data : { *(.data) }&#xA;}&#xA;$ riscv64-unknown-elf-gcc -g -Og -o rot13-64.o -c rot13.c&#xA;$ riscv64-unknown-elf-gcc -g -Og -T spike.lds -nostartfiles -o rot13-64 rot13-64.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug this program, first run spike telling it to listen for OpenOCD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spike --rbb-port=9824 -m0x10100000:0x20000 rot13-64&#xA;Listening for remote bitbang connection on port 9824.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a separate shell run OpenOCD with the appropriate configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat spike.cfg &#xA;adapter driver remote_bitbang&#xA;remote_bitbang host localhost&#xA;remote_bitbang port 9824&#xA;&#xA;set _CHIPNAME riscv&#xA;jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0xdeadbeef&#xA;&#xA;set _TARGETNAME $_CHIPNAME.cpu&#xA;target create $_TARGETNAME riscv -chain-position $_TARGETNAME&#xA;&#xA;gdb_report_data_abort enable&#xA;&#xA;init&#xA;halt&#xA;$ openocd -f spike.cfg&#xA;Open On-Chip Debugger 0.10.0-dev-00002-gc3b344d (2017-06-08-12:14)&#xA;...&#xA;riscv.cpu: target state: halted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In yet another shell, start your gdb debug session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tnewsome@compy-vm:~/SiFive/spike-test$ riscv64-unknown-elf-gdb rot13-64&#xA;GNU gdb (GDB) 8.0.50.20170724-git&#xA;Copyright (C) 2017 Free Software Foundation, Inc.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.  Type &#34;show copying&#34;&#xA;and &#34;show warranty&#34; for details.&#xA;This GDB was configured as &#34;--host=x86_64-pc-linux-gnu --target=riscv64-unknown-elf&#34;.&#xA;Type &#34;show configuration&#34; for configuration details.&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.&#xA;Find the GDB manual and other documentation resources online at:&#xA;&amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.&#xA;For help, type &#34;help&#34;.&#xA;Type &#34;apropos word&#34; to search for commands related to &#34;word&#34;...&#xA;Reading symbols from rot13-64...done.&#xA;(gdb) target remote localhost:3333&#xA;Remote debugging using localhost:3333&#xA;0x0000000010010004 in main () at rot13.c:8&#xA;8&#x9;    while (wait)&#xA;(gdb) print wait&#xA;$1 = 1&#xA;(gdb) print wait=0&#xA;$2 = 0&#xA;(gdb) print text&#xA;$3 = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;&#xA;(gdb) b done &#xA;Breakpoint 1 at 0x10110064: file rot13.c, line 22.&#xA;(gdb) c&#xA;Continuing.&#xA;Disabling abstract command writes to CSRs.&#xA;&#xA;Breakpoint 1, main () at rot13.c:23&#xA;23&#x9;    while (!wait)&#xA;(gdb) print wait&#xA;$4 = 0&#xA;(gdb) print text&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pret/pokeemerald</title>
    <updated>2023-07-16T01:51:12Z</updated>
    <id>tag:github.com,2023-07-16:/pret/pokeemerald</id>
    <link href="https://github.com/pret/pokeemerald" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decompilation of Pokémon Emerald&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pokémon Emerald&lt;/h1&gt; &#xA;&lt;p&gt;This is a decompilation of Pokémon Emerald.&lt;/p&gt; &#xA;&lt;p&gt;It builds the following ROM:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datomatic.no-intro.org/index.php?page=show_record&amp;amp;s=23&amp;amp;n=1961&#34;&gt;&lt;strong&gt;pokeemerald.gba&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;sha1: f3ae088181bf583e55daf962a92bb46f4f1d07b7&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To set up the repository, see &lt;a href=&#34;https://raw.githubusercontent.com/pret/pokeemerald/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;p&gt;Other disassembly and/or decompilation projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokered&#34;&gt;&lt;strong&gt;Pokémon Red and Blue&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokegold-spaceworld&#34;&gt;&lt;strong&gt;Pokémon Gold and Silver (Space World &#39;97 demo)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokeyellow&#34;&gt;&lt;strong&gt;Pokémon Yellow&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/poketcg&#34;&gt;&lt;strong&gt;Pokémon Trading Card Game&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokepinball&#34;&gt;&lt;strong&gt;Pokémon Pinball&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokestadium&#34;&gt;&lt;strong&gt;Pokémon Stadium&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokegold&#34;&gt;&lt;strong&gt;Pokémon Gold and Silver&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokecrystal&#34;&gt;&lt;strong&gt;Pokémon Crystal&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokeruby&#34;&gt;&lt;strong&gt;Pokémon Ruby and Sapphire&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokepinballrs&#34;&gt;&lt;strong&gt;Pokémon Pinball: Ruby &amp;amp; Sapphire&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pokefirered&#34;&gt;&lt;strong&gt;Pokémon FireRed and LeafGreen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret/pmd-red&#34;&gt;&lt;strong&gt;Pokémon Mystery Dungeon: Red Rescue Team&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;p&gt;You can find us on &lt;a href=&#34;https://discord.gg/d5dubZ3&#34;&gt;Discord&lt;/a&gt; and &lt;a href=&#34;https://web.libera.chat/?#pret&#34;&gt;IRC&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>