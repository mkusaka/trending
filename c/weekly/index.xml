<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-09T01:39:24Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FWGS/xash3d-fwgs</title>
    <updated>2025-03-09T01:39:24Z</updated>
    <id>tag:github.com,2025-03-09:/FWGS/xash3d-fwgs</id>
    <link href="https://github.com/FWGS/xash3d-fwgs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xash3D FWGS engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xash3D FWGS Engine &lt;img align=&#34;right&#34; width=&#34;128&#34; height=&#34;128&#34; src=&#34;https://github.com/FWGS/xash3d-fwgs/raw/master/game_launch/icon-xash-material.png&#34; alt=&#34;Xash3D FWGS icon&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FWGS/xash3d-fwgs/actions/workflows/c-cpp.yml&#34;&gt;&lt;img src=&#34;https://github.com/FWGS/xash3d-fwgs/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/FWGS/xash3d-fwgs&#34;&gt;&lt;img src=&#34;https://img.shields.io/cirrus/github/FWGS/xash3d-fwgs?label=freebsd%20build&#34; alt=&#34;FreeBSD Build Status&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;http://fwgsdiscord.mentality.rip/&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/355697768582610945?logo=Discord&amp;amp;label=International%20Discord%20chat&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/flyingwithgauss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Russian_speakers_Telegram_chat-gray?logo=Telegram&#34; alt=&#34;Russian speakers Telegram Chat&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/FWGS/xash3d-fwgs/releases/tag/continuous&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/downloads-testing-orange&#34; alt=&#34;Download Daily Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Xash3D (&lt;a href=&#34;https://ipa-reader.com/?text=ks%C9%91%CA%82&#34;&gt;pronounced&lt;/a&gt; &lt;code&gt;[ksɑʂ]&lt;/code&gt;) FWGS is a game engine, aimed to provide compatibility with Half-Life Engine and extend it, as well as to give game developers well known workflow.&lt;/p&gt; &#xA;&lt;p&gt;Xash3D FWGS is a heavily modified fork of an original &lt;a href=&#34;https://www.moddb.com/engines/xash3d-engine&#34;&gt;Xash3D Engine&lt;/a&gt; by Unkle Mike.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWGS/xash3d-fwgs/master/Documentation/donate.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate_to_FWGS-%3C3-magenta&#34; alt=&#34;Donate to FWGS button&#34;&gt;&lt;/a&gt; &lt;br&gt; If you like Xash3D FWGS, consider supporting individual engine maintainers. By supporting us, you help to continue developing this game engine further. The sponsorship links are available in &lt;a href=&#34;https://raw.githubusercontent.com/FWGS/xash3d-fwgs/master/Documentation/donate.md&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fork features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Steam Half-Life (HLSDK 2.5) support.&lt;/li&gt; &#xA; &lt;li&gt;Crossplatform and modern compilers support: supports Windows, Linux, BSD &amp;amp; Android on x86 &amp;amp; ARM and &lt;a href=&#34;https://raw.githubusercontent.com/FWGS/xash3d-fwgs/master/Documentation/ports.md&#34;&gt;many more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Better multiplayer: multiple master servers, headless dedicated server, voice chat, &lt;a href=&#34;https://raw.githubusercontent.com/FWGS/xash3d-fwgs/master/Documentation/goldsrc-protocol-support.md&#34;&gt;GoldSrc protocol support&lt;/a&gt; and IPv6 support.&lt;/li&gt; &#xA; &lt;li&gt;Multiple renderers support: OpenGL, GLESv1, GLESv2 and Software.&lt;/li&gt; &#xA; &lt;li&gt;Advanced virtual filesystem: &lt;code&gt;.pk3&lt;/code&gt; and &lt;code&gt;.pk3dir&lt;/code&gt; support, compatibility with GoldSrc FS module, fast case-insensitivity emulation for crossplatform.&lt;/li&gt; &#xA; &lt;li&gt;Mobility API: better game integration on mobile devices (vibration, touch controls).&lt;/li&gt; &#xA; &lt;li&gt;Different input methods: touch and gamepad in addition to mouse &amp;amp; keyboard.&lt;/li&gt; &#xA; &lt;li&gt;TrueType font rendering, as a part of mainui_cpp.&lt;/li&gt; &#xA; &lt;li&gt;External VGUI support module.&lt;/li&gt; &#xA; &lt;li&gt;PNG &amp;amp; KTX2 image format support.&lt;/li&gt; &#xA; &lt;li&gt;Ogg Vorbis (&lt;code&gt;.ogg&lt;/code&gt;) &amp;amp; Ogg Opus (&lt;code&gt;.opus&lt;/code&gt;) audio formats support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWGS/xash3d-fwgs/master/Documentation/&#34;&gt;A set of small improvements&lt;/a&gt;, without broken compatibility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Running&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Get Xash3D FWGS binaries: you can use &lt;a href=&#34;https://github.com/FWGS/xash3d-fwgs/releases/tag/continuous&#34;&gt;testing&lt;/a&gt; build or you can compile engine from source code.&lt;/li&gt; &#xA; &lt;li&gt;Copy engine binaries to some directory.&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;valve&lt;/code&gt; directory from &lt;a href=&#34;https://store.steampowered.com/app/70/HalfLife/&#34;&gt;Half-Life&lt;/a&gt; to directory with engine binaries. If your CPU is NOT x86 compatible or you&#39;re running 64-bit version of the engine, you may want to compile &lt;a href=&#34;https://github.com/FWGS/hlsdk-portable&#34;&gt;Half-Life SDK&lt;/a&gt;. This repository contains our fork of HLSDK and restored source code for Half-Life expansions and some mods. You still needed to copy &lt;code&gt;valve&lt;/code&gt; directory as all game resources located there.&lt;/li&gt; &#xA; &lt;li&gt;Run the main executable (&lt;code&gt;xash3d.exe&lt;/code&gt; or AppImage).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For additional info, run Xash3D with &lt;code&gt;-help&lt;/code&gt; command line key.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before sending an issue, check if someone already reported your issue. Make sure you&#39;re following &#34;How To Ask Questions The Smart Way&#34; guide by Eric Steven Raymond. Read more: &lt;a href=&#34;http://www.catb.org/~esr/faqs/smart-questions.html&#34;&gt;http://www.catb.org/~esr/faqs/smart-questions.html&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Issues are accepted in both English and Russian.&lt;/li&gt; &#xA; &lt;li&gt;Before sending a PR, check if you followed our contribution guide in CONTRIBUTING.md file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;We are using Waf build system. If you have some Waf-related questions, I recommend you to read &lt;a href=&#34;https://waf.io/book/&#34;&gt;Waf Book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: NEVER USE GitHub&#39;s ZIP ARCHIVES. GitHub doesn&#39;t include external dependencies we&#39;re using!&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;If your CPU is x86 compatible and you&#39;re on Windows or Linux, we are building 32-bit code by default. This was done to maintain compatibility with Steam releases of Half-Life and based on it&#39;s engine games. Even if Xash3D FWGS does support targetting 64-bit, you can&#39;t load games without recompiling them from source code!&lt;/p&gt; &#xA;&lt;p&gt;If your CPU is NOT x86 compatible or you decided build 64-bit version of engine, you may want to compile &lt;a href=&#34;https://github.com/FWGS/hlsdk-portable&#34;&gt;Half-Life SDK&lt;/a&gt;. This repository contains our fork of HLSDK and restored source code for Half-Life expansions and some mods.&lt;/p&gt; &#xA;&lt;h4&gt;Windows (Visual Studio)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Visual Studio.&lt;/li&gt; &#xA; &lt;li&gt;Install latest &lt;a href=&#34;https://python.org&#34;&gt;Python&lt;/a&gt; &lt;strong&gt;OR&lt;/strong&gt; run &lt;code&gt;cinst python.install&lt;/code&gt; if you have Chocolatey.&lt;/li&gt; &#xA; &lt;li&gt;Install latest &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git&lt;/a&gt; &lt;strong&gt;OR&lt;/strong&gt; run &lt;code&gt;cinst git.install&lt;/code&gt; if you have Chocolatey.&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://libsdl.org/download-2.0.php&#34;&gt;SDL2&lt;/a&gt; development package for Visual Studio.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository: &lt;code&gt;git clone --recursive https://github.com/FWGS/xash3d-fwgs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have at least 12GB of free space to store all build-time dependencies: ~10GB for Visual Studio, 300 MB for Git, 100 MB for Python and other.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GNU/Linux&lt;/h4&gt; &#xA;&lt;h5&gt;Debian/Ubuntu&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only for 32-bit engine on 64-bit x86 operating system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable i386 on your system: &lt;code&gt;$ sudo dpkg --add-architecture i386&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install &lt;code&gt;aptitude&lt;/code&gt; (&lt;a href=&#34;https://github.com/FWGS/xash3d-fwgs/issues/1828#issuecomment-2415131759&#34;&gt;why?&lt;/a&gt;): &lt;code&gt;$ sudo apt update &amp;amp;&amp;amp; sudo apt upgrade &amp;amp;&amp;amp; sudo apt install aptitude&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Install development tools: &lt;code&gt;$ sudo aptitude --without-recommends install git build-essential gcc-multilib g++-multilib libsdl2-dev:i386 libfreetype-dev:i386 libopus-dev:i386 libbz2-dev:i386 libvorbis-dev:i386 libopusfile-dev:i386 libogg-dev:i386&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Set PKG_CONFIG_PATH environment variable to point at 32-bit libraries: &lt;code&gt;$ export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For 64-bit engine on 64-bit x86 and other non-x86 systems:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install development tools: &lt;code&gt;$ sudo apt install git build-essential python libsdl2-dev libfreetype6-dev libopus-dev libbz2-dev libvorbis-dev libopusfile-dev libogg-dev&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repostory: &lt;code&gt;$ git clone --recursive https://github.com/FWGS/xash3d-fwgs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;RedHat/Fedora&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only for 32-bit engine on 64-bit x86 operating system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install development tools: &lt;code&gt;$ sudo dnf install git gcc gcc-c++ glibc-devel.i686 SDL2-devel.i686 opus-devel.i686 freetype-devel.i686 bzip2-devel.i686 libvorbis-devel.i686 opusfile-devel.i686 libogg-devel.i686&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Set PKG_CONFIG_PATH environment variable to point at 32-bit libraries: &lt;code&gt;$ export PKG_CONFIG_PATH=/usr/lib/pkgconfig&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For 64-bit engine on 64-bit x86 and other non-x86 systems:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install development tools: &lt;code&gt;$ sudo dnf install git gcc gcc-c++ SDL2-devel opus-devel freetype-devel bzip2-devel libvorbis-devel opusfile-devel libogg-devel&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repostory: &lt;code&gt;$ git clone --recursive https://github.com/FWGS/xash3d-fwgs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;h4&gt;Windows (Visual Studio)&lt;/h4&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Open command line.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;xash3d-fwgs&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;(optional) Examine which build options are available: &lt;code&gt;waf --help&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Configure build: &lt;code&gt;waf configure --sdl2=c:/path/to/SDL2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;code&gt;waf build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install: &lt;code&gt;waf install --destdir=c:/path/to/any/output/directory&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;If compiling 32-bit on amd64, make sure &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; from the previous step is set correctly, prior to running configure.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;(optional) Examine which build options are available: &lt;code&gt;./waf --help&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Configure build: &lt;code&gt;./waf configure&lt;/code&gt; (you need to pass &lt;code&gt;-8&lt;/code&gt; to compile 64-bit engine on 64-bit x86 processor).&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;code&gt;./waf build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install: &lt;code&gt;./waf install --destdir=/path/to/any/output/directory&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>CodeWithHarry/The-Ultimate-C-Programming-Course</title>
    <updated>2025-03-09T01:39:24Z</updated>
    <id>tag:github.com,2025-03-09:/CodeWithHarry/The-Ultimate-C-Programming-Course</id>
    <link href="https://github.com/CodeWithHarry/The-Ultimate-C-Programming-Course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the C language code and supplement material for the Ultimate C language Course on CodeWithHarry&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Ultimate C Programming Handbook&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://www.youtube.com/watch?v=aZb0iu4uGwA&#34;&gt;&lt;strong&gt;The Ultimate C Programming Course!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This course is designed to take you from a beginner to an advanced C programmer. The repository contains all the source code, projects, problem sets, and additional resources to supplement your learning. Refer to this &lt;a href=&#34;https://www.youtube.com/watch?v=aZb0iu4uGwA&#34;&gt;video&lt;/a&gt; to watch my C course.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#the-ultimate-c-programming-handbook&#34;&gt;The Ultimate C Programming Handbook&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#chapters&#34;&gt;Chapters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#projects&#34;&gt;Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#problem-sets&#34;&gt;Problem Sets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#additional-resources&#34;&gt;Additional Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeWithHarry/The-Ultimate-C-Programming-Course/main/#how-to-use-this-repository&#34;&gt;How to Use This Repository&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository is part of &lt;strong&gt;The Ultimate C Programming Handbook&lt;/strong&gt;. The course aims to provide a comprehensive guide to learning C programming.&lt;/p&gt; &#xA;&lt;h2&gt;Chapters&lt;/h2&gt; &#xA;&lt;p&gt;The course is divided into several chapters, each focusing on different aspects of C programming:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 1: Variables, Constants &amp;amp; Keywords&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Learn how to declare and initialize variables in C.&lt;/li&gt; &#xA;   &lt;li&gt;Understand different types of constants.&lt;/li&gt; &#xA;   &lt;li&gt;Familiarize yourself with reserved words in C.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 2: Instructions and Operators&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Different types of instructions in C.&lt;/li&gt; &#xA;   &lt;li&gt;Arithmetic, relational, and logical operators.&lt;/li&gt; &#xA;   &lt;li&gt;Implicit and explicit type conversions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 3: Conditional Instructions&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Conditional execution of code using if-else statements.&lt;/li&gt; &#xA;   &lt;li&gt;Evaluate conditions using relational and logical operators.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 4: Loop Control Instructions&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt; loops.&lt;/li&gt; &#xA;   &lt;li&gt;Control statements like &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 5: Functions and Recursion&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Definition, declaration, and calling of functions.&lt;/li&gt; &#xA;   &lt;li&gt;Concept and usage of recursive functions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 6: Pointers&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Declaration and usage of pointers.&lt;/li&gt; &#xA;   &lt;li&gt;Operations involving pointers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 7: Arrays&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Single-dimensional and multi-dimensional arrays.&lt;/li&gt; &#xA;   &lt;li&gt;Accessing array elements using pointers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 8: Strings&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initialization and manipulation of strings.&lt;/li&gt; &#xA;   &lt;li&gt;Standard library functions for strings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 9: Structures&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Definition and usage of structures.&lt;/li&gt; &#xA;   &lt;li&gt;Accessing structure members using pointers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 10: File I/O&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reading from and writing to files.&lt;/li&gt; &#xA;   &lt;li&gt;Handling files using pointers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter 11: Dynamic Memory Allocation&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;malloc()&lt;/code&gt;, &lt;code&gt;calloc()&lt;/code&gt;, &lt;code&gt;realloc()&lt;/code&gt;, and &lt;code&gt;free()&lt;/code&gt; functions.&lt;/li&gt; &#xA;   &lt;li&gt;Managing dynamically allocated memory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project 1: Number Guessing Game&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A fun game where the player tries to guess a randomly generated number.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project 2: Snake Water Gun Game&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A variation of the classic Rock-Paper-Scissors game.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Problem Sets&lt;/h2&gt; &#xA;&lt;p&gt;Each chapter contains problem sets to test your understanding and to practice coding. The problem sets include various challenges and exercises relevant to the chapter&#39;s content.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.codewithharry.com/notes&#34;&gt;Download the Handbook (Scroll to the bottom of the page and navigate to Handbooks section)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.codewithharry.com/notes&#34;&gt;Download the Handwritten Notes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.codewithharry.com/blogpost/c-cheatsheet/&#34;&gt;Download the Cheatsheet&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aZb0iu4uGwA&#34;&gt;Watch the Course Video&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Use This Repository&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt; to your local machine using: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/CodeWithHarry/The-Ultimate-C-Programming-Course.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Navigate through the chapters&lt;/strong&gt; to find the relevant lessons and code examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete the problem sets&lt;/strong&gt; provided at the end of each chapter to solidify your understanding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Work on the projects&lt;/strong&gt; to apply your knowledge in real-world scenarios.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Feel free to explore each chapter and work through the exercises to reinforce your learning. Happy coding!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/cuda-samples</title>
    <updated>2025-03-09T01:39:24Z</updated>
    <id>tag:github.com,2025-03-09:/NVIDIA/cuda-samples</id>
    <link href="https://github.com/NVIDIA/cuda-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for CUDA Developers which demonstrates features in CUDA Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CUDA Samples&lt;/h1&gt; &#xA;&lt;p&gt;Samples for CUDA Developers which demonstrates features in CUDA Toolkit. This version supports &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 12.8&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the release notes for the CUDA Samples on GitHub only.&lt;/p&gt; &#xA;&lt;h3&gt;Change Log&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/CHANGELOG.md&#34;&gt;Revision History&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Download and install the &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 12.8&lt;/a&gt; for your corresponding platform. For system requirements and installation instructions of cuda toolkit, please refer to the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-linux/&#34;&gt;Linux Installation Guide&lt;/a&gt;, and the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html&#34;&gt;Windows Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the CUDA Samples&lt;/h3&gt; &#xA;&lt;p&gt;Using git clone the repository of CUDA Samples using the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/NVIDIA/cuda-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without using git the easiest way to use these samples is to download the zip file containing the current version by clicking the &#34;Download ZIP&#34; button on the repo page. You can then unzip the entire archive and use the samples.&lt;/p&gt; &#xA;&lt;h2&gt;Building CUDA Samples&lt;/h2&gt; &#xA;&lt;h3&gt;Building CUDA Samples&lt;/h3&gt; &#xA;&lt;p&gt;The CUDA Samples are built using CMake. Follow the instructions below for building on Linux, Windows, and for cross-compilation to Tegra devices.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that CMake (version 3.20 or later) is installed. Install it using your package manager if necessary:&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;sudo apt install cmake&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the root of the cloned repository and create a build directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure the project with CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the samples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the samples from their respective directories in the build folder. You can also follow this process from and subdirectory of the samples repo, or from within any individual sample.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Language services for CMake are available in Visual Studio 2019 version 16.5 or later, and you can directly import the CUDA samples repository from either the root level or from any subdirectory or individual sample.&lt;/p&gt; &#xA;&lt;p&gt;To build from the command line, open the &lt;code&gt;x64 Native Tools Command Prompt for VS&lt;/code&gt; provided with your Visual Studio installation.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the root of the cloned repository and create a build directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure the project with CMake - for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -G &#34;Visual Studio 16 2019&#34; -A x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the generated solution file CUDA_Samples.sln in Visual Studio. Build the samples by selecting the desired configuration (e.g., Debug or Release) and pressing F7 (Build Solution).&lt;/p&gt; &#xA;&lt;p&gt;Run the samples from the output directories specified in Visual Studio.&lt;/p&gt; &#xA;&lt;h3&gt;Platform-Specific Samples&lt;/h3&gt; &#xA;&lt;p&gt;Some CUDA samples are specific to certain platforms, and require passing flags into CMake to enable. In particular, we define the following platform-specific flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_TEGRA&lt;/code&gt; - for Tegra-specific samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build these samples, set the variables either on the command line or through your CMake GUI. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DBUILD_TEGRA=True ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-Compilation for Tegra Platforms&lt;/h3&gt; &#xA;&lt;p&gt;Install the NVIDIA toolchain and cross-compilation environment for Tegra devices as described in the Tegra Development Guide.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that CMake (version 3.20 or later) is installed.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the root of the cloned repository and create a build directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure the project with CMake, specifying the Tegra toolchain file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DCMAKE_TOOLCHAIN_FILE=/path/to/tegra/toolchain.cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the samples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transfer the built binaries to the Tegra device and execute them there.&lt;/p&gt; &#xA;&lt;h3&gt;Building for Automotive Linux Platforms&lt;/h3&gt; &#xA;&lt;p&gt;These platforms require additional information to be passed to CMake on the command line to ensure proper resolution of all necessary include and library files. Instead of being in the default location, &lt;code&gt;/usr/local/cuda/include&lt;/code&gt; or &lt;code&gt;/usr/local/cuda/lib64&lt;/code&gt;, you must point to architecture-specific paths:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/usr/local/cuda/&amp;lt;ARCH&amp;gt;/targets/aarch64-linux/lib&lt;/code&gt; and &lt;code&gt;/usr/local/cuda-12.8/&amp;lt;ARCH&amp;gt;/include&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example build might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build&#xA;$ cd build&#xA;&#xA;$ cmake -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_LIBRARY_PATH=/usr/local/cuda/orin/lib64/ -DCMAKE_INCLUDE_PATH=/usr/local/cuda/orin/include -DBUILD_TEGRA=True ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;QNX&lt;/h3&gt; &#xA;&lt;p&gt;Note that in the current branch sample cross-compilation for QNX is not fully validated. This placeholder will be updated in the near future with QNX cross-compilation instructions. In the meantime, if you want to cross-compile for QNX please check out one of the previous tags prior to the CMake build system transition in 12.8.&lt;/p&gt; &#xA;&lt;h2&gt;Samples list&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/0_Introduction/README.md&#34;&gt;0. Introduction&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Basic CUDA samples for beginners that illustrate key concepts with using CUDA and CUDA runtime APIs.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/1_Utilities/README.md&#34;&gt;1. Utilities&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Utility samples that demonstrate how to query device capabilities and measure GPU/CPU bandwidth.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/2_Concepts_and_Techniques/README.md&#34;&gt;2. Concepts and Techniques&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate CUDA related concepts and common problem solving techniques.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/3_CUDA_Features/README.md&#34;&gt;3. CUDA Features&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate CUDA Features (Cooperative Groups, CUDA Dynamic Parallelism, CUDA Graphs etc).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/4_CUDA_Libraries/README.md&#34;&gt;4. CUDA Libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate how to use CUDA platform libraries (NPP, NVJPEG, NVGRAPH cuBLAS, cuFFT, cuSPARSE, cuSOLVER and cuRAND).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/5_Domain_Specific/README.md&#34;&gt;5. Domain Specific&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that are specific to domain (Graphics, Finance, Image Processing).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/6_Performance/README.md&#34;&gt;6. Performance&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate performance optimization.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/7_libNVVM/README.md&#34;&gt;7. libNVVM&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate the use of libNVVVM and NVVM IR.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Some CUDA Samples rely on third-party applications and/or libraries, or features provided by the CUDA Toolkit and Driver, to either build or execute. These dependencies are listed below.&lt;/p&gt; &#xA;&lt;p&gt;If a sample has a third-party dependency that is available on the system, but is not installed, the sample will waive itself at build time.&lt;/p&gt; &#xA;&lt;p&gt;Each sample&#39;s dependencies are listed in its README&#39;s Dependencies section.&lt;/p&gt; &#xA;&lt;h3&gt;Third-Party Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;These third-party dependencies are required by some CUDA samples. If available, these dependencies are either installed on your system automatically, or are installable via your system&#39;s package manager (Linux) or a third-party website.&lt;/p&gt; &#xA;&lt;h4&gt;FreeImage&lt;/h4&gt; &#xA;&lt;p&gt;FreeImage is an open source imaging library. FreeImage can usually be installed on Linux using your distribution&#39;s package manager system. FreeImage can also be downloaded from the FreeImage website.&lt;/p&gt; &#xA;&lt;p&gt;To set up FreeImage on a Windows system, extract the FreeImage DLL distribution into the folder &lt;code&gt;../../../Common/FreeImage/Dist/x64&lt;/code&gt; such that it contains the .h and .lib files. Copy the .dll file to the Release/ Debug/ execution folder or pass the FreeImage folder when cmake configuring with the &lt;code&gt;-DFREEIMAGE_INCLUDE_DIR&lt;/code&gt; and &lt;code&gt;-DFREEIMAGE_LIBRARY&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;h4&gt;Message Passing Interface&lt;/h4&gt; &#xA;&lt;p&gt;MPI (Message Passing Interface) is an API for communicating data between distributed processes. A MPI compiler can be installed using your Linux distribution&#39;s package manager system. It is also available on some online resources, such as &lt;a href=&#34;http://www.open-mpi.org/&#34;&gt;Open MPI&lt;/a&gt;. On Windows, to build and run MPI-CUDA applications one can install &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx&#34;&gt;MS-MPI SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Only 64-Bit&lt;/h4&gt; &#xA;&lt;p&gt;Some samples can only be run on a 64-bit operating system.&lt;/p&gt; &#xA;&lt;h4&gt;DirectX&lt;/h4&gt; &#xA;&lt;p&gt;DirectX is a collection of APIs designed to allow development of multimedia applications on Microsoft platforms. For Microsoft platforms, NVIDIA&#39;s CUDA Driver supports DirectX. Several CUDA Samples for Windows demonstrates CUDA-DirectX Interoperability, for building such samples one needs to install Microsoft Visual Studio 2012 or higher which provides Microsoft Windows SDK for Windows 8.&lt;/p&gt; &#xA;&lt;h4&gt;DirectX12&lt;/h4&gt; &#xA;&lt;p&gt;DirectX 12 is a collection of advanced low-level programming APIs which can reduce driver overhead, designed to allow development of multimedia applications on Microsoft platforms starting with Windows 10 OS onwards. For Microsoft platforms, NVIDIA&#39;s CUDA Driver supports DirectX. Few CUDA Samples for Windows demonstrates CUDA-DirectX12 Interoperability, for building such samples one needs to install &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk&#34;&gt;Windows 10 SDK or higher&lt;/a&gt;, with VS 2015 or VS 2017.&lt;/p&gt; &#xA;&lt;h4&gt;OpenGL&lt;/h4&gt; &#xA;&lt;p&gt;OpenGL is a graphics library used for 2D and 3D rendering. On systems which support OpenGL, NVIDIA&#39;s OpenGL implementation is provided with the CUDA Driver.&lt;/p&gt; &#xA;&lt;h4&gt;OpenGL ES&lt;/h4&gt; &#xA;&lt;p&gt;OpenGL ES is an embedded systems graphics library used for 2D and 3D rendering. On systems which support OpenGL ES, NVIDIA&#39;s OpenGL ES implementation is provided with the CUDA Driver.&lt;/p&gt; &#xA;&lt;h4&gt;Vulkan&lt;/h4&gt; &#xA;&lt;p&gt;Vulkan is a low-overhead, cross-platform 3D graphics and compute API. Vulkan targets high-performance realtime 3D graphics applications such as video games and interactive media across all platforms. On systems which support Vulkan, NVIDIA&#39;s Vulkan implementation is provided with the CUDA Driver. For building and running Vulkan applications one needs to install the &lt;a href=&#34;https://www.lunarg.com/vulkan-sdk/&#34;&gt;Vulkan SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;GLFW&lt;/h4&gt; &#xA;&lt;p&gt;GLFW is a lightweight, open-source library designed for managing OpenGL, OpenGL ES, and Vulkan contexts. It simplifies the process of creating and managing windows, handling user input (keyboard, mouse, and joystick), and working with multiple monitors in a cross-platform manner.&lt;/p&gt; &#xA;&lt;p&gt;To set up GLFW on a Windows system, Download the pre-built binaries from &lt;a href=&#34;https://www.glfw.org/download.html&#34;&gt;GLFW website&lt;/a&gt; and extract the zip file into the folder, pass the GLFW include header folder as &lt;code&gt;-DGLFW_INCLUDE_DIR&lt;/code&gt; and lib folder as &lt;code&gt;-DGLFW_LIB_DIR&lt;/code&gt; for cmake configuring.&lt;/p&gt; &#xA;&lt;h4&gt;OpenMP&lt;/h4&gt; &#xA;&lt;p&gt;OpenMP is an API for multiprocessing programming. OpenMP can be installed using your Linux distribution&#39;s package manager system. It usually comes preinstalled with GCC. It can also be found at the &lt;a href=&#34;http://openmp.org/&#34;&gt;OpenMP website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Screen&lt;/h4&gt; &#xA;&lt;p&gt;Screen is a windowing system found on the QNX operating system. Screen is usually found as part of the root filesystem.&lt;/p&gt; &#xA;&lt;h4&gt;X11&lt;/h4&gt; &#xA;&lt;p&gt;X11 is a windowing system commonly found on *-nix style operating systems. X11 can be installed using your Linux distribution&#39;s package manager, and comes preinstalled on Mac OS X systems.&lt;/p&gt; &#xA;&lt;h4&gt;EGL&lt;/h4&gt; &#xA;&lt;p&gt;EGL is an interface between Khronos rendering APIs (such as OpenGL, OpenGL ES or OpenVG) and the underlying native platform windowing system.&lt;/p&gt; &#xA;&lt;h4&gt;EGLOutput&lt;/h4&gt; &#xA;&lt;p&gt;EGLOutput is a set of EGL extensions which allow EGL to render directly to the display.&lt;/p&gt; &#xA;&lt;h4&gt;EGLSync&lt;/h4&gt; &#xA;&lt;p&gt;EGLSync is a set of EGL extensions which provides sync objects that are synchronization primitive, representing events whose completion can be tested or waited upon.&lt;/p&gt; &#xA;&lt;h4&gt;NVSCI&lt;/h4&gt; &#xA;&lt;p&gt;NvSci is a set of communication interface libraries out of which CUDA interops with NvSciBuf and NvSciSync. NvSciBuf allows applications to allocate and exchange buffers in memory. NvSciSync allows applications to manage synchronization objects which coordinate when sequences of operations begin and end.&lt;/p&gt; &#xA;&lt;h4&gt;NvMedia&lt;/h4&gt; &#xA;&lt;p&gt;NvMedia provides powerful processing of multimedia data for true hardware acceleration across NVIDIA Tegra devices. Applications leverage the NvMedia Application Programming Interface (API) to process the image and video data.&lt;/p&gt; &#xA;&lt;h3&gt;CUDA Features&lt;/h3&gt; &#xA;&lt;p&gt;These CUDA features are needed by some CUDA samples. They are provided by either the CUDA Toolkit or CUDA Driver. Some features may not be available on your system.&lt;/p&gt; &#xA;&lt;h4&gt;CUFFT Callback Routines&lt;/h4&gt; &#xA;&lt;p&gt;CUFFT Callback Routines are user-supplied kernel routines that CUFFT will call when loading or storing data. These callback routines are only available on Linux x86_64 and ppc64le systems.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Dynamic Parallellism&lt;/h4&gt; &#xA;&lt;p&gt;CDP (CUDA Dynamic Parallellism) allows kernels to be launched from threads running on the GPU. CDP is only available on GPUs with SM architecture of 3.5 or above.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-block Cooperative Groups&lt;/h4&gt; &#xA;&lt;p&gt;Multi Block Cooperative Groups(MBCG) extends Cooperative Groups and the CUDA programming model to express inter-thread-block synchronization. MBCG is available on GPUs with Pascal and higher architecture.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Device Cooperative Groups&lt;/h4&gt; &#xA;&lt;p&gt;Multi Device Cooperative Groups extends Cooperative Groups and the CUDA programming model enabling thread blocks executing on multiple GPUs to cooperate and synchronize as they execute. This feature is available on GPUs with Pascal and higher architecture.&lt;/p&gt; &#xA;&lt;h4&gt;CUBLAS&lt;/h4&gt; &#xA;&lt;p&gt;CUBLAS (CUDA Basic Linear Algebra Subroutines) is a GPU-accelerated version of the BLAS library.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Interprocess Communication&lt;/h4&gt; &#xA;&lt;p&gt;IPC (Interprocess Communication) allows processes to share device pointers.&lt;/p&gt; &#xA;&lt;h4&gt;CUFFT&lt;/h4&gt; &#xA;&lt;p&gt;CUFFT (CUDA Fast Fourier Transform) is a GPU-accelerated FFT library.&lt;/p&gt; &#xA;&lt;h4&gt;CURAND&lt;/h4&gt; &#xA;&lt;p&gt;CURAND (CUDA Random Number Generation) is a GPU-accelerated RNG library.&lt;/p&gt; &#xA;&lt;h4&gt;CUSPARSE&lt;/h4&gt; &#xA;&lt;p&gt;CUSPARSE (CUDA Sparse Matrix) provides linear algebra subroutines used for sparse matrix calculations.&lt;/p&gt; &#xA;&lt;h4&gt;CUSOLVER&lt;/h4&gt; &#xA;&lt;p&gt;CUSOLVER library is a high-level package based on the CUBLAS and CUSPARSE libraries. It combines three separate libraries under a single umbrella, each of which can be used independently or in concert with other toolkit libraries. The intent ofCUSOLVER is to provide useful LAPACK-like features, such as common matrix factorization and triangular solve routines for dense matrices, a sparse least-squares solver and an eigenvalue solver. In addition cuSolver provides a new refactorization library useful for solving sequences of matrices with a shared sparsity pattern.&lt;/p&gt; &#xA;&lt;h4&gt;NPP&lt;/h4&gt; &#xA;&lt;p&gt;NPP (NVIDIA Performance Primitives) provides GPU-accelerated image, video, and signal processing functions.&lt;/p&gt; &#xA;&lt;h4&gt;NVGRAPH&lt;/h4&gt; &#xA;&lt;p&gt;NVGRAPH is a GPU-accelerated graph analytics library.&lt;/p&gt; &#xA;&lt;h4&gt;NVJPEG&lt;/h4&gt; &#xA;&lt;p&gt;NVJPEG library provides high-performance, GPU accelerated JPEG decoding functionality for image formats commonly used in deep learning and hyperscale multimedia applications.&lt;/p&gt; &#xA;&lt;h4&gt;NVRTC&lt;/h4&gt; &#xA;&lt;p&gt;NVRTC (CUDA RunTime Compilation) is a runtime compilation library for CUDA C++.&lt;/p&gt; &#xA;&lt;h4&gt;Stream Priorities&lt;/h4&gt; &#xA;&lt;p&gt;Stream Priorities allows the creation of streams with specified priorities. Stream Priorities is only available on GPUs with SM architecture of 3.5 or above.&lt;/p&gt; &#xA;&lt;h4&gt;Unified Virtual Memory&lt;/h4&gt; &#xA;&lt;p&gt;UVM (Unified Virtual Memory) enables memory that can be accessed by both the CPU and GPU without explicit copying between the two. UVM is only available on Linux and Windows systems.&lt;/p&gt; &#xA;&lt;h4&gt;16-bit Floating Point&lt;/h4&gt; &#xA;&lt;p&gt;FP16 is a 16-bit floating-point format. One bit is used for the sign, five bits for the exponent, and ten bits for the mantissa.&lt;/p&gt; &#xA;&lt;h4&gt;C++11 CUDA&lt;/h4&gt; &#xA;&lt;p&gt;NVCC support of &lt;a href=&#34;https://en.wikipedia.org/wiki/C++11&#34;&gt;C++11 features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;The libNVVM samples are built using &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.10 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors Guide&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your input on issues and suggestions for samples. At this time we are not accepting contributions from the public, check back here as we evolve our contribution model.&lt;/p&gt; &#xA;&lt;p&gt;We use Google C++ Style Guide for all the sources &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;https://google.github.io/styleguide/cppguide.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;Answers to frequently asked questions about CUDA can be found at &lt;a href=&#34;http://developer.nvidia.com/cuda-faq&#34;&gt;http://developer.nvidia.com/cuda-faq&lt;/a&gt; and in the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&#34;&gt;CUDA Toolkit Release Notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html&#34;&gt;CUDA Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/blog/?tags=accelerated-computing&#34;&gt;Accelerated Computing Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Teapot image is obtained from &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg&#34;&gt;Wikimedia&lt;/a&gt; and is licensed under the Creative Commons &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/2.0/deed.en&#34;&gt;Attribution-Share Alike 2.0&lt;/a&gt; Generic license. The image is modified for samples use cases.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>