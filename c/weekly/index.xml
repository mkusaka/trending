<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T01:49:32Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cockpit-project/cockpit</title>
    <updated>2023-06-11T01:49:32Z</updated>
    <id>tag:github.com,2023-06-11:/cockpit-project/cockpit</id>
    <link href="https://github.com/cockpit-project/cockpit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cockpit is a web-based graphical interface for servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cockpit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A sysadmin login session in a web browser&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cockpit-project.org/&#34;&gt;cockpit-project.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cockpit is an interactive server admin interface. It is easy to use and very lightweight. Cockpit interacts directly with the operating system from a real Linux session in a browser.&lt;/p&gt; &#xA;&lt;h3&gt;Using Cockpit&lt;/h3&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://cockpit-project.org/running.html&#34;&gt;install Cockpit&lt;/a&gt; on many Linux operating systems including Debian, Fedora and RHEL.&lt;/p&gt; &#xA;&lt;p&gt;Cockpit makes Linux discoverable, allowing sysadmins to easily perform tasks such as starting containers, storage administration, network configuration, inspecting logs and so on.&lt;/p&gt; &#xA;&lt;p&gt;Jumping between the terminal and the web tool is no problem. A service started via Cockpit can be stopped via the terminal. Likewise, if an error occurs in the terminal, it can be seen in the Cockpit journal interface.&lt;/p&gt; &#xA;&lt;p&gt;You can also easily add other machines that have Cockpit installed and are accessible via SSH and jump between these hosts.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cockpit-project/cockpit/main/HACKING.md&#34;&gt;Making changes to Cockpit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cockpit-project/cockpit/wiki/Contributing&#34;&gt;How to contribute, developer documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix Channel: &lt;a href=&#34;https://matrix.to/#/#cockpit:fedoraproject.org&#34;&gt;#cockpit:fedoraproject.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.fedorahosted.org/admin/lists/cockpit-devel.lists.fedorahosted.org/&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cockpit-project.org/ideals.html&#34;&gt;Guiding Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cockpit-project.org/blog/category/release.html&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cockpit-project.org/privacy.html&#34;&gt;Privacy Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>micropython/micropython</title>
    <updated>2023-06-11T01:49:32Z</updated>
    <id>tag:github.com,2023-06-11:/micropython/micropython</id>
    <link href="https://github.com/micropython/micropython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/micropython/micropython/workflows/unix%20port/badge.svg?sanitize=true&#34; alt=&#34;CI badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/micropython/micropython&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/micropython/micropython/branch/master/graph/badge.svg?token=I92PfD05sD&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The MicroPython project&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/micropython/micropython/master/logo/upython-with-micro.jpg&#34; alt=&#34;MicroPython Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is the MicroPython project, which aims to put an implementation of Python 3.x on microcontrollers and small embedded systems. You can find the official website at &lt;a href=&#34;http://www.micropython.org&#34;&gt;micropython.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;WARNING: this project is in beta stage and is subject to changes of the code-base, including project-wide name changes and API changes.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython implements the entire Python 3.4 syntax (including exceptions, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;yield from&lt;/code&gt;, etc., and additionally &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords from Python 3.5 and some select features from later versions). The following core datatypes are provided: &lt;code&gt;str&lt;/code&gt;(including basic Unicode support), &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;array.array&lt;/code&gt;, &lt;code&gt;collections.namedtuple&lt;/code&gt;, classes and instances. Builtin modules include &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;re&lt;/code&gt;, and &lt;code&gt;struct&lt;/code&gt;, etc. Select ports have support for &lt;code&gt;_thread&lt;/code&gt; module (multithreading), &lt;code&gt;socket&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt; for networking, and &lt;code&gt;asyncio&lt;/code&gt;. Note that only a subset of Python 3 functionality is implemented for the data types and modules.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython can execute scripts in textual source form (.py files) or from precompiled bytecode (.mpy files), in both cases either from an on-device filesystem or &#34;frozen&#34; into the MicroPython executable.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython also provides a set of MicroPython-specific modules to access hardware-specific functionality and peripherals such as GPIO, Timers, ADC, DAC, PWM, SPI, I2C, CAN, Bluetooth, and USB.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.micropython.org/&#34;&gt;online documentation&lt;/a&gt; for API references and information about using MicroPython and information about how it is implemented.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/micropython/micropython/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; as our forum, and &lt;a href=&#34;https://discord.gg/RB8HZSAExQ&#34;&gt;Discord&lt;/a&gt; for chat. These are great places to ask questions and advice from the community or to discuss your MicroPython-based projects.&lt;/p&gt; &#xA;&lt;p&gt;For bugs and feature requests, please &lt;a href=&#34;https://github.com/micropython/micropython/issues/new/choose&#34;&gt;raise an issue&lt;/a&gt; and follow the templates there.&lt;/p&gt; &#xA;&lt;p&gt;For information about the &lt;a href=&#34;https://store.micropython.org/pyb-features&#34;&gt;MicroPython pyboard&lt;/a&gt;, the officially supported board from the &lt;a href=&#34;https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers&#34;&gt;original Kickstarter campaign&lt;/a&gt;, see the &lt;a href=&#34;http://github.com/micropython/pyboard&#34;&gt;schematics and pinouts&lt;/a&gt; and &lt;a href=&#34;https://docs.micropython.org/en/latest/pyboard/quickref.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;MicroPython is an open-source project and welcomes contributions. To be productive, please be sure to follow the &lt;a href=&#34;https://github.com/micropython/micropython/wiki/ContributorGuidelines&#34;&gt;Contributors&#39; Guidelines&lt;/a&gt; and the &lt;a href=&#34;https://github.com/micropython/micropython/raw/master/CODECONVENTIONS.md&#34;&gt;Code Conventions&lt;/a&gt;. Note that MicroPython is licenced under the MIT license, and all contributions should follow this license.&lt;/p&gt; &#xA;&lt;h2&gt;About this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/py/&#34;&gt;py/&lt;/a&gt; -- the core Python implementation, including compiler, runtime, and core library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/mpy-cross/&#34;&gt;mpy-cross/&lt;/a&gt; -- the MicroPython cross-compiler which is used to turn scripts into precompiled bytecode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/&#34;&gt;ports/&lt;/a&gt; -- platform-specific code for the various ports and architectures that MicroPython runs on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/lib/&#34;&gt;lib/&lt;/a&gt; -- submodules for external dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/tests/&#34;&gt;tests/&lt;/a&gt; -- test framework and test scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/docs/&#34;&gt;docs/&lt;/a&gt; -- user documentation in Sphinx reStructuredText format. This is used to generate the &lt;a href=&#34;http://docs.micropython.org&#34;&gt;online documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/extmod/&#34;&gt;extmod/&lt;/a&gt; -- additional (non-core) modules implemented in C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/tools/&#34;&gt;tools/&lt;/a&gt; -- various tools, including the pyboard.py module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/examples/&#34;&gt;examples/&lt;/a&gt; -- a few example Python scripts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&#34;make&#34; is used to build the components, or &#34;gmake&#34; on BSD-based systems. You will also need bash, gcc, and Python 3.3+ available as the command &lt;code&gt;python3&lt;/code&gt; (if your system only has Python 2.7 then invoke make with the additional option &lt;code&gt;PYTHON=python2&lt;/code&gt;). Some ports (rp2 and esp32) additionally use CMake.&lt;/p&gt; &#xA;&lt;h2&gt;Supported platforms &amp;amp; architectures&lt;/h2&gt; &#xA;&lt;p&gt;MicroPython runs on a wide range of microcontrollers, as well as on Unix-like (including Linux, BSD, macOS, WSL) and Windows systems.&lt;/p&gt; &#xA;&lt;p&gt;Microcontroller targets can be as small as 256kiB flash + 16kiB RAM, although devices with at least 512kiB flash + 128kiB RAM allow a much more full-featured experience.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/unix&#34;&gt;Unix&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/windows&#34;&gt;Windows&lt;/a&gt; ports allow both development and testing of MicroPython itself, as well as providing lightweight alternative to CPython on these platforms (in particular on embedded Linux systems).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/minimal&#34;&gt;&#34;minimal&#34;&lt;/a&gt; port provides an example of a very basic MicroPython port and can be compiled as both a standalone Linux binary as well as for ARM Cortex M4. Start with this if you want to port MicroPython to another microcontroller. Additionally the &lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/bare-arm&#34;&gt;&#34;bare-arm&#34;&lt;/a&gt; port is an example of the absolute minimum configuration, and is used to keep track of the code size of the core runtime and VM.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the following ports are provided in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/cc3200&#34;&gt;cc3200&lt;/a&gt; -- Texas Instruments CC3200 (including PyCom WiPy).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/esp32&#34;&gt;esp32&lt;/a&gt; -- Espressif ESP32 SoC (including ESP32S2, ESP32S3, ESP32C3).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/esp8266&#34;&gt;esp8266&lt;/a&gt; -- Espressif ESP8266 SoC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/mimxrt&#34;&gt;mimxrt&lt;/a&gt; -- NXP m.iMX RT (including Teensy 4.x).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/nrf&#34;&gt;nrf&lt;/a&gt; -- Nordic Semiconductor nRF51 and nRF52.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/pic16bit&#34;&gt;pic16bit&lt;/a&gt; -- Microchip PIC 16-bit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/powerpc&#34;&gt;powerpc&lt;/a&gt; -- IBM PowerPC (including Microwatt)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/qemu-arm&#34;&gt;qemu-arm&lt;/a&gt; -- QEMU-based emulated target, for testing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/renesas-ra&#34;&gt;renesas-ra&lt;/a&gt; -- Renesas RA family.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/rp2&#34;&gt;rp2&lt;/a&gt; -- Raspberry Pi RP2040 (including Pico and Pico W).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/samd&#34;&gt;samd&lt;/a&gt; -- Microchip (formerly Atmel) SAMD21 and SAMD51.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/stm32&#34;&gt;stm32&lt;/a&gt; -- STMicroelectronics STM32 family (including F0, F4, F7, G0, G4, H7, L0, L4, WB)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/teensy&#34;&gt;teensy&lt;/a&gt; -- Teensy 3.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/webassembly&#34;&gt;webassembly&lt;/a&gt; -- Emscripten port targeting browsers and NodeJS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/ports/zephyr&#34;&gt;zephyr&lt;/a&gt; -- Zephyr RTOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The MicroPython cross-compiler, mpy-cross&lt;/h2&gt; &#xA;&lt;p&gt;Most ports require the &lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/mpy-cross&#34;&gt;MicroPython cross-compiler&lt;/a&gt; to be built first. This program, called mpy-cross, is used to pre-compile Python scripts to .mpy files which can then be included (frozen) into the firmware/executable for a port. To build mpy-cross use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd mpy-cross&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;External dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The core MicroPython VM and runtime has no external dependencies, but a given port might depend on third-party drivers or vendor HALs. This repository includes &lt;a href=&#34;https://raw.githubusercontent.com/micropython/micropython/master/lib/&#34;&gt;several submodules&lt;/a&gt; linking to these external dependencies. Before compiling a given port, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ports/name&#xA;$ make submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to ensure that all required submodules are initialised.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cesanta/mongoose</title>
    <updated>2023-06-11T01:49:32Z</updated>
    <id>tag:github.com,2023-06-11:/cesanta/mongoose</id>
    <link href="https://github.com/cesanta/mongoose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embedded Web Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mongoose - Embedded Web Server / Embedded Networking Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/gpl-2.0.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv2%20or%20Commercial-green.svg?sanitize=true&#34; alt=&#34;License: GPLv2/Commercial&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cesanta/mongoose/actions&#34;&gt;&lt;img src=&#34;https://github.com/cesanta/mongoose/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/cesanta/mongoose&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/cesanta/mongoose/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:mongoose&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/mongoose.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mongoose is a network library for C/C++. It implements event-driven non-blocking APIs for TCP, UDP, HTTP, WebSocket, MQTT. It is designed for connecting devices and bringing them online. On the market since 2004, used by vast number of open source and commercial products - it even runs on the International Space Station! Mongoose makes embedded network programming fast, robust, and easy. Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;works on Linux/UNIX, MacOS, Windows, Android&lt;/li&gt; &#xA;   &lt;li&gt;works on STM32, NXP, ESP32, NRF52, TI, Microchip, and other&lt;/li&gt; &#xA;   &lt;li&gt;write code once - and it&#39;ll work everywhere&lt;/li&gt; &#xA;   &lt;li&gt;ideal for the unification of the network infrastructure code across company&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in protocols: plain TCP/UDP, HTTP, MQTT, Websocket&lt;/li&gt; &#xA; &lt;li&gt;SSL/TLS support: mbedTLS, OpenSSL or custom (via API)&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous DNS resolver&lt;/li&gt; &#xA; &lt;li&gt;Tiny static and run-time footprint&lt;/li&gt; &#xA; &lt;li&gt;Source code is both ISO C and ISO C++ compliant&lt;/li&gt; &#xA; &lt;li&gt;Very easy to integrate: just copy &lt;code&gt;mongoose.c&lt;/code&gt; and &lt;code&gt;mongoose.h&lt;/code&gt; files to your source tree. See &lt;a href=&#34;https://mongoose.ws/documentation/#2-minute-integration-guide&#34;&gt;exact steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Works with any network stack with socket API, like LwIP or FreeRTOS-Plus-TCP&lt;/li&gt; &#xA; &lt;li&gt;Provides a built-in TCP/IP stack with drivers for bare metal or RTOS systems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A complete Web device dashboard &lt;a href=&#34;https://raw.githubusercontent.com/cesanta/mongoose/master/examples/stm32/nucleo-f429zi-baremetal&#34;&gt;bare metal example on Nucleo-F429ZI&lt;/a&gt; is only 6 files&lt;/li&gt; &#xA;   &lt;li&gt;For comparison, a CubeIDE generated HTTP example is 400+ files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Detailed &lt;a href=&#34;https://mongoose.ws/documentation/&#34;&gt;user guide, API reference and tons of tutorials&lt;/a&gt; available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Commercial use&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mongoose is used by hundreds of businesses, from Fortune500 giants like Siemens, Schneider Electric, Broadcom, Bosch, Google, Samsung, Qualcomm, Caterpillar to the small businesses&lt;/li&gt; &#xA; &lt;li&gt;Used to solve a wide range of business needs, like implementing Web UI interface on devices, RESTful API services, telemetry data exchange, remote control for a product, remote software updates, remote monitoring, and others&lt;/li&gt; &#xA; &lt;li&gt;Deployed to hundreds of millions devices in production environment worldwide&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://mongoose.ws/case-studies/&#34;&gt;Case Studies&lt;/a&gt; from our respected customers like &lt;a href=&#34;https://mongoose.ws/case-studies/schneider-electric/&#34;&gt;Schneider Electric&lt;/a&gt; (industrial automation), &lt;a href=&#34;https://mongoose.ws/case-studies/broadcom/&#34;&gt;Broadcom&lt;/a&gt; (semiconductors), &lt;a href=&#34;https://mongoose.ws/case-studies/pilz/&#34;&gt;Pilz&lt;/a&gt; (industrial automation), and others&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://mongoose.ws/testimonials/&#34;&gt;Testimonials&lt;/a&gt; from engineers that integrated Mongoose in their commercial products&lt;/li&gt; &#xA; &lt;li&gt;We provide &lt;a href=&#34;https://mongoose.ws/licensing/&#34;&gt;Evaluation and Commercial licensing&lt;/a&gt;, &lt;a href=&#34;https://mongoose.ws/support/&#34;&gt;support&lt;/a&gt;, consultancy and integration assistance - don&#39;t hesitate to &lt;a href=&#34;https://mongoose.ws/contact/&#34;&gt;contact us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;We take security seriously:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mongoose repository runs a &lt;a href=&#34;https://github.com/cesanta/mongoose/actions&#34;&gt;continuous integration test powered by GitHub&lt;/a&gt;, which runs through hundreds of unit tests on every commit to the repository. Our &lt;a href=&#34;https://github.com/cesanta/mongoose/tree/master/test&#34;&gt;unit tests&lt;/a&gt; are built with modern address sanitizer technologies, which help to find security vulnerabilities early&lt;/li&gt; &#xA; &lt;li&gt;Mongoose repository is integrated into Google&#39;s &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:mongoose&#34;&gt;oss-fuzz continuous fuzzer&lt;/a&gt; which scans for potential vulnerabilities continuously&lt;/li&gt; &#xA; &lt;li&gt;We receive periodic vulnerability reports from the independent security groups like &lt;a href=&#34;https://www.cisco.com/c/en/us/products/security/talos.html&#34;&gt;Cisco Talos&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/msrc&#34;&gt;Microsoft Security Response Center&lt;/a&gt;, &lt;a href=&#34;https://www.mitre.org/&#34;&gt;MITRE Corporation&lt;/a&gt;, &lt;a href=&#34;https://www.compass-security.com/en/&#34;&gt;Compass Security&lt;/a&gt; and others. In case of the vulnerability found, we act according to the industry best practice: hold on to the publication, fix the software and notify all our customers that have an appropriate subscription&lt;/li&gt; &#xA; &lt;li&gt;Some of our customers (for example NASA) have specific security requirements and run independent security audits, of which we get notified and in case of any issue, act similar to (3).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome! Please follow the guidelines below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sign &lt;a href=&#34;https://cesanta.com/cla.html&#34;&gt;Cesanta CLA&lt;/a&gt; and send GitHub pull request&lt;/li&gt; &#xA; &lt;li&gt;Make sure that PRs have only one commit, and deal with one issue only&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>