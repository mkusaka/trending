<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-02T01:40:02Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skeeto/endlessh</title>
    <updated>2025-02-02T01:40:02Z</updated>
    <id>tag:github.com,2025-02-02:/skeeto/endlessh</id>
    <link href="https://github.com/skeeto/endlessh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SSH tarpit that slowly sends an endless banner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Endlessh: an SSH tarpit&lt;/h1&gt; &#xA;&lt;p&gt;Endlessh is an SSH tarpit &lt;a href=&#34;https://nullprogram.com/blog/2019/03/22/&#34;&gt;that &lt;em&gt;very&lt;/em&gt; slowly sends an endless, random SSH banner&lt;/a&gt;. It keeps SSH clients locked up for hours or even days at a time. The purpose is to put your real SSH server on another port and then let the script kiddies get stuck in this tarpit instead of bothering a real server.&lt;/p&gt; &#xA;&lt;p&gt;Since the tarpit is in the banner before any cryptographic exchange occurs, this program doesn&#39;t depend on any cryptographic libraries. It&#39;s a simple, single-threaded, standalone C program. It uses &lt;code&gt;poll()&lt;/code&gt; to trap multiple clients at a time.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Usage information is printed with &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: endlessh [-vhs] [-d MS] [-f CONFIG] [-l LEN] [-m LIMIT] [-p PORT]&#xA;  -4        Bind to IPv4 only&#xA;  -6        Bind to IPv6 only&#xA;  -d INT    Message millisecond delay [10000]&#xA;  -f        Set and load config file [/etc/endlessh/config]&#xA;  -h        Print this help message and exit&#xA;  -l INT    Maximum banner line length (3-255) [32]&#xA;  -m INT    Maximum number of clients [4096]&#xA;  -p INT    Listening port [2222]&#xA;  -s        Print diagnostics to syslog instead of standard output&#xA;  -v        Print diagnostics (repeatable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Argument order matters. The configuration file is loaded when the &lt;code&gt;-f&lt;/code&gt; argument is processed, so only the options that follow will override the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;By default no log messages are produced. The first &lt;code&gt;-v&lt;/code&gt; enables basic logging and a second &lt;code&gt;-v&lt;/code&gt; enables debugging logging (noisy). All log messages are sent to standard output by default. &lt;code&gt;-s&lt;/code&gt; causes them to be sent to syslog.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;endlessh -v &amp;gt;endlessh.log 2&amp;gt;endlessh.err&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A SIGTERM signal will gracefully shut down the daemon, allowing it to write a complete, consistent log.&lt;/p&gt; &#xA;&lt;p&gt;A SIGHUP signal requests a reload of the configuration file (&lt;code&gt;-f&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;A SIGUSR1 signal will print connections stats to the log.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration File&lt;/h2&gt; &#xA;&lt;p&gt;The configuration file has similar syntax to OpenSSH.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# The port on which to listen for new SSH connections.&#xA;Port 2222&#xA;&#xA;# The endless banner is sent one line at a time. This is the delay&#xA;# in milliseconds between individual lines.&#xA;Delay 10000&#xA;&#xA;# The length of each line is randomized. This controls the maximum&#xA;# length of each line. Shorter lines may keep clients on for longer if&#xA;# they give up after a certain number of bytes.&#xA;MaxLineLength 32&#xA;&#xA;# Maximum number of connections to accept at a time. Connections beyond&#xA;# this are not immediately rejected, but will wait in the queue.&#xA;MaxClients 4096&#xA;&#xA;# Set the detail level for the log.&#xA;#   0 = Quiet&#xA;#   1 = Standard, useful log messages&#xA;#   2 = Very noisy debugging information&#xA;LogLevel 0&#xA;&#xA;# Set the family of the listening socket&#xA;#   0 = Use IPv4 Mapped IPv6 (Both v4 and v6, default)&#xA;#   4 = Use IPv4 only&#xA;#   6 = Use IPv6 only&#xA;BindFamily 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build issues&lt;/h2&gt; &#xA;&lt;p&gt;Some more esoteric systems require extra configuration when building.&lt;/p&gt; &#xA;&lt;h3&gt;RHEL 6 / CentOS 6&lt;/h3&gt; &#xA;&lt;p&gt;This system uses a version of glibc older than 2.17 (December 2012), and &lt;code&gt;clock_gettime(2)&lt;/code&gt; is still in librt. For these systems you will need to link against librt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make LDLIBS=-lrt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Solaris / illumos&lt;/h3&gt; &#xA;&lt;p&gt;These systems don&#39;t include all the necessary functionality in libc and the linker requires some extra libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CC=gcc LDLIBS=&#39;-lnsl -lrt -lsocket&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using GCC or Clang, also override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; to remove GCC-specific options. For example, on Solaris:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CFLAGS=-fast LDFLAGS= LDLIBS=&#39;-lnsl -lrt -lsocket&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The feature test macros on these systems isn&#39;t reliable, so you may also need to use &lt;code&gt;-D__EXTENSIONS__&lt;/code&gt; in &lt;code&gt;CFLAGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;OpenBSD&lt;/h3&gt; &#xA;&lt;p&gt;The man page needs to go into a different path for OpenBSD&#39;s &lt;code&gt;man&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;diff --git a/Makefile b/Makefile&#xA;index 119347a..dedf69d 100644&#xA;--- a/Makefile&#xA;+++ b/Makefile&#xA;@@ -14,8 +14,8 @@ endlessh: endlessh.c&#xA; install: endlessh&#xA;        install -d $(DESTDIR)$(PREFIX)/bin&#xA;        install -m 755 endlessh $(DESTDIR)$(PREFIX)/bin/&#xA;-       install -d $(DESTDIR)$(PREFIX)/share/man/man1&#xA;-       install -m 644 endlessh.1 $(DESTDIR)$(PREFIX)/share/man/man1/&#xA;+       install -d $(DESTDIR)$(PREFIX)/man/man1&#xA;+       install -m 644 endlessh.1 $(DESTDIR)$(PREFIX)/man/man1/&#xA;&#xA; clean:&#xA;        rm -rf endlessh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nrfconnect/sdk-nrf</title>
    <updated>2025-02-02T01:40:02Z</updated>
    <id>tag:github.com,2025-02-02:/nrfconnect/sdk-nrf</id>
    <link href="https://github.com/nrfconnect/sdk-nrf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nRF Connect SDK main repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;nRF Connect SDK: sdk-nrf ########################&lt;/p&gt; &#xA;&lt;p&gt;.. contents:: :local: :depth: 2&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the core of nRF Connect SDK, including subsystems, libraries, samples, and applications. It is also the SDK&#39;s west manifest repository, containing the nRF Connect SDK manifest (west.yml).&lt;/p&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Official latest documentation at &lt;a href=&#34;https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/index.html&#34;&gt;https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For earlier versions, open the latest version and use the drop-down under the title header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>toniebox-reverse-engineering/teddycloud</title>
    <updated>2025-02-02T01:40:02Z</updated>
    <id>tag:github.com,2025-02-02:/toniebox-reverse-engineering/teddycloud</id>
    <link href="https://github.com/toniebox-reverse-engineering/teddycloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;teddyCloud is an open source server replacement for the Boxine Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TeddyCloud&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;TeddyCloud is an alternative server for your Toniebox, allowing you to host the cloud services locally. This gives you the control about which data is sent to the original manufacturer&#39;s cloud and allows you to host your own figurine audio files on e.g. your NAS or any other server.&lt;/p&gt; &#xA;&lt;p&gt;Currently implemented are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide audio content over the air&lt;/li&gt; &#xA; &lt;li&gt;Cache original tonie audio content&lt;/li&gt; &#xA; &lt;li&gt;Simulate live content (.live)&lt;/li&gt; &#xA; &lt;li&gt;Passthrough original tonie audio content&lt;/li&gt; &#xA; &lt;li&gt;Convert any audio file to a tonie audio file (web)&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly convert audio streams via ffmpeg for webradio and streams&lt;/li&gt; &#xA; &lt;li&gt;Basic Web fronted&lt;/li&gt; &#xA; &lt;li&gt;Filter custom tags to prevent deletion (.nocloud)&lt;/li&gt; &#xA; &lt;li&gt;Configure maximum volume for speaker and headphones&lt;/li&gt; &#xA; &lt;li&gt;Configure LED&lt;/li&gt; &#xA; &lt;li&gt;Configure slapping&lt;/li&gt; &#xA; &lt;li&gt;Customize original box sounds (ex. jingle) over the air&lt;/li&gt; &#xA; &lt;li&gt;Extract/Inject certitifcates on a esp32 firmware dump&lt;/li&gt; &#xA; &lt;li&gt;Decode RTNL logs&lt;/li&gt; &#xA; &lt;li&gt;MQTT client&lt;/li&gt; &#xA; &lt;li&gt;Home Assistant integration (MQTT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/toniebox-reverse-engineering/teddycloud_web&#34;&gt;Web frontend&lt;/a&gt; (full stack developers welcome)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;teddyBench integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where to start?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to get started, please follow our &lt;a href=&#34;https://toniebox-reverse-engineering.github.io/docs/tools/teddycloud/&#34;&gt;guide on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development and bulding&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://raw.githubusercontent.com/toniebox-reverse-engineering/teddycloud/master/tree/develop&#34;&gt;develop&lt;/a&gt; for your development and pull requests. Stable builds are available from the master branch. Don&#39;t forget to clone the submodules with --recurse-submodules. To catch sanitizer in you IDE set a breakpoint on &lt;code&gt;__asan::ReportGenericError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Attribution&lt;/h2&gt; &#xA;&lt;p&gt;The icons used are from here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;img_empty.png: &lt;a href=&#34;https://www.flaticon.com/free-icon/ask_1372671&#34;&gt;https://www.flaticon.com/free-icon/ask_1372671&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;img_unknown.png: &lt;a href=&#34;https://www.flaticon.com/free-icon/ask_1923795&#34;&gt;https://www.flaticon.com/free-icon/ask_1923795&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;img_custom.png/favicon.ico: &lt;a href=&#34;https://www.flaticon.com/free-icon/dog_2829818&#34;&gt;https://www.flaticon.com/free-icon/dog_2829818&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks for the original authors for these great icons.&lt;/p&gt;</summary>
  </entry>
</feed>