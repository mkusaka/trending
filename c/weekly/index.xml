<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:42:24Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>citusdata/pg_cron</title>
    <updated>2024-02-11T01:42:24Z</updated>
    <id>tag:github.com,2024-02-11:/citusdata/pg_cron</id>
    <link href="https://github.com/citusdata/pg_cron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run periodic jobs in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.citusdata.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/citusdata/pg_cron/main/github-banner.png&#34; alt=&#34;Citus Banner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is pg_cron?&lt;/h2&gt; &#xA;&lt;p&gt;pg_cron is a simple cron-based job scheduler for PostgreSQL (10 or higher) that runs inside the database as an extension. It uses the same syntax as regular cron, but it allows you to schedule PostgreSQL commands directly from the database. You can also use &#39;[1-59] seconds&#39; to schedule a job based on an interval.&lt;/p&gt; &#xA;&lt;p&gt;pg_cron also allows you using &#39;$&#39; to indicate last day of the month.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Delete old data on Saturday at 3:30am (GMT)&#xA;SELECT cron.schedule(&#39;30 3 * * 6&#39;, $$DELETE FROM events WHERE event_time &amp;lt; now() - interval &#39;1 week&#39;$$);&#xA; schedule&#xA;----------&#xA;       42&#xA;&#xA;-- Vacuum every day at 10:00am (GMT)&#xA;SELECT cron.schedule(&#39;nightly-vacuum&#39;, &#39;0 10 * * *&#39;, &#39;VACUUM&#39;);&#xA; schedule&#xA;----------&#xA;       43&#xA;&#xA;-- Change to vacuum at 3:00am (GMT)&#xA;SELECT cron.schedule(&#39;nightly-vacuum&#39;, &#39;0 3 * * *&#39;, &#39;VACUUM&#39;);&#xA; schedule&#xA;----------&#xA;       43&#xA;&#xA;-- Stop scheduling jobs&#xA;SELECT cron.unschedule(&#39;nightly-vacuum&#39; );&#xA; unschedule &#xA;------------&#xA; t&#xA;&#xA;SELECT cron.unschedule(42);&#xA; unschedule&#xA;------------&#xA;          t&#xA;&#xA;-- Vacuum every Sunday at 4:00am (GMT) in a database other than the one pg_cron is installed in&#xA;SELECT cron.schedule_in_database(&#39;weekly-vacuum&#39;, &#39;0 4 * * 0&#39;, &#39;VACUUM&#39;, &#39;some_other_database&#39;);&#xA; schedule&#xA;----------&#xA;       44&#xA;&#xA;-- Call a stored procedure every 5 seconds&#xA;SELECT cron.schedule(&#39;process-updates&#39;, &#39;5 seconds&#39;, &#39;CALL process_updates()&#39;);&#xA;&#xA;-- Process payroll at 12:00 of the last day of each month&#xA;SELECT cron.schedule(&#39;process-payroll&#39;, &#39;0 12 $ * *&#39;, &#39;CALL process_payroll()&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pg_cron can run multiple jobs in parallel, but it runs at most one instance of a job at a time. If a second run is supposed to start before the first one finishes, then the second run is queued and started as soon as the first run completes.&lt;/p&gt; &#xA;&lt;p&gt;The schedule uses the standard cron syntax, in which * means &#34;run every time period&#34;, and a specific number means &#34;but only at this time&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ┌───────────── min (0 - 59)&#xA; │ ┌────────────── hour (0 - 23)&#xA; │ │ ┌─────────────── day of month (1 - 31) or last day of the month ($)&#xA; │ │ │ ┌──────────────── month (1 - 12)&#xA; │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to&#xA; │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)&#xA; │ │ │ │ │&#xA; │ │ │ │ │&#xA; * * * * *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to create a cron schedule is: &lt;a href=&#34;http://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The code in pg_cron that handles parsing and scheduling comes directly from the cron source code by Paul Vixie, hence the same options are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Installing pg_cron&lt;/h2&gt; &#xA;&lt;p&gt;Install on Red Hat, CentOS, Fedora, Amazon Linux with PostgreSQL 16 using &lt;a href=&#34;https://yum.postgresql.org/repopackages/&#34;&gt;PGDG&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install the pg_cron extension&#xA;sudo yum install -y pg_cron_16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install on Debian, Ubuntu with PostgreSQL 16 using &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install the pg_cron extension&#xA;sudo apt-get -y install postgresql-16-cron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install pg_cron by building it from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/citusdata/pg_cron.git&#xA;cd pg_cron&#xA;# Ensure pg_config is in your path, e.g.&#xA;export PATH=/usr/pgsql-16/bin:$PATH&#xA;make &amp;amp;&amp;amp; sudo PATH=$PATH make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up pg_cron&lt;/h2&gt; &#xA;&lt;p&gt;To start the pg_cron background worker when PostgreSQL starts, you need to add pg_cron to &lt;code&gt;shared_preload_libraries&lt;/code&gt; in postgresql.conf. Note that pg_cron does not run any jobs as a long a server is in &lt;a href=&#34;https://www.postgresql.org/docs/current/static/hot-standby.html&#34;&gt;hot standby&lt;/a&gt; mode, but it automatically starts when the server is promoted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add to postgresql.conf&#xA;&#xA;# required to load pg_cron background worker on start-up&#xA;shared_preload_libraries = &#39;pg_cron&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the pg_cron background worker expects its metadata tables to be created in the &#34;postgres&#34; database. However, you can configure this by setting the &lt;code&gt;cron.database_name&lt;/code&gt; configuration parameter in postgresql.conf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add to postgresql.conf&#xA;&#xA;# optionally, specify the database in which the pg_cron background worker should run (defaults to postgres)&#xA;cron.database_name = &#39;postgres&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pg_cron&lt;/code&gt; may only be installed to one database in a cluster. If you need to run jobs in multiple databases, use &lt;code&gt;cron.schedule_in_database()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Previously pg_cron could only use GMT time, but now you can adapt your time by setting &lt;code&gt;cron.timezone&lt;/code&gt; in postgresql.conf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add to postgresql.conf&#xA;&#xA;# optionally, specify the timezone in which the pg_cron background worker should run (defaults to GMT). E.g:&#xA;cron.timezone = &#39;PRC&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After restarting PostgreSQL, you can create the pg_cron functions and metadata tables using &lt;code&gt;CREATE EXTENSION pg_cron&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- run as superuser:&#xA;CREATE EXTENSION pg_cron;&#xA;&#xA;-- optionally, grant usage to regular users:&#xA;GRANT USAGE ON SCHEMA cron TO marco;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ensuring pg_cron can start jobs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: By default, pg_cron uses libpq to open a new connection to the local database, which needs to be allowed by &lt;a href=&#34;https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html&#34;&gt;pg_hba.conf&lt;/a&gt;. It may be necessary to enable &lt;code&gt;trust&lt;/code&gt; authentication for connections coming from localhost in for the user running the cron job, or you can add the password to a &lt;a href=&#34;https://www.postgresql.org/docs/current/static/libpq-pgpass.html&#34;&gt;.pgpass file&lt;/a&gt;, which libpq will use when opening a connection.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a unix domain socket directory as the hostname and enable &lt;code&gt;trust&lt;/code&gt; authentication for local connections in &lt;a href=&#34;https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html&#34;&gt;pg_hba.conf&lt;/a&gt;, which is normally safe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Connect via a unix domain socket:&#xA;cron.host = &#39;/tmp&#39;&#xA;&#xA;# Can also be an empty string to look for the default directory:&#xA;cron.host = &#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, pg_cron can be configured to use background workers. In that case, the number of concurrent jobs is limited by the &lt;code&gt;max_worker_processes&lt;/code&gt; setting, so you may need to raise that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Schedule jobs via background workers instead of localhost connections&#xA;cron.use_background_workers = on&#xA;# Increase the number of available background workers from the default of 8&#xA;max_worker_processes = 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For security, jobs are executed in the database in which the &lt;code&gt;cron.schedule&lt;/code&gt; function is called with the same permissions as the current user. In addition, users are only able to see their own jobs in the &lt;code&gt;cron.job&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing job run details&lt;/h2&gt; &#xA;&lt;p&gt;You can view the status of running and recently completed job runs in the &lt;code&gt;cron.job_run_details&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from cron.job_run_details order by start_time desc limit 5;&#xA;┌───────┬───────┬─────────┬──────────┬──────────┬───────────────────┬───────────┬──────────────────┬───────────────────────────────┬───────────────────────────────┐&#xA;│ jobid │ runid │ job_pid │ database │ username │      command      │  status   │  return_message  │          start_time           │           end_time            │&#xA;├───────┼───────┼─────────┼──────────┼──────────┼───────────────────┼───────────┼──────────────────┼───────────────────────────────┼───────────────────────────────┤&#xA;│    10 │  4328 │    2610 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:30:00.098164+01 │ 2023-02-07 09:30:00.130729+01 │&#xA;│    10 │  4327 │    2609 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:29:00.015168+01 │ 2023-02-07 09:29:00.832308+01 │&#xA;│    10 │  4321 │    2603 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:28:00.011965+01 │ 2023-02-07 09:28:01.420901+01 │&#xA;│    10 │  4320 │    2602 │ postgres │ marco    │ select process()  │ failed    │ server restarted │ 2023-02-07 09:27:00.011833+01 │ 2023-02-07 09:27:00.72121+01  │&#xA;│     9 │  4320 │    2602 │ postgres │ marco    │ select do_stuff() │ failed    │ job canceled     │ 2023-02-07 09:26:00.011833+01 │ 2023-02-07 09:26:00.22121+01  │&#xA;└───────┴───────┴─────────┴──────────┴──────────┴───────────────────┴───────────┴──────────────────┴───────────────────────────────┴───────────────────────────────┘&#xA;(10 rows)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The records in &lt;code&gt;cron.job_run_details&lt;/code&gt; are not cleaned automatically, but every user that can schedule cron jobs also has permission to delete their own &lt;code&gt;cron.job_run_details&lt;/code&gt; records.&lt;/p&gt; &#xA;&lt;p&gt;Especially when you have jobs that run every few seconds, it can be a good idea to clean up regularly, which can easily be done using pg_cron itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Delete old cron.job_run_details records of the current user every day at noon&#xA;SELECT  cron.schedule(&#39;delete-job-run-details&#39;, &#39;0 12 * * *&#39;, $$DELETE FROM cron.job_run_details WHERE end_time &amp;lt; now() - interval &#39;7 days&#39;$$);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not want to use &lt;code&gt;cron.job_run_details&lt;/code&gt; at all, then you can add &lt;code&gt;cron.log_run = off&lt;/code&gt; to &lt;code&gt;postgresql.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example use cases&lt;/h2&gt; &#xA;&lt;p&gt;Articles showing possible ways of using pg_cron:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2018/01/24/citus-and-pg-partman-creating-a-scalable-time-series-database-on-postgresql/&#34;&gt;Auto-partitioning using pg_partman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2017/12/27/real-time-analytics-dashboards-with-citus/&#34;&gt;Computing rollups in an analytical dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/&#34;&gt;Deleting old data, vacuum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bonesmoses.org/2016/09/09/pg-phriday-irrelevant-inclinations/&#34;&gt;Feeding cats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluca1978.github.io/2019/05/21/pgcron.html&#34;&gt;Routinely invoking a function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.io/blog/2021/03/05/postgres-as-a-cron-server&#34;&gt;Postgres as a cron server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Managed services&lt;/h2&gt; &#xA;&lt;p&gt;The following table keeps track of which of the major managed Postgres services support pg_cron.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aiven.io/postgresql&#34;&gt;Aiven&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.alibabacloud.com/help/doc-detail/150355.htm&#34;&gt;Alibaba Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aws.amazon.com/rds/postgresql/&#34;&gt;Amazon RDS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/postgresql/&#34;&gt;Azure&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.crunchydata.com/products/crunchy-bridge/?ref=producthunt&#34;&gt;Crunchy Bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.digitalocean.com/products/managed-databases/&#34;&gt;DigitalOcean&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cloud.google.com/sql/postgresql/&#34;&gt;Google Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://elements.heroku.com/addons/heroku-postgresql&#34;&gt;Heroku&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://scalegrid.io/postgresql.html&#34;&gt;ScaleGrid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.scaleway.com/en/database/&#34;&gt;Scaleway&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://supabase.io/docs/guides/database&#34;&gt;Supabase&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tembo.io&#34;&gt;Tembo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>snyk/leaky-vessels-dynamic-detector</title>
    <updated>2024-02-11T01:42:24Z</updated>
    <id>tag:github.com,2024-02-11:/snyk/leaky-vessels-dynamic-detector</id>
    <link href="https://github.com/snyk/leaky-vessels-dynamic-detector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Leaky Vessels Dynamic Detector&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Leaky Vessels Dynamic Detector&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/snyk-labs/oss-images/raw/d7a72392dd568658c2009a161803959466595094/oss-community.jpg&#34; alt=&#34;snyk-oss-category&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this repository you&#39;ll find a reference implementation for an eBPF-based runtime detection for the runc and Docker vulnerabilities &lt;code&gt;CVE-2024-21626&lt;/code&gt;, &lt;code&gt;CVE-2024-23651&lt;/code&gt;, &lt;code&gt;CVE-2024-23652&lt;/code&gt; and &lt;code&gt;CVE-2024-23653&lt;/code&gt;. It hooks into Linux syscalls (e.g., &lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;mount&lt;/code&gt;) and function invocations of the Docker daemon and associates them with Docker builds and container processes to identify exploitations of these vulnerabilities. For a static analysis-based approach, please see &lt;a href=&#34;https://github.com/snyk/leaky-vessels-static-detector&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;runc process.cwd &amp;amp; Leaked fds Container Breakout [CVE-2024-21626]&lt;/h3&gt; &#xA;&lt;p&gt;CVE-2024-21626 is a vulnerability in the &lt;code&gt;runc&lt;/code&gt; container runtime allowing an attacker to break out of the container isolation and achieve full root RCE via a crafted image that exploits an issue within the &lt;code&gt;WORKDIR&lt;/code&gt; instruction&#39;s handling. Since there&#39;s a &#34;race&#34; condition between the time some file descriptors to the host are opened and closed, an attacker can create a Dockerfile with the following instruction &lt;code&gt;WORKDIR /proc/self/fd/[ID]&lt;/code&gt; (with ID being a system dependent file descriptor) that will point to the underlying host machine&#39;s file system. This can be exploited when running:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;docker build&lt;/code&gt; - In 2 cases: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When the Dockerfile being built contains the exploit triggerting instruction.&lt;/li&gt; &#xA;   &lt;li&gt;When the Dockerfile being built refers to a base image via the &lt;code&gt;FROM&lt;/code&gt; instruction that contains an &lt;code&gt;ONBUILD&lt;/code&gt; command triggering the exploit e.e. &lt;code&gt;ONBUILD WORKDIR /proc/self/fd/[ID]&lt;/code&gt;. The &lt;code&gt;ONBUILD&lt;/code&gt; instruction injects the command not in the image that contains it but in the image that uses it as a base image. This means that if a base image is compromised or intentionally nefarious i.e. hosted on Dockerhub or other public container registries, exploitation if possible even if nothing changes in the image that the &lt;code&gt;docker build&lt;/code&gt; command actually builds.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thus, this vulnerability can put both build systems and production environments at risk.&lt;/p&gt; &#xA;&lt;h3&gt;Buildkit Mount Cache Race: Build-time Race Condition Container Breakout [CVE-2024-23651]&lt;/h3&gt; &#xA;&lt;p&gt;CVE-2024-23651 is a vulnerability in Docker where a &lt;code&gt;RUN&lt;/code&gt; command is using the &lt;code&gt;--mount=cache&lt;/code&gt; flag. There&#39;s a time-of-check/time-of-use (TOCTOU) vulnerability between the check that a &lt;code&gt;source&lt;/code&gt; dir exists on the Docker daemon&#39;s host and the actual call to the &lt;code&gt;mount&lt;/code&gt; syscall. An attacker is able to craft a Dockerfile that would plant a symlink in between these two calls to induce an arbitrary bind mount that results in full root RCE on the host. This vulnerability only affects the &lt;code&gt;docker build&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Buildkit GRPC SecurityMode Privilege Check [CVE-2024-23653]&lt;/h3&gt; &#xA;&lt;p&gt;CVE-2024-23653 is a vulnerability in Docker that occurs when using a custom Buildkit LLB generator is used with the &lt;code&gt;# syntax&lt;/code&gt; directive. The generator can use the Client.NewContainer and Container.Start GRPC calls to execute a new container during build. The StartRequest.SecurityMode argument is not appropriately checked against the privilege expectations of the docker daemon or docker build call, which allows the GRPC caller to create a privileged container during build. This new privileged container can then be escaped to gain full root RCE on the build host. This vulnerability only affects the &lt;code&gt;docker build&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Buildkit Build-time Container Teardown Arbitrary Delete [CVE-2024-23652]&lt;/h3&gt; &#xA;&lt;p&gt;CVE-2024-23652 is an arbitrary deletion vulnerability in Docker. When &lt;code&gt;RUN --mount&lt;/code&gt; is used in a Dockerfile, if the target of the mount does not exist it will be created for that environment. When the execution completes this created directory will be cleaned up. If the executing command changes the path used for the mount to a symbolic link, the cleanup procedure will traverse this symbolic link and potentially clean up arbitrary directories in the host root filesystem. This vulnerability only affects the &lt;code&gt;docker build&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; usage&lt;/h2&gt; &#xA;&lt;h3&gt;Build-time eBPF detection&lt;/h3&gt; &#xA;&lt;p&gt;The build-time detection applies to all 4 vulnerabilities.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile the detector binary: &lt;code&gt;GOOS=linux GOARCH={{amd64/arm64}} go build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the compiled binary in the background using &lt;code&gt;sudo&lt;/code&gt; (as required by eBPF) in your build environment (i.e., &lt;code&gt;sudo ebpf-detector &amp;amp;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If an exploitation of one of the vulnerabilities is detected, you&#39;ll see &lt;code&gt;Leaky vessels vulnerability detected&lt;/code&gt; printed to &lt;code&gt;STDOUT&lt;/code&gt;, alongside the respective CVE, vulnerability name and additional forensics.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Kubernetes run-time eBPF detection&lt;/h3&gt; &#xA;&lt;p&gt;The run-time detection applies the &lt;code&gt;WORKDIR&lt;/code&gt; vulnerability only (CVE-2024-21626).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build the container image of the detector using the provided &lt;code&gt;Dockerfile&lt;/code&gt; and push it to an image registry.&lt;/li&gt; &#xA; &lt;li&gt;Populate the &lt;code&gt;image&lt;/code&gt; value in the &lt;code&gt;detector.yaml&lt;/code&gt; (marked with &lt;code&gt;TODO&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run the detector as a DaemonSet in your Kubernetes cluster by running &lt;code&gt;kubectl apply -f detector.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If a WORKDIR vulnerability exploitation is detected, you&#39;ll see &lt;code&gt;Leaky Vessels vulnerability detected&lt;/code&gt; printed in the DaemonSet pod logs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Unit tests need to run in &lt;code&gt;sudo&lt;/code&gt;, as they rely on eBPF: &lt;code&gt;sudo go test ebpf-detector/...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires root access / running containers in privileged mode (required by eBPF).&lt;/li&gt; &#xA; &lt;li&gt;The runtime &lt;code&gt;WORKDIR&lt;/code&gt; exploitation (&lt;code&gt;CVE-2024-21626&lt;/code&gt;) happens during container initialization, so it won&#39;t be detected on running containers. The detection also assumes the container runtime is &lt;code&gt;containerd&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The Buildkit Mount Cache Race (&lt;code&gt;CVE-2024-23651&lt;/code&gt;) and Buildkit Build-time Container Teardown Arbitrary Delete (&lt;code&gt;CVE-2024-23652&lt;/code&gt;) detections are timing-based and may have false negatives due to race conditions.&lt;/li&gt; &#xA; &lt;li&gt;Tested in the following environments: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu 20.04/22.04 (AMD64)&lt;/li&gt; &#xA;   &lt;li&gt;GKE (Ubuntu and Alpine Linux, AMD64)&lt;/li&gt; &#xA;   &lt;li&gt;EKS (Ubuntu and Alpine Linux, AMD64)&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu 22.04 (ARM64)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;For updated list of bugs and issues see the project issues.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/snyk/leaky-vessels-dynamic-detector/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Leaky Vessels Dynamic Detector is under the Apache-2.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/snyk/leaky-vessels-dynamic-detector/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libdriver/bmp280</title>
    <updated>2024-02-11T01:42:24Z</updated>
    <id>tag:github.com,2024-02-11:/libdriver/bmp280</id>
    <link href="https://github.com/libdriver/bmp280" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BMP280 full function driver library for general MCU and Linux.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/README_zh-Hans.md&#34;&gt; 简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/README_zh-Hant.md&#34;&gt;繁體中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/README_ja.md&#34;&gt;日本語&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/README_de.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/README_ko.md&#34;&gt;한국어&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/doc/image/logo.svg?sanitize=true&#34; width=&#34;400&#34; height=&#34;150&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;LibDriver BMP280&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/misra/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/misra-compliant-brightgreen.svg?sanitize=true&#34; alt=&#34;MISRA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.libdriver.com/docs/bmp280/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-reference-blue.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The BMP280 is an absolute barometric pressure sensor, which is especially feasible for mobile applications. Its small dimensions and its low power consumption allow for the implementation in battery-powered devices such as mobile phones, GPS modules or watches. The BMP280 is based on Bosch’s proven piezo-resistive pressure sensor technology featuring high accuracy and linearity as well as long-term stability and high EMC robustness. Numerous device operation options guarantee for highest flexibility. The device is optimized in terms of power consumption, resolution and filter performance.&lt;/p&gt; &#xA;&lt;p&gt;LibDriver BMP280 is a full function driver of BMP280 launched by LibDriver.It provides continuous reading of pressure and temperature, single reading of pressure and temperature and other functions. LibDriver is MISRA compliant.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#Instruction&#34;&gt;Instruction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#Install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#Usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#example-basic&#34;&gt;example basic&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#example-shot&#34;&gt;example shot&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#Document&#34;&gt;Document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#License&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libdriver/bmp280/master/#Contact-Us&#34;&gt;Contact Us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instruction&lt;/h3&gt; &#xA;&lt;p&gt;/src includes LibDriver BMP280 source files.&lt;/p&gt; &#xA;&lt;p&gt;/interface includes LibDriver BMP280 IIC, SPI platform independent template.&lt;/p&gt; &#xA;&lt;p&gt;/test includes LibDriver BMP280 driver test code and this code can test the chip necessary function simply.&lt;/p&gt; &#xA;&lt;p&gt;/example includes LibDriver BMP280 sample code.&lt;/p&gt; &#xA;&lt;p&gt;/doc includes LibDriver BMP280 offline document.&lt;/p&gt; &#xA;&lt;p&gt;/datasheet includes BMP280 datasheet.&lt;/p&gt; &#xA;&lt;p&gt;/project includes the common Linux and MCU development board sample code. All projects use the shell script to debug the driver and the detail instruction can be found in each project&#39;s README.md.&lt;/p&gt; &#xA;&lt;p&gt;/misra includes the LibDriver MISRA code scanning results.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Reference /interface IIC, SPI platform independent template and finish your platform IIC, SPI driver.&lt;/p&gt; &#xA;&lt;p&gt;Add /src, /interface and /example to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;example basic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &#34;driver_bmp280_basic.h&#34;&#xA;&#xA;uint8_t res;&#xA;uint32_t i;&#xA;float temperature_c;&#xA;float pressure_pa;&#xA;&#xA;/* basic init */&#xA;res = bmp280_basic_init(BMP280_INTERFACE_IIC, BMP280_ADDRESS_ADO_LOW);&#xA;if (res != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* loop */&#xA;for (i = 0; i &amp;lt; 3; i++)&#xA;{&#xA;    /* delay 1000ms */&#xA;    bmp280_interface_delay_ms(1000);&#xA;&#xA;    /* read data */&#xA;    res = bmp280_basic_read((float *)&amp;amp;temperature_c, (float *)&amp;amp;pressure_pa);&#xA;    if (res != 0)&#xA;    {&#xA;        (void)bmp280_basic_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;&#xA;    /* output */&#xA;    bmp280_interface_debug_print(&#34;bmp280: %d/%d.\n&#34;, i + 1, 3);&#xA;    bmp280_interface_debug_print(&#34;bmp280: temperature is %0.2fC.\n&#34;, temperature_c);&#xA;    bmp280_interface_debug_print(&#34;bmp280: pressure is %0.2fPa.\n&#34;, pressure_pa);&#xA;    &#xA;    ...&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* deinit */&#xA;(void)bmp280_basic_deinit();&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;example shot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &#34;driver_bmp280_shot.h&#34;&#xA;&#xA;uint8_t res;&#xA;uint32_t i;&#xA;float temperature_c;&#xA;float pressure_pa;&#xA;&#xA;/* shot init */&#xA;res = bmp280_shot_init(BMP280_INTERFACE_IIC, BMP280_ADDRESS_ADO_LOW);&#xA;if (res != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* loop */&#xA;for (i = 0; i &amp;lt; 3; i++)&#xA;{&#xA;    /* delay 1000ms */&#xA;    bmp280_interface_delay_ms(1000);&#xA;&#xA;    /* read data */&#xA;    res = bmp280_shot_read((float *)&amp;amp;temperature_c, (float *)&amp;amp;pressure_pa);&#xA;    if (res != 0)&#xA;    {&#xA;        (void)bmp280_shot_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;&#xA;    /* output */&#xA;    bmp280_interface_debug_print(&#34;bmp280: %d/%d.\n&#34;, i + 1, 3);&#xA;    bmp280_interface_debug_print(&#34;bmp280: temperature is %0.2fC.\n&#34;, temperature_c);&#xA;    bmp280_interface_debug_print(&#34;bmp280: pressure is %0.2fPa.\n&#34;, pressure_pa);&#xA;    &#xA;    ...&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* deinit */&#xA;(void)bmp280_shot_deinit();&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Document&lt;/h3&gt; &#xA;&lt;p&gt;Online documents: &lt;a href=&#34;https://www.libdriver.com/docs/bmp280/index.html&#34;&gt;https://www.libdriver.com/docs/bmp280/index.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Offline documents: /doc/html/index.html.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to CONTRIBUTING.md.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (c) 2015 - present LibDriver All rights reserved&lt;/p&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy&lt;/p&gt; &#xA;&lt;p&gt;of this software and associated documentation files (the &#34;Software&#34;), to deal&lt;/p&gt; &#xA;&lt;p&gt;in the Software without restriction, including without limitation the rights&lt;/p&gt; &#xA;&lt;p&gt;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&lt;/p&gt; &#xA;&lt;p&gt;copies of the Software, and to permit persons to whom the Software is&lt;/p&gt; &#xA;&lt;p&gt;furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all&lt;/p&gt; &#xA;&lt;p&gt;copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&lt;/p&gt; &#xA;&lt;p&gt;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&lt;/p&gt; &#xA;&lt;p&gt;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&lt;/p&gt; &#xA;&lt;p&gt;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&lt;/p&gt; &#xA;&lt;p&gt;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&lt;/p&gt; &#xA;&lt;p&gt;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/p&gt; &#xA;&lt;p&gt;SOFTWARE.&lt;/p&gt; &#xA;&lt;h3&gt;Contact Us&lt;/h3&gt; &#xA;&lt;p&gt;Please sent an e-mail to &lt;a href=&#34;mailto:lishifenging@outlook.com&#34;&gt;lishifenging@outlook.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>