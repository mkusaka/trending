<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-12T01:44:49Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antirez/smallchat</title>
    <updated>2023-11-12T01:44:49Z</updated>
    <id>tag:github.com,2023-11-12:/antirez/smallchat</id>
    <link href="https://github.com/antirez/smallchat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal programming example for a chat server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smallchat&lt;/h1&gt; &#xA;&lt;p&gt;TLDR: This is just a programming example for a few friends of mine. It somehow turned into a set of programming videos, continuing one project I started some time ago: Writing System Software videos series.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eT02gzeLmF0&#34;&gt;First episode&lt;/a&gt;, how the basic server works.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yogoUJ2zVYY&#34;&gt;Second episode&lt;/a&gt;, writing a simple client with raw terminal handling.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Likely more will follow, stay tuned.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT: a warning about PRs&lt;/strong&gt;: please note that most pull requests adding features will be refused, because the point of this repository is to improve it step by step in the next videos. We will do refactoring during live coding sessions (or explaining how the refactoring was needed in the video), introducing more libraries to improve the program inner working (linenoise, rax, and so forth). So if you want to improve the program as an exercise, go ahead! It&#39;s a great idea. But I will not merge new features here since the point of the program is to evolve it step by step during the videos.&lt;/p&gt; &#xA;&lt;h2&gt;And now, the full story:&lt;/h2&gt; &#xA;&lt;p&gt;Yesterday I was talking with a few friends of mine, front-end developers mostly, who are a bit far from system programming. We were remembering the old times of IRC. And inevitably I said: that writing a very simple IRC server is an experience everybody should do (I showed them my implementation written in TCL; I was quite shocked that I wrote it 18 years ago: time passes fast). There are very interesting parts in such a program. A single process doing multiplexing, taking the client state and trying to access such state fast once a client has new data, and so forth.&lt;/p&gt; &#xA;&lt;p&gt;But then the discussion evolved and I thought, I&#39;ll show you a very minimal example in C. What is the smallest chat server you can write? For starters to be truly minimal we should not require any proper client. Even if not very well, it should work with &lt;code&gt;telnet&lt;/code&gt; or &lt;code&gt;nc&lt;/code&gt; (netcat). The server&#39;s main operation is just to receive some chat line and send it to all the other clients, in what is sometimes called a fan-out operation. However, this would require a proper &lt;code&gt;readline()&lt;/code&gt; function, then buffering, and so forth. We want it simpler: let&#39;s cheat using the kernel buffers, and pretending we every time receive a full-formed line from the client (an assumption that is in practice often true, so things kinda work).&lt;/p&gt; &#xA;&lt;p&gt;Well, with these tricks we can implement a chat that even has the ability to let the user set their nick in just 200 lines of code (removing spaces and comments, of course). Since I wrote this little program as an example for my friends, I decided to also push it here on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;p&gt;In the next few days, I&#39;ll continue to modify this program in order to evolve it. Different evolution steps will be tagged according to the YouTube episode of my series on &lt;em&gt;Writing System Software&lt;/em&gt; covering such changes. This is my plan (may change, but more or less this is what I want to cover):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementing buffering for reading and writing.&lt;/li&gt; &#xA; &lt;li&gt;Avoiding the linear array, using a dictionary data structure to hold the client state.&lt;/li&gt; &#xA; &lt;li&gt;Writing a proper client: line editing able to handle asynchronous events.&lt;/li&gt; &#xA; &lt;li&gt;Implementing channels.&lt;/li&gt; &#xA; &lt;li&gt;Switching from select(2) to more advanced APIs.&lt;/li&gt; &#xA; &lt;li&gt;Simple symmetric encryption for the chat.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Different changes will be covered by one or more YouTube videos. The full commit history will be preserved in this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HarbourMasters/Shipwright</title>
    <updated>2023-11-12T01:44:49Z</updated>
    <id>tag:github.com,2023-11-12:/HarbourMasters/Shipwright</id>
    <link href="https://github.com/HarbourMasters/Shipwright" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HarbourMasters/Shipwright/develop/docs/shiptitle.darkmode.png#gh-dark-mode-only&#34; alt=&#34;Ship of Harkinian&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HarbourMasters/Shipwright/develop/docs/shiptitle.lightmode.png#gh-light-mode-only&#34; alt=&#34;Ship of Harkinian&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;Official Website: &lt;a href=&#34;https://www.shipofharkinian.com/&#34;&gt;https://www.shipofharkinian.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;Official Discord: &lt;a href=&#34;https://discord.com/invite/shipofharkinian&#34;&gt;https://discord.com/invite/shipofharkinian&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re having any trouble after reading through this &lt;code&gt;README&lt;/code&gt;, feel free ask for help in the Support text channels. Please keep in mind that we do not condone piracy.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;The Ship does not include any copyrighted assets. You are required to provide a supported copy of the game.&lt;/p&gt; &#xA;&lt;h3&gt;1. Verify your ROM dump&lt;/h3&gt; &#xA;&lt;p&gt;You can verify you have dumped a supported copy of the game by using the compatibility checker at &lt;a href=&#34;https://ship.equipment/&#34;&gt;https://ship.equipment/&lt;/a&gt;. If you&#39;d prefer to manually validate your ROM dump, you can cross-reference its &lt;code&gt;sha1&lt;/code&gt; hash with the hashes &lt;a href=&#34;https://raw.githubusercontent.com/HarbourMasters/Shipwright/develop/docs/supportedHashes.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2. Download The Ship of Harkinian from &lt;a href=&#34;https://github.com/HarbourMasters/Shipwright/releases&#34;&gt;Releases&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;3. Launch the Game!&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract the zip&lt;/li&gt; &#xA; &lt;li&gt;Launch &lt;code&gt;soh.exe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Place your supported copy of the game in the same folder as the appimage.&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;soh.appimage&lt;/code&gt;. You may have to &lt;code&gt;chmod +x&lt;/code&gt; the appimage via terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;soh.app&lt;/code&gt;. When prompted, select your supported copy of the game.&lt;/li&gt; &#xA; &lt;li&gt;You should see a notification saying &lt;code&gt;Processing OTR&lt;/code&gt;, then, once the process is complete, you should get a notification saying &lt;code&gt;OTR Successfully Generated&lt;/code&gt;, then the game should start.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Nintendo Switch&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run one of the PC releases to generate an &lt;code&gt;oot.otr&lt;/code&gt; and/or &lt;code&gt;oot-mq.otr&lt;/code&gt; file. After launching the game on PC, you will be able to find these files in the same directory as &lt;code&gt;soh.exe&lt;/code&gt; or &lt;code&gt;soh.appimage&lt;/code&gt;. On macOS, these files can be found in &lt;code&gt;/Users/&amp;lt;username&amp;gt;/Library/Application Support/com.shipofharkinian.soh/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the files to your sd card&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sdcard&#xA;└── switch&#xA;    └── soh&#xA;        ├── oot-mq.otr&#xA;        ├── oot.otr&#xA;        ├── soh.nro&#xA;        └── soh.otr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch via Atmosphere&#39;s &lt;code&gt;Game+R&lt;/code&gt; launcher method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Play!&lt;/h3&gt; &#xA;&lt;p&gt;Congratulations, you are now sailing with the Ship of Harkinian! Have fun!&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;h3&gt;Default keyboard configuration&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;N64&lt;/th&gt; &#xA;   &lt;th&gt;A&lt;/th&gt; &#xA;   &lt;th&gt;B&lt;/th&gt; &#xA;   &lt;th&gt;Z&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Analog stick&lt;/th&gt; &#xA;   &lt;th&gt;C buttons&lt;/th&gt; &#xA;   &lt;th&gt;D-Pad&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keyboard&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;   &lt;td&gt;Space&lt;/td&gt; &#xA;   &lt;td&gt;WASD&lt;/td&gt; &#xA;   &lt;td&gt;Arrow keys&lt;/td&gt; &#xA;   &lt;td&gt;TFGH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other shortcuts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keys&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F1&lt;/td&gt; &#xA;   &lt;td&gt;Toggle menubar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F5&lt;/td&gt; &#xA;   &lt;td&gt;Save state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F6&lt;/td&gt; &#xA;   &lt;td&gt;Change state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F7&lt;/td&gt; &#xA;   &lt;td&gt;Load state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F9&lt;/td&gt; &#xA;   &lt;td&gt;Toggle Text-to-Speech (Windows and Mac only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F11&lt;/td&gt; &#xA;   &lt;td&gt;Fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tab&lt;/td&gt; &#xA;   &lt;td&gt;Toggle Alternate assets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+R&lt;/td&gt; &#xA;   &lt;td&gt;Reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Graphics Backends&lt;/h3&gt; &#xA;&lt;p&gt;Currently, there are three rendering APIs supported: DirectX11 (Windows), OpenGL (all platforms), and Metal (MacOS). You can change which API to use in the &lt;code&gt;Settings&lt;/code&gt; menu of the menubar, which requires a restart. If you&#39;re having an issue with crashing, you can change the API in the &lt;code&gt;shipofharkinian.json&lt;/code&gt; file by finding the line &lt;code&gt;gfxbackend:&#34;&#34;&lt;/code&gt; and changing the value to &lt;code&gt;sdl&lt;/code&gt; for OpenGL. DirectX 11 is the default on Windows.&lt;/p&gt; &#xA;&lt;h1&gt;Custom Assets&lt;/h1&gt; &#xA;&lt;p&gt;Custom assets are packed in &lt;code&gt;.otr&lt;/code&gt; files. To use custom assets, place them in the &lt;code&gt;mods&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in creating and/or packing your own custom asset &lt;code&gt;.otr&lt;/code&gt; files, check out the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HarbourMasters64/retro&#34;&gt;&lt;strong&gt;retro - OTR generator&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HarbourMasters/fast64&#34;&gt;&lt;strong&gt;fast64 - Blender plugin&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;If you want to manually compile SoH, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/HarbourMasters/Shipwright/develop/docs/BUILDING.md&#34;&gt;building instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Playtesting&lt;/h3&gt; &#xA;&lt;p&gt;If you want to playtest a continuous integration build, you can find them at the links below. Keep in mind that these are for playtesting only, and you will likely encounter bugs and possibly crashes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-windows.zip&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-mac.zip&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-linux-performance.zip&#34;&gt;Linux (performance)&lt;/a&gt; &lt;em&gt;(requires &lt;code&gt;glibc 2.35&lt;/code&gt; or newer, but will be more performant than the compatibility build.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-linux-compatiblity.zip&#34;&gt;Linux (compatibility)&lt;/a&gt; &lt;em&gt;(compatible with most Linux distributions, but may not be as performant as the performance build.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-switch.zip&#34;&gt;Switch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-wiiu.zip&#34;&gt;Wii U&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://github.com/Kenix3/libultraship/&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./docs/poweredbylus.darkmode.png&#34;&gt; &#xA;  &lt;img alt=&#34;Powered by libultraship&#34; src=&#34;https://raw.githubusercontent.com/HarbourMasters/Shipwright/develop/docs/poweredbylus.lightmode.png&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>egzumer/uv-k5-firmware-custom</title>
    <updated>2023-11-12T01:44:49Z</updated>
    <id>tag:github.com,2023-11-12:/egzumer/uv-k5-firmware-custom</id>
    <link href="https://github.com/egzumer/uv-k5-firmware-custom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A merge between https://github.com/OneOfEleven/uv-k5-firmware-custom and https://github.com/fagci/uv-k5-firmware-fagci-mod&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Main features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;many of OneOfEleven mods: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AM fix, huge improvement in reception quality&lt;/li&gt; &#xA;   &lt;li&gt;longpress buttons functions replicating F+ action&lt;/li&gt; &#xA;   &lt;li&gt;fast scanning&lt;/li&gt; &#xA;   &lt;li&gt;channel name editing in the menu&lt;/li&gt; &#xA;   &lt;li&gt;channel name + frequency display option&lt;/li&gt; &#xA;   &lt;li&gt;shortcut for scannlist assignment (longpress &lt;code&gt;5 NOAA&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;scannlist toggle (longpress &lt;code&gt;* Scan&lt;/code&gt; while scanning)&lt;/li&gt; &#xA;   &lt;li&gt;configurable button function selectable from menu&lt;/li&gt; &#xA;   &lt;li&gt;battery percentage/voltage on status bar, selectable from menu&lt;/li&gt; &#xA;   &lt;li&gt;longer backlight times&lt;/li&gt; &#xA;   &lt;li&gt;mic bar&lt;/li&gt; &#xA;   &lt;li&gt;RSSI s-meter&lt;/li&gt; &#xA;   &lt;li&gt;more frequency steps&lt;/li&gt; &#xA;   &lt;li&gt;squelch more sensitive&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;fagci spectrum analyzer (&lt;strong&gt;F+5&lt;/strong&gt; to turn on)&lt;/li&gt; &#xA; &lt;li&gt;some other mods introduced by me: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SSB demodulation (adopted from fagci)&lt;/li&gt; &#xA;   &lt;li&gt;backlight dimming&lt;/li&gt; &#xA;   &lt;li&gt;battery voltage callibration from menu&lt;/li&gt; &#xA;   &lt;li&gt;better battery percentage calculation, selectable for 1600mAh or 2200mAh&lt;/li&gt; &#xA;   &lt;li&gt;more configurable button functions&lt;/li&gt; &#xA;   &lt;li&gt;longpress MENU as another cofigurable button&lt;/li&gt; &#xA;   &lt;li&gt;better DCS/CTCSS scanning in the menu (&lt;code&gt;* SCAN&lt;/code&gt; while in RX DCS/CTCSS menu item)&lt;/li&gt; &#xA;   &lt;li&gt;Piotr022 s-meter style&lt;/li&gt; &#xA;   &lt;li&gt;restore initial freq/channel when scanning stopped with EXIT, remember last found transmission with MENU button&lt;/li&gt; &#xA;   &lt;li&gt;reordered and renamed menu entries&lt;/li&gt; &#xA;   &lt;li&gt;LCD interference crash fix&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Manual&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/egzumer/uv-k5-firmware-custom/wiki/Radio-operation&#34;&gt;Radio operation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/egzumer/uv-k5-firmware-custom/wiki/Menu&#34;&gt;Menu&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/egzumer/uv-k5-firmware-custom/wiki/Button-functions&#34;&gt;Button functions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/egzumer/uv-k5-firmware-custom/wiki/Spectrum-analyzer&#34;&gt;Spectrum analyzer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/egzumer/uv-k5-firmware-custom/wiki/Flashing-the-firmware&#34;&gt;Flashing the firmware&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/main.jpg&#34; width=&#34;300&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/spectrum.jpg&#34; width=&#34;300&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/audiobar.jpg&#34; width=&#34;300&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/rssibar.jpg&#34; width=&#34;300&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Open reimplementation of the Quan Sheng UV-K5 v2.1.27 firmware&lt;/h1&gt; &#xA;&lt;p&gt;This repository is a merge of OneOfEleven custom firmware with fagci spectrum analizer plus my few changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OneOfEleven/uv-k5-firmware-custom&#34;&gt;https://github.com/OneOfEleven/uv-k5-firmware-custom&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/fagci/uv-k5-firmware-fagci-mod/tree/refactor&#34;&gt;https://github.com/fagci/uv-k5-firmware-fagci-mod/tree/refactor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All is a cloned and customized version of DualTachyon&#39;s open firmware found here ..&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DualTachyon/uv-k5-firmware&#34;&gt;https://github.com/DualTachyon/uv-k5-firmware&lt;/a&gt; .. a cool achievement !&lt;/p&gt; &#xA;&lt;p&gt;Use this firmware at your own risk (entirely). There is absolutely no guarantee that it will work in any way shape or form on your radio(s), it may even brick your radio(s), in which case, you&#39;d need to buy another radio. Anyway, have fun.&lt;/p&gt; &#xA;&lt;h1&gt;Radio performance&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the Quansheng UV-Kx radios are not professional quality transceivers, their performance is strictly limited. The RX front end has no track-tuned band pass filtering at all, and so are wide band/wide open to any and all signals over a large frequency range.&lt;/p&gt; &#xA;&lt;p&gt;Using the radio in high intensity RF environments will most likely make reception anything but easy (AM mode will suffer far more than FM ever will), the receiver simply doesn&#39;t have a great dynamic range, which results in distorted AM audio with stronger RX&#39;ed signals. There is nothing more anyone can do in firmware/software to improve that, once the RX gain adjustment I do (AM fix) reaches the hardwares limit, your AM RX audio will be all but non-existant (just like Quansheng&#39;s firmware). On the other hand, FM RX audio will/should be fine.&lt;/p&gt; &#xA;&lt;p&gt;But, they are nice toys for the price, fun to play with.&lt;/p&gt; &#xA;&lt;h1&gt;User customization&lt;/h1&gt; &#xA;&lt;p&gt;You can customize the firmware by enabling/disabling various compile options, this allows us to remove certain firmware features in order to make room in the flash for others. You&#39;ll find the options at the top of &#34;Makefile&#34; (&#39;0&#39; = disable, &#39;1&#39; = enable) ..&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ENABLE_CLANG                  := 0     **experimental, builds with clang instead of gcc (LTO will be disabled if you enable this)&#xA;ENABLE_SWD                    := 0       only needed if using CPU&#39;s SWD port (debugging/programming)&#xA;ENABLE_OVERLAY                := 0       cpu FLASH stuff, not needed&#xA;ENABLE_LTO                    := 0     **experimental, reduces size of compiled firmware but might break EEPROM reads (OVERLAY will be disabled if you enable this)&#xA;ENABLE_UART                   := 1       without this you can&#39;t configure radio via PC !&#xA;ENABLE_AIRCOPY                := 0       easier to just enter frequency with butts&#xA;ENABLE_FMRADIO                := 0       WBFM VHF broadcast band receiver&#xA;ENABLE_NOAA                   := 0       everything NOAA (only of any use in the USA)&#xA;ENABLE_VOICE                  := 0       want to hear voices ?&#xA;ENABLE_VOX                    := 0&#xA;ENABLE_ALARM                  := 0       TX alarms&#xA;ENABLE_1750HZ                 := 0       side key 1750Hz TX tone (older style repeater access)&#xA;ENABLE_PWRON_PASSWORD         := 1       power-on password stuff&#xA;ENABLE_BIG_FREQ               := 0       big font frequencies (like original QS firmware)&#xA;ENABLE_SMALL_BOLD             := 1       bold channel name/no. (when name + freq channel display mode)&#xA;ENABLE_KEEP_MEM_NAME          := 1       maintain channel name when (re)saving memory channel&#xA;ENABLE_WIDE_RX                := 1       full 18MHz to 1300MHz RX (though front-end/PA not designed for full range)&#xA;ENABLE_TX_WHEN_AM             := 0       allow TX (always FM) when RX is set to AM&#xA;ENABLE_F_CAL_MENU             := 0       enable the radios hidden frequency calibration menu&#xA;ENABLE_CTCSS_TAIL_PHASE_SHIFT := 1       standard CTCSS tail phase shift rather than QS&#39;s own 55Hz tone method&#xA;ENABLE_BOOT_BEEPS             := 0       gives user audio feedback on volume knob position at boot-up&#xA;ENABLE_SHOW_CHARGE_LEVEL      := 0       show the charge level when the radio is on charge&#xA;ENABLE_REVERSE_BAT_SYMBOL     := 1       mirror the battery symbol on the status bar (+ pole on the right)&#xA;ENABLE_NO_CODE_SCAN_TIMEOUT   := 1       disable 32-sec CTCSS/DCS scan timeout (press exit butt instead of time-out to end scan)&#xA;ENABLE_AM_FIX                 := 1       dynamically adjust the front end gains when in AM mode to helo prevent AM demodulator saturation, ignore the on-screen RSSI level (for now)&#xA;ENABLE_AM_FIX_SHOW_DATA       := 1       show debug data for the AM fix (still tweaking it)&#xA;ENABLE_SQUELCH_MORE_SENSITIVE := 0       make squelch levels a little bit more sensitive - I plan to let user adjust the values themselves&#xA;ENABLE_FASTER_CHANNEL_SCAN    := 0       increases the channel scan speed, but the squelch is also made more twitchy&#xA;ENABLE_RSSI_BAR               := 1       enable a dBm/Sn RSSI bar graph level inplace of the little antenna symbols&#xA;ENABLE_AUDIO_BAR              := 0       experimental, display an audio bar level when TX&#39;ing&#xA;ENABLE_COPY_CHAN_TO_VFO       := 1       copy current channel into the other VFO. Long press `1 BAND` when in channel mode&#xA;ENABLE_SPECTRUM               := 1       fagci spectrum analizer, activated with `F` + `5 NOAA`&#xA;ENABLE_REDUCE_LOW_MID_TX_POWER:= 0       makes medium and low power settings even lower&#xA;ENABLE_BYP_RAW_DEMODULATORS   := 0       additional BYP (bypass?) and RAW demodulation options, prooved not to be very usefull, but it is there if you want to experiment&#xA;ENABLE_BLMIN_TMP_OFF          := 0       additional function for configurable buttons that toggles `BLMin` on and off wihout saving it to the EEPROM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Compiler&lt;/h1&gt; &#xA;&lt;p&gt;arm-none-eabi GCC version 10.3.1 is recommended, which is the current version on Ubuntu 22.04.03 LTS. Other versions may generate a flash file that is too big. You can get an appropriate version from: &lt;a href=&#34;https://developer.arm.com/downloads/-/gnu-rm&#34;&gt;https://developer.arm.com/downloads/-/gnu-rm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;clang may be used but isn&#39;t fully supported. Resulting binaries may also be bigger. You can get it from: &lt;a href=&#34;https://releases.llvm.org/download.html&#34;&gt;https://releases.llvm.org/download.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;If you have docker installed you can use &lt;code&gt;compile-with-docker.bat&lt;/code&gt;, the output files are created in &lt;code&gt;compiled-firmware&lt;/code&gt; folder. This method gives significantly smaller binaries, I&#39;ve seen differences up to 1kb, so it can fit more functionalities this way. The challange can be (or not) installing the docker itself.&lt;/p&gt; &#xA;&lt;p&gt;To compile directly in windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open windows command line and run: &lt;pre&gt;&lt;code&gt;winget install -e -h git.git Python.Python.3.8 GnuWin32.Make&#xA;winget install -e -h Arm.GnuArmEmbeddedToolchain -v &#34;10 2021.10&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Close command line, open a new one and run: &lt;pre&gt;&lt;code&gt;pip install --user --upgrade pip&#xA;pip install crcmod&#xA;mkdir c:\projects &amp;amp; cd /D c:/projects&#xA;git clone https://github.com/egzumer/uv-k5-firmware-custom.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;From now on you can build the firmware by going to &lt;code&gt;c:\projects\uv-k5-firmware-custom&lt;/code&gt; and running &lt;code&gt;win_make.bat&lt;/code&gt; or by running a command line: &lt;pre&gt;&lt;code&gt;cd /D c:\projects\uv-k5-firmware-custom&#xA;win_make.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To reset the repository and pull new changes run (!!! it will delete all your changes !!!): &lt;pre&gt;&lt;code&gt;cd /D c:\projects\uv-k5-firmware-custom&#xA;git reset --hard &amp;amp; git clean -fd &amp;amp; git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I&#39;ve left some notes in the win_make.bat file to maybe help with stuff.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Many thanks to various people on Telegram for putting up with me during this effort and helping:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OneOfEleven&#34;&gt;OneOfEleven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DualTachyon&#34;&gt;DualTachyon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fagci&#34;&gt;Mikhail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tunas1337&#34;&gt;Andrej&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/manujedi&#34;&gt;Manuel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@wagner&lt;/li&gt; &#xA; &lt;li&gt;@Lohtse Shar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spm81&#34;&gt;@Matoz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@Davide&lt;/li&gt; &#xA; &lt;li&gt;@Ismo OH2FTG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OneOfEleven&#34;&gt;OneOfEleven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@d1ced95&lt;/li&gt; &#xA; &lt;li&gt;and others I forget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2023 Dual Tachyon &lt;a href=&#34;https://github.com/DualTachyon&#34;&gt;https://github.com/DualTachyon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example changes/updates&lt;/h1&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/image1.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/image2.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/image3.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Video showing the AM fix working ..&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;/images/AM_fix.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://github.com/OneOfEleven/uv-k5-firmware-custom/assets/51590168/2a3a9cdc-97da-4966-bf0d-1ce6ad09779c&#34;&gt;&lt;/video&gt;&lt;/p&gt;</summary>
  </entry>
</feed>