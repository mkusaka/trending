<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:39:20Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>libevent/libevent</title>
    <updated>2022-09-25T01:39:20Z</updated>
    <id>tag:github.com,2022-09-25:/libevent/libevent</id>
    <link href="https://github.com/libevent/libevent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Event notification library&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://libevent.org/libevent3.png&#34; alt=&#34;libevent logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libevent/libevent/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/libevent/libevent/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/libevent/libevent&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/libevent/libevent/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/libevent/libevent?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/libevent/libevent.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/libevent/libevent&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://libevent.org/doc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/doxygen-documentation-blue.svg?sanitize=true&#34; alt=&#34;doxygen&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1. BUILDING AND INSTALLATION&lt;/h1&gt; &#xA;&lt;h2&gt;Autoconf&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure&#xA;$ make&#xA;$ make verify   # (optional)&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/libevent/libevent/master/Documentation/Building.md#autoconf&#34;&gt;Documentation/Building#Autoconf&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;CMake (Windows)&lt;/h2&gt; &#xA;&lt;p&gt;Install CMake: &lt;a href=&#34;https://www.cmake.org&#34;&gt;https://www.cmake.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ md build &amp;amp;&amp;amp; cd build&#xA;$ cmake -G &#34;Visual Studio 10&#34; ..   # Or use any generator you want to use. Run cmake --help for a list&#xA;$ cmake --build . --config Release # Or &#34;start libevent.sln&#34; and build with menu in Visual Studio.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/libevent/libevent/master/Documentation/Building.md#building-on-windows&#34;&gt;Documentation/Building#Building on Windows&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;CMake (Unix)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake ..     # Default to Unix Makefiles.&#xA;$ make&#xA;$ make verify  # (optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/libevent/libevent/master/Documentation/Building.md#building-on-unix-cmake&#34;&gt;Documentation/Building#Building on Unix (With CMake)&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Package Managers&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install libevent using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install libevent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The libevent port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h1&gt;2. USEFUL LINKS:&lt;/h1&gt; &#xA;&lt;p&gt;For the latest released version of Libevent, see the official website at &lt;a href=&#34;http://libevent.org/&#34;&gt;http://libevent.org/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a pretty good work-in-progress manual up at &lt;a href=&#34;http://www.wangafu.net/~nickm/libevent-book/&#34;&gt;http://www.wangafu.net/~nickm/libevent-book/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;For the latest development versions of Libevent, access our Git repository via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/libevent/libevent.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can browse the git repository online at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;https://github.com/libevent/libevent&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To report bugs, issues, or ask for new features:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Patches&lt;/strong&gt;: &lt;a href=&#34;https://github.com/libevent/libevent/pulls&#34;&gt;https://github.com/libevent/libevent/pulls&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;OK, those are not really &lt;em&gt;patches&lt;/em&gt;. You fork, modify, and hit the &#34;Create Pull Request&#34; button. You can still submit normal git patches via the mailing list.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bugs, Features [RFC], and Issues&lt;/strong&gt;: &lt;a href=&#34;https://github.com/libevent/libevent/issues&#34;&gt;https://github.com/libevent/libevent/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Or you can do it via the mailing list.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There&#39;s also a libevent-users mailing list for talking about Libevent use and development:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://archives.seul.org/libevent/users/&#34;&gt;http://archives.seul.org/libevent/users/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;3. ACKNOWLEDGMENTS&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/libevent/libevent/master/CONTRIBUTORS.md&#34;&gt;following people&lt;/a&gt; have helped with suggestions, ideas, code or fixing bugs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nanopb/nanopb</title>
    <updated>2022-09-25T01:39:20Z</updated>
    <id>tag:github.com,2022-09-25:/nanopb/nanopb</id>
    <link href="https://github.com/nanopb/nanopb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protocol Buffers with small code size&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nanopb - Protocol Buffers for Embedded Systems&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nanopb/nanopb/actions/workflows/trigger_on_code_change.yml/badge.svg?sanitize=true&#34; alt=&#34;Latest change&#34;&gt; &lt;img src=&#34;https://github.com/nanopb/nanopb/actions/workflows/trigger_on_schedule.yml/badge.svg?sanitize=true&#34; alt=&#34;Weekly build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nanopb is a small code-size Protocol Buffers implementation in ansi C. It is especially suitable for use in microcontrollers, but fits any memory restricted system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Homepage:&lt;/strong&gt; &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/&#34;&gt;https://jpa.kapsi.fi/nanopb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git repository:&lt;/strong&gt; &lt;a href=&#34;https://github.com/nanopb/nanopb/&#34;&gt;https://github.com/nanopb/nanopb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/docs/&#34;&gt;https://jpa.kapsi.fi/nanopb/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Forum:&lt;/strong&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/nanopb&#34;&gt;https://groups.google.com/forum/#!forum/nanopb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable version downloads:&lt;/strong&gt; &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/download/&#34;&gt;https://jpa.kapsi.fi/nanopb/download/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pre-release binary packages:&lt;/strong&gt; &lt;a href=&#34;https://github.com/nanopb/nanopb/actions/workflows/binary_packages.yml&#34;&gt;https://github.com/nanopb/nanopb/actions/workflows/binary_packages.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using the nanopb library&lt;/h2&gt; &#xA;&lt;p&gt;To use the nanopb library, you need to do two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile your .proto files for nanopb, using &lt;code&gt;protoc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include &lt;em&gt;pb_encode.c&lt;/em&gt;, &lt;em&gt;pb_decode.c&lt;/em&gt; and &lt;em&gt;pb_common.c&lt;/em&gt; in your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The easiest way to get started is to study the project in &#34;examples/simple&#34;. It contains a Makefile, which should work directly under most Linux systems. However, for any other kind of build system, see the manual steps in README.txt in that folder.&lt;/p&gt; &#xA;&lt;h2&gt;Generating the headers&lt;/h2&gt; &#xA;&lt;p&gt;Protocol Buffers messages are defined in a &lt;code&gt;.proto&lt;/code&gt; file, which follows a standard format that is compatible with all Protocol Buffers libraries. To use it with nanopb, you need to generate &lt;code&gt;.pb.c&lt;/code&gt; and &lt;code&gt;.pb.h&lt;/code&gt; files from it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python generator/nanopb_generator.py myprotocol.proto  # For source checkout&#xA;generator-bin/nanopb_generator myprotocol.proto        # For binary package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: For instructions for nanopb-0.3.9.x and older, see the documentation of that particular version &lt;a href=&#34;https://github.com/nanopb/nanopb/raw/maintenance_0.3/README.md&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The binary packages for Windows, Linux and Mac OS X should contain all necessary dependencies, including Python, python-protobuf library and protoc. If you are using a git checkout or a plain source distribution, you will need to install Python separately. Once you have Python, you can install the other dependencies with &lt;code&gt;pip install --upgrade protobuf grpcio-tools&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can further customize the header generation by creating an &lt;code&gt;.options&lt;/code&gt; file. See &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/docs/concepts.html#modifying-generator-behaviour&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;p&gt;If you want to perform further development of the nanopb core, or to verify its functionality using your compiler and platform, you&#39;ll want to run the test suite. The build rules for the test suite are implemented using Scons, so you need to have that installed (ex: &lt;code&gt;sudo apt install scons&lt;/code&gt; or &lt;code&gt;pip install scons&lt;/code&gt;). To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd tests&#xA;scons&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the progress of various test cases. If the output does not end in an error, the test cases were successful.&lt;/p&gt; &#xA;&lt;p&gt;Note: Mac OS X by default aliases &#39;clang&#39; as &#39;gcc&#39;, while not actually supporting the same command line options as gcc does. To run tests on Mac OS X, use: &lt;code&gt;scons CC=clang CXX=clang&lt;/code&gt;. Same way can be used to run tests with different compilers on any platform.&lt;/p&gt; &#xA;&lt;p&gt;For embedded platforms, there is currently support for running the tests on STM32 discovery board and &lt;a href=&#34;https://github.com/buserror/simavr&#34;&gt;simavr&lt;/a&gt; AVR simulator. Use &lt;code&gt;scons PLATFORM=STM32&lt;/code&gt; and &lt;code&gt;scons PLATFORM=AVR&lt;/code&gt; to run these tests.&lt;/p&gt; &#xA;&lt;h2&gt;Build systems and integration&lt;/h2&gt; &#xA;&lt;p&gt;Nanopb C code itself is designed to be portable and easy to build on any platform. Often the bigger hurdle is running the generator which takes in the &lt;code&gt;.proto&lt;/code&gt; files and outputs &lt;code&gt;.pb.c&lt;/code&gt; definitions.&lt;/p&gt; &#xA;&lt;p&gt;There exist build rules for several systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Makefiles&lt;/strong&gt;: &lt;code&gt;extra/nanopb.mk&lt;/code&gt;, see &lt;code&gt;examples/simple&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;: &lt;code&gt;extra/FindNanopb.cmake&lt;/code&gt;, see &lt;code&gt;examples/cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SCons&lt;/strong&gt;: &lt;code&gt;tests/site_scons&lt;/code&gt; (generator only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bazel&lt;/strong&gt;: &lt;code&gt;BUILD&lt;/code&gt; in source root&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conan&lt;/strong&gt;: &lt;code&gt;conanfile.py&lt;/code&gt; in source root&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PlatformIO&lt;/strong&gt;: &lt;a href=&#34;https://platformio.org/lib/show/431/Nanopb&#34;&gt;https://platformio.org/lib/show/431/Nanopb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PyPI/pip&lt;/strong&gt;: &lt;a href=&#34;https://pypi.org/project/nanopb/&#34;&gt;https://pypi.org/project/nanopb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vcpkg&lt;/strong&gt;: &lt;a href=&#34;https://vcpkg.info/port/nanopb&#34;&gt;https://vcpkg.info/port/nanopb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also integration to platform interfaces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arduino&lt;/strong&gt;: &lt;a href=&#34;http://platformio.org/lib/show/1385/nanopb-arduino&#34;&gt;http://platformio.org/lib/show/1385/nanopb-arduino&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ish-app/ish</title>
    <updated>2022-09-25T01:39:20Z</updated>
    <id>tag:github.com,2022-09-25:/ish-app/ish</id>
    <link href="https://github.com/ish-app/ish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux shell for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://ish.app&#34;&gt;iSH&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ish-app/ish&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ish-app/ish.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ish-app/ish/search?q=goto&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/ish-app/ish/goto.svg?sanitize=true&#34; alt=&#34;goto counter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ish-app/ish/search?q=fuck&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/ish-app/ish/fuck.svg?sanitize=true&#34; alt=&#34;fuck counter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ish.app&#34;&gt; &lt;img src=&#34;https://ish.app/assets/github-readme.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A project to get a Linux shell running on iOS, using usermode x86 emulation and syscall translation.&lt;/p&gt; &#xA;&lt;p&gt;For the current status of the project, check the issues tab, and the commit logs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/ish-shell/id1436902243&#34;&gt;App Store page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testflight.apple.com/join/97i7KM8O&#34;&gt;TestFlight beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/HFAXj44&#34;&gt;Discord server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish/wiki&#34;&gt;Wiki with help and tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish/raw/master/README_ZH.md&#34;&gt;README中文&lt;/a&gt; (如若未能保持最新，请提交PR以更新)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hacking&lt;/h1&gt; &#xA;&lt;p&gt;This project has a git submodule, make sure to clone with &lt;code&gt;--recurse-submodules&lt;/code&gt; or run &lt;code&gt;git submodule update --init&lt;/code&gt; after cloning.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need these things to build the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Meson (&lt;code&gt;pip3 install meson&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ninja&lt;/li&gt; &#xA; &lt;li&gt;Clang and LLD (on mac, &lt;code&gt;brew install llvm&lt;/code&gt;, on linux, &lt;code&gt;sudo apt install clang lld&lt;/code&gt; or &lt;code&gt;sudo pacman -S clang lld&lt;/code&gt; or whatever)&lt;/li&gt; &#xA; &lt;li&gt;sqlite3 (this is so common it may already be installed on linux and is definitely already installed on mac. if not, do something like &lt;code&gt;sudo apt install libsqlite3-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;libarchive (&lt;code&gt;brew install libarchive&lt;/code&gt;, &lt;code&gt;sudo port install libarchive&lt;/code&gt;, &lt;code&gt;sudo apt install libarchive-dev&lt;/code&gt;) TODO: bundle this dependency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build for iOS&lt;/h2&gt; &#xA;&lt;p&gt;Open the project in Xcode, open iSH.xcconfig, and change &lt;code&gt;ROOT_BUNDLE_IDENTIFIER&lt;/code&gt; to something unique. You&#39;ll also need to update the development team ID in the project (not target!) build settings. Then click Run. There are scripts that should do everything else automatically. If you run into any problems, open an issue and I&#39;ll try to help.&lt;/p&gt; &#xA;&lt;h2&gt;Build command line tool for testing&lt;/h2&gt; &#xA;&lt;p&gt;To set up your environment, cd to the project and run &lt;code&gt;meson build&lt;/code&gt; to create a build directory in &lt;code&gt;build&lt;/code&gt;. Then cd to the build directory and run &lt;code&gt;ninja&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To set up a self-contained Alpine linux filesystem, download the Alpine minirootfs tarball for i386 from the &lt;a href=&#34;https://alpinelinux.org/downloads/&#34;&gt;Alpine website&lt;/a&gt; and run &lt;code&gt;./tools/fakefsify&lt;/code&gt;, with the minirootfs tarball as the first argument and the name of the output directory as the second argument. Then you can run things inside the Alpine filesystem with &lt;code&gt;./ish -f alpine /bin/login -f root&lt;/code&gt;, assuming the output directory is called &lt;code&gt;alpine&lt;/code&gt;. If &lt;code&gt;tools/fakefsify&lt;/code&gt; doesn&#39;t exist for you in your build directory, that might be because it couldn&#39;t find libarchive on your system (see above for ways to install it.)&lt;/p&gt; &#xA;&lt;p&gt;You can replace &lt;code&gt;ish&lt;/code&gt; with &lt;code&gt;tools/ptraceomatic&lt;/code&gt; to run the program in a real process and single step and compare the registers at each step. I use it for debugging. Requires 64-bit Linux 4.11 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;iSH has several logging channels which can be enabled at build time. By default, all of them are disabled. To enable them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Xcode: Set the &lt;code&gt;ISH_LOG&lt;/code&gt; setting in iSH.xcconfig to a space-separated list of log channels.&lt;/li&gt; &#xA; &lt;li&gt;With Meson (command line tool for testing): Run &lt;code&gt;meson configure -Dlog=&#34;&amp;lt;space-separated list of log channels&amp;gt;&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strace&lt;/code&gt;: The most useful channel, logs the parameters and return value of almost every system call.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;instr&lt;/code&gt;: Logs every instruction executed by the emulator. This slows things down a lot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: Debug logs that don&#39;t fit into another category.&lt;/li&gt; &#xA; &lt;li&gt;Grep for &lt;code&gt;DEFAULT_CHANNEL&lt;/code&gt; to see if more log channels have been added since this list was updated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;A note on the JIT&lt;/h1&gt; &#xA;&lt;p&gt;Possibly the most interesting thing I wrote as part of iSH is the JIT. It&#39;s not actually a JIT since it doesn&#39;t target machine code. Instead it generates an array of pointers to functions called gadgets, and each gadget ends with a tailcall to the next function; like the threaded code technique used by some Forth interpreters. The result is a speedup of roughly 3-5x compared to pure emulation.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I made the decision to write nearly all of the gadgets in assembly language. This was probably a good decision with regards to performance (though I&#39;ll never know for sure), but a horrible decision with regards to readability, maintainability, and my sanity. The amount of bullshit I&#39;ve had to put up with from the compiler/assembler/linker is insane. It&#39;s like there&#39;s a demon in there that makes sure my code is sufficiently deformed, and if not, makes up stupid reasons why it shouldn&#39;t compile. In order to stay sane while writing this code, I&#39;ve had to ignore best practices in code structure and naming. You&#39;ll find macros and variables with such descriptive names as &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. Assembler macros nested beyond belief. And to top it off, there are almost no comments.&lt;/p&gt; &#xA;&lt;p&gt;So a warning: Long-term exposure to this code may cause loss of sanity, nightmares about GAS macros and linker errors, or any number of other debilitating side effects. This code is known to the State of California to cause cancer, birth defects, and reproductive harm.&lt;/p&gt;</summary>
  </entry>
</feed>