<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-04T01:39:27Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yshui/picom</title>
    <updated>2025-05-04T01:39:27Z</updated>
    <id>tag:github.com,2025-05-04:/yshui/picom</id>
    <link href="https://github.com/yshui/picom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight compositor for X11 with animation support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;picom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/yshui/picom&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/yshui/picom.svg?style=shield&#34; alt=&#34;circleci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/yshui/picom&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/yshui/picom/branch/next/graph/badge.svg?token=NRSegi0Gze&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/SY5JJzPgME&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1106224720833159198?logo=discord&#34; alt=&#34;chat on discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;picom&lt;/strong&gt; is a compositor for X, and a &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/History.md&#34;&gt;fork of Compton&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a development branch, bugs to be expected&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can leave your feedback or thoughts in the &lt;a href=&#34;https://github.com/yshui/picom/discussions&#34;&gt;discussion tab&lt;/a&gt;, or chat with other users on &lt;a href=&#34;https://discord.gg/SY5JJzPgME&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/yshui/picom/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you already have all the usual building tools installed (e.g. gcc, python, meson, ninja, etc.), you still need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libx11&lt;/li&gt; &#xA; &lt;li&gt;libx11-xcb&lt;/li&gt; &#xA; &lt;li&gt;xproto&lt;/li&gt; &#xA; &lt;li&gt;xcb&lt;/li&gt; &#xA; &lt;li&gt;xcb-util&lt;/li&gt; &#xA; &lt;li&gt;xcb-damage&lt;/li&gt; &#xA; &lt;li&gt;xcb-xfixes&lt;/li&gt; &#xA; &lt;li&gt;xcb-shape&lt;/li&gt; &#xA; &lt;li&gt;xcb-renderutil&lt;/li&gt; &#xA; &lt;li&gt;xcb-render&lt;/li&gt; &#xA; &lt;li&gt;xcb-randr&lt;/li&gt; &#xA; &lt;li&gt;xcb-composite&lt;/li&gt; &#xA; &lt;li&gt;xcb-image&lt;/li&gt; &#xA; &lt;li&gt;xcb-present&lt;/li&gt; &#xA; &lt;li&gt;xcb-glx&lt;/li&gt; &#xA; &lt;li&gt;pixman&lt;/li&gt; &#xA; &lt;li&gt;libconfig&lt;/li&gt; &#xA; &lt;li&gt;libdbus (optional, disable with the &lt;code&gt;-Ddbus=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libGL, libEGL, libepoxy (optional, disable with the &lt;code&gt;-Dopengl=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libpcre2 (optional, disable with the &lt;code&gt;-Dregex=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libev&lt;/li&gt; &#xA; &lt;li&gt;uthash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Debian based distributions (e.g. Ubuntu), the needed packages are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libconfig-dev libdbus-1-dev libegl-dev libev-dev libgl-dev libepoxy-dev libpcre2-dev libpixman-1-dev libx11-xcb-dev libxcb1-dev libxcb-composite0-dev libxcb-damage0-dev libxcb-glx0-dev libxcb-image0-dev libxcb-present-dev libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-util-dev libxcb-xfixes0-dev meson ninja-build uthash-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, the needed packages are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dbus-devel gcc git libconfig-devel libev-devel libX11-devel libX11-xcb libxcb-devel libGL-devel libEGL-devel libepoxy-devel meson pcre2-devel pixman-devel uthash-devel xcb-util-image-devel xcb-util-renderutil-devel xorg-x11-proto-devel xcb-util-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the documents, you need &lt;code&gt;asciidoctor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ meson setup --buildtype=release build&#xA;$ ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Built binary can be found in &lt;code&gt;build/src&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have libraries and/or headers installed at non-default location (e.g. under &lt;code&gt;/usr/local/&lt;/code&gt;), you might need to tell meson about them, since meson doesn&#39;t look for dependencies there by default.&lt;/p&gt; &#xA;&lt;p&gt;You can do that by setting the &lt;code&gt;CPPFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; environment variables when running &lt;code&gt;meson&lt;/code&gt;. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LDFLAGS=&#34;-L/path/to/libraries&#34; CPPFLAGS=&#34;-I/path/to/headers&#34; meson setup --buildtype=release build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example, on FreeBSD, you might have to run meson with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LDFLAGS=&#34;-L/usr/local/lib&#34; CPPFLAGS=&#34;-I/usr/local/include&#34; meson setup --buildtype=release build&#xA;$ ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ninja -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default install prefix is &lt;code&gt;/usr/local&lt;/code&gt;, you can change it with &lt;code&gt;meson configure -Dprefix=&amp;lt;path&amp;gt; build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;New features you think should be included in picom, a fix for a bug you found - please open a PR!&lt;/p&gt; &#xA;&lt;p&gt;You can take a look at the &lt;a href=&#34;https://github.com/yshui/picom/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contributions to the documents and wiki are also appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Even if you don&#39;t want to add anything to picom, you are still helping by compiling and running this branch, and report any issue you can find.&lt;/p&gt; &#xA;&lt;h3&gt;Become a Collaborator&lt;/h3&gt; &#xA;&lt;p&gt;Becoming a collaborator of picom requires significant time commitment. You are expected to reply to issue reports, reviewing PRs, and sometimes fix bugs or implement new feature. You won&#39;t be able to push to the main branch directly, and all you code still has to go through code review.&lt;/p&gt; &#xA;&lt;p&gt;If this sounds good to you, feel free to contact me.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/CONTRIBUTORS&#34;&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The README for the &lt;a href=&#34;https://github.com/chjj/compton/&#34;&gt;original Compton project&lt;/a&gt; can be found &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/History.md#Compton&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;picom is free software, made available under the &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/LICENSES/MIT&#34;&gt;MIT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/LICENSES/MPL-2.0&#34;&gt;MPL-2.0&lt;/a&gt; software licenses. See the individual source files for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LongSoft/UEFITool</title>
    <updated>2025-05-04T01:39:27Z</updated>
    <id>tag:github.com,2025-05-04:/LongSoft/UEFITool</id>
    <link href="https://github.com/LongSoft/UEFITool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UEFI firmware image viewer and editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UEFITool&lt;/h1&gt; &#xA;&lt;p&gt;UEFITool is a viewer and editor of firmware images conforming to UEFI Platform Interface (PI) Specifications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LongSoft/UEFITool/new_engine/UEFITool/icons/uefitool_64x64.png&#34; alt=&#34;UEFITool icon&#34; title=&#34;UEFITool icon&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/LongSoft/UEFITool/actions/workflows/main.yml/badge.svg?branch=new_engine&#34; alt=&#34;CI Status&#34;&gt; &lt;a href=&#34;https://scan.coverity.com/projects/17209&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/17209/badge.svg?flat=1&#34; alt=&#34;Scan Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=LongSoft_UEFITool&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=LongSoft_UEFITool&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Very Brief Introduction to UEFI&lt;/h2&gt; &#xA;&lt;p&gt;Unified Extensible Firmware Interface or UEFI is a post-BIOS firmware specification originally written by Intel for Itanium architecture and than adapted for X86 systems.&lt;br&gt; The first EFI-compatible x86 firmwares were used on Apple Macintosh systems in 2006 and PC motherboard vendors started putting UEFI-compatible firmwares on their boards in 2011.&lt;br&gt; In 2015 there are numerous systems using UEFI-compatible firmware including PCs, Macs, Tablets and Smartphones on x86, x86-64 and ARM architectures.&lt;br&gt; More information on UEFI is available on &lt;a href=&#34;http://www.uefi.org/faq&#34;&gt;UEFI Forum official site&lt;/a&gt; and in &lt;a href=&#34;http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface&#34;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Very Brief Introduction to UEFITool&lt;/h2&gt; &#xA;&lt;p&gt;UEFITool is a cross-platform open source application written in C++/Qt, that parses UEFI-compatible firmware image into a tree structure, verifies image&#39;s integrity and provides a GUI to manipulate image&#39;s elements.&lt;br&gt; Project development started in the middle of 2013 because of the lack of cross-platform open source utilities for tinkering with UEFI images.&lt;/p&gt; &#xA;&lt;p&gt;In the beginning of 2015 the major refactoring round was started to make the program compatible with newer UEFI features including FFSv3 volumes and fixed image elements. It&#39;s in development right now with the following features still missing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Editor part, i.e image reconstruction routines&lt;/li&gt; &#xA; &lt;li&gt;Console UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The missing parts are in development and the version with a new engine will be made as soon as image reconstruction works again.&lt;/p&gt; &#xA;&lt;h2&gt;Derived projects&lt;/h2&gt; &#xA;&lt;p&gt;There are some other projects that use UEFITool&#39;s engine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UEFIExtract, which uses ffsParser to parse supplied firmware image into a tree structure and dumps the parsed structure recursively on the FS. Jethro Beekman&#39;s &lt;a href=&#34;https://github.com/jethrogb/uefireverse&#34;&gt;tree&lt;/a&gt; utility can be used to work with the extracted tree.&lt;/li&gt; &#xA; &lt;li&gt;UEFIFind, which uses ffsParser to find image elements containing a specified pattern. It was developed for &lt;a href=&#34;https://winraid.level1techs.com/t/tool-guide-news-uefi-bios-updater-ubu/30357&#34;&gt;UBU&lt;/a&gt; project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Right now there are some alternatives to UEFITool that you could find useful too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/tianocore/edk2/tree/master/BaseTools/Source/Python/FMMT&#34;&gt;FMMT&lt;/a&gt;&lt;/strong&gt; by TianoCore. Python-based open source toolset for modifying EDK2-based UEFI firmware images. Does not support any IBV customizations, but is &lt;em&gt;official&lt;/em&gt;, and lives in EDK2 repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/linuxboot/fiano&#34;&gt;Fiano&lt;/a&gt;&lt;/strong&gt; by Google and Facebook. Go-based cross-platform open source toolset for modifying UEFI firmware images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://forums.mydigitallife.net/threads/tool-to-insert-replace-slic-in-phoenix-insyde-dell-efi-bioses.13194&#34;&gt;PhoenixTool&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&#34;https://forums.mydigitallife.net/members/andyp.39295&#34;&gt;AndyP&lt;/a&gt;. Windows-only freeware GUI application written in C#. Used mostly for SLIC-related modifications, but it not limited to this task. Requires Microsoft .NET 3.5 to work properly. Supports unpacking firmware images from various vendor-specific formats like encrypted HP update files and Dell installers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/theopolis/uefi-firmware-parser&#34;&gt;uefi-firmware-parser&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&#34;https://github.com/theopolis&#34;&gt;Teddy Reed&lt;/a&gt;. Cross-platform open source console application written in Python. Very tinker-friendly due to use of Python. Can be used in scripts to automate firmware patching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/chipsec/chipsec&#34;&gt;Chipsec&lt;/a&gt;&lt;/strong&gt; by Intel. Cross-platform partially open source console application written in Python and C. Can be used to test Intel-based platforms for various security-related misconfigurations, but also has NVRAM parser and other components aimed to firmware modification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can either use &lt;a href=&#34;https://github.com/LongSoft/UEFITool/releases&#34;&gt;pre-built binaries&lt;/a&gt; or build a binary yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To build a binary that uses Qt library (UEFITool) you need a C++ compiler and an instance of &lt;a href=&#34;https://www.qt.io&#34;&gt;Qt5 or Qt6&lt;/a&gt; library. Install both of them, get the sources, generate makefiles using qmake (&lt;code&gt;qmake ./UEFITool/uefitool.pro&lt;/code&gt;) and use your system&#39;s make command on that generated files (i.e. &lt;code&gt;nmake release&lt;/code&gt;, &lt;code&gt;make release&lt;/code&gt; and so on). Qt6-based builds can also use CMAKE as an altearnative build system.&lt;/li&gt; &#xA; &lt;li&gt;To build a binary that doesn&#39;t use Qt (UEFIExtract, UEFIFind), you need a C++ compiler and &lt;a href=&#34;https://cmake.org&#34;&gt;CMAKE&lt;/a&gt; utility to generate a makefile for your OS and build environment. Install both of them, get the sources, generate makefiles using cmake (&lt;code&gt;cmake UEFIExtract&lt;/code&gt;) and use your system&#39;s make command on that generated files (i.e. &lt;code&gt;nmake release&lt;/code&gt;, &lt;code&gt;make release&lt;/code&gt; and so on). Non-Qt builds can also use Meson as an alternative build system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Image editing is currently only possible using an outdated and unsupported UEFITool 0.28 (&lt;code&gt;old_engine&lt;/code&gt; branch) and the tools based on it (&lt;code&gt;UEFIReplace&lt;/code&gt;, &lt;code&gt;UEFIPatch&lt;/code&gt;). This is the top priority &lt;a href=&#34;https://github.com/LongSoft/UEFITool/issues/67&#34;&gt;issue #67&lt;/a&gt;, which is being worked on, albeit slowly (due to the amount of coding and testing required to implement it correctly).&lt;/li&gt; &#xA; &lt;li&gt;Some vendor-specific firmware update files can be opened incorrectly or can&#39;t be opened at all. This includes encrypted HP update files, Dell HDR and EXE files, some InsydeFlash FD files and so on. Enabling support for such files will require massive amount of reverse-engineering which is almost pointless because the updated image can be obtained from BIOS chip where it&#39;s already decrypted and unpacked.&lt;/li&gt; &#xA; &lt;li&gt;Intel Firmware Interface Table (FIT) editing is not supported right now. FIT contains pointers to various image components that must be loaded before executing the first CPU instruction from the BIOS chip. Those components include CPU microcode updates, binaries and settings used by BIOS Guard and Boot Guard technologies and some other stuff. More information on FIT can be obtained &lt;a href=&#34;https://edc.intel.com/content/www/us/en/design/products-and-solutions/software-and-services/firmware-and-bios/firmware-interface-table/firmware-interface-table/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Windows builds of &lt;code&gt;UEFIExtract&lt;/code&gt; and &lt;code&gt;UEFIFind&lt;/code&gt; might encouter an issue with folder paths being longer than 260 bytes (&lt;code&gt;MAX_PATH&lt;/code&gt;) on some input files (see &lt;a href=&#34;https://github.com/LongSoft/UEFITool/issues/363&#34;&gt;issue #363&lt;/a&gt;). This is a &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry&#34;&gt;known Windows limitation&lt;/a&gt;, that can be fixed by enabling long paths support via Windows Registry and adding a manifest to the executable file that requires such support. &lt;code&gt;UEFIExtract&lt;/code&gt; has the required manifest additions since version &lt;code&gt;A67&lt;/code&gt;, and the required registry file is provided by Microsoft on the page linked above, but this workaround is only awailable starting with Windows 10 build 1067.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bug repellents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scan.coverity.com/projects/17209&#34;&gt;Coverity Scan&lt;/a&gt; - static analyzer for C, C++, C#, JavaScript, Ruby, or Python code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sonarcloud.io/project/overview?id=LongSoft_UEFITool&#34;&gt;SonarCloud&lt;/a&gt; - cloud-based source code analysis service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GUID Database&lt;/h2&gt; &#xA;&lt;p&gt;Every new release includes an update to the database of known UEFI-related GUIDs build with help of &lt;a href=&#34;https://fwupd.org&#34;&gt;Linux Vendor Firmware Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can download the up-to-date version of that database using &lt;a href=&#34;https://fwupd.org/lvfs/shards/export/csv&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>