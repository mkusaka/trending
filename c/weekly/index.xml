<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:43:39Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nginx/nginx</title>
    <updated>2024-02-18T01:43:39Z</updated>
    <id>tag:github.com,2024-02-18:/nginx/nginx</id>
    <link href="https://github.com/nginx/nginx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An official read-only mirror of http://hg.nginx.org/nginx/ which is updated hourly. Pull requests on GitHub cannot be accepted and will be automatically closed. The proper way to submit changes to nginx is via the nginx development mailing list, see http://nginx.org/en/docs/contributing_changes.html&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tursodatabase/libsql</title>
    <updated>2024-02-18T01:43:39Z</updated>
    <id>tag:github.com,2024-02-18:/tursodatabase/libsql</id>
    <link href="https://github.com/tursodatabase/libsql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;libSQL is a fork of SQLite that is both Open Source, and Open Contributions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/libsql/libsql/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VzbXemj6Rg&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1026540227218640906?color=5865F2&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=8a9095&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/331197/205099307-3f20b4e5-96cf-466c-be62-73907e9f2325.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;What is libSQL?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://turso.tech/libsql&#34;&gt;libSQL&lt;/a&gt; is an open source, open contribution fork of SQLite, created and maintained by &lt;a href=&#34;https://turso.tech&#34;&gt;Turso&lt;/a&gt;. We aim to evolve it to suit many more use cases than SQLite was originally designed for, and plan to use third-party OSS code wherever it makes sense.&lt;/p&gt; &#xA;&lt;p&gt;libSQL is licensed under an &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/LICENSE.md&#34;&gt;Open Source License&lt;/a&gt;, and we adhere to a clear &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embedded replicas that allow you to have replicated database inside your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/libsql-server&#34;&gt;libSQL server&lt;/a&gt; for remote SQLite access, similar to PostgreSQL or MySQL&lt;/li&gt; &#xA; &lt;li&gt;Supports Rust, JavaScript, Python, Go, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also various improvements and extensions to the core SQLite:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/raw/main/libsql-sqlite3/doc/libsql_extensions.md#altering-columns&#34;&gt;&lt;code&gt;ALTER TABLE&lt;/code&gt; extension for modifying column types and constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/issues/12&#34;&gt;Randomized ROWID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.turso.tech/webassembly-functions-for-your-sqlite-compatible-database-7e1ad95a2aa7&#34;&gt;WebAssembly User Defined Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/pull/87&#34;&gt;Pass down SQL string to virtual table implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/pull/53&#34;&gt;Virtual write-ahead log interface&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The comprehensive description can be found &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/libsql-sqlite3/doc/libsql_extensions.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The project provides two interfaces: the libSQL API, which supports all the features, and the SQLite C API for compatibility.&lt;/p&gt; &#xA;&lt;p&gt;To get started with the libSQL API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql-experimental-node&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/libsql&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql-experimental-python&#34;&gt;Python&lt;/a&gt; (experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/bindings/go&#34;&gt;Go&lt;/a&gt; (experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/bindings/c&#34;&gt;C&lt;/a&gt; (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build the SQLite-compatible C library and tools, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo xtask build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the SQL shell, launch the &lt;code&gt;libsql&lt;/code&gt; program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd libsql-sqlite3 &amp;amp;&amp;amp; ./libsql&#xA;libSQL version 0.2.1 (based on SQLite version 3.43.0) 2023-05-23 11:47:56&#xA;Enter &#34;.help&#34; for usage hints.&#xA;Connected to a transient in-memory database.&#xA;Use &#34;.open FILENAME&#34; to reopen on a persistent database.&#xA;libsql&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why a fork?&lt;/h2&gt; &#xA;&lt;p&gt;SQLite has solidified its place in modern technology stacks, embedded in nearly any computing device you can think of. Its open source nature and public domain availability make it a popular choice for modification to meet specific use cases.&lt;/p&gt; &#xA;&lt;p&gt;But despite having its code available, SQLite famously doesn&#39;t accept external contributors and doesn&#39;t adhere to a code of conduct. So community improvements cannot be widely enjoyed.&lt;/p&gt; &#xA;&lt;p&gt;There have been other forks in the past, but they all focus on a specific technical difference. We aim to be a community where people can contribute from many different angles and motivations.&lt;/p&gt; &#xA;&lt;p&gt;We want to see a world where everyone can benefit from all of the great ideas and hard work that the SQLite community contributes back to the codebase. Community contributions work well, because weâ€™ve done it before. If this was possible, what do you think SQLite could become?&lt;/p&gt; &#xA;&lt;p&gt;You can read more about our goals an motivation in our &lt;a href=&#34;https://turso.tech/libsql-manifesto&#34;&gt;product vision&lt;/a&gt; and our &lt;a href=&#34;https://glaubercosta-11125.medium.com/sqlite-qemu-all-over-again-aedad19c9a1c&#34;&gt;announcement article&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility with SQLite&lt;/h2&gt; &#xA;&lt;p&gt;Compatibility with SQLite is of great importance for us. But it can mean many things. So here&#39;s our stance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The file format&lt;/strong&gt;: libSQL will always be able to ingest and write the SQLite file format. We would love to add extensions like encryption, and CRC that require the file to be changed. But we commit to always doing so in a way that generates standard sqlite files if those features are not used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The API&lt;/strong&gt;: libSQL will keep 100% compatibility with the SQLite API, but we may add additional APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embedded&lt;/strong&gt;: SQLite is an embedded database that can be consumed as a single .c file with its accompanying header. libSQL will always be embeddable, meaning it runs inside your process without needing a network connection. But we may change the distribution, so that object files are generated, instead of a single .c file.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cyberus-technology/virtualbox-kvm</title>
    <updated>2024-02-18T01:43:39Z</updated>
    <id>tag:github.com,2024-02-18:/cyberus-technology/virtualbox-kvm</id>
    <link href="https://github.com/cyberus-technology/virtualbox-kvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VirtualBox with KVM Backend. With our current development model, we cannot easily accept pull requests here. If you&#39;d like to contribute, feel free to reach out to us, we are happy to find a solution.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VirtualBox KVM&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains an adapted version of the open source virtualization tool VirtualBox called VirtualBox KVM. VirtualBox KVM uses Linux KVM as the underlying hypervisor.&lt;/p&gt; &#xA;&lt;h2&gt;What to expect&lt;/h2&gt; &#xA;&lt;p&gt;The basic look and feel of VirtualBox KVM will be the same as with an conventional VirtualBox. The user is able to boot the same guest VMs in their existing VirtualBox configuration.&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, there are the following benefits of using VirtualBox KVM compared to the conventional VirtualBox:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VirtualBox can run in parallel to QEMU/KVM&lt;/li&gt; &#xA; &lt;li&gt;VirtualBox kernel driver (&lt;code&gt;vboxdrv&lt;/code&gt;) is not required&lt;/li&gt; &#xA; &lt;li&gt;Modern virtualization features supported by KVM are automatically used (e.g. APICv)&lt;/li&gt; &#xA; &lt;li&gt;KVM is part of the Linux kernel and therefore always directly available with every kernel update&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Due to the replacement of the underlying hypervisor, there will be differences in the guest performance. Performance differences heavily depend on the guest workload.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are no prebuilt packages of VirtualBox KVM and it needs to be built from source. The process of building VirtualBox from source can be found &lt;a href=&#34;https://www.virtualbox.org/wiki/Linux%20build%20instructions&#34;&gt;on virtualbox.org&lt;/a&gt; and only minor adjustments are required to build VirtualBox with KVM as a backend.&lt;/p&gt; &#xA;&lt;p&gt;On a fresh install of Ubuntu 22.04, you can use the following command to install all prerequisites via &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt install acpica-tools chrpath doxygen g++-multilib libasound2-dev libcap-dev \&#xA;        libcurl4-openssl-dev libdevmapper-dev libidl-dev libopus-dev libpam0g-dev \&#xA;        libpulse-dev libqt5opengl5-dev libqt5x11extras5-dev qttools5-dev libsdl1.2-dev libsdl-ttf2.0-dev \&#xA;        libssl-dev libvpx-dev libxcursor-dev libxinerama-dev libxml2-dev libxml2-utils \&#xA;        libxmu-dev libxrandr-dev make nasm python3-dev python2-dev qttools5-dev-tools \&#xA;        texlive texlive-fonts-extra texlive-latex-extra unzip xsltproc \&#xA;        \&#xA;        default-jdk libstdc++5 libxslt1-dev linux-kernel-headers makeself \&#xA;        mesa-common-dev subversion yasm zlib1g-dev glslang-tools \&#xA;        libc6-dev-i386 lib32stdc++6 libtpms-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Newer GCC versions (&amp;gt;= 12) might cause build issues. The command above installs a compatible version on Ubuntu 22.04.&lt;/p&gt; &#xA;&lt;p&gt;After having all the prerequisites installed, the build process can be condensed to the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./configure --with-kvm --disable-kmods --disable-docs --disable-hardening --disable-java&#xA;$ source ./env.sh&#xA;$ kmk&#xA;$ out/linux.amd64/release/bin/VirtualBox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The noticeable difference to the official build process is the addition of &lt;code&gt;--with-kvm&lt;/code&gt; when calling &lt;code&gt;./configure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues and limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently, Intel x86_64 is the only supported host platform. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AMD will most likely work too but is considered experimental at the moment.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux is required as a host operating system for building and running VirtualBox KVM.&lt;/li&gt; &#xA; &lt;li&gt;Starting with Intel Tiger Lake (11th Gen Core processors) or newer, split lock detection must be turned off in the host system. This can be achieved using the Linux kernel command line parameter &lt;code&gt;split_lock_detect=off&lt;/code&gt; or using the &lt;code&gt;split_lock_mitigate&lt;/code&gt; sysctl.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to engage&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use VirtualBox with KVM or if you have a need for custom virtualization solutions, we are happy to provide guidance and engineering services. Please reach out to us via our &lt;a href=&#34;https://cyberus-technology.de/contact&#34;&gt;support form&lt;/a&gt; or via e-mail at &lt;a href=&#34;mailto:service@cyberus-technology.de&#34;&gt;service@cyberus-technology.de&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter any issues please use the provided issue template and describe your problem as detailed as possible.&lt;/p&gt;</summary>
  </entry>
</feed>