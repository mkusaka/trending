<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-07T02:03:31Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SanderMertens/flecs</title>
    <updated>2022-08-07T02:03:31Z</updated>
    <id>tag:github.com,2022-08-07:/SanderMertens/flecs</id>
    <link href="https://github.com/SanderMertens/flecs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast entity component system (ECS) for C &amp; C++&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/logo.png&#34; alt=&#34;flecs&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SanderMertens/flecs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/sandermertens/flecs?include_prereleases&amp;amp;style=for-the-badge&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.flecs.dev/flecs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-flecs-blue?style=for-the-badge&amp;amp;color=blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SanderMertens/flecs/actions?query=workflow%3ARust&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/SanderMertens/flecs/CI?style=for-the-badge&#34; alt=&#34;actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/BEzP5Rgrrp&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/633826290415435777.svg?style=for-the-badge&amp;amp;color=%235a64f6&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flecs is a fast and lightweight Entity Component System that lets you build games and simulations with millions of entities (&lt;a href=&#34;https://discord.gg/BEzP5Rgrrp&#34;&gt;join the Discord!&lt;/a&gt;). Here are some of the framework&#39;s highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast and &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/#language-bindings&#34;&gt;portable&lt;/a&gt; zero dependency &lt;a href=&#34;https://flecs.docsforge.com/master/api-c/&#34;&gt;C99 API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modern type-safe &lt;a href=&#34;https://flecs.docsforge.com/master/api-cpp/&#34;&gt;C++11 API&lt;/a&gt; that doesn&#39;t use STL containers&lt;/li&gt; &#xA; &lt;li&gt;First open source ECS with full support for &lt;a href=&#34;https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c&#34;&gt;Entity Relationships&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Fast native support for &lt;a href=&#34;https://flecs.docsforge.com/master/relationships-manual/#the-childof-relationship&#34;&gt;hierarchies&lt;/a&gt; and &lt;a href=&#34;https://flecs.docsforge.com/master/relationships-manual/#the-isa-relationship&#34;&gt;prefabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Minimal ECS core with optional &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/#addons&#34;&gt;addons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Entire codebase builds in less than 5 seconds&lt;/li&gt; &#xA; &lt;li&gt;Runs &lt;a href=&#34;https://flecs.dev/city&#34;&gt;in the browser&lt;/a&gt; without modifications with emscripten&lt;/li&gt; &#xA; &lt;li&gt;Cache friendly &lt;a href=&#34;https://ajmmertens.medium.com/building-an-ecs-2-archetypes-and-vectorization-fe21690805f9&#34;&gt;archetype/SoA storage&lt;/a&gt; that can process millions of entities every frame&lt;/li&gt; &#xA; &lt;li&gt;Supports entities with hundreds of components and applications with tens of thousands of archetypes&lt;/li&gt; &#xA; &lt;li&gt;Automatic component registration that works out of the box across shared libraries/DLLs&lt;/li&gt; &#xA; &lt;li&gt;Write free functions with &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/queries/basics&#34;&gt;queries&lt;/a&gt; or run code automatically in &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/systems/pipeline&#34;&gt;systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run games on multiple CPU cores with a fast lockless scheduler&lt;/li&gt; &#xA; &lt;li&gt;Compiles warning-free on 8 compilers on all major platforms, with &lt;a href=&#34;https://github.com/SanderMertens/flecs/actions&#34;&gt;CI&lt;/a&gt; running more than 4000 tests&lt;/li&gt; &#xA; &lt;li&gt;Integrated &lt;a href=&#34;https://flecs.docsforge.com/master/api-meta/&#34;&gt;reflection framework&lt;/a&gt; with &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/reflection/basics_json&#34;&gt;JSON serializer&lt;/a&gt; and support for &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/reflection/runtime_component&#34;&gt;runtime components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/reflection/units&#34;&gt;Unit annotations&lt;/a&gt; for components&lt;/li&gt; &#xA; &lt;li&gt;Powerful &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/rules&#34;&gt;query language&lt;/a&gt; with support for &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/rules/setting_variables&#34;&gt;joins&lt;/a&gt; and &lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp/rules/component_inheritance&#34;&gt;inheritance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-stats/&#34;&gt;Statistics addon&lt;/a&gt; for profiling ECS performance&lt;/li&gt; &#xA; &lt;li&gt;A web-based dashboard (&lt;a href=&#34;https://flecs.dev/explorer&#34;&gt;demo&lt;/a&gt;, &lt;a href=&#34;https://github.com/flecs-hub/explorer&#34;&gt;code&lt;/a&gt;) for inspecting entities, running ECS queries and monitoring games:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flecs.dev/explorer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/explorer.png&#34; alt=&#34;Dashboard image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is an Entity Component System?&lt;/h2&gt; &#xA;&lt;p&gt;ECS is a new way of organizing code and data that lets you build games that are larger, more complex and are easier to extend.&lt;/p&gt; &#xA;&lt;p&gt;Something is called an ECS when it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Has &lt;em&gt;entities&lt;/em&gt; that uniquely identify objects in a game&lt;/li&gt; &#xA; &lt;li&gt;Has &lt;em&gt;components&lt;/em&gt; which are datatypes that can be added to entities&lt;/li&gt; &#xA; &lt;li&gt;Has &lt;em&gt;systems&lt;/em&gt; which are functions that run for all entities matching a component &lt;em&gt;query&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, a game has a &lt;code&gt;Move&lt;/code&gt; &lt;em&gt;system&lt;/em&gt; that has a &lt;em&gt;query&lt;/em&gt; with two &lt;em&gt;components&lt;/em&gt;, &lt;code&gt;Position, Velocity&lt;/code&gt;. When the system is ran it is dynamically matched with all &lt;em&gt;entities&lt;/em&gt; that have at least these two components.&lt;/p&gt; &#xA;&lt;p&gt;For more info on ECS, check the &lt;a href=&#34;https://github.com/SanderMertens/ecs-faq&#34;&gt;ECS FAQ&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To use Flecs, add the &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/flecs.c&#34;&gt;flecs.c&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/flecs.h&#34;&gt;flecs.h&lt;/a&gt; files to your project. When importing the files into a C++ project, make sure to compile &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/flecs.c&#34;&gt;flecs.c&lt;/a&gt; as C code (for example by using &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; instead of &lt;code&gt;g++&lt;/code&gt; and &lt;code&gt;clang++&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Flecs can also be built as a standalone library, by using the cmake, meson, bazel or &lt;a href=&#34;https://github.com/SanderMertens/bake&#34;&gt;bake&lt;/a&gt; build files. If you are using a custom build file to compile Flecs as a library, make sure to define &lt;code&gt;flecs_EXPORTS&lt;/code&gt;, for example by adding &lt;code&gt;-Dflecs_EXPORTS&lt;/code&gt; to the compiler command.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/flecs.c&#34;&gt;flecs.c&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/flecs.h&#34;&gt;flecs.h&lt;/a&gt; files to build a standalone library, make sure to remove this line from the top of the &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/flecs.h&#34;&gt;flecs.h&lt;/a&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define flecs_STATIC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default Flecs includes many features that may not be useful for every project. Builds can be customized to minimize the overhead of the library. See the &lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/#addons&#34;&gt;Addons&lt;/a&gt; section for more information on customized builds.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to view the documentation at &lt;a href=&#34;https://www.flecs.dev/&#34;&gt;https://www.flecs.dev/&lt;/a&gt; !&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/Quickstart.md&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/Queries.md&#34;&gt;Query Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/Relationships.md&#34;&gt;Relationships Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/JsonFormat.md&#34;&gt;JSON Format Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/RestApi.md&#34;&gt;REST API Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/Manual.md&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/c&#34;&gt;C examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SanderMertens/flecs/tree/master/examples/cpp&#34;&gt;C++ examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Show me the code!&lt;/h2&gt; &#xA;&lt;p&gt;C99 example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct {&#xA;  float x, y;&#xA;} Position, Velocity;&#xA;&#xA;void Move(ecs_iter_t *it) {&#xA;  Position *p = ecs_field(it, Position, 1);&#xA;  Velocity *v = ecs_field(it, Velocity, 2);&#xA;&#xA;  for (int i = 0; i &amp;lt; it-&amp;gt;count; i++) {&#xA;    p[i].x += v[i].x;&#xA;    p[i].y += v[i].y;&#xA;  }&#xA;}&#xA;&#xA;int main(int argc, char *argv[]) {&#xA;  ecs_world_t *ecs = ecs_init();&#xA;&#xA;  ECS_COMPONENT(ecs, Position);&#xA;  ECS_COMPONENT(ecs, Velocity);&#xA;&#xA;  ECS_SYSTEM(ecs, Move, EcsOnUpdate, Position, Velocity);&#xA;&#xA;  ecs_entity_t e = ecs_new_id(ecs);&#xA;  ecs_set(ecs, e, Position, {10, 20});&#xA;  ecs_set(ecs, e, Velocity, {1, 2});&#xA;&#xA;  while (ecs_progress(ecs, 0)) { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same example in C++11:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct Position {&#xA;  float x, y;&#xA;};&#xA;&#xA;struct Velocity {&#xA;  float x, y;&#xA;};&#xA;&#xA;int main(int argc, char *argv[]) {&#xA;  flecs::world ecs;&#xA;&#xA;  ecs.system&amp;lt;Position, const Velocity&amp;gt;()&#xA;    .each([](Position&amp;amp; p, const Velocity&amp;amp; v) {&#xA;      p.x += v.x;&#xA;      p.y += v.y;&#xA;    });&#xA;&#xA;  auto e = ecs.entity()&#xA;    .set([](Position&amp;amp; p, Velocity&amp;amp; v) {&#xA;      p = {10, 20};&#xA;      v = {1, 2};&#xA;    });&#xA;&#xA;  while (ecs.progress()) { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects using Flecs&lt;/h2&gt; &#xA;&lt;p&gt;If you have a project you&#39;d like to share, let me know on &lt;a href=&#34;https://discord.gg/BEzP5Rgrrp&#34;&gt;Discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Territory Control&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/690290/Territory_Control_2/&#34;&gt;https://store.steampowered.com/app/690290/Territory_Control_2/&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/projects/territory_control.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sol Survivor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nicok.itch.io/sol-survivor-demo&#34;&gt;https://nicok.itch.io/sol-survivor-demo&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/projects/sol_survivor.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The Forge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ConfettiFX/The-Forge&#34;&gt;https://github.com/ConfettiFX/The-Forge&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/projects/the_forge.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gravitas&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thepunkcollective.itch.io/gravitas&#34;&gt;https://thepunkcollective.itch.io/gravitas&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/projects/gravitas.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;After Sun&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/foxnne/aftersun&#34;&gt;https://github.com/foxnne/aftersun&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SanderMertens/flecs/master/docs/img/projects/after_sun.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;Examples and tutorials contributed by the community &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-systems-bgfx/tree/bgfx_imgui&#34;&gt;Bgfx/Imgui module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/oldmanauz/b4ced44737bf9d248233538fa06a989e&#34;&gt;Tower defense example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jtferson.github.io/blog/flecs_and_unreal/&#34;&gt;Flecs + UE4 is magic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jtferson.github.io/blog/quickstart_with_flecs_in_unreal_part_1/&#34;&gt;Quickstart with Flecs in UE4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jtferson.github.io/blog/automatic_flecs_component_registration_in_unreal/&#34;&gt;Automatic component registration in UE4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ajmmertens/status/1361070033334456320&#34;&gt;Building a space battle with Flecs in UE4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HeatXD/flecs_web_demo&#34;&gt;Flecs + SDL + Web ASM example&lt;/a&gt; (&lt;a href=&#34;https://heatxd.github.io/flecs_web_demo/&#34;&gt;live demo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lexxicon/FlecsRaylib&#34;&gt;Flecs + Raylib example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MrFrenik/gs_examples/raw/main/ex_demos/flecs/source/main.c&#34;&gt;Flecs + gunslinger example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flecs resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/BEzP5Rgrrp&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ajmmertens.medium.com&#34;&gt;Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SanderMertens/ecs-faq&#34;&gt;ECS FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ajmmertens&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/flecs&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Addons&lt;/h2&gt; &#xA;&lt;p&gt;Flecs has a modular architecture that makes it easy to only build the features you really need. By default all addons are built. To customize a build, first define &lt;code&gt;FLECS_CUSTOM_BUILD&lt;/code&gt;, then add defines for the addons you need. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define FLECS_CUSTOM_BUILD  // Don&#39;t build all addons&#xA;#define FLECS_SYSTEM        // Build FLECS_SYSTEM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can also specify addons to exclude from a build by adding &lt;code&gt;NO&lt;/code&gt; to the define:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define FLECS_NO_LOG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following addons can be configured:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Addon&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Define&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-cpp/&#34;&gt;Cpp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++11 API&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_CPP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-module/&#34;&gt;Module&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Organize game logic into reusable modules&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_MODULE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-systems/&#34;&gt;System&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create &amp;amp; run systems&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_SYSTEM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-pipeline/&#34;&gt;Pipeline&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically schedule &amp;amp; multithread systems&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_PIPELINE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-timers/&#34;&gt;Timer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run systems at time intervals or at a rate&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_TIMER&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-meta/&#34;&gt;Meta&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flecs reflection system&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_META&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-units/&#34;&gt;Units&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builtin unit types&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_UNITS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-meta-c/&#34;&gt;Meta_C&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(C) Utilities for auto-inserting reflection data&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_META_C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-expr/&#34;&gt;Expr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String format optimized for ECS data&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_EXPR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-json/&#34;&gt;JSON&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON format&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_JSON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-doc/&#34;&gt;Doc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add documentation to components, systems &amp;amp; more&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_DOC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-coredoc/&#34;&gt;Coredoc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Documentation for builtin components &amp;amp; modules&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_COREDOC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-http/&#34;&gt;Http&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tiny HTTP server for processing simple requests&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_HTTP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-rest/&#34;&gt;Rest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;REST API for showing entities in the browser&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_REST&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-parser/&#34;&gt;Parser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create entities &amp;amp; queries from strings&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_PARSER&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-plecs/&#34;&gt;Plecs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Small utility language for asset/scene loading&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_PLECS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-rules/&#34;&gt;Rules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Powerful prolog-like query language&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_RULES&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-snapshot/&#34;&gt;Snapshot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Take snapshots of the world &amp;amp; restore them&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_SNAPSHOT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-stats/&#34;&gt;Stats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See what&#39;s happening in a world with statistics&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_STATS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-monitor/&#34;&gt;Monitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Periodically collect &amp;amp; store statistics&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_MONITOR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-log/&#34;&gt;Log&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extended tracing and error logging&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_LOG&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-app/&#34;&gt;App&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flecs application framework&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_APP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flecs.docsforge.com/master/api-os-api-impl/&#34;&gt;OS API Impl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default OS API implementation for Posix/Win32&lt;/td&gt; &#xA;   &lt;td&gt;FLECS_OS_API_IMPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Flecs Hub&lt;/h2&gt; &#xA;&lt;p&gt;Flecs Hub is a collection of repositories that show how Flecs can be used to build game systems like input handling, hierarchical transforms and rendering.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-cglm&#34;&gt;flecs.components.cglm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Component registration for cglm (math) types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-input&#34;&gt;flecs.components.input&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Components that describe keyboard and mouse input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-transform&#34;&gt;flecs.components.transform&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Components that describe position, rotation and scale&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-physics&#34;&gt;flecs.components.physics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Components that describe physics and movement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-geometry&#34;&gt;flecs.components.geometry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Components that describe geometry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-graphics&#34;&gt;flecs.components.graphics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Components used for computer graphics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-components-gui&#34;&gt;flecs.components.gui&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Components used to describe GUI components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-systems-transform&#34;&gt;flecs.systems.transform&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hierarchical transforms for scene graphs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-systems-physics&#34;&gt;flecs.systems.physics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Systems for moving objects and collision detection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-systems-sdl2&#34;&gt;flecs.systems.sdl2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SDL window creation &amp;amp; input management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-systems-sokol&#34;&gt;flecs.systems.sokol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sokol-based renderer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-game&#34;&gt;flecs.game&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generic game systems, like a camera controller&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Language bindings&lt;/h2&gt; &#xA;&lt;p&gt;The following language bindings have been developed with Flecs! Note that these are projects built and maintained by helpful community members, and may not always be up to date with the latest commit from master!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-lua&#34;&gt;Lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prime31/zig-flecs&#34;&gt;Zig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flecs-hub/flecs-cs&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jazzay/flecs-rs&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supporting Flecs ♥️&lt;/h2&gt; &#xA;&lt;p&gt;Supporting Flecs goes a long way towards keeping the project going and the community alive! If you like the project, consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Giving it a star 🌟&lt;/li&gt; &#xA; &lt;li&gt;Becoming a sponsor: &lt;a href=&#34;https://github.com/sponsors/SanderMertens&#34;&gt;https://github.com/sponsors/SanderMertens&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openresty/openresty</title>
    <updated>2022-08-07T02:03:31Z</updated>
    <id>tag:github.com,2022-08-07:/openresty/openresty</id>
    <link href="https://github.com/openresty/openresty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High Performance Web Platform Based on Nginx and LuaJIT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;OpenResty - Turning Nginx into a Full-Fledged Scriptable Web Platform&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#description&#34;&gt;Description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#for-users&#34;&gt;For Users&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#for-bundle-maintainers&#34;&gt;For Bundle Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#additional-features&#34;&gt;Additional Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#resolvconf-parsing&#34;&gt;resolv.conf parsing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#mailing-list&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#report-bugs&#34;&gt;Report Bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#copyright--license&#34;&gt;Copyright &amp;amp; License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;OpenResty is a full-fledged web application server by bundling the standard nginx core, lots of 3rd-party nginx modules, as well as most of their external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;This bundle is maintained by Yichun Zhang (agentzh).&lt;/p&gt; &#xA;&lt;p&gt;Because most of the nginx modules are developed by the bundle maintainers, it can ensure that all these modules are played well together.&lt;/p&gt; &#xA;&lt;p&gt;The bundled software components are copyrighted by the respective copyright holders.&lt;/p&gt; &#xA;&lt;p&gt;The homepage for this project is on &lt;a href=&#34;https://openresty.org/&#34;&gt;openresty.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For Users&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://openresty.org/en/download.html&#34;&gt;download page&lt;/a&gt; on the &lt;code&gt;openresty.org&lt;/code&gt; web site to download the latest bundle tarball, and follow the installation instructions in the &lt;a href=&#34;https://openresty.org/en/installation.html&#34;&gt;installation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For Bundle Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;The bundle&#39;s source is at the following git repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/openresty&#34;&gt;https://github.com/openresty/openresty&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To reproduce the bundle tarball, just do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;at the top of the bundle source tree.&lt;/p&gt; &#xA;&lt;p&gt;Please note that you may need to install some extra dependencies, like &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;dos2unix&lt;/code&gt;, and &lt;code&gt;mercurial&lt;/code&gt;. On Fedora 22, for example, installing the dependencies is as simple as running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install perl dos2unix mercurial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Additional Features&lt;/h1&gt; &#xA;&lt;p&gt;In additional to the standard nginx core features, this bundle also supports the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resolv.conf parsing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;resolver address ... [valid=time] [ipv6=on|off] [local=on|off|path]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;-&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, stream, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver&#34;&gt;&lt;code&gt;resolver&lt;/code&gt; directive&lt;/a&gt; in standard nginx core with additional support for parsing additional resolvers from the &lt;code&gt;resolv.conf&lt;/code&gt; file format.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;local=on&lt;/code&gt;, the standard path of &lt;code&gt;/etc/resolv.conf&lt;/code&gt; will be used. You may also specify arbitrary path to be used for parsing, for example: &lt;code&gt;local=/tmp/test.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;local=off&lt;/code&gt;, parsing will be disabled (this is the default).&lt;/p&gt; &#xA;&lt;p&gt;This feature is not available on Windows platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mailing List&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re very welcome to join the English OpenResty mailing list hosted on Google Groups:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/openresty-en&#34;&gt;https://groups.google.com/group/openresty-en&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Chinese mailing list is here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/openresty&#34;&gt;https://groups.google.com/group/openresty&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Report Bugs&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re very welcome to report issues on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/openresty/issues&#34;&gt;https://github.com/openresty/openresty/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Copyright &amp;amp; License&lt;/h1&gt; &#xA;&lt;p&gt;The bundle itself is licensed under the 2-clause BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2011-2019, Yichun &#34;agentzh&#34; Zhang (章亦春) &lt;a href=&#34;mailto:agentzh@gmail.com&#34;&gt;agentzh@gmail.com&lt;/a&gt;, OpenResty Inc.&lt;/p&gt; &#xA;&lt;p&gt;This module is licensed under the terms of the BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>peng-zhihui/ElectronBot</title>
    <updated>2022-08-07T02:03:31Z</updated>
    <id>tag:github.com,2022-08-07:/peng-zhihui/ElectronBot</id>
    <link href="https://github.com/peng-zhihui/ElectronBot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ElectronBot: Mini Desktop Robot&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目是一个桌面级小机器工具人，外观设计的灵感来源是WALL-E里面的EVE~机器人具备USB通信显示画面功能，具备6个自由度（手部roll、pitch，颈部，腰部各一个），使用自己修改的特制舵机支持关节角度回传。&lt;/p&gt; &#xA; &lt;p&gt;本项目提供了配套的全套开发资料和对应SDK以供二次开发，SDK使用说明见后文。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;视频介绍&lt;/strong&gt;：&lt;a href=&#34;https://www.bilibili.com/video/BV1ka411b76m/&#34;&gt;【自制】我做了个能动的 电 脑 配 件！【软核】_哔哩哔哩&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Video&lt;/strong&gt; : &lt;a href=&#34;https://www.youtube.com/watch?v=F29vrvUwqS4&#34;&gt;I made a cute mini desktop robot ! - YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：Issues里面是讨论项目开发相关话题的，不要在里面发无意义的消息，不然watch了仓库的人都会收到通知邮件会给别人造成困扰的！！！灌水可以在仓库的Discuss里讨论！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;更新说明：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.4.5更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加单独的USB通信功能测试工程以及预编译文件，在&lt;code&gt;6.Tests\TestDisplayUSB\_Released&lt;/code&gt;目录；使用方法是直接给STM32F4烧录hex文件，然后直接在电脑端运行&lt;code&gt;Sample.exe&lt;/code&gt;，硬件正常的话屏幕会显示文件夹里的视频。&lt;/li&gt; &#xA; &lt;li&gt;上述预编译文件的源码和固件也在文件夹里有提供，相当于一个最小测试工程，可以自己查看代码进行调试。&lt;/li&gt; &#xA; &lt;li&gt;注意在6个舵机没有测试验证成功之前，调试代码不要使用舵机收发指令的功能，不然总线会阻塞导致程序卡住，推荐的方式是先单独一个一个功能调试，完成了之后再整合做联调。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;安装教程可以参考：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/1668139036&#34;&gt;数码甲鱼的简单生活&lt;/a&gt; 同学的胎教级教程：&lt;a href=&#34;https://www.bilibili.com/video/BV1sY4y1Y7t6&#34;&gt;https://www.bilibili.com/video/BV1sY4y1Y7t6&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/25228512&#34;&gt;绿荫阿广&lt;/a&gt;同学的安装视频 ：&lt;a href=&#34;https://www.bilibili.com/video/BV1oY4y1v7oN&#34;&gt;https://www.bilibili.com/video/BV1oY4y1v7oN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.4.17更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加语音识别版电子，感谢&lt;a href=&#34;https://github.com/jinsonli/ElectronBot-Voice&#34;&gt;jinsonli/ElectronBot-Voice &lt;/a&gt;的分享，演示效果可以看这个视频：&lt;a href=&#34;https://www.bilibili.com/video/BV18a411v7JS&#34;&gt;我复刻了电脑配件机器人electronbot【语音版】&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;视频中演示的舵机调试工具已添加到本仓库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.项目文件说明&lt;/h3&gt; &#xA;&lt;h4&gt;1.1 Hardware&lt;/h4&gt; &#xA;&lt;p&gt;Hardware文件夹内是ElectronBot里面用到的所有电路的原理图和PCB文件，提供Altium Designer格式的源文件以及Gerber格式的光绘文件用于提供给厂家进行直接加工。&lt;/p&gt; &#xA;&lt;p&gt;一共有如下几块板子：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ElectronBot&lt;/strong&gt;：头部的主控板，包含主控MCUSTM32F405RGT6，圆形屏幕GC9A01，USB-HS的PHY芯片USB3300，以及SD卡。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SensorBoard&lt;/strong&gt;：肚子里的传感器板子，包含一个手势传感器，一个USB-HUB芯片，5个I2C舵机的接口，一个MPU6050加速度计&amp;amp;陀螺仪等（USB摄像头也是连接到这个板子的）。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BaseConnector&lt;/strong&gt;：底座上的USB Type-C插座，通过8-Pin的FFC排线和SensorBoard连接，因为机器人本体需要旋转所以使用了柔性排线。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ServoDrive&lt;/strong&gt;：用于魔改舵机替换舵机驱动板的电路，通过I2C总线接口和SensorBoard以及头部主控连接。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ServoDrive-DK&lt;/strong&gt;：同上，但是把PCB的触点接口换成了接插件，方便调试，调试完了下载代码到上面的板子（因为体积太小所以上面的板子没有下载口接插件，所以不方便调试，这里单独提供一个DK版本）。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1.2 Firmware&lt;/h4&gt; &#xA;&lt;p&gt;Firmware中提供了上面所有板子的固件源码，主要包含以下两个工程：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ElectronBot-fw&lt;/strong&gt;：头部主控板的固件代码，用于驱动圆形屏幕，实现USB-CDC协议的自定义设备，以及进行舵机控制。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ServoDrive-fw&lt;/strong&gt;：ServoDrive板子的固件，包含舵机的电位器ADC采样，I2C从机通信和协议解析，电机控制的PWM输出，以及PID闭环算法实现。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ServoDrive-fw-LL&lt;/strong&gt;：也是ServoDrive板子的固件，与上面不同的是改用LL库而不是HAL库实现，所以Flash占用会小一些，可以放进16K的MCU，大家根据自己的情况选择需要的固件。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;工程都是基于STM32HAL实现的，所以提供了对应的&lt;code&gt;.ioc&lt;/code&gt;文件，可以自行用STM32CubeMX打开，生成对应的keil或者STM32IDE工程文件。当让也可以像我一样，用CLion进行编译和下载，把CLion变成STM32的IDE的方法参考我之前发的一篇教程：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/145801160&#34;&gt;配置CLion用于STM32开发【优雅の嵌入式开发】&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h4&gt;1.3 Software&lt;/h4&gt; &#xA;&lt;p&gt;Software中提供了视频里演示的上位机软件ElectronStudio的Unity工程源码，以及SDK库和SDK源文件，库的层级关系由下至上分别是：&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ElectronBotSDK-LowLevel&lt;/code&gt; -&amp;gt; &lt;code&gt;ElectronBotSDK-Player&lt;/code&gt; -&amp;gt; &lt;code&gt;ElectronBotSDK-UnityBridge&lt;/code&gt; -&amp;gt; &lt;code&gt;Electron-Studio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;SDK的使用方法见后文。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;此外文件夹里还包含了BotDriver也就是ElectronBot连接电脑需要安装的USB驱动文件，安装方法是在设备管理器里右键更新驱动，然后选择自定义目录导航到这个文件夹即可安装。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;安装过程需要禁用Windows的强制驱动签名（没钱给M$买签名），禁用方法根据你的操作系统版本有不同，可以百度一下。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.4 CAD-Model&lt;/h4&gt; &#xA;&lt;p&gt;文件夹中包含了ElectronBot的结构设计图纸，&lt;code&gt;.step&lt;/code&gt;通用格式可以在所有软件里打开编辑；同时为了满足有的同学想要Fusion360里面的原始工程，我也共享了&lt;code&gt;.f3d&lt;/code&gt;格式源文件，源文件里包含了完整的编辑建模时间轴。&lt;/p&gt; &#xA;&lt;p&gt;共享连接：&lt;a href=&#34;https://a360.co/3t6CUMS&#34;&gt;https://a360.co/3t6CUMS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;此目录下也包含了视频里演示的&lt;a href=&#34;https://space.bilibili.com/38053181&#34;&gt;oooooohmygosh&lt;/a&gt;同学设计的表情包动画，其中每个表情的动画都包含了三个片段：&lt;code&gt;进入-循环-退出&lt;/code&gt;，进入和退出是可以和其他动画进行无缝衔接的，因此可以方便用代码调用这些表情包实现很多效果。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;表情文件需要修改为英文名和路径后使用。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我把视频结尾提到的收纳盒也上传了，可以用FDM打印，5%填充即可。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.5 Docs&lt;/h4&gt; &#xA;&lt;p&gt;相关的参考文件，包括芯片的Datasheet等。&lt;/p&gt; &#xA;&lt;p&gt;此目录下还有个_LargeFiles文件夹，是软件过程项目中依赖的一些库（比如OpenCV）因为DLL比较大超过了100MB，GitHub需要开启LFS才能提交，而我不想开启LFS，因此单独拿出来压缩了提交到仓库，编译工程的时候需要把这些库放到对应工程目录下，具体的路径见 &lt;code&gt;_path.txt&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;2.硬件架构说明&lt;/h3&gt; &#xA;&lt;p&gt;机器人的硬件分为&lt;strong&gt;结构&lt;/strong&gt;和&lt;strong&gt;电路&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;2.1 结构设计&lt;/h4&gt; &#xA;&lt;p&gt;结构设计方面大家可以研究3D图纸，值得注意的点如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;主要部件的加工方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;我是用3D打印加工的，因为包含了齿轮等精密部件，传统FDM打印的精度可能不太理想，光固化是可以的，但是支撑问题可能导致打印机表面不平整，而且LCD光固化的零件强度不太够。所以推荐使用HP尼龙打印，可以去嘉立创（三维猴）打印，价格这几个零件加起来应该是200-300元左右。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;也用到了几个轴承和一些特殊的螺丝，轴承型号的话肩膀关节的型号是&lt;code&gt;6x10x3mm&lt;/code&gt;，腰部轴承型号是&lt;code&gt;25x32x4mm&lt;/code&gt;。特殊螺丝是肩膀roll自由度的推杆，使用了&lt;code&gt;M2x25mm&lt;/code&gt;的半牙螺丝。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;手臂推杆还用到了一个小挡块，这个挡块不用打印加工，直接用一段橡胶电线剪下一小段即可（视频里有演示），这个挡块是需要和推杆的螺丝固定到一起的，可以使用502粘合。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;手臂的驱动原理？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;视频里其实演示了，我自己设计了一个比较巧妙的驱动方式，pitch方向运动很好理解就是齿轮传动，roll方向使用了T型推杆如下：&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;推杆被M2螺丝的帽以及一个挡块限制住，当黄色的组件转动的时候，带动推杆左右移动，而推杆的另一端在手臂组件内由一个导槽限制运动方向从而将动力传递到转轴，此方案的力矩是可以双向传递的&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;脸部的透明玻璃如何制作的&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;tb搜索&lt;code&gt;表蒙子&lt;/code&gt;，我用的&lt;code&gt;31.5mm&lt;/code&gt;直径的。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;安装顺序？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;可以参考这位&lt;a href=&#34;https://space.bilibili.com/25228512&#34;&gt;绿荫阿广&lt;/a&gt;同学的安装视频 ：&lt;a href=&#34;https://www.bilibili.com/video/BV1oY4y1v7oN&#34;&gt;https://www.bilibili.com/video/BV1oY4y1v7oN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装过程中还有一点值得注意的是，因为机身体积太极限，几个舵机的安装架有的是需要剪短一边的不然塞不下，然后如果自己的打印机比较脆螺丝固定不牢的话，也可以使用热熔胶固定。&lt;/li&gt; &#xA; &lt;li&gt;另外手臂的推杆可以稍微打磨一下并加上润滑脂使其推动更顺畅。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.2 电路设计&lt;/h4&gt; &#xA;&lt;p&gt;电路没啥好分析的，直接看原理图吧。&lt;/p&gt; &#xA;&lt;p&gt;值得提一下的是USB-HUB的拓扑，如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于芯片选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;主控的STM32F4，这个不可替换，因为F4以下的型号不支持USB-HS外接PHY。&lt;/li&gt; &#xA; &lt;li&gt;舵机驱动的STM32F0，这个可以替换，而且建议有能力的同学替换，因为我项目中用到的STM32F042P6芯片比较贵（买的十多元一片），而舵机驱动对于芯片的性能要求没那么高，完全可以用STM8之类的8位MCU替代，所以大家可以参考我的固件源码寻求能够替换的MCU改进一下方案。&lt;/li&gt; &#xA; &lt;li&gt;替换STM32F0的MCU需要支持以下特性：带一个ADC采样、带两路PWM输出、带一个I2C接口，Flash和SRAM大小根据我的代码需要32K和4K或者更大（我固件用了HAL库以及C++特性，如果你可以基于LL库或者不适用C++的话应该需求还可以小一半）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于烧录方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用JLink、STLink之类的调试器烧录，注意驱动板因为体积限制只留了三个烧录触点，需要使用&lt;code&gt;SH1.0&lt;/code&gt;的接插件接触进行烧写。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于舵机的改造？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;通常的RC-Servo都是使用电位器进行绝对角度的测量的，因此我在驱动板中也是使用ADC读取电位器的电压值转换成角度反馈，而驱动芯片使用了我找到的封装最小的一个芯片&lt;code&gt;FM116B&lt;/code&gt;。大家改造舵机的时候，注意区分电机两根接线的方向，如果调试发现电机不闭环的话，可能需要交换一下接线顺序。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;另外那个小的3g舵机的改造需要把盖子拆开去掉（空间实在是太小加了盖子驱动塞不进去），然后去掉了后盖的舵机需要换成M1x10mm的螺丝进行固定不然会散架的。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;其实最理想的情况是找舵机厂家定制一个这样的迷你舵机，但是因为我一个人小批量做人家肯定不接单的，大家有渠道的话可以尝试一下。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于摄像头选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;我是用的是这款：&lt;a href=&#34;https://item.taobao.com/item.htm?id=567717780577&#34;&gt;https://item.taobao.com/item.htm?id=567717780577&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;当然大家可以根据需要自己替换别的USB摄像头（黑白的、高帧率的），只要塞得下就行，摄像头是直接拆了接线焊在SensorBoard上的 。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;值得注意的是，&lt;strong&gt;我用的USB-HUB芯片的1拖4的&lt;/strong&gt;，目前使用了三个口，还剩一个其实可以再集成一个USB麦克风，这样ElectronBot也能当作电脑的麦克风使用了。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.软件架构说明&lt;/h3&gt; &#xA;&lt;h4&gt;3.1 固件代码&lt;/h4&gt; &#xA;&lt;p&gt;固件代码的细节和流程说明比较繁琐，晚点我慢慢补充吧，总之可以直接基于前面提到的方式进行编译下载，然后慢慢研究源码。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;STM32F4的源码如果通过&lt;code&gt;.ioc&lt;/code&gt;重新生成工程的话，记得要把USB相关的几个文件预先备份，生成完代码后再替换回我原来的文件，因为CubeMX会覆盖生成把相关代码修改掉（我实际是使用Git的文件版本回退操作的 ）。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3.2 舵机I2C协议&lt;/h4&gt; &#xA;&lt;p&gt;魔改后的舵机通过I2C接口和控制板进行通信，STM32F4的控制板为主机，舵机为从机。通信的过程始终是主机发起的，主机首先下发位置、参数等指令，然后即时取回相关数据完成一个通信来回。&lt;/p&gt; &#xA;&lt;p&gt;每个舵机作为从机接收两个地址的指令：&lt;strong&gt;自己的ID号&lt;/strong&gt;，以及&lt;strong&gt;0号广播&lt;/strong&gt;。广播用于在没有给舵机设置地址的时候作为通配地址使用（比如你刚烧写完舵机固件，此时舵机的Flash是没有储存自己的ID的，只能通过0号地址通信）。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;值得注意的是：舵机和主机的上电需要有先后顺序，一定要先让从机初始化完成开始监听数据，再让主机发送指令！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果主机发送指令的时候从机不响应，或者多个舵机地址相同同时响应，都可能引起通信错误，因此需要保证上述的顺序。&lt;/p&gt; &#xA; &lt;p&gt;由于硬件上主机和舵机上电都是同时的，所以在主机的固件代码中，有一个延时2S的代码（其实可以不用那么久），就是等待舵机都上电初始化完成再开始通信。&lt;/p&gt; &#xA; &lt;p&gt;调试的时候，一个舵机一个舵机调试，注释掉其他未连接的舵机的通信代码，不然也会造成轮询等待超时。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;关于舵机的指令含义，感谢 &lt;strong&gt;&lt;a href=&#34;https://github.com/leazer&#34;&gt;leazer&lt;/a&gt;&lt;/strong&gt; 同学在Issues整理的表格：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pengzhihui-markdown.oss-cn-shanghai.aliyuncs.com/img/20220322010150.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;指令后续可能会更新。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3.3 SDK使用说明&lt;/h4&gt; &#xA;&lt;p&gt;SDK架构设计如图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;具体的使用方法可以参考SDK工程中给出的&lt;code&gt;sample.cpp&lt;/code&gt;，我是用CLion+MSVC工具链编译的，大家也可以把源码复制到自己的Visual Studio工程编译。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ElectronBotSDK-UnityBridge&lt;/code&gt;工程编译生成的DLL文件需要拷贝到&lt;code&gt;Unity\ElectronBot-Studio\Assets\Plugins&lt;/code&gt;目录下，用于连接本地的C++代码和Unity中C#环境。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;对了，注意ElectronStudio中目前选择图片视频文件还不支持中文路径！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;关于SDK的具体实现细节可以阅读源码，我晚点有空也会再更新描述。&lt;/p&gt; &#xA;&lt;h3&gt;有的问题在Issues里面已经解答了，问问题之前先翻一下open/closed的Issues。&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢以下项目：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/opencv/opencv&#34;&gt;opencv/opencv: Open Source Computer Vision Library (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/CMU-Perceptual-Computing-Lab/openpose&#34;&gt;https://github.com/CMU-Perceptual-Computing-Lab/openpose&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Lexikos/AutoHotkey_L&#34;&gt;Lexikos/AutoHotkey_L: AutoHotkey - macro-creation and automation-oriented scripting utility for Windows. (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/pq8888168/article/details/85781908&#34;&gt;https://blog.csdn.net/pq8888168/article/details/85781908&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>