<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:51:02Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MrNeRF/gaussian-splatting-cuda</title>
    <updated>2023-08-27T01:51:02Z</updated>
    <id>tag:github.com,2023-08-27:/MrNeRF/gaussian-splatting-cuda</id>
    <link href="https://github.com/MrNeRF/gaussian-splatting-cuda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;3D Gaussian Splatting, reimagined: Unleashing unmatched speed with C++ and CUDA from the ground up!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#34;3D Gaussian Splatting for Real-Time Radiance Field Rendering&#34; Reproduction in C++ and CUDA&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a reproduction of the Gaussian-Splatting software, originally developed by Inria and the Max Planck Institut for Informatik (MPII). The reproduction is written in C++ and CUDA. I have used the source code from the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;repo&lt;/a&gt; as blueprint for my first implementation. The original code is written in Python and PyTorch.&lt;/p&gt; &#xA;&lt;p&gt;I embarked on this project to deepen my understanding of the groundbreaking paper on 3D Gaussian splatting, by reimplementing everything from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2023-08-25]&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Small update on README&lt;/li&gt; &#xA;   &lt;li&gt;Optimized out the window creation for loss calculation.&lt;/li&gt; &#xA;   &lt;li&gt;Some progress translating libtorch to CUDA (you can sneak peak on the branch cuda-streaming)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2023-08-24]&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Added updating status line, instead of printing many lines of output during a run&lt;/li&gt; &#xA;   &lt;li&gt;In tools folder there is pre-commit hook to run clang-format before every commit. See Contribution section.&lt;/li&gt; &#xA;   &lt;li&gt;Added -f flag to force overwriting of output folder&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2023-08-23]&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command-line parameters have been added to specify the training data path and the output path. Note that the output path will not be automatically overwritten anymore.&lt;/li&gt; &#xA;   &lt;li&gt;CUDA version restrictions have been relaxed a bit to 11.7 or higher. The CUDA architecture of the system on which the software is being compiled is now auto-detected automatically.&lt;/li&gt; &#xA;   &lt;li&gt;Experimental feature to monitor the average convergence rate throughout training has been added (see the command-line options section for more details).&lt;/li&gt; &#xA;   &lt;li&gt;There are a lot good first issues to grab if you would like to contribute.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you encounter any problems or issues, please &lt;a href=&#34;https://github.com/MrNeRF/gaussian-splatting-cuda/issues&#34;&gt;open an issue&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;About this Project&lt;/h2&gt; &#xA;&lt;p&gt;This project is a derivative of the original Gaussian-Splatting software and is governed by the Gaussian-Splatting License, which can be found in the LICENSE file in this repository. The original software was developed by Inria and MPII.&lt;/p&gt; &#xA;&lt;p&gt;Please be advised that the software in this repository cannot be used for commercial purposes without explicit consent from the original licensors, Inria and MPII.&lt;/p&gt; &#xA;&lt;h2&gt;Current performance measurements as of 2023-08-17&lt;/h2&gt; &#xA;&lt;p&gt;NVIDIA GeForce RTX 4090&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tandt/truck:&#xA;    ~87 seconds for 7000 iterations (my implementation 2023-08-18) &#xA;    ~90 seconds for 7000 iterations (my implementation 2023-08-17) &#xA;    ~100 seconds for 7000 iterations (my implementation 2023-08-16) &#xA;    ~120 seconds for 7000 iterations (my implementation 2023-08-16) &#xA;    ~122 seconds for 7000 iterations (original PyTorch implementation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NVIDIA GeForce RTX 3090&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tandt/truck:&#xA;    ~180 seconds for 7000 iterations (Latest 2023-08-17)&#xA;    ~200 seconds for 7000 iterations (2023-08-16)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While completely unoptimized, the gains in performance, though modest, are noteworthy.&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Next Goal: Achieve 60 seconds for 7000 iterations in my implementation&lt;/p&gt; &#xA;&lt;h2&gt;Build and Execution instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Software Prerequisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Linux (tested with Ubuntu 22.04), windows probably won&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.24 or higher.&lt;/li&gt; &#xA; &lt;li&gt;CUDA 11.7 or higher (might work with a lower version, has to be manually set and tested).&lt;/li&gt; &#xA; &lt;li&gt;Python with development headers.&lt;/li&gt; &#xA; &lt;li&gt;libtorch: You can find the setup instructions in the libtorch section of this README.&lt;/li&gt; &#xA; &lt;li&gt;TBB&lt;/li&gt; &#xA; &lt;li&gt;Other dependencies will be handled by the CMake script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Hardware Prerequisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NVIDIA GPU with CUDA support. Successfully tested so far are RTX 4090, RTX A5000, 3090Ti and A100. With 3080Ti there is an outstanding issue (#21) with larger datasets.&lt;/li&gt; &#xA; &lt;li&gt;So far, the lowest compute capability tested was 8.0.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It might work with other NVIDIA GPUs as well, but these are mostly untested. If you do successfully run on such hardware please post a message in the Discussions section of the repo.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/MrNeRF/gaussian-splatting-cuda&#xA;cd gaussian-splatting-cuda&#xA;wget https://download.pytorch.org/libtorch/cu118/libtorch-cxx11-abi-shared-with-deps-2.0.1%2Bcu118.zip  &#xA;unzip  libtorch-cxx11-abi-shared-with-deps-2.0.1+cu118.zip -d external/&#xA;rm libtorch-cxx11-abi-shared-with-deps-2.0.1+cu118.zip&#xA;cmake -B build -DCMAKE_BUILD_TYPE=Release&#xA;cmake --build build -- -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataset&lt;/h3&gt; &#xA;&lt;p&gt;The dataset is not included in this repository. You can download it from the original repository under the following link: &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/input/tandt_db.zip&#34;&gt;tanks &amp;amp; trains&lt;/a&gt;. Then unzip it in the data folder.&lt;/p&gt; &#xA;&lt;h3&gt;Command-Line Options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;3D Gaussian Splatting CUDA Implementation&lt;/code&gt; provides a suite of command-line options to facilitate easy and customizable execution. Below are the available options:&lt;/p&gt; &#xA;&lt;h3&gt;Core Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;-h, --help&lt;/strong&gt;&lt;br&gt; Display this help menu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;-d, --data_path [PATH]&lt;/strong&gt;&lt;br&gt; Specify the path to the training data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;-f, --force&lt;/strong&gt;&lt;br&gt; Force overwriting of output folder. If not set, the program will exit if the output folder already exists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;-o, --output_path [PATH]&lt;/strong&gt;&lt;br&gt; Specify the path to save the trained model. If this option is not specified, the trained model will be saved to the &#34;output&#34; folder located in the root directory of the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;-i, --iter [NUM]&lt;/strong&gt;&lt;br&gt; Specify the number of iterations to train the model. Although the paper sets the maximum number of iterations at 30k, you&#39;ll likely need far fewer. Starting with 6k or 7k iterations should yield preliminary results. Outputs are saved every 7k iterations and also at the end of the training. Therefore, even if you set it to 5k iterations, an output will be generated upon completion.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;--enable-cr-monitoring&lt;/strong&gt;&lt;br&gt; Enable monitoring of the average convergence rate throughout training. If done, it will stop optimizing when the average convergence rate is below 0.008 per default after 15k iterations. This is useful for speeding up the training process when the gain starts to dimish. If not enabled, the training will stop after the specified number of iterations &lt;code&gt;--iter&lt;/code&gt;. Otherwise its stops when max 30k iterations are reached.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;-c, --convergence_rate [RATE]&lt;/strong&gt;&lt;br&gt; Set custom average onvergence rate for the training process. Requires the flag &lt;code&gt;--enable-cr-monitoring&lt;/code&gt; to be set.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;To run the &lt;code&gt;3D Gaussian Splatting CUDA Implementation&lt;/code&gt; with specified data path, output path, and iterations, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./build/gaussian_splatting_cuda -d /path/to/data -o /path/to/output -i 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View the results&lt;/h3&gt; &#xA;&lt;p&gt;For now, you will need the SIBR view&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://gitlab.inria.fr/sibr/sibr_core SIBR_core&#xA;cd SIBR_viewers&#xA;cmake -B build .&#xA;cmake --build build --target install --config Release -- -j &#xA;cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can view the results with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./SIBR_viewers/install/bin/SIBR_gaussianViewer_app -m output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! I want to make this a community project.&lt;/p&gt; &#xA;&lt;p&gt;Some ideas for relative straight forward contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Revamp the README.&lt;/li&gt; &#xA; &lt;li&gt;Add a proper config file or cmd line config.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I want to get rid of some heavy dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace glm with custom matrix operations&lt;/li&gt; &#xA; &lt;li&gt;Replace the few Eigen with some custom matrix operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advanced contributions or long term goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build a renderer to view training output in real time and to replace SIBR viewer.&lt;/li&gt; &#xA; &lt;li&gt;Look into &lt;a href=&#34;https://github.com/borglab/gtsfm&#34;&gt;gtsfm&lt;/a&gt; to replace colmap dependency&lt;/li&gt; &#xA; &lt;li&gt;CUDA optimization&lt;/li&gt; &#xA; &lt;li&gt;Build a proper viewer for the training output (maybe with XR support?).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Own ideas are welcome as well!&lt;/p&gt; &#xA;&lt;h3&gt;Contribution Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;Below are some guidelines to help ensure our project remains effective and consistent.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Getting Started with Contributions&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I&#39;ve marked several beginner-friendly issues as &lt;strong&gt;good first issues&lt;/strong&gt;. If you&#39;re new to the project, these are great places to start.&lt;/li&gt; &#xA;   &lt;li&gt;For those looking to contribute something not currently listed as an issue or propose something in the discussion section. You can direct message me on Twitter for a quick chat. Since there are not many contributors at the moment, I&#39;m happy to discuss your ideas and help you get started.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Before Submitting Your Pull Request&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure you&#39;ve applied &lt;code&gt;clang-format&lt;/code&gt; to maintain consistent coding style. There is in tools folder a git pre-commit hook. You can just copy it to .git/hooks/pre-commit. It will run clang-format before every commit.&lt;/li&gt; &#xA;   &lt;li&gt;We aim to minimize dependencies. If you&#39;re introducing a new one, it&#39;s essential to raise an issue for discussion first. There are ongoing efforts to reduce the number of dependencies, and your understanding in this area is appreciated.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Key Principles for Contributions&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: We want to be the fastest 3D gaussian splatting implementation on this planet. Being lightning fast is key! I want instant training!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Always prioritize high-quality rendering output. Never compromise quality for speed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Usability&lt;/strong&gt;: We want to have a nice user experience. We&#39;re still perfecting this, and your contribution can make a difference!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dataset Contributions&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you have a unique dataset that you believe will be an excellent addition and that is eye popping, we&#39;d love to see it! Remember, we&#39;re aiming to showcase exceptional datasets. We want to show off the best of the best. If you&#39;re unsure, feel free to raise an issue for discussion first.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Together, with your contributions, we can make this project stand out. Thank you for being a part of this journey!&lt;/p&gt; &#xA;&lt;h2&gt;libtorch&lt;/h2&gt; &#xA;&lt;p&gt;Initially, I utilized libtorch to simplify the development process. Once the implementation is stable with libtorch, I will begin replacing torch elements with my custom CUDA implementation.&lt;/p&gt; &#xA;&lt;h2&gt;MISC&lt;/h2&gt; &#xA;&lt;p&gt;Here is random collection of things that have to be described in README later on&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Needed for simple-knn: &lt;code&gt;bash sudo apt-get install python3-dev &lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation and References&lt;/h2&gt; &#xA;&lt;p&gt;If you utilize this software or present results obtained using it, please reference the original work:&lt;/p&gt; &#xA;&lt;p&gt;Kerbl, Bernhard; Kopanas, Georgios; Leimkühler, Thomas; Drettakis, George (2023). &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;3D Gaussian Splatting for Real-Time Radiance Field Rendering&lt;/a&gt;. ACM Transactions on Graphics, 42(4).&lt;/p&gt; &#xA;&lt;p&gt;This will ensure the original authors receive the recognition they deserve.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Gaussian-Splatting License - see the &lt;a href=&#34;https://raw.githubusercontent.com/MrNeRF/gaussian-splatting-cuda/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;Follow me on Twitter if you want to know more about the latest development: &lt;a href=&#34;https://twitter.com/janusch_patas&#34;&gt;https://twitter.com/janusch_patas&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nothings/stb</title>
    <updated>2023-08-27T01:51:02Z</updated>
    <id>tag:github.com,2023-08-27:/nothings/stb</id>
    <link href="https://github.com/nothings/stb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;stb single-file public domain libraries for C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stb&lt;/h1&gt; &#xA;&lt;p&gt;single-file public domain (or MIT licensed) libraries for C/C++&lt;/p&gt; &#xA;&lt;p&gt;Noteworthy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;image loader: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;image writer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h&#34;&gt;stb_image_write.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;image resizer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_resize.h&#34;&gt;stb_image_resize.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;font text rasterizer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h&#34;&gt;stb_truetype.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;typesafe containers: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_ds.h&#34;&gt;stb_ds.h&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most libraries by stb, except: stb_dxt by Fabian &#34;ryg&#34; Giesen, stb_image_resize by Jorge L. &#34;VinoBS&#34; Rodriguez, and stb_sprintf by Jeff Roberts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;stb_libs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;library&lt;/th&gt; &#xA;   &lt;th&gt;lastest version&lt;/th&gt; &#xA;   &lt;th&gt;category&lt;/th&gt; &#xA;   &lt;th&gt;LoC&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_vorbis.c&#34;&gt;stb_vorbis.c&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.22&lt;/td&gt; &#xA;   &lt;td&gt;audio&lt;/td&gt; &#xA;   &lt;td&gt;5584&lt;/td&gt; &#xA;   &lt;td&gt;decode ogg vorbis files from file/memory to float/16-bit signed output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_hexwave.h&#34;&gt;stb_hexwave.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;td&gt;audio&lt;/td&gt; &#xA;   &lt;td&gt;680&lt;/td&gt; &#xA;   &lt;td&gt;audio waveform synthesizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.28&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;7987&lt;/td&gt; &#xA;   &lt;td&gt;image loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h&#34;&gt;stb_truetype.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.26&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;5077&lt;/td&gt; &#xA;   &lt;td&gt;parse, decode, and rasterize characters from truetype fonts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h&#34;&gt;stb_image_write.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.16&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;1724&lt;/td&gt; &#xA;   &lt;td&gt;image writing to disk: PNG, TGA, BMP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_resize.h&#34;&gt;stb_image_resize.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;2634&lt;/td&gt; &#xA;   &lt;td&gt;resize images larger/smaller with good quality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_rect_pack.h&#34;&gt;stb_rect_pack.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.01&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;623&lt;/td&gt; &#xA;   &lt;td&gt;simple 2D rectangle packer with decent quality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_perlin.h&#34;&gt;stb_perlin.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;428&lt;/td&gt; &#xA;   &lt;td&gt;perlin&#39;s revised simplex noise w/ different seeds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_ds.h&#34;&gt;stb_ds.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.67&lt;/td&gt; &#xA;   &lt;td&gt;utility&lt;/td&gt; &#xA;   &lt;td&gt;1895&lt;/td&gt; &#xA;   &lt;td&gt;typesafe dynamic array and hash tables for C, will compile in C++&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_sprintf.h&#34;&gt;stb_sprintf.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.10&lt;/td&gt; &#xA;   &lt;td&gt;utility&lt;/td&gt; &#xA;   &lt;td&gt;1906&lt;/td&gt; &#xA;   &lt;td&gt;fast sprintf, snprintf for C/C++&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_textedit.h&#34;&gt;stb_textedit.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.14&lt;/td&gt; &#xA;   &lt;td&gt;user&amp;nbsp;interface&lt;/td&gt; &#xA;   &lt;td&gt;1429&lt;/td&gt; &#xA;   &lt;td&gt;guts of a text editor for games etc implementing them from scratch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_voxel_render.h&#34;&gt;stb_voxel_render.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.89&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;3807&lt;/td&gt; &#xA;   &lt;td&gt;Minecraft-esque voxel rendering &#34;engine&#34; with many more features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_dxt.h&#34;&gt;stb_dxt.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.12&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;719&lt;/td&gt; &#xA;   &lt;td&gt;Fabian &#34;ryg&#34; Giesen&#39;s real-time DXT compressor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_easy_font.h&#34;&gt;stb_easy_font.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;305&lt;/td&gt; &#xA;   &lt;td&gt;quick-and-dirty easy-to-deploy bitmap font for printing frame rate, etc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_tilemap_editor.h&#34;&gt;stb_tilemap_editor.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.42&lt;/td&gt; &#xA;   &lt;td&gt;game&amp;nbsp;dev&lt;/td&gt; &#xA;   &lt;td&gt;4187&lt;/td&gt; &#xA;   &lt;td&gt;embeddable tilemap editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_herringbone_wang_tile.h&#34;&gt;stb_herringbone_wa...&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;   &lt;td&gt;game&amp;nbsp;dev&lt;/td&gt; &#xA;   &lt;td&gt;1221&lt;/td&gt; &#xA;   &lt;td&gt;herringbone Wang tile map generator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_c_lexer.h&#34;&gt;stb_c_lexer.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;   &lt;td&gt;parsing&lt;/td&gt; &#xA;   &lt;td&gt;940&lt;/td&gt; &#xA;   &lt;td&gt;simplify writing parsers for C-like languages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_divide.h&#34;&gt;stb_divide.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.94&lt;/td&gt; &#xA;   &lt;td&gt;math&lt;/td&gt; &#xA;   &lt;td&gt;433&lt;/td&gt; &#xA;   &lt;td&gt;more useful 32-bit modulus e.g. &#34;euclidean divide&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_connected_components.h&#34;&gt;stb_connected_comp...&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.96&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;1049&lt;/td&gt; &#xA;   &lt;td&gt;incrementally compute reachability on grids&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_leakcheck.h&#34;&gt;stb_leakcheck.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;194&lt;/td&gt; &#xA;   &lt;td&gt;quick-and-dirty malloc/free leak-checking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_include.h&#34;&gt;stb_include.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.02&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;295&lt;/td&gt; &#xA;   &lt;td&gt;implement recursive #include support, particularly for GLSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Total libraries: 21 Total lines of C code: 43117&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;What&#39;s the license?&lt;/h4&gt; &#xA;&lt;p&gt;These libraries are in the public domain. You can do anything you want with them. You have no legal obligation to do anything else, although I appreciate attribution.&lt;/p&gt; &#xA;&lt;p&gt;They are also licensed under the MIT open source license, if you have lawyers who are unhappy with public domain. Every source file includes an explicit dual-license for you to choose from.&lt;/p&gt; &#xA;&lt;h4&gt;How do I use these libraries?&lt;/h4&gt; &#xA;&lt;p&gt;The idea behind single-header file libraries is that they&#39;re easy to distribute and deploy because all the code is contained in a single file. By default, the .h files in here act as their own header files, i.e. they declare the functions contained in the file but don&#39;t actually result in any code getting compiled.&lt;/p&gt; &#xA;&lt;p&gt;So in addition, you should select &lt;em&gt;exactly one&lt;/em&gt; C/C++ source file that actually instantiates the code, preferably a file you&#39;re not editing frequently. This file should define a specific macro (this is documented per-library) to actually enable the function definitions. For example, to use stb_image, you should have exactly one C/C++ file that doesn&#39;t include stb_image.h regularly, but instead does&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define STB_IMAGE_IMPLEMENTATION&#xA;#include &#34;stb_image.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The right macro to define is pointed out right at the top of each of these libraries.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;other_libs&#34;&gt;&lt;/a&gt; Are there other single-file public-domain/open source libraries with minimal dependencies out there?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nothings/single_file_libs&#34;&gt;Yes.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;If I wrap an stb library in a new library, does the new library have to be public domain/MIT?&lt;/h4&gt; &#xA;&lt;p&gt;No, because it&#39;s public domain you can freely relicense it to whatever license your new library wants to be.&lt;/p&gt; &#xA;&lt;h4&gt;What&#39;s the deal with SSE support in GCC-based compilers?&lt;/h4&gt; &#xA;&lt;p&gt;stb_image will either use SSE2 (if you compile with -msse2) or will not use any SIMD at all, rather than trying to detect the processor at runtime and handle it correctly. As I understand it, the approved path in GCC for runtime-detection require you to use multiple source files, one for each CPU configuration. Because stb_image is a header-file library that compiles in only one source file, there&#39;s no approved way to build both an SSE-enabled and a non-SSE-enabled variation.&lt;/p&gt; &#xA;&lt;p&gt;While we&#39;ve tried to work around it, we&#39;ve had multiple issues over the years due to specific versions of gcc breaking what we&#39;re doing, so we&#39;ve given up on it. See &lt;a href=&#34;https://github.com/nothings/stb/issues/280&#34;&gt;https://github.com/nothings/stb/issues/280&lt;/a&gt; and &lt;a href=&#34;https://github.com/nothings/stb/issues/410&#34;&gt;https://github.com/nothings/stb/issues/410&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h4&gt;Some of these libraries seem redundant to existing open source libraries. Are they better somehow?&lt;/h4&gt; &#xA;&lt;p&gt;Generally they&#39;re only better in that they&#39;re easier to integrate, easier to use, and easier to release (single file; good API; no attribution requirement). They may be less featureful, slower, and/or use more memory. If you&#39;re already using an equivalent library, there&#39;s probably no good reason to switch.&lt;/p&gt; &#xA;&lt;h4&gt;Can I link directly to the table of stb libraries?&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/nothings/stb#stb_libs&#34;&gt;this URL&lt;/a&gt; to link directly to that list.&lt;/p&gt; &#xA;&lt;h4&gt;Why do you list &#34;lines of code&#34;? It&#39;s a terrible metric.&lt;/h4&gt; &#xA;&lt;p&gt;Just to give you some idea of the internal complexity of the library, to help you manage your expectations, or to let you know what you&#39;re getting into. While not all the libraries are written in the same style, they&#39;re certainly similar styles, and so comparisons between the libraries are probably still meaningful.&lt;/p&gt; &#xA;&lt;p&gt;Note though that the lines do include both the implementation, the part that corresponds to a header file, and the documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Why single-file headers?&lt;/h4&gt; &#xA;&lt;p&gt;Windows doesn&#39;t have standard directories where libraries live. That makes deploying libraries in Windows a lot more painful than open source developers on Unix-derivates generally realize. (It also makes library dependencies a lot worse in Windows.)&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a common problem in Windows where a library was built against a different version of the runtime library, which causes link conflicts and confusion. Shipping the libs as headers means you normally just compile them straight into your project without making libraries, thus sidestepping that problem.&lt;/p&gt; &#xA;&lt;p&gt;Making them a single file makes it very easy to just drop them into a project that needs them. (Of course you can still put them in a proper shared library tree if you want.)&lt;/p&gt; &#xA;&lt;p&gt;Why not two files, one a header and one an implementation? The difference between 10 files and 9 files is not a big deal, but the difference between 2 files and 1 file is a big deal. You don&#39;t need to zip or tar the files up, you don&#39;t have to remember to attach &lt;em&gt;two&lt;/em&gt; files, etc.&lt;/p&gt; &#xA;&lt;h4&gt;Why &#34;stb&#34;? Is this something to do with Set-Top Boxes?&lt;/h4&gt; &#xA;&lt;p&gt;No, they are just the initials for my name, Sean T. Barrett. This was not chosen out of egomania, but as a moderately sane way of namespacing the filenames and source function names.&lt;/p&gt; &#xA;&lt;h4&gt;Will you add more image types to stb_image.h?&lt;/h4&gt; &#xA;&lt;p&gt;No. As stb_image use has grown, it has become more important for us to focus on security of the codebase. Adding new image formats increases the amount of code we need to secure, so it is no longer worth adding new formats.&lt;/p&gt; &#xA;&lt;h4&gt;Do you have any advice on how to create my own single-file library?&lt;/h4&gt; &#xA;&lt;p&gt;Yes. &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/stb_howto.txt&#34;&gt;https://github.com/nothings/stb/blob/master/docs/stb_howto.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why public domain?&lt;/h4&gt; &#xA;&lt;p&gt;I prefer it over GPL, LGPL, BSD, zlib, etc. for many reasons. Some of them are listed here: &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/why_public_domain.md&#34;&gt;https://github.com/nothings/stb/blob/master/docs/why_public_domain.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why C?&lt;/h4&gt; &#xA;&lt;p&gt;Primarily, because I use C, not C++. But it does also make it easier for other people to use them from other languages.&lt;/p&gt; &#xA;&lt;h4&gt;Why not C99? stdint.h, declare-anywhere, etc.&lt;/h4&gt; &#xA;&lt;p&gt;I still use MSVC 6 (1998) as my IDE because it has better human factors for me than later versions of MSVC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coturn/coturn</title>
    <updated>2023-08-27T01:51:02Z</updated>
    <id>tag:github.com,2023-08-27:/coturn/coturn</id>
    <link href="https://github.com/coturn/coturn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;coturn TURN server project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/coturn/coturn/actions/workflows/docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/coturn/coturn/actions/workflows/docker.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker CI&#34; title=&#34;Docker CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/coturn/coturn&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/coturn/coturn?label=Docker%20Hub%20pulls&#34; alt=&#34;Docker Hub&#34; title=&#34;Docker Hub pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/coturn/coturn&#34;&gt;Docker Hub&lt;/a&gt; | &lt;a href=&#34;https://github.com/orgs/coturn/packages/container/package/coturn&#34;&gt;GitHub Container Registry&lt;/a&gt; | &lt;a href=&#34;https://quay.io/repository/coturn/coturn&#34;&gt;Quay.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Coturn TURN server&lt;/h1&gt; &#xA;&lt;p&gt;coturn is a free open source implementation of TURN and STUN Server. The TURN Server is a VoIP media traffic NAT traversal server and gateway.&lt;/p&gt; &#xA;&lt;h2&gt;Installing / Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Linux distros may have a version of coturn which you can install by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install coturn&#xA;turnserver --log-file stdout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or run coturn using docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 3478:3478 -p 3478:3478/udp -p 5349:5349 -p 5349:5349/udp -p 49152-65535:49152-65535/udp coturn/coturn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more details about using docker container &lt;a href=&#34;https://github.com/coturn/coturn/raw/master/docker/coturn/README.md&#34;&gt;Docker Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;coturn requires following dependencies to be installed first&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libevent2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openssl (to support TLS and DTLS, authorized STUN and TURN)&lt;/li&gt; &#xA; &lt;li&gt;libmicrohttp and &lt;a href=&#34;https://github.com/digitalocean/prometheus-client-c&#34;&gt;prometheus-client-c&lt;/a&gt; (prometheus interface)&lt;/li&gt; &#xA; &lt;li&gt;MySQL (user database)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redis/hiredis&#34;&gt;Hiredis&lt;/a&gt; (user database, monitoring)&lt;/li&gt; &#xA; &lt;li&gt;SQLite (user database)&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL (user database)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:coturn/coturn.git&#xA;cd coturn&#xA;./configure&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;STUN specs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3489&#34;&gt;RFC 3489&lt;/a&gt; - &#34;classic&#34; STUN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5389&#34;&gt;RFC 5389&lt;/a&gt; - base &#34;new&#34; STUN specs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5769&#34;&gt;RFC 5769&lt;/a&gt; - test vectors for STUN protocol testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5780&#34;&gt;RFC 5780&lt;/a&gt; - NAT behavior discovery support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7443&#34;&gt;RFC 7443&lt;/a&gt; - ALPN support for STUN &amp;amp; TURN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7635&#34;&gt;RFC 7635&lt;/a&gt; - oAuth third-party TURN/STUN authorization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TURN specs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5766&#34;&gt;RFC 5766&lt;/a&gt; - base TURN specs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6062&#34;&gt;RFC 6062&lt;/a&gt; - TCP relaying TURN extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6156&#34;&gt;RFC 6156&lt;/a&gt; - IPv6 extension for TURN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7443&#34;&gt;RFC 7443&lt;/a&gt; - ALPN support for STUN &amp;amp; TURN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7635&#34;&gt;RFC 7635&lt;/a&gt; - oAuth third-party TURN/STUN authorization&lt;/li&gt; &#xA; &lt;li&gt;DTLS support (&lt;a href=&#34;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&#34;&gt;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mobile ICE (MICE) support (&lt;a href=&#34;http://tools.ietf.org/html/draft-wing-tram-turn-mobility-02&#34;&gt;http://tools.ietf.org/html/draft-wing-tram-turn-mobility-02&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TURN REST API (&lt;a href=&#34;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&#34;&gt;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Origin field in TURN (Multi-tenant TURN Server) (&lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-tram-stun-origin-06&#34;&gt;https://tools.ietf.org/html/draft-ietf-tram-stun-origin-06&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TURN Bandwidth draft specs (&lt;a href=&#34;http://tools.ietf.org/html/draft-thomson-tram-turn-bandwidth-01&#34;&gt;http://tools.ietf.org/html/draft-thomson-tram-turn-bandwidth-01&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TURN-bis (with dual allocation) draft specs (&lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-tram-turnbis-04&#34;&gt;http://tools.ietf.org/html/draft-ietf-tram-turnbis-04&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ICE and related specs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5245&#34;&gt;RFC 5245&lt;/a&gt; - ICE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5768&#34;&gt;RFC 5768&lt;/a&gt; – ICE–SIP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6336&#34;&gt;RFC 6336&lt;/a&gt; – ICE–IANA Registry&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6544&#34;&gt;RFC 6544&lt;/a&gt; – ICE–TCP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5928&#34;&gt;RFC 5928&lt;/a&gt; - TURN Resolution Mechanism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The implementation fully supports the following client-to-TURN-server protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UDP (per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5766&#34;&gt;RFC 5766&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TCP (per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5766&#34;&gt;RFC 5766&lt;/a&gt; and &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6062&#34;&gt;RFC 6062&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TLS (per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc&#34;&gt;RFC 5766&lt;/a&gt; and &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6062&#34;&gt;RFC 6062&lt;/a&gt;): including TLS1.3; ECDHE is supported.&lt;/li&gt; &#xA; &lt;li&gt;DTLS1.0 and DTLS1.2 (&lt;a href=&#34;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&#34;&gt;http://tools.ietf.org/html/draft-petithuguenin-tram-turn-dtls-00&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SCTP (experimental implementation).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Relay protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UDP (per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5766&#34;&gt;RFC 5766&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TCP (per &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6062&#34;&gt;RFC 6062&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;User databases (for user repository, with passwords or keys, if authentication is required):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQLite&lt;/li&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA; &lt;li&gt;MongoDB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Management interfaces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;telnet cli&lt;/li&gt; &#xA; &lt;li&gt;HTTPS interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Monitoring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis can be used for status and statistics storage and notification&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;prometheus&lt;/a&gt; interface (unavailable on apt package)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Message integrity digest algorithms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HMAC-SHA1, with MD5-hashed keys (as required by STUN and TURN standards)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TURN authentication mechanisms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;classic&#39; long-term credentials mechanism;&lt;/li&gt; &#xA; &lt;li&gt;TURN REST API (a modification of the long-term mechanism, for time-limited secret-based authentication, for WebRTC applications: &lt;a href=&#34;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&#34;&gt;http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;experimental third-party oAuth-based client authorization option;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Performance and Load Balancing:&lt;/p&gt; &#xA;&lt;p&gt;When used as a part of an ICE solution, for VoIP connectivity, this TURN server can handle thousands simultaneous calls per CPU (when TURN protocol is used) or tens of thousands calls when only STUN protocol is used. For virtually unlimited scalability a load balancing scheme can be used. The load balancing can be implemented with the following tools (either one or a combination of them):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DNS SRV based load balancing;&lt;/li&gt; &#xA; &lt;li&gt;built-in 300 ALTERNATE-SERVER mechanism (requires 300 response support by the TURN client);&lt;/li&gt; &#xA; &lt;li&gt;network load-balancer server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Traffic bandwidth limitation and congestion avoidance algorithms implemented.&lt;/p&gt; &#xA;&lt;p&gt;Target platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (Debian, Ubuntu, Mint, CentOS, Fedora, Redhat, Amazon Linux, Arch Linux, OpenSUSE)&lt;/li&gt; &#xA; &lt;li&gt;BSD (FreeBSD, NetBSD, OpenBSD, DragonFlyBSD)&lt;/li&gt; &#xA; &lt;li&gt;Solaris 11&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X&lt;/li&gt; &#xA; &lt;li&gt;Cygwin (for non-production R&amp;amp;D purposes)&lt;/li&gt; &#xA; &lt;li&gt;Windows (native with, e.g., MSVC toolchain)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project can be successfully used on other &lt;code&gt;*NIX&lt;/code&gt; platforms, too, but that is not officially supported.&lt;/p&gt; &#xA;&lt;p&gt;The implementation is supposed to be simple, easy to install and configure. The project focuses on performance, scalability and simplicity. The aim is to provide an enterprise-grade TURN solution.&lt;/p&gt; &#xA;&lt;p&gt;To achieve high performance and scalability, the TURN server is implemented with the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High-performance industrial-strength Network IO engine libevent2 is used&lt;/li&gt; &#xA; &lt;li&gt;Configurable multi-threading model implemented to allow full usage of available CPU resources (if OS allows multi-threading)&lt;/li&gt; &#xA; &lt;li&gt;Multiple listening and relay addresses can be configured&lt;/li&gt; &#xA; &lt;li&gt;Efficient memory model used&lt;/li&gt; &#xA; &lt;li&gt;The TURN project code can be used in a custom proprietary networking environment. In the TURN server code, an abstract networking API is used. Only couple files in the project have to be re-written to plug-in the TURN server into a proprietary environment. With this project, only implementation for standard UNIX Networking/IO API is provided, but the user can implement any other environment. The TURN server code was originally developed for a high-performance proprietary corporate environment, then adopted for UNIX Networking API&lt;/li&gt; &#xA; &lt;li&gt;The TURN server works as a user space process, without imposing any special requirements on the system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project homepage: &lt;a href=&#34;https://coturn.github.io/&#34;&gt;https://coturn.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repository: &lt;a href=&#34;https://github.com/coturn/coturn/&#34;&gt;https://github.com/coturn/coturn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue tracker: &lt;a href=&#34;https://github.com/coturn/coturn/issues&#34;&gt;https://github.com/coturn/coturn/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google group: &lt;a href=&#34;https://groups.google.com/forum/#!forum/turn-server-project-rfc5766-turn-server&#34;&gt;https://groups.google.com/forum/#!forum/turn-server-project-rfc5766-turn-server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>