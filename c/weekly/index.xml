<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:40:41Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>UberGuidoZ/Flipper</title>
    <updated>2023-01-01T01:40:41Z</updated>
    <id>tag:github.com,2023-01-01:/UberGuidoZ/Flipper</id>
    <link href="https://github.com/UberGuidoZ/Flipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Playground (and dump) of stuff I make or modify for the Flipper Zero&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Playground (and dump) of stuff I made, modified, researched, or found for the Flipper Zero.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Looking for Infrared (IR) codes? Head over to &lt;a href=&#34;https://github.com/UberGuidoZ/Flipper-IRDB&#34;&gt;the IRDB&lt;/a&gt;! Just want to download part of any repo? &lt;a href=&#34;https://uberguidoz.github.io/DownGit/&#34;&gt;Try over here&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to github in general, there is a rough/basic guide over on the Official Discord &lt;a href=&#34;https://discord.com/channels/740930220399525928/986635575664726026/1042979075905556520&#34;&gt;in this thread&lt;/a&gt;. Link not available? &lt;a href=&#34;https://discord.com/invite/flipper&#34;&gt;Try this first&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Donation Information&lt;/h2&gt; &#xA;&lt;p&gt;Nothing is ever expected for the hoarding of digital files, creations I have made, or the people I may have helped.&lt;/p&gt; &#xA;&lt;h2&gt;Ordering from Lab401? &lt;a href=&#34;https://lab401.com/r?id=vsmgoc&#34;&gt;USE THIS LINK FOR 5% OFF!&lt;/a&gt; (Or code &lt;code&gt;UberGuidoZ&lt;/code&gt; at checkout.)&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve had so many asking for me to add this.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57457139/183561666-4424a3cc-679b-4016-a368-24f7e7ad0a88.jpg&#34; alt=&#34;Flipper_Blush&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57457139/183561692-381d37bd-264f-4c88-8877-e58d60d9be6e.jpg&#34; alt=&#34;Flipper_Love&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BTC&lt;/strong&gt;: &lt;code&gt;3AWgaL3FxquakP15ZVDxr8q8xVTc5Q75dS&lt;/code&gt;&lt;br&gt; &lt;strong&gt;BCH&lt;/strong&gt;: &lt;code&gt;17nWCvf2YPMZ3F3H1seX8T149Z9E3BMKXk&lt;/code&gt;&lt;br&gt; &lt;strong&gt;ETH&lt;/strong&gt;: &lt;code&gt;0x0f0003fCB0bD9355Ad7B124c30b9F3D860D5E191&lt;/code&gt;&lt;br&gt; &lt;strong&gt;LTC&lt;/strong&gt;: &lt;code&gt;M8Ujk52U27bkm1ksiWUyteL8b3rRQVMke2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;So, here it is. All donations of &lt;em&gt;any&lt;/em&gt; size are humbly appreciated.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57457139/183561789-2e853ede-8ef7-41e8-a67c-716225177e5d.jpg&#34; alt=&#34;Flipper_Clap&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/57457139/183561787-e21bdc1e-b316-4e67-b327-5129503d0313.jpg&#34; alt=&#34;Flipper_OMG&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Donations will be used for hardware (and maybe caffeine) to further testing!&lt;br&gt; &lt;img src=&#34;https://cdn.discordapp.com/emojis/1000632669622767686.gif&#34; alt=&#34;UberGuidoZ&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Immediate-Mode-UI/Nuklear</title>
    <updated>2023-01-01T01:40:41Z</updated>
    <id>tag:github.com,2023-01-01:/Immediate-Mode-UI/Nuklear</id>
    <link href="https://github.com/Immediate-Mode-UI/Nuklear" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A single-header ANSI C immediate mode cross-platform GUI library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nuklear&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear/actions&#34;&gt;&lt;img src=&#34;https://github.com/Immediate-Mode-UI/Nuklear/workflows/C%2FC++%20CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a minimal-state, immediate-mode graphical user interface toolkit written in ANSI C and licensed under public domain. It was designed as a simple embeddable user interface for application and does not have any dependencies, a default render backend or OS window/input handling but instead provides a highly modular, library-based approach, with simple input state for input and draw commands describing primitive shapes as output. So instead of providing a layered library that tries to abstract over a number of platform and render backends, it focuses only on the actual UI.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Immediate-mode graphical user interface toolkit&lt;/li&gt; &#xA; &lt;li&gt;Single-header library&lt;/li&gt; &#xA; &lt;li&gt;Written in C89 (ANSI C)&lt;/li&gt; &#xA; &lt;li&gt;Small codebase (~18kLOC)&lt;/li&gt; &#xA; &lt;li&gt;Focus on portability, efficiency and simplicity&lt;/li&gt; &#xA; &lt;li&gt;No dependencies (not even the standard library if not wanted)&lt;/li&gt; &#xA; &lt;li&gt;Fully skinnable and customizable&lt;/li&gt; &#xA; &lt;li&gt;Low memory footprint with total control of memory usage if needed / wanted&lt;/li&gt; &#xA; &lt;li&gt;UTF-8 support&lt;/li&gt; &#xA; &lt;li&gt;No global or hidden state&lt;/li&gt; &#xA; &lt;li&gt;Customizable library modules (you can compile and use only what you need)&lt;/li&gt; &#xA; &lt;li&gt;Optional font baker and vertex buffer output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://Immediate-Mode-UI.github.io/Nuklear/doc/nuklear.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;This library is self-contained in one single header file and can be used either in header-only mode or in implementation mode. The header-only mode is used by default when included and allows including this header in other headers and does not contain the actual implementation.&lt;/p&gt; &#xA;&lt;p&gt;The implementation mode requires defining the preprocessor macro &lt;code&gt;NK_IMPLEMENTATION&lt;/code&gt; in &lt;em&gt;one&lt;/em&gt; .c/.cpp file before &lt;code&gt;#include&lt;/code&gt;ing this file, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define NK_IMPLEMENTATION&#xA;#include &#34;nuklear.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IMPORTANT: Every time you include &#34;nuklear.h&#34; you have to define the same optional flags. This is very important; not doing it either leads to compiler errors, or even worse, stack corruptions.&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&#34; alt=&#34;screenshot&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&#34; alt=&#34;screen&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&#34; alt=&#34;screen2&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&#34; alt=&#34;node&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&#34; alt=&#34;skinning&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&#34; alt=&#34;gamepad&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* init gui state */&#xA;struct nk_context ctx;&#xA;nk_init_fixed(&amp;amp;ctx, calloc(1, MAX_MEMORY), MAX_MEMORY, &amp;amp;font);&#xA;&#xA;enum {EASY, HARD};&#xA;static int op = EASY;&#xA;static float value = 0.6f;&#xA;static int i =  20;&#xA;&#xA;if (nk_begin(&amp;amp;ctx, &#34;Show&#34;, nk_rect(50, 50, 220, 220),&#xA;    NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {&#xA;    /* fixed widget pixel width */&#xA;    nk_layout_row_static(&amp;amp;ctx, 30, 80, 1);&#xA;    if (nk_button_label(&amp;amp;ctx, &#34;button&#34;)) {&#xA;        /* event handling */&#xA;    }&#xA;&#xA;    /* fixed widget window ratio width */&#xA;    nk_layout_row_dynamic(&amp;amp;ctx, 30, 2);&#xA;    if (nk_option_label(&amp;amp;ctx, &#34;easy&#34;, op == EASY)) op = EASY;&#xA;    if (nk_option_label(&amp;amp;ctx, &#34;hard&#34;, op == HARD)) op = HARD;&#xA;&#xA;    /* custom widget pixel width */&#xA;    nk_layout_row_begin(&amp;amp;ctx, NK_STATIC, 30, 2);&#xA;    {&#xA;        nk_layout_row_push(&amp;amp;ctx, 50);&#xA;        nk_label(&amp;amp;ctx, &#34;Volume:&#34;, NK_TEXT_LEFT);&#xA;        nk_layout_row_push(&amp;amp;ctx, 110);&#xA;        nk_slider_float(&amp;amp;ctx, 0, &amp;amp;value, 1.0f, 0.1f);&#xA;    }&#xA;    nk_layout_row_end(&amp;amp;ctx);&#xA;}&#xA;nk_end(&amp;amp;ctx);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of nuklear bindings for different languages created by other authors. I cannot attest for their quality since I am not necessarily proficient in any of these languages. Furthermore there are no guarantee that all bindings will always be kept up to date:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glegris/nuklear4j&#34;&gt;Java&lt;/a&gt; by Guillaume Legris&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Timu5/bindbc-nuklear&#34;&gt;D&lt;/a&gt; by Mateusz Muszy≈Ñski&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golang-ui/nuklear&#34;&gt;Golang&lt;/a&gt; by &lt;a href=&#34;mailto:golang-ui@github.com&#34;&gt;golang-ui@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snuk182/nuklear-rust&#34;&gt;Rust&lt;/a&gt; by &lt;a href=&#34;mailto:snuk182@github.com&#34;&gt;snuk182@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wasamasa/nuklear&#34;&gt;Chicken&lt;/a&gt; by &lt;a href=&#34;mailto:wasamasa@github.com&#34;&gt;wasamasa@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zacharycarter/nuklear-nim&#34;&gt;Nim&lt;/a&gt; by &lt;a href=&#34;mailto:zacharycarter@github.com&#34;&gt;zacharycarter@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/keharriso/love-nuklear&#34;&gt;L√ñVE-Nuklear&lt;/a&gt; by Kevin Harrison&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stetre/moonnuklear&#34;&gt;MoonNuklear&lt;/a&gt; by Stefano Trettel&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/billsix/pyNuklear&#34;&gt;pyNuklear&lt;/a&gt; by William Emerison Six (ctypes-based wrapper)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nathanrw/nuklear-cffi&#34;&gt;pynk&lt;/a&gt; by &lt;a href=&#34;mailto:nathanrw@github.com&#34;&gt;nathanrw@github.com&lt;/a&gt; (cffi binding)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cartman300/NuklearDotNet&#34;&gt;CSharp/.NET&lt;/a&gt; by &lt;a href=&#34;mailto:cartman300@github.com&#34;&gt;cartman300@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nsauzede/vnk&#34;&gt;V&lt;/a&gt; by Nicolas Sauzede&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Developed by Micha Mettke and every direct or indirect contributor to the GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Embeds &lt;code&gt;stb_texedit&lt;/code&gt;, &lt;code&gt;stb_truetype&lt;/code&gt; and &lt;code&gt;stb_rectpack&lt;/code&gt; by Sean Barrett (public domain) Embeds &lt;code&gt;ProggyClean.ttf&lt;/code&gt; font by Tristan Grimmer (MIT license).&lt;/p&gt; &#xA;&lt;p&gt;Big thank you to Omar Cornut (ocornut@github) for his &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;imgui&lt;/a&gt; library and giving me the inspiration for this library, Casey Muratori for handmade hero and his original immediate-mode graphical user interface idea and Sean Barrett for his amazing single-header &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;libraries&lt;/a&gt; which restored my faith in libraries and brought me to create some of my own. Finally Apoorva Joshi for his single-header &lt;a href=&#34;http://apoorvaj.io/single-header-packer.html&#34;&gt;file packer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;------------------------------------------------------------------------------&#xA;This software is available under 2 licenses -- choose whichever you prefer.&#xA;------------------------------------------------------------------------------&#xA;ALTERNATIVE A - MIT License&#xA;Copyright (c) 2017 Micha Mettke&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy of&#xA;this software and associated documentation files (the &#34;Software&#34;), to deal in&#xA;the Software without restriction, including without limitation the rights to&#xA;use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies&#xA;of the Software, and to permit persons to whom the Software is furnished to do&#xA;so, subject to the following conditions:&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;------------------------------------------------------------------------------&#xA;ALTERNATIVE B - Public Domain (www.unlicense.org)&#xA;This is free and unencumbered software released into the public domain.&#xA;Anyone is free to copy, modify, publish, use, compile, sell, or distribute this&#xA;software, either in source code form or as a compiled binary, for any purpose,&#xA;commercial or non-commercial, and by any means.&#xA;In jurisdictions that recognize copyright laws, the author or authors of this&#xA;software dedicate any and all copyright interest in the software to the public&#xA;domain. We make this dedication for the benefit of the public at large and to&#xA;the detriment of our heirs and successors. We intend this dedication to be an&#xA;overt act of relinquishment in perpetuity of all present and future rights to&#xA;this software under copyright law.&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN&#xA;ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION&#xA;WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#xA;-----------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reviewers guide&lt;/h2&gt; &#xA;&lt;p&gt;When reviewing pull request there are common things a reviewer should keep in mind.&lt;/p&gt; &#xA;&lt;p&gt;Reviewing changes to &lt;code&gt;src/*&lt;/code&gt; and &lt;code&gt;nuklear.h&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure C89 compatibility.&lt;/li&gt; &#xA; &lt;li&gt;The code should work for several backends to an acceptable degree.&lt;/li&gt; &#xA; &lt;li&gt;Check no other parts of &lt;code&gt;nuklear.h&lt;/code&gt; are related to the PR and thus nothing is missing.&lt;/li&gt; &#xA; &lt;li&gt;Recommend simple optimizations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pass small structs by value instead of by pointer.&lt;/li&gt; &#xA;   &lt;li&gt;Use local buffers over heap allocation when possible.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check that the coding style is consistent with code around it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Variable/function name casing.&lt;/li&gt; &#xA;   &lt;li&gt;Indentation.&lt;/li&gt; &#xA;   &lt;li&gt;Curly bracket (&lt;code&gt;{}&lt;/code&gt;) placement.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ensure that the contributor has bumped the appropriate version in &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear/raw/master/clib.json&#34;&gt;clib.json&lt;/a&gt; and added their changes to the &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear/raw/master/src/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have at least one other person review the changes before merging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reviewing changes to &lt;code&gt;demo/*&lt;/code&gt;, &lt;code&gt;example/*&lt;/code&gt; and other files in the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Focus on getting working code merged. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We want to make it easy for people to get started with Nuklear, and any &lt;code&gt;demo&lt;/code&gt; and &lt;code&gt;example&lt;/code&gt; improvements helps in this regard.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use of newer C features, or even other languages is not discouraged. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If another language is used, ensure that the build process is easy to figure out.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Messy or less efficient code can be merged so long as these outliers are pointed out and easy to find.&lt;/li&gt; &#xA; &lt;li&gt;Version shouldn&#39;t be bumped for these changes.&lt;/li&gt; &#xA; &lt;li&gt;Changes that improves code to be more inline with &lt;code&gt;nuklear.h&lt;/code&gt; are ofc always welcome.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>merbanan/rtl_433</title>
    <updated>2023-01-01T01:40:41Z</updated>
    <id>tag:github.com,2023-01-01:/merbanan/rtl_433</id>
    <link href="https://github.com/merbanan/rtl_433" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Program to decode radio transmissions from devices on the ISM bands (and other frequencies)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rtl_433&lt;/h1&gt; &#xA;&lt;p&gt;rtl_433 (despite the name) is a generic data receiver, mainly for the 433.92 MHz, 868 MHz (SRD), 315 MHz, 345 MHz, and 915 MHz ISM bands.&lt;/p&gt; &#xA;&lt;p&gt;The official source code is in the &lt;a href=&#34;https://github.com/merbanan/rtl_433/&#34;&gt;https://github.com/merbanan/rtl_433/&lt;/a&gt; repository. For more documentation and related projects see the &lt;a href=&#34;https://triq.org/&#34;&gt;https://triq.org/&lt;/a&gt; site.&lt;/p&gt; &#xA;&lt;p&gt;It works with &lt;a href=&#34;https://github.com/osmocom/rtl-sdr/&#34;&gt;RTL-SDR&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/pothosware/SoapySDR/&#34;&gt;SoapySDR&lt;/a&gt;. Actively tested and supported are Realtek RTL2832 based DVB dongles (using RTL-SDR) and LimeSDR (&lt;a href=&#34;https://www.crowdsupply.com/lime-micro/limesdr&#34;&gt;LimeSDR USB&lt;/a&gt; and &lt;a href=&#34;https://www.crowdsupply.com/lime-micro/limesdr-mini&#34;&gt;LimeSDR mini&lt;/a&gt; engineering samples kindly provided by &lt;a href=&#34;https://myriadrf.org/&#34;&gt;MyriadRf&lt;/a&gt;), PlutoSDR, HackRF One (using SoapySDR drivers), as well as SoapyRemote.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/merbanan/rtl_433/master/docs/screenshot.png&#34; alt=&#34;rtl_433 screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building / Installation&lt;/h2&gt; &#xA;&lt;p&gt;rtl_433 is written in portable C (C99 standard) and known to compile on Linux (also embedded), MacOS, and Windows systems. Older compilers and toolchains are supported as a key-goal. Low resource consumption and very few dependencies allow rtl_433 to run on embedded hardware like (repurposed) routers. Systems with 32-bit i686 and 64-bit x86-64 as well as (embedded) ARM, like the Raspberry Pi and PlutoSDR are well supported.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/merbanan/rtl_433/master/docs/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Debian (sid) or Ubuntu (19.10+), &lt;code&gt;apt-get install rtl-433&lt;/code&gt; for other distros check &lt;a href=&#34;https://repology.org/project/rtl-433/versions&#34;&gt;https://repology.org/project/rtl-433/versions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On FreeBSD, &lt;code&gt;pkg install rtl-433&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On MacOS, &lt;code&gt;brew install rtl_433&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Docker images with rtl_433 are available &lt;a href=&#34;https://github.com/hertzg/rtl_433_docker&#34;&gt;on the github page of hertzg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to add support for unsupported sensors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/merbanan/rtl_433/master/docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtl_433 -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#x9;&#x9;= General options =&#xA;  [-V] Output the version string and exit&#xA;  [-v] Increase verbosity (can be used multiple times).&#xA;       -v : verbose notice, -vv : verbose info, -vvv : debug, -vvvv : trace.&#xA;  [-c &amp;lt;path&amp;gt;] Read config options from a file&#xA;&#x9;&#x9;= Tuner options =&#xA;  [-d &amp;lt;RTL-SDR USB device index&amp;gt; | :&amp;lt;RTL-SDR USB device serial&amp;gt; | &amp;lt;SoapySDR device query&amp;gt; | rtl_tcp | help]&#xA;  [-g &amp;lt;gain&amp;gt; | help] (default: auto)&#xA;  [-t &amp;lt;settings&amp;gt;] apply a list of keyword=value settings for SoapySDR devices&#xA;       e.g. -t &#34;antenna=A,bandwidth=4.5M,rfnotch_ctrl=false&#34;&#xA;  [-f &amp;lt;frequency&amp;gt;] Receive frequency(s) (default: 433920000 Hz)&#xA;  [-H &amp;lt;seconds&amp;gt;] Hop interval for polling of multiple frequencies (default: 600 seconds)&#xA;  [-p &amp;lt;ppm_error&amp;gt;] Correct rtl-sdr tuner frequency offset error (default: 0)&#xA;  [-s &amp;lt;sample rate&amp;gt;] Set sample rate (default: 250000 Hz)&#xA;&#x9;&#x9;= Demodulator options =&#xA;  [-R &amp;lt;device&amp;gt; | help] Enable only the specified device decoding protocol (can be used multiple times)&#xA;       Specify a negative number to disable a device decoding protocol (can be used multiple times)&#xA;  [-X &amp;lt;spec&amp;gt; | help] Add a general purpose decoder (prepend -R 0 to disable all decoders)&#xA;  [-Y auto | classic | minmax] FSK pulse detector mode.&#xA;  [-Y level=&amp;lt;dB level&amp;gt;] Manual detection level used to determine pulses (-1.0 to -30.0) (0=auto).&#xA;  [-Y minlevel=&amp;lt;dB level&amp;gt;] Manual minimum detection level used to determine pulses (-1.0 to -99.0).&#xA;  [-Y minsnr=&amp;lt;dB level&amp;gt;] Minimum SNR to determine pulses (1.0 to 99.0).&#xA;  [-Y autolevel] Set minlevel automatically based on average estimated noise.&#xA;  [-Y squelch] Skip frames below estimated noise level to reduce cpu load.&#xA;  [-Y ampest | magest] Choose amplitude or magnitude level estimator.&#xA;&#x9;&#x9;= Analyze/Debug options =&#xA;  [-a] Analyze mode. Print a textual description of the signal.&#xA;  [-A] Pulse Analyzer. Enable pulse analysis and decode attempt.&#xA;       Disable all decoders with -R 0 if you want analyzer output only.&#xA;  [-y &amp;lt;code&amp;gt;] Verify decoding of demodulated test data (e.g. &#34;{25}fb2dd58&#34;) with enabled devices&#xA;&#x9;&#x9;= File I/O options =&#xA;  [-S none | all | unknown | known] Signal auto save. Creates one file per signal.&#xA;       Note: Saves raw I/Q samples (uint8 pcm, 2 channel). Preferred mode for generating test files.&#xA;  [-r &amp;lt;filename&amp;gt; | help] Read data from input file instead of a receiver&#xA;  [-w &amp;lt;filename&amp;gt; | help] Save data stream to output file (a &#39;-&#39; dumps samples to stdout)&#xA;  [-W &amp;lt;filename&amp;gt; | help] Save data stream to output file, overwrite existing file&#xA;&#x9;&#x9;= Data output options =&#xA;  [-F kv | json | csv | mqtt | influx | syslog | trigger | null | help] Produce decoded output in given format.&#xA;       Append output to file with :&amp;lt;filename&amp;gt; (e.g. -F csv:log.csv), defaults to stdout.&#xA;       Specify host/port for syslog with e.g. -F syslog:127.0.0.1:1514&#xA;  [-M time[:&amp;lt;options&amp;gt;] | protocol | level | noise[:&amp;lt;secs&amp;gt;] | stats | bits | help] Add various meta data to each output.&#xA;  [-K FILE | PATH | &amp;lt;tag&amp;gt; | &amp;lt;key&amp;gt;=&amp;lt;tag&amp;gt;] Add an expanded token or fixed tag to every output line.&#xA;  [-C native | si | customary] Convert units in decoded output.&#xA;  [-n &amp;lt;value&amp;gt;] Specify number of samples to take (each sample is an I/Q pair)&#xA;  [-T &amp;lt;seconds&amp;gt;] Specify number of seconds to run, also 12:34 or 1h23m45s&#xA;  [-E hop | quit] Hop/Quit after outputting successful event(s)&#xA;  [-h] Output this usage help and exit&#xA;       Use -d, -g, -R, -X, -F, -M, -r, -w, or -W without argument for more help&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;= Supported device protocols =&#xA;    [01]  Silvercrest Remote Control&#xA;    [02]  Rubicson, TFA 30.3197 or InFactory PT-310 Temperature Sensor&#xA;    [03]  Prologue, FreeTec NC-7104, NC-7159-675 temperature sensor&#xA;    [04]  Waveman Switch Transmitter&#xA;    [06]* ELV EM 1000&#xA;    [07]* ELV WS 2000&#xA;    [08]  LaCrosse TX Temperature / Humidity Sensor&#xA;    [10]* Acurite 896 Rain Gauge&#xA;    [11]  Acurite 609TXC Temperature and Humidity Sensor&#xA;    [12]  Oregon Scientific Weather Sensor&#xA;    [13]* Mebus 433&#xA;    [14]* Intertechno 433&#xA;    [15]  KlikAanKlikUit Wireless Switch&#xA;    [16]  AlectoV1 Weather Sensor (Alecto WS3500 WS4500 Ventus W155/W044 Oregon)&#xA;    [17]  Cardin S466-TX2&#xA;    [18]  Fine Offset Electronics, WH2, WH5, Telldus Temperature/Humidity/Rain Sensor&#xA;    [19]  Nexus, FreeTec NC-7345, NX-3980, Solight TE82S, TFA 30.3209 temperature/humidity sensor&#xA;    [20]  Ambient Weather F007TH, TFA 30.3208.02, SwitchDocLabs F016TH temperature sensor&#xA;    [21]  Calibeur RF-104 Sensor&#xA;    [22]  X10 RF&#xA;    [23]  DSC Security Contact&#xA;    [24]* Brennenstuhl RCS 2044&#xA;    [25]  Globaltronics GT-WT-02 Sensor&#xA;    [26]  Danfoss CFR Thermostat&#xA;    [29]  Chuango Security Technology&#xA;    [30]  Generic Remote SC226x EV1527&#xA;    [31]  TFA-Twin-Plus-30.3049, Conrad KW9010, Ea2 BL999&#xA;    [32]  Fine Offset Electronics WH1080/WH3080 Weather Station&#xA;    [33]  WT450, WT260H, WT405H&#xA;    [34]  LaCrosse WS-2310 / WS-3600 Weather Station&#xA;    [35]  Esperanza EWS&#xA;    [36]  Efergy e2 classic&#xA;    [37]* Inovalley kw9015b, TFA Dostmann 30.3161 (Rain and temperature sensor)&#xA;    [38]  Generic temperature sensor 1&#xA;    [39]  WG-PB12V1 Temperature Sensor&#xA;    [40]  Acurite 592TXR Temp/Humidity, 5n1 Weather Station, 6045 Lightning, 899 Rain, 3N1, Atlas&#xA;    [41]  Acurite 986 Refrigerator / Freezer Thermometer&#xA;    [42]  HIDEKI TS04 Temperature, Humidity, Wind and Rain Sensor&#xA;    [43]  Watchman Sonic / Apollo Ultrasonic / Beckett Rocket oil tank monitor&#xA;    [44]  CurrentCost Current Sensor&#xA;    [45]  emonTx OpenEnergyMonitor&#xA;    [46]  HT680 Remote control&#xA;    [47]  Conrad S3318P, FreeTec NC-5849-913 temperature humidity sensor&#xA;    [48]  Akhan 100F14 remote keyless entry&#xA;    [49]  Quhwa&#xA;    [50]  OSv1 Temperature Sensor&#xA;    [51]  Proove / Nexa / KlikAanKlikUit Wireless Switch&#xA;    [52]  Bresser Thermo-/Hygro-Sensor 3CH&#xA;    [53]  Springfield Temperature and Soil Moisture&#xA;    [54]  Oregon Scientific SL109H Remote Thermal Hygro Sensor&#xA;    [55]  Acurite 606TX Temperature Sensor&#xA;    [56]  TFA pool temperature sensor&#xA;    [57]  Kedsum Temperature &amp;amp; Humidity Sensor, Pearl NC-7415&#xA;    [58]  Blyss DC5-UK-WH&#xA;    [59]  Steelmate TPMS&#xA;    [60]  Schrader TPMS&#xA;    [61]* LightwaveRF&#xA;    [62]* Elro DB286A Doorbell&#xA;    [63]  Efergy Optical&#xA;    [64]* Honda Car Key&#xA;    [67]  Radiohead ASK&#xA;    [68]  Kerui PIR / Contact Sensor&#xA;    [69]  Fine Offset WH1050 Weather Station&#xA;    [70]  Honeywell Door/Window Sensor, 2Gig DW10/DW11, RE208 repeater&#xA;    [71]  Maverick ET-732/733 BBQ Sensor&#xA;    [72]* RF-tech&#xA;    [73]  LaCrosse TX141-Bv2, TX141TH-Bv2, TX141-Bv3, TX141W, TX145wsdth, (TFA, ORIA) sensor&#xA;    [74]  Acurite 00275rm,00276rm Temp/Humidity with optional probe&#xA;    [75]  LaCrosse TX35DTH-IT, TFA Dostmann 30.3155 Temperature/Humidity sensor&#xA;    [76]  LaCrosse TX29IT, TFA Dostmann 30.3159.IT Temperature sensor&#xA;    [77]  Vaillant calorMatic VRT340f Central Heating Control&#xA;    [78]  Fine Offset Electronics, WH25, WH32B, WH24, WH65B, HP1000, Misol WS2320 Temperature/Humidity/Pressure Sensor&#xA;    [79]  Fine Offset Electronics, WH0530 Temperature/Rain Sensor&#xA;    [80]  IBIS beacon&#xA;    [81]  Oil Ultrasonic STANDARD FSK&#xA;    [82]  Citroen TPMS&#xA;    [83]  Oil Ultrasonic STANDARD ASK&#xA;    [84]  Thermopro TP11 Thermometer&#xA;    [85]  Solight TE44/TE66, EMOS E0107T, NX-6876-917&#xA;    [86]  Wireless Smoke and Heat Detector GS 558&#xA;    [87]  Generic wireless motion sensor&#xA;    [88]  Toyota TPMS&#xA;    [89]  Ford TPMS&#xA;    [90]  Renault TPMS&#xA;    [91]  inFactory, nor-tec, FreeTec NC-3982-913 temperature humidity sensor&#xA;    [92]  FT-004-B Temperature Sensor&#xA;    [93]  Ford Car Key&#xA;    [94]  Philips outdoor temperature sensor (type AJ3650)&#xA;    [95]  Schrader TPMS EG53MA4, PA66GF35&#xA;    [96]  Nexa&#xA;    [97]  Thermopro TP08/TP12/TP20 thermometer&#xA;    [98]  GE Color Effects&#xA;    [99]  X10 Security&#xA;    [100]  Interlogix GE UTC Security Devices&#xA;    [101]* Dish remote 6.3&#xA;    [102]  SimpliSafe Home Security System (May require disabling automatic gain for KeyPad decodes)&#xA;    [103]  Sensible Living Mini-Plant Moisture Sensor&#xA;    [104]  Wireless M-Bus, Mode C&amp;amp;T, 100kbps (-f 868950000 -s 1200000)&#xA;    [105]  Wireless M-Bus, Mode S, 32.768kbps (-f 868300000 -s 1000000)&#xA;    [106]* Wireless M-Bus, Mode R, 4.8kbps (-f 868330000)&#xA;    [107]* Wireless M-Bus, Mode F, 2.4kbps&#xA;    [108]  Hyundai WS SENZOR Remote Temperature Sensor&#xA;    [109]  WT0124 Pool Thermometer&#xA;    [110]  PMV-107J (Toyota) TPMS&#xA;    [111]  Emos TTX201 Temperature Sensor&#xA;    [112]  Ambient Weather TX-8300 Temperature/Humidity Sensor&#xA;    [113]  Ambient Weather WH31E Thermo-Hygrometer Sensor, EcoWitt WH40 rain gauge&#xA;    [114]  Maverick et73&#xA;    [115]  Honeywell ActivLink, Wireless Doorbell&#xA;    [116]  Honeywell ActivLink, Wireless Doorbell (FSK)&#xA;    [117]* ESA1000 / ESA2000 Energy Monitor&#xA;    [118]* Biltema rain gauge&#xA;    [119]  Bresser Weather Center 5-in-1&#xA;    [120]  Digitech XC-0324 / AmbientWeather FT005RH temp/hum sensor&#xA;    [121]  Opus/Imagintronix XT300 Soil Moisture&#xA;    [122]* FS20&#xA;    [123]* Jansite TPMS Model TY02S&#xA;    [124]  LaCrosse/ELV/Conrad WS7000/WS2500 weather sensors&#xA;    [125]  TS-FT002 Wireless Ultrasonic Tank Liquid Level Meter With Temperature Sensor&#xA;    [126]  Companion WTR001 Temperature Sensor&#xA;    [127]  Ecowitt Wireless Outdoor Thermometer WH53/WH0280/WH0281A&#xA;    [128]  DirecTV RC66RX Remote Control&#xA;    [129]* Eurochron temperature and humidity sensor&#xA;    [130]  IKEA Sparsnas Energy Meter Monitor&#xA;    [131]  Microchip HCS200/HCS300 KeeLoq Hopping Encoder based remotes&#xA;    [132]  TFA Dostmann 30.3196 T/H outdoor sensor&#xA;    [133]  Rubicson 48659 Thermometer&#xA;    [134]  Holman Industries iWeather WS5029 weather station (newer PCM)&#xA;    [135]  Philips outdoor temperature sensor (type AJ7010)&#xA;    [136]  ESIC EMT7110 power meter&#xA;    [137]  Globaltronics QUIGG GT-TMBBQ-05&#xA;    [138]  Globaltronics GT-WT-03 Sensor&#xA;    [139]  Norgo NGE101&#xA;    [140]  Elantra2012 TPMS&#xA;    [141]  Auriol HG02832, HG05124A-DCF, Rubicson 48957 temperature/humidity sensor&#xA;    [142]  Fine Offset Electronics/ECOWITT WH51, SwitchDoc Labs SM23 Soil Moisture Sensor&#xA;    [143]  Holman Industries iWeather WS5029 weather station (older PWM)&#xA;    [144]  TBH weather sensor&#xA;    [145]  WS2032 weather station&#xA;    [146]  Auriol AFW2A1 temperature/humidity sensor&#xA;    [147]  TFA Drop Rain Gauge 30.3233.01&#xA;    [148]  DSC Security Contact (WS4945)&#xA;    [149]  ERT Standard Consumption Message (SCM)&#xA;    [150]* Klimalogg&#xA;    [151]  Visonic powercode&#xA;    [152]  Eurochron EFTH-800 temperature and humidity sensor&#xA;    [153]  Cotech 36-7959, SwitchDocLabs FT020T wireless weather station with USB&#xA;    [154]  Standard Consumption Message Plus (SCMplus)&#xA;    [155]  Fine Offset Electronics WH1080/WH3080 Weather Station (FSK)&#xA;    [156]  Abarth 124 Spider TPMS&#xA;    [157]  Missil ML0757 weather station&#xA;    [158]  Sharp SPC775 weather station&#xA;    [159]  Insteon&#xA;    [160]  ERT Interval Data Message (IDM)&#xA;    [161]  ERT Interval Data Message (IDM) for Net Meters&#xA;    [162]* ThermoPro-TX2 temperature sensor&#xA;    [163]  Acurite 590TX Temperature with optional Humidity&#xA;    [164]  Security+ 2.0 (Keyfob)&#xA;    [165]  TFA Dostmann 30.3221.02 T/H Outdoor Sensor&#xA;    [166]  LaCrosse Technology View LTV-WSDTH01 Breeze Pro Wind Sensor&#xA;    [167]  Somfy RTS&#xA;    [168]  Schrader TPMS SMD3MA4 (Subaru)&#xA;    [169]* Nice Flor-s remote control for gates&#xA;    [170]  LaCrosse Technology View LTV-WR1 Multi Sensor&#xA;    [171]  LaCrosse Technology View LTV-TH Thermo/Hygro Sensor&#xA;    [172]  Bresser Weather Center 6-in-1, 7-in-1 indoor, soil, new 5-in-1, 3-in-1 wind gauge, Froggit WH6000, Ventus C8488A&#xA;    [173]  Bresser Weather Center 7-in-1&#xA;    [174]  EcoDHOME Smart Socket and MCEE Solar monitor&#xA;    [175]  LaCrosse Technology View LTV-R1, LTV-R3 Rainfall Gauge, LTV-W1/W2 Wind Sensor&#xA;    [176]  BlueLine Innovations Power Cost Monitor&#xA;    [177]  Burnhard BBQ thermometer&#xA;    [178]  Security+ (Keyfob)&#xA;    [179]  Cavius smoke, heat and water detector&#xA;    [180]  Jansite TPMS Model Solar&#xA;    [181]  Amazon Basics Meat Thermometer&#xA;    [182]  TFA Marbella Pool Thermometer&#xA;    [183]  Auriol AHFL temperature/humidity sensor&#xA;    [184]  Auriol AFT 77 B2 temperature sensor&#xA;    [185]  Honeywell CM921 Wireless Programmable Room Thermostat&#xA;    [186]  Hyundai TPMS (VDO)&#xA;    [187]  RojaFlex shutter and remote devices&#xA;    [188]  Marlec Solar iBoost+ sensors&#xA;    [189]  Somfy io-homecontrol&#xA;    [190]  Ambient Weather WH31L (FineOffset WH57) Lightning-Strike sensor&#xA;    [191]  Markisol, E-Motion, BOFU, Rollerhouse, BF-30x, BF-415 curtain remote&#xA;    [192]  Govee Water Leak Detector H5054, Door Contact Sensor B5023&#xA;    [193]  Clipsal CMR113 Cent-a-meter power meter&#xA;    [194]  Inkbird ITH-20R temperature humidity sensor&#xA;    [195]  RainPoint soil temperature and moisture sensor&#xA;    [196]  Atech-WS308 temperature sensor&#xA;    [197]  Acurite Grill/Meat Thermometer 01185M&#xA;    [198]* EnOcean ERP1&#xA;    [199]  Linear Megacode Garage/Gate Remotes&#xA;    [200]* Auriol 4-LD5661 temperature/rain sensor&#xA;    [201]  Unbranded SolarTPMS for trucks&#xA;    [202]  Funkbus / Instafunk (Berker, Gira, Jung)&#xA;    [203]  Porsche Boxster/Cayman TPMS&#xA;    [204]  Jasco/GE Choice Alert Security Devices&#xA;    [205]  Telldus weather station FT0385R sensors&#xA;    [206]  LaCrosse TX34-IT rain gauge&#xA;    [207]  SmartFire Proflame 2 remote control&#xA;    [208]  AVE TPMS&#xA;    [209]  SimpliSafe Gen 3 Home Security System&#xA;    [210]  Yale HSA (Home Security Alarm), YES-Alarmkit&#xA;    [211]  Regency Ceiling Fan Remote (-f 303.75M to 303.96M)&#xA;    [212]  Renault 0435R TPMS&#xA;    [213]  Fine Offset Electronics WS80 weather station&#xA;    [214]  EMOS E6016 weatherstation with DCF77&#xA;    [215]  Altronics X7064 temperature and humidity sensor&#xA;    [216]* ANT and ANT+ devices&#xA;    [217]  EMOS E6016 rain gauge&#xA;    [218]  Microchip HCS200/HCS300 KeeLoq Hopping Encoder based remotes (FSK)&#xA;    [219]  Fine Offset Electronics WH45 air quality sensor&#xA;    [220]  Maverick XR-30 BBQ Sensor&#xA;    [221]  Fine Offset Electronics WN34 temperature sensor&#xA;    [222]  Rubicson Pool Thermometer 48942&#xA;    [223]  Badger ORION water meter, 100kbps (-f 916450000 -s 1200000)&#xA;&#xA;* Disabled by default, use -R n or a conf file to enable&#xA;&#xA;&#xA;&#x9;&#x9;= Input device selection =&#xA;&#x9;RTL-SDR device driver is available.&#xA;  [-d &amp;lt;RTL-SDR USB device index&amp;gt;] (default: 0)&#xA;  [-d :&amp;lt;RTL-SDR USB device serial (can be set with rtl_eeprom -s)&amp;gt;]&#xA;&#x9;To set gain for RTL-SDR use -g &amp;lt;gain&amp;gt; to set an overall gain in dB.&#xA;&#x9;SoapySDR device driver is available.&#xA;  [-d &#34;&#34;] Open default SoapySDR device&#xA;  [-d driver=rtlsdr] Open e.g. specific SoapySDR device&#xA;&#x9;To set gain for SoapySDR use -g ELEM=val,ELEM=val,... e.g. -g LNA=20,TIA=8,PGA=2 (for LimeSDR).&#xA;  [-d rtl_tcp[:[//]host[:port]] (default: localhost:1234)&#xA;&#x9;Specify host/port to connect to with e.g. -d rtl_tcp:127.0.0.1:1234&#xA;&#xA;&#xA;&#x9;&#x9;= Gain option =&#xA;  [-g &amp;lt;gain&amp;gt;] (default: auto)&#xA;&#x9;For RTL-SDR: gain in dB (&#34;0&#34; is auto).&#xA;&#x9;For SoapySDR: gain in dB for automatic distribution (&#34;&#34; is auto), or string of gain elements.&#xA;&#x9;E.g. &#34;LNA=20,TIA=8,PGA=2&#34; for LimeSDR.&#xA;&#xA;&#xA;&#x9;&#x9;= Flex decoder spec =&#xA;Use -X &amp;lt;spec&amp;gt; to add a flexible general purpose decoder.&#xA;&#xA;&amp;lt;spec&amp;gt; is &#34;key=value[,key=value...]&#34;&#xA;Common keys are:&#xA;&#x9;name=&amp;lt;name&amp;gt; (or: n=&amp;lt;name&amp;gt;)&#xA;&#x9;modulation=&amp;lt;modulation&amp;gt; (or: m=&amp;lt;modulation&amp;gt;)&#xA;&#x9;short=&amp;lt;short&amp;gt; (or: s=&amp;lt;short&amp;gt;)&#xA;&#x9;long=&amp;lt;long&amp;gt; (or: l=&amp;lt;long&amp;gt;)&#xA;&#x9;sync=&amp;lt;sync&amp;gt; (or: y=&amp;lt;sync&amp;gt;)&#xA;&#x9;reset=&amp;lt;reset&amp;gt; (or: r=&amp;lt;reset&amp;gt;)&#xA;&#x9;gap=&amp;lt;gap&amp;gt; (or: g=&amp;lt;gap&amp;gt;)&#xA;&#x9;tolerance=&amp;lt;tolerance&amp;gt; (or: t=&amp;lt;tolerance&amp;gt;)&#xA;&#x9;priority=&amp;lt;n&amp;gt; : run decoder only as fallback&#xA;where:&#xA;&amp;lt;name&amp;gt; can be any descriptive name tag you need in the output&#xA;&amp;lt;modulation&amp;gt; is one of:&#xA;&#x9;OOK_MC_ZEROBIT :  Manchester Code with fixed leading zero bit&#xA;&#x9;OOK_PCM :         Non Return to Zero coding (Pulse Code)&#xA;&#x9;OOK_RZ :          Return to Zero coding (Pulse Code)&#xA;&#x9;OOK_PPM :         Pulse Position Modulation&#xA;&#x9;OOK_PWM :         Pulse Width Modulation&#xA;&#x9;OOK_DMC :         Differential Manchester Code&#xA;&#x9;OOK_PIWM_RAW :    Raw Pulse Interval and Width Modulation&#xA;&#x9;OOK_PIWM_DC :     Differential Pulse Interval and Width Modulation&#xA;&#x9;OOK_MC_OSV1 :     Manchester Code for OSv1 devices&#xA;&#x9;FSK_PCM :         FSK Pulse Code Modulation&#xA;&#x9;FSK_PWM :         FSK Pulse Width Modulation&#xA;&#x9;FSK_MC_ZEROBIT :  Manchester Code with fixed leading zero bit&#xA;&amp;lt;short&amp;gt;, &amp;lt;long&amp;gt;, &amp;lt;sync&amp;gt; are nominal modulation timings in us,&#xA;&amp;lt;reset&amp;gt;, &amp;lt;gap&amp;gt;, &amp;lt;tolerance&amp;gt; are maximum modulation timings in us:&#xA;PCM/RZ  short: Nominal width of pulse [us]&#xA;         long: Nominal width of bit period [us]&#xA;PPM     short: Nominal width of &#39;0&#39; gap [us]&#xA;         long: Nominal width of &#39;1&#39; gap [us]&#xA;PWM     short: Nominal width of &#39;1&#39; pulse [us]&#xA;         long: Nominal width of &#39;0&#39; pulse [us]&#xA;         sync: Nominal width of sync pulse [us] (optional)&#xA;common    gap: Maximum gap size before new row of bits [us]&#xA;        reset: Maximum gap size before End Of Message [us]&#xA;    tolerance: Maximum pulse deviation [us] (optional).&#xA;Available options are:&#xA;&#x9;bits=&amp;lt;n&amp;gt; : only match if at least one row has &amp;lt;n&amp;gt; bits&#xA;&#x9;rows=&amp;lt;n&amp;gt; : only match if there are &amp;lt;n&amp;gt; rows&#xA;&#x9;repeats=&amp;lt;n&amp;gt; : only match if some row is repeated &amp;lt;n&amp;gt; times&#xA;&#x9;&#x9;use opt&amp;gt;=n to match at least &amp;lt;n&amp;gt; and opt&amp;lt;=n to match at most &amp;lt;n&amp;gt;&#xA;&#x9;invert : invert all bits&#xA;&#x9;reflect : reflect each byte (MSB first to MSB last)&#xA;&#x9;decode_uart : UART 8n1 (10-to-8) decode&#xA;&#x9;decode_dm : Differential Manchester decode&#xA;&#x9;match=&amp;lt;bits&amp;gt; : only match if the &amp;lt;bits&amp;gt; are found&#xA;&#x9;preamble=&amp;lt;bits&amp;gt; : match and align at the &amp;lt;bits&amp;gt; preamble&#xA;&#x9;&#x9;&amp;lt;bits&amp;gt; is a row spec of {&amp;lt;bit count&amp;gt;}&amp;lt;bits as hex number&amp;gt;&#xA;&#x9;unique : suppress duplicate row output&#xA;&#xA;&#x9;countonly : suppress detailed row output&#xA;&#xA;E.g. -X &#34;n=doorbell,m=OOK_PWM,s=400,l=800,r=7000,g=1000,match={24}0xa9878c,repeats&amp;gt;=3&#34;&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;= Output format option =&#xA;  [-F kv|json|csv|mqtt|influx|syslog|trigger|null] Produce decoded output in given format.&#xA;&#x9;Without this option the default is KV output. Use &#34;-F null&#34; to remove the default.&#xA;&#x9;Append output to file with :&amp;lt;filename&amp;gt; (e.g. -F csv:log.csv), defaults to stdout.&#xA;&#x9;Specify MQTT server with e.g. -F mqtt://localhost:1883&#xA;&#x9;Add MQTT options with e.g. -F &#34;mqtt://host:1883,opt=arg&#34;&#xA;&#x9;MQTT options are: user=foo, pass=bar, retain[=0|1], &amp;lt;format&amp;gt;[=topic]&#xA;&#x9;Supported MQTT formats: (default is all)&#xA;&#x9;  events: posts JSON event data&#xA;&#x9;  states: posts JSON state data&#xA;&#x9;  devices: posts device and sensor info in nested topics&#xA;&#x9;The topic string will expand keys like [/model]&#xA;&#x9;E.g. -F &#34;mqtt://localhost:1883,user=USERNAME,pass=PASSWORD,retain=0,devices=rtl_433[/id]&#34;&#xA;&#x9;With MQTT each rtl_433 instance needs a distinct driver selection. The MQTT Client-ID is computed from the driver string.&#xA;&#x9;If you use multiple RTL-SDR, perhaps set a serial and select by that (helps not to get the wrong antenna).&#xA;&#x9;Specify InfluxDB 2.0 server with e.g. -F &#34;influx://localhost:9999/api/v2/write?org=&amp;lt;org&amp;gt;&amp;amp;bucket=&amp;lt;bucket&amp;gt;,token=&amp;lt;authtoken&amp;gt;&#34;&#xA;&#x9;Specify InfluxDB 1.x server with e.g. -F &#34;influx://localhost:8086/write?db=&amp;lt;db&amp;gt;&amp;amp;p=&amp;lt;password&amp;gt;&amp;amp;u=&amp;lt;user&amp;gt;&#34;&#xA;&#x9;  Additional parameter -M time:unix:usec:utc for correct timestamps in InfluxDB recommended&#xA;&#x9;Specify host/port for syslog with e.g. -F syslog:127.0.0.1:1514&#xA;&#xA;&#xA;&#x9;&#x9;= Meta information option =&#xA;  [-M time[:&amp;lt;options&amp;gt;]|protocol|level|noise[:&amp;lt;secs&amp;gt;]|stats|bits] Add various metadata to every output line.&#xA;&#x9;Use &#34;time&#34; to add current date and time meta data (preset for live inputs).&#xA;&#x9;Use &#34;time:rel&#34; to add sample position meta data (preset for read-file and stdin).&#xA;&#x9;Use &#34;time:unix&#34; to show the seconds since unix epoch as time meta data. This is always UTC.&#xA;&#x9;Use &#34;time:iso&#34; to show the time with ISO-8601 format (YYYY-MM-DD&#34;T&#34;hh:mm:ss).&#xA;&#x9;Use &#34;time:off&#34; to remove time meta data.&#xA;&#x9;Use &#34;time:usec&#34; to add microseconds to date time meta data.&#xA;&#x9;Use &#34;time:tz&#34; to output time with timezone offset.&#xA;&#x9;Use &#34;time:utc&#34; to output time in UTC.&#xA;&#x9;&#x9;(this may also be accomplished by invocation with TZ environment variable set).&#xA;&#x9;&#x9;&#34;usec&#34; and &#34;utc&#34; can be combined with other options, eg. &#34;time:iso:utc&#34; or &#34;time:unix:usec&#34;.&#xA;&#x9;Use &#34;replay[:N]&#34; to replay file inputs at (N-times) realtime.&#xA;&#x9;Use &#34;protocol&#34; / &#34;noprotocol&#34; to output the decoder protocol number meta data.&#xA;&#x9;Use &#34;level&#34; to add Modulation, Frequency, RSSI, SNR, and Noise meta data.&#xA;&#x9;Use &#34;noise[:&amp;lt;secs&amp;gt;]&#34; to report estimated noise level at intervals (default: 10 seconds).&#xA;&#x9;Use &#34;stats[:[&amp;lt;level&amp;gt;][:&amp;lt;interval&amp;gt;]]&#34; to report statistics (default: 600 seconds).&#xA;&#x9;  level 0: no report, 1: report successful devices, 2: report active devices, 3: report all&#xA;&#x9;Use &#34;bits&#34; to add bit representation to code outputs (for debug).&#xA;&#xA;&#xA;&#x9;&#x9;= Read file option =&#xA;  [-r &amp;lt;filename&amp;gt;] Read data from input file instead of a receiver&#xA;&#x9;Parameters are detected from the full path, file name, and extension.&#xA;&#xA;&#x9;A center frequency is detected as (fractional) number suffixed with &#39;M&#39;,&#xA;&#x9;&#39;Hz&#39;, &#39;kHz&#39;, &#39;MHz&#39;, or &#39;GHz&#39;.&#xA;&#xA;&#x9;A sample rate is detected as (fractional) number suffixed with &#39;k&#39;,&#xA;&#x9;&#39;sps&#39;, &#39;ksps&#39;, &#39;Msps&#39;, or &#39;Gsps&#39;.&#xA;&#xA;&#x9;File content and format are detected as parameters, possible options are:&#xA;&#x9;&#39;cu8&#39;, &#39;cs16&#39;, &#39;cf32&#39; (&#39;IQ&#39; implied), and &#39;am.s16&#39;.&#xA;&#xA;&#x9;Parameters must be separated by non-alphanumeric chars and are case-insensitive.&#xA;&#x9;Overrides can be prefixed, separated by colon (&#39;:&#39;)&#xA;&#xA;&#x9;E.g. default detection by extension: path/filename.am.s16&#xA;&#x9;forced overrides: am:s16:path/filename.ext&#xA;&#xA;&#x9;Reading from pipes also support format options.&#xA;&#x9;E.g reading complex 32-bit float: CU32:-&#xA;&#xA;&#xA;&#x9;&#x9;= Write file option =&#xA;  [-w &amp;lt;filename&amp;gt;] Save data stream to output file (a &#39;-&#39; dumps samples to stdout)&#xA;  [-W &amp;lt;filename&amp;gt;] Save data stream to output file, overwrite existing file&#xA;&#x9;Parameters are detected from the full path, file name, and extension.&#xA;&#xA;&#x9;File content and format are detected as parameters, possible options are:&#xA;&#x9;&#39;cu8&#39;, &#39;cs8&#39;, &#39;cs16&#39;, &#39;cf32&#39; (&#39;IQ&#39; implied),&#xA;&#x9;&#39;am.s16&#39;, &#39;am.f32&#39;, &#39;fm.s16&#39;, &#39;fm.f32&#39;,&#xA;&#x9;&#39;i.f32&#39;, &#39;q.f32&#39;, &#39;logic.u8&#39;, &#39;ook&#39;, and &#39;vcd&#39;.&#xA;&#xA;&#x9;Parameters must be separated by non-alphanumeric chars and are case-insensitive.&#xA;&#x9;Overrides can be prefixed, separated by colon (&#39;:&#39;)&#xA;&#xA;&#x9;E.g. default detection by extension: path/filename.am.s16&#xA;&#x9;forced overrides: am:s16:path/filename.ext&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default receive mode, use the first device found, listen at 433.92 MHz at 250k sample rate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -C si&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default receive mode, also convert units to metric system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -f 868M -s 1024k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen at 868 MHz and 1024k sample rate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -M hires -M level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report microsecond accurate timestamps and add reception levels (depending on gain).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -R 1 -R 8 -R 43&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable only specific decoders for desired devices.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -A&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable pulse analyzer. Summarizes the timings of pulses, gaps, and periods. Can be used with &lt;code&gt;-R 0&lt;/code&gt; to disable decoders.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -S all -T 120&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save all detected signals (&lt;code&gt;g###_###M_###k.cu8&lt;/code&gt;). Run for 2 minutes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -K FILE -r file_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read a saved data file instead of receiving live data. Tag output with filenames.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -F json -M utc | mosquitto_pub -t home/rtl_433 -l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will pipe the output to network as JSON formatted MQTT messages. A test MQTT client can be found in &lt;code&gt;examples/mqtt_rtl_433_test_client.py&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -f 433.53M -f 434.02M -H 15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will poll two frequencies with 15 seconds hop interval.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Google Group&lt;/h2&gt; &#xA;&lt;p&gt;Join the Google group, rtl_433, for more information about rtl_433: &lt;a href=&#34;https://groups.google.com/forum/#!forum/rtl_433&#34;&gt;https://groups.google.com/forum/#!forum/rtl_433&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you see this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Kernel driver is active, or device is claimed by second instance of librtlsdr.&#xA;In the first case, please either detach or blacklist the kernel module&#xA;(dvb_usb_rtl28xxu), or enable automatic detaching at compile time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo rmmod rtl2832_sdr dvb_usb_rtl28xxu rtl2832&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;blacklist dvb_usb_rtl28xxu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to /etc/modprobe.d/blacklist.conf&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Version numbering scheme used is year.month. We try to keep the API compatible between releases but focus is on maintainablity.&lt;/p&gt;</summary>
  </entry>
</feed>