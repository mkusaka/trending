<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:44:00Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phoboslab/wipeout-rewrite</title>
    <updated>2023-08-20T01:44:00Z</updated>
    <id>tag:github.com,2023-08-20:/phoboslab/wipeout-rewrite</id>
    <link href="https://github.com/phoboslab/wipeout-rewrite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wipEout Rewrite&lt;/h1&gt; &#xA;&lt;p&gt;This is a re-implementation of the 1995 PSX game wipEout.&lt;/p&gt; &#xA;&lt;p&gt;Play here: &lt;a href=&#34;https://phoboslab.org/wipegame/&#34;&gt;https://phoboslab.org/wipegame/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More info in my blog: &lt;a href=&#34;https://phoboslab.org/log/2023/08/rewriting-wipeout&#34;&gt;https://phoboslab.org/log/2023/08/rewriting-wipeout&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ Work in progress. Expect bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The game currently supports two different platform-backends: &lt;a href=&#34;https://github.com/libsdl-org/SDL&#34;&gt;SDL2&lt;/a&gt; and &lt;a href=&#34;https://github.com/floooh/sokol&#34;&gt;Sokol&lt;/a&gt;. The only difference in features is that the SDL2 backend supports game controllers (joysticks, gamepads), while the Sokol backend does not.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# for SDL2 backend&#xA;apt install libsdl2-dev libglew-dev&#xA;make sdl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# for Sokol backend&#xA;apt install libx11-dev libxcursor-dev libxi-dev libasound2-dev&#xA;make sokol&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# for SDL2 backend&#xA;dnf install SDL2-devel glew-devel&#xA;make sdl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# for Sokol backend&#xA;dnf install libX11-devel libXi-devel alsa-lib-devel glew-devel libXcursor-devel&#xA;make sokol&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Currently only the SDL2 backend works. macOS is very picky about the GLSL shader version when compiling with Sokol and OpenGL3.3; it shouldn&#39;t be too difficult to get it working, but will probably require a bunch of &lt;code&gt;#ifdefs&lt;/code&gt; for SDL and WASM. PRs welcome!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install sdl2 glew&#xA;make sdl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;In theory both backends should work on Windows, but the Makefile is missing the proper compiler flags. Please send a PR!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;todo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;WASM&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://emscripten.org/&#34;&gt;emscripten&lt;/a&gt; and activate emsdk, so that &lt;code&gt;emcc&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt;. The WASM version automatically selects the Sokol backend. I&#39;m not sure what needs to be done to make the SDL2 backend work with WASM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the minimal version (no music, no intro) as well as the full version.&lt;/p&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;p&gt;The makefile accepts several flags. You can specify them with &lt;code&gt;make FLAG=VALUE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt; – &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;fals&lt;/code&gt;, default is &lt;code&gt;false&lt;/code&gt;. Whether to include debug symbols in the build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RENDERER&lt;/code&gt; – &lt;code&gt;GL&lt;/code&gt; or &lt;code&gt;SOFTWARE&lt;/code&gt;, default is &lt;code&gt;GL&lt;/code&gt; (the &lt;code&gt;SOFTWARE&lt;/code&gt; renderer is very much unfinished and only works with SDL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;USE_GLX&lt;/code&gt; – &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, default is &lt;code&gt;false&lt;/code&gt; and uses &lt;code&gt;GLVND&lt;/code&gt; over &lt;code&gt;GLX&lt;/code&gt;. Only used for the linux build.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;This repository does not contain the assets (textures, 3d models etc.) required to run the game. This code mostly assumes to have the PSX NTSC data, but some menu models from the PC version are loaded as well. Both of these can be easily found on archive.org and similar sites. The music (optional) needs to be provided in &lt;a href=&#34;https://github.com/phoboslab/qoa&#34;&gt;QOA format&lt;/a&gt;. The intro video as MPEG1.&lt;/p&gt; &#xA;&lt;p&gt;The directory structure is assumed to be as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./wipegame # the executable&#xA;./wipeout/textures/&#xA;./wipeout/music/track01.qoa&#xA;./wipeout/music/track02.qoa&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the blog post announcing this project may or may not provide a link to a ZIP containing all files needed. Who knows!&lt;/p&gt; &#xA;&lt;h2&gt;Ideas for improvements&lt;/h2&gt; &#xA;&lt;p&gt;PRs Welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Not yet implemented&lt;/h3&gt; &#xA;&lt;p&gt;Some things from the original game are not yet implemented in this rewrite. This includes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;screen shake effect&lt;/li&gt; &#xA; &lt;li&gt;game-end animations, formerly &lt;code&gt;Spline.cpp&lt;/code&gt; (the end messages are just shown over the attract mode cameras)&lt;/li&gt; &#xA; &lt;li&gt;viewing highscores in options menu&lt;/li&gt; &#xA; &lt;li&gt;controller options menu&lt;/li&gt; &#xA; &lt;li&gt;reverb for sfx and music when there&#39;s more than 4 track faces (tunnels and such)&lt;/li&gt; &#xA; &lt;li&gt;some more? grep the source for &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;FIXME&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Gameplay, Visuals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;less punishing physics for ship vs. ship collisions&lt;/li&gt; &#xA; &lt;li&gt;less punishing physics for sideways ship vs. track collisions (i.e. wall grinding like in newer wipEouts)&lt;/li&gt; &#xA; &lt;li&gt;somehow resolve the issue of inevitably running into an enemy that you just shot&lt;/li&gt; &#xA; &lt;li&gt;add option to lessen the roll in the internal view&lt;/li&gt; &#xA; &lt;li&gt;add additional external view that behaves more like in modern racing games&lt;/li&gt; &#xA; &lt;li&gt;dynamic lighting on ships&lt;/li&gt; &#xA; &lt;li&gt;allow lower resolutions and a drawing mode that resembles the PSX original&lt;/li&gt; &#xA; &lt;li&gt;the scene geometry could use some touch-ups to make an infinite draw distance option less awkward&lt;/li&gt; &#xA; &lt;li&gt;increase FOV when going over a boost&lt;/li&gt; &#xA; &lt;li&gt;better menu models for game exit and video options&lt;/li&gt; &#xA; &lt;li&gt;gamepad analog input feels like balancing an egg&lt;/li&gt; &#xA; &lt;li&gt;fix collision issues on junctions (also present in the original)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Technical&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;implement frustum culling for scene geometry, the track and ships. Currently everything within the fadeout radius is drawn.&lt;/li&gt; &#xA; &lt;li&gt;put all static geometry into a GPU-side buffer. Currently all triangles are constructed at draw time. Uploading geometry is complicated a bit by the fact that some scene animations and the ship&#39;s exhaust need to update geometry for each frame.&lt;/li&gt; &#xA; &lt;li&gt;the menu system is... not great. It&#39;s better than the 5000 lines of spaghetti that it was before, but the different layouts need a lot of &lt;code&gt;if&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;the save data is just dumping the whole struct on disk. A textual format would be preferable.&lt;/li&gt; &#xA; &lt;li&gt;since this whole thing is relying on some custom assembled assets anyway, maybe all SFX should be in QOA format too (like the music). Or switch everything to Vorbis.&lt;/li&gt; &#xA; &lt;li&gt;a lot of functions assume that there&#39;s just one player. This needs to be fixed for a potential splitscreen mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;There is none. This code may or may not be based on the source code of the PC (ATI-Rage) version that was leaked in 2022. If it were, it would probably violate copyright law, but it may also fall under fair use ¯\_(ツ)_/¯&lt;/p&gt; &#xA;&lt;p&gt;Working with this source code is probably fine, considering that this game was originally released 28 years ago (in 1995), that the current copyright holders historically didn&#39;t care about any wipEout related files or code being available on the net and that the game is currently not purchasable in any shape or form.&lt;/p&gt; &#xA;&lt;p&gt;In any case, you may NOT use this source code in a commercial release. A commercial release includes hosting it on a website that shows any forms of advertising.&lt;/p&gt; &#xA;&lt;p&gt;PS.: Hey Sony! If you&#39;re reading this, I would love to work on a proper, officially sanctioned remaster. Please get in touch &amp;lt;3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mit-pdos/xv6-public</title>
    <updated>2023-08-20T01:44:00Z</updated>
    <id>tag:github.com,2023-08-20:/mit-pdos/xv6-public</id>
    <link href="https://github.com/mit-pdos/xv6-public" rel="alternate"></link>
    <summary type="html">&lt;p&gt;xv6 OS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;NOTE: we have stopped maintaining the x86 version of xv6, and switched our efforts to the RISC-V version (&lt;a href=&#34;https://github.com/mit-pdos/xv6-riscv.git&#34;&gt;https://github.com/mit-pdos/xv6-riscv.git&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern x86-based multiprocessor using ANSI C.&lt;/p&gt; &#xA;&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; &#xA;&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&#34;https://pdos.csail.mit.edu/6.828/&#34;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; &#xA;&lt;p&gt;xv6 borrows code from the following sources: JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others) Plan 9 (entryother.S, mp.h, mp.c, lapic.c) FreeBSD (ioapic.c) NetBSD (console.c)&lt;/p&gt; &#xA;&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; &#xA;&lt;p&gt;We are also grateful for the bug reports and patches contributed by Silas Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.&lt;/p&gt; &#xA;&lt;p&gt;The code in the files that constitute xv6 is Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.&lt;/p&gt; &#xA;&lt;p&gt;ERROR REPORTS&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t process error reports (see note on top of this file).&lt;/p&gt; &#xA;&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; &#xA;&lt;p&gt;To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run &#34;make&#34;. On non-x86 or non-ELF machines (like OS X, even on x86), you will need to install a cross-compiler gcc suite capable of producing x86 ELF binaries (see &lt;a href=&#34;https://pdos.csail.mit.edu/6.828/&#34;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;). Then run &#34;make TOOLPREFIX=i386-jos-elf-&#34;. Now install the QEMU PC simulator and run &#34;make qemu&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThrowTheSwitch/Unity</title>
    <updated>2023-08-20T01:44:00Z</updated>
    <id>tag:github.com,2023-08-20:/ThrowTheSwitch/Unity</id>
    <link href="https://github.com/ThrowTheSwitch/Unity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Unit Testing for C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity Test &lt;img src=&#34;https://github.com/ThrowTheSwitch/Unity/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Copyright (c) 2007 - 2021 Unity Project by Mike Karlesky, Mark VanderVoord, and Greg Williams&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the Unity Test Project, one of the main projects of ThrowTheSwitch.org. Unity Test is a unit testing framework built for C, with a focus on working with embedded toolchains.&lt;/p&gt; &#xA;&lt;p&gt;This project is made to test code targetting microcontrollers big and small. The core project is a single C file and a pair of headers, allowing it to be added to your existing build setup without too much headache. You may use any compiler you wish, and may use most existing build systems including Make, CMake, etc. If you&#39;d like to leave the hard work to us, you might be interested in Ceedling, a build tool also by ThrowTheSwitch.org.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to Unity, we encourage you to tour the &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/&#34;&gt;docs&lt;/a&gt; folder contains a &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&#34;&gt;getting started guide&lt;/a&gt; and much more tips about using Unity.&lt;/p&gt; &#xA;&lt;h2&gt;Unity Assertion Summary&lt;/h2&gt; &#xA;&lt;p&gt;For the full list, see &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityAssertionsReference.md&#34;&gt;UnityAssertionsReference.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Validity Tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_TRUE(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to false&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FALSE(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_TRUE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_UNLESS(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_FALSE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_FAIL()&#xA;TEST_FAIL_MESSAGE(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test is automatically marked as a failure. The message is output stating why.&lt;/p&gt; &#xA;&lt;h3&gt;Numerical Assertions: Integers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_INT(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT8(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT16(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT32(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two integers for equality and display errors as signed integers. A cast will be performed to your natural integer size so often this can just be used. When you need to specify the exact size, like when comparing arrays, you can use a specific version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_UINT(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT8(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT16(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT32(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two integers for equality and display errors as unsigned integers. Like INT, there are variants for different sizes also.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX8(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX16(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX32(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compares two integers for equality and display errors as hexadecimal. Like the other integer comparisons, you can specify the size... here the size will also effect how many nibbles are shown (for example, &lt;code&gt;HEX16&lt;/code&gt; will show 4 nibbles).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling TEST_ASSERT_EQUAL_INT&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_INT_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_GREATER_THAN(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is greater than the threshold. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is less than the threshold. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;h3&gt;Arrays&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;_ARRAY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can append &lt;code&gt;_ARRAY&lt;/code&gt; to any of these macros to make an array comparison of that type. Here you will need to care a bit more about the actual size of the value being checked. You will also specify an additional argument which is the number of elements to compare. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, elements)&#xA;&#xA;_EACH_EQUAL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another array comparison option is to check that EVERY element of an array is equal to a single expected value. You do this by specifying the EACH_EQUAL macro. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, elements)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numerical Assertions: Bitwise&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS(mask, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be compared between two other integers. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_HIGH(mask, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set high. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_LOW(mask, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set low. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_HIGH(bit, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test a single bit and verify that it is high. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_LOW(bit, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test a single bit and verify that it is low. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; &#xA;&lt;h3&gt;Numerical Assertions: Floats&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)&#xA;TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_NOT_WITHIN(delta, expected, actual)&#xA;TEST_ASSERT_DOUBLE_NOT_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is NOT within plus or minus delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_FLOAT(expected, actual)&#xA;TEST_ASSERT_EQUAL_DOUBLE(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that two floating point values are &#34;equal&#34; within a small % delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_EQUAL_FLOAT(expected, actual)&#xA;TEST_ASSERT_NOT_EQUAL_DOUBLE(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that two floating point values are NOT &#34;equal&#34; within a small % delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN_FLOAT(threshold, actual)&#xA;TEST_ASSERT_LESS_THAN_DOUBLE(threshold, actual)&#xA;TEST_ASSERT_GREATER_THAN_FLOAT(threshold, actual)&#xA;TEST_ASSERT_GREATER_THAN_DOUBLE(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is less than or greater than the threshold.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;LESS_OR_EQUAL&lt;/code&gt; and &lt;code&gt;GREATER_OR_EQUAL&lt;/code&gt; variations. These obey the same rules for equality as do &lt;code&gt;TEST_ASSERT_EQUAL_FLOAT&lt;/code&gt; and &lt;code&gt;TEST_ASSERT_EQUAL_DOUBLE&lt;/code&gt;: If the two values are within a small % delta of the expected value, the assertion will pass.&lt;/p&gt; &#xA;&lt;h3&gt;String Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different. Output a custom message on failure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters. Output a custom message on failure.&lt;/p&gt; &#xA;&lt;h3&gt;Pointer Assertions&lt;/h3&gt; &#xA;&lt;p&gt;Most pointer operations can be performed by simply using the integer comparisons above. However, a couple of special cases are added for clarity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NULL(pointer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fails if the pointer is not equal to NULL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_NULL(pointer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fails if the pointer is equal to NULL&lt;/p&gt; &#xA;&lt;h3&gt;Memory Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two blocks of memory. This is a good generic assertion for types that can&#39;t be coerced into acting like standard types... but since it&#39;s a memory compare, you have to be careful that your data types are packed.&lt;/p&gt; &#xA;&lt;h3&gt;_MESSAGE&lt;/h3&gt; &#xA;&lt;p&gt;You can append &lt;code&gt;\_MESSAGE&lt;/code&gt; to any of the macros to make them take an additional argument. This argument is a string that will be printed at the end of the failure strings. This is useful for specifying more information about the problem.&lt;/p&gt;</summary>
  </entry>
</feed>