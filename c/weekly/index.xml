<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-01T01:37:08Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>valkey-io/valkey</title>
    <updated>2024-09-01T01:37:08Z</updated>
    <id>tag:github.com,2024-09-01:/valkey-io/valkey</id>
    <link href="https://github.com/valkey-io/valkey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flexible distributed key-value datastore that supports both caching and beyond caching workloads.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/valkey-io/valkey&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/valkey-io/valkey/graph/badge.svg?token=KYYSJAYC5F&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project was forked from the open source Redis project right before the transition to their new source available licenses.&lt;/p&gt; &#xA;&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. More details can be found under &lt;a href=&#34;https://valkey.io/&#34;&gt;valkey.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Valkey?&lt;/h2&gt; &#xA;&lt;p&gt;Valkey is a high-performance data structure server that primarily serves key/value workloads. It supports a wide range of native structures and an extensible plugin system for adding new data structures and access patterns.&lt;/p&gt; &#xA;&lt;h2&gt;Building Valkey&lt;/h2&gt; &#xA;&lt;p&gt;Valkey can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; &#xA;&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Valkey is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; &#xA;&lt;p&gt;It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu).&lt;/p&gt; &#xA;&lt;p&gt;To build TLS support as Valkey built-in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TO build TLS as Valkey module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=module&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that sentinel mode does not support TLS module.&lt;/p&gt; &#xA;&lt;p&gt;To build with experimental RDMA support you&#39;ll need RDMA development libraries (e.g. librdmacm-dev and libibverbs-dev on Debian/Ubuntu). For now, Valkey only supports RDMA as connection module mode. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_RDMA=module&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To append a suffix to Valkey program names, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&#34;-alt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build a 32 bit Valkey binary using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make 32bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building Valkey, it is a good idea to test it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above runs the main integration tests. Additional tests are started using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make test-unit     # Unit tests&#xA;% make test-modules  # Tests of the module API&#xA;% make test-sentinel # Valkey Sentinel integration tests&#xA;% make test-cluster  # Valkey Cluster integration tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More about running the integration tests can be found in &lt;a href=&#34;https://raw.githubusercontent.com/valkey-io/valkey/unstable/tests/README.md&#34;&gt;tests/README.md&lt;/a&gt; and for unit tests, see &lt;a href=&#34;https://raw.githubusercontent.com/valkey-io/valkey/unstable/src/unit/README.md&#34;&gt;src/unit/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; &#xA;&lt;p&gt;Valkey has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; &#xA;&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; &#xA;&lt;p&gt;If after building Valkey with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Valkey distribution.&lt;/p&gt; &#xA;&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Valkey, try the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; &#xA; &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&#34;-m32 -march=native&#34; LDFLAGS=&#34;-m32&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Allocator&lt;/h2&gt; &#xA;&lt;p&gt;Selecting a non-default memory allocator when building Valkey is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Valkey is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; &#xA;&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=libc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monotonic clock&lt;/h2&gt; &#xA;&lt;p&gt;By default, Valkey will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&#34;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&#34;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make CFLAGS=&#34;-DUSE_PROCESSOR_CLOCK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verbose build&lt;/h2&gt; &#xA;&lt;p&gt;Valkey will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make V=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Valkey&lt;/h2&gt; &#xA;&lt;p&gt;To run Valkey with the default configuration, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./valkey-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to provide your valkey.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./valkey-server /path/to/valkey.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to alter the Valkey configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./valkey-server --port 9999 --replicaof 127.0.0.1 6379&#xA;% ./valkey-server /etc/valkey/6379.conf --loglevel debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the options in valkey.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; &#xA;&lt;h2&gt;Running Valkey with TLS:&lt;/h2&gt; &#xA;&lt;h3&gt;Running manually&lt;/h3&gt; &#xA;&lt;p&gt;To manually run a Valkey server with TLS mode (assuming &lt;code&gt;./gen-test-certs.sh&lt;/code&gt; was invoked so sample certificates/keys are available):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;TLS built-in mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./src/valkey-server --tls-port 6379 --port 0 \&#xA;    --tls-cert-file ./tests/tls/valkey.crt \&#xA;    --tls-key-file ./tests/tls/valkey.key \&#xA;    --tls-ca-cert-file ./tests/tls/ca.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TLS module mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./src/valkey-server --tls-port 6379 --port 0 \&#xA;    --tls-cert-file ./tests/tls/valkey.crt \&#xA;    --tls-key-file ./tests/tls/valkey.key \&#xA;    --tls-ca-cert-file ./tests/tls/ca.crt \&#xA;    --loadmodule src/valkey-tls.so&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that you can disable TCP by specifying &lt;code&gt;--port 0&lt;/code&gt; explicitly. It&#39;s also possible to have both TCP and TLS available at the same time, but you&#39;ll have to assign different ports.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;valkey-cli&lt;/code&gt; to connect to the Valkey server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./src/valkey-cli --tls \&#xA;    --cert ./tests/tls/valkey.crt \&#xA;    --key ./tests/tls/valkey.key \&#xA;    --cacert ./tests/tls/ca.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specifying &lt;code&gt;--tls-replication yes&lt;/code&gt; makes a replica connect to the primary.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;--tls-cluster yes&lt;/code&gt; makes Valkey Cluster use TLS across nodes.&lt;/p&gt; &#xA;&lt;h2&gt;Running Valkey with RDMA:&lt;/h2&gt; &#xA;&lt;p&gt;Note that Valkey Over RDMA is an experimental feature. It may be changed or removed in any minor or major version. Currently, it is only supported on Linux.&lt;/p&gt; &#xA;&lt;p&gt;To manually run a Valkey server with RDMA mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./src/valkey-server --protected-mode no \&#xA;     --loadmodule src/valkey-rdma.so bind=192.168.122.100 port=6379&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s possible to change bind address/port of RDMA by runtime command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;192.168.122.100:6379&amp;gt; CONFIG SET rdma.port 6380&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to have both RDMA and TCP available, and there is no conflict of TCP(6379) and RDMA(6379), Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./src/valkey-server --protected-mode no \&#xA;     --loadmodule src/valkey-rdma.so bind=192.168.122.100 port=6379 \&#xA;     --port 6379&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the network card (192.168.122.100 of this example) should support RDMA. To test a server supports RDMA or not:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% rdma res show (a new version iproute2 package)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ibv_devices&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Playing with Valkey&lt;/h2&gt; &#xA;&lt;p&gt;You can use valkey-cli to play with Valkey. Start a valkey-server instance, then in another terminal try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./valkey-cli&#xA;valkey&amp;gt; ping&#xA;PONG&#xA;valkey&amp;gt; set foo bar&#xA;OK&#xA;valkey&amp;gt; get foo&#xA;&#34;bar&#34;&#xA;valkey&amp;gt; incr mycounter&#xA;(integer) 1&#xA;valkey&amp;gt; incr mycounter&#xA;(integer) 2&#xA;valkey&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing Valkey&lt;/h2&gt; &#xA;&lt;p&gt;In order to install Valkey binaries into /usr/local/bin, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: For compatibility with Redis, we create symlinks from the Redis names (&lt;code&gt;redis-server&lt;/code&gt;, &lt;code&gt;redis-cli&lt;/code&gt;, etc.) to the Valkey binaries installed by &lt;code&gt;make install&lt;/code&gt;. The symlinks are created in same directory as the Valkey binaries. The symlinks are removed when using &lt;code&gt;make uninstall&lt;/code&gt;. The creation of the symlinks can be skipped by setting the makefile variable &lt;code&gt;USE_REDIS_SYMLINKS=no&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Valkey, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd utils&#xA;% ./install_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; &#xA;&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Valkey properly as a background daemon that will start again on system reboots.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be able to stop and start Valkey using the script named &lt;code&gt;/etc/init.d/valkey_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/valkey_6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/valkey-io/valkey/raw/unstable/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. For security bugs and vulnerabilities, please see &lt;a href=&#34;https://github.com/valkey-io/valkey/raw/unstable/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Valkey is an open community project under LF Projects&lt;/h2&gt; &#xA;&lt;p&gt;Valkey a Series of LF Projects, LLC 2810 N Church St, PMB 57274 Wilmington, Delaware 19802-4447&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FRRouting/frr</title>
    <updated>2024-09-01T01:37:08Z</updated>
    <id>tag:github.com,2024-09-01:/FRRouting/frr</id>
    <link href="https://github.com/FRRouting/frr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The FRRouting Protocol Suite&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://docs.frrouting.org/en/latest/_static/frr-icon.svg?sanitize=true&#34; alt=&#34;Icon&#34; width=&#34;20%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;FRRouting&lt;/h1&gt; &#xA;&lt;p&gt;FRR is free software that implements and manages various IPv4 and IPv6 routing protocols. It runs on nearly all distributions of Linux and BSD and supports all modern CPU architectures.&lt;/p&gt; &#xA;&lt;p&gt;FRR currently supports the following protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BGP&lt;/li&gt; &#xA; &lt;li&gt;OSPFv2&lt;/li&gt; &#xA; &lt;li&gt;OSPFv3&lt;/li&gt; &#xA; &lt;li&gt;RIPv1&lt;/li&gt; &#xA; &lt;li&gt;RIPv2&lt;/li&gt; &#xA; &lt;li&gt;RIPng&lt;/li&gt; &#xA; &lt;li&gt;IS-IS&lt;/li&gt; &#xA; &lt;li&gt;PIM-SM/MSDP&lt;/li&gt; &#xA; &lt;li&gt;LDP&lt;/li&gt; &#xA; &lt;li&gt;BFD&lt;/li&gt; &#xA; &lt;li&gt;Babel&lt;/li&gt; &#xA; &lt;li&gt;PBR&lt;/li&gt; &#xA; &lt;li&gt;OpenFabric&lt;/li&gt; &#xA; &lt;li&gt;VRRP&lt;/li&gt; &#xA; &lt;li&gt;EIGRP (alpha)&lt;/li&gt; &#xA; &lt;li&gt;NHRP (alpha)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Use&lt;/h2&gt; &#xA;&lt;p&gt;For source tarballs, see the &lt;a href=&#34;https://github.com/FRRouting/frr/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Debian and its derivatives, use the APT repository at &lt;a href=&#34;https://deb.frrouting.org/&#34;&gt;https://deb.frrouting.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instructions on building and installing from source for supported platforms may be found in the &lt;a href=&#34;http://docs.frrouting.org/projects/dev-guide/en/latest/building.html&#34;&gt;developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, please refer to the &lt;a href=&#34;http://docs.frrouting.org/&#34;&gt;user guide&lt;/a&gt; for instructions on use.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The FRRouting email list server is located &lt;a href=&#34;https://lists.frrouting.org/listinfo&#34;&gt;here&lt;/a&gt; and offers the following public lists:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:dev@lists.frrouting.org&#34;&gt;dev@lists.frrouting.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Users &amp;amp; Operators&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:frog@lists.frrouting.org&#34;&gt;frog@lists.frrouting.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Announcements&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:announce@lists.frrouting.org&#34;&gt;announce@lists.frrouting.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For chat, we currently use &lt;a href=&#34;https://frrouting.slack.com&#34;&gt;Slack&lt;/a&gt;. You can join by clicking the &#34;Slack&#34; link under the &lt;a href=&#34;https://frrouting.org/community&#34;&gt;Participate&lt;/a&gt; section of our website.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;FRR maintains &lt;a href=&#34;http://docs.frrouting.org/projects/dev-guide/en/latest/index.html&#34;&gt;developer&#39;s documentation&lt;/a&gt; which contains the &lt;a href=&#34;http://docs.frrouting.org/projects/dev-guide/en/latest/workflow.html&#34;&gt;project workflow&lt;/a&gt; and expectations for contributors. Some technical documentation on project internals is also available.&lt;/p&gt; &#xA;&lt;p&gt;We welcome and appreciate all contributions, no matter how small!&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;To report security issues, please use our security mailing list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;security [at] lists.frrouting.org&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/wcdb</title>
    <updated>2024-09-01T01:37:08Z</updated>
    <id>tag:github.com,2024-09-01:/Tencent/wcdb</id>
    <link href="https://github.com/Tencent/wcdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WCDB is a cross-platform database framework developed by WeChat.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WCDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/wcdb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Release-2.1.7-brightgreen.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/wcdb/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-%20C++%20%7C%20Java%20%7C%20Kotlin%20%7C%20Swift%20%7C%20Objc-brightgreen.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-%20iOS%20%7C%20macOS%20%7C%20Android%20%7C%20Windows%20%7C%20Linux%20%7C%20OpenHarmony-brightgreen.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文版本请参看&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WCDB is an &lt;strong&gt;efficient&lt;/strong&gt;, &lt;strong&gt;complete&lt;/strong&gt;, &lt;strong&gt;easy-to-use&lt;/strong&gt; mobile database framework used in the WeChat application. It&#39;s based on SQLite and SQLCipher, and supports five languages: C++, Java, Kotlin, Swift and Objective-C.&lt;/p&gt; &#xA;&lt;h1&gt;Feature&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ORM&lt;/strong&gt; (Object Relational Mapping): WCDB provides a flexible, easy-to-use ORM for creating tables, indices and constraints, as well as CRUD through C++/Java/Kotlin/Swift/Objc objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WINQ&lt;/strong&gt; (WCDB language integrated query): WINQ is a native data querying capability which frees developers from writing glue code to concatenate SQL query strings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With ORM and WINQ, you can insert, update, query and delete objects from database in one line code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// C++&#xA;database.insertObjects&amp;lt;Sample&amp;gt;(Sample(1, &#34;text&#34;), myTable);&#xA;database.updateRow(&#34;text2&#34;, WCDB_FIELD(Sample::content), myTable, WCDB_FIELD(Sample::id) == 1);&#xA;auto objects = database.getAllObjects&amp;lt;Sample&amp;gt;(myTable, WCDB_FIELD(Sample::id) &amp;gt; 0);&#xA;database.deleteObjects(myTable, WCDB_FIELD(Sample::id) == 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Java&#xA;database.insertObject(new Sample(1, &#34;text&#34;), DBSample.allFields(), myTable);&#xA;database.updateValue(&#34;text2&#34;, DBSample.content, myTable, DBSample.id.eq(1));&#xA;List&amp;lt;Sample&amp;gt; objects = database.getAllObjects(DBSample.allFields(), myTable, DBSample.id.gt(0));&#xA;database.deleteObjects(myTable, DBSample.id.eq(1));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Kotlin&#xA;database.insertObject&amp;lt;Sample&amp;gt;(Sample(1, &#34;text&#34;), DBSample.allFields(), myTable)&#xA;database.updateValue(&#34;text2&#34;, DBSample.content, myTable, DBSample.id.eq(1))&#xA;val objects = database.getAllObjects&amp;lt;Sample&amp;gt;(DBSample.allFields(), myTable, DBSample.id.gt(0))&#xA;database.deleteObjects(myTable, DBSample.id.eq(1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;try database.insert(Sample(id:1, content:&#34;text&#34;), intoTable: myTable)&#xA;try database.update(table: myTable,&#xA;                    on: Sample.Properties.content,&#xA;                    with: &#34;text2&#34;&#xA;                    where:Sample.Properties.id == 1)&#xA;let objects: [Sample] = try database.getObjects(fromTable: myTable,&#xA;                                                where: Sample.Properties.id &amp;gt; 0)&#xA;try database.delete(fromTable: myTable where: Sample.Properties.id == 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// Objc&#xA;[database insertObject:sample intoTable:myTable];&#xA;[database updateTable:myTable&#xA;          setProperty:Sample.content&#xA;              toValue:@&#34;text2&#34;&#xA;                where:Sample.id == 1];&#xA;NSArray* objects = [database getObjectsOfClass:Sample.class&#xA;                                     fromTable:myTable&#xA;                                         where:Sample.id &amp;gt; 0];&#xA;[database deleteFromTable:myTable where:Sample.id == 1];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Efficient&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Through the framework layer and sqlcipher source optimization, WCDB have more efficient performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-threaded concurrency&lt;/strong&gt;: WCDB supports concurrent read-read and read-write access via connection pooling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deeply optimized&lt;/strong&gt;: WCDB has deeply optimized the source code and configuration of SQLite to adapt to the development scenarios of mobile terminals. At the same time, WCDB has also been optimized for common time-consuming scenarios, such as writing data in batches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Complete&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;WCDB summarizes common problems in practice to provide a more complete development experience for database development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Encryption Support&lt;/strong&gt;: WCDB supports database encryption via &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Corruption recovery&lt;/strong&gt;: WCDB provides a built-in repair kit for database corruption recovery.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Anti-injection&lt;/strong&gt;: WCDB provides a built-in protection from SQL injection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database model upgrade&lt;/strong&gt;: The database model is bound to the class definition, so that the addition, deletion and modification of database fields are consistent with the definition of class variables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full-text search&lt;/strong&gt;: WCDB provides an easy-to-use full-text search interface and includes tokenizers for multiple languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data Migration&lt;/strong&gt;: WCDB supports to migrate data from one databasse to another with simple configuration. And developers don&#39;t need to care about the intermediate status and progress of the migration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data Compression&lt;/strong&gt;: WCDB supports to compress content via &lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;Zstd&lt;/a&gt; within specific fields of a database table through a simple configuration. Once configured, the details of data compression and decompression become transparent to developers, and WCDB can automatically compress existing data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Compatibility&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;WCDB has interfaces in three languages: C++, Java, Kotlin, Swift, and Objc. Interfaces in different languages share the same underlying logic. The code structure of WCDB is shown in the figure below:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img style=&#34;display:inline-block&#34; src=&#34;https://raw.githubusercontent.com/wiki/Tencent/wcdb/assets/common/CodeStructure-English.png&#34; width=&#34;600/&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Under such architecture, WCDB in different languages can have the same interface structure and interface capabilities. In one project, you can write database code in different languages with one WCDB. Database logic in different languages will not conflict. Some global interfaces such as error monitoring can work on database logic in different languages at the same time.&lt;/p&gt; &#xA;&lt;h1&gt;Build and Install&lt;/h1&gt; &#xA;&lt;p&gt;Following wikies contain the detailed instructions about building and installing of WCDB.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/C++-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7&#34;&gt;Building and Installing of WCDB C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/Java%7CKotlin-%e5%ae%89%e8%a3%85%e4%b8%8e%e5%85%bc%e5%ae%b9%e6%80%a7&#34;&gt;Building and Installing of WCDB Java/Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/Swift-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7&#34;&gt;Building and Installing of WCDB Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/Objc-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%BC%E5%AE%B9%E6%80%A7&#34;&gt;Building and Installing of WCDB Objc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tutorials&lt;/h1&gt; &#xA;&lt;p&gt;Tutorials of different languages can be found below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/C++-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8&#34;&gt;Tutorials for WCDB C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/Java%7CKotlin-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8&#34;&gt;Tutorials for WCDB Java/Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/Swift-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8&#34;&gt;Tutorials for WCDB Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb/wiki/Objc-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8&#34;&gt;Tutorials for WCDB Objc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested in contributing, check out the [CONTRIBUTING.md], also join our &lt;a href=&#34;https://opensource.tencent.com/contribution&#34;&gt;Tencent OpenSource Plan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;信息公示&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;开发者: 深圳市腾讯计算机系统有限公司&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/GepveGs4q4eAgpoh&#34;&gt;WCDB 个人信息保护规则&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>