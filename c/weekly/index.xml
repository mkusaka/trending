<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:52:10Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ggerganov/llama.cpp</title>
    <updated>2023-03-19T01:52:10Z</updated>
    <id>tag:github.com,2023-03-19:/ggerganov/llama.cpp</id>
    <link href="https://github.com/ggerganov/llama.cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Port of Facebook&#39;s LLaMA model in C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llama.cpp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/actions&#34;&gt;&lt;img src=&#34;https://github.com/ggerganov/llama.cpp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inference of &lt;a href=&#34;https://arxiv.org/abs/2302.13971&#34;&gt;LLaMA&lt;/a&gt; model in pure C/C++&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hot topics:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RMSNorm implementation / fixes: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/173&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/173&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cache input prompts for faster initialization: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/64&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;llama.cpp&lt;/code&gt; logo: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/105&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/105&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;The main goal is to run the model using 4-bit quantization on a MacBook&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plain C/C++ implementation without dependencies&lt;/li&gt; &#xA; &lt;li&gt;Apple silicon first-class citizen - optimized via ARM NEON&lt;/li&gt; &#xA; &lt;li&gt;AVX2 support for x86 architectures&lt;/li&gt; &#xA; &lt;li&gt;Mixed F16 / F32 precision&lt;/li&gt; &#xA; &lt;li&gt;4-bit quantization support&lt;/li&gt; &#xA; &lt;li&gt;Runs on the CPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This was &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/33#issuecomment-1465108022&#34;&gt;hacked in an evening&lt;/a&gt; - I have no idea if it works correctly. Please do not make conclusions about the models based on the results from this implementation. For all I know, it can be completely wrong. This project is for educational purposes. New features will probably be added mostly through community contributions.&lt;/p&gt; &#xA;&lt;p&gt;Supported platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mac OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows (via CMake)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here is a typical run using LLaMA-7B:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;make -j &amp;amp;&amp;amp; ./main -m ./models/7B/ggml-model-q4_0.bin -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;I llama.cpp build info:&#xA;I UNAME_S:  Darwin&#xA;I UNAME_P:  arm&#xA;I UNAME_M:  arm64&#xA;I CFLAGS:   -I.              -O3 -DNDEBUG -std=c11   -fPIC -pthread -DGGML_USE_ACCELERATE&#xA;I CXXFLAGS: -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC -pthread&#xA;I LDFLAGS:   -framework Accelerate&#xA;I CC:       Apple clang version 14.0.0 (clang-1400.0.29.202)&#xA;I CXX:      Apple clang version 14.0.0 (clang-1400.0.29.202)&#xA;&#xA;make: Nothing to be done for `default&#39;.&#xA;main: seed = 1678486056&#xA;llama_model_load: loading model from &#39;./models/7B/ggml-model-q4_0.bin&#39; - please wait ...&#xA;llama_model_load: n_vocab = 32000&#xA;llama_model_load: n_ctx   = 512&#xA;llama_model_load: n_embd  = 4096&#xA;llama_model_load: n_mult  = 256&#xA;llama_model_load: n_head  = 32&#xA;llama_model_load: n_layer = 32&#xA;llama_model_load: n_rot   = 128&#xA;llama_model_load: f16     = 2&#xA;llama_model_load: n_ff    = 11008&#xA;llama_model_load: ggml ctx size = 4529.34 MB&#xA;llama_model_load: memory_size =   512.00 MB, n_mem = 16384&#xA;llama_model_load: .................................... done&#xA;llama_model_load: model size =  4017.27 MB / num tensors = 291&#xA;&#xA;main: prompt: &#39;Building a website can be done in 10 simple steps:&#39;&#xA;main: number of tokens in prompt = 15&#xA;     1 -&amp;gt; &#39;&#39;&#xA;  8893 -&amp;gt; &#39;Build&#39;&#xA;   292 -&amp;gt; &#39;ing&#39;&#xA;   263 -&amp;gt; &#39; a&#39;&#xA;  4700 -&amp;gt; &#39; website&#39;&#xA;   508 -&amp;gt; &#39; can&#39;&#xA;   367 -&amp;gt; &#39; be&#39;&#xA;  2309 -&amp;gt; &#39; done&#39;&#xA;   297 -&amp;gt; &#39; in&#39;&#xA; 29871 -&amp;gt; &#39; &#39;&#xA; 29896 -&amp;gt; &#39;1&#39;&#xA; 29900 -&amp;gt; &#39;0&#39;&#xA;  2560 -&amp;gt; &#39; simple&#39;&#xA;  6576 -&amp;gt; &#39; steps&#39;&#xA; 29901 -&amp;gt; &#39;:&#39;&#xA;&#xA;sampling parameters: temp = 0.800000, top_k = 40, top_p = 0.950000&#xA;&#xA;&#xA;Building a website can be done in 10 simple steps:&#xA;1) Select a domain name and web hosting plan&#xA;2) Complete a sitemap&#xA;3) List your products&#xA;4) Write product descriptions&#xA;5) Create a user account&#xA;6) Build the template&#xA;7) Start building the website&#xA;8) Advertise the website&#xA;9) Provide email support&#xA;10) Submit the website to search engines&#xA;A website is a collection of web pages that are formatted with HTML. HTML is the code that defines what the website looks like and how it behaves.&#xA;The HTML code is formatted into a template or a format. Once this is done, it is displayed on the user&#39;s browser.&#xA;The web pages are stored in a web server. The web server is also called a host. When the website is accessed, it is retrieved from the server and displayed on the user&#39;s computer.&#xA;A website is known as a website when it is hosted. This means that it is displayed on a host. The host is usually a web server.&#xA;A website can be displayed on different browsers. The browsers are basically the software that renders the website on the user&#39;s screen.&#xA;A website can also be viewed on different devices such as desktops, tablets and smartphones.&#xA;Hence, to have a website displayed on a browser, the website must be hosted.&#xA;A domain name is an address of a website. It is the name of the website.&#xA;The website is known as a website when it is hosted. This means that it is displayed on a host. The host is usually a web server.&#xA;A website can be displayed on different browsers. The browsers are basically the software that renders the website on the user’s screen.&#xA;A website can also be viewed on different devices such as desktops, tablets and smartphones. Hence, to have a website displayed on a browser, the website must be hosted.&#xA;A domain name is an address of a website. It is the name of the website.&#xA;A website is an address of a website. It is a collection of web pages that are formatted with HTML. HTML is the code that defines what the website looks like and how it behaves.&#xA;The HTML code is formatted into a template or a format. Once this is done, it is displayed on the user’s browser.&#xA;A website is known as a website when it is hosted&#xA;&#xA;main: mem per token = 14434244 bytes&#xA;main:     load time =  1332.48 ms&#xA;main:   sample time =  1081.40 ms&#xA;main:  predict time = 31378.77 ms / 61.41 ms per token&#xA;main:    total time = 34036.74 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is another demo of running both LLaMA-7B and &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; on a single M1 Pro MacBook:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/224442907-7693d4be-acaa-4e01-8b4f-add84093ffff.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/224442907-7693d4be-acaa-4e01-8b4f-add84093ffff.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are the step for the LLaMA-7B model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build this repo&#xA;git clone https://github.com/ggerganov/llama.cpp&#xA;cd llama.cpp&#xA;make&#xA;&#xA;# obtain the original LLaMA model weights and place them in ./models&#xA;ls ./models&#xA;65B 30B 13B 7B tokenizer_checklist.chk tokenizer.model&#xA;&#xA;# install Python dependencies&#xA;python3 -m pip install torch numpy sentencepiece&#xA;&#xA;# convert the 7B model to ggml FP16 format&#xA;python3 convert-pth-to-ggml.py models/7B/ 1&#xA;&#xA;# quantize the model to 4-bits&#xA;./quantize.sh 7B&#xA;&#xA;# run the inference&#xA;./main -m ./models/7B/ggml-model-q4_0.bin -n 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, it&#39;s best to use Python 3.9 or Python 3.10, as &lt;code&gt;sentencepiece&lt;/code&gt; has not yet published a wheel for Python 3.11.&lt;/p&gt; &#xA;&lt;p&gt;When running the larger models, make sure you have enough disk space to store all the intermediate files.&lt;/p&gt; &#xA;&lt;h3&gt;Memory/Disk Requirements&lt;/h3&gt; &#xA;&lt;p&gt;As the models are currently fully loaded into memory, you will need adequate disk space to save them and sufficient RAM to load them. At the moment, memory and disk requirements are the same.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;original size&lt;/th&gt; &#xA;   &lt;th&gt;quantized size (4-bit)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;13 GB&lt;/td&gt; &#xA;   &lt;td&gt;3.9 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;24 GB&lt;/td&gt; &#xA;   &lt;td&gt;7.8 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30B&lt;/td&gt; &#xA;   &lt;td&gt;60 GB&lt;/td&gt; &#xA;   &lt;td&gt;19.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;65B&lt;/td&gt; &#xA;   &lt;td&gt;120 GB&lt;/td&gt; &#xA;   &lt;td&gt;38.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Interactive mode&lt;/h3&gt; &#xA;&lt;p&gt;If you want a more ChatGPT-like experience, you can run in interactive mode by passing &lt;code&gt;-i&lt;/code&gt; as a parameter. In this mode, you can always interrupt generation by pressing Ctrl+C and enter one or more lines of text which will be converted into tokens and appended to the current context. You can also specify a &lt;em&gt;reverse prompt&lt;/em&gt; with the parameter &lt;code&gt;-r &#34;reverse prompt string&#34;&lt;/code&gt;. This will result in user input being prompted whenever the exact tokens of the reverse prompt string are encountered in the generation. A typical use is to use a prompt which makes LLaMa emulate a chat between multiple users, say Alice and Bob, and pass &lt;code&gt;-r &#34;Alice:&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example few-shot interaction, invoked with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./main -m ./models/13B/ggml-model-q4_0.bin -n 256 --repeat_penalty 1.0 --color -i -r &#34;User:&#34; \&#xA;                                           -p \&#xA;&#34;Transcript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User&#39;s requests immediately and with precision.&#xA;&#xA;User: Hello, Bob.&#xA;Bob: Hello. How may I help you today?&#xA;User: Please tell me the largest city in Europe.&#xA;Bob: Sure. The largest city in Europe is Moscow, the capital of Russia.&#xA;User:&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of &lt;code&gt;--color&lt;/code&gt; to distinguish between user input and generated text.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1991296/224575029-2af3c7dc-5a65-4f64-a6bb-517a532aea38.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You can easily run &lt;code&gt;llama.cpp&lt;/code&gt; on Android device with &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;termux&lt;/a&gt;. First, obtain the &lt;a href=&#34;https://developer.android.com/ndk&#34;&gt;Android NDK&lt;/a&gt; and then build with CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build-android&#xA;$ cd build-android&#xA;$ export NDK=&amp;lt;your_ndk_directory&amp;gt;&#xA;$ cmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_C_FLAGS=-march=armv8.4a+dotprod ..&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;termux&lt;/a&gt; on your device and run &lt;code&gt;termux-setup-storage&lt;/code&gt; to get access to your SD card. Finally, copy the &lt;code&gt;llama&lt;/code&gt; binary and the model files to your device storage. Here is a demo of an interactive session running on Pixel 5 phone:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/271616/225014776-1d567049-ad71-4ef2-b050-55b0b3b9274c.mp4&#34;&gt;https://user-images.githubusercontent.com/271616/225014776-1d567049-ad71-4ef2-b050-55b0b3b9274c.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker must be installed and running on your system.&lt;/li&gt; &#xA; &lt;li&gt;Create a folder to store big models &amp;amp; intermediate files (in ex. im using /llama/models)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Images&lt;/h4&gt; &#xA;&lt;p&gt;We have two Docker images available for this project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:full&lt;/code&gt;: This image includes both the main executable file and the tools to convert LLaMA models into ggml and convert into 4-bit quantization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:light&lt;/code&gt;: This image only includes the main executable file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to download the models, convert them to ggml and optimize them is with the --all-in-one command which includes the full docker image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /llama/models:/models ghcr.io/ggerganov/llama.cpp:full --all-in-one &#34;/models/&#34; 7B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On complete, you are ready to play!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /llama/models:/models ghcr.io/ggerganov/llama.cpp:full --run -m /models/7B/ggml-model-q4_0.bin -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with light image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /llama/models:/models ghcr.io/ggerganov/llama.cpp:light -m /models/7B/ggml-model-q4_0.bin -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We don&#39;t know yet how much the quantization affects the quality of the generated text&lt;/li&gt; &#xA; &lt;li&gt;Probably the token sampling can be improved&lt;/li&gt; &#xA; &lt;li&gt;The Accelerate framework is actually currently unused since I found that for tensor shapes typical for the Decoder, there is no benefit compared to the ARM_NEON intrinsics implementation. Of course, it&#39;s possible that I simply don&#39;t know how to utilize it properly. But in any case, you can even disable it with &lt;code&gt;LLAMA_NO_ACCELERATE=1 make&lt;/code&gt; and the performance will be the same, since no BLAS calls are invoked by the current implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributors can open PRs&lt;/li&gt; &#xA; &lt;li&gt;Collaborators can push to branches in the &lt;code&gt;llama.cpp&lt;/code&gt; repo and merge PRs into the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;Collaborators will be invited based on contributions&lt;/li&gt; &#xA; &lt;li&gt;Any help with managing issues and PRs is very appreciated!&lt;/li&gt; &#xA; &lt;li&gt;Make sure to read this: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/205&#34;&gt;Inference at the edge&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coding guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoid adding third-party dependencies, extra files, extra headers, etc.&lt;/li&gt; &#xA; &lt;li&gt;Always consider cross-compatibility with other operating systems and architectures&lt;/li&gt; &#xA; &lt;li&gt;Avoid fancy looking modern STL constructs, use basic &lt;code&gt;for&lt;/code&gt; loops, avoid templates, keep it simple&lt;/li&gt; &#xA; &lt;li&gt;There are no strict rules for the code style, but try to follow the patterns in the code (indentation, spaces, etc.). Vertical alignment makes things more readable and easier to batch edit&lt;/li&gt; &#xA; &lt;li&gt;Clean-up any trailing whitespaces, use 4 spaces indentation, brackets on same line, &lt;code&gt;void * ptr&lt;/code&gt;, &lt;code&gt;int &amp;amp; a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; for tasks suitable for first contributions&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>libretro/RetroArch</title>
    <updated>2023-03-19T01:52:10Z</updated>
    <id>tag:github.com,2023-03-19:/libretro/RetroArch</id>
    <link href="https://github.com/libretro/RetroArch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform, sophisticated frontend for the libretro API. Licensed GPLv3.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/libretro/RetroArch&#34;&gt;&lt;img src=&#34;https://travis-ci.org/libretro/RetroArch.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/retroarch&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/8936/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/retroarch&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/retroarch/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;RetroArch&lt;/h1&gt; &#xA;&lt;p&gt;RetroArch is the reference frontend for the libretro API. Popular examples of implementations for this API includes video game system emulators and game engines as well as more generalized 3D programs. These programs are instantiated as dynamic libraries. We refer to these as &#34;libretro cores&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libretro/RetroArch/master/docs/XMB-main-menu.jpg&#34; alt=&#34;XMB menu driver&#34; title=&#34;XMB menu driver&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libretro/RetroArch/master/docs/rgui-main-menu.jpg&#34; alt=&#34;rgui menu driver&#34; title=&#34;rgui menu driver&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libretro/RetroArch/master/docs/glui-main-menu.jpg&#34; alt=&#34;glui menu driver&#34; title=&#34;glui menu driver&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libretro/RetroArch/master/docs/ozone-main-menu.jpg&#34; alt=&#34;ozone menu driver&#34; title=&#34;ozone menu driver&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;libretro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.libretro.com&#34;&gt;libretro&lt;/a&gt; is an API that exposes generic audio/video/input callbacks. A frontend for libretro (such as RetroArch) handles video output, audio output, input and application lifecycle. A libretro core written in portable C or C++ can run seamlessly on many platforms with very little to no porting effort.&lt;/p&gt; &#xA;&lt;p&gt;While RetroArch is the reference frontend for libretro, several other projects have used the libretro interface to include support for emulators and/or game engines. libretro is completely open and free for anyone to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libretro/RetroArch/raw/master/libretro-common/include/libretro.h&#34;&gt;libretro API header&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Binaries&lt;/h2&gt; &#xA;&lt;p&gt;Latest binaries are currently hosted on the &lt;a href=&#34;http://buildbot.libretro.com/&#34;&gt;buildbot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To reach developers, either make an issue here on GitHub, make a thread on the &lt;a href=&#34;https://www.libretro.com/forums/&#34;&gt;forum&lt;/a&gt;, chat on &lt;a href=&#34;https://discord.gg/C4amCeV&#34;&gt;discord&lt;/a&gt;, or visit our IRC channel: #retroarch @ irc.freenode.org. You could create a post in &lt;a href=&#34;https://www.reddit.com/r/RetroArch/&#34;&gt;Reddit&lt;/a&gt; with &lt;em&gt;Technical Support&lt;/em&gt; flair.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://docs.libretro.com/&#34;&gt;Documentation Center&lt;/a&gt;. On Unix, man-pages are provided. More developer-centric stuff is found &lt;a href=&#34;https://docs.libretro.com/development/libretro-overview/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cg/HLSL shaders: &lt;a href=&#34;https://github.com/libretro/common-shaders&#34;&gt;common-shaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;slang shaders: &lt;a href=&#34;https://github.com/libretro/slang-shaders&#34;&gt;slang-shaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GLSL shaders: &lt;a href=&#34;https://github.com/libretro/glsl-shaders&#34;&gt;glsl-shaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helper scripts to build libretro implementations: &lt;a href=&#34;https://github.com/libretro/libretro-super&#34;&gt;libretro-super&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub mirrors of projects, useful for generating diff files: &lt;a href=&#34;https://github.com/libretro-mirrors/&#34;&gt;libretro-mirrors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;RetroArch attempts to be small and lean while still having all the useful core features expected from an emulator. It is designed to be very portable and features a gamepad-centric and touchscreen UI. It also has a full-featured command-line interface.&lt;/p&gt; &#xA;&lt;p&gt;In some areas, RetroArch goes beyond and emphasizes on not-so-common technical features such as multi-pass shader support, real-time rewind (Braid-style), video recording (using FFmpeg), run-ahead input latency removal, etc.&lt;/p&gt; &#xA;&lt;p&gt;RetroArch also emphasizes being easy to integrate into various launcher frontends.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;p&gt;RetroArch has been ported to the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DOS&lt;/li&gt; &#xA; &lt;li&gt;Windows 11&lt;/li&gt; &#xA; &lt;li&gt;Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Windows 8&lt;/li&gt; &#xA; &lt;li&gt;Windows 7&lt;/li&gt; &#xA; &lt;li&gt;Windows Vista&lt;/li&gt; &#xA; &lt;li&gt;Windows XP&lt;/li&gt; &#xA; &lt;li&gt;Windows Millennium&lt;/li&gt; &#xA; &lt;li&gt;Windows 2000&lt;/li&gt; &#xA; &lt;li&gt;Windows NT 3.5&lt;/li&gt; &#xA; &lt;li&gt;Windows 98&lt;/li&gt; &#xA; &lt;li&gt;Windows 95&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Emscripten (WebAssembly and JavaScript)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;NetBSD&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD&lt;/li&gt; &#xA; &lt;li&gt;Haiku&lt;/li&gt; &#xA; &lt;li&gt;Solaris&lt;/li&gt; &#xA; &lt;li&gt;Apple macOS (PPC, x86-32 and x86-64)&lt;/li&gt; &#xA; &lt;li&gt;Apple iOS&lt;/li&gt; &#xA; &lt;li&gt;Apple tvOS&lt;/li&gt; &#xA; &lt;li&gt;Android (2.x to most recent version)&lt;/li&gt; &#xA; &lt;li&gt;PlayStation2&lt;/li&gt; &#xA; &lt;li&gt;PlayStation3&lt;/li&gt; &#xA; &lt;li&gt;PlayStation4&lt;/li&gt; &#xA; &lt;li&gt;PlayStation Portable&lt;/li&gt; &#xA; &lt;li&gt;PlayStation Vita&lt;/li&gt; &#xA; &lt;li&gt;Original Microsoft Xbox&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Xbox 360 (Libxenon/XeXDK)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Xbox One&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Xbox Series S/X&lt;/li&gt; &#xA; &lt;li&gt;Nintendo GameCube&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Wii&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Wii U&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 3DS/2DS&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Switch&lt;/li&gt; &#xA; &lt;li&gt;Nintendo NES/SNES Classic Edition&lt;/li&gt; &#xA; &lt;li&gt;Raspberry Pi&lt;/li&gt; &#xA; &lt;li&gt;Blackberry&lt;/li&gt; &#xA; &lt;li&gt;OpenDingux&lt;/li&gt; &#xA; &lt;li&gt;Miyoo&lt;/li&gt; &#xA; &lt;li&gt;RS90&lt;/li&gt; &#xA; &lt;li&gt;RetroFW&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies (PC)&lt;/h2&gt; &#xA;&lt;p&gt;There are no true hard dependencies per se.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, RetroArch can run with only Win32 as dependency.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, there are no true dependencies. For optimal usage, the following dependencies come as recommended:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GL headers / Vulkan headers&lt;/li&gt; &#xA; &lt;li&gt;X11 headers and libs, or EGL/KMS/GBM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OSX port of RetroArch requires latest versions of XCode to build.&lt;/p&gt; &#xA;&lt;p&gt;RetroArch can utilize these libraries if enabled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nvidia-cg-toolkit&lt;/li&gt; &#xA; &lt;li&gt;libfreetype2 (TTF font rendering on screen)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;RetroArch needs at least one of these audio driver libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ALSA&lt;/li&gt; &#xA; &lt;li&gt;OSS&lt;/li&gt; &#xA; &lt;li&gt;RoarAudio&lt;/li&gt; &#xA; &lt;li&gt;RSound&lt;/li&gt; &#xA; &lt;li&gt;OpenAL&lt;/li&gt; &#xA; &lt;li&gt;JACK&lt;/li&gt; &#xA; &lt;li&gt;SDL&lt;/li&gt; &#xA; &lt;li&gt;PulseAudio&lt;/li&gt; &#xA; &lt;li&gt;XAudio2 (Win32, Xbox 360)&lt;/li&gt; &#xA; &lt;li&gt;DirectSound (Win32, Xbox 1)&lt;/li&gt; &#xA; &lt;li&gt;CoreAudio (OSX, iOS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run properly, RetroArch requires a libretro implementation present; however, as it&#39;s typically loaded dynamically, it&#39;s not required at build time.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies (Console ports, mobile)&lt;/h2&gt; &#xA;&lt;p&gt;Console ports have their own dependencies, but generally do not require anything other than what the respective SDKs provide.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;OpenGL1&lt;/h3&gt; &#xA;&lt;p&gt;Your videocard needs to at least support the OpenGL 1.1 spec.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Shaders&lt;/strong&gt;&lt;/em&gt;: N/A&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Menu driver support&lt;/strong&gt;: MaterialUI, XMB, Ozone and RGUI should all work correctly. XMB won&#39;t have shader pipeline effects because of the aforementioned lack of shader support.&lt;/p&gt; &#xA;&lt;h3&gt;OpenGL2&lt;/h3&gt; &#xA;&lt;p&gt;Your videocard needs to at least support the OpenGL 2.1 spec.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Shaders:&lt;/strong&gt;&lt;/em&gt; You can choose between either NVIDIA Cg shaders (deprecated, requires separate runtime to be installed on your system), or GLSL shaders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Menu driver support:&lt;/strong&gt;&lt;/em&gt; MaterialUI, XMB, Ozone and RGUI should all work correctly.&lt;/p&gt; &#xA;&lt;h3&gt;OpenGL3&lt;/h3&gt; &#xA;&lt;p&gt;Your videocard needs to at least support the OpenGL 3.2 core feature spec.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Shaders:&lt;/strong&gt;&lt;/em&gt; You will be able to use modern Slang shaders with this driver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Menu driver support:&lt;/strong&gt;&lt;/em&gt; MaterialUI, XMB, Ozone and RGUI should all work correctly.&lt;/p&gt; &#xA;&lt;h3&gt;Direct3D 11&lt;/h3&gt; &#xA;&lt;p&gt;Your videocard needs to at least support the Direct3D11 11.0 spec. The card also needs to support at least the Shader Model 4.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Shaders:&lt;/strong&gt;&lt;/em&gt; You will be able to use modern Slang shaders with this driver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Menu driver support:&lt;/strong&gt;&lt;/em&gt; MaterialUI, XMB, Ozone and RGUI should all work correctly.&lt;/p&gt; &#xA;&lt;h3&gt;Vulkan&lt;/h3&gt; &#xA;&lt;p&gt;Your videocard needs to at least support the Vulkan 1.0 spec.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Shaders:&lt;/strong&gt;&lt;/em&gt; You will be able to use modern Slang shaders with this driver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Menu driver support:&lt;/strong&gt;&lt;/em&gt; MaterialUI, XMB, Ozone and RGUI should all work correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration is defined in &lt;code&gt;config.def.h&lt;/code&gt;. It is not recommended to change this unless you know what you&#39;re doing. These can later be tweaked by using a config file. A sample configuration file is installed to &lt;code&gt;/etc/retroarch.cfg&lt;/code&gt;. This is the system-wide config file.&lt;/p&gt; &#xA;&lt;p&gt;RetroArch will on startup create a config file in &lt;code&gt;$XDG\_CONFIG\_HOME/retroarch/retroarch.cfg&lt;/code&gt; if it does not exist. Users only need to configure a certain option if the desired value deviates from the value defined in config.def.h.&lt;/p&gt; &#xA;&lt;p&gt;To configure joypads, use the built-in menu or manually configure them in &lt;code&gt;retroarch.cfg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling and installing&lt;/h2&gt; &#xA;&lt;p&gt;Instructions for compiling and installing RetroArch can be found in the &lt;a href=&#34;https://docs.libretro.com/&#34;&gt;Libretro/RetroArch Documentation Center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CRT 15Khz Resolution Switching&lt;/h2&gt; &#xA;&lt;p&gt;CRT SwitchRes will turn on, on the fly. However, you will need to restart RetroArch to disable it. With CRT SwitchRes enable RetroArch will start in 2560 x 480 @ 60.&lt;/p&gt; &#xA;&lt;p&gt;If you are running Windows, before enabling the CRT SwitchRes options please make sure you have installed CRTEmudriver and installed some modelines. The minimum modelines for all games to switch correctly are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2560 x 192 @ 60.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 200 @ 60.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 240 @ 60.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 224 @ 60.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 237 @ 60.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 256 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 254 @ 55.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 448 @ 60.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 480 @ 60.000000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install these modelines replacing 2560 with your desired super resolution. The above resolutions are NTSC only so if you would be playing any PAL content please add PAL modelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2560 x 192 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 200 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 240 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 224 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 288 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 237 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 254 @ 55.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 448 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 480 @ 50.000000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some games will require higher PAL resolutions which should also be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2560 x 512 @ 50.000000&lt;/li&gt; &#xA; &lt;li&gt;2560 x 576 @ 50.000000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ideally install all these modelines and everything will work great.&lt;/p&gt; &#xA;&lt;h2&gt;Super Resolutions&lt;/h2&gt; &#xA;&lt;p&gt;The default super resolution is 2560. It is displayed just under the CRT switch option, which can be found in video settings. This can be changed within the retroarch.cfg. The only compatible resolutions are 1920, 2560 and 3840. Any other resolutions will be ignored and native switching will be activated.&lt;/p&gt; &#xA;&lt;h2&gt;Native Resolutions&lt;/h2&gt; &#xA;&lt;p&gt;If native resolutions are activated you will need a whole new set of modelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 240 @ 50.006977 SNESpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 448 @ 50.006977 SNESpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;512 x 224 @ 50.006977 SNESpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;512 x 240 @ 50.006977 SNESpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;512 x 448 @ 50.006977 SNESpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 240 @ 60.098812 SNESntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 448 @ 60.098812 SNESntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;512 x 240 @ 60.098812 SNESntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;512 x 224 @ 60.098812 SNESntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;512 x 448 @ 60.098812 SNESntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 192 @ 59.922745 MDntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 224 @ 59.922745 MDntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 224 @ 59.922745 MDntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 240 @ 59.922745 MDntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 448 @ 59.922745 MDntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 480 @ 59.922745 MDntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 192 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 224 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 224 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 240 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 288 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 448 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 480 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 576 @ 49.701458 MDpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 288 @ 49.701458 MSYSpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 240 @ 60.098812 NESntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 240 @ 50.006977 NESpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 237 @ 60.130001 N64ntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 240 @ 60.130001 N64ntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 480 @ 60.130001 N64ntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 288 @ 50.000000 N64pal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 480 @ 50.000000 N64pal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 576 @ 50.000000 N64pal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 252 @ 49.759998 PSXpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 252 @ 49.759998 PSXpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;384 x 252 @ 49.759998 PSXpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 252 @ 49.759998 PSXpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;640 x 540 @ 49.759998 PSXpal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;384 x 240 @ 59.941002 PSXntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;256 x 480 @ 59.941002 PSXntsc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;352 x 240 @ 59.820000 Saturn/SGFX_NTSCp&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;704 x 240 @ 59.820000 SaturnNTSCp&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;352 x 480 @ 59.820000 SaturnNTSCi&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;704 x 480 @ 59.820000 SaturnNTSCi&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;352 x 288 @ 49.701458 SaturnPALp&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;704 x 288 @ 49.701458 SaturnPALp&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;352 x 576 @ 49.701458 SaturnPALi&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;704 x 576 @ 49.701458 SaturnPALi&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;240 x 160 @ 59.730000 GBA&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;320 x 200 @ 60.000000 Doom&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;// Arcade&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;400 x 254 @ 54.706841 MK&lt;/li&gt; &#xA; &lt;li&gt;384 x 224 @ 59.637405 CPS1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These modelines are more accurate giving exact hz. However, some games may have unwanted results. This is due to mid-scanline resolution changes on the original hardware. For the best results super resolutions are the way to go.&lt;/p&gt; &#xA;&lt;h2&gt;CRT resolution switching &amp;amp; MAME&lt;/h2&gt; &#xA;&lt;p&gt;Some arcade resolutions can be very different from consumer CRTs. There is resolution detection to ensure MAME games will be displayed in the closest available resolution but drawn at their native resolution within this resolution. Meaning that the MAME game will look just like the original hardware.&lt;/p&gt; &#xA;&lt;p&gt;MAME ROMs that run in a vertical aspect like DoDonPachi need to be rotated within MAME before resolution switching and aspect correction will work. Do this before enabling CRT SwitchRes so that RetroArch will run in your desktop resolution. Once you have rotated any games that may need it turn CRT SwitchRes on.&lt;/p&gt; &#xA;&lt;h2&gt;Socials&lt;/h2&gt; &#xA;&lt;p&gt;The links below belong to our official channels. Links other than this may have been created by fans, independent members or followers. We seriously recommend using our original resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.retroarch.com/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libretro.com/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/libretro&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/libretro&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/RetroArch/&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/Libretro&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://posts.google.com/share/55Nhs2jG&#34;&gt;Google Post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.steampowered.com/app/1118310/RetroArch/&#34;&gt;Steam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC5q007PYyQPgin0HHbzF0zQ&#34;&gt;YouTube Topic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/libretro&#34;&gt;Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bountysource.com/teams/libretro/issues&#34;&gt;BOUNTYSOURCE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/27Xxm2h&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://teespring.com/stores/retroarch&#34;&gt;Teespring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.libretro.com/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.libretro.com/&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tsl0922/ttyd</title>
    <updated>2023-03-19T01:52:10Z</updated>
    <id>tag:github.com,2023-03-19:/tsl0922/ttyd</id>
    <link href="https://github.com/tsl0922/ttyd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Share your terminal over the web&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/tsl0922/ttyd/workflows/backend/badge.svg?sanitize=true&#34; alt=&#34;backend&#34;&gt; &lt;img src=&#34;https://github.com/tsl0922/ttyd/workflows/frontend/badge.svg?sanitize=true&#34; alt=&#34;frontend&#34;&gt; &lt;a href=&#34;https://github.com/tsl0922/ttyd/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/tsl0922/ttyd/total&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/ttyd/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/ttyd.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/tsl0922/ttyd&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ttyd - Share your terminal over the web&lt;/h1&gt; &#xA;&lt;p&gt;ttyd is a simple command-line tool for sharing terminal over the web.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tsl0922/ttyd/raw/main/screenshot.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built on top of &lt;a href=&#34;https://libuv.org&#34;&gt;libuv&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&#34;&gt;WebGL2&lt;/a&gt; for speed&lt;/li&gt; &#xA; &lt;li&gt;Fully-featured terminal with &lt;a href=&#34;https://en.wikipedia.org/wiki/CJK_characters&#34;&gt;CJK&lt;/a&gt; and IME support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ZMODEM&#34;&gt;ZMODEM&lt;/a&gt; (&lt;a href=&#34;https://ohse.de/uwe/software/lrzsz.html&#34;&gt;lrzsz&lt;/a&gt;) / &lt;a href=&#34;https://trzsz.github.io&#34;&gt;trzsz&lt;/a&gt; file transfer support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sixel&#34;&gt;Sixel&lt;/a&gt; image output support (&lt;a href=&#34;https://saitoha.github.io/libsixel&#34;&gt;img2sixel&lt;/a&gt; / &lt;a href=&#34;https://github.com/hackerb9/lsix&#34;&gt;lsix&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SSL support based on &lt;a href=&#34;https://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt; / &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls&#34;&gt;Mbed TLS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run any custom command with options&lt;/li&gt; &#xA; &lt;li&gt;Basic authentication support and many other custom options&lt;/li&gt; &#xA; &lt;li&gt;Cross platform: macOS, Linux, FreeBSD/OpenBSD, &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWrt&lt;/a&gt;, Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❤ Special thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=ttyd&#34;&gt;JetBrains&lt;/a&gt; for sponsoring the opensource license to this project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Install on macOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;http://brew.sh&#34;&gt;homebrew&lt;/a&gt;: &lt;code&gt;brew install ttyd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;: &lt;code&gt;sudo port install ttyd&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install on Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary version (recommended): download from the &lt;a href=&#34;https://github.com/tsl0922/ttyd/releases&#34;&gt;releases&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;Install the snap: &lt;code&gt;sudo snap install ttyd --classic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build from source (debian/ubuntu): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential cmake git libjson-c-dev libwebsockets-dev&#xA;git clone https://github.com/tsl0922/ttyd.git&#xA;cd ttyd &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake ..&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; You may also need to compile/install &lt;a href=&#34;https://libwebsockets.org&#34;&gt;libwebsockets&lt;/a&gt; from source if the &lt;code&gt;libwebsockets-dev&lt;/code&gt; package is outdated.&lt;/li&gt; &#xA; &lt;li&gt;Install on OpenWrt: &lt;code&gt;opkg install ttyd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install on Gentoo: clone the &lt;a href=&#34;https://bitbucket.org/mgpagano/ttyd/src/master&#34;&gt;repo&lt;/a&gt; and follow the directions &lt;a href=&#34;https://wiki.gentoo.org/wiki/Custom_repository#Creating_a_local_repository&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install on Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary version (recommended): download from the &lt;a href=&#34;https://github.com/tsl0922/ttyd/releases&#34;&gt;releases&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;https://scoop.sh/#/apps?q=ttyd&amp;amp;s=2&amp;amp;d=1&amp;amp;o=true&#34;&gt;Scoop&lt;/a&gt;: &lt;code&gt;scoop install ttyd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tsl0922/ttyd/wiki/Compile-on-Windows&#34;&gt;Compile on Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Command-line Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;USAGE:&#xA;    ttyd [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;]&#xA;&#xA;OPTIONS:&#xA;    -p, --port              Port to listen (default: 7681, use `0` for random port)&#xA;    -i, --interface         Network interface to bind (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock)&#xA;    -c, --credential        Credential for Basic Authentication (format: username:password)&#xA;    -u, --uid               User id to run with&#xA;    -g, --gid               Group id to run with&#xA;    -s, --signal            Signal to send to the command when exit it (default: 1, SIGHUP)&#xA;    -a, --url-arg           Allow client to send command line arguments in URL (eg: http://localhost:7681?arg=foo&amp;amp;arg=bar)&#xA;    -R, --readonly          Do not allow clients to write to the TTY&#xA;    -t, --client-option     Send option to client (format: key=value), repeat to add more options&#xA;    -T, --terminal-type     Terminal type to report, default: xterm-256color&#xA;    -O, --check-origin      Do not allow websocket connection from different origin&#xA;    -m, --max-clients       Maximum clients to support (default: 0, no limit)&#xA;    -o, --once              Accept only one client and exit on disconnection&#xA;    -B, --browser           Open terminal with the default system browser&#xA;    -I, --index             Custom index.html path&#xA;    -b, --base-path         Expected base path for requests coming from a reverse proxy (eg: /mounted/here, max length: 128)&#xA;    -P, --ping-interval     Websocket ping interval(sec) (default: 300)&#xA;    -6, --ipv6              Enable IPv6 support&#xA;    -S, --ssl               Enable SSL&#xA;    -C, --ssl-cert          SSL certificate file path&#xA;    -K, --ssl-key           SSL key file path&#xA;    -A, --ssl-ca            SSL CA file path for client certificate verification&#xA;    -d, --debug             Set log level (default: 7)&#xA;    -v, --version           Print the version and exit&#xA;    -h, --help              Print this text and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the example usage on the &lt;a href=&#34;https://github.com/tsl0922/ttyd/wiki/Example-Usage&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;p&gt;Modern browsers, See &lt;a href=&#34;https://github.com/xtermjs/xterm.js#browser-support&#34;&gt;Browser Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krishnasrinivas/wetty&#34;&gt;Wetty&lt;/a&gt;: &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; based web terminal (SSH/login)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yudai/gotty&#34;&gt;GoTTY&lt;/a&gt;: &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; based web terminal&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>