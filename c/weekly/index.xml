<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-11T01:36:15Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>c3lang/c3c</title>
    <updated>2024-08-11T01:36:15Z</updated>
    <id>tag:github.com,2024-08-11:/c3lang/c3c</id>
    <link href="https://github.com/c3lang/c3c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for the C3 language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C3 Language&lt;/h1&gt; &#xA;&lt;p&gt;C3 is a programming language that builds on the syntax and semantics of the C language, with the goal of evolving it while still retaining familiarity for C programmers.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s an evolution, not a revolution: the C-like for programmers who like C.&lt;/p&gt; &#xA;&lt;p&gt;Precompiled binaries for the following operating systems are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows x64 &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/c3lang/c3c/master/#installing-on-windows-with-precompiled-binaries&#34;&gt;install instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Debian x64 &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/c3lang/c3c/master/#installing-on-debian-with-precompiled-binaries&#34;&gt;install instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;MacOS x64 &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/c3lang/c3c/master/#installing-on-mac-with-precompiled-binaries&#34;&gt;install instructions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The manual for C3 can be found at &lt;a href=&#34;http://www.c3-lang.org&#34;&gt;www.c3-lang.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/c3lang/c3c/raw/master/resources/images/vkQuake.png?raw=true&#34; alt=&#34;vkQuake&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to full ABI compatibility with C, it&#39;s possible to mix C and C3 in the same project with no effort. As a demonstration, vkQuake was compiled with a small portion of the code converted to C3 and compiled with the c3c compiler. (The fork can be found at &lt;a href=&#34;https://github.com/c3lang/vkQuake&#34;&gt;https://github.com/c3lang/vkQuake&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Design Principles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Procedural &#34;get things done&#34;-type of language.&lt;/li&gt; &#xA; &lt;li&gt;Try to stay close to C - only change what&#39;s really necessary.&lt;/li&gt; &#xA; &lt;li&gt;C ABI compatibility and excellent C integration.&lt;/li&gt; &#xA; &lt;li&gt;Learning C3 should be easy for a C programmer.&lt;/li&gt; &#xA; &lt;li&gt;Data is inert.&lt;/li&gt; &#xA; &lt;li&gt;Avoid &#34;big ideas&#34; &amp;amp; the &#34;more is better&#34; fallacy.&lt;/li&gt; &#xA; &lt;li&gt;Introduce some higher level conveniences where the value is great.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;C3 owes its inspiration to the &lt;a href=&#34;http://c2lang.org&#34;&gt;C2 language&lt;/a&gt;: to iterate on top of C without trying to be a whole new language.&lt;/p&gt; &#xA;&lt;h3&gt;Example code&lt;/h3&gt; &#xA;&lt;p&gt;The following code shows &lt;a href=&#34;https://c3-lang.org/references/docs/generics/&#34;&gt;generic modules&lt;/a&gt; (more examples can be found at &lt;a href=&#34;https://c3-lang.org/references/docs/examples/&#34;&gt;https://c3-lang.org/references/docs/examples/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;module stack (&amp;lt;Type&amp;gt;);&#xA;// Above: the parameterized type is applied to the entire module.&#xA;&#xA;struct Stack&#xA;{&#xA;    usz capacity;&#xA;    usz size;&#xA;    Type* elems;&#xA;}&#xA;&#xA;// The type methods offers dot syntax calls,&#xA;// so this function can either be called &#xA;// Stack.push(&amp;amp;my_stack, ...) or&#xA;// my_stack.push(...)&#xA;fn void Stack.push(Stack* this, Type element)&#xA;{&#xA;    if (this.capacity == this.size)&#xA;    {&#xA;        this.capacity *= 2;&#xA;&#x9;&#x9;if (this.capacity &amp;lt; 16) this.capacity = 16;&#xA;        this.elems = realloc(this.elems, Type.sizeof * this.capacity);&#xA;    }&#xA;    this.elems[this.size++] = element;&#xA;}&#xA;&#xA;fn Type Stack.pop(Stack* this)&#xA;{&#xA;    assert(this.size &amp;gt; 0);&#xA;    return this.elems[--this.size];&#xA;}&#xA;&#xA;fn bool Stack.empty(Stack* this)&#xA;{&#xA;    return !this.size;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;import stack;&#xA;&#xA;// Define our new types, the first will implicitly create &#xA;// a complete copy of the entire Stack module with &#34;Type&#34; set to &#34;int&#34;&#xA;def IntStack = Stack(&amp;lt;int&amp;gt;);&#xA;// The second creates another copy with &#34;Type&#34; set to &#34;double&#34;&#xA;def DoubleStack = Stack(&amp;lt;double&amp;gt;);&#xA;&#xA;// If we had added &#34;define IntStack2 = Stack(&amp;lt;int&amp;gt;)&#34;&#xA;// no additional copy would have been made (since we already&#xA;// have an parameterization of Stack(&amp;lt;int&amp;gt;)) so it would&#xA;// be same as declaring IntStack2 an alias of IntStack&#xA;&#xA;// Importing an external C function is straightforward&#xA;// here is an example of importing libc&#39;s printf:&#xA;extern fn int printf(char* format, ...);&#xA;&#xA;fn void main()&#xA;{&#xA;    IntStack stack;&#xA;    // Note that C3 uses zero initialization by default&#xA;    // so the above is equivalent to IntStack stack = {};&#xA;    &#xA;    stack.push(1);&#xA;    // The above can also be written IntStack.push(&amp;amp;stack, 1); &#xA;    &#xA;    stack.push(2);&#xA;    &#xA;    // Prints pop: 2&#xA;    printf(&#34;pop: %d\n&#34;, stack.pop());&#xA;    // Prints pop: 1&#xA;    printf(&#34;pop: %d\n&#34;, stack.pop());&#xA;    &#xA;    DoubleStack dstack;&#xA;    dstack.push(2.3);&#xA;    dstack.push(3.141);&#xA;    dstack.push(1.1235);&#xA;    // Prints pop: 1.123500&#xA;    printf(&#34;pop: %f\n&#34;, dstack.pop());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In what ways does C3 differ from C?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No mandatory header files&lt;/li&gt; &#xA; &lt;li&gt;New semantic macro system&lt;/li&gt; &#xA; &lt;li&gt;Module based name spacing&lt;/li&gt; &#xA; &lt;li&gt;Slices&lt;/li&gt; &#xA; &lt;li&gt;Compile time reflection&lt;/li&gt; &#xA; &lt;li&gt;Enhanced compile time execution&lt;/li&gt; &#xA; &lt;li&gt;Generics based on generic modules&lt;/li&gt; &#xA; &lt;li&gt;&#34;Result&#34;-based zero overhead error handling&lt;/li&gt; &#xA; &lt;li&gt;Defer&lt;/li&gt; &#xA; &lt;li&gt;Value methods&lt;/li&gt; &#xA; &lt;li&gt;Associated enum data&lt;/li&gt; &#xA; &lt;li&gt;No preprocessor&lt;/li&gt; &#xA; &lt;li&gt;Less undefined behaviour and added runtime checks in &#34;safe&#34; mode&lt;/li&gt; &#xA; &lt;li&gt;Limited operator overloading to enable userland dynamic arrays&lt;/li&gt; &#xA; &lt;li&gt;Optional pre and post conditions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current status&lt;/h3&gt; &#xA;&lt;p&gt;The current stable version of the compiler is &lt;strong&gt;version 0.5&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The upcoming 0.6 release will focus on expanding the standard library. Follow the issues &lt;a href=&#34;https://github.com/c3lang/c3c/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have suggestions on how to improve the language, either &lt;a href=&#34;https://github.com/c3lang/c3c/issues&#34;&gt;file an issue&lt;/a&gt; or discuss C3 on its dedicated Discord: &lt;a href=&#34;https://discord.gg/qN76R87&#34;&gt;https://discord.gg/qN76R87&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The compiler is currently verified to compile on Linux, Windows and MacOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Support matrix&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Native C3 compiler available?&lt;/th&gt; &#xA;   &lt;th&gt;Target supported&lt;/th&gt; &#xA;   &lt;th&gt;Stack trace&lt;/th&gt; &#xA;   &lt;th&gt;Threads&lt;/th&gt; &#xA;   &lt;th&gt;Sockets&lt;/th&gt; &#xA;   &lt;th&gt;Inline asm&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Win32 x64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes + cross compilation&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Win32 Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS x64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes + cross compilation&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes + cross compilation&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux x86&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux x64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Riscv32&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Riscv64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding x86&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding x64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding Riscv64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding Riscv32&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD x86&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NetBSD x86&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NetBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD x86&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCU x86&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wasm32&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wasm64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;* Inline asm is still a work in progress&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;More platforms will be supported in the future.&lt;/p&gt; &#xA;&lt;h4&gt;What can you help with?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you wish to contribute with ideas, please file issues or discuss on Discord.&lt;/li&gt; &#xA; &lt;li&gt;Interested in contributing to the stdlib? Please get in touch on Discord.&lt;/li&gt; &#xA; &lt;li&gt;Compilation instructions for other Linux and Unix variants are appreciated.&lt;/li&gt; &#xA; &lt;li&gt;Would you like to contribute bindings to some library? It would be nice to have support for SDL, Raylib and more.&lt;/li&gt; &#xA; &lt;li&gt;Build something with C3 and show it off and give feedback. The language is still open for significant tweaks.&lt;/li&gt; &#xA; &lt;li&gt;Start work on the C -&amp;gt; C3 converter which takes C code and does a &#34;best effort&#34; to translate it to C3. The first version only needs to work on C headers.&lt;/li&gt; &#xA; &lt;li&gt;Do you have some specific area you have deep knowledge of and could help make C3 even better at doing? File or comment on issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;h4&gt;Installing on Windows with precompiled binaries&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the zip file: &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip&#34;&gt;https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip&lt;/a&gt; (debug version &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-windows-debug.zip&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unzip exe and standard lib.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t have Visual Studio 17 installed you can either do so, or run the &lt;code&gt;msvc_build_libraries.py&lt;/code&gt; Python script which will download the necessary files to compile on Windows.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;c3c.exe&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Installing on Debian with precompiled binaries&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download tar file: &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz&#34;&gt;https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz&lt;/a&gt; (debug version &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-linux-debug.tar.gz&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unpack executable and standard lib.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./c3c&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Installing on Mac with precompiled binaries&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have XCode with command line tools installed.&lt;/li&gt; &#xA; &lt;li&gt;Download the zip file: &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip&#34;&gt;https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip&lt;/a&gt; (debug version &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-macos-debug.zip&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unzip executable and standard lib.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./c3c&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(*Note that there is a known issue with debug symbol generation on MacOS 13, see &lt;a href=&#34;https://github.com/c3lang/c3c/issues/1086&#34;&gt;issue #1086&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Installing on Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;There is an AUR package for the c3c compiler : &lt;a href=&#34;https://aur.archlinux.org/packages/c3c-git&#34;&gt;c3c-git&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Due to some issues with the LLVM packaged for Arch Linux, the AUR package will download and use LLVM 16 for Ubuntu-23.04 to compile the c3c compiler.&lt;/p&gt; &#xA;&lt;p&gt;You can use your AUR package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S c3c-git&#xA;# or yay -S c3c-git&#xA;# or aura -A c3c-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or clone it manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://aur.archlinux.org/c3c-git.git&#xA;cd c3c-git&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building via Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can build &lt;code&gt;c3c&lt;/code&gt; using either an Ubuntu 18.04 or 20.04 container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build-with-docker.sh 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;18&lt;/code&gt; with &lt;code&gt;20&lt;/code&gt; to build through Ubuntu 20.04.&lt;/p&gt; &#xA;&lt;p&gt;For a release build specify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build-with-docker.sh 20 Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;c3c&lt;/code&gt; executable will be found under &lt;code&gt;bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Installing on OS X using Homebrew&lt;/h4&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install CMake: &lt;code&gt;brew install cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install LLVM 17+: &lt;code&gt;brew install llvm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the build directory &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up CMake build for debug: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Getting started with a &#34;hello world&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;main.c3&lt;/code&gt; file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;module hello_world;&#xA;import std::io;&#xA;&#xA;fn void main()&#xA;{&#xA;   io::printn(&#34;Hello, world!&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have the standard libraries at either &lt;code&gt;../lib/std/&lt;/code&gt; or &lt;code&gt;/lib/std/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;c3c compile main.c3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated binary will by default be named after the module that contains the main function. In our case that is &lt;code&gt;hello_world&lt;/code&gt;, so the resulting binary will be called &lt;code&gt;hello_world&lt;/code&gt; or &lt;code&gt;hello_world.exe&lt;/code&gt;depending on platform.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;h4&gt;Compiling on Windows&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have Visual Studio 17 2022 installed or alternatively install the &#34;Buildtools for Visual Studio&#34; (&lt;a href=&#34;https://aka.ms/vs/17/release/vs_BuildTools.exe&#34;&gt;https://aka.ms/vs/17/release/vs_BuildTools.exe&lt;/a&gt;) and then select &#34;Desktop development with C++&#34; (there is also &lt;code&gt;c3c/resources/install_win_reqs.bat&lt;/code&gt; to automate this)&lt;/li&gt; &#xA; &lt;li&gt;Install CMake&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set up the CMake build &lt;code&gt;cmake -B build -G &#34;Visual Studio 17 2022&#34; -A x64 -DCMAKE_BUILD_TYPE=Release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build build --config Release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should now have the c3c.exe&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should now have a &lt;code&gt;c3c&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;You can try it out by running some sample code: &lt;code&gt;c3c.exe compile ../resources/examples/hash.c3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that if you run into linking issues when building, make sure that you are using the latest version of VS17.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compiling on Ubuntu 20.10&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have a C compiler that handles C11 and a C++ compiler, such as GCC or Clang. Git also needs to be installed.&lt;/li&gt; &#xA; &lt;li&gt;Install CMake: &lt;code&gt;sudo apt install cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install LLVM 17+ (or greater: C3C supports LLVM 17+): &lt;code&gt;sudo apt-get install clang-17 zlib1g zlib1g-dev libllvm17 llvm-17 llvm-17-dev llvm-17-runtime liblld-17-dev liblld-17&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the build directory &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up CMake build: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should now have a &lt;code&gt;c3c&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;You can try it out by running some sample code: &lt;code&gt;./c3c compile ../resources/examples/hash.c3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compiling on Void Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;As root, ensure that all project dependencies are installed: &lt;code&gt;xbps-install git cmake llvm17 lld-devel libcurl-devel ncurses-devel zlib-devel libzstd-devel libxml2-devel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you only need the latest commit, you may want to make a shallow clone instead: &lt;code&gt;git clone https://github.com/c3lang/c3c.git --depth=1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enter the directory: &lt;code&gt;cd c3c&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory: &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the build directory: &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create the CMake build cache: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Your c3c executable should have compiled properly. You may want to test it: &lt;code&gt;./c3c compile ../resources/examples/hash.c3&lt;/code&gt;&lt;br&gt; For a sytem-wide installation, run the following as root: &lt;code&gt;cmake --install .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compiling on other Linux / Unix variants&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install CMake.&lt;/li&gt; &#xA; &lt;li&gt;Install or compile LLVM and LLD &lt;em&gt;libraries&lt;/em&gt; (version 17+ or higher)&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the build directory &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up CMake build for debug: &lt;code&gt;cmake ..&lt;/code&gt;. At this point you may need to manually provide the link path to the LLVM CMake directories, e.g. &lt;code&gt;cmake -DLLVM_DIR=/usr/local/opt/llvm/lib/cmake/llvm/ ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;A note on compiling for Linux/Unix/MacOS: to be able to fetch vendor libraries libcurl is needed. The CMake script should detect it if it is available. Note that this functionality is non-essential and it is perfectly fine to user the compiler without it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Licensing&lt;/h4&gt; &#xA;&lt;p&gt;The C3 compiler is licensed under LGPL 3.0, the standard library itself is MIT licensed.&lt;/p&gt; &#xA;&lt;h4&gt;Editor plugins&lt;/h4&gt; &#xA;&lt;p&gt;Editor plugins can be found at &lt;a href=&#34;https://github.com/c3lang/editor-plugins&#34;&gt;https://github.com/c3lang/editor-plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Contributing unit tests&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write the test, either adding to existing test files in &lt;code&gt;/test/unit/&lt;/code&gt; or add a new file. (If testing the standard library, put it in the &lt;code&gt;/test/unit/stdlib/&lt;/code&gt; subdirectory).&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the test functions have the &lt;code&gt;@test&lt;/code&gt; attribute.&lt;/li&gt; &#xA; &lt;li&gt;Run tests and see that they pass. (Recommended settings: &lt;code&gt;c3c compile-test -O0 test/unit&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;in this example &lt;code&gt;test/unit/&lt;/code&gt; is the relative path to the test directory, so adjust as required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make a pull request for the new tests.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>FreeRTOS/FreeRTOS</title>
    <updated>2024-08-11T01:36:15Z</updated>
    <id>tag:github.com,2024-08-11:/FreeRTOS/FreeRTOS</id>
    <link href="https://github.com/FreeRTOS/FreeRTOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#39;Classic&#39; FreeRTOS distribution. Started as Git clone of FreeRTOS SourceForge SVN repo. Submodules the kernel.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS/tree/202212.00&#34;&gt;FreeRTOS 202212.00&lt;/a&gt; release updates FreeRTOS Kernel, FreeRTOS+TCP, coreMQTT, corePKCS11, coreHTTP, coreJSON, AWS IoT Over-the-air-Updates (OTA), AWS IoT Device Shadow, AWS IoT Jobs, AWS IoT Device Defender, Backoff Algorithm, AWS IoT Fleet Provisioning, coreSNTP, SigV4, and FreeRTOS Cellular Interface libraries to their &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-LTS/raw/202210-LTS/CHANGELOG.md&#34;&gt;LTS 2.0&lt;/a&gt; versions. It also updates coreMQTT Agent to v1.2.0 to be compatible with coreMQTT v2.X.X, and updates MbedTLS to v3.2.1. This release also adds Visual Studio static library projects for the FreeRTOS Kernel, FreeRTOS+TCP, Logging, MbedTLS, coreHTTP, and corePKCS11. With the addition of the static library projects, all Visual Studio projects have been updated to use them. Additionally, all demos dependent on coreMQTT have been updated to work with coreMQTT v2.X.X.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.freertos.org&#34;&gt;FreeRTOS.org&lt;/a&gt; website contains a &lt;a href=&#34;https://www.freertos.org/Documentation/01-FreeRTOS-quick-start/01-Beginners-guide/02-Quick-start-guide&#34;&gt;FreeRTOS Kernel Quick Start Guide&lt;/a&gt;, a &lt;a href=&#34;https://www.freertos.org/RTOS_ports.html&#34;&gt;list of supported devices and compilers&lt;/a&gt;, the &lt;a href=&#34;https://www.freertos.org/Documentation/02-Kernel/04-API-references/01-Task-creation/00-TaskHandle&#34;&gt;API reference&lt;/a&gt;, and many other resources.&lt;/p&gt; &#xA;&lt;h3&gt;Getting help&lt;/h3&gt; &#xA;&lt;p&gt;You can use your Github login to get support from both the FreeRTOS community and directly from the primary FreeRTOS developers on our &lt;a href=&#34;https://forums.freertos.org&#34;&gt;active support forum&lt;/a&gt;. The &lt;a href=&#34;https://www.freertos.org/Why-FreeRTOS/FAQs&#34;&gt;FAQ&lt;/a&gt; provides another support resource.&lt;/p&gt; &#xA;&lt;h2&gt;Cloning this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;Git Submodules&lt;/a&gt; to bring in dependent components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you download the ZIP file provided by the GitHub UI, you will not get the contents of the submodules. (The ZIP file is also not a valid git repository)&lt;/p&gt; &#xA;&lt;p&gt;If using Windows, because this repository and its submodules contain symbolic links, set &lt;code&gt;core.symlinks&lt;/code&gt; to true with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global core.symlinks true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to this, either enable &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34;&gt;Developer Mode&lt;/a&gt; or, whenever using a git command that writes to the system (e.g. &lt;code&gt;git pull&lt;/code&gt;, &lt;code&gt;git clone&lt;/code&gt;, and &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;), use a console elevated as administrator so that git can properly create symbolic links for this repository. Otherwise, symbolic links will be written as normal files with the symbolic links&#39; paths in them as text. &lt;a href=&#34;https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/&#34;&gt;This&lt;/a&gt; gives more explanation.&lt;/p&gt; &#xA;&lt;p&gt;To clone using HTTPS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/FreeRTOS/FreeRTOS.git --recurse-submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using SSH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:FreeRTOS/FreeRTOS.git --recurse-submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have downloaded the repo without using the &lt;code&gt;--recurse-submodules&lt;/code&gt; argument, you need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Repository structure&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the FreeRTOS Kernel, a number of supplementary libraries including the LTS ones, and a comprehensive set of example projects. Many libraries (including the FreeRTOS kernel) are included as Git submodules from their own Git repositories.&lt;/p&gt; &#xA;&lt;h3&gt;Kernel source code and example projects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS/Source&lt;/code&gt; contains the FreeRTOS kernel source code (submoduled from &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-Kernel&#34;&gt;https://github.com/FreeRTOS/FreeRTOS-Kernel&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS/Demo&lt;/code&gt; contains pre-configured example projects that demonstrate the FreeRTOS kernel executing on different hardware platforms and using different compilers.&lt;/p&gt; &#xA;&lt;h3&gt;Supplementary library source code and example projects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS-Plus/Source&lt;/code&gt; contains source code for additional FreeRTOS component libraries, as well as select partner provided libraries. These subdirectories contain further readme files and links to documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FreeRTOS-Plus/Demo&lt;/code&gt; contains pre-configured example projects that demonstrate the FreeRTOS kernel used with the additional FreeRTOS component libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Previous releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS/releases&#34;&gt;Releases&lt;/a&gt; contains older FreeRTOS releases.&lt;/p&gt; &#xA;&lt;h2&gt;FreeRTOS Lab Projects&lt;/h2&gt; &#xA;&lt;p&gt;FreeRTOS Lab projects are libraries and demos that are fully functional, but may be experimental or undergoing optimizations and refactorization to improve memory usage, modularity, documentation, demo usability, or test coverage.&lt;/p&gt; &#xA;&lt;p&gt;Most FreeRTOS Lab libraries can be found in the &lt;a href=&#34;https://github.com/FreeRTOS/FreeRTOS-Labs&#34;&gt;FreeRTOS-Labs repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A number of FreeRTOS Lab Demos can be found in the &lt;a href=&#34;https://github.com/FreeRTOS&#34;&gt;FreeRTOS Github Organization&lt;/a&gt; by searching for &#34;Lab&#34; or following &lt;a href=&#34;https://github.com/FreeRTOS?q=Lab&amp;amp;type=&amp;amp;language=&#34;&gt;this link&lt;/a&gt; to the search results.&lt;/p&gt; &#xA;&lt;h2&gt;coreMQTT Agent Demos&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/FreeRTOS/coreMQTT-Agent-Demos&#34;&gt;FreeRTOS/coreMQTT-Agent-Demos&lt;/a&gt; repository contains demos to showcase use of the &lt;a href=&#34;https://github.com/FreeRTOS/coreMQTT-Agent&#34;&gt;coreMQTT-Agent&lt;/a&gt; library to share an MQTT connection between multiple application tasks.&lt;/p&gt; &#xA;&lt;p&gt;The demos show a single MQTT connection usage between multiple application tasks for interacting with AWS services (including &lt;a href=&#34;https://docs.aws.amazon.com/freertos/latest/userguide/freertos-ota-dev.html&#34;&gt;Over-the-air-Updates&lt;/a&gt;, &lt;a href=&#34;https://docs.aws.amazon.com/iot/latest/developerguide/iot-device-shadows.html&#34;&gt;Device Shadow&lt;/a&gt;, &lt;a href=&#34;https://docs.aws.amazon.com/iot/latest/developerguide/device-defender.html&#34;&gt;Device Defender&lt;/a&gt;) alongside performing simple Publish-Subscribe operations.&lt;/p&gt; &#xA;&lt;h2&gt;CBMC&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;FreeRTOS/Test/CBMC/proofs&lt;/code&gt; directory contains CBMC proofs.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about CBMC and proofs specifically, review the training material &lt;a href=&#34;https://model-checking.github.io/cbmc-training&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to run these proofs you will need to install CBMC and other tools by following the instructions &lt;a href=&#34;https://model-checking.github.io/cbmc-training/installation.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hufrea/byedpi</title>
    <updated>2024-08-11T01:36:15Z</updated>
    <id>tag:github.com,2024-08-11:/hufrea/byedpi</id>
    <link href="https://github.com/hufrea/byedpi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bypass DPI&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Implementation of some DPI bypass methods. The program is a local SOCKS proxy server.&lt;/p&gt; &#xA;&lt;p&gt;Usage example: ciadpi --disorder 1 --auto=torst --tlsrec 1+s ciadpi --fake -1 --ttl 8&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Описание аргументов&lt;/h3&gt; &#xA;&lt;p&gt;-i, --ip &#xA; &lt;ip&gt;&#xA;   Прослушиваемый IP, по умолчанию 0.0.0.0&#xA; &lt;/ip&gt;&lt;/p&gt; &#xA;&lt;p&gt;-p, --port &#xA; &lt;num&gt;&#xA;   Прослушиваемый порт, по умолчанию 1080&#xA; &lt;/num&gt;&lt;/p&gt; &#xA;&lt;p&gt;-c, --max-conn &#xA; &lt;count&gt;&#xA;   Максимальное количество клиентских подключений, по умолчанию 512&#xA; &lt;/count&gt;&lt;/p&gt; &#xA;&lt;p&gt;-I --conn-ip &#xA; &lt;ip&gt;&#xA;   Адрес, к которому будут привязаны исходящие соединения, по умолчанию :: При указании IPv4 адреса запросы на IPv6 будут отклоняться&#xA; &lt;/ip&gt;&lt;/p&gt; &#xA;&lt;p&gt;-b, --buf-size &#xA; &lt;size&gt;&#xA;   Максимальный размер данных, получаемых и отправляемых за один вызов recv/send Размер указывается в байтах, по умолчанию равен 16384&#xA; &lt;/size&gt;&lt;/p&gt; &#xA;&lt;p&gt;-g, --def-ttl &#xA; &lt;num&gt;&#xA;   Значение TTL для всех исходящий соединений Может быть полезен для обхода обнаружения нестандартного/уменьшенного TTL&#xA; &lt;/num&gt;&lt;/p&gt; &#xA;&lt;p&gt;-N, --no-domain Отбрасывать запросы, если в качестве адреса указан домен Т.к. резолвинг выполняется синхронно, то он может замедлить или даже заморозить работу&lt;/p&gt; &#xA;&lt;p&gt;-U, --no-udp Не проксировать UDP&lt;/p&gt; &#xA;&lt;p&gt;-F, --tfo Включает TCP Fast Open Если сервер его поддерживает, то первый пакет будет отправлен сразу вместе с SYN Поддерживается только в Linux (4.11+)&lt;/p&gt; &#xA;&lt;p&gt;-A, --auto[=t,r,c,s,a,n] Автоматический режим Если произошло событие, похожее на блокировку или поломку, то будут применены параметры обхода, следующие за данной опцией Возможные события: torst : Вышло время ожидания или сервер сбросил подключение после первого запроса redirect: HTTP Redirect с Location, домен которого не совпадает с исходящим cl_err : HTTP ответ, код которого равен 40x, но не 429 sid_inv : session_id в TLS ServerHello и ClientHello не совпадают alert : TLS Error Alert в ответе none : Предыдущая группа пропущена, например из-за ограничения по доменам или протоколам&lt;/p&gt; &#xA;&lt;p&gt;-u, --cache-ttl &#xA; &lt;sec&gt;&#xA;   Время жизни значения в кеше, по умолчанию 100800 (28 часов)&#xA; &lt;/sec&gt;&lt;/p&gt; &#xA;&lt;p&gt;-T, --timeout &#xA; &lt;sec&gt;&#xA;   Таймаут ожидания первого ответа от сервера в секундах В Linux переводится в миллисекунды, поэтому можно указать дробное число&#xA; &lt;/sec&gt;&lt;/p&gt; &#xA;&lt;p&gt;-K, --proto &amp;lt;t,h,u&amp;gt; Белый список протоколов: tls,http,udp&lt;/p&gt; &#xA;&lt;p&gt;-H, --hosts &amp;lt;file|:string&amp;gt; Ограничить область действия параметров списком доменов Домены должны быть разделены новой строкой или пробелом&lt;/p&gt; &#xA;&lt;p&gt;-V, --pf &amp;lt;port[-portr]&amp;gt; Ограничитель по портам&lt;/p&gt; &#xA;&lt;p&gt;-s, --split &amp;lt;n[+s]&amp;gt; Разбить запрос по указанному смещению После числа можно добавить флаг: +s: добавить смещение SNI +h: добавить смещение Host Можно указывать несколько раз, чтобы разбить запрос по нескольким позициям При указании отрицательного значения к нему прибавляется размер пакета&lt;/p&gt; &#xA;&lt;p&gt;-d, --disorder &amp;lt;n[+s]&amp;gt; Подобен --split, но части отправляются в обратном порядке ! Поведение в Windows отлично: сначала отправляется лишь часть, но затем целый запрос&lt;/p&gt; &#xA;&lt;p&gt;-o, --oob &amp;lt;n[+s]&amp;gt; Подобен --split, но после части отсылается один или несколько байт OOB данных&lt;/p&gt; &#xA;&lt;p&gt;-f, --fake &amp;lt;n[+s]&amp;gt; Подобен --disorder, только перед отправкой первого куска отправляется часть поддельного Количество байт отправляемого из фейка равно рамеру разбиваемой части&lt;/p&gt; &#xA;&lt;p&gt;-t, --ttl &#xA; &lt;num&gt;&#xA;   TTL для поддельного пакета, по умолчанию 8 Необходимо подобрать такое значение, чтобы пакет не дошел до сервера, но был обработан DPI&#xA; &lt;/num&gt;&lt;/p&gt; &#xA;&lt;p&gt;-k, --ip-opt[=file|:str] Установить опции для фейкового IP пакета Существенно снизит вероятность, что пакет дойдет до сервера Стоит учесть, что до DPI он также может не дойти В Windows поддержка может быть отключена&lt;/p&gt; &#xA;&lt;p&gt;-S, --md5sig Установить опцию TCP MD5 Signature для фейкового пакета Большинство серверов (в основном на Linux) отбрасывают пакеты с данной опцией Поддерживается только в Linux, может быть выключен в некоторых сборках ядра (&amp;lt; 3.9, Android)&lt;/p&gt; &#xA;&lt;p&gt;-l, --fake-data &amp;lt;file|:str&amp;gt; Указать свои поддельные пакеты, вместо дефолтных&lt;/p&gt; &#xA;&lt;p&gt;-e, --oob-data &amp;lt;file|:str&amp;gt; Данные, отсылаемые вне основного потока, по умолчанию один байт &#39;a&#39; ! При размере более одного байта может работать нестабильно&lt;/p&gt; &#xA;&lt;p&gt;-n, --tls-sni &#xA; &lt;str&gt;&#xA;   Изменить SNI в fake пакете на указанный&#xA; &lt;/str&gt;&lt;/p&gt; &#xA;&lt;p&gt;-M, --mod-http &amp;lt;h[,d,r]&amp;gt; Всякие манипуляции с HTTP пакетом, можно комбинировать hcsmix: &#34;Host: name&#34; -&amp;gt; &#34;hOsT: name&#34; dcsmix: &#34;Host: name&#34; -&amp;gt; &#34;Host: NaMe&#34; rmspace: &#34;Host: name&#34; -&amp;gt; &#34;Host:name\t&#34;&lt;/p&gt; &#xA;&lt;p&gt;-r, --tlsrec &amp;lt;n[+s]&amp;gt; Разделить ClientHello на отдельные записи по указанному смещению Можно указывать несколько раз&lt;/p&gt; &#xA;&lt;p&gt;-a, --udp-fake &#xA; &lt;count&gt;&#xA;   Количество фейковых UDP пакетов&#xA; &lt;/count&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Подробнее&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--split&lt;br&gt; Разбивает запрос на части. Пример на запросе в 30 байт:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --split 3 --split 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 1-3, 3-7, 7-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--disorder&lt;br&gt; Часть, попадающая под disorder, будет отправлена с TTL=1, т.е. фактически не будет никуда доставлена. ОС узнает об этом лишь после отсылки последующей части, когда сервер сообщит о потере с помощью SACK. Системе придется отослать предыдущий пакет заново, тем самым нарушив обычный порядок.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --disorder 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 7-30, 1-7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Вышесказанное распространяется только на Linux. В Windows выполняется полная ретрансмиссия:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --disorder 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 7-30, 1-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Поэтому желательно использовать ещё и split:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --split 7 --disorder 23&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 1-7, 23-30, 7-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;На практике оптимально использовать:&lt;br&gt; Linux: --disorder 1&lt;br&gt; Windows: --split 1+s --disorder 3+s&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--fake&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --fake 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 1-7 фейк, 7-30 оригинал, 1-7 оригинал&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Данные в первой части запроса заменяются на поддельные.&lt;br&gt; Эта часть должна пройти через DPI, но не дойти до сервера. А раз часть не дойдет, то ОС отправит ее снова, тем самым изменив порядок подобно disorder. Для того, чтобы фейк не дошел до сервера, есть опции ttl, ip-opt и md5sig.&lt;/p&gt; &#xA;&lt;p&gt;TTL необходимо подбирать такой, чтобы пакет прошел через все DPI, но не дошел до сервера.&lt;br&gt; Для Linux есть md5sig. Он устанавливает опцию TCP MD5 Signature, что не дает пакету быть принятым многими серверами. К сожалению, md5sig работает не во всех сборках.&lt;/p&gt; &#xA;&lt;p&gt;Для Windows есть еще один способ избежать обработки фейка сервером. Это комбинирование fake с disorder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --disorder 1 --fake 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 2-7 фейк, 7-30 оригинал, 1-30 оригинал&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Если поддельный пакет и дойдет до сервера, то он будет перезаписан из-за полной ретрансмисси.&lt;/p&gt; &#xA;&lt;p&gt;На практике оптимально использовать:&lt;br&gt; Linux: --fake -1 --md5sig&lt;br&gt; Windows: --disorder 1 --fake -1&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--oob&lt;br&gt; TCP может отсылать данные вне основного потока, используя флаг URG, однако лишь 1 байт в пакете. Все данные в таком пакете будут доставлены приложению, кроме последнего байта, который и является внеканальным:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --oob 3&lt;/li&gt; &#xA; &lt;li&gt;Отправка: 1-4 с флагом URG (1-3 данные запроса + 4-й байт, который будет усечен), 3-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Этот байт желательно помещать в SNI: --oob 3+s&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--tlsrec&lt;br&gt; Одну TLS запись можно разбить на несколько, немного переделав заголовок. На месте разбиения вставляется новый заголовок, увеличивая размер запроса на 5 байт.&lt;br&gt; Этот заголовок можно поместить в середину SNI, не давая возможность DPI правильно его прочитать: --tlsrec 3+s&lt;/p&gt; &#xA;&lt;p&gt;Хоть tlsrec и oob запутывают DPI, они также могут запутать всякие мидлбоксы, которые не поддерживают полноценный стек TCP/TLS.&lt;br&gt; Из-за этого их следует использовать вместе с --auto:&lt;br&gt; --auto=torst --timeout 3 --tlsrec 3+s&lt;br&gt; В примере tlsrec будет применяться лишь в случаях, когда сброшено подключение или вышел таймаут, т.е. когда, скорее всего, произошла блокировка.&lt;br&gt; Можно наоборот - отменять tlsrec, если сервер сбрасывает подключение или откидывает пакет:&lt;br&gt; --tlsrec 3+s --auto=torst --timeout 3&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--auto, --hosts&lt;br&gt; Параметр auto делит опции на группы. Для каждого запроса они обходятся слева на право. Сначала проверяется триггер, указанный в auto, затем proto и hosts.&lt;br&gt; Можно указывать несколько групп опций, раделяя их данным параметром. Параметры, которые можно вынести в отдельную группу:&lt;br&gt; proto, hosts, pf, split, disorder, oob, fake, ttl, ip-opt, md5sig, fake-data, mod-http, tlsrec, udp-fake&lt;/p&gt; &#xA;&lt;p&gt;Примеры:&lt;br&gt; --fake -1 --ttl 10 --auto=alert,sid_inv --fake -1 --ttl 5&lt;br&gt; По умолчанию использовать fake с ttl=10, в случае ошибки использовать fake с ttl=5&lt;/p&gt; &#xA;&lt;p&gt;--hosts list.txt --disorder 3 --auto=none&lt;br&gt; Применять запутывание только для доменов из list.txt&lt;/p&gt; &#xA;&lt;p&gt;--hosts list.txt --auto=none --disorder 3&lt;br&gt; Не применять запутывание для доменов из list.txt&lt;/p&gt; &#xA;&lt;p&gt;--auto=torst --hosts list.txt --disorder 3&lt;br&gt; По умолчанию ничего не делать, использовать disorder при условии, что произошла блокировка и домен входит в list.txt.&lt;/p&gt; &#xA;&lt;p&gt;--proto=http,tls --disorder 3 --auto=none&lt;br&gt; Запутывать только HTTP и TLS&lt;/p&gt; &#xA;&lt;p&gt;--proto=http --fake -1 --fake-data=&#39;:GET /...&#39; --auto=none --fake -1&lt;br&gt; Переопределить фейковый пакет для HTTP&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Сборка&lt;/h3&gt; &#xA;&lt;p&gt;Для сборки понадобится: make, gcc/clang для Linux, mingw для Windows&lt;/p&gt; &#xA;&lt;p&gt;Linux: make&lt;br&gt; Windows: make windows CC=x86_64-w64-mingw32-gcc&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Дополнительная информация о DPI, источники идей&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bol-van/zapret/raw/master/docs/readme.txt&#34;&gt;https://github.com/bol-van/zapret/blob/master/docs/readme.txt&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&#34;&gt;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://habr.com/ru/post/335436&#34;&gt;https://habr.com/ru/post/335436&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>