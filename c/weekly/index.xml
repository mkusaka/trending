<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-22T01:49:44Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deepmind/mujoco</title>
    <updated>2023-01-22T01:49:44Z</updated>
    <id>tag:github.com,2023-01-22:/deepmind/mujoco</id>
    <link href="https://github.com/deepmind/mujoco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Joint dynamics with Contact. A general purpose physics simulator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco/main/#&#34;&gt;&lt;img alt=&#34;MuJoCo&#34; src=&#34;https://raw.githubusercontent.com/deepmind/mujoco/main/banner.png&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco/actions/workflows/build.yml?query=branch%3Amain&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/deepmind/mujoco/build.yml?branch=main&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://mujoco.readthedocs.io/&#34; alt=&#34;Documentation&#34;&gt; &lt;img src=&#34;https://readthedocs.org/projects/mujoco/badge/?version=latest&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco/raw/main/LICENSE&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/deepmind/mujoco&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MuJoCo&lt;/strong&gt; stands for &lt;strong&gt;Mu&lt;/strong&gt;lti-&lt;strong&gt;Jo&lt;/strong&gt;int dynamics with &lt;strong&gt;Co&lt;/strong&gt;ntact. It is a general purpose physics engine that aims to facilitate research and development in robotics, biomechanics, graphics and animation, machine learning, and other areas which demand fast and accurate simulation of articulated structures interacting with their environment.&lt;/p&gt; &#xA;&lt;p&gt;This repository is maintained by DeepMind, please see our &lt;a href=&#34;https://www.deepmind.com/blog/opening-up-a-physics-simulator-for-robotics&#34;&gt;acquisition&lt;/a&gt; and &lt;a href=&#34;https://www.deepmind.com/blog/open-sourcing-mujoco&#34;&gt;open sourcing&lt;/a&gt; announcements.&lt;/p&gt; &#xA;&lt;p&gt;MuJoCo has a C API and is intended for researchers and developers. The runtime simulation module is tuned to maximize performance and operates on low-level data structures that are preallocated by the built-in XML compiler. The library includes interactive visualization with a native GUI, rendered in OpenGL. MuJoCo further exposes a large number of utility functions for computing physics-related quantities.&lt;/p&gt; &#xA;&lt;p&gt;We also provide Python bindings and a plug-in for the &lt;a href=&#34;https://unity.com/&#34;&gt;Unity&lt;/a&gt; game engine.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prebuilt binaries&lt;/h3&gt; &#xA;&lt;p&gt;Versioned releases are available as precompiled binaries from the GitHub &lt;a href=&#34;https://github.com/deepmind/mujoco/releases&#34;&gt;releases page&lt;/a&gt;, built for Linux (x86-64 and AArch64), Windows (x86-64 only), and macOS (universal). This is the recommended way to use the software.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;Users who wish to build MuJoCo from source should consult the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming#building-mujoco-from-source&#34;&gt;build from source&lt;/a&gt; section of the documentation. However, please note that the commit at the tip of the &lt;code&gt;main&lt;/code&gt; branch may be unstable.&lt;/p&gt; &#xA;&lt;h3&gt;Python (&amp;gt;= 3.7)&lt;/h3&gt; &#xA;&lt;p&gt;The native Python bindings, which come pre-packaged with a copy of MuJoCo, can be installed from &lt;a href=&#34;https://pypi.org/project/mujoco/&#34;&gt;PyPI&lt;/a&gt; via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install mujoco&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Pre-built Linux wheels target &lt;code&gt;manylinux2014&lt;/code&gt;, see &lt;a href=&#34;https://github.com/pypa/manylinux&#34;&gt;here&lt;/a&gt; for compatible distributions. For more information such as building the bindings from source, see the &lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/python.html#python-bindings&#34;&gt;Python Bindings&lt;/a&gt; section of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo&#39;s documentation is available at &lt;a href=&#34;https://mujoco.readthedocs.io&#34;&gt;mujoco.readthedocs.io&lt;/a&gt;, which serves webpages derived from the &lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/doc&#34;&gt;documentation source files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There are two easy ways to get started with MuJoCo:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run &lt;code&gt;simulate&lt;/code&gt; on your machine.&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0ORsj_E17B0&#34;&gt;This video&lt;/a&gt; shows a screen capture of &lt;code&gt;simulate&lt;/code&gt;, MuJoCo&#39;s native interactive viewer. Follow the steps described in the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of the documentation to get &lt;code&gt;simulate&lt;/code&gt; running on your machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Explore our online IPython notebooks.&lt;/strong&gt; If you are a Python user, you might want to start with our tutorial notebooks running on Google Colab:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first tutorial focuses on the basics of MuJoCo: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/mujoco/blob/main/python/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a more advanced example, see the LQR tutorial which creates an LQR controlled to balance a humanoid on one leg using MuJoCo&#39;s dynamics derivatives: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/mujoco/blob/main/python/LQR.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Asking Questions&lt;/h2&gt; &#xA;&lt;p&gt;We welcome community engagement: questions, requests for help, bug reports and feature requests. To read more about bug reports, feature requests and more ambitious contributions, please see our &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/mujoco/main/CONTRIBUTING.md&#34;&gt;contributors guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Questions and requests for help are welcome on the GitHub &lt;a href=&#34;https://github.com/deepmind/mujoco/issues&#34;&gt;issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/deepmind/mujoco/discussions&#34;&gt;discussions&lt;/a&gt; pages. Issues should be focused on a specific problem or question, while discussions should address wider concerns that might require input from multiple participants.&lt;/p&gt; &#xA;&lt;p&gt;Here are some guidelines for asking good questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Search for existing questions or issues that touch on the same subject.&lt;/p&gt; &lt;p&gt;You can add comments to existing threads or start new ones. If you start a new thread and there are existing relevant threads, please link to them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a clear and specific title. Try to include keywords that will make your question easy for other to find in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduce yourself and your project more generally.&lt;/p&gt; &lt;p&gt;If your level of expertise is exceptional (either high or low), and it might be relevant to what we can assume you know, please state that as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Take a step back and tell us what you&#39;re trying to accomplish, if we understand you goal we might suggest a different type of solution than the one you are having problems with&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make it easy for others to reproduce the problem or understand your question.&lt;/p&gt; &lt;p&gt;If this requires a model, please include it. Try to make the model minimal: remove elements that are unrelated to your question. Pure XML models should be inlined. Models requiring binary assets (meshes, textures), should be attached as a &lt;code&gt;.zip&lt;/code&gt; file. Please make sure the included model is loadable before you attach it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include an illustrative screenshot or video, if relevant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell us how you are accessing MuJoCo (C API, Python bindings, etc.) and which MuJoCo version and operating system you are using.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Related software&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo forms the backbone of many environment packages, but these are too many to list here individually. Below we focus on bindings and converters.&lt;/p&gt; &#xA;&lt;h3&gt;Bindings&lt;/h3&gt; &#xA;&lt;p&gt;These packages give users of various languages access to MuJoCo functionality:&lt;/p&gt; &#xA;&lt;h4&gt;First-party bindings&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/python.html&#34;&gt;Python bindings&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/deepmind/dm_control&#34;&gt;dm_control&lt;/a&gt;, DeepMind&#39;s related environment stack, includes &lt;a href=&#34;https://github.com/deepmind/dm_control/raw/main/dm_control/mjcf/README.md&#34;&gt;PyMJCF&lt;/a&gt;, a module for procedural manipulation of MuJoCo models.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/unity.html&#34;&gt;C# bindings and Unity plug-in&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Third-party bindings&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift&lt;/strong&gt;: &lt;a href=&#34;https://github.com/liuliu/swift-mujoco&#34;&gt;swift-mujoco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;a href=&#34;https://github.com/CommonWealthRobotics/mujoco-java&#34;&gt;mujoco-java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julia&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Lyceum/MuJoCo.jl&#34;&gt;Lyceum&lt;/a&gt; (unmaintained)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Converters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenSim&lt;/strong&gt;: &lt;a href=&#34;https://github.com/aikkala/O2MConverter&#34;&gt;O2MConverter&lt;/a&gt; converts openSIM models to MJCF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SDFormat&lt;/strong&gt;: &lt;a href=&#34;https://github.com/gazebosim/gz-mujoco/&#34;&gt;gz-mujoco&lt;/a&gt; is a two-way SDFormat &amp;lt;-&amp;gt; MJCF conversion tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OBJ&lt;/strong&gt;: &lt;a href=&#34;https://github.com/kevinzakka/obj2mjcf&#34;&gt;obj2mjcf&lt;/a&gt; a script for converting composite OBJ files into a loadable MJCF model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use MuJoCo for published research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{todorov2012mujoco,&#xA;  title={MuJoCo: A physics engine for model-based control},&#xA;  author={Todorov, Emanuel and Erez, Tom and Tassa, Yuval},&#xA;  booktitle={2012 IEEE/RSJ International Conference on Intelligent Robots and Systems},&#xA;  pages={5026--5033},&#xA;  year={2012},&#xA;  organization={IEEE},&#xA;  doi={10.1109/IROS.2012.6386109}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2021 DeepMind Technologies Limited.&lt;/p&gt; &#xA;&lt;p&gt;Box collision code (&lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/src/engine/engine_collision_box.c&#34;&gt;&lt;code&gt;engine_collision_box.c&lt;/code&gt;&lt;/a&gt;) is Copyright 2016 Svetoslav Kolev.&lt;/p&gt; &#xA;&lt;p&gt;ReStructuredText documents, images, and videos in the &lt;code&gt;doc&lt;/code&gt; directory are made available under the terms of the Creative Commons Attribution 4.0 (CC BY 4.0) license. You may obtain a copy of the License at &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2023-01-22T01:49:44Z</updated>
    <id>tag:github.com,2023-01-22:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s specially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/4.2.0&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/raysan5?label=sponsors&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/raylib?label=reddit%20r%2Fraylib&amp;amp;logo=reddit&#34; alt=&#34;Subreddit Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/raysan5?style=flat&amp;amp;label=@raysan5&amp;amp;color=1da1f2&amp;amp;logo=twitter&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) in PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3 or ES 2.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, XNA fonts, AngelCode fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+120 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+50 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and it draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple &lt;a href=&#34;https://github.com/raysan5/raylib/issues/613&#34;&gt;package managers&lt;/a&gt; on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that the Wiki is open for edit, if you find some issues while building raylib for your target platform, feel free to edit the Wiki or open an issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, so please, if you find some issue with a template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in raylib GitHub Wiki. Here are the relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different file formats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on raylib Wiki for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Mbed-TLS/mbedtls</title>
    <updated>2023-01-22T01:49:44Z</updated>
    <id>tag:github.com,2023-01-22:/Mbed-TLS/mbedtls</id>
    <link href="https://github.com/Mbed-TLS/mbedtls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; &#xA;&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&#34;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; &#xA;&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; &#xA;&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&#34;https://mbed-tls.readthedocs.io/&#34;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&#34;https://arm-software.github.io/psa-api/crypto/&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that &lt;a href=&#34;http://www.doxygen.nl/&#34;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other sources of documentation, see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; &#xA;&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto, and libmbedx509 depends on libmbedcrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tool versions&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; &#xA; &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, IAR 8 and Visual Studio 2013. More recent versions should work. Slightly older versions may work.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.6 to generate the test code, and to generate sample programs in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2013 or later (if using Visual Studio).&lt;/li&gt; &#xA; &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; &#xA;&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; &#xA; &lt;li&gt;Python 3 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run &lt;pre&gt;&lt;code&gt;python -m pip install -r scripts/basic.requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; &#xA;&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; &#xA; &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;tests/scripts/check-generated-files.sh -u&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; &#xA;&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; &#xA;&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make no_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; &#xA;&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; &#xA;&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/&#34;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; &#xA;&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/&#34;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir&#xA;cmake /path/to/mbedtls_source&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -LH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now make the desired change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; &#xA;&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedcrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;add_executable(xyz)&#xA;&#xA;target_link_libraries(xyz&#xA;    PUBLIC MbedTLS::mbedtls&#xA;           MbedTLS::mbedcrypto&#xA;           MbedTLS::mbedx509)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; &#xA;&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2013.&lt;/p&gt; &#xA;&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; &#xA;&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&#34;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example programs&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&#34;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_mpi.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_mpi.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_mpi.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; &#xA;&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls-test/raw/master/README.md#quick-start&#34;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&#34;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&#34;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&#34;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; &#xA; &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; &#xA; &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; &#xA; &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; &#xA; &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PSA cryptography API&lt;/h2&gt; &#xA;&lt;h3&gt;PSA API&lt;/h3&gt; &#xA;&lt;p&gt;Arm&#39;s &lt;a href=&#34;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&#34;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://arm-software.github.io/psa-api/crypto/&#34;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; &#xA;&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; &#xA; &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; &#xA; &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; &#xA; &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; &#xA; &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&#34;mailto:mbed-crypto@arm.com&#34;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; &#xA;&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; &#xA;&lt;p&gt;The X.509 and TLS code can use PSA cryptography for most operations. To enable this support, activate the compilation option &lt;code&gt;MBEDTLS_USE_PSA_CRYPTO&lt;/code&gt; in &lt;code&gt;mbedtls_config.h&lt;/code&gt;. Note that TLS 1.3 uses PSA cryptography for most operations regardless of this option. See &lt;code&gt;docs/use-psa-crypto.md&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Upcoming features&lt;/h3&gt; &#xA;&lt;p&gt;Future releases of this library will include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A driver programming interface, which makes it possible to use hardware accelerators instead of the default software implementation for chosen algorithms.&lt;/li&gt; &#xA; &lt;li&gt;Support for external keys to be stored and manipulated exclusively in a separate cryptoprocessor.&lt;/li&gt; &#xA; &lt;li&gt;A configuration mechanism to compile only the algorithms you need for your application.&lt;/li&gt; &#xA; &lt;li&gt;A wider set of cryptographic algorithms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under the &lt;a href=&#34;https://spdx.org/licenses/Apache-2.0.html&#34;&gt;Apache-2.0&lt;/a&gt; license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full text of this license. Contributors must accept that their contributions are made under both the Apache-2.0 AND &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-or-later.html&#34;&gt;GPL-2.0-or-later&lt;/a&gt; licenses. This enables LTS (Long Term Support) branches of the software to be provided under either the Apache-2.0 OR GPL-2.0-or-later licenses.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&#34;mailto:mbed-tls-security@lists.trustedfirmware.org&#34;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&#34;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>