<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:41:04Z</updated>
  <subtitle>Weekly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stedolan/jq</title>
    <updated>2022-10-09T01:41:04Z</updated>
    <id>tag:github.com,2022-10-09:/stedolan/jq</id>
    <link href="https://github.com/stedolan/jq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line JSON processor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jq&lt;/h1&gt; &#xA;&lt;p&gt;jq is a lightweight and flexible command-line JSON processor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/stedolan/jq?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/stedolan/jq/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;, Unix: &lt;a href=&#34;https://travis-ci.org/stedolan/jq&#34;&gt;&lt;img src=&#34;https://travis-ci.org/stedolan/jq.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;, Windows: &lt;a href=&#34;https://ci.appveyor.com/project/stedolan/jq&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/mi816811c9e9mx29?svg=true&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn to use jq, read the documentation at &lt;a href=&#34;https://stedolan.github.io/jq&#34;&gt;https://stedolan.github.io/jq&lt;/a&gt;. This documentation is generated from the docs/ folder of this repository. You can also try it online at &lt;a href=&#34;https://jqplay.org&#34;&gt;jqplay.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to hack on jq, feel free, but be warned that its internals are not well-documented at the moment. Bring a hard hat and a shovel. Also, read the wiki: &lt;a href=&#34;https://github.com/stedolan/jq/wiki&#34;&gt;https://github.com/stedolan/jq/wiki&lt;/a&gt;, where you will find cookbooks, discussion of advanced topics, internals, release engineering, and more.&lt;/p&gt; &#xA;&lt;p&gt;Source tarball and built executable releases can be found on the homepage and on the github release page, &lt;a href=&#34;https://github.com/stedolan/jq/releases&#34;&gt;https://github.com/stedolan/jq/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re building directly from the latest git, you&#39;ll need flex, bison (3.0 or newer), libtool, make, automake, and autoconf installed. To get regexp support you&#39;ll also need to install Oniguruma or clone it as a git submodule as per the instructions below. (note that jq&#39;s tests require regexp support to pass). To build, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init # if building from git to get oniguruma&#xA;autoreconf -fi              # if building from git&#xA;./configure --with-oniguruma=builtin&#xA;make -j8&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build without bison or flex, add &lt;code&gt;--disable-maintainer-mode&lt;/code&gt; to the ./configure invocation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-oniguruma=builtin --disable-maintainer-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Developers must not use &lt;code&gt;--disable-maintainer-mode&lt;/code&gt;, not when making changes to the jq parser and/or lexer.)&lt;/p&gt; &#xA;&lt;p&gt;To build a statically linked version of jq, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make LDFLAGS=-all-static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After make finishes, you&#39;ll be able to use &lt;code&gt;./jq&lt;/code&gt;. You can also install it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using the latest git version but instead building a released tarball (available on the website), then you won&#39;t need to run &lt;code&gt;autoreconf&lt;/code&gt; (and shouldn&#39;t), and you won&#39;t need flex or bison.&lt;/p&gt; &#xA;&lt;p&gt;To cross-compile for OS X and Windows, see docs/Rakefile&#39;s build task and scripts/crosscompile. You&#39;ll need a cross-compilation environment, such as Mingw for cross-compiling for Windows.&lt;/p&gt; &#xA;&lt;p&gt;Cross-compilation requires a clean workspace, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# git clean ...&#xA;autoreconf -i&#xA;./configure&#xA;make distclean&#xA;scripts/crosscompile &amp;lt;name-of-build&amp;gt; &amp;lt;configure-options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--host=&lt;/code&gt; and &lt;code&gt;--target=&lt;/code&gt; ./configure options to select a cross-compilation environment. See also &lt;a href=&#34;https://github.com/stedolan/jq/wiki/Cross-compilation&#34;&gt;&#34;Cross compilation&#34;&lt;/a&gt; on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;Send questions to &lt;a href=&#34;https://stackoverflow.com/questions/tagged/jq&#34;&gt;https://stackoverflow.com/questions/tagged/jq&lt;/a&gt; or to the #jq channel (&lt;a href=&#34;https://web.libera.chat/#jq&#34;&gt;https://web.libera.chat/#jq&lt;/a&gt;) on Libera.Chat (&lt;a href=&#34;https://libera.chat/&#34;&gt;https://libera.chat/&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coolsnowwolf/lede</title>
    <updated>2022-10-09T01:41:04Z</updated>
    <id>tag:github.com,2022-10-09:/coolsnowwolf/lede</id>
    <link href="https://github.com/coolsnowwolf/lede" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean&#39;s LEDE source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;欢迎来到 Lean 的 LEDE 源码仓库&lt;/h1&gt; &#xA;&lt;p&gt;如何编译自己需要的 LEDE 固件 &lt;a href=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_EN.md&#34;&gt;How to build your LEDE firmware&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;官方讨论群&lt;/h2&gt; &#xA;&lt;p&gt;如有技术问题需要讨论或者交流，欢迎加入以下群：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;QQ 讨论群： Op固件技术研究群 ,号码 891659613 ，加群链接：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=XL8SK5aC&#34; title=&#34;Op固件技术研究群&#34;&gt;点击加入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TG 讨论群： OP 编译官方大群 ，加群链接：&lt;a href=&#34;https://t.me/JhKgAA6Hx1&#34; title=&#34;OP 编译官方大群&#34;&gt;点击加入&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;不要用 root 用户进行编译&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt; &#xA; &lt;li&gt;默认登陆IP 192.168.1.1 密码 password&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;编译命令&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;首先装好 Linux 系统，推荐 Debian 11 或 Ubuntu LTS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装编译依赖&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \&#xA;git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \&#xA;libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \&#xA;mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \&#xA;rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载源代码，更新 feeds 并选择配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/coolsnowwolf/lede&#xA;cd lede&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make download -j8&#xA;make V=s -j1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;本套代码保证肯定可以编译成功。里面包括了 R22 所有源代码，包括 IPK 的。&lt;/p&gt; &#xA;&lt;p&gt;你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！&lt;/p&gt; &#xA;&lt;p&gt;二次编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd lede&#xA;git pull&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make defconfig&#xA;make download -j8&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要重新配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./tmp &amp;amp;&amp;amp; rm -rf .config&#xA;make menuconfig&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译完成后输出路径：bin/targets&lt;/p&gt; &#xA;&lt;h3&gt;如果你使用 WSL/WSL2 进行编译&lt;/h3&gt; &#xA;&lt;p&gt;由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 &lt;code&gt;make&lt;/code&gt; 前面加上：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS 原生系统进行编译&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在 AppStore 中安装 Xcode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装 Homebrew：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 Homebrew 安装工具链、依赖与基础软件包:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew unlink awk&#xA;brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz&#xA;brew install gcc@11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;然后输入以下命令，添加到系统环境变量中：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;/usr/local/opt/coreutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/findutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-getopt/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-tar/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/grep/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/make/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;重新加载一下 shell 启动文件 &lt;code&gt;source ~/.bashrc&lt;/code&gt;，然后输入 &lt;code&gt;bash&lt;/code&gt; 进入 bash shell，就可以和 Linux 一样正常编译了&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;特别提示&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒。安全干净才是固件应该做到的；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成 报名地址：&lt;a href=&#34;http://forgotfun.org/2018/04/openwrt-training-2018.html&#34; title=&#34;报名&#34;&gt;点击报名&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QCA IPQ60xx 开源仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt-gl-ax1800&#34;&gt;https://github.com/coolsnowwolf/openwrt-gl-ax1800&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;存档版本仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt&#34;&gt;https://github.com/coolsnowwolf/openwrt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;软路由介绍&lt;/h2&gt; &#xA;&lt;p&gt;iKOOLCORE 硬酷R1 多网口小主机 - N5105/N6005 : Cube box, rest fun. 方寸之间，尽是乐趣&lt;/p&gt; &#xA;&lt;p&gt;(商品介绍页面 - 深圳市硬酷科技)： &lt;a href=&#34;https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=1981117776&amp;amp;activityId=3eb8a2ad3c8945ed831b203f44dc218b&#34;&gt;Lean用户R1专属券&lt;/a&gt; &lt;a href=&#34;https://item.taobao.com/item.htm?ft=t&amp;amp;id=682987219699&#34;&gt;N5105下单链接&lt;/a&gt; &lt;a href=&#34;https://item.taobao.com/item.htm?ft=t&amp;amp;id=682672722483&#34;&gt;N6005下单链接&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(商品介绍页面 - 硬酷科技（支持花呗）)： &lt;a href=&#34;https://taoquan.taobao.com/coupon/unify_apply.htm?sellerId=2208215115814&amp;amp;activityId=e013790422b849edb3a71e4e6aa46ff3&#34;&gt;Lean用户R1专属券&lt;/a&gt; &lt;a href=&#34;https://item.taobao.com/item.htm?ft=t&amp;amp;id=682987219699&#34;&gt;下单链接&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://item.taobao.com/item.htm?ft=t&amp;amp;id=682025492099&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/r1.jpg&#34; alt=&#34;r1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;捐贈&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/star.png&#34; alt=&#34;star&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheAlgorithms/C</title>
    <updated>2022-10-09T01:41:04Z</updated>
    <id>tag:github.com,2022-10-09:/TheAlgorithms/C</id>
    <link href="https://github.com/TheAlgorithms/C" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of various algorithms in mathematics, machine learning, computer science, physics, etc implemented in C for educational purposes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - C # {#mainpage}&lt;/h1&gt; &#xA;&lt;!-- the suffix in the above line is required for doxygen to consider this as the index page of the generated documentation site --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/TheAlgorithms/C&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/TheAlgorithms/C/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/TheAlgorithms/C.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheAlgorithms/C/actions/workflows/codeql_analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/C/actions/workflows/codeql_analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/TheAlgorithms&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat-Gitter-ff69b4.svg?label=Chat&amp;amp;logo=gitter&amp;amp;style=flat-square&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheAlgorithms/C/raw/master/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?label=Contributions&amp;amp;message=Welcome&amp;amp;color=0059b3&amp;amp;style=flat-square&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/TheAlgorithms/C?color=red&amp;amp;style=flat-square&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;a href=&#34;https://TheAlgorithms.github.io/C&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/C/workflows/Doxygen%20CI/badge.svg?sanitize=true&#34; alt=&#34;Doxygen CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheAlgorithms/C/actions?query=workflow%3A%22Awesome+CI+Workflow%22&#34;&gt;&lt;img src=&#34;https://github.com/TheAlgorithms/C/workflows/Awesome%20CI%20Workflow/badge.svg?sanitize=true&#34; alt=&#34;Awesome CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/TheAlgorithms&#34;&gt;&lt;img src=&#34;https://img.shields.io/liberapay/receives/TheAlgorithms.svg?logo=liberapay&#34; alt=&#34;Income&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/c7MnfGFGa6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/808045925556682782.svg?logo=discord&amp;amp;colorB=5865F2&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/TheAlgorithms/donate&#34;&gt;&lt;img src=&#34;https://liberapay.com/assets/widgets/donate.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The repository is a collection of open-source implementations of a variety of algorithms implemented in C and licensed under &lt;a href=&#34;https://github.com/TheAlgorithms/C/raw/master/LICENSE&#34;&gt;GPLv3 License&lt;/a&gt;. The algorithms span a variety of topics from computer science, mathematics and statistics, data science, machine learning, engineering, etc.. The implementations and their associated documentations are meant to provide a learning resource for educators and students. Hence, one may find more than one implementation for the same objective but using different algorithm strategies and optimizations.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The repository provides implementations of various algorithms in one of the most fundamental general purpose languages - &lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)&#34;&gt;C&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Well documented source code with detailed explanations provide a valuable resource for educators and students alike.&lt;/li&gt; &#xA; &lt;li&gt;Each source code is atomic using standard C library &lt;a href=&#34;https://en.wikipedia.org/wiki/C_standard_library&#34;&gt;&lt;code&gt;libc&lt;/code&gt;&lt;/a&gt; and &lt;em&gt;no external libraries&lt;/em&gt; are required for their compilation and execution. Thus the fundamentals of the algorithms can be studied in much depth.&lt;/li&gt; &#xA; &lt;li&gt;Source codes are &lt;a href=&#34;https://github.com/TheAlgorithms/C/actions?query=workflow%3A%22Awesome+CI+Workflow%22&#34;&gt;compiled and tested&lt;/a&gt; for every commit on the latest versions of three major operating systems viz., Windows, MacOS and Ubuntu (Linux) using MSVC 16 2019, AppleClang 11.0 and GNU 7.5.0 respectively.&lt;/li&gt; &#xA; &lt;li&gt;Strict adherence to &lt;a href=&#34;https://en.wikipedia.org/wiki/C11_(C_standard_revision)&#34;&gt;C11&lt;/a&gt; standard ensures portability of code to embedded systems as well like ESP32, ARM Cortex, etc. with little to no changes.&lt;/li&gt; &#xA; &lt;li&gt;Self-checks within programs ensure correct implementations with confidence.&lt;/li&gt; &#xA; &lt;li&gt;Modular implementations and OpenSource licensing enable the functions to be utilized conveniently in other applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://TheAlgorithms.github.io/C&#34;&gt;Online Documentation&lt;/a&gt; is generated from the repository source codes directly. The documentation contains all resources including source code snippets, details on execution of the programs, diagrammatic representation of program flow, and links to external resources where necessary. Click on &lt;a href=&#34;https://TheAlgorithms.github.io/C/files.html&#34;&gt;Files menu&lt;/a&gt; to see the list of all the files documented with the code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thealgorithms.github.io/C&#34;&gt;Documentation of Algorithms in C&lt;/a&gt; by &lt;a href=&#34;https://github.com/TheAlgorithms/C/graphs/contributors&#34;&gt;The Algorithms Contributors&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1&#34;&gt;CC BY-SA 4.0&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;height:22px!important;margin-left: 3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/cc.svg?sanitize=true&#34;&gt;&lt;img alt=&#34;Credit must be given to the creator&#34; style=&#34;height:22px!important;margin-left: 3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/by.svg?sanitize=true&#34;&gt;&lt;img alt=&#34;Adaptations must be shared under the same terms&#34; style=&#34;height:22px!important;margin-left: 3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/sa.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;As a community developed and maintained repository, we welcome new un-plagiarized quality contributions. Please read our &lt;a href=&#34;https://github.com/TheAlgorithms/C/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>