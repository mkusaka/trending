<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-12T01:35:00Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bdbaraban/holbertonschool-low_level_programming</title>
    <updated>2022-09-12T01:35:00Z</updated>
    <id>tag:github.com,2022-09-12:/bdbaraban/holbertonschool-low_level_programming</id>
    <link href="https://github.com/bdbaraban/holbertonschool-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-level programming and algorithm projects for Holberton School Year 1&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Low-Level Programming - Data Structures, Algorithms, Linux/Unix System Programming&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains programs written for the low-level programming and algorithm track at Holberton School. In these projects, which occurred throughout the duration of the Year 1 curriculum, I learned about data structures, algorithms, and other low-level programming concepts while working in the C language. The specific list of projects contained follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x00-hello_world&#34;&gt;0x00. C - Hello, World&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x01-variables_if_else_while&#34;&gt;0x01. C - Variables, if, else, while&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x02-functions_nested_loops&#34;&gt;0x02. C - Functions, nested loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x03-more_functions_nested_loops&#34;&gt;0x03. C - More functions, more nested loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x04-pointers_arrays_strings&#34;&gt;0x04. C - Pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x05-pointers_arrays_strings&#34;&gt;0x05. C - More pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x06-pointers_arrays_strings&#34;&gt;0x06. C - Even more pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x07-recursion&#34;&gt;0x07. C - Recursion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x08-static_libraries&#34;&gt;0x08. C - Static libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x09-argc_argv&#34;&gt;0x09. C - argc, argv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x0A-malloc_free&#34;&gt;0x0A. C - malloc, free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x0B-more_malloc_free&#34;&gt;0x0B. C - More malloc, free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x0C-preprocessor&#34;&gt;0x0C. C - Preprocessor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x0D-structures_typedef&#34;&gt;0x0D. C - Structures, typedef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x0E-function_pointers&#34;&gt;0x0E. C - Function pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x0F-variadic_functions&#34;&gt;0x0F. C - Variadic functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bdbaraban/printf/tree/master&#34;&gt;0x10. C - printf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x11-singly_linked_lists&#34;&gt;0x11. C - Singly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x12-more_singly_linked_lists&#34;&gt;0x12. C - More singly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x13-bit_manipulation&#34;&gt;0x13. C - Bit manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x14-file_io&#34;&gt;0x14. C - File I/O&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bdbaraban/simple_shell/tree/master&#34;&gt;0x15. C - Simple Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x16-doubly_linked_lists&#34;&gt;0x16. C - Doubly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x17-dynamic_libraries&#34;&gt;0x17. C - Dynamic libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bdbaraban/monty/tree/master&#34;&gt;0x18. C - Stacks, Queues - LIFO, FIFO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x19-hash_tables&#34;&gt;0x19. C - Hash tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x1A-sorting_algorithms&#34;&gt;0x1A. C - Sorting algorithms &amp;amp; Big O&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x1B-makefiles&#34;&gt;0x1B. C - Makefiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bdbaraban/0x1C-binary_trees/tree/master&#34;&gt;0x1C. C - Binary trees&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bdbaraban/holbertonschool-low_level_programming/master/0x1D-search_algorithms&#34;&gt;0x1D. C - Search Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author &lt;span&gt;‚úí&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brennan D Baraban&lt;/strong&gt; &amp;lt;&lt;a href=&#34;https://github.com/bdbaraban&#34;&gt;bdbaraban&lt;/a&gt;&amp;gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements &lt;span&gt;üôè&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;All work contained in this project was completed as part of the curriculum for Holberton School. Holberton School is a campus-based full-stack software engineering program that prepares students for careers in the tech industry using project-based peer learning. For more information, visit &lt;a href=&#34;https://www.holbertonschool.com/&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://www.holbertonschool.com/holberton-logo.png&#34; alt=&#34;Holberton School logo&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>servetgulnaroglu/cube.c</title>
    <updated>2022-09-12T01:35:00Z</updated>
    <id>tag:github.com,2022-09-12:/servetgulnaroglu/cube.c</id>
    <link href="https://github.com/servetgulnaroglu/cube.c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;https://youtu.be/p09i_hoFdd0&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Immediate-Mode-UI/Nuklear</title>
    <updated>2022-09-12T01:35:00Z</updated>
    <id>tag:github.com,2022-09-12:/Immediate-Mode-UI/Nuklear</id>
    <link href="https://github.com/Immediate-Mode-UI/Nuklear" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A single-header ANSI C immediate mode cross-platform GUI library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nuklear&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear/actions&#34;&gt;&lt;img src=&#34;https://github.com/Immediate-Mode-UI/Nuklear/workflows/C%2FC++%20CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a minimal-state, immediate-mode graphical user interface toolkit written in ANSI C and licensed under public domain. It was designed as a simple embeddable user interface for application and does not have any dependencies, a default render backend or OS window/input handling but instead provides a highly modular, library-based approach, with simple input state for input and draw commands describing primitive shapes as output. So instead of providing a layered library that tries to abstract over a number of platform and render backends, it focuses only on the actual UI.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Immediate-mode graphical user interface toolkit&lt;/li&gt; &#xA; &lt;li&gt;Single-header library&lt;/li&gt; &#xA; &lt;li&gt;Written in C89 (ANSI C)&lt;/li&gt; &#xA; &lt;li&gt;Small codebase (~18kLOC)&lt;/li&gt; &#xA; &lt;li&gt;Focus on portability, efficiency and simplicity&lt;/li&gt; &#xA; &lt;li&gt;No dependencies (not even the standard library if not wanted)&lt;/li&gt; &#xA; &lt;li&gt;Fully skinnable and customizable&lt;/li&gt; &#xA; &lt;li&gt;Low memory footprint with total control of memory usage if needed / wanted&lt;/li&gt; &#xA; &lt;li&gt;UTF-8 support&lt;/li&gt; &#xA; &lt;li&gt;No global or hidden state&lt;/li&gt; &#xA; &lt;li&gt;Customizable library modules (you can compile and use only what you need)&lt;/li&gt; &#xA; &lt;li&gt;Optional font baker and vertex buffer output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://Immediate-Mode-UI.github.io/Nuklear/doc/nuklear.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;This library is self-contained in one single header file and can be used either in header-only mode or in implementation mode. The header-only mode is used by default when included and allows including this header in other headers and does not contain the actual implementation.&lt;/p&gt; &#xA;&lt;p&gt;The implementation mode requires defining the preprocessor macro &lt;code&gt;NK_IMPLEMENTATION&lt;/code&gt; in &lt;em&gt;one&lt;/em&gt; .c/.cpp file before &lt;code&gt;#include&lt;/code&gt;ing this file, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define NK_IMPLEMENTATION&#xA;#include &#34;nuklear.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IMPORTANT: Every time you include &#34;nuklear.h&#34; you have to define the same optional flags. This is very important; not doing it either leads to compiler errors, or even worse, stack corruptions.&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&#34; alt=&#34;screenshot&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&#34; alt=&#34;screen&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&#34; alt=&#34;screen2&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&#34; alt=&#34;node&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&#34; alt=&#34;skinning&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&#34; alt=&#34;gamepad&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* init gui state */&#xA;struct nk_context ctx;&#xA;nk_init_fixed(&amp;amp;ctx, calloc(1, MAX_MEMORY), MAX_MEMORY, &amp;amp;font);&#xA;&#xA;enum {EASY, HARD};&#xA;static int op = EASY;&#xA;static float value = 0.6f;&#xA;static int i =  20;&#xA;&#xA;if (nk_begin(&amp;amp;ctx, &#34;Show&#34;, nk_rect(50, 50, 220, 220),&#xA;    NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {&#xA;    /* fixed widget pixel width */&#xA;    nk_layout_row_static(&amp;amp;ctx, 30, 80, 1);&#xA;    if (nk_button_label(&amp;amp;ctx, &#34;button&#34;)) {&#xA;        /* event handling */&#xA;    }&#xA;&#xA;    /* fixed widget window ratio width */&#xA;    nk_layout_row_dynamic(&amp;amp;ctx, 30, 2);&#xA;    if (nk_option_label(&amp;amp;ctx, &#34;easy&#34;, op == EASY)) op = EASY;&#xA;    if (nk_option_label(&amp;amp;ctx, &#34;hard&#34;, op == HARD)) op = HARD;&#xA;&#xA;    /* custom widget pixel width */&#xA;    nk_layout_row_begin(&amp;amp;ctx, NK_STATIC, 30, 2);&#xA;    {&#xA;        nk_layout_row_push(&amp;amp;ctx, 50);&#xA;        nk_label(&amp;amp;ctx, &#34;Volume:&#34;, NK_TEXT_LEFT);&#xA;        nk_layout_row_push(&amp;amp;ctx, 110);&#xA;        nk_slider_float(&amp;amp;ctx, 0, &amp;amp;value, 1.0f, 0.1f);&#xA;    }&#xA;    nk_layout_row_end(&amp;amp;ctx);&#xA;}&#xA;nk_end(&amp;amp;ctx);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of nuklear bindings for different languages created by other authors. I cannot attest for their quality since I am not necessarily proficient in any of these languages. Furthermore there are no guarantee that all bindings will always be kept up to date:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glegris/nuklear4j&#34;&gt;Java&lt;/a&gt; by Guillaume Legris&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Timu5/bindbc-nuklear&#34;&gt;D&lt;/a&gt; by Mateusz Muszy≈Ñski&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golang-ui/nuklear&#34;&gt;Golang&lt;/a&gt; by &lt;a href=&#34;mailto:golang-ui@github.com&#34;&gt;golang-ui@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snuk182/nuklear-rust&#34;&gt;Rust&lt;/a&gt; by &lt;a href=&#34;mailto:snuk182@github.com&#34;&gt;snuk182@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wasamasa/nuklear&#34;&gt;Chicken&lt;/a&gt; by &lt;a href=&#34;mailto:wasamasa@github.com&#34;&gt;wasamasa@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zacharycarter/nuklear-nim&#34;&gt;Nim&lt;/a&gt; by &lt;a href=&#34;mailto:zacharycarter@github.com&#34;&gt;zacharycarter@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/keharriso/love-nuklear&#34;&gt;L√ñVE-Nuklear&lt;/a&gt; by Kevin Harrison&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stetre/moonnuklear&#34;&gt;MoonNuklear&lt;/a&gt; by Stefano Trettel&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/billsix/pyNuklear&#34;&gt;pyNuklear&lt;/a&gt; by William Emerison Six (ctypes-based wrapper)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nathanrw/nuklear-cffi&#34;&gt;pynk&lt;/a&gt; by &lt;a href=&#34;mailto:nathanrw@github.com&#34;&gt;nathanrw@github.com&lt;/a&gt; (cffi binding)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cartman300/NuklearDotNet&#34;&gt;CSharp/.NET&lt;/a&gt; by &lt;a href=&#34;mailto:cartman300@github.com&#34;&gt;cartman300@github.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nsauzede/vnk&#34;&gt;V&lt;/a&gt; by Nicolas Sauzede&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Developed by Micha Mettke and every direct or indirect contributor to the GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Embeds &lt;code&gt;stb_texedit&lt;/code&gt;, &lt;code&gt;stb_truetype&lt;/code&gt; and &lt;code&gt;stb_rectpack&lt;/code&gt; by Sean Barrett (public domain) Embeds &lt;code&gt;ProggyClean.ttf&lt;/code&gt; font by Tristan Grimmer (MIT license).&lt;/p&gt; &#xA;&lt;p&gt;Big thank you to Omar Cornut (ocornut@github) for his &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;imgui&lt;/a&gt; library and giving me the inspiration for this library, Casey Muratori for handmade hero and his original immediate-mode graphical user interface idea and Sean Barrett for his amazing single-header &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;libraries&lt;/a&gt; which restored my faith in libraries and brought me to create some of my own. Finally Apoorva Joshi for his single-header &lt;a href=&#34;http://apoorvaj.io/single-header-packer.html&#34;&gt;file packer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;------------------------------------------------------------------------------&#xA;This software is available under 2 licenses -- choose whichever you prefer.&#xA;------------------------------------------------------------------------------&#xA;ALTERNATIVE A - MIT License&#xA;Copyright (c) 2017 Micha Mettke&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy of&#xA;this software and associated documentation files (the &#34;Software&#34;), to deal in&#xA;the Software without restriction, including without limitation the rights to&#xA;use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies&#xA;of the Software, and to permit persons to whom the Software is furnished to do&#xA;so, subject to the following conditions:&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;------------------------------------------------------------------------------&#xA;ALTERNATIVE B - Public Domain (www.unlicense.org)&#xA;This is free and unencumbered software released into the public domain.&#xA;Anyone is free to copy, modify, publish, use, compile, sell, or distribute this&#xA;software, either in source code form or as a compiled binary, for any purpose,&#xA;commercial or non-commercial, and by any means.&#xA;In jurisdictions that recognize copyright laws, the author or authors of this&#xA;software dedicate any and all copyright interest in the software to the public&#xA;domain. We make this dedication for the benefit of the public at large and to&#xA;the detriment of our heirs and successors. We intend this dedication to be an&#xA;overt act of relinquishment in perpetuity of all present and future rights to&#xA;this software under copyright law.&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN&#xA;ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION&#xA;WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#xA;-----------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reviewers guide&lt;/h2&gt; &#xA;&lt;p&gt;When reviewing pull request there are common things a reviewer should keep in mind.&lt;/p&gt; &#xA;&lt;p&gt;Reviewing changes to &lt;code&gt;src/*&lt;/code&gt; and &lt;code&gt;nuklear.h&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure C89 compatibility.&lt;/li&gt; &#xA; &lt;li&gt;The code should work for several backends to an acceptable degree.&lt;/li&gt; &#xA; &lt;li&gt;Check no other parts of &lt;code&gt;nuklear.h&lt;/code&gt; are related to the PR and thus nothing is missing.&lt;/li&gt; &#xA; &lt;li&gt;Recommend simple optimizations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pass small structs by value instead of by pointer.&lt;/li&gt; &#xA;   &lt;li&gt;Use local buffers over heap allocation when possible.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check that the coding style is consistent with code around it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Variable/function name casing.&lt;/li&gt; &#xA;   &lt;li&gt;Indentation.&lt;/li&gt; &#xA;   &lt;li&gt;Curly bracket (&lt;code&gt;{}&lt;/code&gt;) placement.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ensure that the contributor has bumped the appropriate version in &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear/raw/master/clib.json&#34;&gt;clib.json&lt;/a&gt; and added their changes to the &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear/raw/master/src/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have at least one other person review the changes before merging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reviewing changes to &lt;code&gt;demo/*&lt;/code&gt;, &lt;code&gt;example/*&lt;/code&gt; and other files in the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Focus on getting working code merged. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We want to make it easy for people to get started with Nuklear, and any &lt;code&gt;demo&lt;/code&gt; and &lt;code&gt;example&lt;/code&gt; improvements helps in this regard.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use of newer C features, or even other languages is not discouraged. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If another language is used, ensure that the build process is easy to figure out.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Messy or less efficient code can be merged so long as these outliers are pointed out and easy to find.&lt;/li&gt; &#xA; &lt;li&gt;Version shouldn&#39;t be bumped for these changes.&lt;/li&gt; &#xA; &lt;li&gt;Changes that improves code to be more inline with &lt;code&gt;nuklear.h&lt;/code&gt; are ofc always welcome.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>