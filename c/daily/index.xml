<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-18T01:31:13Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vlcn-io/cr-sqlite</title>
    <updated>2022-11-18T01:31:13Z</updated>
    <id>tag:github.com,2022-11-18:/vlcn-io/cr-sqlite</id>
    <link href="https://github.com/vlcn-io/cr-sqlite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convergent, Replicated SQLite. Multi-writer and CRDT support for SQLite&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;[wip] crsql - Convergent, Replicated, SQLite&lt;/h1&gt; &#xA;&lt;p&gt;A standalone component of the &lt;a href=&#34;https://vlcn.io&#34;&gt;vlcn&lt;/a&gt; project | &lt;a href=&#34;https://discord.gg/AtdVY6zDW3&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crsql&lt;/code&gt; is a &lt;a href=&#34;https://www.sqlite.org/loadext.html&#34;&gt;run time loadable extension&lt;/a&gt; for SQLite that adds CRDT and sync support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt; is a foundation of offline, local-first and edge deployed software. Wouldn&#39;t it be great, however, if we could merge two or more SQLite databases together and not run into any conflicts?&lt;/p&gt; &#xA;&lt;p&gt;This project implements &lt;a href=&#34;https://crdt.tech/&#34;&gt;CRDTs&lt;/a&gt; and &lt;a href=&#34;https://hal.inria.fr/hal-02983557/document&#34;&gt;CRRs&lt;/a&gt; in &lt;code&gt;SQLite&lt;/code&gt;, allowing databases that share a common schema to merge their state together. Merges can happen between an arbitrary number of peers and all peers will eventually converge to the same state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crsqlite&lt;/code&gt; works by adding metadata tables and triggers around your existing database schema. This means that you do not have to change your schema in order to get conflict resolution support -- with a few caveats around uniqueness constraints and foreign keys. See &lt;a href=&#34;https://raw.githubusercontent.com/vlcn-io/cr-sqlite/main/#schema-design-for-crdts--eventual-consistency&#34;&gt;Schema Design for CRDTs &amp;amp; Eventual Consistency&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;crsqlite&lt;/code&gt; exposes two APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A function extension (&lt;code&gt;crsql_as_crr&lt;/code&gt;) to upgrade existing tables to &#34;crrs&#34; or &#34;conflict free replicated relations&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;select crsql_as_crr(&#39;table_name&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And a virtual table (&lt;code&gt;crsql_changes&lt;/code&gt;) to ask the database for changesets or to apply changesets from another database &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;select * from crsql_changes where version &amp;gt; x&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;insert into crsql_changes values ([patches receied from select on another peer])&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Application code would use the function extension to enable crr support on tables. Networking code would use the &lt;code&gt;crsql_changes&lt;/code&gt; virtual table to fetch and apply changes.&lt;/p&gt; &#xA;&lt;p&gt;Usage looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- load the extension if it is not statically linked&#xA;.load crsqlite&#xA;.mode column&#xA;-- create tables as normal&#xA;create table foo (a primary key, b);&#xA;create table baz (a primary key, b, c, d);&#xA;&#xA;-- update those tables to be crrs / crdts&#xA;select crsql_as_crr(&#39;foo&#39;);&#xA;select crsql_as_crr(&#39;baz&#39;);&#xA;&#xA;-- insert some data / interact with tables as normal&#xA;insert into foo (a,b) values (1,2);&#xA;insert into baz (a,b,c,d) values (&#39;a&#39;, &#39;woo&#39;, &#39;doo&#39;, &#39;daa&#39;);&#xA;&#xA;-- ask for a record of what has changed&#xA;select * from crsql_changes;&#xA;&#xA;table  pk   cid  val    version  site_id&#xA;-----  ---  ---  -----  -------  -------&#xA;foo    1    1    2      1&#xA;baz    &#39;a&#39;  1    &#39;woo&#39;  2&#xA;baz    &#39;a&#39;  2    &#39;doo&#39;  3&#xA;baz    &#39;a&#39;  3    &#39;daa&#39;  4&#xA;&#xA;-- merge changes from a peer&#xA;insert into crsql_changes&#xA;  (&#34;table&#34;, pk, cid, val, version, site_id)&#xA;  values&#xA;  (&#39;foo&#39;, 5, 1, &#39;&#39;&#39;thing&#39;&#39;&#39;, 5, X&#39;7096E2D505314699A59C95FABA14ABB5&#39;);&#xA;insert into crsql_changes (&#34;table&#34;, pk, cid, val, version, site_id)&#xA;  values&#xA;  (&#39;baz&#39;, &#39;&#39;&#39;a&#39;&#39;&#39;, 1, 123, 101, X&#39;7096E2D505314699A59C95FABA14ABB5&#39;);&#xA;&#xA;-- check that peer&#39;s changes were applied&#xA;select * from foo;&#xA;a  b&#xA;-  -----&#xA;1  2&#xA;5  thing&#xA;&#xA;select * from baz;&#xA;a  b    c    d&#xA;-  ---  ---  ---&#xA;a  123  doo  daa&#xA;&#xA;-- tear down the extension before closing the connection&#xA;-- https://sqlite.org/forum/forumpost/c94f943821&#xA;select crsql_finalize();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Packages&lt;/h1&gt; &#xA;&lt;p&gt;Note -- these are pre-release. Please look at &lt;a href=&#34;https://github.com/vlcn-io/cr-sqlite/issues?q=is%3Aissue+is%3Aopen+label%3Abug&#34;&gt;the open bugs&lt;/a&gt; if you&#39;re planning on taking them for a spin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Browser - &lt;a href=&#34;https://github.com/vlcn-io/cr-sqlite/tree/main/js/wasm-esm/crsqlite&#34;&gt;@vlcn.io/crsqlite-wasm&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/vlcn-io/cr-sqlite/tree/main/js/wasm-esm/crsqlite&#34;&gt;usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NodeJS - &lt;a href=&#34;https://www.npmjs.com/package/@vlcn.io/crsqlite&#34;&gt;@vlcn.io/crsqlite&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Usage:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const sqlite = require(&#34;better-sqlite3&#34;);&#xA;const db = sqlite(&#34;filename.db&#34;);&#xA;db.loadExtension(require.resolve(&#34;@vlcn.io/crsqlite&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or, es6:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { resolve } from &#34;import-meta-resolve&#34;;&#xA;import Database from &#34;better-sqlite3&#34;;&#xA;&#xA;const db = new Database(&#34;:memory&#34;);&#xA;const modulePath = await resolve(&#34;@vlcn.io/crsqlite&#34;, import.meta.url);&#xA;db.loadExtension(new URL(modulePath).pathname);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example Apps&lt;/h1&gt; &#xA;&lt;p&gt;Examples apps that use &lt;code&gt;cr-sqlite&lt;/code&gt; and have a networking layer (albeit a dumb one at the moment) are being developed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vlcn-io/cr-sqlite/tree/main/js/examples/p2p-todomvc&#34;&gt;Working TODO MVC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tantaman/strut&#34;&gt;WIP Local-First Presentation Editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://observablehq.com/@tantaman/cr-sqlite-basic-setup&#34;&gt;Observable Notebook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.sqlite.org/loadext.htmla&#34;&gt;Run Time Loadable Extension&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on building a native library that can be loaded into SQLite in non-wasm environments.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;native/src&lt;/code&gt; directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make loadable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a shared library at &lt;code&gt;dist/crsqlite.[lib extension]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;[lib extension]:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;.so&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Darwin / OS X: &lt;code&gt;.dylib&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;.dll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on building a &lt;code&gt;sqlite3&lt;/code&gt; CLI that has &lt;code&gt;cr-sqlite&lt;/code&gt; statically linked and pre-loaded.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;native/src&lt;/code&gt; directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;sqlite3&lt;/code&gt; binary at &lt;code&gt;dist/sqlite3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you&#39;ve installed depenencies via &lt;code&gt;pnpm isntall&lt;/code&gt; in the root director then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run all tests across native, js &amp;amp; python packages.&lt;/p&gt; &#xA;&lt;h2&gt;WASM&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pnpm build&lt;/code&gt; from the root directory.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt;, not npm.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Prior Art&lt;/h1&gt; &#xA;&lt;h2&gt;[1] Towards a General Database Management System of Conflict-Free Replicated Relations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://munin.uit.no/bitstream/handle/10037/22344/thesis.pdf?sequence=2&#34;&gt;https://munin.uit.no/bitstream/handle/10037/22344/thesis.pdf?sequence=2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crsqlite&lt;/code&gt; improves upon [1] in the following ways --&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] stores two copies of all the data. &lt;code&gt;crsqlite&lt;/code&gt; only keeps one by leveraging views and &lt;code&gt;ISNTEAD OF&lt;/code&gt; triggers.&lt;/li&gt; &#xA; &lt;li&gt;[1] cannot compute deltas between databases without sending the full copy of each database to be compared. &lt;code&gt;crsqlite&lt;/code&gt; only needs the logical clock (1 64bit int per peer) of a given database to determine what updates that database is missing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;[2] Conflict-Free Replicated Relations for Multi-Synchronous Database Management at Edge&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hal.inria.fr/hal-02983557/document&#34;&gt;https://hal.inria.fr/hal-02983557/document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crsqlite&lt;/code&gt; improves upon [2] in the following ways --&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2] is implemented in a specific ORM. &lt;code&gt;crsqlite&lt;/code&gt; runs at the db layer and allows existing applications to interface with the db as normal.&lt;/li&gt; &#xA; &lt;li&gt;[2] keeps a queue of all writes. This queue is drained when those writes are merged. This means that [2] can only sync changes to a single centralized node. &lt;code&gt;crsqlite&lt;/code&gt; keeps a logical clock at each database. If a new database comes online it sends its logical clock to a peer. That peer can compute what changes are missing from the clock.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;[3] CRDTs for Mortals&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DEcwa68f-jY&#34;&gt;https://www.youtube.com/watch?v=DEcwa68f-jY&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crsqlite&lt;/code&gt; improves upon [3] in the following ways --&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[3] requires retaining all history for all time (iiuc), &lt;code&gt;crsqlite&lt;/code&gt; only needs the latest state&lt;/li&gt; &#xA; &lt;li&gt;[3] keeps a hloc per column, &lt;code&gt;crsqlite&lt;/code&gt; only keeps an extra int per column and a clock per row.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[3] is better in the following way --&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;crsqlite&lt;/code&gt; requires more work at the network layer to ensure ordered delivery and to deliver only the columns of a row that changed. [3] doesn&#39;t require any causal order to delivery and already identifies single column changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped improve my understanding of CRDTs on this journey --&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dglittle/shelf&#34;&gt;shelf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/siliconjungle/tiny-merge&#34;&gt;tiny-merge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2004.00107.pdf&#34;&gt;Merkle-CRDT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Schema Design for CRDTs &amp;amp; Eventual Consistency&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;crsqlite&lt;/code&gt; currently does not support:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Foreign key cosntraints. You can still have foreign keys (i.e. a column with an id of another row), but they can&#39;t be enforced by the db. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;TODO: discuss design alternatives and why this is actually not a bad thing when considering row level security.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Uniqueness constraints other than the primary key. The only enforceably unique column in a table should be the primary key. Other columns may be indices but they may not be unique. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;TODO: discuss this in much more detail.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: prior art [1] &amp;amp; [2] claim to support foreign key and uniqueness constraints. I believe their approach may be unsound and result in update loops and have not incoroprated it into &lt;code&gt;crsqlite&lt;/code&gt; yet. If I&#39;m wrong, I&#39;ll gladly fold their approach in.&lt;/p&gt; &#xA;&lt;h1&gt;Architecture&lt;/h1&gt; &#xA;&lt;h2&gt;Tables&lt;/h2&gt; &#xA;&lt;p&gt;Tables are modeled as &lt;a href=&#34;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type#G-Set_(Grow-only_Set)&#34;&gt;GSets&lt;/a&gt; where each item has a &lt;a href=&#34;https://munin.uit.no/bitstream/handle/10037/19591/article.pdf?sequence=2&#34;&gt;causal length&lt;/a&gt;. You can call this a &#34;CLSet&#34;. This allows us to keep all rows as well as track deletes so your application will not see deleted rows.&lt;/p&gt; &#xA;&lt;h2&gt;Rows&lt;/h2&gt; &#xA;&lt;p&gt;Rows are currently modeled as &lt;a href=&#34;https://bartoszsypytkowski.com/crdt-map/#crdtmapwithlastwritewinsupdates&#34;&gt;LWW maps&lt;/a&gt;. I.e., each column in a row is a &lt;a href=&#34;https://bartoszsypytkowski.com/operation-based-crdts-registers-and-sets/#lastwritewinsregister&#34;&gt;LWW Register&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Things to support in the future&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;counter columns&lt;/li&gt; &#xA; &lt;li&gt;MVR (multi-value register) columns&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deltas&lt;/h2&gt; &#xA;&lt;p&gt;Deltas between databases are calculated by each database keeping a &lt;a href=&#34;https://en.wikipedia.org/wiki/Version_vector&#34;&gt;version vector&lt;/a&gt; that represents the last time it synced with a given peer.&lt;/p&gt; &#xA;&lt;p&gt;Every row and column in the database is associated with a &lt;a href=&#34;https://tantaman.com/2022-10-18-lamport-sufficient-for-lww.html&#34;&gt;lamport timestamp&lt;/a&gt;. This clock allows peers to ask one another for updates since the last time they communicated.&lt;/p&gt; &#xA;&lt;h1&gt;Future&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sharing &amp;amp; Privacy -- in a real-world collaborative scenario, you may not want to share your entire database with other peers. Thus, in addition to clock information, we must keep visibility information to use when computing deltas and doing replication.&lt;/li&gt; &#xA; &lt;li&gt;Byzantine fault tolerance -- &lt;code&gt;crsqlite&lt;/code&gt; currently assumes friendly actors. We need to guard against malicious updates.&lt;/li&gt; &#xA; &lt;li&gt;Subselects -- peers may want to sync subsets of the database even if they have access to the entire thing. Compute deltas but only send those deltas that fall into the peer&#39;s provided query.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example Use Case&lt;/h1&gt; &#xA;&lt;p&gt;Say we have a databse schema called &#34;Animal App.&#34; Alice, Bob and Billy all have local copies of &#34;Animal App&#34; on their devices. They start their day at a hostel with all of their devices synced. They then part ways, backpacking into the wilderness each with their own copy of the db.&lt;/p&gt; &#xA;&lt;p&gt;As they see different (or maybe even the same) animals, they record their observations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Name&lt;/li&gt; &#xA; &lt;li&gt;Genus&lt;/li&gt; &#xA; &lt;li&gt;Species&lt;/li&gt; &#xA; &lt;li&gt;Habitat&lt;/li&gt; &#xA; &lt;li&gt;Diet&lt;/li&gt; &#xA; &lt;li&gt;Etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some observations may even involve making updates to the prior day&#39;s (or week&#39;s) observations written by other members of the party.&lt;/p&gt; &#xA;&lt;p&gt;At the end of the day, the group comes back together. They need to merge all of their work. &lt;code&gt;crsqlite&lt;/code&gt; will allow Alice, Bob and Billy to merge their changes (without conflict) in a p2p fashion and converge to the same state.&lt;/p&gt; &#xA;&lt;p&gt;Note that &#34;without conflict&#34; would be based on the rules of the selected &lt;code&gt;CRDTs&lt;/code&gt; used within the schema.&lt;/p&gt; &#xA;&lt;p&gt;Some example are --&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tables might be &lt;a href=&#34;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type#G-Set_(Grow-only_Set)&#34;&gt;grow only sets&lt;/a&gt; -- thus never losing an observation. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Or &lt;a href=&#34;https://www.youtube.com/watch?v=l4JxlK8Qzvs&#34;&gt;sets with a causal length&lt;/a&gt; so we can safely remove rows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Table columns might be last write win (LWW) registers -- converging but throwing out earlier writes&lt;/li&gt; &#xA; &lt;li&gt;Table columns might be multi value (MV) registers -- keeping around all concurrent edits to a single column for users (or code) to pick and merge later.&lt;/li&gt; &#xA; &lt;li&gt;A column might be a &lt;a href=&#34;https://www.cs.utexas.edu/~rossbach/cs380p-fall2019/papers/Counters.html&#34;&gt;counter CRDT&lt;/a&gt; which accumulates all observations from all parties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Old Design&lt;/h1&gt; &#xA;&lt;p&gt;A description of the original design. Note that this design was only used for the prototype and we&#39;ve evolved it for the production version -- &lt;a href=&#34;https://www.loom.com/share/0934f93364d340e0ba658146a974edb4&#34;&gt;&lt;img src=&#34;https://cdn.loom.com/sessions/thumbnails/0934f93364d340e0ba658146a974edb4-with-play.gif&#34; alt=&#34;loom&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libfuse/libfuse</title>
    <updated>2022-11-18T01:31:13Z</updated>
    <id>tag:github.com,2022-11-18:/libfuse/libfuse</id>
    <link href="https://github.com/libfuse/libfuse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The reference implementation of the Linux FUSE (Filesystem in Userspace) interface&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libfuse&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;FUSE (Filesystem in Userspace) is an interface for userspace programs to export a filesystem to the Linux kernel. The FUSE project consists of two components: the &lt;em&gt;fuse&lt;/em&gt; kernel module (maintained in the regular kernel repositories) and the &lt;em&gt;libfuse&lt;/em&gt; userspace library (maintained in this repository). libfuse provides the reference implementation for communicating with the FUSE kernel module.&lt;/p&gt; &#xA;&lt;p&gt;A FUSE file system is typically implemented as a standalone application that links with libfuse. libfuse provides functions to mount the file system, unmount it, read requests from the kernel, and send responses back. libfuse offers two APIs: a &#34;high-level&#34;, synchronous API, and a &#34;low-level&#34; asynchronous API. In both cases, incoming requests from the kernel are passed to the main program using callbacks. When using the high-level API, the callbacks may work with file names and paths instead of inodes, and processing of a request finishes when the callback function returns. When using the low-level API, the callbacks must work with inodes and responses must be sent explicitly using a separate set of API functions.&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;libfuse is shipped by all major Linux distributions and has been in production use across a wide range of systems for many years. However, at present libfuse does not have any active, regular contributors. The current maintainer continues to apply pull requests and makes regular releases, but unfortunately has no capacity to do any development beyond addressing high-impact issues. When reporting bugs, please understand that unless you are including a pull request or are reporting a critical issue, you will probably not get a response. If you are using libfuse, please consider contributing to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (fully)&lt;/li&gt; &#xA; &lt;li&gt;BSD (mostly/best-effort)&lt;/li&gt; &#xA; &lt;li&gt;For OS-X, please use &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;OSXFUSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download libfuse from &lt;a href=&#34;https://github.com/libfuse/libfuse/releases&#34;&gt;https://github.com/libfuse/libfuse/releases&lt;/a&gt;. To build and install, you must use &lt;a href=&#34;http://mesonbuild.com/&#34;&gt;Meson&lt;/a&gt; and &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt;. After extracting the libfuse tarball, create a (temporary) build directory and run Meson:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build; cd build&#xA;$ meson ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normally, the default build options will work fine. If you nevertheless want to adjust them, you can do so with the &lt;em&gt;meson configure&lt;/em&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ meson configure # list options&#xA;$ meson configure -D disable-mtab=true # set an option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build, test, and install libfuse, you then use Ninja:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ninja&#xA;$ sudo python3 -m pytest test/&#xA;$ sudo ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the tests requires the &lt;a href=&#34;http://www.pytest.org/&#34;&gt;py.test&lt;/a&gt; Python module. Instead of running the tests as root, the majority of tests can also be run as a regular user if &lt;em&gt;util/fusermount3&lt;/em&gt; is made setuid root first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo chown root:root util/fusermount3&#xA;$ sudo chmod 4755 util/fusermount3&#xA;$ python3 -m pytest test/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security implications&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;fusermount3&lt;/em&gt; program is installed setuid root. This is done to allow normal users to mount their own filesystem implementations.&lt;/p&gt; &#xA;&lt;p&gt;To limit the harm that malicious users can do this way, &lt;em&gt;fusermount3&lt;/em&gt; enforces the following limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The user can only mount on a mountpoint for which they have write permission&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The mountpoint must not be a sticky directory which isn&#39;t owned by the user (like /tmp usually is)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No other user (including root) can access the contents of the mounted filesystem (though this can be relaxed by allowing the use of the &lt;em&gt;allow_other&lt;/em&gt; and &lt;em&gt;allow_root&lt;/em&gt; mount options in &lt;em&gt;/etc/fuse.conf&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you intend to use the &lt;em&gt;allow_other&lt;/em&gt; mount options, be aware that FUSE has an unresolved &lt;a href=&#34;https://github.com/libfuse/libfuse/issues/15&#34;&gt;security bug&lt;/a&gt;: if the &lt;em&gt;default_permissions&lt;/em&gt; mount option is not used, the results of the first permission check performed by the file system for a directory entry will be re-used for subsequent accesses as long as the inode of the accessed entry is present in the kernel cache - even if the permissions have since changed, and even if the subsequent access is made by a different user. This is of little concern if the filesystem is accessible only to the mounting user (which has full access to the filesystem anyway), but becomes a security issue when other users are allowed to access the filesystem (since they can exploit this to perform operations on the filesystem that they do not actually have permissions for).&lt;/p&gt; &#xA;&lt;p&gt;This bug needs to be fixed in the Linux kernel and has been known since 2006 but unfortunately no fix has been applied yet. If you depend on correct permission handling for FUSE file systems, the only workaround is to use &lt;code&gt;default_permissions&lt;/code&gt; (which does not currently support ACLs), or to completely disable caching of directory entry attributes.&lt;/p&gt; &#xA;&lt;h2&gt;Building your own filesystem&lt;/h2&gt; &#xA;&lt;p&gt;FUSE comes with several example file systems in the &lt;code&gt;example&lt;/code&gt; directory. For example, the &lt;em&gt;passthrough&lt;/em&gt; examples mirror the contents of the root directory under the mountpoint. Start from there and adapt the code!&lt;/p&gt; &#xA;&lt;p&gt;The documentation of the API functions and necessary callbacks is mostly contained in the files &lt;code&gt;include/fuse.h&lt;/code&gt; (for the high-level API) and &lt;code&gt;include/fuse_lowlevel.h&lt;/code&gt; (for the low-level API). An autogenerated html version of the API is available in the &lt;code&gt;doc/html&lt;/code&gt; directory and at &lt;a href=&#34;http://libfuse.github.io/doxygen&#34;&gt;http://libfuse.github.io/doxygen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need help, please ask on the &lt;a href=&#34;mailto:fuse-devel@lists.sourceforge.net&#34;&gt;fuse-devel@lists.sourceforge.net&lt;/a&gt; mailing list (subscribe at &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/fuse-devel&#34;&gt;https://lists.sourceforge.net/lists/listinfo/fuse-devel&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs on the GitHub issue tracker at &lt;a href=&#34;https://github.com/libfuse/libfuse/issues&#34;&gt;https://github.com/libfuse/libfuse/issues&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tomasz-lisowski/swsim</title>
    <updated>2022-11-18T01:31:13Z</updated>
    <id>tag:github.com,2022-11-18:/tomasz-lisowski/swsim</id>
    <link href="https://github.com/tomasz-lisowski/swsim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A software-only SIM card.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swSIM&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Project &lt;strong&gt;needs&lt;/strong&gt; to be cloned recursively. Downloading the ZIP is not enough.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;swSIM is an all-software SIM card. It&#39;s the first publicly available (to the best of my knowledge) SIM card simulator which does not rely on any SIM hardware to work.&lt;/p&gt; &#xA;&lt;h2&gt;Scope&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A software-only SIM card simulator.&lt;/li&gt; &#xA; &lt;li&gt;It does &lt;strong&gt;NOT&lt;/strong&gt; depend on any hardware to work.&lt;/li&gt; &#xA; &lt;li&gt;Can connect to the PC via PC/SC using the &lt;a href=&#34;https://github.com/tomasz-lisowski/swicc-drv-ifd&#34;&gt;swICC PC/SC reader&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The PC/SC interface allows it to connect to &lt;strong&gt;ANY&lt;/strong&gt; phone with a SIM card slot. We used the &lt;a href=&#34;https://osmocom.org/projects/simtrace2/wiki&#34;&gt;SIMtrace 2&lt;/a&gt; device running on the &lt;a href=&#34;https://osmocom.org/projects/simtrace2/wiki#card-emulation&#34;&gt;cardem firmware&lt;/a&gt; but any other tool which forwards messages to and from the phone would work as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt; to compile the project. No extra runtime dependencies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt-get install make gcc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/tomasz-lisowski/swsim.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd swsim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make main-dbg&lt;/code&gt; (for more info on building, take a look at &lt;code&gt;./doc/install.md&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a swICC card server, e.g., &lt;a href=&#34;https://github.com/tomasz-lisowski/swicc-drv-ifd&#34;&gt;swICC PC/SC reader&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./build/swsim.elf --ip 127.0.0.1 --port 37324 --fs filesystem.swicc --fs-gen ./data/usim.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pcsc_scan&lt;/code&gt; (part of the &lt;code&gt;pcsc-tools&lt;/code&gt; package) will show some details of the card.&lt;/li&gt; &#xA; &lt;li&gt;You can interact with the card as you would with a real card attached to a hardware card reader.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>