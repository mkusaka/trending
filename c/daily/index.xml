<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-25T01:31:05Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Heersin/netwhale</title>
    <updated>2023-05-25T01:31:05Z</updated>
    <id>tag:github.com,2023-05-25:/Heersin/netwhale</id>
    <link href="https://github.com/Heersin/netwhale" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Listen to network&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;netwhale&lt;/h1&gt; &#xA;&lt;p&gt;Netwhale is a Linux tool to capture packets and process it to audio sound. It sounds like whale talking in the ocean of network.&lt;/p&gt; &#xA;&lt;h2&gt;Backgroud&lt;/h2&gt; &#xA;&lt;p&gt;Once upon a time, I read the《Expert C Programming: Deep C Secrets》. Like those curious adventurers in those old tales, I was attracted by this sentence: &#34;solaris has a tool to listen the sound of network packets&#34;, I didn&#39;t find it in my virtual machine, so I implement netwhale.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;ping from local machine（github do not support the &#34;audio&#34; tag, plz click this &lt;a href=&#34;http://194.135.93.72/2020/05/01/netwhale/#%E4%BB%A3%E7%A0%81%E5%92%8C%E7%A4%BA%E4%BE%8B&#34;&gt;link&lt;/a&gt; ） &#xA; &lt;audio id=&#34;audio&#34; controls=&#34;&#34; preload=&#34;none&#34;&gt; &#xA;  &lt;source id=&#34;mp3&#34; src=&#34;https://github.com/Heersin/netwhale/example/ping_AAC.mp4&#34;&gt; &#xA; &lt;/audio&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;p&gt;Before install this project, the following libirary is required.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libpcap&lt;/li&gt; &#xA; &lt;li&gt;libao&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;you can run the command to test if libao is succesfully installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make makeaudio &amp;amp;&amp;amp; make clean&#xA;./little_star&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will play a short music.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone &#xA;make &amp;amp;&amp;amp; make clean &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;use -h to show the Usage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;-f [bpf statement] : Use Filter in packet capturing, it&#39;s optional,default capture all packets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;-i [interface name] : Use which card, you can find your network interface by using &#39;ifconfig&#39;, it&#39;s optional but should work with -t&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;-t [link layer type] : If you know the type of your link layer, set this, default as Ethernet, The Type code as Follows:&lt;br&gt; [1] Ethernet -- 0x00&lt;br&gt; [2] WLAN 802.11 -- 0x01&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;-h : this help page&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;-lx : contains l2, l3, l4, l5, design to filter the audio, such as &#39;-l3&#39; only listen to network layer, not implement yet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Heersin/netwhale/raw/master/example/netwhale.jpg&#34; alt=&#34;Arch&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;netwhale&#xA;    |------dispatch.c : handle diffrent layer and send packet to parse.&#xA;    |------main.c : Main Logic&#xA;    |------parse.c : handle protocol header and proc to sound&#xA;    |------utils.c : some utils in this project&#xA;    |------little_star.c : libao demo&#xA;    |------makefile : make this project&#xA;    |------makeaudio : make test for libao&#xA;    |------....(header files)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to write new rules to convert packet to music.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libarchive/libarchive</title>
    <updated>2023-05-25T01:31:05Z</updated>
    <id>tag:github.com,2023-05-25:/libarchive/libarchive</id>
    <link href="https://github.com/libarchive/libarchive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-format archive and compression library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to libarchive!&lt;/h1&gt; &#xA;&lt;p&gt;The libarchive project develops a portable, efficient C library that can read and write streaming archives in a variety of formats. It also includes implementations of the common &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;cpio&lt;/code&gt;, and &lt;code&gt;zcat&lt;/code&gt; command-line tools that use the libarchive library.&lt;/p&gt; &#xA;&lt;h2&gt;Questions? Issues?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.libarchive.org&#34;&gt;http://www.libarchive.org&lt;/a&gt; is the home for ongoing libarchive development, including documentation, and links to the libarchive mailing lists.&lt;/li&gt; &#xA; &lt;li&gt;To report an issue, use the issue tracker at &lt;a href=&#34;https://github.com/libarchive/libarchive/issues&#34;&gt;https://github.com/libarchive/libarchive/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To submit an enhancement to libarchive, please submit a pull request via GitHub: &lt;a href=&#34;https://github.com/libarchive/libarchive/pulls&#34;&gt;https://github.com/libarchive/libarchive/pulls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents of the Distribution&lt;/h2&gt; &#xA;&lt;p&gt;This distribution bundle includes the following major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;libarchive&lt;/strong&gt;: a library for reading and writing streaming archives&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tar&lt;/strong&gt;: the &#39;bsdtar&#39; program is a full-featured &#39;tar&#39; implementation built on libarchive&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cpio&lt;/strong&gt;: the &#39;bsdcpio&#39; program is a different interface to essentially the same functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt;: the &#39;bsdcat&#39; program is a simple replacement tool for zcat, bzcat, xzcat, and such&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;examples&lt;/strong&gt;: Some small example programs that you may find useful.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;examples/minitar&lt;/strong&gt;: a compact sample demonstrating use of libarchive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;contrib&lt;/strong&gt;: Various items sent to me by third parties; please contact the authors with any questions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The top-level directory contains the following information files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEWS&lt;/strong&gt; - highlights of recent changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;COPYING&lt;/strong&gt; - what you can do with this&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;INSTALL&lt;/strong&gt; - installation instructions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;README&lt;/strong&gt; - this file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMakeLists.txt&lt;/strong&gt; - input for &#34;cmake&#34; build tool, see INSTALL&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;configure&lt;/strong&gt; - configuration script, see INSTALL for details. If your copy of the source lacks a &lt;code&gt;configure&lt;/code&gt; script, you can try to construct it by running the script in &lt;code&gt;build/autogen.sh&lt;/code&gt; (or use &lt;code&gt;cmake&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following files in the top-level directory are used by the &#39;configure&#39; script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Makefile.am&lt;/code&gt;, &lt;code&gt;aclocal.m4&lt;/code&gt;, &lt;code&gt;configure.ac&lt;/code&gt; - used to build this distribution, only needed by maintainers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Makefile.in&lt;/code&gt;, &lt;code&gt;config.h.in&lt;/code&gt; - templates used by configure script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the informational articles and documentation in the online &lt;a href=&#34;https://github.com/libarchive/libarchive/wiki&#34;&gt;libarchive Wiki&lt;/a&gt;, the distribution also includes a number of manual pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bsdtar.1 explains the use of the bsdtar program&lt;/li&gt; &#xA; &lt;li&gt;bsdcpio.1 explains the use of the bsdcpio program&lt;/li&gt; &#xA; &lt;li&gt;bsdcat.1 explains the use of the bsdcat program&lt;/li&gt; &#xA; &lt;li&gt;libarchive.3 gives an overview of the library as a whole&lt;/li&gt; &#xA; &lt;li&gt;archive_read.3, archive_write.3, archive_write_disk.3, and archive_read_disk.3 provide detailed calling sequences for the read and write APIs&lt;/li&gt; &#xA; &lt;li&gt;archive_entry.3 details the &#34;struct archive_entry&#34; utility class&lt;/li&gt; &#xA; &lt;li&gt;archive_internals.3 provides some insight into libarchive&#39;s internal structure and operation.&lt;/li&gt; &#xA; &lt;li&gt;libarchive-formats.5 documents the file formats supported by the library&lt;/li&gt; &#xA; &lt;li&gt;cpio.5, mtree.5, and tar.5 provide detailed information about these popular archive formats, including hard-to-find details about modern cpio and tar variants.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The manual pages above are provided in the &#39;doc&#39; directory in a number of different formats.&lt;/p&gt; &#xA;&lt;p&gt;You should also read the copious comments in &lt;code&gt;archive.h&lt;/code&gt; and the source code for the sample programs for more details. Please let us know about any errors or omissions you find.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Formats&lt;/h2&gt; &#xA;&lt;p&gt;Currently, the library automatically detects and reads the following formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Old V7 tar archives&lt;/li&gt; &#xA; &lt;li&gt;POSIX ustar&lt;/li&gt; &#xA; &lt;li&gt;GNU tar format (including GNU long filenames, long link names, and sparse files)&lt;/li&gt; &#xA; &lt;li&gt;Solaris 9 extended tar format (including ACLs)&lt;/li&gt; &#xA; &lt;li&gt;POSIX pax interchange format&lt;/li&gt; &#xA; &lt;li&gt;POSIX octet-oriented cpio&lt;/li&gt; &#xA; &lt;li&gt;SVR4 ASCII cpio&lt;/li&gt; &#xA; &lt;li&gt;Binary cpio (big-endian or little-endian)&lt;/li&gt; &#xA; &lt;li&gt;PWB binary cpio&lt;/li&gt; &#xA; &lt;li&gt;ISO9660 CD-ROM images (with optional Rockridge or Joliet extensions)&lt;/li&gt; &#xA; &lt;li&gt;ZIP archives (with uncompressed or &#34;deflate&#34; compressed entries, including support for encrypted Zip archives)&lt;/li&gt; &#xA; &lt;li&gt;ZIPX archives (with support for bzip2, ppmd8, lzma and xz compressed entries)&lt;/li&gt; &#xA; &lt;li&gt;GNU and BSD &#39;ar&#39; archives&lt;/li&gt; &#xA; &lt;li&gt;&#39;mtree&#39; format&lt;/li&gt; &#xA; &lt;li&gt;7-Zip archives&lt;/li&gt; &#xA; &lt;li&gt;Microsoft CAB format&lt;/li&gt; &#xA; &lt;li&gt;LHA and LZH archives&lt;/li&gt; &#xA; &lt;li&gt;RAR and RAR 5.0 archives (with some limitations due to RAR&#39;s proprietary status)&lt;/li&gt; &#xA; &lt;li&gt;XAR archives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library also detects and handles any of the following before evaluating the archive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uuencoded files&lt;/li&gt; &#xA; &lt;li&gt;files with RPM wrapper&lt;/li&gt; &#xA; &lt;li&gt;gzip compression&lt;/li&gt; &#xA; &lt;li&gt;bzip2 compression&lt;/li&gt; &#xA; &lt;li&gt;compress/LZW compression&lt;/li&gt; &#xA; &lt;li&gt;lzma, lzip, and xz compression&lt;/li&gt; &#xA; &lt;li&gt;lz4 compression&lt;/li&gt; &#xA; &lt;li&gt;lzop compression&lt;/li&gt; &#xA; &lt;li&gt;zstandard compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library can create archives in any of the following formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;POSIX ustar&lt;/li&gt; &#xA; &lt;li&gt;POSIX pax interchange format&lt;/li&gt; &#xA; &lt;li&gt;&#34;restricted&#34; pax format, which will create ustar archives except for entries that require pax extensions (for long filenames, ACLs, etc).&lt;/li&gt; &#xA; &lt;li&gt;Old GNU tar format&lt;/li&gt; &#xA; &lt;li&gt;Old V7 tar format&lt;/li&gt; &#xA; &lt;li&gt;POSIX octet-oriented cpio&lt;/li&gt; &#xA; &lt;li&gt;SVR4 &#34;newc&#34; cpio&lt;/li&gt; &#xA; &lt;li&gt;Binary cpio (little-endian)&lt;/li&gt; &#xA; &lt;li&gt;PWB binary cpio&lt;/li&gt; &#xA; &lt;li&gt;shar archives&lt;/li&gt; &#xA; &lt;li&gt;ZIP archives (with uncompressed or &#34;deflate&#34; compressed entries)&lt;/li&gt; &#xA; &lt;li&gt;GNU and BSD &#39;ar&#39; archives&lt;/li&gt; &#xA; &lt;li&gt;&#39;mtree&#39; format&lt;/li&gt; &#xA; &lt;li&gt;ISO9660 format&lt;/li&gt; &#xA; &lt;li&gt;7-Zip archives&lt;/li&gt; &#xA; &lt;li&gt;XAR archives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When creating archives, the result can be filtered with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uuencode&lt;/li&gt; &#xA; &lt;li&gt;gzip compression&lt;/li&gt; &#xA; &lt;li&gt;bzip2 compression&lt;/li&gt; &#xA; &lt;li&gt;compress/LZW compression&lt;/li&gt; &#xA; &lt;li&gt;lzma, lzip, and xz compression&lt;/li&gt; &#xA; &lt;li&gt;lz4 compression&lt;/li&gt; &#xA; &lt;li&gt;lzop compression&lt;/li&gt; &#xA; &lt;li&gt;zstandard compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes about the Library Design&lt;/h2&gt; &#xA;&lt;p&gt;The following notes address many of the most common questions we are asked about libarchive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is a heavily stream-oriented system. That means that it is optimized to read or write the archive in a single pass from beginning to end. For example, this allows libarchive to process archives too large to store on disk by processing them on-the-fly as they are read from or written to a network or tape drive. This also makes libarchive useful for tools that need to produce archives on-the-fly (such as webservers that provide archived contents of a users account).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In-place modification and random access to the contents of an archive are not directly supported. For some formats, this is not an issue: For example, tar.gz archives are not designed for random access. In some other cases, libarchive can re-open an archive and scan it from the beginning quickly enough to provide the needed abilities even without true random access. Of course, some applications do require true random access; those applications should consider alternatives to libarchive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The library is designed to be extended with new compression and archive formats. The only requirement is that the format be readable or writable as a stream and that each archive entry be independent. There are articles on the libarchive Wiki explaining how to extend libarchive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On read, compression and format are always detected automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The same API is used for all formats; it should be very easy for software using libarchive to transparently handle any of libarchive&#39;s archiving formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Libarchive&#39;s automatic support for decompression can be used without archiving by explicitly selecting the &#34;raw&#34; and &#34;empty&#34; formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I&#39;ve attempted to minimize static link pollution. If you don&#39;t explicitly invoke a particular feature (such as support for a particular compression or format), it won&#39;t get pulled in to statically-linked programs. In particular, if you don&#39;t explicitly enable a particular compression or decompression support, you won&#39;t need to link against the corresponding compression or decompression libraries. This also reduces the size of statically-linked binaries in environments where that matters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The library is generally &lt;em&gt;thread safe&lt;/em&gt; depending on the platform: it does not define any global variables of its own. However, some platforms do not provide fully thread-safe versions of key C library functions. On those platforms, libarchive will use the non-thread-safe functions. Patches to improve this are of great interest to us.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In particular, libarchive&#39;s modules to read or write a directory tree do use &lt;code&gt;chdir()&lt;/code&gt; to optimize the directory traversals. This can cause problems for programs that expect to do disk access from multiple threads. Of course, those modules are completely optional and you can use the rest of libarchive without them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The library is &lt;em&gt;not&lt;/em&gt; thread aware, however. It does no locking or thread management of any kind. If you create a libarchive object and need to access it from multiple threads, you will need to provide your own locking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On read, the library accepts whatever blocks you hand it. Your read callback is free to pass the library a byte at a time or mmap the entire archive and give it to the library at once. On write, the library always produces correctly-blocked output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The object-style approach allows you to have multiple archive streams open at once. bsdtar uses this in its &#34;@archive&#34; extension.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The archive itself is read/written using callback functions. You can read an archive directly from an in-memory buffer or write it to a socket, if you wish. There are some utility functions to provide easy-to-use &#34;open file,&#34; etc, capabilities.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The read/write APIs are designed to allow individual entries to be read or written to any data source: You can create a block of data in memory and add it to a tar archive without first writing a temporary file. You can also read an entry from an archive and write the data directly to a socket. If you want to read/write entries to disk, there are convenience functions to make this especially easy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note: The &#34;pax interchange format&#34; is a POSIX standard extended tar format that should be used when the older &lt;em&gt;ustar&lt;/em&gt; format is not appropriate. It has many advantages over other tar formats (including the legacy GNU tar format) and is widely supported by current tar implementations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ThusSpokeNomad/GameNetworkingResources</title>
    <updated>2023-05-25T01:31:05Z</updated>
    <id>tag:github.com,2023-05-25:/ThusSpokeNomad/GameNetworkingResources</id>
    <link href="https://github.com/ThusSpokeNomad/GameNetworkingResources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Curated List of Game Network Programming Resources&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThusSpokeNomad/GameNetworkingResources/master/#readme&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ThusSpokeNomad/GameNetworkingResources/master/BANNER.png&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Game networking is a subset of computer networking that commonly covers transport protocols, data replication, entity synchronization, lag compensation, client-side prediction, server reconciliation, interest management, bandwidth optimization, physics rollback/fastforward simulation, anti-cheating and many other areas involved in multiplayer online game development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please feel free to contribute with your awesome resource as well, thank you!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Jump:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ThusSpokeNomad/GameNetworkingResources/master/#articles&#34;&gt;Articles&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ThusSpokeNomad/GameNetworkingResources/master/#talks&#34;&gt;Talks&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ThusSpokeNomad/GameNetworkingResources/master/#libraries&#34;&gt;Libraries&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ThusSpokeNomad/GameNetworkingResources/master/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gamedeveloper.com/programming/1500-archers-on-a-28-8-network-programming-in-age-of-empires-and-beyond&#34;&gt;1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond&lt;/a&gt; - Mark Terrano, Paul Bettner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20210415231950/https://heroiclabs.com/docs/expert-tcp-udp/&#34;&gt;Choosing TCP or UDP: a guide for game developers&lt;/a&gt; - Basic TCP vs UDP comparison by Heroic Labs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.halowaypoint.com/news/closer-look-halo-infinite-online-experience&#34;&gt;Close Look: Halo Infinite&#39;s Online Experience&lt;/a&gt; - Discussing netcode issues and mitigations by Richard Watson.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.istrolid.com/blog/dont-use-lockstep-in-rts-games.html&#34;&gt;Don&#39;t use Lockstep in RTS games&lt;/a&gt; - Comparing Lockstep vs Client-Server Networking Models for RTS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20191231135556/https://na.leagueoflegends.com/en/page/ethernet-vs-wifi-ping-packets-playing-better&#34;&gt;Ethernet vs. WiFi&lt;/a&gt; - Connection over WiFi vs Ethernet metrics comparison by Viscarious from Riot Games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arstechnica.com/gaming/2019/10/explaining-how-fighting-games-use-delay-based-and-rollback-netcode/&#34;&gt;Explaining Delay-based and Rollback Netcode&lt;/a&gt; - Rollback netcode for fighting games by Ricky Pusch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gabrielgambetta.com/client-server-game-architecture.html&#34;&gt;Fast-Paced Multiplayer&lt;/a&gt; - Prediction, reconciliation, interpolation and compensation by Gabriel Gambetta.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ki.infil.net/w02-netcode.html&#34;&gt;Fightin&#39; Words, Netcode&lt;/a&gt; - Articles explaining how fighting games use delay-based and rollback netcode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1cV0fY8e_SC1hIFF5E1rT8XRVRzPjU8W9/view&#34;&gt;Fight The Lag! The Trick Behind GGPO&#39;s Low Latency Netcode&lt;/a&gt; - An explanation of GGPO by Tony Cannon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gafferongames.com/&#34;&gt;Gaffer on Games&lt;/a&gt; - Glenn Fiedler&#39;s reliable-UDP protocol and game network development articles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruoyusun.com/2019/03/28/game-networking-1.html&#34;&gt;Game Networking Demystified&lt;/a&gt; - Basic game networking terminology and concepts by Ruoyu Sun.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20210419133753/https://gameserverarchitecture.com/&#34;&gt;Game Server Architecture&lt;/a&gt; - Matthew Walker&#39;s multiplayer game server architecture blog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hpbn.co/&#34;&gt;High Performance Browser Networking&lt;/a&gt; - A free online book about modern web protocols by Ilya Grigorik.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotaku.com/5869564/networking-how-a-shooter-shoots&#34;&gt;How a Shooter Shoots&lt;/a&gt; - Armin Ronacher&#39;s analysis on Battlefield 3&#39;s shooting mechanism in multiplayer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ntnuopen.ntnu.no/ntnu-xmlui/bitstream/handle/11250/2352307/11752_FULLTEXT.pdf&#34;&gt;Impact Of Latency In Wireless Networks For Real-time Multiplayer Games On Mobile Devices&lt;/a&gt; - A paper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ithare.com/category/network-programming/&#34;&gt;IT Hare on Network Programming&lt;/a&gt; - Detailed network programming articles from IT Hare team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercidium.com/blog/lag-compensation/&#34;&gt;Lag Compensation - Fair Play for all Pings&lt;/a&gt; - An article explaining lag compensation by Mitchell Robinson.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://keithjohnston.wordpress.com/2014/02/17/nat-punch-through-for-multiplayer-games/&#34;&gt;NAT Punch-through for Multiplayer Games&lt;/a&gt; - NAT and P2P connectivity by Keith Johnston.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@geretti/netcode-at-super-bit-machine-multiplayer-first-7940aa0a9fa4&#34;&gt;Netcode at Super Bit Machine: Multiplayer First&lt;/a&gt; - Article series on ARMAJET&#39;s netcode stack by Nicola Geretti.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pcgamer.com/uk/netcode-explained/&#34;&gt;Netcode Explained&lt;/a&gt; - Game networking concepts with examples by Chris &#34;Battle(non)sense&#34; on PC Gamer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.oculus.com/blog/networked-physics-in-virtual-reality-networking-a-stack-of-cubes-with-unity-and-physx/&#34;&gt;Networked Physics in Virtual Reality&lt;/a&gt; - Networking a stack of cubes with Unity and PhysX by Glenn Fiedler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://longwelwind.net/blog/networking-turn-based-game/&#34;&gt;Networking of a turn-based game&lt;/a&gt; - Deterministic state synchronization netcode by Frédéric Kaczynski.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.destroyallsoftware.com/compendium/network-protocols?share_key=97d3ba4c24d21147&#34;&gt;Network Protocols&lt;/a&gt; - A brief overview of low-level network protocols stack from Destroy All Software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://technology.riotgames.com/news/peeking-valorants-netcode&#34;&gt;Peeking into Valorant&#39;s Netcode&lt;/a&gt; - Netcode overview and peeker&#39;s advantage by Matt deWet and David Straily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fabiensanglard.net/quake3/network.php&#34;&gt;Quake 3 Network Model&lt;/a&gt; - Fabien Sanglard&#39;s source code review about Quake 3&#39;s networking model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://buildnewgames.com/real-time-multiplayer/&#34;&gt;Real Time Multiplayer in HTML5&lt;/a&gt; - Sven Bergström&#39;s multiplayer game development on the web guide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0fps.net/2014/02/10/replication-in-networked-games-overview-part-1/&#34;&gt;Replication in Networked Games&lt;/a&gt; - Mikola Lysenko&#39;s replication articles for JavaScript-based multiplayer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.hypersect.com/rollback-networking-in-inversus/&#34;&gt;Rollback Networking in INVERSUS&lt;/a&gt; - Ryan Juckett&#39;s post on a peer-to-peer rollback system in multiplayer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking&#34;&gt;Source Multiplayer Networking&lt;/a&gt; - Valve&#39;s Source engine wiki including advanced game networking topics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gamedevs.org/uploads/introduction-to-sync-host.pdf&#34;&gt;Sync Host Overview&lt;/a&gt; - A slide deck covering Sync Host architecture by Peter Kao from Insomniac Games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-was-the-technology-stack-driving-the-original-Ultima-Online-servers&#34;&gt;Tech-Stack of the Ultima Online Servers&lt;/a&gt; - A summary of UO tech-stack by Raph Koster and Brian Crowder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.catb.org/esr/writings/quake-cheats.html&#34;&gt;The Case of the Quake Cheats&lt;/a&gt; - Security lessons from client-server model from Quake 1 by id Software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mrelusive.com/publications/papers/The-DOOM-III-Network-Architecture.pdf&#34;&gt;The DOOM III Network Architecture&lt;/a&gt; - Improvements on network architectures used in Quake III Arena.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://etodd.io/2018/02/20/poor-mans-netcode/&#34;&gt;The Poor Man&#39;s Netcode&lt;/a&gt; - Project code and detailed blog post about networking challenges by Evan Todd.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gamedevs.org/uploads/tribes-networking-model.pdf&#34;&gt;The TRIBES Engine Networking Model&lt;/a&gt; - Tribes I &amp;amp; II&#39;s networking model by Mark Frohnmayer and Tim Gift.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twotenpvp.github.io/lag-compensation-in-unity.html&#34;&gt;Tick Based Lag Compensation in Unity&lt;/a&gt; - Case scenario on shooting with better accuracy by Albin Corén.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.codersblock.org/blog/client-side-prediction-in-unity-2018&#34;&gt;Unity Physics and Client-Side Prediction&lt;/a&gt; - Demo project and how-to blog post by Joe Best-Rotheray.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.spacewavesoftware.com/gamedev/2017-10-28-unity-unet-hlapi-and-steam-p2p-networking/&#34;&gt;Unity UNET HLAPI and Steam P2P Networking&lt;/a&gt; - Example project and detailed blog post by Justin Rempel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1KGLbEfHsWANTTgUqfK6rkpFYDGvnZYj-BN18sxq6LPY&#34;&gt;Unreal Engine 1 Netcode&lt;/a&gt; - Historical paper on netcode in UE1 (and Unreal Tournament) by Tim Sweeney.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.unrealengine.com/udk/Three/ReplicationHome.html&#34;&gt;Unreal Engine 3 Networking &amp;amp; Replication&lt;/a&gt; - Historical UE3 game networking from the old wiki.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nafonso.com/home/unreal-framework-network&#34;&gt;Unreal Engine 4 Framework &amp;amp; Network&lt;/a&gt; - A look into Unreal game networking framework by Nuno Afonso.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cedric-neukirchen.net/Downloads/Compendium/UE4_Network_Compendium_by_Cedric_eXi_Neukirchen.pdf&#34;&gt;Unreal Engine 4 Network Compendium&lt;/a&gt; - A summary of Unreal game networking by Cedric Neukirchen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.unrealengine.com/en-us/Gameplay/Networking&#34;&gt;Unreal Engine 4 Networking and Multiplayer&lt;/a&gt; - Official UE4 game networking framework docs from the wiki.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://technology.riotgames.com/news/valorants-128-tick-servers&#34;&gt;Valorant&#39;s 128-Tick Servers&lt;/a&gt; - Server runtime optimization techniques in-depth by Brent Randall.&lt;/li&gt; &#xA; &lt;li&gt;RU &lt;a href=&#34;https://habr.com/ru/company/pixonic/blog/415959/&#34;&gt;Как мы писали сетевой код мобильного PvP шутера&lt;/a&gt; - Pixonic о клиенте в быстром шутере.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Talks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Game Developers Conference &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gdcvault.com/play/1016642/Half-Life-and-Team-Fortress&#34;&gt;2000 / Half-Life and Team Fortress Networking&lt;/a&gt; - Talk on backend network services by Yahn Bernier.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1012368/Building-the-Server-Software-for&#34;&gt;2010 / Building the Server Software for ELIMINATE&lt;/a&gt; - By Stephen Detwiler and James Marr.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1014886/Crysis-2-Multiplayer-A-Programmer&#34;&gt;2011 / Crysis 2 Multiplayer&lt;/a&gt; - A Programmer&#39;s Postmortem by Peter Hall from Crytek.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1014345/I-Shot-You-First-Networking&#34;&gt;2011 / I Shot You First&lt;/a&gt; - Gameplay networking in Halo: Reach by David Aldridge from Bungie.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1015609/Writing-Server-and-Network-Code&#34;&gt;2012 / Writing Server and Network Code for Your Online Game&lt;/a&gt; - Talk by Patrick Wyatt from En Masse.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1017733/Network-Serialization-and-Routing-in&#34;&gt;2013 / Network Serialization and Routing in World of Warcraft&lt;/a&gt; - Talk by Joe Rumsey from Blizzard.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1022195/Physics-for-Game-Programmers-Networking&#34;&gt;2015 / Game Networking for Physics Programmers&lt;/a&gt; - Talk by Glenn Fiedler from Respawn.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.gdcvault.com/play/1022168/Networking-Gameplay-and-AI-in&#34;&gt;2015 / Networking Gameplay and AI in Assassin&#39;s Creed Unity&lt;/a&gt; - Talk by Charles Lefebvre from Ubisoft.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gdcvault.com/play/1022246/Shared-World-Shooter-Destiny-s&#34;&gt;2015 / Shared World Shooter: Destiny&#39;s Networked Mission Architecture&lt;/a&gt; - By Justin Truman.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gdcvault.com/play/1022787/Stop-Copy-Paste-Networking&#34;&gt;2015 / Stop, Copy/Paste Networking &amp;amp; Innovate&lt;/a&gt; - Design approaches by Claire Blackshaw from Sony.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gdcvault.com/play/1023220/Fighting-Latency-on-Call-of&#34;&gt;2016 / Fighting Latency on Call of Duty Black Ops III&lt;/a&gt; - Talk by Benjamin Goyette from Activision.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zrIY0eIyqmI&#34;&gt;2017 / Overwatch Gameplay Architecture and Netcode&lt;/a&gt; - Timothy Ford on precise simulation with ECS.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=W4oZq4tn57w&#34;&gt;2017 / Replay Technology in Overwatch: Kill Cam, Gameplay, and Highlights&lt;/a&gt; - Talk by Philip Orwig.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ScyZjcjTlA4&#34;&gt;2017 / Networking Scripted Weapons and Abilities in Overwatch&lt;/a&gt; - Talk by Dan Reed from Blizzard.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_8A2gzRrWLk&#34;&gt;2017 / Replicating Chaos: Vehicle Replication in Watch Dogs 2&lt;/a&gt; - Replicating vehicle movement in P2P.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7jb0FOcImdg&#34;&gt;2018 / 8 Frames in 16ms&lt;/a&gt; - Rollback Networking in Mortal Kombat and Injustice 2 by Michael Stallone.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gdcvault.com/play/1024949/-For-Honor-From-a&#34;&gt;2018 / For Honor: From a Great Launch to Live Period&lt;/a&gt; - By Damien Kieken and Roman Campos Oriola.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gdcvault.com/play/1024972/It-IS-Rocket-Science-The&#34;&gt;2018 / It IS Rocket Science!&lt;/a&gt; - The physics and networking of Rocket League in details by Jared Cone.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://vimeo.com/335798361/2f90c04a30&#34;&gt;2019 / Quantum Deep Dive&lt;/a&gt; - Photon Quantum Network Engine for Unity by Eric from Exit Games.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unreal Engine Livestream &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CDnNAAzgltw&#34;&gt;Replication Graph&lt;/a&gt; - Epic&#39;s dev-team demonstrates UE 4.20&#39;s new Replication Graph feature.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mT8VUVuk-CY&#34;&gt;Server Optimizations&lt;/a&gt; - Ryan Gerleve and Dave Ratti to discuss server optimization techniques in UE4.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unreal Fest &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VusAHXoHF3Y&#34;&gt;EU 2019 / Replication Graph For Optimizing RTS Games&lt;/a&gt; - Talk by Nick Prühs from Deadalic.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unity Unite &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=x_4Y2-B-THo&#34;&gt;EU 2016 / Building a PvP focused MMO&lt;/a&gt; - Albion MMO architecture by David Salz from Sandbox.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Y1my5bKhKJY&#34;&gt;EU 2017 / Photon vs UNet&lt;/a&gt; - Netcode architecture comparison by Christof Wegmann from Exit Games.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k6JTaFE7SYI&#34;&gt;LA 2018 / Deep-Dive Into Networking for Unity&#39;s FPS Sample&lt;/a&gt; - Talk by Peter Andreasen from Unity.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=P_-FoJuaYOI&#34;&gt;EU 2019 / Intro to DOTS and Netcode&lt;/a&gt; - Networked future of Unity using DOTS by Tim Johansson.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1faaOrtHJ-A&#34;&gt;HandmadeCon 2015 / Pat Wyatt&lt;/a&gt; - Chat about Guild Wars, Diablo, StarCraft netcode by Pat Wyatt.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vTH2ZPgYujQ&#34;&gt;Overwatch / Let&#39;s Talk Netcode&lt;/a&gt; - Overwatch netcode by Tim Ford and Philip Orwig from Blizzard.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_Cu97mr7zcM&#34;&gt;Valorant / Netcode &amp;amp; 128-Servers&lt;/a&gt; - Some basic networking concepts in Valorant from Riot Games.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VVetqMgcN50&#34;&gt;Warframe / Networking Architecture&lt;/a&gt; - Warframe netcode by Maciej Sinilo from Digital Extremes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C / C++ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://enet.bespin.org/&#34;&gt;ENet&lt;/a&gt; - Simple and robust reliable UDP networking library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ValveSoftware/GameNetworkingSockets&#34;&gt;GameNetworkingSockets&lt;/a&gt; - Valve&#39;s internal (Steam) network transport layer for games.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pond3r/ggpo&#34;&gt;GGPO&lt;/a&gt; - Good Game, Peace Out Rollback Network SDK.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/skywind3000/kcp&#34;&gt;KCP&lt;/a&gt; - A fast and reliable ARQ protocol.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/facebookarchive/RakNet&#34;&gt;RakNet&lt;/a&gt; - Full-featured and mature reliable UDP networking engine.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nardo/tnl2&#34;&gt;TNL2&lt;/a&gt; - (Inactive) Torque Networking Library 2 which is quite similar to &lt;a href=&#34;https://www.gamedevs.org/uploads/tribes-networking-model.pdf&#34;&gt;TRIBES Networking Model&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/networkprotocol/yojimbo&#34;&gt;yojimbo&lt;/a&gt; - Reliable UDP networking library for client/server games with dedicated servers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C# &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/alvyxaz/barebones-masterserver&#34;&gt;Barebones Master Server&lt;/a&gt; - Backend framework with auth, profile, lobby, chat features for Unity.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/DarkRiftNetworking/DarkRift&#34;&gt;DarkRift 2&lt;/a&gt; - Unity focused high-performance multi-threaded multiplayer networking solution.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/FirstGearGames/FishNet&#34;&gt;FishNet&lt;/a&gt; - Unity networking solution aimed towards reliability, ease of use, efficiency, and flexibility.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BeardedManStudios/ForgeNetworkingRemastered&#34;&gt;Forge Networking&lt;/a&gt; - Unity focused real-time multiplayer networking solution.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lidgren/lidgren-network-gen3&#34;&gt;Lidgren.Network&lt;/a&gt; - Reliable UDP networking library (.NET/Mono/Unity).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RevenantX/LiteNetLib&#34;&gt;LiteNetLib&lt;/a&gt; - Lite reliable UDP networking library (.NET/Mono/Unity).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Cysharp/MagicOnion&#34;&gt;MagicOnion&lt;/a&gt; - Unified Realtime/API framework for .NET platform and Unity.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/vis2k/Mirror&#34;&gt;Mirror&lt;/a&gt; - A community replacement for Unity&#39;s abandoned UNET Networking System.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.netcode@latest&#34;&gt;Netcode for Entities&lt;/a&gt; - Unity&#39;s official netcode SDK for Entities workflows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/com.unity.netcode.gameobjects&#34;&gt;Netcode for GameObjects&lt;/a&gt; - Unity&#39;s official netcode SDK for GameObject workflows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://netick.net/&#34;&gt;Netick&lt;/a&gt; - A server-authoritative networking solution for Unity.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nxrighthere/NetStack&#34;&gt;NetStack&lt;/a&gt; - Lightweight toolset for creating concurrent networking systems for multiplayer games.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/MarkioE/Networker&#34;&gt;Networker&lt;/a&gt; - TCP and UDP networking library (.NET/Unity).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://normcore.io/&#34;&gt;Normcore&lt;/a&gt; - Seamless multiplayer game networking for Unity (Cloud/SaaS).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://photonengine.com&#34;&gt;Photon Engine&lt;/a&gt; - Hybrid multiplayer game networking platform (Cloud/SaaS).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tom-weiland/RiptideNetworking&#34;&gt;RiptideNetworking&lt;/a&gt; - Lightweight C# networking solution for multiplayer games.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://socketweaver.com&#34;&gt;SocketWeaver&lt;/a&gt; - Multiplayer cloud services designed for the Unity engine (Cloud/SaaS).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/heroiclabs/nakama&#34;&gt;Nakama&lt;/a&gt; - Open-source backend infrastructure for multiplayer games (also with Unity/C# SDK).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xiaonanln/goworld&#34;&gt;GoWorld&lt;/a&gt; - Scalable Distributed Game Server Engine with Hot Swapping (and Unity demo!).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://smartfoxserver.com/&#34;&gt;SmartFoxServer&lt;/a&gt; - Massive multiplayer game server with advanced built-in features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://actionherojs.com&#34;&gt;Actionhero&lt;/a&gt; - A node.js API server framework for TCP sockets, websockets and HTTP clients.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/colyseus/colyseus&#34;&gt;Colyseus&lt;/a&gt; - Authoritative multiplayer game server backend framework.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kalm/kalm.js&#34;&gt;Kalm&lt;/a&gt; - Socket manager/optimizer library with custom congestion control for Node.js and browsers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/SocketCluster/socketcluster&#34;&gt;SocketCluster&lt;/a&gt; - Scalable multi-process HTTP &amp;amp; real-time server framework.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.capanalysis.net/ca/&#34;&gt;CapAnalysis&lt;/a&gt; - Web visual tool to analyze captured network traffic. (Ubuntu, Debian)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jagt.github.io/clumsy/&#34;&gt;clumsy&lt;/a&gt; - Network condition simulation utility. (Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.linuxfoundation.org/networking/netem&#34;&gt;netem&lt;/a&gt; - Network emulation for testing protocols. (Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mitmproxy.org/&#34;&gt;mitmproxy&lt;/a&gt; - Web debugging proxy server. (Windows, macOS, Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nshipster.com/network-link-conditioner/&#34;&gt;Network Link Conditioner&lt;/a&gt; - Network environment simulation utility. (macOS, iOS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.softperfect.com/products/networksniffer/&#34;&gt;Network Protocol Analyzer&lt;/a&gt; - Tool for analysing, debugging and monitoring connections. (Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nsnam.org&#34;&gt;Network Simulator (ns)&lt;/a&gt; - Network simulator targeting research and educational use. (macOS, Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; - Web API debugging and development client. (Windows, macOS, Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vi/websocat&#34;&gt;websocat&lt;/a&gt; - CLI client for WebSockets like netcat or curl. (Windows, macOS, Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; - Network traffic analyzer tool. (Windows, macOS, Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;&lt;img src=&#34;http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg?sanitize=true&#34; alt=&#34;CC0&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>