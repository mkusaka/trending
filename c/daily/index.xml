<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-05T01:35:09Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zeldaret/oot</title>
    <updated>2022-10-05T01:35:09Z</updated>
    <id>tag:github.com,2022-10-05:/zeldaret/oot</id>
    <link href="https://github.com/zeldaret/oot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decompilation of The Legend of Zelda: Ocarina of Time&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Legend of Zelda: Ocarina of Time&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jenkins.deco.mp/job/OOT/job/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?jobUrl=https%3A%2F%2Fjenkins.deco.mp%2Fjob%2FOOT%2Fjob%2Fmaster&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zelda64.dev/games/oot&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://zelda64.dev/assets/csv/progress-oot-shield.json&#34; alt=&#34;Decompilation Progress&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zeldaret/oot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/zeldaret/oot&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.zelda64.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/688807550715560050?color=%237289DA&amp;amp;logo=discord&amp;amp;logoColor=%23FFFFFF&#34; alt=&#34;Discord Channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- WARNING! -&#xA;&#xA;This repository is a work in progress, and while it can be used to make certain changes, it&#39;s still&#xA;constantly evolving. If you use it for modding purposes in its current state, please be aware that&#xA;the codebase can drastically change at any time. Also note that some parts of the ROM may not be&#xA;&#39;shiftable&#39; yet, so modifying them could be difficult at this point.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a WIP &lt;strong&gt;decompilation&lt;/strong&gt; of &lt;em&gt;&lt;strong&gt;The Legend of Zelda: Ocarina of Time&lt;/strong&gt;&lt;/em&gt;. The purpose of the project is to recreate a source code base for the game from scratch, using information found inside the game along with static and/or dynamic analysis. &lt;strong&gt;It is not producing a PC port.&lt;/strong&gt; For more information you can get in touch with the team on our &lt;a href=&#34;https://discord.zelda64.dev&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The only build currently supported is Master Quest (Debug), but other versions are planned to be supported.&lt;/p&gt; &#xA;&lt;p&gt;It builds the following ROM:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zelda_ocarina_mq_dbg.z64 &lt;code&gt;md5: f0b7f35375f9cc8ca1b2d59d78e35405&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: This repository does not include any of the assets necessary to build the ROM. A prior copy of the game is required to extract the needed assets.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://zelda64.dev&#34;&gt;https://zelda64.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discord:&lt;/strong&gt; &lt;a href=&#34;https://discord.zelda64.dev&#34;&gt;https://discord.zelda64.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using WSL on Windows, or native Linux, which the rest of this readme describes. We currently have instructions for&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/master/#Windows&#34;&gt;Windows&lt;/a&gt;, with and without WSL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/master/docs/BUILDING_MACOS.md&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/master/#Linux-Native-or-under-WSL--VM&#34;&gt;Linux&lt;/a&gt;, natively or using WSL / VM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/master/docs/BUILDING_DOCKER.md&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(These will also depend on the Linux instructions.) Some of these may also be out of date or unmaintained; usually our contributors use WSL, Linux, and macOS, so these instructions should be up to date.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;For Windows 10 or 11, install WSL and a distribution by following this &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL Installation Guide&lt;/a&gt;. We recommend using Ubuntu 20.04 as the Linux distribution.&lt;/p&gt; &#xA;&lt;p&gt;For older versions of Windows, install a Linux VM or refer to either &lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/master/docs/BUILDING_CYGWIN.md&#34;&gt;Cygwin&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/zeldaret/oot/master/docs/BUILDING_DOCKER.md&#34;&gt;Docker&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Linux (Native or under WSL / VM)&lt;/h3&gt; &#xA;&lt;h4&gt;1. Install build dependencies&lt;/h4&gt; &#xA;&lt;p&gt;The build process has the following package requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;build-essential&lt;/li&gt; &#xA; &lt;li&gt;binutils-mips-linux-gnu&lt;/li&gt; &#xA; &lt;li&gt;python3&lt;/li&gt; &#xA; &lt;li&gt;libpng-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under Debian / Ubuntu (which we recommend using), you can install them with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install git build-essential binutils-mips-linux-gnu python3 libpng-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using GCC as the compiler for Ocarina of Time, you will also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc-mips-linux-gnu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Clone the repository&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; If using WSL, we strongly encourage you to clone into WSL&#39;s Linux filesystem using Linux&#39;s &lt;code&gt;git&lt;/code&gt;. Cloning into the Windows filesystem will result in much slower read/write speeds, and often causes issues when Windows copies the files with the wrong line endings, which the compiler IDO cannot handle correctly.&lt;/p&gt; &#xA;&lt;p&gt;Clone &lt;code&gt;https://github.com/zeldaret/oot.git&lt;/code&gt; where you wish to have the project, with a command such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zeldaret/oot.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the GitHub repository contents into a new folder in the current directory called &lt;code&gt;oot&lt;/code&gt;. Change into this directory before doing anything else:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd oot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Prepare a base ROM&lt;/h4&gt; &#xA;&lt;p&gt;Copy over your copy of the Master Quest (Debug) ROM inside the root of this new project directory. Rename the file to &#34;baserom_original.z64&#34;, &#34;baserom_original.n64&#34; or &#34;baserom_original.v64&#34;, depending on the original extension.&lt;/p&gt; &#xA;&lt;h4&gt;4. Setup the ROM and build process&lt;/h4&gt; &#xA;&lt;p&gt;Setup and extract everything from your ROM with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a new ROM called &#34;baserom.z64&#34; that will have the overdump removed and the header patched. It will also extract the individual assets from the ROM.&lt;/p&gt; &#xA;&lt;h4&gt;5. Build the ROM&lt;/h4&gt; &#xA;&lt;p&gt;Run make to build the ROM. Make sure your path to the project is not too long, otherwise this process may error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all goes well, a new ROM called &#34;zelda_ocarina_mq_debug.z64&#34; should be built and the following text should be printed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zelda_ocarina_mq_dbg.z64: OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zelda_ocarina_mq_dbg.z64: FAILED&#xA;md5sum: WARNING: 1 computed checksum did NOT match&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that the built ROM isn&#39;t the same as the base one, so something went wrong or some part of the code doesn&#39;t match.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; to speed up the build, you can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pass &lt;code&gt;-jN&lt;/code&gt; to &lt;code&gt;make setup&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;, where N is the number of threads to use in the build. The generally-accepted wisdom is to use the number of virtual cores your computer has.&lt;/li&gt; &#xA; &lt;li&gt;pass &lt;code&gt;-j&lt;/code&gt; to &lt;code&gt;make setup&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;, to use as many threads as possible, but beware that this can use too much memory on lower-end systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both of these have the disadvantage that the ordering of the terminal output is scrambled, so for debugging it is best to stick to one thread (i.e. not pass &lt;code&gt;-j&lt;/code&gt; or &lt;code&gt;-jN&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome. This is a group effort, and even small contributions can make a difference. Some tasks also don&#39;t require much knowledge to get started.&lt;/p&gt; &#xA;&lt;p&gt;Most discussions happen on our &lt;a href=&#34;https://discord.zelda64.dev&#34;&gt;Discord Server&lt;/a&gt;, where you are welcome to ask if you need help getting started, or if you have any questions regarding this project and other decompilation projects.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CamHenlin/FocusedEdit</title>
    <updated>2022-10-05T01:35:09Z</updated>
    <id>tag:github.com,2022-10-05:/CamHenlin/FocusedEdit</id>
    <link href="https://github.com/CamHenlin/FocusedEdit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classic Macintosh (System 2.0 through 9.2.2) text editor with shared live editing on a modern computer, via serial port&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FocusedEdit&lt;/h1&gt; &#xA;&lt;p&gt;FocusedEdit is a software package for classic Macintosh (System 2.0 through MacOS 9.2.2) systems to provide a bidirectional text editor from the Mac to modern web browsers via the serial port, utilizing &lt;a href=&#34;https://github.com/CamHenlin/coprocessor.js&#34;&gt;CoprocessorJS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1225579/193201468-da7a2685-5357-4d86-8bcf-1b6c229ce7ac.png&#34; alt=&#34;focusededit boxart&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use FocusedEdit&lt;/h2&gt; &#xA;&lt;p&gt;I wrote an &lt;a href=&#34;https://henlin.net/2022/10/02/Introducing-FocusedEdit-for-classic-Macintosh/&#34;&gt;article on my blog&lt;/a&gt; outlining how to get up and running.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;p&gt;FocusedEdit is built on a lot of technologies. The READMEs of each of these is each worth familiarizing yourself with if you would like to contribute to FocusedEdit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autc04/Retro68&#34;&gt;Retro68&lt;/a&gt; - a GCC-based cross compilation env for classic Macintosh systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CamHenlin/coprocessor.js&#34;&gt;CoprocessorJS&lt;/a&gt; - a library that allows us to handle nodejs workloads sent over a serial port&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CamHenlin/serialperformanceanalyzer&#34;&gt;serialperformanceanalyzer&lt;/a&gt; - used to analyze the performance of many different parts of the application during its development lifecycle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CamHenlin/TESample&#34;&gt;TESample&lt;/a&gt; - this is a basic Macintosh Toolbox demo application that the text editing portion of FocusedEdit is essentially riffing off of&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations / areas for improvement&lt;/h2&gt; &#xA;&lt;p&gt;FocusedEdit is 100% usable and I&#39;ve been using it daily to write out long slack messages, confluence docs, emails since mid 2022, but it could be even better with your help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More work could be done to support editing functionality like holding &lt;code&gt;shift+arrow keys&lt;/code&gt; to highlight blocks of text. As is, you must use the mouse to highlight blocks of text&lt;/li&gt; &#xA; &lt;li&gt;Additional fonts could be included&lt;/li&gt; &#xA; &lt;li&gt;Polling from the classic Mac to the web browser is kind of clunky and only done when the user has not interacted with the app for several seconds. This works fine for now assuming you want to do most of the editing on the Macintosh side. That&#39;s what we&#39;re here for, right?&lt;/li&gt; &#xA; &lt;li&gt;Special character support is lacking. For example, modern Macs like to replace quotation marks with stylized ones. We convert them back to standard quotation marks on the classic Macintosh side.&lt;/li&gt; &#xA; &lt;li&gt;It would be cool to support additional fonts&lt;/li&gt; &#xA; &lt;li&gt;Document width is fixed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Animated Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a short demo of FocusedEdit in action:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1225579/193197483-4a8b7c75-a78e-4ffb-b708-1ec9a2aec05a.gif&#34; alt=&#34;focusededit demo&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Perfare/Zygisk-Il2CppDumper</title>
    <updated>2022-10-05T01:35:09Z</updated>
    <id>tag:github.com,2022-10-05:/Perfare/Zygisk-Il2CppDumper</id>
    <link href="https://github.com/Perfare/Zygisk-Il2CppDumper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Using Zygisk to dump il2cpp data at runtime&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zygisk-Il2CppDumper&lt;/h1&gt; &#xA;&lt;p&gt;Il2CppDumper with Zygisk, dump il2cpp data at runtime, can bypass protection, encryption and obfuscation.&lt;/p&gt; &#xA;&lt;p&gt;中文说明请戳&lt;a href=&#34;https://raw.githubusercontent.com/Perfare/Zygisk-Il2CppDumper/master/README.zh-CN.md&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/topjohnwu/Magisk&#34;&gt;Magisk&lt;/a&gt; v24 or later and enable Zygisk&lt;/li&gt; &#xA; &lt;li&gt;Build module &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitHub Actions &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Fork this repo&lt;/li&gt; &#xA;     &lt;li&gt;Go to the &lt;strong&gt;Actions&lt;/strong&gt; tab in your forked repo&lt;/li&gt; &#xA;     &lt;li&gt;In the left sidebar, click the &lt;strong&gt;Build&lt;/strong&gt; workflow.&lt;/li&gt; &#xA;     &lt;li&gt;Above the list of workflow runs, select &lt;strong&gt;Run workflow&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Input the game package name and click &lt;strong&gt;Run workflow&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Wait for the action to complete and download the artifact&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Android Studio &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Download the source code&lt;/li&gt; &#xA;     &lt;li&gt;Edit &lt;code&gt;game.h&lt;/code&gt;, modify &lt;code&gt;GamePackageName&lt;/code&gt; to the game package name&lt;/li&gt; &#xA;     &lt;li&gt;Use Android Studio to run the gradle task &lt;code&gt;:module:assembleRelease&lt;/code&gt; to compile, the zip package will be generated in the &lt;code&gt;out&lt;/code&gt; folder&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install module in Magisk&lt;/li&gt; &#xA; &lt;li&gt;Start the game, &lt;code&gt;dump.cs&lt;/code&gt; will be generated in the &lt;code&gt;/data/data/GamePackageName/files/&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>