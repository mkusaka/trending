<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-20T01:27:11Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>egzumer/uv-k5-firmware-custom</title>
    <updated>2023-10-20T01:27:11Z</updated>
    <id>tag:github.com,2023-10-20:/egzumer/uv-k5-firmware-custom</id>
    <link href="https://github.com/egzumer/uv-k5-firmware-custom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A merge between https://github.com/OneOfEleven/uv-k5-firmware-custom and https://github.com/fagci/uv-k5-firmware-fagci-mod&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Main features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OneOfEleven mods, including AM fix&lt;/li&gt; &#xA; &lt;li&gt;fagci spectrum analyzer (&lt;strong&gt;F+5&lt;/strong&gt; to turn on)&lt;/li&gt; &#xA; &lt;li&gt;better battery percentage calculation (based on real measurement, battery calibration recommended)&lt;/li&gt; &#xA; &lt;li&gt;battery calibration option available available in the menu (instructions below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/main.jpg&#34; width=&#34;300&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/spectrum.jpg&#34; width=&#34;300&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/audiobar.jpg&#34; width=&#34;300&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/rssibar.jpg&#34; width=&#34;300&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;❗❗❗You can now calibrate the battery voltage reading in the radio menu.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/batcal.jpg&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;To enter the calibration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;turn the radio on while holding PTT and the first side button&lt;/li&gt; &#xA; &lt;li&gt;go to BATCAL option and adjust the voltage with UP/DOWN buttons&lt;/li&gt; &#xA; &lt;li&gt;confirm the setting, calibration will be saved to EEPROM&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Open reimplementation of the Quan Sheng UV-K5 v2.1.27 firmware&lt;/h1&gt; &#xA;&lt;p&gt;This repository is a merge of OneOfEleven custom firmware with fagci spectrum analizer plus my few changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OneOfEleven/uv-k5-firmware-custom&#34;&gt;https://github.com/OneOfEleven/uv-k5-firmware-custom&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/fagci/uv-k5-firmware-fagci-mod/tree/refactor&#34;&gt;https://github.com/fagci/uv-k5-firmware-fagci-mod/tree/refactor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All is a cloned and customized version of DualTachyon&#39;s open firmware found here ..&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DualTachyon/uv-k5-firmware&#34;&gt;https://github.com/DualTachyon/uv-k5-firmware&lt;/a&gt; .. a cool achievement !&lt;/p&gt; &#xA;&lt;p&gt;Use this firmware at your own risk (entirely). There is absolutely no guarantee that it will work in any way shape or form on your radio(s), it may even brick your radio(s), in which case, you&#39;d need to buy another radio. Anyway, have fun.&lt;/p&gt; &#xA;&lt;h1&gt;Radio performance&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the Quansheng UV-Kx radios are not professional quality transceivers, their performance is strictly limited. The RX front end has no track-tuned band pass filtering at all, and so are wide band/wide open to any and all signals over a large frequency range.&lt;/p&gt; &#xA;&lt;p&gt;Using the radio in high intensity RF environments will most likely make reception anything but easy (AM mode will suffer far more than FM ever will), the receiver simply doesn&#39;t have a great dynamic range, which results in distorted AM audio with stronger RX&#39;ed signals. There is nothing more anyone can do in firmware/software to improve that, once the RX gain adjustment I do (AM fix) reaches the hardwares limit, your AM RX audio will be all but non-existant (just like Quansheng&#39;s firmware). On the other hand, FM RX audio will/should be fine.&lt;/p&gt; &#xA;&lt;p&gt;But, they are nice toys for the price, fun to play with.&lt;/p&gt; &#xA;&lt;h1&gt;User customization&lt;/h1&gt; &#xA;&lt;p&gt;You can customize the firmware by enabling/disabling various compile options, this allows us to remove certain firmware features in order to make room in the flash for others. You&#39;ll find the options at the top of &#34;Makefile&#34; (&#39;0&#39; = disable, &#39;1&#39; = enable) ..&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ENABLE_CLANG                  := 0     **experimental, builds with clang instead of gcc (LTO will be disabled if you enable this)&#xA;ENABLE_SWD                    := 0       only needed if using CPU&#39;s SWD port (debugging/programming)&#xA;ENABLE_OVERLAY                := 0       cpu FLASH stuff, not needed&#xA;ENABLE_LTO                    := 0     **experimental, reduces size of compiled firmware but might break EEPROM reads (OVERLAY will be disabled if you enable this)&#xA;ENABLE_UART                   := 1       without this you can&#39;t configure radio via PC !&#xA;ENABLE_AIRCOPY                := 0       easier to just enter frequency with butts&#xA;ENABLE_FMRADIO                := 0       WBFM VHF broadcast band receiver&#xA;ENABLE_NOAA                   := 0       everything NOAA (only of any use in the USA)&#xA;ENABLE_VOICE                  := 0       want to hear voices ?&#xA;ENABLE_VOX                    := 0&#xA;ENABLE_ALARM                  := 0       TX alarms&#xA;ENABLE_1750HZ                 := 0       side key 1750Hz TX tone (older style repeater access)&#xA;ENABLE_PWRON_PASSWORD         := 1       power-on password stuff&#xA;ENABLE_BIG_FREQ               := 0       big font frequencies (like original QS firmware)&#xA;ENABLE_SMALL_BOLD             := 1       bold channel name/no. (when name + freq channel display mode)&#xA;ENABLE_KEEP_MEM_NAME          := 1       maintain channel name when (re)saving memory channel&#xA;ENABLE_WIDE_RX                := 1       full 18MHz to 1300MHz RX (though front-end/PA not designed for full range)&#xA;ENABLE_TX_WHEN_AM             := 0       allow TX (always FM) when RX is set to AM&#xA;ENABLE_F_CAL_MENU             := 0       enable/disable the radios hidden frequency calibration menu&#xA;ENABLE_CTCSS_TAIL_PHASE_SHIFT := 1       standard CTCSS tail phase shift rather than QS&#39;s own 55Hz tone method&#xA;ENABLE_BOOT_BEEPS             := 0       gives user audio feedback on volume knob position at boot-up&#xA;ENABLE_SHOW_CHARGE_LEVEL      := 0       show the charge level when the radio is on charge&#xA;ENABLE_REVERSE_BAT_SYMBOL     := 1       mirror the battery symbol on the status bar (+ pole on the right)&#xA;ENABLE_CODE_SCAN_TIMEOUT      := 0       enable/disable 32-sec CTCSS/DCS scan timeout (press exit butt instead of time-out to end scan)&#xA;ENABLE_AM_FIX                 := 1       dynamically adjust the front end gains when in AM mode to helo prevent AM demodulator saturation, ignore the on-screen RSSI level (for now)&#xA;ENABLE_AM_FIX_SHOW_DATA       := 1       show debug data for the AM fix (still tweaking it)&#xA;ENABLE_SQUELCH_MORE_SENSITIVE := 0       make squelch levels a little bit more sensitive - I plan to let user adjust the values themselves&#xA;ENABLE_FASTER_CHANNEL_SCAN    := 0       increases the channel scan speed, but the squelch is also made more twitchy&#xA;ENABLE_RSSI_BAR               := 1       enable a dBm/Sn RSSI bar graph level inplace of the little antenna symbols&#xA;ENABLE_AUDIO_BAR              := 0       experimental, display an audo bar level when TX&#39;ing&#xA;ENABLE_COPY_CHAN_TO_VFO       := 1       copy current channel into the other VFO. Long press Menu key (&#39;M&#39;)&#xA;#ENABLE_SINGLE_VFO_CHAN       := 1       not yet implemented - single VFO on display when possible&#xA;#ENABLE_BAND_SCOPE            := 1       not yet implemented - spectrum/pan-adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;New/modified function keys&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Long-press &#39;M&#39; .. Copy selected channel into same VFO, then switch VFO to frequency mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt;Long-press &#39;7&#39; .. Toggle selected channel scanlist setting .. if VOX is disabled in Makefile&lt;/li&gt; &#xA; &lt;li&gt;or&lt;/li&gt; &#xA; &lt;li&gt;Long-press &#39;5&#39; .. Toggle selected channel scanlist setting .. if NOAA is disabled in Makefile&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt;Long-press &#39;*&#39; .. Start scanning, then toggles the scanning between scanlists 1, 2 or ALL channels&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Some changes made from the Quansheng firmware&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Various Quansheng firmware bugs fixed&lt;/li&gt; &#xA; &lt;li&gt;Added new bugs&lt;/li&gt; &#xA; &lt;li&gt;Mic menu includes max gain possible&lt;/li&gt; &#xA; &lt;li&gt;AM RX everywhere (left the TX as is)&lt;/li&gt; &#xA; &lt;li&gt;An attempt to improve the AM RX audio (demodulator getting saturated/overloaded in Quansheng firmware)&lt;/li&gt; &#xA; &lt;li&gt;keypad-5/NOAA button now toggles scanlist-1 on/off for current channel when held down - IF NOAA not used&lt;/li&gt; &#xA; &lt;li&gt;Better backlight times (inc always on)&lt;/li&gt; &#xA; &lt;li&gt;Live DTMF decoder option, though the decoder needs some coeff tuning changes to decode other radios it seems&lt;/li&gt; &#xA; &lt;li&gt;Various menu re-wordings (trying to reduce &#39;WTH does that mean ?&#39;)&lt;/li&gt; &#xA; &lt;li&gt;..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compiler&lt;/h1&gt; &#xA;&lt;p&gt;arm-none-eabi GCC version 10.3.1 is recommended, which is the current version on Ubuntu 22.04.03 LTS. Other versions may generate a flash file that is too big. You can get an appropriate version from: &lt;a href=&#34;https://developer.arm.com/downloads/-/gnu-rm&#34;&gt;https://developer.arm.com/downloads/-/gnu-rm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;clang may be used but isn&#39;t fully supported. Resulting binaries may also be bigger. You can get it from: &lt;a href=&#34;https://releases.llvm.org/download.html&#34;&gt;https://releases.llvm.org/download.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;If you have docker installed you can use &lt;code&gt;compile-with-docker.bat&lt;/code&gt;, the output files are created in &lt;code&gt;compiled-firmware&lt;/code&gt; folder. This method gives significantly smaller binaries, I&#39;ve seen differences up to 1kb, so it can fit more functionalities this way. The challange can be (or not) installing the docker itself.&lt;/p&gt; &#xA;&lt;p&gt;To compile directly in windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open windows command line and run: &lt;pre&gt;&lt;code&gt;winget install -e -h git.git Python.Python.3.8 GnuWin32.Make&#xA;winget install -e -h Arm.GnuArmEmbeddedToolchain -v &#34;10 2021.10&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Close command line, open a new one and run: &lt;pre&gt;&lt;code&gt;pip install --user --upgrade pip&#xA;pip install crcmod&#xA;mkdir c:\projects &amp;amp; cd /D c:/projects&#xA;git clone https://github.com/egzumer/uv-k5-firmware-custom.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;From now on you can build the firmware by going to &lt;code&gt;c:\projects\uv-k5-firmware-custom&lt;/code&gt; and running &lt;code&gt;win_make.bat&lt;/code&gt; or by running a command line: &lt;pre&gt;&lt;code&gt;cd /D c:\projects\uv-k5-firmware-custom&#xA;win_make.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To reset the repository and pull new changes run (!!! it will delete all your changes !!!): &lt;pre&gt;&lt;code&gt;cd /D c:\projects\uv-k5-firmware-custom&#xA;git reset --hard &amp;amp; git clean -fd &amp;amp; git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I&#39;ve left some notes in the win_make.bat file to maybe help with stuff.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Many thanks to various people on Telegram for putting up with me during this effort and helping:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OneOfEleven&#34;&gt;OneOfEleven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DualTachyon&#34;&gt;DualTachyon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fagci&#34;&gt;Mikhail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tunas1337&#34;&gt;Andrej&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/manujedi&#34;&gt;Manuel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@wagner&lt;/li&gt; &#xA; &lt;li&gt;@Lohtse Shar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spm81&#34;&gt;@Matoz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@Davide&lt;/li&gt; &#xA; &lt;li&gt;@Ismo OH2FTG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OneOfEleven&#34;&gt;OneOfEleven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@d1ced95&lt;/li&gt; &#xA; &lt;li&gt;and others I forget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2023 Dual Tachyon &lt;a href=&#34;https://github.com/DualTachyon&#34;&gt;https://github.com/DualTachyon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example changes/updates&lt;/h1&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/image1.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/image2.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/egzumer/uv-k5-firmware-custom/main/images/image3.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Video showing the AM fix working ..&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;/images/AM_fix.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://github.com/OneOfEleven/uv-k5-firmware-custom/assets/51590168/2a3a9cdc-97da-4966-bf0d-1ce6ad09779c&#34;&gt;&lt;/video&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>attractivechaos/klib</title>
    <updated>2023-10-20T01:27:11Z</updated>
    <id>tag:github.com,2023-10-20:/attractivechaos/klib</id>
    <link href="https://github.com/attractivechaos/klib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A standalone and lightweight C library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Klib: a Generic Library in C&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;overview&#34;&gt;&lt;/a&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Klib is a standalone and lightweight C library distributed under &lt;a href=&#34;http://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT/X11 license&lt;/a&gt;. Most components are independent of external libraries, except the standard C library, and independent of each other. To use a component of this library, you only need to copy a couple of files to your source code tree without worrying about library dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Klib strives for efficiency and a small memory footprint. Some components, such as khash.h, kbtree.h, ksort.h and kvec.h, are among the most efficient implementations of similar algorithms or data structures in all programming languages, in terms of both speed and memory use.&lt;/p&gt; &#xA;&lt;p&gt;A new documentation is available &lt;a href=&#34;http://attractivechaos.github.io/klib/&#34;&gt;here&lt;/a&gt; which includes most information in this README file.&lt;/p&gt; &#xA;&lt;h4&gt;Common components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.github.io/klib/#Khash%3A%20generic%20hash%20table:%5B%5BKhash%3A%20generic%20hash%20table%5D%5D&#34;&gt;khash.h&lt;/a&gt;: generic &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table&#34;&gt;hash table&lt;/a&gt; with open addressing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.github.io/klib/#KBtree%3A%20generic%20ordered%20map:%5B%5BKBtree%3A%20generic%20ordered%20map%5D%5D&#34;&gt;kbtree.h&lt;/a&gt;: generic search tree based on &lt;a href=&#34;http://en.wikipedia.org/wiki/B-tree&#34;&gt;B-tree&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.github.io/klib/#KAVL%3A%20generic%20intrusive%20AVL%20tree&#34;&gt;kavl.h&lt;/a&gt;: generic intrusive &lt;a href=&#34;https://en.wikipedia.org/wiki/AVL_tree&#34;&gt;AVL tree&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.github.io/klib/#Ksort%3A%20sorting%2C%20shuffling%2C%20heap%20and%20k-small:%5B%5BKsort%3A%20sorting%2C%20shuffling%2C%20heap%20and%20k-small%5D%5D&#34;&gt;ksort.h&lt;/a&gt;: generic sort, including &lt;a href=&#34;http://en.wikipedia.org/wiki/Introsort&#34;&gt;introsort&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Merge_sort&#34;&gt;merge sort&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Heapsort&#34;&gt;heap sort&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Comb_sort&#34;&gt;comb sort&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Fisher-Yates_shuffle&#34;&gt;Knuth shuffle&lt;/a&gt; and the &lt;a href=&#34;http://en.wikipedia.org/wiki/Selection_algorithm&#34;&gt;k-small&lt;/a&gt; algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.github.io/klib/#Kseq%3A%20stream%20buffer%20and%20FASTA%2FQ%20parser:%5B%5BKseq%3A%20stream%20buffer%20and%20FASTA%2FQ%20parser%5D%5D&#34;&gt;kseq.h&lt;/a&gt;: generic stream buffer and a &lt;a href=&#34;http://en.wikipedia.org/wiki/FASTA_format&#34;&gt;FASTA&lt;/a&gt;/&lt;a href=&#34;http://en.wikipedia.org/wiki/FASTQ_format&#34;&gt;FASTQ&lt;/a&gt; format parser.&lt;/li&gt; &#xA; &lt;li&gt;kvec.h: generic dynamic array.&lt;/li&gt; &#xA; &lt;li&gt;klist.h: generic single-linked list and &lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_pool&#34;&gt;memory pool&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;kstring.{h,c}: basic string library.&lt;/li&gt; &#xA; &lt;li&gt;kmath.{h,c}: numerical routines including &lt;a href=&#34;http://en.wikipedia.org/wiki/Mersenne_twister&#34;&gt;MT19937-64&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Pseudorandom_generator&#34;&gt;pseudorandom generator&lt;/a&gt;, basic &lt;a href=&#34;http://en.wikipedia.org/wiki/Nonlinear_programming&#34;&gt;nonlinear programming&lt;/a&gt; and a few special math functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.github.io/klib/#Ketopt%3A%20parsing%20command-line%20arguments&#34;&gt;ketopt.h&lt;/a&gt;: portable command-line argument parser with getopt_long-like API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Components for more specific use cases&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ksa.c: constructing &lt;a href=&#34;http://en.wikipedia.org/wiki/Suffix_array&#34;&gt;suffix arrays&lt;/a&gt; for strings with multiple sentinels, based on a revised &lt;a href=&#34;https://sites.google.com/site/yuta256/sais&#34;&gt;SAIS algorithm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;knetfile.{h,c}: random access to remote files on HTTP or FTP.&lt;/li&gt; &#xA; &lt;li&gt;kopen.c: smart stream opening.&lt;/li&gt; &#xA; &lt;li&gt;khmm.{h,c}: basic &lt;a href=&#34;http://en.wikipedia.org/wiki/Hidden_Markov_model&#34;&gt;HMM&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;ksw.(h,c}: Striped &lt;a href=&#34;http://en.wikipedia.org/wiki/Smith-Waterman_algorithm&#34;&gt;Smith-Waterman algorithm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;knhx.{h,c}: &lt;a href=&#34;http://en.wikipedia.org/wiki/Newick_format&#34;&gt;Newick tree format&lt;/a&gt; parser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;methodology&#34;&gt;&lt;/a&gt;Methodology&lt;/h2&gt; &#xA;&lt;p&gt;For the implementation of generic &lt;a href=&#34;http://en.wikipedia.org/wiki/Container_(abstract_data_type)&#34;&gt;containers&lt;/a&gt;, klib extensively uses C macros. To use these data structures, we usually need to instantiate methods by expanding a long macro. This makes the source code look unusual or even ugly and adds difficulty to debugging. Unfortunately, for efficient generic programming in C that lacks &lt;a href=&#34;http://en.wikipedia.org/wiki/Template_(C%2B%2B)&#34;&gt;template&lt;/a&gt;, using macros is the only solution. Only with macros, we can write a generic container which, once instantiated, compete with a type-specific container in efficiency. Some generic libraries in C, such as &lt;a href=&#34;http://en.wikipedia.org/wiki/GLib&#34;&gt;Glib&lt;/a&gt;, use the &lt;code&gt;void*&lt;/code&gt; type to implement containers. These implementations are usually slower and use more memory than klib (see &lt;a href=&#34;http://attractivechaos.wordpress.com/2008/10/07/another-look-at-my-old-benchmark/&#34;&gt;this benchmark&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To effectively use klib, it is important to understand how it achieves generic programming. We will use the hash table library as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &#34;khash.h&#34;&#xA;KHASH_MAP_INIT_INT(m32, char)        // instantiate structs and methods&#xA;int main() {&#xA;    int ret, is_missing;&#xA;    khint_t k;&#xA;    khash_t(m32) *h = kh_init(m32);  // allocate a hash table&#xA;    k = kh_put(m32, h, 5, &amp;amp;ret);     // insert a key to the hash table&#xA;    if (!ret) kh_del(m32, h, k);&#xA;    kh_value(h, k) = 10;             // set the value&#xA;    k = kh_get(m32, h, 10);          // query the hash table&#xA;    is_missing = (k == kh_end(h));   // test if the key is present&#xA;    k = kh_get(m32, h, 5);&#xA;    kh_del(m32, h, k);               // remove a key-value pair&#xA;    for (k = kh_begin(h); k != kh_end(h); ++k)  // traverse&#xA;        if (kh_exist(h, k))          // test if a bucket contains data&#xA;&#x9;&#x9;&#x9;kh_value(h, k) = 1;&#xA;    kh_destroy(m32, h);              // deallocate the hash table&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the second line instantiates a hash table with &lt;code&gt;unsigned&lt;/code&gt; as the key type and &lt;code&gt;char&lt;/code&gt; as the value type. &lt;code&gt;m32&lt;/code&gt; names such a type of hash table. All types and functions associated with this name are macros, which will be explained later. Macro &lt;code&gt;kh_init()&lt;/code&gt; initiates a hash table and &lt;code&gt;kh_destroy()&lt;/code&gt; frees it. &lt;code&gt;kh_put()&lt;/code&gt; inserts a key and returns the iterator (or the position) in the hash table. &lt;code&gt;kh_get()&lt;/code&gt; and &lt;code&gt;kh_del()&lt;/code&gt; get a key and delete an element, respectively. Macro &lt;code&gt;kh_exist()&lt;/code&gt; tests if an iterator (or a position) is filled with data.&lt;/p&gt; &#xA;&lt;p&gt;An immediate question is this piece of code does not look like a valid C program (e.g. lacking semicolon, assignment to an &lt;em&gt;apparent&lt;/em&gt; function call and &lt;em&gt;apparent&lt;/em&gt; undefined &lt;code&gt;m32&lt;/code&gt; &#39;variable&#39;). To understand why the code is correct, let&#39;s go a bit further into the source code of &lt;code&gt;khash.h&lt;/code&gt;, whose skeleton looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define KHASH_INIT(name, SCOPE, key_t, val_t, is_map, _hashf, _hasheq) \&#xA;  typedef struct { \&#xA;    int n_buckets, size, n_occupied, upper_bound; \&#xA;    unsigned *flags; \&#xA;    key_t *keys; \&#xA;    val_t *vals; \&#xA;  } kh_##name##_t; \&#xA;  SCOPE inline kh_##name##_t *init_##name() { \&#xA;    return (kh_##name##_t*)calloc(1, sizeof(kh_##name##_t)); \&#xA;  } \&#xA;  SCOPE inline int get_##name(kh_##name##_t *h, key_t k) \&#xA;  ... \&#xA;  SCOPE inline void destroy_##name(kh_##name##_t *h) { \&#xA;    if (h) { \&#xA;      free(h-&amp;gt;keys); free(h-&amp;gt;flags); free(h-&amp;gt;vals); free(h); \&#xA;    } \&#xA;  }&#xA;&#xA;#define _int_hf(key) (unsigned)(key)&#xA;#define _int_heq(a, b) (a == b)&#xA;#define khash_t(name) kh_##name##_t&#xA;#define kh_value(h, k) ((h)-&amp;gt;vals[k])&#xA;#define kh_begin(h, k) 0&#xA;#define kh_end(h) ((h)-&amp;gt;n_buckets)&#xA;#define kh_init(name) init_##name()&#xA;#define kh_get(name, h, k) get_##name(h, k)&#xA;#define kh_destroy(name, h) destroy_##name(h)&#xA;...&#xA;#define KHASH_MAP_INIT_INT(name, val_t) \&#xA;&#x9;KHASH_INIT(name, static, unsigned, val_t, is_map, _int_hf, _int_heq)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;KHASH_INIT()&lt;/code&gt; is a huge macro defining all the structs and methods. When this macro is called, all the code inside it will be inserted by the &lt;a href=&#34;http://en.wikipedia.org/wiki/C_preprocessor&#34;&gt;C preprocess&lt;/a&gt; to the place where it is called. If the macro is called multiple times, multiple copies of the code will be inserted. To avoid naming conflict of hash tables with different key-value types, the library uses &lt;a href=&#34;http://en.wikipedia.org/wiki/C_preprocessor#Token_concatenation&#34;&gt;token concatenation&lt;/a&gt;, which is a preprocessor feature whereby we can substitute part of a symbol based on the parameter of the macro. In the end, the C preprocessor will generate the following code and feed it to the compiler (macro &lt;code&gt;kh_exist(h,k)&lt;/code&gt; is a little complex and not expanded for simplicity):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;typedef struct {&#xA;  int n_buckets, size, n_occupied, upper_bound;&#xA;  unsigned *flags;&#xA;  unsigned *keys;&#xA;  char *vals;&#xA;} kh_m32_t;&#xA;static inline kh_m32_t *init_m32() {&#xA;  return (kh_m32_t*)calloc(1, sizeof(kh_m32_t));&#xA;}&#xA;static inline int get_m32(kh_m32_t *h, unsigned k)&#xA;...&#xA;static inline void destroy_m32(kh_m32_t *h) {&#xA;  if (h) {&#xA;    free(h-&amp;gt;keys); free(h-&amp;gt;flags); free(h-&amp;gt;vals); free(h);&#xA;  }&#xA;}&#xA;&#xA;int main() {&#xA;&#x9;int ret, is_missing;&#xA;&#x9;khint_t k;&#xA;&#x9;kh_m32_t *h = init_m32();&#xA;&#x9;k = put_m32(h, 5, &amp;amp;ret);&#xA;&#x9;if (!ret) del_m32(h, k);&#xA;&#x9;h-&amp;gt;vals[k] = 10;&#xA;&#x9;k = get_m32(h, 10);&#xA;&#x9;is_missing = (k == h-&amp;gt;n_buckets);&#xA;&#x9;k = get_m32(h, 5);&#xA;&#x9;del_m32(h, k);&#xA;&#x9;for (k = 0; k != h-&amp;gt;n_buckets; ++k)&#xA;&#x9;&#x9;if (kh_exist(h, k)) h-&amp;gt;vals[k] = 1;&#xA;&#x9;destroy_m32(h);&#xA;&#x9;return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the C program we know.&lt;/p&gt; &#xA;&lt;p&gt;From this example, we can see that macros and the C preprocessor plays a key role in klib. Klib is fast partly because the compiler knows the key-value type at the compile time and is able to optimize the code to the same level as type-specific code. A generic library written with &lt;code&gt;void*&lt;/code&gt; will not get such performance boost.&lt;/p&gt; &#xA;&lt;p&gt;Massively inserting code upon instantiation may remind us of C++&#39;s slow compiling speed and huge binary size when STL/boost is in use. Klib is much better in this respect due to its small code size and component independency. Inserting several hundreds lines of code won&#39;t make compiling obviously slower.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;resources&#34;&gt;&lt;/a&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Library documentation, if present, is available in the header files. Examples can be found in the &lt;a href=&#34;https://github.com/attractivechaos/klib/tree/master/test&#34;&gt;test/&lt;/a&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Obsolete&lt;/strong&gt; documentation of the hash table library can be found at &lt;a href=&#34;http://klib.sourceforge.net/&#34;&gt;SourceForge&lt;/a&gt;. This README is partly adapted from the old documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/09/02/implementing-generic-hash-library-in-c/&#34;&gt;Blog post&lt;/a&gt; describing the hash table library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/10/02/using-void-in-generic-c-programming-may-be-inefficient/&#34;&gt;Blog post&lt;/a&gt; on why using &lt;code&gt;void*&lt;/code&gt; for generic programming may be inefficient.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/10/11/a-generic-buffered-stream-wrapper/&#34;&gt;Blog post&lt;/a&gt; on the generic stream buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/09/19/c-array-vs-c-vector/&#34;&gt;Blog post&lt;/a&gt; evaluating the performance of &lt;code&gt;kvec.h&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/09/24/b-tree-vs-binary-search-tree/&#34;&gt;Blog post&lt;/a&gt; arguing B-tree may be a better data structure than a binary search tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/10/07/another-look-at-my-old-benchmark/&#34;&gt;Blog post&lt;/a&gt; evaluating the performance of &lt;code&gt;khash.h&lt;/code&gt; and &lt;code&gt;kbtree.h&lt;/code&gt; among many other implementations. &lt;a href=&#34;http://attractivechaos.wordpress.com/2008/08/28/comparison-of-hash-table-libraries/&#34;&gt;An older version&lt;/a&gt; of the benchmark is also available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/08/28/comparison-of-internal-sorting-algorithms/&#34;&gt;Blog post&lt;/a&gt; benchmarking internal sorting algorithms and implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/09/13/calculating-median/&#34;&gt;Blog post&lt;/a&gt; on the k-small algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://attractivechaos.wordpress.com/2008/08/24/derivative-free-optimization-dfo/&#34;&gt;Blog post&lt;/a&gt; on the Hooke-Jeeve&#39;s algorithm for nonlinear programming.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>intel/RealTimePathTracingResearchFramework</title>
    <updated>2023-10-20T01:27:11Z</updated>
    <id>tag:github.com,2023-10-20:/intel/RealTimePathTracingResearchFramework</id>
    <link href="https://github.com/intel/RealTimePathTracingResearchFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Real-time Path Tracing Research Framework&lt;/h1&gt; &#xA;&lt;p&gt;Note: This is a public pre-release limited to the core components required for reproducing some of our research papers.&lt;/p&gt; &#xA;&lt;!--&#xA;--&gt; &#xA;&lt;p&gt;The Real-time Path Tracing Research Framework is a fork of &lt;a href=&#34;https://github.com/Twinklebear/ChameleonRT&#34;&gt;Will Usher&#39;s ChameleonRT&lt;/a&gt;. While the original project maintains many backends (Embree, DXR, Optix, Vulkan, Metal, OSPRay), our version focuses on an efficient implementation in Vulkan. The other backends are not maintained. For the currently released feature set, refer to &lt;a href=&#34;https://raw.githubusercontent.com/intel/RealTimePathTracingResearchFramework/main/CHANGELOG.md&#34;&gt;the changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting the code&lt;/h2&gt; &#xA;&lt;p&gt;The first option is to clone this repository using git. If you choose this option, please perform a recursive clone (&lt;code&gt;git clone --recursive&lt;/code&gt;) to obtain submodules.&lt;/p&gt; &#xA;&lt;p&gt;The second option is to head over to our &lt;a href=&#34;https://raw.githubusercontent.com/intel/RealTimePathTracingResearchFramework/main/releases&#34;&gt;releases&lt;/a&gt; page and download one of the source archives.&lt;/p&gt; &#xA;&lt;!--&#xA;--&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Before building, you will need to install &lt;a href=&#34;https://cmake.org&#34;&gt;cmake&lt;/a&gt; v3.21 or higher and a current &lt;a href=&#34;https://vulkan.lunarg.com/&#34;&gt;Vulkan SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a convenient build, you may use our CMake presets. In the repository root, the following commands will configure the CMake environment and launch a build that contains the Vulkan backend:&lt;/p&gt; &#xA;&lt;!--&#xA;--&gt; &#xA;&lt;h2&gt;Building the base framework&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  $ cmake --preset vulkan&#xA;  $ cmake --build --preset vulkan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the first step downloads a set of external dependencies using cmake. You can prevent this by placing the required dependencies in appropriate locations under &lt;a href=&#34;https://raw.githubusercontent.com/intel/RealTimePathTracingResearchFramework/main/ext&#34;&gt;ext&lt;/a&gt;. Please inspect &lt;a href=&#34;https://raw.githubusercontent.com/intel/RealTimePathTracingResearchFramework/main/ext/CMakeLists.txt&#34;&gt;ext/CMakeLists.txt&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/intel/RealTimePathTracingResearchFramework/main/ext/libvkr/ext/CMakeLists.txt&#34;&gt;ext/libvkr/ext/CMakeLists.txt&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;p&gt;You should now find the main executable at &lt;code&gt;build/vulkan/rptr&lt;/code&gt;. We also provide additional presets, such as debug mode builds. validation layers.&lt;/p&gt; &#xA;&lt;!--&#xA;--&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;p&gt;The camera is an free-flight camera that moves around the camera&#39;s focal point.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use W, A, S, D, Space and Q keys to move&lt;/li&gt; &#xA; &lt;li&gt;Speed up/down using the mousewheel. (Two-finger scroll motion on MacBook Pro etc. trackpad.)&lt;/li&gt; &#xA; &lt;li&gt;Click and drag to rotate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keys while the application window is in focus:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Print the current camera position, center point, up vector and field of view (FOV) to the terminal by pressing the &lt;code&gt;p&lt;/code&gt; key.&lt;/li&gt; &#xA; &lt;li&gt;Save image by pressing the &lt;code&gt;s&lt;/code&gt; key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Command-line Options&lt;/h2&gt; &#xA;&lt;p&gt;For a comprehensive overview of command line options, please run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rptr --help&#xA;&#xA;usage: rptr &amp;lt;scene_file&amp;gt; [&amp;lt;scene_file&amp;gt;...] [options]&#xA;Options:&#xA;&#x9;--img &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;                Specify the window dimensions. Defaults to 1920x1080.&#xA;&#x9;--eye &amp;lt;x&amp;gt; &amp;lt;y&amp;gt; &amp;lt;z&amp;gt;            Set the camera position&#xA;&#x9;--center &amp;lt;x&amp;gt; &amp;lt;y&amp;gt; &amp;lt;z&amp;gt;         Set the camera focus point&#xA;&#x9;--up &amp;lt;x&amp;gt; &amp;lt;y&amp;gt; &amp;lt;z&amp;gt;             Set the camera up vector&#xA;&#x9;--fov &amp;lt;fovy&amp;gt;                 Specify the camera field of view (in degrees)&#xA;&#x9;--camera &amp;lt;n&amp;gt;                 If the scene contains multiple cameras, specify which&#xA;&#x9;                             should be used. Defaults to the first camera&#xA;&#x9;                             and overrides any config files.&#xA;&#x9;--config &amp;lt;file&amp;gt;              Load the given .ini file as an additional config file.&#xA;&#x9;--frame [&amp;lt;length&amp;gt;:]&amp;lt;file&amp;gt;    Append the given .ini file as an additional keyframe, hold &#xA;&#x9;                             for &amp;lt;length&amp;gt; s (default 1 s) if given config is static.&#xA;&#x9;--vulkan-device &amp;lt;device&amp;gt;     Override device selection with the given device.&#xA;&#x9;--disable-ui                 Do not draw the user interface on startup.&#xA;&#x9;                             Press &#39;.&#39; to enable the user interface again.&#xA;&#x9;-h, --help                   Show this information and exit.&#xA;&#xA;Backends:&#xA;&#x9;--backend &amp;lt;backend&amp;gt;          Use the given backend. The last one specified wins.&#xA;&#x9;                             vulkan: Render with Vulkan Ray Tracing&#xA;&#xA;Validation mode:&#xA;&#x9;--validation &amp;lt;prefix&amp;gt;        Enable validation mode. Render only time 0&#xA;&#x9;                             for a fixed number of samples per pixel. Store the&#xA;&#x9;                             framebuffer in prefix.pfm, then exit.&#xA;&#x9;                             Cannot be used with profiling mode.&#xA;&#x9;--validation-spp &amp;lt;n&amp;gt;         Render this many samples per pixel before exiting.&#xA;&#x9;                             If this is set to a value less than 1, the render will&#xA;&#x9;                             continue indefinitely and store a new image prefix_&amp;lt;spp&amp;gt;.pfm&#xA;&#x9;                             after every sample per pixel.&#xA;&#x9;                             Defaults to -1. Ignored unless in validation mode.&#xA;&#xA;Profiling mode:&#xA;&#xA;By default, profiling mode runs for one logical second (on the animation timeline).&#xA;The number of frames renderered per logical second in profiling mode are specified&#xA;by means of --profiling-fps, otherwise it defaults to 60. Therefore, by default,&#xA;the total number of frames rendered equals the one given by --profiling-fps.&#xA;If keyframes are given on the command line, by default they are run for one logical&#xA;second each.&#xA;&#xA;&#x9;--profiling &amp;lt;prefix&amp;gt;         Enable profiling mode. Render all keyframes with a&#xA;&#x9;                             fixed, non-realtime framerate. Store stats in prefix.csv,&#xA;&#x9;                             then exit.&#xA;&#x9;                             Cannot be used with validation mode.&#xA;&#x9;--profiling-fps &amp;lt;fps&amp;gt;        Profile with the given frames per second.&#xA;&#x9;                             Defaults to 60. Ignored unless in profiling mode.&#xA;&#x9;--profiling-img &amp;lt;prefix&amp;gt;     Also store the framebuffer after each keyframe in&#xA;&#x9;                             prefix_&amp;lt;keyframe&amp;gt;.pfm. Ignored unless in profiling mode.&#xA;&#xA;Example for running 3 frames of a given config in profiling mode:&#xA;&#x9;./rptr path/to/scene.vks --profiling example_prefix --profiling-fps 3 --config path/to/example_config.ini&#xA;&#xA;Example for running 7 frames for each of 3 given configs:&#xA;&#x9;./rptr path/to/scene.vks --profiling example_prefix --profiling-fps 7 --frame example_config1.ini --frame example_config2.ini --frame example_config3.ini&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Tobias Zirr &lt;br&gt; Johannes Meng &lt;br&gt; Christoph Peters &lt;br&gt; Anis Benyoub &lt;br&gt; Will Usher&lt;/p&gt; &#xA;&lt;p&gt;The project is originally based on ChameleonRT created by Will Usher.&lt;/p&gt; &#xA;&lt;p&gt;Additional contributions and support by Alexander Rath, Gábor Liktor, Jiawei Shao, Philippe Weier, Eric Heitz, Sebastian Herholz, Lorenzo Tessari, and Anton Sochenov.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@Misc{irptr23,&#xA;   author = {Tobias Zirr and Johannes Meng and Christoph Peters and Anis Benyoub and Will Usher},&#xA;   title =  {The {Intel Real-time Path Tracing Research Framework}},&#xA;   year =   {2023},&#xA;   month =  {10},&#xA;   url =    {https://github.com/intel/RealTimePathTracingResearchFramework},&#xA;   note =   {\url{https://github.com/intel/RealTimePathTracingResearchFramework}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>