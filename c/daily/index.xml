<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-10T01:31:02Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ffmpegwasm/ffmpeg.wasm</title>
    <updated>2023-08-10T01:31:02Z</updated>
    <id>tag:github.com,2023-08-10:/ffmpegwasm/ffmpeg.wasm</id>
    <link href="https://github.com/ffmpegwasm/ffmpeg.wasm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FFmpeg for browser, powered by WebAssembly&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ffmpegwasm/ffmpeg.wasm/main/#&#34;&gt; &lt;img alt=&#34;ffmpeg.wasm&#34; width=&#34;128px&#34; height=&#34;128px&#34; src=&#34;https://github.com/ffmpegwasm/ffmpeg.wasm/raw/main/apps/website/static/img/logo192.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;ffmpeg.wasm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emersion/stability-badges#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stability-experimental-orange.svg?sanitize=true&#34; alt=&#34;stability-experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/node/v/@ffmpeg/ffmpeg.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v/@ffmpeg/ffmpeg.svg?sanitize=true&#34; alt=&#34;Node Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ffmpegwasm/ffmpeg.wasm/actions&#34;&gt;&lt;img src=&#34;https://github.com/ffmpegwasm/ffmpeg.wasm/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@ffmpeg/ffmpeg/latest&#34; alt=&#34;npm (tag)&#34;&gt; &lt;a href=&#34;https://github.com/ffmpegwasm/ffmpeg.wasm/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@ffmpeg/ffmpeg&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/@ffmpeg/ffmpeg.svg?sanitize=true&#34; alt=&#34;Downloads Total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@ffmpeg/ffmpeg&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@ffmpeg/ffmpeg.svg?sanitize=true&#34; alt=&#34;Downloads Month&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.netlify.com/sites/ffmpegwasm/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/1943b6d3-45ad-4b46-bfba-cb8d5716604c/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on Discord!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/NjGMaqqfm5&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/NjGMaqqfm5&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ffmpeg.wasm is a pure Webassembly / Javascript port of FFmpeg. It enables video &amp;amp; audio record, convert and stream right inside browsers.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpegwasm.netlify.app/docs/overview&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpegwasm.netlify.app/docs/getting-started/installation&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpegwasm.netlify.app/docs/api/ffmpeg/&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpegwasm.netlify.app/docs/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpegwasm.netlify.app/contribution/core&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mario-deluna/php-glfw</title>
    <updated>2023-08-10T01:31:02Z</updated>
    <id>tag:github.com,2023-08-10:/mario-deluna/php-glfw</id>
    <link href="https://github.com/mario-deluna/php-glfw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü™êA fully-featured OpenGL and GLFW extension for PHP. üîãBatteries included (Math Functions, Texture Loaders, etc..)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100px&#34; src=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/v2/docs/logo_phpglfw_s.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;PHP-GLFW&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://phpgl.net&#34;&gt;Website&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://phpgl.net/getting-started/getting-started-with-php-and-opengl.html&#34;&gt;Getting Started&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://phpgl.net/API/Buffer/ByteBuffer.html&#34;&gt;API Docs&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://phpgl.net/examples/00-about-examples.html&#34;&gt;Examples&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A powerful and comprehensive OpenGL and GLFW extension for PHP, with everything you need to build amazing graphical applications üîã!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mario-deluna/php-glfw/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/mario-deluna/php-glfw/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;PHP-GLFW Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mario-deluna/php-glfw/actions/workflows/macos_installer.yml&#34;&gt;&lt;img src=&#34;https://github.com/mario-deluna/php-glfw/actions/workflows/macos_installer.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS Installer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mario-deluna/php-glfw/actions/workflows/windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/mario-deluna/php-glfw/actions/workflows/windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP-GLFW allows you to create captivating &lt;em&gt;2D&lt;/em&gt; and &lt;em&gt;3D&lt;/em&gt; real-time applications in &lt;em&gt;PHP&lt;/em&gt;. It introduces a whole new set of tools for PHP developers to build graphical applications like &lt;em&gt;games, scientific simulations, user interfaces&lt;/em&gt;, and much more.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;720px&#34; src=&#34;https://user-images.githubusercontent.com/956212/196137371-74546845-4101-4e22-8d1c-4550f0ba2adf.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Currently supports &lt;strong&gt;PHP8.0&lt;/strong&gt;, &lt;strong&gt;8.1&lt;/strong&gt;, and &lt;strong&gt;8.2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#what-is-this-extension-features-&#34;&gt;What is this extension? Discover the features üöÄ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#opengl&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#glfw&#34;&gt;GLFW&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#phpgl---math&#34;&gt;PHPGL - Math&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#phpgl---buffers&#34;&gt;PHPGL - Buffers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#phpgl---textures&#34;&gt;PHPGL - Textures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#phpgl---geometry&#34;&gt;PHPGL - Geometry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#how-are-the-bindings-achieved&#34;&gt;How are the bindings achieved?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#documentation-&#34;&gt;Documentation üìö&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#php-towerdense-game&#34;&gt;Game - PHP Towerdefense&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#flappyphpant&#34;&gt;Game - FlappyPHPant&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#macos&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#stubs-ide-support&#34;&gt;Stubs (IDE Support)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this extension? Features üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;PHP-GLFW aims to be a complete solution containing everything you need to start building graphical applications in PHP. It doesn&#39;t just provide &lt;strong&gt;GLFW library bindings&lt;/strong&gt;, but also includes &lt;strong&gt;OpenGL bindings&lt;/strong&gt; and a set of essential classes and helpers.&lt;/p&gt; &#xA;&lt;h3&gt;OpenGL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full native support for &lt;strong&gt;OpenGL&lt;/strong&gt; (4.1+ core), bringing GPU-accelerated rendering to PHP.&lt;/li&gt; &#xA; &lt;li&gt;Targets OpenGL 4.1, but can be built for newer versions as well.&lt;/li&gt; &#xA; &lt;li&gt;Support for OpenGL extensions (limited).&lt;/li&gt; &#xA; &lt;li&gt;Mirrors the C API as closely as possible, with adjustments made where required or otherwise nonsensical.&lt;/li&gt; &#xA; &lt;li&gt;Supports ~90% of the full standard; see &lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/GLSUPPORT.md&#34;&gt;GLSUPPORT.md&lt;/a&gt; for details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GLFW&lt;/h3&gt; &#xA;&lt;p&gt;This extension includes bindings for the powerful &lt;strong&gt;&lt;a href=&#34;https://www.glfw.org&#34;&gt;GLFW&lt;/a&gt;&lt;/strong&gt; library, offering a range of amazing features, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiplatform Window creation and handling (MacOS / Windows / Linux)&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple windows and monitors&lt;/li&gt; &#xA; &lt;li&gt;Real-time user input handling &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Keyboard and Mouse&lt;/strong&gt; event handling&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Joystick&lt;/strong&gt; input support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PHPGL - Math&lt;/h3&gt; &#xA;&lt;p&gt;PHP-GLFW comes with a built-in mathematics library, written in C and optimized for graphical applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported structs: &lt;code&gt;Vec2&lt;/code&gt;, &lt;code&gt;Vec3&lt;/code&gt;, &lt;code&gt;Vec4&lt;/code&gt;, &lt;code&gt;Mat4&lt;/code&gt;, and &lt;code&gt;Quat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Includes most common matrix operations, like: &lt;code&gt;lookAt&lt;/code&gt;, &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;inverse&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt;, and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Integration into the extension offers several advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High performance&lt;/li&gt; &#xA; &lt;li&gt;Low memory footprint&lt;/li&gt; &#xA; &lt;li&gt;Overloaded operators for math structs, enabling intuitive operations like: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use GL\Math\Vec2;&#xA;$v3 = Vec2(15, -5) + Vec2(42, 7); // returns Vec2(57, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Some OpenGL functions directly accept math structs as arguments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/user-guide/math/math_functions.html&#34;&gt;Read more about math functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;PHPGL - Buffers&lt;/h3&gt; &#xA;&lt;p&gt;This extension also includes a set of buffer objects that internally hold data in native types.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can handle large arrays of data&lt;/li&gt; &#xA; &lt;li&gt;Low memory footprint and very fast&lt;/li&gt; &#xA; &lt;li&gt;Data is stored internally to be directly uploadable to the GPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/API/Buffer/FloatBuffer.html&#34;&gt;Read more about the buffers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;PHPGL - Textures&lt;/h3&gt; &#xA;&lt;p&gt;PHP-GLFW supports the loading of images/textures into buffers without requiring an additional extension:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can load common image formats, like &lt;code&gt;jpg&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;tga&lt;/code&gt;, &lt;code&gt;bmp&lt;/code&gt;, and &lt;code&gt;gif&lt;/code&gt; &lt;em&gt;(gd or Imagick is not required)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Can write images/textures back to disk&lt;/li&gt; &#xA; &lt;li&gt;Writes data into a &lt;code&gt;BufferInterface&lt;/code&gt; object, providing full access to the bitmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/API/Texture/Texture2D.html&#34;&gt;Read more about texture loading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;PHPGL - Geometry&lt;/h3&gt; &#xA;&lt;p&gt;PHP-GLFW comes with a &lt;code&gt;.obj&lt;/code&gt; wavefront file loader, allowing you to load and parse &lt;code&gt;.obj&lt;/code&gt; files. It also provides helpers to generate tangent and bitangent vectors for the loaded geometry. Currently, only triangulated geometry is supported, with no support for quads.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can parse &lt;code&gt;.obj&lt;/code&gt; and &lt;code&gt;.mtl&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;Can generate normal, tangent, and bitangent vectors for the loaded geometry on the fly&lt;/li&gt; &#xA; &lt;li&gt;Allows extraction of separate meshes and groups from the loaded geometry&lt;/li&gt; &#xA; &lt;li&gt;Can group vertices by their material&lt;/li&gt; &#xA; &lt;li&gt;Can reindex extracted meshes to reduce the number of vertices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/API/Geometry/ObjFileParser.html&#34;&gt;Read more about geometry loading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How are the bindings achieved?&lt;/h3&gt; &#xA;&lt;p&gt;PHP-GLFW parses the OpenGL specs to generate most of the C extension, instead of porting functions manually. Manual adjustments are made where necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation üìö&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://phpgl.net&#34;&gt;Full Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://phpgl.net/getting-started/window-creation.html&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://phpgl.net/user-guide/math/math_functions.html&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://phpgl.net/API/Buffer/ByteBuffer.html&#34;&gt;API Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/examples#examples&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/956212/189208007-74064a7b-0e93-4d7f-b53e-e799a0641e54.png&#34; alt=&#34;glfw-previews&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explore the &lt;a href=&#34;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/examples#examples&#34;&gt;examples&lt;/a&gt; directory to dive into the code.&lt;/p&gt; &#xA;&lt;h3&gt;PHP-Towerdense Game&lt;/h3&gt; &#xA;&lt;p&gt;We are currently developing a 3D game entirely built with PHP, leveraging the power of PHP-GLFW. The game, named PHP-TowerDefense, is open-source and serves as a showcase for the capabilities of PHP-GLFW. Although the game is in active development, it is not yet ready for release.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;80%&#34; alt=&#34;PHP-TowerDefense Screenshot&#34; src=&#34;https://user-images.githubusercontent.com/956212/222989984-e1b2d431-26de-47f4-a17d-7800e5afb052.jpg&#34;&gt; &lt;/p&gt; Check out the game&#39;s repository on GitHub for more information and to follow its progress: https://github.com/phpgl/php-towerdefense &#xA;&lt;h3&gt;FlappyPHPant&lt;/h3&gt; &#xA;&lt;p&gt;A very simple Flappy Bird-like game written in PHP.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;640&#34; src=&#34;https://github.com/phpgl/flappyphpant/assets/956212/9d32a533-73cb-40e6-b940-7976b765d658&#34; alt=&#34;FlappyPHPant 2D PHP Game&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phpgl/flappyphpant&#34;&gt;https://github.com/phpgl/flappyphpant&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please refer to the comprehensive installation guide here: &lt;a href=&#34;https://phpgl.net/getting-started/installation/install-linux.html&#34;&gt;Installation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;PHP Version:&lt;/strong&gt; &lt;code&gt;&amp;gt;= 8.0&lt;/code&gt; While I would love to support older PHP builds, it was just not feasible for this extension.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;h4&gt;Installer&lt;/h4&gt; &#xA;&lt;p&gt;You can use a simple installer script to install PHP-GLFW:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php -r &#34;copy(&#39;https://raw.githubusercontent.com/mario-deluna/php-glfw/master/install/macos-installer.php&#39;, &#39;phpglfw-installer.php&#39;);&#34; &amp;amp;&amp;amp; php phpglfw-installer.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you see &#34;Installation finished!&#34;, you&#39;re ready to go!&lt;/p&gt; &#xA;&lt;h4&gt;Manual installation&lt;/h4&gt; &#xA;&lt;p&gt;For a manual approach, ensure you have installed the &lt;code&gt;php-dev&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;cmake&lt;/code&gt; packages. &lt;strong&gt;They are required!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mario-deluna/php-glfw&#xA;cd php-glfw&#xA;sudo phpize &amp;amp;&amp;amp; ./configure --enable-glfw&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget to add &lt;code&gt;glfw.so&lt;/code&gt; in the &lt;code&gt;php.ini&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;extension=&#34;glfw.so&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cmake&lt;/code&gt; is required for the installation. You can skip the first step if it&#39;s already installed. Also, make sure that you install the &lt;code&gt;php-dev&lt;/code&gt; package, for example, &lt;code&gt;php8.1-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install -y cmake git &#xA;git clone https://github.com/mario-deluna/php-glfw&#xA;cd php-glfw&#xA;sudo phpize &amp;amp;&amp;amp; ./configure --enable-glfw&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to add &lt;code&gt;glfw.so&lt;/code&gt; in the &lt;code&gt;php.ini&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;extension=&#34;glfw.so&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stubs (IDE Support)&lt;/h3&gt; &#xA;&lt;p&gt;As this is a PHP extension, your editor / IDE does not support auto-completion and doc lookups without some help. We created a composer package you can include as a dev dependency to have full support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require --dev phpgl/ide-stubs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mario-deluna&#34;&gt;Mario D√∂ring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mario-deluna/php-glfw/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/mario-deluna/php-glfw/raw/master/LICENSE&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qewer33/qpaperOS</title>
    <updated>2023-08-10T01:31:02Z</updated>
    <id>tag:github.com,2023-08-10:/qewer33/qpaperOS</id>
    <link href="https://github.com/qewer33/qpaperOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Smartwatch firmware for the LILYGO T-Wrist E-Paper ESP32 development board&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qewer33/qpaperOS/main/assets/qpaper_banner.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;qpaperOS is a smartwatch firmware implementation for the LILYGO T-Wrist E-Paper ESP32 development board. This repositoy houses the qpaperOS source code along with 3D models and the FreeCAD file of the smartwatch case to make your very own qpaper!&lt;/p&gt; &#xA;&lt;h2&gt;The Product&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qewer33/qpaperOS/main/assets/qpaper_screenshot.jpeg&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More photos of the complete watch can be found under &lt;code&gt;assets/photos/&lt;/code&gt; (&lt;a href=&#34;https://github.com/qewer33/qpaperOS/tree/main/assets/photos&#34;&gt;https://github.com/qewer33/qpaperOS/tree/main/assets/photos&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;qpaper is meant to be a minimal and lighweight smartwatch that does what it needs to do: always display time. The low power E-Paper screen of the qpaper allows it to always display the time and other information without having the display blank. The ESP32 wakes up every minute to update the display to show the correct time. More information about how the firmware works can be found in the next section.&lt;/p&gt; &#xA;&lt;p&gt;qpaper has a battery life of approx. ~3-4 days with a 250 mAh battery. This number is way lower than it should be (the battery should ideally last more than a week but I sometimes even get 2 days for some reason) and I&#39;m not sure if it&#39;s a fault of the firmware of if the board is wasting the battery somehow, need to debug.&lt;/p&gt; &#xA;&lt;h3&gt;Assembly&lt;/h3&gt; &#xA;&lt;p&gt;The outer sheell/case of the qpaper is meant to be 3D printed and assembled with 4 short M2 screws. The 3D models and FreeCAD file for the case can be found under &lt;code&gt;assets/3d/&lt;/code&gt; (&lt;a href=&#34;https://github.com/qewer33/qpaperOS/tree/main/assets/3d&#34;&gt;https://github.com/qewer33/qpaperOS/tree/main/assets/3d&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Required parts for assembly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LILYGO T-Wrist E-Paper ESP32 development board &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.lilygo.cc/products/t-wrist-e-paper-1-54-inch-display?variant=42405749948597&#34;&gt;https://www.lilygo.cc/products/t-wrist-e-paper-1-54-inch-display?variant=42405749948597&lt;/a&gt; (Note: you don&#39;t need to buy the GPS version if you don&#39;t want the GPS features but if you don&#39;t have a LILYGO T-U2T, buy a version with T-U2T bundled. You &lt;em&gt;need&lt;/em&gt; T-U2T to program the board!)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3D printed &#34;Shell&#34; piece&lt;/li&gt; &#xA; &lt;li&gt;3D printed &#34;Bottom Plate&#34; piece&lt;/li&gt; &#xA; &lt;li&gt;3D printed &#34;Buttons&#34; piece&lt;/li&gt; &#xA; &lt;li&gt;250 mAh 1S lipo battery&lt;/li&gt; &#xA; &lt;li&gt;Half-size uFl GPS antenna (not required for the non-GPS version of the development board)&lt;/li&gt; &#xA; &lt;li&gt;4x short M2/M1.6/M1.4 screws&lt;/li&gt; &#xA; &lt;li&gt;22mm watch strap (compatible with Huawei GT2/GT3 straps)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Firmware&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; qpaperOS is not yet finished, the information here might be inaccurate&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;qpaperOS is the firmware part of the qpaper project. It is developed to work with the LILYGO T-Wrist E-Paper ESP32 development board. It uses the espressif-esp32-arduino framework and PlatformIO for development.&lt;/p&gt; &#xA;&lt;p&gt;Below are features that are implemented or planned:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Display time and date&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Display battery percentage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Have the ESP32 MCU on deep sleep and wakeup every minute to update the display for power saving&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apps and app system &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; About (minimal example app)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WiFi Smartconfig (connect the watch to WiFi via your phone)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GPS Sync&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Themes and theme system&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GPS functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GPS based step counter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Weather display&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Islamic prayer times display&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Apps&lt;/h3&gt; &#xA;&lt;p&gt;Apps live under the &lt;code&gt;src/apps&lt;/code&gt; directory. Each app has it&#39;s own subdirectory and consists of 3 (or 2, one of them is optional) files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;src/&#xA;    apps/&#xA;        appname/&#xA;            app_appname.cpp&#xA;            app_appname.h&#xA;            app_appname_res.h  # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;app_appname.h&lt;/code&gt; file is the header file of the app. It contains the class and the extern instance definition of the app. Apps should extend the &lt;code&gt;App&lt;/code&gt; class defined in &lt;code&gt;src/apps.h&lt;/code&gt;. The methods that are going to be used by the app should be overriden methods from the &lt;code&gt;App&lt;/code&gt; class. The instance should be an instance of the newly defined app class wrapped in an &lt;code&gt;std::unique_pointer&lt;/code&gt;. There are 5 methods that apps can override from the App class:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;setup()&lt;/code&gt;: Runs before the app gets started. Useful for initializing variable defaults or loading preferences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drawUI(GxEPD_Class *display)&lt;/code&gt;: Runs every frame when the app is running. This method should draw the user interface of the app using &lt;code&gt;display&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exit()&lt;/code&gt;: Runs when the app gets exited. Useful for saving preferences and such.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buttonClick()&lt;/code&gt;: Runs when the user button gets clicked while in the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buttonDoubleClick()&lt;/code&gt;: Runs when the user button gets double clicked while in the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;app_appname.cpp&lt;/code&gt; file is the source file of the app. The source file should define the instance and implement the necessary app methods. The app constructor takes 2 argumnets: the first argument &lt;code&gt;String name&lt;/code&gt; is the name and the second argument &lt;code&gt;uint16_t* icon&lt;/code&gt; is the icon resource of the app.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;app_appname_res.h&lt;/code&gt; file contains the custom resources that are used by the app. These resources can be fonts, icons etc. This file is not necessary if the app doesn&#39;t have any custom resources. The app icon should go in &lt;code&gt;src/resources/app_icons.h&lt;/code&gt;, not the app resource file.&lt;/p&gt; &#xA;&lt;p&gt;The finished app should be included in &lt;code&gt;src/apps.cpp&lt;/code&gt; and should be added to the &lt;code&gt;apps&lt;/code&gt; array in the &lt;code&gt;initApps()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;You can take a look at the source code of the &#34;About&#34; app in &lt;code&gt;apps/about&lt;/code&gt; for an example of a minimal app.&lt;/p&gt;</summary>
  </entry>
</feed>