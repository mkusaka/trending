<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-05T01:24:09Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tsoding/musializer</title>
    <updated>2023-09-05T01:24:09Z</updated>
    <id>tag:github.com,2023-09-05:/tsoding/musializer</id>
    <link href="https://github.com/tsoding/musializer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Music Visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Musializer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;THIS SOFTWARE IS UNFINISHED!!! Don&#39;t have any high expectations. Read &lt;a href=&#34;https://raw.githubusercontent.com/tsoding/musializer/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; if you have a strong irresistable desire to contribute something here.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tsoding/musializer/master/resources/logo/logo-256.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The project aims to make a tool for creating beautiful music visualizations and rendering high quality videos of them.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Music by &lt;a href=&#34;https://soundcloud.com/nu11_ft&#34;&gt;@nu11&lt;/a&gt; from &lt;a href=&#34;https://soundcloud.com/nu11_ft/nu11-wip-works-2016-2022&#34;&gt;https://soundcloud.com/nu11_ft/nu11-wip-works-2016-2022&lt;/a&gt; at 20:38&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tsoding/musializer/assets/165283/8b9f9653-9b3d-4c04-9569-338fa19af071&#34;&gt;https://github.com/tsoding/musializer/assets/165283/8b9f9653-9b3d-4c04-9569-338fa19af071&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/&#34;&gt;raylib&lt;/a&gt; and all its transitive dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt; executable available in &lt;code&gt;PATH&lt;/code&gt; environment variable. (it is called as a child process)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The project provides a bunch of build shell scripts that have the following naming scheme &lt;code&gt;build_&amp;lt;platform&amp;gt;_&amp;lt;compiler&amp;gt;.sh&lt;/code&gt;. Pick the appropriate one.&lt;/p&gt; &#xA;&lt;h3&gt;POSIX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./build_posix_clang.sh&#xA;$ ./build/musializer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that the application needs &lt;a href=&#34;https://raw.githubusercontent.com/tsoding/musializer/master/resources/&#34;&gt;./resources/&lt;/a&gt; to be present in the folder it is ran from.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Windows support is at very early stage right now. Since I don&#39;t have a convenient Windows Development Environment, I&#39;m cross compiling Musializer with &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/tsoding/musializer/master/build_windows_mingw.sh&#34;&gt;./build_windows_mingw.sh&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;More documentation regarding Windows build is comming soon. For now use your hacking skills to figure it out.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hot Reloading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Only on Linux for now&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export HOTRELOAD=1&#xA;$ ./build_posix.sh&#xA;$ ./build/musializer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep the app running. Rebuild with &lt;code&gt;./build.sh&lt;/code&gt;. Hot reload by focusing on the window of the app and pressing &lt;kbd&gt;r&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The way it works is by putting the majority of the logic of the application into a &lt;code&gt;libplug&lt;/code&gt; dynamic library and just reloading it when requested. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Rpath&#34;&gt;rpath&lt;/a&gt; (aka hard-coded run-time search path) for that library is set to &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;./build/&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/tsoding/musializer/master/build.sh&#34;&gt;build.sh&lt;/a&gt; for more information on how everything is configured.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ledoge/autohdr_force</title>
    <updated>2023-09-05T01:24:09Z</updated>
    <id>tag:github.com,2023-09-05:/ledoge/autohdr_force</id>
    <link href="https://github.com/ledoge/autohdr_force" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Force enable Auto HDR per application via registry&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;a href=&#34;https://github.com/ledoge/autohdr_force/releases/latest/download/release.zip&#34;&gt;Download latest release&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;p&gt;All registry entries are created under &lt;code&gt;HKEY_CURRENT_USER\SOFTWARE\Microsoft\Direct3D\&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code quality is bad because it&#39;s almost entirely generated by ChatGPT :/&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Run the .exe and provide the name of the executable (&lt;code&gt;Game.exe&lt;/code&gt;) or the full path (&lt;code&gt;C:/Game.exe&lt;/code&gt;) when prompted. Alternatively, this can be supplied as a command line argument.&lt;/p&gt;</summary>
  </entry>
</feed>