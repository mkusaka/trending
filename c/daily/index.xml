<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:35:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>p-gen/smenu</title>
    <updated>2022-08-12T01:35:15Z</updated>
    <id>tag:github.com,2022-08-12:/p-gen/smenu</id>
    <link href="https://github.com/p-gen/smenu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;smenu started as a lightweight and flexible terminal menu generator, but quickly evolved into a powerful and versatile CLI selection tool for interactive or scripting use.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. ################################################################### Copyright 2015, Pierre Gentile (&lt;a href=&#34;mailto:p.gen.progs@gmail.com&#34;&gt;p.gen.progs@gmail.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at &lt;a href=&#34;https://mozilla.org/MPL/2.0/&#34;&gt;https://mozilla.org/MPL/2.0/&lt;/a&gt;. ###################################################################&lt;/p&gt; &#xA;&lt;p&gt;.. image:: smenu.gif&lt;/p&gt; &#xA;&lt;p&gt;|&lt;/p&gt; &#xA;&lt;p&gt;.. image:: simple_menu.gif&lt;/p&gt; &#xA;&lt;h1&gt;What is it?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;smenu&lt;/strong&gt; is a selection filter just like &lt;code&gt;sed&lt;/code&gt; is an editing filter.&lt;/p&gt; &#xA;&lt;p&gt;This tool takes words from standard input or from a file and presents them on the screen in different layouts in a scrolling window. A cursor that you can easily move lets you select one or more of them.&lt;/p&gt; &#xA;&lt;p&gt;Note that the screen is not cleared at the beginning and end of the &lt;strong&gt;smenu&lt;/strong&gt; execution. The selection window is displayed at the cursor position and the previous contents of the terminal are not changed or lost.&lt;/p&gt; &#xA;&lt;p&gt;I tried to make its use as simple as possible. It supports the &lt;code&gt;UTF-8&lt;/code&gt; encoding and should work on all terminals managed by the &lt;code&gt;terminfo&lt;/code&gt; database.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the included man page to learn more about this little program.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;wiki &amp;lt;https://github.com/p-gen/smenu/wiki&amp;gt;&lt;/code&gt;_ contains screenshots and animations that detail some concepts and features of &lt;strong&gt;smenu&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to build it?&lt;/h1&gt; &#xA;&lt;p&gt;Some Linux distributions already provide &lt;strong&gt;smenu&lt;/strong&gt; as a package, if not, &lt;strong&gt;smenu&lt;/strong&gt; can be built on any system on which a functional &lt;code&gt;terminfo&lt;/code&gt; development platform is available. This includes all Unix and Unix-like systems that I know of.&lt;/p&gt; &#xA;&lt;p&gt;Please use the provided &lt;code&gt;build.sh&lt;/code&gt; script to build the executable. This script uses and accepts the same arguments as the GNU &lt;code&gt;configure&lt;/code&gt; script, type &lt;code&gt;build.sh --help&lt;/code&gt; to see them.&lt;/p&gt; &#xA;&lt;h1&gt;How to install it?&lt;/h1&gt; &#xA;&lt;p&gt;Once the build process is complete, a simple &lt;code&gt;make install&lt;/code&gt; with the appropriate privileges will do it.&lt;/p&gt; &#xA;&lt;h1&gt;Issue vs Discussion.&lt;/h1&gt; &#xA;&lt;p&gt;I have enabled &lt;code&gt;discussions &amp;lt;https://github.com/p-gen/smenu/discussions&amp;gt;&lt;/code&gt;_ on this repository.&lt;/p&gt; &#xA;&lt;p&gt;I am aware there may be some confusion when deciding where you should communicate when reporting issues, asking questions or raising feature requests so this section aims to help us align on that.&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;code&gt;raise an issue &amp;lt;https://github.com/p-gen/smenu/issues&amp;gt;&lt;/code&gt;_ if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have found a bug.&lt;/li&gt; &#xA; &lt;li&gt;You have a feature request and can clearly describe your request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please &lt;code&gt;open a discussion &amp;lt;https://github.com/p-gen/smenu/discussions&amp;gt;&lt;/code&gt;_ if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have a question.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re not sure how to achieve something with smenu.&lt;/li&gt; &#xA; &lt;li&gt;You have an idea but don&#39;t quite know how you would like it to work.&lt;/li&gt; &#xA; &lt;li&gt;You have achieved something cool with smenu and want to show it off.&lt;/li&gt; &#xA; &lt;li&gt;Anything else!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Some examples.&lt;/h1&gt; &#xA;&lt;h2&gt;Linux example.&lt;/h2&gt; &#xA;&lt;p&gt;This program should work on most Unix but if you are using Linux, try to type the following line at a shell prompt (here: &lt;code&gt;&#34;$ &#34;&lt;/code&gt; ):&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;$ R=$(grep Vm /proc/$$/status &lt;br&gt; | smenu -n20 -W $&#39;:\t\n&#39; -q -c -b -g -s /VmH) $ echo $R&lt;/p&gt; &#xA;&lt;p&gt;Something like this should now be displayed with the program waiting for commands: (numbers are mine, yours will be different)&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;VmPeak¦ 23840 kB VmSize¦ 23836 kB VmLck ¦ 0 kB VmHWM ¦ 2936 kB VmRSS ¦ 2936 kB VmData¦ 1316 kB VmStk ¦ 136 kB VmExe ¦ 28 kB VmLib ¦ 3956 kB VmPTE ¦ 64 kB VmSwap¦ 0 kB&lt;/p&gt; &#xA;&lt;p&gt;A cursor should be under &lt;code&gt;&#34;VmHWM &#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After having moved the cursor to &lt;code&gt;&#34; 136 kB&#34;&lt;/code&gt; and ended the program with &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, the shell variable R should contain: &lt;code&gt;&#34; 136 kB&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Unix example.&lt;/h2&gt; &#xA;&lt;p&gt;The following command, which is Unix brand agnostic, should give you a scrolling window if you have more than 10 accounts on your Unix with a UID lower than 100:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;$ R=$(awk -F: &#39;$3 &amp;lt; 100 {print $1,$3,$4,$NF}&#39; /etc/passwd &lt;br&gt; | smenu -n10 -c) $ echo $R&lt;/p&gt; &#xA;&lt;p&gt;On mine (&lt;code&gt;LANG&lt;/code&gt; and &lt;code&gt;LC_ALL&lt;/code&gt; set to &lt;code&gt;POSIX&lt;/code&gt;) it displays:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;at 25 25 /bin/bash &lt;br&gt; sys 0 3 /usr/bin/ksh + bin 1 1 /bin/bash | daemon 2 2 /bin/bash | ftp 40 49 /bin/bash | games 12 100 /bin/bash | lp 4 7 /bin/bash | mail 8 12 /bin/false | named 44 44 /bin/false | ntp 74 108 /bin/false v&lt;/p&gt; &#xA;&lt;p&gt;Note the presence of a scroll bar.&lt;/p&gt; &#xA;&lt;h2&gt;Bash example (CRTL-R replacement)&lt;/h2&gt; &#xA;&lt;p&gt;Just add the following in your &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;EOL=$&#39;\n&#39; bind -x &#39;&#34;\C-r&#34;: READLINE_LINE=$(fc -lr 1 &lt;br&gt; | sed &#34;s/[1-9][0-9]*..//&#34; &lt;br&gt; | smenu -Q -l -a c:7/4,b -W&#34;$EOL&#34;) READLINE_POINT=${#READLINE_LINE}&#39;&lt;/p&gt; &#xA;&lt;p&gt;Launch or relaunch &lt;strong&gt;bash&lt;/strong&gt; and hit &lt;code&gt;CTRL-R&lt;/code&gt; (&lt;code&gt;CTRL-C&lt;/code&gt; or &lt;code&gt;q&lt;/code&gt; to exit), enjoy!&lt;/p&gt; &#xA;&lt;p&gt;You can also add the parameter &lt;strong&gt;-d&lt;/strong&gt; to instruct &lt;strong&gt;smenu&lt;/strong&gt; to clean the selection window after selecting an entry.&lt;/p&gt; &#xA;&lt;h2&gt;Warning for post v0.9.15 versions.&lt;/h2&gt; &#xA;&lt;p&gt;These versions use a new options system called &lt;strong&gt;ctxopt&lt;/strong&gt; which may contain bugs. Please report them so they can be fixed in the next release of &lt;strong&gt;smenu&lt;/strong&gt; or &lt;strong&gt;ctxopt&lt;/strong&gt; (&lt;a href=&#34;https://github.com/p-gen/ctxopt&#34;&gt;https://github.com/p-gen/ctxopt&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Command line arguments may also need to be rearranged in some cases because of this new option management system. Sorry for the extra work this might entail.&lt;/p&gt; &#xA;&lt;h2&gt;Testing and reporting.&lt;/h2&gt; &#xA;&lt;p&gt;The included testing system is relatively young, please be indulgent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; the testing system has some dependencies, please read the &lt;code&gt;test/README.rst&lt;/code&gt; before going further.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; running all the tests by running &lt;code&gt;./tests.sh&lt;/code&gt; in the &lt;code&gt;tests&lt;/code&gt; directory will take some time (around 21 min for now).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; on some systems like *BSD some tests may fail. This can be explained by differences in posix/libc/... implementations. This can notably occur when some specific regular expressions or uncommon &lt;code&gt;UTF-8&lt;/code&gt; byte sequences are used.&lt;/p&gt; &#xA;&lt;p&gt;If a test fails for an unknown reason, please send me the name of its directory and the corresponding &lt;code&gt;.bad&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you are hit by a bug that no test covers, then you can create a new test in the &lt;code&gt;tests&lt;/code&gt; directory in an existing or new directory: read the &lt;code&gt;tests/README.rst&lt;/code&gt; file, use an existing test as model, create an &lt;code&gt;.in&lt;/code&gt; file and a &lt;code&gt;.tst&lt;/code&gt; file and send them to me as well as the produced files.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions.&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome but discuss your proposal in an issue first, or with the maintainer.&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks.&lt;/h2&gt; &#xA;&lt;p&gt;I want to thank those who took the time to package &lt;strong&gt;smenu&lt;/strong&gt; for their preferred operating system or distribution. You will find their names here: &lt;a href=&#34;https://repology.org/project/smenu/information&#34;&gt;https://repology.org/project/smenu/information&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>algorand/go-algorand</title>
    <updated>2022-08-12T01:35:15Z</updated>
    <id>tag:github.com,2022-08-12:/algorand/go-algorand</id>
    <link href="https://github.com/algorand/go-algorand" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algorand&#39;s official implementation in Go.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;rel/stable &lt;br&gt; &lt;a href=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fstable&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fstable.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;rel/beta &lt;br&gt; &lt;a href=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fbeta&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fbeta.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;rel/nightly &lt;br&gt; &lt;a href=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fnightly&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fnightly.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;go-algorand&lt;/h1&gt; &#xA;&lt;p&gt;Algorand&#39;s official implementation in Go.&lt;/p&gt; &#xA;&lt;p&gt;Algorand is a permissionless, pure proof-of-stake blockchain that delivers decentralization, scalability, security, and transaction finality.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://developer.algorand.org/&#34;&gt;developer website&lt;/a&gt; has the most up to date information about using and installing the Algorand platform.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Development is done using the &lt;a href=&#34;https://golang.org/&#34;&gt;Go Programming Language&lt;/a&gt;. The version of go is specified in the project&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/go.mod&#34;&gt;go.mod&lt;/a&gt; file. This document assumes that you have a functioning environment setup. If you need assistance setting up an environment please visit the &lt;a href=&#34;https://golang.org/doc/&#34;&gt;official Go documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux / OSX&lt;/h3&gt; &#xA;&lt;p&gt;We currently strive to support Debian-based distributions with Ubuntu 18.04 being our official release target. Building on Arch Linux works as well. Our core engineering team uses Linux and OSX, so both environments are well supported for development.&lt;/p&gt; &#xA;&lt;p&gt;OSX only: &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew (brew)&lt;/a&gt; must be installed before continuing. &lt;a href=&#34;https://docs.brew.sh/Installation&#34;&gt;Here&lt;/a&gt; are the installation requirements.&lt;/p&gt; &#xA;&lt;p&gt;Initial environment setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/algorand/go-algorand&#xA;cd go-algorand&#xA;./scripts/configure_dev.sh&#xA;./scripts/buildtools/install_buildtools.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, you are ready to build go-algorand. We use &lt;code&gt;make&lt;/code&gt; and have a number of targets to automate common tasks.&lt;/p&gt; &#xA;&lt;h4&gt;build&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;test&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# unit tests&#xA;make test&#xA;&#xA;# integration tests&#xA;make integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;style and checks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make fmt&#xA;make lint&#xA;make fix&#xA;make vet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or alternatively&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make sanity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a node&lt;/h3&gt; &#xA;&lt;p&gt;Once the software is built you&#39;ll find binaries in &lt;code&gt;${GOPATH}/bin&lt;/code&gt;, and a data directory will be initialized at &lt;code&gt;~/.algorand&lt;/code&gt;. Start your node with &lt;code&gt;${GOPATH}/bin/goal node start -d ~/.algorand&lt;/code&gt;, use &lt;code&gt;${GOPATH}/bin/carpenter -d ~/.algorand&lt;/code&gt; to see activity. Refer to the &lt;a href=&#34;https://developer.algorand.org/&#34;&gt;developer website&lt;/a&gt; for how to use the different tools.&lt;/p&gt; &#xA;&lt;h4&gt;Providing your own data directory&lt;/h4&gt; &#xA;&lt;p&gt;You can run a node out of other directories than &lt;code&gt;~/.algorand&lt;/code&gt; and join networks other than mainnet. Just make a new directory and copy into it the &lt;code&gt;genesis.json&lt;/code&gt; file for the network. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/testnet_data&#xA;cp installer/genesis/testnet/genesis.json ~/testnet_data/genesis.json&#xA;${GOPATH}/bin/goal node start -d ~/testnet_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Genesis files for mainnet, testnet, and betanet can be found in &lt;code&gt;installer/genesis/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing (Code, Documentation, Bugs, Etc)&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go-algorand&lt;/code&gt; is split into various subpackages.&lt;/p&gt; &#xA;&lt;p&gt;The following packages provide core functionality to the &lt;code&gt;algod&lt;/code&gt; and &lt;code&gt;kmd&lt;/code&gt; daemons, as well as other tools and commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;crypto&lt;/code&gt; contains the cryptographic constructions we&#39;re using for hashing, signatures, and VRFs. There are also some Algorand-specific details here about spending keys, protocols keys, one-time-use signing keys, and how they relate to each other.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; holds configuration parameters. These include parameters used locally by the node as well as parameters that must be agreed upon by the protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; defines various types used throughout the codebase. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;basics&lt;/code&gt; hold basic types such as MicroAlgos, account data, and addresses.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;account&lt;/code&gt; defines accounts, including &#34;root&#34; accounts (which can spend money) and &#34;participation&#34; accounts (which can participate in the agreement protocol).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; define transactions that accounts can issue against the Algorand state. These include standard payments and also participation key registration transactions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bookkeeping&lt;/code&gt; defines blocks, which are batches of transactions atomically committed to Algorand.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pools&lt;/code&gt; implement the transaction pool. The transaction pool holds transactions seen by a node in memory before they are proposed in a block.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;committee&lt;/code&gt; implements the credentials that authenticate a participating account&#39;s membership in the agreement protocol.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ledger&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/ledger/README.md&#34;&gt;README&lt;/a&gt;) contains the Algorand Ledger state machine, which holds the sequence of blocks. The Ledger executes the state transitions that result from applying these blocks. It answers queries on blocks (e.g., what transactions were in the last committed block?) and on accounts (e.g., what is my balance?).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protocol&lt;/code&gt; declares constants used to identify protocol versions, tags for routing network messages, and prefixes for domain separation of cryptographic inputs. It also implements the canonical encoder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;network&lt;/code&gt; contains the code for participating in a mesh network based on WebSockets. Maintains connection to some number of peers, (optionally) accepts connections from peers, sends point to point and broadcast messages, and receives messages routing them to various handler code (e.g. agreement/gossip/network.go registers three handlers). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;rpcs&lt;/code&gt; contains the HTTP RPCs used by &lt;code&gt;algod&lt;/code&gt; processes to query one another.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;agreement&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/agreement/README.md&#34;&gt;README&lt;/a&gt;) contains the agreement service, which implements Algorand&#39;s Byzantine Agreement protocol. This protocol allows participating accounts to quickly confirm blocks in a fork-safe manner, provided that sufficient account stake is correctly executing the protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; integrates the components above and handles initialization and shutdown. It provides queries into these components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;daemon&lt;/code&gt; defines the two daemons which provide Algorand clients with services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;daemon/algod&lt;/code&gt; holds the &lt;code&gt;algod&lt;/code&gt; daemon, which implements a participating node. &lt;code&gt;algod&lt;/code&gt; allows a node to participate in the agreement protocol, submit and confirm transactions, and view the state of the Algorand Ledger. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;daemon/algod/api&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/daemon/algod/api/README.md&#34;&gt;README&lt;/a&gt;) is the REST interface used for interactions with algod.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;daemon/kmd&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/daemon/kmd/README.md&#34;&gt;README&lt;/a&gt;) holds the &lt;code&gt;kmd&lt;/code&gt; daemon. This daemon allows a node to sign transactions. Because &lt;code&gt;kmd&lt;/code&gt; is separate from &lt;code&gt;algod&lt;/code&gt;, &lt;code&gt;kmd&lt;/code&gt; allows a user to sign transactions on an air-gapped computer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following packages allow developers to interface with the Algorand system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd&lt;/code&gt; holds the primary commands defining entry points into the system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmd/catchupsrv&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/cmd/catchupsrv/README.md&#34;&gt;README&lt;/a&gt;) is a tool to assist with processing historic blocks on a new node.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libgoal&lt;/code&gt; exports a Go interface useful for developers of Algorand clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/tools/README.md&#34;&gt;README&lt;/a&gt;) various tools and utilities without a better place to go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools/debug&lt;/code&gt; holds secondary commands which assist developers during debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools/misc&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/tools/misc/README.md&#34;&gt;README&lt;/a&gt;) small tools that are sometimes handy in a pinch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following packages contain tools to help Algorand developers deploy networks of their own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nodecontrol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commandandcontrol&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/test/commandandcontrol/README.md&#34;&gt;README&lt;/a&gt;) is a tool to automate a network of algod instances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;netdeploy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A number of packages provide utilities for the various components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;logging&lt;/code&gt; is a wrapper around &lt;code&gt;logrus&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;util&lt;/code&gt; contains a variety of utilities, including a codec, a SQLite wrapper, a goroutine pool, a timer interface, node metrics, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;test&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/test/README.md&#34;&gt;README&lt;/a&gt;) contains end-to-end tests and utilities for the above components.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/COPYING_FAQ&#34;&gt;COPYING_FAQ&lt;/a&gt; for details about how to apply our license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2019-2022, Algorand Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Foundry376/Mailspring</title>
    <updated>2022-08-12T01:35:15Z</updated>
    <id>tag:github.com,2022-08-12:/Foundry376/Mailspring</id>
    <link href="https://github.com/Foundry376/Mailspring" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💌 A beautiful, fast and fully open source mail client for Mac, Windows and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💌 Mailspring&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/github/Foundry376/Mailspring&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/Foundry376/Mailspring.svg?branch=master&#34; alt=&#34;Travis Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/Foundry376/Mailspring&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/iuuuy6d65u3x6bj6?svg=true&#34; alt=&#34;AppVeyor Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mailspring is a new version of Nylas Mail maintained by one of the original authors. It&#39;s faster, leaner, and shipping today!&lt;/strong&gt; It replaces the JavaScript sync code in Nylas Mail with a new C++ sync engine based on &lt;a href=&#34;https://github.com/MailCore/mailcore2&#34;&gt;Mailcore2&lt;/a&gt;. It uses roughly half the RAM and CPU of Nylas Mail and idles with almost zero &#34;CPU Wakes&#34;, which translates to great battery life. It also has an entirely revamped composer and other great new features.&lt;/p&gt; &#xA;&lt;p&gt;Mailspring&#39;s UI is open source (GPLv3) and written in TypeScript with &lt;a href=&#34;https://github.com/atom/electron&#34;&gt;Electron&lt;/a&gt; and &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; - it&#39;s built on a plugin architecture and was designed to be easy to extend. Check out &lt;a href=&#34;https://github.com/Foundry376/Mailspring/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to get started!&lt;/p&gt; &#xA;&lt;p&gt;Mailspring&#39;s sync engine is spawned by the Electron application and runs locally on your computer. &lt;a href=&#34;https://github.com/Foundry376/Mailspring-Sync&#34;&gt;It is open source (GPLv3) and written in C++ and C.&lt;/a&gt; For convenience, however, when you set up your development environment, Mailspring uses the latest version of the sync engine we&#39;ve shipped for your platform so you don&#39;t need to pull sources or install its compile-time dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Foundry376/Mailspring/raw/master/screenshots/hero_graphic_mac%402x.png&#34; alt=&#34;Mailspring Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Mailspring comes packed with powerful features like Unified Inbox, Snooze, Send Later, Mail Rules, Templates and more. Mailspring Pro, which you can unlock with a monthly subscription, adds even more features for people who send a ton of email: link tracking, read receipts, mailbox analytics, contact and company profiles. &lt;strong&gt;All of these features run in the client - Mailspring does not send your email credentials to the cloud.&lt;/strong&gt; For a full list of features, check out &lt;a href=&#34;https://getmailspring.com/&#34;&gt;getmailspring.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download Mailspring&lt;/h2&gt; &#xA;&lt;p&gt;You can download compiled versions of Mailspring for Windows, Mac OS X, and Linux (deb, rpm and snap) from &lt;a href=&#34;https://getmailspring.com/download&#34;&gt;https://getmailspring.com/download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;You can find community-based help and discussion with other Mailspring users on our &lt;a href=&#34;https://community.getmailspring.com/&#34;&gt;Discourse community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Mailspring is entirely open-source. Pull requests and contributions are welcome! There are three ways to contribute: building a plugin, building a theme, and submitting pull requests to the project itself. When you&#39;re getting started, you may want to join our &lt;a href=&#34;https://community.getmailspring.com/&#34;&gt;Discourse&lt;/a&gt; so you can ask questions and learn from other people doing development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Foundry376/Mailspring/master/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running Mailspring from Source&lt;/h3&gt; &#xA;&lt;p&gt;To install all dependencies and run Mailspring from its source code, run the following commands from the root directory of the Mailspring repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export npm_config_arch=x64 # If you are on an M1 / Apple Silicon Mac&#xA;npm install&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can attach command line parameters by separating them using a double hyphen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm start -- --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Mailspring&lt;/h3&gt; &#xA;&lt;p&gt;To build Mailspring, you need to run the following command from the root directory of the Mailspring repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run-script build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building A Plugin&lt;/h3&gt; &#xA;&lt;p&gt;Plugins lie at the heart of Mailspring and give it its powerful features. Building your own plugins allows you to integrate the app with other tools, experiment with new workflows, and more. Follow the &lt;a href=&#34;https://Foundry376.github.io/Mailspring/&#34;&gt;Getting Started guide&lt;/a&gt; to write your first plugin in five minutes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To create your own theme, check out the &lt;a href=&#34;https://github.com/Foundry376/Mailspring-Theme-Starter&#34;&gt;Mailspring-Theme-Starter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To create your own plugin, check out the &lt;a href=&#34;https://github.com/Foundry376/Mailspring-Plugin-Starter&#34;&gt;Mailspring-Plugin-Starter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A plugin &#34;store&#34; like the Chrome Web Store is coming soon, and will make it easy for other users to discover plugins you create. (Right now, users need to &#34;sideload&#34; the plugins into the app by downloading them and copying them into place.)&lt;/p&gt; &#xA;&lt;p&gt;You can share and browse Mailspring Plugins, and discuss plugin development with other developers, on our &lt;a href=&#34;https://community.getmailspring.com/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building a Theme&lt;/h3&gt; &#xA;&lt;p&gt;The Mailspring user interface is styled using CSS, which means it&#39;s easy to modify and extend. Mailspring comes stock with a few beautiful themes, and there are many more which have been built by community developers. To start creating a theme, &lt;a href=&#34;https://github.com/Foundry376/Mailspring-Theme-Starter&#34;&gt;clone the theme starter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you are updating an existing Nylas theme for Mailspring here is a &lt;a href=&#34;https://community.getmailspring.com/t/updating-an-n1-nylas-mail-theme-for-mailspring/195&#34;&gt;step by step tutorial&lt;/a&gt;. Notice: as part of the update process you will probably need to &lt;a href=&#34;https://github.com/Foundry376/Mailspring/issues/326#issuecomment-343757775&#34;&gt;import mailspring base variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can share and browse Mailspring Themes, and discuss theme development with other developers, on our &lt;a href=&#34;https://community.getmailspring.com/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Localizing / Translating&lt;/h3&gt; &#xA;&lt;p&gt;Mailspring (1.5.0 and above) supports localization. If you&#39;re a fluent speaker of another language, we&#39;d love your help improving translations. Check out the &lt;a href=&#34;https://github.com/Foundry376/Mailspring/raw/master/LOCALIZATION.md&#34;&gt;LOCALIZATION&lt;/a&gt; guide for more information. You can discuss localization and translation with other developers on our &lt;a href=&#34;https://community.getmailspring.com/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing to Mailspring Core&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are always welcome - check out &lt;a href=&#34;https://github.com/Foundry376/Mailspring/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information about setting up the development environment, running tests locally, and submitting pull requests.&lt;/p&gt;</summary>
  </entry>
</feed>