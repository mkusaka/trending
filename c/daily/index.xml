<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-25T01:33:23Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sultim-t/xash-rt</title>
    <updated>2023-02-25T01:33:23Z</updated>
    <id>tag:github.com,2023-02-25:/sultim-t/xash-rt</id>
    <link href="https://github.com/sultim-t/xash-rt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fork of the Xash3D FWGS with a real-time path tracing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xash3D: Ray Traced&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FWGS/xash3d-fwgs/actions/workflows/c-cpp.yml&#34;&gt;&lt;img src=&#34;https://github.com/FWGS/xash3d-fwgs/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Xash3D: Ray Traced is a fork of the &lt;a href=&#34;https://github.com/FWGS/xash3d-fwgs&#34;&gt;Xash3D FWGS&lt;/a&gt; engine with the added &lt;a href=&#34;https://github.com/sultim-t/RayTracedGL1&#34;&gt;custom path-traced renderer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Latest compiled build for Half-Life 1 can be found at &lt;a href=&#34;https://github.com/sultim-t/xash-rt/releases&#34;&gt;https://github.com/sultim-t/xash-rt/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Windows (Visual Studio)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this git repository&lt;/li&gt; &#xA; &lt;li&gt;Setup dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sultim-t/RayTracedGL1/releases/download/hl1-dev&#34;&gt;RayTracedGL1&lt;/a&gt; (&lt;code&gt;RTGL1_SDK_PATH&lt;/code&gt; environment variable should point to it)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://libsdl.org/release/SDL2-devel-2.0.14-VC.zip&#34;&gt;SDL2 2.0.14&lt;/a&gt; (should be put into the &lt;code&gt;SDL2_VC&lt;/code&gt; folder)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sultim-t/hlsdk-xash3d/releases&#34;&gt;Half-Life 1 SDK for Xash&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;for more info, look Github Actions scripts (&lt;a href=&#34;https://github.com/sultim-t/xash-rt/raw/ref_rt/.github/workflows/c-cpp.yml&#34;&gt;c-cpp.yml&lt;/a&gt;, &lt;a href=&#34;https://github.com/sultim-t/xash-rt/raw/ref_rt/scripts/gha/deps_win32.sh&#34;&gt;deps_win32.sh&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open Visual Studio solution &lt;code&gt;xash3d-fwgs.sln&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build solution&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>lakinduakash/linux-wifi-hotspot</title>
    <updated>2023-02-25T01:33:23Z</updated>
    <id>tag:github.com,2023-02-25:/lakinduakash/linux-wifi-hotspot</id>
    <link href="https://github.com/lakinduakash/linux-wifi-hotspot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feature-rich wifi hotspot creator for Linux which provides both GUI and command-line interface. It is also able to create a hotspot using the same wifi card which is connected to an AP already ( Similar to Windows 10).&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Linux Wifi Hotspot&lt;/h2&gt; &#xA;&lt;!-- [![Build Status](https://travis-ci.com/lakinduakash/linux-wifi-hotspot.svg?branch=master)](https://travis-ci.com/lakinduakash/linux-wifi-hotspot) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lakinduakash/linux-wifi-hotspot/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt; &lt;a href=&#34;https://gitter.im/linux-wihotspot/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/linux-wihotspot/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Flakinduakash%2Flinux-wifi-hotspot?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Flakinduakash%2Flinux-wifi-hotspot.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s new&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Share wifi via QR code&lt;/li&gt; &#xA; &lt;li&gt;UI improvements&lt;/li&gt; &#xA; &lt;li&gt;Show the connected devices&lt;/li&gt; &#xA; &lt;li&gt;Able to customize gateway address from GUI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Share your wifi like in Windows - Use wifi and enable hotspot at the same time.&lt;/li&gt; &#xA; &lt;li&gt;Share a wifi access point from any network interface&lt;/li&gt; &#xA; &lt;li&gt;Share wifi via QR code&lt;/li&gt; &#xA; &lt;li&gt;MAC filter&lt;/li&gt; &#xA; &lt;li&gt;View connected devices&lt;/li&gt; &#xA; &lt;li&gt;Includes Both command line and gui.&lt;/li&gt; &#xA; &lt;li&gt;Support both 2.4GHz and 5GHz (Need to be compatible with your wifi adapter). Ex: You have connected to the 5GHz network and share a connection with 2.4GHz.&lt;/li&gt; &#xA; &lt;li&gt;Customise wifi Channel, Change MAC address, etc.&lt;/li&gt; &#xA; &lt;li&gt;Hide SSID&lt;/li&gt; &#xA; &lt;li&gt;customize gateway IP address&lt;/li&gt; &#xA; &lt;li&gt;Enable IEEE 80211n, IEEE 80211ac modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lakinduakash/linux-wifi-hotspot/master/docs/sc4.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command line help and documentation&lt;/h3&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/lakinduakash/linux-wifi-hotspot/master/src/scripts/README.md&#34;&gt;Command line help and documentation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you only need the command-line without GUI run &lt;code&gt;make install-cli-only&lt;/code&gt; as root user.&lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes there are troubles with &lt;strong&gt;5Ghz bands&lt;/strong&gt; due to some vendor restrictions. If you cannot start hotspot while you are connected to 5Ghz band, Unselect &lt;strong&gt;Auto&lt;/strong&gt; and select &lt;strong&gt;2.4Ghz&lt;/strong&gt; in frequency selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If any problems with &lt;strong&gt;RealTeK Wifi Adapters&lt;/strong&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/lakinduakash/linux-wifi-hotspot/master/docs/howto/realtek.md&#34;&gt;this&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unable to allocate IP: firewalld issue:&lt;/strong&gt; Please check for potential fixes: &lt;a href=&#34;https://github.com/lakinduakash/linux-wifi-hotspot/issues/209&#34;&gt;#209&lt;/a&gt; &lt;a href=&#34;https://github.com/lakinduakash/linux-wifi-hotspot/issues/166&#34;&gt;#166&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dnsmasq: cannot read /tmp/create_ap.wlo1.conf.&lt;/strong&gt;*&lt;strong&gt;/dnsmasq.conf: Permission denied&lt;/strong&gt;, on Manjaro or ArchLinux ; check &lt;a href=&#34;https://github.com/lakinduakash/linux-wifi-hotspot/issues/183&#34;&gt;#183&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Debian/Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;Download the debian package from latest &lt;a href=&#34;https://github.com/lakinduakash/linux-wifi-hotspot/releases/latest&#34;&gt;release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For ubuntu only&#xA;sudo add-apt-repository ppa:lakinduakash/lwh&#xA;sudo apt install linux-wifi-hotspot&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch based distributions&lt;/h4&gt; &#xA;&lt;p&gt;Linux Wifi Hotspot is available as an &lt;a href=&#34;https://aur.archlinux.org/packages/linux-wifi-hotspot/&#34;&gt;AUR package&lt;/a&gt;. You can install it manually or with your favourite AUR helper.&lt;br&gt; For example, if you use &lt;code&gt;yay&lt;/code&gt; you can do:&lt;br&gt; &lt;code&gt;yay -S linux-wifi-hotspot&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash&lt;/li&gt; &#xA; &lt;li&gt;util-linux (for getopt)&lt;/li&gt; &#xA; &lt;li&gt;procps or procps-ng&lt;/li&gt; &#xA; &lt;li&gt;hostapd&lt;/li&gt; &#xA; &lt;li&gt;iproute2&lt;/li&gt; &#xA; &lt;li&gt;iw&lt;/li&gt; &#xA; &lt;li&gt;iwconfig (you only need this if &#39;iw&#39; can not recognize your adapter)&lt;/li&gt; &#xA; &lt;li&gt;haveged (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Make sure you have those dependencies by typing them in terminal. If any of dependencies fail install it using your distro&#39;s package manager&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;For &#39;NATed&#39; or &#39;None&#39; Internet sharing method&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dnsmasq&lt;/li&gt; &#xA; &lt;li&gt;iptables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;To build from source&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;gcc and g++&lt;/li&gt; &#xA; &lt;li&gt;build-essential&lt;/li&gt; &#xA; &lt;li&gt;pkg-config&lt;/li&gt; &#xA; &lt;li&gt;gtk&lt;/li&gt; &#xA; &lt;li&gt;libgtk-3-dev&lt;/li&gt; &#xA; &lt;li&gt;libqrencode-dev (for qr code generation)&lt;/li&gt; &#xA; &lt;li&gt;libpng-dev (for qr code generation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Ubuntu or debian install dependencies by,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libgtk-3-dev build-essential gcc g++ pkg-config make hostapd libqrencode-dev libpng-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora/CentOS/Red Hat Enterprise Linux/Rocky Linux/Oracle Linux&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y gtk3-devel gcc gcc-c++ kernel-devel pkg-config make hostapd qrencode-devel libpng-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/lakinduakash/linux-wifi-hotspot&#xA;cd linux-wifi-hotspot&#xA;&#xA;#build binaries&#xA;make&#xA;&#xA;#install&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;You can launch the GUI by searching for &#34;Wifi Hotspot&#34; in the Application Menu or using the terminal with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wihotspot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run on Startup&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;wihotspot&lt;/code&gt; GUI uses &lt;code&gt;create_ap&lt;/code&gt; to create and manage access points. This service and core logic was originally created by &lt;a href=&#34;http://github.com/oblique&#34;&gt;@oblique&lt;/a&gt;, and are now maintained in this repository.&lt;/p&gt; &#xA;&lt;p&gt;Start the hotspot service on startup (using your saved configuration) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;systemctl enable create_ap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug or you have an idea about improving this make an issue. Even a small contribution make open source world more beautiful. Please read &lt;a href=&#34;https://raw.githubusercontent.com/lakinduakash/linux-wifi-hotspot/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;div&gt;&#xA; Icons made by &#xA; &lt;a href=&#34;https://www.freepik.com&#34; title=&#34;Freepik&#34;&gt;Freepik&lt;/a&gt; from &#xA; &lt;a href=&#34;https://www.flaticon.com/&#34; title=&#34;Flaticon&#34;&gt;www.flaticon.com&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/lakinduakash/linux-wifi-hotspot&#34;&gt;&lt;img src=&#34;https://starchart.cc/lakinduakash/linux-wifi-hotspot.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FreeBSD&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013, oblique&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2021, lakinduakash&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Flakinduakash%2Flinux-wifi-hotspot?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Flakinduakash%2Flinux-wifi-hotspot.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libjpeg-turbo/libjpeg-turbo</title>
    <updated>2023-02-25T01:33:23Z</updated>
    <id>tag:github.com,2023-02-25:/libjpeg-turbo/libjpeg-turbo</id>
    <link href="https://github.com/libjpeg-turbo/libjpeg-turbo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main libjpeg-turbo repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Background&lt;/h1&gt; &#xA;&lt;p&gt;libjpeg-turbo is a JPEG image codec that uses SIMD instructions to accelerate baseline JPEG compression and decompression on x86, x86-64, Arm, PowerPC, and MIPS systems, as well as progressive JPEG compression on x86, x86-64, and Arm systems. On such systems, libjpeg-turbo is generally 2-6x as fast as libjpeg, all else being equal. On other types of systems, libjpeg-turbo can still outperform libjpeg by a significant amount, by virtue of its highly-optimized Huffman coding routines. In many cases, the performance of libjpeg-turbo rivals that of proprietary high-speed JPEG codecs.&lt;/p&gt; &#xA;&lt;p&gt;libjpeg-turbo implements both the traditional libjpeg API as well as the less powerful but more straightforward TurboJPEG API. libjpeg-turbo also features colorspace extensions that allow it to compress from/decompress to 32-bit and big-endian pixel buffers (RGBX, XBGR, etc.), as well as a full-featured Java interface.&lt;/p&gt; &#xA;&lt;p&gt;libjpeg-turbo was originally based on libjpeg/SIMD, an MMX-accelerated derivative of libjpeg v6b developed by Miyasaka Masaru. The TigerVNC and VirtualGL projects made numerous enhancements to the codec in 2009, and in early 2010, libjpeg-turbo spun off into an independent project, with the goal of making high-speed JPEG compression/decompression technology available to a broader range of users and developers.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;libjpeg-turbo is covered by three compatible BSD-style open source licenses. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for a roll-up of license terms.&lt;/p&gt; &#xA;&lt;h1&gt;Building libjpeg-turbo&lt;/h1&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt; for complete instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Using libjpeg-turbo&lt;/h1&gt; &#xA;&lt;p&gt;libjpeg-turbo includes two APIs that can be used to compress and decompress JPEG images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TurboJPEG API&lt;/strong&gt;&lt;br&gt; This API provides an easy-to-use interface for compressing and decompressing JPEG images in memory. It also provides some functionality that would not be straightforward to achieve using the underlying libjpeg API, such as generating planar YUV images and performing multiple simultaneous lossless transforms on an image. The Java interface for libjpeg-turbo is written on top of the TurboJPEG API. The TurboJPEG API is recommended for first-time users of libjpeg-turbo. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/tjexample.c&#34;&gt;tjexample.c&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/java/TJExample.java&#34;&gt;TJExample.java&lt;/a&gt; for examples of its usage and to &lt;a href=&#34;http://libjpeg-turbo.org/Documentation/Documentation&#34;&gt;http://libjpeg-turbo.org/Documentation/Documentation&lt;/a&gt; for API documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API&lt;/strong&gt;&lt;br&gt; This is the de facto industry-standard API for compressing and decompressing JPEG images. It is more difficult to use than the TurboJPEG API but also more powerful. The libjpeg API implementation in libjpeg-turbo is both API/ABI-compatible and mathematically compatible with libjpeg v6b. It can also optionally be configured to be API/ABI-compatible with libjpeg v7 and v8 (see below.) Refer to &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/cjpeg.c&#34;&gt;cjpeg.c&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/djpeg.c&#34;&gt;djpeg.c&lt;/a&gt; for examples of its usage and to &lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/libjpeg.txt&#34;&gt;libjpeg.txt&lt;/a&gt; for API documentation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is no significant performance advantage to either API when both are used to perform similar operations.&lt;/p&gt; &#xA;&lt;h2&gt;Colorspace Extensions&lt;/h2&gt; &#xA;&lt;p&gt;libjpeg-turbo includes extensions that allow JPEG images to be compressed directly from (and decompressed directly to) buffers that use BGR, BGRX, RGBX, XBGR, and XRGB pixel ordering. This is implemented with ten new colorspace constants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JCS_EXT_RGB   /* red/green/blue */&#xA;JCS_EXT_RGBX  /* red/green/blue/x */&#xA;JCS_EXT_BGR   /* blue/green/red */&#xA;JCS_EXT_BGRX  /* blue/green/red/x */&#xA;JCS_EXT_XBGR  /* x/blue/green/red */&#xA;JCS_EXT_XRGB  /* x/red/green/blue */&#xA;JCS_EXT_RGBA  /* red/green/blue/alpha */&#xA;JCS_EXT_BGRA  /* blue/green/red/alpha */&#xA;JCS_EXT_ABGR  /* alpha/blue/green/red */&#xA;JCS_EXT_ARGB  /* alpha/red/green/blue */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;cinfo.in_color_space&lt;/code&gt; (compression) or &lt;code&gt;cinfo.out_color_space&lt;/code&gt; (decompression) to one of these values will cause libjpeg-turbo to read the red, green, and blue values from (or write them to) the appropriate position in the pixel when compressing from/decompressing to an RGB buffer.&lt;/p&gt; &#xA;&lt;p&gt;Your application can check for the existence of these extensions at compile time with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#ifdef JCS_EXTENSIONS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At run time, attempting to use these extensions with a libjpeg implementation that does not support them will result in a &#34;Bogus input colorspace&#34; error. Applications can trap this error in order to test whether run-time support is available for the colorspace extensions.&lt;/p&gt; &#xA;&lt;p&gt;When using the RGBX, BGRX, XBGR, and XRGB colorspaces during decompression, the X byte is undefined, and in order to ensure the best performance, libjpeg-turbo can set that byte to whatever value it wishes. If an application expects the X byte to be used as an alpha channel, then it should specify &lt;code&gt;JCS_EXT_RGBA&lt;/code&gt;, &lt;code&gt;JCS_EXT_BGRA&lt;/code&gt;, &lt;code&gt;JCS_EXT_ABGR&lt;/code&gt;, or &lt;code&gt;JCS_EXT_ARGB&lt;/code&gt;. When these colorspace constants are used, the X byte is guaranteed to be 0xFF, which is interpreted as opaque.&lt;/p&gt; &#xA;&lt;p&gt;Your application can check for the existence of the alpha channel colorspace extensions at compile time with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#ifdef JCS_ALPHA_EXTENSIONS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libjpeg-turbo/libjpeg-turbo/main/jcstest.c&#34;&gt;jcstest.c&lt;/a&gt;, located in the libjpeg-turbo source tree, demonstrates how to check for the existence of the colorspace extensions at compile time and run time.&lt;/p&gt; &#xA;&lt;h2&gt;libjpeg v7 and v8 API/ABI Emulation&lt;/h2&gt; &#xA;&lt;p&gt;With libjpeg v7 and v8, new features were added that necessitated extending the compression and decompression structures. Unfortunately, due to the exposed nature of those structures, extending them also necessitated breaking backward ABI compatibility with previous libjpeg releases. Thus, programs that were built to use libjpeg v7 or v8 did not work with libjpeg-turbo, since it is based on the libjpeg v6b code base. Although libjpeg v7 and v8 are not as widely used as v6b, enough programs (including a few Linux distros) made the switch that there was a demand to emulate the libjpeg v7 and v8 ABIs in libjpeg-turbo. It should be noted, however, that this feature was added primarily so that applications that had already been compiled to use libjpeg v7+ could take advantage of accelerated baseline JPEG encoding/decoding without recompiling. libjpeg-turbo does not claim to support all of the libjpeg v7+ features, nor to produce identical output to libjpeg v7+ in all cases (see below.)&lt;/p&gt; &#xA;&lt;p&gt;By passing an argument of &lt;code&gt;-DWITH_JPEG7=1&lt;/code&gt; or &lt;code&gt;-DWITH_JPEG8=1&lt;/code&gt; to &lt;code&gt;cmake&lt;/code&gt;, you can build a version of libjpeg-turbo that emulates the libjpeg v7 or v8 ABI, so that programs that are built against libjpeg v7 or v8 can be run with libjpeg-turbo. The following section describes which libjpeg v7+ features are supported and which aren&#39;t.&lt;/p&gt; &#xA;&lt;h3&gt;Support for libjpeg v7 and v8 Features&lt;/h3&gt; &#xA;&lt;h4&gt;Fully supported&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API: IDCT scaling extensions in decompressor&lt;/strong&gt;&lt;br&gt; libjpeg-turbo supports IDCT scaling with scaling factors of 1/8, 1/4, 3/8, 1/2, 5/8, 3/4, 7/8, 9/8, 5/4, 11/8, 3/2, 13/8, 7/4, 15/8, and 2/1 (only 1/4 and 1/2 are SIMD-accelerated.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API: Arithmetic coding&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API: In-memory source and destination managers&lt;/strong&gt;&lt;br&gt; See notes below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cjpeg: Separate quality settings for luminance and chrominance&lt;/strong&gt;&lt;br&gt; Note that the libpjeg v7+ API was extended to accommodate this feature only for convenience purposes. It has always been possible to implement this feature with libjpeg v6b (see rdswitch.c for an example.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cjpeg: 32-bit BMP support&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cjpeg: &lt;code&gt;-rgb&lt;/code&gt; option&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jpegtran: Lossless cropping&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jpegtran: &lt;code&gt;-perfect&lt;/code&gt; option&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jpegtran: Forcing width/height when performing lossless crop&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rdjpgcom: &lt;code&gt;-raw&lt;/code&gt; option&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rdjpgcom: Locale awareness&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Not supported&lt;/h4&gt; &#xA;&lt;p&gt;NOTE: As of this writing, extensive research has been conducted into the usefulness of DCT scaling as a means of data reduction and SmartScale as a means of quality improvement. Readers are invited to peruse the research at &lt;a href=&#34;http://www.libjpeg-turbo.org/About/SmartScale&#34;&gt;http://www.libjpeg-turbo.org/About/SmartScale&lt;/a&gt; and draw their own conclusions, but it is the general belief of our project that these features have not demonstrated sufficient usefulness to justify inclusion in libjpeg-turbo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API: DCT scaling in compressor&lt;/strong&gt;&lt;br&gt; &lt;code&gt;cinfo.scale_num&lt;/code&gt; and &lt;code&gt;cinfo.scale_denom&lt;/code&gt; are silently ignored. There is no technical reason why DCT scaling could not be supported when emulating the libjpeg v7+ API/ABI, but without the SmartScale extension (see below), only scaling factors of 1/2, 8/15, 4/7, 8/13, 2/3, 8/11, 4/5, and 8/9 would be available, which is of limited usefulness.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API: SmartScale&lt;/strong&gt;&lt;br&gt; &lt;code&gt;cinfo.block_size&lt;/code&gt; is silently ignored. SmartScale is an extension to the JPEG format that allows for DCT block sizes other than 8x8. Providing support for this new format would be feasible (particularly without full acceleration.) However, until/unless the format becomes either an official industry standard or, at minimum, an accepted solution in the community, we are hesitant to implement it, as there is no sense of whether or how it might change in the future. It is our belief that SmartScale has not demonstrated sufficient usefulness as a lossless format nor as a means of quality enhancement, and thus our primary interest in providing this feature would be as a means of supporting additional DCT scaling factors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libjpeg API: Fancy downsampling in compressor&lt;/strong&gt;&lt;br&gt; &lt;code&gt;cinfo.do_fancy_downsampling&lt;/code&gt; is silently ignored. This requires the DCT scaling feature, which is not supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jpegtran: Scaling&lt;/strong&gt;&lt;br&gt; This requires both the DCT scaling and SmartScale features, which are not supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lossless RGB JPEG files&lt;/strong&gt;&lt;br&gt; This requires the SmartScale feature, which is not supported.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What About libjpeg v9?&lt;/h3&gt; &#xA;&lt;p&gt;libjpeg v9 introduced yet another field to the JPEG compression structure (&lt;code&gt;color_transform&lt;/code&gt;), thus making the ABI backward incompatible with that of libjpeg v8. This new field was introduced solely for the purpose of supporting lossless SmartScale encoding. Furthermore, there was actually no reason to extend the API in this manner, as the color transform could have just as easily been activated by way of a new JPEG colorspace constant, thus preserving backward ABI compatibility.&lt;/p&gt; &#xA;&lt;p&gt;Our research (see link above) has shown that lossless SmartScale does not generally accomplish anything that can&#39;t already be accomplished better with existing, standard lossless formats. Therefore, at this time it is our belief that there is not sufficient technical justification for software projects to upgrade from libjpeg v8 to libjpeg v9, and thus there is not sufficient technical justification for us to emulate the libjpeg v9 ABI.&lt;/p&gt; &#xA;&lt;h2&gt;In-Memory Source/Destination Managers&lt;/h2&gt; &#xA;&lt;p&gt;By default, libjpeg-turbo 1.3 and later includes the &lt;code&gt;jpeg_mem_src()&lt;/code&gt; and &lt;code&gt;jpeg_mem_dest()&lt;/code&gt; functions, even when not emulating the libjpeg v8 API/ABI. Previously, it was necessary to build libjpeg-turbo from source with libjpeg v8 API/ABI emulation in order to use the in-memory source/destination managers, but several projects requested that those functions be included when emulating the libjpeg v6b API/ABI as well. This allows the use of those functions by programs that need them, without breaking ABI compatibility for programs that don&#39;t, and it allows those functions to be provided in the &#34;official&#34; libjpeg-turbo binaries.&lt;/p&gt; &#xA;&lt;p&gt;Note that, on most Un*x systems, the dynamic linker will not look for a function in a library until that function is actually used. Thus, if a program is built against libjpeg-turbo 1.3+ and uses &lt;code&gt;jpeg_mem_src()&lt;/code&gt; or &lt;code&gt;jpeg_mem_dest()&lt;/code&gt;, that program will not fail if run against an older version of libjpeg-turbo or against libjpeg v7- until the program actually tries to call &lt;code&gt;jpeg_mem_src()&lt;/code&gt; or &lt;code&gt;jpeg_mem_dest()&lt;/code&gt;. Such is not the case on Windows. If a program is built against the libjpeg-turbo 1.3+ DLL and uses &lt;code&gt;jpeg_mem_src()&lt;/code&gt; or &lt;code&gt;jpeg_mem_dest()&lt;/code&gt;, then it must use the libjpeg-turbo 1.3+ DLL at run time.&lt;/p&gt; &#xA;&lt;p&gt;Both cjpeg and djpeg have been extended to allow testing the in-memory source/destination manager functions. See their respective man pages for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Mathematical Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;For the most part, libjpeg-turbo should produce identical output to libjpeg v6b. The one exception to this is when using the floating point DCT/IDCT, in which case the outputs of libjpeg v6b and libjpeg-turbo can differ for the following reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The SSE/SSE2 floating point DCT implementation in libjpeg-turbo is ever so slightly more accurate than the implementation in libjpeg v6b, but not by any amount perceptible to human vision (generally in the range of 0.01 to 0.08 dB gain in PNSR.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When not using the SIMD extensions, libjpeg-turbo uses the more accurate (and slightly faster) floating point IDCT algorithm introduced in libjpeg v8a as opposed to the algorithm used in libjpeg v6b. It should be noted, however, that this algorithm basically brings the accuracy of the floating point IDCT in line with the accuracy of the accurate integer IDCT. The floating point DCT/IDCT algorithms are mainly a legacy feature, and they do not produce significantly more accuracy than the accurate integer algorithms (to put numbers on this, the typical difference in PNSR between the two algorithms is less than 0.10 dB, whereas changing the quality level by 1 in the upper range of the quality scale is typically more like a 1.0 dB difference.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the floating point algorithms in libjpeg-turbo are not implemented using SIMD instructions on a particular platform, then the accuracy of the floating point DCT/IDCT can depend on the compiler settings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While libjpeg-turbo does emulate the libjpeg v8 API/ABI, under the hood it is still using the same algorithms as libjpeg v6b, so there are several specific cases in which libjpeg-turbo cannot be expected to produce the same output as libjpeg v8:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When decompressing using scaling factors of 1/2 and 1/4, because libjpeg v8 implements those scaling algorithms differently than libjpeg v6b does, and libjpeg-turbo&#39;s SIMD extensions are based on the libjpeg v6b behavior.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using chrominance subsampling, because libjpeg v8 implements this with its DCT/IDCT scaling algorithms rather than with a separate downsampling/upsampling algorithm. In our testing, the subsampled/upsampled output of libjpeg v8 is less accurate than that of libjpeg v6b for this reason.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When decompressing using a scaling factor &amp;gt; 1 and merged (AKA &#34;non-fancy&#34; or &#34;non-smooth&#34;) chrominance upsampling, because libjpeg v8 does not support merged upsampling with scaling factors &amp;gt; 1.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Performance Pitfalls&lt;/h1&gt; &#xA;&lt;h2&gt;Restart Markers&lt;/h2&gt; &#xA;&lt;p&gt;The optimized Huffman decoder in libjpeg-turbo does not handle restart markers in a way that makes the rest of the libjpeg infrastructure happy, so it is necessary to use the slow Huffman decoder when decompressing a JPEG image that has restart markers. This can cause the decompression performance to drop by as much as 20%, but the performance will still be much greater than that of libjpeg. Many consumer packages, such as Photoshop, use restart markers when generating JPEG images, so images generated by those programs will experience this issue.&lt;/p&gt; &#xA;&lt;h2&gt;Fast Integer Forward DCT at High Quality Levels&lt;/h2&gt; &#xA;&lt;p&gt;The algorithm used by the SIMD-accelerated quantization function cannot produce correct results whenever the fast integer forward DCT is used along with a JPEG quality of 98-100. Thus, libjpeg-turbo must use the non-SIMD quantization function in those cases. This causes performance to drop by as much as 40%. It is therefore strongly advised that you use the accurate integer forward DCT whenever encoding images with a JPEG quality of 98 or higher.&lt;/p&gt; &#xA;&lt;h1&gt;Memory Debugger Pitfalls&lt;/h1&gt; &#xA;&lt;p&gt;Valgrind and Memory Sanitizer (MSan) can generate false positives (specifically, incorrect reports of uninitialized memory accesses) when used with libjpeg-turbo&#39;s SIMD extensions. It is generally recommended that the SIMD extensions be disabled, either by passing an argument of &lt;code&gt;-DWITH_SIMD=0&lt;/code&gt; to &lt;code&gt;cmake&lt;/code&gt; when configuring the build or by setting the environment variable &lt;code&gt;JSIMD_FORCENONE&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; at run time, when testing libjpeg-turbo with Valgrind, MSan, or other memory debuggers.&lt;/p&gt;</summary>
  </entry>
</feed>