<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-01T01:29:13Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Autossh/autossh</title>
    <updated>2024-10-01T01:29:13Z</updated>
    <id>tag:github.com,2024-10-01:/Autossh/autossh</id>
    <link href="https://github.com/Autossh/autossh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically restart SSH sessions and tunnels&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;autossh Version 1.4&lt;/h2&gt; &#xA;&lt;h2&gt;Building and Installing Autossh&lt;/h2&gt; &#xA;&lt;p&gt;With version 1.4, autossh now uses autoconf. So the build procedure is now the well-known:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look at autossh.host for an example wrapper script.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;autossh [-M &amp;lt;port&amp;gt;[:echo_port]] [-f] [SSH OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;autossh is a program to start a copy of ssh and monitor it, restarting it as necessary should it die or stop passing traffic.&lt;/p&gt; &#xA;&lt;p&gt;The original idea and the mechanism were from rstunnel (Reliable SSH Tunnel). With version 1.2 the method changed: autossh now uses ssh to construct a loop of ssh forwardings (one from local to remote, one from remote to local), and then sends test data that it expects to get back. (The idea is thanks to Terrence Martin.)&lt;/p&gt; &#xA;&lt;p&gt;With version 1.3, a new method is added (thanks to Ron Yorston): a port may be specified for a remote echo service that will echo back the test data. This avoids the congestion and the aggravation of making sure all the port numbers on the remote machine do not collide. The loop-of -forwardings method remains available for situations where using an echo service may not be possible.&lt;/p&gt; &#xA;&lt;p&gt;autossh has only three arguments of its own:&lt;/p&gt; &#xA;&lt;p&gt;-M &#xA; &lt;port&gt;&#xA;  [:echo_port], to specify the base monitoring port to use, or alternatively, to specify the monitoring port and echo service port to use.&#xA; &lt;/port&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When no echo service port is specified, this port and the port &#xA;immediately above it (port# + 1) should be something nothing &#xA;else is using. autossh will send test data on the base monitoring &#xA;port, and receive it back on the port above. For example, if you &#xA;specify &#34;-M 20000&#34;, autossh will set up forwards so that it can &#xA;send data on port 20000 and receive it back on 20001.&#xA;&#xA;Alternatively a port for a remote echo service may be&#xA;specified. This should be port 7 if you wish to use the&#xA;standard inetd echo service.  When an echo port is specified,&#xA;only the specified monitor port is used, and it carries the&#xA;monitor message in both directions.&#xA;&#xA;Many people disable the echo service, or even disable inetd,&#xA;so check that this service is available on the remote&#xA;machine. Some operating systems allow one to specify that the&#xA;service only listen on the localhost (loopback interface),&#xA;which would suffice for this use.&#xA;&#xA;The echo service may also be something more complicated:&#xA;perhaps a daemon that monitors a group of ssh tunnels.&#xA;&#xA;-M 0 will turn the monitoring off, and autossh will only&#xA;restart ssh on ssh exit.&#xA;&#xA;For example, if you are using a recent version of OpenSSH, you &#xA;may wish to explore using the ServerAliveInterval and &#xA;ServerAliveCountMax options to have the SSH client exit if it &#xA;finds itself no longer connected to the server. In many ways &#xA;this may be a better solution than the monitoring port.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-f Causes autossh to drop to the background before running ssh. The -f flag is stripped from arguments passed to ssh. Note that there is a crucial difference between the -f with autossh, and -f with ssh: when used with autossh, ssh will be &lt;em&gt;unable&lt;/em&gt; to ask for passwords or passphrases. When -f is used, the &#34;starting gate&#34; time (see AUTOSSH_GATETIME) will be set to 0.&lt;/p&gt; &#xA;&lt;p&gt;-V to have autossh display its version and exit.&lt;/p&gt; &#xA;&lt;p&gt;All other arguments are passed to ssh. There are a number of other settings, but these are all controlled through environment variables. ssh seems to be appropriating more and more letters for options, and this seems the easiest way to avoid collisions.&lt;/p&gt; &#xA;&lt;p&gt;autossh tries to distinguish the manner of death of the ssh process it is monitoring and act appropriately. The rules are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the ssh process exited normally (for example, someone typed &#34;exit&#34; in an interactive session), autossh exits rather than restarting;&lt;/li&gt; &#xA; &lt;li&gt;If autossh itself receives a SIGTERM, SIGINT, or a SIGKILL signal, it assumes that it was deliberately signalled, and exits after killing the child ssh process;&lt;/li&gt; &#xA; &lt;li&gt;If autossh itself receives a SIGUSR1 signal, it will kill the child ssh process and start a new one;&lt;/li&gt; &#xA; &lt;li&gt;Periodically (by default every 10 minutes), autossh attempts to pass traffic on the monitor forwarded port. If this fails, autossh will kill the child ssh process (if it is still running) and start a new one;&lt;/li&gt; &#xA; &lt;li&gt;If the child ssh process dies for any other reason, autossh will attempt to start a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Startup behaviour:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the ssh session fails with an exit status of 1 on the very first try, autossh will assume that there is some problem with syntax or the connection setup, and will exit rather than retrying;&lt;/li&gt; &#xA; &lt;li&gt;There is now a &#34;starting gate&#34; time. If the first ssh process fails within the first few seconds of being started, autossh assumes that it never made it &#34;out of the starting gate&#34;, and exits. This is to handle initial failed authentication, connection, etc. This time is 30 seconds by default, and can be adjusted (see the AUTOSSH_GATETIME environment variable below).&lt;/li&gt; &#xA; &lt;li&gt;NOTE: If AUTOSSH_GATETIME is set to 0, then BOTH of the above behaviours are disabled. This is useful for, for example, having autossh start on boot. The &#34;starting gate&#34; time is also set to 0 with the -f flag to autossh is used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Continued failures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the ssh connection fails and attempts to restart it fail in quick succession, autossh will start delaying its attempts to restart, gradually backing farther and farther off up to a maximum interval of the autossh poll time (usually 10 minutes). autossh can be &#34;prodded&#34; to retry by signalling it, perhaps with SIGHUP (&#34;kill -HUP&#34;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connection Setup&lt;/h2&gt; &#xA;&lt;p&gt;As connections must be established unattended, the use of autossh requires that some form of automatic authentication be set up. The use of RSAAuthentication with ssh-agent is the recommended method. The example wrapper script attempts to check if there is an agent running for the current environment, and to start one if there isn&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;It cannot be stressed enough that you must make sure ssh works on its own, that you can set up the session you want before you try to run it under autossh.&lt;/p&gt; &#xA;&lt;p&gt;If you are tunnelling and using an older version of ssh that does not support the -N flag, you should upgrade (your version has security flaws). If you can&#39;t upgrade, you may wish to do as rstunnel does, and give ssh a command to run, such as &#34;sleep 99999999999&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Disabling connection monitoring&lt;/h2&gt; &#xA;&lt;p&gt;A monitor port value of &#34;0&#34; (&#34;autossh -M 0&#34;) will disable use of the monitor ports; autossh will then only react to signals and the death of the ssh process.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The following environment variables can be set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AUTOSSH_DEBUG&#x9;  - sets logging level to LOG_DEBUG, and if&#xA;&#x9;&#x9;    the operating system supports it, sets&#xA;&#x9;&#x9;    syslog to duplicate log entries to stderr.&#xA;AUTOSSH_FIRST_POLL&#x9;  - time to initial poll (default is as &#xA;&#x9;&#x9;    AUTOSSH_POLL below).&#xA;AUTOSSH_GATETIME      - how long ssh must be up before we consider&#xA;                    it a successful connection. Default is 30&#xA;&#x9;&#x9;    seconds. If set to 0, then this behaviour&#xA;&#x9;&#x9;    is disabled, and as well, autossh will retry&#xA;&#x9;&#x9;    even on failure of first attempt to run ssh.&#xA;AUTOSSH_LOGFILE&#x9;  - sets autossh to use the named log file,&#xA;&#x9;&#x9;    rather than syslog.&#xA;AUTOSSH_LOGLEVEL&#x9;  - log level, they correspond to the levels &#xA;&#x9;&#x9;    used by syslog; so 0-7 with 7 being the&#xA;&#x9;&#x9;    chattiest.&#xA;AUTOSSH_MAXLIFETIME   - Sets the maximum number of seconds the process &#xA;&#x9;&#x9;    should live for before killing off the ssh child &#xA;&#x9;&#x9;    and exiting.&#xA;AUTOSSH_MAXSTART&#x9;  - specifies how many times ssh should be started.&#xA;&#x9;&#x9;    A negative number means no limit on the number &#xA;&#x9;&#x9;    of times ssh is started. The default value is -1.&#xA;AUTOSSH_MESSAGE&#x9;  - append a custom message to the echo string (max 64&#xA;&#x9;&#x9;    bytes).&#xA;AUTOSSH_NTSERVICE     - when set to &#34;yes&#34; , setup autossh to run as an &#xA;&#x9;&#x9;    NT service under cygrunsrv. This adds the -N flag&#xA;&#x9;&#x9;    for ssh if not already set, sets the log output &#xA;&#x9;&#x9;    to stdout, and changes the behaviour on ssh exit &#xA;&#x9;&#x9;    so that it will restart even on a normal exit.&#xA;AUTOSSH_PATH&#x9;  - path to the ssh executable, in case&#xA;&#x9;&#x9;    it is different than that compiled in.&#xA;AUTOSSH_PIDFILE&#x9;  - write autossh pid to specified file.&#xA;AUTOSSH_POLL&#x9;  - poll time in seconds; default is 600.&#xA;&#x9;&#x9;&#x9;    Changing this will also change the first&#xA;&#x9;&#x9;    poll time, unless AUTOSSH_FIRST_POLL is&#xA;&#x9;&#x9;    used to set it to something different.&#xA;&#x9;&#x9;    If the poll time is less than twice the &#xA;&#x9;&#x9;    network timeouts (default 15 seconds) the &#xA;&#x9;&#x9;    network timeouts will be adjusted downward &#xA;&#x9;&#x9;    to 1/2 the poll time.&#xA;AUTOSSH_PORT&#x9;  - set monitor port. Mostly in case ssh&#xA;&#x9;&#x9;    appropriates -M at some time. But because&#xA;&#x9;&#x9;    of this possible use, AUTOSSH_PORT overrides&#xA;&#x9;&#x9;    the -M flag.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SSH Options&lt;/h2&gt; &#xA;&lt;p&gt;There are two particular OpenSSH options that are useful when using autossh:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;ExitOnForwardFailure=yes on the client side to make sure forwardings have succeeded when autossh assumes the connection is setup properly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ClientAliveInterval on the server side to make sure the listening socket is closed on the server side if the connection closes on the client side.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Logging and Syslog&lt;/h2&gt; &#xA;&lt;p&gt;autossh logs to syslog using the LOG_USER facility. Your syslog may have to be configured to accept messages for this facility. This is usually done in /etc/syslog.conf.&lt;/p&gt; &#xA;&lt;p&gt;-- Kudos and raspberries to harding [at] motd.ca&lt;/p&gt;</summary>
  </entry>
</feed>