<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-18T01:30:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/documentdb</title>
    <updated>2025-05-18T01:30:22Z</updated>
    <id>tag:github.com,2025-05-18:/microsoft/documentdb</id>
    <link href="https://github.com/microsoft/documentdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DocumentDB is the open-source engine powering vCore-based Azure Cosmos DB for MongoDB. It offers a native implementation of document-oriented NoSQL database, enabling seamless CRUD operations on BSON data types within a PostgreSQL framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;DocumentDB&lt;/code&gt; is the engine powering vCore-based Azure Cosmos DB for MongoDB. It offers a native implementation of document-oriented NoSQL database, enabling seamless CRUD operations on BSON data types within a PostgreSQL framework. Beyond basic operations, DocumentDB empowers you to execute complex workloads, including full-text searches, geospatial queries, and vector embeddings on your dataset, delivering robust functionality and flexibility for diverse data management needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/about/&#34;&gt;PostgreSQL&lt;/a&gt; is a powerful, open source object-relational database system that uses and extends the SQL language combined with many features that safely store and scale the most complicated data workloads.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;The project comprises of two primary components, which work together to support document operations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;pg_documentdb_core :&lt;/strong&gt; PostgreSQL extension introducing BSON datatype support and operations for native Postgres.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pg_documentdb :&lt;/strong&gt; The public API surface for DocumentDB providing CRUD functionality on documents in the store.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why DocumentDB ?&lt;/h2&gt; &#xA;&lt;p&gt;At DocumentDB, we believe in the power of open-source to drive innovation and collaboration. Our commitment to being a fully open-source document database means that we are dedicated to transparency, community involvement, and continuous improvement. We are open-sourced under the most permissive &lt;a href=&#34;https://opensource.org/license/mit&#34;&gt;MIT&lt;/a&gt; license, where developers and organizations alike have no restrictions incorporating the project into new and existing solutions of their own. DocumentDB introduces the BSON data type and provides APIs for seamless operation within native PostgreSQL, enhancing efficiency and aligning with operational advantages.&lt;/p&gt; &#xA;&lt;p&gt;DocumentDB also provides a powerful on-premise solution, allowing organizations to maintain full control over their data and infrastructure. This flexibility ensures that you can deploy it in your own environment, meeting your specific security, compliance, and performance requirements. With DocumentDB, you get the best of both worlds: the innovation of open-source and the control of on-premise deployment.&lt;/p&gt; &#xA;&lt;h3&gt;Based on Postgres&lt;/h3&gt; &#xA;&lt;p&gt;DocumentDB is built on top of PostgreSQL, one of the most advanced and reliable open-source relational database systems available. We chose PostgreSQL as our base layer for several reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proven Stability and Performance&lt;/strong&gt;: PostgreSQL has a long history of stability and performance, making it a trusted choice for mission-critical applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensibility&lt;/strong&gt;: Their extensible architecture allows us to integrate a DocumentDB API on BSON data type seamlessly, providing the flexibility to handle both relational and document data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Active Community&lt;/strong&gt;: PostgreSQL has a vibrant and active community that continuously contributes to its development, ensuring that it remains at the forefront of database technology.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Features&lt;/strong&gt;: PostgreSQL offers a rich set of features, including advanced indexing, full-text search, and powerful querying capabilities, which enhance the functionality of DocumentDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compliance and Security&lt;/strong&gt;: PostgreSQL&#39;s robust security features and compliance with various standards make it an ideal choice for organizations with stringent security and regulatory requirements.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By building on PostgreSQL, DocumentDB leverages these strengths to provide a powerful, flexible, and reliable document database that meets the need of modern applications. DocumentDB will continue to benefit from the advancements brought into the PostgreSQL ecosystem.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-requisite&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt; is installed on your system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building DocumentDB with Docker&lt;/h3&gt; &#xA;&lt;p&gt;Step 1: Clone the DocumentDB repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/microsoft/documentdb.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2: Create the docker image. Navigate to cloned repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build . -f .devcontainer/Dockerfile -t documentdb &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Validate using &lt;code&gt;docker image ls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Step 3: Run the Image as a container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v $(pwd):/home/documentdb/code -it documentdb /bin/bash &#xA;&#xA;cd code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Aligns local location with docker image created, allows de-duplicating cloning repo again within image).&lt;br&gt; Note: Validate container is running &lt;code&gt;docker container ls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Step 4: Build &amp;amp; Deploy the binaries&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Run in case of an unsuccessful build &lt;code&gt;git config --global --add safe.directory /home/documentdb/code&lt;/code&gt; within image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: To run backend postgresql tests after installing you can run &lt;code&gt;make check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You are all set to work with DocumentDB.&lt;/p&gt; &#xA;&lt;h3&gt;Using the Prebuilt Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;You can use a &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/documentdb/main/.github%5Ccontainers%5CBuild-Ubuntu%5CPrebuildImageList.md&#34;&gt;prebuilt docker image&lt;/a&gt; for DocumentDB instead of building it from source. Follow these steps:&lt;/p&gt; &#xA;&lt;h4&gt;Pull the Prebuilt Image&lt;/h4&gt; &#xA;&lt;p&gt;Pull the prebuilt image directly from the Microsoft Container Registry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull mcr.microsoft.com/cosmosdb/ubuntu/documentdb-oss:22.04-PG16-AMD64-0.103.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Prebuilt Image&lt;/h4&gt; &#xA;&lt;p&gt;To run the prebuilt image, use one of the following commands:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -dt mcr.microsoft.com/cosmosdb/ubuntu/documentdb-oss:22.04-PG16-AMD64-0.103.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;If external access is required, run the container with parameter &#34;-e&#34;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 127.0.0.1:9712:9712 -dt mcr.microsoft.com/cosmosdb/ubuntu/documentdb-oss:22.04-PG16-AMD64-0.103.0 -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the container and map port &lt;code&gt;9712&lt;/code&gt; from the container to the host.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting to the Server&lt;/h3&gt; &#xA;&lt;h4&gt;Internal Access&lt;/h4&gt; &#xA;&lt;p&gt;Step 1: Run &lt;code&gt;start_oss_server.sh&lt;/code&gt; to initialize the DocumentDB server and manage dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/start_oss_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or logging into the container if using prebuild image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container-id&amp;gt; bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2: Connect to &lt;code&gt;psql&lt;/code&gt; shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -p 9712 -d postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;External Access&lt;/h4&gt; &#xA;&lt;p&gt;Connect to &lt;code&gt;psql&lt;/code&gt; shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -h localhost --port 9712 -d postgres -U documentdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have your &lt;code&gt;DocumentDB&lt;/code&gt; set up running, you can start with creating collections, indexes and perform queries on them.&lt;/p&gt; &#xA;&lt;h3&gt;Create a collection&lt;/h3&gt; &#xA;&lt;p&gt;DocumentDB provides &lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#create_collection&#34;&gt;documentdb_api.create_collection&lt;/a&gt; function to create a new collection within a specified database, enabling you to manage and organize your BSON documents effectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT documentdb_api.create_collection(&#39;documentdb&#39;,&#39;patient&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Perform CRUD operations&lt;/h3&gt; &#xA;&lt;h4&gt;Insert documents&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#insert_one&#34;&gt;documentdb_api.insert_one&lt;/a&gt; command is used to add a single document into a collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;patient&#39;, &#39;{ &#34;patient_id&#34;: &#34;P001&#34;, &#34;name&#34;: &#34;Alice Smith&#34;, &#34;age&#34;: 30, &#34;phone_number&#34;: &#34;555-0123&#34;, &#34;registration_year&#34;: &#34;2023&#34;,&#34;conditions&#34;: [&#34;Diabetes&#34;, &#34;Hypertension&#34;]}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;patient&#39;, &#39;{ &#34;patient_id&#34;: &#34;P002&#34;, &#34;name&#34;: &#34;Bob Johnson&#34;, &#34;age&#34;: 45, &#34;phone_number&#34;: &#34;555-0456&#34;, &#34;registration_year&#34;: &#34;2023&#34;, &#34;conditions&#34;: [&#34;Asthma&#34;]}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;patient&#39;, &#39;{ &#34;patient_id&#34;: &#34;P003&#34;, &#34;name&#34;: &#34;Charlie Brown&#34;, &#34;age&#34;: 29, &#34;phone_number&#34;: &#34;555-0789&#34;, &#34;registration_year&#34;: &#34;2024&#34;, &#34;conditions&#34;: [&#34;Allergy&#34;, &#34;Anemia&#34;]}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;patient&#39;, &#39;{ &#34;patient_id&#34;: &#34;P004&#34;, &#34;name&#34;: &#34;Diana Prince&#34;, &#34;age&#34;: 40, &#34;phone_number&#34;: &#34;555-0987&#34;, &#34;registration_year&#34;: &#34;2024&#34;, &#34;conditions&#34;: [&#34;Migraine&#34;]}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;patient&#39;, &#39;{ &#34;patient_id&#34;: &#34;P005&#34;, &#34;name&#34;: &#34;Edward Norton&#34;, &#34;age&#34;: 55, &#34;phone_number&#34;: &#34;555-1111&#34;, &#34;registration_year&#34;: &#34;2025&#34;, &#34;conditions&#34;: [&#34;Hypertension&#34;, &#34;Heart Disease&#34;]}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Read document from a collection&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;documentdb_api.collection&lt;/code&gt; function is used for retrieving the documents in a collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT document FROM documentdb_api.collection(&#39;documentdb&#39;,&#39;patient&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, we can apply filter to our queries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET search_path TO documentdb_api, documentdb_core;&#xA;SET documentdb_core.bsonUseEJson TO true;&#xA;&#xA;SELECT cursorPage FROM documentdb_api.find_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;find&#34; : &#34;patient&#34;, &#34;filter&#34; : {&#34;patient_id&#34;:&#34;P005&#34;}}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can perform range queries as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT cursorPage FROM documentdb_api.find_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;find&#34; : &#34;patient&#34;, &#34;filter&#34; : { &#34;$and&#34;: [{ &#34;age&#34;: { &#34;$gte&#34;: 10 } },{ &#34;age&#34;: { &#34;$lte&#34;: 35 } }] }}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Update document in a collection&lt;/h4&gt; &#xA;&lt;p&gt;DocumentDB uses the &lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#update&#34;&gt;documentdb_api.update&lt;/a&gt; function to modify existing documents within a collection.&lt;/p&gt; &#xA;&lt;p&gt;The SQL command updates the &lt;code&gt;age&lt;/code&gt; for patient &lt;code&gt;P004&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select documentdb_api.update(&#39;documentdb&#39;, &#39;{&#34;update&#34;:&#34;patient&#34;, &#34;updates&#34;:[{&#34;q&#34;:{&#34;patient_id&#34;:&#34;P004&#34;},&#34;u&#34;:{&#34;$set&#34;:{&#34;age&#34;:14}}}]}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, we can update multiple documents using &lt;code&gt;multi&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT documentdb_api.update(&#39;documentdb&#39;, &#39;{&#34;update&#34;:&#34;patient&#34;, &#34;updates&#34;:[{&#34;q&#34;:{},&#34;u&#34;:{&#34;$set&#34;:{&#34;age&#34;:24}},&#34;multi&#34;:true}]}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Delete document from the collection&lt;/h4&gt; &#xA;&lt;p&gt;DocumentDB uses the &lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#delete&#34;&gt;documentdb_api.delete&lt;/a&gt; function for precise document removal based on specified criteria.&lt;/p&gt; &#xA;&lt;p&gt;The SQL command deletes the document for patient &lt;code&gt;P002&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT documentdb_api.delete(&#39;documentdb&#39;, &#39;{&#34;delete&#34;: &#34;patient&#34;, &#34;deletes&#34;: [{&#34;q&#34;: {&#34;patient_id&#34;: &#34;P002&#34;}, &#34;limit&#34;: 1}]}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection management&lt;/h3&gt; &#xA;&lt;p&gt;We can review for the available collections and databases by querying &lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#list_collections_cursor_first_page&#34;&gt;documentdb_api.list_collections_cursor_first_page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM documentdb_api.list_collections_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;listCollections&#34;: 1 }&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#list_indexes_cursor_first_page&#34;&gt;documentdb_api.list_indexes_cursor_first_page&lt;/a&gt; allows reviewing for the existing indexes on a collection. We can find collection_id from &lt;code&gt;documentdb_api.list_collections_cursor_first_page&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT documentdb_api.list_indexes_cursor_first_page(&#39;documentdb&#39;,&#39;{&#34;listIndexes&#34;: &#34;patient&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ttl&lt;/code&gt; indexes by default gets scheduled through the &lt;code&gt;pg_cron&lt;/code&gt; scheduler, which could be reviewed by querying the &lt;code&gt;cron.job&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from cron.job;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Indexing&lt;/h3&gt; &#xA;&lt;h4&gt;Create an Index&lt;/h4&gt; &#xA;&lt;p&gt;DocumentDB uses the &lt;code&gt;documentdb_api.create_indexes_background&lt;/code&gt; function, which allows background index creation without disrupting database operations.&lt;/p&gt; &#xA;&lt;p&gt;The SQL command demonstrates how to create a &lt;code&gt;single field&lt;/code&gt; index on &lt;code&gt;age&lt;/code&gt; on the &lt;code&gt;patient&lt;/code&gt; collection of the &lt;code&gt;documentdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM documentdb_api.create_indexes_background(&#39;documentdb&#39;, &#39;{ &#34;createIndexes&#34;: &#34;patient&#34;, &#34;indexes&#34;: [{ &#34;key&#34;: {&#34;age&#34;: 1},&#34;name&#34;: &#34;idx_age&#34;}]}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The SQL command demonstrates how to create a &lt;code&gt;compound index&lt;/code&gt; on fields age and registration_year on the &lt;code&gt;patient&lt;/code&gt; collection of the &lt;code&gt;documentdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM documentdb_api.create_indexes_background(&#39;documentdb&#39;, &#39;{ &#34;createIndexes&#34;: &#34;patient&#34;, &#34;indexes&#34;: [{ &#34;key&#34;: {&#34;registration_year&#34;: 1, &#34;age&#34;: 1},&#34;name&#34;: &#34;idx_regyr_age&#34;}]}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Drop an Index&lt;/h4&gt; &#xA;&lt;p&gt;DocumentDB uses the &lt;code&gt;documentdb_api.drop_indexes&lt;/code&gt; function, which allows you to remove an existing index from a collection. The SQL command demonstrates how to drop the index named &lt;code&gt;id_ab_1&lt;/code&gt; from the &lt;code&gt;first_collection&lt;/code&gt; collection of the &lt;code&gt;documentdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CALL documentdb_api.drop_indexes(&#39;documentdb&#39;, &#39;{&#34;dropIndexes&#34;: &#34;patient&#34;, &#34;index&#34;:&#34;idx_age&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Perform aggregations &lt;code&gt;Group by&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;DocumentDB provides the &lt;a href=&#34;https://github.com/microsoft/documentdb/wiki/Functions#aggregate_cursor_first_page&#34;&gt;documentdb_api.aggregate_cursor_first_page&lt;/a&gt; function, for performing aggregations over the document store.&lt;/p&gt; &#xA;&lt;p&gt;The example projects an aggregation on number of patients registered over the years.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT cursorpage FROM documentdb_api.aggregate_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;aggregate&#34;: &#34;patient&#34;, &#34;pipeline&#34;: [ { &#34;$group&#34;: { &#34;_id&#34;: &#34;$registration_year&#34;, &#34;count_patients&#34;: { &#34;$count&#34;: {} } } } ] , &#34;cursor&#34;: { &#34;batchSize&#34;: 3 } }&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can perform more complex operations, listing below a few more usage examples. The example demonstrates an aggregation on patients, categorizing them into buckets defined by registration_year boundaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT cursorpage FROM documentdb_api.aggregate_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;aggregate&#34;: &#34;patient&#34;, &#34;pipeline&#34;: [ { &#34;$bucket&#34;: { &#34;groupBy&#34;: &#34;$registration_year&#34;, &#34;boundaries&#34;: [&#34;2022&#34;,&#34;2023&#34;,&#34;2024&#34;], &#34;default&#34;: &#34;unknown&#34; } } ], &#34;cursor&#34;: { &#34;batchSize&#34;: 3 } }&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This query performs an aggregation on the &lt;code&gt;patient&lt;/code&gt; collection to group documents by &lt;code&gt;registration_year&lt;/code&gt;. It collects unique patient conditions for each registration year using the &lt;code&gt;$addToSet&lt;/code&gt; operator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT cursorpage FROM documentdb_api.aggregate_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;aggregate&#34;: &#34;patient&#34;, &#34;pipeline&#34;: [ { &#34;$group&#34;: { &#34;_id&#34;: &#34;$registration_year&#34;, &#34;conditions&#34;: { &#34;$addToSet&#34;: { &#34;conditions&#34; : &#34;$conditions&#34; } } } } ], &#34;cursor&#34;: { &#34;batchSize&#34;: 3 } }&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Join data from multiple collections&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s create an additional collection named &lt;code&gt;appointment&lt;/code&gt; to demonstrate how a join operation can be performed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;appointment&#39;, &#39;{&#34;appointment_id&#34;: &#34;A001&#34;, &#34;patient_id&#34;: &#34;P001&#34;, &#34;doctor_name&#34;: &#34;Dr. Milind&#34;, &#34;appointment_date&#34;: &#34;2023-01-20&#34;, &#34;reason&#34;: &#34;Routine checkup&#34; }&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;appointment&#39;, &#39;{&#34;appointment_id&#34;: &#34;A002&#34;, &#34;patient_id&#34;: &#34;P001&#34;, &#34;doctor_name&#34;: &#34;Dr. Moore&#34;, &#34;appointment_date&#34;: &#34;2023-02-10&#34;, &#34;reason&#34;: &#34;Follow-up&#34;}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;appointment&#39;, &#39;{&#34;appointment_id&#34;: &#34;A004&#34;, &#34;patient_id&#34;: &#34;P003&#34;, &#34;doctor_name&#34;: &#34;Dr. Smith&#34;, &#34;appointment_date&#34;: &#34;2024-03-12&#34;, &#34;reason&#34;: &#34;Allergy consultation&#34;}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;appointment&#39;, &#39;{&#34;appointment_id&#34;: &#34;A005&#34;, &#34;patient_id&#34;: &#34;P004&#34;, &#34;doctor_name&#34;: &#34;Dr. Moore&#34;, &#34;appointment_date&#34;: &#34;2024-04-15&#34;, &#34;reason&#34;: &#34;Migraine treatment&#34;}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;appointment&#39;, &#39;{&#34;appointment_id&#34;: &#34;A007&#34;,&#34;patient_id&#34;: &#34;P001&#34;, &#34;doctor_name&#34;: &#34;Dr. Milind&#34;, &#34;appointment_date&#34;: &#34;2024-06-05&#34;, &#34;reason&#34;: &#34;Blood test&#34;}&#39;);&#xA;select documentdb_api.insert_one(&#39;documentdb&#39;,&#39;appointment&#39;, &#39;{ &#34;appointment_id&#34;: &#34;A009&#34;, &#34;patient_id&#34;: &#34;P003&#34;, &#34;doctor_name&#34;: &#34;Dr. Smith&#34;,&#34;appointment_date&#34;: &#34;2025-01-20&#34;, &#34;reason&#34;: &#34;Follow-up visit&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example presents each patient along with the doctors visited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT cursorpage FROM documentdb_api.aggregate_cursor_first_page(&#39;documentdb&#39;, &#39;{ &#34;aggregate&#34;: &#34;patient&#34;, &#34;pipeline&#34;: [ { &#34;$lookup&#34;: { &#34;from&#34;: &#34;appointment&#34;,&#34;localField&#34;: &#34;patient_id&#34;, &#34;foreignField&#34;: &#34;patient_id&#34;, &#34;as&#34;: &#34;appointment&#34; } },{&#34;$unwind&#34;:&#34;$appointment&#34;},{&#34;$project&#34;:{&#34;_id&#34;:0,&#34;name&#34;:1,&#34;appointment.doctor_name&#34;:1,&#34;appointment.appointment_date&#34;:1}} ], &#34;cursor&#34;: { &#34;batchSize&#34;: 3 } }&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please refer to page for contributing to our &lt;a href=&#34;https://github.com/orgs/microsoft/projects/1407/views/1&#34;&gt;Roadmap list&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FerretDB/FerretDB&#34;&gt;FerretDB&lt;/a&gt; integration allows using DocumentDB as backend engine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributors and users can join the &lt;a href=&#34;https://aka.ms/documentdb_discord&#34;&gt;DocumentDB Discord channel in the Microsoft OSS server&lt;/a&gt; for quick collaboration.&lt;/p&gt; &#xA;&lt;h3&gt;FAQs&lt;/h3&gt; &#xA;&lt;p&gt;Q1. While performing &lt;code&gt;make check&lt;/code&gt; if you encounter error &lt;code&gt;FATAL: &#34;/home/documentdb/code/pg_documentdb_core/src/test/regress/tmp/data&#34; has wrong ownership&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Please drop the &lt;code&gt;/home/documentdb/code/pg_documentdb_core/src/test/regress/tmp/&lt;/code&gt; directory and rerun the &lt;code&gt;make check&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>