<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-31T01:32:09Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>H5GG/H5GG</title>
    <updated>2023-05-31T01:32:09Z</updated>
    <id>tag:github.com,2023-05-31:/H5GG/H5GG</id>
    <link href="https://github.com/H5GG/H5GG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an iOS cheat engine for JavaScript APIs &amp; Html5 UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;H5GG&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discuss in &lt;a href=&#34;https://discord.gg/FAs4MH7HMc&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://iosgods.com/forum/595-h5gg-igamegod/&#34;&gt;iOSGods&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;an iOS Cheat Engine for JavaScript APIs &amp;amp; Html5 UI.&lt;/p&gt; &#xA;&lt;p&gt;provide memory &lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/examples-JavaScript/&#34;&gt;APIs&lt;/a&gt; likely Android-GG&#39;s Lua APIs.&lt;/p&gt; &#xA;&lt;p&gt;support load scripts(*.js or *.html file) from loacl or network.&lt;/p&gt; &#xA;&lt;p&gt;support load dylib plugin for javascript api (&lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pluginDemo/customAlert&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;support &lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/examples-JavaScript/AutoSearchPointerChains.js&#34;&gt;auto search static pointer and offsets of the value&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;and you can customize UI by using &lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/examples-HTML5/&#34;&gt;HTML+CSS&lt;/a&gt; without computer.&lt;/p&gt; &#xA;&lt;p&gt;and you can make your own tweak(dylib) by click one button, so easy!&lt;/p&gt; &#xA;&lt;h2&gt;H5GG supported 4 modes to run:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/packages/&#34;&gt;inject H5GG.dylib to ipa for non-jailbreak devices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/packages/&#34;&gt;tweak(deb) auto load into all app for jailbroken devices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/appstand/packages/&#34;&gt;standalone APP for jailbroken devices(compatible with iPad&#39;s SlideOver+SplitView)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/globalview/packages/&#34;&gt;Float On Screen for jailbroken devices(not compatible with iPad&#39;s SlideOver+SplitView), tested on ios11~ios14&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;and there is &lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/appstand/packages/&#34;&gt;a special version for TrollStore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;h5gg-official-plugin &lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/examples-h5frida&#34;&gt;h5frida&lt;/a&gt;:&lt;/h2&gt; &#xA;&lt;p&gt;1: support invoke any C/C++/Objective-C function (without jailbroken)&lt;/p&gt; &#xA;&lt;p&gt;2: support hook any module&#39;s Objective-C method (without jailbroken)&lt;/p&gt; &#xA;&lt;p&gt;3: support hook any module&#39;s C/C++ exprot function (without jailbroken)&lt;/p&gt; &#xA;&lt;p&gt;4: support hook any module&#39;s C/C++ internal function/instruction (jailbroken only)&lt;/p&gt; &#xA;&lt;p&gt;5: &lt;strong&gt;support inline-hook app-module&#39;s C/C++ function/instruction (without jailbroken)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;6: &lt;strong&gt;support code-patch (patch-offset) with bytes dynamically (without jailbroken)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;screenshots:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pictures/h5gg1.png&#34; alt=&#34;text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pictures/h5gg2.png&#34; alt=&#34;text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pictures/h5gg3.png&#34; alt=&#34;text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pictures/h5gg4.PNG&#34; alt=&#34;text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design Html Menu UI in EasyHtml on iPhone/iPad&lt;/h2&gt; &#xA;&lt;p&gt;(&lt;strong&gt;install EasyHtml from AppStore!&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pictures/easyhtml.png&#34; alt=&#34;text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.lifewire.com/activate-the-debug-console-in-safari-445798&#34;&gt;Debug the js/html of H5GG running on ios through macOS safari&lt;/a&gt;:&lt;/h2&gt; &#xA;&lt;p&gt;the host app need get-task-allow entitlement (jailbroken or sign by Developer Certificate, not sign by Distribution Certificate)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/pictures/macos.png&#34; alt=&#34;text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependences:&lt;/h2&gt; &#xA;&lt;p&gt;the GlobalView module of Floating APP requires these tweaks and may need to update for new ios version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BackgrounderAction : libH5GG.B12.dylib (jp.akusio.backgrounderaction12) for ios11~ios12&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BackgrounderAction2 : libH5GG.B.dylib (jp.akusio.backgrounderaction13) for ios13+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Baw-Appie/libAPAppView&#34;&gt;libAPAppView&lt;/a&gt; : libH5GG.A.dylib (com.rpgfarm.libapappview) for ios13+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/H5GG/H5GG/main/h5gg-js-doc-en.js&#34;&gt;H5GG JavaScript Engine Document&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;it&#39;s all completely free &amp;amp; open source!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Ansem-SoD/Picofly</title>
    <updated>2023-05-31T01:32:09Z</updated>
    <id>tag:github.com,2023-05-31:/Ansem-SoD/Picofly</id>
    <link href="https://github.com/Ansem-SoD/Picofly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Information and firmware related to the rp2040-zero based chip for the nx&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Picofly&lt;/h1&gt; &#xA;&lt;p&gt;Information and firmware related to the rp2040-zero based chip for the switch. all credits goto Rehius, flynnsmt4, Vittorio and anyone else who helped for the released firmwares&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;As of firmware 2.70 and beyond, the debug led color and codes have chanaged.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;now it&#39;s only 3 colours: blue (glitching), white (flashing), yellow (error code). This was made to make possible pi pico debugging + get rid of RGB/GRB issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Error codes list (= is long pulse, * is short pulse):&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;= USB flashing done&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;** RST is not connected&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;*= CMD is not connected&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=* D0 is not connected&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;== CLK is not connected&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=** eMMC init failure during glitch process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=*= CPU never reach BCT check, should not happen&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;==* CPU always reach BCT check (no glitch reaction, check mosfet)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=== Glitch attempt limit reached, cannot glitch&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=*** eMMC init failure&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=**= eMMC write failure - comparison failed&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=&lt;em&gt;=&lt;/em&gt; eMMC write failure - write failed&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=*== eMMC test failure - read failed&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;==** eMMC read failed during firmware update&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;==*= BCT copy failed - write failure&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;===* BCT copy failed - comparison failure&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;==== BCT copy failed - read failure&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The second major feature is CPU downvoltage. This might be useful when your MOSFET (or the wire) is not strong enough for the glitch. (do you remember the case where you press &#34;RESET&#34; on the rp2040 when joycon logo appears to make it working? that&#39;s it, system lowers CPU voltage) Therefore you can solder two additional wires to the chip so it could lower the CPU voltage making the glitch easier. This is optional! only if you really need.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Waveshare rp2040: SDA=12, SCL=13&lt;/li&gt; &#xA; &lt;li&gt;Pi Pico: SDA = 19, SCL = 20&lt;/li&gt; &#xA; &lt;li&gt;XIAO 2040: SDA=3, SCL=4&lt;/li&gt; &#xA; &lt;li&gt;ItayBitsy 2040: SDA = 18, SCL = 19&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>