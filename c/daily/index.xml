<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:36:00Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rizinorg/rizin</title>
    <updated>2022-06-30T01:36:00Z</updated>
    <id>tag:github.com,2022-06-30:/rizinorg/rizin</id>
    <link href="https://github.com/rizinorg/rizin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UNIX-like reverse engineering framework and command-line toolset.&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; align=&#34;left&#34; style=&#34;float: left; margin: 0 10px 0 0;&#34; alt=&#34;Rizin logo&#34; src=&#34;https://raw.githubusercontent.com/rizinorg/rizin/dev/doc/img/rizin.svg?sanitize=true&#34;&gt; &#xA;&lt;h1&gt;Rizin&lt;/h1&gt; &#xA;&lt;p&gt;Rizin is a fork of the radare2 reverse engineering framework with a focus on usability, working features and code cleanliness.&lt;/p&gt; &#xA;&lt;p&gt;Rizin is portable and it can be used to analyze binaries, disassemble code, debug programs, as a forensics tool, as a scriptable command-line hexadecimal editor able to open disk files, and much more!&lt;/p&gt; &#xA;&lt;p&gt;To learn more on Rizin you may want to read the &lt;a href=&#34;https://book.rizin.re&#34;&gt;official Rizin book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to install&lt;/h1&gt; &#xA;&lt;p&gt;Look at &lt;a href=&#34;https://raw.githubusercontent.com/rizinorg/rizin/dev/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Use &lt;code&gt;meson&lt;/code&gt; to compile and install Rizin. Please make sure to get an updated &lt;code&gt;meson&lt;/code&gt; (e.g. get it with &lt;code&gt;pip install meson&lt;/code&gt; if your system does not provide one that is at least version 0.55.0).&lt;/p&gt; &#xA;&lt;p&gt;Clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/rizinorg/rizin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then compile and install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ meson build&#xA;$ ninja -C build&#xA;$ sudo ninja -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use &lt;code&gt;rizin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rizin&#xA; -- Thank you for using rizin. Have a nice night!&#xA;[0x00000000]&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall rizin, execute &lt;code&gt;sudo ninja -C build uninstall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please have a look at &lt;a href=&#34;https://github.com/rizinorg/rizin/raw/dev/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt; for more information about building Rizin.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We very much welcome any kind of contributions, from typos, to documentation, to refactoring, up to completely new features you may think of. Before contributing, we would like you to read the file &lt;a href=&#34;https://github.com/rizinorg/rizin/raw/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, so that we can all be on the same page.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Look at &lt;a href=&#34;https://github.com/rizinorg/rizin/raw/dev/test/README.md&#34;&gt;test/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Supported features&lt;/h1&gt; &#xA;&lt;h2&gt;Supported Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;Windows (since XP), GNU/Linux, GNU/Darwin, GNU/Hurd, Apple&#39;s {Mac,i,iPad,watch}OS, [Dragonfly|Net|Free|Open]BSD, Android, QNX, Solaris, Haiku, FirefoxOS.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;i386, x86-64, ARM, MIPS, PowerPC, SPARC, RISC-V, SH, m68k, m680x, AVR, XAP, System Z, XCore, CR16, HPPA, ARC, Blackfin, Z80, H8/300, V810, V850, CRIS, XAP, PIC, LM32, 8051, 6502, i4004, i8080, Propeller, Tricore, CHIP-8, LH5801, T8200, GameBoy, SNES, SPC700, MSP430, Xtensa, NIOS II, TMS320 (c54x, c55x, c55+, c66), Hexagon, DCPU16, LANAI, MCORE, mcs96, RSP, SuperH-4, VAX, AMD Am29000.&lt;/p&gt; &#xA;&lt;p&gt;There is also support for the following bytecode formats:&lt;/p&gt; &#xA;&lt;p&gt;Dalvik, EBC, Java, Lua, Python, WebAssembly, Brainfuck, Malbolge&lt;/p&gt; &#xA;&lt;h2&gt;Supported File Formats&lt;/h2&gt; &#xA;&lt;p&gt;ELF, Mach-O, Fatmach-O, PE, PE+, MZ, COFF, OMF, TE, XBE, BIOS/UEFI, Dyldcache, DEX, ART, CGC, Java class, Android boot image, Plan9 executable, ZIMG, MBN/SBL bootloader, ELF coredump, MDMP (Windows minidump), WASM (WebAssembly binary), Commodore VICE emulator, QNX, Game Boy (Advance), Nintendo DS ROMs and Nintendo 3DS FIRMs.&lt;/p&gt; &#xA;&lt;h2&gt;Scripting&lt;/h2&gt; &#xA;&lt;p&gt;We provide a way to interact with Rizin from Python, Haskell, OCaml, Ruby, Rust, and Go languages through &lt;a href=&#34;https://github.com/rizinorg/rz-pipe&#34;&gt;rzpipe&lt;/a&gt;. Other languages although not currently supported could be easily added.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;Our website and blog: &lt;a href=&#34;https://www.rizin.re/&#34;&gt;https://www.rizin.re/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://im.rizin.re&#34;&gt;Mattermost&lt;/a&gt; community to discuss Rizin, its development, and general topics related to the project.&lt;/p&gt; &#xA;&lt;p&gt;We also provide the following partial bridges to other messaging platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/rizinorg&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;a href=&#34;ircs://irc.libera.chat:6697&#34;&gt;irc.libera.chat:6697 with TLS support&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Community - &lt;a href=&#34;https://web.libera.chat/#rizin&#34;&gt;#rizin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Developers - &lt;a href=&#34;https://web.libera.chat/#rizindev&#34;&gt;#rizindev&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hathach/tinyusb</title>
    <updated>2022-06-30T01:36:00Z</updated>
    <id>tag:github.com,2022-06-30:/hathach/tinyusb</id>
    <link href="https://github.com/hathach/tinyusb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source cross-platform USB stack for embedded system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: docs/assets/logo.svg :alt: TinyUSB&lt;/p&gt; &#xA;&lt;p&gt;|Build Status| |Documentation Status| |License|&lt;/p&gt; &#xA;&lt;p&gt;TinyUSB is an open-source cross-platform USB Host/Device stack for embedded system, designed to be memory-safe with no dynamic allocation and thread-safe with all interrupt events are deferred then handled in the non-ISR task function.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at the online &lt;code&gt;documentation &amp;lt;https://docs.tinyusb.org/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. figure:: docs/assets/stack.svg :width: 500px :alt: stackup&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── docs            # Documentation&#xA;├── examples        # Sample with Makefile build support&#xA;├── hw&#xA;│&amp;nbsp;&amp;nbsp; ├── bsp         # Supported boards source files&#xA;│&amp;nbsp;&amp;nbsp; └── mcu         # Low level mcu core &amp;amp; peripheral drivers&#xA;├── lib             # Sources from 3rd party such as freeRTOS, fatfs ...&#xA;├── src             # All sources files for TinyUSB stack itself.&#xA;├── test            # Unit tests for the stack&#xA;└── tools           # Files used internally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported MCUs&lt;/h1&gt; &#xA;&lt;p&gt;The stack supports the following MCUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Allwinner:&lt;/strong&gt; F1C100s/F1C200s&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Broadcom:&lt;/strong&gt; BCM2837, BCM2711&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dialog:&lt;/strong&gt; DA1469x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Espressif:&lt;/strong&gt; ESP32-S2, ESP32-S3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GigaDevice:&lt;/strong&gt; GD32VF103&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infineon:&lt;/strong&gt; XMC4500&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MicroChip:&lt;/strong&gt; SAMD11, SAMD21, SAMD51, SAME5x, SAMG55, SAML21, SAML22, SAME7x&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NordicSemi:&lt;/strong&gt; nRF52833, nRF52840, nRF5340&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nuvoton:&lt;/strong&gt; NUC120, NUC121/NUC125, NUC126, NUC505&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NXP:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iMX RT Series: RT1011, RT1015, RT1021, RT1052, RT1062, RT1064&lt;/li&gt; &#xA;   &lt;li&gt;Kinetis: KL25, K32L2&lt;/li&gt; &#xA;   &lt;li&gt;LPC Series: 11u, 13, 15, 17, 18, 40, 43, 51u, 54, 55&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raspberry Pi:&lt;/strong&gt; RP2040&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Renesas:&lt;/strong&gt; RX63N, RX65N, RX72N&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Silabs:&lt;/strong&gt; EFM32GG&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sony:&lt;/strong&gt; CXD56&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ST:&lt;/strong&gt; STM32 series: F0, F1, F2, F3, F4, F7, H7, G4, L0, L1, L4, L4+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TI:&lt;/strong&gt; MSP430, MSP432E4, TM4C123&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ValentyUSB:&lt;/strong&gt; eptri&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the list of &lt;code&gt;Supported Devices&lt;/code&gt;_ that can be used with provided examples.&lt;/p&gt; &#xA;&lt;h1&gt;Device Stack&lt;/h1&gt; &#xA;&lt;p&gt;Supports multiple device configurations by dynamically changing USB descriptors, low power functions such like suspend, resume, and remote wakeup. The following device classes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio Class 2.0 (UAC2)&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Host Controller Interface (BTH HCI)&lt;/li&gt; &#xA; &lt;li&gt;Communication Device Class (CDC)&lt;/li&gt; &#xA; &lt;li&gt;Device Firmware Update (DFU): DFU mode (WIP) and Runtime&lt;/li&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Generic (In &amp;amp; Out), Keyboard, Mouse, Gamepad etc ...&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC): with multiple LUNs&lt;/li&gt; &#xA; &lt;li&gt;Musical Instrument Digital Interface (MIDI)&lt;/li&gt; &#xA; &lt;li&gt;Network with RNDIS, Ethernet Control Model (ECM), Network Control Model (NCM)&lt;/li&gt; &#xA; &lt;li&gt;Test and Measurement Class (USBTMC)&lt;/li&gt; &#xA; &lt;li&gt;Video class 1.5 (UVC): work in progress&lt;/li&gt; &#xA; &lt;li&gt;Vendor-specific class support with generic In &amp;amp; Out endpoints. Can be used with MS OS 2.0 compatible descriptor to load winUSB driver without INF file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebUSB &amp;lt;https://github.com/WICG/webusb&amp;gt;&lt;/code&gt;__ with vendor-specific class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have a special requirement, &lt;code&gt;usbd_app_driver_get_cb()&lt;/code&gt; can be used to write your own class driver without modifying the stack. Here is how the RPi team added their reset interface &lt;code&gt;raspberrypi/pico-sdk#197 &amp;lt;https://github.com/raspberrypi/pico-sdk/pull/197&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;Host Stack&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Human Interface Device (HID): Keyboard, Mouse, Generic&lt;/li&gt; &#xA; &lt;li&gt;Mass Storage Class (MSC)&lt;/li&gt; &#xA; &lt;li&gt;Hub with multiple-level support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OS Abstraction layer&lt;/h1&gt; &#xA;&lt;p&gt;TinyUSB is completely thread-safe by pushing all Interrupt Service Request (ISR) events into a central queue, then processing them later in the non-ISR context task function. It also uses semaphore/mutex to access shared resources such as Communication Device Class (CDC) FIFO. Therefore the stack needs to use some of the OS&#39;s basic APIs. Following OSes are already supported out of the box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No OS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RT-Thread &amp;lt;https://github.com/RT-Thread/rt-thread&amp;gt;&lt;/code&gt;&lt;em&gt;: &lt;code&gt;repo &amp;lt;https://github.com/RT-Thread-packages/tinyusb&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mynewt&lt;/strong&gt; Due to the newt package build system, Mynewt examples are better to be on its &lt;code&gt;own repo &amp;lt;https://github.com/hathach/mynewt-tinyusb-example&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Local Docs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Info&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Uses&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Changelog&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Contributors&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Reference&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Supported Devices&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Concurrency&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Contributing&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Code of Conduct&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Structure&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Porting&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;All TinyUSB sources in the &lt;code&gt;src&lt;/code&gt; folder are licensed under MIT license, the &lt;code&gt;Full license is here &amp;lt;LICENSE&amp;gt;&lt;/code&gt;__. However, each file can be individually licensed especially those in &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;hw/mcu&lt;/code&gt; folder. Please make sure you understand all the license term for files you use in your project.&lt;/p&gt; &#xA;&lt;p&gt;.. |Build Status| image:: &lt;a href=&#34;https://github.com/hathach/tinyusb/workflows/Build/badge.svg&#34;&gt;https://github.com/hathach/tinyusb/workflows/Build/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/hathach/tinyusb/actions&#34;&gt;https://github.com/hathach/tinyusb/actions&lt;/a&gt; .. |Documentation Status| image:: &lt;a href=&#34;https://readthedocs.org/projects/tinyusb/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/tinyusb/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://docs.tinyusb.org/en/latest/?badge=latest&#34;&gt;https://docs.tinyusb.org/en/latest/?badge=latest&lt;/a&gt; .. |License| image:: &lt;a href=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg&#34;&gt;https://img.shields.io/badge/license-MIT-brightgreen.svg&lt;/a&gt; :target: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. _Uses: docs/info/uses.rst .. _Changelog: docs/info/changelog.rst .. _Contributors: CONTRIBUTORS.rst .. _Reference: docs/reference/index.rst .. _Supported Devices: docs/reference/supported.rst .. _Getting Started: docs/reference/getting_started.rst .. _Concurrency: docs/reference/concurrency.rst .. _Contributing: docs/contributing/index.rst .. _Code of Conduct: CODE_OF_CONDUCT.rst .. _Structure: docs/contributing/structure.rst .. _Porting: docs/contributing/porting.rst&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pjsip/pjproject</title>
    <updated>2022-06-30T01:36:00Z</updated>
    <id>tag:github.com,2022-06-30:/pjsip/pjproject</id>
    <link href="https://github.com/pjsip/pjproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PJSIP project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2003-2008 Benny Prijono &lt;a href=&#34;mailto:benny@prijono.org&#34;&gt;benny@prijono.org&lt;/a&gt; Copyright (C) 2008-2011 Teluu Inc. (&lt;a href=&#34;http://www.teluu.com&#34;&gt;http://www.teluu.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Getting Started: Building and Using PJSIP and PJMEDIA&lt;/p&gt; &#xA;&lt;p&gt;[Last Update: $Date: 2007-02-02 20:42:44 +0000 (Fri, 02 Feb 2007) $]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                               Print Friendly Page&#xA; _________________________________________________________________&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This article describes how to download, customize, build, and use the open source PJSIP and PJMEDIA SIP and media stack. The online (and HTML) version of this file can be downloaded from &lt;a href=&#34;http://www.pjsip.org/using.htm&#34;&gt;http://www.pjsip.org/using.htm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quick Info _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Building with GNU tools (Linux, *BSD, MacOS X, mingw, etc.) Generally these should be all that are needed to build the libraries, applications, and samples:&lt;/p&gt; &#xA;&lt;p&gt;$ ./configure $ make dep &amp;amp;&amp;amp; make clean &amp;amp;&amp;amp; make&lt;/p&gt; &#xA;&lt;p&gt;Building Win32 Target with Microsoft Visual Studio Generally we can just do these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     1. Visual Studio 6: open pjproject.dsw workspace,&#xA;     2. Visual Studio 2005: open pjproject-vs8.sln solution,&#xA;     3. Create an empty pjlib/include/pj/config_site.h, and&#xA;     4. build the pjsua application.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building for Windows Mobile Generally these are all that are needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     1. Open pjsip-apps/build/wince-evc4/wince_demos.vcw EVC4 workspace,&#xA;     2. Create an empty pjlib/include/pj/config_site.h, and&#xA;     3. build the pjsua_wince application.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoking Older Build System (e.g. for RTEMS) Generally these should be all that are needed to build the libraries, applications, and samples:&lt;/p&gt; &#xA;&lt;p&gt;$ ./configure-legacy $ make dep &amp;amp;&amp;amp; make clean &amp;amp;&amp;amp; make&lt;/p&gt; &#xA;&lt;p&gt;Locating Output Binaries/Libraries Libraries will be put in lib directory, and binaries will be put in bin directory, under each projects.&lt;/p&gt; &#xA;&lt;p&gt;Running the Applications After successful build, you can try running pjsua application on pjsip-apps/bin directory. PJSUA manual can be found in &lt;a href=&#34;http://www.pjsip.org/pjsua.htm&#34;&gt;http://www.pjsip.org/pjsua.htm&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Table of Contents: _________________________________________________________________&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Getting the Source Distribution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 1.1 Getting the Release tarball&#xA;&#xA; 1.2 Getting from Subversion trunk&#xA;&#xA; 1.3 Source Directories Layout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build Preparation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 2.1 config_site.h file&#xA;&#xA; 2.2 Disk Space Requirements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Building Linux, *nix, *BSD, and MacOS X Targets with GNU Build Systems&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 3.1 Supported Targets&#xA;&#xA; 3.2 Requirements&#xA;&#xA; 3.3 Running configure&#xA;&#xA; 3.4 Running make&#xA;&#xA; 3.5 Cross Compilation&#xA;&#xA; 3.6 Build Customizations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Building for Windows Targets with Microsoft Visual Studio&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 4.1 Requirements&#xA;&#xA; 4.2 Building the Projects&#xA;&#xA; 4.3 Debugging the Sample Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Building for Windows Mobile Targets (Windows CE/WinCE/PDA/SmartPhone)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 5.1 Requirements&#xA;&#xA; 5.2 Building the Projects&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Older PJLIB Build System for Non-Autoconf Targets (e.g. RTEMS)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 6.1 Supported Targets&#xA;&#xA; 6.2 Invoking the Build System&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Running the Applications&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; 7.1 pjsua&#xA;&#xA; 7.2 Sample Applications&#xA;&#xA; 7.3 pjlib-test&#xA;&#xA; 7.4 pjsip-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Using PJPROJECT with Applications&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Appendix I: Common Problems/Frequently Asked Question (FAQ)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; I.1 fatal error C1083: Cannot open include file: &#39;pj/config_site.h&#39;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No such file or directory&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Getting the Source Code Distribution &#xA;  &lt;hr&gt; All libraries (PJLIB, PJLIB-UTIL, PJSIP, PJMEDIA, and PJMEDIA-CODEC) are currently distributed under a single source tree, collectively named as PJPROJECT or just PJ libraries. These libraries can be obtained by either downloading the release tarball or getting them from the Subversion trunk.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;1.1 Getting the Release tarball _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Getting the released tarball is a convenient way to obtain stable version of PJPROJECT. The tarball may not contain the latest features or bug-fixes, but normally it is considered more stable as each will be tested more rigorously before released.&lt;/p&gt; &#xA;&lt;p&gt;The latest released tarball can be downloaded from the &lt;a href=&#34;http://www.pjsip.org/download.htm&#34;&gt;http://www.pjsip.org/download.htm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;1.2 Getting from Subversion trunk _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;PJPROJECT Subversion repository will always contain the latest/most up-to-date version of the sources. Normally the Subversion repository is always kept in a &#34;good&#34; state. However, there&#39;s always a chance that things break and the tree doesn&#39;t build correctly (particularly for the &#34;not-so-popular&#34; targets), so please consult the mailing list should there be any problems.&lt;/p&gt; &#xA;&lt;p&gt;Using Subversion also has benefits of keeping the local copy of the source up to date with the main PJ source tree and to easily track the changes made to the local copy, if any.&lt;/p&gt; &#xA;&lt;p&gt;What is Subversion&lt;/p&gt; &#xA;&lt;p&gt;Subversion (SVN) is Open Source version control system similar to CVS. Subversion homepage is in &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;http://subversion.tigris.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Getting Subversion Client&lt;/p&gt; &#xA;&lt;p&gt;A Subversion (SVN) client is needed to download the PJ source files from pjsip.org SVN tree. SVN client binaries can be downloaded from &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;http://subversion.tigris.org/&lt;/a&gt;, and the program should be available for Windows, Linux, MacOS X, and many more platforms.&lt;/p&gt; &#xA;&lt;p&gt;Getting the Source for The First Time&lt;/p&gt; &#xA;&lt;p&gt;Once Subversion client is installed, we can use these commands to initially retrieve the latest sources from the Subversion trunk:&lt;/p&gt; &#xA;&lt;p&gt;$ svn co &lt;a href=&#34;http://svn.pjproject.net/repos/pjproject/trunk&#34;&gt;http://svn.pjproject.net/repos/pjproject/trunk&lt;/a&gt; pjproject $ cd pjproject&lt;/p&gt; &#xA;&lt;p&gt;Keeping The Local Copy Up-to-Date&lt;/p&gt; &#xA;&lt;p&gt;Once sources have been downloaded, we can keep the local copy up to date by periodically synchronizing the local source with the latest revision from the PJ&#39;s Subversion trunk. The mailing list provides best source of information about the availability of new updates in the trunk.&lt;/p&gt; &#xA;&lt;p&gt;To update the local copy with the latest changes in the main PJ&#39;s repository:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ svn update&lt;/p&gt; &#xA;&lt;p&gt;Tracking Local and Remote Changes&lt;/p&gt; &#xA;&lt;p&gt;To see what files have been changed locally:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ svn status&lt;/p&gt; &#xA;&lt;p&gt;The above command only compares local file against the original local copy, so it doesn&#39;t require Internet connection while performing the check.&lt;/p&gt; &#xA;&lt;p&gt;To see both what files have been changed locally and what files have been updated in the PJ&#39;s Subversion repository:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ svn status -u&lt;/p&gt; &#xA;&lt;p&gt;Note that this command requires active Internet connection to query the status of PJPROJECT&#39;s source repository.&lt;/p&gt; &#xA;&lt;p&gt;1.3 Source Directories Layout _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Top-Level Directory Layout&lt;/p&gt; &#xA;&lt;p&gt;The top-level directories (denoted as $TOP here) in the source distribution contains the following sub-directories:&lt;/p&gt; &#xA;&lt;p&gt;$TOP/build Contains makefiles that are common for all projects.&lt;/p&gt; &#xA;&lt;p&gt;$TOP/pjlib Contains header and source files of PJLIB. PJLIB is the base portability and framework library which is used by all other libraries&lt;/p&gt; &#xA;&lt;p&gt;$TOP/pjlib-util Contains PJLIB-UTIL header and source files. PJLIB-UTIL is an auxiliary library that contains utility functions such as scanner, XML, STUN, MD5 algorithm, getopt() implementation, etc.&lt;/p&gt; &#xA;&lt;p&gt;$TOP/pjmedia Contains PJMEDIA and PJMEDIA-CODEC header and source files. The sources of various codecs (such as GSM, Speex, and iLBC) can be found under this directory.&lt;/p&gt; &#xA;&lt;p&gt;$TOP/pjsip Contains PJSIP header and source files.&lt;/p&gt; &#xA;&lt;p&gt;$TOP/pjsip-apps Contains source code for PJSUA and various sample applications.&lt;/p&gt; &#xA;&lt;p&gt;Individual Directory Inside Each Project&lt;/p&gt; &#xA;&lt;p&gt;Each library directory further contains these sub-directories:&lt;/p&gt; &#xA;&lt;p&gt;bin Contains binaries produced by the build process.&lt;/p&gt; &#xA;&lt;p&gt;build Contains build scripts/makefiles, project files, project workspace, etc. to build the project. In particular, it contains one Makefile file to build the project with GNU build systems, and a *.dsw workspace file to build the library with Microsoft Visual Studio 6 or later.&lt;/p&gt; &#xA;&lt;p&gt;build/output The build/output directory contains the object files and other files generated by the build process. To support building multiple targets with a single source tree, each build target will occupy a different subdirectory under this directory.&lt;/p&gt; &#xA;&lt;p&gt;build/wince-evc4 This directory contains the project/workspace files to build Windows CE/WinCE version of the project using Microsoft Embedded Visual C++ 4.&lt;/p&gt; &#xA;&lt;p&gt;build/wince-evc4/output This directory contains the library, executable, and object files generated by Windows Mobile build process.&lt;/p&gt; &#xA;&lt;p&gt;docs Contains Doxygen configuration file (doxygen.cfg) to generate online documentation from the source files. The output documentation will be put in this directory as well (for example, docs/html directory for the HTML files).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      (to generate Doxygen documentation from the source tree, just run&#xA;      &#34;doxygen docs/doxygen.cfg&#34; in the individual project directory. The&#xA;      generated files will reside in docs directory).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;include Contains the header files for the project.&lt;/p&gt; &#xA;&lt;p&gt;lib Contains libraries produced by the build process.&lt;/p&gt; &#xA;&lt;p&gt;src Contains the source files of the project.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build Preparation &#xA;  &lt;hr&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;2.1 Create config_site.h file _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Before source files can be built, the pjlib/include/pj/config_site.h file must be created (it can just be an empty file).&lt;/p&gt; &#xA;&lt;p&gt;Note: When the Makefile based build system is used, this process is taken care by the Makefiles. But when non-Makefile based build system (such as Visual Studio) is used, the config_site.h file must be created manually.&lt;/p&gt; &#xA;&lt;p&gt;What is config_site.h File&lt;/p&gt; &#xA;&lt;p&gt;The pjlib/include/pj/config_site.h contains local customizations to the libraries.&lt;/p&gt; &#xA;&lt;p&gt;All customizations should be put in this file instead of modifying PJ&#39;s files, because if PJ&#39;s files get modified, then those modified files will not be updated the next time the source is synchronized. Or in other case, the local modification may be overwritten with the fresh copy from the SVN.&lt;/p&gt; &#xA;&lt;p&gt;Putting the local customization to the config_site.h solves this problem, because this file is not included in the version control, so it will never be overwritten by &#34;svn update&#34; command.&lt;/p&gt; &#xA;&lt;p&gt;Please find list of configuration macros that can be overriden from these files: * PJLIB Configuration (the pjlib/config.h file) * PJLIB-UTIL Configuration (the pjlib-util/config.h file) * PJMEDIA Configuration (the pjmedia/config.h file) * PJSIP Configuration (the pjsip/sip_config.h file)&lt;/p&gt; &#xA;&lt;p&gt;A sample config_site.h file is also available in pjlib/include/pj/config_site_sample.h.&lt;/p&gt; &#xA;&lt;p&gt;Creating config_site.h file&lt;/p&gt; &#xA;&lt;p&gt;The simplest way is just to create an empty file, to use whetever default values set by the libraries.&lt;/p&gt; &#xA;&lt;p&gt;Another way to create the config_site.h file is to write something like the following:&lt;/p&gt; &#xA;&lt;p&gt;// Uncomment to get minimum footprint (suitable for 1-2 concurrent calls only) //#define PJ_CONFIG_MINIMAL_SIZE // Uncomment to get maximum performance //#define PJ_CONFIG_MAXIMUM_SPEED #include &amp;lt;pj/config_site_sample.h&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;2.2 Disk Space Requirements _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;The building process needs: about 50-60 MB of disk space to store the uncompressed source files, and * about 30-50 MB of additional space for building each target&lt;/p&gt; &#xA;&lt;p&gt;(Visual Studio Debug and Release are considered as separate targets)&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Building Linux, *nix, *BSD, and MacOS X Targets with GNU Build Systems &#xA;  &lt;hr&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;3.1 Supported Targets _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;The new, autoconf based GNU build system can be used to build the libraries/applications for the following targets: * Linux/uC-Linux (i386, Opteron, Itanium, MIPS, PowerPC, etc.), * MacOS X (PowerPC), * mingw (i386), * FreeBSD and maybe other BSD&#39;s (i386, Opteron, etc.), * RTEMS with cross compilation (ARM, powerpc), * Embox RTOS (i386, ARM including STM32), * etc.&lt;/p&gt; &#xA;&lt;p&gt;3.2 Requirements _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;In order to use PJ&#39;s GNU build system, these typical GNU tools are needed: * GNU make (other make will not work), * GNU binutils for the target, and * GNU gcc for the target. * OpenSSL header files/libraries (optional) if TLS support is wanted.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the appropriate &#34;SDK&#34; must be installed for the particular target (this could just be a libc and the appropriate system abstraction library such as Posix).&lt;/p&gt; &#xA;&lt;p&gt;The build system is known to work on the following hosts: * Linux, many types of distributions. * MacOS X 10.2 * mingw (Win2K, XP) * FreeBSD (must use gmake instead of make)&lt;/p&gt; &#xA;&lt;p&gt;Building Win32 applications with Cygwin is currently not supported by the autoconf script (there is some Windows header conflicts), but one can still use the old configure script by calling ./configure-legacy. More over, cross-compilations might also work with Cygwin.&lt;/p&gt; &#xA;&lt;p&gt;3.3 Running configure _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Using Default Settings&lt;/p&gt; &#xA;&lt;p&gt;Run &#34;./configure&#34; without any options to let the script detect the appropriate settings for the host:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ ./configure ...&lt;/p&gt; &#xA;&lt;p&gt;Notes: The default settings build the libraries in &#34;debug&#34; mode (active assert()), with default CFLAGS set to &#34;-O2&#34;. To change the default CFLAGS, we can use the usual &#34;./configure CFLAGS=&#39;-g&#39;&#34; construct. To build in &#34;release&#34; mode, and deactivate assert(), we can use &#34;./configure CFLAGS=&#39;-DNDEBUG&#39;&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Features Customization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the new autoconf based build system, most configuration/customization can be specified as configure arguments. The list of customizable features can be viewed by running &#34;./configure --help&#34; command:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ ./configure --help ... Optional Features: --enable-epoll Use epoll on Linux instead of select --disable-floating-point Disable floating point where possible --disable-sound Exclude sound (i.e. use null sound) --disable-small-filter Exclude small filter in resampling --disable-large-filter Exclude large filter in resampling --disable-g711-plc Exclude G.711 Annex A PLC --disable-speex-aec Exclude Speex Acoustic Echo Canceller/AEC --disable-g711-codec Exclude G.711 codecs from the build --disable-l16-codec Exclude Linear/L16 codec family from the build --disable-gsm-codec Exclude GSM codec in the build --disable-speex-codec Exclude Speex codecs in the build --disable-ilbc-codec Exclude iLBC codec in the build --disable-tls Force excluding TLS support (default is autodetected based on OpenSSL availability) ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Configuring Debug Version and Other Customizations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configure script accepts standard customization, which details can be obtained by executing ./configure --help.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of specifying CFLAGS in configure:&lt;/p&gt; &#xA;&lt;p&gt;$ ./configure CFLAGS=&#34;-O3 -DNDEBUG -msoft-float -fno-builtin&#34; ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Configuring TLS Support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, TLS support is configured based on the availability of OpenSSL header files and libraries. If OpenSSL is available at the default include and library path locations, TLS will be enabled by the configure script.&lt;/p&gt; &#xA;&lt;p&gt;You can explicitly disable TLS support by giving the configure script --disable-tls option.&lt;/p&gt; &#xA;&lt;p&gt;3.4 Cross Compilation _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Cross compilation should be supported, using the usual autoconf syntax:&lt;/p&gt; &#xA;&lt;p&gt;$ ./configure --host=arm-elf-linux ...&lt;/p&gt; &#xA;&lt;p&gt;Since cross-compilation is not tested as often as the &#34;normal&#34; build, please watch for the ./configure output for incorrect settings (well ideally this should be done for normal build too).&lt;/p&gt; &#xA;&lt;p&gt;Please refer to Porting Guide for further information about porting PJ software.&lt;/p&gt; &#xA;&lt;p&gt;3.5 Running make _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Once the configure script completes successfully, start the build process by invoking these commands:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ make dep $ make&lt;/p&gt; &#xA;&lt;p&gt;Note: gmake may need to be specified instead of make for some hosts, to invoke GNU make instead of the native make.&lt;/p&gt; &#xA;&lt;p&gt;Description of all make targets supported by the Makefile&#39;s:&lt;/p&gt; &#xA;&lt;p&gt;all The default (or first) target to build the libraries/binaries.&lt;/p&gt; &#xA;&lt;p&gt;dep, depend Build dependencies rule from the source files.&lt;/p&gt; &#xA;&lt;p&gt;clean Clean the object files for current target, but keep the output library/binary files intact.&lt;/p&gt; &#xA;&lt;p&gt;distclean, realclean Remove all generated files (object, libraries, binaries, and dependency files) for current target.&lt;/p&gt; &#xA;&lt;p&gt;Note: make can be invoked either in the top-level PJ directory or in build directory under each project to build only the particular project.&lt;/p&gt; &#xA;&lt;p&gt;3.6 Build Customizations _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Build features can be customized by specifying the options when running ./configure as described in Running Configure above.&lt;/p&gt; &#xA;&lt;p&gt;In addition, additional CFLAGS and LDFLAGS options can be put in user.mak file in PJ root directory (this file may need to be created if it doesn&#39;t exist). Below is a sample of user.mak file contents:&lt;/p&gt; &#xA;&lt;p&gt;export CFLAGS += -msoft-float -fno-builtin export LDFLAGS +=&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Building for Windows Targets with Microsoft Visual Studio &#xA;  &lt;hr&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;4.1 Requirements _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;The Microsoft Visual Studio based project files can be used with one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; * Microsoft Visual Studio 6,&#xA; * Microsoft Visual Studio .NET 2002,&#xA; * Microsoft Visual Studio .NET 2003,&#xA; * Microsoft Visual C++ 2005 (including Express edition),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, the following SDK&#39;s are needed: * Platform SDK, if you&#39;re using Visual Studio 2005 Express (tested with Platform SDK for Windows Server 2003 SP1), * DirectX SDK (tested with DirectX version 8 and 9), * OpenSSL development kit would be needed if TLS support is wanted, or otherwise this is optional.&lt;/p&gt; &#xA;&lt;p&gt;For the host, the following are required: * Windows NT, 2000, XP, 2003, or later , * Windows 95/98 should work too, but this has not been tested, * Sufficient amount of RAM for the build process (at least 256MB).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Enabling TLS Support with OpenSSL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TLS support is wanted, then OpenSSL SDK must be installed in the development host.&lt;/p&gt; &#xA;&lt;p&gt;To install OpenSSL SDK from the Win32 binary distribution: 1. Install OpenSSL SDK to any folder (e.g. C:\OpenSSL) 2. Add OpenSSL DLL location to the system PATH. 3. Add OpenSSL include path to Visual Studio includes search directory. Make sure that OpenSSL header files can be accessed from the program with #include &amp;lt;openssl/ssl.h&amp;gt; construct. 4. Add OpenSSL library path to Visual Studio library search directory. Make sure the following libraries are accessible: + For Debug build: libeay32MTd and ssleay32MTd. + For Release build: libeay32MT and ssleay32MT.&lt;/p&gt; &#xA;&lt;p&gt;Then to enable TLS transport support in PJSIP, just add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #define PJSIP_HAS_TLS_TRANSPORT 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your pj/config_site.h. When this macro is defined, OpenSSL libraries will be automatically linked to the application via the #pragma construct in sip_transport_tls_ossl.c file.&lt;/p&gt; &#xA;&lt;p&gt;4.2 Building the Projects _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Follow the steps below to build the libraries/application using Visual Studio: 1. For Visual Studio 6: open pjproject.dsw workspace file. 2. For Visual Studio 8 (VS 2005): open pjproject-vs8.sln solution file. 3. Set pjsua as Active Project. 4. Select Debug or Release build as appropriate. 5. Build the project. This will build pjsua application and all libraries needed by pjsua. 6. After successful build, the pjsua application will be placed in pjsip-apps/bin directory, and the libraries in lib directory under each projects.&lt;/p&gt; &#xA;&lt;p&gt;To build the samples: 1. (Still using the same workspace) 2. Set samples project as Active Project 3. Select Debug or Release build as appropriate. 4. Build the project. This will build all sample applications and all libraries needed. 5. After successful build, the sample applications will be placed in pjsip-apps/bin/samples directory, and the libraries in lib directory under each projects.&lt;/p&gt; &#xA;&lt;p&gt;4.3 Debugging the Sample Application _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;The sample applications are build using Samples.mak makefile, therefore it is difficult to setup debugging session in Visual Studio for these applications. To solve this issue, the pjsip_apps workspace contain one project called sample_debug which can be used to debug the sample application.&lt;/p&gt; &#xA;&lt;p&gt;To setup debugging using sample_debug project: 1. (Still using pjsip_apps workspace) 2. Set sample_debug project as Active Project 3. Edit debug.c file inside this project. 4. Modify the #include line to include the particular sample application to debug 5. Select Debug build. 6. Build and debug the project.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Building for Windows Mobile Targets (Windows CE/WinCE/PDA/SmartPhone) &#xA;  &lt;hr&gt; PJ supports building SIP and media stacks and applications for Windows Mobile targets. A very simple WinCE SIP user agent (with media) application is provided just as proof of concept that the port works.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;5.1 Requirements _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;One of the following development tools is needed to build SIP and media components for Windows Mobile: * Microsoft Embedded Visual C++ 4 with appropriate SDKs, or * Microsoft Visual Studio 2005 for Windows Mobile with appropriate SDKs.&lt;/p&gt; &#xA;&lt;p&gt;Note that VS2005 is not directly supported (as I don&#39;t have the tools), but it is reported to work (I assumed that VS2005 for Windows Mobile can import EVC4 workspace file).&lt;/p&gt; &#xA;&lt;p&gt;5.2 Building the Projects _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;The Windows Mobile port is included in the main source distribution. Please follow the following steps to build the WinCE libraries and sample application: 1. Open pjsip-apps/build/wince-evc4/wince_demos.vcw workspace file. If later version of EVC4 is being used, this may cause the workspace file to be converted to the appropriate format. 2. Select pjsua_wince project as the Active Project. 3. Select the appropriate SDK (for example Pocket PC 2003 SDK or SmartPhone 2003 SDK) 4. Select the appropriate configuration (for example, Win32 (WCE Emulator Debug) to debug the program in emulator, or other configurations such as ARMV4, MIPS, SH3, SH4, or whatever suitable for the device) 5. Select the appropriate device (Emulator or the actual Device). 6. Build the project. This will build the sample WinCE application and all libraries (SIP, Media, etc.) needed by this application.&lt;/p&gt; &#xA;&lt;p&gt;Notes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      + If the config_site.h includes config_site_sample.h file, then&#xA;        there are certain configuration in config_site_sample.h that get&#xA;        activated for Windows CE targets. Please make sure that these&#xA;        configurations are suitable for the application.&#xA;      + The libraries, binaries and object files produced by the build&#xA;        process are located under build/wince-evc4/output directory of each&#xA;        projects.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Older PJLIB Build System for Non-Autoconf Targets (e.g. RTEMS) &#xA;  &lt;hr&gt; The old PJLIB build system can still be used for building PJ libraries, for example for RTEMS target. Please see the Porting PJLIB page in PJLIB Reference documentation for information on how to support new target using this build system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;6.1 Supported Targets _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;The older build system supports building PJ libraries for the following operating systems: * RTEMS * Linux * MacOS X * Cygwin and Mingw&lt;/p&gt; &#xA;&lt;p&gt;And it supports the following target architectures: * i386, x86_64, itanium * ARM * mips * powerpc * mpc860 * etc.&lt;/p&gt; &#xA;&lt;p&gt;For other targets, specific files need to be added to the build system, please see the Porting PJLIB page in PJLIB Reference documentation for details.&lt;/p&gt; &#xA;&lt;p&gt;6.2 Invoking the Build System _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;To invoke the older build system, run the following:&lt;/p&gt; &#xA;&lt;p&gt;$ cd pjproject $ ./configure-legacy $ make dep &amp;amp;&amp;amp; make clean &amp;amp;&amp;amp; make&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Running the Applications &#xA;  &lt;hr&gt; Upon successful build, the output libraries (PJLIB, PJLIB-UTIL, PJMEDIA, PJSIP, etc.) are put under ./lib sub-directory under each project directory. In addition, some applications may also be built, and such applications will be put in ./bin sub-directory under each project directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;7.1 pjsua _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;pjsua is the reference implementation for both PJSIP and PJMEDIA stack, and is the main target of the build system. Upon successful build, pjsua application will be put in pjsip-apps/bin directory.&lt;/p&gt; &#xA;&lt;p&gt;pjsua manual can be found in pjsua Manual Page.&lt;/p&gt; &#xA;&lt;p&gt;7.2 Sample Applications _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;Sample applications will be built with the Makefile build system. For Visual Studio, you have to build the samples manually by selecting and building the Samples project inside pjsip-apps/build/pjsip_apps.dsw project workspace.&lt;/p&gt; &#xA;&lt;p&gt;Upon successful build, the sample applications are put in pjsip-apps/bin/samples directory.&lt;/p&gt; &#xA;&lt;p&gt;The sample applications are described in PJMEDIA Samples Page and PJSIP Samples Page in the website.&lt;/p&gt; &#xA;&lt;p&gt;7.3 pjlib-test _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;pjlib-test contains comprehensive tests for testing PJLIB functionality. This application will only be built when the Makefile build system is used; with Visual Studio, one has to open pjlib.dsw project in pjlib/build directory to build this application.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re porting PJLIB to new target, it is recommended to run this application to make sure that all functionalities works as expected.&lt;/p&gt; &#xA;&lt;p&gt;7.4 pjsip-test _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;pjsip-test contains codes for testing various SIP functionalities in PJSIP and also to benchmark static performance metrics such as message parsing per second.&lt;/p&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Using PJPROJECT with Applications&lt;/p&gt; &#xA;  &lt;hr&gt; &lt;p&gt;Regardless of the build system being used, the following tasks are normally needed to be done in order to build application to use PJSIP and PJMEDIA:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Put these include directories in the include search path: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;pjlib/include&lt;/li&gt; &#xA;     &lt;li&gt;pjlib-util/include&lt;/li&gt; &#xA;     &lt;li&gt;pjmedia/include&lt;/li&gt; &#xA;     &lt;li&gt;pjsip/include&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Put these library directories in the library search path: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;pjlib/lib&lt;/li&gt; &#xA;     &lt;li&gt;pjlib-util/lib&lt;/li&gt; &#xA;     &lt;li&gt;pjmedia/lib&lt;/li&gt; &#xA;     &lt;li&gt;pjsip/lib&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Include the relevant PJ header files in the application source file. For example, using these would include ALL APIs exported by PJ:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;#include &amp;lt;pjlib.h&amp;gt; #include &amp;lt;pjlib-util.h&amp;gt; #include &amp;lt;pjsip.h&amp;gt; #include &amp;lt;pjsip_ua.h&amp;gt; #include &amp;lt;pjsip_simple.h&amp;gt; #include &amp;lt;pjsua.h&amp;gt; #include &amp;lt;pjmedia.h&amp;gt; #include &amp;lt;pjmedia-codec.h&amp;gt; (Note: the documentation of the relevant libraries should say which header files should be included to get the declaration of the APIs). 4. Declare the OS macros. + For Windows applications built with Visual Studio, we need to declare PJ_WIN32=1 macro in the project settings (declaring the macro in the source file may not be sufficient). + For Windows Mobile applications build with Visual C++, we need to declare PJ_WIN32_WINCE=1 macro in the project settings. + For GNU build system/autoconf based build system, we need to declare PJ_AUTOCONF=1 macro when compiling the applications. (Note: the old PJ build system requires declaring the target processor with PJ_M_XXX=1 macro, but this has been made obsolete. The target processor will be detected from compiler&#39;s predefined macro by pjlib/config.h file). 5. Link with the appropriate PJ libraries. The following libraries will need to be included in the library link specifications:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; pjlib&#xA;         Base library used by all libraries.&#xA;&#xA; pjlib-util&#xA;         Auxiliary library containing scanner, XML, STUN, MD5, getopt,&#xA;         etc, used by the SIP and media stack.&#xA;&#xA; pjsip&#xA;         SIP core stack library.&#xA;&#xA; pjsip-ua&#xA;         SIP user agent library containing INVITE session, call&#xA;         transfer, client registration, etc.&#xA;&#xA; pjsip-simple&#xA;         SIP SIMPLE library for base event framework, presence, instant&#xA;         messaging, etc.&#xA;&#xA; pjsua&#xA;         High level SIP UA library, combining SIP and media stack into&#xA;         high-level easy to use API.&#xA;&#xA; pjmedia&#xA;         The media framework.&#xA;&#xA; pjmedia-codec&#xA;         Container library for various codecs such as GSM, Speex, and&#xA;         iLBC.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: the actual library names will be appended with the target name and the build configuration. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; For Visual Studio builds&#xA;         The actual library names will look like&#xA;         pjlib-i386-win32-vc6-debug.lib,&#xA;         pjlib-i386-win32-vc6-release.lib, etc., depending on whether we&#xA;         are building the Debug or Release version of the library.&#xA;&#xA;         An easier way to link with the libraries is to include PJ&#xA;         project files in the workspace, and to configure project&#xA;         dependencies so that the application depends on the PJ&#xA;         libraries. This way, we don&#39;t need to manually add each PJ&#xA;         libraries to the input library file specification, since VS&#xA;         will automatically link the dependency libraries with the&#xA;         application.&#xA;&#xA; For Windows Mobile builds&#xA;         Unfortunately the PJ libraries built for Windows Mobile will&#xA;         not be placed in the usual lib directory, but rather under the&#xA;         output directory under build/wince-evc4 project directory.&#xA;&#xA;         An easier way to link with the libraries is to include PJ&#xA;         project files in the workspace, and to configure project&#xA;         dependencies so that the application depends on the PJ&#xA;         libraries. This way, we don&#39;t need to manually add each PJ&#xA;         libraries to the input library file specification, since VS&#xA;         will automatically link the dependency libraries with the&#xA;         application.&#xA;&#xA; For GNU builds&#xA;         Application&#39;s Makefile can get the PJ library suffix by&#xA;         including PJ&#39;s build.mak file from the root PJ directory (the&#xA;         suffix is contained in TARGET_NAME variable). For example, to&#xA;         link with PJLIB and PJMEDIA, we can use this syntax in the&#xA;         LDFLAGS: &#34;-lpj-$(TARGET_NAME) -lpjmedia-$(TARGET_NAME)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;6&#34;&gt; &#xA;   &lt;li&gt; &lt;p&gt;Link with system spesific libraries:&lt;/p&gt; &lt;p&gt;Windows Add (among other things): wsock32.lib, ws2_32.lib, ole32.lib, dsound.lib&lt;/p&gt; &lt;p&gt;Linux, *nix, *BSD Add (among other things): &#39;-lpthread -lm&#39; (at least).&lt;/p&gt; &lt;p&gt;MacOS X Add (among other things): &#39;-framework CoreAudio -lpthread -lm&#39;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Appendix I: Common Problems/Frequently Asked Question (FAQ) _________________________________________________________________&lt;/p&gt; &#xA;&lt;p&gt;I.1 fatal error C1083: Cannot open include file: &#39;pj/config_site.h&#39;: No such file or directory&lt;/p&gt; &#xA;&lt;p&gt;This error normally occurs when the config_site.h file has not been created. This file needs to be created manually (an empty file is sufficient). Please follow the Build Preparation instructions above to create this file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; _________________________________________________________________&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feedback: Thanks for using PJ libraries and for reading this document. Please send feedbacks or general comments to &#xA; &lt;bennylp at pjsip dot org&gt;&#xA;  .&#xA; &lt;/bennylp&gt;&lt;/p&gt;</summary>
  </entry>
</feed>