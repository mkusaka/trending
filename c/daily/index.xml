<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-23T01:31:16Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lizrice/learning-ebpf</title>
    <updated>2023-03-23T01:31:16Z</updated>
    <id>tag:github.com,2023-03-23:/lizrice/learning-ebpf</id>
    <link href="https://github.com/lizrice/learning-ebpf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning eBPF, published by O&#39;Reilly - out now! Here&#39;s where you&#39;ll find a VM config for the examples, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learning eBPF&lt;/h1&gt; &#xA;&lt;p&gt;This repo accompanies my new book &lt;a href=&#34;https://www.amazon.com/Learning-eBPF-Programming-Observability-Networking/dp/1098135121&#34;&gt;Learning eBPF&lt;/a&gt; (published by O&#39;Reilly).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/learning-ebpf-cover.png&#34; height=&#34;250&#34; alt=&#34;Learning eBPF cover features an image of an Early&#xA;Bumblebee&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buy your copy of the book from &lt;a href=&#34;https://bookshop.org/p/books/learning-ebpf-programming-the-linux-kernel-for-enhanced-observability-networking-and-security-liz-rice/19244244?ean=9781098135126&#34;&gt;Bookshop.org&lt;/a&gt; or &lt;a href=&#34;https://www.amazon.com/Learning-eBPF-Programming-Observability-Networking/dp/1098135121&#34;&gt;Amazon&lt;/a&gt;, view it on the &lt;a href=&#34;https://www.oreilly.com/library/view/learning-ebpf/9781098135119/&#34;&gt;O&#39;Reilly platform&lt;/a&gt;, or download a copy from &lt;a href=&#34;https://isovalent.com/learning-ebpf&#34;&gt;Isovalent&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the example code&lt;/h2&gt; &#xA;&lt;p&gt;The repo includes the example eBPF programs discussed in the book.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve also provided a &lt;a href=&#34;https://github.com/lima-vm/lima&#34;&gt;Lima&lt;/a&gt; config file with the packages you need for building the code pre-installed.&lt;/p&gt; &#xA;&lt;p&gt;If you have a Linux machine or VM to hand, feel free to use that instead of Lima. The minimum kernel version required varies from chapter to chapter. All these examples have been tested on an Ubuntu distribution using a 5.15 kernel.&lt;/p&gt; &#xA;&lt;h3&gt;Install this repo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/lizrice/learning-ebpf&#xA;cd learning-ebpf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lima VM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;limactl start learning-ebpf.yaml&#xA;limactl shell learning-ebpf&#xA;&#xA;# You&#39;ll need to be root for most of the examples&#xA;sudo -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building libbpf and installing header files&lt;/h3&gt; &#xA;&lt;p&gt;Libbpf is included as a submodule in this repo. You&#39;ll need to build and install it for the C-based examples to build correctly. (See libbpf/README.md for more details.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd libbpf/src&#xA;make install &#xA;cd ../..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building bpftool&lt;/h3&gt; &#xA;&lt;p&gt;There are several examples using &lt;code&gt;bpftool&lt;/code&gt; throughout the book. To get a version with libbfd support you might need to build it from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ..&#xA;git clone --recurse-submodules https://github.com/libbpf/bpftool.git&#xA;cd bpftool/src &#xA;make install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;You won&#39;t be surprised to learn that the directories correspond to chapters in the book. Here are the different examples that accompany each chapter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chapter 1: What Is eBPF and Why Is It Important?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter2/README.md&#34;&gt;Chapter 2: eBPF&#39;s &#34;Hello World&#34;&lt;/a&gt; - Basic examples using the BCC framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter3/README.md&#34;&gt;Chapter 3: Anatomy of an eBPF Program&lt;/a&gt; - C-based XDP examples, used in the book to explore how the source code gets transformed to eBPF bytecode and machine code. There&#39;s also an example of BPF to BPF function calls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter4/README.md&#34;&gt;Chapter 4: The bpf() System Call&lt;/a&gt; - More BCC-based examples, used in the book to illustrate what&#39;s happening at the syscall level when you use eBPF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter5/README.md&#34;&gt;Chapter 5: CO-RE, BTF and Libbpf&lt;/a&gt; - Libbpf-based C example code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter6/README.md&#34;&gt;Chapter 6: The eBPF Verifier&lt;/a&gt; - Make small edits to the example code to cause a variety of verifier errors!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter7/README.md&#34;&gt;Chapter 7: eBPF Program and Attachment Types&lt;/a&gt; - Examples of different eBPF program types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter8/README.md&#34;&gt;Chapter 8: eBPF for Networking&lt;/a&gt; - Example code that attaches to various points in the network stack to interfere with ping and curl requests. &lt;em&gt;Coming soon, load balancer example&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chapter 9: eBPF for Security - &lt;em&gt;coming soon&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lizrice/learning-ebpf/main/chapter10/README.md&#34;&gt;Chapter 10: eBPF Programming&lt;/a&gt; - The book explores examples from various eBPF libraries.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 11: The Future Evolution of eBPF&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are no code examples for Chapters 1 and 11.&lt;/p&gt; &#xA;&lt;h3&gt;Privileges&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need root privileges (well, strictly CAP_BPF and &lt;a href=&#34;https://mdaverde.com/posts/cap-bpf/&#34;&gt;additional privileges&lt;/a&gt;) to be able to load BPF programs into the kernel. &lt;code&gt;sudo -s&lt;/code&gt; is your friend.&lt;/p&gt; &#xA;&lt;h3&gt;View eBPF trace output&lt;/h3&gt; &#xA;&lt;p&gt;A couple of ways to see the output from the kernel&#39;s trace pipe where eBPF tracing gets written:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /sys/kernel/debug/tracing/trace_pipe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bpftool prog tracelog&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Corrections&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d love to hear if you find corrections and improvements for these examples. Issues and PRs are welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Lorenzooone/Pokemon-Gen3-to-Gen-X</title>
    <updated>2023-03-23T01:31:16Z</updated>
    <id>tag:github.com,2023-03-23:/Lorenzooone/Pokemon-Gen3-to-Gen-X</id>
    <link href="https://github.com/Lorenzooone/Pokemon-Gen3-to-Gen-X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GBA Homebrew for trading Pokémon between Gen 3 and Gen 1/2, as well as editing Clock Settings.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pokemon Gen3 to GenX&lt;/h1&gt; &#xA;&lt;p&gt;This is a multipurpose multibootable/cart-swappable homebrew designed for Pokémon Ruby/Sapphire/Emerald/Fire Red/Leaf Green.&lt;/p&gt; &#xA;&lt;p&gt;It adds the ability to trade to the Generation 1 and 2 games, as well as other cartridges using this software.&lt;/p&gt; &#xA;&lt;p&gt;It allows the user to run clock-based events in Pokémon Ruby/Sapphire/Emerald, even if the battery is dry.&lt;/p&gt; &#xA;&lt;p&gt;It can also be used to fix issues present in the base games, like Espeon, Umbreon and the Pokérus being unobtainable in Fire Red/Leaf Green, or the Roamer IV glitch.&lt;/p&gt; &#xA;&lt;p&gt;All communications need the DMG/GB/GBC Link Cable. The software is not compatible with the GBA Link Cable.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Starting - Loading a Cartridge&lt;/h3&gt; &#xA;&lt;p&gt;Start up the homebrew either through a flashcart, or multiboot, then select &#34;Load Cartridge&#34;, and insert your Pokémon game.&lt;/p&gt; &#xA;&lt;p&gt;If you multiboot with an already inserted cartridge, it&#39;s going to automatically read that.&lt;/p&gt; &#xA;&lt;p&gt;At any moment, you may select &#34;Swap Cartridge&#34; in the Main Menu to load another Pokémon game up.&lt;/p&gt; &#xA;&lt;p&gt;You can send the homebrew to other GBA consoles using the &#34;Send Multiboot&#34; option and a DMG/GB/GBC Link Cable.&lt;/p&gt; &#xA;&lt;h3&gt;Trading&lt;/h3&gt; &#xA;&lt;p&gt;By adjusting the settings available in the Main Menu, you can choose which generation to trade with.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gen 1 is for trading with Pokémon Red/Blue/Green/Yellow.&lt;/li&gt; &#xA; &lt;li&gt;Gen 2 is for trading with Pokémon Gold/Silver/Crystal.&lt;/li&gt; &#xA; &lt;li&gt;Gen 3 is for trading with other GBA consoles running this homebrew.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Trading to Gen 1 or Gen 2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to trade to the Japanese versions of Gen 1 or Gen 2 games, you must set the Region option in the Main Menu to Jap.&lt;/li&gt; &#xA; &lt;li&gt;The Pokémon received will be totally legitimate, barring their level and movesets.&lt;/li&gt; &#xA; &lt;li&gt;You will be able to freely change the nature of the received Pokémon during the trade.&lt;/li&gt; &#xA; &lt;li&gt;Trading across Generations is a lossy operation. As such, some information (like ribbons) will be lost!!!&lt;/li&gt; &#xA; &lt;li&gt;You will not be able to trade Pokémon which did not exist in the target games.&lt;/li&gt; &#xA; &lt;li&gt;These include: Unown ? and !, all Shiny Unown but I and V, certain Female Shiny Pokémon, Pokémon holding Mail.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clock Settings&lt;/h3&gt; &#xA;&lt;p&gt;In the Settings inside of the Main Menu, the Clock Settings will be available if you&#39;re playing Pokémon Ruby/Sapphire/Emerald.&lt;/p&gt; &#xA;&lt;p&gt;Within the Clock Settings, you will be able to change various aspects of the game&#39;s clock.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Time of Day option allows the user to change what Eevee will evolve into.&lt;/li&gt; &#xA; &lt;li&gt;The Tide option influences the tide inside of Shoal Cave, which can be useful to catch Snorunt.&lt;/li&gt; &#xA; &lt;li&gt;By increasing the number of days, the user can make it so certain time-based events are properly run (like berries growing or the lottery).&lt;/li&gt; &#xA; &lt;li&gt;By enabling the RTC Reset Menu, the user can use the in-game secret RTC Reset Menu, which can be used to reset the clock in the event that the battery was changed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All times reported within this menu assume a Dry Battery. If your battery is not dry, you may experience weird graphical behaviour, but the menu will still work fine.&lt;/p&gt; &#xA;&lt;h3&gt;Party Options&lt;/h3&gt; &#xA;&lt;p&gt;By selecting the option View Party Gen X, you can see what you&#39;ll be trading to the other games.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a special option, you will be able to evolve Eevee into either Espeon or Umbreon.&lt;/li&gt; &#xA; &lt;li&gt;As a special option, you will be able to fix the IVs of Roamer Pokémon caught in Pokémon Ruby/Sapphire/Fire Red/Leaf Green.&lt;/li&gt; &#xA; &lt;li&gt;As a special option, if the &#34;Tradeless Evo.&#34; Cheat option is enabled, you will be able to evolve Pokémon which would need to be traded in order to evolve.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Customize how the homebrew behaves. From its looks, to what it should do when trading to Gen 1 and Gen 2.&lt;/p&gt; &#xA;&lt;h4&gt;Cheats&lt;/h4&gt; &#xA;&lt;p&gt;Inside the Cheats menu, you will find Special options which can be useful for various purposes.&lt;/p&gt; &#xA;&lt;p&gt;These range from &#34;Tradeless Evo.&#34;, to giving Pokérus to your entire Party, which can be used to fix the fact that it&#39;s impossible to get in Pokémon Fire Red/Leaf Green.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The following projects were useful while making this homebrew:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kwsch/PKHeX&#34;&gt;PKHeX&lt;/a&gt; - Understanding legitimacy checks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Admiral-Fish/PokeFinder&#34;&gt;PokeFinder&lt;/a&gt; - Understanding RNG and calculations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pret&#34;&gt;pret&lt;/a&gt; - Understanding the innermost workings of the games.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All Pokémon names, sprites, names of related resources and the Japanese font are © Nintendo/Creatures Inc./GAME FREAK Inc.&lt;/p&gt; &#xA;&lt;p&gt;Everything else, and the programming code, is governed by the MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/3-EKe_lQREY&#34;&gt;This is a Video showing how to use the homebrew&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MellowNight/2D-Injector</title>
    <updated>2023-03-23T01:31:16Z</updated>
    <id>tag:github.com,2023-03-23:/MellowNight/2D-Injector</id>
    <link href="https://github.com/MellowNight/2D-Injector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hiding unsigned DLL inside a signed DLL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;2D-injector&lt;/h1&gt; &#xA;&lt;p&gt;2D Injector: An AetherVisor-based DLL injector.&lt;/p&gt; &#xA;&lt;p&gt;In the proof of concept code, I use NPT to stealthily map an unsigned payload DLL in the same address space as OWClient.dll (Overwolf&#39;s overlay DLL). Not only does the 2D injector bypass memory permission scans and DLL certificate checks, but it also renders the payload DLL invisible and unreadable.&lt;/p&gt; &#xA;&lt;p&gt;This was tested and is undetected on Fortnite and EFT, but the major caveat was injector caused FPS drops with cheats.&lt;/p&gt; &#xA;&lt;p&gt;I can see this being used for things other than cheating, such as debugging heavily protected apps or hiding from EDR.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/66788741/226236958-1166af80-bb8b-4c60-a148-7227ec157775.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;FULL INFORMATION HERE:&lt;/strong&gt; &lt;a href=&#34;https://mellownight.github.io/2023/01/10/BEInjector.html&#34;&gt;https://mellownight.github.io/2023/01/10/BEInjector.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements:&lt;/h1&gt; &#xA;&lt;p&gt;To red0x0002 &lt;a href=&#34;https://www.github.com/red0x0002&#34;&gt;https://www.github.com/red0x0002&lt;/a&gt; : Thank you to for helping me test the injector and giving me tips.&lt;/p&gt; &#xA;&lt;h1&gt;USAGE:&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile AetherVisor.sys: &lt;a href=&#34;https://github.com/MellowNight/AetherVisor&#34;&gt;https://github.com/MellowNight/AetherVisor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile Injector-driver&lt;/li&gt; &#xA; &lt;li&gt;Compile Injector-client with three parameters in &lt;code&gt;injection_info.h&lt;/code&gt; : &lt;code&gt;HOST_DLL_PATH&lt;/code&gt;, &lt;code&gt;HOST_DLL_NAME&lt;/code&gt;, and &lt;code&gt;ENTRYPOINT_NAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;kdmapper.exe AetherVisor.sys&lt;/li&gt; &#xA; &lt;li&gt;kdmapper.exe injector-driver.sys&lt;/li&gt; &#xA; &lt;li&gt;Run Injector-client as administrator&lt;/li&gt; &#xA; &lt;li&gt;Follow the prompt, provide the target PID and path to your own cheat DLL&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>