<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-05T01:23:14Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zigzap/zap</title>
    <updated>2024-03-05T01:23:14Z</updated>
    <id>tag:github.com,2024-03-05:/zigzap/zap</id>
    <link href="https://github.com/zigzap/zap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;blazingly fast backends in zig&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⚡zap⚡ - blazingly fast backends in zig&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zigzap/zap/actions/workflows/build-zig-11.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/zigzap/zap/actions/workflows/mastercheck.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://discord.gg/jQAAN6Ubyj&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1107835896356675706?label=chat&amp;amp;logo=discord&amp;amp;style=plastic&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Zap is the &lt;a href=&#34;https://ziglang.org&#34;&gt;zig&lt;/a&gt; replacement for the REST APIs I used to write in &lt;a href=&#34;https://python.org&#34;&gt;python&lt;/a&gt; with &lt;a href=&#34;https://flask.palletsprojects.com&#34;&gt;Flask&lt;/a&gt; and &lt;a href=&#34;https://www.mongodb.com&#34;&gt;mongodb&lt;/a&gt;, etc. It can be considered to be a microframework for web applications.&lt;/p&gt; &#xA;&lt;p&gt;What I needed as a replacement was a blazingly fast and robust HTTP server that I could use with Zig, and I chose to wrap the superb evented networking C library &lt;a href=&#34;https://facil.io&#34;&gt;facil.io&lt;/a&gt;. Zap wraps and patches &lt;a href=&#34;https://facil.io&#34;&gt;facil.io - the C web application framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;⚡ZAP⚡ IS FAST, ROBUST, AND STABLE&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;After having used ZAP in production for over 6 months, I can confidently assert that it proved to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡ &lt;strong&gt;blazingly fast&lt;/strong&gt; ⚡&lt;/li&gt; &#xA; &lt;li&gt;💪 &lt;strong&gt;extremely robust&lt;/strong&gt; 💪&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exactly the goals I set out to achieve!&lt;/p&gt; &#xA;&lt;h2&gt;Most FAQ:&lt;/h2&gt; &#xA;&lt;h3&gt;Zap uses the latest stable zig release (0.11.0) for a reason. So you don&#39;t have to keep up with frequent breaking changes. It&#39;s an &#34;LTS feature&#34;. If you want to use zig master, use the &lt;code&gt;zig-0.12.0&lt;/code&gt; branch but be aware that I don&#39;t provide &lt;code&gt;build.zig.zon&lt;/code&gt; snippets or tagged releases for it for the time being. If you know what you are doing, that shouldn&#39;t stop you from using it with zig master though.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Q: &lt;strong&gt;Where is the API documentation?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: Docs are a work in progress. You can check them out &lt;a href=&#34;https://zigzap.org/zap&#34;&gt;here&lt;/a&gt;. The docs are based on the &lt;code&gt;zig-0.12.0&lt;/code&gt; branch but apply to the current release (zig 0.11.0), too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Q: &lt;strong&gt;Zap doesn&#39;t build with Zig master?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: See the 0.12.0 branch. An example of how to use it is &lt;a href=&#34;https://github.com/zigzap/hello-0.12.0&#34;&gt;here&lt;/a&gt;. Please note that the 0.12.0 branch is not the official master branch of ZAP. Yet. Until zig 0.12.0 is released.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Q: &lt;strong&gt;Does ZAP work on Windows?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: No. This is due to the underlying facil.io C library. Future versions of facil.io might support Windows but there is no timeline yet. Your best options on Windows are WSL2 or a docker container.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Q: &lt;strong&gt;Does ZAP support TLS / HTTPS?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: Yes, ZAP supports using the system&#39;s openssl. See the &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/https/https.zig&#34;&gt;https&lt;/a&gt; example and make sure to build with the &lt;code&gt;-Dopenssl&lt;/code&gt; flag or the environment variable &lt;code&gt;ZAP_USE_OPENSSL=true&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;.openssl = true,&lt;/code&gt; (in dependent projects&#39; build.zig, &lt;code&gt;b.dependency(&#34;zap&#34; .{...})&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ZAP_USE_OPENSSL=true zig build https&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;zig build -Dopenssl=true https&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Here&#39;s what works&lt;/h2&gt; &#xA;&lt;p&gt;I recommend checking out &lt;strong&gt;Endpoint-based examples for more realistic use cases&lt;/strong&gt;. Most of the examples are super stripped down to only include what&#39;s necessary to show a feature.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Super easy build process&lt;/strong&gt;: Zap&#39;s &lt;code&gt;build.zig&lt;/code&gt; now uses the new Zig package manager for its C-dependencies, no git submodules anymore. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;tested on Linux and macOS (arm, M1)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/hello/hello.zig&#34;&gt;hello&lt;/a&gt;&lt;/strong&gt;: welcomes you with some static HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/routes/routes.zig&#34;&gt;routes&lt;/a&gt;&lt;/strong&gt;: a super easy example dispatching on the HTTP path. &lt;strong&gt;NOTE&lt;/strong&gt;: The dispatch in the example is a super-basic DIY-style dispatch. See endpoint-based examples for more realistic use cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/serve/serve.zig&#34;&gt;serve&lt;/a&gt;&lt;/strong&gt;: the traditional static web server with optional dynamic request handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/sendfile/sendfile.zig&#34;&gt;sendfile&lt;/a&gt;&lt;/strong&gt;: simple example of how to send a file, honoring compression headers, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/bindataformpost/bindataformpost.zig&#34;&gt;bindataformpost&lt;/a&gt;&lt;/strong&gt;: example to receive binary files via form post.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/hello_json/hello_json.zig&#34;&gt;hello_json&lt;/a&gt;&lt;/strong&gt;: serves you json dependent on HTTP path&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint/&#34;&gt;endpoint&lt;/a&gt;&lt;/strong&gt;: a simple JSON REST API example featuring a &lt;code&gt;/users&lt;/code&gt; endpoint for performing PUT/DELETE/GET/POST operations and listing users, together with a simple frontend to play with. &lt;strong&gt;It also introduces a &lt;code&gt;/stop&lt;/code&gt; endpoint&lt;/strong&gt; that shuts down Zap, so &lt;strong&gt;memory leak detection&lt;/strong&gt; can be performed in main(). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check out how &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint/main.zig&#34;&gt;main.zig&lt;/a&gt; uses ZIG&#39;s awesome &lt;code&gt;GeneralPurposeAllocator&lt;/code&gt; to report memory leaks when ZAP is shut down. The &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint/stopendpoint.zig&#34;&gt;StopEndpoint&lt;/a&gt; just stops ZAP when receiving a request on the &lt;code&gt;/stop&lt;/code&gt; route.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/mustache/mustache.zig&#34;&gt;mustache&lt;/a&gt;&lt;/strong&gt;: a simple example using &lt;a href=&#34;https://mustache.github.io/&#34;&gt;mustache&lt;/a&gt; templating.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint_auth/endpoint_auth.zig&#34;&gt;endpoint authentication&lt;/a&gt;&lt;/strong&gt;: a simple authenticated endpoint. Read more about authentication &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/doc/authentication.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/http_params/http_params.zig&#34;&gt;http parameters&lt;/a&gt;&lt;/strong&gt;: a simple example sending itself query parameters of all supported types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/cookies/cookies.zig&#34;&gt;cookies&lt;/a&gt;&lt;/strong&gt;: a simple example sending itself a cookie and responding with a session cookie.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/websockets/&#34;&gt;websockets&lt;/a&gt;&lt;/strong&gt;: a simple websockets chat for the browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/userpass_session_auth/&#34;&gt;Username/Password Session Authentication&lt;/a&gt;&lt;/strong&gt;: A convenience authenticator that redirects un-authenticated requests to a login page and sends cookies containing session tokens based on username/password pairs received via POST request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/middleware/middleware.zig&#34;&gt;MIDDLEWARE support&lt;/a&gt;&lt;/strong&gt;: chain together request handlers in middleware style. Provide custom context structs, totally type-safe, using &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/doc/zig-ception.md&#34;&gt;ZIG-CEPTION&lt;/a&gt;&lt;/strong&gt;. If you come from GO this might appeal to you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/middleware_with_endpoint/middleware_with_endpoint.zig&#34;&gt;MIDDLEWARE with endpoint support&lt;/a&gt;&lt;/strong&gt;: Same as the example above, but this time we use an endpoint at the end of the chain, by wrapping it via &lt;code&gt;zap.Middleware.EndpointHandler&lt;/code&gt;. Mixing endpoints in your middleware chain allows for usage of Zap&#39;s authenticated endpoints and your custom endpoints. Since Endpoints use a simpler API, you have to use &lt;code&gt;r.setUserContext()&lt;/code&gt; and &lt;code&gt;r.getUserContext()&lt;/code&gt; with the request if you want to access the middleware context from a wrapped endpoint. Since this mechanism uses an &lt;code&gt;*anyopaque&lt;/code&gt; pointer underneath (to not break the Endpoint API), it is less type-safe than &lt;code&gt;zap.Middleware&lt;/code&gt;&#39;s use of contexts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/src/zap.zig#L102&#34;&gt;&lt;strong&gt;Per Request Contexts&lt;/strong&gt;&lt;/a&gt; : With the introduction of &lt;code&gt;setUserContext()&lt;/code&gt; and &lt;code&gt;getUserContext()&lt;/code&gt;, you can, of course use those two in projects that don&#39;t use &lt;code&gt;zap.Endpoint&lt;/code&gt; or &lt;code&gt;zap.Middleware&lt;/code&gt;, too, if you really, really, absolutely don&#39;t find another way to solve your context problem. &lt;strong&gt;We recommend using a &lt;code&gt;zap.Endpoint&lt;/code&gt;&lt;/strong&gt; inside of a struct that can provide all the context you need &lt;strong&gt;instead&lt;/strong&gt;. You get access to your struct in the callbacks via the &lt;code&gt;@fieldParentPtr()&lt;/code&gt; trick that is used extensively in Zap&#39;s examples, like the &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint/endpoint.zig&#34;&gt;endpoint example&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/senderror/senderror.zig&#34;&gt;&lt;strong&gt;Error Trace Responses&lt;/strong&gt;&lt;/a&gt;: You can now call &lt;code&gt;r.sendError(err, status_code)&lt;/code&gt; when you catch an error and a stack trace will be returned to the client / browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/https/https.zig&#34;&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;&lt;/a&gt;: Shows how easy it is to use facil.io&#39;s openssl support. Must be compiled with &lt;code&gt;-Dopenssl=true&lt;/code&gt; or the environment variable &lt;code&gt;ZAP_USE_OPENSSL&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and requires openssl dev dependencies (headers, lib) to be installed on the system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;run it like this: &lt;code&gt;ZAP_USE_OPENSSL=true zig build run-https&lt;/code&gt;&lt;br&gt; OR like this: &lt;code&gt;zig build -Dopenssl=true run-https&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;it will tell you how to generate certificates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/simple_router/simple_router.zig&#34;&gt;&lt;strong&gt;simple_router&lt;/strong&gt;&lt;/a&gt;: See how you can use &lt;code&gt;zap.Router&lt;/code&gt; to dispatch to handlers by HTTP path. It also features &lt;code&gt;zap.RequestHandler&lt;/code&gt; to capture the &#34;self&#34; pointer of the container of the handler functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ll continue wrapping more of facil.io&#39;s functionality and adding stuff to zap to a point where I can use it as the JSON REST API backend for real research projects, serving thousands of concurrent clients.&lt;/p&gt; &#xA;&lt;h2&gt;⚡blazingly fast⚡&lt;/h2&gt; &#xA;&lt;p&gt;Claiming to be blazingly fast is the new black. At least, Zap doesn&#39;t slow you down and if your server performs poorly, it&#39;s probably not exactly Zap&#39;s fault. Zap relies on the &lt;a href=&#34;https://facil.io&#34;&gt;facil.io&lt;/a&gt; framework and so it can&#39;t really claim any performance fame for itself. In this initial implementation of Zap, I didn&#39;t care about optimizations at all.&lt;/p&gt; &#xA;&lt;p&gt;But, how fast is it? Being blazingly fast is relative. When compared with a simple GO HTTP server, a simple Zig Zap HTTP server performed really good on my machine (x86_64-linux):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zig Zap was nearly 30% faster than GO&lt;/li&gt; &#xA; &lt;li&gt;Zig Zap had over 50% more throughput than GO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Thanks to @felipetrz, I got to test against more realistic Python and Rust examples. Both python &lt;code&gt;sanic&lt;/code&gt; and rust &lt;code&gt;axum&lt;/code&gt; were easy enough to integrate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I have automated the benchmarks. See &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/blazingly-fast.md&#34;&gt;blazingly-fast.md&lt;/a&gt; for more information. Also, thanks to @alexpyattaev, the benchmarks are fairer now, pinning server and client to specific CPU cores.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I have consolidated the benchmarks to one good representative per language. See more details in &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/blazingly-fast.md&#34;&gt;blazingly-fast.md&lt;/a&gt;. It contains rust implementations that come pretty close to Zap&#39;s performance in the simplistic testing scenario.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zigzap/zap/master/wrk/samples/README_req_per_sec.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zigzap/zap/master/wrk/samples/README_xfer_per_sec.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;So, being somewhere in the ballpark of basic GO performance, zig zap seems to be ... of reasonable performance 😎.&lt;/p&gt; &#xA;&lt;p&gt;I can rest my case that developing ZAP was a good idea because it&#39;s faster than both alternatives: a) staying with Python, and b) creating a GO + Zig hybrid.&lt;/p&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/blazingly-fast.md&#34;&gt;blazingly-fast.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💪 Robust&lt;/h2&gt; &#xA;&lt;p&gt;ZAP is &lt;strong&gt;very robust&lt;/strong&gt;. In fact, it is so robust that I was confidently able to only work with in-memory data (RAM) in all my ZAP projects so far: over 5 large online research experiments. No database, no file persistence, until I hit &#34;save&#34; at the end 😊.&lt;/p&gt; &#xA;&lt;p&gt;So I was able to postpone my cunning data persistence strategy that&#39;s similar to a mark-and-sweep garbage collector and would only persist &#34;dirty&#34; data when traffic is low, in favor of getting stuff online more quickly. But even if implemented, such a persistence strategy is risky because when traffic is not low, it means the system is under (heavy) load. Would you confidently NOT save data when load is high and the data changes most frequently -&amp;gt; the potential data loss is maximized?&lt;/p&gt; &#xA;&lt;p&gt;To answer that question, I just skipped it. I skipped saving any data until receiving a &#34;save&#34; signal via API. And it worked. ZAP just kept on zapping. When traffic calmed down or all experiment participants had finished, I hit &#34;save&#34; and went on analyzing the data.&lt;/p&gt; &#xA;&lt;p&gt;Handling all errors does pay off after all. No hidden control flow, no hidden errors or exceptions is one of Zig&#39;s strengths.&lt;/p&gt; &#xA;&lt;p&gt;To be honest: There are still pitfalls. E.g. if you request large stack sizes for worker threads, Zig won&#39;t like that and panic. So make sure you don&#39;t have local variables that require tens of megabytes of stack space.&lt;/p&gt; &#xA;&lt;h3&gt;🛡️ Memory-safe&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint/stopendpoint.zig&#34;&gt;StopEndpoint&lt;/a&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/endpoint&#34;&gt;endpoint&lt;/a&gt; example. That example uses ZIG&#39;s awesome &lt;code&gt;GeneralPurposeAllocator&lt;/code&gt; to report memory leaks when ZAP is shut down. The &lt;code&gt;StopEndpoint&lt;/code&gt; just stops ZAP when receiving a request on the &lt;code&gt;/stop&lt;/code&gt; route.&lt;/p&gt; &#xA;&lt;p&gt;You can use the same strategy in your debug builds and tests to check if your code leaks memory.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;strong&gt;the latest zig release (0.11.0)&lt;/strong&gt; installed. Fetch it from &lt;a href=&#34;https://ziglang.org/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/zigzap/zap.git&#xA;$ cd zap&#xA;$ zig build run-hello&#xA;$ # open http://localhost:3000 in your browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Using ⚡zap⚡ in your own projects&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;strong&gt;the latest zig release (0.11.0)&lt;/strong&gt; installed. Fetch it from &lt;a href=&#34;https://ziglang.org/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have an existing zig project, create one like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mkdir zaptest &amp;amp;&amp;amp; cd zaptest&#xA;$ zig init-exe&#xA;$ git init      ## (optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Nix/NixOS users are lucky; you can use the existing &lt;code&gt;flake.nix&lt;/code&gt; and run &lt;code&gt;nix develop&lt;/code&gt; to get a development shell providing zig and all dependencies to build and run the GO, python, and rust examples for the &lt;code&gt;wrk&lt;/code&gt; performance tests. For the mere building of zap projects, &lt;code&gt;nix develop .#build&lt;/code&gt; will only fetch zig 0.11.0.&lt;/p&gt; &#xA;&lt;p&gt;With an existing Zig project, adding Zap to it is easy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add zap to your &lt;code&gt;build.zig.zon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add zap to your &lt;code&gt;build.zig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To add zap to &lt;code&gt;build.zig.zon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- INSERT_DEP_BEGIN --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;.{&#xA;    .name = &#34;My example project&#34;,&#xA;    .version = &#34;0.0.1&#34;,&#xA;&#xA;    .dependencies = .{&#xA;        // zap v0.5.1&#xA;        .zap = .{&#xA;            .url = &#34;https://github.com/zigzap/zap/archive/refs/tags/v0.5.1.tar.gz&#34;,&#xA;            .hash = &#34;1220d4802fb09d4e99c0e7265f90d6f3cfdc3e5e31c1b05f0924ee2dd26d9d6dbbf4&#34;,&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- INSERT_DEP_END --&gt; &#xA;&lt;p&gt;Then, in your &lt;code&gt;build.zig&lt;/code&gt;&#39;s &lt;code&gt;build&lt;/code&gt; function, add the following before &lt;code&gt;b.installArtifact(exe)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;    const zap = b.dependency(&#34;zap&#34;, .{&#xA;        .target = target,&#xA;        .optimize = optimize,&#xA;        .openssl = false, // set to true to enable TLS support&#xA;    });&#xA;    exe.addModule(&#34;zap&#34;, zap.module(&#34;zap&#34;));&#xA;    exe.linkLibrary(zap.artifact(&#34;facil.io&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From then on, you can use the Zap package in your project. Check out the examples to see how to use Zap.&lt;/p&gt; &#xA;&lt;h2&gt;Updating your project to the latest version of zap&lt;/h2&gt; &#xA;&lt;p&gt;You can change the URL to Zap in your &lt;code&gt;build.zig.zon&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;easiest: use a tagged release&lt;/li&gt; &#xA; &lt;li&gt;or to one of the tagged versions, e.g. &lt;code&gt;0.0.9&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;or to the latest commit of &lt;code&gt;zap&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a tagged release&lt;/h3&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/zigzap/zap/releases&#34;&gt;release page&lt;/a&gt;. Every release will state its version number and also provide instructions for changing &lt;code&gt;build.zig.zon&lt;/code&gt; and &lt;code&gt;build.zig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using other versions&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/doc/other-versions.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to ⚡zap⚡ - blazingly fast&lt;/h2&gt; &#xA;&lt;p&gt;At the current time, I can only add to zap what I need for my personal and professional projects. While this happens &lt;strong&gt;blazingly fast&lt;/strong&gt;, some if not all nice-to-have additions will have to wait. You are very welcome to help make the world a blazingly fast place by providing patches or pull requests, add documentation or examples, or interesting issues and bug reports - you&#39;ll know what to do when you receive your calling 👼.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/introducing.md&#34;&gt;introducing.md&lt;/a&gt; for more on the state and progress of this project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We now have our own &lt;a href=&#34;https://discord.gg/jQAAN6Ubyj&#34;&gt;ZAP discord&lt;/a&gt; server!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also reach me on &lt;a href=&#34;https://discord.gg/CBzE3VMb&#34;&gt;the zig showtime discord server&lt;/a&gt; under the handle renerocksai (renerocksai#1894).&lt;/p&gt; &#xA;&lt;h2&gt;Support ⚡zap⚡&lt;/h2&gt; &#xA;&lt;p&gt;Being blazingly fast requires a constant feed of caffeine. I usually manage to provide that to myself for myself. However, to support keeping the juices flowing and putting a smile on my face and that warm and cozy feeling into my heart, you can always &lt;a href=&#34;https://buymeacoffee.com/renerocksai&#34;&gt;buy me a coffee&lt;/a&gt; ☕. All donations are welcomed 🙏 blazingly fast! That being said, just saying &#34;hi&#34; also works wonders with the smiles, warmth, and coziness 😊.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;You build and run the examples via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zig build [EXAMPLE]&#xA;$ ./zig-out/bin/[EXAMPLE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... where &lt;code&gt;[EXAMPLE]&lt;/code&gt; is one of &lt;code&gt;hello&lt;/code&gt;, &lt;code&gt;routes&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, ... see the &lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/#heres-what-works&#34;&gt;list of examples above&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example: building and running the hello example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zig build hello&#xA;$ ./zig-out/bin/hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To just run an example, like &lt;code&gt;routes&lt;/code&gt;, without generating an executable, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zig build run-[EXAMPLE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: building and running the routes example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ zig build run-routes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zigzap/zap/master/examples/hello/hello.zig&#34;&gt;hello&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zig&#34;&gt;const std = @import(&#34;std&#34;);&#xA;const zap = @import(&#34;zap&#34;);&#xA;&#xA;fn on_request(r: zap.Request) void {&#xA;    if (r.path) |the_path| {&#xA;        std.debug.print(&#34;PATH: {s}\n&#34;, .{the_path});&#xA;    }&#xA;&#xA;    if (r.query) |the_query| {&#xA;        std.debug.print(&#34;QUERY: {s}\n&#34;, .{the_query});&#xA;    }&#xA;    r.sendBody(&#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello from ZAP!!!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;) catch return;&#xA;}&#xA;&#xA;pub fn main() !void {&#xA;    var listener = zap.HttpListener.init(.{&#xA;        .port = 3000,&#xA;        .on_request = on_request,&#xA;        .log = true,&#xA;    });&#xA;    try listener.listen();&#xA;&#xA;    std.debug.print(&#34;Listening on 0.0.0.0:3000\n&#34;, .{});&#xA;&#xA;    // start worker threads&#xA;    zap.start(.{&#xA;        .threads = 2,&#xA;        .workers = 2,&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>