<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-18T01:25:57Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openslide/openslide</title>
    <updated>2023-10-18T01:25:57Z</updated>
    <id>tag:github.com,2023-10-18:/openslide/openslide</id>
    <link href="https://github.com/openslide/openslide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C library for reading virtual slide images&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenSlide&lt;/h1&gt; &#xA;&lt;p&gt;OpenSlide is a C library for reading whole slide image files (also known as virtual slides). It provides a consistent and simple API for reading files from multiple vendors.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;OpenSlide can read brightfield whole slide images in &lt;a href=&#34;https://openslide.org/formats/&#34;&gt;several formats&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/aperio/&#34;&gt;Aperio&lt;/a&gt; (&lt;code&gt;.svs&lt;/code&gt;, &lt;code&gt;.tif&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/dicom/&#34;&gt;DICOM&lt;/a&gt; (&lt;code&gt;.dcm&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/hamamatsu/&#34;&gt;Hamamatsu&lt;/a&gt; (&lt;code&gt;.ndpi&lt;/code&gt;, &lt;code&gt;.vms&lt;/code&gt;, &lt;code&gt;.vmu&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/leica/&#34;&gt;Leica&lt;/a&gt; (&lt;code&gt;.scn&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/mirax/&#34;&gt;MIRAX&lt;/a&gt; (&lt;code&gt;.mrxs&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/philips/&#34;&gt;Philips&lt;/a&gt; (&lt;code&gt;.tiff&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/sakura/&#34;&gt;Sakura&lt;/a&gt; (&lt;code&gt;.svslide&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/trestle/&#34;&gt;Trestle&lt;/a&gt; (&lt;code&gt;.tif&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/ventana/&#34;&gt;Ventana&lt;/a&gt; (&lt;code&gt;.bif&lt;/code&gt;, &lt;code&gt;.tif&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openslide.org/formats/generic-tiff/&#34;&gt;Generic tiled TIFF&lt;/a&gt; (&lt;code&gt;.tif&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OpenSlide can also provide access to ICC profiles, textual metadata, and associated images such as a slide label and thumbnail.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://openslide.org/api/openslide_8h.html&#34;&gt;API reference&lt;/a&gt; is available on the web, and is also included as &lt;code&gt;doc/html/openslide_8h.html&lt;/code&gt; in the source tarball. &lt;a href=&#34;https://openslide.org/#documentation&#34;&gt;Additional documentation&lt;/a&gt; is available on the &lt;a href=&#34;https://openslide.org/&#34;&gt;OpenSlide website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenSlide is released under the terms of the &lt;a href=&#34;https://openslide.org/license/&#34;&gt;GNU Lesser General Public License, version 2.1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;OpenSlide is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;To build OpenSlide, you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Meson&lt;/li&gt; &#xA; &lt;li&gt;cairo ≥ 1.2&lt;/li&gt; &#xA; &lt;li&gt;GDK-PixBuf&lt;/li&gt; &#xA; &lt;li&gt;glib ≥ 2.56&lt;/li&gt; &#xA; &lt;li&gt;libdicom ≥ 1.0 (automatically built if missing)&lt;/li&gt; &#xA; &lt;li&gt;libjpeg&lt;/li&gt; &#xA; &lt;li&gt;libpng&lt;/li&gt; &#xA; &lt;li&gt;libtiff ≥ 4.0&lt;/li&gt; &#xA; &lt;li&gt;libxml2&lt;/li&gt; &#xA; &lt;li&gt;OpenJPEG ≥ 2.1&lt;/li&gt; &#xA; &lt;li&gt;SQLite ≥ 3.14&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir&#xA;meson compile -C builddir&#xA;meson install -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;OpenSlide has been developed by Carnegie Mellon University and other contributors.&lt;/p&gt; &#xA;&lt;p&gt;OpenSlide has been supported by the National Institutes of Health and the Clinical and Translational Science Institute at the University of Pittsburgh.&lt;/p&gt; &#xA;&lt;p&gt;Development of DICOM and ICC functionality was supported by NCI Imaging Data Commons and has been funded in whole or in part with Federal funds from the National Cancer Institute, National Institutes of Health, under Task Order No. HHSN26110071 under Contract No. HHSN261201500003l.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skeeto/endlessh</title>
    <updated>2023-10-18T01:25:57Z</updated>
    <id>tag:github.com,2023-10-18:/skeeto/endlessh</id>
    <link href="https://github.com/skeeto/endlessh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SSH tarpit that slowly sends an endless banner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Endlessh: an SSH tarpit&lt;/h1&gt; &#xA;&lt;p&gt;Endlessh is an SSH tarpit &lt;a href=&#34;https://nullprogram.com/blog/2019/03/22/&#34;&gt;that &lt;em&gt;very&lt;/em&gt; slowly sends an endless, random SSH banner&lt;/a&gt;. It keeps SSH clients locked up for hours or even days at a time. The purpose is to put your real SSH server on another port and then let the script kiddies get stuck in this tarpit instead of bothering a real server.&lt;/p&gt; &#xA;&lt;p&gt;Since the tarpit is in the banner before any cryptographic exchange occurs, this program doesn&#39;t depend on any cryptographic libraries. It&#39;s a simple, single-threaded, standalone C program. It uses &lt;code&gt;poll()&lt;/code&gt; to trap multiple clients at a time.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Usage information is printed with &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: endlessh [-vhs] [-d MS] [-f CONFIG] [-l LEN] [-m LIMIT] [-p PORT]&#xA;  -4        Bind to IPv4 only&#xA;  -6        Bind to IPv6 only&#xA;  -d INT    Message millisecond delay [10000]&#xA;  -f        Set and load config file [/etc/endlessh/config]&#xA;  -h        Print this help message and exit&#xA;  -l INT    Maximum banner line length (3-255) [32]&#xA;  -m INT    Maximum number of clients [4096]&#xA;  -p INT    Listening port [2222]&#xA;  -s        Print diagnostics to syslog instead of standard output&#xA;  -v        Print diagnostics (repeatable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Argument order matters. The configuration file is loaded when the &lt;code&gt;-f&lt;/code&gt; argument is processed, so only the options that follow will override the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;By default no log messages are produced. The first &lt;code&gt;-v&lt;/code&gt; enables basic logging and a second &lt;code&gt;-v&lt;/code&gt; enables debugging logging (noisy). All log messages are sent to standard output by default. &lt;code&gt;-s&lt;/code&gt; causes them to be sent to syslog.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;endlessh -v &amp;gt;endlessh.log 2&amp;gt;endlessh.err&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A SIGTERM signal will gracefully shut down the daemon, allowing it to write a complete, consistent log.&lt;/p&gt; &#xA;&lt;p&gt;A SIGHUP signal requests a reload of the configuration file (&lt;code&gt;-f&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;A SIGUSR1 signal will print connections stats to the log.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration File&lt;/h2&gt; &#xA;&lt;p&gt;The configuration file has similar syntax to OpenSSH.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# The port on which to listen for new SSH connections.&#xA;Port 2222&#xA;&#xA;# The endless banner is sent one line at a time. This is the delay&#xA;# in milliseconds between individual lines.&#xA;Delay 10000&#xA;&#xA;# The length of each line is randomized. This controls the maximum&#xA;# length of each line. Shorter lines may keep clients on for longer if&#xA;# they give up after a certain number of bytes.&#xA;MaxLineLength 32&#xA;&#xA;# Maximum number of connections to accept at a time. Connections beyond&#xA;# this are not immediately rejected, but will wait in the queue.&#xA;MaxClients 4096&#xA;&#xA;# Set the detail level for the log.&#xA;#   0 = Quiet&#xA;#   1 = Standard, useful log messages&#xA;#   2 = Very noisy debugging information&#xA;LogLevel 0&#xA;&#xA;# Set the family of the listening socket&#xA;#   0 = Use IPv4 Mapped IPv6 (Both v4 and v6, default)&#xA;#   4 = Use IPv4 only&#xA;#   6 = Use IPv6 only&#xA;BindFamily 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build issues&lt;/h2&gt; &#xA;&lt;p&gt;Some more esoteric systems require extra configuration when building.&lt;/p&gt; &#xA;&lt;h3&gt;RHEL 6 / CentOS 6&lt;/h3&gt; &#xA;&lt;p&gt;This system uses a version of glibc older than 2.17 (December 2012), and &lt;code&gt;clock_gettime(2)&lt;/code&gt; is still in librt. For these systems you will need to link against librt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make LDLIBS=-lrt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Solaris / illumos&lt;/h3&gt; &#xA;&lt;p&gt;These systems don&#39;t include all the necessary functionality in libc and the linker requires some extra libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CC=gcc LDLIBS=&#39;-lnsl -lrt -lsocket&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using GCC or Clang, also override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; to remove GCC-specific options. For example, on Solaris:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CFLAGS=-fast LDFLAGS= LDLIBS=&#39;-lnsl -lrt -lsocket&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The feature test macros on these systems isn&#39;t reliable, so you may also need to use &lt;code&gt;-D__EXTENSIONS__&lt;/code&gt; in &lt;code&gt;CFLAGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;OpenBSD&lt;/h3&gt; &#xA;&lt;p&gt;The man page needs to go into a different path for OpenBSD&#39;s &lt;code&gt;man&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;diff --git a/Makefile b/Makefile&#xA;index 119347a..dedf69d 100644&#xA;--- a/Makefile&#xA;+++ b/Makefile&#xA;@@ -14,8 +14,8 @@ endlessh: endlessh.c&#xA; install: endlessh&#xA;        install -d $(DESTDIR)$(PREFIX)/bin&#xA;        install -m 755 endlessh $(DESTDIR)$(PREFIX)/bin/&#xA;-       install -d $(DESTDIR)$(PREFIX)/share/man/man1&#xA;-       install -m 644 endlessh.1 $(DESTDIR)$(PREFIX)/share/man/man1/&#xA;+       install -d $(DESTDIR)$(PREFIX)/man/man1&#xA;+       install -m 644 endlessh.1 $(DESTDIR)$(PREFIX)/man/man1/&#xA;&#xA; clean:&#xA;        rm -rf endlessh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>omnigres/omnigres</title>
    <updated>2023-10-18T01:25:57Z</updated>
    <id>tag:github.com,2023-10-18:/omnigres/omnigres</id>
    <link href="https://github.com/omnigres/omnigres" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Postgres as a Platform&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/header_logo.svg?sanitize=true&#34; alt=&#34;Omnigres&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.omnigr.es&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1060568981725003789?label=Discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.omnigres.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-ready-green&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/omnigres/omnigres&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Omnigres makes Postgres a developer-first application platform. You can deploy a single database instance and it can host your entire application, scaling as needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running application logic &lt;strong&gt;inside&lt;/strong&gt; or &lt;strong&gt;next to&lt;/strong&gt; the database instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt; provisioning (&lt;strong&gt;Git&lt;/strong&gt;, &lt;strong&gt;containers&lt;/strong&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Database instance serves &lt;strong&gt;HTTP&lt;/strong&gt;, &lt;strong&gt;WebSocket&lt;/strong&gt; and other protocols&lt;/li&gt; &#xA; &lt;li&gt;In-memory and volatile on-disk &lt;strong&gt;caching&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Routine application building blocks (&lt;strong&gt;authentication&lt;/strong&gt;, &lt;strong&gt;authorization&lt;/strong&gt;, &lt;strong&gt;payments&lt;/strong&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Database-modeled application logic via &lt;strong&gt;reactive&lt;/strong&gt; queries&lt;/li&gt; &#xA; &lt;li&gt;Automagic remote &lt;strong&gt;APIs&lt;/strong&gt; and &lt;strong&gt;form&lt;/strong&gt; handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt; data updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blogs and Publications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yrashk.com/blog/category/omnigres/&#34;&gt;Omnigres maintainer&#39;s blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🏃&lt;/span&gt; Quick start&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to try Omnigres out is by using its &lt;a href=&#34;https://github.com/omnigres/omnigres/pkgs/container/omnigres&#34;&gt;container image&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create omnigres&#xA;docker run --name omnigres --mount source=omnigres,target=/var/lib/postgresql/data \&#xA;           -p 127.0.0.1:5432:5432 -p 127.0.0.1:8080:8080 --rm ghcr.io/omnigres/omnigres:latest&#xA;# Now you can connect to it:&#xA;psql -h localhost -p 5432 -U omnigres omnigres # password is `omnigres`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Postgres parameters such as database, user or password can be overridden as per the &#34;Environment Variables&#34; section in &lt;a href=&#34;https://hub.docker.com/_/postgres/&#34;&gt;postgres image instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can access the HTTP server at &lt;a href=&#34;http://localhost:8080&#34;&gt;localhost:8080&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building your own image&lt;/h3&gt; &#xA;&lt;p&gt;If you can&#39;t use the pre-built image (for example, you are running a fork or made changes), you can build the image yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Build the image&#xA;DOCKER_BUILDKIT=1 docker build . -t ghcr.io/omnigres/omnigres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;👋&lt;/span&gt; &#34;Hello, world&#34;&lt;/h2&gt; &#xA;&lt;p&gt;Here we expect you are running the &lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/#-runner--quick-start&#34;&gt;container image&lt;/a&gt;, which has omni_httpd and omni_web extensions provisioned by default.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with a traditional example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;update omni_httpd.handlers&#xA;set&#xA;    query =&#xA;        $$select omni_httpd.http_response(&#39;Hello, world!&#39;) from request;$$;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we instruct the handler that is provisioned by omni_httpd by default to use the enclosed query to greet the world:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl localhost:8080&#xA;Hello, world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, let&#39;s make it more personal and let it greet the requester by name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;update omni_httpd.handlers&#xA;set&#xA;    query =&#xA;        $$select omni_httpd.http_response(&#39;Hello, &#39; || &#xA;                   coalesce(omni_web.param_get(request.query_string, &#39;name&#39;), &#39;world&#39;) || &#39;!&#39;)&#xA;          from request;$$;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, it&#39;ll respond in a personalized manner if &lt;code&gt;name&lt;/code&gt; query string parameter is provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl localhost:8080&#xA;Hello, world!&#xA;&#xA;$ curl &#34;localhost:8080?name=John&#34;&#xA;Hello, John!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This, of course, only barely scratches the surface, but it may give you a very high-level concept of how Omnigres web services can be built.&lt;/p&gt; &#xA;&lt;p&gt;For a more complex example, that uses the underlying database and employs more real-world layout, check out this &lt;a href=&#34;https://docs.omnigres.org/examples/motd/&#34;&gt;MOTD service example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🏗&lt;/span&gt; Component Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Below is the current list of components being worked on, experimented with and discussed. This list will change (and grow) over time.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_schema/README.md&#34;&gt;omni_schema&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Application schema management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_json/README.md&#34;&gt;omni_json&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;JSON toolkit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_http/README.md&#34;&gt;omni_http&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Common HTTP types library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_httpd/README.md&#34;&gt;omni_httpd&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_web/README.md&#34;&gt;omni_web&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Serving HTTP in Postgres and building services in SQL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_mimetypes/README.md&#34;&gt;omni_mimetypes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;MIME types and file extensions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_httpc/README.md&#34;&gt;omni_httpc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;HTTP client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_sql/README.md&#34;&gt;omni_sql&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚧&lt;/span&gt; Extremely limited API surface&lt;/td&gt; &#xA;   &lt;td&gt;Programmatic SQL manipulation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_vfs/README.md&#34;&gt;omni_vfs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;☑&lt;/span&gt; Initial prototype&lt;/td&gt; &#xA;   &lt;td&gt;Virtual File System interface&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_containers/README.md&#34;&gt;omni_containers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;☑&lt;/span&gt; Initial prototype&lt;/td&gt; &#xA;   &lt;td&gt;Managing containers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_ext/README.md&#34;&gt;omni_ext&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/dynpgext/README.md&#34;&gt;Dynpgext interface&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;☑&lt;/span&gt; Getting ready to become first release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Postgres extension loader&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_types/README.md&#34;&gt;omni_types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Postgres typing techniques (sum types, etc.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_seq/README.md&#34;&gt;omni_seq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Extended Postgres sequence tooling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_txn/README.md&#34;&gt;omni_txn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; First release candidate&lt;/td&gt; &#xA;   &lt;td&gt;Transaction management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnigres/omnigres/master/extensions/omni_python/README.md&#34;&gt;omni_python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;☑&lt;/span&gt; Initial prototype&lt;/td&gt; &#xA;   &lt;td&gt;First-class Python Development Experience&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;omni_git&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🥼&lt;/span&gt; Early experiments (unpublished)&lt;/td&gt; &#xA;   &lt;td&gt;Postgres Git client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;omni_reactive&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🗓&lt;/span&gt; Haven&#39;t started yet&lt;/td&gt; &#xA;   &lt;td&gt;Reactive queries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;span&gt;⌨&lt;/span&gt; Hacking&lt;/h2&gt; &#xA;&lt;h2&gt;Building &amp;amp; using extensions&lt;/h2&gt; &#xA;&lt;p&gt;To build and run Omnigres, you would currently need a recent C compiler, OpenSSL and cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake -S . -B build&#xA;cmake --build build --parallel&#xA;make psql_&amp;lt;COMPONENT_NAME&amp;gt; # for example, `psql_omni_containers`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# in the build directory&#xA;CTEST_PARALLEL_LEVEL=$(nproc) make -j $(nproc) all test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Devenv.sh-based local development environment&lt;/h2&gt; &#xA;&lt;h3&gt;Initial setup&lt;/h3&gt; &#xA;&lt;p&gt;Follow these guides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/getting-started/&#34;&gt;https://devenv.sh/getting-started/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devenv.sh/automatic-shell-activation/&#34;&gt;https://devenv.sh/automatic-shell-activation/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;direnv allow&lt;/code&gt; in omnigres repo&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day-to-day development&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the repo. This brings in all dependencies.&lt;/li&gt; &#xA; &lt;li&gt;To bring up development stack (Postgres with all extensions, etc.), run: &lt;code&gt;devenv up&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once the development environment is running, you can connect to it by issuing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pg&lt;/code&gt; -&amp;gt; this connects to Postgres through a UNIX socket, for maximum performance. CLI args forwarded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pgclear&lt;/code&gt; -&amp;gt; removes the PGDATA folder contents. You want to restart &lt;code&gt;devenv up&lt;/code&gt; after this so Postgres can reinitialize as per &lt;code&gt;devenv.nix&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>