<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-04T01:31:27Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xCuri0/ReBarUEFI</title>
    <updated>2023-02-04T01:31:27Z</updated>
    <id>tag:github.com,2023-02-04:/xCuri0/ReBarUEFI</id>
    <link href="https://github.com/xCuri0/ReBarUEFI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Resizable BAR for (almost) any UEFI system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReBarUEFI&lt;/h1&gt; &#xA;&lt;p&gt;DXE driver to enable Resizable BAR on systems which don&#39;t support it officially. This is done by hooking &lt;code&gt;PreprocessController&lt;/code&gt; which is called for every PCI device during boot and setting up the Resizable BAR control registers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xCuri0/ReBarUEFI/master/rebar.png&#34; alt=&#34;screenshot showing cpu-z, gpu-z and amd software&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/actions/workflows/ReBarDxe.yml&#34;&gt;&lt;img src=&#34;https://github.com/xCuri0/ReBarUEFI/actions/workflows/ReBarDxe.yml/badge.svg?sanitize=true&#34; alt=&#34;ReBarDxe EDK2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/actions/workflows/ReBarState.yml&#34;&gt;&lt;img src=&#34;https://github.com/xCuri0/ReBarUEFI/actions/workflows/ReBarState.yml/badge.svg?sanitize=true&#34; alt=&#34;ReBarState CMake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(optional) 4G Decoding enabled. See wiki page &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/Enabling-hidden-4G-decoding&#34;&gt;Enabling hidden 4G decoding&lt;/a&gt; if you can&#39;t find an option for it. &lt;strong&gt;Without 4G Decoding you will be limited to 1GB and in some cases 512MB BAR you can try to increase this upto 2GB by reducing TOLUD&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;(optional) BIOS support for Large BARs. Patches exist to fix most issues relating to this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/LongSoft/UEFITool/releases/tag/0.28.0&#34;&gt;UEFITool (non NE)&lt;/a&gt; to insert the FFS from &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/releases&#34;&gt;Releases&lt;/a&gt; into the end of the DXE driver section and flash the modified firmware.&lt;/p&gt; &#xA;&lt;p&gt;See wiki page &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/Adding-FFS-module&#34;&gt;Adding FFS module&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Once running the modified firmware make sure that &lt;strong&gt;4G decoding is enabled and CSM is off&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run ReBarState (found in Releases) and set the Resizable BAR size. &lt;strong&gt;If Resizable BAR works for you reply to &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/issues/11&#34;&gt;List of working motherboards&lt;/a&gt; so I can add it to the list.&lt;/strong&gt; Most firmware will accept unsigned/patched modules with Secure Boot on so you won&#39;t have any problems running certain games.&lt;/p&gt; &#xA;&lt;p&gt;If you have any issues after enabling Resizable BAR see &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/Common-issues-(and-fixes)&#34;&gt;Common Issues (and fixes)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some firmware don&#39;t clear NVRAM variables (ReBarState) when the CMOS is cleared. This can be a problem as CMOS clear will reset BIOS settings (4G/CSM) while keeping ReBarState enabled requiring you to boot with iGPU/non-rebar GPU to disable ReBarState. To mitigate this issue see wiki page &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/Enabling-4G-Decode-and-CSM-Off-by-default&#34;&gt;Enabling 4G Decode and CSM Off by default&lt;/a&gt;. If it can be figured out how to detect boot failures then this won&#39;t be required&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AliExpress X99 Tutorial by Miyconst&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=vcJDWMpxpjEE&#34; title=&#34;Resizable BAR on LGA 2011-3 X99&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/vcJDWMpxpjE/0.jpg&#34; alt=&#34;Resizable BAR on LGA 2011-3 X99&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instructions for applying UEFIPatch not included as it isn&#39;t required for these X99 motherboards. You can follow them below.&lt;/p&gt; &#xA;&lt;h3&gt;UEFI Patching&lt;/h3&gt; &#xA;&lt;p&gt;Most UEFI firmwares have problems handling 64-bit BARs so several patches were created to fix these issues. You can use &lt;a href=&#34;https://github.com/LongSoft/UEFITool/releases/tag/0.28.0&#34;&gt;UEFIPatch&lt;/a&gt; to apply these patches located in the UEFIPatch folder. Some patches which may cause issues are commented and need to be manually uncommented. See wiki page &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/Using-UEFIPatch&#34;&gt;Using UEFIPatch&lt;/a&gt; for more information on using UEFIPatch. &lt;strong&gt;Make sure to check that pad files aren&#39;t changed and if they are use the workaround&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Working patches&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&amp;lt;4GB BAR size limit removal&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;16GB BAR size limit removal&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;64GB BAR size limit removal&lt;/li&gt; &#xA; &lt;li&gt;Prevent 64-bit BARs from being downgraded to 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Increase MMIO space to 64GB (Haswell/Broadwell). Full 512GB/39-bit isn&#39;t possible yet.&lt;/li&gt; &#xA; &lt;li&gt;Increase MMIO space from 16GB to full usage of 64GB/36-bit range (Sandy/Ivy Bridge). &lt;strong&gt;Requires DSDT modification on certain motherboards. See wiki page &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/DSDT-Patching&#34;&gt;DSDT Patching&lt;/a&gt; for more information.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Remove NVRAM whitelist to solve ReBarState &lt;code&gt;GetLastError: 5&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;Use the provided &lt;strong&gt;buildffs.py&lt;/strong&gt; script after cloning inside an &lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;edk2&lt;/a&gt; tree to build the DXE driver. ReBarState can be built on Windows or Linux using CMake. See wiki page &lt;a href=&#34;https://github.com/xCuri0/ReBarUEFI/wiki/Building&#34;&gt;Building&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;Why don&#39;t BAR sizes above x size work ?&lt;/h4&gt; &#xA;&lt;p&gt;If you can&#39;t use 4GB and larger sizes it means your BIOS doesn&#39;t support large BARs. If you can&#39;t use above 1GB then either 4G decoding is disabled or your BIOS isn&#39;t allocating your GPU in the 64-bit region. Patches exist to fix some of these issues.&lt;/p&gt; &#xA;&lt;h4&gt;Will less than optimal BAR sizes still give a performance increase ?&lt;/h4&gt; &#xA;&lt;p&gt;On my system with an i5 3470 and Sapphire Nitro+ RX 580 8GB with Nimez drivers/registry edit I get an upto 12% FPS increase with 2GB BAR size.&lt;/p&gt; &#xA;&lt;h4&gt;I set an unsupported BAR size and my system won&#39;t boot&lt;/h4&gt; &#xA;&lt;p&gt;CMOS reset should fix it but on some motherboards it doesn&#39;t which means you will have to either boot with iGPU only (or non rebar GPU) and disable in ReBarState or use BIOS flashback/recovery.&lt;/p&gt; &#xA;&lt;h4&gt;Does it work on PCIe Gen2 systems ?&lt;/h4&gt; &#xA;&lt;p&gt;Previously it was thought that it won&#39;t work on PCIe 2.0 systems but one user had it work with an i5 2500k.&lt;/p&gt; &#xA;&lt;h3&gt;Credit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dsanke&#34;&gt;@dsanke&lt;/a&gt;, &lt;a href=&#34;https://github.com/cursemex&#34;&gt;@cursemex&lt;/a&gt;, &lt;a href=&#34;https://github.com/@val3nt33n&#34;&gt;@val3nt33n&lt;/a&gt;, &lt;a href=&#34;https://github.com/Mak3rde&#34;&gt;@Mak3rde&lt;/a&gt; and &lt;a href=&#34;https://github.com/romulus2k4&#34;&gt;@romulus2k4&lt;/a&gt; for testing/helping develop patches&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux kernel especially the amdgpu driver&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;EDK2 for the base that all OEM UEFI follows making hooking easier&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QEMU/OVMF made testing hooking way easier although it doesn&#39;t have resizable BAR devices&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>FaceMe-SDK/FaceRecognition-ServerSDK</title>
    <updated>2023-02-04T01:31:27Z</updated>
    <id>tag:github.com,2023-02-04:/FaceMe-SDK/FaceRecognition-ServerSDK</id>
    <link href="https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NIST FRVT Top Ranked Face Recognition SDK&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;640&#34; src=&#34;https://user-images.githubusercontent.com/122285115/212581402-a095f46c-480b-45c9-98bc-23622d3a11e1.jpg&#34;&gt; &lt;/p&gt;&#xA;&lt;h4 align=&#34;center&#34;&gt;FaceMe® provides system integrators with fast, flexible and extremely precise facial recognition that can be deployed across a number of scenarios, including security, access control, public safety, fintech, smart retail and home protection.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;SDK is fully on-premise, processing all happens on hosting server and no data leaves server.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;./FaceLivenessDetection-ServerSDK&#xA;  ├─ bin/linux_x86_64                 - # Core library files&#xA;  │  ├─ openvino&#xA;  │  ├─ libfaceme_recog1.so&#xA;  │  └─ libimutils.so&#xA;  ├─ cpp                              - # C++ example&#xA;  │  ├─ CMakeLists.txt                - # CMake file for build example&#xA;  │  ├─ faceme_recog.h                - # C++ header file to include library&#xA;  │  └─ main.cpp                      - # C++ example code&#xA;  ├─ flask                            - # Python flask API serving example&#xA;  │  ├─ app.py                        - # Flask example code&#xA;  │  └─ requirements.txt              - # Python requirement list&#xA;  ├─ model                            - # NN dictionary files for library&#xA;  │  ├─ data1.bin&#xA;  │  ├─ data2.bin  &#xA;  │  └─ data3.bin&#xA;  ├─ python                           - # Python example&#xA;  │  ├─ faceme_recog.py               - # Python library Import Interface file&#xA;  │  ├─ main.py                       - # Python example code&#xA;  │  └─ requirements.txt              - # Python requirement list&#xA;  ├─ test_image                       - # Test Images&#xA;  └─ Dockerfile                       - # Docker script for python flask API serving example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Project&lt;/h2&gt; &#xA;&lt;h4&gt;- Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download repo and extract it&lt;/li&gt; &#xA; &lt;li&gt;Install system dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update -y&#xA;sudo apt-get install -y libcurl4-openssl-dev libssl-dev libopencv-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy libraries into system folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp -rf ./bin/linux_x86_64/openvino/* /usr/lib&#xA;cp ./bin/linux_x86_64/libimutils.so /usr/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;- Windows&lt;/h4&gt; &#xA;&lt;p&gt;Contact us by Email &lt;a href=&#34;mailto:support@faceme.tw&#34;&gt;support@faceme.tw&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;- Request license&lt;/h4&gt; &#xA;&lt;p&gt;Subscribe free trial at our &lt;a href=&#34;https://sdk.faceme.tw/#contact-us&#34;&gt;Subscription Page&lt;/a&gt;&lt;br&gt; You will get email with trial license key (&#34;XXXXX-XXXXX-XXXXX-XXXXX&#34;).&lt;/p&gt; &#xA;&lt;h2&gt;C++ Example&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace license key in main.cpp &lt;a href=&#34;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/raw/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/cpp/main.cpp#L1-L7&#34;&gt;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/blob/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/cpp/main.cpp#L1-L7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd cpp&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./example_recognition --image1 ../../test_image/Carlos_Menem_0018.jpg --image2 ../../test_image/Carlos_Menem_0020.jpg --model ../../model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python Example&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace license key in main.py &lt;a href=&#34;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/raw/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/python/main.py#L11-L17&#34;&gt;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/blob/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/python/main.py#L11-L17&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd python&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python Flask Example&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace license key in app.py &lt;a href=&#34;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/raw/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/flask/app.py#L20-L26&#34;&gt;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/blob/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/flask/app.py#L20-L26&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd flask&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;360&#34; src=&#34;https://user-images.githubusercontent.com/122285115/212585049-63740d35-e44b-46d4-b02b-fbe4a50fa0e2.png&#34;&gt;   &lt;img width=&#34;360&#34; src=&#34;https://user-images.githubusercontent.com/122285115/212585096-8361b446-a0ee-4726-b2f4-906994c17144.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Docker Flask Example&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace license key in app.py &lt;a href=&#34;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/raw/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/flask/app.py#L20-L26&#34;&gt;https://github.com/FaceMe-SDK/FaceRecognition-ServerSDK/blob/6d5152e7ab146f2cee25bde96f09b8a76f48f33c/flask/app.py#L20-L26&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build docker image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build --pull --rm -f &#34;Dockerfile&#34; -t facemerecognition:latest &#34;.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --network host facemerecognition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Request license&lt;/h2&gt; &#xA;&lt;p&gt;Subscribe free trial at our &lt;a href=&#34;https://sdk.faceme.tw/#contact-us&#34;&gt;Subscription Page&lt;/a&gt;&lt;br&gt; You will get email with trial license key (&#34;XXXXX-XXXXX-XXXXX-XXXXX&#34;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elzo-d/LakeSnes</title>
    <updated>2023-02-04T01:31:27Z</updated>
    <id>tag:github.com,2023-02-04:/elzo-d/LakeSnes</id>
    <link href="https://github.com/elzo-d/LakeSnes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A SNES emulator, in C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LakeSnes&lt;/h1&gt; &#xA;&lt;p&gt;A SNES emulator, in C&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is a SNES emulator, written in C, mostly as a followup on my &lt;a href=&#34;https://github.com/elzo-d/SnesJs&#34;&gt;earlier Javascript version&lt;/a&gt;. The main drive behind rewriting it in C was C&#39;s speed. The JS version could barely run at 20 FPS on my system, whereas this C version runs at full speed.&lt;/p&gt; &#xA;&lt;p&gt;The intent is for it to be formed as a library, which could then be used in other projects. (Maybe it could be compiled for the web with Emscripten as well, to replace the core from that JS emulator).&lt;/p&gt; &#xA;&lt;p&gt;Performance, although much better than my JS version, is still quite bad though, especially when compared to emulators like BSNES or SNES9X (it used around 80% of one core whereas SNES9X only used around 15%, on my old hardware).&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; are available (&lt;code&gt;xcode-select --install&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Download the SDL2 &lt;code&gt;.dmg&lt;/code&gt; via the releases on the &lt;a href=&#34;https://github.com/libsdl-org/SDL&#34;&gt;SDL Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Place the &lt;code&gt;SDL2.framework&lt;/code&gt; found in the disk image in a subdirectory called &lt;code&gt;sdl2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; are available (&lt;code&gt;sudo apt install build-essential&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Get SDL2-dev via the package manager (&lt;code&gt;sudo apt install libsdl2-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these build are dependend on SDL2 being installed / found in &lt;code&gt;./sdl2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Compiling on Windows will most likely require something like Cygwin/Mingw/Msys2, or WSL. This is left as an exercise for the reader (for now).&lt;/p&gt; &#xA;&lt;h2&gt;Usage and controls&lt;/h2&gt; &#xA;&lt;p&gt;The emulator can be run with &lt;code&gt;./lakesnes&lt;/code&gt; and takes an optional path to a ROM-file to open. ROM-files can also be dragged on the emulator window to open them. ZIP-files also work, the first file within with a &lt;code&gt;.smc&lt;/code&gt; or &lt;code&gt;.sfc&lt;/code&gt; will be loaded (zip support uses &lt;a href=&#34;https://github.com/kuba--/zip&#34;&gt;this&lt;/a&gt; zip-library, which uses Miniz, both under the Unlicence).&lt;/p&gt; &#xA;&lt;p&gt;Currently, only normal joypads are supported, and only controller 1 has controls set up.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Button&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Up&lt;/td&gt; &#xA;   &lt;td&gt;Up arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Down&lt;/td&gt; &#xA;   &lt;td&gt;Down arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;Left arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;Right arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Start&lt;/td&gt; &#xA;   &lt;td&gt;Enter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;   &lt;td&gt;Right shift&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additionally, the following command are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;Soft reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;   &lt;td&gt;Hard reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;Pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;O&lt;/td&gt; &#xA;   &lt;td&gt;Frame advance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T&lt;/td&gt; &#xA;   &lt;td&gt;Turbo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;Run one CPU cycle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;Run one SPC cycle*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;J&lt;/td&gt; &#xA;   &lt;td&gt;Dumps some data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*: Does not work yet.&lt;/p&gt; &#xA;&lt;p&gt;Alt+Enter can be used to toggle fullscreen mode.&lt;/p&gt; &#xA;&lt;p&gt;L will run one CPU cycle, and then logs the CPU state (opcode, registers, flags). K does not function yet, but is planned to do the same, but for the SPC.&lt;/p&gt; &#xA;&lt;p&gt;J currently dumps the 128K WRAM, 64K VRAM, 512B CGRAM, 544B OAM and 64K ARAM to a file called &lt;code&gt;dump.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Save states and battery saving are not supported yet, but are planned.&lt;/p&gt; &#xA;&lt;p&gt;Minimizing or hiding the window can cause high CPU usage as this can cause v-sync to stop working.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The emulator currently only supports regular LoROM and HiROM games (no co-processors and such). Battery saves are not retained yet. SPC files can also not be loaded yet.&lt;/p&gt; &#xA;&lt;p&gt;This emulator is definitely not fully accurate. The PPU renders per scanline, so mid-scanline effects are not supported. The DSP executes on a per-sample basis. The SPC is currently still opcode-based (although the SPC core itself is cycle-accurate). The CPU-side timing should be cycle-accurate now, but the exact timing of certain event is still somewhat off. Communication between the CPU and SPC is also not cycle-accurate.&lt;/p&gt; &#xA;&lt;p&gt;Quite a few TODO&#39;s are scattered throughout the code for things that are currently not quite fully emulated, mostly related to edge cases and some lesser-used PPU features.&lt;/p&gt; &#xA;&lt;p&gt;Some things that are not emulated at all are full emulation-mode for the 65816, and the test-register ($f0) for the SPC.&lt;/p&gt; &#xA;&lt;p&gt;Some games that I have tested seem to run without obvious issues, although some games do seem to glitch somewhat or freeze. &lt;code&gt;bugs.md&lt;/code&gt; contains a non-exhaustive list of games that have emulation-bugs.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license. See &#39;LICENSE.txt&#39; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The WDC datasheet for the W65C816S cpu.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;http://6502.org/tutorials/65c816opcodes.html&#34;&gt;65C816 opcodes tutorial&lt;/a&gt; from 6502.org.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;http://www.oxyron.de/html/opcodes816.html&#34;&gt;65816 opcode matrix&lt;/a&gt; from oxyron.de (the cycle timing and notes there aren&#39;t fully accurate, and the addressing modes IAL and IAX are swapped for JMP (opcodes $7C and $EC)).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://wiki.superfamicom.org&#34;&gt;SuperFamicon wiki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://snesdev.mesen.ca/wiki/index.php?title=Main_Page&#34;&gt;SnesDev Wiki&lt;/a&gt; by Sour (seems to be abadoned).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://snes.nesdev.org/wiki/Main_Page&#34;&gt;SnesDev Wiki&lt;/a&gt; at NesDev.&lt;/li&gt; &#xA; &lt;li&gt;Some quick peeks at Sour&#39;s &lt;a href=&#34;https://github.com/SourMesen/Mesen-S&#34;&gt;Mesen-S source&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some quick peeks at Byuu&#39;s &lt;a href=&#34;https://github.com/byuu/higan&#34;&gt;Higan source&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://problemkaputt.de/fullsnes.txt&#34;&gt;nocach fullsnes document&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some posts and resources in the &lt;a href=&#34;https://forums.nesdev.org/viewforum.php?f=12&#34;&gt;SnesDev section&lt;/a&gt; of the NesDev forums.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://en.wikibooks.org/wiki/Super_NES_Programming&#34;&gt;Super NES Programming pages&lt;/a&gt; in Wikibooks.&lt;/li&gt; &#xA; &lt;li&gt;Various roms (especially the CPU tests) by PeterLemon/krom found &lt;a href=&#34;https://github.com/PeterLemon/SNES&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The 65816 tests by TomHarte found &lt;a href=&#34;https://github.com/TomHarte/ProcessorTests&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The SPC700 tests by raddad772 found &lt;a href=&#34;https://github.com/raddad772/jsmoo/tree/main/misc/tests/GeneratedTests&#34;&gt;here&lt;/a&gt; (part of JSmoo, a JS-based set of emulators; tests also included in TomHarte&#39;s repo).&lt;/li&gt; &#xA; &lt;li&gt;Various SPC and DSP test by Blargg (from &lt;a href=&#34;https://forums.nesdev.org/viewtopic.php?f=12&amp;amp;t=10697&amp;amp;p=121027#p121027&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://forums.nesdev.org/viewtopic.php?f=12&amp;amp;t=18005&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The source for the BRR-tools from &lt;a href=&#34;https://www.smwcentral.net&#34;&gt;SMW central&lt;/a&gt;, found &lt;a href=&#34;https://github.com/jimbo1qaz/BRRtools/tree/32-bit-samples&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kuba--/zip&#34;&gt;This&lt;/a&gt; zip-library is used for zipped rom loading support.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>