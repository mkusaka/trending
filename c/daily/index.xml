<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:31:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mpc-hc/mpc-hc</title>
    <updated>2023-01-02T01:31:15Z</updated>
    <id>tag:github.com,2023-01-02:/mpc-hc/mpc-hc</id>
    <link href="https://github.com/mpc-hc/mpc-hc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MPC-HC&#39;s main repository. For support use our Trac: https://trac.mpc-hc.org/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Media Player Classic - Home Cinema&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpc-hc/mpc-hc&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/mpc-hc/mpc-hc.svg?label=version&#34; alt=&#34;GitHub Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/259&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/259.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Media Player Classic - Home Cinema (MPC-HC) is a free and open-source (OSS) video and audio player for Windows. MPC-HC is based on the original Guliverkli project and contains many additional features and bug fixes.&lt;/p&gt; &#xA;&lt;p&gt;We are in dire need of new developers of any kind. If you can code a little, or you can create logos for the player and images for the file associations, or you can create/maintain the main website, please join our IRC channel and talk to us. Any help is always appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Find some easy ticket on our Trac, fix the problem, send a &lt;a href=&#34;https://github.com/mpc-hc/mpc-hc/pulls&#34;&gt;pull request&lt;/a&gt;, or post the patch on &lt;a href=&#34;https://trac.mpc-hc.org/&#34;&gt;Trac&lt;/a&gt; or come on IRC and we&#39;ll review it for you. See &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We care about keeping an open project open and free for contributions wherever they may come from.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option to remove &lt;a href=&#34;https://en.wikipedia.org/wiki/Screen_tearing&#34;&gt;tearing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for modern Windows versions, including a 64-bit build&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Media_Foundation#Enhanced_Video_Renderer&#34;&gt;EVR/EVR CP&lt;/a&gt; (Enhanced Video Renderer)&lt;/li&gt; &#xA; &lt;li&gt;Supports most types of &lt;a href=&#34;https://en.wikipedia.org/wiki/Subtitle_%28captioning%29#Subtitle_formats&#34;&gt;subtitles&lt;/a&gt; including &lt;a href=&#34;https://en.wikipedia.org/wiki/Blu-ray_Disc&#34;&gt;BluRay&lt;/a&gt; .sup files&lt;/li&gt; &#xA; &lt;li&gt;Playback and recording of television programs, if a supported &lt;a href=&#34;https://en.wikipedia.org/wiki/TV_tuner_card&#34;&gt;TV tuner card&lt;/a&gt; is installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/On-screen_display&#34;&gt;OSD info (On Screen Display)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multi-Monitor support&lt;/li&gt; &#xA; &lt;li&gt;Various &lt;a href=&#34;https://en.wikipedia.org/wiki/Shader#Pixel_shaders&#34;&gt;pixel shaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Color_management&#34;&gt;Color management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;42 translations available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An SSE2-capable CPU&lt;/li&gt; &#xA; &lt;li&gt;Windows Vista, 7, 8, 8.1, 10 32-bit/64-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mpc-hc.org/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpc-hc&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trac.mpc-hc.org/&#34;&gt;Support Trac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC Channel: &lt;a href=&#34;https://webchat.freenode.net/?randomnick=1&amp;amp;channels=mpc-hc&amp;amp;prompt=1&amp;amp;uio=d4&#34;&gt;#mpc-hc&lt;/a&gt; / &lt;a href=&#34;https://webchat.freenode.net/?randomnick=1&amp;amp;channels=mpc-hc-dev&amp;amp;prompt=1&amp;amp;uio=d4&#34;&gt;#mpc-hc-dev&lt;/a&gt; at &lt;a href=&#34;https://freenode.net/&#34;&gt;Freenode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mpc-hc.org/donate/&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.transifex.com/mpc-hc/mpc-hc/&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the people involved in the development, see &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/docs/Authors.txt&#34;&gt;Authors.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MPC-HC&#39;s code is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/COPYING.txt&#34;&gt;GPL v3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Translations are done by various translators (see &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/docs/Authors.txt&#34;&gt;Authors.txt&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Third-party code&lt;/h2&gt; &#xA;&lt;p&gt;MPC-HC makes use of the following third-party code:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;Website&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bs2b&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://bs2b.sourceforge.net&#34;&gt;http://bs2b.sourceforge.net&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSizingControlBar&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.datamekanix.com/sizecbar/&#34;&gt;http://www.datamekanix.com/sizecbar/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LAV Filters&lt;/td&gt; &#xA;   &lt;td&gt;GPLv2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Nevcairiel/LAVFilters&#34;&gt;https://github.com/Nevcairiel/LAVFilters&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;libdivide&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://libdivide.com/&#34;&gt;http://libdivide.com/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Little CMS&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.littlecms.com/&#34;&gt;http://www.littlecms.com/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logitech SDK&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MediaInfoLib&lt;/td&gt; &#xA;   &lt;td&gt;Simplified BSD License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mediaarea.net/MediaInfo&#34;&gt;https://mediaarea.net/MediaInfo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MinHook&lt;/td&gt; &#xA;   &lt;td&gt;Simplified BSD License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/TsudaKageyu/minhook&#34;&gt;https://github.com/TsudaKageyu/minhook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MultiMon&lt;/td&gt; &#xA;   &lt;td&gt;CPOL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/3690/&#34;&gt;https://www.codeproject.com/Articles/3690/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NanoSVG&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/memononen/nanosvg&#34;&gt;https://github.com/memononen/nanosvg&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QuickTime SDK&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developer.apple.com/quicktime/&#34;&gt;https://developer.apple.com/quicktime/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RapidJSON&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/miloyip/rapidjson&#34;&gt;https://github.com/miloyip/rapidjson&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RARFileSource&lt;/td&gt; &#xA;   &lt;td&gt;GPLv2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.v12pwr.com/RARFileSource/&#34;&gt;http://www.v12pwr.com/RARFileSource/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RealMedia SDK&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ResizableLib&lt;/td&gt; &#xA;   &lt;td&gt;Artistic License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ppescher/resizablelib&#34;&gt;https://github.com/ppescher/resizablelib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sanear&lt;/td&gt; &#xA;   &lt;td&gt;LGPLv2.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alexmarsev/sanear&#34;&gt;https://github.com/alexmarsev/sanear&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Silk Icons&lt;/td&gt; &#xA;   &lt;td&gt;CC Attribution 2.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.famfamfam.com/lab/icons/silk/&#34;&gt;http://www.famfamfam.com/lab/icons/silk/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SoundTouch&lt;/td&gt; &#xA;   &lt;td&gt;LGPLv2.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.surina.net/soundtouch/&#34;&gt;http://www.surina.net/soundtouch/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;soxr&lt;/td&gt; &#xA;   &lt;td&gt;LGPLv2.1+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceforge.net/projects/soxr/&#34;&gt;https://sourceforge.net/projects/soxr/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tinyxml2&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.grinninglizard.com/tinyxml2/&#34;&gt;http://www.grinninglizard.com/tinyxml2/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TreePropSheet&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/3709/&#34;&gt;https://www.codeproject.com/Articles/3709/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UnRAR&lt;/td&gt; &#xA;   &lt;td&gt;freeware&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.rarlab.com/rar_add.htm&#34;&gt;http://www.rarlab.com/rar_add.htm&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VirtualDub&lt;/td&gt; &#xA;   &lt;td&gt;GPLv2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.virtualdub.org/&#34;&gt;http://www.virtualdub.org/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XmlRpc4Win&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/drtimcooper/XmlRpc4Win&#34;&gt;https://github.com/drtimcooper/XmlRpc4Win&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZenLib&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MediaArea/ZenLib&#34;&gt;https://github.com/MediaArea/ZenLib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zita-resampler&lt;/td&gt; &#xA;   &lt;td&gt;GPLv3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://kokkinizita.linuxaudio.org/linuxaudio/&#34;&gt;http://kokkinizita.linuxaudio.org/linuxaudio/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zlib&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://zlib.net/&#34;&gt;http://zlib.net/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>antirez/protoview</title>
    <updated>2023-01-02T01:31:15Z</updated>
    <id>tag:github.com,2023-01-02:/antirez/protoview</id>
    <link href="https://github.com/antirez/protoview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flipper Zero app to display known and unknown signals&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ProtoView is a digital signal detection and visualization tool for the &lt;a href=&#34;https://flipperzero.one/&#34;&gt;Flipper Zero&lt;/a&gt;. The Flipper is able to identify a great deal of RF protocols, however when the exact protocol is not implemented (and there are many proprietary ones, such as the ones of the car keys), the curious person is left wondering what the device is sending at all. Using ProtoView she or he can visualize the high and low pulses like in the example image below (showing a Volkswagen key in 2FSK):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/antirez/protoview/main/images/ProtoViewSignal.jpg&#34; alt=&#34;ProtoView screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is often enough to make an initial idea about the encoding used and if the selected modulation is correct.&lt;/p&gt; &#xA;&lt;p&gt;The secondary goal of ProtoView is to provide a somewhat-documented application for the Flipper (even if ProtoView is a pretty atypical application: doesn&#39;t make use of the standard widgets and other abstractions provded by the framework). Many apps dealing with the &lt;em&gt;subghz subsystem&lt;/em&gt; (the Flipper abstraction to work with the &lt;a href=&#34;https://www.ti.com/product/CC1101&#34;&gt;CC1101 chip&lt;/a&gt;) tend to be complicated and completely undocumented. This is unfortunately true for the firmware of the device itself. It&#39;s a shame because especially in the case of code that talks with hardware peripherals there are tons of assumptions and hard-gained lessons that can &lt;a href=&#34;http://antirez.com/news/124&#34;&gt;only be captured by comments and are in the code only implicitly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, the Flipper firmware source code is well written even if it lacks comments and documentation, so it is possible to make some ideas of how things work just grepping inside.&lt;/p&gt; &#xA;&lt;h1&gt;Detection algorithm&lt;/h1&gt; &#xA;&lt;p&gt;In order to show unknown signals, the application attempts to understand if the samples obtained by the Flipper API (a series of pulses that are high or low, and with different duration in microseconds) look like belonging to a legitimate signal, and aren&#39;t just noise.&lt;/p&gt; &#xA;&lt;p&gt;We can&#39;t make assumptions about the encoding and the data rate of the communication, so we use a simple but relatively effective algorithm. As we check the signal, we try to detect long parts of it that are composed of pulses roughly classifiable into a maximum of three different classes of lengths, plus or minus 10%. Most encodings are somewhat self-clocked, so they tend to have just two or three classes of pulse lengths.&lt;/p&gt; &#xA;&lt;p&gt;However often pulses of the same theoretical length have slightly different lenghts in the case of high and low level (RF on or off), so we classify them separately for robustness.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The application shows the longest coherent signal detected so far.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The OK button resets the current signal.&lt;/li&gt; &#xA; &lt;li&gt;The UP and DOWN buttons change the scale. Default is 100us per pixel.&lt;/li&gt; &#xA; &lt;li&gt;The LEFT and RIGHT buttons switch to settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under the detected sequence, you will see a small triangle marking a specific sample. This mark means that the sequence looked coherent up to that point, and starting from there it could be just noise.&lt;/p&gt; &#xA;&lt;p&gt;In the bottom-right corner the application displays an amount of time in microseconds. This is the average length of the shortest pulse length detected among the three classes. Usually the &lt;em&gt;data rate&lt;/em&gt; of the protocol is something like &lt;code&gt;1000000/this-number*2&lt;/code&gt;, but it depends on the encoding and could actually be &lt;code&gt;1000000/this-number*N&lt;/code&gt; with &lt;code&gt;N &amp;gt; 2&lt;/code&gt; (here 1000000 is the number of microseconds in one second, and N is the number of clock cycles needed to represent a bit).&lt;/p&gt; &#xA;&lt;p&gt;Things to investigate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many cheap remotes (gate openers, remotes, ...) are on the 433.92Mhz or nearby and use OOK modulation.&lt;/li&gt; &#xA; &lt;li&gt;Weather stations are often too in the 433.92Mhz OOK.&lt;/li&gt; &#xA; &lt;li&gt;For car keys, try 443.92 OOK650 and 868.35 Mhz in OOK or 2FSK.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing the app from source&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the Flipper Zero dev kit and build it:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/flipperZero/official/&#xA;cd ~/flipperZero/official/&#xA;git clone --recursive  https://github.com/flipperdevices/flipperzero-firmware.git  ./&#xA;./fbt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy this application folder in &lt;code&gt;official/application_user&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Connect your Flipper via USB.&lt;/li&gt; &#xA; &lt;li&gt;Build and install with: &lt;code&gt;./fbt launch_app APPSRC=protoview&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing the binary file (no build needed)&lt;/h1&gt; &#xA;&lt;p&gt;Drop the &lt;code&gt;protoview.fap&lt;/code&gt; file you can find in the &lt;code&gt;binaries&lt;/code&gt; folder into the following Flipper Zero location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/ext/apps/Tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ext&lt;/code&gt; part means that we are in the SD card. So if you don&#39;t want to use the Android (or other) application to upload the file, you can just take out the SD card, insert it in your computer, copy the fine into &lt;code&gt;apps/Tools&lt;/code&gt;, and that&#39;s it.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The code is released under the BSD license.&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This application is only provided as an educational tool. The author is not liable in case the application is used to reverse engineer protocols protected by IP or for any other illegal purpose.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SKGleba/henlo_jb</title>
    <updated>2023-01-02T01:31:15Z</updated>
    <id>tag:github.com,2023-01-02:/SKGleba/henlo_jb</id>
    <link href="https://github.com/SKGleba/henlo_jb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;henlo-based jailbreak for Playstation Vita/TV running firmware 3.65+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;henlo&lt;/h1&gt; &#xA;&lt;p&gt;webkit-based jailbreak for Playstation Vita/TV on firmware 3.65+&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30833773/209846346-8cc988e5-81b7-40be-9bb9-4f124794c498.jpg&#34; alt=&#34;WIN_20221228_17_38_59_Pro&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;p&gt;visit &lt;code&gt;deploy.psp2.dev&lt;/code&gt; using the Playstation Vita/TV web browser&lt;/p&gt; &#xA;&lt;h2&gt;this project is currently in the beta phase&lt;/h2&gt; &#xA;&lt;p&gt;focus: bootstrap stability and overall functionality&lt;/p&gt;</summary>
  </entry>
</feed>