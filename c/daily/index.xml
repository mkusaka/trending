<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-03T01:30:19Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rvaiya/keyd</title>
    <updated>2023-04-03T01:30:19Z</updated>
    <id>tag:github.com,2023-04-03:/rvaiya/keyd</id>
    <link href="https://github.com/rvaiya/keyd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A key remapping daemon for linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Impetus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/keyd/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/keyd.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux lacks a good key remapping solution. In order to achieve satisfactory results a medley of tools need to be employed (e.g xcape, xmodmap) with the end result often being tethered to a specified environment (X11). keyd attempts to solve this problem by providing a flexible system wide daemon which remaps keys using kernel level input primitives (evdev, uinput).&lt;/p&gt; &#xA;&lt;h1&gt;Note on v2&lt;/h1&gt; &#xA;&lt;p&gt;The config format has undergone several iterations since the first release. For those migrating their configs from v1 it is best to reread the man page.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/rvaiya/keyd/master/docs/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Speed (a hand tuned input loop written in C that takes &amp;lt;&amp;lt;1ms)&lt;/li&gt; &#xA; &lt;li&gt;Simplicity (a &lt;a href=&#34;https://raw.githubusercontent.com/rvaiya/keyd/master/#sample-config&#34;&gt;config format&lt;/a&gt; that is intuitive)&lt;/li&gt; &#xA; &lt;li&gt;Consistency (modifiers that &lt;a href=&#34;https://github.com/rvaiya/keyd/raw/6dc2d5c4ea76802fd192b143bdd53b1787fd6deb/docs/keyd.scdoc#L128&#34;&gt;play nicely with layers&lt;/a&gt; by default)&lt;/li&gt; &#xA; &lt;li&gt;Modularity (a UNIXy core extensible through the use of an &lt;a href=&#34;https://github.com/rvaiya/keyd/raw/90973686723522c2e44d8e90bb3508a6da625a20/docs/keyd.scdoc#L391&#34;&gt;IPC&lt;/a&gt; mechanism)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;keyd has several unique features many of which are traditionally only found in custom keyboard firmware like &lt;a href=&#34;https://github.com/qmk/qmk_firmware&#34;&gt;QMK&lt;/a&gt; as well as some which are unique to keyd.&lt;/p&gt; &#xA;&lt;p&gt;Some of the more interesting ones include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Layers (with support for &lt;a href=&#34;https://github.com/rvaiya/keyd/raw/6dc2d5c4ea76802fd192b143bdd53b1787fd6deb/docs/keyd.scdoc#L128&#34;&gt;hybrid modifiers&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Key overloading (different behaviour on tap/hold).&lt;/li&gt; &#xA; &lt;li&gt;Keyboard specific configuration.&lt;/li&gt; &#xA; &lt;li&gt;Instantaneous remapping (no more flashing :)).&lt;/li&gt; &#xA; &lt;li&gt;A client-server model that facilitates scripting and display server agnostic application remapping. (Currently ships with support for X, sway, and gnome).&lt;/li&gt; &#xA; &lt;li&gt;System wide config (works in a VT).&lt;/li&gt; &#xA; &lt;li&gt;First class support for modifier overloading.&lt;/li&gt; &#xA; &lt;li&gt;Unicode support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;keyd is for people who:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Would like to experiment with custom &lt;a href=&#34;https://beta.docs.qmk.fm/using-qmk/software-features/feature_layers&#34;&gt;layers&lt;/a&gt; (i.e custom shift keys) and oneshot modifiers.&lt;/li&gt; &#xA; &lt;li&gt;Want to have multiple keyboards with different layouts on the same machine.&lt;/li&gt; &#xA; &lt;li&gt;Want to be able to remap &lt;code&gt;C-1&lt;/code&gt; without breaking modifier semantics.&lt;/li&gt; &#xA; &lt;li&gt;Want a keyboard config format which is easy to grok.&lt;/li&gt; &#xA; &lt;li&gt;Like tiny daemons that adhere to the Unix philosophy.&lt;/li&gt; &#xA; &lt;li&gt;Want to put the control and escape keys where God intended.&lt;/li&gt; &#xA; &lt;li&gt;Wish to be able to switch to a VT to debug something without breaking their keymap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What keyd isn&#39;t:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A tool for programming individual key up/down events.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your favourite C compiler&lt;/li&gt; &#xA; &lt;li&gt;Linux kernel headers (already present on most systems)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optional&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python (for application specific remapping)&lt;/li&gt; &#xA; &lt;li&gt;python-xlib (only for X support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; master serves as the development branch, things may occasionally break between releases. Releases are &lt;a href=&#34;https://github.com/rvaiya/keyd/tags&#34;&gt;tagged&lt;/a&gt;, and should be considered stable.&lt;/p&gt; &#xA;&lt;h2&gt;From Source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/rvaiya/keyd&#xA;cd keyd&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;sudo systemctl enable keyd &amp;amp;&amp;amp; sudo systemctl start keyd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install and start keyd (e.g &lt;code&gt;sudo systemctl enable keyd&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put the following in &lt;code&gt;/etc/keyd/default.conf&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;[ids]&#xA;&#xA;*&#xA;&#xA;[main]&#xA;&#xA;# Maps capslock to escape when pressed and control when held.&#xA;capslock = overload(control, esc)&#xA;&#xA;# Remaps the escape key to capslock&#xA;esc = capslock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Key names can be obtained by using the &lt;code&gt;keyd monitor&lt;/code&gt; command. Note that while keyd is running, the output of this command will correspond to keyd&#39;s output. The original input events can be seen by first stopping keyd and then running the command. See the man page for more details.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;sudo keyd reload&lt;/code&gt; to reload the config set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See the man page (&lt;code&gt;man keyd&lt;/code&gt;) for a more comprehensive description.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Config errors will appear in the log output and can be accessed in the usual way using your system&#39;s service manager (e.g &lt;code&gt;sudo journalctl -eu keyd&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is possible to render your machine unusable with a bad config file. Should you find yourself in this position, the special key sequence &lt;code&gt;backspace+escape+enter&lt;/code&gt; should cause keyd to terminate.&lt;/p&gt; &#xA;&lt;p&gt;Some mice (e.g the Logitech MX Master) are capable of emitting keys and are consequently matched by the wildcard id. It may be necessary to explicitly blacklist these.&lt;/p&gt; &#xA;&lt;h2&gt;Application Specific Remapping (experimental)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add yourself to the keyd group:&lt;/p&gt; &lt;p&gt;&lt;code&gt;usermod -aG keyd &amp;lt;user&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Populate &lt;code&gt;~/.config/keyd/app.conf&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;E.G&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[alacritty]&#xA;&#xA;alt.] = macro(C-g n)&#xA;alt.[ = macro(C-g p)&#xA;&#xA;[chromium]&#xA;&#xA;alt.[ = C-S-tab&#xA;alt.] = macro(C-tab)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;keyd-application-mapper&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You will probably want to put &lt;code&gt;keyd-application-mapper -d&lt;/code&gt; somewhere in your display server initialization logic (e.g ~/.xinitrc) unless you are running Gnome.&lt;/p&gt; &#xA;&lt;p&gt;See the man page for more details.&lt;/p&gt; &#xA;&lt;h2&gt;SBC support&lt;/h2&gt; &#xA;&lt;p&gt;Experimental support for single board computers (SBCs) via usb-gadget has been added courtesy of Giorgi Chavchanidze.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rvaiya/keyd/master/src/vkbd/usb-gadget.md&#34;&gt;usb-gadget.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;Third party packages for the some distributions also exist. If you wish to add yours to the list please file a PR. These are kindly maintained by community members, no personal responsibility is taken for them.&lt;/p&gt; &#xA;&lt;h3&gt;Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=keyd&#34;&gt;keyd&lt;/a&gt; package maintained by &lt;a href=&#34;https://github.com/jirutka&#34;&gt;@jirutka&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/keyd-git/&#34;&gt;AUR&lt;/a&gt; package maintained by eNV25.&lt;/p&gt; &#xA;&lt;h1&gt;Sample Config&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;[ids]&#xA;&#xA;*&#xA;&#xA;[main]&#xA;&#xA;leftshift = oneshot(shift)&#xA;capslock = overload(symbols, esc)&#xA;&#xA;[symbols]&#xA;&#xA;d = ~&#xA;f = /&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Recommended config&lt;/h1&gt; &#xA;&lt;p&gt;Many users will probably not be interested in taking full advantage of keyd. For those who seek simple quality of life improvements I can recommend the following config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[ids]&#xA;&#xA;*&#xA;&#xA;[main]&#xA;&#xA;shift = oneshot(shift)&#xA;meta = oneshot(meta)&#xA;control = oneshot(control)&#xA;&#xA;leftalt = oneshot(alt)&#xA;rightalt = oneshot(altgr)&#xA;&#xA;capslock = overload(control, esc)&#xA;insert = S-insert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This overloads the capslock key to function as both escape (when tapped) and control (when held) and remaps all modifiers to &#39;oneshot&#39; keys. Thus to produce the letter A you can now simply tap shift and then a instead of having to hold it. Finally it remaps insert to S-insert (paste on X11).&lt;/p&gt; &#xA;&lt;h1&gt;FAQS&lt;/h1&gt; &#xA;&lt;h2&gt;What about xmodmap/setxkbmap/*?&lt;/h2&gt; &#xA;&lt;p&gt;xmodmap and friends are display server level tools with limited functionality. keyd is a system level solution which implements advanced features like layering and &lt;a href=&#34;https://docs.qmk.fm/#/one_shot_keys&#34;&gt;oneshot&lt;/a&gt; modifiers. While some X tools offer similar functionality I am not aware of anything that is as flexible as keyd.&lt;/p&gt; &#xA;&lt;h2&gt;What about &lt;a href=&#34;https://github.com/kmonad/kmonad&#34;&gt;kmonad&lt;/a&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;keyd was written several years ago to allow me to easily experiment with different layouts on my growing keyboard collection. At the time kmonad did not exist and custom keyboard firmware like &lt;a href=&#34;https://github.com/qmk/qmk_firmware&#34;&gt;QMK&lt;/a&gt; (which inspired keyd) was the only way to get comparable features. I became aware of kmonad after having published keyd. While kmonad is a fine project with similar goals, it takes a different approach and has a different design philosophy.&lt;/p&gt; &#xA;&lt;p&gt;Notably keyd was written entirely in C with performance and simplicitly in mind and will likely never be as configurable as kmonad (which is extensible in Haskell). Having said that, it supplies (in the author&#39;s opinion) the most valuable features in less than 2000 lines of C while providing a simple language agnostic config format.&lt;/p&gt; &#xA;&lt;h2&gt;Why doesn&#39;t keyd implement feature X?&lt;/h2&gt; &#xA;&lt;p&gt;If you feel something is missing or find a bug you are welcome to file an issue on github. keyd has a minimalist (but sane) design philosophy which intentionally omits certain features (e.g execing arbitrary executables as root). Things which already exist in custom keyboard firmware like QMK are good candidates for inclusion.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rvaiya/keyd/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;. IRC Channel: #keyd on oftc&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xpndable/DotUI</title>
    <updated>2023-04-03T01:30:19Z</updated>
    <id>tag:github.com,2023-04-03:/Xpndable/DotUI</id>
    <link href="https://github.com/Xpndable/DotUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MiniUI port for Miyoo Mini+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DotUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;DotUI is a port of the popular &lt;a href=&#34;https://github.com/shauninman/MiniUI&#34;&gt;MiniUI&lt;/a&gt; custom launcher and integrated in-game menu, compatible with the &lt;a href=&#34;https://www.aliexpress.com/item/1005005215387485.html&#34;&gt;Miyoo Mini Plus&lt;/a&gt; handheld emulator&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Xpndable/DotUI/main/github/main.png&#34; width=&#34;320&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Xpndable/DotUI/main/github/menu.png&#34; width=&#34;320&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Important Notice&lt;/h1&gt; &#xA;&lt;p&gt;All support for this port on the Mini Plus will be provided on this project by Xpndable. Please raise issues here, or discuss them on the &lt;a href=&#34;https://discord.gg/retro-game-handhelds-529983248114122762&#34;&gt;Retro Gaming Handhelds discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Project Information&lt;/h1&gt; &#xA;&lt;p&gt;Currently, this project is in open beta and feedback is welcomed. Any features related to WiFi capabilities of the Mini Plus will be considered once the port has had a full release.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>curl/urler</title>
    <updated>2023-04-03T01:30:19Z</updated>
    <id>tag:github.com,2023-04-03:/curl/urler</id>
    <link href="https://github.com/curl/urler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;trurl is a command line tool for URL parsing and manipulation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;trurl&lt;/h1&gt; &#xA;&lt;p&gt;command line tool for URL parsing and manipulation&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://curl.se/mail/archive-2023-03/0030.html&#34;&gt;original idea&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example command lines&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ trurl --url https://curl.se --set host=example.com&#xA;  https://example.com/&#xA;&#xA;  $ trurl --set host=example.com --set scheme=ftp&#xA;  ftp://example.com/&#xA;&#xA;  $ trurl --url https://curl.se/we/are.html --redirect here.html&#xA;  https://curl.se/we/here.html&#xA;&#xA;  $ trurl --url https://curl.se/we/../are.html --set port=8080&#xA;  https://curl.se:8080/are.html&#xA;&#xA;  $ trurl --url https://curl.se/we/are.html --get &#39;{path}&#39;&#xA;  /we/are.html&#xA;&#xA;  $ trurl --url https://curl.se/we/are.html --get &#39;{port}&#39;&#xA;  443&#xA;&#xA;  $ trurl https://example.com/hello.html --get &#39;{scheme} {port} {path}&#39;&#xA;  https 443 /hello.html&#xA;&#xA;  $ trurl --url https://curl.se/hello --append path=you&#xA;  https://curl.se/hello/you&#xA;&#xA;  $ trurl --url &#34;https://curl.se?name=hello&#34; --append query=search=string&#xA;  https://curl.se/?name=hello&amp;amp;search=string&#xA;&#xA;  $ trurl --url-file url-list.txt --get &#39;{host}&#39;&#xA;  [one host name per URL in the input file]&#xA;&#xA;  $ cat url-list.txt | trurl --url-file - --get &#39;{host}&#39;&#xA;  [one host name per URL in the input file]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;On Linux :&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s quite easy to compile the C source with GCC :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;cc  -W -Wall -pedantic -g   -c -o trurl.o trurl.c&#xA;cc   trurl.o  -lcurl -o trurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that development files of libcurl (e.g. &lt;code&gt;libcurl4-openssl-dev&lt;/code&gt; or &lt;code&gt;libcurl4-gnutls-dev&lt;/code&gt;) are needed for compilation. Requries libcurl version 7.62.0 or newer.&lt;/p&gt;</summary>
  </entry>
</feed>