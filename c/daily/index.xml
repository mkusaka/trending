<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-09T01:30:26Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>f0rb1dd3n/Reptile</title>
    <updated>2023-08-09T01:30:26Z</updated>
    <id>tag:github.com,2023-08-09:/f0rb1dd3n/Reptile</id>
    <link href="https://github.com/f0rb1dd3n/Reptile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LKM Linux rootkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reptile&lt;/h1&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://imgur.com/nqujOlz.png&#34;&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tested on&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debian 9&lt;/strong&gt;: 4.9.0-8-amd64&lt;br&gt; &lt;strong&gt;Debian 10&lt;/strong&gt;: 4.19.0-8-amd64&lt;br&gt; &lt;strong&gt;Ubuntu 18.04.1 LTS&lt;/strong&gt;: 4.15.0-38-generic&lt;br&gt; &lt;strong&gt;Kali Linux&lt;/strong&gt;: 4.18.0-kali2-amd64&lt;br&gt; &lt;strong&gt;Centos 6.10&lt;/strong&gt;: 2.6.32-754.6.3.el6.x86_64&lt;br&gt; &lt;strong&gt;Centos 7&lt;/strong&gt;: 3.10.0-862.3.2.el7.x86_64&lt;br&gt; &lt;strong&gt;Centos 8&lt;/strong&gt;: 4.18.0-147.5.1.el8_1.x86_64&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give root to unprivileged users&lt;/li&gt; &#xA; &lt;li&gt;Hide files and directories&lt;/li&gt; &#xA; &lt;li&gt;Hide processes&lt;/li&gt; &#xA; &lt;li&gt;Hide himself&lt;/li&gt; &#xA; &lt;li&gt;Hide TCP/UDP connections&lt;/li&gt; &#xA; &lt;li&gt;Hidden boot persistence&lt;/li&gt; &#xA; &lt;li&gt;File content tampering&lt;/li&gt; &#xA; &lt;li&gt;Some obfuscation techniques&lt;/li&gt; &#xA; &lt;li&gt;ICMP/UDP/TCP port-knocking backdoor&lt;/li&gt; &#xA; &lt;li&gt;Full TTY/PTY shell with file transfer&lt;/li&gt; &#xA; &lt;li&gt;Client to handle Reptile Shell&lt;/li&gt; &#xA; &lt;li&gt;Shell connect back each X times (not default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install build-essential libncurses-dev linux-headers-$(uname -r)&#xA;git clone https://github.com/f0rb1dd3n/Reptile.git&#xA;cd Reptile&#xA;make menuconfig           # or &#39;make config&#39; or even &#39;make defconfig&#39;&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details about the installation see &lt;a href=&#34;https://github.com/f0rb1dd3n/Reptile/wiki/Install&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;When you got a sucessfully installation, the way to remove that will be shown in the screen&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/f0rb1dd3n/Reptile/wiki/Usage&#34;&gt;Wiki&lt;/a&gt; to usage details. So, read the fucking manual before opening an issue!&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;Some functions of this module is based on another rootkits. Please see the references!&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;“&lt;a href=&#34;http://www.ouah.org/LKM_HACKING.html&#34;&gt;LKM HACKING&lt;/a&gt;”, The Hackers Choice (THC), 1999;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mncoppola/suterusu&#34;&gt;https://github.com/mncoppola/suterusu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/David-Reguera-Garcia-Dreg/enyelkm.git&#34;&gt;https://github.com/David-Reguera-Garcia-Dreg/enyelkm.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/creaktive/tsh&#34;&gt;https://github.com/creaktive/tsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brenns10/lsh&#34;&gt;https://github.com/brenns10/lsh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to my friend &lt;a href=&#34;https://github.com/milabs&#34;&gt;Ilya V. Matveychikov&lt;/a&gt; for the &lt;a href=&#34;https://github.com/milabs/khook&#34;&gt;KHOOK&lt;/a&gt; framework and &lt;a href=&#34;https://github.com/milabs/kmatryoshka&#34;&gt;kmatryoshka&lt;/a&gt; loader.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;If you wanna more information, send me an e-mail: &lt;a href=&#34;mailto:f0rb1dd3n@tuta.io&#34;&gt;f0rb1dd3n@tuta.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://2.bp.blogspot.com/-OMozG1JNxic/VQxKMfiU2EI/AAAAAAAAOQM/_suBsIa9O7c/s1600/Reptile%2B6.gif&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lucavallin/barco</title>
    <updated>2023-08-09T01:30:26Z</updated>
    <id>tag:github.com,2023-08-09:/lucavallin/barco</id>
    <link href="https://github.com/lucavallin/barco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux containers from scratch in C.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/lucavallin/barco/raw/main/docs/barco.png&#34; style=&#34;width:40px;padding-right:10px;margin-bottom:-8px;&#34;&gt; barco&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; is a project I worked on to learn more about Linux containers and the Linux kernel, based on other guides on the internet. Linux containers are made up by a set of Linux kernel features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;namespaces&lt;/code&gt;: are used to group kernel objects into different sets that can be accessed by specific process trees. There are different types of &lt;code&gt;namespaces&lt;/code&gt;, for example,the &lt;code&gt;PID&lt;/code&gt; namespace is used to isolate the process tree, while the &lt;code&gt;network&lt;/code&gt; namespace is used to isolate the network stack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;seccomp&lt;/code&gt;: is used to limit the system calls that a process can make (handled via syscalls)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;capabilities&lt;/code&gt;: are used to set limits on what uid 0 (root) can do (handled via syscalls)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cgroups&lt;/code&gt;: are used to limit the resources (e.g. memory, disk I/O, CPU-tme) that a process can use (handled via cgroupfs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; can be used to run &lt;code&gt;bin/sh . &lt;/code&gt; from the &lt;code&gt;/&lt;/code&gt; directory as &lt;code&gt;root&lt;/code&gt; (-u 0) with the following command (optional &lt;code&gt;-v&lt;/code&gt; for verbose output):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ./bin/barco -u 0 -m / -c /bin/sh -a . [-v]&#xA;&#xA;22:08:41 INFO  ./src/barco.c:96: initializing socket pair...&#xA;22:08:41 INFO  ./src/barco.c:103: setting socket flags...&#xA;22:08:41 INFO  ./src/barco.c:112: initializing container stack...&#xA;22:08:41 INFO  ./src/barco.c:120: initializing container...&#xA;22:08:41 INFO  ./src/barco.c:131: initializing cgroups...&#xA;22:08:41 INFO  ./src/cgroups.c:73: setting memory.max to 1G...&#xA;22:08:41 INFO  ./src/cgroups.c:73: setting cpu.weight to 256...&#xA;22:08:41 INFO  ./src/cgroups.c:73: setting pids.max to 64...&#xA;22:08:41 INFO  ./src/cgroups.c:73: setting cgroup.procs to 1458...&#xA;22:08:41 INFO  ./src/barco.c:139: configuring user namespace...&#xA;22:08:41 INFO  ./src/barco.c:147: waiting for container to exit...&#xA;22:08:41 INFO  ./src/container.c:43: ### BARCONTAINER STARTING - type &#39;exit&#39; to quit ###&#xA;&#xA;# ls&#xA;bin         home                lib32       media       root        sys         vmlinuz&#xA;boot        initrd.img          lib64       mnt         run         tmp         vmlinuz.old&#xA;dev         initrd.img.old      libx32      opt         sbin        usr&#xA;etc         lib                 lost+found  proc        srv         var&#xA;# echo &#34;i am a container&#34;&#xA;i am a container&#xA;# exit&#xA;&#xA;22:08:55 INFO  ./src/barco.c:153: freeing resources...&#xA;22:08:55 INFO  ./src/barco.c:168: so long and thanks for all the fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; requires a number of tools and libraries to be installed to build the project and for development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install all required tooling and dependencies&#xA;$ sudo apt install -y make&#xA;$ make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; depends on the following &#34;non-standard&#34; libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libseccomp&lt;/code&gt;: used to set up seccomp filters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libcap&lt;/code&gt;: used to set container capabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libbsd&lt;/code&gt;: used for &lt;code&gt;strlcpy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libcuni1&lt;/code&gt;: used for testing with CUnit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://argtable.org/&#34;&gt;argtable&lt;/a&gt;: used to parse command line arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rxi/log.c&#34;&gt;rxi/log.c&lt;/a&gt;: used for logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; uses a number of LLVM-18-based tools for development, linting, formatting, debugging and Valgrind to check for memory leaks.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;The included &lt;code&gt;Makefile&lt;/code&gt; provides a few targets to build &lt;code&gt;barco&lt;/code&gt;. The variable &lt;code&gt;debug=1&lt;/code&gt; can be set to run any of the targets in &#34;debug&#34; mode, which builds the project with debug symbols and without optimizations (especially useful for the debugger and valgrind).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build barco (executable is in bin/)&#xA;# The default target also runs, &#34;make lint&#34; and &#34;make format&#34; to lint and format the code&#xA;$ make&#xA;&#xA;&#xA;# Build barco with debug flags&#xA;$ make debug=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; is developed using &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&#34;https://github.com/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;. The repository contains all the necessary configuration files to use these tools effectively. &lt;code&gt;barco&lt;/code&gt; relies on low-level Linux features, so it must be run on a Linux system. &lt;a href=&#34;https://github.com/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt; acts weird at times when tweaking low-level container settings: I found &lt;a href=&#34;https://getutm.app&#34;&gt;getutm.app&lt;/a&gt; to work well with &lt;a href=&#34;http://debian.org&#34;&gt;Debian&lt;/a&gt; on my Mac when in doubt.&lt;/p&gt; &#xA;&lt;p&gt;The included &lt;code&gt;Makefile&lt;/code&gt; provides a few targets useful for development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run tests&#xA;$ make test&#xA;&#xA;# Run linter&#xA;$ make lint&#xA;&#xA;# Run formatter&#xA;$ make format&#xA;&#xA;# Run valgrind&#xA;$ make check&#xA;&#xA;# Clean the build&#xA;$ make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore, the project includes a &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; configuration in &lt;code&gt;.vscode/&lt;/code&gt; that can be used to run the built-in debugger (at this moment it is &#34;disabled&#34; since &lt;code&gt;barco&lt;/code&gt; should be run as &lt;code&gt;root&lt;/code&gt; and &lt;a href=&#34;https://github.com/vadimcn/codelldb&#34;&gt;CodeLLDB&lt;/a&gt; does not have that option).&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;The project is structured as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;├── .devcontainer       configuration for GitHub Codespaces&#xA;├── .github             configuration GitHub Actions and other GitHub features&#xA;├── .vscode             configuration for Visual Studio Code&#xA;├── bin                 the executable (created by make)&#xA;├── build               intermediate build files e.g. *.o (created by make)&#xA;├── docs                documentation&#xA;├── include             header files&#xA;├── lib                 third-party libraries&#xA;├── scripts             scripts for setup and other tasks&#xA;├── src                 C source files&#xA;│   ├── barco.c         (main)&#xA;│   └── *.c&#xA;├── tests               contains tests&#xA;├── .clang-format       configuration for clang-format&#xA;├── .cang-tidy          configuration for clang-tidy&#xA;├── .gitignore&#xA;├── .clang.cfg          configuration for the compiler&#xA;├── LICENSE&#xA;├── Makefile&#xA;└── README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing and documentation&lt;/h2&gt; &#xA;&lt;p&gt;At the moment, the project does not contain any automated tests or tools to document the code. In the future, suitable tools for automated testing and documentation might be added.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; assumes that the host system is running a Linux kernel at version 6.0.x or higher and with user namespaces and cgroupsv2 enabled. The project has been tested on Debian 12.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;barco&lt;/code&gt; does not handle network namespaces, so the container cannot access the network. Networking can roughly be setup as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create a new network namespace&lt;/li&gt; &#xA; &lt;li&gt;create a virtual ethernet pair&lt;/li&gt; &#xA; &lt;li&gt;move one end of the pair to the new network namespace&lt;/li&gt; &#xA; &lt;li&gt;assign an IP address to the interface in the new network namespace&lt;/li&gt; &#xA; &lt;li&gt;setup routing and NAT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In C this is usually done via the &lt;code&gt;rtnetlink&lt;/code&gt; interface. Furthermore, network usage can be limited with the &lt;code&gt;net_prio&lt;/code&gt; cgroup controller.&lt;/p&gt; &#xA;&lt;h2&gt;Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Investigate further, document and refactor: user and mount and cgroup namespaces, syscalls and capabilities&lt;/li&gt; &#xA; &lt;li&gt;The functions in &lt;code&gt;cgroups.c&lt;/code&gt;, &lt;code&gt;mount.c&lt;/code&gt;, &lt;code&gt;sec.c&lt;/code&gt;, &lt;code&gt;userns.c&lt;/code&gt; are specific to &lt;code&gt;barco&lt;/code&gt; and should be made more generic&lt;/li&gt; &#xA; &lt;li&gt;CMake and Conan are industry standards, so they should be used eventually instead of Make and the current build system. Unfortunately, CMake and Conan also add a lot of complexity which is not needed at this time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Some of the resources that have been used to develop &lt;code&gt;barco&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/index.html&#34;&gt;Linux kernel documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/user_namespaces.7.html&#34;&gt;user_namespaces docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/cgroup_namespaces.7.html&#34;&gt;cgroup_namespaces docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/mount_namespaces.7.html&#34;&gt;mount_namespaces docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.lizzie.io/linux-containers-in-500-loc.html#fn.6&#34;&gt;Linux containers in 500 lines of code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/inside-sumup/containers-from-scratch-part-1-b719effd1e0a&#34;&gt;Containers from scratch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/nttlabs/cgroup-v2-596d035be4d7&#34;&gt;The current adoption status of cgroup v2 in containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/devops-dudes/docker-under-the-hood-0-naming-components-and-runtime-9a89cfbbe783&#34;&gt;Docker under the Hood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ifeanyi.co/posts/linux-namespaces-part-1/&#34;&gt;A deep dive into Linux namespaces&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Why C?&lt;/strong&gt; I haven&#39;t written much C since college and nostalgia got me.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What does &#34;barco&#34; mean?&lt;/strong&gt; It&#39;s &lt;a href=&#34;https://vec.wikipedia.org/wiki/Barco&#34;&gt;Venetian&lt;/a&gt; (my native language) for &#34;hay barrack&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nice logo, did you design it yourself?&lt;/strong&gt; Kind of, I asked Midjourney to come up with some designs.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>amnezia-vpn/amnezia-client</title>
    <updated>2023-08-09T01:30:26Z</updated>
    <id>tag:github.com,2023-08-09:/amnezia-vpn/amnezia-client</id>
    <link href="https://github.com/amnezia-vpn/amnezia-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Amnezia VPN Client (Desktop+Mobile)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amnezia VPN&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;em&gt;The best client for self-hosted VPN&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/actions/workflows/deploy.yml?query=branch:dev&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/actions/workflows/deploy.yml/badge.svg?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/amnezia-vpn/amnezia-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Amnezia is an open-source VPN client, with a key feature that enables you to deploy your own VPN server on your server.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very easy to use - enter your ip address, ssh login and password, and Amnezia will automatically install VPN docker containers to your server and connect to VPN.&lt;/li&gt; &#xA; &lt;li&gt;OpenVPN, ShadowSocks, WireGuard, IKEv2 protocols support.&lt;/li&gt; &#xA; &lt;li&gt;Masking VPN with OpenVPN over Cloak plugin&lt;/li&gt; &#xA; &lt;li&gt;Split tunneling support - add any sites to client to enable VPN only for them (only for desktops)&lt;/li&gt; &#xA; &lt;li&gt;Windows, MacOS, Linux, Android, iOS releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://amnezia.org&#34;&gt;https://amnezia.org&lt;/a&gt; - project website&lt;br&gt; &lt;a href=&#34;https://www.reddit.com/r/AmneziaVPN&#34;&gt;https://www.reddit.com/r/AmneziaVPN&lt;/a&gt; - Reddit&lt;br&gt; &lt;a href=&#34;https://t.me/amnezia_vpn_en&#34;&gt;https://t.me/amnezia_vpn_en&lt;/a&gt; - Telegram support channel (English)&lt;br&gt; &lt;a href=&#34;https://t.me/amnezia_vpn&#34;&gt;https://t.me/amnezia_vpn&lt;/a&gt; - Telegram support channel (Russian)&lt;br&gt; &lt;a href=&#34;https://signal.group/#CjQKIB2gUf8QH_IXnOJMGQWMDjYz9cNfmRQipGWLFiIgc4MwEhAKBONrSiWHvoUFbbD0xwdh&#34;&gt;https://signal.group/...&lt;/a&gt; - Signal channel&lt;/p&gt; &#xA;&lt;h2&gt;Tech&lt;/h2&gt; &#xA;&lt;p&gt;AmneziaVPN uses a number of open source projects to work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openvpn.net/&#34;&gt;OpenVPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shadowsocks.org/&#34;&gt;ShadowSocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libssh.org&#34;&gt;LibSsh&lt;/a&gt; - forked form Qt Creator&lt;/li&gt; &#xA; &lt;li&gt;and more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Checking out the source code&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to pull all submodules after checking out the repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Building sources and deployment&lt;/h3&gt; &#xA;&lt;p&gt;Look deploy folder for build scripts.&lt;/p&gt; &#xA;&lt;h3&gt;How to build iOS app from source code on MacOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, make sure you have &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;XCode&lt;/a&gt; installed, at least version 14 or higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We use QT to generate the XCode project. we need QT version 6.4. Install QT for macos in &lt;a href=&#34;https://doc.qt.io/qt-6/macos.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install cmake is require. We recommend cmake version 3.25. You can install cmake in &lt;a href=&#34;https://cmake.org/download/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You also need to install go &amp;gt;= v1.16. If you don&#39;t have it done already, download go from the &lt;a href=&#34;https://golang.org/dl/&#34;&gt;official website&lt;/a&gt; or use Homebrew. Latest version is recommended. Install gomobile&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:~/go/bin&#xA;go install golang.org/x/mobile/cmd/gomobile@latest&#xA;gomobile init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Build project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export QT_BIN_DIR=&#34;&amp;lt;PATH-TO-QT-FOLDER&amp;gt;/Qt/&amp;lt;QT-VERSION&amp;gt;/ios/bin&#34;&#xA;export QT_IOS_BIN=$QT_BIN_DIR&#xA;export PATH=$PATH:~/go/bin&#xA;mkdir build-ios&#xA;$QT_IOS_BIN/qt-cmake . -B build-ios -GXcode -DQT_HOST_PATH=$QT_BIN_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace PATH-TO-QT-FOLDER and QT-VERSION to your environment&lt;/p&gt; &#xA;&lt;p&gt;If you get &lt;code&gt;gomobile: command not found&lt;/code&gt; make sure to set PATH to the location of the bin folder where gomobile was installed. Usually, it&#39;s in &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$(PATH):/path/to/GOPATH/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Open XCode project. You can then run/test/archive/ship the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If build fails with the following error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make: *** &#xA;[$(PROJECTDIR)/client/build/AmneziaVPN.build/Debug-iphoneos/wireguard-go-bridge/goroot/.prepared] &#xA;Error 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a user defined variable to both AmneziaVPN and WireGuardNetworkExtension targets&#39; build settings with key &lt;code&gt;PATH&lt;/code&gt; and value &lt;code&gt;${PATH}/path/to/bin/folder/with/go/executable&lt;/code&gt;, e.g. &lt;code&gt;${PATH}:/usr/local/go/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;if above error still persists on you M1 Mac, then most probably you need to install arch based cmake&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;arch -arm64 brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build might fail with &#34;source files not found&#34; error the first time you try it, because modern XCode build system compiles dependencies in parallel, and some dependencies end up being built after the ones that require them. In this case simply restart the build.&lt;/p&gt; &#xA;&lt;h2&gt;How to build the Android app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;tested on Mac OS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Android app has the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11&lt;/li&gt; &#xA; &lt;li&gt;Android platform SDK 33&lt;/li&gt; &#xA; &lt;li&gt;cmake 3.25.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After you have installed QT, QT Creator and Android Studio installed, you need to configure QT Creator correctly. Click in the top menu bar on &lt;code&gt;QT Creator&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Devices&lt;/code&gt; and select the tab &lt;code&gt;Android&lt;/code&gt;. * set path to jdk 11 * set path to Android SDK ($ANDROID_HOME)&lt;/p&gt; &#xA;&lt;p&gt;In case you get errors regarding missing SDK or &#39;sdkmanager not running&#39;, you cannot fix them by correcting the paths and you have some spare GBs on your disk, you can let QT Creator install all requirements by choosing an empty folder for &lt;code&gt;Android SDK location&lt;/code&gt; and click on &lt;code&gt;Set Up SDK&lt;/code&gt;. Be aware: This will install a second Android SDK and NDK on your machine!&lt;/p&gt; &#xA;&lt;p&gt;Double check that the right cmake version is configured: Click on &lt;code&gt;QT Creator&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; and click on the side menu on &lt;code&gt;Kits&lt;/code&gt;. Under the center content view&#39;s &lt;code&gt;Kits&lt;/code&gt; tab you&#39;ll find an entry &lt;code&gt;CMake Tool&lt;/code&gt;. If the default selected CMake version is lower than 3.25.0, install on your system CMake &amp;gt;= 3.25.0 and choose &lt;code&gt;System CMake at &amp;lt;path&amp;gt;&lt;/code&gt; from the drop down list. If this entry is missing, you either have not installed CMake yet or QT Creator hasn&#39;t found the path to it. In that case click in the preferences window on the side menu item &lt;code&gt;CMake&lt;/code&gt;, then on the tab &lt;code&gt;Tools&lt;/code&gt;in the center content view and finally on the Button &lt;code&gt;Add&lt;/code&gt; to set the path to your installed CMake.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure that you have selected Android Platform SDK 33 for your project: click in the main view&#39;s side menu on on &lt;code&gt;Projects&lt;/code&gt;, on the left you&#39;ll see a section &lt;code&gt;Build &amp;amp; Run&lt;/code&gt; showing different Android build targets. You can select any of them, Amnezia VPN&#39;s project setup is designed in a way that always all Android targets will be build. Click on the targets submenu item &lt;code&gt;Build&lt;/code&gt; and scroll in the center content view to &lt;code&gt;Build Steps&lt;/code&gt;. Click on &lt;code&gt;Details&lt;/code&gt; at the end of the headline &lt;code&gt;Build Android APK&lt;/code&gt; (The &lt;code&gt;Details&lt;/code&gt; button might be hidden in case QT Creator Window is not running in full screen!). Here we are: choose &lt;code&gt;android-33&lt;/code&gt; as &lt;code&gt;Android Build platform SDK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it you should be ready to compile the project from QT Creator!&lt;/p&gt; &#xA;&lt;h3&gt;Development flow&lt;/h3&gt; &#xA;&lt;p&gt;After you&#39;ve hit the build button, QT-Creator copies the whole project to a folder in the repositories parent directory. The folder should look something like &lt;code&gt;build-amnezia-client-Android_Qt_&amp;lt;version&amp;gt;_Clang_&amp;lt;architecture&amp;gt;-&amp;lt;BuildType&amp;gt;&lt;/code&gt;. If you want to develop Amnezia VPNs Android components written in Kotlin, such as components using system APIs, you need to import the generated project in Android Studio with &lt;code&gt;build-amnezia-client-Android_Qt_&amp;lt;version&amp;gt;_Clang_&amp;lt;architecture&amp;gt;-&amp;lt;BuildType&amp;gt;/client/android-build&lt;/code&gt; as the projects root directory. While you should be able to compile the generated project from Android Studio, you cannot work directly in the repository&#39;s Android project. So whenever you are confident with your work in the generated project, you&#39;ll need to copy and paste the affected files to the corresponding path in the repositories Android project so that you can add and commit your changes!&lt;/p&gt; &#xA;&lt;p&gt;You may face compiling issues in QT Creator after you&#39;ve worked in Android Studio on the generated project. Just do a &lt;code&gt;./gradlew clean&lt;/code&gt; in the generated project&#39;s root directory (&lt;code&gt;&amp;lt;path&amp;gt;/client/android-build/.&lt;/code&gt;) and you should be good to continue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPL v.3&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Bitcoin: bc1qn9rhsffuxwnhcuuu4qzrwp4upkrq94xnh8r26u&lt;br&gt; XMR: 48spms39jt1L2L5vyw2RQW6CXD6odUd4jFu19GZcDyKKQV9U88wsJVjSbL4CfRys37jVMdoaWVPSvezCQPhHXUW5UKLqUp3&lt;br&gt; payeer.com: P2561305&lt;br&gt; ko-fi.com: &lt;a href=&#34;https://ko-fi.com/amnezia_vpn&#34;&gt;https://ko-fi.com/amnezia_vpn&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>