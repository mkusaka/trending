<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:33:48Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>immortalwrt/immortalwrt</title>
    <updated>2022-08-28T01:33:48Z</updated>
    <id>tag:github.com,2022-08-28:/immortalwrt/immortalwrt</id>
    <link href="https://github.com/immortalwrt/immortalwrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opensource OpenWrt variant for mainland China users.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/53193414?s=200&amp;amp;v=4&#34; alt=&#34;logo&#34; width=&#34;200&#34; height=&#34;200&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Project ImmortalWrt&lt;/h1&gt; &#xA;&lt;p&gt;ImmortalWrt is a fork of &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWrt&lt;/a&gt;, with more packages ported, more devices supported, better performance, and special optimizations for mainland China users.&lt;br&gt; Compared the official one, we allow to use hacks or non-upstreamable patches / modifications to achieve our purpose. Source from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Default login address: &lt;a href=&#34;http://192.168.1.1&#34;&gt;http://192.168.1.1&lt;/a&gt; or &lt;a href=&#34;http://immortalwrt.lan&#34;&gt;http://immortalwrt.lan&lt;/a&gt;, username: &lt;strong&gt;root&lt;/strong&gt;, password: &lt;strong&gt;password&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;To build with this project, Ubuntu 18.04 LTS is preferred. And you need use the CPU based on AMD64 architecture, with at least 4GB RAM and 25 GB available disk space. Make sure the &lt;strong&gt;Internet&lt;/strong&gt; is accessible.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are needed to compile ImmortalWrt, the package names vary between distributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Here is an example for Ubuntu users:&lt;br&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 1:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Setup dependencies via APT&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;  bzip2 ccache cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib \&#xA;  git gperf haveged help2man intltool lib32gcc1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \&#xA;  libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \&#xA;  mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \&#xA;  python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \&#xA;  vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh | sudo bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also download and use prebuilt container directly:&lt;br&gt; See #Quickstart - Build image via OPDE&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the for love of god please do &lt;strong&gt;not&lt;/strong&gt; use ROOT user to build your image.&lt;/li&gt; &#xA; &lt;li&gt;Using CPUs based on other architectures should be fine to compile ImmortalWrt, but more hacks are needed - No warranty at all.&lt;/li&gt; &#xA; &lt;li&gt;You must &lt;strong&gt;not&lt;/strong&gt; have spaces in PATH or in the work folders on the drive.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Windows Subsystem for Linux (or WSL), removing Windows folders from PATH is required, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/wsl&#34;&gt;Build system setup WSL&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;Using macOS as the host build OS is &lt;strong&gt;not&lt;/strong&gt; recommended. No warranty at all. You can get tips from &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/buildroot.exigence.macosx&#34;&gt;Build system setup macOS&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;For more details, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build system setup&lt;/a&gt; documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Method 1:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;git clone -b &amp;lt;branch&amp;gt; --single-branch https://github.com/immortalwrt/immortalwrt&lt;/code&gt; to clone the source code.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;cd immortalwrt&lt;/code&gt; to enter source directory.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Method 2:&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Build image via OPDE&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Pull the prebuilt container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull immortalwrt/opde:base&#xA;# docker run --rm -it immortalwrt/opde:base&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;For Linux User:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b &amp;lt;branch&amp;gt; --single-branch https://github.com/immortalwrt/immortalwrt &amp;amp;&amp;amp; cd immortalwrt&#xA;docker run --rm -it \&#xA;    -v $PWD:/openwrt \&#xA;  immortalwrt/opde:base zsh&#xA;./scripts/feeds update -a &amp;amp;&amp;amp; ./scripts/feeds install -a&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;For Windows User:&lt;/p&gt; &#xA;     &lt;ol&gt; &#xA;      &lt;li&gt;Create a volume &#39;immortalwrt&#39; and clone ImmortalWrt source into volume.&lt;/li&gt; &#xA;     &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v immortalwrt:/openwrt immortalwrt/opde:base git clone -b &amp;lt;branch&amp;gt; --single-branch https://github.com/immortalwrt/immortalwrt .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;ol start=&#34;2&#34;&gt; &#xA;      &lt;li&gt;Enter docker container and update feeds.&lt;/li&gt; &#xA;     &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v immortalwrt:/openwrt immortalwrt/opde:base&#xA;./scripts/feeds update -a &amp;amp;&amp;amp; ./scripts/feeds install -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Tips: ImmortalWrt source code can not be cloned into NTFS filesystem (symbol link problem during compilation), but docker volume is fine.&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Proxy Support:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it \&#xA;  -e   all_proxy=http://example.com:1081 \&#xA;  -e  http_proxy=http://example.com:1081 \&#xA;  -e https_proxy=http://example.com:1081 \&#xA;  -e   ALL_PROXY=http://example.com:1081 \&#xA;  -e  HTTP_PROXY=http://example.com:1081 \&#xA;  -e HTTPS_PROXY=http://example.com:1081 \&#xA;  -v $PWD:/openwrt \&#xA;  immortalwrt/opde:base zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;blockquote&gt; &#xA;      &lt;p&gt;Recommand &lt;code&gt;http&lt;/code&gt; rather &lt;code&gt;socks5&lt;/code&gt; protocol&lt;/p&gt; &#xA;      &lt;p&gt;IP can not be &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt; &#xA;     &lt;/blockquote&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;For Windows User, binary is still in volume. It can be copied to outside via followed command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v &amp;lt;D:\path\to\dir&amp;gt;:/dst -v openwrt:/openwrt -w /dst immortalwrt:base cp /openwrt/bin /dst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;blockquote&gt; &#xA;      &lt;p&gt;Make sure &lt;code&gt;D:\path\to\dir&lt;/code&gt; has been appended in &lt;a href=&#34;https://docs.docker.com/docker-for-windows/#file-sharing&#34;&gt;File Sharing&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the ImmortalWrt package manager called opkg. If you&#39;re looking to develop the web interface or port packages to ImmortalWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/packages&#34;&gt;ImmortalWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/immortalwrt/raw/master/CONTRIBUTED.md&#34;&gt;CONTRIBUTED.md&lt;/a&gt;: the 3rd-party packages we introduced.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://t.me/ctcgfw_openwrt_discuss&#34;&gt;@ctcgfw_openwrt_discuss&lt;/a&gt; on &lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://matrix.to/#/#immortalwrt:matrix.org&#34;&gt;#immortalwrt&lt;/a&gt; on &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ImmortalWrt is licensed under &lt;a href=&#34;https://spdx.org/licenses/GPL-3.0-only.html&#34;&gt;GPL-3.0-only&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluent/fluent-bit</title>
    <updated>2022-08-28T01:33:48Z</updated>
    <id>tag:github.com,2022-08-28:/fluent/fluent-bit</id>
    <link href="https://github.com/fluent/fluent-bit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and Lightweight Logs and Metrics processor for Linux, BSD, OSX and Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluent/fluent-bit/master/fluentbit_logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;CI Status&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CI Workflow&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unit Tests (master)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fluent/fluent-bit/actions/workflows/unit-tests.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fluent/fluent-bit/actions/workflows/unit-tests.yaml/badge.svg?branch=master&#34; alt=&#34;CI/Unit Tests&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Integration Tests (master)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fluent/fluent-bit/actions/workflows/master-integration-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fluent/fluent-bit/actions/workflows/master-integration-test.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI/Integration Tests&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latest release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fluent/fluent-bit/actions/workflows/staging-release.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fluent/fluent-bit/actions/workflows/staging-release.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI/Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://fluentbit.io&#34;&gt;Fluent Bit&lt;/a&gt; is a fast Log Processor and Forwarder for Linux, Windows, Embedded Linux, MacOS and BSD family operating systems. It&#39;s part of the Graduated &lt;a href=&#34;http://fluentd.org&#34;&gt;Fluentd&lt;/a&gt; Ecosystem and a &lt;a href=&#34;https://cncf.io&#34;&gt;CNCF&lt;/a&gt; sub-project.&lt;/p&gt; &#xA;&lt;p&gt;Fluent Bit allows to collect log events or metrics from different sources, process them and deliver them to different backends such as &lt;a href=&#34;http://fluentd.org&#34;&gt;Fluentd&lt;/a&gt;, Elasticsearch, Splunk, DataDog, Kafka, New Relic, Azure services, AWS services, Google services, NATS, InfluxDB or any custom HTTP end-point.&lt;/p&gt; &#xA;&lt;p&gt;Fluent Bit comes with full SQL &lt;a href=&#34;https://docs.fluentbit.io/manual/stream-processing/introduction&#34;&gt;Stream Processing&lt;/a&gt; capabilities: data manipulation and analytics using SQL queries.&lt;/p&gt; &#xA;&lt;p&gt;Fluent Bit runs on x86_64, x86, arm32v7 and arm64v8 architectures.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High Performance&lt;/li&gt; &#xA; &lt;li&gt;Data Parsing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Convert your unstructured messages using our parsers: &lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/parsers/json&#34;&gt;JSON&lt;/a&gt;, &lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/parsers/regular-expression&#34;&gt;Regex&lt;/a&gt;, &lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/parsers/ltsv&#34;&gt;LTSV&lt;/a&gt; and &lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/parsers/logfmt&#34;&gt;Logfmt&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reliability and Data Integrity &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/administration/backpressure&#34;&gt;Backpressure&lt;/a&gt; Handling&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/administration/buffering-and-storage&#34;&gt;Data Buffering&lt;/a&gt; in memory and file system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Networking &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Security: built-in TLS/SSL support&lt;/li&gt; &#xA;   &lt;li&gt;Asynchronous I/O&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pluggable Architecture and &lt;a href=&#34;https://docs.fluentbit.io/manual/development&#34;&gt;Extensibility&lt;/a&gt;: Inputs, Filters and Outputs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;More than 70 built-in plugins available&lt;/li&gt; &#xA;   &lt;li&gt;Extensibility &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Write any input, filter or output plugin in C language&lt;/li&gt; &#xA;     &lt;li&gt;Write &lt;a href=&#34;https://docs.fluentbit.io/manual/filter/lua&#34;&gt;Filters in Lua&lt;/a&gt; or &lt;a href=&#34;https://docs.fluentbit.io/manual/development/golang-output-plugins&#34;&gt;Output plugins in Golang&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/administration/monitoring&#34;&gt;Monitoring&lt;/a&gt;: expose internal metrics over HTTP in JSON and &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/stream-processing/introduction&#34;&gt;Stream Processing&lt;/a&gt;: Perform data selection and transformation using simple SQL queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create new streams of data using query results&lt;/li&gt; &#xA;   &lt;li&gt;Aggregation Windows&lt;/li&gt; &#xA;   &lt;li&gt;Data analysis and prediction: Timeseries forecasting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Portable: runs on Linux, MacOS, Windows and BSD systems&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fluent Bit in Production&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fluentbit.io&#34;&gt;Fluent Bit&lt;/a&gt; is used widely in production environments. In 2020 Fluent Bit was deployed more than &lt;strong&gt;220 Million&lt;/strong&gt; times, and continues to be deploy over &lt;strong&gt;1 million times a day&lt;/strong&gt;. The following is a preview of who uses Fluent Bit heavily in production:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If your company uses Fluent Bit and is not listed, feel free to open a Github issue and we will add the logo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluent/fluent-bit/master/documentation/fluentbit_users.png&#34; alt=&#34;users&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.fluentbit.io&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Our official project documentation for &lt;a href=&#34;https://docs.fluentbit.io/manual/installation&#34;&gt;installation&lt;/a&gt;, &lt;a href=&#34;https://docs.fluentbit.io/manual/administration/configuring-fluent-bit&#34;&gt;configuration&lt;/a&gt;, deployment and development topics is located here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluentbit.io&#34;&gt;https://docs.fluentbit.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;h4&gt;Build from Scratch&lt;/h4&gt; &#xA;&lt;p&gt;If you aim to build Fluent Bit from sources, you can go ahead and start with the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build&#xA;cmake ..&#xA;make&#xA;bin/fluent-bit -i cpu -o stdout -f 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are interested into more details, please refer to the &lt;a href=&#34;https://docs.fluentbit.io/manual/installation/sources/build-and-install&#34;&gt;Build &amp;amp; Install&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h4&gt;Linux Packages&lt;/h4&gt; &#xA;&lt;p&gt;We provide packages for most common Linux distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/installation/linux/debian&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/installation/linux/raspbian-raspberry-pi&#34;&gt;Raspbian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/installation/linux/ubuntu&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/installation/linux/redhat-centos&#34;&gt;CentOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux / Docker Container Images&lt;/h4&gt; &#xA;&lt;p&gt;Our Linux containers images are the most common deployment model, thousands of new installation happen every day, learn more about the available images and tags &lt;a href=&#34;https://docs.fluentbit.io/manual/installation/docker&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Windows Packages&lt;/h4&gt; &#xA;&lt;p&gt;Fluent Bit is fully supported on Windows environments, get started with &lt;a href=&#34;https://docs.fluentbit.io/manual/installation/windows&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins: Inputs, Filters and Outputs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://fluentbit.io&#34;&gt;Fluent Bit&lt;/a&gt; is based in a pluggable architecture where different plugins plays a major role in the data pipeline:&lt;/p&gt; &#xA;&lt;h4&gt;Input Plugins&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;title&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/collectd&#34;&gt;collectd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Collectd&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Listen for UDP packets from Collectd.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/cpu-metrics&#34;&gt;cpu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CPU Usage&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;measure total CPU usage of the system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/disk-io-metrics&#34;&gt;disk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disk Usage&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;measure Disk I/Os.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/dummy&#34;&gt;dummy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dummy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;generate dummy event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/exec&#34;&gt;exec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Exec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;executes external program and collects event logs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/forward&#34;&gt;forward&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forward&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fluentd forward protocol.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/head&#34;&gt;head&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Head&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read first part of files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/health&#34;&gt;health&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Health&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Check health of TCP services.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/kernel-logs&#34;&gt;kmsg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kernel Log Buffer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read the Linux Kernel log buffer messages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/memory-metrics&#34;&gt;mem&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Memory Usage&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;measure the total amount of memory used on the system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/mqtt&#34;&gt;mqtt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MQTT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;start a MQTT server and receive publish messages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/network-io-metrics&#34;&gt;netif&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Network Traffic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;measure network traffic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/process&#34;&gt;proc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Process&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Check health of Process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/random&#34;&gt;random&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Random&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Generate Random samples.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/serial-interface&#34;&gt;serial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Serial Interface&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read data information from the serial interface.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/standard-input&#34;&gt;stdin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Standard Input&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read data from the standard input.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/syslog&#34;&gt;syslog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Syslog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read syslog messages from a Unix socket.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/systemd&#34;&gt;systemd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Systemd&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read logs from Systemd/Journald.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/tail&#34;&gt;tail&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tail&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tail log files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/tcp&#34;&gt;tcp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Listen for JSON messages over TCP.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/inputs/thermal&#34;&gt;thermal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Thermal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;measure system temperature(s).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Filter Plugins&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;title&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/aws-metadata&#34;&gt;aws&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AWS Metadata&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enrich logs with AWS Metadata.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/expect&#34;&gt;expect&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Expect&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Validate records match certain criteria in structure.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/grep&#34;&gt;grep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Grep&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Match or exclude specific records by patterns.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/kubernetes&#34;&gt;kubernetes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kubernetes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enrich logs with Kubernetes Metadata.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/lua&#34;&gt;lua&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Filter records using Lua Scripts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/parser&#34;&gt;parser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Parser&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Parse record.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/record-modifier&#34;&gt;record_modifier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Record Modifier&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Modify record.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/rewrite-tag&#34;&gt;rewrite_tag&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rewrite Tag&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Re-emit records under new tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/standard-output&#34;&gt;stdout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stdout&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Print records to the standard output interface.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/throttle&#34;&gt;throttle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Throttle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apply rate limit to event flow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/nest&#34;&gt;nest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Nest&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Nest records under a specified key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/filters/modify&#34;&gt;modify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Modify&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Modifications to record.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Output Plugins&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;title&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/azure&#34;&gt;azure&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Azure Log Analytics&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ingest records into Azure Log Analytics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/bigquery&#34;&gt;bigquery&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BigQuery&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ingest records into Google BigQuery&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/counter&#34;&gt;counter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Count Records&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Simple records counter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/datadog&#34;&gt;datadog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Datadog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ingest logs into Datadog.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/elasticsearch&#34;&gt;es&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elasticsearch&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;flush records to a Elasticsearch server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/file&#34;&gt;file&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;File&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to a file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/flowcounter&#34;&gt;flowcounter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FlowCounter&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Count records.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/forward&#34;&gt;forward&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forward&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fluentd forward protocol.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/gelf&#34;&gt;gelf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GELF&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to Graylog&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/http&#34;&gt;http&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to an HTTP end point.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/influxdb&#34;&gt;influxdb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;InfluxDB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to InfluxDB time series database.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/kafka&#34;&gt;kafka&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apache Kafka&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to Apache Kafka&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/kafka-rest-proxy&#34;&gt;kafka-rest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kafka REST Proxy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to a Kafka REST Proxy server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/loki&#34;&gt;loki&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Loki&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to Loki server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/nats&#34;&gt;nats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NATS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to a NATS server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/null&#34;&gt;null&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NULL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Throw away events.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/s3&#34;&gt;s3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to s3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/stackdriver&#34;&gt;stackdriver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Google Stackdriver Logging&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to Google Stackdriver Logging service.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/standard-output&#34;&gt;stdout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Standard Output&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to the standard output.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/splunk&#34;&gt;splunk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Splunk&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to a Splunk Enterprise service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/tcp-and-tls&#34;&gt;tcp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TCP &amp;amp; TLS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to a TCP server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.fluentbit.io/manual/pipeline/outputs/treasure-data&#34;&gt;td&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.treasuredata.com&#34;&gt;Treasure Data&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Flush records to the &lt;a href=&#34;http://www.treasuredata.com&#34;&gt;Treasure Data&lt;/a&gt; cloud service for analytics.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fluentbit.io&#34;&gt;Fluent Bit&lt;/a&gt; is an open project, several individuals and companies contribute in different forms like coding, documenting, testing, spreading the word at events within others. If you want to learn more about contributing opportunities please reach out to us through our &lt;a href=&#34;https://fluentbit.io/community/&#34;&gt;Community Channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing to Fluent bit with bug fixes, new features or coding in general, please refer to the code &lt;a href=&#34;https://raw.githubusercontent.com/fluent/fluent-bit/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guidelines. You can also refer the Beginners Guide to contributing to Fluent Bit &lt;a href=&#34;https://raw.githubusercontent.com/fluent/fluent-bit/master/DEVELOPER_GUIDE.md&#34;&gt;here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community &amp;amp; Contact&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to join us on our Slack channel, Mailing List or IRC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://slack.fluentd.org&#34;&gt;Slack&lt;/a&gt; (#fluent-bit channel)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/fluent-bit&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.fluentd.org&#34;&gt;Discourse Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/fluentbit&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluent/fluent-bit/master/irc.freenode.net&#34;&gt;IRC&lt;/a&gt; #fluent-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is under the terms of the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License v2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://fluentbit.io&#34;&gt;Fluent Bit&lt;/a&gt; is sponsored and maintained by several companies of the Cloud Native community, including all the major cloud providers.&lt;/p&gt; &#xA;&lt;p&gt;You can see a list of contributors &lt;a href=&#34;https://github.com/fluent/fluent-bit/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xiph/rnnoise</title>
    <updated>2022-08-28T01:33:48Z</updated>
    <id>tag:github.com,2022-08-28:/xiph/rnnoise</id>
    <link href="https://github.com/xiph/rnnoise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recurrent neural network for audio noise reduction&lt;/p&gt;&lt;hr&gt;&lt;p&gt;RNNoise is a noise suppression library based on a recurrent neural network.&lt;/p&gt; &#xA;&lt;p&gt;To compile, just type: % ./autogen.sh % ./configure % make&lt;/p&gt; &#xA;&lt;p&gt;Optionally: % make install&lt;/p&gt; &#xA;&lt;p&gt;While it is meant to be used as a library, a simple command-line tool is provided as an example. It operates on RAW 16-bit (machine endian) mono PCM files sampled at 48 kHz. It can be used as:&lt;/p&gt; &#xA;&lt;p&gt;./examples/rnnoise_demo &#xA; &lt;noisy speech&gt; &#xA;  &lt;output denoised&gt;&lt;/output&gt;&#xA; &lt;/noisy&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output is also a 16-bit raw PCM file.&lt;/p&gt; &#xA;&lt;p&gt;The latest version of the source is available from &lt;a href=&#34;https://gitlab.xiph.org/xiph/rnnoise&#34;&gt;https://gitlab.xiph.org/xiph/rnnoise&lt;/a&gt; . The github repository is a convenience copy.&lt;/p&gt;</summary>
  </entry>
</feed>