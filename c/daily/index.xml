<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-23T01:32:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ascotbe/Kernelhub</title>
    <updated>2022-10-23T01:32:22Z</updated>
    <id>tag:github.com,2022-10-23:/Ascotbe/Kernelhub</id>
    <link href="https://github.com/Ascotbe/Kernelhub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üå¥Kernel privilege escalation vulnerability collection, with compilation environment, demo GIF map, vulnerability details, executable file (ÊèêÊùÉÊºèÊ¥ûÂêàÈõÜ)&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Welcome to Kernelhub&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Ascotbe/Kernelhub&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/badge/Ascotbe-Kernelhub-green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ascotbe/Kernelhub&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://visitor-badge.glitch.me/badge?page_id=https://github.com/Ascotbe/Kernelhub/README.md&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ascotbe/Kernelhub&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/badge/LICENSE-GPL-ff69b4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ascotbe/Kernelhub/stargazers&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/stars/ascotbe/Kernelhub.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ascotbe/Medusa&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/badge/scope-2000‚Äî2021-success&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ascotbe/Medusa&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/repo-size/Ascotbe/Kernelhub&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Preface&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The original intention of making the project is for, learning, analyzing, and research the latest kernel vulnerabilities are not needed to see the system and related content.&lt;/li&gt; &#xA; &lt;li&gt;This project is a collection of proprietary, except for test failure or unspecified Exp, Demo GIF map&lt;/li&gt; &#xA; &lt;li&gt;If there is an omission of the omission of CVE vulnerabilities, please join your issues and bring your use of code.&lt;/li&gt; &#xA; &lt;li&gt;Project code is prohibited from testing in a real environment! The reliability of the code is self-verified, and the cause of the fault you have is not responsible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/README.CN.md&#34;&gt;‰∏≠ÊñáÊñáÊ°£&lt;/a&gt; | EnglishDocumentation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Numbered list&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;SecurityBulletin&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OperatingSystem&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2022-21882&#34;&gt;CVE-2022-21882&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Win32k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/11/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-34486&#34;&gt;CVE-2021-34486&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Event Tracing Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-42287&#34;&gt;CVE-2021-42287&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows AD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2008/2012/2016/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2021-43224&#34;&gt;CVE-2021-43224&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Common Log File&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/11/2008/2012/2016/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-42278&#34;&gt;CVE-2021-42278&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows AD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2008/2012/2016/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-40449&#34;&gt;CVE-2021-40449&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Win32k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/11/2008/2012/2016/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-40444&#34;&gt;CVE-2021-40444&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows IE RCE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-36934&#34;&gt;CVE-2021-36934&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2021-34527&#34;&gt;CVE-2021-34527&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Print Spooler Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019/2022/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-33739&#34;&gt;CVE-2021-33739&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Microsoft DWM Core Library Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2021-31166&#34;&gt;CVE-2021-31166&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HTTP Protocol Stack&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-33739&#34;&gt;CVE-2021-26868&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Graphics Component Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 8.1/10/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2021-21551&#34;&gt;CVE-2021-21551&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2021-1732&#34;&gt;CVE-2021-1732&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Win32k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2021-1709&#34;&gt;CVE-2021-1709&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Win32k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2020-17087&#34;&gt;CVE-2020-17087&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Local Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2020-17057&#34;&gt;CVE-2020-17057&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Win32k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-16938&#34;&gt;CVE-2020-16938&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Information Disclosure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-16898&#34;&gt;CVE-2020-16898&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows TCP/IP Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2020-1362&#34;&gt;CVE-2020-1362&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows WalletService Elevation of Privilege&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2020-1350&#34;&gt;CVE-2020-1350&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows DNS Server&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-1337&#34;&gt;CVE-2020-1337&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Print Spooler Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-1313&#34;&gt;CVE-2020-1313&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Update Orchestrator Service Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-1066&#34;&gt;CVE-2020-1066&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;.NET Framework Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-1054&#34;&gt;CVE-2020-1054&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-1472&#34;&gt;CVE-2020-1472&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Netlogon Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-0668&#34;&gt;CVE-2020-0668&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Serve&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-1015&#34;&gt;CVE-2020-1015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2020-0814&#34;&gt;CVE-2020-0814&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Installer Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-0796&#34;&gt;CVE-2020-0796&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SMBv3 Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-0787&#34;&gt;CVE-2020-0787&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Background Intelligent Transfer Service&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2020-0624&#34;&gt;CVE-2020-0624&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/.CVE-2019-0808&#34;&gt;CVE-2019-0808&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2020-0683&#34;&gt;CVE-2020-0683&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Installer Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/.CVE-2019-0808&#34;&gt;CVE-2019-0623&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/Serve&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2019-1458&#34;&gt;CVE-2019-1458&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-1422&#34;&gt;CVE-2019-1422&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2019-1388&#34;&gt;CVE-2019-1388&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Certificate Dialog Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2008/2012/2016/2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-1322&#34;&gt;CVE-2019-1322&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-1253&#34;&gt;CVE-2019-1253&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 10/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-1215&#34;&gt;CVE-2019-1215&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8.1/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-1040&#34;&gt;CVE-2019-1040&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows NTLM Tampering&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019/Serve&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-0986&#34;&gt;CVE-2019-0986&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows User Profile Service Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019/Serve&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-0863&#34;&gt;CVE-2019-0863&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Error Reporting Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019/Serve&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/&#34;&gt;CVE-2019-0859&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2019-0803&#34;&gt;CVE-2019-0803&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2019-0708&#34;&gt;CVE-2019-0708&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Remote Desktop Services&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2018-8639&#34;&gt;CVE-2018-8639&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2018-8453&#34;&gt;CVE-2018-8453&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2018-8440&#34;&gt;CVE-2018-8440&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows ALPC Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2018-8120&#34;&gt;CVE-2018-8120&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2018-1038&#34;&gt;CVE-2018-1038&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2018-0833&#34;&gt;CVE-2018-0833&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SMBv3 Null Pointer Dereference Denial of Service&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 8/2012&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2018-0886&#34;&gt;CVE-2018-0886&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CredSSP Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/2019/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2018-0824&#34;&gt;CVE-2018-0824&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;COM for Windows Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2017-11783&#34;&gt;CVE-2017-11783&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 8/10/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2017-8465&#34;&gt;CVE-2017-8465&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2017-8464&#34;&gt;CVE-2017-8464&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;LNK Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2017-0263&#34;&gt;CVE-2017-0263&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2017-0213&#34;&gt;CVE-2017-0213&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows COM Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2017-0143&#34;&gt;CVE-2017-0143&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Mode Drivers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2017-0101&#34;&gt;CVE-2017-0101&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GDI Palette Objects Local Privilege Escalation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2017-0100&#34;&gt;CVE-2017-0100&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows HelpPane Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2017-0005&#34;&gt;CVE-2017-0005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows GDI Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/Vista/XP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-7255&#34;&gt;CVE-2016-7255&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Mode Drivers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/2016/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-3371&#34;&gt;CVE-2016-3371&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2016-3309&#34;&gt;CVE-2016-3309&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-3225&#34;&gt;CVE-2016-3225&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows SMB Server Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-0099&#34;&gt;CVE-2016-0099&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Secondary Logon Handle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-0095&#34;&gt;CVE-2016-0095&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-0051&#34;&gt;CVE-2016-0051&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;WebDAV Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2016-0041&#34;&gt;CVE-2016-0041&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Memory Corruption Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2015-2546&#34;&gt;CVE-2015-2546&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Memory Corruption Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2015-2387&#34;&gt;CVE-2015-2387&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ATMFD.DLL Memory Corruption&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista/Rt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2015-2370&#34;&gt;CVE-2015-2370&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows RPC Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2015-1725&#34;&gt;CVE-2015-1725&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/10/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2015-1701&#34;&gt;CVE-2015-1701&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Mode Drivers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2015-0062&#34;&gt;CVE-2015-0062&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Create Process Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2008/2012&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2015-0057&#34;&gt;CVE-2015-0057&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2015-0003&#34;&gt;CVE-2015-0003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2015-0002&#34;&gt;CVE-2015-0002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Microsoft Application Compatibility Infrastructure Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2014-6324&#34;&gt;CVE-2014-6324&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Kerberos Checksum Vulnerability&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2014-6321&#34;&gt;CVE-2014-6321&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Microsoft Schannel Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2014-4113&#34;&gt;CVE-2014-4113&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k.sys Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2014-4076&#34;&gt;CVE-2014-4076&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP/IP Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2003&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2014-1767&#34;&gt;CVE-2014-1767&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ancillary Function Driver Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2013-5065&#34;&gt;CVE-2013-5065&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;NDProxy.sys&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows XP/2003&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2013-1345&#34;&gt;CVE-2013-1345&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Kernel Driver&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista/Rt/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2013-1332&#34;&gt;CVE-2013-1332&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DirectX Graphics Kernel Subsystem Double Fetch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista/Rt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2013-1300&#34;&gt;CVE-2013-1300&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Memory Allocation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2003/2008/2012/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2013-0008&#34;&gt;CVE-2013-0008&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Improper Message Handling&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/8/2008/2012/Vista/Rt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2012-0217&#34;&gt;CVE-2012-0217&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Service Bus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2012-0002&#34;&gt;CVE-2012-0002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Remote Desktop Protocol&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2011-2005&#34;&gt;CVE-2011-2005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ancillary Function Driver Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2003/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2011-1974&#34;&gt;CVE-2011-1974&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;NDISTAPI Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2003/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2011-1249&#34;&gt;CVE-2011-1249&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ancillary Function Driver Elevation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2011-1237&#34;&gt;CVE-2011-1237&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Use After Free&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2011-0045&#34;&gt;CVE-2011-0045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Integer Truncation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2010-4398&#34;&gt;CVE-2010-4398&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Driver Improper Interaction with Windows Kernel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2010-3338&#34;&gt;CVE-2010-3338&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Task Scheduler&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2010-2554&#34;&gt;CVE-2010-2554&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Tracing Registry Key ACL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2010-1897&#34;&gt;CVE-2010-1897&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32k Window Creation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2010-0270&#34;&gt;CVE-2010-0270&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SMB Client Transaction&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2010-0233&#34;&gt;CVE-2010-0233&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Kernel Double Free&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2010-0020&#34;&gt;CVE-2010-0020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SMB Pathname Overflow&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7/2000/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2009-2532&#34;&gt;CVE-2009-2532&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SMBv2 Command Value&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2008/Vista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2009-0079&#34;&gt;CVE-2009-0079&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows RPCSS Service Isolation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2003/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2008-4250&#34;&gt;CVE-2008-4250&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Server Service&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/2003/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2008-4037&#34;&gt;CVE-2008-4037&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SMB Credential Reflection&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2008-3464&#34;&gt;CVE-2008-3464&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AFD Kernel Overwrite&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2003/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2008-1084&#34;&gt;CVE-2008-1084&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win32.sys&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/2003/2008/Vista/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2006-3439&#34;&gt;CVE-2006-3439&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Remote Code Execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/2003/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2005-1983&#34;&gt;CVE-2005-1983&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PnP Service&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/Xp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/CVE-2003-0352&#34;&gt;CVE-2003-0352&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Buffer Overrun In RPC Interface&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 2000/2003/Xp/Nt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ascotbe/Kernelhub/master/TestFailure/CVE-2000-0979&#34;&gt;CVE-2000-0979&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Share Level Password&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 95/98/98se/Me&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Required environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Test target system&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Windows 7 SP1 X64 &#xA;ed2k://|file|cn_windows_7_home_premium_with_sp1_x64_dvd_u_676691.iso|3420557312|1A3CF44F3F5E0BE9BBC1A938706A3471|/&#xA;#Windows 7 SP1 X86&#xA;ed2k://|file|cn_windows_7_home_premium_with_sp1_x86_dvd_u_676770.iso|2653276160|A8E8BD4421174DF34BD14D60750B3CDB|/&#xA;#Windows Server 2008 R2 SP1 X64 &#xA;ed2k://|file|cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_x64_dvd_617598.iso|3368839168|D282F613A80C2F45FF23B79212A3CF67|/&#xA;#Windows Server 2003 R2 SP2 x86&#xA;ed2k://|file|cn_win_srv_2003_r2_enterprise_with_sp2_vl_cd1_X13-46432.iso|637917184|284DC0E76945125035B9208B9199E465|/&#xA;#Windows Server 2003 R2 SP2 x64&#xA;ed2k://|file|cn_win_srv_2003_r2_enterprise_x64_with_sp2_vl_cd1_X13-47314.iso|647686144|107F10D2A7FF12FFF0602FF60602BB37|/&#xA;#Windows Server 2008 SP2 x86&#xA;ed2k://|file|cn_windows_server_standard_enterprise_and_datacenter_with_sp2_x86_dvd_x15-41045.iso|2190057472|E93B029C442F19024AA9EF8FB02AC90B|/&#xA;#Windows Server 2000 SP4 x86&#xA;ed2k://|file|ZRMPSEL_CN.iso|402690048|00D1BDA0F057EDB8DA0B29CF5E188788|/&#xA;#Windows Server 2003 SP2 x86&#xA;thunder://QUFodHRwOi8vcy5zYWZlNS5jb20vV2luZG93c1NlcnZlcjIwMDNTUDJFbnRlcnByaXNlRWRpdGlvbi5pc29aWg==&#xA;#Windows 8.1 x86&#xA;ed2k://|file|cn_windows_8_1_enterprise_x86_dvd_2972257.iso|3050842112|6B60ABF8282F943FE92327463920FB67|/&#xA;#Windows 8.1 x64&#xA;ed2k://|file|cn_windows_8_1_x64_dvd_2707237.iso|4076017664|839CBE17F3CE8411E8206B92658A91FA|/&#xA;#Windows 10 1709 x64&#xA;ed2k://|file|cn_windows_10_multi-edition_vl_version_1709_updated_dec_2017_x64_dvd_100406208.iso|5007116288|317BDC520FA2DD6005CBA8293EA06DF6|/&#xA;#Windows 10 2004 x64 (2020-05-21 release version)&#xA;magnet:?xt=urn:btih:8E49569FDE852E4F3CCB3D13EFB296B6B02D82A6&#xA;#Windows 10 1909 x64 &#xA;ed2k://|file|cn_windows_10_business_editions_version_1909_x64_dvd_0ca83907.iso|5275090944|9BCD5FA6C8009E4D0260E4B23008BD47|/&#xA;#Windows 10 1607 x64 (Updated Jul 2016)&#xA;ed2k://|file|cn_windows_10_multiple_editions_version_1607_updated_jul_2016_x64_dvd_9056935.iso|4347183104|35EA5DB0F3BB714F5CE0740FB89D82D1|/&#xA;#Windows 10 1903 x64&#xA;ed2k://|file|cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso|4815527936|47D4C57E638DF8BF74C59261E2CE702D|/&#xA;#Windows 10 21H2 x64 (2021-12-21 release version)&#xA;magnet:?xt=urn:btih:a6594f14273fe02ae59a6d6848a47e55903d919b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux compilation environment&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vim /etc/apt/sources.list&#xA;#Âú®sources.listÊú´Â∞æÊ∑ªÂä†deb http://us.archive.ubuntu.com/ubuntu trusty main universe&#xA;sudo apt-get update&#xA;sudo apt-get install mingw32 mingw32-binutils mingw32-runtime&#xA;sudo apt-get install gcc-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows compilation environment&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#(.NET download address)https://dotnet.microsoft.com/download/visual-studio-sdks?utm_source=getdotnetsdk&amp;amp;utm_medium=referral&#xA;VS2019ÔºàÂÜÖÁΩÆV142„ÄÅV141„ÄÅV120„ÄÅV110„ÄÅV100„ÄÅV141_xp„ÄÅV120_xp„ÄÅV110_xp„ÄÅMFC„ÄÅ.NET Framework 4.7.2Ôºâ&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;About the error&lt;/h3&gt; &#xA;&lt;p&gt;Due to the large content of the project, it is inevitable that there will be some typos or missing CVE numbers. If you find an error, you still hope to submit Issues to help me maintain the project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;No test success number&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The following numbers are all CVEs that failed to pass the recurrence test after screening, with reasons for failure, and welcome to submit PR&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SecurityBulletin&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2000-0979&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2005-1983&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2009-0079&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2010-0020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2011-0045&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2011-1237&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2013-0008&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2013-1300&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2014-6321&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2014-6324&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2015-0002&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2015-0062&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2016-3309&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2017-0005&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2017-0100&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2017-0263&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2017-8465&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2018-0824&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2018-0886&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2018-1038&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2019-0708&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2019-0859&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2019-0863&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2019-0986&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2019-1215&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2019-1253&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2019-1322&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2019-1422&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2020-0814&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2020-1350&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2020-1362&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2020-17057&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2021-1709&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2021-21551&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2021-31166&lt;/td&gt; &#xA;   &lt;td&gt;CVE-2021-34527&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CVE-2021-43883&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;This project is only oriented to &lt;strong&gt;legally authorized&lt;/strong&gt; corporate safety construction behaviors. When using this project for testing, you should ensure that the behavior complies with local laws and regulations and has obtained sufficient authorization.&lt;/p&gt; &#xA;&lt;p&gt;If you have any illegal behavior in the process of using this project, you need to bear the corresponding consequences yourself, and we will not bear any legal and joint liabilities.&lt;/p&gt; &#xA;&lt;p&gt;Before using this project, please &lt;strong&gt;read carefully and fully understand the content of each clause&lt;/strong&gt;. Restrictions, exemption clauses or other clauses involving your major rights and interests may be bolded, underlined, etc. to remind you to pay attention. Unless you have fully read, fully understood and accepted all the terms of this agreement, please do not use this item. Your use behavior or your acceptance of this agreement in any other express or implied manner shall be deemed to have been read and agreed to be bound by this agreement.&lt;/p&gt; &#xA;&lt;h3&gt;Reference project &amp;amp; website&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SecWiki/windows-kernel-exploits&#34;&gt;windows-kernel-exploits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abatchy17/WindowsExploits&#34;&gt;WindowsExploits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WindowsExploits/Exploits&#34;&gt;Exploits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cve.mitre.org&#34;&gt;CVE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cvedetails.com/&#34;&gt;CVE Details&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stats&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/2f17ae8019f36294dafafd5cf9ffe9b0e62a21ae.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wavestone-cdt/EDRSandblast</title>
    <updated>2022-10-23T01:32:22Z</updated>
    <id>tag:github.com,2022-10-23:/wavestone-cdt/EDRSandblast</id>
    <link href="https://github.com/wavestone-cdt/EDRSandblast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EDRSandBlast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;EDRSandBlast&lt;/code&gt; is a tool written in &lt;code&gt;C&lt;/code&gt; that weaponize a vulnerable signed driver to bypass EDR detections (Notify Routine callbacks, Object Callbacks and &lt;code&gt;ETW TI&lt;/code&gt; provider) and &lt;code&gt;LSASS&lt;/code&gt; protections. Multiple userland unhooking techniques are also implemented to evade userland monitoring.&lt;/p&gt; &#xA;&lt;p&gt;As of release, combination of userland (&lt;code&gt;--usermode&lt;/code&gt;) and Kernel-land (&lt;code&gt;--kernelmode&lt;/code&gt;) techniques were used to dump &lt;code&gt;LSASS&lt;/code&gt; memory under EDR scrutiny, without being blocked nor generating &#34;OS Credential Dumping&#34;-related events in the product (cloud) console. The tests were performed on 3 distinct EDR products and were successful in each case.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;h3&gt;EDR bypass through Kernel Notify Routines removal&lt;/h3&gt; &#xA;&lt;p&gt;EDR products use Kernel &#34;Notify Routines&#34; callbacks on Windows to be notified by the kernel of system activity, such as process and thread creation and loading of images (&lt;code&gt;exe&lt;/code&gt; / &lt;code&gt;DLL&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;These Kernel callbacks are defined from kernel-land, usually from the driver implementing the callbacks, using a number of documented APIs (&lt;code&gt;nt!PsSetCreateProcessNotifyRoutine&lt;/code&gt;, &lt;code&gt;nt!PsSetCreateThreadNotifyRoutine&lt;/code&gt;, etc.). These APIs add driver-supplied callback routines to undocumented arrays of routines in Kernel-space:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PspCreateProcessNotifyRoutine&lt;/code&gt; for process creation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PspCreateThreadNotifyRoutine&lt;/code&gt; for thread creation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PspLoadImageNotifyRoutine&lt;/code&gt; for image loading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;EDRSandBlast&lt;/code&gt; enumerates the routines defined in those arrays and remove any callback routine linked to a predefined list of EDR drivers (more than 1000 drivers of security products supported, see the &lt;a href=&#34;https://raw.githubusercontent.com/wavestone-cdt/EDRSandblast/master/#edr-drivers-and-processes-detection&#34;&gt;EDR driver detection section&lt;/a&gt;. The enumeration and removal are made possible through the exploitation of an arbitrary Kernel memory read / write primitive provided by the exploitation of a vulnerable driver (see &lt;a href=&#34;https://raw.githubusercontent.com/wavestone-cdt/EDRSandblast/master/#vulnerable-drivers-detection&#34;&gt;Vulnerable drivers section&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The offsets of the aforementioned arrays are recovered using multiple techniques, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/wavestone-cdt/EDRSandblast/master/#ntoskrnl-and-wdigest-offsets&#34;&gt;Offsets section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;EDR bypass through Object Callbacks removal&lt;/h3&gt; &#xA;&lt;p&gt;EDR (and even EPP) products often register &#34;Object callbacks&#34; through the use of the &lt;code&gt;nt!ObRegisterCallbacks&lt;/code&gt; kernel API. These callbacks allow the security product to be notified at each handle generation on specific object types (Processes, Threads and Desktops related object callbacks are now supported by Windows). A handle generation may occur on object opening (call to &lt;code&gt;OpenProcess&lt;/code&gt;, &lt;code&gt;OpenThread&lt;/code&gt;, etc.) as well as handle duplication (call to &lt;code&gt;DuplicateHandle&lt;/code&gt;, etc.).&lt;/p&gt; &#xA;&lt;p&gt;By being notified by the kernel on each of these operations, a security product may analyze the legitimacy of the handle creation (&lt;em&gt;e.g. an unknown process is trying to open LSASS&lt;/em&gt;), and even block it if a threat is detected.&lt;/p&gt; &#xA;&lt;p&gt;At each callback registration using &lt;code&gt;ObRegisterCallbacks&lt;/code&gt;, a new item is added to the &lt;code&gt;CallbackList&lt;/code&gt; double-linked list present in the &lt;code&gt;_OBJECT_TYPE&lt;/code&gt; object describing the type of object affected by the callback (either a Process, a Thread or a Desktop). Unfortunately, these items are described by a structure that is not documented nor published in symbol files by Microsoft. However, studying it from various &lt;code&gt;ntoskrnl.exe&lt;/code&gt; versions seems to indicate that the structure did not change between (at least) Windows 10 builds 10240 and 22000 (from 2015 to 2022).&lt;/p&gt; &#xA;&lt;p&gt;The mentionned structure, representing an object callback registration, is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct OB_CALLBACK_ENTRY_t {&#xA;    LIST_ENTRY CallbackList; // linked element tied to _OBJECT_TYPE.CallbackList&#xA;    OB_OPERATION Operations; // bitfield : 1 for Creations, 2 for Duplications&#xA;    BOOL Enabled;            // self-explanatory&#xA;    OB_CALLBACK* Entry;      // points to the structure in which it is included&#xA;    POBJECT_TYPE ObjectType; // points to the object type affected by the callback&#xA;    POB_PRE_OPERATION_CALLBACK PreOperation;      // callback function called before each handle operation&#xA;    POB_POST_OPERATION_CALLBACK PostOperation;     // callback function called after each handle operation&#xA;    KSPIN_LOCK Lock;         // lock object used for synchronization&#xA;} OB_CALLBACK_ENTRY;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;OB_CALLBACK&lt;/code&gt; structure mentionned above is also undocumented, and is defined by the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct OB_CALLBACK_t {&#xA;    USHORT Version;                           // usually 0x100&#xA;    USHORT OperationRegistrationCount;        // number of registered callbacks&#xA;    PVOID RegistrationContext;                // arbitrary data passed at registration time&#xA;    UNICODE_STRING AltitudeString;            // used to determine callbacks order&#xA;    struct OB_CALLBACK_ENTRY_t EntryItems[1]; // array of OperationRegistrationCount items&#xA;    WCHAR AltitudeBuffer[1];                  // is AltitudeString.MaximumLength bytes long, and pointed by AltitudeString.Buffer&#xA;} OB_CALLBACK;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to disable EDR-registered object callbacks, three techniques are implemented in &lt;code&gt;EDRSandblast&lt;/code&gt;; however only one is enabled for the moment.&lt;/p&gt; &#xA;&lt;h4&gt;Using the &lt;code&gt;Enabled&lt;/code&gt; field of &lt;code&gt;OB_CALLBACK_ENTRY&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the default technique enabled in &lt;code&gt;EDRSandblast&lt;/code&gt;. In order to detect and disable EDR-related object callbacks, the &lt;code&gt;CallbackList&lt;/code&gt; list located in the &lt;code&gt;_OBJECT_TYPE&lt;/code&gt; objects tied to the &lt;em&gt;Process&lt;/em&gt; and &lt;em&gt;Thread&lt;/em&gt; types is browsed. Both &lt;code&gt;_OBJECT_TYPE&lt;/code&gt;s are pointed by public global symbols in the kernel, &lt;code&gt;PsProcessType&lt;/code&gt; and &lt;code&gt;PsThreadType&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each item of the list is assumed to fit the &lt;code&gt;OB_CALLBACK_ENTRY&lt;/code&gt; structure described above (assumption that seems to hold at least in all Windows 10 builds at the time of writing). Functions defined in &lt;code&gt;PreOperation&lt;/code&gt; and &lt;code&gt;PostOperation&lt;/code&gt; fields are located to checks if they belong to an EDR driver, and if so, callbacks are simply disabled toggling the &lt;code&gt;Enabled&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;While being a pretty safe technique, it has the inconvenient of relying on an undocumented structure; to reduce the risk of unsafe manipulation of this structure, basic checks are performed to validate that some fields have the expected values :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Enabled&lt;/code&gt; is either &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; (&lt;em&gt;don&#39;t laugh, a &lt;code&gt;BOOL&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt;, so it could be anything other than &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;&lt;/em&gt;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Operations&lt;/code&gt; is &lt;code&gt;OB_OPERATION_HANDLE_CREATE&lt;/code&gt;, &lt;code&gt;OB_OPERATION_HANDLE_DUPLICATE&lt;/code&gt; or both;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ObjectType&lt;/code&gt; points on &lt;code&gt;PsProcessType&lt;/code&gt; or &lt;code&gt;PsThreadType&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Unlinking the &lt;code&gt;CallbackList&lt;/code&gt; of threads and process&lt;/h4&gt; &#xA;&lt;p&gt;Another strategy that do not rely on an undocumented structure (and is thus theoretically more robust against NT kernel changes) is the unlinking of the whole &lt;code&gt;CallbackList&lt;/code&gt; for both processes and threads. The &lt;code&gt;_OBJECT_TYPE&lt;/code&gt; object is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;struct _OBJECT_TYPE {&#xA;&#x9;LIST_ENTRY TypeList;&#xA;&#x9;UNICODE_STRING Name;&#xA;&#x9;[...]&#xA;&#x9;_OBJECT_TYPE_INITIALIZER TypeInfo;&#xA;&#x9;[...]&#xA;&#x9;LIST_ENTRY CallbackList;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Making the &lt;code&gt;Flink&lt;/code&gt; and &lt;code&gt;Blink&lt;/code&gt; pointers of the &lt;code&gt;CallbackList&lt;/code&gt; &lt;code&gt;LIST_ENTRY&lt;/code&gt; point to the &lt;code&gt;LIST_ENTRY&lt;/code&gt; itself effectively make the list empty. Since the &lt;code&gt;_OBJECT_TYPE&lt;/code&gt; structure is published in the kernel&#39; symbols, the technique does not rely on hardcoded offsets/structures. However, it has some drawbacks.&lt;/p&gt; &#xA;&lt;p&gt;The first being not able to only disable callbacks from EDR; indeed, the technique affects all object callbacks that could have been registered by &#34;legitimate&#34; software. It should nevertheless be noted that object callbacks are not used by any pre-installed component on Windows 10 (at the time of writing) so disabling them should not affect the machine stability (even more so if the disabling is only temporary).&lt;/p&gt; &#xA;&lt;p&gt;The second drawback is that process or thread handle operation are really frequent (nearly continuous) in the normal functioning of the OS. As such, if the kernel write primitive used cannot perform a &lt;code&gt;QWORD&lt;/code&gt; write &#34;atomically&#34;, there is a good chance that the &lt;code&gt;_OBJECT_TYPE.CallbackList.Flink&lt;/code&gt; pointer will be accessed by the kernel in the middle of its overwriting. For instance, the MSI vulnerable driver &lt;code&gt;RTCore64.sys&lt;/code&gt; can only perform a &lt;code&gt;DWORD&lt;/code&gt; write at a time, so 2 distinct IOCTLs will be needed to overwrite the pointer, between which the kernel has a high probability of using it (resulting in a crash). On the other hand, the vulnerable DELL driver &lt;code&gt;DBUtil_2_3.sys&lt;/code&gt; can perform writes of arbitrary sizes in one IOCTL, so using this method with it does not risk causing a crash.&lt;/p&gt; &#xA;&lt;h4&gt;Disabling object callbacks altogether&lt;/h4&gt; &#xA;&lt;p&gt;One last technique we found was to disable entirely the object callbacks support for thread and processes. Inside the &lt;code&gt;_OBJECT_TYPE&lt;/code&gt; structure corresponding to the process and thread types resides a &lt;code&gt;TypeInfo&lt;/code&gt; field, following the documented &lt;code&gt;_OBJECT_TYPE_INITIALIZER&lt;/code&gt; structure. The latter contains a &lt;code&gt;ObjectTypeFlags&lt;/code&gt; bit field, whose &lt;code&gt;SupportsObjectCallbacks&lt;/code&gt; flag determines if the described object type (Process, Thread, Desktop, Token, File, etc.) supports object callback registering or not. As previously stated, only Process, Thread and Desktop object types supports these callbacks on a Windows installation at the time of writing.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;SupportsObjectCallbacks&lt;/code&gt; bit is checked by &lt;code&gt;ObpCreateHandle&lt;/code&gt; or &lt;code&gt;ObDuplicateObject&lt;/code&gt; before even reading the &lt;code&gt;CallbackList&lt;/code&gt; (and before executing callbacks, of course), flipping the bit at kernel runtime effectively disable all object callbacks execution.&lt;/p&gt; &#xA;&lt;p&gt;The main drawback of the method is simply that &lt;em&gt;KPP&lt;/em&gt; (&#34;&lt;em&gt;PatchGuard&lt;/em&gt;&#34;) monitors the integrity of some (all ?) &lt;code&gt;_OBJECT_TYPE&lt;/code&gt; structures, and triggers a &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/bug-check-0x109---critical-structure-corruption&#34;&gt;&lt;code&gt;0x109 Bug Check&lt;/code&gt;&lt;/a&gt; with parameter 4 being equal to &lt;code&gt;0x8&lt;/code&gt;, meaning an object type structure has been altered.&lt;/p&gt; &#xA;&lt;p&gt;However, performing the disabling / re-enabling (and &#34;malicious&#34; action in-between) quickly enough should be enough to &#34;race&#34; &lt;em&gt;PatchGuard&lt;/em&gt; (unless you are unlucky and a periodic check is performed just at the wrong moment).&lt;/p&gt; &#xA;&lt;h3&gt;EDR bypass through deactivation of the ETW Microsoft-Windows-Threat-Intelligence provider&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ETW Microsoft-Windows-Threat-Intelligence&lt;/code&gt; provider logs data about the usages of some Windows API commonly used maliciously. This include the &lt;code&gt;nt!MiReadWriteVirtualMemory&lt;/code&gt; API, called by &lt;code&gt;nt!NtReadVirtualMemory&lt;/code&gt; (which is used to dump &lt;code&gt;LSASS&lt;/code&gt; memory) and monitored by the &lt;code&gt;nt!EtwTiLogReadWriteVm&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;EDR products can consume the logs produced by the &lt;code&gt;ETW TI&lt;/code&gt; provider through services or processes running as, respectively, &lt;code&gt;SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT&lt;/code&gt; or &lt;code&gt;PS_PROTECTED_ANTIMALWARE_LIGHT&lt;/code&gt;, and associated with an &lt;code&gt;Early Launch Anti Malware (ELAM)&lt;/code&gt; driver.&lt;/p&gt; &#xA;&lt;p&gt;As published by &lt;a href=&#34;https://public.cnotools.studio/bring-your-own-vulnerable-kernel-driver-byovkd/exploits/data-only-attack-neutralizing-etwti-provider&#34;&gt;&lt;code&gt;slaeryan&lt;/code&gt; in a &lt;code&gt;CNO Development Labs&lt;/code&gt; blog post&lt;/a&gt;, the &lt;code&gt;ETW TI&lt;/code&gt; provider can be disabled altogether by patching, in kernel memory, its &lt;code&gt;ProviderEnableInfo&lt;/code&gt; attribute to &lt;code&gt;0x0&lt;/code&gt;. Refer to the great aforementioned blog post for more information on the technique.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to the Kernel callbacks removal, the necessary &lt;code&gt;ntoskrnl.exe&lt;/code&gt; offsets (&lt;code&gt;nt!EtwThreatIntProvRegHandleOffset&lt;/code&gt;, &lt;code&gt;_ETW_REG_ENTRY&lt;/code&gt;&#39;s &lt;code&gt;GuidEntry&lt;/code&gt;, and &lt;code&gt;_ETW_GUID_ENTRY&lt;/code&gt;&#39;s &lt;code&gt;ProviderEnableInfo&lt;/code&gt;) are computed in the &lt;code&gt;NtoskrnlOffsets.csv&lt;/code&gt; file for a number of the Windows Kernel versions.&lt;/p&gt; &#xA;&lt;h3&gt;EDR bypass through userland hooking bypass&lt;/h3&gt; &#xA;&lt;h4&gt;How userland hooking works&lt;/h4&gt; &#xA;&lt;p&gt;In order to easily monitor actions that are performed by processes, EDR products often deploy a mechanism called &lt;em&gt;userland hooking&lt;/em&gt;. First, EDR products register a kernel callback (usually &lt;em&gt;image loading&lt;/em&gt; or &lt;em&gt;process creation&lt;/em&gt; callbacks, see above) that allows them to be notified upon each process start.&lt;/p&gt; &#xA;&lt;p&gt;When a process is loaded by Windows, and before it actually starts, the EDR is able to inject some custom DLL into the process address space, which contains its monitoring logic. While loading, this DLL injects &#34;&lt;em&gt;hooks&lt;/em&gt;&#34; at the start of every function that is to be monitored by the EDR. At runtime, when the monitored functions are called by the process under surveillance, these hooks redirect the control flow to some supervision code present in the EDR&#39;s DLL, which allows it to inspect arguments and return values of these calls.&lt;/p&gt; &#xA;&lt;p&gt;Most of the time, monitored functions are system calls (such as &lt;code&gt;NtReadVirtualMemory&lt;/code&gt;, &lt;code&gt;NtOpenProcess&lt;/code&gt;, etc.), whose implementations reside in &lt;code&gt;ntdll.dll&lt;/code&gt;. Intercepting calls to &lt;code&gt;Nt*&lt;/code&gt; functions allows products to be as close as possible to the userland / kernel-land boundary (while remaining in userland), but functions from some higher-level DLLs may also be monitored as well.&lt;/p&gt; &#xA;&lt;p&gt;Bellow are examples of the same function, before and after beeing hooked by the EDR product:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;NtProtectVirtualMemory   proc near&#xA;&#x9;mov r10, rcx&#xA;&#x9;mov eax, 50h&#xA;&#x9;test byte ptr ds:7FFE0308h, 1&#xA;&#x9;jnz short loc_18009D1E5&#xA;&#x9;syscall&#xA;&#x9;retn&#xA;loc_18009D1E5:&#xA;&#x9;int 2Eh&#xA;&#x9;retn&#xA;NtProtectVirtualMemory   endp&#x9;&#x9;&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;NtProtectVirtualMemory proc near&#xA;&#x9;jmp     sub_7FFC74490298     ; --&amp;gt; &#34;hook&#34;, jump to EDR analysis function&#xA;&#x9;int 3                        ; overwritten instructions&#xA;&#x9;int 3                        ; overwritten instructions&#xA;&#x9;int 3                        ; overwritten instructions&#xA;&#x9;test byte_7FFE0308, 1        ; &amp;lt;-- execution resumes here after analysis&#xA;&#x9;jnz short loc_7FFCB44AD1E5&#xA;&#x9;syscall&#xA;&#x9;retn&#xA;loc_7FFCB44AD1E5:&#xA;&#x9;int 2Eh&#xA;&#x9;retn&#xA;NtProtectVirtualMemory   endp&#x9;&#x9;&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hooks detection&lt;/h4&gt; &#xA;&lt;p&gt;Userland hooks have the &#34;weakness&#34; to be located in userland memory, which means they are directly observable and modifiable by the process under scrutiny. To automatically detect hooks in the process address space, the main idea is to compare the differences between the original DLL on disk and the library residing in memory, that has been potentially altered by an EDR. To perform this comparison, the following steps are followed by EDRSandblast:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The list of all loaded DLLs is enumerated thanks to the &lt;code&gt;InLoadOrderModuleList&lt;/code&gt; located int the &lt;code&gt;PEB&lt;/code&gt; (to avoid calling any API that could be monitored and suspicious)&lt;/li&gt; &#xA; &lt;li&gt;For each loaded DLL, its content on disk is read and its headers parsed. The corresponding library, residing in memory, is also parsed to identify sections, exports, etc.&lt;/li&gt; &#xA; &lt;li&gt;Relocations of the DLL are parsed and applied, by taking the base address of the corresponding loaded library into account. This allows the content of both the in-memory library and DLL originating from disk to have the exact same content (on sections where relocations are applied), and thus making the comparison reliable.&lt;/li&gt; &#xA; &lt;li&gt;Exported functions are enumerated and the first bytes of the &#34;in-memory&#34; and &#34;on-disk&#34; versions are compared. Any difference indicates an alteration that has been made after the DLL was loaded, and thus is very probably an EDR hook.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: The process can be generalized to find differences anywhere in non-writable sections and not only at the start of exported functions, for example if EDR products start to apply hooks in the middle of function :) Thus not used by the tool, this has been implemented in &lt;code&gt;findDiffsInNonWritableSections&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to bypass the monitoring performed by these hooks, multiples techniques are possible, and each has benefits and drawbacks.&lt;/p&gt; &#xA;&lt;h4&gt;Hook bypass using ... unhooking&lt;/h4&gt; &#xA;&lt;p&gt;The most intuitive method to bypass the hook-based monitoring is to remove the hooks. Since the hooks are present in memory that is reachable by the process itself, to remove a hook, the process can simply:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change the permissions on the page where the hook is located (RX -&amp;gt; RWX or RW)&lt;/li&gt; &#xA; &lt;li&gt;Write the original bytes that are known thanks to the on-disk DLL content&lt;/li&gt; &#xA; &lt;li&gt;Change back the permissions to RX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This approach is fairly simple, and can be used to remove every detected hook all at once. Performed by an offensive tool at its beginning, this allows the rest of the code to be completely unaware of the hooking mechnanism and perform normally without being monitored.&lt;/p&gt; &#xA;&lt;p&gt;However, it has two main drawbacks. The EDR is probably monitoring the use of &lt;code&gt;NtProtectVirtualMemory&lt;/code&gt;, so using it to change the permissions of the page where the hooks have been installed is (at least conceptually) a bad idea. Also, if a thread is executed by the EDR and periodically check the integrity of the hooks, this could also trigger some detection.&lt;/p&gt; &#xA;&lt;p&gt;For implementation details, check the &lt;code&gt;unhook()&lt;/code&gt; function&#39;s code path when &lt;code&gt;unhook_method&lt;/code&gt; is &lt;code&gt;UNHOOK_WITH_NTPROTECTVIRTUALMEMORY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note: for simplicity, this technique is implemented in EDRSandblast as the base technique used to &lt;em&gt;showcase&lt;/em&gt; the other bypass techniques; each of them demonstrates how to obtain an unmonitored version of &lt;code&gt;NtProtectVirtualMemory&lt;/code&gt;, but performs the same operation afterward (unhooking a specific hook).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Hook bypass using a custom trampoline&lt;/h4&gt; &#xA;&lt;p&gt;To bypass a specific hook, it is possible to simply &#34;jump over&#34; and execute the rest of the function as is. First, the original bytes of the monitored function, that have been overwritten by the EDR to install the hook, must be recovered from the DLL file. In our previous code example, this would be the bytes corresponding to the following instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;mov r10, rcx&#xA;mov eax, 50h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Identifying these bytes is a simple task since we are able to perform a clean &lt;em&gt;diff&lt;/em&gt; of both the memory and disk versions of the library, as previously described. Then, we assemble a jump instruction that is built to redirect the control flow to the code following immediately the hook, at address &lt;code&gt;NtProtectVirtualMemory + sizeof(overwritten_instructions)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;jmp NtProtectVirtualMemory+8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, we concatenate these opcodes, store them in (newly) executable memory and keep a pointer to them. This object is called a &#34;&lt;em&gt;trampoline&lt;/em&gt;&#34; and can then be used as a function pointer, strictly equivalent to the original &lt;code&gt;NtProtectVirtualMemory&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;The main benefit of this technique as for every techniques bellow, is that the hook is never erased, so any integrity check performed on the hooks by the EDR should pass. However, it requires to allocate writable then executable memory, which is typical of a shellcode allocation, thus attracting the EDR&#39;s scrutiny.&lt;/p&gt; &#xA;&lt;p&gt;For implementation details, check the &lt;code&gt;unhook()&lt;/code&gt; function&#39;s code path when &lt;code&gt;unhook_method&lt;/code&gt; is &lt;code&gt;UNHOOK_WITH_INHOUSE_NTPROTECTVIRTUALMEMORY_TRAMPOLINE&lt;/code&gt;. Please remember the technique is only showcased in our implementation and is, in the end, used to &lt;strong&gt;remove&lt;/strong&gt; hooks from memory, as every technique bellow.&lt;/p&gt; &#xA;&lt;h4&gt;Hook bypass using the own EDR&#39;s trampoline&lt;/h4&gt; &#xA;&lt;p&gt;The EDR product, in order for its hook to work, must save somewhere in memory the opcodes that it has removed. Worst (&lt;em&gt;or &#34;better&#34;, from the attacker point of view&lt;/em&gt;), to effectively use the original instructions the EDR has probably allocated itself a &lt;em&gt;trampoline&lt;/em&gt; somewhere to execute the original function after having intercepted the call.&lt;/p&gt; &#xA;&lt;p&gt;This trampoline can be searched for and used as a replacement for the hooked function, without the need to allocate executable memory, or call any API except &lt;code&gt;VirtualQuery&lt;/code&gt;, which is most likely not monitored being an innocuous function.&lt;/p&gt; &#xA;&lt;p&gt;To find the trampoline in memory, we browse the whole address space using &lt;code&gt;VirtualQuery&lt;/code&gt; looking for commited and executable memory. For each such region of memory, we scan it to look for a jump instruction that targets the address following the overwritten instructions (&lt;code&gt;NtProtectVirtualMemory+8&lt;/code&gt; in our previous example). The trampoline can then be used to call the hooked function without triggering the hook.&lt;/p&gt; &#xA;&lt;p&gt;This technique works surprisingly well as it recovers nearly all trampolines on tested EDR. For implementation details, check the &lt;code&gt;unhook()&lt;/code&gt; function&#39;s code path when &lt;code&gt;unhook_method&lt;/code&gt; is &lt;code&gt;UNHOOK_WITH_EDR_NTPROTECTVIRTUALMEMORY_TRAMPOLINE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Hook bypass using duplicate DLL&lt;/h4&gt; &#xA;&lt;p&gt;Another simple method to get access to an unmonitored version of &lt;code&gt;NtProtectVirtualMemory&lt;/code&gt; function is to load a duplicate version of the &lt;code&gt;ntdll.dll&lt;/code&gt; library into the process address space. Since two identical DLLs can be loaded in the same process, provided they have different names, we can simply copy the legitimate &lt;code&gt;ntdll.dll&lt;/code&gt; file into another location, load it using &lt;code&gt;LoadLibrary&lt;/code&gt; (or reimplement the loading process), and access the function using &lt;code&gt;GetProcAddress&lt;/code&gt; for example.&lt;/p&gt; &#xA;&lt;p&gt;This technique is very simple to understand and implement, and have a decent chance of success, since most of EDR products does not re-install hooks on newly loaded DLLs once the process is running. However, the major drawback is that copying Microsoft signed binaries under a different name is often considered as suspicious by EDR products as itself.&lt;/p&gt; &#xA;&lt;p&gt;This technique is nevertheless implemented in &lt;code&gt;EDRSandblast&lt;/code&gt;. For implementation details, check the &lt;code&gt;unhook()&lt;/code&gt; function&#39;s code path when &lt;code&gt;unhook_method&lt;/code&gt; is &lt;code&gt;UNHOOK_WITH_DUPLICATE_NTPROTECTVIRTUALMEMORY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Hook bypass using direct syscalls&lt;/h4&gt; &#xA;&lt;p&gt;In order to use system calls related functions, one program can reimplement syscalls (in assembly) in order to call the corresponding OS features without actually touching the code in &lt;code&gt;ntdll.dll&lt;/code&gt;, which might be monitored by the EDR. This completely bypasses any userland hooking done on syscall functions in &lt;code&gt;ntdll.dll&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This nevertheless has some drawbacks. First, this implies being able to know the list of syscall numbers of functions the program needs, which changes for each version of Windows. This is nevertheless mitigated by implementing multiple heuristics that are known to work in all the past versions of Windows NT (sorting &lt;code&gt;ntdll&lt;/code&gt;&#39;s&#39; &lt;code&gt;Zw*&lt;/code&gt; exports, searching for &lt;code&gt;mov rax, #syscall_number&lt;/code&gt; instruction in the associated &lt;code&gt;ntdll&lt;/code&gt; function, etc.), and checking they all return the same result (see &lt;code&gt;Syscalls.c&lt;/code&gt; for more details).&lt;/p&gt; &#xA;&lt;p&gt;Also, functions that are not technically syscalls (e.g. &lt;code&gt;LoadLibraryX&lt;/code&gt;/&lt;code&gt;LdrLoadDLL&lt;/code&gt;) could be monitored as well, and cannot simply be reimplemented using a syscall.&lt;/p&gt; &#xA;&lt;p&gt;The direct syscalls technique is implemented in EDRSandblast. As previously stated, it is only used to execute &lt;code&gt;NtProtectVirtualMemory&lt;/code&gt; safely, and remove all detected hooks.&lt;/p&gt; &#xA;&lt;p&gt;For implementation details, check the &lt;code&gt;unhook()&lt;/code&gt; function&#39;s code path when &lt;code&gt;unhook_method&lt;/code&gt; is &lt;code&gt;UNHOOK_WITH_DIRECT_SYSCALL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Vulnerable drivers exploitation&lt;/h3&gt; &#xA;&lt;p&gt;As previously stated, every action that needs a kernel memory read or write relies on a vulnerable driver to give this primitive. In EDRSanblast, adding the support for a new driver providing the read/write primitive can be &#34;easily&#34; done, only three functions need to be implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;ReadMemoryPrimitive_DRIVERNAME(SIZE_T Size, DWORD64 Address, PVOID Buffer)&lt;/code&gt; function, that copies &lt;code&gt;Size&lt;/code&gt; bytes from kernel address &lt;code&gt;Address&lt;/code&gt; to userland buffer &lt;code&gt;Buffer&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;WriteMemoryPrimitive_DRIVERNAME(SIZE_T Size, DWORD64 Address, PVOID Buffer)&lt;/code&gt; function, that copies &lt;code&gt;Size&lt;/code&gt; bytes from userland buffer &lt;code&gt;Buffer&lt;/code&gt; to kernel address &lt;code&gt;Address&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;CloseDriverHandle_DRIVERNAME()&lt;/code&gt; that ensures all handles to the driver are closed (needed before uninstall operation which is driver-agnostic, for the moment).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As an example, two drivers are currently supported by EDRSandblast, &lt;code&gt;RTCore64.sys&lt;/code&gt; (SHA256: &lt;code&gt;01AA278B07B58DC46C84BD0B1B5C8E9EE4E62EA0BF7A695862444AF32E87F1FD&lt;/code&gt;) and &lt;code&gt;DBUtils_2_3.sys&lt;/code&gt; (SHA256: &lt;code&gt;0296e2ce999e67c76352613a718e11516fe1b0efc3ffdb8918fc999dd76a73a5&lt;/code&gt;). The following code in &lt;code&gt;KernelMemoryPrimitives.h&lt;/code&gt; is to be updated if the used vulnerable driver needs to be changed, or if a new one implemented.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define RTCore 0&#xA;#define DBUtil 1&#xA;// Select the driver to use with the following #define&#xA;#define VULN_DRIVER RTCore&#xA;&#xA;#if VULN_DRIVER == RTCore&#xA;#define DEFAULT_DRIVER_FILE TEXT(&#34;RTCore64.sys&#34;)&#xA;#define CloseDriverHandle CloseDriverHandle_RTCore&#xA;#define ReadMemoryPrimitive ReadMemoryPrimitive_RTCore&#xA;#define WriteMemoryPrimitive WriteMemoryPrimitive_RTCore&#xA;#elif VULN_DRIVER == DBUtil&#xA;#define DEFAULT_DRIVER_FILE TEXT(&#34;DBUtil_2_3.sys&#34;)&#xA;#define CloseDriverHandle CloseDriverHandle_DBUtil&#xA;#define ReadMemoryPrimitive ReadMemoryPrimitive_DBUtil&#xA;#define WriteMemoryPrimitive WriteMemoryPrimitive_DBUtil&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EDR drivers and processes detection&lt;/h3&gt; &#xA;&lt;p&gt;Multiple techniques are currently used to determine if a specific driver or process belongs to an EDR product or not.&lt;/p&gt; &#xA;&lt;p&gt;First, the name of the driver can simply be used for that purpose. Indeed, Microsoft allocates specific numbers called &#34;Altitudes&#34; for all drivers that need to insert callbacks in the kernel. This allow a deterministic order in callbacks execution, independent from the registering order, but only based on the driver usage. A list of (vendors of) drivers that have reserved specific &lt;em&gt;altitude&lt;/em&gt; can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/allocated-altitudes&#34;&gt;on MSDN&lt;/a&gt;. As a consequence, a nearly comprehensive list of security driver names tied to security products is offered by Microsoft, mainly in the &#34;FSFilter Anti-Virus&#34; and &#34;FSFilter Activity Monitor&#34; lists. These lists of driver names are embedded in EDRSandblast, as well as additional contributions.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, EDR executables and DLL are more than often digitally signed using the vendors signing certificate. Thus, checking the signer of an executable or DLL associated to a process may allow to quickly identify EDR products.&lt;/p&gt; &#xA;&lt;p&gt;Also, drivers need to be directly signed by Microsoft to be allowed to be loaded in kernel space. While the driver&#39;s vendor is not directly the signer of the driver itself, it would seam that the vendor&#39;s name is still included inside an attribute of the signature; this detection technique is nevertheless yet to be investigated and implemented.&lt;/p&gt; &#xA;&lt;p&gt;Finally, when facing an EDR unknown to EDRSandblast, the best approach is to run the tool in &#34;audit&#34; mode, and check the list of drivers having registered kernel callbacks; then the driver&#39;s name can be added to the list, the tool recompiled and re-run.&lt;/p&gt; &#xA;&lt;h3&gt;RunAsPPL bypass&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Local Security Authority (LSA) Protection&lt;/code&gt; mechanism, first introduced in Windows 8.1 and Windows Server 2012 R2, leverage the &lt;code&gt;Protected Process Light (PPL)&lt;/code&gt; technology to restrict access to the &lt;code&gt;LSASS&lt;/code&gt; process. The &lt;code&gt;PPL&lt;/code&gt; protection regulates and restricts operations, such as memory injection or memory dumping of protected processes, even from a process holding the &lt;code&gt;SeDebugPrivilege&lt;/code&gt; privilege. Under the process protection model, only processes running with higher protection levels can perform operations on protected processes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;_EPROCESS&lt;/code&gt; structure, used by the Windows kernel to represent a process in kernel memory, includes a &lt;code&gt;_PS_PROTECTION&lt;/code&gt; field defining the protection level of a process through its &lt;code&gt;Type&lt;/code&gt; (&lt;code&gt;_PS_PROTECTED_TYPE&lt;/code&gt;) and &lt;code&gt;Signer&lt;/code&gt; (&lt;code&gt;_PS_PROTECTED_SIGNER&lt;/code&gt;) attributes.&lt;/p&gt; &#xA;&lt;p&gt;By writing in kernel memory, the EDRSandblast process is able to upgrade its own protection level to &lt;code&gt;PsProtectedSignerWinTcb-Light&lt;/code&gt;. This level is sufficient to dump the &lt;code&gt;LSASS&lt;/code&gt; process memory, since it &#34;dominates&#34; to &lt;code&gt;PsProtectedSignerLsa-Light&lt;/code&gt;, the protection level of the &lt;code&gt;LSASS&lt;/code&gt; process running with the &lt;code&gt;RunAsPPL&lt;/code&gt; mechanism.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;EDRSandBlast&lt;/code&gt; implements the self protection as follow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open a handle to the current process&lt;/li&gt; &#xA; &lt;li&gt;leak all system handles using &lt;code&gt;NtQuerySystemInformation&lt;/code&gt; to find the opened handle on the current process, and the address of the current process&#39; &lt;code&gt;EPROCESS&lt;/code&gt; structure in kernel memory.&lt;/li&gt; &#xA; &lt;li&gt;use the arbitrary read / write vulnerability of the &lt;code&gt;Micro-Star MSI Afterburner&lt;/code&gt; driver to overwrite the &lt;code&gt;_PS_PROTECTION&lt;/code&gt; field of the current process in kernel memory. The offsets of the &lt;code&gt;_PS_PROTECTION&lt;/code&gt; field relative to the &lt;code&gt;EPROCESS&lt;/code&gt; structure (defined by the &lt;code&gt;ntoskrnl&lt;/code&gt; version in use) are computed in the &lt;code&gt;NtoskrnlOffsets.csv&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Credential Guard bypass&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft &lt;code&gt;Credential Guard&lt;/code&gt; is a virtualization-based isolation technology, introduced in Microsoft&#39;s &lt;code&gt;Windows 10 (Enterprise edition)&lt;/code&gt; which prevents direct access to the credentials stored in the &lt;code&gt;LSASS&lt;/code&gt; process.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;Credentials Guard&lt;/code&gt; is activated, an &lt;code&gt;LSAIso&lt;/code&gt; (&lt;em&gt;LSA Isolated&lt;/em&gt;) process is created in &lt;code&gt;Virtual Secure Mode&lt;/code&gt;, a feature that leverages the virtualization extensions of the CPU to provide added security of data in memory. Access to the &lt;code&gt;LSAIso&lt;/code&gt; process are restricted even for an access with the &lt;code&gt;NT AUTHORITY\SYSTEM&lt;/code&gt; security context. When processing a hash, the &lt;code&gt;LSA&lt;/code&gt; process perform a &lt;code&gt;RPC&lt;/code&gt; call to the &lt;code&gt;LSAIso&lt;/code&gt; process, and waits for the &lt;code&gt;LSAIso&lt;/code&gt; result to continue. Thus, the &lt;code&gt;LSASS&lt;/code&gt; process won&#39;t contain any secrets and in place will store &lt;code&gt;LSA Isolated Data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As stated in original research conducted by &lt;code&gt;N4kedTurtle&lt;/code&gt;: &#34;&lt;code&gt;Wdigest&lt;/code&gt; can be enabled on a system with Credential Guard by patching the values of &lt;code&gt;g_fParameter_useLogonCredential&lt;/code&gt; and &lt;code&gt;g_IsCredGuardEnabled&lt;/code&gt; in memory&#34;. The activation of &lt;code&gt;Wdigest&lt;/code&gt; will result in cleartext credentials being stored in &lt;code&gt;LSASS&lt;/code&gt; memory for any new interactive logons (without requiring a reboot of the system). Refer to the &lt;a href=&#34;https://teamhydra.blog/2020/08/25/bypassing-credential-guard/&#34;&gt;original research blog post&lt;/a&gt; for more details on this technique.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;EDRSandBlast&lt;/code&gt; simply make the original PoC a little more opsec friendly and provide support for a number of &lt;code&gt;wdigest.dll&lt;/code&gt; versions (through computed offsets for &lt;code&gt;g_fParameter_useLogonCredential&lt;/code&gt; and &lt;code&gt;g_IsCredGuardEnabled&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Offsets retrieval&lt;/h3&gt; &#xA;&lt;p&gt;In order to reliably perform kernel monitoring bypass operations, EDRSandblast needs to know exactly where to read and write kernel memory. This is done using offsets of global variables inside the targeted image (ntoskrnl.exe, wdigest.dll), as well as offset of specific fields in structures whose definitions are published by Microsoft in symbol files. These offsets are specific to each build of the targeted images, and must be gathered at least once for a specific platform version.&lt;/p&gt; &#xA;&lt;p&gt;The choice of using &#34;hardcoded&#34; offsets instead of pattern searches to locate the structures and variables used by EDRSandblast is justified by the fact that the undocumented APIs responsible for Kernel callbacks addition / removal are subject to change and that any attempt to read or write Kernel memory at the wrong address may (and often will) result in a &lt;code&gt;Bug Check&lt;/code&gt; (&lt;code&gt;Blue Screen of Death&lt;/code&gt;). A machine crash is not acceptable in both red-teaming and normal penetration testing scenarios, since a machine that crashes is highly visible by defenders, and will lose any credentials that was still in memory at the moment of the attack.&lt;/p&gt; &#xA;&lt;p&gt;To retrieve offsets for each specific version of Windows, two approaches are implemented.&lt;/p&gt; &#xA;&lt;h4&gt;Manual offset retrieval&lt;/h4&gt; &#xA;&lt;p&gt;The required &lt;code&gt;ntoskrnl.exe&lt;/code&gt; and &lt;code&gt;wdigest.dll&lt;/code&gt; offsets can be extracted using the provided &lt;code&gt;ExtractOffsets.py&lt;/code&gt; Python script, that relies on &lt;code&gt;radare2&lt;/code&gt; and &lt;code&gt;r2pipe&lt;/code&gt; to download and parse symbols from PDB files, and extracted the needed offsets from them. Offsets are then stored in CSV files for later use by EDRSandblast.&lt;/p&gt; &#xA;&lt;p&gt;In order to support out-of-the-box a wide range of Windows builds, many versions of the &lt;code&gt;ntoskrnl.exe&lt;/code&gt; and &lt;code&gt;wdigest.dll&lt;/code&gt; binaries are referenced by &lt;a href=&#34;https://winbindex.m417z.com/&#34;&gt;Winbindex&lt;/a&gt; , and can be automatically downloaded (and their offsets extracted) by the &lt;code&gt;ExtractOffsets.py&lt;/code&gt;. This allows to extract offsets from nearly all files that were ever published in Windows update packages (to date 450+ &lt;code&gt;ntoskrnl.exe&lt;/code&gt; and 30+ &lt;code&gt;wdigest.dll&lt;/code&gt; versions are available and pre-computed).&lt;/p&gt; &#xA;&lt;h4&gt;Automatic offsets retrieval and update&lt;/h4&gt; &#xA;&lt;p&gt;An additionnal option has been implemented in &lt;code&gt;EDRSandBlast&lt;/code&gt; to allow the program to download the needed &lt;code&gt;.pdb&lt;/code&gt; files itself from Microsoft Symbol Server, extract the required offsets, and even update the corresponding &lt;code&gt;.csv&lt;/code&gt; files if present.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;--internet&lt;/code&gt; option make the tool execution much simpler, while introducing an additionnal OpSec risk, since a &lt;code&gt;.pdb&lt;/code&gt; file is downloaded and dropped on disk during the process. This is required by the &lt;code&gt;dbghelp.dll&lt;/code&gt; functions used to parse the symbols database ; however, full in-memory PDB parsing might be implemented in the future to lift this requirement and reduce the tool&#39;s footprint.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The vulnerable &lt;code&gt;RTCore64.sys&lt;/code&gt; driver can be retrieved at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://download-eu2.guru3d.com/afterburner/%5BGuru3D.com%5D-MSIAfterburnerSetup462Beta2.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: EDRSandblast.exe [-h | --help] [-v | --verbose] &amp;lt;audit | dump | cmd | credguard&amp;gt; [--usermode [--unhook-method &amp;lt;N&amp;gt;]] [--kernelmode] [--dont-unload-driver] [--dont-restore-callbacks] [--driver &amp;lt;RTCore64.sys&amp;gt;] [--service &amp;lt;SERVICE_NAME&amp;gt;] [--nt-offsets &amp;lt;NtoskrnlOffsets.csv&amp;gt;] [--wdigest-offsets &amp;lt;WdigestOffsets.csv&amp;gt;] [--add-dll &amp;lt;dll name or path&amp;gt;]* [-o | --dump-output &amp;lt;DUMP_FILE&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;-h | --help             Show this help message and exit.&#xA;-v | --verbose          Enable a more verbose output.&#xA;&#xA;Actions mode:&#xA;&#xA;        audit           Display the user-land hooks and / or Kernel callbacks without taking actions.&#xA;        dump            Dump the LSASS process, by default as &#39;lsass&#39; in the current directory or at the&#xA;                        specified file using -o | --output &amp;lt;DUMP_FILE&amp;gt;.&#xA;        cmd             Open a cmd.exe prompt.&#xA;        credguard       Patch the LSASS process&#39; memory to enable Wdigest cleartext passwords caching even if&#xA;                        Credential Guard is enabled on the host. No kernel-land actions required.&#xA;&#xA;--usermode              Perform user-land operations (DLL unhooking).&#xA;--kernelmode            Perform kernel-land operations (Kernel callbacks removal and ETW TI disabling).&#xA;&#xA;--unhook-method &amp;lt;N&amp;gt;&#xA;   Choose the userland un-hooking technique, from the following:&#xA;&#xA;        1 (Default)     Uses the (probably monitored) NtProtectVirtualMemory function in ntdll to remove all&#xA;                        present userland hooks.&#xA;        2               Constructs a &#39;unhooked&#39; (i.e. unmonitored) version of NtProtectVirtualMemory, by&#xA;                        allocating an executable trampoline jumping over the hook, and remove all present&#xA;                        userland hooks.&#xA;        3               Searches for an existing trampoline allocated by the EDR itself, to get an &#39;unhooked&#39;&#xA;                        (i.e. unmonitored) version of NtProtectVirtualMemory, and remove all present userland&#xA;                        hooks.&#xA;        4               Loads an additional version of ntdll library into memory, and use the (hopefully&#xA;                        unmonitored) version of NtProtectVirtualMemory present in this library to remove all&#xA;                        present userland hooks.&#xA;        5               Allocates a shellcode that uses a direct syscall to call NtProtectVirtualMemory,&#xA;                        and uses it to remove all detected hooks&#xA;&#xA;Other options:&#xA;&#xA;--dont-unload-driver                    Keep the vulnerable driver installed on the host&#xA;                                        Default to automatically unsinstall the driver.&#xA;--dont-restore-callbacks                Do not restore the EDR drivers&#39; Kernel Callbacks that were removed.&#xA;                                        Default to restore the callbacks.&#xA;&#xA;--driver &amp;lt;RTCore64.sys&amp;gt;                 Path to the vulnerable driver file.&#xA;                                        Default to &#39;RTCore64.sys&#39; in the current directory.&#xA;--service &amp;lt;SERVICE_NAME&amp;gt;                Name of the vulnerable service to intall / start.&#xA;&#xA;--nt-offsets &amp;lt;NtoskrnlOffsets.csv&amp;gt;      Path to the CSV file containing the required ntoskrnl.exe&#39;s offsets.&#xA;                                        Default to &#39;NtoskrnlOffsets.csv&#39; in the current directory.&#xA;--wdigest-offsets &amp;lt;WdigestOffsets.csv&amp;gt;  Path to the CSV file containing the required wdigest.dll&#39;s offsets&#xA;                                        (only for the &#39;credguard&#39; mode).&#xA;                                        Default to &#39;WdigestOffsets.csv&#39; in the current directory.&#xA;&#xA;--add-dll &amp;lt;dll name or path&amp;gt;            Loads arbitrary libraries into the process&#39; address space, before starting&#xA;                                        anything. This can be useful to audit userland hooking for DLL that are not&#xA;                                        loaded by default by this program. Use this option multiple times to load&#xA;                                        multiple DLLs all at once.&#xA;                                        Example of interesting DLLs to look at: user32.dll, ole32.dll, crypt32.dll,&#xA;                                        samcli.dll, winhttp.dll, urlmon.dll, secur32.dll, shell32.dll...&#xA;&#xA;-o | --output &amp;lt;DUMP_FILE&amp;gt;               Output path to the dump file that will be generated by the &#39;dump&#39; mode.&#xA;                                        Default to &#39;lsass&#39; in the current directory.&#xA;&#xA;-i | --internet                         Enables automatic symbols download from Microsoft Symbol Server&#xA;                                        If a corresponding *Offsets.csv file exists, appends the downloaded offsets to the file for later use&#xA;                                        OpSec warning: downloads and drops on disk a PDB file for ntoskrnl.exe and/or wdigest.dll&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;EDRSandBlast&lt;/code&gt; (x64 only) was built on Visual Studio 2019 (Windows SDK Version: &lt;code&gt;10.0.19041.0&lt;/code&gt; and Plateform Toolset: &lt;code&gt;Visual Studio 2019 (v142)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;ExtractOffsets.py usage&lt;/h3&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;ExtractOffsets.py&lt;/code&gt; has only be tested on Windows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Installation of Python dependencies&#xA;pip.exe install -m .\requirements.txt&#xA;&#xA;# Script usage&#xA;ExtractOffsets.py [-h] -i INPUT [-o OUTPUT] [-d] mode&#xA;&#xA;positional arguments:&#xA;  mode                  ntoskrnl or wdigest. Mode to download and extract offsets for either ntoskrnl or wdigest&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -i INPUT, --input INPUT&#xA;                        Single file or directory containing ntoskrnl.exe / wdigest.dll to extract offsets from.&#xA;                        If in download mode, the PE downloaded from MS symbols servers will be placed in this folder.&#xA;  -o OUTPUT, --output OUTPUT&#xA;                        CSV file to write offsets to. If the specified file already exists, only new ntoskrnl versions will be&#xA;                        downloaded / analyzed.&#xA;                        Defaults to NtoskrnlOffsets.csv / WdigestOffsets.csv in the current folder.&#xA;  -d, --download         Flag to download the PE from Microsoft servers using list of versions from winbindex.m417z.com.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Detection&lt;/h2&gt; &#xA;&lt;p&gt;From the defender (EDR vendor, Microsoft, SOC analysts looking at EDR&#39;s telemetry, ...) point of view, multiple indicators can be used to detect or prevent this kind of techniques.&lt;/p&gt; &#xA;&lt;h3&gt;Driver whitelisting&lt;/h3&gt; &#xA;&lt;p&gt;Since every action performed by the tool in kernel-mode memory relies on a vulnerable driver to read/write arbitrary content, driver loading events should be heaviliy scrutinized by EDR product (or SOC analysts), and raise an alert at any uncommon driver loading, or even block known vulnerable drivers. This latter approach is even &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-driver-block-rules&#34;&gt;recommended by Microsoft themselves&lt;/a&gt;: any HVCI (&lt;em&gt;Hypervisor-protected code integrity&lt;/em&gt;) enabled Windows device embeds a drivers blocklist, and this will be progressively become a default behaviour on Windows (it already is on Windows 11).&lt;/p&gt; &#xA;&lt;h3&gt;Kernel-memory integrity checks&lt;/h3&gt; &#xA;&lt;p&gt;Since an attacker could still use an unknown vulnerable driver to perform the same actions in memory, the EDR driver could periodically check that its kernel callbacks are still registered, directly by inspecting kernel memory (like this tool does), or simply by triggering events (process creation, thread creation, image loading, etc.) and checking the callback functions are indeed called by the executive kernel.&lt;/p&gt; &#xA;&lt;p&gt;As a side note, this type of data structure could be protected via the recent &lt;a href=&#34;https://www.microsoft.com/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/&#34;&gt;Kernel Data Protection (KDP)&lt;/a&gt; mechanism, which relies on Virtual Based Security, in order to make the kernel callbacks array non-writable without calling the right APIs.&lt;/p&gt; &#xA;&lt;p&gt;The same logic could apply to sensitive ETW variables such as the &lt;code&gt;ProviderEnableInfo&lt;/code&gt;, abused by this tool to disable the ETW Threat Intelligence events generation.&lt;/p&gt; &#xA;&lt;h3&gt;User-mode detection&lt;/h3&gt; &#xA;&lt;p&gt;The first indicator that a process is actively trying to evade user-land hooking is the file accesses to each DLL corresponding to loaded modules; in a normal execution, a userland process rarely needs to read DLL files outside of a &lt;code&gt;LoadLibrary&lt;/code&gt; call, especially &lt;code&gt;ntdll.dll&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to protect API hooking from being bypassed, EDR products could periodically check that hooks are not altered in memory, inside each monitored process.&lt;/p&gt; &#xA;&lt;p&gt;Finally, to detect hooking bypass (abusing a trampoline, using direct syscalls, etc.) that does not imply the hooks removal, EDR products could potentially rely on kernel callbacks associated to the abused syscalls (ex. &lt;code&gt;PsCreateProcessNotifyRoutine&lt;/code&gt; for &lt;code&gt;NtCreateProcess&lt;/code&gt; syscall, &lt;code&gt;ObRegisterCallbacks&lt;/code&gt; for &lt;code&gt;NtOpenProcess&lt;/code&gt; syscall, etc.), and perform user-mode call-stack analysis in order to determine if the syscall was triggered from a normal path (&lt;code&gt;kernel32.dll&lt;/code&gt; -&amp;gt; &lt;code&gt;ntdll.dll&lt;/code&gt; -&amp;gt; syscall) or an abnormal one (ex. &lt;code&gt;program.exe&lt;/code&gt; -&amp;gt; direct syscall).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Kernel callbacks enumeration and removal: &lt;a href=&#34;https://github.com/br-sn/CheekyBlinder&#34;&gt;https://github.com/br-sn/CheekyBlinder&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Kernel memory Read / Write primitives through the vulnerable &lt;code&gt;Micro-Star MSI Afterburner&lt;/code&gt; driver: &lt;a href=&#34;https://github.com/Barakat/CVE-2019-16098/&#34;&gt;https://github.com/Barakat/CVE-2019-16098/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disabling of the ETW Threat Intelligence provider: &lt;a href=&#34;https://public.cnotools.studio/bring-your-own-vulnerable-kernel-driver-byovkd/exploits/data-only-attack-neutralizing-etwti-provider&#34;&gt;https://public.cnotools.studio/bring-your-own-vulnerable-kernel-driver-byovkd/exploits/data-only-attack-neutralizing-etwti-provider&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Driver install / uninstall: &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz&#34;&gt;https://github.com/gentilkiwi/mimikatz&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initial list of EDR drivers names: &lt;a href=&#34;https://github.com/SadProcessor/SomeStuff/raw/master/Invoke-EDRCheck.ps1&#34;&gt;https://github.com/SadProcessor/SomeStuff/blob/master/Invoke-EDRCheck.ps1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Credential Guard bypass by re-enabling &lt;code&gt;Wdigest&lt;/code&gt; through &lt;code&gt;LSASS&lt;/code&gt; memory patching: &lt;a href=&#34;https://teamhydra.blog/2020/08/25/bypassing-credential-guard/&#34;&gt;https://teamhydra.blog/2020/08/25/bypassing-credential-guard/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Qazeer/&#34;&gt;Thomas DIOT (Qazeer)&lt;/a&gt; &lt;a href=&#34;https://github.com/themaks&#34;&gt;Maxime MEIGNAN (themaks)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;CC BY 4.0 licence - &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;https://creativecommons.org/licenses/by/4.0/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nbs-system/naxsi</title>
    <updated>2022-10-23T01:32:22Z</updated>
    <id>tag:github.com,2022-10-23:/nbs-system/naxsi</id>
    <link href="https://github.com/nbs-system/naxsi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NAXSI is an open-source, high performance, low rules maintenance WAF for NGINX&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nbs-system/naxsi/master/logo.png&#34; alt=&#34;naxsi&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/projects/1883&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/1883/badge.svg?sanitize=true&#34; alt=&#34;coverity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/nbs-system/naxsi&#34;&gt;&lt;img src=&#34;https://travis-ci.org/nbs-system/naxsi.svg?branch=master&#34; alt=&#34;travis-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/nbs-system/naxsi?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/nbs-system/naxsi/badge.svg?branch=master&#34; alt=&#34;coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://codecov.io/github/nbs-system/naxsi?branch=master&#34;&gt;&lt;img src=&#34;http://codecov.io/github/nbs-system/naxsi/coverage.svg?branch=master&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/740&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/740/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/nbs-system/naxsi&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/nwjs/nw.js.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;We need your help&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheet/viewform?formkey=dG9UWDFuTEhiWWt4UF9fZEtwWFVJUlE6MQ&#34;&gt;Please fill in this little feedback survey&lt;/a&gt;, 2 minutes of your time, great help for us !&lt;/p&gt; &#xA;&lt;h2&gt;What is Naxsi?&lt;/h2&gt; &#xA;&lt;p&gt;NAXSI means &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; Anti &lt;a href=&#34;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&#34;&gt;XSS&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.owasp.org/index.php/SQL_injection&#34;&gt;SQL Injection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Technically, it is a third party nginx module, available as a package for many UNIX-like platforms. This module, by default, reads a small subset of &lt;a href=&#34;https://github.com/nbs-system/naxsi/raw/master/naxsi_config/naxsi_core.rules&#34;&gt;simple (and readable) rules&lt;/a&gt; containing 99% of known patterns involved in website vulnerabilities. For example, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;drop&lt;/code&gt; are not supposed to be part of a URI.&lt;/p&gt; &#xA;&lt;p&gt;Being very simple, those patterns may match legitimate queries, it is the Naxsi&#39;s administrator duty to add specific rules that will whitelist legitimate behaviours. The administrator can either add whitelists manually by analyzing nginx&#39;s error log, or (recommended) start the project with an intensive auto-learning phase that will automatically generate whitelisting rules regarding a website&#39;s behaviour.&lt;/p&gt; &#xA;&lt;p&gt;In short, Naxsi behaves like a DROP-by-default firewall, the only task is to add required ACCEPT rules for the target website to work properly.&lt;/p&gt; &#xA;&lt;h2&gt;Why is it different?&lt;/h2&gt; &#xA;&lt;p&gt;Contrary to most Web Application Firewalls, Naxsi doesn&#39;t rely on a signature base like an antivirus, and thus cannot be circumvented by an &#34;unknown&#34; attack pattern. Naxsi is &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;Free software&lt;/a&gt; (as in freedom) and free (as in free beer) to use.&lt;/p&gt; &#xA;&lt;h2&gt;What does it run on?&lt;/h2&gt; &#xA;&lt;p&gt;Naxsi should be compatible with any nginx version.&lt;/p&gt; &#xA;&lt;p&gt;It depends on &lt;code&gt;libpcre&lt;/code&gt; for its regexp support, and is reported to work great on NetBSD, FreeBSD, OpenBSD, Debian, Ubuntu and CentOS.&lt;/p&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/nbs-system/naxsi/wiki&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some &lt;a href=&#34;https://github.com/nbs-system/naxsi-rules&#34;&gt;rules&lt;/a&gt; for mainstream software&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/nbs-system/naxsi/tree/master/nxapi&#34;&gt;nxapi/nxtool&lt;/a&gt; to generate rules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img alt=&#34;nxapi-dashboard logo&#34; src=&#34;https://raw.githubusercontent.com/wiki/nbs-system/naxsi/Images/kibana.png&#34; align=&#34;center&#34;&gt; &#xA;&lt;h2&gt;Security issues&lt;/h2&gt; &#xA;&lt;p&gt;If you find a security issue, please send us a mail to the security user, on nbs-system.com, using the gpg key 498C46FF087EDC36E7EAF9D445414A82A9B22D78:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----&#xA;&#xA;mQENBFnKHhoBCADaOa0MKEqRy0h2ohIzczblzkMQCbU9oD1HwJ1VkYnn7TGW2iKi&#xA;NISxisExIXpy2Bn/pA27GiV0V/Do3NL6D9r0oOCrGR27muGM0N/dk9UMv7MWw8zv&#xA;K8cO+Sa28s0cAv7r2ogUJj5YOo8D4wHEpE8424TE89V9+Qg/SaFCxKoELFP0c7wu&#xA;mtsm0PnL65piZ1EB7lQo2gxg+8AV45MD1Y2rREMKUoZE23X+nXKsmEh9BFEPaU5M&#xA;7WQp0NasqeMNoGhwfw9ttVAeLhkEkaTjW1PkNRIb7vrtV9KVb5uKucflfbOnDlzu&#xA;tQ9U3tYto0mcSCRchAClfEmoSi/0mKyb5N6ZABEBAAG0NVNlY3VyaXR5IHRlYW0g&#xA;b2YgTkJTIFN5c3RlbSA8c2VjdXJpdHlAbmJzLXN5c3RlbS5jb20+iQE3BBMBCAAh&#xA;BQJZyh4aAhsDBQsJCAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEEVBSoKpsi14jy0H&#xA;/1/XB9THhvmG0ow81sld2Zx8qhnNed8VvYDS6mEjpDWNVPxENwDbnakEjisq1Hrb&#xA;2UQPYCyQ5dekPNFVwQHIGXkX0eb1Ank+4esBJuEpQ2985tgNhJy5ZX+Imb5C8nZC&#xA;90uYSN1UUg559nUsFeElOXSEH6tIXK/TvjsvMYoi2Ukl6lb7PbIU2fjLY9Iqv3QY&#xA;32p8/Bl1fVKWbXOk0HDgJ6zA3Kr56QhZOLBkxjOa2XAnnIE76jZxUJ9qPCwWd1vW&#xA;GFxtx1Y+eZriqHiC9CPe6aBWcIHaTXSu1WBbXrFu8/eCWw243Rxm8l9wgA/a7VWq&#xA;WBfO45IhJUwh95naRpw8/4a5AQ0EWcoeGgEIAJtzSyyzfn2RX+BsyoRFANUpIgrV&#xA;/9eohYQVNqK3AFthmq7Kjmt4+hszF5+0wCFmWwYqGnqk1/dsWmqpkXsJldEn6oPJ&#xA;Bng+Dc67Yki2dR3TroAf95UmI08fhyM7TMXp8m46BPRRMzPNwalEeEm49Oclmfxb&#xA;JsWWCChWVLWGz2xgPEAv3fPHqus7Rwz/WIl53l/qy1Wf0ewmjRpVEfnEMKBExtBK&#xA;4kRxQ40LzUZ1SfpyGc3nMbswhevT7/klqrdJdCnlu67Y/IfRGxGZuNj1n1Dib3Hx&#xA;zTBHo3Y2R3BB93Ix8dkbLaxLqFbOYVdijCgJklqUWhx7btpQ2xnZyzyCMuUAEQEA&#xA;AYkBHwQYAQgACQUCWcoeGgIbDAAKCRBFQUqCqbIteFRvB/9u3Mae8n8ELrJKOn+P&#xA;PEbWjutObIuTplvY4QcbnNb9dsgsKryamp4CFJsA5XuitPpC31GDMXBZO5/LLOuH&#xA;HoMaXFJdic0NToL/3REhu+aZkNIU6S/iaPRNVhkSV4lwQsvncz+nBaiDUJjyfJm2&#xA;kEjVcRTM8yqzcNo/9Gn0ts+XCUqRj7+S1M4Bj3NySoO/w2n+7OLbIAj+wQZcj3Gf&#xA;5QhBYaY4YaFxrJE0IZxyXGHw8xhKR6AN+u4TO7LRCW+cWV/sHWir1MXieJoEG8+R&#xA;W/BhrB0Rz5uxOXMoGCCD2TUiHq7zpuHGnYFVmAnHQZaaQxXve4VrcmznxgpV8lpW&#xA;mZug&#xA;=+eIv&#xA;-----END PGP PUBLIC KEY BLOCK-----&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>