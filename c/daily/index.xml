<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-11T01:22:53Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flowyroll/downfall</title>
    <updated>2023-08-11T01:22:53Z</updated>
    <id>tag:github.com,2023-08-11:/flowyroll/downfall</id>
    <link href="https://github.com/flowyroll/downfall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>nakst/gf</title>
    <updated>2023-08-11T01:22:53Z</updated>
    <id>tag:github.com,2023-08-11:/nakst/gf</id>
    <link href="https://github.com/nakst/gf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A GDB frontend for Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;gf&lt;/strong&gt; â€“ A GDB Frontend&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/nakst/gf/ci.yml?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/gf2.png&#34; alt=&#34;Screenshot of the debugger&#39;s interface, showing the source view, breakpoints list, call stack, bitmap viewer, and command prompt.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/gf1.png&#34; alt=&#34;Another screenshot, showing the watch window and different color scheme.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/gf3.png&#34; alt=&#34;Another screenshot, showing the disassembly and register windows.&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Download this project&#39;s source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/nakst/gf.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And compile the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please read the rest of this file to learn about using and configuring &lt;code&gt;gf&lt;/code&gt;. If you&#39;re new to GDB, see &lt;a href=&#34;https://handmade.network/forums/articles/t/2883-gdb&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can run the application with &lt;code&gt;./gf2&lt;/code&gt;. Any additional command line arguments passed to &lt;code&gt;gf&lt;/code&gt; will be forwarded to GDB.&lt;/li&gt; &#xA; &lt;li&gt;Press Ctrl+Shift+P to synchronize your working directory with GDB after you start your target executable. This is necessary if you open &lt;code&gt;gf&lt;/code&gt; in a different directory to the one you compile in.&lt;/li&gt; &#xA; &lt;li&gt;To view RGBA bitmaps, select the &lt;code&gt;Data&lt;/code&gt; tab and then select &lt;code&gt;Add bitmap...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ctrl+Click a line in the source view to run &#34;until&#34; that line. Shift+Click a line in the source view to skip to it without executing the code in between.&lt;/li&gt; &#xA; &lt;li&gt;Press Shift+F10 to step out of a block, and press Shift+F11 to step out a function.&lt;/li&gt; &#xA; &lt;li&gt;Press Tab while entering a watch expression to auto-complete it.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;/&lt;/code&gt; with a watch expression highlighted to change the format specifier. For example, &lt;code&gt;/x&lt;/code&gt; switches to hexadecimal view.&lt;/li&gt; &#xA; &lt;li&gt;Press backtick to enter line inspect mode. This mode evaluates all expressions on the current line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;On startup, settings are loaded from &lt;code&gt;~/.config/gf2_config.ini&lt;/code&gt;, followed by &lt;code&gt;.project.gf&lt;/code&gt;. This is an INI-style file.&lt;/p&gt; &#xA;&lt;h3&gt;GDB configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can pass additional arguments to GDB in the &lt;code&gt;[gdb]&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;argument=-nx&#xA;argument=-ex record&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the location of the GDB executable. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;path=/home/a/opt/gdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can direct all output from GDB to be sent to the &#34;Log&#34; window, if you have one in your layout string. This will work even if you haven&#39;t setup a log pipe. This can be used to view the stderr output from your target dynamically as it is running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[gdb]&#xA;log_all_output=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable the confirmation dialogs for the kill (F3) and connect (F4) commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;confirm_command_kill=0&#xA;confirm_command_connect=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom keyboard shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;Keyboard shortcuts are placed in the &lt;code&gt;[shortcuts]&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[shortcuts]&#xA;Ctrl+I=print i&#xA;Ctrl+Shift+F10=reverse-next&#xA;Ctrl+Shift+F11=reverse-step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any standard GDB command, or any of the commands listed in &#34;Special commands&#34; below.&lt;/p&gt; &#xA;&lt;h3&gt;User interface&lt;/h3&gt; &#xA;&lt;p&gt;You can change the font and user interface scaling in the &lt;code&gt;[ui]&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[ui]&#xA;scale=1.5&#xA;font_path=/usr/share/fonts/TTF/DejaVuSansMono.ttf&#xA;font_size_interface=17&#xA;font_size_code=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the font, FreeType must have been available when you compiled gf. You can enable subpixel font rendering by recompiling with &lt;code&gt;extra_flags=-DUI_FREETYPE_SUBPIXEL ./build.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also configure the interface layout, with the &lt;code&gt;layout&lt;/code&gt; parameter. Use &lt;code&gt;h(position,left,right)&lt;/code&gt; to create a horizontal split, &lt;code&gt;v(position,left,right)&lt;/code&gt; to create a vertical split, and &lt;code&gt;t(...)&lt;/code&gt; to create a tab pane. This value should not contain any whitespace. Please note this value is not validated, so make sure it is formatted correctly!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;layout=h(75,v(75,Source,Console),v(50,t(Watch,Breakpoints,Commands,Struct,Exe),t(Stack,Files,Registers,Data,Thread))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB: Horizontal and vertical splits must have exactly two children.&lt;/strong&gt; Instead, you can nest them to create more complex layouts.&lt;/p&gt; &#xA;&lt;p&gt;You can maximize the window at startup with &lt;code&gt;maximize=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can request for the expressions in the watch window to be saved and restored by setting &lt;code&gt;restore_watch_window=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;You can change the theme in the &lt;code&gt;theme&lt;/code&gt; section. See &lt;a href=&#34;https://github.com/nakst/gf/wiki/Themes&#34;&gt;https://github.com/nakst/gf/wiki/Themes&lt;/a&gt; for a list of examples.&lt;/p&gt; &#xA;&lt;h3&gt;Preset commands&lt;/h3&gt; &#xA;&lt;p&gt;You can create a list of quickly accessible commands, available in the &#34;Commands&#34; tab in the UI. Separate individual commands using a semicolon. Each command in the list is run one after another; to run the final command asynchronously, put a &lt;code&gt;&amp;amp;&lt;/code&gt; at the end. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[commands]&#xA;Compile=shell gcc -o bin/app src/main.c&#xA;Run normal=file bin/app;run&amp;amp;&#xA;Run tests=file bin/app;run test_cases.txt&amp;amp;&#xA;Set breakpoints=b main;b LoadFile;b AssertionFailure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any standard GDB command, or any of the commands listed in &#34;Special commands&#34; below.&lt;/p&gt; &#xA;&lt;h3&gt;Vim integration&lt;/h3&gt; &#xA;&lt;p&gt;You can change the server name with the &lt;code&gt;server_name&lt;/code&gt; key in the &lt;code&gt;vim&lt;/code&gt; section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[vim]&#xA;server_name=MyVimServer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Control pipe&lt;/h2&gt; &#xA;&lt;p&gt;You can change the loaded file and line by sending commands to the control pipe.&lt;/p&gt; &#xA;&lt;p&gt;First, you must set the location of the control pipe. In the &lt;code&gt;[pipe]&lt;/code&gt; section of the configuration file, set the &lt;code&gt;control&lt;/code&gt; key to the absolute path where you want the control pipe to be.&lt;/p&gt; &#xA;&lt;p&gt;Then, you can send commands to the pipe. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Load the specified file (must be a full path).&#xA;echo f /home/a/test.c &amp;gt; /home/a/control_pipe.dat&#xA;&#xA;# Go to line 123.&#xA;echo l 123 &amp;gt; /home/a/control_pipe.dat&#xA;&#xA;# Send a GDB command.&#xA;echo c file myapp &amp;gt; /home/a/control_pipe.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be used for text editor integration.&lt;/p&gt; &#xA;&lt;h2&gt;Log window&lt;/h2&gt; &#xA;&lt;p&gt;You can show messages send to a pipe using the log window.&lt;/p&gt; &#xA;&lt;p&gt;First, you must set the location of the log pipe. In the &lt;code&gt;[pipe]&lt;/code&gt; section of the configuration file, set the &lt;code&gt;log&lt;/code&gt; key to the absolute path where you want the log pipe to be. Next, you must add the &#34;Log&#34; window somewhere in your layout string (see the &#34;User interface&#34; section above). Once configured, you can then send messages to the pipe and they will appear in the log window.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to send messages to the pipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define LOG(...) do { fprintf(logFile, __VA_ARGS__); fflush(logFile); } while (0)&#xA;#define LOG_OPEN(path) logFile = fopen(path, &#34;w&#34;)&#xA;FILE *logFile;&#xA;&#xA;...&#xA;&#xA;LOG_OPEN(&#34;...&#34;);&#xA;LOG(&#34;Hello, world!\n&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special commands&lt;/h2&gt; &#xA;&lt;h3&gt;gf-step&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-step&lt;/code&gt; either steps a single line (&lt;code&gt;step&lt;/code&gt;) or single instruction (&lt;code&gt;stepi&lt;/code&gt;), depending whether disassembly view is active.&lt;/p&gt; &#xA;&lt;h3&gt;gf-next&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-next&lt;/code&gt; either steps over a single line (&lt;code&gt;next&lt;/code&gt;) or single instruction (&lt;code&gt;nexti&lt;/code&gt;), depending whether disassembly view is active.&lt;/p&gt; &#xA;&lt;h3&gt;gf-step-out-of-block&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-step-out-of-block&lt;/code&gt; steps out of the current block. That is, it steps to the next line after the first unmatched &lt;code&gt;}&lt;/code&gt;, starting from the current line.&lt;/p&gt; &#xA;&lt;h3&gt;gf-restart-gdb&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-restart-gdb&lt;/code&gt; restarts the GDB process immediately. Any state such as loaded symbol files or breakpoints will be lost.&lt;/p&gt; &#xA;&lt;h3&gt;gf-get-pwd&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-get-pwd&lt;/code&gt; asks GDB for the working directory in which the current executable file was compiled. This ensures the source view tries to load files from the correct directory.&lt;/p&gt; &#xA;&lt;h3&gt;gf-switch-to&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-switch-to &amp;lt;window-name&amp;gt;&lt;/code&gt; switches to a specific window. The window names are the same as given in the layout string, as seen in the &#34;User interface&#34; section.&lt;/p&gt; &#xA;&lt;h3&gt;gf-command&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-command &amp;lt;name&amp;gt;&lt;/code&gt; runs the command(s) corresponding to &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; in the &lt;code&gt;[commands]&lt;/code&gt; section of your configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;gf-inspect-line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gf-inspect-line&lt;/code&gt; toggles inspect line mode. By default, this is bound to the backtick key.&lt;/p&gt; &#xA;&lt;h2&gt;Watch window hooks&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the behaviour of the watch window when displaying specific types using Python. When the watch window wants to display the fields of a value, it will look a hook function at &lt;code&gt;gf_hooks[type_of_value]&lt;/code&gt;. The hook function should take two arguments, &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;field&lt;/code&gt;. If the hook function exists, it will be called in one of two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When the watch window needs a list of the fields in the value, it calls the hook with &lt;code&gt;item&lt;/code&gt; set to an opaque handle and &lt;code&gt;field&lt;/code&gt; set to &lt;code&gt;None&lt;/code&gt;. You should print out a list of all the names of the fields in the value, one on each line. You can print out all the standard fields by calling &lt;code&gt;_gf_fields_recurse(item)&lt;/code&gt;. &lt;strong&gt;When adding custom fields, their names must be enclosed by &lt;code&gt;[]&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;When the watch window needs to get the value of a specific custom field in the value, it calls the hook with &lt;code&gt;item&lt;/code&gt; set to a &lt;code&gt;gdb.Value&lt;/code&gt; for the value, and &lt;code&gt;field&lt;/code&gt; to the name of the custom field that was added. &lt;strong&gt;The hook is not called for standard fields.&lt;/strong&gt; You should return a &lt;code&gt;gdb.Value&lt;/code&gt; that gives the value of the field.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, the following hook add a width and height custom field for a rectangle type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def RectangleHook(item, field):&#xA;    if field:&#xA;        if field == &#39;[width]&#39;:  &#xA;            # item[&#39;...&#39;] looks up a field in the struct, returned as a gdb.Value&#xA;            # int(...) converts the gdb.Value to an int so we can do arithmetic on it&#xA;            # gdb.Value(...) converts the result back to a gdb.Value&#xA;            return gdb.Value(int(item[&#39;right&#39;]) - item[&#39;left&#39;])&#xA;        if field == &#39;[height]&#39;: &#xA;            # do something similar for the height&#xA;            return gdb.Value(int(item[&#39;bottom&#39;]) - item[&#39;top&#39;])&#xA;    else:&#xA;        print(&#39;[width]&#39;)         # add the width custom field&#xA;        print(&#39;[height]&#39;)        # add the height custom field&#xA;        _gf_fields_recurse(item) # add the fields actually in the struct&#xA;&#xA;gf_hooks = { &#39;Rectangle&#39;: RectangleHook } # create the hook dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to create a custom dynamic array type, instead of printing field names, print &lt;code&gt;(d_arr)&lt;/code&gt; followed by the number of array items. The fields will then be automatically populated in the form of &lt;code&gt;[%d]&lt;/code&gt;, where &lt;code&gt;%d&lt;/code&gt; is the index. For example, given the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct MyArray {&#xA;&#x9;int length;&#xA;&#x9;float *items;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the hook definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def MyArrayHook(item, field):&#xA;&#x9;if field: return item[&#39;items&#39;][int(field[1:-1])]&#xA;&#x9;else: print(&#39;(d_arr)&#39;, int(item[&#39;length&#39;]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Templates are removed from the name of the type. For example, &lt;code&gt;Array&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;Array&amp;lt;char *&amp;gt;&lt;/code&gt; and &lt;code&gt;Array&amp;lt;float&amp;gt;&lt;/code&gt; would all use the &lt;code&gt;Array&lt;/code&gt; hook.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;There is a simple plugin system. Make a file called &lt;code&gt;plugins.cpp&lt;/code&gt; in the source code folder. It will be found automatically, and #included in the compilation of the main translation unit.&lt;/p&gt; &#xA;&lt;p&gt;gf uses the Luigi UI library. It is documented here: &lt;a href=&#34;https://github.com/nakst/luigi/raw/main/README.md&#34;&gt;https://github.com/nakst/luigi/blob/main/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can register new windows, command and data viewers in a constructor function. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;__attribute__((constructor)) &#xA;void MyPluginRegister() {&#xA;&#x9;interfaceWindows.Add({ &#xA;&#x9;&#x9;&#34;Hello&#34;, // The window&#39;s name. Used to match it against the UI layout string.&#xA;&#x9;&#x9;MyPluginHelloWindowCreate, // The callback to create an instance of the window.&#xA;&#x9;&#x9;MyPluginHelloWindowUpdate // The callback to update an instance of the window (called every time the target pauses/steps).&#xA;&#x9;});&#xA;&#xA;&#x9;interfaceDataViewers.Add({ &#xA;&#x9;&#x9;&#34;Add test...&#34;, // The label of the button to show in the Data tab.&#xA;&#x9;&#x9;MyPluginTestViewerCreate // The callback to create the data viewer.&#xA;&#x9;});&#xA;&#xA;&#x9;interfaceCommands.Add({ &#xA;&#x9;&#x9;&#34;My command&#34;, // The label to show in the application menu.&#xA;&#x9;&#x9;{ /* UIShortcut */ } &#xA;&#x9;});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interface window creation callback is passed the parent UIElement and should return the UIElement it creates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;UIElement *MyPluginHelloWindowCreate(UIElement *parent) {&#xA;&#x9;UIPanel *panel = UIPanelCreate(parent, UI_PANEL_GRAY | UI_PANEL_EXPAND);&#xA;&#x9;UILabelCreate(&amp;amp;panel-&amp;gt;e, 0, &#34;Hello, world!&#34;, -1);&#xA;&#x9;return &amp;amp;panel-&amp;gt;e;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interface window update callback is passed the output of GDB from the most recent step, and the UIElement returned by the creation callback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void MyPluginHelloWindowUpdate(const char *gdbOutput, UIElement *element) {&#xA;&#x9;// TODO Update the window.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interface data viewer creation callback should create a MDI child of the data tab as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void MyPluginTestViewerCreate(void *unused) {&#xA;&#x9;UIMDIChild *window = UIMDIChildCreate(&amp;amp;dataWindow-&amp;gt;e, UI_MDI_CHILD_CLOSE_BUTTON, UI_RECT_1(0), &#34;Title&#34;, -1);&#xA;&#x9;// TODO Configure the viewer.&#xA;&#x9;UIElementRefresh(&amp;amp;dataWindow-&amp;gt;e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For communicating with GDB, there are the following functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Evaluate an expression. The result is overwritten between calls!&#xA;const char *EvaluateExpression(const char *expression, const char *format = nullptr);&#xA;&#xA;// Send and run a command in GDB. Set `echo` to log the command in the console window. &#xA;// If `synchronous` is set the function will wait for the command to complete before it returns.&#xA;void DebuggerSend(const char *string, bool echo, bool synchronous);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many examples of how to do these things in &lt;code&gt;windows.cpp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;nakst&#xA;Philippe Mongeau phmongeau &#xA;Jimmy &#34;Keeba&#34; Lefevre JimmyLefevre &#xA;John Blat johnblat64 &#xA;IWouldRatherUsePasteBin&#xA;Gavin Beatty gavinbeatty&#xA;Michael Stopa StomyPX&#xA;Anders Kaare sqaxomonophonen&#xA;Arseniy Khvorov khvorov45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extension pack&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/unknown2.png&#34; alt=&#34;A screenshot showing the embedded profiler, which is displaying a multi-colored flame graph.&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nakst/cdn/main/%20memory%20window%20and%20extended%20view%20window.png&#34; alt=&#34;A screenshot showing the memory window and extended watch expression view.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All tiers on my Patreon, &lt;a href=&#34;https://www.patreon.com/nakst&#34;&gt;https://www.patreon.com/nakst&lt;/a&gt;, get access to the extension pack.&lt;/p&gt; &#xA;&lt;p&gt;This currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embedded tracing profiler&lt;/li&gt; &#xA; &lt;li&gt;Memory window&lt;/li&gt; &#xA; &lt;li&gt;Extended watch expression view (for strings, matrices and base conversion)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nakst/cdn/main/waveform_viewer.mp4&#34;&gt;Waveform viewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Full source code for the pack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure you use the latest version of the extension pack with the latest commit of &lt;code&gt;gf&lt;/code&gt;, otherwise you&#39;ll likely run into compile or runtime errors!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pandax381/microps</title>
    <updated>2023-08-11T01:22:53Z</updated>
    <id>tag:github.com,2023-08-11:/pandax381/microps</id>
    <link href="https://github.com/pandax381/microps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of a small TCP/IP protocol stack for learning.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;microps&lt;/h1&gt; &#xA;&lt;p&gt;microps is an implementation of a small TCP/IP protocol stack for learning.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you love the Go language: &lt;a href=&#34;https://github.com/pandax381/lectcp&#34;&gt;https://github.com/pandax381/lectcp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Porting to xv6: &lt;a href=&#34;https://github.com/pandax381/xv6-net&#34;&gt;https://github.com/pandax381/xv6-net&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Abstraction Layer&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Physical device abstraction &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define structure for physical device abstraction (&lt;code&gt;struct net_device&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support multiple link protocols and physical devices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Logical interface abstraction &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define structure for logical interface abstraction (&lt;code&gt;struct net_iface&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support multiple address family and logical interfaces&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Devices&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Null&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loopback&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ethernet &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TUN/TAP (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PF_PACKET (Linux)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Protocols&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ethernet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ICMP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UDP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;API&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Socket like API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Logs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;18:43:46.153 [I] net_protocol_register: registerd, type=ARP(0x0806) (net.c:223)&#xA;18:43:46.153 [I] net_timer_register: registerd: ARP Timer interval={1, 0} (net.c:257)&#xA;18:43:46.153 [I] net_protocol_register: registerd, type=IP(0x0800) (net.c:223)&#xA;18:43:46.153 [I] ip_protocol_register: registerd, type=ICMP(0x01) (ip.c:440)&#xA;18:43:46.153 [I] ip_protocol_register: registerd, type=UDP(0x11) (ip.c:440)&#xA;18:43:46.153 [I] ip_protocol_register: registerd, type=TCP(0x06) (ip.c:440)&#xA;18:43:46.153 [I] net_timer_register: registerd: TCP Timer interval={0, 100000} (net.c:257)&#xA;18:43:46.153 [I] net_device_register: registerd, dev=net0, type=0x0000 (net.c:74)&#xA;18:43:46.153 [D] null_init: initialized, dev=net0 (driver/null.c:46)&#xA;18:43:46.153 [I] net_device_register: registerd, dev=net1, type=0x0001 (net.c:74)&#xA;18:43:46.153 [D] loopback_init: initialized, dev=net1 (driver/loopback.c:49)&#xA;18:43:46.153 [I] ip_route_add: network=127.0.0.0, netmask=255.0.0.0, nexthop=0.0.0.0, iface=127.0.0.1 dev=net1 (ip.c:136)&#xA;18:43:46.153 [I] ip_iface_register: registerd: dev=net1, unicast=127.0.0.1, netmask=127.0.0.1, broadcast=255.0.0.0 (ip.c:233)&#xA;18:43:46.153 [I] net_device_register: registerd, dev=net2, type=0x0002 (net.c:74)&#xA;18:43:46.153 [D] ether_tap_init: ethernet device initialized, dev=net2 (driver/ether_tap_linux.c:174)&#xA;18:43:46.153 [I] ip_route_add: network=192.0.2.0, netmask=255.255.255.0, nexthop=0.0.0.0, iface=192.0.2.2 dev=net2 (ip.c:136)&#xA;18:43:46.153 [I] ip_iface_register: registerd: dev=net2, unicast=192.0.2.2, netmask=192.0.2.2, broadcast=255.255.255.0 (ip.c:233)&#xA;18:43:46.153 [I] ip_route_add: network=0.0.0.0, netmask=0.0.0.0, nexthop=192.0.2.1, iface=192.0.2.2 dev=net2 (ip.c:136)&#xA;18:43:46.153 [D] net_run: open all devices... (net.c:314)&#xA;18:43:46.153 [I] net_device_open: dev=net2, state=up (net.c:92)&#xA;18:43:46.153 [I] net_device_open: dev=net1, state=up (net.c:92)&#xA;18:43:46.153 [I] net_device_open: dev=net0, state=up (net.c:92)&#xA;18:43:46.153 [D] net_run: create background thread... (net.c:318)&#xA;18:43:46.154 [D] net_run: running... (net.c:324)&#xA;18:43:57.931 [D] ether_poll_helper: dev=net2, type=ARP(0x0806), len=42 (ether.c:127)&#xA;        src: 0e:4e:af:bc:64:c6&#xA;        dst: ff:ff:ff:ff:ff:ff&#xA;       type: 0x0806 (ARP)&#xA;18:43:57.931 [D] net_input_handler: queue pushed (num:1), dev=net2, type=ARP(0x0806), len=28 (net.c:191)&#xA;18:43:57.931 [D] net_thread: queue poped (num:0), dev=net2, type=ARP(0x0806), len=28 (net.c:286)&#xA;18:43:57.931 [D] arp_input: dev=net2, opcode=Request(0x0001), len=28 (arp.c:239)&#xA;        hrd: 0x0001&#xA;        pro: 0x0800&#xA;        hln: 6&#xA;        pln: 4&#xA;         op: 0x0001 (Request)&#xA;        sha: 0e:4e:af:bc:64:c6&#xA;        spa: 192.0.2.1&#xA;        tha: 00:00:00:00:00:00&#xA;        tpa: 192.0.2.2&#xA;18:43:57.931 [D] arp_cache_insert: INSERT: pa=192.0.2.1, ha=0e:4e:af:bc:64:c6 (arp.c:163)&#xA;18:43:57.931 [D] arp_reply: dev=net2, opcode=Reply(0x0002), len=28 (arp.c:213)&#xA;        hrd: 0x0001&#xA;        pro: 0x0800&#xA;        hln: 6&#xA;        pln: 4&#xA;         op: 0x0002 (Reply)&#xA;        sha: 00:00:5e:00:53:01&#xA;        spa: 192.0.2.2&#xA;        tha: 0e:4e:af:bc:64:c6&#xA;        tpa: 192.0.2.1&#xA;18:43:57.931 [D] net_device_output: dev=net2, type=ARP(0x0806), len=28 (net.c:156)&#xA;18:43:57.931 [D] ether_transmit_helper: dev=net2, type=ARP(0x0806), len=60 (ether.c:101)&#xA;        src: 00:00:5e:00:53:01&#xA;        dst: 0e:4e:af:bc:64:c6&#xA;       type: 0x0806 (ARP)&#xA;18:43:57.931 [D] ether_poll_helper: dev=net2, type=IP(0x0800), len=98 (ether.c:127)&#xA;        src: 0e:4e:af:bc:64:c6&#xA;        dst: 00:00:5e:00:53:01&#xA;       type: 0x0800 (IP)&#xA;18:43:57.931 [D] net_input_handler: queue pushed (num:1), dev=net2, type=IP(0x0800), len=84 (net.c:191)&#xA;18:43:57.932 [D] net_thread: queue poped (num:0), dev=net2, type=IP(0x0800), len=84 (net.c:286)&#xA;18:43:57.932 [D] ip_input: dev=net2, iface=192.0.2.2, protocol=ICMP(0x01), len=84 (ip.c:303)&#xA;        vhl: 0x45 [v: 4, hl: 5 (20)]&#xA;        tos: 0x00&#xA;      total: 84 (payload: 64)&#xA;         id: 41026&#xA;     offset: 0x4000 [flags=2, offset=0]&#xA;        ttl: 64&#xA;   protocol: 1 (ICMP)&#xA;        sum: 0x1663 (0x1663)&#xA;        src: 192.0.2.1&#xA;        dst: 192.0.2.2&#xA;18:43:57.932 [D] icmp_input: 192.0.2.1 =&amp;gt; 192.0.2.2, type=Echo(8), len=64, iface=192.0.2.2 (icmp.c:100)&#xA;       type: 8 (Echo)&#xA;       code: 0&#xA;        sum: 0xb692 (0xb692)&#xA;         id: 55&#xA;        seq: 1&#xA;18:43:57.932 [D] icmp_output: 192.0.2.2 =&amp;gt; 192.0.2.1, type=EchoReply(0), len=64 (icmp.c:138)&#xA;       type: 0 (EchoReply)&#xA;       code: 0&#xA;        sum: 0xbe92 (0xbe92)&#xA;         id: 55&#xA;        seq: 1&#xA;18:43:57.932 [D] ip_output_core: dev=net2, iface=192.0.2.1, protocol=ICMP(0x01), len=84 (ip.c:357)&#xA;        vhl: 0x45 [v: 4, hl: 5 (20)]&#xA;        tos: 0x00&#xA;      total: 84 (payload: 64)&#xA;         id: 128&#xA;     offset: 0x0000 [flags=0, offset=0]&#xA;        ttl: 255&#xA;   protocol: 1 (ICMP)&#xA;        sum: 0x3725 (0x3725)&#xA;        src: 192.0.2.2&#xA;        dst: 192.0.2.1&#xA;18:43:57.932 [D] arp_resolve: resolved, pa=192.0.2.1, ha=0e:4e:af:bc:64:c6 (arp.c:301)&#xA;18:43:57.932 [D] net_device_output: dev=net2, type=IP(0x0800), len=84 (net.c:156)&#xA;18:43:57.932 [D] ether_transmit_helper: dev=net2, type=IP(0x0800), len=98 (ether.c:101)&#xA;        src: 00:00:5e:00:53:01&#xA;        dst: 0e:4e:af:bc:64:c6&#xA;       type: 0x0800 (IP)&#xA;^C18:44:01.605 [D] net_shutdown: terminate background thread... (net.c:334)&#xA;18:44:01.606 [D] net_shutdown: close all devices... (net.c:341)&#xA;18:44:01.606 [I] net_device_close: dev=net2, state=down (net.c:110)&#xA;18:44:01.606 [I] net_device_close: dev=net1, state=down (net.c:110)&#xA;18:44:01.606 [I] net_device_close: dev=net0, state=down (net.c:110)&#xA;18:44:01.606 [D] net_shutdown: shutdown (net.c:345)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;h4&gt;1. Build&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:pandax381/microps.git&#xA;$ cd microps&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Prepare Tap device&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo ip tuntap add mode tap user $USER name tap0&#xA;$ sudo ip addr add 192.0.2.1/24 dev tap0&#xA;$ sudo ip link set tap0 up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is temporary and will disappear after reboot.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3. Run sample application&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./app/tcps.exe 7&#xA;11:48:55.884 [I] net_protocol_register: registerd, type=ARP(0x0806) (net.c:223)&#xA;11:48:55.884 [I] net_timer_register: registerd: ARP Timer interval={1, 0} (net.c:257)&#xA;11:48:55.884 [I] net_protocol_register: registerd, type=IP(0x0800) (net.c:223)&#xA;...&#xA;11:48:55.884 [D] net_run: running... (net.c:324)&#xA;11:48:55.884 [D] tcp_bind: success: addr=0.0.0.0, port=7 (tcp.c:1156)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TCP Echo Server start on port 7. (default address is 192.0.2.2/24)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;4. Test (Operate in another terminal)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ping 192.0.2.2&#xA;PING 192.0.2.2 (192.0.2.2) 56(84) bytes of data.&#xA;64 bytes from 192.0.2.2: icmp_seq=1 ttl=255 time=0.660 ms&#xA;64 bytes from 192.0.2.2: icmp_seq=2 ttl=255 time=0.688 ms&#xA;64 bytes from 192.0.2.2: icmp_seq=3 ttl=255 time=0.574 ms&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TCP communication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nc 192.0.2.2 7&#xA;foo&#xA;foo&#xA;bar&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sending text will be sent back by the Echo Server.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;microps is under the MIT License: See &lt;a href=&#34;https://raw.githubusercontent.com/pandax381/microps/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>