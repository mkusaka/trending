<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T01:34:49Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qmk/qmk_firmware</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/qmk/qmk_firmware</id>
    <link href="https://github.com/qmk/qmk_firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source keyboard firmware for Atmel AVR and Arm USB families&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quantum Mechanical Keyboard Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qmk/qmk_firmware/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Uq7gcHh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/440868230475677696.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.qmk.fm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-ready-orange.svg?sanitize=true&#34; alt=&#34;Docs Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulse/monthly&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/qmk/qmk_firmware.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a keyboard firmware based on the &lt;a href=&#34;https://github.com/tmk/tmk_keyboard&#34;&gt;tmk_keyboard firmware&lt;/a&gt; with some useful features for Atmel AVR and ARM controllers, and more specifically, the &lt;a href=&#34;https://olkb.com&#34;&gt;OLKB product line&lt;/a&gt;, the &lt;a href=&#34;https://ergodox-ez.com&#34;&gt;ErgoDox EZ&lt;/a&gt; keyboard, and the &lt;a href=&#34;https://clueboard.co&#34;&gt;Clueboard product line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qmk.fm&#34;&gt;See the official documentation on docs.qmk.fm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The docs are powered by &lt;a href=&#34;https://docsify.js.org/&#34;&gt;Docsify&lt;/a&gt; and hosted on &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/docs/&#34;&gt;GitHub&lt;/a&gt;. They are also viewable offline; see &lt;a href=&#34;https://docs.qmk.fm/#/contributing?id=previewing-the-documentation&#34;&gt;Previewing the Documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can request changes by making a fork and opening a &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulls&#34;&gt;pull request&lt;/a&gt;, or by clicking the &#34;Edit this page&#34; link at the bottom of any page.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Keyboards&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/planck/&#34;&gt;Planck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/preonic/&#34;&gt;Preonic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/ergodox_ez/&#34;&gt;ErgoDox EZ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/&#34;&gt;Clueboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/17/&#34;&gt;Cluepad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/atreus/&#34;&gt;Atreus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The project also includes community support for &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/&#34;&gt;lots of other keyboards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;QMK is developed and maintained by Jack Humbert of OLKB with contributions from the community, and of course, &lt;a href=&#34;https://github.com/tmk&#34;&gt;Hasu&lt;/a&gt;. The OLKB product firmwares are maintained by &lt;a href=&#34;https://github.com/jackhumbert&#34;&gt;Jack Humbert&lt;/a&gt;, the Ergodox EZ by &lt;a href=&#34;https://github.com/zsa&#34;&gt;ZSA Technology Labs&lt;/a&gt;, the Clueboard by &lt;a href=&#34;https://github.com/skullydazed&#34;&gt;Zach White&lt;/a&gt;, and the Atreus by &lt;a href=&#34;https://github.com/technomancy&#34;&gt;Phil Hagelberg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Official Website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qmk.fm&#34;&gt;qmk.fm&lt;/a&gt; is the official website of QMK, where you can find links to this page, the documentation, and the keyboards supported by QMK.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coolsnowwolf/lede</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/coolsnowwolf/lede</id>
    <link href="https://github.com/coolsnowwolf/lede" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean&#39;s OpenWrt source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;欢迎来到 Lean 的 Openwrt 源码仓库&lt;/h1&gt; &#xA;&lt;p&gt;如何编译自己需要的 OpenWrt 固件 &lt;a href=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;不要用 root 用户进行编译&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt; &#xA; &lt;li&gt;默认登陆IP 192.168.1.1 密码 password&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;编译命令&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;首先装好 Linux 系统，推荐 Debian 11 或 Ubuntu LTS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装编译依赖&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \&#xA;git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \&#xA;libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \&#xA;mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \&#xA;rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载源代码，更新 feeds 并选择配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/coolsnowwolf/lede&#xA;cd lede&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make download -j8&#xA;make V=s -j1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;本套代码保证肯定可以编译成功。里面包括了 R21 所有源代码，包括 IPK 的。&lt;/p&gt; &#xA;&lt;p&gt;你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！&lt;/p&gt; &#xA;&lt;p&gt;二次编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd lede&#xA;git pull&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make defconfig&#xA;make download -j8&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要重新配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./tmp &amp;amp;&amp;amp; rm -rf .config&#xA;make menuconfig&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译完成后输出路径：bin/targets&lt;/p&gt; &#xA;&lt;h3&gt;如果你使用 WSL/WSL2 进行编译&lt;/h3&gt; &#xA;&lt;p&gt;由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 &lt;code&gt;make&lt;/code&gt; 前面加上：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS 原生系统进行编译&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在 AppStore 中安装 Xcode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装 Homebrew：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 Homebrew 安装工具链、依赖与基础软件包:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew unlink awk&#xA;brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz&#xA;brew install gcc@11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;然后输入以下命令，添加到系统环境变量中：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;/usr/local/opt/coreutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/findutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-getopt/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-tar/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/grep/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/make/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;重新加载一下 shell 启动文件 &lt;code&gt;source ~/.bashrc&lt;/code&gt;，然后输入 &lt;code&gt;bash&lt;/code&gt; 进入 bash shell，就可以和 Linux 一样正常编译了&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;特别提示&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒。安全干净才是固件应该做到的；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如有技术问题需要讨论，欢迎加入 QQ 讨论群： OP 共享技术交流群 ,号码 297253733 ，加群链接: 点击链接加入群聊【 OP 共享技术交流群】：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5yCRuXL&#34; title=&#34;OP共享技术交流群&#34;&gt;点击加入&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成 报名地址：&lt;a href=&#34;http://forgotfun.org/2018/04/openwrt-training-2018.html&#34; title=&#34;报名&#34;&gt;点击报名&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QCA IPQ60xx 开源仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt-gl-ax1800&#34;&gt;https://github.com/coolsnowwolf/openwrt-gl-ax1800&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;稳定版仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt&#34;&gt;https://github.com/coolsnowwolf/openwrt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;软路由介绍&lt;/h2&gt; &#xA;&lt;p&gt;友情推荐不恰饭：如果你在寻找一个低功耗小体积性能不错的 x86 / x64 路由器，我个人建议可以考虑小马v1 的铝合金版本 (N3710 4千兆)：&lt;a href=&#34;https://item.taobao.com/item.htm?spm=a230r.1.14.20.144c763fRkK0VZ&amp;amp;id=561126544764&#34;&gt;页面介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm5.jpg&#34; alt=&#34;xm1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm6.jpg&#34; alt=&#34;xm2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;捐贈&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善&lt;/p&gt; &#xA;&lt;p&gt;支付宝 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/alipay_donate.jpg&#34; alt=&#34;alipay&#34;&gt; 微信 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/wechat_donate.jpg&#34; alt=&#34;wechat&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ventoy/Ventoy</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/ventoy/Ventoy</id>
    <link href="https://github.com/ventoy/Ventoy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new bootable USB solution.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.ventoy.net/&#34;&gt;Ventoy&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/ventoy/Ventoy.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/ventoy/Ventoy?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ventoy/Ventoy?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/ventoy/Ventoy/total.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/ventoy/Ventoy/Ventoy%20CI?label=actions&amp;amp;logo=github&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;left&#34;&gt; Ventoy is an open source tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files. &lt;br&gt; With ventoy, you don&#39;t need to format the disk over and over, you just need to copy the image files to the USB drive and boot it. You can copy many image files at a time and ventoy will give you a boot menu to select them. &lt;br&gt; You can also browse ISO/WIM/IMG/VHD(x)/EFI files in local disk and boot them.&lt;br&gt; x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI and MIPS64EL UEFI are supported in the same way.&lt;br&gt; Both MBR and GPT partition style are supported in the same way.&lt;br&gt; Most type of OS supported(Windows/WinPE/Linux/Unix/ChromeOS/Vmware/Xen...) &lt;br&gt; 830+ ISO files are tested (&lt;a href=&#34;https://www.ventoy.net/en/isolist.html&#34;&gt;List&lt;/a&gt;). 90%+ distros in &lt;a href=&#34;https://distrowatch.com/&#34;&gt;distrowatch.com&lt;/a&gt; supported (&lt;a href=&#34;https://www.ventoy.net/en/distrowatch.html&#34;&gt;Details&lt;/a&gt;). &lt;br&gt; &lt;br&gt;Official Website: &lt;a href=&#34;https://www.ventoy.net&#34;&gt;https://www.ventoy.net&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;h1&gt;Tested OS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;br&gt; Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11, Windows Server 2012, Windows Server 2012 R2, Windows Server 2016, Windows Server 2019, Windows Server 2022, WinPE&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;br&gt; Debian, Ubuntu, CentOS, RHEL, Deepin, Fedora, Rocky Linux, SLES, openSUSE, MX Linux, Manjaro, Linux Mint, Endless OS, openEuler, Elementary OS, Solus, Linx, Zorin, antiX, PClinuxOS, Arch, ArcoLinux, ArchLabs, BlackArch, Obarun, Artix Linux, Puppy Linux, Tails, Slax, MiniOS, Kali, Mageia, Slackware, Q4OS, Archman, Gentoo, Pentoo, NixOS, Ubuntu Kylin, Lubuntu, Xubuntu, Kubuntu, Ubuntu MATE, Ubuntu Budgie, Ubuntu Studio, Bluestar, OpenMandriva, ExTiX, Netrunner, ALT Linux, Nitrux, Peppermint, KDE neon, Linux Lite, Parrot OS, Qubes, Pop OS, ROSA, Void Linux, Star Linux, EndeavourOS, MakuluLinux, Voyager, Feren, ArchBang, LXLE, Knoppix, Robolinux, Calculate Linux, Clear Linux, Pure OS, Oracle Linux, Trident, Septor, Porteus, Devuan, GoboLinux, 4MLinux, Simplicity Linux, Zeroshell, Android-x86, netboot.xyz, Slitaz, SuperGrub2Disk, Proxmox VE, Kaspersky Rescue, SystemRescueCD, MemTest86, MiniTool Partition Wizard, Parted Magic, veket, Sabayon, Scientific, alpine, ClearOS, CloneZilla, Berry Linux, Trisquel, Ataraxia Linux, Minimal Linux Live, BackBox Linux, Emmabuntüs, ESET SysRescue Live,Nova Linux, AV Linux, RoboLinux, NuTyX, IPFire, SELKS, ZStack, Enso Linux, Security Onion, Network Security Toolkit, Absolute Linux, TinyCore, Springdale Linux, Frost Linux, Shark Linux, LinuxFX, Snail Linux, Astra Linux, Namib Linux, Resilient Linux, Virage Linux, Blackweb Security OS, R-DriveImage, O-O.DiskImage, Macrium, ToOpPy LINUX, GNU Guix, YunoHost, foxclone, siduction, Adelie Linux, Elive, Pardus, CDlinux, AcademiX, Austrumi, Zenwalk, Anarchy, DuZeru, BigLinux, OpenMediaVault, Ubuntu DP, Exe GNU/Linux, 3CX Phone System, KANOTIX, Grml, Karoshi, PrimTux, ArchStrike, CAELinux, Refracta, Cucumber, Fatdog, ForLEx, Hanthana, Kwort, MiniNo, Redcore, Runtu, Asianux, Clu Linux Live, Uruk, OB2D, BlueOnyx, Finnix, HamoniKR, Parabola, LinHES, LinuxConsole, BEE free, Untangle, Pearl, Thinstation, TurnKey, tuxtrans, Neptune, HefftorLinux, GeckoLinux, Mabox Linux, Zentyal, Maui, Reborn OS, SereneLinux , SkyWave Linux, Kaisen Linux, Regata OS, TROM-Jaro, DRBL Linux, Chalet OS, Chapeau, Desa OS, BlankOn, OpenMamba, Frugalware, Kibojoe Linux, Revenge OS, Tsurugi Linux, Drauger OS, Hash Linux, gNewSense, Ikki Boot, SteamOS, Hyperbola, VyOS, EasyNAS, SuperGamer, Live Raizo, Swift Linux, RebeccaBlackOS, Daphile, CRUX, Univention, Ufficio Zero, Rescuezilla, Phoenix OS, Garuda Linux, Mll, NethServer, OSGeoLive, Easy OS, Volumio, FreedomBox, paldo, UBOS, Recalbox, batocera, Lakka, LibreELEC, Pardus Topluluk, Pinguy, KolibriOS, Elastix, Arya, Omoikane, Omarine, Endian Firewall, Hamara, Rocks Cluster, MorpheusArch, Redo, Slackel, SME Server, APODIO, Smoothwall, Dragora, Linspire, Secure-K OS, Peach OSI, Photon, Plamo, SuperX, Bicom, Ploplinux, HP SPP, LliureX, Freespire, DietPi, BOSS, Webconverger, Lunar, TENS, Source Mage, RancherOS, T2, Vine, Pisi, blackPanther, mAid, Acronis, Active.Boot, AOMEI, Boot.Repair, CAINE, DaRT, EasyUEFI, R-Drive, PrimeOS, Avira Rescue System, bitdefender, Checkra1n Linux, Lenovo Diagnostics, Clover, Bliss-OS, Lenovo BIOS Update, Arcabit Rescue Disk, MiyoLinux, TeLOS, Kerio Control, RED OS, OpenWrt, MocaccinoOS, EasyStartup, Pyabr, Refracta, Eset SysRescue, Linpack Xtreme, Archcraft, ......&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unix&lt;/strong&gt;&lt;br&gt; DragonFly FreeBSD pfSense GhostBSD FreeNAS TrueNAS XigmaNAS FuryBSD OPNsense HardenedBSD MidnightBSD ClonOS EmergencyBootKit&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChromeOS&lt;/strong&gt;&lt;br&gt; FydeOS, CloudReady&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;br&gt; VMware ESXi, Citrix XenServer, Xen XCP-ng&lt;/p&gt; &#xA;&lt;h1&gt;Subscription Service&lt;/h1&gt; &#xA;&lt;p&gt;Ventoy is an open source software under GPLv3 license. But Ventoy project need to pay for the server hosting, domain name, bandwidth, many USB sticks for test, large capacity of HDD (for downloading ISO files) and so on.&lt;br&gt; For the better and sustainable development of Ventoy, I provide the &lt;a href=&#34;https://www.ventoy.net/en/doc_subscription.html&#34;&gt;【subscription service】&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tested Image Report&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ventoy/Ventoy/issues/1195&#34;&gt;【How to report a successfully tested image file】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ventoy Browser&lt;/h1&gt; &#xA;&lt;p&gt;With Ventoy, you can also browse ISO/WIM/IMG/VHD(x)/EFI files in local disk and boot them. &lt;a href=&#34;https://www.ventoy.net/en/doc_browser.html&#34;&gt;Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;VentoyPlugson&lt;/h1&gt; &#xA;&lt;p&gt;A GUI Ventoy plugin configurator. &lt;a href=&#34;https://www.ventoy.net/en/plugin_plugson.html&#34;&gt;VentoyPlugson&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% open source&lt;/li&gt; &#xA; &lt;li&gt;Simple to use&lt;/li&gt; &#xA; &lt;li&gt;Fast (limited only by the speed of copying iso file)&lt;/li&gt; &#xA; &lt;li&gt;Can be installed in USB/Local Disk/SSD/NVMe/SD Card&lt;/li&gt; &#xA; &lt;li&gt;Directly boot from ISO/WIM/IMG/VHD(x)/EFI files, no extraction needed&lt;/li&gt; &#xA; &lt;li&gt;Support to browse and boot ISO/WIM/IMG/VHD(x)/EFI files in local disk&lt;/li&gt; &#xA; &lt;li&gt;No need to be continuous in disk for ISO/WIM/IMG/VHD(x)/EFI files&lt;/li&gt; &#xA; &lt;li&gt;MBR and GPT partition style supported (1.0.15+)&lt;/li&gt; &#xA; &lt;li&gt;x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI, MIPS64EL UEFI supported&lt;/li&gt; &#xA; &lt;li&gt;IA32/x86_64 UEFI Secure Boot supported (1.0.07+)&lt;/li&gt; &#xA; &lt;li&gt;Persistence supported (1.0.11+)&lt;/li&gt; &#xA; &lt;li&gt;Windows auto installation supported (1.0.09+)&lt;/li&gt; &#xA; &lt;li&gt;RHEL7/8/CentOS/7/8/SUSE/Ubuntu Server/Debian ... auto installation supported (1.0.09+)&lt;/li&gt; &#xA; &lt;li&gt;FAT32/exFAT/NTFS/UDF/XFS/Ext2(3)(4) supported for main partition&lt;/li&gt; &#xA; &lt;li&gt;ISO files larger than 4GB supported&lt;/li&gt; &#xA; &lt;li&gt;Native boot menu style for Legacy &amp;amp; UEFI&lt;/li&gt; &#xA; &lt;li&gt;Most types of OS supported, 830+ iso files tested&lt;/li&gt; &#xA; &lt;li&gt;Linux vDisk boot supported&lt;/li&gt; &#xA; &lt;li&gt;Not only boot but also complete installation process&lt;/li&gt; &#xA; &lt;li&gt;Menu dynamically switchable between List/TreeView mode&lt;/li&gt; &#xA; &lt;li&gt;&#34;Ventoy Compatible&#34; concept&lt;/li&gt; &#xA; &lt;li&gt;Plugin Framework and GUI plugin configurator&lt;/li&gt; &#xA; &lt;li&gt;Injection files to runtime environment&lt;/li&gt; &#xA; &lt;li&gt;Boot configuration file dynamically replacement&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable theme and menu&lt;/li&gt; &#xA; &lt;li&gt;USB drive write-protected support&lt;/li&gt; &#xA; &lt;li&gt;USB normal use unaffected&lt;/li&gt; &#xA; &lt;li&gt;Data nondestructive during version upgrade&lt;/li&gt; &#xA; &lt;li&gt;No need to update Ventoy when a new distro is released&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/screen/screen_uefi.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation Instructions&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.ventoy.net/en/doc_start.html&#34;&gt;https://www.ventoy.net/en/doc_start.html&lt;/a&gt; for detailed instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Compile Instructions&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ventoy/Ventoy/master/DOC/BuildVentoyFromSource.txt&#34;&gt;BuildVentoyFromSource.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Document&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Install &amp;amp; Update&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_start.html&#34;&gt;https://www.ventoy.net/en/doc_start.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Secure Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_secure.html&#34;&gt;https://www.ventoy.net/en/doc_secure.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Customize Theme&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_theme.html&#34;&gt;https://www.ventoy.net/en/plugin_theme.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Global Control&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_control.html&#34;&gt;https://www.ventoy.net/en/plugin_control.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Image List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_imagelist.html&#34;&gt;https://www.ventoy.net/en/plugin_imagelist.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Auto Installation&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_autoinstall.html&#34;&gt;https://www.ventoy.net/en/plugin_autoinstall.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Injection Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_injection.html&#34;&gt;https://www.ventoy.net/en/plugin_injection.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Persistence Support&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_persistence.html&#34;&gt;https://www.ventoy.net/en/plugin_persistence.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Boot WIM file&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_wimboot.html&#34;&gt;https://www.ventoy.net/en/plugin_wimboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows VHD Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_vhdboot.html&#34;&gt;https://www.ventoy.net/en/plugin_vhdboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linux vDisk Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_vtoyboot.html&#34;&gt;https://www.ventoy.net/en/plugin_vtoyboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DUD Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_dud.html&#34;&gt;https://www.ventoy.net/en/plugin_dud.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Password Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_password.html&#34;&gt;https://www.ventoy.net/en/plugin_password.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Conf Replace Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_bootconf_replace.html&#34;&gt;https://www.ventoy.net/en/plugin_bootconf_replace.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Class&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_menuclass.html&#34;&gt;https://www.ventoy.net/en/plugin_menuclass.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Alias&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_menualias.html&#34;&gt;https://www.ventoy.net/en/plugin_menualias.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Extension&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_grubmenu.html&#34;&gt;https://www.ventoy.net/en/plugin_grubmenu.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Memdisk Mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_memdisk.html&#34;&gt;https://www.ventoy.net/en/doc_memdisk.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TreeView Mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_treeview.html&#34;&gt;https://www.ventoy.net/en/doc_treeview.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk Layout MBR&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_disk_layout.html&#34;&gt;https://www.ventoy.net/en/doc_disk_layout.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk Layout GPT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_disk_layout_gpt.html&#34;&gt;https://www.ventoy.net/en/doc_disk_layout_gpt.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Search Configuration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_search_path.html&#34;&gt;https://www.ventoy.net/en/doc_search_path.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.ventoy.net/en/faq.html&#34;&gt;https://www.ventoy.net/en/faq.html&lt;/a&gt; for detail&lt;/p&gt; &#xA;&lt;h1&gt;Forum&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.ventoy.net&#34;&gt;https://forums.ventoy.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Donation&lt;/h1&gt; &#xA;&lt;p&gt;It would be much appreciated if you want to make a small donation to support my work!&lt;br&gt; Alipay, WeChat Pay, PayPal and Bitcoin are available for donation. You can choose any of them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alipay&lt;/th&gt; &#xA;   &lt;th&gt;WeChat Pay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/AliPay.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/WeChatPay.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;PayPal&lt;/strong&gt;&lt;br&gt; You can transfer to my paypal account &lt;code&gt;admin@ventoy.net&lt;/code&gt; or just click &lt;a href=&#34;https://www.paypal.me/ventoy&#34;&gt;https://www.paypal.me/ventoy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;&lt;br&gt; Bitcoin Address &lt;code&gt;19mZDWzZgzkHCi9YX9H3fYCUuCHq3W6wfT&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SoftEtherVPN/SoftEtherVPN</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/SoftEtherVPN/SoftEtherVPN</id>
    <link href="https://github.com/SoftEtherVPN/SoftEtherVPN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform multi-protocol VPN software. Pull requests are welcome. The stable version is available at https://github.com/SoftEtherVPN/SoftEtherVPN_Stable.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SoftEther VPN&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Badges&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AppVeyor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/softethervpn/softethervpn&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/softethervpn/softethervpn?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitLab CI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.com/SoftEther/SoftEtherVPN/pipelines&#34;&gt;&lt;img src=&#34;https://gitlab.com/SoftEther/SoftEtherVPN/badges/master/pipeline.svg?sanitize=true&#34; alt=&#34;GitLab CI build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Coverity Scan&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://scan.coverity.com/projects/softethervpn-softethervpn&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/16304/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure Pipelines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/SoftEther-VPN/SoftEther%20VPN/_build?definitionId=6&#34;&gt;&lt;img src=&#34;https://dev.azure.com/SoftEther-VPN/SoftEther%20VPN/_apis/build/status/6?api-version=6.0-preview.1&#34; alt=&#34;Azure Pipelines build status for Nightly&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cirrus CI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cirrus-ci.com/github/SoftEtherVPN/SoftEtherVPN&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/SoftEtherVPN/SoftEtherVPN.svg?sanitize=true&#34; alt=&#34;Cirrus CI build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#softether-vpn&#34;&gt;SoftEther VPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#board-members-of-this-repository&#34;&gt;BOARD MEMBERS OF THIS REPOSITORY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#softether-vpn-advantages&#34;&gt;SOFTETHER VPN ADVANTAGES&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#for-freebsd&#34;&gt;For FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#for-windows&#34;&gt;For Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#from-binary-installers-stable-channel&#34;&gt;From binary installers (stable channel)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#build-from-source-code&#34;&gt;Build from Source code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#about-html5-based-modern-admin-console-and-json-rpc-api-suite&#34;&gt;About HTML5-based Modern Admin Console and JSON-RPC API Suite&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#built-in-softether-vpn-server-html5-ajax-based-web-administration-console&#34;&gt;Built-in SoftEther VPN Server HTML5 Ajax-based Web Administration Console&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#built-in-softether-server-vpn-json-rpc-api-suite&#34;&gt;Built-in SoftEther Server VPN JSON-RPC API Suite&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#to-circumvent-your-governments-firewall-restriction&#34;&gt;TO CIRCUMVENT YOUR GOVERNMENT&#39;S FIREWALL RESTRICTION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#source-code-contribution&#34;&gt;SOURCE CODE CONTRIBUTION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/#dear-security-experts&#34;&gt;DEAR SECURITY EXPERTS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SoftEther VPN (Developer Edition Master Repository)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Open-Source Cross-platform Multi-protocol VPN Program &lt;a href=&#34;https://www.softether.org/&#34;&gt;https://www.softether.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository has experimental codes. Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;Stable Edition is available on &lt;a href=&#34;https://github.com/SoftEtherVPN/SoftEtherVPN_Stable&#34;&gt;https://github.com/SoftEtherVPN/SoftEtherVPN_Stable&lt;/a&gt; which the non-developer user can stable use.&lt;/p&gt; &#xA;&lt;p&gt;Source code packages (.zip and .tar.gz) and binary files of Stable Edition are also available:&lt;br&gt; &lt;a href=&#34;https://www.softether-download.com/&#34;&gt;https://www.softether-download.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) all contributors on SoftEther VPN project in GitHub. Copyright (c) Daiyuu Nobori, SoftEther Project at University of Tsukuba, and SoftEther Corporation.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The development of SoftEther VPN was supported by the MITOH Project, a research and development project by Japanese Government, subsidized by Ministry of Economy, Trade and Industry of Japan, administrated by Information Promotion Agency. &lt;a href=&#34;https://www.ipa.go.jp/english/humandev/&#34;&gt;https://www.ipa.go.jp/english/humandev/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/resources/icons8.png&#34; alt=&#34;https://icons8.com&#34; title=&#34;Icons8&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://icons8.com&#34;&gt;Icons8&lt;/a&gt; kindly supported the project by gifting a license which allows to edit and redistribute their icons.&lt;/p&gt; &#xA;&lt;p&gt;Please note that you are not allowed to redistribute those icons outside of this repository.&lt;/p&gt; &#xA;&lt;p&gt;The developers of SoftEther VPN love Icons8&#39;s work and kindly ask the users to support them as much as possible.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SoftEther VPN (&#34;SoftEther&#34; means &#34;Software Ethernet&#34;) is one of the world&#39;s most powerful and easy-to-use multi-protocol VPN software.&lt;/p&gt; &#xA;&lt;p&gt;SoftEther VPN runs on Windows, Linux, Mac, FreeBSD and Solaris.&lt;/p&gt; &#xA;&lt;p&gt;SoftEther VPN supports most of widely-used VPN protocols including SSL-VPN, WireGuard, OpenVPN, IPsec, L2TP, MS-SSTP, L2TPv3 and EtherIP by the single SoftEther VPN Server program.&lt;/p&gt; &#xA;&lt;p&gt;More details on &lt;a href=&#34;https://www.softether.org/&#34;&gt;https://www.softether.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;BOARD MEMBERS OF THIS REPOSITORY&lt;/h1&gt; &#xA;&lt;p&gt;Daiyuu Nobori (Since Jan 2, 2014) &lt;a href=&#34;https://github.com/dnobori&#34;&gt;https://github.com/dnobori&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Moataz Elmasry (Since Nov 6, 2017) &lt;a href=&#34;https://github.com/moatazelmasry2&#34;&gt;https://github.com/moatazelmasry2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Zulyandri Zardi (Since Nov 6, 2017) &lt;a href=&#34;https://github.com/zulzardi&#34;&gt;https://github.com/zulzardi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alex Maslakov (Since Nov 6, 2017) &lt;a href=&#34;https://github.com/GildedHonour&#34;&gt;https://github.com/GildedHonour&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Davide Beatrici (Since Jul 21, 2018) &lt;a href=&#34;https://github.com/davidebeatrici&#34;&gt;https://github.com/davidebeatrici&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ilya Shipitsin (Since Jul 21, 2018) &lt;a href=&#34;https://github.com/chipitsine&#34;&gt;https://github.com/chipitsine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yihong Wu (Since Jul 16, 2021) &lt;a href=&#34;https://github.com/domosekai&#34;&gt;https://github.com/domosekai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SOFTETHER VPN ADVANTAGES&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supporting all popular VPN protocols by the single VPN server: SSL-VPN (HTTPS) WireGuard OpenVPN IPsec L2TP MS-SSTP L2TPv3 EtherIP&lt;/li&gt; &#xA; &lt;li&gt;Free and open-source software.&lt;/li&gt; &#xA; &lt;li&gt;Easy to establish both remote-access and site-to-site VPN.&lt;/li&gt; &#xA; &lt;li&gt;SSL-VPN Tunneling on HTTPS to pass through NATs and firewalls.&lt;/li&gt; &#xA; &lt;li&gt;Revolutionary VPN over ICMP and VPN over DNS features.&lt;/li&gt; &#xA; &lt;li&gt;Resistance to highly-restricted firewall.&lt;/li&gt; &#xA; &lt;li&gt;Ethernet-bridging (L2) and IP-routing (L3) over VPN.&lt;/li&gt; &#xA; &lt;li&gt;Embedded dynamic-DNS and NAT-traversal so that no static nor fixed IP address is required.&lt;/li&gt; &#xA; &lt;li&gt;AES 256-bit and RSA 4096-bit encryptions.&lt;/li&gt; &#xA; &lt;li&gt;Sufficient security features such as logging and firewall inner VPN tunnel.&lt;/li&gt; &#xA; &lt;li&gt;User authentication with RADIUS and NT domain controllers.&lt;/li&gt; &#xA; &lt;li&gt;User authentication with X.509 client certificate.&lt;/li&gt; &#xA; &lt;li&gt;Packet logging.&lt;/li&gt; &#xA; &lt;li&gt;1Gbps-class high-speed throughput performance with low memory and CPU usage.&lt;/li&gt; &#xA; &lt;li&gt;Windows, Linux, Mac, Android, iPhone, iPad and Windows Phone are supported.&lt;/li&gt; &#xA; &lt;li&gt;The OpenVPN clone function supports legacy OpenVPN clients.&lt;/li&gt; &#xA; &lt;li&gt;IPv4 / IPv6 dual-stack.&lt;/li&gt; &#xA; &lt;li&gt;The VPN server runs on Windows, Linux, FreeBSD, Solaris and Mac OS X.&lt;/li&gt; &#xA; &lt;li&gt;Configure All settings on GUI.&lt;/li&gt; &#xA; &lt;li&gt;Multi-languages (English, Japanese and Simplified-Chinese).&lt;/li&gt; &#xA; &lt;li&gt;No memory leaks. High quality stable codes, intended for long-term runs. We always verify that there are no memory or resource leaks before releasing the build.&lt;/li&gt; &#xA; &lt;li&gt;More details at &lt;a href=&#34;https://www.softether.org/&#34;&gt;https://www.softether.org/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;For FreeBSD&lt;/h2&gt; &#xA;&lt;p&gt;SoftEther VPN in FreeBSD Ports Collection is maintained by &lt;a href=&#34;https://people.FreeBSD.org/~meta/&#34;&gt;Koichiro Iwao&lt;/a&gt; (&lt;a href=&#34;https://github.com/metalefty&#34;&gt;@metalefty&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Binary package can be installed by pkg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install softether5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, it can be built &amp;amp; installed by ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install -C /usr/ports/security/softether5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run SoftEther VPN Server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;service softether_server start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure SoftEther VPN Server startup on boot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sysrc softether_server_enable=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also SoftEther VPN &lt;a href=&#34;https://www.freshports.org/security/softether-devel/&#34;&gt;Stable Edition&lt;/a&gt; and &lt;a href=&#34;https://www.freshports.org/security/softether/&#34;&gt;RTM version&lt;/a&gt; are available on FreeBSD.&lt;/p&gt; &#xA;&lt;h2&gt;For Windows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/SoftEther-VPN/SoftEther%20VPN/_build?definitionId=6&#34;&gt;Nightly builds&lt;/a&gt; (choose appropriate platform, then find binaries or installers as artifacts)&lt;/p&gt; &#xA;&lt;h2&gt;From binary installers (stable channel)&lt;/h2&gt; &#xA;&lt;p&gt;Those can be found under &lt;a href=&#34;https://www.softether-download.com/&#34;&gt;https://www.softether-download.com/&lt;/a&gt; There you can also find SoftEtherVPN source code in zip and tar formats.&lt;/p&gt; &#xA;&lt;h2&gt;Build from Source code&lt;/h2&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/src/BUILD_UNIX.md&#34;&gt;BUILD_UNIX&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/SoftEtherVPN/SoftEtherVPN/master/src/BUILD_WINDOWS.md&#34;&gt;BUILD_WINDOWS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two flavours of SoftEtherVPN source code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unstable. Found under &lt;a href=&#34;https://github.com/SoftEtherVPN/SoftEtherVPN&#34;&gt;https://github.com/SoftEtherVPN/SoftEtherVPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stable. Found under &lt;a href=&#34;https://github.com/SoftEtherVPN/SoftEtherVPN_Stable&#34;&gt;https://github.com/SoftEtherVPN/SoftEtherVPN_Stable&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;About HTML5-based Modern Admin Console and JSON-RPC API Suite&lt;/h1&gt; &#xA;&lt;h2&gt;Built-in SoftEther VPN Server HTML5 Ajax-based Web Administration Console&lt;/h2&gt; &#xA;&lt;p&gt;We are developing the HTML5 Ajax-based Web Administration Console (currently very limited, under construction) in the embedded HTTPS server on the SoftEther VPN Server.&lt;/p&gt; &#xA;&lt;p&gt;Access to the following URL from your favorite web browser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://&amp;lt;vpn_server_hostname&amp;gt;:&amp;lt;port&amp;gt;/admin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example if your VPN Server is running as the port 5555 on the host at 192.168.0.1, you can access to the web console by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://192.168.0.1:5555/admin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Your HTML5 development contribution is very appreciated. The current HTML5 pages are written by Daiyuu Nobori (the core developer of SoftEther VPN). He is obviously lack of HTML5 development ability. Please kindly consider to contribute for SoftEther VPN&#39;s development on GitHub. Your code will help every people running SoftEther VPN Server.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in SoftEther Server VPN JSON-RPC API Suite&lt;/h2&gt; &#xA;&lt;p&gt;The API Suite allows you to easily develop your original SoftEther VPN Server management application to control the VPN Server (e.g. creating users, adding Virtual Hubs, disconnecting a specified VPN sessions).&lt;/p&gt; &#xA;&lt;p&gt;You can access to the &lt;a href=&#34;https://github.com/SoftEtherVPN/SoftEtherVPN/tree/master/developer_tools/vpnserver-jsonrpc-clients/&#34;&gt;latest SoftEther VPN Server JSON-RPC Document on GitHub.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Almost all control APIs, which the VPN Server provides, are available as JSON-RPC API. You can write your own VPN Server management application in your favorite languages (JavaScript, TypeScript, Java, Python, Ruby, C#, ... etc.)&lt;/li&gt; &#xA; &lt;li&gt;If you are planning to develop your own VPN cloud service, the JSON-RPC API is the best choice to realize the automated operations for the VPN Server.&lt;/li&gt; &#xA; &lt;li&gt;No need to use any specific API client library since all APIs are provided on the JSON-RPC 2.0 Specification. You can use your favorite JSON and HTTPS client library to call any of all APIs in your pure runtime environment.&lt;/li&gt; &#xA; &lt;li&gt;Also, the SoftEther VPN Project provides high-quality JSON-RPC client stub libraries which define all of the API client stub codes. These libraries are written in C#, JavaScript and TypeScript. The Node.js Client Library for VPN Server RPC (vpnrpc) package is also available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;TO CIRCUMVENT YOUR GOVERNMENT&#39;S FIREWALL RESTRICTION&lt;/h1&gt; &#xA;&lt;p&gt;Because SoftEther VPN is overly strong tool to build a VPN tunnel, some censorship governments want to block your access to the source code of SoftEther VPN, by abusing their censorship firewalls.&lt;/p&gt; &#xA;&lt;p&gt;To circumvent your censor&#39;s unjust restriction, SoftEther VPN Project distributes the up-to-date source code on all the following open-source repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GitHub &lt;a href=&#34;https://github.com/SoftEtherVPN/SoftEtherVPN/&#34;&gt;https://github.com/SoftEtherVPN/SoftEtherVPN/&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/SoftEtherVPN/SoftEtherVPN.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GitLab (mirrored from GitHub) &lt;a href=&#34;https://gitlab.com/SoftEther/SoftEtherVPN/&#34;&gt;https://gitlab.com/SoftEther/SoftEtherVPN/&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://gitlab.com/SoftEther/SoftEtherVPN.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Codeberg (mirrored from GitHub) &lt;a href=&#34;https://codeberg.org/softether/vpn&#34;&gt;https://codeberg.org/softether/vpn&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://codeberg.org/softether/vpn.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We hope that you can reach one of the above URLs at least!&lt;/p&gt; &#xA;&lt;h1&gt;SOURCE CODE CONTRIBUTION&lt;/h1&gt; &#xA;&lt;p&gt;Your contribution to SoftEther VPN Project is much appreciated. Please send patches to us through GitHub.&lt;/p&gt; &#xA;&lt;h1&gt;DEAR SECURITY EXPERTS&lt;/h1&gt; &#xA;&lt;p&gt;If you find a bug or a security vulnerability please kindly inform us about the problem immediately so that we can fix the security problem to protect a lot of users around the world as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;Our e-mail address for security reports is: &lt;strong&gt;softether-vpn-security at softether.org&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please note that the above e-mail address is not a technical support inquiry address. If you need technical assistance, please visit &lt;a href=&#34;https://www.softether.org/&#34;&gt;https://www.softether.org/&lt;/a&gt; and ask your question on the users forum.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>peng-zhihui/ElectronBot</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/peng-zhihui/ElectronBot</id>
    <link href="https://github.com/peng-zhihui/ElectronBot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ElectronBot: Mini Desktop Robot&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目是一个桌面级小机器工具人，外观设计的灵感来源是WALL-E里面的EVE~机器人具备USB通信显示画面功能，具备6个自由度（手部roll、pitch，颈部，腰部各一个），使用自己修改的特制舵机支持关节角度回传。&lt;/p&gt; &#xA; &lt;p&gt;本项目提供了配套的全套开发资料和对应SDK以供二次开发，SDK使用说明见后文。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;视频介绍&lt;/strong&gt;：&lt;a href=&#34;https://www.bilibili.com/video/BV1ka411b76m/&#34;&gt;【自制】我做了个能动的 电 脑 配 件！【软核】_哔哩哔哩&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Video&lt;/strong&gt; : &lt;a href=&#34;https://www.youtube.com/watch?v=F29vrvUwqS4&#34;&gt;I made a cute mini desktop robot ! - YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：Issues里面是讨论项目开发相关话题的，不要在里面发无意义的消息，不然watch了仓库的人都会收到通知邮件会给别人造成困扰的！！！灌水可以在仓库的Discuss里讨论！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;更新说明：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.4.5更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加单独的USB通信功能测试工程以及预编译文件，在&lt;code&gt;6.Tests\TestDisplayUSB\_Released&lt;/code&gt;目录；使用方法是直接给STM32F4烧录hex文件，然后直接在电脑端运行&lt;code&gt;Sample.exe&lt;/code&gt;，硬件正常的话屏幕会显示文件夹里的视频。&lt;/li&gt; &#xA; &lt;li&gt;上述预编译文件的源码和固件也在文件夹里有提供，相当于一个最小测试工程，可以自己查看代码进行调试。&lt;/li&gt; &#xA; &lt;li&gt;注意在6个舵机没有测试验证成功之前，调试代码不要使用舵机收发指令的功能，不然总线会阻塞导致程序卡住，推荐的方式是先单独一个一个功能调试，完成了之后再整合做联调。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;安装教程可以参考：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/1668139036&#34;&gt;数码甲鱼的简单生活&lt;/a&gt; 同学的胎教级教程：&lt;a href=&#34;https://www.bilibili.com/video/BV1sY4y1Y7t6&#34;&gt;https://www.bilibili.com/video/BV1sY4y1Y7t6&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/25228512&#34;&gt;绿荫阿广&lt;/a&gt;同学的安装视频 ：&lt;a href=&#34;https://www.bilibili.com/video/BV1oY4y1v7oN&#34;&gt;https://www.bilibili.com/video/BV1oY4y1v7oN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.4.17更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加语音识别版电子，感谢&lt;a href=&#34;https://github.com/jinsonli/ElectronBot-Voice&#34;&gt;jinsonli/ElectronBot-Voice &lt;/a&gt;的分享，演示效果可以看这个视频：&lt;a href=&#34;https://www.bilibili.com/video/BV18a411v7JS&#34;&gt;我复刻了电脑配件机器人electronbot【语音版】&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;视频中演示的舵机调试工具已添加到本仓库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.项目文件说明&lt;/h3&gt; &#xA;&lt;h4&gt;1.1 Hardware&lt;/h4&gt; &#xA;&lt;p&gt;Hardware文件夹内是ElectronBot里面用到的所有电路的原理图和PCB文件，提供Altium Designer格式的源文件以及Gerber格式的光绘文件用于提供给厂家进行直接加工。&lt;/p&gt; &#xA;&lt;p&gt;一共有如下几块板子：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ElectronBot&lt;/strong&gt;：头部的主控板，包含主控MCUSTM32F405RGT6，圆形屏幕GC9A01，USB-HS的PHY芯片USB3300，以及SD卡。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SensorBoard&lt;/strong&gt;：肚子里的传感器板子，包含一个手势传感器，一个USB-HUB芯片，5个I2C舵机的接口，一个MPU6050加速度计&amp;amp;陀螺仪等（USB摄像头也是连接到这个板子的）。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BaseConnector&lt;/strong&gt;：底座上的USB Type-C插座，通过8-Pin的FFC排线和SensorBoard连接，因为机器人本体需要旋转所以使用了柔性排线。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ServoDrive&lt;/strong&gt;：用于魔改舵机替换舵机驱动板的电路，通过I2C总线接口和SensorBoard以及头部主控连接。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ServoDrive-DK&lt;/strong&gt;：同上，但是把PCB的触点接口换成了接插件，方便调试，调试完了下载代码到上面的板子（因为体积太小所以上面的板子没有下载口接插件，所以不方便调试，这里单独提供一个DK版本）。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1.2 Firmware&lt;/h4&gt; &#xA;&lt;p&gt;Firmware中提供了上面所有板子的固件源码，主要包含以下两个工程：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ElectronBot-fw&lt;/strong&gt;：头部主控板的固件代码，用于驱动圆形屏幕，实现USB-CDC协议的自定义设备，以及进行舵机控制。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ServoDrive-fw&lt;/strong&gt;：ServoDrive板子的固件，包含舵机的电位器ADC采样，I2C从机通信和协议解析，电机控制的PWM输出，以及PID闭环算法实现。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ServoDrive-fw-LL&lt;/strong&gt;：也是ServoDrive板子的固件，与上面不同的是改用LL库而不是HAL库实现，所以Flash占用会小一些，可以放进16K的MCU，大家根据自己的情况选择需要的固件。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;工程都是基于STM32HAL实现的，所以提供了对应的&lt;code&gt;.ioc&lt;/code&gt;文件，可以自行用STM32CubeMX打开，生成对应的keil或者STM32IDE工程文件。当让也可以像我一样，用CLion进行编译和下载，把CLion变成STM32的IDE的方法参考我之前发的一篇教程：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/145801160&#34;&gt;配置CLion用于STM32开发【优雅の嵌入式开发】&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h4&gt;1.3 Software&lt;/h4&gt; &#xA;&lt;p&gt;Software中提供了视频里演示的上位机软件ElectronStudio的Unity工程源码，以及SDK库和SDK源文件，库的层级关系由下至上分别是：&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ElectronBotSDK-LowLevel&lt;/code&gt; -&amp;gt; &lt;code&gt;ElectronBotSDK-Player&lt;/code&gt; -&amp;gt; &lt;code&gt;ElectronBotSDK-UnityBridge&lt;/code&gt; -&amp;gt; &lt;code&gt;Electron-Studio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;SDK的使用方法见后文。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;此外文件夹里还包含了BotDriver也就是ElectronBot连接电脑需要安装的USB驱动文件，安装方法是在设备管理器里右键更新驱动，然后选择自定义目录导航到这个文件夹即可安装。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;安装过程需要禁用Windows的强制驱动签名（没钱给M$买签名），禁用方法根据你的操作系统版本有不同，可以百度一下。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.4 CAD-Model&lt;/h4&gt; &#xA;&lt;p&gt;文件夹中包含了ElectronBot的结构设计图纸，&lt;code&gt;.step&lt;/code&gt;通用格式可以在所有软件里打开编辑；同时为了满足有的同学想要Fusion360里面的原始工程，我也共享了&lt;code&gt;.f3d&lt;/code&gt;格式源文件，源文件里包含了完整的编辑建模时间轴。&lt;/p&gt; &#xA;&lt;p&gt;共享连接：&lt;a href=&#34;https://a360.co/3t6CUMS&#34;&gt;https://a360.co/3t6CUMS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;此目录下也包含了视频里演示的&lt;a href=&#34;https://space.bilibili.com/38053181&#34;&gt;oooooohmygosh&lt;/a&gt;同学设计的表情包动画，其中每个表情的动画都包含了三个片段：&lt;code&gt;进入-循环-退出&lt;/code&gt;，进入和退出是可以和其他动画进行无缝衔接的，因此可以方便用代码调用这些表情包实现很多效果。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;表情文件需要修改为英文名和路径后使用。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我把视频结尾提到的收纳盒也上传了，可以用FDM打印，5%填充即可。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.5 Docs&lt;/h4&gt; &#xA;&lt;p&gt;相关的参考文件，包括芯片的Datasheet等。&lt;/p&gt; &#xA;&lt;p&gt;此目录下还有个_LargeFiles文件夹，是软件过程项目中依赖的一些库（比如OpenCV）因为DLL比较大超过了100MB，GitHub需要开启LFS才能提交，而我不想开启LFS，因此单独拿出来压缩了提交到仓库，编译工程的时候需要把这些库放到对应工程目录下，具体的路径见 &lt;code&gt;_path.txt&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;2.硬件架构说明&lt;/h3&gt; &#xA;&lt;p&gt;机器人的硬件分为&lt;strong&gt;结构&lt;/strong&gt;和&lt;strong&gt;电路&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;2.1 结构设计&lt;/h4&gt; &#xA;&lt;p&gt;结构设计方面大家可以研究3D图纸，值得注意的点如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;主要部件的加工方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;我是用3D打印加工的，因为包含了齿轮等精密部件，传统FDM打印的精度可能不太理想，光固化是可以的，但是支撑问题可能导致打印机表面不平整，而且LCD光固化的零件强度不太够。所以推荐使用HP尼龙打印，可以去嘉立创（三维猴）打印，价格这几个零件加起来应该是200-300元左右。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;也用到了几个轴承和一些特殊的螺丝，轴承型号的话肩膀关节的型号是&lt;code&gt;6x10x3mm&lt;/code&gt;，腰部轴承型号是&lt;code&gt;25x32x4mm&lt;/code&gt;。特殊螺丝是肩膀roll自由度的推杆，使用了&lt;code&gt;M2x25mm&lt;/code&gt;的半牙螺丝。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;手臂推杆还用到了一个小挡块，这个挡块不用打印加工，直接用一段橡胶电线剪下一小段即可（视频里有演示），这个挡块是需要和推杆的螺丝固定到一起的，可以使用502粘合。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;手臂的驱动原理？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;视频里其实演示了，我自己设计了一个比较巧妙的驱动方式，pitch方向运动很好理解就是齿轮传动，roll方向使用了T型推杆如下：&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;推杆被M2螺丝的帽以及一个挡块限制住，当黄色的组件转动的时候，带动推杆左右移动，而推杆的另一端在手臂组件内由一个导槽限制运动方向从而将动力传递到转轴，此方案的力矩是可以双向传递的&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;脸部的透明玻璃如何制作的&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;tb搜索&lt;code&gt;表蒙子&lt;/code&gt;，我用的&lt;code&gt;31.5mm&lt;/code&gt;直径的。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;安装顺序？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;可以参考这位&lt;a href=&#34;https://space.bilibili.com/25228512&#34;&gt;绿荫阿广&lt;/a&gt;同学的安装视频 ：&lt;a href=&#34;https://www.bilibili.com/video/BV1oY4y1v7oN&#34;&gt;https://www.bilibili.com/video/BV1oY4y1v7oN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装过程中还有一点值得注意的是，因为机身体积太极限，几个舵机的安装架有的是需要剪短一边的不然塞不下，然后如果自己的打印机比较脆螺丝固定不牢的话，也可以使用热熔胶固定。&lt;/li&gt; &#xA; &lt;li&gt;另外手臂的推杆可以稍微打磨一下并加上润滑脂使其推动更顺畅。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.2 电路设计&lt;/h4&gt; &#xA;&lt;p&gt;电路没啥好分析的，直接看原理图吧。&lt;/p&gt; &#xA;&lt;p&gt;值得提一下的是USB-HUB的拓扑，如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于芯片选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;主控的STM32F4，这个不可替换，因为F4以下的型号不支持USB-HS外接PHY。&lt;/li&gt; &#xA; &lt;li&gt;舵机驱动的STM32F0，这个可以替换，而且建议有能力的同学替换，因为我项目中用到的STM32F042P6芯片比较贵（买的十多元一片），而舵机驱动对于芯片的性能要求没那么高，完全可以用STM8之类的8位MCU替代，所以大家可以参考我的固件源码寻求能够替换的MCU改进一下方案。&lt;/li&gt; &#xA; &lt;li&gt;替换STM32F0的MCU需要支持以下特性：带一个ADC采样、带两路PWM输出、带一个I2C接口，Flash和SRAM大小根据我的代码需要32K和4K或者更大（我固件用了HAL库以及C++特性，如果你可以基于LL库或者不适用C++的话应该需求还可以小一半）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于烧录方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用JLink、STLink之类的调试器烧录，注意驱动板因为体积限制只留了三个烧录触点，需要使用&lt;code&gt;SH1.0&lt;/code&gt;的接插件接触进行烧写。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于舵机的改造？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;通常的RC-Servo都是使用电位器进行绝对角度的测量的，因此我在驱动板中也是使用ADC读取电位器的电压值转换成角度反馈，而驱动芯片使用了我找到的封装最小的一个芯片&lt;code&gt;FM116B&lt;/code&gt;。大家改造舵机的时候，注意区分电机两根接线的方向，如果调试发现电机不闭环的话，可能需要交换一下接线顺序。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;另外那个小的3g舵机的改造需要把盖子拆开去掉（空间实在是太小加了盖子驱动塞不进去），然后去掉了后盖的舵机需要换成M1x10mm的螺丝进行固定不然会散架的。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;其实最理想的情况是找舵机厂家定制一个这样的迷你舵机，但是因为我一个人小批量做人家肯定不接单的，大家有渠道的话可以尝试一下。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于摄像头选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;我是用的是这款：&lt;a href=&#34;https://item.taobao.com/item.htm?id=567717780577&#34;&gt;https://item.taobao.com/item.htm?id=567717780577&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;当然大家可以根据需要自己替换别的USB摄像头（黑白的、高帧率的），只要塞得下就行，摄像头是直接拆了接线焊在SensorBoard上的 。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;值得注意的是，&lt;strong&gt;我用的USB-HUB芯片的1拖4的&lt;/strong&gt;，目前使用了三个口，还剩一个其实可以再集成一个USB麦克风，这样ElectronBot也能当作电脑的麦克风使用了。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.软件架构说明&lt;/h3&gt; &#xA;&lt;h4&gt;3.1 固件代码&lt;/h4&gt; &#xA;&lt;p&gt;固件代码的细节和流程说明比较繁琐，晚点我慢慢补充吧，总之可以直接基于前面提到的方式进行编译下载，然后慢慢研究源码。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;STM32F4的源码如果通过&lt;code&gt;.ioc&lt;/code&gt;重新生成工程的话，记得要把USB相关的几个文件预先备份，生成完代码后再替换回我原来的文件，因为CubeMX会覆盖生成把相关代码修改掉（我实际是使用Git的文件版本回退操作的 ）。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3.2 舵机I2C协议&lt;/h4&gt; &#xA;&lt;p&gt;魔改后的舵机通过I2C接口和控制板进行通信，STM32F4的控制板为主机，舵机为从机。通信的过程始终是主机发起的，主机首先下发位置、参数等指令，然后即时取回相关数据完成一个通信来回。&lt;/p&gt; &#xA;&lt;p&gt;每个舵机作为从机接收两个地址的指令：&lt;strong&gt;自己的ID号&lt;/strong&gt;，以及&lt;strong&gt;0号广播&lt;/strong&gt;。广播用于在没有给舵机设置地址的时候作为通配地址使用（比如你刚烧写完舵机固件，此时舵机的Flash是没有储存自己的ID的，只能通过0号地址通信）。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;值得注意的是：舵机和主机的上电需要有先后顺序，一定要先让从机初始化完成开始监听数据，再让主机发送指令！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果主机发送指令的时候从机不响应，或者多个舵机地址相同同时响应，都可能引起通信错误，因此需要保证上述的顺序。&lt;/p&gt; &#xA; &lt;p&gt;由于硬件上主机和舵机上电都是同时的，所以在主机的固件代码中，有一个延时2S的代码（其实可以不用那么久），就是等待舵机都上电初始化完成再开始通信。&lt;/p&gt; &#xA; &lt;p&gt;调试的时候，一个舵机一个舵机调试，注释掉其他未连接的舵机的通信代码，不然也会造成轮询等待超时。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;关于舵机的指令含义，感谢 &lt;strong&gt;&lt;a href=&#34;https://github.com/leazer&#34;&gt;leazer&lt;/a&gt;&lt;/strong&gt; 同学在Issues整理的表格：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pengzhihui-markdown.oss-cn-shanghai.aliyuncs.com/img/20220322010150.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;指令后续可能会更新。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3.3 SDK使用说明&lt;/h4&gt; &#xA;&lt;p&gt;SDK架构设计如图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/ElectronBot/main/5.Docs/Images/robot7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;具体的使用方法可以参考SDK工程中给出的&lt;code&gt;sample.cpp&lt;/code&gt;，我是用CLion+MSVC工具链编译的，大家也可以把源码复制到自己的Visual Studio工程编译。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ElectronBotSDK-UnityBridge&lt;/code&gt;工程编译生成的DLL文件需要拷贝到&lt;code&gt;Unity\ElectronBot-Studio\Assets\Plugins&lt;/code&gt;目录下，用于连接本地的C++代码和Unity中C#环境。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;对了，注意ElectronStudio中目前选择图片视频文件还不支持中文路径！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;关于SDK的具体实现细节可以阅读源码，我晚点有空也会再更新描述。&lt;/p&gt; &#xA;&lt;h3&gt;有的问题在Issues里面已经解答了，问问题之前先翻一下open/closed的Issues。&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢以下项目：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/opencv/opencv&#34;&gt;opencv/opencv: Open Source Computer Vision Library (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/CMU-Perceptual-Computing-Lab/openpose&#34;&gt;https://github.com/CMU-Perceptual-Computing-Lab/openpose&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Lexikos/AutoHotkey_L&#34;&gt;Lexikos/AutoHotkey_L: AutoHotkey - macro-creation and automation-oriented scripting utility for Windows. (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/pq8888168/article/details/85781908&#34;&gt;https://blog.csdn.net/pq8888168/article/details/85781908&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>torvalds/linux</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/torvalds/linux</id>
    <link href="https://github.com/torvalds/linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux kernel source tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux kernel&lt;/h1&gt; &#xA;&lt;p&gt;There are several guides for kernel developers and users. These guides can be rendered in a number of formats, like HTML and PDF. Please read Documentation/admin-guide/README.rst first.&lt;/p&gt; &#xA;&lt;p&gt;In order to build the documentation, use &lt;code&gt;make htmldocs&lt;/code&gt; or &lt;code&gt;make pdfdocs&lt;/code&gt;. The formatted documentation can also be read online at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://www.kernel.org/doc/html/latest/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are various text files in the Documentation/ subdirectory, several of them using the Restructured Text markup notation.&lt;/p&gt; &#xA;&lt;p&gt;Please read the Documentation/process/changes.rst file, as it contains the requirements for building and running the kernel, and information about the problems which may result by upgrading your kernel.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nesbox/TIC-80</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/nesbox/TIC-80</id>
    <link href="https://github.com/nesbox/TIC-80" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TIC-80 is a fantasy computer for making, playing and sharing tiny games.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nesbox/TIC-80/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/nesbox/TIC-80/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tic80.com/img/logo64.png&#34; alt=&#34;TIC-80&#34;&gt; &lt;strong&gt;TIC-80 TINY COMPUTER&lt;/strong&gt; - &lt;a href=&#34;https://tic80.com&#34;&gt;https://tic80.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;TIC-80 is a free and open source fantasy computer for making, playing and sharing tiny games.&lt;/p&gt; &#xA;&lt;p&gt;With TIC-80 you get built-in tools for development: code, sprites, maps, sound editors and the command line, which is enough to create a mini retro game.&lt;/p&gt; &#xA;&lt;p&gt;Games are packaged into a cartridge file, which can be easily distributed. TIC-80 works on all popular platforms. This means your cartridge can be played in any device.&lt;/p&gt; &#xA;&lt;p&gt;To make a retro styled game, the whole process of creation and execution takes place under some technical limitations: 240x136 pixel display, 16 color palette, 256 8x8 color sprites, 4 channel sound, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1101448/92492270-d6bcbc80-f1fb-11ea-9d2d-468ad015ace2.gif&#34; alt=&#34;TIC-80&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple programming languages: &lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt;, &lt;a href=&#34;https://moonscript.org&#34;&gt;Moonscript&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;Javascript&lt;/a&gt;, &lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://wren.io/&#34;&gt;Wren&lt;/a&gt;, &lt;a href=&#34;https://fennel-lang.org&#34;&gt;Fennel&lt;/a&gt;, and &lt;a href=&#34;http://www.squirrel-lang.org&#34;&gt;Squirrel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Games can have mouse and keyboard as input&lt;/li&gt; &#xA; &lt;li&gt;Games can have up to 4 controllers as input (with up to 8 buttons, each)&lt;/li&gt; &#xA; &lt;li&gt;Built-in editors: for code, sprites, world maps, sound effects and music&lt;/li&gt; &#xA; &lt;li&gt;An additional memory bank: load different assets from your cartridge while your game is executing&lt;/li&gt; &#xA; &lt;li&gt;Moderated community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Binary Downloads&lt;/h1&gt; &#xA;&lt;p&gt;You can download compiled versions for the major operating systems directly from our &lt;a href=&#34;https://github.com/nesbox/TIC-80/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Nightly builds&lt;/h2&gt; &#xA;&lt;p&gt;Can be downloaded from &lt;a href=&#34;https://nightly.link/nesbox/TIC-80/workflows/build/main&#34;&gt;nightly builds&lt;/a&gt; page or from the &lt;a href=&#34;https://github.com/nesbox/TIC-80/actions?query=branch%3Amain&#34;&gt;Github Actions&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h1&gt;Pro Version&lt;/h1&gt; &#xA;&lt;p&gt;To help support TIC-80 development, we have a &lt;a href=&#34;https://nesbox.itch.io/tic80&#34;&gt;PRO Version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This version has a few additional features and binaries can only be downloaded on our Itch.io page.&lt;/p&gt; &#xA;&lt;p&gt;For users who can&#39;t spend the money, we made it easy to build the pro version from the source code: (&lt;code&gt;cmake .. -DBUILD_PRO=On&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Pro features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save/load cartridges in text format, and create your game in any editor you want, also useful for version control systems.&lt;/li&gt; &#xA; &lt;li&gt;Even more memory banks: instead of having only 1 memory bank you have 8.&lt;/li&gt; &#xA; &lt;li&gt;Export your game without editors, and then publish it to app stores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;You can play and share games, tools and music at &lt;a href=&#34;https://tic80.com/play&#34;&gt;https://tic80.com/play&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The community also hangs out and discusses on &lt;a href=&#34;https://t.me/tic80&#34;&gt;Telegram&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/HwZDw7n4dN&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;You can contribute by reporting a bug or requesting a new feature on our &lt;a href=&#34;https://github.com/nesbox/TIC-80/issues&#34;&gt;issues page&lt;/a&gt;. Keep in mind when engaging on a discussion to follow our &lt;a href=&#34;https://github.com/nesbox/TIC-80/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also contribute by reviewing or improving our &lt;a href=&#34;https://github.com/nesbox/TIC-80/wiki&#34;&gt;wiki&lt;/a&gt;. The wiki holds TIC-80 documentation, code snippets and game development tutorials.&lt;/p&gt; &#xA;&lt;h1&gt;Build instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h3&gt;with Visual Studio 2017&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install &lt;code&gt;Visual Studio 2017&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;Ruby&lt;/code&gt; (you can use &lt;a href=&#34;https://rubyinstaller.org/&#34;&gt;RubyInstaller&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;run following commands in &lt;code&gt;cmd&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -G &#34;Visual Studio 15 2017 Win64&#34; ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open &lt;code&gt;TIC-80.sln&lt;/code&gt; and build&lt;/li&gt; &#xA; &lt;li&gt;enjoy :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;with MinGW&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install &lt;code&gt;mingw-w64&lt;/code&gt; (&lt;a href=&#34;http://mingw-w64.org&#34;&gt;http://mingw-w64.org&lt;/a&gt;) and add &lt;code&gt;.../mingw/bin&lt;/code&gt; path to the &lt;em&gt;System Variables Path&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;cmake&lt;/code&gt; (&lt;a href=&#34;https://cmake.org&#34;&gt;https://cmake.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;Ruby&lt;/code&gt; (you can use &lt;a href=&#34;https://rubyinstaller.org/&#34;&gt;RubyInstaller&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;run following commands in &lt;code&gt;terminal&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -G &#34;MinGW Makefiles&#34; ..&#xA;mingw32-make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 14.04&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git cmake ruby-full libgles1-mesa-dev libglu-dev -y&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install the latest CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget &#34;https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.sh&#34;&#xA;sudo sh cmake-3.12.0-Linux-x86_64.sh --skip-license --prefix=/usr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu 18.04&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install g++ git cmake ruby-full libglvnd-dev libglu1-mesa-dev freeglut3-dev libasound2-dev -y&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora 36&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf -y groupinstall &#34;Development Tools&#34; &#34;Development Libraries&#34;&#xA;sudo dnf -y install ruby rubygem-{tk{,-doc},rake,test-unit} cmake libglvnd-devel libglvnd-gles freeglut-devel clang libXext-devel SDL_sound pipewire-devel pipewire-jack-audio-connection-kit-devel pulseaudio-libs-devel &#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake .. -DCMAKE_CXX_COMPILER=clang++ -DSDL_ALSA=On&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Raspberry Pi (Retropie)&lt;/h3&gt; &#xA;&lt;p&gt;First, add jessie-backports repo to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# required public keys&#xA;gpg --keyserver pgpkeys.mit.edu --recv-key  8B48AD6246925553&#xA;gpg -a --export 8B48AD6246925553 | sudo apt-key add -&#xA;gpg --keyserver pgpkeys.mit.edu --recv-key 7638D0442B90D010&#xA;gpg -a --export 7638D0442B90D010 | sudo apt-key add -&#xA;&#xA;# upgrade system&#xA;sudo apt-get update&#xA;sudo apt-get dist-upgrade&#xA;&#xA;# install software&#xA;sudo apt-get install git build-essential ruby-full libsdl2-dev zlib1g-dev&#xA;sudo apt-get install -t jessie-backports liblua5.3-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you are using a normal Raspberry Pi image (not Retropie) you may not have OpenGL drivers enabled. Run &lt;code&gt;sudo raspi-config&lt;/code&gt;, then select 7 for &#34;Advanced Options&#34;, followed by 6 for &#34;GL Drivers&#34;, and enable &#34;GL (Fake KMS) Desktop Driver&#34;. After changing this setting, reboot.&lt;/p&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;p&gt;install &lt;code&gt;Command Line Tools for Xcode&lt;/code&gt; and &lt;code&gt;brew&lt;/code&gt; package manager&lt;/p&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install git cmake&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to create application icon for development version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/Applications/TIC80dev.app/Contents/{MacOS,Resources}&#xA;cp -f macosx/tic80.plist ~/Applications/TIC80dev.app/Contents/Info.plist&#xA;cp -f macosx/tic80.icns ~/Applications/TIC80dev.app/Contents/Resources&#xA;cat &amp;gt; ~/Applications/TIC80dev.app/MacOS/TIC80dev &amp;lt;&amp;lt;EOF&#xA;#!/bin/sh&#xA;exec /Users/nesbox/projects/TIC-80/build/bin/tic80 --skip --scale 2 &amp;gt;/dev/null&#xA;EOF&#xA;chmod +x ~/Applications/TIC80dev.app/MacOS/TIC80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to update the absolute path to the tic80 binary in the script, or update the launch arguments.&lt;/p&gt; &#xA;&lt;h1&gt;Install instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;To install run &lt;code&gt;sudo make install -j4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;TIC-80 can now be run with &lt;code&gt;tic80&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iOS / tvOS&lt;/h2&gt; &#xA;&lt;p&gt;You can find iOS/tvOS version here&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0.60.3: &lt;a href=&#34;https://github.com/brunophilipe/TIC-80&#34;&gt;https://github.com/brunophilipe/TIC-80&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;0.45.0: &lt;a href=&#34;https://github.com/CliffsDover/TIC-80&#34;&gt;https://github.com/CliffsDover/TIC-80&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filippo Rivato - &lt;a href=&#34;https://twitter.com/HomineLudens&#34;&gt;Twitter @HomineLudens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fred Bednarski - &lt;a href=&#34;https://twitter.com/FredBednarski&#34;&gt;Twitter @FredBednarski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Al Rado - &lt;a href=&#34;https://twitter.com/alrado2&#34;&gt;Twitter @alrado2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trevor Martin - &lt;a href=&#34;https://twitter.com/trelemar&#34;&gt;Twitter @trelemar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MonstersGoBoom - &lt;a href=&#34;https://twitter.com/MonstersGo&#34;&gt;Twitter @MonstersGoBoom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matheus Lessa - &lt;a href=&#34;https://twitter.com/matheuslrod&#34;&gt;Twitter @matheuslrod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CliffsDover - &lt;a href=&#34;https://twitter.com/DancingBottle&#34;&gt;Twitter @DancingBottle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Frantisek Jahoda - &lt;a href=&#34;https://github.com/jahodfra&#34;&gt;GitHub @jahodfra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guilherme Medeiros - &lt;a href=&#34;https://github.com/frenetic&#34;&gt;GitHub @frenetic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrei Rudenko - &lt;a href=&#34;https://github.com/RudenkoArts&#34;&gt;GitHub @RudenkoArts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Phil Hagelberg - &lt;a href=&#34;https://technomancy.us/colophon&#34;&gt;@technomancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rob Loach - &lt;a href=&#34;https://twitter.com/RobLoach&#34;&gt;Twitter @RobLoach&lt;/a&gt; &lt;a href=&#34;https://github.com/RobLoach&#34;&gt;GitHub @RobLoach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wade Brainerd - &lt;a href=&#34;https://github.com/wadetb&#34;&gt;GitHub @wadetb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Robinson - &lt;a href=&#34;https://github.com/paul59&#34;&gt;GitHub @paul59&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stefan Devai - &lt;a href=&#34;https://github.com/stefandevai&#34;&gt;GitHub @stefandevai&lt;/a&gt; &lt;a href=&#34;https://stefandevai.me&#34;&gt;Blog stefandevai.me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Damien de Lemeny - &lt;a href=&#34;https://github.com/ddelemeny&#34;&gt;GitHub @ddelemeny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adrian Siekierka - &lt;a href=&#34;https://github.com/asiekierka&#34;&gt;GitHub @asiekierka&lt;/a&gt; &lt;a href=&#34;https://asie.pl/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jay Em (Sweetie16 palette) - &lt;a href=&#34;https://twitter.com/GrafxKid&#34;&gt;Twitter @GrafxKid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;msx80 - &lt;a href=&#34;https://twitter.com/msx80&#34;&gt;Twitter @msx80&lt;/a&gt; &lt;a href=&#34;https://github.com/msx80&#34;&gt;Github msx80&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Josh Goebel - &lt;a href=&#34;https://twitter.com/dreamer3&#34;&gt;Twitter @dreamer3&lt;/a&gt; &lt;a href=&#34;https://github.com/joshgoebel&#34;&gt;Github joshgoebel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joshua Minor - &lt;a href=&#34;https://github.com/jminor&#34;&gt;GitHub @jminor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jeremiasz Nelz - &lt;a href=&#34;https://github.com/remi6397&#34;&gt;Github @remi6397&lt;/a&gt; &lt;a href=&#34;https://nelz.pl&#34;&gt;WWW&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nothings/stb</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/nothings/stb</id>
    <link href="https://github.com/nothings/stb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;stb single-file public domain libraries for C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stb&lt;/h1&gt; &#xA;&lt;p&gt;single-file public domain (or MIT licensed) libraries for C/C++&lt;/p&gt; &#xA;&lt;p&gt;Noteworthy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;image loader: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;image writer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h&#34;&gt;stb_image_write.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;image resizer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_resize.h&#34;&gt;stb_image_resize.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;font text rasterizer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h&#34;&gt;stb_truetype.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;typesafe containers: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_ds.h&#34;&gt;stb_ds.h&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most libraries by stb, except: stb_dxt by Fabian &#34;ryg&#34; Giesen, stb_image_resize by Jorge L. &#34;VinoBS&#34; Rodriguez, and stb_sprintf by Jeff Roberts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;stb_libs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;library&lt;/th&gt; &#xA;   &lt;th&gt;lastest version&lt;/th&gt; &#xA;   &lt;th&gt;category&lt;/th&gt; &#xA;   &lt;th&gt;LoC&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_vorbis.c&#34;&gt;stb_vorbis.c&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.22&lt;/td&gt; &#xA;   &lt;td&gt;audio&lt;/td&gt; &#xA;   &lt;td&gt;5584&lt;/td&gt; &#xA;   &lt;td&gt;decode ogg vorbis files from file/memory to float/16-bit signed output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_hexwave.h&#34;&gt;stb_hexwave.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;td&gt;audio&lt;/td&gt; &#xA;   &lt;td&gt;680&lt;/td&gt; &#xA;   &lt;td&gt;audio waveform synthesizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.27&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;7897&lt;/td&gt; &#xA;   &lt;td&gt;image loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h&#34;&gt;stb_truetype.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.26&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;5077&lt;/td&gt; &#xA;   &lt;td&gt;parse, decode, and rasterize characters from truetype fonts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h&#34;&gt;stb_image_write.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.16&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;1724&lt;/td&gt; &#xA;   &lt;td&gt;image writing to disk: PNG, TGA, BMP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_resize.h&#34;&gt;stb_image_resize.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;2634&lt;/td&gt; &#xA;   &lt;td&gt;resize images larger/smaller with good quality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_rect_pack.h&#34;&gt;stb_rect_pack.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.01&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;623&lt;/td&gt; &#xA;   &lt;td&gt;simple 2D rectangle packer with decent quality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_ds.h&#34;&gt;stb_ds.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.67&lt;/td&gt; &#xA;   &lt;td&gt;utility&lt;/td&gt; &#xA;   &lt;td&gt;1895&lt;/td&gt; &#xA;   &lt;td&gt;typesafe dynamic array and hash tables for C, will compile in C++&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_sprintf.h&#34;&gt;stb_sprintf.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.10&lt;/td&gt; &#xA;   &lt;td&gt;utility&lt;/td&gt; &#xA;   &lt;td&gt;1906&lt;/td&gt; &#xA;   &lt;td&gt;fast sprintf, snprintf for C/C++&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_textedit.h&#34;&gt;stb_textedit.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.14&lt;/td&gt; &#xA;   &lt;td&gt;user&amp;nbsp;interface&lt;/td&gt; &#xA;   &lt;td&gt;1429&lt;/td&gt; &#xA;   &lt;td&gt;guts of a text editor for games etc implementing them from scratch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_voxel_render.h&#34;&gt;stb_voxel_render.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.89&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;3807&lt;/td&gt; &#xA;   &lt;td&gt;Minecraft-esque voxel rendering &#34;engine&#34; with many more features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_dxt.h&#34;&gt;stb_dxt.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.12&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;719&lt;/td&gt; &#xA;   &lt;td&gt;Fabian &#34;ryg&#34; Giesen&#39;s real-time DXT compressor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_easy_font.h&#34;&gt;stb_easy_font.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;305&lt;/td&gt; &#xA;   &lt;td&gt;quick-and-dirty easy-to-deploy bitmap font for printing frame rate, etc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_tilemap_editor.h&#34;&gt;stb_tilemap_editor.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.42&lt;/td&gt; &#xA;   &lt;td&gt;game&amp;nbsp;dev&lt;/td&gt; &#xA;   &lt;td&gt;4187&lt;/td&gt; &#xA;   &lt;td&gt;embeddable tilemap editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_herringbone_wang_tile.h&#34;&gt;stb_herringbone_wa...&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;   &lt;td&gt;game&amp;nbsp;dev&lt;/td&gt; &#xA;   &lt;td&gt;1221&lt;/td&gt; &#xA;   &lt;td&gt;herringbone Wang tile map generator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_c_lexer.h&#34;&gt;stb_c_lexer.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;   &lt;td&gt;parsing&lt;/td&gt; &#xA;   &lt;td&gt;940&lt;/td&gt; &#xA;   &lt;td&gt;simplify writing parsers for C-like languages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_divide.h&#34;&gt;stb_divide.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.94&lt;/td&gt; &#xA;   &lt;td&gt;math&lt;/td&gt; &#xA;   &lt;td&gt;433&lt;/td&gt; &#xA;   &lt;td&gt;more useful 32-bit modulus e.g. &#34;euclidean divide&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_connected_components.h&#34;&gt;stb_connected_comp...&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.96&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;1049&lt;/td&gt; &#xA;   &lt;td&gt;incrementally compute reachability on grids&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_leakcheck.h&#34;&gt;stb_leakcheck.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;194&lt;/td&gt; &#xA;   &lt;td&gt;quick-and-dirty malloc/free leak-checking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_include.h&#34;&gt;stb_include.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.02&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;295&lt;/td&gt; &#xA;   &lt;td&gt;implement recursive #include support, particularly for GLSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Total libraries: 20 Total lines of C code: 42599&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;What&#39;s the license?&lt;/h4&gt; &#xA;&lt;p&gt;These libraries are in the public domain. You can do anything you want with them. You have no legal obligation to do anything else, although I appreciate attribution.&lt;/p&gt; &#xA;&lt;p&gt;They are also licensed under the MIT open source license, if you have lawyers who are unhappy with public domain. Every source file includes an explicit dual-license for you to choose from.&lt;/p&gt; &#xA;&lt;h4&gt;How do I use these libraries?&lt;/h4&gt; &#xA;&lt;p&gt;The idea behind single-header file libraries is that they&#39;re easy to distribute and deploy because all the code is contained in a single file. By default, the .h files in here act as their own header files, i.e. they declare the functions contained in the file but don&#39;t actually result in any code getting compiled.&lt;/p&gt; &#xA;&lt;p&gt;So in addition, you should select &lt;em&gt;exactly one&lt;/em&gt; C/C++ source file that actually instantiates the code, preferably a file you&#39;re not editing frequently. This file should define a specific macro (this is documented per-library) to actually enable the function definitions. For example, to use stb_image, you should have exactly one C/C++ file that doesn&#39;t include stb_image.h regularly, but instead does&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define STB_IMAGE_IMPLEMENTATION&#xA;#include &#34;stb_image.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The right macro to define is pointed out right at the top of each of these libraries.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;other_libs&#34;&gt;&lt;/a&gt; Are there other single-file public-domain/open source libraries with minimal dependencies out there?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nothings/single_file_libs&#34;&gt;Yes.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;If I wrap an stb library in a new library, does the new library have to be public domain/MIT?&lt;/h4&gt; &#xA;&lt;p&gt;No, because it&#39;s public domain you can freely relicense it to whatever license your new library wants to be.&lt;/p&gt; &#xA;&lt;h4&gt;What&#39;s the deal with SSE support in GCC-based compilers?&lt;/h4&gt; &#xA;&lt;p&gt;stb_image will either use SSE2 (if you compile with -msse2) or will not use any SIMD at all, rather than trying to detect the processor at runtime and handle it correctly. As I understand it, the approved path in GCC for runtime-detection require you to use multiple source files, one for each CPU configuration. Because stb_image is a header-file library that compiles in only one source file, there&#39;s no approved way to build both an SSE-enabled and a non-SSE-enabled variation.&lt;/p&gt; &#xA;&lt;p&gt;While we&#39;ve tried to work around it, we&#39;ve had multiple issues over the years due to specific versions of gcc breaking what we&#39;re doing, so we&#39;ve given up on it. See &lt;a href=&#34;https://github.com/nothings/stb/issues/280&#34;&gt;https://github.com/nothings/stb/issues/280&lt;/a&gt; and &lt;a href=&#34;https://github.com/nothings/stb/issues/410&#34;&gt;https://github.com/nothings/stb/issues/410&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h4&gt;Some of these libraries seem redundant to existing open source libraries. Are they better somehow?&lt;/h4&gt; &#xA;&lt;p&gt;Generally they&#39;re only better in that they&#39;re easier to integrate, easier to use, and easier to release (single file; good API; no attribution requirement). They may be less featureful, slower, and/or use more memory. If you&#39;re already using an equivalent library, there&#39;s probably no good reason to switch.&lt;/p&gt; &#xA;&lt;h4&gt;Can I link directly to the table of stb libraries?&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/nothings/stb#stb_libs&#34;&gt;this URL&lt;/a&gt; to link directly to that list.&lt;/p&gt; &#xA;&lt;h4&gt;Why do you list &#34;lines of code&#34;? It&#39;s a terrible metric.&lt;/h4&gt; &#xA;&lt;p&gt;Just to give you some idea of the internal complexity of the library, to help you manage your expectations, or to let you know what you&#39;re getting into. While not all the libraries are written in the same style, they&#39;re certainly similar styles, and so comparisons between the libraries are probably still meaningful.&lt;/p&gt; &#xA;&lt;p&gt;Note though that the lines do include both the implementation, the part that corresponds to a header file, and the documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Why single-file headers?&lt;/h4&gt; &#xA;&lt;p&gt;Windows doesn&#39;t have standard directories where libraries live. That makes deploying libraries in Windows a lot more painful than open source developers on Unix-derivates generally realize. (It also makes library dependencies a lot worse in Windows.)&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a common problem in Windows where a library was built against a different version of the runtime library, which causes link conflicts and confusion. Shipping the libs as headers means you normally just compile them straight into your project without making libraries, thus sidestepping that problem.&lt;/p&gt; &#xA;&lt;p&gt;Making them a single file makes it very easy to just drop them into a project that needs them. (Of course you can still put them in a proper shared library tree if you want.)&lt;/p&gt; &#xA;&lt;p&gt;Why not two files, one a header and one an implementation? The difference between 10 files and 9 files is not a big deal, but the difference between 2 files and 1 file is a big deal. You don&#39;t need to zip or tar the files up, you don&#39;t have to remember to attach &lt;em&gt;two&lt;/em&gt; files, etc.&lt;/p&gt; &#xA;&lt;h4&gt;Why &#34;stb&#34;? Is this something to do with Set-Top Boxes?&lt;/h4&gt; &#xA;&lt;p&gt;No, they are just the initials for my name, Sean T. Barrett. This was not chosen out of egomania, but as a moderately sane way of namespacing the filenames and source function names.&lt;/p&gt; &#xA;&lt;h4&gt;Will you add more image types to stb_image.h?&lt;/h4&gt; &#xA;&lt;p&gt;No. As stb_image use has grown, it has become more important for us to focus on security of the codebase. Adding new image formats increases the amount of code we need to secure, so it is no longer worth adding new formats.&lt;/p&gt; &#xA;&lt;h4&gt;Do you have any advice on how to create my own single-file library?&lt;/h4&gt; &#xA;&lt;p&gt;Yes. &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/stb_howto.txt&#34;&gt;https://github.com/nothings/stb/blob/master/docs/stb_howto.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why public domain?&lt;/h4&gt; &#xA;&lt;p&gt;I prefer it over GPL, LGPL, BSD, zlib, etc. for many reasons. Some of them are listed here: &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/why_public_domain.md&#34;&gt;https://github.com/nothings/stb/blob/master/docs/why_public_domain.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why C?&lt;/h4&gt; &#xA;&lt;p&gt;Primarily, because I use C, not C++. But it does also make it easier for other people to use them from other languages.&lt;/p&gt; &#xA;&lt;h4&gt;Why not C99? stdint.h, declare-anywhere, etc.&lt;/h4&gt; &#xA;&lt;p&gt;I still use MSVC 6 (1998) as my IDE because it has better human factors for me than later versions of MSVC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arendst/Tasmota</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/arendst/Tasmota</id>
    <link href="https://github.com/arendst/Tasmota" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alternative firmware for ESP8266 with easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX. Full documentation at&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arendst/Tasmota/development/tools/logo/TASMOTA_FullLogo_Vector.svg?sanitize=true&#34; alt=&#34;Tasmota logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternative firmware for &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP8266&#34;&gt;ESP8266&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP32&#34;&gt;ESP32&lt;/a&gt; based devices with &lt;strong&gt;easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX&lt;/strong&gt;. &lt;em&gt;Written for PlatformIO.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ota.tasmota.com/tasmota/release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/arendst/Tasmota.svg?sanitize=true&#34; alt=&#34;GitHub version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/arendst/Tasmota/total.svg?sanitize=true&#34; alt=&#34;GitHub download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/arendst/Tasmota/development/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/arendst/Tasmota.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Ks2Kzd4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/479389167382691863.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/arendst/Tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;In light of current events we like to support the people behind &lt;em&gt;PlatformIO Project&lt;/em&gt;, especially Ivan Kravets, and wish them the strength to help stop the war. See &lt;a href=&#34;https://community.platformio.org/t/platformio-is-ukrainian-project-please-help-us-stop-the-war/26330&#34;&gt;platformio-is-ukrainian-project-please-help-us-stop-the-war&lt;/a&gt; for what you can do.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Easy install&lt;/h2&gt; &#xA;&lt;p&gt;Easy initial installation of Tasmota can be performed using the &lt;a href=&#34;https://arendst.github.io/Tasmota-firmware/&#34;&gt;Tasmota WebInstaller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you like &lt;strong&gt;Tasmota&lt;/strong&gt;, give it a star, or fork it and contribute!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/arendst/Tasmota.svg?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/arendst/Tasmota.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/arendst/Tasmota/raw/master/RELEASENOTES.md&#34;&gt;RELEASENOTES.md&lt;/a&gt; for release information.&lt;/p&gt; &#xA;&lt;p&gt;Firmware binaries can be downloaded from &lt;a href=&#34;http://ota.tasmota.com/tasmota/release/&#34;&gt;http://ota.tasmota.com/tasmota/release/&lt;/a&gt; or &lt;a href=&#34;http://ota.tasmota.com/tasmota32/release/&#34;&gt;http://ota.tasmota.com/tasmota32/release/&lt;/a&gt; for ESP32 binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/development%20version-v11.1.x.x-blue.svg?sanitize=true&#34; alt=&#34;Dev Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://ota.tasmota.com/tasmota/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/download-development-yellow.svg?sanitize=true&#34; alt=&#34;Download Dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/actions/workflows/build_all_the_things.yml&#34;&gt;&lt;img src=&#34;https://github.com/arendst/Tasmota/actions/workflows/build_all_the_things.yml/badge.svg?sanitize=true&#34; alt=&#34;Tasmota CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/actions/workflows/Tasmota_build_devel.yml&#34;&gt;&lt;img src=&#34;https://github.com/arendst/Tasmota/actions/workflows/Tasmota_build_devel.yml/badge.svg?sanitize=true&#34; alt=&#34;Build_development&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arendst/Tasmota/development/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for detailed change information.&lt;/p&gt; &#xA;&lt;p&gt;Unless your Tasmota powered device exhibits a problem or you need to make use of a feature that is not available in the Tasmota version currently installed on your device, leave your device alone - it works so don&#39;t make unnecessary changes! If the release version (i.e., the master branch) exhibits unexpected behaviour for your device and configuration, you should upgrade to the latest development version instead to see if your problem is resolved as some bugs in previous releases or development builds may already have been resolved.&lt;/p&gt; &#xA;&lt;p&gt;Every commit made to the development branch, which is compiling successfuly, will post new binary files at &lt;a href=&#34;http://ota.tasmota.com/tasmota/&#34;&gt;http://ota.tasmota.com/tasmota/&lt;/a&gt; (this web address can be used for OTA updates too). It is important to note that these binaries are based on the current development codebase. These commits are tested as much as is possible and are typically quite stable. However, it is infeasible to test on the hundreds of different types of devices with all the available configuration options permitted.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is a chance, as with any upgrade, that the device may not function as expected. You must always account for the possibility that you may need to flash the device via the serial programming interface if the OTA upgrade fails. Even with the master release, you should always attempt to test the device or a similar prototype before upgrading a device which is in production or is hard to reach. And, as always, make a backup of the device configuration before beginning any firmware update.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;st&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;DANGER OF ELECTROCUTION&lt;/strong&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your device connects to mains electricity (AC power) there is danger of electrocution if not installed properly. If you don&#39;t know how to install it, please call an electrician (&lt;em&gt;&lt;strong&gt;Beware:&lt;/strong&gt;&lt;/em&gt; certain countries prohibit installation without a licensed electrician present). Remember: &lt;em&gt;&lt;strong&gt;SAFETY FIRST&lt;/strong&gt;&lt;/em&gt;. It is not worth the risk to yourself, your family and your home if you don&#39;t know exactly what you are doing. Never tinker or try to flash a device using the serial programming interface while it is connected to MAINS ELECTRICITY (AC power).&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t take any responsibility nor liability for using this software nor for the installation or any tips, advice, videos, etc. given by any member of this site or any related site.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;Please do not ask to add new devices unless it requires additional code for new features. If the device is not listed as a module, try using &lt;a href=&#34;https://tasmota.github.io/docs/Templates&#34;&gt;Templates&lt;/a&gt; first. If it is not listed in the &lt;a href=&#34;http://templates.blakadder.com&#34;&gt;Tasmota Device Templates Repository&lt;/a&gt; create your own &lt;a href=&#34;https://tasmota.github.io/docs/Templates#creating-your-template&#34;&gt;Template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;Download one of the released binaries from &lt;a href=&#34;http://ota.tasmota.com/tasmota/release/&#34;&gt;http://ota.tasmota.com/tasmota/release/&lt;/a&gt; or &lt;a href=&#34;http://ota.tasmota.com/tasmota32/release/&#34;&gt;http://ota.tasmota.com/tasmota32/release/&lt;/a&gt; and flash it to your hardware &lt;a href=&#34;https://tasmota.github.io/docs/Getting-Started&#34;&gt;using our installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Important User Compilation Information&lt;/h2&gt; &#xA;&lt;p&gt;If you want to compile Tasmota yourself keep in mind the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For ESP8285 based devices only Flash Mode &lt;strong&gt;DOUT&lt;/strong&gt; is supported. Do not use Flash Mode DIO / QIO / QOUT as it might seem to brick your device.&lt;/li&gt; &#xA; &lt;li&gt;For ESP8285 based devices Tasmota uses a 1M linker script WITHOUT spiffs &lt;strong&gt;1M (no SPIFFS)&lt;/strong&gt; for optimal code space.&lt;/li&gt; &#xA; &lt;li&gt;To make compile time changes to Tasmota use the &lt;code&gt;user_config_override.h&lt;/code&gt; file. It assures keeping your custom settings when you download and compile a new version. You have to make a copy from the provided &lt;code&gt;user_config_override_sample.h&lt;/code&gt; file and add your setting overrides.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration Information&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the installation and configuration articles in our &lt;a href=&#34;https://tasmota.github.io/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Information&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://tasmota.github.io/docs/Upgrading#migration-path&#34;&gt;migration path&lt;/a&gt; for instructions how to migrate to a major version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not upgrade from minimal to minimal version. It will most likely fail at some point and will require flashing via serial.&lt;/strong&gt; If you do have to use minimal versions, always OTA to a full version of the same release before applying next minimal version.&lt;/p&gt; &#xA;&lt;p&gt;Pay attention to the following version breaks due to dynamic settings updates:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 3.9.x&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 4.x&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 5.14&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 6.7.1&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release_6.7.1/sonoff.bin&#34;&gt;http://ota.tasmota.com/tasmota/release_6.7.1/sonoff.bin&lt;/a&gt;) - NOTICE underscore as a dash is not supported in older versions&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 7.2.0&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release-7.2.0/tasmota.bin&#34;&gt;http://ota.tasmota.com/tasmota/release-7.2.0/tasmota.bin&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;--- Major change in parameter storage layout ---&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 8.5.1&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release-8.5.1/tasmota.bin&#34;&gt;http://ota.tasmota.com/tasmota/release-8.5.1/tasmota.bin&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;--- Major change in internal GPIO function representation ---&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 9.1&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release-9.1.0/tasmota.bin.gz&#34;&gt;http://ota.tasmota.com/tasmota/release-9.1.0/tasmota.bin.gz&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Upgrade to &lt;strong&gt;latest release&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release/tasmota.bin.gz&#34;&gt;http://ota.tasmota.com/tasmota/release/tasmota.bin.gz&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;While fallback or downgrading is common practice it was never supported due to Settings additions or changes in newer releases. Starting with release &lt;strong&gt;v9.1.0 Imogen&lt;/strong&gt; the internal GPIO function representation has changed in such a way that fallback is only possible to the latest GPIO configuration before installing &lt;strong&gt;v9.1.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/5904370/68332933-e6e5a600-00d7-11ea-885d-50395f7239a1.png&#34; width=&#34;150&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;For a database of supported devices see &lt;a href=&#34;https://templates.blakadder.com&#34;&gt;Tasmota Device Templates Repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for support on &lt;strong&gt;Tasmota&lt;/strong&gt; there are some options available:&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tasmota.github.io/docs&#34;&gt;Documentation Site&lt;/a&gt;: For information on how to flash Tasmota, configure, use and expand it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tasmota.github.io/docs/FAQ/&#34;&gt;FAQ and Troubleshooting&lt;/a&gt;: For information on common problems and solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tasmota.github.io/docs/Commands&#34;&gt;Commands Information&lt;/a&gt;: For information on all the commands supported by Tasmota.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support&#39;s Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/discussions&#34;&gt;Tasmota Discussions&lt;/a&gt;: For Tasmota usage questions, Feature Requests and Projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/Ks2Kzd4&#34;&gt;Tasmota Users Chat&lt;/a&gt;: For support, troubleshooting and general questions. You have better chances to get fast answers from members of the Tasmota Community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/issues&#34;&gt;Search in Issues&lt;/a&gt;: You might find an answer to your question by searching current or closed issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/issues/new?template=Bug_report.md&#34;&gt;Software Problem Report&lt;/a&gt;: For reporting problems of Tasmota Software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to Tasmota by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Providing Pull Requests (Features, Proof of Concepts, Language files or Fixes)&lt;/li&gt; &#xA; &lt;li&gt;Testing new released features and report issues&lt;/li&gt; &#xA; &lt;li&gt;Donating to acquire hardware for testing and implementing or out of gratitude&lt;/li&gt; &#xA; &lt;li&gt;Contributing missing &lt;a href=&#34;https://tasmota.github.io/docs&#34;&gt;documentation&lt;/a&gt; for features and devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;People helping to keep the show on the road:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;David Lang providing initial issue resolution and code optimizations&lt;/li&gt; &#xA; &lt;li&gt;Heiko Krupp for his IRSend, HTU21, SI70xx and Wemo/Hue emulation drivers&lt;/li&gt; &#xA; &lt;li&gt;Wiktor Schmidt for Travis CI implementation&lt;/li&gt; &#xA; &lt;li&gt;Thom Dietrich for PlatformIO optimizations&lt;/li&gt; &#xA; &lt;li&gt;Marinus van den Broek for his EspEasy groundwork&lt;/li&gt; &#xA; &lt;li&gt;Pete Ba for more user friendly energy monitor calibration&lt;/li&gt; &#xA; &lt;li&gt;Lobradov providing compile optimization tips&lt;/li&gt; &#xA; &lt;li&gt;Flexiti for his initial timer implementation&lt;/li&gt; &#xA; &lt;li&gt;reloxx13 for his &lt;a href=&#34;https://github.com/reloxx13/TasmoAdmin&#34;&gt;TasmoAdmin&lt;/a&gt; management tool&lt;/li&gt; &#xA; &lt;li&gt;Joachim Banzhaf for his TSL2561 library and driver&lt;/li&gt; &#xA; &lt;li&gt;Andre Thomas for providing many drivers&lt;/li&gt; &#xA; &lt;li&gt;Gijs Noorlander for his MHZ19, SenseAir and updated PubSubClient drivers&lt;/li&gt; &#xA; &lt;li&gt;Erik Montnemery for his HomeAssistant Discovery concept and many code tuning tips&lt;/li&gt; &#xA; &lt;li&gt;Federico Leoni for continued HomeAssistant Discovery support&lt;/li&gt; &#xA; &lt;li&gt;Aidan Mountford for his HSB support&lt;/li&gt; &#xA; &lt;li&gt;Daniel Ztolnai for his Serial Bridge implementation&lt;/li&gt; &#xA; &lt;li&gt;Gerhard Mutz for multiple sensor &amp;amp; display drivers, Sunrise/Sunset, and scripting&lt;/li&gt; &#xA; &lt;li&gt;Nuno Ferreira for his HC-SR04 driver&lt;/li&gt; &#xA; &lt;li&gt;Adrian Scillato for his (security)fixes and implementing and maintaining KNX&lt;/li&gt; &#xA; &lt;li&gt;Gennaro Tortone for implementing and maintaining Eastron drivers&lt;/li&gt; &#xA; &lt;li&gt;Raymond Mouthaan for managing Wemos Wiki information&lt;/li&gt; &#xA; &lt;li&gt;Norbert Richter for his &lt;a href=&#34;https://github.com/tasmota/decode-config&#34;&gt;decode-config.py&lt;/a&gt; tool&lt;/li&gt; &#xA; &lt;li&gt;Joel Stein, digiblur and Shantur Rathore for their Tuya research and driver&lt;/li&gt; &#xA; &lt;li&gt;Frogmore42 for providing many issue answers&lt;/li&gt; &#xA; &lt;li&gt;Jason2866 for platformio support and providing many issue answers&lt;/li&gt; &#xA; &lt;li&gt;Blakadder for managing the new document site and providing template management&lt;/li&gt; &#xA; &lt;li&gt;Stephan Hadinger for refactoring light driver, enhancing HueEmulation, LVGL, Zigbee and Berry support&lt;/li&gt; &#xA; &lt;li&gt;tmo for designing the official Tasmota logo&lt;/li&gt; &#xA; &lt;li&gt;Stefan Bode for his Shutter and Deep sleep drivers&lt;/li&gt; &#xA; &lt;li&gt;Jacek Ziółkowski for his &lt;a href=&#34;https://github.com/jziolkowski/tdm&#34;&gt;TDM&lt;/a&gt; management tool and &lt;a href=&#34;https://github.com/tasmota/tasmotizer&#34;&gt;Tasmotizer&lt;/a&gt; flashing tool&lt;/li&gt; &#xA; &lt;li&gt;Christian Staars for NRF24L01 and HM-10 Bluetooth sensor support&lt;/li&gt; &#xA; &lt;li&gt;Paul Diem for UDP Group communication support&lt;/li&gt; &#xA; &lt;li&gt;Jörg Schüler-Maroldt for his initial ESP32 port&lt;/li&gt; &#xA; &lt;li&gt;Javier Arigita for his thermostat driver&lt;/li&gt; &#xA; &lt;li&gt;Simon Hailes for ESP32 Bluetooth extensions&lt;/li&gt; &#xA; &lt;li&gt;Many more providing Tips, Wips, Pocs, PRs and Donations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is licensed under GPL-3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>valinet/ExplorerPatcher</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/valinet/ExplorerPatcher</id>
    <link href="https://github.com/valinet/ExplorerPatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project aims to enhance the working environment on Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExplorerPatcher&lt;/h1&gt; &#xA;&lt;p&gt;This project aims to enhance the working environment on Windows.&lt;/p&gt; &#xA;&lt;p&gt;PayPal donations: &lt;a href=&#34;https://www.paypal.com/donate?business=valentingabrielradu%40gmail.com&amp;amp;no_recurring=0&amp;amp;item_name=ExplorerPatcher&amp;amp;currency_code=EUR&#34;&gt;here&lt;/a&gt; or using e-mail address &lt;a href=&#34;mailto:valentingabrielradu@gmail.com&#34;&gt;valentingabrielradu@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/valinet/ExplorerPatcher/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose between Windows 11 or Windows 10 taskbar (with labels support, small icons and lots of customization).&lt;/li&gt; &#xA; &lt;li&gt;Disable Windows 11 context menu and command bar in File Explorer and more.&lt;/li&gt; &#xA; &lt;li&gt;Open Start to All apps by default, choose number of frequent apps to show, display on active monitor and more.&lt;/li&gt; &#xA; &lt;li&gt;Choose between the Windows 11, Windows 10 and Windows NT Alt-Tab window switcher with customization.&lt;/li&gt; &#xA; &lt;li&gt;Lots of quality of life improvements for the shell, like: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Skin tray menus to match Windows style, make them behave like flyouts and center them relative to the icon.&lt;/li&gt; &#xA;   &lt;li&gt;Choose action when left and/or right clicking the network icon.&lt;/li&gt; &#xA;   &lt;li&gt;Revert to the Windows 7 search box in File Explorer, or disable Windows Search altogether.&lt;/li&gt; &#xA;   &lt;li&gt;Disable immersive menus and use mitigations that help you run the real classic theme without glitches.&lt;/li&gt; &#xA;   &lt;li&gt;Learn more about all the functionality offered by this program starting with this article in the wiki, &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/All-features&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some features may not be available on Windows 10.&lt;/p&gt; &#xA;&lt;h2&gt;How to?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/releases/latest/download/ep_setup.exe&#34;&gt;setup program&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer. It will automatically prompt for elevation, after which it will install the necessary files.&lt;/li&gt; &#xA; &lt;li&gt;When done, you will be greeted with the familiar Windows 10 taskbar. To customize the options offered by the program, right click the taskbar and choose &#34;Properties&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it. It&#39;s that simple.&lt;/p&gt; &#xA;&lt;h2&gt;What next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consult the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki&#34;&gt;wiki&lt;/a&gt; - this is highly recommended. There you will find information about more advanced tasks, modes of operation and features offered by this patcher.&lt;/li&gt; &#xA; &lt;li&gt;Get familiar with most of the features offered by this patcher &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/All-features&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to manage updates and what to expect from new versions and new Windows builds &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Configure-updates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have a question? Consult the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some other question? Open a thread in &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Found a bug, have an issue or a problem with the application? Read &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Reporting-problems&#34;&gt;here&lt;/a&gt; what to do next.&lt;/li&gt; &#xA; &lt;li&gt;I highly encourage you to check out the &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/tree/master&#34;&gt;source code&lt;/a&gt; and tinker with it. I am open to merging new features, enhancements and fixes; also, I think it provides good insights on topics of interests in this area.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Items marked with &#34;bug&#34; that are still &#34;Open&#34; represent known issues. Active work is undergone regarding an item if it is additionally marked with &#34;investigating&#34;. Help is especially required for items marked with &#34;help wanted&#34;. Consult the list in &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &#34;Programs and Features&#34; in Control Panel, or &#34;Apps and features&#34; in the Settings app or&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;ep_setup.exe /uninstall&lt;/code&gt; or&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;ep_setup.exe&lt;/code&gt; to &lt;code&gt;ep_uninstall.exe&lt;/code&gt; and run that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The program features built-in updates: go to &#34;Properties&#34; - &#34;Updates&#34; to configure, check for and install the latest updates. Learn more &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Configure-updates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version&#39;s setup file and simply run it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/How-does-it-work&#34;&gt;How does this work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Antivirus-false-positives&#34;&gt;About antivirus false positives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher/wiki/Compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wg/wrk</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/wg/wrk</id>
    <link href="https://github.com/wg/wrk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern HTTP benchmarking tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wrk - a HTTP benchmarking tool&lt;/h1&gt; &#xA;&lt;p&gt;wrk is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.&lt;/p&gt; &#xA;&lt;p&gt;An optional LuaJIT script can perform HTTP request generation, response processing, and custom reporting. Details are available in SCRIPTING and several examples are located in &lt;a href=&#34;https://raw.githubusercontent.com/wg/wrk/master/scripts/&#34;&gt;scripts/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a benchmark for 30 seconds, using 12 threads, and keeping 400 HTTP connections open.&lt;/p&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Running 30s test @ http://127.0.0.1:8080/index.html&#xA;  12 threads and 400 connections&#xA;  Thread Stats   Avg      Stdev     Max   +/- Stdev&#xA;    Latency   635.91us    0.89ms  12.92ms   93.69%&#xA;    Req/Sec    56.20k     8.07k   62.00k    86.54%&#xA;  22464657 requests in 30.00s, 17.76GB read&#xA;Requests/sec: 748868.53&#xA;Transfer/sec:    606.33MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-c, --connections: total number of HTTP connections to keep open with&#xA;                   each thread handling N = connections/threads&#xA;&#xA;-d, --duration:    duration of the test, e.g. 2s, 2m, 2h&#xA;&#xA;-t, --threads:     total number of threads to use&#xA;&#xA;-s, --script:      LuaJIT script, see SCRIPTING&#xA;&#xA;-H, --header:      HTTP header to add to request, e.g. &#34;User-Agent: wrk&#34;&#xA;&#xA;    --latency:     print detailed latency statistics&#xA;&#xA;    --timeout:     record a timeout if a response is not received within&#xA;                   this amount of time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarking Tips&lt;/h2&gt; &#xA;&lt;p&gt;The machine running wrk must have a sufficient number of ephemeral ports available and closed sockets should be recycled quickly. To handle the initial connection burst the server&#39;s listen(2) backlog should be greater than the number of concurrent connections being tested.&lt;/p&gt; &#xA;&lt;p&gt;A user script that only changes the HTTP method, path, adds headers or a body, will have no performance impact. Per-request actions, particularly building a new HTTP request, and use of response() will necessarily reduce the amount of load that can be generated.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;wrk contains code from a number of open source projects including the &#39;ae&#39; event loop from redis, the nginx/joyent/node.js &#39;http-parser&#39;, and Mike Pall&#39;s LuaJIT. Please consult the NOTICE file for licensing details.&lt;/p&gt; &#xA;&lt;h2&gt;Cryptography Notice&lt;/h2&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with symmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adafruit/Adafruit-GFX-Library</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/adafruit/Adafruit-GFX-Library</id>
    <link href="https://github.com/adafruit/Adafruit-GFX-Library" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adafruit GFX graphics core library, this is the &#39;core&#39; class that all our other graphics libraries derive from&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Adafruit GFX Library &lt;img src=&#34;https://github.com/adafruit/Adafruit-GFX-Library/workflows/Arduino%20Library%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the core graphics library for all our displays, providing a common set of graphics primitives (points, lines, circles, etc.). It needs to be paired with a hardware-specific library for each display device we carry (to handle the lower-level functions).&lt;/p&gt; &#xA;&lt;p&gt;Adafruit invests time and resources providing this open source code, please support Adafruit and open-source hardware by purchasing products from Adafruit!&lt;/p&gt; &#xA;&lt;p&gt;Written by Limor Fried/Ladyada for Adafruit Industries. BSD license, check license.txt for more information. All text above must be included in any redistribution.&lt;/p&gt; &#xA;&lt;p&gt;Recent Arduino IDE releases include the Library Manager for easy installation. Otherwise, to download, click the DOWNLOAD ZIP button, uncompress and rename the uncompressed folder Adafruit_GFX. Confirm that the Adafruit_GFX folder contains Adafruit_GFX.cpp and Adafruit_GFX.h. Place the Adafruit_GFX library folder your ArduinoSketchFolder/Libraries/ folder. You may need to create the Libraries subfolder if its your first library. Restart the IDE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You will also need to install the latest Adafruit BusIO library.&lt;/strong&gt; Search for &#34;Adafruit BusIO&#34; in the library manager, or install by hand from &lt;a href=&#34;https://github.com/adafruit/Adafruit_BusIO&#34;&gt;https://github.com/adafruit/Adafruit_BusIO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Useful Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Image2Code: This is a handy Java GUI utility to convert a BMP file into the array code necessary to display the image with the drawBitmap function. Check out the code at ehubin&#39;s GitHub repository: &lt;a href=&#34;https://github.com/ehubin/Adafruit-GFX-Library/tree/master/Img2Code&#34;&gt;https://github.com/ehubin/Adafruit-GFX-Library/tree/master/Img2Code&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;drawXBitmap function: You can use the GIMP photo editor to save a .xbm file and use the array saved in the file to draw a bitmap with the drawXBitmap function. See the pull request here for more details: &lt;a href=&#34;https://github.com/adafruit/Adafruit-GFX-Library/pull/31&#34;&gt;https://github.com/adafruit/Adafruit-GFX-Library/pull/31&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#39;Fonts&#39; folder contains bitmap fonts for use with recent (1.1 and later) Adafruit_GFX. To use a font in your Arduino sketch, #include the corresponding .h file and pass address of GFXfont struct to setFont(). Pass NULL to revert to &#39;classic&#39; fixed-space bitmap font.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#39;fontconvert&#39; folder contains a command-line tool for converting TTF fonts to Adafruit_GFX header format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also use &lt;a href=&#34;https://github.com/tchapi/Adafruit-GFX-Font-Customiser&#34;&gt;this GFX Font Customiser tool&lt;/a&gt; (&lt;em&gt;web version &lt;a href=&#34;https://tchapi.github.io/Adafruit-GFX-Font-Customiser/&#34;&gt;here&lt;/a&gt;&lt;/em&gt;) to customize or correct the output from &lt;a href=&#34;https://github.com/adafruit/Adafruit-GFX-Library/tree/master/fontconvert&#34;&gt;fontconvert&lt;/a&gt;, and create fonts with only a subset of characters to optimize size.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;The PRIME DIRECTIVE is to maintain backward compatibility with existing Arduino sketches -- many are hosted elsewhere and don&#39;t track changes here, some are in print and can never be changed! This &#34;little&#34; library has grown organically over time and sometimes we paint ourselves into a design corner and just have to live with it or add progressively more ungainly workarounds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We are grateful for everyone&#39;s contributions, but pull requests for the following will NOT be merged:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional or incompatible font formats (see Prime Directive above). There are already two formats and the code is quite bloaty there as it is. This also creates liabilities for tools and documentation. What&#39;s there isn&#39;t perfect but it does the job.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional or incompatible bitmap formats, for similar reasons. It&#39;s getting messy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adding background color to custom fonts to erase prior screen contents. The ONLY acceptable methods are to clear the area with a filled rect, or (to avoid flicker) draw text into a GFXcanvas1 and copy to screen with drawBitmap() w/background color. This is on purpose and by design. We&#39;ve discussed this. Glyphs can overlap.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scrolling, whether hardware- or software-based. Such implementations tend to rely on hardware-specific features (not universally available), read access to the screen&#39;s framebuffer (ditto) and/or the addition of virtual functions in GFX which them must be added in &lt;em&gt;every&lt;/em&gt; subclass, of which there are many. The GFX API is largely &#34;set&#34; at this point and this is just a limitation we live with now.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please don&#39;t reformat code for the sake of reformatting code. The resulting large &#34;visual diff&#34; makes it impossible to untangle actual bug fixes from merely rearranged lines. clang-format will be the final arbiter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please no more pentagram-drawing PRs. Any oddly-specific drawing functions can go in your own code and aren&#39;t helpful in a library context.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; have one of these features, consider creating a fork with the features required for your project...it&#39;s easy to keep synced with the upstream code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acidanthera/OpenCorePkg</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/acidanthera/OpenCorePkg</id>
    <link href="https://github.com/acidanthera/OpenCorePkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenCore bootloader&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/Logos/OpenCore_with_text_Small.png&#34; width=&#34;200&#34; height=&#34;48&#34;&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg/actions&#34;&gt;&lt;img src=&#34;https://github.com/acidanthera/OpenCorePkg/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/18169&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/18169/badge.svg?flat=1&#34; alt=&#34;Scan Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;OpenCore bootloader with development SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;p&gt;This repository also contains additional UEFI support common libraries shared by other projects in &lt;a href=&#34;https://github.com/acidanthera&#34;&gt;Acidanthera&lt;/a&gt;. The primary purpose of the library set is to provide supplemental functionality for Apple-specific UEFI drivers. Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple disk image loading support&lt;/li&gt; &#xA; &lt;li&gt;Apple keyboard input aggregation&lt;/li&gt; &#xA; &lt;li&gt;Apple PE image signature verification&lt;/li&gt; &#xA; &lt;li&gt;Apple UEFI secure boot supplemental code&lt;/li&gt; &#xA; &lt;li&gt;Audio management with screen reading support&lt;/li&gt; &#xA; &lt;li&gt;Basic ACPI and SMBIOS manipulation&lt;/li&gt; &#xA; &lt;li&gt;CPU information gathering with timer support&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic primitives (SHA-256, RSA, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Decompression primitives (zlib, lzss, lzvn, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Helper code for ACPI reads and modifications&lt;/li&gt; &#xA; &lt;li&gt;Higher level abstractions for files, strings, UEFI variables&lt;/li&gt; &#xA; &lt;li&gt;Overflow checking arithmetics&lt;/li&gt; &#xA; &lt;li&gt;PE image loading with no UEFI Secure Boot conflict&lt;/li&gt; &#xA; &lt;li&gt;Plist configuration format parsing&lt;/li&gt; &#xA; &lt;li&gt;PNG image manipulation&lt;/li&gt; &#xA; &lt;li&gt;Text output and graphics output implementations&lt;/li&gt; &#xA; &lt;li&gt;XNU kernel driver injection and patch engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Early history of the codebase could be found in &lt;a href=&#34;https://github.com/acidanthera/AppleSupportPkg&#34;&gt;AppleSupportPkg&lt;/a&gt; and PicoLib library set by The HermitCrabs Lab.&lt;/p&gt; &#xA;&lt;h4&gt;OcGuardLib&lt;/h4&gt; &#xA;&lt;p&gt;This library implements basic safety features recommended for the use within the project. It implements fast safe integral arithmetics mapping on compiler builtins, type alignment checking, and UBSan runtime, based on &lt;a href=&#34;https://blog.netbsd.org/tnf/entry/introduction_to_%C2%B5ubsan_a_clean&#34;&gt;NetBSD implementation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The use of UBSan runtime requires the use of Clang compiler and &lt;code&gt;-fsanitize=undefined&lt;/code&gt; argument. Refer to &lt;a href=&#34;https://releases.llvm.org/7.0.0/tools/clang/docs/UndefinedBehaviorSanitizer.html&#34;&gt;Clang documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Credits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The HermitCrabs Lab&lt;/li&gt; &#xA; &lt;li&gt;All projects providing third-party code (refer to file headers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://applelife.ru&#34;&gt;AppleLife&lt;/a&gt; team and user-contributed resources&lt;/li&gt; &#xA; &lt;li&gt;Chameleon and Clover teams for hints and legacy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/al3xtjames&#34;&gt;al3xtjames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Andrey1970AppleLife&#34;&gt;Andrey1970AppleLife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhaeuser&#34;&gt;mhaeuser (ex Download-Fritz)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Goldfish64&#34;&gt;Goldfish64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikeBeaton&#34;&gt;MikeBeaton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nms42&#34;&gt;nms42&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PMheart&#34;&gt;PMheart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savvamitrofanov&#34;&gt;savvamitrofanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usr-sse2&#34;&gt;usr-sse2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vit9696&#34;&gt;vit9696&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Discussion&lt;/h4&gt; &#xA;&lt;p&gt;Please refer to the following &lt;a href=&#34;https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/FORUMS.md&#34;&gt;list of OpenCore discussion forums&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mpc-hc/mpc-hc</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/mpc-hc/mpc-hc</id>
    <link href="https://github.com/mpc-hc/mpc-hc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MPC-HC&#39;s main repository. For support use our Trac: https://trac.mpc-hc.org/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Media Player Classic - Home Cinema&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpc-hc/mpc-hc&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/mpc-hc/mpc-hc.svg?label=version&#34; alt=&#34;GitHub Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/259&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/259.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Media Player Classic - Home Cinema (MPC-HC) is a free and open-source (OSS) video and audio player for Windows. MPC-HC is based on the original Guliverkli project and contains many additional features and bug fixes.&lt;/p&gt; &#xA;&lt;p&gt;We are in dire need of new developers of any kind. If you can code a little, or you can create logos for the player and images for the file associations, or you can create/maintain the main website, please join our IRC channel and talk to us. Any help is always appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Find some easy ticket on our Trac, fix the problem, send a &lt;a href=&#34;https://github.com/mpc-hc/mpc-hc/pulls&#34;&gt;pull request&lt;/a&gt;, or post the patch on &lt;a href=&#34;https://trac.mpc-hc.org/&#34;&gt;Trac&lt;/a&gt; or come on IRC and we&#39;ll review it for you. See &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We care about keeping an open project open and free for contributions wherever they may come from.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option to remove &lt;a href=&#34;https://en.wikipedia.org/wiki/Screen_tearing&#34;&gt;tearing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for modern Windows versions, including a 64-bit build&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Media_Foundation#Enhanced_Video_Renderer&#34;&gt;EVR/EVR CP&lt;/a&gt; (Enhanced Video Renderer)&lt;/li&gt; &#xA; &lt;li&gt;Supports most types of &lt;a href=&#34;https://en.wikipedia.org/wiki/Subtitle_%28captioning%29#Subtitle_formats&#34;&gt;subtitles&lt;/a&gt; including &lt;a href=&#34;https://en.wikipedia.org/wiki/Blu-ray_Disc&#34;&gt;BluRay&lt;/a&gt; .sup files&lt;/li&gt; &#xA; &lt;li&gt;Playback and recording of television programs, if a supported &lt;a href=&#34;https://en.wikipedia.org/wiki/TV_tuner_card&#34;&gt;TV tuner card&lt;/a&gt; is installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/On-screen_display&#34;&gt;OSD info (On Screen Display)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multi-Monitor support&lt;/li&gt; &#xA; &lt;li&gt;Various &lt;a href=&#34;https://en.wikipedia.org/wiki/Shader#Pixel_shaders&#34;&gt;pixel shaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Color_management&#34;&gt;Color management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;42 translations available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An SSE2-capable CPU&lt;/li&gt; &#xA; &lt;li&gt;Windows Vista, 7, 8, 8.1, 10 32-bit/64-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mpc-hc.org/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpc-hc&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trac.mpc-hc.org/&#34;&gt;Support Trac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC Channel: &lt;a href=&#34;https://webchat.freenode.net/?randomnick=1&amp;amp;channels=mpc-hc&amp;amp;prompt=1&amp;amp;uio=d4&#34;&gt;#mpc-hc&lt;/a&gt; / &lt;a href=&#34;https://webchat.freenode.net/?randomnick=1&amp;amp;channels=mpc-hc-dev&amp;amp;prompt=1&amp;amp;uio=d4&#34;&gt;#mpc-hc-dev&lt;/a&gt; at &lt;a href=&#34;https://freenode.net/&#34;&gt;Freenode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mpc-hc.org/donate/&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.transifex.com/mpc-hc/mpc-hc/&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the people involved in the development, see &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/docs/Authors.txt&#34;&gt;Authors.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MPC-HC&#39;s code is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/COPYING.txt&#34;&gt;GPL v3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Translations are done by various translators (see &lt;a href=&#34;https://raw.githubusercontent.com/mpc-hc/mpc-hc/develop/docs/Authors.txt&#34;&gt;Authors.txt&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Third-party code&lt;/h2&gt; &#xA;&lt;p&gt;MPC-HC makes use of the following third-party code:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;Website&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bs2b&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://bs2b.sourceforge.net&#34;&gt;http://bs2b.sourceforge.net&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSizingControlBar&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.datamekanix.com/sizecbar/&#34;&gt;http://www.datamekanix.com/sizecbar/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LAV Filters&lt;/td&gt; &#xA;   &lt;td&gt;GPLv2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Nevcairiel/LAVFilters&#34;&gt;https://github.com/Nevcairiel/LAVFilters&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;libdivide&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://libdivide.com/&#34;&gt;http://libdivide.com/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Little CMS&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.littlecms.com/&#34;&gt;http://www.littlecms.com/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logitech SDK&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MediaInfoLib&lt;/td&gt; &#xA;   &lt;td&gt;Simplified BSD License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mediaarea.net/MediaInfo&#34;&gt;https://mediaarea.net/MediaInfo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MinHook&lt;/td&gt; &#xA;   &lt;td&gt;Simplified BSD License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/TsudaKageyu/minhook&#34;&gt;https://github.com/TsudaKageyu/minhook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MultiMon&lt;/td&gt; &#xA;   &lt;td&gt;CPOL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/3690/&#34;&gt;https://www.codeproject.com/Articles/3690/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NanoSVG&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/memononen/nanosvg&#34;&gt;https://github.com/memononen/nanosvg&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QuickTime SDK&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developer.apple.com/quicktime/&#34;&gt;https://developer.apple.com/quicktime/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RapidJSON&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/miloyip/rapidjson&#34;&gt;https://github.com/miloyip/rapidjson&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RARFileSource&lt;/td&gt; &#xA;   &lt;td&gt;GPLv2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.v12pwr.com/RARFileSource/&#34;&gt;http://www.v12pwr.com/RARFileSource/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RealMedia SDK&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ResizableLib&lt;/td&gt; &#xA;   &lt;td&gt;Artistic License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ppescher/resizablelib&#34;&gt;https://github.com/ppescher/resizablelib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sanear&lt;/td&gt; &#xA;   &lt;td&gt;LGPLv2.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alexmarsev/sanear&#34;&gt;https://github.com/alexmarsev/sanear&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Silk Icons&lt;/td&gt; &#xA;   &lt;td&gt;CC Attribution 2.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.famfamfam.com/lab/icons/silk/&#34;&gt;http://www.famfamfam.com/lab/icons/silk/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SoundTouch&lt;/td&gt; &#xA;   &lt;td&gt;LGPLv2.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.surina.net/soundtouch/&#34;&gt;http://www.surina.net/soundtouch/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;soxr&lt;/td&gt; &#xA;   &lt;td&gt;LGPLv2.1+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceforge.net/projects/soxr/&#34;&gt;https://sourceforge.net/projects/soxr/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tinyxml2&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.grinninglizard.com/tinyxml2/&#34;&gt;http://www.grinninglizard.com/tinyxml2/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TreePropSheet&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/3709/&#34;&gt;https://www.codeproject.com/Articles/3709/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UnRAR&lt;/td&gt; &#xA;   &lt;td&gt;freeware&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.rarlab.com/rar_add.htm&#34;&gt;http://www.rarlab.com/rar_add.htm&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VirtualDub&lt;/td&gt; &#xA;   &lt;td&gt;GPLv2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.virtualdub.org/&#34;&gt;http://www.virtualdub.org/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XmlRpc4Win&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/drtimcooper/XmlRpc4Win&#34;&gt;https://github.com/drtimcooper/XmlRpc4Win&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZenLib&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MediaArea/ZenLib&#34;&gt;https://github.com/MediaArea/ZenLib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zita-resampler&lt;/td&gt; &#xA;   &lt;td&gt;GPLv3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://kokkinizita.linuxaudio.org/linuxaudio/&#34;&gt;http://kokkinizita.linuxaudio.org/linuxaudio/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zlib&lt;/td&gt; &#xA;   &lt;td&gt;zlib License&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://zlib.net/&#34;&gt;http://zlib.net/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s specially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/raysan5/raylib&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/4.0.0&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/raylib?label=reddit%20r%2Fraylib&amp;amp;logo=reddit&#34; alt=&#34;Subreddit Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/raysan5?style=flat&amp;amp;label=@raysan5&amp;amp;color=1da1f2&amp;amp;logo=twitter&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) in PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3 or ES 2.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, XNA fonts, AngelCode fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+120 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+50 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and it draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple &lt;a href=&#34;https://github.com/raysan5/raylib/issues/613&#34;&gt;package managers&lt;/a&gt; on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that Wiki is open for edit, if you find some issue while building raylib for your target platform, feel free to edit the Wiki or open and issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, please, if you find some issue with some template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library and a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in raylib GitHub Wiki. Here the more relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different fileformats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on raylib Wiki for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>peng-zhihui/HoloCubic</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/peng-zhihui/HoloCubic</id>
    <link href="https://github.com/peng-zhihui/HoloCubic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;带网络功能的伪全息透明显示桌面站&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HoloCubic--多功能透明显示屏桌面站&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;视频介绍：&lt;/strong&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1VA411p7MD/&#34;&gt;https://www.bilibili.com/video/BV1VA411p7MD/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0. 关于本项目&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;稚晖君注：这是为了更新视频，缓解本人拖更两个月的尴尬，用一个周末时间赶出来的一个有意思的小玩意 :D&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如视频所述，本项目有意思的地方在于使用了一个分光棱镜来设计出&lt;code&gt;伪全息显示&lt;/code&gt;的效果。这个小设备总的来说功能比较多，因为搭载了WiFi和蓝牙能力可以实现很多网络应用，在本仓库中给大家提供了一个开发框架以及一些基础功能（天气、粉丝数监视器等），大家可以基于我的方案继续扩展实现更多应用。&lt;/p&gt; &#xA;&lt;p&gt;本项目的硬件方案是基于&lt;code&gt;ESP32PICO-D4&lt;/code&gt;的，乐鑫的一个很实用的MCU芯片，由于采用了SiP封装是的PCBA整板面积能做到一个硬币大小；软件方面主要是基于&lt;code&gt;lvgl-GUI&lt;/code&gt;库，我移植了ST7789 1.3寸&lt;code&gt;240x240&lt;/code&gt;分辨率屏幕的显示屏驱动，同时将&lt;code&gt;MPU6050&lt;/code&gt;作为输入设备通过感应的方式模拟编码器键值来交互。&lt;/p&gt; &#xA;&lt;h2&gt;1. 硬件打样说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PCB打样的话暂时没发现有啥需要特别注意的。&lt;/strong&gt; PCB文件可以直接拿去工厂打样，两层板很便宜，器件BOM的话也都是比较常用的，整板成本在50元以内。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Hardware&lt;/code&gt;文件内目前包含两个版本的PCB电路：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naive Version&lt;/strong&gt; ：即视频中出现的版本，板载ESP32、IMU、环境光传感器、SD卡槽、下载电路、以及两个RGB灯&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ironman Version&lt;/strong&gt; ：基于上面的版本轻微修改，删去了环境光传感器，修改了PCB形状以适配新的外壳&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为新款的外壳计划是使用CNC进行金属加工，因此环境光容易被遮挡，而且该功能使用场景不多所以在新版删去了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;外壳加工&lt;/strong&gt; 根据自己喜欢的版本选择，&lt;code&gt;3D Model&lt;/code&gt;文件夹目前包含四个版本的外壳文件：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Naive Version&lt;/strong&gt; ：即视频中出现的版本，比较简约（因为临时赶工设计的），最好使用光固化3D打印加工&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bilibili Version&lt;/strong&gt; ：视频中后面出现的B站百大奖杯形式的外壳结构，适配&lt;code&gt;Naive Version&lt;/code&gt;的PCB， &lt;strong&gt;属于娱乐性质，非百大UP不建议采用&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metal Version&lt;/strong&gt; ：视频发布后全新改版的外壳结构设计，优化了布局控件整体更紧凑精致，适配&lt;code&gt;Naive Version&lt;/code&gt;的PCB，该建议使用CNC加工制作&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ironman Version&lt;/strong&gt; ：新设计的野生钢铁侠风格结构件，该版本为和朋友合作设计的，后面可能会授权他联名量产，该结构适配&lt;code&gt;Ironman Version&lt;/code&gt;的PCB&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;野生钢铁侠联名的版本的结构件加工比较复杂，而且需要后期喷砂、阳极氧化等工艺所以单件制造成本很高（打听了下整套3个部件至少要1000元+），因此大家自己有加工渠道的可以用提供的文件自己去做。&lt;/p&gt; &#xA; &lt;p&gt;没有渠道但是又想要这个版本硬件的，&lt;strong&gt;我授权了那位朋友量产一小批&lt;/strong&gt;，他的店铺名为&lt;a href=&#34;https://shop68240117.taobao.com&#34;&gt;Xikii&lt;/a&gt;，是做客制化键盘很有经验的一个极客，大家感兴趣的可以去关注一下~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;2. 固件编译说明&lt;/h2&gt; &#xA;&lt;p&gt;固件框架主要基于Arduino开发完成，玩过Arduino的基本没有上手难度了，把Firmware/Libraries里面的库安装到Arduino库目录（如果你用的是Arduino IDE的话）即可。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;我使用的是Visual Studio上面的Visual Micro插件进行Arduino开发，因为对VS比较熟悉，大家选择自己喜欢的IDE就好了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;然后这里需要修改一个官方库文件才能正常使用：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;首先肯定得安装ESP32的Arduino支持包（百度有海量教程），然后在安装的支持包的&lt;code&gt;esp32\hardware\esp32\1.0.4\libraries\SPI\src\SPI.cpp&lt;/code&gt;文件中，&lt;strong&gt;修改以下代码中的MISO为26&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if(sck == -1 &amp;amp;&amp;amp; miso == -1 &amp;amp;&amp;amp; mosi == -1 &amp;amp;&amp;amp; ss == -1) {&#xA;    _sck = (_spi_num == VSPI) ? SCK : 14;&#xA;    _miso = (_spi_num == VSPI) ? MISO : 12; // 需要改为26&#xA;    _mosi = (_spi_num == VSPI) ? MOSI : 13;&#xA;    _ss = (_spi_num == VSPI) ? SS : 15;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这是因为，硬件上连接屏幕和SD卡分别是用两个硬件SPI，其中HSPI的默认MISO引脚是12，而12在ESP32中是用于上电时设置flash电平的，上电之前上拉会导致芯片无法启动，因此我们将默认的引脚替换为26。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;也可以通过设置芯片熔丝的方式解决这个问题，不过那样的操作是一次性不可逆的，不建议这么玩。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;另外：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于我赶视频制作，代码都是临时写的非常杂乱有很多dirty code，因此仓库中的是所有驱动调通之后的模板代码，可以自己基于这个框架自由开发。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;APP应用代码我在整理中慢慢也会更新出来。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Visual Studio模拟器 &amp;amp; 图片转换脚本&lt;/h2&gt; &#xA;&lt;p&gt;在&lt;code&gt;Software&lt;/code&gt;文件夹中包含了一个Visual Studio的工程，用VS打开（需要安装C++开发组件）后可以在电脑上模拟LVGL的界面效果，改好之后代码粘贴到Arduino固件那边就可以完成界面移植。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这样省的每次修改都要重新交叉编译Arduino的固件，提升开发效率。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImageToHolo&lt;/code&gt;文件夹下包含一个Python脚本，用于将图片转换成HoloCubic固件中用到的图像资源。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为图像资源一般都比较占空间，如果全部存在ESP32的Flash中的话存不了几张，因此我在框架中移植了LVGL的FAT文件系统支持，可以将图片资源存储在SD卡内进行读取。&lt;/p&gt; &#xA; &lt;p&gt;官方的图转换工具是在线的：&lt;a href=&#34;https://lvgl.io/tools/imageconverter&#34;&gt;https://lvgl.io/tools/imageconverter&lt;/a&gt; ，需要选择 &lt;code&gt;Indexed 4 colors&lt;/code&gt; 格式。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;但是官方工具每次只能转换一张还要上传下载很麻烦&lt;/strong&gt;，因此我自己写了个脚本用于批量转换。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;HoloCubic用到的图片资源名为&lt;code&gt;xxx.bin&lt;/code&gt;文件，大家用我提供的脚本转好后放入SD卡，然后可以像这样读取：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lv_obj_t* imgbtn = lv_imgbtn_create(lv_scr_act(), NULL);&#xA;lv_imgbtn_set_src(imgbtn, LV_BTN_STATE_PRESSED, &#34;S:/dir/icon_pressed.bin&#34;);&#xA;lv_imgbtn_set_src(imgbtn, LV_BTN_STATE_RELEASED, &#34;S:/dir/icon_released.bin&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中&lt;code&gt;S:&lt;/code&gt;指代SD卡根目录（注意&lt;strong&gt;S是大写的&lt;/strong&gt;），后面就是跟Linux中的路径完全表示一致了。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;该脚本参考了&lt;a href=&#34;https://github.com/W-Mai/lvgl_image_converter&#34;&gt;W-Mai/lvgl_image_converter&lt;/a&gt; 的实现。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;另外由于转换脚本的使用需要再Python环境下，如果大家不想安装环境的话，也可以用我预编译好的exe文件来转，使用方法很简单，把&lt;code&gt;jpg/png/bmp&lt;/code&gt;图片拖到&lt;code&gt;holo转换器.exe&lt;/code&gt;的图标上就行了（可以同时拖动多个上去），会在当前目录生成对应的&lt;code&gt;.bin&lt;/code&gt;文件。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;转换器软件的下载地址：&lt;/p&gt; &#xA; &lt;p&gt;链接：&lt;a href=&#34;https://pan.baidu.com/s/11cPOVYnKkxmd88o-Ouwb5g&#34;&gt;https://pan.baidu.com/s/11cPOVYnKkxmd88o-Ouwb5g&lt;/a&gt; 提取码：xlju&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;4. 关于分光棱镜&lt;/h2&gt; &#xA;&lt;p&gt;我用的时25.4mm x 25.4mm x 25.4mm的棱镜，淘宝应该可以搜到，单个价格80元左右。&lt;/p&gt; &#xA;&lt;p&gt;分光棱镜的固定比较麻烦，用胶水的话容易渗入屏幕导致水印，因此建议去TB搜一下&lt;code&gt;OCA胶&lt;/code&gt;，这是一种&lt;code&gt;全贴合屏幕工艺&lt;/code&gt;中用来粘合屏幕的固态胶，效果很不错也很便宜。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;但是OCA粘性非常强，大家操作一定要仔细不要留气泡，不然粘上后就很难取下了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;其他的后续再补充，有用的话记得点星星~&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>openwrt/openwrt</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/openwrt/openwrt</id>
    <link href="https://github.com/openwrt/openwrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is a mirror of https://git.openwrt.org/openwrt/openwrt.git It is for reference only and is not active for check-ins. We will continue to accept Pull Requests here. They will be merged via staging trees then into openwrt.git.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openwrt/openwrt/master/include/logo.png&#34; alt=&#34;OpenWrt logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenWrt Project is a Linux operating system targeting embedded devices. Instead of trying to create a single, static firmware, OpenWrt provides a fully writable filesystem with package management. This frees you from the application selection and configuration provided by the vendor and allows you to customize the device through the use of packages to suit any application. For developers, OpenWrt is the framework to build an application without having to build a complete firmware around it; for users this means the ability for full customization, to use the device in ways never envisioned.&lt;/p&gt; &#xA;&lt;p&gt;Sunshine!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to compile OpenWrt, the package names vary between distributions. A complete list with distribution specific packages is found in the &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build System Setup&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-dev&#xA;make4.1+ perl python3.6+ rsync subversion unzip which&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called &lt;code&gt;opkg&lt;/code&gt;. If you&#39;re looking to develop the web interface or port packages to OpenWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/packages&#34;&gt;OpenWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/video&#34;&gt;OpenWrt Video&lt;/a&gt;: Packages specifically focused on display servers and clients (Xorg and Wayland).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.openwrt.org&#34;&gt;Forum&lt;/a&gt;: For usage, projects, discussions and hardware advise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.oftc.net/#openwrt&#34;&gt;Support Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developer Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.openwrt.org&#34;&gt;Bug Reports&lt;/a&gt;: Report bugs in OpenWrt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.openwrt.org/mailman/listinfo/openwrt-devel&#34;&gt;Dev Mailing List&lt;/a&gt;: Send patches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.oftc.net/#openwrt-devel&#34;&gt;Dev Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt-devel&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenWrt is licensed under GPL-2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>glfw/glfw</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/glfw/glfw</id>
    <link href="https://github.com/glfw/glfw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi-platform library for OpenGL, OpenGL ES, Vulkan, window and input&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GLFW&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/glfw/glfw/actions&#34;&gt;&lt;img src=&#34;https://github.com/glfw/glfw/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/elmindreda/glfw&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/0kf0ct9831i5l6sp/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/glfw-glfw&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/4884/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;GLFW is an Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan application development. It provides a simple, platform-independent API for creating windows, contexts and surfaces, reading input, handling events, etc.&lt;/p&gt; &#xA;&lt;p&gt;GLFW natively supports Windows, macOS and Linux and other Unix-like systems. On Linux both X11 and Wayland are supported.&lt;/p&gt; &#xA;&lt;p&gt;GLFW is licensed under the &lt;a href=&#34;https://www.glfw.org/license.html&#34;&gt;zlib/libpng license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://www.glfw.org/download.html&#34;&gt;download&lt;/a&gt; the latest stable release as source or Windows binaries, or fetch the &lt;code&gt;latest&lt;/code&gt; branch from GitHub. Each release starting with 3.0 also has a corresponding &lt;a href=&#34;https://github.com/glfw/glfw/releases&#34;&gt;annotated tag&lt;/a&gt; with source and binary archives.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.glfw.org/docs/latest/&#34;&gt;documentation&lt;/a&gt; is available online and is included in all source and binary archives. See the &lt;a href=&#34;https://www.glfw.org/docs/latest/news.html&#34;&gt;release notes&lt;/a&gt; for new features, caveats and deprecations in the latest release. For more details see the &lt;a href=&#34;https://www.glfw.org/changelog.html&#34;&gt;version history&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is the stable integration branch and &lt;em&gt;should&lt;/em&gt; always compile and run on all supported platforms, although details of newly added features may change until they have been included in a release. New features and many bug fixes live in &lt;a href=&#34;https://github.com/glfw/glfw/branches/all&#34;&gt;other branches&lt;/a&gt; until they are stable enough to merge.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to GLFW, you may find the &lt;a href=&#34;https://www.glfw.org/docs/latest/quick.html&#34;&gt;tutorial&lt;/a&gt; for GLFW 3 useful. If you have used GLFW 2 in the past, there is a &lt;a href=&#34;https://www.glfw.org/docs/latest/moving.html&#34;&gt;transition guide&lt;/a&gt; for moving to the GLFW 3 API.&lt;/p&gt; &#xA;&lt;p&gt;GLFW exists because of the contributions of &lt;a href=&#34;https://raw.githubusercontent.com/glfw/glfw/master/CONTRIBUTORS.md&#34;&gt;many people&lt;/a&gt; around the world, whether by reporting bugs, providing community support, adding features, reviewing or testing code, debugging, proofreading docs, suggesting features or fixing bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling GLFW&lt;/h2&gt; &#xA;&lt;p&gt;GLFW itself requires only the headers and libraries for your OS and window system. It does not need the headers for any context creation API (WGL, GLX, EGL, NSGL, OSMesa) or rendering API (OpenGL, OpenGL ES, Vulkan) to enable support for them.&lt;/p&gt; &#xA;&lt;p&gt;GLFW supports compilation on Windows with Visual C++ 2010 and later, MinGW and MinGW-w64, on macOS with Clang and on Linux and other Unix-like systems with GCC and Clang. It will likely compile in other environments as well, but this is not regularly tested.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://www.glfw.org/download.html&#34;&gt;pre-compiled Windows binaries&lt;/a&gt; available for all supported compilers.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.glfw.org/docs/latest/compile.html&#34;&gt;compilation guide&lt;/a&gt; for more information about how to compile GLFW yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Using GLFW&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.glfw.org/docs/latest/&#34;&gt;documentation&lt;/a&gt; for tutorials, guides and the API reference.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to GLFW&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/glfw/glfw/raw/master/docs/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;p&gt;GLFW supports Windows XP and later and macOS 10.8 and later. Linux and other Unix-like systems running the X Window System are supported even without a desktop environment or modern extensions, although some features require a running window or clipboard manager. The OSMesa backend requires Mesa 6.3.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.glfw.org/docs/latest/compat.html&#34;&gt;compatibility guide&lt;/a&gt; in the documentation for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;GLFW itself needs only CMake 3.1 or later and the headers and libraries for your OS and window system.&lt;/p&gt; &#xA;&lt;p&gt;The examples and test programs depend on a number of tiny libraries. These are located in the &lt;code&gt;deps/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kimgr/getopt_port/&#34;&gt;getopt_port&lt;/a&gt; for examples with command-line options&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tinycthread/tinycthread&#34;&gt;TinyCThread&lt;/a&gt; for threaded examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dav1dde/glad&#34;&gt;glad2&lt;/a&gt; for loading OpenGL and Vulkan functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datenwolf/linmath.h&#34;&gt;linmath.h&lt;/a&gt; for linear algebra in examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear&#34;&gt;Nuklear&lt;/a&gt; for test and example UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb_image_write&lt;/a&gt; for writing images to disk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The documentation is generated with &lt;a href=&#34;https://doxygen.org/&#34;&gt;Doxygen&lt;/a&gt; if CMake can find that tool.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Bugs are reported to our &lt;a href=&#34;https://github.com/glfw/glfw/issues&#34;&gt;issue tracker&lt;/a&gt;. Please check the &lt;a href=&#34;https://github.com/glfw/glfw/raw/master/docs/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for information on what to include when reporting a bug.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_PLATFORM&lt;/code&gt; init hint for runtime platform selection (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_ANY_PLATFORM&lt;/code&gt;, &lt;code&gt;GLFW_PLATFORM_WIN32&lt;/code&gt;, &lt;code&gt;GLFW_PLATFORM_COCOA&lt;/code&gt;, &lt;code&gt;GLFW_PLATFORM_WAYLAND&lt;/code&gt;, &lt;code&gt;GLFW_PLATFORM_X11&lt;/code&gt; and &lt;code&gt;GLFW_PLATFORM_NULL&lt;/code&gt; symbols to specify the desired platform (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;glfwGetPlatform&lt;/code&gt; function to query what platform was selected (#1655,#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;glfwPlatformSupported&lt;/code&gt; function to query if a platform is supported (#1655,#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;glfwInitAllocator&lt;/code&gt; for setting a custom memory allocator (#544,#1628,#1947)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFWallocator&lt;/code&gt; struct and &lt;code&gt;GLFWallocatefun&lt;/code&gt;, &lt;code&gt;GLFWreallocatefun&lt;/code&gt; and &lt;code&gt;GLFWdeallocatefun&lt;/code&gt; types (#544,#1628,#1947)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;glfwInitVulkanLoader&lt;/code&gt; for using a non-default Vulkan loader (#1374,#1890)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_RESIZE_NWSE_CURSOR&lt;/code&gt;, &lt;code&gt;GLFW_RESIZE_NESW_CURSOR&lt;/code&gt;, &lt;code&gt;GLFW_RESIZE_ALL_CURSOR&lt;/code&gt; and &lt;code&gt;GLFW_NOT_ALLOWED_CURSOR&lt;/code&gt; cursor shapes (#427)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_RESIZE_EW_CURSOR&lt;/code&gt; alias for &lt;code&gt;GLFW_HRESIZE_CURSOR&lt;/code&gt; (#427)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_RESIZE_NS_CURSOR&lt;/code&gt; alias for &lt;code&gt;GLFW_VRESIZE_CURSOR&lt;/code&gt; (#427)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_POINTING_HAND_CURSOR&lt;/code&gt; alias for &lt;code&gt;GLFW_HAND_CURSOR&lt;/code&gt; (#427)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_MOUSE_PASSTHROUGH&lt;/code&gt; window hint for letting mouse input pass through the window (#1236,#1568)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_PLATFORM_UNAVAILABLE&lt;/code&gt; error for platform detection failures (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_FEATURE_UNAVAILABLE&lt;/code&gt; error for platform limitations (#1692)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_FEATURE_UNIMPLEMENTED&lt;/code&gt; error for incomplete backends (#1692)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_ANGLE_PLATFORM_TYPE&lt;/code&gt; init hint and &lt;code&gt;GLFW_ANGLE_PLATFORM_TYPE_*&lt;/code&gt; values to select ANGLE backend (#1380)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_X11_XCB_VULKAN_SURFACE&lt;/code&gt; init hint for selecting X11 Vulkan surface extension (#1793)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_BUILD_WIN32&lt;/code&gt; CMake option for enabling Win32 support (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_BUILD_COCOA&lt;/code&gt; CMake option for enabling Cocoa support (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_BUILD_X11&lt;/code&gt; CMake option for enabling X11 support (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_LIBRARY_TYPE&lt;/code&gt; CMake variable for overriding the library type (#279,#1307,#1497,#1574,#1928)&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;GLFW_PKG_CONFIG_REQUIRES_PRIVATE&lt;/code&gt; and &lt;code&gt;GLFW_PKG_CONFIG_LIBS_PRIVATE&lt;/code&gt; CMake variables exposing pkg-config dependencies (#1307)&lt;/li&gt; &#xA; &lt;li&gt;Made joystick subsystem initialize at first use (#1284,#1646)&lt;/li&gt; &#xA; &lt;li&gt;Made &lt;code&gt;GLFW_DOUBLEBUFFER&lt;/code&gt; a read-only window attribute&lt;/li&gt; &#xA; &lt;li&gt;Updated the minimum required CMake version to 3.1&lt;/li&gt; &#xA; &lt;li&gt;Updated gamepad mappings from upstream&lt;/li&gt; &#xA; &lt;li&gt;Disabled tests and examples by default when built as a CMake subdirectory&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;GLFW_USE_WAYLAND&lt;/code&gt; CMake option to &lt;code&gt;GLFW_BUILD_WAYLAND&lt;/code&gt; (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Removed &lt;code&gt;GLFW_USE_OSMESA&lt;/code&gt; CMake option enabling the Null platform (#1958)&lt;/li&gt; &#xA; &lt;li&gt;Removed CMake generated configuration header&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: The CMake config-file package used an absolute path and was not relocatable (#1470)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Video modes with a duplicate screen area were discarded (#1555,#1556)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Compiling with -Wextra-semi caused warnings (#1440)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Built-in mappings failed because some OEMs re-used VID/PID (#1583)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Some extension loader headers did not prevent default OpenGL header inclusion (#1695)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Buffers were swapped at creation on single-buffered windows (#1873)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Gamepad mapping updates could spam &lt;code&gt;GLFW_INVALID_VALUE&lt;/code&gt; due to incompatible controllers sharing hardware ID (#1763)&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: Native access functions for context handles did not check that the API matched&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: &lt;code&gt;glfwMakeContextCurrent&lt;/code&gt; would access TLS slot before initialization&lt;/li&gt; &#xA; &lt;li&gt;Bugfix: &lt;code&gt;glfwSetGammaRamp&lt;/code&gt; could emit &lt;code&gt;GLFW_INVALID_VALUE&lt;/code&gt; before initialization&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Added the &lt;code&gt;GLFW_WIN32_KEYBOARD_MENU&lt;/code&gt; window hint for enabling access to the window menu&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Added a version info resource to the GLFW DLL&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Disabled framebuffer transparency on Windows 7 when DWM windows are opaque (#1512)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;GLFW_INCLUDE_VULKAN&lt;/code&gt; plus &lt;code&gt;VK_USE_PLATFORM_WIN32_KHR&lt;/code&gt; caused symbol redefinition (#1524)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: The cursor position event was emitted before its cursor enter event (#1490)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: The window hint &lt;code&gt;GLFW_MAXIMIZED&lt;/code&gt; did not move or resize the window (#1499)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Disabled cursor mode interfered with some non-client actions&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Super key was not released after Win+V hotkey (#1622)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;glfwGetKeyName&lt;/code&gt; could access out of bounds and return an invalid pointer&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Some synthetic key events were reported as &lt;code&gt;GLFW_KEY_UNKNOWN&lt;/code&gt; (#1623)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Non-BMP Unicode codepoint input was reported as UTF-16&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Monitor functions could return invalid values after configuration change (#1761)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Initialization would segfault on Windows 8 (not 8.1) (#1775)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Duplicate size events were not filtered (#1610)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Full screen windows were incorrectly resized by DPI changes (#1582)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;GLFW_SCALE_TO_MONITOR&lt;/code&gt; had no effect on systems older than Windows 10 version 1703 (#1511)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;USE_MSVC_RUNTIME_LIBRARY_DLL&lt;/code&gt; had no effect on CMake 3.15 or later (#1783,#1796)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Compilation with LLVM for Windows failed (#1807,#1824,#1874)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: The foreground lock timeout was overridden, ignoring the user&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Content scale queries could fail silently (#1615)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Content scales could have garbage values if monitor was recently disconnected (#1615)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: A window created maximized and undecorated would cover the whole monitor (#1806)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: The default restored window position was lost when creating a maximized window&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;glfwMaximizeWindow&lt;/code&gt; would make a hidden window visible&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;Alt+PrtSc&lt;/code&gt; would emit &lt;code&gt;GLFW_KEY_UNKNOWN&lt;/code&gt; and a different scancode than &lt;code&gt;PrtSc&lt;/code&gt; (#1993)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: &lt;code&gt;GLFW_KEY_PAUSE&lt;/code&gt; scancode from &lt;code&gt;glfwGetKeyScancode&lt;/code&gt; did not match event scancode (#1993)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: Instance-local operations used executable instance (#469,#1296,#1395)&lt;/li&gt; &#xA; &lt;li&gt;[Win32] Bugfix: The OSMesa library was not unloaded on termination&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Added support for &lt;code&gt;VK_EXT_metal_surface&lt;/code&gt; (#1619)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Added locating the Vulkan loader at runtime in an application bundle&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Moved main menu creation to GLFW initialization time (#1649)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Changed &lt;code&gt;EGLNativeWindowType&lt;/code&gt; from &lt;code&gt;NSView&lt;/code&gt; to &lt;code&gt;CALayer&lt;/code&gt; (#1169)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Changed F13 key to report Print Screen for cross-platform consistency (#1786)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Removed dependency on the CoreVideo framework&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: &lt;code&gt;glfwSetWindowSize&lt;/code&gt; used a bottom-left anchor point (#1553)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Window remained on screen after destruction until event poll (#1412)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Event processing before window creation would assert (#1543)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Undecorated windows could not be iconified on recent macOS&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Touching event queue from secondary thread before main thread would abort (#1649)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Non-BMP Unicode codepoint input was reported as UTF-16 (#1635)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Failing to retrieve the refresh rate of built-in displays could leak memory&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Objective-C files were compiled as C with CMake 3.19 (#1787)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Duplicate video modes were not filtered out (#1830)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Menu bar was not clickable on macOS 10.15+ until it lost and regained focus (#1648,#1802)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Monitor name query could segfault on macOS 11 (#1809,#1833)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: The install name of the installed dylib was relative (#1504)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: The MoltenVK layer contents scale was updated only after related events were emitted&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: Moving the cursor programmatically would freeze it for a fraction of a second (#1962)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: &lt;code&gt;kIOMasterPortDefault&lt;/code&gt; was deprecated in macOS 12.0 (#1980)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: &lt;code&gt;kUTTypeURL&lt;/code&gt; was deprecated in macOS 12.0 (#2003)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: A connected Apple AirPlay would emit a useless error (#1791)&lt;/li&gt; &#xA; &lt;li&gt;[Cocoa] Bugfix: The EGL and OSMesa libraries were not unloaded on termination&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: The CMake files did not check for the XInput headers (#1480)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Key names were not updated when the keyboard layout changed (#1462,#1528)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Decorations could not be enabled after window creation (#1566)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Content scale fallback value could be inconsistent (#1578)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: &lt;code&gt;glfwMaximizeWindow&lt;/code&gt; had no effect on hidden windows&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Clearing &lt;code&gt;GLFW_FLOATING&lt;/code&gt; on a hidden window caused invalid read&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Changing &lt;code&gt;GLFW_FLOATING&lt;/code&gt; on a hidden window could silently fail&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Disabled cursor mode was interrupted by indicator windows&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Monitor physical dimensions could be reported as zero mm&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Window position events were not emitted during resizing (#1613)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: &lt;code&gt;glfwFocusWindow&lt;/code&gt; could terminate on older WMs or without a WM&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Querying a disconnected monitor could segfault (#1602)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: IME input of CJK was broken for &#34;C&#34; locale (#1587,#1636)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Termination would segfault if the IM had been destroyed&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Any IM started after initialization would not be detected&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Xlib errors caused by other parts of the application could be reported as GLFW errors&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: A handle race condition could cause a &lt;code&gt;BadWindow&lt;/code&gt; error (#1633)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: XKB path used keysyms instead of physical locations for non-printable keys (#1598)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Function keys were mapped to &lt;code&gt;GLFW_KEY_UNKNOWN&lt;/code&gt; for some layout combinations (#1598)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Keys pressed simultaneously with others were not always reported (#1112,#1415,#1472,#1616)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Some window attributes were not applied on leaving fullscreen (#1863)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Changing &lt;code&gt;GLFW_FLOATING&lt;/code&gt; could leak memory&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Icon pixel format conversion worked only by accident, relying on undefined behavior (#1986)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Dynamic loading on OpenBSD failed due to soname differences&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Waiting for events would fail if file descriptor was too large (#2024)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Joystick events could lead to busy-waiting (#1872)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: &lt;code&gt;glfwWaitEvents*&lt;/code&gt; did not continue for joystick events&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: &lt;code&gt;glfwPostEmptyEvent&lt;/code&gt; could be ignored due to race condition (#379,#1281,#1285,#2033)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Dynamic loading on NetBSD failed due to soname differences&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: Left shift of int constant relied on undefined behavior (#1951)&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: The OSMesa libray was not unloaded on termination&lt;/li&gt; &#xA; &lt;li&gt;[X11] Bugfix: A malformed response during selection transfer could cause a segfault&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Added dynamic loading of all Wayland libraries&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Added support for key names via xkbcommon&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Added support for file path drop events (#2040)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Removed support for &lt;code&gt;wl_shell&lt;/code&gt; (#1443)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: The &lt;code&gt;GLFW_HAND_CURSOR&lt;/code&gt; shape used the wrong image (#1432)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: &lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt; was not correctly enabled&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Repeated keys could be reported with &lt;code&gt;NULL&lt;/code&gt; window (#1704)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Retrieving partial framebuffer size would segfault&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Scrolling offsets were inverted compared to other platforms (#1463)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Client-Side Decorations were destroyed in the wrong order (#1798)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Monitors physical size could report zero (#1784,#1792)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Some keys were not repeating in Wayland (#1908)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Non-arrow cursors are offset from the hotspot (#1706,#1899)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: The &lt;code&gt;O_CLOEXEC&lt;/code&gt; flag was not defined on FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Key repeat could lead to a race condition (#1710)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Activating a window would emit two input focus events&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Disable key repeat mechanism when window loses input focus&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Window hiding and showing did not work (#1492,#1731)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: A key being repeated was not released when window lost focus&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Showing a hidden window did not emit a window refresh event&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Full screen window creation did not ignore &lt;code&gt;GLFW_VISIBLE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Some keys were reported as wrong key or &lt;code&gt;GLFW_KEY_UNKNOWN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Text input did not repeat along with key repeat&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: &lt;code&gt;glfwPostEmptyEvent&lt;/code&gt; sometimes had no effect (#1520,#1521)&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: &lt;code&gt;glfwSetClipboardString&lt;/code&gt; would fail if set to result of &lt;code&gt;glfwGetClipboardString&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Data source creation error would cause double free at termination&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Partial writes of clipboard string would cause beginning to repeat&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Some errors would cause clipboard string transfer to hang&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: Drag and drop data was misinterpreted as clipboard string&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: MIME type matching was not performed for clipboard string&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: The OSMesa library was not unloaded on termination&lt;/li&gt; &#xA; &lt;li&gt;[Wayland] Bugfix: &lt;code&gt;glfwCreateWindow&lt;/code&gt; could emit &lt;code&gt;GLFW_FEATURE_UNAVAILABLE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[POSIX] Removed use of deprecated function &lt;code&gt;gettimeofday&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[POSIX] Bugfix: &lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt; was not correctly tested for or enabled&lt;/li&gt; &#xA; &lt;li&gt;[WGL] Disabled the DWM swap interval hack for Windows 8 and later (#1072)&lt;/li&gt; &#xA; &lt;li&gt;[NSGL] Removed enforcement of forward-compatible flag for core contexts&lt;/li&gt; &#xA; &lt;li&gt;[NSGL] Bugfix: &lt;code&gt;GLFW_COCOA_RETINA_FRAMEBUFFER&lt;/code&gt; had no effect on newer macOS versions (#1442)&lt;/li&gt; &#xA; &lt;li&gt;[NSGL] Bugfix: Workaround for swap interval on 10.14 broke on 10.12 (#1483)&lt;/li&gt; &#xA; &lt;li&gt;[NSGL] Bugfix: Defining &lt;code&gt;GL_SILENCE_DEPRECATION&lt;/code&gt; externally caused a duplicate definition warning (#1840)&lt;/li&gt; &#xA; &lt;li&gt;[EGL] Added platform selection via the &lt;code&gt;EGL_EXT_platform_base&lt;/code&gt; extension (#442)&lt;/li&gt; &#xA; &lt;li&gt;[EGL] Added ANGLE backend selection via &lt;code&gt;EGL_ANGLE_platform_angle&lt;/code&gt; extension (#1380)&lt;/li&gt; &#xA; &lt;li&gt;[EGL] Bugfix: The &lt;code&gt;GLFW_DOUBLEBUFFER&lt;/code&gt; context attribute was ignored (#1843)&lt;/li&gt; &#xA; &lt;li&gt;[GLX] Bugfix: Context creation failed if GLX 1.4 was not exported by GLX library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;On &lt;a href=&#34;https://www.glfw.org/&#34;&gt;glfw.org&lt;/a&gt; you can find the latest version of GLFW, as well as news, documentation and other information about the project.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions related to the use of GLFW, we have a &lt;a href=&#34;https://discourse.glfw.org/&#34;&gt;forum&lt;/a&gt;, and the &lt;code&gt;#glfw&lt;/code&gt; IRC channel on &lt;a href=&#34;https://libera.chat/&#34;&gt;Libera.Chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a bug to report, a patch to submit or a feature you&#39;d like to request, please file it in the &lt;a href=&#34;https://github.com/glfw/glfw/issues&#34;&gt;issue tracker&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you&#39;re interested in helping out with the development of GLFW or porting it to your favorite platform, join us on the forum, GitHub or IRC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/darwin-xnu</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/apple/darwin-xnu</id>
    <link href="https://github.com/apple/darwin-xnu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Darwin Kernel (mirror). This repository is a pure mirror and contributions are currently not accepted via pull-requests, please submit your contributions via https://developer.apple.com/bug-reporting/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is XNU?&lt;/h1&gt; &#xA;&lt;p&gt;XNU kernel is part of the Darwin operating system for use in macOS and iOS operating systems. XNU is an acronym for X is Not Unix. XNU is a hybrid kernel combining the Mach kernel developed at Carnegie Mellon University with components from FreeBSD and a C++ API for writing drivers called IOKit. XNU runs on x86_64 for both single processor and multi-processor configurations.&lt;/p&gt; &#xA;&lt;h1&gt;XNU Source Tree&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; - configurations for exported apis for supported architecture and platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SETUP&lt;/code&gt; - Basic set of tools used for configuring the kernel, versioning and kextsymbol management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXTERNAL_HEADERS&lt;/code&gt; - Headers sourced from other projects to avoid dependency cycles when building. These headers should be regularly synced when source is updated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libkern&lt;/code&gt; - C++ IOKit library code for handling of drivers and kexts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libsa&lt;/code&gt; - kernel bootstrap code for startup&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libsyscall&lt;/code&gt; - syscall library interface for userspace programs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libkdd&lt;/code&gt; - source for user library for parsing kernel data like kernel chunked data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;makedefs&lt;/code&gt; - top level rules and defines for kernel build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;osfmk&lt;/code&gt; - Mach kernel based subsystems&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pexpert&lt;/code&gt; - Platform specific code like interrupt handling, atomics etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;security&lt;/code&gt; - Mandatory Access Check policy interfaces and related implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bsd&lt;/code&gt; - BSD subsystems code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt; - A set of utilities for testing, debugging and profiling kernel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to build XNU&lt;/h1&gt; &#xA;&lt;h2&gt;Building &lt;code&gt;DEVELOPMENT&lt;/code&gt; kernel&lt;/h2&gt; &#xA;&lt;p&gt;The xnu make system can build kernel based on &lt;code&gt;KERNEL_CONFIGS&lt;/code&gt; &amp;amp; &lt;code&gt;ARCH_CONFIGS&lt;/code&gt; variables as arguments. Here is the syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make SDKROOT=&amp;lt;sdkroot&amp;gt; ARCH_CONFIGS=&amp;lt;arch&amp;gt; KERNEL_CONFIGS=&amp;lt;variant&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&amp;lt;sdkroot&amp;gt;: path to macOS SDK on disk. (defaults to &lt;code&gt;/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;variant&amp;gt;: can be &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;profile&lt;/code&gt; and configures compilation flags and asserts throughout kernel code.&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;arch&amp;gt; : can be valid arch to build for. (E.g. &lt;code&gt;X86_64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build a kernel for the same architecture as running OS, just type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;$ make SDKROOT=macosx.internal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, there is support for configuring architectures through &lt;code&gt;ARCH_CONFIGS&lt;/code&gt; and kernel configurations with &lt;code&gt;KERNEL_CONFIGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=DEVELOPMENT&#xA;$ make SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=&#34;RELEASE DEVELOPMENT DEBUG&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, architecture is set to the build machine architecture, and the default kernel config is set to build for DEVELOPMENT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will also create a bootable image, kernel.[config], and a kernel binary with symbols, kernel.[config].unstripped.&lt;/p&gt; &#xA;&lt;p&gt;To intall the kernel into a DSTROOT, use the &lt;code&gt;install_kernels&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make install_kernels DSTROOT=/tmp/xnu-dst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hint: For a more satisfying kernel debugging experience, with access to all local variables and arguments, but without all the extra check of the DEBUG kernel, add something like: CFLAGS_DEVELOPMENTARM64=&#34;-O0 -g -DKERNEL_STACK_MULTIPLIER=2&#34; CXXFLAGS_DEVELOPMENTARM64=&#34;-O0 -g -DKERNEL_STACK_MULTIPLIER=2&#34; to your make command. Replace DEVELOPMENT and ARM64 with the appropriate build and platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To build with RELEASE kernel configuration&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make KERNEL_CONFIGS=RELEASE SDKROOT=/path/to/SDK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building FAT kernel binary&lt;/h2&gt; &#xA;&lt;p&gt;Define architectures in your environment or when running a make command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make ARCH_CONFIGS=&#34;X86_64&#34; exporthdrs all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other makefile options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$ make MAKEJOBS=-j8 # this will use 8 processes during the build. The default is 2x the number of active CPUS.&lt;/li&gt; &#xA; &lt;li&gt;$ make -j8 # the standard command-line option is also accepted&lt;/li&gt; &#xA; &lt;li&gt;$ make -w # trace recursive make invocations. Useful in combination with VERBOSE=YES&lt;/li&gt; &#xA; &lt;li&gt;$ make BUILD_LTO=0 # build without LLVM Link Time Optimization&lt;/li&gt; &#xA; &lt;li&gt;$ make REMOTEBUILD=user@remotehost # perform build on remote host&lt;/li&gt; &#xA; &lt;li&gt;$ make BUILD_JSON_COMPILATION_DATABASE=1 # Build Clang JSON Compilation Database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The XNU build system can optionally output color-formatted build output. To enable this, you can either set the &lt;code&gt;XNU_LOGCOLORS&lt;/code&gt; environment variable to &lt;code&gt;y&lt;/code&gt;, or you can pass &lt;code&gt;LOGCOLORS=y&lt;/code&gt; to the make command.&lt;/p&gt; &#xA;&lt;h1&gt;Debug information formats&lt;/h1&gt; &#xA;&lt;p&gt;By default, a DWARF debug information repository is created during the install phase; this is a &#34;bundle&#34; named kernel.development.&amp;lt;variant&amp;gt;.dSYM To select the older STABS debug information format (where debug information is embedded in the kernel.development.unstripped image), set the BUILD_STABS environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export BUILD_STABS=1&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building KernelCaches&lt;/h1&gt; &#xA;&lt;p&gt;To test the xnu kernel, you need to build a kernelcache that links the kexts and kernel together into a single bootable image. To build a kernelcache you can use the following mechanisms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using automatic kernelcache generation with &lt;code&gt;kextd&lt;/code&gt;. The kextd daemon keeps watching for changing in &lt;code&gt;/System/Library/Extensions&lt;/code&gt; directory. So you can setup new kernel as&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp BUILD/obj/DEVELOPMENT/X86_64/kernel.development /System/Library/Kernels/&#xA;$ touch /System/Library/Extensions&#xA;$ ps -e | grep kextd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manually invoking &lt;code&gt;kextcache&lt;/code&gt; to build new kernelcache.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ kextcache -q -z -a x86_64 -l -n -c /var/tmp/kernelcache.test -K /var/tmp/kernel.test /System/Library/Extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Running KernelCache on Target machine&lt;/h1&gt; &#xA;&lt;p&gt;The development kernel and iBoot supports configuring boot arguments so that we can safely boot into test kernel and, if things go wrong, safely fall back to previously used kernelcache. Following are the steps to get such a setup:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create kernel cache using the kextcache command as &lt;code&gt;/kernelcache.test&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy exiting boot configurations to alternate file&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp /Library/Preferences/SystemConfiguration/com.apple.Boot.plist /next_boot.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the kernelcache and boot-args for your setup&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ plutil -insert &#34;Kernel Cache&#34; -string &#34;kernelcache.test&#34; /next_boot.plist&#xA;$ plutil -replace &#34;Kernel Flags&#34; -string &#34;debug=0x144 -v kernelsuffix=test &#34; /next_boot.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the new config to &lt;code&gt;/Library/Preferences/SystemConfiguration/&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp /next_boot.plist /Library/Preferences/SystemConfiguration/boot.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bless the volume with new configs.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ sudo -n bless  --mount / --setBoot --nextonly --options &#34;config=boot&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--nextonly&lt;/code&gt; flag specifies that use the &lt;code&gt;boot.plist&lt;/code&gt; configs only for one boot. So if the kernel panic&#39;s you can easily power reboot and recover back to original kernel.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Creating tags and cscope&lt;/h1&gt; &#xA;&lt;p&gt;Set up your build environment and from the top directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make tags     # this will build ctags and etags on a case-sensitive volume, only ctags on case-insensitive&#xA;$ make TAGS     # this will build etags&#xA;$ make cscope   # this will build cscope database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How to install a new header file from XNU&lt;/h1&gt; &#xA;&lt;p&gt;To install IOKit headers, see additional comments in &lt;a href=&#34;&#34;&gt;iokit/IOKit/Makefile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;XNU installs header files at the following locations -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers&#xA;b. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders&#xA;c. $(DSTROOT)/usr/include/&#xA;d. $(DSTROOT)/System/DriverKit/usr/include/&#xA;e. $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Kernel.framework&lt;/code&gt; is used by kernel extensions.&lt;br&gt; The &lt;code&gt;System.framework&lt;/code&gt; and &lt;code&gt;/usr/include&lt;/code&gt; are used by user level applications. &lt;br&gt; &lt;code&gt;/System/DriverKit/usr/include&lt;/code&gt; is used by userspace drivers. &lt;br&gt; The header files in framework&#39;s &lt;code&gt;PrivateHeaders&lt;/code&gt; are only available for ** Apple Internal Development **.&lt;/p&gt; &#xA;&lt;p&gt;The directory containing the header file should have a Makefile that creates the list of files that should be installed at different locations. If you are adding the first header file in a directory, you will need to create Makefile similar to &lt;code&gt;xnu/bsd/sys/Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add your header file to the correct file list depending on where you want to install it. The default locations where the header files are installed from each file list are -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. `DATAFILES` : To make header file available in user level -&#xA;   `$(DSTROOT)/usr/include`&#xA;&#xA;b. `DRIVERKIT_DATAFILES` : To make header file available to DriverKit userspace drivers -&#xA;   `$(DSTROOT)/System/DriverKit/usr/include`&#xA;&#xA;c. `PRIVATE_DATAFILES` : To make header file available to Apple internal in&#xA;   user level -&#xA;   `$(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders`&#xA;&#xA;d. `KERNELFILES` : To make header file available in kernel level -&#xA;   `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers`&#xA;   `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`&#xA;&#xA;e. `PRIVATE_KERNELFILES` : To make header file available to Apple internal&#xA;   for kernel extensions -&#xA;   `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Makefile combines the file lists mentioned above into different install lists which are used by build system to install the header files. There are two types of install lists: machine-dependent and machine-independent. These lists are indicated by the presence of &lt;code&gt;MD&lt;/code&gt; and &lt;code&gt;MI&lt;/code&gt; in the build setting, respectively. If your header is architecture-specific, then you should use a machine-dependent install list (e.g. &lt;code&gt;INSTALL_MD_LIST&lt;/code&gt;). If your header should be installed for all architectures, then you should use a machine-independent install list (e.g. &lt;code&gt;INSTALL_MI_LIST&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If the install list that you are interested does not exist, create it by adding the appropriate file lists. The default install lists, its member file lists and their default location are described below -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. `INSTALL_MI_LIST` : Installs header file to a location that is available to everyone in user level.&#xA;    Locations -&#xA;       $(DSTROOT)/usr/include&#xA;   Definition -&#xA;       INSTALL_MI_LIST = ${DATAFILES}&#xA;&#xA;b. `INSTALL_DRIVERKIT_MI_LIST` : Installs header file to a location that is&#xA;    available to DriverKit userspace drivers.&#xA;    Locations -&#xA;       $(DSTROOT)/System/DriverKit/usr/include&#xA;   Definition -&#xA;       INSTALL_DRIVERKIT_MI_LIST = ${DRIVERKIT_DATAFILES}&#xA;&#xA;c.  `INSTALL_MI_LCL_LIST` : Installs header file to a location that is available&#xA;   for Apple internal in user level.&#xA;   Locations -&#xA;       $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders&#xA;   Definition -&#xA;       INSTALL_MI_LCL_LIST = ${PRIVATE_DATAFILES}&#xA;&#xA;d. `INSTALL_KF_MI_LIST` : Installs header file to location that is available&#xA;   to everyone for kernel extensions.&#xA;   Locations -&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers&#xA;   Definition -&#xA;        INSTALL_KF_MI_LIST = ${KERNELFILES}&#xA;&#xA;e. `INSTALL_KF_MI_LCL_LIST` : Installs header file to location that is&#xA;   available for Apple internal for kernel extensions.&#xA;   Locations -&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders&#xA;   Definition -&#xA;        INSTALL_KF_MI_LCL_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}&#xA;&#xA;f. `EXPORT_MI_LIST` : Exports header file to all of xnu (bsd/, osfmk/, etc.)&#xA;   for compilation only. Does not install anything into the SDK.&#xA;   Definition -&#xA;        EXPORT_MI_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}&#xA;&#xA;g. `INSTALL_MODULEMAP_INCDIR_MI_LIST` : Installs module map file to a&#xA;   location that is available to everyone in user level, installing at the&#xA;   root of INCDIR.&#xA;   Locations -&#xA;       $(DSTROOT)/usr/include&#xA;   Definition -&#xA;       INSTALL_MODULEMAP_INCDIR_MI_LIST = ${MODULEMAP_INCDIR_FILES}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install the header file in a sub-directory of the paths described in (1), specify the directory name using two variables &lt;code&gt;INSTALL_MI_DIR&lt;/code&gt; and &lt;code&gt;EXPORT_MI_DIR&lt;/code&gt; as follows -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;INSTALL_MI_DIR = dirname&#xA;EXPORT_MI_DIR = dirname&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A single header file can exist at different locations using the steps mentioned above. However it might not be desirable to make all the code in the header file available at all the locations. For example, you want to export a function only to kernel level but not user level.&lt;/p&gt; &#xA;&lt;p&gt;You can use C language&#39;s pre-processor directive (#ifdef, #endif, #ifndef) to control the text generated before a header file is installed. The kernel only includes the code if the conditional macro is TRUE and strips out code for FALSE conditions from the header file.&lt;/p&gt; &#xA;&lt;p&gt;Some pre-defined macros and their descriptions are -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. `PRIVATE` : If defined, enclosed definitions are considered System&#xA;Private Interfaces. These are visible within xnu and&#xA;exposed in user/kernel headers installed within the AppleInternal&#xA;&#34;PrivateHeaders&#34; sections of the System and Kernel frameworks.&#xA;b. `KERNEL_PRIVATE` : If defined, enclosed code is available to all of xnu&#xA;kernel and Apple internal kernel extensions and omitted from user&#xA;headers.&#xA;c. `BSD_KERNEL_PRIVATE` : If defined, enclosed code is visible exclusively&#xA;within the xnu/bsd module.&#xA;d. `MACH_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively&#xA;within the xnu/osfmk module.&#xA;e. `XNU_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively&#xA;within xnu.&#xA;f. `KERNEL` :  If defined, enclosed code is available within xnu and kernel&#xA;   extensions and is not visible in user level header files.  Only the&#xA;   header files installed in following paths will have the code -&#xA;&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders&#xA;g. `DRIVERKIT`: If defined, enclosed code is visible exclusively in the&#xA;DriverKit SDK headers used by userspace drivers.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Conditional compilation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;xnu&lt;/code&gt; offers the following mechanisms for conditionally compiling code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. *CPU Characteristics* If the code you are guarding has specific&#xA;characterstics that will vary only based on the CPU architecture being&#xA;targeted, use this option. Prefer checking for features of the&#xA;architecture (e.g. `__LP64__`, `__LITTLE_ENDIAN__`, etc.).&#xA;b. *New Features* If the code you are guarding, when taken together,&#xA;implements a feature, you should define a new feature in `config/MASTER`&#xA;and use the resulting `CONFIG` preprocessor token (e.g. for a feature&#xA;named `config_virtual_memory`, check for `#if CONFIG_VIRTUAL_MEMORY`).&#xA;This practice ensures that existing features may be brought to other&#xA;platforms by simply changing a feature switch.&#xA;c. *Existing Features* You can use existing features if your code is&#xA;strongly tied to them (e.g. use `SECURE_KERNEL` if your code implements&#xA;new functionality that is exclusively relevant to the trusted kernel and&#xA;updates the definition/understanding of what being a trusted kernel means).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended that you avoid compiling based on the target platform. &lt;code&gt;xnu&lt;/code&gt; does not define the platform macros from &lt;code&gt;TargetConditionals.h&lt;/code&gt; (&lt;code&gt;TARGET_OS_OSX&lt;/code&gt;, &lt;code&gt;TARGET_OS_IOS&lt;/code&gt;, etc.).&lt;/p&gt; &#xA;&lt;p&gt;There is a deprecated &lt;code&gt;TARGET_OS_EMBEDDED&lt;/code&gt; macro, but this should be avoided as it is in general too broad a definition for most functionality. Please refer to TargetConditionals.h for a full picture.&lt;/p&gt; &#xA;&lt;h1&gt;How to add a new syscall&lt;/h1&gt; &#xA;&lt;h1&gt;Testing the kernel&lt;/h1&gt; &#xA;&lt;p&gt;XNU kernel has multiple mechanisms for testing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Assertions - The DEVELOPMENT and DEBUG kernel configs are compiled with assertions enabled. This allows developers to easily test invariants and conditions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;XNU Power On Self Tests (&lt;code&gt;XNUPOST&lt;/code&gt;): The XNUPOST config allows for building the kernel with basic set of test functions that are run before first user space process is launched. Since XNU is hybrid between MACH and BSD, we have two locations where tests can be added.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;xnu/osfmk/tests/     # For testing mach based kernel structures and apis.&#xA;bsd/tests/           # For testing BSD interfaces.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please follow the documentation at &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/osfmk/tests/README.md&#34;&gt;osfmk/tests/README.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User level tests: The &lt;code&gt;tools/tests/&lt;/code&gt; directory holds all the tests that verify syscalls and other features of the xnu kernel. The make target &lt;code&gt;xnu_tests&lt;/code&gt; can be used to build all the tests supported.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make RC_ProjectName=xnu_tests SDKROOT=/path/to/SDK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These tests are individual programs that can be run from Terminal and report tests status by means of std posix exit codes (0 -&amp;gt; success) and/or stdout. Please read detailed documentation in &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/tools/tests/unit_tests/README.md&#34;&gt;tools/tests/unit_tests/README.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Kernel data descriptors&lt;/h1&gt; &#xA;&lt;p&gt;XNU uses different data formats for passing data in its api. The most standard way is using syscall arguments. But for complex data it often relies of sending memory saved by C structs. This packaged data transport mechanism is fragile and leads to broken interfaces between user space programs and kernel apis. &lt;code&gt;libkdd&lt;/code&gt; directory holds user space library that can parse custom data provided by the same version of kernel. The kernel chunked data format is described in detail at &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/libkdd/README.md&#34;&gt;libkdd/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Debugging the kernel&lt;/h1&gt; &#xA;&lt;p&gt;The xnu kernel supports debugging with a remote kernel debugging protocol (kdp). Please refer documentation at [technical note] &lt;a href=&#34;https://developer.apple.com/library/mac/technotes/tn2063/_index.html&#34; title=&#34;Understanding and Debugging Kernel Panics&#34;&gt;TN2063&lt;/a&gt; By default the kernel is setup to reboot on a panic. To debug a live kernel, the kdp server is setup to listen for UDP connections over ethernet. For machines without ethernet port, this behavior can be altered with use of kernel boot-args. Following are some common options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debug=0x144&lt;/code&gt; - setups debug variables to start kdp debugserver on panic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; - print kernel logs on screen. By default XNU only shows grey screen with boot art.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kdp_match_name=en1&lt;/code&gt; - Override default port selection for kdp. Supported for ethernet, thunderbolt and serial debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To debug a panic&#39;ed kernel, use llvm debugger (lldb) along with unstripped symbol rich kernel binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh$ lldb kernel.development.unstripped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can connect to panic&#39;ed machine with &lt;code&gt;kdp_remote [ip addr]&lt;/code&gt; or &lt;code&gt;gdb_remote [hostip : port]&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;Each kernel is packaged with kernel specific debug scripts as part of the build process. For security reasons these special commands and scripts do not get loaded automatically when lldb is connected to machine. Please add the following setting to your &lt;code&gt;~/.lldbinit&lt;/code&gt; if you wish to always load these macros.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;settings set target.load-script-from-symbol-file true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;tools/lldbmacros&lt;/code&gt; directory contains the source for each of these commands. Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/tools/lldbmacros/README.md&#34;&gt;README.md&lt;/a&gt; for detailed explanation of commands and their usage.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raspberrypi/pico-sdk</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/raspberrypi/pico-sdk</id>
    <link href="https://github.com/raspberrypi/pico-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raspberry Pi Pico SDK&lt;/h1&gt; &#xA;&lt;p&gt;The Raspberry Pi Pico SDK (henceforth the SDK) provides the headers, libraries and build system necessary to write programs for the RP2040-based devices such as the Raspberry Pi Pico in C, C++ or assembly language.&lt;/p&gt; &#xA;&lt;p&gt;The SDK is designed to provide an API and programming environment that is familiar both to non-embedded C developers and embedded C developers alike. A single program runs on the device at a time and starts with a conventional &lt;code&gt;main()&lt;/code&gt; method. Standard C/C++ libraries are supported along with C level libraries/APIs for accessing all of the RP2040&#39;s hardware include PIO (Programmable IO).&lt;/p&gt; &#xA;&lt;p&gt;Additionally the SDK provides higher level libraries for dealing with timers, synchronization, USB (TinyUSB) and multi-core programming along with various utilities.&lt;/p&gt; &#xA;&lt;p&gt;The SDK can be used to build anything from simple applications, to fully fledged runtime environments such as MicroPython, to low level software such as RP2040&#39;s on-chip bootrom itself.&lt;/p&gt; &#xA;&lt;p&gt;Additional libraries/APIs that are not yet ready for inclusion in the SDK can be found in &lt;a href=&#34;https://github.com/raspberrypi/pico-extras&#34;&gt;pico-extras&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-get-started&#34;&gt;Getting Started with the Raspberry Pi Pico&lt;/a&gt; for information on how to setup your hardware, IDE/environment and for how to build and debug software for the Raspberry Pi Pico and other RP2040-based devices.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-c-sdk&#34;&gt;Raspberry Pi Pico C/C++ SDK&lt;/a&gt; to learn more about programming using the SDK, to explore more advanced features, and for complete PDF-based API documentation.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-doxygen&#34;&gt;Online Raspberry Pi Pico SDK API docs&lt;/a&gt; for HTML-based API documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Example code&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/raspberrypi/pico-examples&#34;&gt;pico-examples&lt;/a&gt; for example code you can build.&lt;/p&gt; &#xA;&lt;h1&gt;Quick-start your own project&lt;/h1&gt; &#xA;&lt;p&gt;These instructions are extremely terse, and Linux-based only. For detailed steps, instructions for other platforms, and just in general, we recommend you see &lt;a href=&#34;https://rptl.io/pico-c-sdk&#34;&gt;Raspberry Pi Pico C/C++ SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install CMake (at least version 3.13), and GCC cross compiler&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up your project to point to use the Raspberry Pi Pico SDK&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Either by cloning the SDK locally (most common) :&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this Raspberry Pi Pico SDK repository&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy &lt;a href=&#34;https://github.com/raspberrypi/pico-sdk/raw/master/external/pico_sdk_import.cmake&#34;&gt;pico_sdk_import.cmake&lt;/a&gt; from the SDK into your project directory&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set &lt;code&gt;PICO_SDK_PATH&lt;/code&gt; to the SDK location in your environment, or pass it (&lt;code&gt;-DPICO_SDK_PATH=&lt;/code&gt;) to cmake later.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize the SDK based on PICO_SDK_PATH&#xA;# note: this must happen before project()&#xA;include(pico_sdk_import.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Or with the Raspberry Pi Pico SDK as a submodule :&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Clone the SDK as a submodule called &lt;code&gt;pico-sdk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize pico-sdk from submodule&#xA;# note: this must happen before project()&#xA;include(pico-sdk/pico_sdk_init.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Or with automatic download from GitHub :&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy &lt;a href=&#34;https://github.com/raspberrypi/pico-sdk/raw/master/external/pico_sdk_import.cmake&#34;&gt;pico_sdk_import.cmake&lt;/a&gt; from the SDK into your project directory&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize pico-sdk from GIT&#xA;# (note this can come from environment, CMake cache etc)&#xA;set(PICO_SDK_FETCH_FROM_GIT on)&#xA;&#xA;# pico_sdk_import.cmake is a single file copied from this SDK&#xA;# note: this must happen before project()&#xA;include(pico_sdk_import.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write your code (see &lt;a href=&#34;https://github.com/raspberrypi/pico-examples&#34;&gt;pico-examples&lt;/a&gt; or the &lt;a href=&#34;https://rptl.io/pico-c-sdk&#34;&gt;Raspberry Pi Pico C/C++ SDK&lt;/a&gt; documentation for more information)&lt;/p&gt; &lt;p&gt;About the simplest you can do is a single source file (e.g. hello_world.c)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &#34;pico/stdlib.h&#34;&#xA;&#xA;int main() {&#xA;    setup_default_uart();&#xA;    printf(&#34;Hello, world!\n&#34;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And add the following to your &lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;add_executable(hello_world&#xA;    hello_world.c&#xA;)&#xA;&#xA;# Add pico_stdlib library which aggregates commonly used features&#xA;target_link_libraries(hello_world pico_stdlib)&#xA;&#xA;# create map/bin/hex/uf2 file in addition to ELF.&#xA;pico_add_extra_outputs(hello_world)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note this example uses the default UART for &lt;em&gt;stdout&lt;/em&gt;; if you want to use the default USB see the &lt;a href=&#34;https://github.com/raspberrypi/pico-examples/tree/master/hello_world/usb&#34;&gt;hello-usb&lt;/a&gt; example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup a CMake build directory. For example, if not using an IDE:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your target from the build directory you created.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make hello_world&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You now have &lt;code&gt;hello_world.elf&lt;/code&gt; to load via a debugger, or &lt;code&gt;hello_world.uf2&lt;/code&gt; that can be installed and run on your Raspberry Pi Pico via drag and drop.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>yshui/picom</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/yshui/picom</id>
    <link href="https://github.com/yshui/picom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight compositor for X11&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;picom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;picom&lt;/strong&gt; is a compositor for X, and a &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/History.md&#34;&gt;fork of Compton&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a development branch, bugs to be expected&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can leave your feedback or thoughts in the &lt;a href=&#34;https://github.com/yshui/picom/discussions&#34;&gt;discussion tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Call for testers&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;--experimental-backends&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This flag enables the refactored/partially rewritten backends.&lt;/p&gt; &#xA;&lt;p&gt;Currently, new backends feature better vsync with the xrender backend and improved input lag with the glx backend (for non-NVIDIA users). The performance should be on par with the old backends.&lt;/p&gt; &#xA;&lt;p&gt;New backend features will only be implemented on the new backends from now on, and the old backends will eventually be phased out after the new backends stabilize.&lt;/p&gt; &#xA;&lt;p&gt;To test the new backends, add the &lt;code&gt;--experimental-backends&lt;/code&gt; flag to the command you use to run picom. This flag is not available from the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;To report issues with the new backends, please state explicitly you are using the new backends in your report.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/yshui/picom/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you already have all the usual building tools installed (e.g. gcc, python, meson, ninja, etc.), you still need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libx11&lt;/li&gt; &#xA; &lt;li&gt;libx11-xcb&lt;/li&gt; &#xA; &lt;li&gt;libXext&lt;/li&gt; &#xA; &lt;li&gt;xproto&lt;/li&gt; &#xA; &lt;li&gt;xcb&lt;/li&gt; &#xA; &lt;li&gt;xcb-damage&lt;/li&gt; &#xA; &lt;li&gt;xcb-xfixes&lt;/li&gt; &#xA; &lt;li&gt;xcb-shape&lt;/li&gt; &#xA; &lt;li&gt;xcb-renderutil&lt;/li&gt; &#xA; &lt;li&gt;xcb-render&lt;/li&gt; &#xA; &lt;li&gt;xcb-randr&lt;/li&gt; &#xA; &lt;li&gt;xcb-composite&lt;/li&gt; &#xA; &lt;li&gt;xcb-image&lt;/li&gt; &#xA; &lt;li&gt;xcb-present&lt;/li&gt; &#xA; &lt;li&gt;xcb-xinerama&lt;/li&gt; &#xA; &lt;li&gt;xcb-glx&lt;/li&gt; &#xA; &lt;li&gt;pixman&lt;/li&gt; &#xA; &lt;li&gt;libdbus (optional, disable with the &lt;code&gt;-Ddbus=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libconfig (optional, disable with the &lt;code&gt;-Dconfig_file=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libGL (optional, disable with the &lt;code&gt;-Dopengl=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libpcre (optional, disable with the &lt;code&gt;-Dregex=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libev&lt;/li&gt; &#xA; &lt;li&gt;uthash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Debian based distributions (e.g. Ubuntu), the needed packages are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libxext-dev libxcb1-dev libxcb-damage0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-xinerama0-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl1-mesa-dev libpcre2-dev libpcre3-dev libevdev-dev uthash-dev libev-dev libx11-xcb-dev meson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, the needed packages are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dbus-devel gcc git libconfig-devel libdrm-devel libev-devel libX11-devel libX11-xcb libXext-devel libxcb-devel mesa-libGL-devel meson pcre-devel pixman-devel uthash-devel xcb-util-image-devel xcb-util-renderutil-devel xorg-x11-proto-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the documents, you need &lt;code&gt;asciidoc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive&#xA;$ meson --buildtype=release . build&#xA;$ ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Built binary can be found in &lt;code&gt;build/src&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have libraries and/or headers installed at non-default location (e.g. under &lt;code&gt;/usr/local/&lt;/code&gt;), you might need to tell meson about them, since meson doesn&#39;t look for dependencies there by default.&lt;/p&gt; &#xA;&lt;p&gt;You can do that by setting the &lt;code&gt;CPPFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; environment variables when running &lt;code&gt;meson&lt;/code&gt;. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LDFLAGS=&#34;-L/path/to/libraries&#34; CPPFLAGS=&#34;-I/path/to/headers&#34; meson --buildtype=release . build&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example, on FreeBSD, you might have to run meson with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LDFLAGS=&#34;-L/usr/local/lib&#34; CPPFLAGS=&#34;-I/usr/local/include&#34; meson --buildtype=release . build&#xA;$ ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ninja -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default install prefix is &lt;code&gt;/usr/local&lt;/code&gt;, you can change it with &lt;code&gt;meson configure -Dprefix=&amp;lt;path&amp;gt; build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;You can look at the &lt;a href=&#34;https://github.com/yshui/picom/projects&#34;&gt;Projects&lt;/a&gt; page, and see if there is anything that interests you. Or you can take a look at the &lt;a href=&#34;https://github.com/yshui/picom/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Non-code&lt;/h3&gt; &#xA;&lt;p&gt;Even if you don&#39;t want to contribute code, you can still contribute by compiling and running this branch, and report any issue you can find.&lt;/p&gt; &#xA;&lt;p&gt;Contributions to the documents and wiki will also be appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/CONTRIBUTORS&#34;&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The README for the &lt;a href=&#34;https://github.com/chjj/compton/&#34;&gt;original Compton project&lt;/a&gt; can be found &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/History.md#Compton&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;picom is free software, made available under the &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/LICENSES/MIT&#34;&gt;MIT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/LICENSES/MPL-2.0&#34;&gt;MPL-2.0&lt;/a&gt; software licenses. See the individual source files for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>taosdata/TDengine</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/taosdata/TDengine</id>
    <link href="https://github.com/taosdata/TDengine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source time-series database with high-performance, scalability and SQL support. It can be widely used in IoT, Connected Vehicles, DevOps, Energy, Finance and other fields.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cloud.drone.io/taosdata/TDengine&#34;&gt;&lt;img src=&#34;https://cloud.drone.io/api/badges/taosdata/TDengine/status.svg?ref=refs/heads/master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/sangshuduo/tdengine-2n8ge/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/kf3pwh2or5afsgl9/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/taosdata/TDengine?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/taosdata/TDengine/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4201&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4201/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/tdengine&#34;&gt;&lt;img src=&#34;https://snapcraft.io//tdengine/badge.svg?sanitize=true&#34; alt=&#34;tdengine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.taosdata.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/taosdata/TDengine/develop/TDenginelogo.png&#34; alt=&#34;TDengine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/develop/README-CN.md&#34;&gt;简体中文&lt;/a&gt; We are hiring, check &lt;a href=&#34;https://www.taosdata.com/en/careers/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is TDengine？&lt;/h1&gt; &#xA;&lt;p&gt;TDengine is a high-performance, scalable time-series database with SQL support. Its code including cluster feature is open source under &lt;a href=&#34;http://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;GNU AGPL v3.0&lt;/a&gt;. Besides the database, it provides caching, stream processing, data subscription and other functionalities to reduce the complexity and cost of development and operation. TDengine differentiates itself from other TSDBs with the following advantages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: TDengine outperforms other time series databases in data ingestion and querying while significantly reducing storage cost and compute costs, with an innovatively designed and purpose-built storage engine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: TDengine provides out-of-box scalability and high-availability through its native distributed design. Nodes can be added through simple configuration to achieve greater data processing power. In addition, this feature is open source.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQL Support&lt;/strong&gt;: TDengine uses SQL as the query language, thereby reducing learning and migration costs, while adding SQL extensions to handle time-series data better, and supporting convenient and flexible schemaless data ingestion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;All in One&lt;/strong&gt;: TDengine has built-in caching, stream processing and data subscription functions, it is no longer necessary to integrate Kafka/Redis/HBase/Spark or other software in some scenarios. It makes the system architecture much simpler and easy to maintain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Integration&lt;/strong&gt;: Without a single line of code, TDengine provide seamless integration with third-party tools such as Telegraf, Grafana, EMQX, Prometheus, StatsD, collectd, etc. More will be integrated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero Management&lt;/strong&gt;: Installation and cluster setup can be done in seconds. Data partitioning and sharding are executed automatically. TDengine’s running status can be monitored via Grafana or other DevOps tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero Learning Cost&lt;/strong&gt;: With SQL as the query language, support for ubiquitous tools like Python, Java, C/C++, Go, Rust, Node.js connectors, there is zero learning cost.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interactive Console&lt;/strong&gt;: TDengine provides convenient console access to the database to run ad hoc queries, maintain the database, or manage the cluster without any programming.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TDengine can be widely applied to Internet of Things (IoT), Connected Vehicles, Industrial IoT, DevOps, energy, finance and many other scenarios.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For user manual, system design and architecture, engineering blogs, refer to &lt;a href=&#34;https://www.taosdata.com/en/documentation/&#34;&gt;TDengine Documentation&lt;/a&gt;(中文版请点击&lt;a href=&#34;https://www.taosdata.com/cn/documentation20/&#34;&gt;这里&lt;/a&gt;) for details. The documentation from our website can also be downloaded locally from &lt;em&gt;documentation/tdenginedocs-en&lt;/em&gt; or &lt;em&gt;documentation/tdenginedocs-cn&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;At the moment, TDengine server only supports running on Linux systems. You can choose to &lt;a href=&#34;https://www.taosdata.com/en/getting-started/#Install-from-Package&#34;&gt;install from packages&lt;/a&gt; or build it from the source code. This quick guide is for installation from the source only.&lt;/p&gt; &#xA;&lt;p&gt;To build TDengine, use &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.0.2 or higher versions in the project directory.&lt;/p&gt; &#xA;&lt;h2&gt;Install build dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 16.04 and above or Debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y gcc cmake build-essential git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu 14.04&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y gcc cmake3 build-essential git binutils-2.26&#xA;export PATH=/usr/lib/binutils-2.26/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile and package the JDBC driver source code, you should have a Java jdk-8 or higher and Apache Maven 2.7 or higher installed.&lt;/p&gt; &#xA;&lt;p&gt;To install openjdk-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y openjdk-8-jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools&lt;/h4&gt; &#xA;&lt;p&gt;We provide a few useful tools such as taosBenchmark (was named taosdemo) and taosdump. They were part of TDengine. From TDengine 2.4.0.0, taosBenchmark and taosdump were not released together with TDengine. By default, TDengine compiling does not include taosTools. You can use &#39;cmake .. -DBUILD_TOOLS=true&#39; to make them be compiled with TDengine.&lt;/p&gt; &#xA;&lt;p&gt;To build the &lt;a href=&#34;https://github.com/taosdata/taos-tools&#34;&gt;taosTools&lt;/a&gt; on Ubuntu/Debian, the following packages need to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential libjansson-dev libsnappy-dev liblzma-dev libz-dev pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 7&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install epel-release&#xA;sudo yum update&#xA;sudo yum install -y gcc gcc-c++ make cmake3 git&#xA;sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install openjdk-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install -y java-1.8.0-openjdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install -y maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 8 &amp;amp; Fedora&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y gcc gcc-c++ make cmake epel-release git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install openjdk-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y java-1.8.0-openjdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools on CentOS&lt;/h4&gt; &#xA;&lt;p&gt;To build the &lt;a href=&#34;https://github.com/taosdata/taos-tools&#34;&gt;taosTools&lt;/a&gt; on CentOS, the following packages need to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install zlib-devel xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libstdc++-static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Since snappy lacks pkg-config support (refer to &lt;a href=&#34;https://github.com/google/snappy/pull/86&#34;&gt;link&lt;/a&gt;), it lead a cmake prompt libsnappy not found. But snappy will works well.&lt;/p&gt; &#xA;&lt;h3&gt;Setup golang environment&lt;/h3&gt; &#xA;&lt;p&gt;TDengine includes few components developed by Go language. Please refer to golang.org official documentation for golang environment setup.&lt;/p&gt; &#xA;&lt;p&gt;Please use version 1.14+. For the user in China, we recommend using a proxy to accelerate package downloading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on&#xA;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the source codes&lt;/h2&gt; &#xA;&lt;p&gt;First of all, you may clone the source codes from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/taosdata/TDengine.git&#xA;cd TDengine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The connectors for go &amp;amp; Grafana and some tools have been moved to separated repositories, so you should run this command in the TDengine directory to install them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify the file ~/.gitconfig to use ssh protocol instead of https for better download speed. You need to upload ssh public key to GitHub first. Please refer to GitHub official documentation for detail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[url &#34;git@github.com:&#34;]&#xA;    insteadOf = https://github.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build TDengine&lt;/h2&gt; &#xA;&lt;h3&gt;On Linux platform&lt;/h3&gt; &#xA;&lt;p&gt;You can run the bash script &lt;code&gt;build.sh&lt;/code&gt; to build both TDengine and taosTools including taosBenchmark and taosdump as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It equals to execute following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;mkdir debug&#xA;cd debug&#xA;cmake .. -DBUILD_TOOLS=true&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note TDengine 2.3.x.0 and later use a component named &#39;taosAdapter&#39; to play http daemon role by default instead of the http daemon embedded in the early version of TDengine. The taosAdapter is programmed by go language. If you pull TDengine source code to the latest from an existing codebase, please execute &#39;git submodule update --init --recursive&#39; to pull taosAdapter source code. Please install go language version 1.14 or above for compiling taosAdapter. If you meet difficulties regarding &#39;go mod&#39;, especially you are from China, you can use a proxy to solve the problem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on&#xA;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The embedded http daemon still be built from TDengine source code by default. Or you can use the following command to choose to build taosAdapter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DBUILD_HTTP=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Jemalloc as memory allocator instead of glibc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install autoconf&#xA;cmake .. -DJEMALLOC_ENABLED=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TDengine build script can detect the host machine&#39;s architecture on X86-64, X86, arm64, arm32 and mips64 platform. You can also specify CPUTYPE option like aarch64 or aarch32 too if the detection result is not correct:&lt;/p&gt; &#xA;&lt;p&gt;aarch64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=aarch64 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;aarch32:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=aarch32 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mips64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=mips64 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows platform&lt;/h3&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2013, please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;amd64&#34; for 64 bits Windows or specify &#34;x86&#34; is for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat&#34; &amp;lt; amd64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2019 or 2017:&lt;/p&gt; &#xA;&lt;p&gt;please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;x64&#34; for 64 bits Windows or specify &#34;x86&#34; is for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;c:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat&#34; &amp;lt; x64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can simply open a command window by clicking Windows Start -&amp;gt; &#34;Visual Studio &amp;lt; 2019 | 2017 &amp;gt;&#34; folder -&amp;gt; &#34;x64 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; or &#34;x86 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; depends what architecture your Windows is, then execute commands as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On macOS platform&lt;/h3&gt; &#xA;&lt;p&gt;Please install XCode command line tools and cmake. Verified with XCode 11.4+ on Catalina and Big Sur.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;cmake .. &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;h2&gt;On Linux platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can find more information about directories installed on the system in the &lt;a href=&#34;https://www.taosdata.com/en/documentation/administrator/#Directory-and-Files&#34;&gt;directory and files&lt;/a&gt; section. Since version 2.0, installing from source code will also configure service management for TDengine. Users can also choose to &lt;a href=&#34;https://www.taosdata.com/en/getting-started/#Install-from-Package&#34;&gt;install from packages&lt;/a&gt; for it.&lt;/p&gt; &#xA;&lt;p&gt;To start the service after installation, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl start taosd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then users can use the &lt;a href=&#34;https://www.taosdata.com/en/getting-started/#TDengine-Shell&#34;&gt;TDengine shell&lt;/a&gt; to connect the TDengine server. In a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TDengine shell connects the server successfully, welcome messages and version info are printed. Otherwise, an error message is shown.&lt;/p&gt; &#xA;&lt;h3&gt;Install TDengine by apt-get&lt;/h3&gt; &#xA;&lt;p&gt;If you use Debian or Ubuntu system, you can use &#39;apt-get&#39; command to install TDengine from official repository. Please use following commands to setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -qO - http://repos.taosdata.com/tdengine.key | sudo apt-key add -&#xA;echo &#34;deb [arch=amd64] http://repos.taosdata.com/tdengine-stable stable main&#34; | sudo tee /etc/apt/sources.list.d/tdengine-stable.list&#xA;[Optional] echo &#34;deb [arch=amd64] http://repos.taosdata.com/tdengine-beta beta main&#34; | sudo tee /etc/apt/sources.list.d/tdengine-beta.list&#xA;sudo apt-get update&#xA;apt-cache policy tdengine&#xA;sudo apt-get install tdengine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Windows platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;nmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On macOS platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the service after installation, config &lt;code&gt;.plist&lt;/code&gt; file first, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp ../packaging/macOS/com.taosdata.tdengine.plist /Library/LaunchDaemons&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the service, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl load /Library/LaunchDaemons/com.taosdata.tdengine.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To stop the service, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl unload /Library/LaunchDaemons/com.taosdata.tdengine.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Run&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to run TDengine as a service, you can run it in current shell. For example, to quickly start a TDengine server after building, run the command below in terminal: (We take Linux as an example, command on Windows will be &lt;code&gt;taosd.exe&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taosd -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, use the TDengine shell to connect the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taos -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;option &#34;-c test/cfg&#34; specifies the system configuration file directory.&lt;/p&gt; &#xA;&lt;h1&gt;Try TDengine&lt;/h1&gt; &#xA;&lt;p&gt;It is easy to run SQL commands from TDengine shell which is the same as other SQL databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE demo;&#xA;USE demo;&#xA;CREATE TABLE t (ts TIMESTAMP, speed INT);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 00:00:00&#39;, 10);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 01:00:00&#39;, 20);&#xA;SELECT * FROM t;&#xA;          ts          |   speed   |&#xA;===================================&#xA; 19-07-15 00:00:00.000|         10|&#xA; 19-07-15 01:00:00.000|         20|&#xA;Query OK, 2 row(s) in set (0.001700s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Developing with TDengine&lt;/h1&gt; &#xA;&lt;h2&gt;Official Connectors&lt;/h2&gt; &#xA;&lt;p&gt;TDengine provides abundant developing tools for users to develop on TDengine. Follow the links below to find your desired connectors and relevant documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector/java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#c-cpp&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#restful&#34;&gt;RESTful API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#nodejs&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector/rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third Party Connectors&lt;/h2&gt; &#xA;&lt;p&gt;The TDengine community has also kindly built some of their own connectors! Follow the links below to find the source code for them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/songtianyi/tdengine-rust-bindings/tree/master/examples&#34;&gt;Rust Bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maikebing/Maikebing.EntityFrameworkCore.Taos&#34;&gt;.Net Core Connector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taosdata/TDengine/tree/develop/tests/examples/lua&#34;&gt;Lua Connector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to run the test cases and how to add a new test case&lt;/h1&gt; &#xA;&lt;p&gt;TDengine&#39;s test framework and all test cases are fully open source. Please refer to &lt;a href=&#34;https://github.com/taosdata/TDengine/raw/develop/tests/How-To-Run-Test-And-How-To-Add-New-Test-Case.md&#34;&gt;this document&lt;/a&gt; for how to run test and develop new test case.&lt;/p&gt; &#xA;&lt;h1&gt;TDengine Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support event-driven stream computing&lt;/li&gt; &#xA; &lt;li&gt;Support user defined functions&lt;/li&gt; &#xA; &lt;li&gt;Support MQTT connection&lt;/li&gt; &#xA; &lt;li&gt;Support OPC connection&lt;/li&gt; &#xA; &lt;li&gt;Support Hadoop, Spark connections&lt;/li&gt; &#xA; &lt;li&gt;Support Tableau and other BI tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute to TDengine&lt;/h1&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/develop/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; to contribute to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Join TDengine WeChat Group&lt;/h1&gt; &#xA;&lt;p&gt;Add WeChat “tdengine” to join the group，you can communicate with other users.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/taosdata/TDengine/issues/2432&#34;&gt;User List&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;If you are using TDengine and feel it helps or you&#39;d like to do some contributions, please add your company to &lt;a href=&#34;https://github.com/taosdata/TDengine/issues/2432&#34;&gt;user list&lt;/a&gt; and let us know your needs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vedderb/bldc</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/vedderb/bldc</id>
    <link href="https://github.com/vedderb/bldc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The VESC motor control firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VESC firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/vedderb/bldc&#34;&gt;&lt;img src=&#34;https://travis-ci.com/vedderb/bldc.svg?branch=master&#34; alt=&#34;Travis CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/vedderb/bldc?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=vedderb/bldc&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/75e90ffbd46841a3a7be2a9f7a94c242&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open source motor controller firmware.&lt;/p&gt; &#xA;&lt;p&gt;This is the source code for the VESC DC/BLDC/FOC controller. Read more at &lt;a href=&#34;https://vesc-project.com/&#34;&gt;https://vesc-project.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported boards&lt;/h2&gt; &#xA;&lt;p&gt;All of them!&lt;/p&gt; &#xA;&lt;p&gt;Check the supported boards by typing &lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Firmware]&#xA;     fw   - Build firmware for default target&#xA;                            supported boards are: 100_250 100_250_no_limits 100_500...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also many other options that can be changed in &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/conf_general.h&#34;&gt;conf_general.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tools: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional Linux requirements: &lt;code&gt;libgl-dev&lt;/code&gt; and &lt;code&gt;libxcb-xinerama0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helpful Ubuntu commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git build-essential libgl-dev libxcb-xinerama0 wget git-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helpful macOS tools:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install stlink&#xA;brew install openocd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chocolately: &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;https://chocolatey.org/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git: &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;https://git-scm.com/download/win&lt;/a&gt;. Make sure to click any boxes to add Git to your Environment (aka PATH)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install Dev environment and build&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Open up a terminal&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up a Windows Powershell terminal (Resist the urge to run Powershell as administrator, that will break things)&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;choco install make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On all platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git checkout origin/master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make arm_sdk_install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; &amp;lt;-- Pick out the name of your target device from the supported boards list. For instance, I have a Trampa &lt;strong&gt;VESC 100/250&lt;/strong&gt;, so my target is &lt;code&gt;100_250&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make 100_250&lt;/code&gt; &amp;lt;-- This will build the &lt;strong&gt;VESC 100/250&lt;/strong&gt; firmware and place it into the &lt;code&gt;bldc/builds/100_250/&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux Optional - Add udev rules to use the stlink v2 programmer without being root&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget vedder.se/Temp/49-stlinkv2.rules&#xA;sudo mv 49-stlinkv2.rules /etc/udev/rules.d/&#xA;sudo udevadm trigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;On macOS/Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python3&lt;/code&gt;, and &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;On Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;. Make sure to click the box to add Python3 to your Environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;All platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install aqtinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make qt_install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upload to VESC&lt;/h2&gt; &#xA;&lt;h3&gt;Method 1 - Flash it using an STLink SWD debugger&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build and flash the &lt;a href=&#34;https://github.com/vedderb/bldc-bootloader&#34;&gt;bootloader&lt;/a&gt; first&lt;/li&gt; &#xA; &lt;li&gt;Then &lt;code&gt;_flash&lt;/code&gt; to the target of your choice. So for instance, for the VESC 100/250:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make 100_250_flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2 - Upload Firmware via VESC tool through USB&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone and build the firmware in &lt;strong&gt;.bin&lt;/strong&gt; format as in the above Build instructions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In VESC tool&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Connect to the VESC&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the Firmware tab on the left side menu&lt;/li&gt; &#xA; &lt;li&gt;Click on Custom file tab&lt;/li&gt; &#xA; &lt;li&gt;Click on the folder icon to select the built firmware in .bin format (e.g. &lt;code&gt;build/100_250/100_250.bin&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;[ Reminder : It is normal to see VESC disconnects during the firmware upload process ]&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : DO NOT DISCONNECT POWER/USB to VESC during the upload process, or you will risk bricking your VESC ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : ONLY DISCONNECT your VESC 10s after the upload loading bar completed and &#34;FW Upload DONE&#34; ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Press the upload firmware button (downward arrow) on the bottom right to start upload the selected firmware.&lt;/li&gt; &#xA; &lt;li&gt;Wait for &lt;strong&gt;10s&lt;/strong&gt; after the loading bar completed (Warning: unplug sooner will risk bricking your VESC)&lt;/li&gt; &#xA; &lt;li&gt;The VESC will disconnect itself after new firmware is uploaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;In case you bricked your VESC&lt;/h2&gt; &#xA;&lt;p&gt;you will need to upload a new working firmware to the VESC.&lt;br&gt; However, to upload a firmware to a bricked VESC, you have to use a SWD Debugger.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://vesc-project.com/forum&#34;&gt;forums&lt;/a&gt; to get involved and improve this project. Join the &lt;a href=&#34;https://discord.gg/JgvV5NwYts&#34;&gt;Discord&lt;/a&gt; for real-time support and chat&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The software is released under the GNU General Public License version 3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openwall/john</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/openwall/john</id>
    <link href="https://github.com/openwall/john" rel="alternate"></link>
    <summary type="html">&lt;p&gt;John the Ripper jumbo - advanced offline password cracker, which supports hundreds of hash and cipher types, and runs on many operating systems, CPUs, GPUs, and even some FPGAs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/openwall/john/tree/bleeding-jumbo&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/openwall/john/tree/bleeding-jumbo.svg?style=shield&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openwall/john-packages/releases/tag/jumbo-dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Download-Windows%20Build-blue.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openwall/john/raw/bleeding-jumbo/doc/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v2%2B-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=john%20the%20ripper&amp;amp;type=&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/openwall/john/goto.svg?label=GitHub%20Hits&#34; alt=&#34;Search hit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;John the Ripper&lt;/h1&gt; &#xA;&lt;p&gt;This is the community-enhanced, &#34;jumbo&#34; version of John the Ripper. It has a lot of code, documentation, and data contributed by jumbo developers and the user community. It is easy for new code to be added to jumbo, and the quality requirements are low, although lately we&#39;ve started subjecting all contributions to quite some automated testing. This means that you get a lot of functionality that is not necessarily &#34;mature&#34;, which in turn means that bugs in this code are to be expected.&lt;/p&gt; &#xA;&lt;p&gt;John the Ripper homepage is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openwall.com/john/&#34;&gt;https://www.openwall.com/john/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have any comments on this release or on JtR in general, please join the john-users mailing list and post in there:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openwall.com/lists/john-users/&#34;&gt;https://www.openwall.com/lists/john-users/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For contributions to John the Ripper jumbo, please use pull requests on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openwall/john/raw/bleeding-jumbo/CONTRIBUTING.md&#34;&gt;https://github.com/openwall/john/blob/bleeding-jumbo/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Included below is basic John the Ripper core documentation.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;John the Ripper password cracker.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;John the Ripper is a fast password cracker, currently available for many flavors of Unix, macOS, Windows, DOS, BeOS, and OpenVMS (the latter requires a contributed patch). Its primary purpose is to detect weak Unix passwords. Besides several crypt(3) password hash types most commonly found on various Unix flavors, supported out of the box are Kerberos/AFS and Windows LM hashes, as well as DES-based tripcodes, plus hundreds of additional hashes and ciphers in &#34;-jumbo&#34; versions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;How to install.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See INSTALL for information on installing John on your system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;How to use.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run John, you need to supply it with some password files and optionally specify a cracking mode, like this, using the default order of modes and assuming that &#34;passwd&#34; is a copy of your password file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, to restrict it to the wordlist mode only, but permitting the use of word mangling rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john --wordlist=password.lst --rules passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cracked passwords will be printed to the terminal and saved in the file called $JOHN/john.pot (in the documentation and in the configuration file for John, &#34;$JOHN&#34; refers to John&#39;s &#34;home directory&#34;; which directory it really is depends on how you installed John). The $JOHN/john.pot file is also used to not load password hashes that you already cracked when you run John the next time.&lt;/p&gt; &#xA;&lt;p&gt;To retrieve the cracked passwords, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john --show passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While cracking, you can press any key for status, or &#39;q&#39; or Ctrl-C to abort the session saving its state to a file ($JOHN/john.rec by default). If you press Ctrl-C for a second time before John had a chance to complete handling of your first Ctrl-C, John will abort immediately without saving. By default, the state is also saved every 10 minutes to permit for recovery in case of a crash.&lt;/p&gt; &#xA;&lt;p&gt;To continue an interrupted session, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john --restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are just the most essential things you can do with John. For a complete list of command line options and for more complicated usage examples you should refer to OPTIONS and EXAMPLES, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &#34;binary&#34; (pre-compiled) distributions of John may include alternate executables instead of just &#34;john&#34;. You may need to choose the executable that fits your system best, e.g. &#34;john-omp&#34; to take advantage of multiple CPUs and/or CPU cores.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Features.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;John the Ripper is designed to be both feature-rich and fast. It combines several cracking modes in one program and is fully configurable for your particular needs (you can even define a custom cracking mode using the built-in compiler supporting a subset of C). Also, John is available for several different platforms which enables you to use the same cracker everywhere (you can even continue a cracking session which you started on another platform).&lt;/p&gt; &#xA;&lt;p&gt;Out of the box, John supports (and autodetects) the following Unix crypt(3) hash types: traditional DES-based, &#34;bigcrypt&#34;, BSDI extended DES-based, FreeBSD MD5-based (also used on Linux and in Cisco IOS), and OpenBSD Blowfish-based (now also used on some Linux distributions and supported by recent versions of Solaris). Also supported out of the box are Kerberos/AFS and Windows LM (DES-based) hashes, as well as DES-based tripcodes.&lt;/p&gt; &#xA;&lt;p&gt;When running on Linux distributions with glibc 2.7+, John 1.7.6+ additionally supports (and autodetects) SHA-crypt hashes (which are actually used by recent versions of Fedora and Ubuntu), with optional OpenMP parallelization (requires GCC 4.2+, needs to be explicitly enabled at compile-time by uncommenting the proper OMPFLAGS line near the beginning of the Makefile).&lt;/p&gt; &#xA;&lt;p&gt;Similarly, when running on recent versions of Solaris, John 1.7.6+ supports and autodetects SHA-crypt and SunMD5 hashes, also with optional OpenMP parallelization (requires GCC 4.2+ or recent Sun Studio, needs to be explicitly enabled at compile-time by uncommenting the proper OMPFLAGS line near the beginning of the Makefile and at runtime by setting the OMP_NUM_THREADS environment variable to the desired number of threads).&lt;/p&gt; &#xA;&lt;p&gt;&#34;-jumbo&#34; versions add support for hundreds of additional hash and cipher types, including fast built-in implementations of SHA-crypt and SunMD5, Windows NTLM (MD4-based) password hashes, various macOS and Mac OS X user password hashes, fast hashes such as raw MD5, SHA-1, SHA-256, and SHA-512 (which many &#34;web applications&#34; historically misuse for passwords), various other &#34;web application&#34; password hashes, various SQL and LDAP server password hashes, and lots of other hash types, as well as many non-hashes such as SSH private keys, S/Key skeykeys files, Kerberos TGTs, encrypted filesystems such as macOS .dmg files and &#34;sparse bundles&#34;, encrypted archives such as ZIP (classic PKZIP and WinZip/AES), RAR, and 7z, encrypted document files such as PDF and Microsoft Office&#39;s - and these are just some examples. To load some of these larger files for cracking, a corresponding bundled *2john program should be used first, and then its output fed into JtR -jumbo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Graphical User Interface (GUI).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an official GUI for John the Ripper: Johnny.&lt;/p&gt; &#xA;&lt;p&gt;Despite the fact that Johnny is oriented onto JtR core, all basic functionality is supposed to work in all versions, including jumbo.&lt;/p&gt; &#xA;&lt;p&gt;Johnny is a separate program, therefore you need to have John the Ripper installed in order to use it.&lt;/p&gt; &#xA;&lt;p&gt;More information about Johnny and its releases is on the wiki:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openwall.info/wiki/john/johnny&#34;&gt;https://openwall.info/wiki/john/johnny&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Documentation.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest of documentation is located in separate files, listed here in the recommended order of reading:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;INSTALL - installation instructions&lt;/li&gt; &#xA; &lt;li&gt;OPTIONS - command line options and additional utilities&lt;/li&gt; &#xA; &lt;li&gt;MODES - cracking modes: what they are&lt;/li&gt; &#xA; &lt;li&gt;CONFIG (*) - how to customize&lt;/li&gt; &#xA; &lt;li&gt;RULES (*) - wordlist rules syntax&lt;/li&gt; &#xA; &lt;li&gt;EXTERNAL (*) - defining an external mode&lt;/li&gt; &#xA; &lt;li&gt;EXAMPLES - usage examples - strongly recommended&lt;/li&gt; &#xA; &lt;li&gt;FAQ - guess&lt;/li&gt; &#xA; &lt;li&gt;CHANGES (*) - history of changes&lt;/li&gt; &#xA; &lt;li&gt;CONTACT (*) - how to contact the author or otherwise obtain support&lt;/li&gt; &#xA; &lt;li&gt;CREDITS (*) - credits&lt;/li&gt; &#xA; &lt;li&gt;LICENSE - copyrights and licensing terms&lt;/li&gt; &#xA; &lt;li&gt;COPYING - GNU GPL version 2, as referenced by LICENSE above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*) most users can safely skip these.&lt;/p&gt; &#xA;&lt;p&gt;There are a lot of additional documentation files in jumbo&#39;s &#34;doc&#34; directory, which you&#39;ll also want to explore.&lt;/p&gt; &#xA;&lt;p&gt;Happy reading!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Klipper3d/klipper</title>
    <updated>2022-05-31T01:34:49Z</updated>
    <id>tag:github.com,2022-05-31:/Klipper3d/klipper</id>
    <link href="https://github.com/Klipper3d/klipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&#34; alt=&#34;Klipper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Klipper is a 3d-Printer firmware. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&#34;https://www.klipper3d.org/Features.html&#34;&gt;features document&lt;/a&gt; for more information on why you should use Klipper.&lt;/p&gt; &#xA;&lt;p&gt;To begin using Klipper start by &lt;a href=&#34;https://www.klipper3d.org/Installation.html&#34;&gt;installing&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Klipper is Free Software. See the &lt;a href=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&#34;&gt;license&lt;/a&gt; or read the &lt;a href=&#34;https://www.klipper3d.org/Overview.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>