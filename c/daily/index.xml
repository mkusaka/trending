<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:31:48Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linux-can/can-utils</title>
    <updated>2023-06-24T01:31:48Z</updated>
    <id>tag:github.com,2023-06-24:/linux-can/can-utils</id>
    <link href="https://github.com/linux-can/can-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux-CAN / SocketCAN user space applications&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/linux-can/can-logos/raw/master/png/SocketCAN-logo-60dpi.png&#34; alt=&#34;SocketCAN logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;SocketCAN userspace utilities and tools&lt;/h3&gt; &#xA;&lt;p&gt;This repository contains some userspace utilities for Linux CAN subsystem (aka SocketCAN):&lt;/p&gt; &#xA;&lt;h4&gt;Basic tools to display, record, generate and replay CAN traffic&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;candump : display, filter and log CAN data to files&lt;/li&gt; &#xA; &lt;li&gt;canplayer : replay CAN logfiles&lt;/li&gt; &#xA; &lt;li&gt;cansend : send a single frame&lt;/li&gt; &#xA; &lt;li&gt;cangen : generate (random) CAN traffic&lt;/li&gt; &#xA; &lt;li&gt;cansequence : send and check sequence of CAN frames with incrementing payload&lt;/li&gt; &#xA; &lt;li&gt;cansniffer : display CAN data content differences&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CAN access via IP sockets&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;canlogserver : log CAN frames and serves them&lt;/li&gt; &#xA; &lt;li&gt;bcmserver : interactive BCM configuration (remote/local)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linux-can/socketcand&#34;&gt;socketcand&lt;/a&gt; : use RAW/BCM/ISO-TP sockets via TCP/IP sockets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mguentner/cannelloni&#34;&gt;cannelloni&lt;/a&gt; : UDP/SCTP based SocketCAN tunnel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CAN in-kernel gateway configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cangw : CAN gateway userspace tool for netlink configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CAN bus measurement and testing&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;canbusload : calculate and display the CAN busload&lt;/li&gt; &#xA; &lt;li&gt;can-calc-bit-timing : userspace version of in-kernel bitrate calculation&lt;/li&gt; &#xA; &lt;li&gt;canfdtest : Full-duplex test program (DUT and host part)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ISO-TP tools &lt;a href=&#34;https://github.com/hartkopp/can-isotp&#34;&gt;ISO15765-2:2016 for Linux&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isotpsend : send a single ISO-TP PDU&lt;/li&gt; &#xA; &lt;li&gt;isotprecv : receive ISO-TP PDU(s)&lt;/li&gt; &#xA; &lt;li&gt;isotpsniffer : &#39;wiretap&#39; ISO-TP PDU(s)&lt;/li&gt; &#xA; &lt;li&gt;isotpdump : &#39;wiretap&#39; and interpret CAN messages (CAN_RAW)&lt;/li&gt; &#xA; &lt;li&gt;isotpserver : IP server for simple TCP/IP &amp;lt;-&amp;gt; ISO 15765-2 bridging (ASCII HEX)&lt;/li&gt; &#xA; &lt;li&gt;isotpperf : ISO15765-2 protocol performance visualisation&lt;/li&gt; &#xA; &lt;li&gt;isotptun : create a bi-directional IP tunnel on CAN via ISO-TP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;J1939/ISOBus tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;j1939acd : address claim daemon&lt;/li&gt; &#xA; &lt;li&gt;j1939cat : take a file and send and receive it over CAN&lt;/li&gt; &#xA; &lt;li&gt;j1939spy : spy on J1939 messages using SOC_J1939&lt;/li&gt; &#xA; &lt;li&gt;j1939sr : send/recv from stdin or to stdout&lt;/li&gt; &#xA; &lt;li&gt;testj1939 : send/receive test packet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Follow the link to see examples on how this tools can be used: &lt;a href=&#34;https://github.com/linux-can/can-utils/raw/master/can-j1939-kickstart.md&#34;&gt;Kickstart guide to can-j1939 on linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Log file converters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;asc2log : convert ASC logfile to compact CAN frame logfile&lt;/li&gt; &#xA; &lt;li&gt;log2asc : convert compact CAN frame logfile to ASC logfile&lt;/li&gt; &#xA; &lt;li&gt;log2long : convert compact CAN frame representation into user readable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Serial Line Discipline configuration (for slcan driver)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;slcan_attach : userspace tool for serial line CAN interface configuration&lt;/li&gt; &#xA; &lt;li&gt;slcand : daemon for serial line CAN interface configuration&lt;/li&gt; &#xA; &lt;li&gt;slcanpty : creates a pty for applications using the slcan ASCII protocol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CMake Project Generator&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Place your build folder anywhere, passing CMake the path. Relative or absolute.&lt;/li&gt; &#xA; &lt;li&gt;Some examples using a build folder under the source tree root:&lt;/li&gt; &#xA; &lt;li&gt;Android : &lt;code&gt;cmake -DCMAKE_TOOLCHAIN_FILE=~/Android/Sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-21 -DANDROID_ABI=armeabi-v7a .. &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android Studio : Copy repo under your project&#39;s &lt;code&gt;app&lt;/code&gt; folder, add &lt;code&gt;add_subdirectory(can-utils)&lt;/code&gt; to your &lt;code&gt;CMakeLists.txt&lt;/code&gt; file after &lt;code&gt;cmake_minimum_required()&lt;/code&gt;. Generating project will build Debug/Release for all supported EABI types. ie. arm64-v8a, armeabi-v7a, x86, x86_64.&lt;/li&gt; &#xA; &lt;li&gt;Raspberry Pi : &lt;code&gt;cmake -DCMAKE_TOOLCHAIN_FILE=~/rpi/tools/build/cmake/rpi.toolchain.cmake .. &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux : &lt;code&gt;cmake -GNinja .. &amp;amp;&amp;amp; ninja&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux Eclipse Photon (Debug) : &lt;code&gt;CC=clang cmake -G&#34;Eclipse CDT4 - Unix Makefiles&#34; ../can-utils/ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_ECLIPSE_VERSION=4.8.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To override the base installation directory use: &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; ie. &lt;code&gt;CC=clang cmake -DCMAKE_INSTALL_PREFIX=./out .. &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional Information:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/networking/can.txt&#34;&gt;SocketCAN Documentation (Linux Kernel)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://elinux.org/CAN_Bus&#34;&gt;Elinux.org CAN Bus Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packages.debian.org/sid/can-utils&#34;&gt;Debian Package Description&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>huanghongxun/HMCL-PE</title>
    <updated>2023-06-24T01:31:48Z</updated>
    <id>tag:github.com,2023-06-24:/huanghongxun/HMCL-PE</id>
    <link href="https://github.com/huanghongxun/HMCL-PE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hello Minecraft! Launcher for Android&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;175&#34; src=&#34;https://raw.githubusercontent.com/huanghongxun/HMCL-PE/main/HMCLPE/src/main/res/drawable/ic_craft_table.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;HMCL-PE&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huanghongxun/HMCL-PE/main/.github/images/hmcl-pe-main-screen.jpg&#34; alt=&#34;MainScreen&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Android-3DDC84?style=for-the-badge&amp;amp;logo=android&amp;amp;logoColor=white&#34; alt=&#34;Android&#34;&gt; &lt;a href=&#34;https://discord.gg/c79XjKHy4S&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-4903FC?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Gradle-02303A.svg?style=for-the-badge&amp;amp;logo=Gradle&amp;amp;logoColor=white&#34; alt=&#34;Gradle&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&amp;amp;logo=java&amp;amp;logoColor=white&#34; alt=&#34;Java&#34;&gt; &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=4r1lFLgc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ-4903FC?style=for-the-badge&amp;amp;logoColor=white&#34; alt=&#34;QQ&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/Tungstend/HMCL-PE/total?color=green&amp;amp;style=for-the-badge&#34; alt=&#34;Downloads&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://afdian.net/@tungs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor-30363D?style=for-the-badge&amp;amp;logo=GitHub-Sponsors&amp;amp;logoColor=#EA4AAA&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://tungstend.github.io/&#34;&gt;Hello Minecraft! Launcher:Pocket Edition&lt;/a&gt;: The software attempts to restore HMCL on Android devices, allowing players to manage Games, Mods, Controls and More.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run Minecraft Java Edition directly on your Android device&lt;/strong&gt;, with mod support and all versions of the Game.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Minecraft on all versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Forge, OptiFine, Fabric and others&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Java 8 and Java 17&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mouse Virtual&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download Mods, ModPacks, Textures and Worlds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using Shaders (with VirGL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create custom controllers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable launcher themes and colors&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; And much more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huanghongxun/HMCL-PE/main/.github/images/hmcl-pe-in-game-1.jpg&#34; alt=&#34;GameScreen1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huanghongxun/HMCL-PE/main/.github/images/hmcl-pe-in-game-2.jpg&#34; alt=&#34;GameScreen2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huanghongxun/HMCL-PE/main/.github/images/hmcl-pe-mods-menu.jpg&#34; alt=&#34;ModScreen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;You can compile the software &lt;strong&gt;using Android Studio&lt;/strong&gt;, with the &lt;strong&gt;Android SDK &amp;amp; NDK&lt;/strong&gt; packages. Clone the remote repository using the following URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/Tungstend/HMCL-PE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, Compile using Gradle by Android Studio. Run the &lt;code&gt;link.bat&lt;/code&gt; file to do a build configuration&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The software is distributed under &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPL v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HMCL-PE is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;HMCL-PE is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with HMCL-PE.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Third Party Components&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/huanghongxun/HMCL&#34;&gt;HMCL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/AOF-Dev/Boat&#34;&gt;Boat and related projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/PojavLauncherTeam/PojavLauncher&#34;&gt;PojavLauncher and related projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/switch-iot/hin2n&#34;&gt;Hin2n&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/yushijinhun/authlib-injector&#34;&gt;authlib-injector&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://login.mc-user.com:233/account/login&#34;&gt;nide8auth&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bangbang93/forge-install-bootstrapper&#34;&gt;forge-install-bootstrapper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Tungstend/TouchInjector&#34;&gt;TouchInjector&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Sponsor&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://afdian.net/@tungs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor-30363D?style=for-the-badge&amp;amp;logo=GitHub-Sponsors&amp;amp;logoColor=#EA4AAA&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>jjshoots/RemoteIDSpoofer</title>
    <updated>2023-06-24T01:31:48Z</updated>
    <id>tag:github.com,2023-06-24:/jjshoots/RemoteIDSpoofer</id>
    <link href="https://github.com/jjshoots/RemoteIDSpoofer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NodeMCU RemoteID Spoofer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RIDS - Remote ID Spoofer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This repository and its code are intended for educational purposes only.&lt;/p&gt; &#xA;&lt;p&gt;An ESP8266/NodeMCU Drone RemoteID Spoofer. Built based on work done by &lt;a href=&#34;https://github.com/sxjack/uav_electronic_ids&#34;&gt;sxjack&lt;/a&gt; and &lt;a href=&#34;https://github.com/SpacehuhnTech/esp8266_deauther&#34;&gt;SpacehuhnTech&lt;/a&gt;. I stand on the shoulders of giants.&lt;/p&gt; &#xA;&lt;p&gt;This spawns 16 different fake drones broadcasting RemoteID, with them all flying in random directions around a particular GPS location.&lt;/p&gt; &#xA;&lt;p&gt;Do check that whatever device you&#39;re using to detect the drones can sniff packets from the air fast enough. If you&#39;re using OpenDroneID available on the App Store or Play Store, you&#39;ll have to disable scan throttling for your device, and run the app for ~5-10 minutes before all 16 drones are actually &#34;in the air&#34;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jjshoots/RemoteIDSpoofer/master/images/proof.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need the &lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;Arduino IDE&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the file &lt;code&gt;RemoteIDSpoofer/RemoteIDSpoofer.ino&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In Arduino IDE, go to &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Preferences&lt;/code&gt;, then add this URL to the &lt;code&gt;Additional Boards Manager URLs&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpacehuhnTech/arduino/main/package_spacehuhn_index.json&#34;&gt;https://raw.githubusercontent.com/SpacehuhnTech/arduino/main/package_spacehuhn_index.json&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Now go to &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Boards&lt;/code&gt; &amp;gt; &lt;code&gt;Boards Manager&lt;/code&gt;, search &lt;code&gt;deauther&lt;/code&gt; and install &lt;code&gt;Deauther ESP8266 Boards&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select your board at &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Board&lt;/code&gt; &amp;gt; and be sure it is at &lt;code&gt;Deauther ESP8266 Boards&lt;/code&gt; (and not at &lt;code&gt;ESP8266 Modules&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Plug in your device, I used a NodeMCU v2, and select its COM port at &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Port&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;upload&lt;/code&gt;, or use Ctrl+U.&lt;/li&gt; &#xA; &lt;li&gt;The device should start broadcasting RemoteID packets generated for random flying machines.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;To-Do List&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add GPS capability to automatically create IDs wherever the device is located.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>