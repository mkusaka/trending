<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-24T01:33:08Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NUL0x4C/APCLdr</title>
    <updated>2023-01-24T01:33:08Z</updated>
    <id>tag:github.com,2023-01-24:/NUL0x4C/APCLdr</id>
    <link href="https://github.com/NUL0x4C/APCLdr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Payload Loader With Evasion Features&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; APCLdr: Payload Loader With Evasion Features &lt;/h2&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no crt functions imported&lt;/li&gt; &#xA; &lt;li&gt;indirect syscalls using &lt;a href=&#34;https://github.com/Maldev-Academy/HellHall&#34;&gt;HellHall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;api hashing using &lt;a href=&#34;https://github.com/NUL0x4C/APCLdr/raw/main/APCLdr/Win32.c#L111&#34;&gt;CRC32&lt;/a&gt; hashing algorithm&lt;/li&gt; &#xA; &lt;li&gt;payload encryption using rc4 - payload is saved in .rsrc&lt;/li&gt; &#xA; &lt;li&gt;Payload injection using APC calls - alertable thread&lt;/li&gt; &#xA; &lt;li&gt;Payload execution using APC - alertable thread&lt;/li&gt; &#xA; &lt;li&gt;Execution delation using &lt;a href=&#34;https://github.com/NUL0x4C/APCLdr/raw/main/APCLdr/APCLdr.c#L66&#34;&gt;MsgWaitForMultipleObjects&lt;/a&gt; - edit &lt;a href=&#34;https://github.com/NUL0x4C/APCLdr/raw/main/APCLdr/Common.h#L6&#34;&gt;this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the total size is 8kb + the payload size&lt;/li&gt; &#xA; &lt;li&gt;compatible with &lt;strong&gt;LLVM (clang-cl)&lt;/strong&gt; Option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/NUL0x4C/APCLdr/tree/main/Builder&#34;&gt;Builder&lt;/a&gt; to update the &lt;a href=&#34;https://github.com/NUL0x4C/APCLdr/raw/main/APCLdr/PayloadFile.pf&#34;&gt;PayloadFile.pf&lt;/a&gt; file, that&#39;ll be the encrypted payload to be saved in the .rsrc section of the loader&lt;/li&gt; &#xA; &lt;li&gt;Compile as x64 Release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Debugging:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change &lt;em&gt;Linker&amp;gt;SubSystem&lt;/em&gt; from &lt;strong&gt;/SUBSYSTEM:WINDOWS&lt;/strong&gt; to &lt;strong&gt;/SUBSYSTEM:CONSOLE&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set the loader in debug mode (uncomment &lt;a href=&#34;https://github.com/NUL0x4C/APCLdr/raw/main/APCLdr/Debug.h#L7&#34;&gt;this&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;build as release as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Thanks For:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.x86matthew.com/view_post?id=writeprocessmemory_apc&#34;&gt;https://www.x86matthew.com/view_post?id=writeprocessmemory_apc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vxunderground/VX-API&#34;&gt;https://github.com/vxunderground/VX-API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Tested with cobalt strike &amp;amp;&amp;amp; Havoc on windows 10 &lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>jhhoward/WolfensteinCGA</title>
    <updated>2023-01-24T01:33:08Z</updated>
    <id>tag:github.com,2023-01-24:/jhhoward/WolfensteinCGA</id>
    <link href="https://github.com/jhhoward/WolfensteinCGA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wolfenstein 3D with a CGA renderer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wolfenstein 3D CGA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/demo.gif&#34; alt=&#34;Wolfenstein 3D in 4 colour CGA&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a modification to the original Wolfenstein 3D source release which renders the game in CGA video modes. The engine has also been modified so that it can be run on 8088 based CPUs, allowing it to be run on a wide variety of old PC hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Supported video modes&lt;/h2&gt; &#xA;&lt;h3&gt;4 colour RGB mode with red palette&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/cgamode5.png&#34; alt=&#34;Wolfenstein 3D with red CGA palette&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the default mode that the game will start in and uses the alternative &#39;mode 5&#39; black/red/cyan/white palette.&lt;/p&gt; &#xA;&lt;h3&gt;4 colour RGB mode with magenta palette&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/cgamode4.png&#34; alt=&#34;Wolfenstein 3D with magenta CGA palette&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the game with the command line &lt;code&gt;WOLF3DC.EXE classic&lt;/code&gt; to run with the magenta palette &#39;mode 4&#39; black/magenta/cyan/white palette. This mode avoids directly manipulating CGA registers so may be preferable for clone cards that are do not accurately implement the CGA specification.&lt;/p&gt; &#xA;&lt;h3&gt;Composite CGA mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/cgacomposite.png&#34; alt=&#34;Wolfenstein 3D with magenta CGA palette&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the game with the command line &lt;code&gt;WOLF3DC.EXE composite&lt;/code&gt; to enable the composite colour mode for CGA cards that support NTSC colour output.&lt;/p&gt; &#xA;&lt;h3&gt;Tandy 160x200 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/tandy.png&#34; alt=&#34;Wolfenstein 3D in Tandy 160x200 mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the game with the command line &lt;code&gt;WOLF3DC.EXE tandy&lt;/code&gt; to enable the Tandy 160x200 16 colour mode. This mode has not yet been tested on real hardware and likely has issues with keyboard mapping. Please reach out if you are keen to help test!&lt;/p&gt; &#xA;&lt;h3&gt;LCD inverse monochrome mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/lcd.png&#34; alt=&#34;Wolfenstein 3D with inverse monochrome palette&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For machines that feature inverse monochrome LCDs, run with the command line &lt;code&gt;WOLF3DC.EXE lcd&lt;/code&gt; to run in 640x200 monochrome with the colours inverted. This mode is useful for laptops and palmtops which invert the screen colour.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jhhoward/WolfensteinCGA/master/readme_imgs/lcdwide.png&#34; alt=&#34;Wide LCD mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For devices that feature a wide aspect ratio LCD panel, optionally run with the command line &lt;code&gt;WOLF3DC.EXE lcd wide&lt;/code&gt; to correct the aspect ratio in the 3D renderer.&lt;/p&gt; &#xA;&lt;h2&gt;Running Wolfenstein 3D CGA&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/jhhoward/WolfensteinCGA/releases&#34;&gt;releases page&lt;/a&gt; on Github for prebuilt binaries. A demo based on the shareware release is included in &lt;strong&gt;wolf3dc_shareware.zip&lt;/strong&gt; if you don&#39;t own a full copy of Wolfenstein 3D.&lt;/p&gt; &#xA;&lt;p&gt;To play the full, registered version you will need the 1.4 release. This is available to purchase on &lt;a href=&#34;https://store.steampowered.com/app/2270/Wolfenstein_3D/&#34;&gt;Steam.&lt;/a&gt; Before you can play in CGA, you will need to convert the original VGA textures, sprites and images. To do this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unpack the contents of &lt;strong&gt;wolf3dc_registered.zip&lt;/strong&gt; into the same folder as your Wolfenstein 3D installation.&lt;/li&gt; &#xA; &lt;li&gt;On a modern Windows machine, run &lt;strong&gt;cgaify.exe&lt;/strong&gt; which will read the VGA assets and create new CGA versions.&lt;/li&gt; &#xA; &lt;li&gt;Wolfenstein 3D CGA is now ready to play! Run &lt;strong&gt;WOLF3DC.EXE&lt;/strong&gt; on your DOS machine or emulator. See the &lt;em&gt;Supported video modes&lt;/em&gt; section for launch options.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The shareware .exe will only work with the shareware files, and the registered .exe will only work with the registered files.&lt;/p&gt; &#xA;&lt;h2&gt;Extra features&lt;/h2&gt; &#xA;&lt;p&gt;Also included is a benchmarking feature that will play a demo as fast as possible, quit and report the average frames per second. Run with the command line &lt;code&gt;WOLF3DC.EXE timedemo&lt;/code&gt; to measure the performance on your machine.&lt;/p&gt; &#xA;&lt;h2&gt;Building Wolfenstein 3D CGA&lt;/h2&gt; &#xA;&lt;p&gt;To build you will need a copy of the Borland C compiler version 3/3.1. Build the included WOLF3D.PRJ project file with the Borland C IDE. Note that by default the generated executable will only work correctly with a registered version 1.4 copy of Wolfenstein 3D.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tijme/amd-ryzen-master-driver-v17-exploit</title>
    <updated>2023-01-24T01:33:08Z</updated>
    <id>tag:github.com,2023-01-24:/tijme/amd-ryzen-master-driver-v17-exploit</id>
    <link href="https://github.com/tijme/amd-ryzen-master-driver-v17-exploit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cobalt Strike (CS) Beacon Object File (BOF) for kernel exploitation using AMD&#39;s Ryzen Master Driver (version 17).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tijme/amd-ryzen-master-driver-v17-exploit/master/.github/logo.png&#34; width=&#34;450&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tijme/amd-ryzen-master-driver-v17-exploit/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://raw.finnwea.com/shield/?firstText=Source&amp;amp;secondText=Licensed&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;b&gt;Cobalt Strike Beacon Object File for kernel exploitation using AMD&#39;s Ryzen Master Driver (version 17).&lt;/b&gt; &lt;br&gt; &lt;sup&gt;Built by &lt;a href=&#34;https://www.linkedin.com/in/tijme/&#34;&gt;Tijme&lt;/a&gt;. Credits to &lt;a href=&#34;https://github.com/lldre&#34;&gt;Alex&lt;/a&gt; for teaching me! Made possible by &lt;a href=&#34;https://northwave-security.com/&#34;&gt;Northwave Security&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tijme/amd-ryzen-master-driver-v17-exploit/master/.github/northwave.png&#34;&gt;&lt;/sup&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is a Cobalt Strike (CS) Beacon Object File (BOF) and executable which exploits AMD&#39;s Ryzen Master Driver (version 17). It only overwrites the beacon process token with the system process token. But, just like &lt;a href=&#34;https://github.com/tijme/kernel-mii/raw/master/KernelMii.c&#34;&gt;KernelMii&lt;/a&gt;, this BOF is mostly just a good foundation for further kernel exploitation via CS. You can utilise it to disable EDR, disable ETW TI, dump LSASS PPL, or do other undetected malicious actions.&lt;/p&gt; &#xA;&lt;p&gt;I initially identified this vulnerability (if you can call it a vulnerability, concidering the administrator-to-kernel is &lt;a href=&#34;https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria&#34;&gt;not&lt;/a&gt; concidered a security boundary) during some kernel driver research. I identified four attack vectors in the driver. I later found out that &lt;a href=&#34;https://github.com/h0mbre&#34;&gt;@h0mbre&lt;/a&gt; identified &lt;a href=&#34;https://h0mbre.github.io/RyzenMaster_CVE/&#34;&gt;two&lt;/a&gt; of these vectors back in 2020 (CVE-2020-12928). Back then, every user on the system could open handles to the symbolic link. AMD &#39;fixed&#39; it by restricting access to local administrators. But from a threat actor and red teaming perspective, it is still very useful.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I developed and tested this exploit on Windows 10 Pro 22H2 19045.2486.&lt;/strong&gt; The executable is somewhat stable. Cobalt Strike beacons have a stack limitation of 4096 bytes, so it&#39;s less likely to work (during development it always &lt;em&gt;did&lt;/em&gt; work though). The executable should always work.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1000&#34; src=&#34;https://raw.githubusercontent.com/tijme/amd-ryzen-master-driver-v17-exploit/master/.github/screenshot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository first. Then review the code, compile from source and use it in Cobalt Strike.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiling&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Load the &lt;code&gt;AMDRyzenMasterDriverV17Exploit.cna&lt;/code&gt; script using the Cobalt Strike Script Manager. Then use the command below to execute the exploit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amd_ryzen_master_driver_v17_exploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively (and for testing purposes), you can directly run the compiled executable. This will spawn a command prompt as SYSTEM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ .\AMDRyzenMasterDriverV17Exploit.x64.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Due to the ACL on the symbolic link only local administrators can communicate with the driver.&lt;/li&gt; &#xA; &lt;li&gt;The physical memory limits are currently hardcoded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Load the vulnerable driver from memory instead of from disk.&lt;/li&gt; &#xA; &lt;li&gt;Make the exploit stable &amp;amp; compatible with multiple Windows versions.&lt;/li&gt; &#xA; &lt;li&gt;Adjust physical page iterations based on how many RAM is available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues or new features can be reported via the &lt;a href=&#34;https://github.com/tijme/amd-ryzen-master-driver-v17-exploit/issues&#34;&gt;issue tracker&lt;/a&gt;. Please make sure your issue or feature has not yet been reported by anyone else before submitting a new one.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Tijme Gommers &amp;amp; Northwave Security. All rights reserved. View &lt;a href=&#34;https://github.com/tijme/amd-ryzen-master-driver-v17-exploit/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for the full license.&lt;/p&gt;</summary>
  </entry>
</feed>