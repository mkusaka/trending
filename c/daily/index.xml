<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-27T01:29:30Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>steineggerlab/foldseek</title>
    <updated>2023-07-27T01:29:30Z</updated>
    <id>tag:github.com,2023-07-27:/steineggerlab/foldseek</id>
    <link href="https://github.com/steineggerlab/foldseek" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Foldseek enables fast and sensitive comparisons of large structure sets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Foldseek&lt;/h1&gt; &#xA;&lt;p&gt;Foldseek enables fast and sensitive comparisons of large structure sets.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/steineggerlab/foldseek/raw/master/.github/foldseek.png&#34; height=&#34;250&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nature.com/articles/s41587-023-01773-0&#34;&gt;van Kempen M, Kim S, Tumescheit C, Mirdita M, Lee J, Gilchrist C, SÃ¶ding J, and Steinegger M. Foldseek: fast and accurate protein structure search. Nature Biotechnology, doi:10.1038/s41587-023-01773-0 (2023)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.biorxiv.org/content/10.1101/2023.03.09.531927v1&#34;&gt;Barrio-Hernandez I, Yeo J, JÃ¤nes J, Wein T, Varadi M, Velankar S, Beltrao P and Steinegger M. Clustering predicted structures at the scale of the known protein universe. biorxiv, doi:10.1101/2023.03.09.531927 (2023)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#foldseek&#34;&gt;Foldseek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#webserver&#34;&gt;Webserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#memory-requirments&#34;&gt;Memory requirments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#tutorial-video&#34;&gt;Tutorial Video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#search&#34;&gt;Search&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#output-search&#34;&gt;Output&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#important-search-parameters&#34;&gt;Important Parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#alignment-mode&#34;&gt;Alignment Mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#databases&#34;&gt;Databases&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#create-custom-databases-and-indexes&#34;&gt;Create Custom Databases and Indexes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#cluster&#34;&gt;Cluster&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#output-cluster&#34;&gt;Output&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#important-cluster-parameters&#34;&gt;Important Parameters&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#main-modules&#34;&gt;Main Modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Webserver&lt;/h2&gt; &#xA;&lt;p&gt;Search your protein structures against the &lt;a href=&#34;https://alphafold.ebi.ac.uk/&#34;&gt;AlphaFoldDB&lt;/a&gt; and &lt;a href=&#34;https://www.rcsb.org/&#34;&gt;PDB&lt;/a&gt; in seconds using our Foldseek webserver: &lt;a href=&#34;https://search.foldseek.com&#34;&gt;search.foldseek.com&lt;/a&gt; ðŸš€&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Linux AVX2 build (check using: cat /proc/cpuinfo | grep avx2)&#xA;wget https://mmseqs.com/foldseek/foldseek-linux-avx2.tar.gz; tar xvzf foldseek-linux-avx2.tar.gz; export PATH=$(pwd)/foldseek/bin/:$PATH&#xA;&#xA;# Linux SSE4.1 build (check using: cat /proc/cpuinfo | grep sse4_1)&#xA;wget https://mmseqs.com/foldseek/foldseek-linux-sse41.tar.gz; tar xvzf foldseek-linux-sse41.tar.gz; export PATH=$(pwd)/foldseek/bin/:$PATH&#xA;&#xA;# MacOS&#xA;wget https://mmseqs.com/foldseek/foldseek-osx-universal.tar.gz; tar xvzf foldseek-osx-universal.tar.gz; export PATH=$(pwd)/foldseek/bin/:$PATH&#xA;&#xA;# Conda installer (Linux and macOS)&#xA;conda install -c conda-forge -c bioconda foldseek&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other precompiled binaries for ARM64 amd SSE2 are available at &lt;a href=&#34;https://mmseqs.com/foldseek&#34;&gt;https://mmseqs.com/foldseek&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Memory requirments&lt;/h2&gt; &#xA;&lt;p&gt;For optimal software performance, consider three options based on your RAM and search requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;With CÎ± info (default).&lt;/strong&gt; Use this formula to calculate RAM - &lt;code&gt;(6 bytes CÎ± + 1 3Di byte + 1 AA byte) * (database residues)&lt;/code&gt;. The 54M AFDB50 entries require 151GB.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without CÎ± info.&lt;/strong&gt; By disabling &lt;code&gt;--sort-by-structure-bits 0&lt;/code&gt;, RAM requirement reduces to 35GB. However, this alters hit rankings and final scores but not E-values. Structure bits are mostly relevant for hit ranking for E-value &amp;gt; 10^-1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Single query searches.&lt;/strong&gt; Use the &lt;code&gt;--prefilter-mode 1&lt;/code&gt;, which isn&#39;t memory-limited and computes all ungapped alignments. This option optimally utilizes foldseek&#39;s multithreading capabilities for single queries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tutorial Video&lt;/h2&gt; &#xA;&lt;p&gt;We presented a Foldseek tutorial at the SBGrid where we demonstrate the webserver and command line interface of foldseek. Check it out &lt;a href=&#34;https://www.youtube.com/watch?v=k5Rbi22TtOA&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k5Rbi22TtOA&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/views/k5Rbi22TtOA?style=social&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Many of Foldseek&#39;s modules (subprograms) rely on MMseqs2. For more information about these modules, refer to the &lt;a href=&#34;https://github.com/soedinglab/MMseqs2/wiki&#34;&gt;MMseqs2 wiki&lt;/a&gt;. For documentation specific to Foldseek, checkout the Foldseek wiki &lt;a href=&#34;https://github.com/steineggerlab/foldseek/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;easy-search&lt;/code&gt; module allows to search single or multiple query structures, formatted in PDB/mmCIF format (flat or gzipped), against a target database, folder or single protein structures. In default it outputs the alignment information as a &lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#tab-separated&#34;&gt;tab-separated file&lt;/a&gt; but we support also &lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#superpositioned-c%CE%B1-only-pdb-files&#34;&gt;Superposed CÎ± PDBs&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#interactive-html&#34;&gt;HTML&lt;/a&gt; output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek easy-search example/d1asha_ example/ aln tmpFolder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output Search&lt;/h4&gt; &#xA;&lt;h5&gt;Tab-separated&lt;/h5&gt; &#xA;&lt;p&gt;The default fields are containing the following fields: &lt;code&gt;query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits&lt;/code&gt; but they can be customized with the &lt;code&gt;--format-output&lt;/code&gt; option e.g. &lt;code&gt;--format-output &#34;query,target,qaln,taln&#34;&lt;/code&gt; returns the query and target accession and the pairwise alignments in tab separated format. You can choose many different output columns.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;query&lt;/td&gt; &#xA;   &lt;td&gt;Query sequence identifier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;target&lt;/td&gt; &#xA;   &lt;td&gt;Target sequence identifier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;qca&lt;/td&gt; &#xA;   &lt;td&gt;Calpha coordinates of the query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tca&lt;/td&gt; &#xA;   &lt;td&gt;Calpha coordinates of the target&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alntmscore&lt;/td&gt; &#xA;   &lt;td&gt;TM-score of the alignment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;qtmscore&lt;/td&gt; &#xA;   &lt;td&gt;TM-score normalized by the query length&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ttmscore&lt;/td&gt; &#xA;   &lt;td&gt;TM-score normalized by the target length&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;u&lt;/td&gt; &#xA;   &lt;td&gt;Rotation matrix (computed to by TM-score)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;t&lt;/td&gt; &#xA;   &lt;td&gt;Translation vector (computed to by TM-score)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lddt&lt;/td&gt; &#xA;   &lt;td&gt;Average LDDT of the alignment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lddtfull&lt;/td&gt; &#xA;   &lt;td&gt;LDDT per aligned position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;prob&lt;/td&gt; &#xA;   &lt;td&gt;Estimated probability for query and target to be homologous (e.g. being within the same SCOPe superfamily)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/soedinglab/MMseqs2/wiki#custom-alignment-format-with-convertalis&#34;&gt;MMseqs2 documentation for more format output codes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Superpositioned CÎ± only PDB files&lt;/h5&gt; &#xA;&lt;p&gt;Foldseek&#39;s &lt;code&gt;--format-mode 5&lt;/code&gt; generates PDB files with all CÎ± atoms superimposed based on the aligned coordinates on to the query structure. For each pairwise alignment it will write a single PDB files, so be carefull when using this options for large searches.&lt;/p&gt; &#xA;&lt;h5&gt;Interactive HTML&lt;/h5&gt; &#xA;&lt;p&gt;Foldseek can locally generate a search result HTML similiar to the &lt;a href=&#34;https://search.foldseek.com&#34;&gt;webserver&lt;/a&gt; by specifying the format mode &lt;code&gt;--format-mode 3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek easy-search example/d1asha_ example/ result.html tmp --format-mode 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/.github/results.png&#34; height=&#34;400&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Important search parameters&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s&lt;/td&gt; &#xA;   &lt;td&gt;Sensitivity&lt;/td&gt; &#xA;   &lt;td&gt;Adjust sensitivity to speed trade-off; lower is faster, higher more sensitive (fast: 7.5, default: 9.5)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--exhaustive-search&lt;/td&gt; &#xA;   &lt;td&gt;Sensitivity&lt;/td&gt; &#xA;   &lt;td&gt;Skips prefilter and performs an all-vs-all alignment (more sensitive but much slower)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--max-seqs&lt;/td&gt; &#xA;   &lt;td&gt;Sensitivity&lt;/td&gt; &#xA;   &lt;td&gt;Adjust the amount of prefilter handed to alignment; increasing it can lead to more hits (default: 1000)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-e&lt;/td&gt; &#xA;   &lt;td&gt;Sensitivity&lt;/td&gt; &#xA;   &lt;td&gt;List matches below this E-value (range 0.0-inf, default: 0.001); increasing it reports more distant structures&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--alignment-type&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;0: 3Di Gotoh-Smith-Waterman (local, not recommended), 1: TMalign (global, slow), 2: 3Di+AA Gotoh-Smith-Waterman (local, default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-c&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;List matches above this fraction of aligned (covered) residues (see --cov-mode) (default: 0.0); higher coverage = more global alignment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--cov-mode&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;0: coverage of query and target, 1: coverage of target, 2: coverage of query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Alignment Mode&lt;/h4&gt; &#xA;&lt;p&gt;In default Foldseek uses its local 3Di+AA strutural alignment but it also supports to realign hits using the global TMalign as well as rescoring alignments using TMscore.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek easy-search example/d1asha_ example/ aln tmp --alignment-type 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of the alignment type (&lt;code&gt;--alignment-type 1&lt;/code&gt;) tmalign, we sort the results by the TMscore normalized by query length. We write the TMscore into the e-value=(qTMscore+tTMscore)/2 as well as into the score(=qTMscore*100) field. All output fields (like pident, fident, and alnlen) are calculated from the TMalign alignment.&lt;/p&gt; &#xA;&lt;h3&gt;Databases&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;databases&lt;/code&gt; command downloads pre-generated databases like PDB or AlphaFoldDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pdb  &#xA;foldseek databases PDB100 pdb tmp &#xA;# alphafold db&#xA;foldseek databases Alphafold/Proteome afdb tmp &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We currently support the following databases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Name                   &#x9;Type     &#x9;Taxonomy&#x9;Url&#xA;- Alphafold/UniProt   &#x9;Aminoacid&#x9;     yes&#x9;https://alphafold.ebi.ac.uk/&#xA;- Alphafold/UniProt50 &#x9;Aminoacid&#x9;     yes&#x9;https://alphafold.ebi.ac.uk/&#xA;- Alphafold/Proteome  &#x9;Aminoacid&#x9;     yes&#x9;https://alphafold.ebi.ac.uk/&#xA;- Alphafold/Swiss-Prot&#x9;Aminoacid&#x9;     yes&#x9;https://alphafold.ebi.ac.uk/&#xA;- ESMAtlas30          &#x9;Aminoacid&#x9;       -&#x9;https://esmatlas.com&#xA;- PDB                 &#x9;Aminoacid&#x9;     yes&#x9;https://www.rcsb.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create custom databases and indexes&lt;/h4&gt; &#xA;&lt;p&gt;The target database can be pre-processed by &lt;code&gt;createdb&lt;/code&gt;. This make sense if searched multiple times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek createdb example/ targetDB&#xA;foldseek createindex targetDB tmp  #OPTIONAL generates and stores the index on disk&#xA;foldseek easy-search example/d1asha_ targetDB aln.m8 tmpFolder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cluster&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;easy-cluster&lt;/code&gt; algorithm is designed for structural clustering by assigning structures to a representative protein using structural alignment. It accepts input in either PDB or mmCIF format, with support for both flat and gzipped files. By default, easy-cluster generates three output files with the following prefixes: (1) &lt;code&gt;_clu.tsv&lt;/code&gt;, (2) &lt;code&gt;_repseq.fasta&lt;/code&gt;, and (3) &lt;code&gt;_allseq.fasta&lt;/code&gt;. The first file (1) is a &lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#tab-separated-cluster&#34;&gt;tab-separated&lt;/a&gt; file describing the mapping from representative to member, while the second file (2) contains only &lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#representative-fasta&#34;&gt;representative sequences&lt;/a&gt;, and the third file (3) includes all &lt;a href=&#34;https://raw.githubusercontent.com/steineggerlab/foldseek/master/#all-member-fasta&#34;&gt;cluster member sequences&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek easy-cluster example/ res tmp -c 0.9 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output Cluster&lt;/h4&gt; &#xA;&lt;h5&gt;Tab-separated cluster&lt;/h5&gt; &#xA;&lt;p&gt;The provided format represents protein structure clustering in a tab-separated, two-column layout (representative and member). Each line denotes a cluster-representative and cluster-member relationship, signifying that the member shares significant structural similarity with the representative, and thus belongs to the same cluster.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Q0KJ32&#x9;Q0KJ32&#xA;Q0KJ32&#x9;C0W539&#xA;Q0KJ32&#x9;D6KVP9&#xA;E3HQM9&#x9;E3HQM9&#xA;E3HQM9&#x9;F0YHT8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Representative fasta&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;_repseq.fasta&lt;/code&gt; contains all representative protein sequences of the clustering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;Q0KJ32&#xA;MAGA....R&#xA;&amp;gt;E3HQM9&#xA;MCAT...Q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;All member fasta&lt;/h5&gt; &#xA;&lt;p&gt;In &lt;code&gt;_allseq.fasta&lt;/code&gt; file all sequences of the cluster are present. A new cluster is marked by two identical name lines of the representative sequence, where the first line stands for the cluster and the second is the name line of the first cluster sequence. It is followed by the fasta formatted sequences of all its members.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;Q0KJ32&#x9;&#xA;&amp;gt;Q0KJ32&#xA;MAGA....R&#xA;&amp;gt;C0W539&#xA;MVGA....R&#xA;&amp;gt;D6KVP9&#xA;MVGA....R&#xA;&amp;gt;D1Y890&#xA;MVGV....R&#xA;&amp;gt;E3HQM9&#x9;&#xA;&amp;gt;E3HQM9&#xA;MCAT...Q&#xA;&amp;gt;Q223C0&#xA;MCAR...Q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Important cluster parameters&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-e&lt;/td&gt; &#xA;   &lt;td&gt;Sensitivity&lt;/td&gt; &#xA;   &lt;td&gt;List matches below this E-value (range 0.0-inf, default: 0.001); increasing it reports more distant structures&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--alignment-type&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;0: 3Di Gotoh-Smith-Waterman (local, not recommended), 1: TMalign (global, slow), 2: 3Di+AA Gotoh-Smith-Waterman (local, default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-c&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;List matches above this fraction of aligned (covered) residues (see --cov-mode) (default: 0.0); higher coverage = more global alignment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--cov-mode&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;0: coverage of query and target, 1: coverage of target, 2: coverage of query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--min-seq-id&lt;/td&gt; &#xA;   &lt;td&gt;Alignment&lt;/td&gt; &#xA;   &lt;td&gt;the minimum sequence identity to be clustered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Main Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;easy-search&lt;/code&gt; fast protein structure search&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;easy-cluster&lt;/code&gt; fast protein structure clustering&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createdb&lt;/code&gt; create a database from protein structures (PDB,mmCIF, mmJSON)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;databases&lt;/code&gt; download pre-assembled databases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Rescore aligments using TMscore&lt;/h3&gt; &#xA;&lt;p&gt;Easiest way to get the alignment TMscore normalized by min(alnLen,qLen,targetLen) as well as a rotation matrix is through the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek easy-search example/ example/ aln tmp --format-output query,target,alntmscore,u,t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternative, it is possible to compute TMscores for the kind of alignment output (e.g. 3Di/AA) using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek createdb example/ targetDB&#xA;foldseek createdb example/ queryDB&#xA;foldseek search queryDB targetDB aln tmpFolder -a&#xA;foldseek aln2tmscore queryDB targetDB aln aln_tmscore&#xA;foldseek createtsv queryDB targetDB aln_tmscore aln_tmscore.tsv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output format &lt;code&gt;aln_tmscore.tsv&lt;/code&gt;: query and target identifier, TMscore, translation(3) and rotation vector=(3x3)&lt;/p&gt; &#xA;&lt;h3&gt;Cluster search results&lt;/h3&gt; &#xA;&lt;p&gt;The following command aligns the input structures all-against-all and keeps only alignments with 80% of the sequence covered by the alignment (-c 0.8) (read more about alignment coverage &lt;a href=&#34;https://github.com/soedinglab/MMseqs2/wiki#how-to-set-the-right-alignment-coverage-to-cluster&#34;&gt;here&lt;/a&gt;). It then clusters the results using greedy set cover algorithm. The clustering mode can be adjusted using --cluster-mode, read more &lt;a href=&#34;https://github.com/soedinglab/MMseqs2/wiki#clustering-modes&#34;&gt;here&lt;/a&gt;. The clustering output format is described &lt;a href=&#34;https://github.com/soedinglab/MMseqs2/wiki#cluster-tsv-format&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek createdb example/ db&#xA;foldseek search db db aln tmpFolder -c 0.8 &#xA;foldseek clust db aln clu&#xA;foldseek createtsv db db clu clu.tsv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query centered multiple sequence alignment&lt;/h3&gt; &#xA;&lt;p&gt;Foldseek can generate a3m based multiple sequence alignments using the following commands. a3m can be converted to fasta format using &lt;a href=&#34;https://raw.githubusercontent.com/soedinglab/hh-suite/master/scripts/reformat.pl&#34;&gt;reformat.pl&lt;/a&gt; (&lt;code&gt;reformat.pl in.a3m out.fas&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foldseek createdb example/ targetDB&#xA;foldseek createdb example/ queryDB&#xA;foldseek search queryDB targetDB aln tmpFolder -a&#xA;foldseek result2msa queryDB targetDB aln msa --msa-format-mode 6&#xA;foldseek unpackdb msa msa_output --unpack-suffix a3m --unpack-name-mode 0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>