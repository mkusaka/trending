<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-04T01:31:14Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>capstone-engine/capstone</title>
    <updated>2023-03-04T01:31:14Z</updated>
    <id>tag:github.com,2023-03-04:/capstone-engine/capstone</id>
    <link href="https://github.com/capstone-engine/capstone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Capstone disassembly/disassembler framework: Core (Arm, Arm64, BPF, EVM, M68K, M680X, MOS65xx, Mips, PPC, RISCV, Sparc, SystemZ, TMS320C64x, Web Assembly, X86, X86_64, XCore) + bindings.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Capstone Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/aquynh/capstone&#34;&gt;&lt;img src=&#34;https://travis-ci.org/aquynh/capstone.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/aquynh/capstone/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/a4wvbn89wu3pinas/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/capstone&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/capstone.svg?sanitize=true&#34; alt=&#34;pypi package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/capstone&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/capstone&#34; alt=&#34;pypi downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deprecation&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/capstone-engine/capstone/tree/master&#34;&gt;&lt;code&gt;master&lt;/code&gt;&lt;/a&gt; branch is deprecated. All forward development should be based on the &lt;a href=&#34;https://github.com/capstone-engine/capstone/tree/next&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;To clone a fresh checkout with the &lt;code&gt;next&lt;/code&gt; branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone -b next https://github.com/capstone-engine/capstone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change to the &lt;code&gt;next&lt;/code&gt; branch in an existing checkout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We moved the original historical repo of Capstone from &lt;a href=&#34;https://github.com/aquynh/capstone&#34;&gt;https://github.com/aquynh/capstone&lt;/a&gt; to an organization, where we can add more maintainers to the project, and push Capstone development forward.&lt;/p&gt; &#xA;&lt;p&gt;Our new home is &lt;a href=&#34;https://github.com/capstone-engine/capstone&#34;&gt;https://github.com/capstone-engine/capstone&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nov 8th, 2021.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Capstone is a disassembly framework with the target of becoming the ultimate disasm engine for binary analysis and reversing in the security community.&lt;/p&gt; &#xA;&lt;p&gt;Created by Nguyen Anh Quynh, then developed and maintained by a small community, Capstone offers some unparalleled features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Support multiple hardware architectures: ARM, ARM64 (ARMv8), Ethereum VM, M68K, Mips, MOS65XX, PPC, Sparc, SystemZ, TMS320C64X, M680X, XCore and X86 (including X86_64).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Having clean/simple/lightweight/intuitive architecture-neutral API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide details on disassembled instruction (called “decomposer” by others).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide semantics of the disassembled instruction, such as list of implicit registers read &amp;amp; written.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implemented in pure C language, with lightweight bindings for D, Clojure, F#, Common Lisp, Visual Basic, PHP, PowerShell, Emacs, Haskell, Perl, Python, Ruby, C#, NodeJS, Java, GO, C++, OCaml, Lua, Rust, Delphi, Free Pascal &amp;amp; Vala (ready either in main code, or provided externally by the community).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Native support for all popular platforms: Windows, macOS, iOS, Android, Linux, *BSD, Solaris, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread-safe by design.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Special support for embedding into firmware or OS kernel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High performance &amp;amp; suitable for malware analysis (capable of handling various X86 malware tricks).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Distributed under the open source BSD license.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Further information is available at &lt;a href=&#34;https://www.capstone-engine.org&#34;&gt;https://www.capstone-engine.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;See COMPILE.TXT file for how to compile and install Capstone.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See docs/README for how to customize &amp;amp; program your own tools with Capstone.&lt;/p&gt; &#xA;&lt;h2&gt;Hack&lt;/h2&gt; &#xA;&lt;p&gt;See HACK.TXT file for the structure of the source code.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the BSD license. If you redistribute the binary or source code of Capstone, please attach file LICENSE.TXT with your products.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ireader/media-server</title>
    <updated>2023-03-04T01:31:14Z</updated>
    <id>tag:github.com,2023-03-04:/ireader/media-server</id>
    <link href="https://github.com/ireader/media-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RTSP/RTP/RTMP/FLV/HLS/MPEG-TS/MPEG-PS/MPEG-DASH/MP4/fMP4/MKV/WebM&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Build status: &lt;a href=&#34;https://travis-ci.org/ireader/media-server&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ireader/media-server.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/ireader-media-server&#34;&gt; &lt;img alt=&#34;Coverity Scan Build Status&#34; src=&#34;https://scan.coverity.com/projects/14645/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build Dependence: &lt;a href=&#34;https://github.com/ireader/sdk&#34;&gt;https://github.com/ireader/sdk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;libflv&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;FLV video codec: H.264/H.265/H.266/AV1/VP8/VP9/VP10&lt;/li&gt; &#xA; &lt;li&gt;FLV audio codec: AAC/MP3/G.711/Opus&lt;/li&gt; &#xA; &lt;li&gt;FLV file read/write&lt;/li&gt; &#xA; &lt;li&gt;H.264/H.265/H.266/AV1 bitstream filter: annex-b &amp;lt;-&amp;gt; mp4 stream&lt;/li&gt; &#xA; &lt;li&gt;AAC bitstream filter: ADTS &amp;lt;-&amp;gt; ASC&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;librtmp&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;rtmp-client: RTMP publish/play&lt;/li&gt; &#xA; &lt;li&gt;rtmp-server: RTMP Server live/vod streaming&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libmpeg&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ITU-T H.222.0 PS/TS read/write&lt;/li&gt; &#xA; &lt;li&gt;ps/ts codec: H.264/H.265/H.266/AAC/MP3/G.711/Opus&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;librtp&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;RFC3550 RTP/RTCP&lt;/li&gt; &#xA; &lt;li&gt;RTP with H.264/H.265/H.266/MPEG-2/MPEG-4/VP8/VP9/AV1&lt;/li&gt; &#xA; &lt;li&gt;RTP with G.711/G.726/G.729/MP3/AAC/Opus&lt;/li&gt; &#xA; &lt;li&gt;RTP with MPEG-2 PS/TS&lt;/li&gt; &#xA; &lt;li&gt;RTP Header Extension&lt;/li&gt; &#xA; &lt;li&gt;RTCP PSFB/RTPFB/XR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;librtsp&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;RFC2326 RTSP&lt;/li&gt; &#xA; &lt;li&gt;RFC4566 SDP&lt;/li&gt; &#xA; &lt;li&gt;SDP fmtp: H.264/H.265/H.266/AAC/Opus/G.711&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libhls&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HLS M3U8: generate m3u8 file&lt;/li&gt; &#xA; &lt;li&gt;HLS Media: TS segmenter&lt;/li&gt; &#xA; &lt;li&gt;HLS fmp4 segmenter&lt;/li&gt; &#xA; &lt;li&gt;HLS Master/Playlist m3u8 parser&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libdash&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ISO/IEC 23009-1 MPEG-DASH static(vod)&lt;/li&gt; &#xA; &lt;li&gt;ISO/IEC 23009-1 MPEG-DASH dynamic(live)&lt;/li&gt; &#xA; &lt;li&gt;DASH MPD v3/v4 parser&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libmov&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ISO/IEC 14496-12 MP4 File reader/writer&lt;/li&gt; &#xA; &lt;li&gt;MP4 faststart(moov box before mdat)&lt;/li&gt; &#xA; &lt;li&gt;fMP4(Fragment MP4) writer&lt;/li&gt; &#xA; &lt;li&gt;MP4 with H.264/H.265/H.266/AV1/VP8/VP9/JPEG/PNG&lt;/li&gt; &#xA; &lt;li&gt;MP4 with AAC/Opus/MP3/G.711&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libmkv&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MKV/WebM file read/write&lt;/li&gt; &#xA; &lt;li&gt;MKV/WebM live streaming&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libsip&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;sip user-agent (UAC/UAS)&lt;/li&gt; &#xA; &lt;li&gt;sip with ICE&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;libhttp(&lt;a href=&#34;https://github.com/ireader/sdk&#34;&gt;https://github.com/ireader/sdk&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HTTP Server(base AIO)&lt;/li&gt; &#xA; &lt;li&gt;HTTP Client&lt;/li&gt; &#xA; &lt;li&gt;HTTP Cookie&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;make clean &amp;amp;&amp;amp; make&lt;/li&gt; &#xA; &lt;li&gt;make RELEASE=1 (make release library, default debug)&lt;/li&gt; &#xA; &lt;li&gt;make PLATFORM=arm-hisiv100nptl-linux (cross compile)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ireader/media-server/master/compile.cn.md&#34;&gt;编译说明&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
</feed>