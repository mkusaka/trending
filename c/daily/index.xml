<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:35:29Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peng-zhihui/HelloWord-Keyboard</title>
    <updated>2022-08-04T01:35:29Z</updated>
    <id>tag:github.com,2022-08-04:/peng-zhihui/HelloWord-Keyboard</id>
    <link href="https://github.com/peng-zhihui/HelloWord-Keyboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;【瀚文】HelloWord-Smart Keyboard&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw1.jpg&#34; alt=&#34;hw1&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;瀚文&lt;/code&gt; 智能键盘是一把我为自己使用需求设计的 &lt;strong&gt;多功能&lt;/strong&gt;、&lt;strong&gt;模块化&lt;/strong&gt; 机械键盘。&lt;/p&gt; &#xA; &lt;p&gt;键盘使用模块化设计，左侧的&lt;strong&gt;多功能场景交互模块&lt;/strong&gt;可以替换成各种自定义组件，默认使用的是一个带电子墨水屏以及FOC力反馈旋钮的&lt;code&gt;Dynamic组件&lt;/code&gt;；键盘使用我自己开发的基于ARM Cortex-M芯片的键盘固件以及模块固件；键盘本体使用移位寄存器方式实现优化的按键扫描电路；模块以及键盘本体可以单独使用，也可以通过串口协议进行相互通信和调用。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;本仓库开源的资料内容包括：&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;瀚文本体硬件设计的10块PCB设计源文件，提供立创EDA专业版的文件格式&lt;/li&gt; &#xA;  &lt;li&gt;外壳设计结构文件&lt;/li&gt; &#xA;  &lt;li&gt;键盘本体的固件源码（已相对完善）&lt;/li&gt; &#xA;  &lt;li&gt;Dynamic组件的固件源码（已完成框架，更多APP扩展WIP）&lt;/li&gt; &#xA;  &lt;li&gt;键盘二次开发SDK（开发中）&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;键盘功能演示可以参考：&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV19V4y1J7Hx&#34;&gt;【自制】我做了一把 模 块 化 机 械 键 盘 !【软核】_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mGShD9ZER1c&#34;&gt;I Made A Customized Modular Keyboard ! - YouTube&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：Issues里面是讨论项目开发相关话题的，不要在里面发无意义的消息，不然watch了仓库的人都会收到通知邮件会给别人造成困扰的！！！灌水可以在仓库的Discuss里讨论！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1. 项目说明&lt;/h2&gt; &#xA;&lt;h3&gt;1.0 更新说明：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.7.31更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加键盘硬件所有设计原理图文件（电路还有些bug没修复，如视频里的飞线，会晚些等新版PCB打样收到验证没问题后更新）&lt;/li&gt; &#xA; &lt;li&gt;添加键盘固件源代码&lt;/li&gt; &#xA; &lt;li&gt;添加Dynamic组件源代码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.1 项目文件说明：&lt;/h3&gt; &#xA;&lt;h4&gt;1.1.1 Hardware&lt;/h4&gt; &#xA;&lt;p&gt;Hardware文件夹内是瀚文键盘里面用到的所有电路的原理图和PCB文件，目前提供的是&lt;a href=&#34;https://oshwhub.com/pengzhihui/helloword-smart-keyboard&#34;&gt;立创EDA专业版&lt;/a&gt;格式的源文件以及Gerber格式的光绘文件用于提供给厂家进行直接加工。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw5.png&#34; alt=&#34;hw0&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;一共有如下几块板子：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Keyboard&lt;/strong&gt;：主键盘的PCB，控制器为STM32F103，可以配合底座单独使用，提供常规按键输入功能，带全按键独立RGB灯。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Ctrl&lt;/strong&gt;：左侧Dynamic组件的PCB，控制器为STM32F405，可以配合底座单独使用，提供FOC力反馈旋钮、电子墨水屏显示、OLED显示、RGB灯等功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Connector&lt;/strong&gt;：主键盘用于连接底座的触点PCB，通过FFC排线与键盘PCB连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Connector-Ctrl&lt;/strong&gt;：Dynamic组件用于连接底座的触点PCB，通过FFC排线与Dynamic组件PCB连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Encoder&lt;/strong&gt;：磁编码器PCB，用于对无刷电机进行位置反馈，需要配合一个径向充磁的永磁铁工作。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Hub1&lt;/strong&gt;：底座上扩展出的两个额外USB-A接口转接PCB，通过FFC排线和TypeC接口板连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Hub2&lt;/strong&gt;：底座上扩展出的两个额外USB-A接口的母座PCB，预留的是USB3.0母座和引脚，但是目前只使用到了2.0接口，未来可以升级到USB3.0的HUB。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-TypeC&lt;/strong&gt;：底座上用于连接电脑的TypeC接口PCB，板载了电源充电管理芯片，以及USB-HUB芯片，通过FFC排线连接其余模块。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-OLED&lt;/strong&gt;：Dynamic组件上OLED屏幕的最小驱动电路以及转接板。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-TouchBar&lt;/strong&gt;：可选的电容触摸条模块PCB，使用6按键电容触摸芯片组成一个线性感应阵列，通过FFC排线和主键盘PCB连接。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1.1.2 Firmware&lt;/h4&gt; &#xA;&lt;p&gt;Firmware中提供了上面所有板子的固件源码，以及&lt;strong&gt;预编译好的bin固件&lt;/strong&gt;可以直接烧录，主要包含以下两个工程：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Keyboard-fw&lt;/strong&gt;：主键盘的固件，主要实现了基于硬件SPI和移位寄存器的高速按键扫描、基于硬件SPI&amp;amp;DMA的总线式RGB灯控制、HID高速设备键盘枚举&amp;amp;报文协议实现、非易失存储配置、多层按键映射等功能。&lt;/li&gt; &#xA; &lt;li&gt;**HelloWord-Dynamic-fw：**Dynamic组件的固件，主要实现了基于FOC的电机控制代码、可配置触感封装类、电子墨水屏驱动、OLED驱动、USB全速复合设备枚举和通信协议、RGB灯控制等功能。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;工程都是基于STM32HAL实现的，所以提供了对应的&lt;code&gt;.ioc&lt;/code&gt;文件，可以自行用STM32CubeMX打开，生成对应的keil或者STM32IDE工程文件。当让也可以像我一样，用CLion或者STM32CubeIDE进行编译和下载。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;_Release&lt;/code&gt;文件夹里是预编译好的bin文件，可以用&lt;strong&gt;ST-Link Utillity&lt;/strong&gt;或者STM32CubeProgrammer之类的软件直接下载到芯片。&lt;/p&gt; &#xA;&lt;p&gt;关于固件的实现细节后文有讲解。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;把CLion变成STM32的IDE的方法参考我之前发的一篇教程：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/145801160&#34;&gt;配置CLion用于STM32开发【优雅の嵌入式开发】&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.1.3 Software&lt;/h4&gt; &#xA;&lt;p&gt;Software中提供了一些用于和键盘交互的电脑端上位机软件，包括视频里演示的傻瓜化修改墨水屏图片的上位机软件，以及后续会逐步补充用于&lt;strong&gt;修改键位的图形化软件&lt;/strong&gt;给&lt;strong&gt;模块添加APP&lt;/strong&gt;的应用商店软件，这些还在开发中。&lt;/p&gt; &#xA;&lt;h4&gt;1.1.4 Tools&lt;/h4&gt; &#xA;&lt;p&gt;Tools主要是提供一些三方的工具软件，比如&lt;strong&gt;STM32 ST-LINK Utility&lt;/strong&gt; 、用于安装驱动的&lt;strong&gt;zadig&lt;/strong&gt;等等。&lt;/p&gt; &#xA;&lt;h4&gt;1.1.5 3D Model&lt;/h4&gt; &#xA;&lt;p&gt;文件夹里是键盘用到的所有结构件的3D模型文件，可以用于3D打印。&lt;/p&gt; &#xA;&lt;h4&gt;1.1.6 Docs&lt;/h4&gt; &#xA;&lt;p&gt;相关的参考文件，包括芯片的Datasheet等。&lt;/p&gt; &#xA;&lt;h2&gt;2. 硬件架构说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于结构设计？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;瀚文的结构包括三大部分：&lt;strong&gt;扩展坞底座&lt;/strong&gt;、&lt;strong&gt;键盘输入模块&lt;/strong&gt;和&lt;strong&gt;可替换的多功能交互模块&lt;/strong&gt;，键盘输入模块和可替换的多功能交互模块通过若干接触式触点连接在所述扩展坞底座顶部：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw2.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;而键盘本体也是一个标准的客制化键盘层叠结构设计，包含减震棉、PCBA、定位板、轴下垫等：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw3.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;键盘的结构设计主要是Xikii根据S98修改而来，为75键布局，有其他布局需要的同学可以自行修改PCB和固件适配。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;关于视频中展示的结构件，由于是Xikii的方案所以我也不好擅自把源文件放出，而且原始版本结构是用于CNC机加工的，成本会比较高。&lt;/p&gt; &#xA; &lt;p&gt;所以我也让Xikii帮忙设计一套简化版可用于3D的结构件，并开源出来放到仓库。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于芯片选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;键盘主控选用的芯片是STM32F103CBT6，实际上C8T6也可以，不过考虑到未来固件功能的扩展性，Flash大一倍的CBT6性价比更高。这块由于我固件基本都是使用HAL库实现的，因此实际上也可以把主控替换成STM32系列的任何一款芯片，需要支芯片有2个SPI硬件接口分别用于按键扫描以及RGB灯驱动，以及一个全速USB接口即可。&lt;/li&gt; &#xA; &lt;li&gt;Dynamic组件主控的STM32F4，这个是因为我手边这款芯片比较多，理论上可以替换为性价比更高的F1系列的，只要芯片具备一个高级定时器用于PWM生成、2个硬件SPI接口用于编码器和电子墨水屏通信、一个I2C接口用于OLED驱动，以及一个全速USB接口即可。&lt;/li&gt; &#xA; &lt;li&gt;电机的磁编码器芯片我是使用AS5047P，也是一款很常用性能很好的磁编码芯片，不过成本略高，我只是因为手边有所以选了这款，也是可以修改为其他更便宜的型号的比如MT6816等，当然也需要修改固件驱动代码。&lt;/li&gt; &#xA; &lt;li&gt;按键扫描用的移位寄存器使用的74HC165，国产芯片零售的话大概0.5元一片，一片可以驱动8个按键，按照你自己需要的按键数目修改串联的寄存器芯片即可。进口的165比如TI原装的要比国产贵一些，性能也会稍微好点，不过由于本项目中按键扫描频率4MHz已经完全够用了，因此哪怕国产的16MHz芯片也绰绰有余了。&lt;/li&gt; &#xA; &lt;li&gt;电容触摸板使用的是一个6通道电容触摸按键芯片XW06A实现的，这个对于PCB感应盘的设计有一定要求，仓库已经提供了设计好的PCB。对于该芯片的读取方式，其实和普通按键没有区别，所以本方案中也是使用74HC165进行扫描读取的。&lt;/li&gt; &#xA; &lt;li&gt;电机FOC驱动电路完全是从我的Ctrl驱动器中移植过来的，使用FD8288Q作为栅极驱动器，无需电流传感器。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于烧录方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用JLink、STLink之类的调试器烧录，我在PCB和外壳上都预留了SWD调试口。对于没有硬件开发经验的同学，我晚点也会放出一个Bootloader，可以直接通过USB口进行固件升级。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于电机选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;我使用的是一个2204的二手电机，不过这一款电机目前好像不太好买，大家可以选取类似尺寸的无刷电机替换，参数方面需要KV值低一些，最好200左右。电机需要手动在转子上安装一个径向充磁的永磁体用于编码器定位，不同型号的电机需要对FOC参数进行一些调整。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw4.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. 软件架构说明&lt;/h2&gt; &#xA;&lt;h2&gt;4. SDK设计 &amp;amp; 二次开发&lt;/h2&gt; &#xA;&lt;p&gt;待补充。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢以下项目：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Lexikos/AutoHotkey_L&#34;&gt;Lexikos/AutoHotkey_L: AutoHotkey - macro-creation and automation-oriented scripting utility for Windows. (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/olikraus/u8g2&#34;&gt;olikraus/u8g2: U8glib library for monochrome displays, version 2 (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC&#34;&gt;simplefoc/Arduino FOC for BLDC (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor&#34;&gt;zhongyang219/TrafficMonitor: 这是一个用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。 (github.com)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>haiwen/seafile</title>
    <updated>2022-08-04T01:35:29Z</updated>
    <id>tag:github.com,2022-08-04:/haiwen/seafile</id>
    <link href="https://github.com/haiwen/seafile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High performance file syncing and sharing, with also Markdown WYSIWYG editing, Wiki, file label and other knowledge management features.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Introduction &lt;a href=&#34;http://travis-ci.org/haiwen/seafile&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/haiwen/seafile.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Seafile is an open source cloud storage system with privacy protection and teamwork features. Collections of files are called libraries. Each library can be synced separately. A library can also be encrypted with a user chosen password. Seafile also allows users to create groups and easily sharing files into groups.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Summary&lt;/h2&gt; &#xA;&lt;p&gt;Seafile has the following features:&lt;/p&gt; &#xA;&lt;h3&gt;File syncing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Selective sync for any folder.&lt;/li&gt; &#xA; &lt;li&gt;Correctly handles file conflicts based on history instead of timestamp.&lt;/li&gt; &#xA; &lt;li&gt;Only transfer content delta to the server. Interrupted transfers can be resumed.&lt;/li&gt; &#xA; &lt;li&gt;Sync with two or more servers.&lt;/li&gt; &#xA; &lt;li&gt;Sync with existing folders.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;File sharing and collaboration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sharing folders between users or into groups.&lt;/li&gt; &#xA; &lt;li&gt;Download links with password protection&lt;/li&gt; &#xA; &lt;li&gt;Upload links&lt;/li&gt; &#xA; &lt;li&gt;Version control&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Drive client&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access all files in the cloud via virtual drive.&lt;/li&gt; &#xA; &lt;li&gt;Files are synced on demand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Privacy protection&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Library encryption with a user chosen password.&lt;/li&gt; &#xA; &lt;li&gt;Client side encryption when using the desktop syncing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Online documents and knowledge management (New)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Online Markdown editing in WYSIWYG way&lt;/li&gt; &#xA; &lt;li&gt;A draft review workflow for online documents&lt;/li&gt; &#xA; &lt;li&gt;Metadata management, including &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;File labels&lt;/li&gt; &#xA;   &lt;li&gt;Related documents&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wiki mode&lt;/li&gt; &#xA; &lt;li&gt;Realtime notifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Source repositories for Seafile components&lt;/h2&gt; &#xA;&lt;p&gt;Each component of Seafile has its own source code repository on Github.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sync client daemon (this repository): &lt;a href=&#34;https://github.com/haiwen/seafile&#34;&gt;https://github.com/haiwen/seafile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sync client GUI: &lt;a href=&#34;https://github.com/haiwen/seafile-client&#34;&gt;https://github.com/haiwen/seafile-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Server core: &lt;a href=&#34;https://github.com/haiwen/seafile-server&#34;&gt;https://github.com/haiwen/seafile-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Server web UI: &lt;a href=&#34;https://github.com/haiwen/seahub&#34;&gt;https://github.com/haiwen/seahub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS app: &lt;a href=&#34;https://github.com/haiwen/seafile-iOS&#34;&gt;https://github.com/haiwen/seafile-iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android app: &lt;a href=&#34;https://github.com/haiwen/seadroid&#34;&gt;https://github.com/haiwen/seadroid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebDAV: &lt;a href=&#34;https://github.com/haiwen/seafdav&#34;&gt;https://github.com/haiwen/seafdav&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before version 6.0, the source code of &#34;sync client daemon&#34; and &#34;server core&#34; was mixed together in &lt;a href=&#34;https://github.com/haiwen/seafile&#34;&gt;https://github.com/haiwen/seafile&lt;/a&gt;. But after 6.0 version, the server core is separated into its own repository. For this reason, the sync client daemon repository is still the &#34;front page&#34; for Seafile project on Github.&lt;/p&gt; &#xA;&lt;h1&gt;Build and Run&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://manual.seafile.com/build_seafile/server&#34;&gt;https://manual.seafile.com/build_seafile/server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bug and Feature Request Reports&lt;/h1&gt; &#xA;&lt;p&gt;Please only submit bugs in GitHub issues (Pro customers should contact us via Email):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server, Web interface (Seahub) and desktop clients: &lt;a href=&#34;https://github.com/haiwen/seafile/issues&#34;&gt;https://github.com/haiwen/seafile/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android client: &lt;a href=&#34;https://github.com/haiwen/seadroid/issues&#34;&gt;https://github.com/haiwen/seadroid/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS client: &lt;a href=&#34;https://github.com/haiwen/seafile-iOS/issues&#34;&gt;https://github.com/haiwen/seafile-iOS/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feature requests can be made and installation/usage problems can be discussed in the forum &lt;a href=&#34;https://forum.seafile.com/&#34;&gt;https://forum.seafile.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Internationalization (I18n)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haiwen/seafile/wiki/Seahub-Translation&#34;&gt;Translate Seafile web ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haiwen/seafile-client/#internationalization&#34;&gt;Translate Seafile desktop client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haiwen/seadroid#internationalization&#34;&gt;Translate Seafile Android app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haiwen/seafile-ios#internationalization-i18n&#34;&gt;Translate Seafile iOS app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Change Logs&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://manual.seafile.com/changelog/server-changelog/&#34;&gt;https://manual.seafile.com/changelog/server-changelog/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Why Open Source&lt;/h1&gt; &#xA;&lt;p&gt;Our primary goal is to build a first-class product. We think this goal can only be achieved by collaborating with the whole world.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;For more information read &lt;a href=&#34;https://manual.seafile.com/contribution/&#34;&gt;Contribution&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seafile iOS client: Apache License v2&lt;/li&gt; &#xA; &lt;li&gt;Seafile Android client: GPLv3&lt;/li&gt; &#xA; &lt;li&gt;Desktop syncing client (this repository): GPLv2&lt;/li&gt; &#xA; &lt;li&gt;Seafile Server core: AGPLv3&lt;/li&gt; &#xA; &lt;li&gt;Seahub (Seafile server Web UI): Apache License v2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;Twitter: @seafile &lt;a href=&#34;https://twitter.com/seafile&#34;&gt;https://twitter.com/seafile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Forum: &lt;a href=&#34;https://forum.seafile.com&#34;&gt;https://forum.seafile.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HVML/PurC</title>
    <updated>2022-08-04T01:35:29Z</updated>
    <id>tag:github.com,2022-08-04:/HVML/PurC</id>
    <link href="https://github.com/HVML/PurC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The prime HVML interpreter for C Language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PurC&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;PurC&lt;/code&gt; is the prime HVML interpreter for C language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#building-purc&#34;&gt;Building PurC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#using-purc&#34;&gt;Using &lt;code&gt;purc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#hacking-purc&#34;&gt;Hacking PurC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#authors-and-contributors&#34;&gt;Authors and Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#copying&#34;&gt;Copying&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/#tradmarks&#34;&gt;Tradmarks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;HVML&lt;/code&gt; is a new-style and general-purpose programming language proposed by &lt;a href=&#34;https://github.com/VincentWei&#34;&gt;Vincent Wei&lt;/a&gt;, who is the author of the China-first open source project - &lt;a href=&#34;http:/www.minigui.com&#34;&gt;MiniGUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PurC&lt;/code&gt; is the acronym of &lt;code&gt;the Prime HVML inteRpreter for C language&lt;/code&gt;. It is also the abbreviation of &lt;code&gt;Purring Cat&lt;/code&gt;, while &lt;code&gt;Purring Cat&lt;/code&gt; is the nickname and the mascot of HVML.&lt;/p&gt; &#xA;&lt;p&gt;The goal of PurC is to implement all features defined by &lt;a href=&#34;https://github.com/HVML/hvml-docs/raw/master/zh/hvml-spec-v1.0-zh.md&#34;&gt;HVML Specifiction V1.0&lt;/a&gt; and all predefined dynamic variables defined by &lt;a href=&#34;https://github.com/HVML/hvml-docs/raw/master/zh/hvml-spec-predefined-variables-v1.0-zh.md&#34;&gt;HVML Predefined Variables V1.0&lt;/a&gt; in C language.&lt;/p&gt; &#xA;&lt;p&gt;You can use PurC to run an HVML program or an HVML app by using the command line tool &lt;code&gt;purc&lt;/code&gt;, or use PurC as a library to build your own HVML interpreter.&lt;/p&gt; &#xA;&lt;p&gt;We release PurC under LGPLv3, so it is free for commercial use if you follow the conditions and terms of LGPLv3.&lt;/p&gt; &#xA;&lt;p&gt;By now, PurC provides support for Linux and macOS. The support for Windows is on the way. We welcome anyone to port PurC to other platforms.&lt;/p&gt; &#xA;&lt;p&gt;For more information about HVML, please refer to the article (10% complete):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HVML/hvml-docs/raw/master/en/an-introduction-to-hvml-en.md&#34;&gt;HVML, a Programable Markup Language&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn the basic concepts about HVML programming, please refer to the following tutorial (80% complete):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HVML/hvml-docs/raw/master/en/learn-hvml-programming-in-30-minutes-en.md&#34;&gt;Learn HVML Programming in 30 Minutes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For specifications and open source software related to HVML, please refer to the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HVML Documents: &lt;a href=&#34;https://github.com/HVML/hvml-docs&#34;&gt;https://github.com/HVML/hvml-docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PurC (the Prime hVml inteRpreter for C language): &lt;a href=&#34;https://github.com/HVML/PurC&#34;&gt;https://github.com/HVML/PurC&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PurC Fetcher (the remote data fetcher for PurC): &lt;a href=&#34;https://github.com/HVML/PurC-Fetcher&#34;&gt;https://github.com/HVML/PurC-Fetcher&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;DOM Ruler (A library to maintain a DOM tree, lay out and stylize the DOM elements by using CSS): &lt;a href=&#34;https://github.com/HVML/DOM-Ruler&#34;&gt;https://github.com/HVML/DOM-Ruler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;xGUI Pro (an advanced HVML renderer based on WebKit): &lt;a href=&#34;https://github.com/HVML/xGUI-Pro&#34;&gt;https://github.com/HVML/xGUI-Pro&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PurC Midnight Commander (an HVML renderer in text-mode): &lt;a href=&#34;https://github.com/HVML/PurC-Midnight-Commander&#34;&gt;https://github.com/HVML/PurC-Midnight-Commander&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building PurC&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequistes&lt;/h3&gt; &#xA;&lt;p&gt;To build PurC, make sure that the following tools or libraries are available on your Linux or macOS system:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;cmake&lt;/li&gt; &#xA; &lt;li&gt;GCC 8.0 or later.&lt;/li&gt; &#xA; &lt;li&gt;glib 2.44.0 or later.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.&lt;/li&gt; &#xA; &lt;li&gt;BISON 3.0 or later.&lt;/li&gt; &#xA; &lt;li&gt;FLEX 2.6.4 or later.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Althrough the port for Windows is still on the way, it is possible to build PurC on Windows 10 version 2004 or later: You can install WSL (Windows Subsystem for Linux) and a Linux distribution, e.g., Ubuntu, on your Windows system, then build PurC in Ubuntu environment.&lt;/p&gt; &#xA;&lt;h3&gt;Building steps&lt;/h3&gt; &#xA;&lt;p&gt;We assume that you are using Linux.&lt;/p&gt; &#xA;&lt;p&gt;After fetched the source of PurC, you can change to the root of the source treen, and use the fillowing command line to build and install PurC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPORT=Linux -B build &amp;amp;&amp;amp; cmake --build build &amp;amp;&amp;amp; sudo cmake --install build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command line consists of the following commands:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPORT=Linux -B build&lt;/code&gt;: Change to the &lt;code&gt;build/&lt;/code&gt; subdirectory and run &lt;code&gt;cmake&lt;/code&gt; to generate the building files to build PurC. Note that this command uses the following options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;-DCMAKE_BUILD_TYPE=RelWithDebInfo&lt;/code&gt;: Specify the building type is &lt;code&gt;RelWithDebInfo&lt;/code&gt;. You can also use &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Release&lt;/code&gt; and other options supported by &lt;code&gt;cmake&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-DPORT=Linux&lt;/code&gt;: Tell &lt;code&gt;cmake&lt;/code&gt; you are building PurC for an operating system based on Linux kernel. Use &lt;code&gt;-DPORT=Mac&lt;/code&gt; if you are using macOS.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-B build&lt;/code&gt;: Generate building files in &lt;code&gt;build/&lt;/code&gt; subdirectory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake --build build&lt;/code&gt;: Build PurC in &lt;code&gt;build/&lt;/code&gt; subdirectory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo cmake --install build&lt;/code&gt;: Install PurC from &lt;code&gt;build/&lt;/code&gt; subdirectory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also use the following commands to build and install PurC step by step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd &amp;lt;path/to/the/root/of/the/source/tree/of/PurC&amp;gt;&#xA;$ rm -rf build/&#xA;$ mkdir build/&#xA;$ cd build/&#xA;$ cmake -DCMAKE_BUILD_TYPE=Release -DPORT=Linux ..&#xA;$ make -j4&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the above commands will build PurC and install the headers, libraries, executables, and some documents to your system (under &lt;code&gt;/usr/local/&lt;/code&gt; directory if you are using Linux system).&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;PurC uses the following environment variables for different purposes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PURC_DVOBJS_PATH&lt;/code&gt;: the path to save the shared modules for external dynamic objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PURC_EXECUTOR_PATH&lt;/code&gt;: the path to save the shared modules for external executors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PURC_FETCHER_EXEC_PATH&lt;/code&gt;: the path to save the executable program of PurC Fetcher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PURC_USER_DIR_SUFFIX&lt;/code&gt;: The directory suffix for user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PURC_LOG_ENABLE&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if enable the global log facility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PURC_LOG_SYSLOG&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if enable to use syslog as the log facility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;purc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The following sections assume that you have installed PurC to your system, and the command line tool &lt;code&gt;purc&lt;/code&gt; has been installed into &lt;code&gt;/usr/local/bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Run a single HVML program&lt;/h3&gt; &#xA;&lt;p&gt;Please save the following contents in a file named &lt;code&gt;hello.hvml&lt;/code&gt; as your first HVML program in your working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hvml&#34;&gt;&amp;lt;!DOCTYPE hvml&amp;gt;&#xA;&amp;lt;hvml target=&#34;void&#34;&amp;gt;&#xA;&#xA;    $STREAM.stdout.writelines(&#39;Hello, world!&#39;)&#xA;&#xA;&amp;lt;/hvml&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run this HVML program, you can use &lt;code&gt;purc&lt;/code&gt; in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc hello.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see that your first HVML program prints &lt;code&gt;Hello, world!&lt;/code&gt; on your terminal and quit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello, world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run this HVML program directly as a script if you prepend the following line as the first line in your HVML program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/purc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, run the following command to change the mode of the file to have the executing permission:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x hello.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run &lt;code&gt;hello.hvml&lt;/code&gt; directly from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./hello.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run multiple HVML programs in parallel&lt;/h3&gt; &#xA;&lt;p&gt;PurC can run multiple HVML programs as coroutines in parallel.&lt;/p&gt; &#xA;&lt;p&gt;For example, we enhance the first HVML program to print &lt;code&gt;Hello, world!&lt;/code&gt; 10 times:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hvml&#34;&gt;&amp;lt;!DOCTYPE hvml&amp;gt;&#xA;&amp;lt;hvml target=&#34;void&#34;&amp;gt;&#xA;    &amp;lt;iterate on 0 onlyif $L.lt($0&amp;lt;, 10) with $EJSON.arith(&#39;+&#39;, $0&amp;lt;, 1) nosetotail &amp;gt;&#xA;        $STREAM.stdout.writelines(&#xA;                $STR.join($0&amp;lt;, &#34;) Hello, world! --from COROUTINE-&#34;, $CRTN.cid))&#xA;    &amp;lt;/iterate&amp;gt;&#xA;&amp;lt;/hvml&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assume you named the enhanced version as &lt;code&gt;hello-10.hvml&lt;/code&gt;, we can run the two program as two coroutines in parallel by specifying the command line flag &lt;code&gt;-l&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc -l hello-10.hvml hello-10.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see the following output on your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0) Hello, world! -- from COROUTINE-3&#xA;0) Hello, world! -- from COROUTINE-4&#xA;1) Hello, world! -- from COROUTINE-3&#xA;1) Hello, world! -- from COROUTINE-4&#xA;2) Hello, world! -- from COROUTINE-3&#xA;2) Hello, world! -- from COROUTINE-4&#xA;3) Hello, world! -- from COROUTINE-3&#xA;3) Hello, world! -- from COROUTINE-4&#xA;4) Hello, world! -- from COROUTINE-3&#xA;4) Hello, world! -- from COROUTINE-4&#xA;5) Hello, world! -- from COROUTINE-3&#xA;5) Hello, world! -- from COROUTINE-4&#xA;6) Hello, world! -- from COROUTINE-3&#xA;6) Hello, world! -- from COROUTINE-4&#xA;7) Hello, world! -- from COROUTINE-3&#xA;7) Hello, world! -- from COROUTINE-4&#xA;8) Hello, world! -- from COROUTINE-3&#xA;8) Hello, world! -- from COROUTINE-4&#xA;9) Hello, world! -- from COROUTINE-3&#xA;9) Hello, world! -- from COROUTINE-4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above output, &lt;code&gt;COROUTINE-3&lt;/code&gt; and &lt;code&gt;COROUTINE-4&lt;/code&gt; contain the coroutine identifier assigned by PurC for two running instances of the program. You see that PurC schedules the running instances to execute alternately, i.e., in the manner of coroutines.&lt;/p&gt; &#xA;&lt;p&gt;If you do not use the flag &lt;code&gt;-l&lt;/code&gt; in the command line, &lt;code&gt;purc&lt;/code&gt; will run the programs one by one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ purc hello-10.hvml hello-10.hvml&#xA;0) Hello, world! -- from COROUTINE-3&#xA;1) Hello, world! -- from COROUTINE-3&#xA;2) Hello, world! -- from COROUTINE-3&#xA;3) Hello, world! -- from COROUTINE-3&#xA;4) Hello, world! -- from COROUTINE-3&#xA;5) Hello, world! -- from COROUTINE-3&#xA;6) Hello, world! -- from COROUTINE-3&#xA;7) Hello, world! -- from COROUTINE-3&#xA;8) Hello, world! -- from COROUTINE-3&#xA;9) Hello, world! -- from COROUTINE-3&#xA;0) Hello, world! -- from COROUTINE-4&#xA;1) Hello, world! -- from COROUTINE-4&#xA;2) Hello, world! -- from COROUTINE-4&#xA;3) Hello, world! -- from COROUTINE-4&#xA;4) Hello, world! -- from COROUTINE-4&#xA;5) Hello, world! -- from COROUTINE-4&#xA;6) Hello, world! -- from COROUTINE-4&#xA;7) Hello, world! -- from COROUTINE-4&#xA;8) Hello, world! -- from COROUTINE-4&#xA;9) Hello, world! -- from COROUTINE-4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting to HVML renderer&lt;/h3&gt; &#xA;&lt;p&gt;One of important differences between HVML and other programming languages is that HVML can generate documents described in markup languages like HTML, not just output data to a file or your terminal.&lt;/p&gt; &#xA;&lt;p&gt;For your convenience, we have prepared some HVML samples in the directory &lt;code&gt;Source/Samples/hvml&lt;/code&gt; of this repository. After building PurC, the samples will be copied to the building root directory, under &lt;code&gt;hvml/&lt;/code&gt; subdirectroy, so that you can change to the building root directory and use &lt;code&gt;purc&lt;/code&gt; to run the samples. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd &amp;lt;path/to/the/building/directory/&amp;gt;&#xA;$ purc hvml/fibonacci-void-temp.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This HVML program will output 18 Fibonacci numbers less than 2000. There is also another version of this program: &lt;code&gt;hvml/fibonacci-html-temp.hvml&lt;/code&gt;. It will generate a HTML document listing the Fibonacci numbers.&lt;/p&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;hvml/fibonacci-html-temp.hvml&lt;/code&gt; program by using &lt;code&gt;purc&lt;/code&gt; without any option, &lt;code&gt;purc&lt;/code&gt; will use the renderer called &lt;code&gt;HEADLESS&lt;/code&gt;. This renderer will record the messages sent by PurC to the renderer to a local file, it is &lt;code&gt;/dev/null&lt;/code&gt; by default on Linux. Because this HVML program did not use &lt;code&gt;$STREM.stdout&lt;/code&gt; any more, you will see nothing on your terminal. But you can use the option &lt;code&gt;--verbose&lt;/code&gt; (or the short option &lt;code&gt;-b&lt;/code&gt;) to show the HTML contents generated by the HVML program in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc -b hvml/fibonacci-html-temp.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command will give you the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;purc 0.8.0&#xA;Copyright (C) 2022 FMSoft Technologies.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.&#xA;&#xA;Executing HVML program from `file:///srv/devel/hvml/purc/build/hvml/fibonacci-html-temp.hvml`...&#xA;&#xA;&amp;gt;&amp;gt; The document generated:&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;&#xA;      Fibonacci Numbers&#xA;    &amp;lt;/title&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body id=&#34;theBody&#34;&amp;gt;&#xA;    &amp;lt;h1&amp;gt;&#xA;      Fibonacci Numbers less than 2000&#xA;    &amp;lt;/h1&amp;gt;&#xA;    &amp;lt;ol&amp;gt;&#xA;      &amp;lt;li&amp;gt; 0 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 1 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 1 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 2 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 3 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 5 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 8 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 13 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 21 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 34 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 55 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 89 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 144 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 233 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 377 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 610 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 987 &amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt; 1597 &amp;lt;/li&amp;gt;&#xA;    &amp;lt;/ol&amp;gt;&#xA;    &amp;lt;p&amp;gt;&#xA;      Totally 18 numbers&#xA;    &amp;lt;/p&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&#xA;&#xA;&amp;gt;&amp;gt; The executing result:&#xA;[18, 1597L]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also direct &lt;code&gt;purc&lt;/code&gt; to connect to a real renderer, for example, &lt;code&gt;xGUI Pro&lt;/code&gt;. It is an advanced HVML renderer based on WebKit.&lt;/p&gt; &#xA;&lt;p&gt;Assume that you have installed xGUI Pro on your system, you can run &lt;code&gt;purc&lt;/code&gt; to show the ultimate HTML contents in a window of xGUI Pro. Please refer to &lt;a href=&#34;https://github.com/HVML/xGUI-Pro&#34;&gt;https://github.com/HVML/xGUI-Pro&lt;/a&gt; for detailed instructions to install xGUI Pro.&lt;/p&gt; &#xA;&lt;p&gt;Assume that you have started xGUI Pro from another terminal, then please run &lt;code&gt;purc&lt;/code&gt; with the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc --rdr-prot=purcmc hvml/fibonacci-html-temp.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see that the contents in a window of xGUI Pro created by &lt;code&gt;hvml/fibonacci-html-temp.hvml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.fmsoft.cn/hvml/screenshots/fibonacci-html-temp.png&#34; alt=&#34;fibonacci-html-temp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a complete HVML program which gives a better experience, you can try to run another sample called &lt;code&gt;hvml/calculator-bc.hvml&lt;/code&gt;, which implements an arbitrary precision calculator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc -p purcmc hvml/calculator-bc.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the screenshot of &lt;code&gt;hvml/calculator-bc.hvml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.fmsoft.cn/hvml/screenshots/calculator-bc.png&#34; alt=&#34;the Arbitrary Precision Calculator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or run &lt;code&gt;hvml/planetary-resonance-lines.hvml&lt;/code&gt;, which shows the Planetary Resonance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc -p purcmc hvml/planetary-resonance-lines.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the screenshot of &lt;code&gt;hvml/planetary-resonance-lines.hvml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.fmsoft.cn/hvml/screenshots/planetary-resonance.png&#34; alt=&#34;the Planetary Resonance&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Options for &lt;code&gt;purc&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can see the all options supported by &lt;code&gt;purc&lt;/code&gt; when you run &lt;code&gt;purc&lt;/code&gt; with &lt;code&gt;-h&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc -h&#xA;purc (0.8.0) - a standalone HVML interpreter/debugger based-on PurC.&#xA;&#xA;Usage: purc [ options ... ] [ file | url ] ... | [ app_desc_json | app_desc_ejson ]&#xA;&#xA;The following options can be supplied to the command:&#xA;&#xA;  -a --app=&amp;lt; app_name &amp;gt;&#xA;        Execute with the specified app name (default value is `cn.fmsoft.html.purc`).&#xA;&#xA;  -r --runner=&amp;lt; runner_name &amp;gt;&#xA;        Execute with the specified runner name (default value is `main`).&#xA;&#xA;  -d --data-fetcher=&amp;lt; local | remote &amp;gt;&#xA;        The data fetcher; use `local` or `remote`.&#xA;            - `local`: use the built-in data fetcher, and only `file://` URLs&#xA;               supported.&#xA;            - `remote`: use the remote data fetcher to support more URL schemas,&#xA;               such as `http`, `https`, `ftp` and so on.&#xA;&#xA;  -p --rdr-prot=&amp;lt; headless | purcmc &amp;gt;&#xA;        The renderer protocol; use `headless` (default) or `purcmc`.&#xA;            - `headless`: use the built-in HEADLESS renderer.&#xA;            - `purcmc`: use the remote PURCMC renderer;&#xA;              `purc` will connect to the renderer via Unix Socket or WebSocket.&#xA;&#xA;  -u --rdr-uri=&amp;lt; renderer_uri &amp;gt;&#xA;        The renderer URI:&#xA;            - For the renderer protocol `headleass`,&#xA;              default value is `file:///dev/null`.&#xA;            - For the renderer protocol `purcmc`,&#xA;              default value is `unix:///var/tmp/purcmc.sock`.&#xA;&#xA;  -t --request=&amp;lt; json_file | - &amp;gt;&#xA;        The JSON file contains the request data which will be passed to&#xA;        the HVML programs; use `-` if the JSON data will be given through&#xA;        stdin stream.&#xA;&#xA;  -l --parallel&#xA;        Execute multiple programs in parallel.&#xA;&#xA;  -s --verbose&#xA;        Execute the program(s) with verbose output.&#xA;&#xA;  -c --copying&#xA;        Display detailed copying information and exit.&#xA;&#xA;  -v --version&#xA;        Display version information and exit.&#xA;&#xA;  -h --help&#xA;        This help.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run an HVML app in mutiple runners&lt;/h3&gt; &#xA;&lt;p&gt;PurC supports to run an app in multiple runners. Here one &lt;code&gt;runner&lt;/code&gt; is one thread in the &lt;code&gt;purc&lt;/code&gt; process.&lt;/p&gt; &#xA;&lt;p&gt;For this purpose, you can prepare a JSON file or an eJSON file which defines the app, the runners, and the initial HVML programs to run as coroutines in different runners.&lt;/p&gt; &#xA;&lt;p&gt;The following is a sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;app&#34;: &#34;cn.fmsoft.hvml.sample&#34;,&#xA;    &#34;runners&#34;: [&#xA;        {&#xA;            &#34;runner&#34;: &#34;Products&#34;,&#xA;            &#34;renderer&#34;: { &#34;protocol&#34;: &#34;purcmc&#34;, &#34;uri&#34;: &#34;unix:///var/tmp/purcmc.sock&#34;,&#xA;                &#34;workspaceName&#34;: &#34;default&#34;, &#34;workspaceLayout&#34;: &#34;cn.fmsoft.hvml.sample/layout.html&#34; },&#xA;            &#34;coroutines&#34;: [&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/productlist.hvml&#34;, &#34;request&#34;: {},&#xA;                   &#34;renderer&#34;: { &#34;pageType&#34;: &#34;widget&#34;, &#34;pageName&#34;: &#34;productlist&#34;, &#34;pageGroupId&#34;: &#34;theProductsArea&#34; }&#xA;                },&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/productinfo.hvml&#34;, &#34;request&#34;: { &#34;productId&#34;: 0 },&#xA;                   &#34;renderer&#34;: { &#34;pageType&#34;: &#34;widget&#34;, &#34;pageName&#34;: &#34;productinfo&#34;, &#34;pageGroupId&#34;: &#34;theProductsArea&#34; }&#xA;                }&#xA;            ]&#xA;        },&#xA;        {&#xA;            &#34;runner&#34;: &#34;Customers&#34;,&#xA;            &#34;renderer&#34;: { &#34;protocol&#34;: &#34;purcmc&#34;, &#34;uri&#34;: &#34;unix:///var/tmp/purcmc.sock&#34;,&#xA;                &#34;workspaceName&#34;: &#34;default&#34;, &#34;workspaceLayout&#34;: &#34;cn.fmsoft.hvml.sample/layout.html&#34; },&#xA;            &#34;coroutines&#34;: [&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/customerlist.hvml&#34;, &#34;request&#34;: {},&#xA;                   &#34;renderer&#34;: { &#34;pageType&#34;: &#34;widget&#34;, &#34;pageName&#34;: &#34;customerlist&#34;, &#34;pageGroupId&#34;: &#34;theCustomersArea&#34; }&#xA;                },&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/customerlist.hvml&#34;, &#34;request&#34;: { &#34;customerId&#34;: 0 },&#xA;                   &#34;renderer&#34;: { &#34;pageType&#34;: &#34;widget&#34;, &#34;pageName&#34;: &#34;customerinfo&#34;, &#34;pageGroupId&#34;: &#34;theCustomersArea&#34; }&#xA;                }&#xA;            ]&#xA;        },&#xA;        {&#xA;            &#34;runner&#34;: &#34;Daemons&#34;,&#xA;            &#34;coroutines&#34;: [&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/check-customers.hvml&#34;, &#34;request&#34;: { &#34;interval&#34;: 10 } },&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/check-products.hvml&#34;, &#34;request&#34;: { &#34;interval&#34;: 30 } }&#xA;            ]&#xA;        },&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assume that you prepare all HVML programs and save the above JSON as &lt;code&gt;cn.fmsoft.hvml.sample.json&lt;/code&gt;, you can run &lt;code&gt;purc&lt;/code&gt; in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc cn.fmsoft.hvml.sample.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, when running an app in this way, you can use the command line options in the eJSON file through the variable &lt;code&gt;$OPTS&lt;/code&gt; prepared by &lt;code&gt;purc&lt;/code&gt; when parsing the eJSON file. This gives a typical application of parameterized eJSON introduced by PurC.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can specified the command line options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc --app=cn.fmsoft.hvml.sample my_app.ejson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the option specified by &lt;code&gt;--app&lt;/code&gt; in &lt;code&gt;my_app.ejson&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;app&#34;: &#34;$OPTS.app&#34;,&#xA;    &#34;runners&#34;: [&#xA;        {&#xA;            &#34;runner&#34;: &#34;Products&#34;,&#xA;            &#34;renderer&#34;: { &#34;protocol&#34;: &#34;purcmc&#34;, &#34;uri&#34;: &#34;unix:///var/tmp/purcmc.sock&#34;,&#xA;                &#34;workspaceName&#34;: &#34;default&#34;, &#34;workspaceLayout&#34;: &#34;$OPTS.app/layout.html&#34; },&#xA;            &#34;coroutines&#34;: [&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/productlist.hvml&#34;, &#34;request&#34;: {},&#xA;                   &#34;renderer&#34;: { &#34;pageType&#34;: &#34;widget&#34;, &#34;pageName&#34;: &#34;productlist&#34;, &#34;pageGroupId&#34;: &#34;theProductsArea&#34; }&#xA;                },&#xA;                { &#34;url&#34;: &#34;cn.fmsoft.hvml.sample/productinfo.hvml&#34;, &#34;request&#34;: { &#34;productId&#34;: 0 },&#xA;                   &#34;renderer&#34;: { &#34;pageType&#34;: &#34;widget&#34;, &#34;pageName&#34;: &#34;productinfo&#34;, &#34;pageGroupId&#34;: &#34;theProductsArea&#34; }&#xA;                },&#xA;            ]&#xA;        },&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All occurrences of &lt;code&gt;$OPTS.app&lt;/code&gt; in &lt;code&gt;my_app.ejson&lt;/code&gt; will be subsituted by &lt;code&gt;cn.fmsoft.hvml.sample&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;More HVML samples&lt;/h3&gt; &#xA;&lt;p&gt;You can find more HVML sample programs in respository &lt;a href=&#34;https://github.com/HVML/hvml-docs&#34;&gt;HVML Documents&lt;/a&gt;, under the directory &lt;code&gt;samples/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;purc&lt;/code&gt; to run a sample resided in the remote HVML Documents repository directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc --data-fetcher=remote https://github.com/HVML/hvml-docs/raw/master/samples/fibonacci/fibonacci-6.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the firewall refused to connect to the URL, use the following URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ purc --data-fetcher=remote https://gitlab.fmsoft.cn/hvml/hvml-docs/-/raw/master/samples/fibonacci/fibonacci-6.hvml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when &lt;code&gt;purc&lt;/code&gt; try to load a HVML program from a remote URL, it will use the remote data fetcher by default. Therefore, you must install PurC Fetcher in advance. Please refer to &lt;a href=&#34;https://github.com/HVML/purc-fetcher&#34;&gt;PurC Fetcher&lt;/a&gt; for detailed instructions to build and install PurC Fetcher to your system.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking PurC&lt;/h2&gt; &#xA;&lt;h3&gt;Current Status&lt;/h3&gt; &#xA;&lt;p&gt;This project was launched in June. 2021. This is the version 0.8.0 of PurC.&lt;/p&gt; &#xA;&lt;p&gt;The main purpose of PurC is providing a library for you to write your own HVML interpreter. After one year development, the current version implements almost all features defined by &lt;a href=&#34;https://github.com/HVML/hvml-docs/raw/master/zh/hvml-spec-v1.0-zh.md&#34;&gt;HVML Specifiction V1.0&lt;/a&gt;, and also implements almost all predefined dynamic variables defined by &lt;a href=&#34;https://github.com/HVML/hvml-docs/raw/master/zh/hvml-spec-predefined-variables-v1.0-zh.md&#34;&gt;HVML Predefined Variables V1.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Except for the HVML interpreter, PurC also provides many fundamental features for general C programs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PurC provides the APIs for variant management, here variant is way of HVML program to manage data.&lt;/li&gt; &#xA; &lt;li&gt;PurC provides the APIs for parsing JSON and extended JSON.&lt;/li&gt; &#xA; &lt;li&gt;PurC provides the APIs for parsing and evaluting a parameterized eJSON expression.&lt;/li&gt; &#xA; &lt;li&gt;PurC provides the APIs for parsing a HTML document.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can use these groups of APIs independently according to your needs.&lt;/p&gt; &#xA;&lt;p&gt;We welcome anybody to take part in the development and contribute your effort!&lt;/p&gt; &#xA;&lt;h3&gt;Source Tree of PurC&lt;/h3&gt; &#xA;&lt;p&gt;PurC implements the parser, the interpreter, and some built-in dynamic variant objects for HVML. It is mainly written in C/C++ language and will provide bindings for Python and other script languages in the future.&lt;/p&gt; &#xA;&lt;p&gt;The source tree of PurC contains the following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/include/&lt;/code&gt;: The global header files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/include/private&lt;/code&gt;: The internal common header files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/utils/&lt;/code&gt;: Some basic and common utilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/variant/&lt;/code&gt;: The implementation of variant.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/vcm/&lt;/code&gt;: The operations of variant creation model tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/dvobjs/&lt;/code&gt;: The built-in dynamic variant objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/ejson/&lt;/code&gt;: The implementation of the eJSON parser. The eJSON parser reads an eJSON and constructs a variant creation model tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/dom/&lt;/code&gt;: The implentation of the DOM tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/vdom/&lt;/code&gt;: The implementation of the virtual DOM tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/html/&lt;/code&gt;: The implementation of the HTML parser. The HTML parser reads an HTML document or document fragements and constructs an eDOM tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/hvml/&lt;/code&gt;: The implementation of the HVML parser. The HTML parser reads an HVML document and constructs a vDOM tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/xgml/&lt;/code&gt;: The implementation of the XGML parser (Not implemented so far). The XGML parser reads an XGML document or document fragements and constructs an eDOM tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/xml/&lt;/code&gt;: The XML parser (Not implemented so far). The XML parser parses an XML document or document fragements and constructs an eDOM tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/instance/&lt;/code&gt;: The operations of PurC instances and sessions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/fetchers/&lt;/code&gt;: The data fetchers to fetch data from various data sources (FILE, HTTP, FTP, and so on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/executors/&lt;/code&gt;: The implementation of internal executors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/interpreter/&lt;/code&gt;: The vDOM interpreter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/pcrdr/&lt;/code&gt;: The management of connection to the renderer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/ports/&lt;/code&gt;: The ports for different operating systems, such as a POSIX-compliant system or Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/PurC/bindings/&lt;/code&gt;: The bindings for Python, Lua, and other programming languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/ExtDVObjs/math/&lt;/code&gt;: The implementation of the external dynamic variant object &lt;code&gt;$MATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/ExtDVObjs/fs/&lt;/code&gt;: The implementation of the external dynamic variant object &lt;code&gt;$FS&lt;/code&gt; and &lt;code&gt;$FILE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/WTF/&lt;/code&gt;: The simplified WTF (Web Template Framework) from WebKit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/cmake/&lt;/code&gt;: The cmake modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/ThirdParty/&lt;/code&gt;: The third-party libraries, such as &lt;code&gt;gtest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/test/&lt;/code&gt;: The unit test programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/Samples/api&lt;/code&gt;: Samples for using the API of PurC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/Samples/hvml&lt;/code&gt;: HVML sample programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/Tools/&lt;/code&gt;: The tools (executables), i.e., the command line programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source/Tools/purc&lt;/code&gt;: The standalone HVML interpreter/debugger based-on PurC, which is an interactive command line program.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Documents/&lt;/code&gt;: Some documents for developers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the HTML parser and DOM operations of PurC are derived from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lexbor/lexbor&#34;&gt;Lexbor&lt;/a&gt;, which is licensed under the Apache License, Version 2.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO List&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HVML 1.0 Features not implemented yet.&lt;/li&gt; &#xA; &lt;li&gt;HVML 1.0 Predefined Variables not implemented yet.&lt;/li&gt; &#xA; &lt;li&gt;More tests or test cases.&lt;/li&gt; &#xA; &lt;li&gt;More samples.&lt;/li&gt; &#xA; &lt;li&gt;Port PurC to Windows.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For detailed TODO list, please see &lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/TODO.md&#34;&gt;TODO List&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other documents&lt;/h3&gt; &#xA;&lt;p&gt;For the release notes, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/RELEASE-NOTES.md&#34;&gt;Release Notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the community conduct, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/Documents/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the coding convention, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/HVML/PurC/master/Documents/CODING_CONVENTION.md&#34;&gt;Coding Convention&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors and Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vincent Wei: The architect.&lt;/li&gt; &#xA; &lt;li&gt;XUE Shuming: A key developer, the maintainer of most modules and PurC Fetcher.&lt;/li&gt; &#xA; &lt;li&gt;XU Xiaohong: A key developer, who implemented the most features of variant and most features of HVML interperter.&lt;/li&gt; &#xA; &lt;li&gt;LIU Xin: A developer, the maintainer of the external dynamic variant object &lt;code&gt;FILE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;GENG Yue: A commiter, who implemented some built-in dynamic variant objects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copying&lt;/h2&gt; &#xA;&lt;h3&gt;PurC&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (C) 2021, 2022 &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU Lesser General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ExtDVObjs/fs&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (C) 2022 LIU Xin&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU Lesser General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;purc&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (C) 2022 &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tradmarks&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;HVML&lt;/code&gt; is a registered tradmark of &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt; in China and other contries or regions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.fmsoft.cn/application/files/8116/1931/8777/HVML256132.jpg&#34; alt=&#34;HVML&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;呼噜猫&lt;/code&gt; is a registered tradmark of &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt; in China and other contries or regions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.fmsoft.cn/application/files/8416/1931/8781/256132.jpg&#34; alt=&#34;呼噜猫&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;Purring Cat&lt;/code&gt; is a tradmark of &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt; in China and other contries or regions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.fmsoft.cn/application/files/2816/1931/9258/PurringCat256132.jpg&#34; alt=&#34;Purring Cat&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;PurC&lt;/code&gt; is a tradmark of &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt; in China and other contries or regions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.fmsoft.cn/application/files/5716/2813/0470/PurC256132.jpg&#34; alt=&#34;PurC&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;xGUI&lt;/code&gt; is a tradmark of &lt;a href=&#34;https://www.fmsoft.cn&#34;&gt;FMSoft Technologies&lt;/a&gt; in China and other contries or regions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.fmsoft.cn/application/files/cache/thumbnails/7fbcb150d7d0747e702fd2d63f20017e.jpg&#34; alt=&#34;xGUI&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>