<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-25T02:01:38Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrousavy/react-native-fast-tflite</title>
    <updated>2023-08-25T02:01:38Z</updated>
    <id>tag:github.com,2023-08-25:/mrousavy/react-native-fast-tflite</id>
    <link href="https://github.com/mrousavy/react-native-fast-tflite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üî• High-performance TensorFlow Lite library for React Native with GPU acceleration&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://margelo.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/img/banner.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;react-native-fast-tflite&lt;/h1&gt; &#xA;&lt;p&gt;üî• High-performance &lt;a href=&#34;https://www.tensorflow.org/lite&#34;&gt;TensorFlow Lite&lt;/a&gt; library for React Native.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üî• Powered by JSI&lt;/li&gt; &#xA; &lt;li&gt;üí® Zero-copy ArrayBuffers&lt;/li&gt; &#xA; &lt;li&gt;üîß Uses the low-level C/C++ TensorFlow Lite core API for direct memory access&lt;/li&gt; &#xA; &lt;li&gt;üîÑ Supports fast-refresh for swapping out TensorFlow Models at runtime&lt;/li&gt; &#xA; &lt;li&gt;üñ•Ô∏è Supports GPU-accelerated delegates (CoreML/Metal/OpenGL)&lt;/li&gt; &#xA; &lt;li&gt;üì∏ Easy &lt;a href=&#34;https://github.com/mrousavy/react-native-vision-camera&#34;&gt;VisionCamera&lt;/a&gt; integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the npm package &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add react-native-fast-tflite&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;metro.config.js&lt;/code&gt;, add &lt;code&gt;tflite&lt;/code&gt; as a supported asset extension: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;    // ...&#xA;    resolver: {&#xA;        assetExts: [&#39;tflite&#39;, // ...&#xA;        // ...&#xA;&lt;/code&gt;&lt;/pre&gt; This allows you to drop &lt;code&gt;.tflite&lt;/code&gt; files into your app and swap them out at runtime without having to rebuild anything! üî•&lt;/li&gt; &#xA; &lt;li&gt;(Optional) If you want to enable the GPU Delegate, see &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/#using-gpu-delegates&#34;&gt;&#34;Using GPU Delegates&#34;&lt;/a&gt; down below.&lt;/li&gt; &#xA; &lt;li&gt;Run your app (&lt;code&gt;yarn android&lt;/code&gt; / &lt;code&gt;npx pod-install &amp;amp;&amp;amp; yarn ios&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find a TensorFlow Lite (&lt;code&gt;.tflite&lt;/code&gt;) model you want to use. There&#39;s thousands of public models on &lt;a href=&#34;https://tfhub.dev&#34;&gt;tfhub.dev&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Drag your TensorFlow Lite model into your React Native app&#39;s asset folder (e.g. &lt;code&gt;src/assets/my-model.tflite&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Load the Model: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Option A: Standalone Function&#xA;const model = await loadTensorflowModel(require(&#39;assets/my-model.tflite&#39;))&#xA;&#xA;// Option B: Hook in a Function Component&#xA;const plugin = useTensorflowModel(require(&#39;assets/my-model.tflite&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Call the Model: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const inputData = ...&#xA;const outputData = await model.run(inputData)&#xA;console.log(outputData)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Loading Models&lt;/h3&gt; &#xA;&lt;p&gt;Models can be loaded either from the React Native bundle using a &lt;code&gt;require(..)&lt;/code&gt; statement, or any kind of URI/URL (&lt;code&gt;http://..&lt;/code&gt; or &lt;code&gt;file://..&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Asset from React Native Bundle&#xA;loadTensorflowModel(require(&#39;assets/my-model.tflite&#39;))&#xA;// File on the local filesystem&#xA;loadTensorflowModel(&#39;file:///var/mobile/.../my-model.tflite&#39;)&#xA;// Remote URL&#xA;loadTensorflowModel(&#39;https://tfhub.dev/google/lite-model/object_detection_v1.tflite&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading a Model is asynchronous since Buffers need to be allocated. Make sure to check for any potential errors when loading a Model.&lt;/p&gt; &#xA;&lt;h3&gt;Input and Output data&lt;/h3&gt; &#xA;&lt;p&gt;TensorFlow uses &lt;em&gt;tensors&lt;/em&gt; as input and output formats. Since TensorFlow Lite is optimized to run on fixed array sized byte buffers, you are responsible for interpreting the raw data yourself.&lt;/p&gt; &#xA;&lt;p&gt;To inspect the input and output tensors on your TensorFlow Lite model, open it in &lt;a href=&#34;https://netron.app&#34;&gt;Netron&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the &lt;code&gt;object_detection_mobile_object_localizer_v1_1_default_1.tflite&lt;/code&gt; model I found on &lt;a href=&#34;https://tfhub.dev&#34;&gt;tfhub.dev&lt;/a&gt; has &lt;strong&gt;1 input tensor&lt;/strong&gt; and &lt;strong&gt;4 output tensors&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/img/netron-inspect-model.png&#34; alt=&#34;Screenshot of netron.app inspecting the model&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the description on &lt;a href=&#34;https://tfhub.dev&#34;&gt;tfhub.dev&lt;/a&gt; we can find the description of all tensors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/img/tfhub-description.png&#34; alt=&#34;Screenshot of tfhub.dev inspecting the model&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;From that we now know that we need a 192 x 192 input image with 3 bytes per pixel (meaning RGB).&lt;/p&gt; &#xA;&lt;p&gt;If you were to use this model with a &lt;a href=&#34;https://github.com/mrousavy/react-native-vision-camera&#34;&gt;VisionCamera&lt;/a&gt; Frame Processor, you would need to convert the Frame to this 192 x 192 x 3 byte array. For example, here&#39;s how you can draw red rectangles around an object seen by the Camera in realtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const model = useTensorflowModel(require(&#39;object_detection.tflite&#39;))&#xA;&#xA;const frameProcessor = useFrameProcessor((frame) =&amp;gt; {&#xA;    &#39;worklet&#39;&#xA;    if (model.state !== &#34;loaded&#34;) return&#xA;&#xA;    const data = frame.toArrayBuffer()&#xA;    // do RGB conversion if the Frame is not already in RGB Format&#xA;    const outputs = model.model.runSync([data])&#xA;&#xA;    const detection_boxes = outputs[0]&#xA;    const detection_classes = outputs[1]&#xA;    const detection_scores = outputs[2]&#xA;    const num_detections = outputs[3]&#xA;    console.log(`Detected ${num_detections[0]} objects!`)&#xA;&#xA;    for (let i = 0; i &amp;lt; detection_boxes.length; i += 4) {&#xA;        const confidence = detection_scores[i / 4]&#xA;        if (confidence &amp;gt; 0.7) {&#xA;            // Draw a red box around the object!&#xA;            const left = detection_boxes[i]&#xA;            const top = detection_boxes[i + 1]&#xA;            const right = detection_boxes[i + 2]&#xA;            const bottom = detection_boxes[i + 3]&#xA;            const rect = SkRect.Make(left, top, right, bottom)&#xA;            frame.drawRect(rect, SkColors.Red)&#xA;        }&#xA;    }&#xA;}, [model])&#xA;&#xA;return (&#xA;    &amp;lt;Camera frameProcessor={frameProcessor} {...otherProps} /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using GPU Delegates&lt;/h3&gt; &#xA;&lt;p&gt;GPU Delegates offer faster, GPU accelerated computation. There&#39;s multiple different GPU delegates which you can enable:&lt;/p&gt; &#xA;&lt;h4&gt;CoreML (iOS)&lt;/h4&gt; &#xA;&lt;p&gt;To enable the CoreML Delegate, you need to include the CoreML/Metal code in your project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set &lt;code&gt;$EnableCoreMLDelegate&lt;/code&gt; to true in your &lt;code&gt;Podfile&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$EnableCoreMLDelegate=true&#xA;&#xA;# rest of your podfile...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open your iOS project in Xcode and add the &lt;code&gt;CoreML&lt;/code&gt; framework to your project: &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/img/ios-coreml-guide.png&#34; alt=&#34;Xcode &gt; xcodeproj &gt; General &gt; Frameworks, Libraries and Embedded Content &gt; CoreML&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Re-install Pods and build your app: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ios &amp;amp;&amp;amp; pod install &amp;amp;&amp;amp; cd ..&#xA;yarn ios&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the CoreML Delegate: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const model = await loadTensorflowModel(require(&#39;assets/my-model.tflite&#39;), &#39;core-ml&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Since some operations aren&#39;t supported on the CoreML delegate, make sure your Model is able to use the CoreML GPU delegate.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Adopting at scale&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt; &lt;img align=&#34;right&#34; width=&#34;160&#34; alt=&#34;This library helped you? Consider sponsoring!&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/.github/funding-octocat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This library is provided &lt;em&gt;as is&lt;/em&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re integrating react-native-fast-tflite in a production app, consider &lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt;funding this project&lt;/a&gt; and &lt;a href=&#34;mailto:me@mrousavy.com?subject=Adopting react-native-fast-tflite at scale&#34;&gt;contact me&lt;/a&gt; to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating react-native-fast-tflite and/or VisionCamera Frame Processors, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;Currently, react-native-fast-tflite does not work on Android.&lt;/p&gt; &#xA;&lt;p&gt;The entire codebase is written in C/C++ and can be shared across platforms, but I couldn&#39;t manage to link tensorflow-lite against the NDK/CMake target on Android. This is the only missing piece, so if anyone figures this part out, please let me know/send a PR.&lt;/p&gt; &#xA;&lt;p&gt;My current approach was to use &lt;code&gt;org.tensorflow:tensorflow-lite&lt;/code&gt; from Maven, extract the .so and Headers from the AAR, and then link against those (see &lt;code&gt;android/build.gradle&lt;/code&gt; and &lt;code&gt;android/CMakeLists.txt&lt;/code&gt;). For some reason this gave ABI errors, such as cannot link against linux x64, so for now I just ignored those and finished iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have installed Xcode CLI tools such as &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;python&lt;/code&gt;/&lt;code&gt;python3&lt;/code&gt;. See the TensorFlow documentation on what you need exactly.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn bootstrap&lt;/code&gt; and select &lt;code&gt;y&lt;/code&gt; (yes) on all iOS and Android related questions.&lt;/li&gt; &#xA; &lt;li&gt;Open the Example app and start developing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iOS: &lt;code&gt;example/ios/TfliteExample.xcworkspace&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Android: &lt;code&gt;example/android&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-fast-tflite/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn how to contribute to the repository and the development workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>