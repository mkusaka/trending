<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-08T01:29:52Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ripplebiz/MeshCore</title>
    <updated>2025-07-08T01:29:52Z</updated>
    <id>tag:github.com,2025-07-08:/ripplebiz/MeshCore</id>
    <link href="https://github.com/ripplebiz/MeshCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new lightweight, hybrid routing mesh protocol for packet radios&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About MeshCore&lt;/h2&gt; &#xA;&lt;p&gt;MeshCore is a lightweight, portable C++ library that enables multi-hop packet routing for embedded projects using LoRa and other packet radios. It is designed for developers who want to create resilient, decentralized communication networks that work without the internet.&lt;/p&gt; &#xA;&lt;h2&gt;üîç What is MeshCore?&lt;/h2&gt; &#xA;&lt;p&gt;MeshCore now supports a range of LoRa devices, allowing for easy flashing without the need to compile firmware manually. Users can flash a pre-built binary using tools like Adafruit ESPTool and interact with the network through a serial console. MeshCore provides the ability to create wireless mesh networks, similar to Meshtastic and Reticulum but with a focus on lightweight multi-hop packet routing for embedded projects. Unlike Meshtastic, which is tailored for casual LoRa communication, or Reticulum, which offers advanced networking, MeshCore balances simplicity with scalability, making it ideal for custom embedded solutions., where devices (nodes) can communicate over long distances by relaying messages through intermediate nodes. This is especially useful in off-grid, emergency, or tactical situations where traditional communication infrastructure is unavailable.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö° Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-Hop Packet Routing ‚Äì Devices can forward messages across multiple nodes, extending range beyond a single radio&#39;s reach. MeshCore supports up to a configurable number of hops to balance network efficiency and prevent excessive traffic.&lt;/li&gt; &#xA; &lt;li&gt;Supports LoRa Radios ‚Äì Works with Heltec, RAK Wireless, and other LoRa-based hardware.&lt;/li&gt; &#xA; &lt;li&gt;Decentralized &amp;amp; Resilient ‚Äì No central server or internet required; the network is self-healing.&lt;/li&gt; &#xA; &lt;li&gt;Low Power Consumption ‚Äì Ideal for battery-powered or solar-powered devices.&lt;/li&gt; &#xA; &lt;li&gt;Simple to Deploy ‚Äì Pre-built example applications make it easy to get started.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéØ What Can You Use MeshCore For?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Off-Grid Communication: Stay connected even in remote areas.&lt;/li&gt; &#xA; &lt;li&gt;Emergency Response &amp;amp; Disaster Recovery: Set up instant networks where infrastructure is down.&lt;/li&gt; &#xA; &lt;li&gt;Outdoor Activities: Hiking, camping, and adventure racing communication.&lt;/li&gt; &#xA; &lt;li&gt;Tactical &amp;amp; Security Applications: Military, law enforcement, and private security use cases.&lt;/li&gt; &#xA; &lt;li&gt;IoT &amp;amp; Sensor Networks: Collect data from remote sensors and relay it back to a central location.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ How to Get Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Watch the &lt;a href=&#34;https://www.youtube.com/watch?v=t1qne8uJBAc&#34;&gt;MeshCore Intro Video&lt;/a&gt; by Andy Kirby.&lt;/li&gt; &#xA; &lt;li&gt;Read through our &lt;a href=&#34;https://raw.githubusercontent.com/ripplebiz/MeshCore/main/docs/faq.md&#34;&gt;Frequently Asked Questions&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Flash the MeshCore firmware on a supported device.&lt;/li&gt; &#xA; &lt;li&gt;Connect with a supported client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For developers;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.platformio.org&#34;&gt;PlatformIO&lt;/a&gt; in &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone and open the MeshCore repository in Visual Studio Code.&lt;/li&gt; &#xA; &lt;li&gt;See the example applications you can modify and run: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ripplebiz/MeshCore/main/examples/companion_radio&#34;&gt;Companion Radio&lt;/a&gt; - For use with an external chat app, over BLE, USB or WiFi.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ripplebiz/MeshCore/main/examples/simple_repeater&#34;&gt;Simple Repeater&lt;/a&gt; - Extends network coverage by relaying messages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ripplebiz/MeshCore/main/examples/simple_room_server&#34;&gt;Simple Room Server&lt;/a&gt; - A simple BBS server for shared Posts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ripplebiz/MeshCore/main/examples/simple_secure_chat&#34;&gt;Simple Secure Chat&lt;/a&gt; - Secure terminal based text communication between devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Simple Secure Chat example can be interacted with through the Serial Monitor in Visual Studio Code, or with a Serial USB Terminal on Android.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è MeshCore Flasher&lt;/h2&gt; &#xA;&lt;p&gt;We have prebuilt firmware ready to flash on supported devices.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch &lt;a href=&#34;https://flasher.meshcore.co.uk&#34;&gt;https://flasher.meshcore.co.uk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select a supported device&lt;/li&gt; &#xA; &lt;li&gt;Flash one of the firmware types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Companion, Repeater or Room Server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Once flashing is complete, you can connect with one of the MeshCore clients below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì± MeshCore Clients&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Companion Firmware&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The companion firmware can be connected to via BLE, USB or WiFi depending on the firmware type you flashed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web: &lt;a href=&#34;https://app.meshcore.nz&#34;&gt;https://app.meshcore.nz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.liamcottle.meshcore.android&#34;&gt;https://play.google.com/store/apps/details?id=com.liamcottle.meshcore.android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS: &lt;a href=&#34;https://apps.apple.com/us/app/meshcore/id6742354151?platform=iphone&#34;&gt;https://apps.apple.com/us/app/meshcore/id6742354151?platform=iphone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NodeJS: &lt;a href=&#34;https://github.com/liamcottle/meshcore.js&#34;&gt;https://github.com/liamcottle/meshcore.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://github.com/fdlamotte/meshcore-cli&#34;&gt;https://github.com/fdlamotte/meshcore-cli&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Repeater and Room Server Firmware&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The repeater and room server firmwares can be setup via USB in the web config tool.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://config.meshcore.dev&#34;&gt;https://config.meshcore.dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They can also be managed via LoRa in the mobile app by using the Remote Management feature.&lt;/p&gt; &#xA;&lt;h2&gt;üõ† Hardware Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;MeshCore is designed for devices listed in the &lt;a href=&#34;https://flasher.meshcore.co.uk&#34;&gt;MeshCore Flasher&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìú License&lt;/h2&gt; &#xA;&lt;p&gt;MeshCore is open-source software released under the MIT License. You are free to use, modify, and distribute it for personal and commercial projects.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit PR&#39;s using &#39;dev&#39; as the base branch! For minor changes just submit your PR and I&#39;ll try to review it, but for anything more &#39;impactful&#39; please open an Issue first and start a discussion. Is better to sound out what it is you want to achieve first, and try to come to a consensus on what the best approach is, especially when it impacts the structure or architecture of this codebase.&lt;/p&gt; &#xA;&lt;p&gt;Here are some general principals you should try to adhere to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep it simple. Please, don&#39;t think like a high-level lang programmer. Think embedded, and keep code concise, without any unecessary layers.&lt;/li&gt; &#xA; &lt;li&gt;No dynamic memory allocation, except during setup/begin functions.&lt;/li&gt; &#xA; &lt;li&gt;Use the same brace and indenting style that&#39;s in the core source modules. (A .clang-format is prob going to be added soon, but please do NOT retroactively re-format existing code. This just creates unnecessary diffs that make finding problems harder)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìû Get Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs and request features on the &lt;a href=&#34;https://github.com/ripplebiz/MeshCore/issues&#34;&gt;GitHub Issues&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Find additional guides and components on &lt;a href=&#34;https://buymeacoffee.com/ripplebiz&#34;&gt;my site&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Join &lt;a href=&#34;https://discord.gg/GBxVx2JMAy&#34;&gt;Andy Kirby&#39;s Discord&lt;/a&gt; to chat with the developers and get help from the community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RAK Wireless Board Support in PlatformIO&lt;/h2&gt; &#xA;&lt;p&gt;Before building/flashing the RAK4631 targets in this project, there is, unfortunately, some patching you have to do to your platformIO packages to make it work. There is a guide here on the process: &lt;a href=&#34;https://learn.rakwireless.com/hc/en-us/articles/26687276346775-How-To-Perform-Installation-of-Board-Support-Package-in-PlatformIO&#34;&gt;RAK Wireless: How to Perform Installation of Board Support Package in PlatformIO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After building, you will need to convert the output firmware.hex file into a .uf2 file you can copy over to your RAK4631 device (after doing a full erase) by using the command &lt;code&gt;uf2conv.py -f 0xADA52840 -c firmware.hex&lt;/code&gt; with the python script available from: &lt;a href=&#34;https://github.com/Microsoft/uf2/raw/master/utils/uf2conv.py&#34;&gt;GitHub: Microsoft - uf2&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manaskamal/XenevaOS</title>
    <updated>2025-07-08T01:29:52Z</updated>
    <id>tag:github.com,2025-07-08:/manaskamal/XenevaOS</id>
    <link href="https://github.com/manaskamal/XenevaOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Xeneva Operating System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XenevaOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/YNsY7hhQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1255326572617924618?label=Discord&amp;amp;logo=discord&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/manaskamal/XenevaOS/raw/master/XeLogo.jpg?raw=true&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;XenevaOS is an operating system built from scratch targeted at modern hardware. The OS is designed for both x86 and ARM architecture with plans for RISC-V implementation in the near future as well. Our OS is built on our very own hybrid kernel known&amp;nbsp;as&amp;nbsp;&lt;em&gt;&#39;Aurora&#39;&lt;/em&gt;.&lt;br&gt; Please visit &lt;a href=&#34;https://raw.githubusercontent.com/manaskamal/XenevaOS/master/Docs/BuildInstructions.md&#34;&gt;Build Instructions&lt;/a&gt; to build the project&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/manaskamal/XenevaOS/master/Docs/Introduction.md&#34;&gt;Documentations of XenevaOS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to the project&lt;/h2&gt; &#xA;&lt;p&gt;XenevaOS is an open-source project that welcomes contributions from developers, researchers, and enthusiasts who are passionate about low level system development. Whether you&#39;re intereseted in Kernel development, driver development, low level graphics or application level features there are many ways to get involved. We encourage contributions in the form of code, documentation, bug reports, and feature suggestions. If you&#39;re interested in contributing, check out out &lt;a href=&#34;https://raw.githubusercontent.com/manaskamal/XenevaOS/master/Docs/Contributing.md&#34;&gt;Contribution Guideline&lt;/a&gt;, explore open issues, and join the discussion to help shape the project.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Features&lt;/strong&gt; :&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ACPI (through acpica)&lt;/li&gt; &#xA; &lt;li&gt;x64 and arm64 Kernel&lt;/li&gt; &#xA; &lt;li&gt;Fully Higher Half Memory with MMIO mappings&lt;/li&gt; &#xA; &lt;li&gt;Driver &lt;em&gt;loading and linking&lt;/em&gt; through dll files&lt;/li&gt; &#xA; &lt;li&gt;SSE/SSE3&lt;/li&gt; &#xA; &lt;li&gt;USB3&lt;/li&gt; &#xA; &lt;li&gt;Intel High Definition Audio&lt;/li&gt; &#xA; &lt;li&gt;Multiprocessor support (muliprocessor scheduler not ready !!)&lt;/li&gt; &#xA; &lt;li&gt;Application loader and dynamic library (shared library)&lt;/li&gt; &#xA; &lt;li&gt;Freetype2 as font rendering engine&lt;/li&gt; &#xA; &lt;li&gt;Compositing Window Manager called &#34;Deodhai&#34;&lt;/li&gt; &#xA; &lt;li&gt;Graphics Library known as &#34;Chitralekha&#34;&lt;/li&gt; &#xA; &lt;li&gt;Xeneva Terminal with basic ANSI/VT100 escape sequence support&lt;/li&gt; &#xA; &lt;li&gt;Desktop environment called Namdapha Desktop&lt;/li&gt; &#xA; &lt;li&gt;Storage supports : AHCI/SATA, NVMe&lt;/li&gt; &#xA; &lt;li&gt;USB3 Class drivers (USB HID Mouse, USB Tablet, USB MSC driver) ..etc&lt;/li&gt; &#xA; &lt;li&gt;Audio Server called &#34;Deodhai-Audio&#34; with (44kHz/16bit audio format, stereo/mono panning, gain control)&lt;/li&gt; &#xA; &lt;li&gt;Networking (IPv4, UDP/IP, TCP/IP, ICMP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;And many more coming soon&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/manaskamal/XenevaOS/raw/master/XenevaV1_1.png?raw=true&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AppTray:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/manaskamal/XenevaOS/raw/master/apptray.png?raw=true&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installed Applications :&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio player called Accent Player&lt;/li&gt; &#xA; &lt;li&gt;File Browser&lt;/li&gt; &#xA; &lt;li&gt;Calculator&lt;/li&gt; &#xA; &lt;li&gt;Xeneva Terminal (ANSI/VT100 support)&lt;/li&gt; &#xA; &lt;li&gt;XEShell&lt;/li&gt; &#xA; &lt;li&gt;Audio Server called (DeodhaiAudio)&lt;/li&gt; &#xA; &lt;li&gt;play (&lt;em&gt;CLI Application&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;piano (&lt;em&gt;CLI Application&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Calendar&lt;/li&gt; &#xA; &lt;li&gt;Background Services like - Net Manager&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building the project&lt;/h1&gt; &#xA;&lt;p&gt;The project is build purely on Windows Environment. Please Visit &lt;a href=&#34;https://raw.githubusercontent.com/manaskamal/XenevaOS/master/Docs/BuildInstructions.md&#34;&gt;Build Instructions page &lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h1&gt;Purpose and Goals&lt;/h1&gt; &#xA;&lt;p&gt;While writing an Operating System from scratch is very fun and knowledgeable journey, at the same time it is a deeply challenging one. The project was not started with specific goal or purpose in mind; rather.it was started as a passionate solo developer project that aims to learn and address what existing OS&#39;s lack. As the project grew over time, it became very necessary to have a clear purpose and goal.Even though it once was a solo development project, XenevaOS now evolved from one-person effort to a collaborative team with shared interest. The strategies and execution of the project are planned and carried out carefully with deliberate intention.&lt;/p&gt; &#xA;&lt;h2&gt;The Purpose:&lt;/h2&gt; &#xA;&lt;p&gt;While there are many mature Kernel available for different domains and they are already feature-complete, they also come with layers of legacy code that make it difficult for developer to implement or experiment with new ideas on top of them. XenevaOS is fully fresh built from scratch project that aims to provide a flexible playground for experiments with new designs and architectures with modern computing in mind without compromising on software implementation standards and performance.&lt;/p&gt; &#xA;&lt;h2&gt;The Goals:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XenevaOS aims to target modern hardware with modern computing architecture in mind.&lt;/li&gt; &#xA; &lt;li&gt;To experiment and build an OS from ground level transitioning away from traditional OS design as much as possible.&lt;/li&gt; &#xA; &lt;li&gt;To ensure that the project have minimal software abstractions as possible as it grows over time in future for better performance without affecting software implementation standards.&lt;/li&gt; &#xA; &lt;li&gt;To make the software robust as possible, to handle software dependencies and software errors transparently without affecting user&#39;s flow.&lt;/li&gt; &#xA; &lt;li&gt;To research on implementing some new low level architecture with security concerns in mind like lightweight sandboxes, or memory safety technique.&lt;/li&gt; &#xA; &lt;li&gt;XenevaOS aims to be a single core with multiple domain. For example (&lt;em&gt;AR/VR/XR, ADAS systems..etc&lt;/em&gt;). Still under development.&lt;/li&gt; &#xA; &lt;li&gt;XenevaOS aims to have native 3D interface as GUI making it suitable for &lt;em&gt;AR/VR/XR&lt;/em&gt; computing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: XenevaOS is in early development. The features above are not implemented yet, because the project is in foundation level. But we are committed to exploring each of them through focused iterations and community feedback. Whether you&#39;re a developer looking to contribute, or someone exploring alternative OS design, we welcome your curiosity.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact:&lt;/h1&gt; &#xA;&lt;p&gt;For questions, suggestions, or collaborations, feel free to reach out&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:hi@getxeneva.com&#34;&gt;hi@getxeneva.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://getxeneva.com&#34;&gt;www.getxeneva.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License:&lt;/h1&gt; &#xA;&lt;p&gt;XenevaOS is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/manaskamal/XenevaOS/master/LICENSE&#34;&gt;BSD 2-clause License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>