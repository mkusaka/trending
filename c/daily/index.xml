<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-28T01:24:26Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>json-c/json-c</title>
    <updated>2023-08-28T01:24:26Z</updated>
    <id>tag:github.com,2023-08-28:/json-c/json-c</id>
    <link href="https://github.com/json-c/json-c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;https://github.com/json-c/json-c is the official code repository for json-c. See the wiki for release tarballs for download. API docs at http://json-c.github.io/json-c/&lt;/p&gt;&lt;hr&gt;&lt;p&gt;\mainpage&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;json-c&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#overview&#34;&gt;Overview and Build Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#gettinghelp&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#buildunix&#34;&gt;Building on Unix&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#installprereq&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#buildcmds&#34;&gt;Build commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#CMake&#34;&gt;CMake options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#buildvcpkg&#34;&gt;Building with &lt;code&gt;vcpkg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#android&#34;&gt;Building for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#linking&#34;&gt;Linking to libjson-c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#using&#34;&gt;Using json-c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;JSON-C - A JSON implementation in C &lt;a name=&#34;overview&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;JSON-C implements a reference counting object model that allows you to easily construct JSON objects in C, output them as JSON formatted strings and parse JSON formatted strings back into the C representation of JSON objects. It aims to conform to &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8259&#34;&gt;RFC 8259&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Skip down to &lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#using&#34;&gt;Using json-c&lt;/a&gt; or check out the &lt;a href=&#34;https://json-c.github.io/json-c/&#34;&gt;API docs&lt;/a&gt;, if you already have json-c installed and ready to use.&lt;/p&gt; &#xA;&lt;p&gt;Home page for json-c: &lt;a href=&#34;https://github.com/json-c/json-c/wiki&#34;&gt;https://github.com/json-c/json-c/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help &lt;a name=&#34;gettinghelp&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about using json-c, please start a thread on our forums at: &lt;a href=&#34;https://groups.google.com/forum/#!forum/json-c&#34;&gt;https://groups.google.com/forum/#!forum/json-c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you believe you&#39;ve discovered a bug, report it at (&lt;a href=&#34;https://github.com/json-c/json-c/issues&#34;&gt;https://github.com/json-c/json-c/issues&lt;/a&gt;). Please be sure to include the version of json-c you&#39;re using, the OS you&#39;re running on, and any other relevant details. Fully reproducible test cases and/or patches to fix problems are greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Fixes for bugs, or small new features can be directly submitted as a &lt;a href=&#34;https://github.com/json-c/json-c/pulls&#34;&gt;pull request&lt;/a&gt;. For major new features or large changes of any kind, please first start a discussion on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/json-c&#34;&gt;forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building on Unix with &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt; &lt;a name=&#34;buildunix&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you already have json-c installed, see &lt;a href=&#34;https://raw.githubusercontent.com/json-c/json-c/master/#linking&#34;&gt;Linking to &lt;code&gt;libjson-c&lt;/code&gt;&lt;/a&gt; for how to build and link your program against it.&lt;/p&gt; &#xA;&lt;p&gt;Build Status&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.appveyor.com/project/hawicz/json-c&#34;&gt;AppVeyor Build&lt;/a&gt; &lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/json-c/json-c?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.travis-ci.com/github/json-c/json-c&#34;&gt;Travis Build&lt;/a&gt; &lt;img src=&#34;https://api.travis-ci.com/json-c/json-c.svg?branch=master&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Test Status&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coveralls.io/github/json-c/json-c?branch=master&#34;&gt;Coveralls&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/json-c/json-c?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/json-c/json-c/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites: &lt;a name=&#34;installprereq&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;, or another C compiler&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cmake&amp;gt;=2.8&lt;/code&gt;, &lt;code&gt;&amp;gt;=3.16&lt;/code&gt; recommended, &lt;code&gt;cmake=&amp;gt;3.1&lt;/code&gt; for tests&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To generate docs you&#39;ll also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doxygen&amp;gt;=1.8.13&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are on a relatively modern system, you&#39;ll likely be able to install the prerequisites using your OS&#39;s packaging system.&lt;/p&gt; &#xA;&lt;h3&gt;Install using apt (e.g. Ubuntu 16.04.2 LTS)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install git&#xA;sudo apt install cmake&#xA;sudo apt install doxygen  # optional&#xA;sudo apt install valgrind # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build instructions: &lt;a name=&#34;buildcmds&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;json-c&lt;/code&gt; GitHub repo: &lt;a href=&#34;https://github.com/json-c/json-c&#34;&gt;https://github.com/json-c/json-c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/json-c/json-c.git&#xA;$ mkdir json-c-build&#xA;$ cd json-c-build&#xA;$ cmake ../json-c   # See CMake section below for custom arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: it&#39;s also possible to put your build directory inside the json-c source directory, or even not use a separate build directory at all, but certain things might not work quite right (notably, &lt;code&gt;make distcheck&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make&#xA;$ make test&#xA;$ make USE_VALGRIND=0 test   # optionally skip using valgrind&#xA;$ sudo make install          # it could be necessary to execute make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating documentation with Doxygen:&lt;/h3&gt; &#xA;&lt;p&gt;The library documentation can be generated directly from the source code using Doxygen tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# in build directory&#xA;make doc&#xA;google-chrome doc/html/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CMake Options &lt;a name=&#34;CMake&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The json-c library is built with &lt;a href=&#34;https://cmake.org/cmake-tutorial/&#34;&gt;CMake&lt;/a&gt;, which can take a few options.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMAKE_INSTALL_PREFIX&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;The install location.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMAKE_BUILD_TYPE&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Defaults to &#34;debug&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_SHARED_LIBS&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;The default build generates a dynamic (dll/so) library. Set this to OFF to create a static library only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_STATIC_LIBS&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;The default build generates a static (lib/a) library. Set this to OFF to create a shared library only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_STATIC_FPIC&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;The default builds position independent code. Set this to OFF to create a shared library only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_BSYMBOLIC&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Disable use of -Bsymbolic-functions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_THREAD_LOCAL_STORAGE&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Disable use of Thread-Local Storage (HAVE___THREAD).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_WERROR&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Disable use of -Werror.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_EXTRA_LIBS&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Disable use of extra libraries, libbsd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_JSON_POINTER&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Omit json_pointer support from the build.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_RDRAND&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Enable RDRAND Hardware RNG Hash Seed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_THREADING&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Enable partial threading support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OVERRIDE_GET_RANDOM_SEED&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;A block of code to use instead of the default implementation of json_c_get_random_seed(), e.g. on embedded platforms where not even the fallback to time() works. Must be a single line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Pass these options as &lt;code&gt;-D&lt;/code&gt; on CMake&#39;s command-line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# build a static library only&#xA;cmake -DBUILD_SHARED_LIBS=OFF ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building with partial threading support&lt;/h3&gt; &#xA;&lt;p&gt;Although json-c does not support fully multi-threaded access to object trees, it has some code to help make its use in threaded programs a bit safer. Currently, this is limited to using atomic operations for json_object_get() and json_object_put().&lt;/p&gt; &#xA;&lt;p&gt;Since this may have a performance impact, of at least 3x slower according to &lt;a href=&#34;https://stackoverflow.com/a/11609063&#34;&gt;https://stackoverflow.com/a/11609063&lt;/a&gt;, it is disabled by default. You may turn it on by adjusting your cmake command with: -DENABLE_THREADING=ON&lt;/p&gt; &#xA;&lt;p&gt;Separately, the default hash function used for object field keys, lh_char_hash, uses a compare-and-swap operation to ensure the random seed is only generated once. Because this is a one-time operation, it is always compiled in when the compare-and-swap operation is available.&lt;/p&gt; &#xA;&lt;h3&gt;cmake-configure wrapper script&lt;/h3&gt; &#xA;&lt;p&gt;For those familiar with the old autoconf/autogen.sh/configure method, there is a &lt;code&gt;cmake-configure&lt;/code&gt; wrapper script to ease the transition to cmake.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build&#xA;cd build&#xA;../cmake-configure --prefix=/some/install/path&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;cmake-configure can take a few options.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;prefix=PREFIX&lt;/td&gt; &#xA;   &lt;td&gt;install architecture-independent files in PREFIX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable-threading&lt;/td&gt; &#xA;   &lt;td&gt;Enable code to support partly multi-threaded use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable-rdrand&lt;/td&gt; &#xA;   &lt;td&gt;Enable RDRAND Hardware RNG Hash Seed generation on supported x86/x64 platforms.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable-shared&lt;/td&gt; &#xA;   &lt;td&gt;build shared libraries [default=yes]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable-static&lt;/td&gt; &#xA;   &lt;td&gt;build static libraries [default=yes]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disable-Bsymbolic&lt;/td&gt; &#xA;   &lt;td&gt;Avoid linking with -Bsymbolic-function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disable-werror&lt;/td&gt; &#xA;   &lt;td&gt;Avoid treating compiler warnings as fatal errors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Testing: &lt;a name=&#34;testing&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;By default, if valgrind is available running tests uses it. That can slow the tests down considerably, so to disable it use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export USE_VALGRIND=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests a separate build directory is recommended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build-test&#xA;cd build-test&#xA;# VALGRIND=1 causes -DVALGRIND=1 to be passed when compiling code&#xA;# which uses slightly slower, but valgrind-safe code.&#xA;VALGRIND=1 cmake ..&#xA;make&#xA;&#xA;make test&#xA;# By default, if valgrind is available running tests uses it.&#xA;make USE_VALGRIND=0 test   # optionally skip using valgrind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a test fails, check &lt;code&gt;Testing/Temporary/LastTest.log&lt;/code&gt;, &lt;code&gt;tests/testSubDir/${testname}/${testname}.vg.out&lt;/code&gt;, and other similar files. If there is insufficient output try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;VERBOSE=1 CTEST_OUTPUT_ON_FAILURE=1 make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;JSONC_TEST_TRACE=1 make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and check the log files again.&lt;/p&gt; &#xA;&lt;h2&gt;Building on Unix and Windows with &lt;code&gt;vcpkg&lt;/code&gt; &lt;a name=&#34;buildvcpkg&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install JSON-C using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;vcpkg install json-c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON-C port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Building for Android &lt;a name=&#34;android&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a name=&#34;android&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;android&#34;&gt;Building on Android is now particularly well supported, but there have been some reports of success using &lt;/a&gt;&lt;a href=&#34;https://developer.android.com/ndk/guides/cmake&#34;&gt;https://developer.android.com/ndk/guides/cmake&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir json-c-build&#xA;cd json-c-build/&#xA;export NDK_HOME=~/Library/Android/sdk/ndk/22.1.7171670/&#xA;cmake \&#xA;    --toolchain=$NDK_HOME/build/cmake/android.toolchain.cmake \&#xA;    -DANDROID_STL=none \&#xA;    -DANDROID_ABI=arm64-v8a \&#xA;    -DANDROID_PLATFORM=android-29 \&#xA;    -DANDROID_LD=lld \&#xA;    -DCMAKE_BUILD_TYPE=MinSizeRel \&#xA;    -DCMAKE_INSTALL_PREFIX=&amp;lt;install prefix&amp;gt; \&#xA;    -DENABLE_THREADING=true \&#xA;    ..&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linking to &lt;code&gt;libjson-c&lt;/code&gt; &lt;a name=&#34;linking&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a name=&#34;linking&#34;&gt; &lt;p&gt;If your system has &lt;code&gt;pkgconfig&lt;/code&gt;, then you can just add this to your &lt;code&gt;makefile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;CFLAGS += $(shell pkg-config --cflags json-c)&#xA;LDFLAGS += $(shell pkg-config --libs json-c)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Without &lt;code&gt;pkgconfig&lt;/code&gt;, you might do something like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;JSON_C_DIR=/path/to/json_c/install&#xA;CFLAGS += -I$(JSON_C_DIR)/include/json-c&#xA;# Or to use lines like: #include &amp;lt;json-c/json_object.h&amp;gt;&#xA;#CFLAGS += -I$(JSON_C_DIR)/include&#xA;LDFLAGS+= -L$(JSON_C_DIR)/lib -ljson-c&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your project uses cmake:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Add to your CMakeLists.txt file:&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(json-c CONFIG)&#xA;target_link_libraries(${PROJECT_NAME} PRIVATE json-c::json-c)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Then you might run in your project:&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd build&#xA;cmake -DCMAKE_PREFIX_PATH=/path/to/json_c/install/lib64/cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h2&gt;&lt;a name=&#34;linking&#34;&gt;Using json-c &lt;/a&gt;&lt;a name=&#34;using&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a name=&#34;using&#34;&gt; &lt;p&gt;To use json-c you can either include json.h, or preferably, one of the following more specific header files:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;json_object.h - Core types and methods.&lt;/li&gt; &#xA;  &lt;li&gt;json_tokener.h - Methods for parsing and serializing json-c object trees.&lt;/li&gt; &#xA;  &lt;li&gt;json_pointer.h - JSON Pointer (RFC 6901) implementation for retrieving objects from a json-c object tree.&lt;/li&gt; &#xA;  &lt;li&gt;json_object_iterator.h - Methods for iterating over single json_object instances. (See also &lt;code&gt;json_object_object_foreach()&lt;/code&gt; in json_object.h)&lt;/li&gt; &#xA;  &lt;li&gt;json_visit.h - Methods for walking a tree of json-c objects.&lt;/li&gt; &#xA;  &lt;li&gt;json_util.h - Miscellaneous utility functions.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;using&#34;&gt;For a full list of headers see &lt;/a&gt;&lt;a href=&#34;https://json-c.github.io/json-c/json-c-current-release/doc/html/files.html&#34;&gt;files.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The primary type in json-c is json_object. It describes a reference counted tree of json objects which are created by either parsing text with a json_tokener (i.e. &lt;code&gt;json_tokener_parse_ex()&lt;/code&gt;), or by creating (with &lt;code&gt;json_object_new_object()&lt;/code&gt;, &lt;code&gt;json_object_new_int()&lt;/code&gt;, etc...) and adding (with &lt;code&gt;json_object_object_add()&lt;/code&gt;, &lt;code&gt;json_object_array_add()&lt;/code&gt;, etc...) them individually. Typically, every object in the tree will have one reference, from its parent. When you are done with the tree of objects, you call json_object_put() on just the root object to free it, which recurses down through any child objects calling json_object_put() on each one of those in turn.&lt;/p&gt; &#xA;&lt;p&gt;You can get a reference to a single child (&lt;code&gt;json_object_object_get()&lt;/code&gt; or &lt;code&gt;json_object_array_get_idx()&lt;/code&gt;) and use that object as long as its parent is valid.&lt;br&gt; If you need a child object to live longer than its parent, you can increment the child&#39;s refcount (&lt;code&gt;json_object_get()&lt;/code&gt;) to allow it to survive the parent being freed or it being removed from its parent (&lt;code&gt;json_object_object_del()&lt;/code&gt; or &lt;code&gt;json_object_array_del_idx()&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;When parsing text, the json_tokener object is independent from the json_object that it returns. It can be allocated (&lt;code&gt;json_tokener_new()&lt;/code&gt;) used one or multiple times (&lt;code&gt;json_tokener_parse_ex()&lt;/code&gt;, and freed (&lt;code&gt;json_tokener_free()&lt;/code&gt;) while the json_object objects live on.&lt;/p&gt; &#xA;&lt;p&gt;A json_object tree can be serialized back into a string with &lt;code&gt;json_object_to_json_string_ext()&lt;/code&gt;. The string that is returned is only valid until the next &#34;to_json_string&#34; call on that same object. Also, it is freed when the json_object is freed.&lt;/p&gt;</summary>
  </entry>
</feed>