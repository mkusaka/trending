<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:31:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cococry/Ragnar</title>
    <updated>2023-05-17T01:31:22Z</updated>
    <id>tag:github.com,2023-05-17:/cococry/Ragnar</id>
    <link href="https://github.com/cococry/Ragnar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal X Window Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RagnarWM&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/cococry/Ragnar/raw/main/branding/logo.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/cococry/Ragnar/raw/main/branding/workflow.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Ragnar is a minimal window manager for X written in C. The goal of this project is to create a window manager that has minimal bloat but is still aestetic and usable.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tiling layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Altering layout (Application switching, changing master size...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fullscreening windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple Desktops&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Status Bar&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto Start Commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Scratchpads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There is a script for Ubuntu users, all of the process is automated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/suleyman-kaya/Ragnar/main/ubuntu_installation.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run Ragnar on your machine, clone this repo and install all dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;yay -S xorg xorg-dev xorg-xinit gcc make &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then type this command to install the WM&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo make ragnar install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an error that states something like &#34;ft2build.h could not be found&#34;, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo make freetype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This copies the files of freetype to the location where xorg thinks it is. This resolves the issue and you can keep going with the installation.&lt;/p&gt; &#xA;&lt;p&gt;Then, in your ~/.xinitrc add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exec ragnar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IMPORTANT&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/cococry/Ragnar/raw/main/config.h&#34;&gt;config.h&lt;/a&gt; file specify your monitor setup in order for the WM to work as intended. Also, for configuration of the WM use the config.h file.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;For the best experience, i suggest to use a X compositer like picom. I am using &lt;a href=&#34;https://github.com/pijulius/picom&#34;&gt;picom pijulius&lt;/a&gt; because i think it has very clean animation support. You can find my picom config &lt;a href=&#34;https://github.com/cococry/dotfiles/raw/main/picom/picom.conf&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is in early stage and not finished. So if you find bugs or have any problems, feel free to &lt;a href=&#34;https://github.com/cococry/Ragnar/issues&#34;&gt;submit an issue&lt;/a&gt;. Especially multi monitor setups can be problematic with the current state of the code base.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;RagnarWM is mainly inspired by &lt;a href=&#34;https://dwm.suckless.org&#34;&gt;dwm&lt;/a&gt;. I, myself used dwm as my main window manager in the past and i really liked the minimalist style of it. But i found it really frustrating how the default dwm repository was pretty much unusable out of the box. A lot of main features are non-existend in dwm or poorly designed. That&#39;s why i was inspired to create a minimal window manager that comes with usablity out of the box. I don&#39;t think usablity and features have to suffer with minimalism. But don&#39;t get me wrong, dwm is a great window manager and i had a really nice time using it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Default Keybindings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybind&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Left Mouse/Middle Mouse&lt;/td&gt; &#xA;   &lt;td&gt;Select Window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Enter&lt;/td&gt; &#xA;   &lt;td&gt;Open terminal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + W&lt;/td&gt; &#xA;   &lt;td&gt;Open Web-browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + S&lt;/td&gt; &#xA;   &lt;td&gt;Open Application Launcher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Q&lt;/td&gt; &#xA;   &lt;td&gt;Quit Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + C&lt;/td&gt; &#xA;   &lt;td&gt;Quit WM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Space&lt;/td&gt; &#xA;   &lt;td&gt;Add window to layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Up Arrow&lt;/td&gt; &#xA;   &lt;td&gt;Move window up in layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Down Arrow&lt;/td&gt; &#xA;   &lt;td&gt;Move window down in layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + L&lt;/td&gt; &#xA;   &lt;td&gt;Increase master size in layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + H&lt;/td&gt; &#xA;   &lt;td&gt;Decrease master size in layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + J&lt;/td&gt; &#xA;   &lt;td&gt;Increase slave size in layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + K&lt;/td&gt; &#xA;   &lt;td&gt;Decrease slave size in layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Plus&lt;/td&gt; &#xA;   &lt;td&gt;Increase gap size of windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Minus&lt;/td&gt; &#xA;   &lt;td&gt;Decrease gap size of windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + F&lt;/td&gt; &#xA;   &lt;td&gt;Fullscreen selected window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Shift + T&lt;/td&gt; &#xA;   &lt;td&gt;Set tiled master layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Shift + R&lt;/td&gt; &#xA;   &lt;td&gt;Set floating layout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + A&lt;/td&gt; &#xA;   &lt;td&gt;Cycle desktop down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + D&lt;/td&gt; &#xA;   &lt;td&gt;Cycle desktop up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + O&lt;/td&gt; &#xA;   &lt;td&gt;Cycle window one desktop down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + P&lt;/td&gt; &#xA;   &lt;td&gt;Cycle window one desktop down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + B&lt;/td&gt; &#xA;   &lt;td&gt;Cycle bar one monitor down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + N&lt;/td&gt; &#xA;   &lt;td&gt;Cycle bar one monitor up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + I&lt;/td&gt; &#xA;   &lt;td&gt;Toggle bar visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUPER + Tab&lt;/td&gt; &#xA;   &lt;td&gt;Cycle through windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>solosky/pixl.js</title>
    <updated>2023-05-17T01:31:22Z</updated>
    <id>tag:github.com,2023-05-17:/solosky/pixl.js</id>
    <link href="https://github.com/solosky/pixl.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An emulator for Amiibo!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pixl.js&lt;/h1&gt; &#xA;&lt;p&gt;这是一个基于原版&lt;a href=&#34;http://www.espruino.com/Pixl.js&#34;&gt;Pixl.js&lt;/a&gt;的复刻版本，主要的功能是用来模拟Amiibo。&lt;/p&gt; &#xA;&lt;h2&gt;图片&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/solosky/pixl.js/raw/main/assets/pixljs-3.jpg&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/solosky/pixl.js/raw/main/assets/pixljs-4.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/solosky/pixl.js/raw/main/assets/pixljs-5.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;演示&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1TD4y1t76A/&#34;&gt;新版Amiibo模拟器，目前可以做到无限刷！&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;外壳&lt;/h2&gt; &#xA;&lt;p&gt;项目由 白橙 大佬制作的外壳，可以在&lt;a href=&#34;https://www.thingiverse.com/thing:5877482&#34;&gt;这里下载&lt;/a&gt; &lt;img src=&#34;https://github.com/solosky/pixl.js/raw/main/assets/pixjs-case1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PCB&lt;/h2&gt; &#xA;&lt;p&gt;hw/RevC为最新PCB版本，使用&lt;a href=&#34;https://www.kicad.org/download/&#34;&gt;Kicad 6&lt;/a&gt;打开编辑。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/solosky/pixl.js/raw/main/assets/pixljs-pcb-revc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;BOM&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solosky/pixl.js/main/docs/RevC-ibom.html&#34;&gt;RevC InteractiveHtmlBom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solosky/pixl.js/main/docs/RevC-bom.md&#34;&gt;RevC 物料清单购买指南&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;衍生版本&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solosky/pixl.js/main/docs/boards-thirdparty.md&#34;&gt;docs/boards-thirdparty.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;编译&lt;/h2&gt; &#xA;&lt;p&gt;项目设置了CI，可以在&lt;a href=&#34;https://github.com/solosky/pixl.js/actions/workflows/pixl.js-fw.yml&#34;&gt;Actions&lt;/a&gt;里面下载Nightly构建版本的，无需自行构建。&lt;/p&gt; &#xA;&lt;p&gt;如需自行编译，这里推荐使用提供的docker镜像构建。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm solosky/nrf52-sdk:latest&#xA;root@b10d54636088:/builds# git clone https://github.com/solosky/pixl.js&#xA;root@b10d54636088:/builds# cd pixl.js/&#xA;root@b10d54636088:/builds/pixl.js# git submodule update --init --recursive&#xA;root@b10d54636088:/builds/pixl.js# cd fw/bootloader &amp;amp;&amp;amp; make&#xA;root@b10d54636088:/builds/pixl.js# cd fw &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;构建出来的固件在 fw/_build/pixjs_all.hex。&lt;/p&gt; &#xA;&lt;h2&gt;固件烧写&lt;/h2&gt; &#xA;&lt;p&gt;下载最新版本的固件zip包，使用JLink或者DAPLink烧写pixjs_all.hex即可。 烧写完毕后，后续固件更新可以使用OTA的方式更新。 也可以用OpenOCD烧录。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openocd -f interface/cmsis-dap.cfg -c &#34;transport select swd&#34; -f target/nrf52.cfg -d2 -c init -c &#34;reset init&#34; -c halt -c &#34;nrf51 mass_erase&#34; -c &#34;program pixjs_all.hex verify&#34; -c &#34;program nrf52832_xxaa.hex verify&#34; -c exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OTA更新&lt;/h2&gt; &#xA;&lt;p&gt;下载最新版本固件zip包，解压到一个目录。 在设置界面进入DFU模式后，进入 &lt;a href=&#34;https://thegecko.github.io/web-bluetooth-dfu/examples/web.html&#34;&gt;固件更新页面&lt;/a&gt;，连接Pixl.js后，选择压缩包里面的 pixljs_ota_xxx.zip 进行OTA固件更新。&lt;/p&gt; &#xA;&lt;h2&gt;文件上传&lt;/h2&gt; &#xA;&lt;p&gt;目前支持网页传输和APP传输。 &lt;br&gt; 网页传输可以点开下面的网页进行上传。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;主站 &lt;a href=&#34;https://pixl.amiibo.xyz/&#34;&gt;https://pixl.amiibo.xyz/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;镜像 &lt;a href=&#34;https://solosky.github.io/pixl.js/&#34;&gt;https://solosky.github.io/pixl.js/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;App Store上第三方作者开发的iOS应用 iNFC。 可以在App Store搜索 iNFC 下载应用。或直接扫描下方二维码跳转App Store下载：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/solosky/pixl.js/raw/main/assets/iNFC.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;同时，Mac版iNFC、安卓版iNFC正在开发中，敬请期待！&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1RV4y1f7bn/&#34;&gt;使用iNFC上传Amiibo至Pixl.js的视频教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;感谢iNFC应用作者对Pixl.js的支持！&lt;/p&gt; &#xA;&lt;h2&gt;蓝牙协议&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solosky/pixl.js/main/fw/docs/ble_protocol.md&#34;&gt;fw/docs/ble_protocol.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;动画制作&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solosky/pixl.js/main/fw/docs/video_player.md&#34;&gt;fw/docs/video_player.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flipperdevices/flipperzero-firmware&#34;&gt;FlipperZero Firmware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/P-p-H-d/mlib&#34;&gt;mlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattconte/tlsf&#34;&gt;TLSF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/likle/cwalk&#34;&gt;cwalk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pellepl/spiffs&#34;&gt;SPIFFS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;特别感谢 @Caleeeeeeeeeeeee 完善的Bootloader。&lt;/li&gt; &#xA; &lt;li&gt;特别感谢 @白橙 制作的外壳。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;p&gt;本项目为开源项目，仅为学习研究用途，请勿用于商业用途。 &lt;br&gt; Amiibo是任天堂的注册商标，NTAG21X为NXP的注册商标。&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;本项目基于GPL 2.0 License发布，使用请遵循License的约定。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果对项目做了修改，需要把改后的源码发布出来&lt;/li&gt; &#xA; &lt;li&gt;发布出来的源码必须要使用相同的License发布&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;提示&lt;/h2&gt; &#xA;&lt;p&gt;Amiibo无限刷需要网上搜索key_retail.bin文件然后上传到到磁盘根目录后才能使用。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GPUOpen-LibrariesAndSDKs/Capsaicin</title>
    <updated>2023-05-17T01:31:22Z</updated>
    <id>tag:github.com,2023-05-17:/GPUOpen-LibrariesAndSDKs/Capsaicin</id>
    <link href="https://github.com/GPUOpen-LibrariesAndSDKs/Capsaicin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AMD ARR team rendering framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/Capsaicin/master/docs/images/header.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AMD Capsaicin Framework&lt;/h1&gt; &#xA;&lt;p&gt;Capsaicin is an experimental real-time rendering framework designed for graphics research and development. It is designed to aid in prototype development by providing simple and easy-to-use abstractions and frameworks to improve productivity of real-time research projects.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Abstraction of common rendering operations&lt;/li&gt; &#xA; &lt;li&gt;Modular framework for easy development and collaboration&lt;/li&gt; &#xA; &lt;li&gt;Scene and model loading and animation&lt;/li&gt; &#xA; &lt;li&gt;Inbuilt user extensible UI&lt;/li&gt; &#xA; &lt;li&gt;Automated debugging and profiling information&lt;/li&gt; &#xA; &lt;li&gt;Pluggable and swappable common rendering techniques such as ToneMapping, TAA, AO etc.&lt;/li&gt; &#xA; &lt;li&gt;Unbiased reference path tracer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/Capsaicin/master/docs/images/scene_viewer.png&#34; alt=&#34;Capsaicin&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GI-1.0&lt;/h2&gt; &#xA;&lt;p&gt;We used Capsaicin to implement our GI-1.0 technique for estimating diffuse indirect illumination in real-time.&lt;/p&gt; &#xA;&lt;p&gt;The technique uses two levels of radiance caching to allow for reduced sampling rate in order to improve performance while making the most of every ray through better sampling.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://gpuopen.com/download/publications/GPUOpen2022_GI1_0.pdf&#34;&gt;publication&lt;/a&gt; for more technical details.&lt;/p&gt; &#xA;&lt;h4&gt;Note on light support&lt;/h4&gt; &#xA;&lt;p&gt;GI-1.0 is primarily an indirect lighting solution and as such is expected to be combined with an existing direct lighting technique for integration into a rendering pipeline.&lt;/p&gt; &#xA;&lt;p&gt;All common light types are supported when evaluating the indirect lighting component (e.g., point lights, spot lights, etc.) using our grid-based light sampler and (optional) reservoir-based resampling.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore the technique can estimate direct lighting through its probe system for a subset of lights; namely emissive meshes and skylights.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct3D12 capable hardware and OS (Windows 10 20H2 or newer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/&#34;&gt;Windows 10 SDK&lt;/a&gt; or newer&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10 or newer (can use Visual Studio, VSCode or any other CMake supported IDE)&lt;/li&gt; &#xA; &lt;li&gt;DirectX Raytracing capable GPU and compatible drivers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Capsaicin uses submodules to include any required dependencies beyond those listed in &lt;strong&gt;Prerequisites&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When acquiring the code make sure to clone the repo with submodules included:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/GPUOpen-LibrariesAndSDKs/Capsaicin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have already cloned this repo without submodules, then use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capsaicin uses the &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; build system. See the &lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/Capsaicin/master/docs/development/getting_started.md&#34;&gt;Getting Started&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/Capsaicin/master/docs/index.md&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/Capsaicin/master/docs/development/getting_started.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/Capsaicin/master/docs/development/architecture.md&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If Capsaicin is used any any published work, ensure to cite it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@Misc{Capsaicin23,&#xA;   author = {Guillaume Boissé, Matthew Oliver, Sylvain Meunier, Héloïse Dupont de Dinechin and Kenta Eto},&#xA;   title =  {The {AMD Capsaicin Framework}},&#xA;   year =   {2023},&#xA;   month =  {5},&#xA;   url =    {https://github.com/GPUOpen-LibrariesAndSDKs/Capsaicin},&#xA;   note =   {\url{https://github.com/GPUOpen-LibrariesAndSDKs/Capsaicin}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>