<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-24T01:30:13Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/ebpf-for-windows</title>
    <updated>2024-07-24T01:30:13Z</updated>
    <id>tag:github.com,2024-07-24:/microsoft/ebpf-for-windows</id>
    <link href="https://github.com/microsoft/ebpf-for-windows" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF implementation that runs on top of Windows&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/eBPF%20logo%20png%20800px.png&#34; width=&#34;75&#34; height=&#34;75&#34; align=&#34;left&#34;&gt; &#xA;&lt;h1&gt;eBPF for Windows&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/ebpf-for-windows/actions/workflows/cicd.yml?query=event%3Aschedule++&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/ebpf-for-windows/actions/workflows/cicd.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;CI/CD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5742&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5742/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/microsoft/ebpf-for-windows&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/microsoft/ebpf-for-windows/branch/main/graph/badge.svg?token=TXa0UAMvYf&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bpfperformancegrafana.azurewebsites.net/public-dashboards/3826972d0ff245158b6df21d5e6868a9?orgId=1&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Performance&amp;amp;message=Dashboard&amp;amp;color=blue&#34; alt=&#34;Perf Dashboard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;eBPF is a well-known technology for providing programmability and agility, especially for extending an OS kernel, for use cases such as DoS protection and observability. This project is a work-in-progress that allows existing eBPF toolchains and APIs familiar in the Linux ecosystem to be used on top of Windows. That is, this project takes existing eBPF projects as submodules and adds the layer in between to make them run on top of Windows.&lt;/p&gt; &#xA;&lt;h2&gt;New to eBPF?&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/tutorial.md&#34;&gt;basic eBPF tutorial&lt;/a&gt; and our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/debugging.md&#34;&gt;tutorial on debugging eBPF verification failures&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architectural Overview&lt;/h2&gt; &#xA;&lt;p&gt;The following diagram shows the basic architecture of this project and related components:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/ArchitectureDiagram.png&#34; alt=&#34;Architectural Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As shown in the diagram, existing eBPF toolchains (clang, etc.) can be used to generate eBPF bytecode from source code in various languages. Bytecode can be consumed by any application, or via bpftool or the Netsh command line tool, which use a shared library that exposes &lt;a href=&#34;https://github.com/libbpf/libbpf&#34;&gt;Libbpf APIs&lt;/a&gt;, though this is still in progress.&lt;/p&gt; &#xA;&lt;p&gt;The eBPF bytecode is sent to a static verifier (the &lt;a href=&#34;https://github.com/vbpf/ebpf-verifier&#34;&gt;PREVAIL verifier&lt;/a&gt;) that is hosted in a secure user-mode environment such as a system service (which is the case at present), enclave, or trusted VM. If the eBPF program passes all the verifier checks, it can be loaded into the kernel-mode execution context. Typically this is done by being JIT compiled (via the &lt;a href=&#34;https://github.com/iovisor/ubpf&#34;&gt;uBPF&lt;/a&gt; JIT compiler) into native code that is passed to the execution context. In a debug build, the byte code can instead be directly loaded into an interpreter (from &lt;a href=&#34;https://github.com/iovisor/ubpf&#34;&gt;uBPF&lt;/a&gt; in the kernel-mode execution context) though the interpreter is not present in a release build as it is considered less secure. See also the HVCI FAQ answer below.&lt;/p&gt; &#xA;&lt;p&gt;eBPF programs installed into the kernel-mode execution context can attach to various &lt;a href=&#34;https://microsoft.github.io/ebpf-for-windows/ebpf__structs_8h.html#a0f8242763b15ec665eaa47c6add861a0&#34;&gt;hooks&lt;/a&gt; and call various helper APIs exposed by the eBPF shim, which internally wraps public Windows kernel APIs, allowing the use of eBPF on existing versions of Windows. Many &lt;a href=&#34;https://microsoft.github.io/ebpf-for-windows/bpf__helper__defs_8h.html&#34;&gt;helpers&lt;/a&gt; already exist, and more hooks and helpers will be added over time.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project supports eBPF on Windows 10 or later, and on Windows Server 2019 or later. To try out this project, see our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/GettingStarted.md&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Want to help? We welcome contributions! See our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;. Feel free to take a look at our &lt;a href=&#34;https://github.com/microsoft/ebpf-for-windows/labels/good%20first%20issue&#34;&gt;Good First Issues&lt;/a&gt; list if you&#39;re looking for somewhere to start.&lt;/p&gt; &#xA;&lt;p&gt;Want to chat with us? We have a:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cilium.slack.com/messages/ebpf-for-windows&#34;&gt;Slack channel&lt;/a&gt; (If you are new, sign up at &lt;a href=&#34;http://slack.cilium.io/&#34;&gt;http://slack.cilium.io/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Zoom meeting for github issue triage: see &lt;a href=&#34;https://github.com/microsoft/ebpf-for-windows/discussions/427&#34;&gt;meeting info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For tracking Q&amp;amp;A and general discussion, we use &lt;a href=&#34;https://github.com/microsoft/ebpf-for-windows/discussions&#34;&gt;Discussions&lt;/a&gt; in github. This can also function similar to a mailing list if you subscribe to discussion notifications by clicking &#34;Watch&#34; (or &#34;Unwatch&#34;) and selecting &#34;Custom&#34; -&amp;gt; &#34;Discussions&#34; (or by selecting &#34;All Activity&#34; if you want to receive notifications about everything else too).&lt;/p&gt; &#xA;&lt;p&gt;If you have issues with an eBPF program, start with the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/TroubleshootingGuide.md&#34;&gt;Troubleshooting Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;1. Is this a fork of eBPF?&lt;/h3&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;p&gt;The eBPF for Windows project leverages existing projects, including the &lt;a href=&#34;https://github.com/iovisor/ubpf&#34;&gt;IOVisor uBPF project&lt;/a&gt; and the &lt;a href=&#34;https://github.com/vbpf/ebpf-verifier&#34;&gt;PREVAIL verifier&lt;/a&gt;, running them on top of Windows by adding the Windows-specific hosting environment for that code.&lt;/p&gt; &#xA;&lt;h3&gt;2. Does this provide app compatibility with eBPF programs written for Linux?&lt;/h3&gt; &#xA;&lt;p&gt;The intent is to provide source code compatibility for code that uses common hooks and helpers that apply across OS ecosystems.&lt;/p&gt; &#xA;&lt;p&gt;Linux provides many hooks and helpers, some of which are very Linux specific (e.g., using Linux internal data structs) that would not be applicable to other platforms. Other hooks and helpers are generically applicable and the intent is to support them for eBPF programs.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, the eBPF for Windows project exposes &lt;a href=&#34;https://github.com/libbpf/libbpf&#34;&gt;Libbpf APIs&lt;/a&gt; to provide source code compatibility for applications that interact with eBPF programs.&lt;/p&gt; &#xA;&lt;h3&gt;3. Will eBPF work with HyperVisor-enforced Code Integrity (HVCI)?&lt;/h3&gt; &#xA;&lt;p&gt;Yes. With HVCI enabled, eBPF programs cannot be JIT compiled, but can be run either natively or in interpreted mode (but the interpreter is disabled in release builds and is only supported in debug builds). To understand why JIT compiled mode does not work, we must first understand what HVCI does.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://techcommunity.microsoft.com/t5/windows-insider-program/virtualization-based-security-vbs-and-hypervisor-enforced-code/m-p/240571&#34;&gt;HyperVisor-enforced Code Integrity (HVCI)&lt;/a&gt; is a mechanism whereby a hypervisor, such as Hyper-V, uses hardware virtualization to protect kernel-mode processes against the injection and execution of malicious or unverified code. Code integrity validation is performed in a secure environment that is resistant to attack from malicious software, and page permissions for kernel mode are set and maintained by the hypervisor.&lt;/p&gt; &#xA;&lt;p&gt;Since a hypervisor doing such code integrity checks will refuse to accept code pages that aren&#39;t signed by a key that the hypervisor trusts, this does impact eBPF programs running natively. As such, when HVCI is enabled, eBPF programs work fine in interpreted mode, but not when using JIT compilation because the JIT compiler does not have a key that the hypervisor trusts. And since interpreted mode is absent in release builds, neither mode will work on an HVCI-enabled production system.&lt;/p&gt; &#xA;&lt;p&gt;Instead, a third mode is also supported by eBPF for Windows, in addition to JIT compiled and interpreted modes. This third mode entails compiling eBPF programs into regular Windows drivers that can be accepted by HVCI. For more discussion, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/ebpf-for-windows/main/docs/NativeCodeGeneration.md&#34;&gt;Native Code Generation documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>viti95/FastDoom</title>
    <updated>2024-07-24T01:30:13Z</updated>
    <id>tag:github.com,2024-07-24:/viti95/FastDoom</id>
    <link href="https://github.com/viti95/FastDoom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Doom port for DOS, optimized to be as fast as possible!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastDOOM&lt;/h1&gt; &#xA;&lt;p&gt;Doom port for DOS, based on PCDoom by @nukeykt. The goal of this port is to make it as fast as possible for 386/486 personal computers.&lt;/p&gt; &#xA;&lt;h2&gt;FastDOOM vs Original&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added FPS ingame viewer&lt;/li&gt; &#xA; &lt;li&gt;Added FPS calculation after timedemo runs&lt;/li&gt; &#xA; &lt;li&gt;Added option to render visplanes (ceiling and floors) without textures&lt;/li&gt; &#xA; &lt;li&gt;Added option to render Spectres and invisible objects like real transparent objects (harder to see, a little faster to render)&lt;/li&gt; &#xA; &lt;li&gt;Added option to render sky as a flat fixed color&lt;/li&gt; &#xA; &lt;li&gt;Added option to render Spectre and invisible objects like the Sega Saturn port did&lt;/li&gt; &#xA; &lt;li&gt;Added option to render Spectre and invisible objects like Heretic/Hexen&lt;/li&gt; &#xA; &lt;li&gt;New option to show only objects that are not far away from the player. All the enemies are still rendered as they&#39;re important&lt;/li&gt; &#xA; &lt;li&gt;PC Speaker uses all sounds available (just for fun!)&lt;/li&gt; &#xA; &lt;li&gt;New mode for PC Speaker (digitized sound!)&lt;/li&gt; &#xA; &lt;li&gt;Disney Sound Source support&lt;/li&gt; &#xA; &lt;li&gt;COVOX LPT DAC support&lt;/li&gt; &#xA; &lt;li&gt;Adlib OPL2 PCM support&lt;/li&gt; &#xA; &lt;li&gt;OPL2LPT and OPL3LPT support&lt;/li&gt; &#xA; &lt;li&gt;Tandy 3-voice PCM support (SN76489)&lt;/li&gt; &#xA; &lt;li&gt;Creative Music System / Game Blaster support&lt;/li&gt; &#xA; &lt;li&gt;Audio-CD music support&lt;/li&gt; &#xA; &lt;li&gt;PCM music support (through sound fx device)&lt;/li&gt; &#xA; &lt;li&gt;Hercules automap support&lt;/li&gt; &#xA; &lt;li&gt;Lot&#39;s of optimizations to make the game run faster / smoother&lt;/li&gt; &#xA; &lt;li&gt;Removed low memory limit (may cause crashes with low RAM)&lt;/li&gt; &#xA; &lt;li&gt;New detail level: Potato. It renders the full scene with a quarter width resolution (max 80x200). Much faster rendering, specially on 386 cpu&#39;s and slow 8-bit VGA ISA cards.&lt;/li&gt; &#xA; &lt;li&gt;New option to allow more than 8Mb of memory allocation. Enabled with &#34;-ram&#34;&lt;/li&gt; &#xA; &lt;li&gt;Removed network gaming support&lt;/li&gt; &#xA; &lt;li&gt;Removed joystick support&lt;/li&gt; &#xA; &lt;li&gt;Removed Y mouse movement (move forward/backwards)&lt;/li&gt; &#xA; &lt;li&gt;Added autorun support (F12 key)&lt;/li&gt; &#xA; &lt;li&gt;Added mono sound support&lt;/li&gt; &#xA; &lt;li&gt;Replaced DOS/4GW with DOS/32A providing a good speedup!&lt;/li&gt; &#xA; &lt;li&gt;New setup program&lt;/li&gt; &#xA; &lt;li&gt;New video modes (Mode 13h, MDA, CGA, EGA, Hercules, Text modes, VESA 2.0, Plantronics Colorplus, Sigma Color 400)&lt;/li&gt; &#xA; &lt;li&gt;Advanced benchmark support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DEMO&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Doom 1.9 Audio&lt;/th&gt; &#xA;   &lt;th&gt;Doom 1.9 NoAudio&lt;/th&gt; &#xA;   &lt;th&gt;FastDoom 0.2 Audio&lt;/th&gt; &#xA;   &lt;th&gt;FastDoom 0.2 Audio FlatVisplanes&lt;/th&gt; &#xA;   &lt;th&gt;FastDoom 0.2 Audio FlatVisplanes FlatTransparency&lt;/th&gt; &#xA;   &lt;th&gt;FastDoom 0.2 Audio FlatVisplanes Sega Saturn transparency&lt;/th&gt; &#xA;   &lt;th&gt;FastDoom 0.2 NoAudio&lt;/th&gt; &#xA;   &lt;th&gt;FastDoom 0.2 NoAudio flatVisplanes Sega Saturn transparency&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FPS&lt;/td&gt; &#xA;   &lt;td&gt;19.56&lt;/td&gt; &#xA;   &lt;td&gt;21.68&lt;/td&gt; &#xA;   &lt;td&gt;22.44&lt;/td&gt; &#xA;   &lt;td&gt;25.77&lt;/td&gt; &#xA;   &lt;td&gt;25.86&lt;/td&gt; &#xA;   &lt;td&gt;26.02&lt;/td&gt; &#xA;   &lt;td&gt;24.79&lt;/td&gt; &#xA;   &lt;td&gt;29.05&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gain&lt;/td&gt; &#xA;   &lt;td&gt;100.00%&lt;/td&gt; &#xA;   &lt;td&gt;110.20%&lt;/td&gt; &#xA;   &lt;td&gt;114.70%&lt;/td&gt; &#xA;   &lt;td&gt;131.70%&lt;/td&gt; &#xA;   &lt;td&gt;132.20%&lt;/td&gt; &#xA;   &lt;td&gt;133.00%&lt;/td&gt; &#xA;   &lt;td&gt;126.74%&lt;/td&gt; &#xA;   &lt;td&gt;148.52%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;FastDoom 0.8 Live Demo (Texas Instruments 486DLC @40 MHz, Cirrus Logic GD-5422 ISA):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8323882/147228550-bf93cc50-3c92-4a7a-b84f-65c8bbe1d3a9.mp4&#34;&gt;https://user-images.githubusercontent.com/8323882/147228550-bf93cc50-3c92-4a7a-b84f-65c8bbe1d3a9.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qizwu6dozvc&#34;&gt;Full video here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions (FastDOOM)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Open Watcom C version 2.0&lt;/li&gt; &#xA; &lt;li&gt;Install NASM&lt;/li&gt; &#xA; &lt;li&gt;Install DOS/32A&lt;/li&gt; &#xA; &lt;li&gt;Add Watcom&#39;s bin folder (binnt on Windows, binw on DOS) to the PATH.&lt;/li&gt; &#xA; &lt;li&gt;Run makeall.bat&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build instructions (FDSETUP)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Borland C++ 4.52 (Windows 3.1, Windows 9x)&lt;/li&gt; &#xA; &lt;li&gt;Install Laughing Dog Screen Maker 1.14 (MS-DOS)&lt;/li&gt; &#xA; &lt;li&gt;Run .\FDSETUP\SCREENS\MAKE.BAT (MS-DOS)&lt;/li&gt; &#xA; &lt;li&gt;Open setup.ide project in Borland C++ IDE&lt;/li&gt; &#xA; &lt;li&gt;Build the project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/viti95/FastDoom/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=viti95/fastdoom&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#viti95/FastDoom&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=viti95/FastDoom&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to add issues or pull requests here on GitHub. I cannot guarantee that I will accept your changes, but feel free to fork the repo and make changes as you see fit. Thanks!&lt;/p&gt;</summary>
  </entry>
</feed>