<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-16T01:24:21Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ElementsProject/lightning</title>
    <updated>2024-02-16T01:24:21Z</updated>
    <id>tag:github.com,2024-02-16:/ElementsProject/lightning</id>
    <link href="https://github.com/ElementsProject/lightning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Core Lightning â€” Lightning Network implementation focusing on spec compliance and performance&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Core Lightning (CLN): A specification compliant Lightning Network implementation in C&lt;/h1&gt; &#xA;&lt;p&gt;Core Lightning (previously c-lightning) is a lightweight, highly customizable and &lt;a href=&#34;https://github.com/lightning/bolts&#34;&gt;standard compliant&lt;/a&gt; implementation of the Lightning Network protocol.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#starting-lightningd&#34;&gt;Starting lightningd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#using-the-json-rpc-interface&#34;&gt;Using the JSON-RPC Interface&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#care-and-feeding-of-your-new-lightning-node&#34;&gt;Care And Feeding Of Your New Lightning Node&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#opening-a-channel&#34;&gt;Opening A Channel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#sending-and-receiving-payments&#34;&gt;Sending and Receiving Payments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#configuration-file&#34;&gt;Configuration File&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#further-information&#34;&gt;Further Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#pruning&#34;&gt;Pruning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#hd-wallet-encryption&#34;&gt;HD wallet encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#developers&#34;&gt;Developers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.corelightning.org/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ElementsProject/lightning/actions&#34;&gt;&lt;img src=&#34;https://github.com/ElementsProject/lightning/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;Pull Requests Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/#c-lightning&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;Irc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.corelightning.org/docs&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/lightning/badge/?version=docs&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This implementation has been in production use on the Bitcoin mainnet since early 2018, with the launch of the &lt;a href=&#34;https://blockstream.com/2018/01/16/en-lightning-charge/&#34;&gt;Blockstream Store&lt;/a&gt;. We recommend getting started by experimenting on &lt;code&gt;testnet&lt;/code&gt; (or &lt;code&gt;regtest&lt;/code&gt;), but the implementation is considered stable and can be safely used on mainnet.&lt;/p&gt; &#xA;&lt;p&gt;Any help testing the implementation, reporting bugs, or helping with outstanding issues is very welcome. Don&#39;t hesitate to reach out to us on IRC at &lt;a href=&#34;https://web.libera.chat/#lightning-dev&#34;&gt;#lightning-dev @ libera.chat&lt;/a&gt;, &lt;a href=&#34;https://web.libera.chat/#c-lightning&#34;&gt;#c-lightning @ libera.chat&lt;/a&gt;, or on the implementation-specific mailing list &lt;a href=&#34;https://lists.ozlabs.org/listinfo/c-lightning&#34;&gt;c-lightning@lists.ozlabs.org&lt;/a&gt;, or on the Lightning Network-wide mailing list &lt;a href=&#34;https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev&#34;&gt;lightning-dev@lists.linuxfoundation.org&lt;/a&gt;, or on Discord &lt;a href=&#34;https://discord.gg/mE9s4rc5un&#34;&gt;core-lightning&lt;/a&gt;, or on Telegram &lt;a href=&#34;https://t.me/lightningd&#34;&gt;Core Lightning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Core Lightning only works on Linux and macOS, and requires a locally (or remotely) running &lt;code&gt;bitcoind&lt;/code&gt; (version 22.0 or above) that is fully caught up with the network you&#39;re running on, and relays transactions (ie with &lt;code&gt;blocksonly=0&lt;/code&gt;). Pruning (&lt;code&gt;prune=n&lt;/code&gt; option in &lt;code&gt;bitcoin.conf&lt;/code&gt;) is partially supported, see &lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#pruning&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;There are 4 supported installation options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation of a pre-compiled binary from the &lt;a href=&#34;https://github.com/ElementsProject/lightning/releases&#34;&gt;release page&lt;/a&gt; on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Using one of the &lt;a href=&#34;https://hub.docker.com/r/elementsproject/lightningd/&#34;&gt;provided docker images&lt;/a&gt; on the Docker Hub.&lt;/li&gt; &#xA; &lt;li&gt;Compiling the source code yourself as described in the &lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/getting-started/getting-started/installation.md&#34;&gt;installation documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Starting &lt;code&gt;lightningd&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Regtest (local, fast-start) Option&lt;/h4&gt; &#xA;&lt;p&gt;If you want to experiment with &lt;code&gt;lightningd&lt;/code&gt;, there&#39;s a script to set up a &lt;code&gt;bitcoind&lt;/code&gt; regtest test network of two local lightning nodes, which provides a convenient &lt;code&gt;start_ln&lt;/code&gt; helper. See the notes at the top of the &lt;code&gt;startup_regtest.sh&lt;/code&gt; file for details on how to use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;. contrib/startup_regtest.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet Option&lt;/h4&gt; &#xA;&lt;p&gt;To test with real bitcoin, you will need to have a local &lt;code&gt;bitcoind&lt;/code&gt; node running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bitcoind -daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait until &lt;code&gt;bitcoind&lt;/code&gt; has synchronized with the network.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you do not have &lt;code&gt;walletbroadcast=0&lt;/code&gt; in your &lt;code&gt;~/.bitcoin/bitcoin.conf&lt;/code&gt;, or you may run into trouble. Notice that running &lt;code&gt;lightningd&lt;/code&gt; against a pruned node may cause some issues if not managed carefully, see &lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#pruning&#34;&gt;below&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can start &lt;code&gt;lightningd&lt;/code&gt; with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lightningd --network=bitcoin --log-level=debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a &lt;code&gt;.lightning/&lt;/code&gt; subdirectory in your home directory: see &lt;code&gt;man -l doc/lightningd.8&lt;/code&gt; (or &lt;a href=&#34;https://docs.corelightning.org/docs&#34;&gt;https://docs.corelightning.org/docs&lt;/a&gt;) for more runtime options.&lt;/p&gt; &#xA;&lt;h3&gt;Using The JSON-RPC Interface&lt;/h3&gt; &#xA;&lt;p&gt;Core Lightning exposes a &lt;a href=&#34;https://www.jsonrpc.org/specification&#34;&gt;JSON-RPC 2.0&lt;/a&gt; interface over a Unix Domain socket; the &lt;code&gt;lightning-cli&lt;/code&gt; tool can be used to access it, or there is a &lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/contrib/pyln-client&#34;&gt;python client library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;lightning-cli help&lt;/code&gt; to print a table of RPC methods; &lt;code&gt;lightning-cli help &amp;lt;command&amp;gt;&lt;/code&gt; will offer specific information on that command.&lt;/p&gt; &#xA;&lt;p&gt;Useful commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-newaddr.7.md&#34;&gt;newaddr&lt;/a&gt;: get a bitcoin address to deposit funds into your lightning node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-listfunds.7.md&#34;&gt;listfunds&lt;/a&gt;: see where your funds are.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-connect.7.md&#34;&gt;connect&lt;/a&gt;: connect to another lightning node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-fundchannel.7.md&#34;&gt;fundchannel&lt;/a&gt;: create a channel to another connected node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-invoice.7.md&#34;&gt;invoice&lt;/a&gt;: create an invoice to get paid by another node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-pay.7.md&#34;&gt;pay&lt;/a&gt;: pay someone else&#39;s invoice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/lightning-plugin.7.md&#34;&gt;plugin&lt;/a&gt;: commands to control extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Care And Feeding Of Your New Lightning Node&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve started for the first time, there&#39;s a script called &lt;code&gt;contrib/bootstrap-node.sh&lt;/code&gt; which will connect you to other nodes on the lightning network.&lt;/p&gt; &#xA;&lt;p&gt;There are also numerous plugins available for Core Lightning which add capabilities: in particular there&#39;s a collection at: &lt;a href=&#34;https://github.com/lightningd/plugins&#34;&gt;https://github.com/lightningd/plugins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Including &lt;a href=&#34;https://github.com/lightningd/plugins/tree/master/helpme&#34;&gt;helpme&lt;/a&gt; which guides you through setting up your first channels and customizing your node.&lt;/p&gt; &#xA;&lt;p&gt;For a less reckless experience, you can encrypt the HD wallet seed: see &lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/#hd-wallet-encryption&#34;&gt;HD wallet encryption&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also chat to other users at &lt;a href=&#34;https://web.libera.chat/#c-lightning&#34;&gt;#c-lightning @ libera.chat&lt;/a&gt;; we are always happy to help you get started!&lt;/p&gt; &#xA;&lt;h3&gt;Opening A Channel&lt;/h3&gt; &#xA;&lt;p&gt;First you need to transfer some funds to &lt;code&gt;lightningd&lt;/code&gt; so that it can open a channel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Returns an address &amp;lt;address&amp;gt;&#xA;lightning-cli newaddr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;lightningd&lt;/code&gt; will register the funds once the transaction is confirmed.&lt;/p&gt; &#xA;&lt;p&gt;You may need to generate a p2sh-segwit address if the faucet does not support bech32:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Return a p2sh-segwit address&#xA;lightning-cli newaddr p2sh-segwit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confirm &lt;code&gt;lightningd&lt;/code&gt; got funds by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Returns an array of on-chain funds.&#xA;lightning-cli listfunds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once &lt;code&gt;lightningd&lt;/code&gt; has funds, we can connect to a node and open a channel. Let&#39;s assume the &lt;strong&gt;remote&lt;/strong&gt; node is accepting connections at &lt;code&gt;&amp;lt;ip&amp;gt;&lt;/code&gt; (and optional &lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt;, if not 9735) and has the node ID &lt;code&gt;&amp;lt;node_id&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lightning-cli connect &amp;lt;node_id&amp;gt; &amp;lt;ip&amp;gt; [&amp;lt;port&amp;gt;]&#xA;lightning-cli fundchannel &amp;lt;node_id&amp;gt; &amp;lt;amount_in_satoshis&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This opens a connection and, on top of that connection, then opens a channel. The funding transaction needs 3 confirmation in order for the channel to be usable, and 6 to be announced for others to use. You can check the status of the channel using &lt;code&gt;lightning-cli listpeers&lt;/code&gt;, which after 3 confirmations (1 on testnet) should say that &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;CHANNELD_NORMAL&lt;/code&gt;; after 6 confirmations you can use &lt;code&gt;lightning-cli listchannels&lt;/code&gt; to verify that the &lt;code&gt;public&lt;/code&gt; field is now &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sending and Receiving Payments&lt;/h3&gt; &#xA;&lt;p&gt;Payments in Lightning are invoice based. The recipient creates an invoice with the expected &lt;code&gt;&amp;lt;amount&amp;gt;&lt;/code&gt; in millisatoshi (or &lt;code&gt;&#34;any&#34;&lt;/code&gt; for a donation), a unique &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; the payer will see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lightning-cli invoice &amp;lt;amount&amp;gt; &amp;lt;label&amp;gt; &amp;lt;description&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns some internal details, and a standard invoice string called &lt;code&gt;bolt11&lt;/code&gt; (named after the &lt;a href=&#34;https://github.com/lightning/bolts/raw/master/11-payment-encoding.md&#34;&gt;BOLT #11 lightning spec&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The sender can feed this &lt;code&gt;bolt11&lt;/code&gt; string to the &lt;code&gt;decodepay&lt;/code&gt; command to see what it is, and pay it simply using the &lt;code&gt;pay&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lightning-cli pay &amp;lt;bolt11&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that there are lower-level interfaces (and more options to these interfaces) for more sophisticated use.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration File&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lightningd&lt;/code&gt; can be configured either by passing options via the command line, or via a configuration file. Command line options will always override the values in the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;To use a configuration file, create a file named &lt;code&gt;config&lt;/code&gt; within your top-level lightning directory or network subdirectory (eg. &lt;code&gt;~/.lightning/config&lt;/code&gt; or &lt;code&gt;~/.lightning/bitcoin/config&lt;/code&gt;). See &lt;code&gt;man -l doc/lightningd-config.5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A sample configuration file is available at &lt;code&gt;contrib/config-example&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further information&lt;/h2&gt; &#xA;&lt;h3&gt;Pruning&lt;/h3&gt; &#xA;&lt;p&gt;Core Lightning requires JSON-RPC access to a fully synchronized &lt;code&gt;bitcoind&lt;/code&gt; in order to synchronize with the Bitcoin network. Access to ZeroMQ is not required and &lt;code&gt;bitcoind&lt;/code&gt; does not need to be run with &lt;code&gt;txindex&lt;/code&gt; like other implementations. The lightning daemon will poll &lt;code&gt;bitcoind&lt;/code&gt; for new blocks that it hasn&#39;t processed yet, thus synchronizing itself with &lt;code&gt;bitcoind&lt;/code&gt;. If &lt;code&gt;bitcoind&lt;/code&gt; prunes a block that Core Lightning has not processed yet, e.g., Core Lightning was not running for a prolonged period, then &lt;code&gt;bitcoind&lt;/code&gt; will not be able to serve the missing blocks, hence Core Lightning will not be able to synchronize anymore and will be stuck. In order to avoid this situation you should be monitoring the gap between Core Lightning&#39;s blockheight using &lt;code&gt;lightning-cli getinfo&lt;/code&gt; and &lt;code&gt;bitcoind&lt;/code&gt;&#39;s blockheight using &lt;code&gt;bitcoin-cli getblockchaininfo&lt;/code&gt;. If the two blockheights drift apart it might be necessary to intervene.&lt;/p&gt; &#xA;&lt;h3&gt;HD wallet encryption&lt;/h3&gt; &#xA;&lt;p&gt;You can encrypt the &lt;code&gt;hsm_secret&lt;/code&gt; content (which is used to derive the HD wallet&#39;s master key) by passing the &lt;code&gt;--encrypted-hsm&lt;/code&gt; startup argument, or by using the &lt;code&gt;hsmtool&lt;/code&gt; (which you can find in the &lt;code&gt;tool/&lt;/code&gt; directory at the root of this repo) with the &lt;code&gt;encrypt&lt;/code&gt; method. You can unencrypt an encrypted &lt;code&gt;hsm_secret&lt;/code&gt; using the &lt;code&gt;hsmtool&lt;/code&gt; with the &lt;code&gt;decrypt&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;If you encrypt your &lt;code&gt;hsm_secret&lt;/code&gt;, you will have to pass the &lt;code&gt;--encrypted-hsm&lt;/code&gt; startup option to &lt;code&gt;lightningd&lt;/code&gt;. Once your &lt;code&gt;hsm_secret&lt;/code&gt; is encrypted, you &lt;strong&gt;will not&lt;/strong&gt; be able to access your funds without your password, so please beware with your password management. Also, beware of not feeling too safe with an encrypted &lt;code&gt;hsm_secret&lt;/code&gt;: unlike for &lt;code&gt;bitcoind&lt;/code&gt; where the wallet encryption can restrict the usage of some RPC command, &lt;code&gt;lightningd&lt;/code&gt; always needs to access keys from the wallet which is thus &lt;strong&gt;not locked&lt;/strong&gt; (yet), even with an encrypted BIP32 master seed.&lt;/p&gt; &#xA;&lt;h3&gt;Developers&lt;/h3&gt; &#xA;&lt;p&gt;Developers wishing to contribute should start with the developer guide &lt;a href=&#34;https://raw.githubusercontent.com/ElementsProject/lightning/master/doc/contribute-to-core-lightning/coding-style-guidelines.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hades-emu/Hades</title>
    <updated>2024-02-16T01:24:21Z</updated>
    <id>tag:github.com,2024-02-16:/hades-emu/Hades</id>
    <link href="https://github.com/hades-emu/Hades" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”¥ A Nintendo Game Boy Advance Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ”¥ Hades&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/hades-emu/hades&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;https://github.com/hades-emu/hades/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/hades-emu/hades/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://hades-emu.org/&#34;&gt;&lt;img src=&#34;https://i.imgur.com/4OrVpX2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;A Nintendo Game Boy Advance Emulator&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/29JPzmU.png&#34;&gt; &lt;img src=&#34;https://i.imgur.com/kyEfEam.png&#34;&gt; &lt;img src=&#34;https://i.imgur.com/c84TjGW.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/WGCHWJv.png&#34;&gt; &lt;img src=&#34;https://i.imgur.com/0LMmkRD.png&#34;&gt; &lt;img src=&#34;https://i.imgur.com/pbdR5AN.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Hades is still under heavy development but it aims to have a decent balance between usability, speed and accuracy.&lt;/p&gt; &#xA;&lt;p&gt;Currently, Hades features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decent accuracy&lt;/li&gt; &#xA; &lt;li&gt;Game controller support&lt;/li&gt; &#xA; &lt;li&gt;Keys and buttons remapping&lt;/li&gt; &#xA; &lt;li&gt;Quick Saves (also known as Save State)&lt;/li&gt; &#xA; &lt;li&gt;Real Time Clock (RTC) support&lt;/li&gt; &#xA; &lt;li&gt;Color correction &amp;amp; LCD effects&lt;/li&gt; &#xA; &lt;li&gt;Loading games from common archive formats (&lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.7z&lt;/code&gt;, &lt;code&gt;.rar&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is the third ðŸ¥‰ software emulator to pass the AGS Aging Cartridge used to test Game Boy Advance systems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Follow the instructions on our &lt;a href=&#34;https://hades-emu.org/download&#34;&gt;officiel website&lt;/a&gt; to download and install Hades.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;The build dependencies are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;meson&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GCC&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SDL2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OpenGL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;glew&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gtk3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libarchive&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Ubuntu, you can install all those dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt install meson ninja-build gcc libsdl2-dev libglew-dev libgtk-3-dev libarchive-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, you can install all those dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dnf install meson ninja-build gcc SDL2-devel glew-devel gtk3-devel libarchive-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build Hades, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;meson build&#xA;cd build&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to some invaluable individuals and resources while writing Hades:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://problemkaputt.de/gbatek.htm&#34;&gt;GBATEK&lt;/a&gt; by Martin Korth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fleroviux/NanoBoyAdvance/&#34;&gt;NanoBoyAdvance&lt;/a&gt; by Fleroviux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mgba.io/&#34;&gt;mGBA&lt;/a&gt; and &lt;a href=&#34;https://github.com/mgba-emu/suite&#34;&gt;mgba-emu/suite&lt;/a&gt; by Endrift&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsmolka/gba-tests&#34;&gt;gba-tests&lt;/a&gt; by Jsmolka&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.rit.edu/~tjh8300/CowBite/CowBiteSpec.htm&#34;&gt;Cowbite&lt;/a&gt; by Tom Happ&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gdkchan/gdkGBA/&#34;&gt;gdkGBA&lt;/a&gt; by gdkChan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coranac.com/tonc/text/toc.htm&#34;&gt;Tonc&lt;/a&gt; by Cearn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dillonbeliveau.com/2020/06/05/GBA-FLASH.html&#34;&gt;GBA Cartridge Backup Storage&lt;/a&gt; by Dillon Beliveau&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://densinh.github.io/DenSinH/emulation/2021/02/01/gba-eeprom.html&#34;&gt;EEPROM Save Type&lt;/a&gt; by Dennis H&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beanmachine.alt.icu/post/rtc/&#34;&gt;Explaining GBA Real-Time Clock (RTC)&lt;/a&gt; by Zayd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://near.sh/articles/video/color-emulation&#34;&gt;Higan&lt;/a&gt; for their color correction algorithm (by Talarubi and Near)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://totushi.com/&#34;&gt;The Hades Icon&lt;/a&gt; by Totushi&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>