<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T01:28:45Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Decscots/Lockpick_RCM</title>
    <updated>2024-04-01T01:28:45Z</updated>
    <id>tag:github.com,2024-04-01:/Decscots/Lockpick_RCM</id>
    <link href="https://github.com/Decscots/Lockpick_RCM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lockpick_RCM&lt;/h1&gt; &#xA;&lt;p&gt;Lockpick_RCM is a bare metal Nintendo Switch payload that derives encryption keys for use in Switch file handling software like hactool, hactoolnet/LibHac, ChoiDujour, etc. without booting Horizon OS.&lt;/p&gt; &#xA;&lt;p&gt;Due to changes imposed by firmware 7.0.0, Lockpick homebrew can no longer derive the latest keys. In the boot-time environment however, there is no such limitation.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is highly recommended, but not required, to place Minerva on SD from the latest &lt;a href=&#34;https://github.com/CTCaer/hekate/releases&#34;&gt;Hekate&lt;/a&gt; for best performance, especially while dumping titlekeys - the file and path is &lt;code&gt;/bootloader/sys/libsys_minerva.bso&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch Lockpick_RCM.bin using your favorite payload injector or chainloader&lt;/li&gt; &#xA; &lt;li&gt;Upon completion, keys will be saved to &lt;code&gt;/switch/prod.keys&lt;/code&gt; and titlekeys to &lt;code&gt;/switch/title.keys&lt;/code&gt; on SD&lt;/li&gt; &#xA; &lt;li&gt;This release bundles the Falcon keygen from &lt;a href=&#34;https://github.com/Atmosphere-NX/Atmosphere&#34;&gt;Atmosph√®re-NX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Mariko-Specific Keys&lt;/h1&gt; &#xA;&lt;p&gt;Mariko consoles have several unique keys and protected keyslots. To get your SBK or the Mariko specific keys, you will need to use the &lt;code&gt;/switch/partialaes.keys&lt;/code&gt; file along with a brute forcing tool such as &lt;a href=&#34;https://files.sshnuke.net/PartialAesKeyCrack.zip&#34;&gt;https://files.sshnuke.net/PartialAesKeyCrack.zip&lt;/a&gt;. The contents of this file are the keyslot number followed by the result of that keyslot encrypting 16 null bytes. With the tool linked above, enter them in sequence for a given keyslot you want the contents of, for example: &lt;code&gt;PartialAesKeyCrack.exe &amp;lt;num1&amp;gt; &amp;lt;num2&amp;gt; &amp;lt;num3&amp;gt; &amp;lt;num4&amp;gt;&lt;/code&gt; with the &lt;code&gt;--numthreads=N&lt;/code&gt; where N is the number of threads you can dedicate to the brute force.&lt;/p&gt; &#xA;&lt;p&gt;The keyslots are as follows, with names recognized by &lt;code&gt;hactool&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0-11 - &lt;code&gt;mariko_aes_class_key_xx&lt;/code&gt; (this is not used by the Switch but is set by the bootrom; hactoolnet recognizes it but it serves no purpose)&lt;/li&gt; &#xA; &lt;li&gt;12 - &lt;code&gt;mariko_kek&lt;/code&gt; (not unique - this is used for master key derivation)&lt;/li&gt; &#xA; &lt;li&gt;13 - &lt;code&gt;mariko_bek&lt;/code&gt; (not unique - this is used for BCT and package1 decryption)&lt;/li&gt; &#xA; &lt;li&gt;14 - &lt;code&gt;secure_boot_key&lt;/code&gt; (console unique - this isn&#39;t needed for further key derivation than what Lockpick_RCM does but might be nice to have for your records)&lt;/li&gt; &#xA; &lt;li&gt;15 - Secure storage key (console unique - this is not used on retail or dev consoles and not recognized by any tools)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So if you want to brute force the &lt;code&gt;mariko_kek&lt;/code&gt;, open your &lt;code&gt;partialaes.keys&lt;/code&gt; and observe the numbers beneath keyslot 12. Here&#39;s an example with fake numbers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12&#xA;11111111111111111111111111111111 22222222222222222222222222222222 33333333333333333333333333333333 44444444444444444444444444444444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then take those numbers and open a command prompt window at the location of the exe linked above and type: &lt;code&gt;PartialAesKeyCrack.exe 11111111111111111111111111111111 22222222222222222222222222222222 33333333333333333333333333333333 44444444444444444444444444444444&lt;/code&gt; and if you&#39;re on a powerful enough multicore system, add &lt;code&gt; --numthreads=[whatever number of threads]&lt;/code&gt;, ideally not your system&#39;s maximum if it&#39;s, for example, an older laptop with a low-end dual core CPU. On a Ryzen 3900x with 24 threads this generates a lot of heat but finishes in about 45 seconds.&lt;/p&gt; &#xA;&lt;p&gt;These keys never change so a brute force need only be conducted once.&lt;/p&gt; &#xA;&lt;p&gt;This works due to the security engine immediately flushing writes to keyslots which can be written one 32-bit chunk at a time. See: &lt;a href=&#34;https://switchbrew.org/wiki/Switch_System_Flaws#Hardware&#34;&gt;https://switchbrew.org/wiki/Switch_System_Flaws#Hardware&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://devkitpro.org/&#34;&gt;devkitARM&lt;/a&gt; and run &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Massive Thanks to CTCaer!&lt;/h1&gt; &#xA;&lt;p&gt;This software is heavily based on &lt;a href=&#34;https://github.com/CTCaer/hekate&#34;&gt;Hekate&lt;/a&gt;. Beyond that, CTCaer was exceptionally helpful in the development of this project, lending loads of advice, expertise, and humor.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is under the GPLv2 license. The Save processing module is adapted from &lt;a href=&#34;https://github.com/SciresM/hactool&#34;&gt;hactool&lt;/a&gt; code under ISC.&lt;/p&gt; &#xA;&lt;h1&gt;Unofficial Repo&lt;/h1&gt; &#xA;&lt;p&gt;This repository is just a clone of &lt;a href=&#34;https://github.com/shchmue&#34;&gt;shchmue&lt;/a&gt;&#39;s DMCA&#39;d Lockpick_RCM repository with keys updated from the &lt;a href=&#34;https://github.com/Atmosphere-NX/Atmosphere&#34;&gt;Atmosphere&lt;/a&gt; repository&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dayanch96/YTMusicUltimate</title>
    <updated>2024-04-01T01:28:45Z</updated>
    <id>tag:github.com,2024-04-01:/dayanch96/YTMusicUltimate</id>
    <link href="https://github.com/dayanch96/YTMusicUltimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best tweak for YouTube Music iOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YTMusicUltimate&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/38832025/235781424-06d81647-b3db-4d9b-94dc-cd65cdf09145.png?raw=true)&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/38832025/235781207-6d1ad44e-0c32-4aec-9c75-cb928ca8a0d3.png?raw=true)&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The best tweak for the YouTube Music on iOS. &lt;/p&gt; &#xA;&lt;h2&gt;Download Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jailbreak:&lt;/strong&gt; Add &lt;strong&gt;&lt;a href=&#34;https://ginsu.dev/repo&#34;&gt;https://ginsu.dev/repo&lt;/a&gt;&lt;/strong&gt; to your favorite installer and download latest version from there, or from &lt;strong&gt;&lt;a href=&#34;https://github.com/ginsudev/YTMusicUltimate/releases&#34;&gt;Releases&lt;/a&gt;&lt;/strong&gt; page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(arm.deb version for Rootful and arm64.deb version for Rootless devices)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sideloading:&lt;/strong&gt; We no longer provide a sideloading IPA but you can build one yourself, keep reading:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build a YTMusicUltimate IPA by yourself using Github actions&lt;/h2&gt; &#xA;&lt;p&gt;If this is your first time here, start from step 1. If you built a YTMU IPA before, skip steps 1 and 2. Instead, click on the &#34;Sync fork&#34; button to get the latest version of the tweak and continue through step 3.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository using the fork button on the top right.&lt;/li&gt; &#xA; &lt;li&gt;On your forked repository, go to Repository Settings &amp;gt; Actions, enable Read and Write permissions.&lt;/li&gt; &#xA; &lt;li&gt;Go to the Actions tab on your forked repo, click on &#34;Build and Release YTMusicUltimate&#34; located on the left side. Click &#34;Run workflow&#34; button located on the right side.&lt;/li&gt; &#xA; &lt;li&gt;Find a decrypted YTMusic .ipa file (we cannot provide you this due to legal reasons) and upload it to a file provider(filebin.net or Dropbox is recommended). Paste the url to the necessary field and click &#34;Run workflow&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Wait for the build to finish. You can download the tweaked IPA from the releases section of your forked repo. (If you can&#39;t find the releases section, go to your forked repo and add /releases to the url. i.e github.com/user/YTMusicUltimate/releases)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;IPA building troubleshooting(I can&#39;t build the IPA/Github action fails/I can&#39;t find the releases section etc.)&lt;/h2&gt; &#xA;&lt;p&gt;99.9% of the time, the culprit is the IPA URL you provided. You HAVE TO provide a decryped IPA. It cannot be any other extension, it has to be a &lt;strong&gt;.ipa&lt;/strong&gt; file. Find a decrypted YTMusic IPA(we can&#39;t help you with that), upload it to filebin.net or Dropbox, give the direct link to the GitHub action. If you find a working ipa and upload it properly, everything will start working perfectly, pinky promise.&lt;/p&gt; &#xA;&lt;p&gt;If the github action works and you cannot find where you can download the result, you need to add /releases to the url of your forked repository. It&#39;ll probably look like this: &lt;a href=&#34;https://github.com/YOURUSERNAME/YTMusicUltimate/releases&#34;&gt;https://github.com/YOURUSERNAME/YTMusicUltimate/releases&lt;/a&gt;, don&#39;t forget to replace the YOURUSERNAME part with your username. It may seem invisible but if the github action is successful, IPA will be there.&lt;/p&gt; &#xA;&lt;h2&gt;How to build the package by yourself on your device&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;strong&gt;&lt;a href=&#34;https://theos.dev/docs/installation&#34;&gt;Theos&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repo &lt;strong&gt;&lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;&gt;using git&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cd your YTMusicUltimate folder and run:&lt;/p&gt; &lt;p&gt;‚Ä¢ &#39;&lt;strong&gt;make clean package&lt;/strong&gt;&#39; to build deb for rootful device&lt;/p&gt; &lt;p&gt;‚Ä¢ &#39;&lt;strong&gt;make clean package ROOTLESS=1&lt;/strong&gt;&#39; to build deb for rootless device&lt;/p&gt; &lt;p&gt;‚Ä¢ &#39;&lt;strong&gt;make clean package SIDELOADING=1&lt;/strong&gt;&#39; to build deb for injecting in to ipa&lt;/p&gt; &lt;p&gt;‚Ä¢ To learn how to inject tweaks in to ipa visit &lt;strong&gt;&lt;a href=&#34;https://github.com/Al4ise/Azule&#34;&gt;here (Azule)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Made with ‚ù§ by Ginsu and Dayanch96&lt;/p&gt;</summary>
  </entry>
</feed>