<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-09T01:33:18Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SynthstromAudible/DelugeFirmware</title>
    <updated>2023-06-09T01:33:18Z</updated>
    <id>tag:github.com,2023-06-09:/SynthstromAudible/DelugeFirmware</id>
    <link href="https://github.com/SynthstromAudible/DelugeFirmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;The Synthstrom Audible Deluge Firmware runs on the Deluge portable sequencer, synthesizer and sampler, produced by Synthstrom Audible Limited.&lt;/p&gt; &#xA;&lt;p&gt;The Deluge Firmware’s codebase is written mostly in C++, with some low-level functions in C, and even the occasional line of assembly. The program is “bare-metal” - it runs without any higher level operating system.&lt;/p&gt; &#xA;&lt;p&gt;The firmware runs on the Synthstrom Audible Deluge’s Renesas RZ/A1L processor, an Arm® Cortex®-A9 core running at 400MHz with 3MB of on-chip SRAM. The Deluge also includes a 64MB SDRAM chip.&lt;/p&gt; &#xA;&lt;p&gt;The firmware is built using a GNU ARM Embedded GCC toolchain.&lt;/p&gt; &#xA;&lt;h1&gt;Building the codebase&lt;/h1&gt; &#xA;&lt;h2&gt;Software installation&lt;/h2&gt; &#xA;&lt;p&gt;Download and install e2 studio - this is an Eclipse-based IDE distributed by Renesas, who make the Deluge’s Renesas RZ/A1L processor. You will have to create an account to access the download. It appears to only be available for Windows and Linux.&lt;/p&gt; &#xA;&lt;p&gt;In the installer, you only need to install for the RZ device family: &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/a4d57207-d4cb-4529-95a6-7f8cd21e0125&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under “customise features”, you should make sure to install the “Embedded C/C++ J-Link Debugging” component: &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/a725d3b9-59d0-4f2e-bb32-893c73850123&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under “additional software”, you don’t need anything under the “Renesas Toolchains &amp;amp; Utilities” tab, so you can uncheck them all: &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/497aa900-3c0b-4faa-b010-b29de774e78d&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;But (still on the “additional software” step), under the “GCC Toolchains &amp;amp; Utilities” tab, you should select “GNU ARM Embedded 9.2.1 2019q4”, and “LibGen for GNU ARM Embedded”. Everything else can be unchecked: &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/0d383e82-3b69-4fa2-89a1-538a03f897f5&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Windows, you will get a number of permission request dialogues. You will also see a dialog asking you to locate the tool-chain directory. As part of the install process, the gnu subsystem will launch a command-line window with the working directory pointing at this tool-chain directory.&lt;/p&gt; &#xA;&lt;p&gt;Those are all the custom options you need to select, and you can just complete the installation, run e2 studio, and select a workspace folder when it directs you - this is the folder under which you should place the Deluge source code inside its own subfolder, as shown below. Note that for the “hammer” icon/build function to un-gray, you must select the project at the highest level of the Project Explorer. &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/ff0ec17f-34ac-4701-8d55-b26811844aee&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building the firmware&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;(These instructions apply to the DelugeFirmwareCommunity repository, which features many helpful configuration additions.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build a firmware binary from the codebase, first open any source file from the Deluge project in e2 studio, to select the Deluge codebase as the active project.&lt;/p&gt; &#xA;&lt;p&gt;Then, click the dropdown arrow next to the “build” icon in the toolbar at the top. Make sure that the “e2-build-release-____” build configuration is selected based on whether you are building for the the OLED or 7-segment numeric display. &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/d3e71500-e327-46cb-9849-dcd3fcab1b4b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, making that selection will already trigger the build process. If not, you can do so by clicking the actual build icon (the hammer) itself, or by pressing ctrl+B.&lt;/p&gt; &#xA;&lt;p&gt;The build process will take a few minutes, and you’ll see its progress in the console window. &lt;img src=&#34;https://github.com/SynthstromAudible/DelugeFirmware/assets/1840176/16183fd5-d603-4ed8-b558-117c97bbba61&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The end result is the creation of a .bin file in the e2-build-release-oled or e2-build-release-7seg folder (depending which you selected above) which will have been created in the project’s directory. This file will get overwritten each time you do a build, so if you’ve made a build you’d like to keep, you should rename or copy the file.&lt;/p&gt; &#xA;&lt;p&gt;You can now simply put this file on an SD card and install it on your Deluge as per normal.&lt;/p&gt; &#xA;&lt;h1&gt;Direct firmware uploading and debugging&lt;/h1&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://docs.google.com/document/d/1PkECgg0sxoVPng5CTdvRIZcY1CBBPHS8oVVhZIzTVn8/edit?usp=sharing&#34;&gt;https://docs.google.com/document/d/1PkECgg0sxoVPng5CTdvRIZcY1CBBPHS8oVVhZIzTVn8/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GNOME/libxml2</title>
    <updated>2023-06-09T01:33:18Z</updated>
    <id>tag:github.com,2023-06-09:/GNOME/libxml2</id>
    <link href="https://github.com/GNOME/libxml2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Read-only mirror of https://gitlab.gnome.org/GNOME/libxml2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libxml2&lt;/h1&gt; &#xA;&lt;p&gt;libxml2 is an XML toolkit implemented in C, originally developed for the GNOME Project.&lt;/p&gt; &#xA;&lt;p&gt;Official releases can be downloaded from &lt;a href=&#34;https://download.gnome.org/sources/libxml2/&#34;&gt;https://download.gnome.org/sources/libxml2/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The git repository is hosted on GNOME&#39;s GitLab server: &lt;a href=&#34;https://gitlab.gnome.org/GNOME/libxml2&#34;&gt;https://gitlab.gnome.org/GNOME/libxml2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bugs should be reported at &lt;a href=&#34;https://gitlab.gnome.org/GNOME/libxml2/-/issues&#34;&gt;https://gitlab.gnome.org/GNOME/libxml2/-/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://gitlab.gnome.org/GNOME/libxml2/-/wikis&#34;&gt;https://gitlab.gnome.org/GNOME/libxml2/-/wikis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is released under the MIT License, see the Copyright file.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;libxml2 can be built with GNU Autotools, CMake, or several other build systems in platform-specific subdirectories.&lt;/p&gt; &#xA;&lt;h3&gt;Autotools (for POSIX systems like Linux, BSD, macOS)&lt;/h3&gt; &#xA;&lt;p&gt;If you build from a Git tree, you have to install Autotools and start by generating the configuration files with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./autogen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you build from a source tarball, extract the archive with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tar xf libxml2-xxx.tar.gz&#xA;cd libxml2-xxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a list of build options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also see the INSTALL file for additional instructions. Then you can configure and build the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure [possible options]&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that by default, no optimization options are used. You have to enable them manually, for example with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CFLAGS=&#39;-O2 -fno-semantic-interposition&#39; ./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run the test suite with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please report test failures to the mailing list or bug tracker.&lt;/p&gt; &#xA;&lt;p&gt;Then you can install the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At that point you may have to rerun ldconfig or a similar utility to update your list of installed shared libs.&lt;/p&gt; &#xA;&lt;h3&gt;CMake (mainly for Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Another option for compiling libxml is using CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -E tar xf libxml2-xxx.tar.gz&#xA;cmake -S libxml2-xxx -B libxml2-xxx-build [possible options]&#xA;cmake --build libxml2-xxx-build&#xA;cmake --install libxml2-xxx-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Common CMake options include:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-D BUILD_SHARED_LIBS=OFF            # build static libraries&#xA;-D CMAKE_BUILD_TYPE=Release         # specify build type&#xA;-D CMAKE_INSTALL_PREFIX=/usr/local  # specify the install path&#xA;-D LIBXML2_WITH_ICONV=OFF           # disable iconv&#xA;-D LIBXML2_WITH_LZMA=OFF            # disable liblzma&#xA;-D LIBXML2_WITH_PYTHON=OFF          # disable Python&#xA;-D LIBXML2_WITH_ZLIB=OFF            # disable libz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also open the libxml source directory with its CMakeLists.txt directly in various IDEs such as CLion, QtCreator, or Visual Studio.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Libxml does not require any other libraries. A platform with somewhat recent POSIX support should be sufficient (please report any violation to this rule you may find).&lt;/p&gt; &#xA;&lt;p&gt;However, if found at configuration time, libxml will detect and use the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zlib.net/&#34;&gt;libz&lt;/a&gt;, a highly portable and widely available compression library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tukaani.org/xz/&#34;&gt;liblzma&lt;/a&gt;, another compression library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/libiconv/&#34;&gt;libiconv&lt;/a&gt;, a character encoding conversion library. The iconv function is part of POSIX.1-2001, so libiconv isn&#39;t required on modern UNIX-like systems like Linux, BSD or macOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://icu.unicode.org/&#34;&gt;ICU&lt;/a&gt;, a Unicode library. Mainly useful as an alternative to iconv on Windows. Unnecessary on most other systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The current version of the code can be found in GNOME&#39;s GitLab at at &lt;a href=&#34;https://gitlab.gnome.org/GNOME/libxml2&#34;&gt;https://gitlab.gnome.org/GNOME/libxml2&lt;/a&gt;. The best way to get involved is by creating issues and merge requests on GitLab. Alternatively, you can start discussions and send patches to the mailing list. If you want to work with patches, please format them with git-format-patch and use plain text attachments.&lt;/p&gt; &#xA;&lt;p&gt;All code must conform to C89 and pass the GitLab CI tests. Add regression tests if possible.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daniel Veillard&lt;/li&gt; &#xA; &lt;li&gt;Bjorn Reese&lt;/li&gt; &#xA; &lt;li&gt;William Brack&lt;/li&gt; &#xA; &lt;li&gt;Igor Zlatkovic for the Windows port&lt;/li&gt; &#xA; &lt;li&gt;Aleksey Sanin&lt;/li&gt; &#xA; &lt;li&gt;Nick Wellnhofer&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>