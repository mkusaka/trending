<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:36:01Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0x7ff/gaster</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/0x7ff/gaster</id>
    <link href="https://github.com/0x7ff/gaster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WIP&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>FASTSHIFT/X-TRACK</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/FASTSHIFT/X-TRACK</id>
    <link href="https://github.com/FASTSHIFT/X-TRACK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A GPS bicycle speedometer that supports offline maps and track recording&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;X-TRACK&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;开源GPS自行车码表。&lt;/p&gt; &#xA; &lt;p&gt;拥有可显示实时位置的离线地图。&lt;/p&gt; &#xA; &lt;p&gt;支持记录和显示实时轨迹以及导出标准GPX格式的轨迹文件。&lt;/p&gt; &#xA; &lt;p&gt;全新设计的&lt;a href=&#34;https://github.com/FASTSHIFT/X-TRACK/tree/main/Software/X-Track/USER/App/Utils/PageManager&#34;&gt;&#34;页面生命周期管理&#34;&lt;/a&gt;和&lt;a href=&#34;https://github.com/FASTSHIFT/X-TRACK/tree/main/Software/X-Track/USER/App/Utils/DataCenter&#34;&gt;&#34;消息订阅发布框架&#34;&lt;/a&gt;。&lt;/p&gt; &#xA; &lt;p&gt;演示视频：&lt;a href=&#34;https://www.bilibili.com/video/BV1GB4y1K7VV&#34;&gt;https://www.bilibili.com/video/BV1GB4y1K7VV&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/FASTSHIFT/X-TRACK/raw/main/Images/%E5%9C%B0%E5%9B%BE.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GUI&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/lvgl/lvgl&#34;&gt;LVGL V8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;硬件配置&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.主控: AT32F435CGU7 (主频:288MHz RAM:512KB ROM:1MB)&lt;/li&gt; &#xA; &lt;li&gt;2.屏幕: ST7789 IPS 1.54inch SPI接口 240x240分辨率 60Hz刷新率&lt;/li&gt; &#xA; &lt;li&gt;3.储存器: Micro SD CARD 32GB&lt;/li&gt; &#xA; &lt;li&gt;4.输入设备: 旋转编码器&lt;/li&gt; &#xA; &lt;li&gt;5.RTC: MCU内置RTC时钟&lt;/li&gt; &#xA; &lt;li&gt;6.加速度计: LSM6DSM (支持硬件计步输出)&lt;/li&gt; &#xA; &lt;li&gt;7.地磁计: LIS3MDL&lt;/li&gt; &#xA; &lt;li&gt;8.GPS: ATGM336H (BDS + GPS + GLONASS + GALILEO + QZSS + SBAS)&lt;/li&gt; &#xA; &lt;li&gt;9.电池: Li-ion 3.7V 683030 700mAh&lt;/li&gt; &#xA; &lt;li&gt;10.电源管理: LP5907-3.3 + MCP73831&lt;/li&gt; &#xA; &lt;li&gt;11.外壳: 3D打印 光固化&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.支持速度、距离、时间、卡路里、航向显示&lt;/li&gt; &#xA; &lt;li&gt;2.拥有&lt;strong&gt;离线地图&lt;/strong&gt;，支持显示实时位置，支持缩放&lt;/li&gt; &#xA; &lt;li&gt;3.支持计步&lt;/li&gt; &#xA; &lt;li&gt;4.支持经纬度、海拔显示&lt;/li&gt; &#xA; &lt;li&gt;5.支持RTC自动根据GPS校准&lt;/li&gt; &#xA; &lt;li&gt;6.支持记录轨迹，可导出&lt;a href=&#34;https://zh.wikipedia.org/wiki/GPX&#34;&gt;GPX格式&lt;/a&gt;的文件&lt;/li&gt; &#xA; &lt;li&gt;7.支持掉电自动保存数据(JSON格式文件)&lt;/li&gt; &#xA; &lt;li&gt;8.四小时续航 (持续工作，始终亮屏)&lt;/li&gt; &#xA; &lt;li&gt;9.支持在&lt;a href=&#34;https://github.com/FASTSHIFT/X-TRACK/tree/main/Software/X-Track/Simulator&#34;&gt;PC模拟器&lt;/a&gt;模拟，脱离硬件调试(配置为&lt;strong&gt;Release x86&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;10.支持显示实时轨迹&lt;/li&gt; &#xA; &lt;li&gt;11.待续...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;实物演示&lt;/h2&gt; &#xA;&lt;h3&gt;测速&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/26767803/120889722-1f8d8e80-c631-11eb-8294-df79f151dedb.mp4&#34;&gt;https://user-images.githubusercontent.com/26767803/120889722-1f8d8e80-c631-11eb-8294-df79f151dedb.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;历史轨迹显示(&lt;a href=&#34;https://github.com/tumic0/GPXSee&#34;&gt;GPXSee&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/FASTSHIFT/X-TRACK/raw/main/Images/%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢&lt;a href=&#34;https://www.geek-workshop.com/home.php?mod=space&amp;amp;uid=204&#34;&gt;@davidce&lt;/a&gt;贡献的参考设计“&lt;a href=&#34;https://www.geek-workshop.com/thread-8835-1-1.html&#34;&gt;自制基于arduino的GPS地图导航系统3.0&lt;/a&gt;”。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢&lt;a href=&#34;https://github.com/W-Mai&#34;&gt;@W-Mai&lt;/a&gt;改进的&lt;a href=&#34;https://github.com/W-Mai/XLocateDownloader/releases/download/1.0.0/MapDownloader.zip&#34;&gt;地图下载链接生成工具&lt;/a&gt;、&lt;a href=&#34;https://github.com/W-Mai/XLocateDownloader&#34;&gt;地图下载器&lt;/a&gt;、&lt;a href=&#34;https://github.com/W-Mai/lvgl_image_converter&#34;&gt;LVGL图片转换器(Python版)&lt;/a&gt;、&lt;a href=&#34;https://github.com/W-Mai/filename_renamer&#34;&gt;批量文件重命名工具&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢&lt;a href=&#34;https://github.com/Trigger-CN&#34;&gt;@Trigger-CN&lt;/a&gt;的&lt;a href=&#34;https://github.com/FASTSHIFT/X-TRACK/tree/main/ArtDesign&#34;&gt;UI设计&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢&lt;a href=&#34;https://github.com/MouriNaruto&#34;&gt;@MouriNaruto&lt;/a&gt;的LVGL Visual Studio模拟器&lt;a href=&#34;https://github.com/lvgl/lv_sim_visual_studio&#34;&gt;lv_sim_visual_studio&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢&lt;a href=&#34;https://github.com/dj140&#34;&gt;@dj140&lt;/a&gt;编写&lt;a href=&#34;https://github.com/FASTSHIFT/X-TRACK/raw/main/Tools/README.md&#34;&gt;地图下载教程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>avem-labs/Avem</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/avem-labs/Avem</id>
    <link href="https://github.com/avem-labs/Avem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚁 轻量级无人机飞控-[Drone]-[STM32]-[PID]-[BLDC]&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/avem-labs/Avem&#34;&gt;&lt;img src=&#34;https://travis-ci.org/avem-labs/Avem.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/but0n/Avem.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/but0n/Avem/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/but0n/Avem.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-MacOS%20%7C%20Linux-orange.svg?sanitize=true&#34; alt=&#34;platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Avem &lt;span&gt;🐦&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/docs/images/header.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[UAV] - [STM32F103] - 6 Axes sensor MPU6050 - Quaternion &amp;amp; Euler Angles Compute - PID Controller&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://bbs.5imx.com/forum.php?mod=viewthread&amp;amp;tid=1227960&amp;amp;extra=page%3D1&#34;&gt;Details &amp;amp; Videos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Terminal demo&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://cdn.rawgit.com/but0n/Avem/develop/docs/images/hud.gif&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/docs/images/HUD.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/but0n/Avem_HUD&#34;&gt;https://github.com/but0n/Avem_HUD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;I/O List&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MPU6050&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BLDC&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Wi-Fi&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GPS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;SCL&lt;/code&gt;&lt;/strong&gt; PB15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;Channel 1&lt;/code&gt;&lt;/strong&gt; PA6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;USART3_TX&lt;/code&gt;&lt;/strong&gt; PB10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;em&gt;TBD&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;SDA&lt;/code&gt;&lt;/strong&gt; PB14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;Channel 2&lt;/code&gt;&lt;/strong&gt; PA7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;USART3_RX&lt;/code&gt;&lt;/strong&gt; PB11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;em&gt;TBD&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;Channel 3&lt;/code&gt;&lt;/strong&gt; PB0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;Channel 4&lt;/code&gt;&lt;/strong&gt; PB1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;To-do list&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Software &lt;strong&gt;I2C&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Init &lt;strong&gt;MPU6050&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get 3 axes &lt;code&gt;Gryo&lt;/code&gt; and 3 axes &lt;code&gt;Accel&lt;/code&gt; data from MPU6050&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cumpute Quaternion and Euler Angles&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;PWM&lt;/strong&gt; output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Driving motors with &lt;strong&gt;L9110S&lt;/strong&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;PID&lt;/strong&gt; Control&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Schematic&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PCB Layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brushless DC motor-&lt;a href=&#34;https://youtu.be/iHYVgTmxoSw&#34;&gt;Video via YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Wi-Fi&lt;/strong&gt;(&lt;code&gt;ESP8266&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/but0n/Avem/raw/master/docs/README.md&#34;&gt;Cascade PID control&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FreeRTOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Host: Flask + pyserial&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; PID debug&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;GPS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hardware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/docs/images/PF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Schematic&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/docs/images/pcb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PCB Layout&lt;/h2&gt; &#xA;&lt;p&gt;Version 3.0&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/docs/images/PCB/demoV3.0.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/avem-labs/Avem/develop/docs/&#34;&gt;Documents&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Made with ♥ by but0n&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ScarredMonk/SysmonSimulator</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/ScarredMonk/SysmonSimulator</id>
    <link href="https://github.com/ScarredMonk/SysmonSimulator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sysmon event simulation utility which can be used to simulate the attacks to generate the Sysmon Event logs for testing the EDR detections and correlation rules by Blue teams.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SysmonSimulator&lt;/h1&gt; &#xA;&lt;p&gt;SysmonSimulator is an Open source Windows event simulation utility created in C language, that can be used to simulate most of the attacks using WINAPIs. This can be used by Blue teams for testing the EDR detections and correlation rules. I have created it to generate attack data for the relevant Sysmon Event IDs.&lt;/p&gt; &#xA;&lt;h2&gt;Blogpost:&lt;/h2&gt; &#xA;&lt;p&gt;This tool has been explained in the blogpost: &lt;a href=&#34;https://rootdse.org/posts/understanding-sysmon-events/&#34;&gt;https://rootdse.org/posts/understanding-sysmon-events/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attacks are covered for important Windows events as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Process Events&lt;/strong&gt;: Process Creation, Process Termination, Process Access&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Events&lt;/strong&gt;: File Create, File Create Time Change, File Stream Creation Hash, File Delete, File Delete Detected&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Named Pipes Events&lt;/strong&gt;: Named Pipe Creation, Named Pipe Connect events&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registry Actions&lt;/strong&gt;: Registry Object create and delete, Value Set, Key and Value Rename&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Loading&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Connections&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create Remote Thread&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Raw Access Read&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS Query&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WMI Events&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clipboard Capture&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Process Image Tampering&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt; __                        __&#xA;(_      _ ._ _   _  ._    (_  o ._ _      |  _. _|_  _  ._&#xA;__) \/ _&amp;gt; | | | (_) | |   __) | | | | |_| | (_|  |_ (_) |&#xA;    /&#xA;                                            by @ScarredMonk&#xA;&#xA;Sysmon Simulator v0.1 - Sysmon event simulation utility&#xA;    A Windows utility to simulate Sysmon event logs&#xA;&#xA;Usage:&#xA;Run simulation : .\SysmonSimulator.exe -eid &amp;lt;event id&amp;gt;&#xA;Show help menu : .\SysmonSimulator.exe -help&#xA;&#xA;Example:&#xA;SysmonSimulator.exe -eid 1&#xA;&#xA;Parameters:&#xA;-eid 1  : Process creation&#xA;-eid 2  : A process changed a file creation time&#xA;-eid 3  : Network connection&#xA;-eid 5  : Process terminated&#xA;-eid 6  : Driver loaded&#xA;-eid 7  : Image loaded&#xA;-eid 8  : CreateRemoteThread&#xA;-eid 9  : RawAccessRead&#xA;-eid 10 : ProcessAccess&#xA;-eid 11 : FileCreate&#xA;-eid 12 : RegistryEvent - Object create and delete&#xA;-eid 13 : RegistryEvent - Value Set&#xA;-eid 14 : RegistryEvent - Key and Value Rename&#xA;-eid 15 : FileCreateStreamHash&#xA;-eid 16 : ServiceConfigurationChange&#xA;-eid 17 : PipeEvent - Pipe Created&#xA;-eid 18 : PipeEvent - Pipe Connected&#xA;-eid 19 : WmiEvent - WmiEventFilter activity detected&#xA;-eid 20 : WmiEvent - WmiEventConsumer activity detected&#xA;-eid 21 : WmiEvent - WmiEventConsumerToFilter activity detected&#xA;-eid 22 : DNSEvent - DNS query&#xA;-eid 24 : ClipboardChange - New content in the clipboard&#xA;-eid 25 : ProcessTampering - Process image change&#xA;-eid 26 : FileDeleteDetected - File Delete logged&#xA;&#xA;Description:&#xA;Enter an event ID from the above parameters list and the related Windows API function is called&#xA;to simulate the attack and Sysmon event log will be generated which can be viewed in the Windows Event Viewer&#xA;&#xA;Prerequisite:&#xA;Sysmon must be installed on the system&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ithewei/libhv</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/ithewei/libhv</id>
    <link href="https://github.com/ithewei/libhv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥 比libevent、libuv更易用的网络库。A c/c++ network library for developing TCP/UDP/SSL/HTTP/WebSocket/MQTT client/server.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/README-CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;libhv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/.github/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-linux%20%7C%20windows%20%7C%20macos-blue&#34; alt=&#34;platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/ithewei/libhv/workflows/CI/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/actions/workflows/benchmark.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/ithewei/libhv/workflows/benchmark/badge.svg?branch=master&#34; alt=&#34;benchmark&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/releases&#34;&gt;&lt;img src=&#34;https://badgen.net/github/release/ithewei/libhv?icon=github&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/stargazers&#34;&gt;&lt;img src=&#34;https://badgen.net/github/stars/ithewei/libhv?icon=github&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/network/members&#34;&gt;&lt;img src=&#34;https://badgen.net/github/forks/ithewei/libhv?icon=github&#34; alt=&#34;forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/issues&#34;&gt;&lt;img src=&#34;https://badgen.net/github/issues/ithewei/libhv?icon=github&#34; alt=&#34;issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/pulls&#34;&gt;&lt;img src=&#34;https://badgen.net/github/prs/ithewei/libhv?icon=github&#34; alt=&#34;PRs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/ithewei/libhv?icon=github&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://gitee.com/libhv/libhv&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/mirror/gitee/red&#34; alt=&#34;gitee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oz123/awesome-c&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/awesome-c/pink?icon=awesome&amp;amp;label&amp;amp;color&#34; alt=&#34;awesome-c&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fffaraz/awesome-cpp&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/awesome-cpp/pink?icon=awesome&amp;amp;label&amp;amp;color&#34; alt=&#34;awesome-cpp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;libevent, libev, and libuv&lt;/code&gt;, &lt;code&gt;libhv&lt;/code&gt; provides event-loop with non-blocking IO and timer, but simpler api and richer protocols.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform (Linux, Windows, MacOS, BSD, Solaris, Android, iOS)&lt;/li&gt; &#xA; &lt;li&gt;High-performance EventLoop (IO, timer, idle, custom)&lt;/li&gt; &#xA; &lt;li&gt;TCP/UDP client/server/proxy&lt;/li&gt; &#xA; &lt;li&gt;TCP supports heartbeat, reconnect, upstream, MultiThread-safe write and close, etc.&lt;/li&gt; &#xA; &lt;li&gt;Built-in common unpacking modes (FixedLength, Delimiter, LengthField)&lt;/li&gt; &#xA; &lt;li&gt;RUDP support: WITH_KCP&lt;/li&gt; &#xA; &lt;li&gt;SSL/TLS support: (via WITH_OPENSSL or WITH_GNUTLS or WITH_MBEDTLS)&lt;/li&gt; &#xA; &lt;li&gt;HTTP client/server (support https http1/x http2 grpc)&lt;/li&gt; &#xA; &lt;li&gt;HTTP static file service, indexof service, sync/async API handler&lt;/li&gt; &#xA; &lt;li&gt;HTTP supports RESTful, URI router, keep-alive, chunked, etc.&lt;/li&gt; &#xA; &lt;li&gt;WebSocket client/server&lt;/li&gt; &#xA; &lt;li&gt;MQTT client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⌛️ Build&lt;/h2&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or vcpkg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vcpkg install libhv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or xmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xrepo install libhv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚡️ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;code&gt;./getting_started.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ithewei/libhv.git&#xA;cd libhv&#xA;./configure&#xA;make&#xA;&#xA;bin/httpd -h&#xA;bin/httpd -d&#xA;#bin/httpd -c etc/httpd.conf -s restart -d&#xA;ps aux | grep httpd&#xA;&#xA;# http file service&#xA;bin/curl -v localhost:8080&#xA;&#xA;# http indexof service&#xA;bin/curl -v localhost:8080/downloads/&#xA;&#xA;# http api service&#xA;bin/curl -v localhost:8080/ping&#xA;bin/curl -v localhost:8080/echo -d &#34;hello,world!&#34;&#xA;bin/curl -v localhost:8080/query?page_no=1\&amp;amp;page_size=10&#xA;bin/curl -v localhost:8080/kv   -H &#34;Content-Type:application/x-www-form-urlencoded&#34; -d &#39;user=admin&amp;amp;pswd=123456&#39;&#xA;bin/curl -v localhost:8080/json -H &#34;Content-Type:application/json&#34; -d &#39;{&#34;user&#34;:&#34;admin&#34;,&#34;pswd&#34;:&#34;123456&#34;}&#39;&#xA;bin/curl -v localhost:8080/form -F &#39;user=admin&#39; -F &#39;pswd=123456&#39;&#xA;bin/curl -v localhost:8080/upload -d &#34;@LICENSE&#34;&#xA;bin/curl -v localhost:8080/upload -F &#34;file=@LICENSE&#34;&#xA;&#xA;bin/curl -v localhost:8080/test -H &#34;Content-Type:application/x-www-form-urlencoded&#34; -d &#39;bool=1&amp;amp;int=123&amp;amp;float=3.14&amp;amp;string=hello&#39;&#xA;bin/curl -v localhost:8080/test -H &#34;Content-Type:application/json&#34; -d &#39;{&#34;bool&#34;:true,&#34;int&#34;:123,&#34;float&#34;:3.14,&#34;string&#34;:&#34;hello&#34;}&#39;&#xA;bin/curl -v localhost:8080/test -F &#39;bool=1&#39; -F &#39;int=123&#39; -F &#39;float=3.14&#39; -F &#39;string=hello&#39;&#xA;# RESTful API: /group/:group_name/user/:user_id&#xA;bin/curl -v -X DELETE localhost:8080/group/test/user/123&#xA;&#xA;# benchmark&#xA;bin/wrk -c 1000 -d 10 -t 4 http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TCP&lt;/h3&gt; &#xA;&lt;h4&gt;tcp server&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;c version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_echo_server.c&#34;&gt;examples/tcp_echo_server.c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;c++ version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpServer_test.cpp&#34;&gt;evpp/TcpServer_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;TcpServer.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main() {&#xA;    int port = 1234;&#xA;    TcpServer srv;&#xA;    int listenfd = srv.createsocket(port);&#xA;    if (listenfd &amp;lt; 0) {&#xA;        return -1;&#xA;    }&#xA;    printf(&#34;server listen on port %d, listenfd=%d ...\n&#34;, port, listenfd);&#xA;    srv.onConnection = [](const SocketChannelPtr&amp;amp; channel) {&#xA;        std::string peeraddr = channel-&amp;gt;peeraddr();&#xA;        if (channel-&amp;gt;isConnected()) {&#xA;            printf(&#34;%s connected! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;        } else {&#xA;            printf(&#34;%s disconnected! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;        }&#xA;    };&#xA;    srv.onMessage = [](const SocketChannelPtr&amp;amp; channel, Buffer* buf) {&#xA;        // echo&#xA;        channel-&amp;gt;write(buf);&#xA;    };&#xA;    srv.setThreadNum(4);&#xA;    srv.start();&#xA;&#xA;    // press Enter to stop&#xA;    while (getchar() != &#39;\n&#39;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tcp client&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;c version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_client_test.c&#34;&gt;examples/tcp_client_test.c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;c++ version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpClient_test.cpp&#34;&gt;evpp/TcpClient_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;TcpClient.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main() {&#xA;    int port = 1234;&#xA;    TcpClient cli;&#xA;    int connfd = cli.createsocket(port);&#xA;    if (connfd &amp;lt; 0) {&#xA;        return -1;&#xA;    }&#xA;    cli.onConnection = [](const SocketChannelPtr&amp;amp; channel) {&#xA;        std::string peeraddr = channel-&amp;gt;peeraddr();&#xA;        if (channel-&amp;gt;isConnected()) {&#xA;            printf(&#34;connected to %s! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;            channel-&amp;gt;write(&#34;hello&#34;);&#xA;        } else {&#xA;            printf(&#34;disconnected to %s! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;        }&#xA;    };&#xA;    cli.onMessage = [](const SocketChannelPtr&amp;amp; channel, Buffer* buf) {&#xA;        printf(&#34;&amp;lt; %.*s\n&#34;, (int)buf-&amp;gt;size(), (char*)buf-&amp;gt;data());&#xA;    };&#xA;    cli.start();&#xA;&#xA;    // press Enter to stop&#xA;    while (getchar() != &#39;\n&#39;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP&lt;/h3&gt; &#xA;&lt;h4&gt;http server&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_server_test.cpp&#34;&gt;examples/http_server_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;golang gin style&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;HttpServer.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main() {&#xA;    HttpService router;&#xA;    router.GET(&#34;/ping&#34;, [](HttpRequest* req, HttpResponse* resp) {&#xA;        return resp-&amp;gt;String(&#34;pong&#34;);&#xA;    });&#xA;&#xA;    router.GET(&#34;/data&#34;, [](HttpRequest* req, HttpResponse* resp) {&#xA;        static char data[] = &#34;0123456789&#34;;&#xA;        return resp-&amp;gt;Data(data, 10);&#xA;    });&#xA;&#xA;    router.GET(&#34;/paths&#34;, [&amp;amp;router](HttpRequest* req, HttpResponse* resp) {&#xA;        return resp-&amp;gt;Json(router.Paths());&#xA;    });&#xA;&#xA;    router.GET(&#34;/get&#34;, [](HttpRequest* req, HttpResponse* resp) {&#xA;        resp-&amp;gt;json[&#34;origin&#34;] = req-&amp;gt;client_addr.ip;&#xA;        resp-&amp;gt;json[&#34;url&#34;] = req-&amp;gt;url;&#xA;        resp-&amp;gt;json[&#34;args&#34;] = req-&amp;gt;query_params;&#xA;        resp-&amp;gt;json[&#34;headers&#34;] = req-&amp;gt;headers;&#xA;        return 200;&#xA;    });&#xA;&#xA;    router.POST(&#34;/echo&#34;, [](const HttpContextPtr&amp;amp; ctx) {&#xA;        return ctx-&amp;gt;send(ctx-&amp;gt;body(), ctx-&amp;gt;type());&#xA;    });&#xA;&#xA;    HttpServer server;&#xA;    server.registerHttpService(&amp;amp;router);&#xA;    server.setPort(8080);&#xA;    server.setThreadNum(4);&#xA;    server.run();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;http client&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_client_test.cpp&#34;&gt;examples/http_client_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;python requests style&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;requests.h&#34;&#xA;&#xA;int main() {&#xA;    auto resp = requests::get(&#34;http://www.example.com&#34;);&#xA;    if (resp == NULL) {&#xA;        printf(&#34;request failed!\n&#34;);&#xA;    } else {&#xA;        printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;    }&#xA;&#xA;    resp = requests::post(&#34;127.0.0.1:8080/echo&#34;, &#34;hello,world!&#34;);&#xA;    if (resp == NULL) {&#xA;        printf(&#34;request failed!\n&#34;);&#xA;    } else {&#xA;        printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;js axios style&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;axios.h&#34;&#xA;&#xA;int main() {&#xA;    const char* strReq = R&#34;({&#xA;        &#34;method&#34;: &#34;POST&#34;,&#xA;        &#34;url&#34;: &#34;http://127.0.0.1:8080/echo&#34;,&#xA;        &#34;params&#34;: {&#xA;            &#34;page_no&#34;: &#34;1&#34;,&#xA;            &#34;page_size&#34;: &#34;10&#34;&#xA;        },&#xA;        &#34;headers&#34;: {&#xA;            &#34;Content-Type&#34;: &#34;application/json&#34;&#xA;        },&#xA;        &#34;body&#34;: {&#xA;            &#34;app_id&#34;: &#34;123456&#34;,&#xA;            &#34;app_secret&#34;: &#34;abcdefg&#34;&#xA;        }&#xA;    })&#34;;&#xA;&#xA;    // sync&#xA;    auto resp = axios::axios(strReq);&#xA;    if (resp == NULL) {&#xA;        printf(&#34;request failed!\n&#34;);&#xA;    } else {&#xA;        printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;    }&#xA;&#xA;    // async&#xA;    int finished = 0;&#xA;    axios::axios(strReq, [&amp;amp;finished](const HttpResponsePtr&amp;amp; resp) {&#xA;        if (resp == NULL) {&#xA;            printf(&#34;request failed!\n&#34;);&#xA;        } else {&#xA;            printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;        }&#xA;        finished = 1;&#xA;    });&#xA;&#xA;    // wait async finished&#xA;    while (!finished) hv_sleep(1);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;h4&gt;WebSocket server&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_server_test.cpp&#34;&gt;examples/websocket_server_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;WebSocketServer.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    WebSocketService ws;&#xA;    ws.onopen = [](const WebSocketChannelPtr&amp;amp; channel, const std::string&amp;amp; url) {&#xA;        printf(&#34;onopen: GET %s\n&#34;, url.c_str());&#xA;    };&#xA;    ws.onmessage = [](const WebSocketChannelPtr&amp;amp; channel, const std::string&amp;amp; msg) {&#xA;        printf(&#34;onmessage: %s\n&#34;, msg.c_str());&#xA;    };&#xA;    ws.onclose = [](const WebSocketChannelPtr&amp;amp; channel) {&#xA;        printf(&#34;onclose\n&#34;);&#xA;    };&#xA;&#xA;    WebSocketServer server;&#xA;    server.registerWebSocketService(&amp;amp;ws);&#xA;    server.setPort(9999);&#xA;    server.setThreadNum(4);&#xA;    server.run();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WebSocket client&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_client_test.cpp&#34;&gt;examples/websocket_client_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;WebSocketClient.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    WebSocketClient ws;&#xA;    ws.onopen = []() {&#xA;        printf(&#34;onopen\n&#34;);&#xA;    };&#xA;    ws.onmessage = [](const std::string&amp;amp; msg) {&#xA;        printf(&#34;onmessage: %s\n&#34;, msg.c_str());&#xA;    };&#xA;    ws.onclose = []() {&#xA;        printf(&#34;onclose\n&#34;);&#xA;    };&#xA;&#xA;    // reconnect: 1,2,4,8,10,10,10...&#xA;    reconn_setting_t reconn;&#xA;    reconn_setting_init(&amp;amp;reconn);&#xA;    reconn.min_delay = 1000;&#xA;    reconn.max_delay = 10000;&#xA;    reconn.delay_policy = 2;&#xA;    ws.setReconnect(&amp;amp;reconn);&#xA;&#xA;    ws.open(&#34;ws://127.0.0.1:9999/test&#34;);&#xA;&#xA;    std::string str;&#xA;    while (std::getline(std::cin, str)) {&#xA;        if (!ws.isConnected()) break;&#xA;        if (str == &#34;quit&#34;) {&#xA;            ws.close();&#xA;            break;&#xA;        }&#xA;        ws.send(str);&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍭 More examples&lt;/h2&gt; &#xA;&lt;h3&gt;c version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/hloop_test.c&#34;&gt;examples/hloop_test.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_echo_server.c&#34;&gt;examples/tcp_echo_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_chat_server.c&#34;&gt;examples/tcp_chat_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_proxy_server.c&#34;&gt;examples/tcp_proxy_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/udp_echo_server.c&#34;&gt;examples/udp_echo_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/udp_proxy_server.c&#34;&gt;examples/udp_proxy_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/socks5_proxy_server.c&#34;&gt;examples/socks5_proxy_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tinyhttpd.c&#34;&gt;examples/tinyhttpd.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tinyproxyd.c&#34;&gt;examples/tinyproxyd.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/jsonrpc&#34;&gt;examples/jsonrpc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/mqtt&#34;&gt;examples/mqtt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/multi-thread/multi-acceptor-processes.c&#34;&gt;examples/multi-thread/multi-acceptor-processes.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/multi-thread/multi-acceptor-threads.c&#34;&gt;examples/multi-thread/multi-acceptor-threads.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/multi-thread/one-acceptor-multi-workers.c&#34;&gt;examples/multi-thread/one-acceptor-multi-workers.c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;c++ version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/EventLoop_test.cpp&#34;&gt;evpp/EventLoop_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/EventLoopThread_test.cpp&#34;&gt;evpp/EventLoopThread_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/EventLoopThreadPool_test.cpp&#34;&gt;evpp/EventLoopThreadPool_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpServer_test.cpp&#34;&gt;evpp/TcpServer_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpClient_test.cpp&#34;&gt;evpp/TcpClient_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/UdpServer_test.cpp&#34;&gt;evpp/UdpServer_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/UdpClient_test.cpp&#34;&gt;evpp/UdpClient_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_server_test.cpp&#34;&gt;examples/http_server_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_client_test.cpp&#34;&gt;examples/http_client_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_server_test.cpp&#34;&gt;examples/websocket_server_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_client_test.cpp&#34;&gt;examples/websocket_client_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/protorpc&#34;&gt;examples/protorpc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/qt&#34;&gt;examples/qt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;simulate well-known command line tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/nc.c&#34;&gt;examples/nc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/nmap&#34;&gt;examples/nmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/httpd&#34;&gt;examples/httpd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/wrk.cpp&#34;&gt;examples/wrk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/curl.cpp&#34;&gt;examples/curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/wget.cpp&#34;&gt;examples/wget&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/consul&#34;&gt;examples/consul&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🥇 Benchmark&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;pingpong echo-servers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd echo-servers&#xA;./build.sh&#xA;./benchmark.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;throughput&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;libevent running on port 2001&#xA;libev running on port 2002&#xA;libuv running on port 2003&#xA;libhv running on port 2004&#xA;asio running on port 2005&#xA;poco running on port 2006&#xA;&#xA;==============2001=====================================&#xA;[127.0.0.1:2001] 4 threads 1000 connections run 10s&#xA;total readcount=1616761 readbytes=1655563264&#xA;throughput = 157 MB/s&#xA;&#xA;==============2002=====================================&#xA;[127.0.0.1:2002] 4 threads 1000 connections run 10s&#xA;total readcount=2153171 readbytes=2204847104&#xA;throughput = 210 MB/s&#xA;&#xA;==============2003=====================================&#xA;[127.0.0.1:2003] 4 threads 1000 connections run 10s&#xA;total readcount=1599727 readbytes=1638120448&#xA;throughput = 156 MB/s&#xA;&#xA;==============2004=====================================&#xA;[127.0.0.1:2004] 4 threads 1000 connections run 10s&#xA;total readcount=2202271 readbytes=2255125504&#xA;throughput = 215 MB/s&#xA;&#xA;==============2005=====================================&#xA;[127.0.0.1:2005] 4 threads 1000 connections run 10s&#xA;total readcount=1354230 readbytes=1386731520&#xA;throughput = 132 MB/s&#xA;&#xA;==============2006=====================================&#xA;[127.0.0.1:2006] 4 threads 1000 connections run 10s&#xA;total readcount=1699652 readbytes=1740443648&#xA;throughput = 165 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;iperf tcp_proxy_server&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# sudo apt install iperf&#xA;iperf -s -p 5001 &amp;gt; /dev/null &amp;amp;&#xA;bin/tcp_proxy_server 1212 127.0.0.1:5001 &amp;amp;&#xA;iperf -c 127.0.0.1 -p 5001 -l 8K&#xA;iperf -c 127.0.0.1 -p 1212 -l 8K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;------------------------------------------------------------&#xA;[  3] local 127.0.0.1 port 52560 connected with 127.0.0.1 port 5001&#xA;[ ID] Interval       Transfer     Bandwidth&#xA;[  3]  0.0-10.0 sec  20.8 GBytes  17.9 Gbits/sec&#xA;&#xA;------------------------------------------------------------&#xA;[  3] local 127.0.0.1 port 48142 connected with 127.0.0.1 port 1212&#xA;[ ID] Interval       Transfer     Bandwidth&#xA;[  3]  0.0-10.0 sec  11.9 GBytes  10.2 Gbits/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;webbench&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# sudo apt install wrk&#xA;wrk -c 100 -t 4 -d 10s http://127.0.0.1:8080/&#xA;&#xA;# sudo apt install apache2-utils&#xA;ab -c 100 -n 100000 http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;libhv(port:8080) vs nginx(port:80)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/html/downloads/libhv-vs-nginx.png&#34; alt=&#34;libhv-vs-nginx.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Above test results can be found on &lt;a href=&#34;https://github.com/ithewei/libhv/actions/workflows/benchmark.yml&#34;&gt;Github Actions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wazuh/wazuh</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/wazuh/wazuh</id>
    <link href="https://github.com/wazuh/wazuh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wazuh - The Open Source Security Platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wazuh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wazuh.com/community/join-us-on-slack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join-blue.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/wazuh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/email-join-blue.svg?sanitize=true&#34; alt=&#34;Email&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://documentation.wazuh.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-view-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wazuh.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/web-view-green.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/wazuh-wazuh&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/10992/badge.svg?sanitize=true&#34; alt=&#34;Coverity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/wazuh&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/wazuh?style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=peTSzcAueEc&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/views/peTSzcAueEc?style=social&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh is a free and open source platform used for threat prevention, detection, and response. It is capable of protecting workloads across on-premises, virtualized, containerized, and cloud-based environments.&lt;/p&gt; &#xA;&lt;p&gt;Wazuh solution consists of an endpoint security agent, deployed to the monitored systems, and a management server, which collects and analyzes data gathered by the agents. Besides, Wazuh has been fully integrated with the Elastic Stack, providing a search engine and data visualization tool that allows users to navigate through their security alerts.&lt;/p&gt; &#xA;&lt;h2&gt;Wazuh capabilities&lt;/h2&gt; &#xA;&lt;p&gt;A brief presentation of some of the more common use cases of the Wazuh solution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Intrusion detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh agents scan the monitored systems looking for malware, rootkits and suspicious anomalies. They can detect hidden files, cloaked processes or unregistered network listeners, as well as inconsistencies in system call responses.&lt;/p&gt; &#xA;&lt;p&gt;In addition to agent capabilities, the server component uses a signature-based approach to intrusion detection, using its regular expression engine to analyze collected log data and look for indicators of compromise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Log data analysis&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh agents read operating system and application logs, and securely forward them to a central manager for rule-based analysis and storage. When no agent is deployed, the server can also receive data via syslog from network devices or applications.&lt;/p&gt; &#xA;&lt;p&gt;The Wazuh rules help make you aware of application or system errors, misconfigurations, attempted and/or successful malicious activities, policy violations and a variety of other security and operational issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;File integrity monitoring&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh monitors the file system, identifying changes in content, permissions, ownership, and attributes of files that you need to keep an eye on. In addition, it natively identifies users and applications used to create or modify files.&lt;/p&gt; &#xA;&lt;p&gt;File integrity monitoring capabilities can be used in combination with threat intelligence to identify threats or compromised hosts. In addition, several regulatory compliance standards, such as PCI DSS, require it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vulnerability detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh agents pull software inventory data and send this information to the server, where it is correlated with continuously updated CVE (Common Vulnerabilities and Exposure) databases, in order to identify well-known vulnerable software.&lt;/p&gt; &#xA;&lt;p&gt;Automated vulnerability assessment helps you find the weak spots in your critical assets and take corrective action before attackers exploit them to sabotage your business or steal confidential data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration assessment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh monitors system and application configuration settings to ensure they are compliant with your security policies, standards and/or hardening guides. Agents perform periodic scans to detect applications that are known to be vulnerable, unpatched, or insecurely configured.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, configuration checks can be customized, tailoring them to properly align with your organization. Alerts include recommendations for better configuration, references and mapping with regulatory compliance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Incident response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh provides out-of-the-box active responses to perform various countermeasures to address active threats, such as blocking access to a system from the threat source when certain criteria are met.&lt;/p&gt; &#xA;&lt;p&gt;In addition, Wazuh can be used to remotely run commands or system queries, identifying indicators of compromise (IOCs) and helping perform other live forensics or incident response tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regulatory compliance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh provides some of the necessary security controls to become compliant with industry standards and regulations. These features, combined with its scalability and multi-platform support help organizations meet technical compliance requirements.&lt;/p&gt; &#xA;&lt;p&gt;Wazuh is widely used by payment processing companies and financial institutions to meet PCI DSS (Payment Card Industry Data Security Standard) requirements. Its web user interface provides reports and dashboards that can help with this and other regulations (e.g. GPG13 or GDPR).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cloud security&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh helps monitoring cloud infrastructure at an API level, using integration modules that are able to pull security data from well known cloud providers, such as Amazon AWS, Azure or Google Cloud. In addition, Wazuh provides rules to assess the configuration of your cloud environment, easily spotting weaknesses.&lt;/p&gt; &#xA;&lt;p&gt;In addition, Wazuh light-weight and multi-platform agents are commonly used to monitor cloud environments at the instance level.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Containers security&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wazuh provides security visibility into your Docker hosts and containers, monitoring their behavior and detecting threats, vulnerabilities and anomalies. The Wazuh agent has native integration with the Docker engine allowing users to monitor images, volumes, network settings, and running containers.&lt;/p&gt; &#xA;&lt;p&gt;Wazuh continuously collects and analyzes detailed runtime information. For example, alerting for containers running in privileged mode, vulnerable applications, a shell running in a container, changes to persistent volumes or images, and other possible threats.&lt;/p&gt; &#xA;&lt;h2&gt;WUI&lt;/h2&gt; &#xA;&lt;p&gt;The Wazuh WUI provides a powerful user interface for data visualization and analysis. This interface can also be used to manage Wazuh configuration and to monitor its status.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modules overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app.png&#34; alt=&#34;Modules overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security events&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app2.png&#34; alt=&#34;Module: Security events&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Integrity monitoring&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app3.png&#34; alt=&#34;Module: Integrity monitoring&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vulnerability detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app4.png&#34; alt=&#34;Module: Vulnerabilities&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regulatory compliance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app5.png&#34; alt=&#34;Module: PCI DSS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agents overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app6.png&#34; alt=&#34;Agents overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agent summary&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wazuh/wazuh-kibana-app/raw/master/screenshots/app7.png&#34; alt=&#34;Agent summary&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Orchestration&lt;/h2&gt; &#xA;&lt;p&gt;Here you can find all the automation tools maintained by the Wazuh team.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-cloudformation&#34;&gt;Wazuh AWS CloudFormation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-docker&#34;&gt;Docker containers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-ansible&#34;&gt;Wazuh Ansible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-chef&#34;&gt;Wazuh Chef&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-puppet&#34;&gt;Wazuh Puppet&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-kubernetes&#34;&gt;Wazuh Kubernetes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-bosh&#34;&gt;Wazuh Bosh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wazuh/wazuh-salt&#34;&gt;Wazuh Salt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt; branch contains the latest code, be aware of possible bugs on this branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; branch on correspond to the last Wazuh stable version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Software and libraries used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modified version of Zlib and a embedded part of OpenSSL (SHA1, SHA256, SHA512, AES and Blowfish libraries).&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL Project for use in the OpenSSL Toolkit (&lt;a href=&#34;http://www.openssl.org/&#34;&gt;http://www.openssl.org/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic software written by Eric Young (&lt;a href=&#34;mailto:eay@cryptsoft.com&#34;&gt;eay@cryptsoft.com&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the Zlib project (Jean-loup Gailly and Mark Adler).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the cJSON project (Dave Gamble).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the MessagePack project (&lt;a href=&#34;https://msgpack.org/&#34;&gt;https://msgpack.org/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the CURL project (&lt;a href=&#34;https://curl.haxx.se/&#34;&gt;https://curl.haxx.se/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the bzip2 project (Julian Seward).&lt;/li&gt; &#xA; &lt;li&gt;Software developed by the libYAML project (Kirill Simonov).&lt;/li&gt; &#xA; &lt;li&gt;The Linux audit userspace project (&lt;a href=&#34;https://github.com/linux-audit/audit-userspace&#34;&gt;https://github.com/linux-audit/audit-userspace&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;A embedded part of the Berkeley DB library (&lt;a href=&#34;https://github.com/berkeleydb/libdb&#34;&gt;https://github.com/berkeleydb/libdb&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CPython interpreter by Guido van Rossum and the Python Software Foundation (&lt;a href=&#34;https://www.python.org&#34;&gt;https://www.python.org&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;PyPi packages: &lt;a href=&#34;https://github.com/Azure/azure-storage-python&#34;&gt;azure-storage-blob&lt;/a&gt;, &lt;a href=&#34;https://github.com/boto/boto3&#34;&gt;boto3&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;cryptography&lt;/a&gt;, &lt;a href=&#34;https://github.com/docker/docker-py&#34;&gt;docker&lt;/a&gt;, &lt;a href=&#34;https://pythonhosted.org/pytz/&#34;&gt;pytz&lt;/a&gt;, &lt;a href=&#34;http://python-requests.org/&#34;&gt;requests&lt;/a&gt; and &lt;a href=&#34;http://github.com/MagicStack/uvloop&#34;&gt;uvloop&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PCRE2 library by Philip Hazel (&lt;a href=&#34;https://www.pcre.org/&#34;&gt;https://www.pcre.org/&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://documentation.wazuh.com&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://documentation.wazuh.com/current/installation-guide/index.html&#34;&gt;Wazuh installation guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;Become part of the &lt;a href=&#34;https://wazuh.com/community/&#34;&gt;Wazuh&#39;s community&lt;/a&gt; to learn from other users, participate in discussions, talk to our developers and contribute to the project.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to our project please don’t hesitate to make pull-requests, submit issues or send commits, we will review all your questions.&lt;/p&gt; &#xA;&lt;p&gt;You can also join our &lt;a href=&#34;https://wazuh.com/community/join-us-on-slack/&#34;&gt;Slack community channel&lt;/a&gt; and &lt;a href=&#34;https://groups.google.com/d/forum/wazuh&#34;&gt;mailing list&lt;/a&gt; by sending an email to &lt;a href=&#34;mailto:wazuh+subscribe@googlegroups.com&#34;&gt;wazuh+subscribe@googlegroups.com&lt;/a&gt;, to ask questions and participate in discussions.&lt;/p&gt; &#xA;&lt;p&gt;Stay up to date on news, releases, engineering articles and more.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wazuh.com&#34;&gt;Wazuh website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/wazuh&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/wazuhsecurity&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/wazuh&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wazuh.com/blog/&#34;&gt;Wazuh blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wazuh.com/community/join-us-on-slack/&#34;&gt;Slack announcements channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Wazuh Copyright (C) 2015-2022 Wazuh Inc. (License GPLv2)&lt;/p&gt; &#xA;&lt;p&gt;Based on the OSSEC project started by Daniel Cid.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qmk/qmk_firmware</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/qmk/qmk_firmware</id>
    <link href="https://github.com/qmk/qmk_firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source keyboard firmware for Atmel AVR and Arm USB families&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quantum Mechanical Keyboard Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qmk/qmk_firmware/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Uq7gcHh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/440868230475677696.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.qmk.fm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-ready-orange.svg?sanitize=true&#34; alt=&#34;Docs Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulse/monthly&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/qmk/qmk_firmware.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a keyboard firmware based on the &lt;a href=&#34;https://github.com/tmk/tmk_keyboard&#34;&gt;tmk_keyboard firmware&lt;/a&gt; with some useful features for Atmel AVR and ARM controllers, and more specifically, the &lt;a href=&#34;https://olkb.com&#34;&gt;OLKB product line&lt;/a&gt;, the &lt;a href=&#34;https://ergodox-ez.com&#34;&gt;ErgoDox EZ&lt;/a&gt; keyboard, and the &lt;a href=&#34;https://clueboard.co&#34;&gt;Clueboard product line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qmk.fm&#34;&gt;See the official documentation on docs.qmk.fm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The docs are powered by &lt;a href=&#34;https://docsify.js.org/&#34;&gt;Docsify&lt;/a&gt; and hosted on &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/docs/&#34;&gt;GitHub&lt;/a&gt;. They are also viewable offline; see &lt;a href=&#34;https://docs.qmk.fm/#/contributing?id=previewing-the-documentation&#34;&gt;Previewing the Documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can request changes by making a fork and opening a &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulls&#34;&gt;pull request&lt;/a&gt;, or by clicking the &#34;Edit this page&#34; link at the bottom of any page.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Keyboards&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/planck/&#34;&gt;Planck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/preonic/&#34;&gt;Preonic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/ergodox_ez/&#34;&gt;ErgoDox EZ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/&#34;&gt;Clueboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/17/&#34;&gt;Cluepad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/atreus/&#34;&gt;Atreus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The project also includes community support for &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/&#34;&gt;lots of other keyboards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;QMK is developed and maintained by Jack Humbert of OLKB with contributions from the community, and of course, &lt;a href=&#34;https://github.com/tmk&#34;&gt;Hasu&lt;/a&gt;. The OLKB product firmwares are maintained by &lt;a href=&#34;https://github.com/jackhumbert&#34;&gt;Jack Humbert&lt;/a&gt;, the Ergodox EZ by &lt;a href=&#34;https://github.com/zsa&#34;&gt;ZSA Technology Labs&lt;/a&gt;, the Clueboard by &lt;a href=&#34;https://github.com/skullydazed&#34;&gt;Zach White&lt;/a&gt;, and the Atreus by &lt;a href=&#34;https://github.com/technomancy&#34;&gt;Phil Hagelberg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Official Website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qmk.fm&#34;&gt;qmk.fm&lt;/a&gt; is the official website of QMK, where you can find links to this page, the documentation, and the keyboards supported by QMK.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>torvalds/linux</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/torvalds/linux</id>
    <link href="https://github.com/torvalds/linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux kernel source tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux kernel&lt;/h1&gt; &#xA;&lt;p&gt;There are several guides for kernel developers and users. These guides can be rendered in a number of formats, like HTML and PDF. Please read Documentation/admin-guide/README.rst first.&lt;/p&gt; &#xA;&lt;p&gt;In order to build the documentation, use &lt;code&gt;make htmldocs&lt;/code&gt; or &lt;code&gt;make pdfdocs&lt;/code&gt;. The formatted documentation can also be read online at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://www.kernel.org/doc/html/latest/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are various text files in the Documentation/ subdirectory, several of them using the Restructured Text markup notation.&lt;/p&gt; &#xA;&lt;p&gt;Please read the Documentation/process/changes.rst file, as it contains the requirements for building and running the kernel, and information about the problems which may result by upgrading your kernel.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coolsnowwolf/lede</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/coolsnowwolf/lede</id>
    <link href="https://github.com/coolsnowwolf/lede" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean&#39;s OpenWrt source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;欢迎来到 Lean 的 Openwrt 源码仓库&lt;/h1&gt; &#xA;&lt;p&gt;如何编译自己需要的 OpenWrt 固件 &lt;a href=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;不要用 root 用户进行编译&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt; &#xA; &lt;li&gt;默认登陆IP 192.168.1.1 密码 password&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;编译命令&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;首先装好 Linux 系统，推荐 Debian 11 或 Ubuntu LTS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装编译依赖&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \&#xA;git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \&#xA;libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \&#xA;mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \&#xA;rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载源代码，更新 feeds 并选择配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/coolsnowwolf/lede&#xA;cd lede&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make download -j8&#xA;make V=s -j1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;本套代码保证肯定可以编译成功。里面包括了 R21 所有源代码，包括 IPK 的。&lt;/p&gt; &#xA;&lt;p&gt;你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！&lt;/p&gt; &#xA;&lt;p&gt;二次编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd lede&#xA;git pull&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make defconfig&#xA;make download -j8&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要重新配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./tmp &amp;amp;&amp;amp; rm -rf .config&#xA;make menuconfig&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译完成后输出路径：bin/targets&lt;/p&gt; &#xA;&lt;h3&gt;如果你使用 WSL/WSL2 进行编译&lt;/h3&gt; &#xA;&lt;p&gt;由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 &lt;code&gt;make&lt;/code&gt; 前面加上：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS 原生系统进行编译&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在 AppStore 中安装 Xcode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装 Homebrew：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 Homebrew 安装工具链、依赖与基础软件包:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew unlink awk&#xA;brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz&#xA;brew install gcc@11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;然后输入以下命令，添加到系统环境变量中：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;/usr/local/opt/coreutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/findutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-getopt/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-tar/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/grep/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/make/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;重新加载一下 shell 启动文件 &lt;code&gt;source ~/.bashrc&lt;/code&gt;，然后输入 &lt;code&gt;bash&lt;/code&gt; 进入 bash shell，就可以和 Linux 一样正常编译了&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;特别提示&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒。安全干净才是固件应该做到的；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如有技术问题需要讨论，欢迎加入 QQ 讨论群： OP 共享技术交流群 ,号码 297253733 ，加群链接: 点击链接加入群聊【 OP 共享技术交流群】：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5yCRuXL&#34; title=&#34;OP共享技术交流群&#34;&gt;点击加入&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成 报名地址：&lt;a href=&#34;http://forgotfun.org/2018/04/openwrt-training-2018.html&#34; title=&#34;报名&#34;&gt;点击报名&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QCA IPQ60xx 开源仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt-gl-ax1800&#34;&gt;https://github.com/coolsnowwolf/openwrt-gl-ax1800&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;稳定版仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt&#34;&gt;https://github.com/coolsnowwolf/openwrt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;软路由介绍&lt;/h2&gt; &#xA;&lt;p&gt;友情推荐不恰饭：如果你在寻找一个低功耗小体积性能不错的 x86 / x64 路由器，我个人建议可以考虑小马v1 的铝合金版本 (N3710 4千兆)：&lt;a href=&#34;https://item.taobao.com/item.htm?spm=a230r.1.14.20.144c763fRkK0VZ&amp;amp;id=561126544764&#34;&gt;页面介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm5.jpg&#34; alt=&#34;xm1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm6.jpg&#34; alt=&#34;xm2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;捐贈&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善&lt;/p&gt; &#xA;&lt;p&gt;支付宝 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/alipay_donate.jpg&#34; alt=&#34;alipay&#34;&gt; 微信 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/wechat_donate.jpg&#34; alt=&#34;wechat&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openwrt/openwrt</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/openwrt/openwrt</id>
    <link href="https://github.com/openwrt/openwrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is a mirror of https://git.openwrt.org/openwrt/openwrt.git It is for reference only and is not active for check-ins. We will continue to accept Pull Requests here. They will be merged via staging trees then into openwrt.git.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openwrt/openwrt/master/include/logo.png&#34; alt=&#34;OpenWrt logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenWrt Project is a Linux operating system targeting embedded devices. Instead of trying to create a single, static firmware, OpenWrt provides a fully writable filesystem with package management. This frees you from the application selection and configuration provided by the vendor and allows you to customize the device through the use of packages to suit any application. For developers, OpenWrt is the framework to build an application without having to build a complete firmware around it; for users this means the ability for full customization, to use the device in ways never envisioned.&lt;/p&gt; &#xA;&lt;p&gt;Sunshine!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to compile OpenWrt, the package names vary between distributions. A complete list with distribution specific packages is found in the &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build System Setup&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-dev&#xA;make4.1+ perl python3.6+ rsync subversion unzip which&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called &lt;code&gt;opkg&lt;/code&gt;. If you&#39;re looking to develop the web interface or port packages to OpenWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/packages&#34;&gt;OpenWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/video&#34;&gt;OpenWrt Video&lt;/a&gt;: Packages specifically focused on display servers and clients (Xorg and Wayland).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.openwrt.org&#34;&gt;Forum&lt;/a&gt;: For usage, projects, discussions and hardware advise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.oftc.net/#openwrt&#34;&gt;Support Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developer Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.openwrt.org&#34;&gt;Bug Reports&lt;/a&gt;: Report bugs in OpenWrt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.openwrt.org/mailman/listinfo/openwrt-devel&#34;&gt;Dev Mailing List&lt;/a&gt;: Send patches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.oftc.net/#openwrt-devel&#34;&gt;Dev Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt-devel&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenWrt is licensed under GPL-2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eradman/entr</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/eradman/entr</id>
    <link href="https://github.com/eradman/entr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run arbitrary commands when files change&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Event Notify Test Runner&lt;/h1&gt; &#xA;&lt;p&gt;A utility for running arbitrary commands when files change. Uses &lt;a href=&#34;http://man.openbsd.org/kqueue.2&#34;&gt;kqueue(2)&lt;/a&gt; or &lt;a href=&#34;http://man.he.net/?section=all&amp;amp;topic=inotify&#34;&gt;inotify(7)&lt;/a&gt; to avoid polling. &lt;code&gt;entr&lt;/code&gt; was written to make rapid feedback and automated testing natural and completely ordinary.&lt;/p&gt; &#xA;&lt;h2&gt;Source Installation - BSD, Mac OS, and Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see available build options run &lt;code&gt;./configure -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker and WSL&lt;/h2&gt; &#xA;&lt;p&gt;Incomplete inotify support on Windows Subsystem for Linux and Docker for Mac can cause &lt;code&gt;entr&lt;/code&gt; to respond inconsistently. Setting the environment variable &lt;code&gt;ENTR_INOTIFY_WORKAROUND&lt;/code&gt; will enable &lt;code&gt;entr&lt;/code&gt; to operate in these environments.&lt;/p&gt; &#xA;&lt;h2&gt;Linux Features&lt;/h2&gt; &#xA;&lt;p&gt;Symlinks can be monitored for changes by setting the environment variable &lt;code&gt;ENTR_INOTIFY_SYMLINK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Man Page Examples&lt;/h2&gt; &#xA;&lt;p&gt;Rebuild a project if source files change, limiting output to the first 20 lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ find src/ | entr sh -c &#39;make | head -n 20&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch and auto-reload a node.js server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls *.js | entr -r node app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clear the screen and run a query after the SQL script is updated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo my.sql | entr -cp psql -f /_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rebuild project if a source file is modified or added to the src/ directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ while sleep 0.1; do ls src/*.rb | entr -d make; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Auto-reload a web server, or terminate if the server exits&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls * | entr -rz ./httpd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;A release history as well as features in the upcoming release are covered in the &lt;a href=&#34;https://raw.githubusercontent.com/eradman/entr/master/NEWS&#34;&gt;NEWS&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tianocore/edk2</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/tianocore/edk2</id>
    <link href="https://github.com/tianocore/edk2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EDK II&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;============== EDK II Project&lt;/h1&gt; &#xA;&lt;p&gt;A modern, feature-rich, cross-platform firmware development environment for the UEFI and PI specifications from &lt;a href=&#34;http://www.uefi.org&#34;&gt;www.uefi.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Core CI Build Status&lt;/h2&gt; &#xA;&lt;p&gt;============================= ================= =============== =================== Host Type &amp;amp; Toolchain Build Status Test Status Code Coverage ============================= ================= =============== =================== Windows_VS2019_ |WindowsCiBuild| |WindowsCiTest| |WindowsCiCoverage| Ubuntu_GCC5_ |UbuntuCiBuild| |UbuntuCiTest| |UbuntuCiCoverage| ============================= ================= =============== ===================&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;More CI Build information &amp;lt;.pytool/Readme.md&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;h2&gt;Platform CI Build Status&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft Windows VS2019&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;============================= ================= ============= ============= ==============&#xA; Toolchain                    CONFIG            DEBUG         RELEASE       NOOPT&#xA;============================= ================= ============= ============= ==============&#xA;EmulatorPkg_Win_VS2019_       | IA32            |em32d|       |em32r|       |em32n|&#xA;|                             | X64             |em64d|       |em64r|       |em64n|&#xA;|                             | IA32 FULL       |em32fd|      |em32fr|      |em32fn|&#xA;|                             | X64 FULL        |em64fd|      |em64fr|      |em64fn|&#xA;OvmfPkg_Win_VS2019_           | IA32            |op32d|       |op32r|       |op32n|&#xA;|                             | X64             |op64d|       |op64r|       |op64n|&#xA;|                             | IA32 X64        |op3264d|     |op3264r|     |op3264n|&#xA;|                             | IA32 X64 FULL   |op3264fd|    |op3264fr|    |op3264fn|&#xA;============================= ================= ============= ============= ==============&#xA;&#xA;Ubuntu 18.04 GCC5&#xA;`````````````````&#xA;&#xA;============================= ================= ============= ============= ==============&#xA; Toolchain                    CONFIG            DEBUG         RELEASE       NOOPT&#xA;============================= ================= ============= ============= ==============&#xA;ArmVirtPkg_Ubuntu_GCC5_       | AARCH64         |avAArch64du| |avAArch64ru| |avAArch64nu|&#xA;|                             | ARM             |avArmdu|     |avArmru|     |avArmnu|&#xA;EmulatorPkg_Ubuntu_GCC5_      | IA32            |em32du|      |em32ru|      |em32nu|&#xA;|                             | X64             |em64du|      |em64ru|      |em64nu|&#xA;|                             | IA32 FULL       |em32fdu|     |em32fru|     |em32fnu|&#xA;|                             | X64 FULL        |em64fdu|     |em64fru|     |em64fnu|&#xA;OvmfPkg_Ubuntu_GCC5_          | IA32            |op32du|      |op32ru|      |op32nu|&#xA;|                             | X64             |op64du|      |op64ru|      |op64nu|&#xA;|                             | IA32 X64        |op3264du|    |op3264ru|    |op3264nu|&#xA;|                             | IA32 X64 FULL   |op3264fdu|   |op3264fru|   |op3264fru|&#xA;============================= ================= ============= ============= ==============&#xA;&#xA;|TCBZ_2668|_ - EmulatorPkg Ubuntu GCC5 Segfaults during execution.&#xA;&#xA;|TCBZ_2639|_ - EmulatorPkg Ubuntu GCC5 Segfaults during execution.&#xA;&#xA;`More ArmVirtPkg CI Build Information &amp;lt;ArmVirtPkg/PlatformCI/ReadMe.md&amp;gt;`__&#xA;&#xA;`More EmulatorPkg CI Build Information &amp;lt;EmulatorPkg/PlatformCI/ReadMe.md&amp;gt;`__&#xA;&#xA;`More OvmfPkg CI Build Information &amp;lt;OvmfPkg/PlatformCI/ReadMe.md&amp;gt;`__&#xA;&#xA;&#xA;License Details&#xA;---------------&#xA;&#xA;The majority of the content in the EDK II open source project uses a&#xA;`BSD-2-Clause Plus Patent License &amp;lt;License.txt&amp;gt;`__. The EDK II open&#xA;source project contains the following components that are covered by additional&#xA;licenses:&#xA;&#xA;-  `BaseTools/Source/C/LzmaCompress &amp;lt;BaseTools/Source/C/LzmaCompress/LZMA-SDK-README.txt&amp;gt;`__&#xA;-  `BaseTools/Source/C/VfrCompile/Pccts &amp;lt;BaseTools/Source/C/VfrCompile/Pccts/RIGHTS&amp;gt;`__&#xA;-  `CryptoPkg\Library\BaseCryptLib\SysCall\inet_pton.c &amp;lt;CryptoPkg\Library\BaseCryptLib\SysCall\inet_pton.c&amp;gt;`__&#xA;-  `CryptoPkg\Library\Include\crypto\dso_conf.h &amp;lt;https://github.com/openssl/openssl/blob/e2e09d9fba1187f8d6aafaa34d4172f56f1ffb72/LICENSE&amp;gt;`__&#xA;-  `CryptoPkg\Library\Include\openssl\opensslconf.h &amp;lt;https://github.com/openssl/openssl/blob/e2e09d9fba1187f8d6aafaa34d4172f56f1ffb72/LICENSE&amp;gt;`__&#xA;-  `EmbeddedPkg/Library/FdtLib &amp;lt;EmbeddedPkg/Library/FdtLib/fdt.c&amp;gt;`__.  (EDK II uses BSD License)&#xA;-  `EmbeddedPkg/Include/fdt.h &amp;lt;EmbeddedPkg/Include/fdt.h&amp;gt;`__.  (EDK II uses BSD Licence)&#xA;-  `EmbeddedPkg/Include/libfdt.h &amp;lt;EmbeddedPkg/Include/libfdt.h&amp;gt;`__.  (EDK II uses BSD License)&#xA;-  `MdeModulePkg/Library/LzmaCustomDecompressLib &amp;lt;MdeModulePkg/Library/LzmaCustomDecompressLib/LZMA-SDK-README.txt&amp;gt;`__&#xA;-  `OvmfPkg &amp;lt;OvmfPkg/License.txt&amp;gt;`__&#xA;&#xA;The EDK II open source project uses content from upstream projects as git submodules&#xA;that are covered by additional licenses.&#xA;&#xA;-  `ArmPkg/Library/ArmSoftFloatLib/berkeley-softfloat-3 &amp;lt;https://github.com/ucb-bar/berkeley-softfloat-3/blob/b64af41c3276f97f0e181920400ee056b9c88037/COPYING.txt&amp;gt;`__&#xA;-  `BaseTools/Source/C/BrotliCompress/brotli &amp;lt;https://github.com/google/brotli/blob/666c3280cc11dc433c303d79a83d4ffbdd12cc8d/LICENSE&amp;gt;`__&#xA;-  `CryptoPkg/Library/OpensslLib/openssl &amp;lt;https://github.com/openssl/openssl/blob/e2e09d9fba1187f8d6aafaa34d4172f56f1ffb72/LICENSE&amp;gt;`__&#xA;-  `MdeModulePkg/Library/BrotliCustomDecompressLib/brotli &amp;lt;https://github.com/google/brotli/blob/666c3280cc11dc433c303d79a83d4ffbdd12cc8d/LICENSE&amp;gt;`__&#xA;-  `MdeModulePkg/Universal/RegularExpressionDxe/oniguruma &amp;lt;https://github.com/kkos/oniguruma/blob/abfc8ff81df4067f309032467785e06975678f0d/COPYING&amp;gt;`__&#xA;-  `UnitTestFrameworkPkg/Library/CmockaLib/cmocka &amp;lt;https://github.com/tianocore/edk2-cmocka/blob/f5e2cd77c88d9f792562888d2b70c5a396bfbf7a/COPYING&amp;gt;`__&#xA;-  `RedfishPkg/Library/JsonLib/jansson &amp;lt;https://github.com/akheron/jansson/blob/2882ead5bb90cf12a01b07b2c2361e24960fae02/LICENSE&amp;gt;`__&#xA;&#xA;The EDK II Project is composed of packages. The maintainers for each package&#xA;are listed in `Maintainers.txt &amp;lt;Maintainers.txt&amp;gt;`__.&#xA;&#xA;Resources&#xA;---------&#xA;&#xA;-  `TianoCore &amp;lt;http://www.tianocore.org&amp;gt;`__&#xA;-  `EDK&#xA;   II &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/EDK-II&amp;gt;`__&#xA;-  `Getting Started with EDK&#xA;   II &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/Getting-Started-with-EDK-II&amp;gt;`__&#xA;-  `Mailing&#xA;   Lists &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/Mailing-Lists&amp;gt;`__&#xA;-  `TianoCore Bugzilla &amp;lt;https://bugzilla.tianocore.org&amp;gt;`__&#xA;-  `How To&#xA;   Contribute &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/How-To-Contribute&amp;gt;`__&#xA;-  `Release&#xA;   Planning &amp;lt;https://github.com/tianocore/tianocore.github.io/wiki/EDK-II-Release-Planning&amp;gt;`__&#xA;&#xA;Code Contributions&#xA;------------------&#xA;&#xA;To make a contribution to a TianoCore project, follow these steps.&#xA;&#xA;#. Create a change description in the format specified below to&#xA;    use in the source control commit log.&#xA;#. Your commit message must include your ``Signed-off-by`` signature&#xA;#. Submit your code to the TianoCore project using the process&#xA;    that the project documents on its web page. If the process is&#xA;    not documented, then submit the code on development email list&#xA;    for the project.&#xA;#. It is preferred that contributions are submitted using the same&#xA;    copyright license as the base project. When that is not possible,&#xA;    then contributions using the following licenses can be accepted:&#xA;&#xA;-  BSD (2-clause): http://opensource.org/licenses/BSD-2-Clause&#xA;-  BSD (3-clause): http://opensource.org/licenses/BSD-3-Clause&#xA;-  MIT: http://opensource.org/licenses/MIT&#xA;-  Python-2.0: http://opensource.org/licenses/Python-2.0&#xA;-  Zlib: http://opensource.org/licenses/Zlib&#xA;&#xA;For documentation:&#xA;&#xA;-  FreeBSD Documentation License&#xA;    https://www.freebsd.org/copyright/freebsd-doc-license.html&#xA;&#xA;Contributions of code put into the public domain can also be accepted.&#xA;&#xA;Contributions using other licenses might be accepted, but further&#xA;review will be required.&#xA;&#xA;Developer Certificate of Origin&#xA;-------------------------------&#xA;&#xA;Your change description should use the standard format for a&#xA;commit message, and must include your ``Signed-off-by`` signature.&#xA;&#xA;In order to keep track of who did what, all patches contributed must&#xA;include a statement that to the best of the contributor&#39;s knowledge&#xA;they have the right to contribute it under the specified license.&#xA;&#xA;The test for this is as specified in the `Developer&#39;s Certificate of&#xA;Origin (DCO) 1.1 &amp;lt;https://developercertificate.org/&amp;gt;`__. The contributor&#xA;certifies compliance by adding a line saying&#xA;&#xA;Signed-off-by: Developer Name developer@example.org&#xA;&#xA;where ``Developer Name`` is the contributor&#39;s real name, and the email&#xA;address is one the developer is reachable through at the time of&#xA;contributing.&#xA;&#xA;::&#xA;&#xA;    Developer&#39;s Certificate of Origin 1.1&#xA;&#xA;    By making a contribution to this project, I certify that:&#xA;&#xA;    (a) The contribution was created in whole or in part by me and I&#xA;        have the right to submit it under the open source license&#xA;        indicated in the file; or&#xA;&#xA;    (b) The contribution is based upon previous work that, to the best&#xA;        of my knowledge, is covered under an appropriate open source&#xA;        license and I have the right under that license to submit that&#xA;        work with modifications, whether created in whole or in part&#xA;        by me, under the same open source license (unless I am&#xA;        permitted to submit under a different license), as indicated&#xA;        in the file; or&#xA;&#xA;    (c) The contribution was provided directly to me by some other&#xA;        person who certified (a), (b) or (c) and I have not modified&#xA;        it.&#xA;&#xA;    (d) I understand and agree that this project and the contribution&#xA;        are public and that a record of the contribution (including all&#xA;        personal information I submit with it, including my sign-off) is&#xA;        maintained indefinitely and may be redistributed consistent with&#xA;        this project or the open source license(s) involved.&#xA;&#xA;Sample Change Description / Commit Message&#xA;------------------------------------------&#xA;&#xA;::&#xA;&#xA;    From: Contributor Name &amp;lt;contributor@example.com&amp;gt;&#xA;    Subject: [Repository/Branch PATCH] Pkg-Module: Brief-single-line-summary&#xA;&#xA;    Full-commit-message&#xA;&#xA;    Signed-off-by: Contributor Name &amp;lt;contributor@example.com&amp;gt;&#xA;&#xA;Notes for sample patch email&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first line of commit message is taken from the email&#39;s subject line following &lt;code&gt;[Repository/Branch PATCH]&lt;/code&gt;. The remaining portion of the commit message is the email&#39;s content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git format-patch&lt;/code&gt; is one way to create this format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Definitions for sample patch email&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;-  ``Repository`` is the identifier of the repository the patch applies.&#xA;    This identifier should only be provided for repositories other than&#xA;    ``edk2``. For example ``edk2-BuildSpecification`` or ``staging``.&#xA;-  ``Branch`` is the identifier of the branch the patch applies. This&#xA;    identifier should only be provided for branches other than&#xA;   ``edk2/master``.&#xA;    For example ``edk2/UDK2015``,&#xA;   ``edk2-BuildSpecification/release/1.27``, or&#xA;    ``staging/edk2-test``.&#xA;-  ``Module`` is a short identifier for the affected code or&#xA;   documentation. For example ``MdePkg``, ``MdeModulePkg/UsbBusDxe``, ``Introduction``, or&#xA;    ``EDK II INF File Format``.&#xA;-  ``Brief-single-line-summary`` is a short summary of the change.&#xA;-  The entire first line should be less than ~70 characters.&#xA;-  ``Full-commit-message`` a verbose multiple line comment describing&#xA;    the change. Each line should be less than ~70 characters.&#xA;-  ``Signed-off-by`` is the contributor&#39;s signature identifying them&#xA;    by their real/legal name and their email address.&#xA;&#xA;Submodules&#xA;----------&#xA;&#xA;Submodule in EDK II is allowed but submodule chain should be avoided&#xA;as possible as we can. Currently EDK II contains the following submodules&#xA;&#xA;-  CryptoPkg/Library/OpensslLib/openssl&#xA;-  ArmPkg/Library/ArmSoftFloatLib/berkeley-softfloat-3&#xA;-  MdeModulePkg/Universal/RegularExpressionDxe/oniguruma&#xA;-  MdeModulePkg/Library/BrotliCustomDecompressLib/brotli&#xA;-  BaseTools/Source/C/BrotliCompress/brotli&#xA;&#xA;ArmSoftFloatLib is actually required by OpensslLib. It&#39;s inevitable&#xA;in openssl-1.1.1 (since stable201905) for floating point parameter&#xA;conversion, but should be dropped once there&#39;s no such need in future&#xA;release of openssl.&#xA;&#xA;To get a full, buildable EDK II repository, use following steps of git&#xA;command&#xA;&#xA;.. code-block:: bash&#xA;&#xA;  git clone https://github.com/tianocore/edk2.git&#xA;  cd edk2&#xA;  git submodule update --init&#xA;  cd ..&#xA;&#xA;If there&#39;s update for submodules, use following git commands to get&#xA;the latest submodules code.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;  cd edk2&#xA;  git pull&#xA;  git submodule update&#xA;&#xA;Note: When cloning submodule repos, &#39;--recursive&#39; option is not&#xA;recommended. EDK II itself will not use any code/feature from&#xA;submodules in above submodules. So using &#39;--recursive&#39; adds a&#xA;dependency on being able to reach servers we do not actually want&#xA;any code from, as well as needlessly downloading code we will not&#xA;use.&#xA;&#xA;.. ===================================================================&#xA;.. This is a bunch of directives to make the README file more readable&#xA;.. ===================================================================&#xA;&#xA;.. CoreCI&#xA;&#xA;.. _Windows_VS2019: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=32&amp;amp;branchName=master&#xA;.. |WindowsCiBuild| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/Windows%20VS2019%20CI?branchName=master&#xA;.. |WindowsCiTest| image:: https://img.shields.io/azure-devops/tests/tianocore/edk2-ci/32.svg&#xA;.. |WindowsCiCoverage| image:: https://img.shields.io/badge/coverage-coming_soon-blue&#xA;&#xA;.. _Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=31&amp;amp;branchName=master&#xA;.. |UbuntuCiBuild| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/Ubuntu%20GCC5%20CI?branchName=master&#xA;.. |UbuntuCiTest| image:: https://img.shields.io/azure-devops/tests/tianocore/edk2-ci/31.svg&#xA;.. |UbuntuCiCoverage| image:: https://img.shields.io/badge/coverage-coming_soon-blue&#xA;&#xA;.. ArmVirtPkg&#xA;&#xA;.. _ArmVirtPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=46&amp;amp;branchName=master&#xA;.. |avAArch64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_AARCH64_DEBUG&#xA;.. |avAArch64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_AARCH64_RELEASE&#xA;.. |avAArch64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_AARCH64_NOOPT&#xA;&#xA;.. |avArmdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_ARM_DEBUG&#xA;.. |avArmru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_ARM_RELEASE&#xA;.. |avArmnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20QEMU_ARM_NOOPT&#xA;&#xA;.. EmulatorPkg&#xA;&#xA;.. |TCBZ_2668| image:: https://img.shields.io/bugzilla/2668?baseUrl=https%3A%2F%2Fbugzilla.tianocore.org&#xA;.. _TCBZ_2668: https://bugzilla.tianocore.org/show_bug.cgi?id=2668&#xA;&#xA;.. |TCBZ_2639| image:: https://img.shields.io/bugzilla/2639?baseUrl=https%3A%2F%2Fbugzilla.tianocore.org&#xA;.. _TCBZ_2639: https://bugzilla.tianocore.org/show_bug.cgi?id=2639&#xA;&#xA;.. _EmulatorPkg_Win_VS2019:  https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=44&amp;amp;branchName=master&#xA;.. _EmulatorPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=43&amp;amp;branchName=master&#xA;&#xA;.. |em32d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_DEBUG&#xA;.. |em32du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_DEBUG&#xA;.. |em32r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_RELEASE&#xA;.. |em32ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_RELEASE&#xA;.. |em32n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_NOOPT&#xA;.. |em32nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_NOOPT&#xA;&#xA;.. |em32fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_DEBUG&#xA;.. |em32fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_DEBUG&#xA;.. |em32fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_RELEASE&#xA;.. |em32fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_RELEASE&#xA;.. |em32fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_NOOPT&#xA;.. |em32fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_IA32_FULL_NOOPT&#xA;&#xA;.. |em64d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_DEBUG&#xA;.. |em64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_DEBUG&#xA;.. |em64r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_RELEASE&#xA;.. |em64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_RELEASE&#xA;.. |em64n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_NOOPT&#xA;.. |em64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_NOOPT&#xA;&#xA;.. |em64fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_DEBUG&#xA;.. |em64fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_DEBUG&#xA;.. |em64fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_RELEASE&#xA;.. |em64fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_RELEASE&#xA;.. |em64fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_NOOPT&#xA;.. |em64fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20EmulatorPkg_X64_FULL_NOOPT&#xA;&#xA;.. OvmfPkg&#xA;&#xA;.. |TCBZ_2661| image:: https://img.shields.io/bugzilla/2661?baseUrl=https%3A%2F%2Fbugzilla.tianocore.org&#xA;.. _TCBZ_2661: https://bugzilla.tianocore.org/show_bug.cgi?id=2661&#xA;&#xA;.. _OvmfPkg_Win_VS2019:  https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=50&amp;amp;branchName=master&#xA;.. _OvmfPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=48&amp;amp;branchName=master&#xA;&#xA;.. |op32d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_DEBUG&#xA;.. |op32du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_DEBUG&#xA;.. |op32r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_RELEASE&#xA;.. |op32ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_RELEASE&#xA;.. |op32n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_NOOPT&#xA;.. |op32nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32_NOOPT&#xA;&#xA;.. |op64d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_DEBUG&#xA;.. |op64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_DEBUG&#xA;.. |op64r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_RELEASE&#xA;.. |op64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_RELEASE&#xA;.. |op64n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_NOOPT&#xA;.. |op64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_X64_NOOPT&#xA;&#xA;&#xA;.. |op3264d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_DEBUG&#xA;.. |op3264du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_DEBUG&#xA;.. |op3264r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_RELEASE&#xA;.. |op3264ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_RELEASE&#xA;.. |op3264n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_NOOPT&#xA;.. |op3264nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_NOOPT&#xA;&#xA;.. |op3264fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_DEBUG&#xA;.. |op3264fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_DEBUG&#xA;.. |op3264fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_RELEASE&#xA;.. |op3264fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_RELEASE&#xA;.. |op3264fn| replace:: |TCBZ_2661|_&#xA;.. |op3264fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&amp;amp;jobName=Platform_CI&amp;amp;configuration=Platform_CI%20OVMF_IA32X64_FULL_NOOPT&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s specially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/raysan5/raylib&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/4.0.0&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/raylib?label=reddit%20r%2Fraylib&amp;amp;logo=reddit&#34; alt=&#34;Subreddit Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/raysan5?style=flat&amp;amp;label=@raysan5&amp;amp;color=1da1f2&amp;amp;logo=twitter&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) in PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3 or ES 2.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, XNA fonts, AngelCode fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+120 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+50 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and it draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple &lt;a href=&#34;https://github.com/raysan5/raylib/issues/613&#34;&gt;package managers&lt;/a&gt; on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that Wiki is open for edit, if you find some issue while building raylib for your target platform, feel free to edit the Wiki or open and issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, please, if you find some issue with some template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library and a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in raylib GitHub Wiki. Here the more relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different fileformats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on raylib Wiki for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Mbed-TLS/mbedtls</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/Mbed-TLS/mbedtls</id>
    <link href="https://github.com/Mbed-TLS/mbedtls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source, portable, easy to use, readable and flexible SSL library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; &#xA;&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&#34;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; &#xA;&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; &#xA;&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for the Mbed TLS interfaces in the default library configuration is available as part of the &lt;a href=&#34;https://tls.mbed.org/api/&#34;&gt;Mbed TLS documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that &lt;a href=&#34;http://www.doxygen.nl/&#34;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other sources of documentation, see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; &#xA;&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto, and libmbedx509 depends on libmbedcrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tool versions&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; &#xA; &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, IAR 8 and Visual Studio 2013. More recent versions should work. Slightly older versions may work.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.6 to generate the test code, and to generate sample programs in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2013 or later (if using Visual Studio).&lt;/li&gt; &#xA; &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; &#xA;&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; &#xA; &lt;li&gt;Python 3 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run &lt;pre&gt;&lt;code&gt;python -m pip install -r scripts/basic.requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; &#xA;&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; &#xA; &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;tests/scripts/check-generated-files.sh -u&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; &#xA;&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; &#xA;&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make no_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; &#xA;&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; &#xA;&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&#34;https://tls.mbed.org/kb&#34;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; &#xA;&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&#34;https://tls.mbed.org/kb&#34;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir&#xA;cmake /path/to/mbedtls_source&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -LH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now make the desired change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; &#xA;&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedcrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;add_executable(xyz)&#xA;&#xA;target_link_libraries(xyz&#xA;    PUBLIC MbedTLS::mbedtls&#xA;           MbedTLS::mbedcrypto&#xA;           MbedTLS::mbedx509)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; &#xA;&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2010.&lt;/p&gt; &#xA;&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; &#xA;&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&#34;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example programs&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&#34;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_mpi.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_mpi.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_mpi.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; &#xA;&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/key-exchanges.pl&lt;/code&gt; test builds in configurations with a single key exchange enabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS&#34;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/development/what-external-dependencies-does-mbedtls-rely-on&#34;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/compiling-and-building/how-do-i-configure-mbedtls&#34;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; &#xA; &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; &#xA; &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; &#xA; &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PSA cryptography API&lt;/h2&gt; &#xA;&lt;h3&gt;PSA API design&lt;/h3&gt; &#xA;&lt;p&gt;Arm&#39;s &lt;a href=&#34;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&#34;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/psa/#application-programming-interface&#34;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; &#xA;&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; &#xA; &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; &#xA; &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; &#xA; &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; &#xA; &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&#34;mailto:mbed-crypto@arm.com&#34;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; &#xA;&lt;h3&gt;PSA API documentation&lt;/h3&gt; &#xA;&lt;p&gt;A browsable copy of the PSA Cryptography API documents is available on the &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/psa/#application-programming-interface&#34;&gt;PSA cryptography interfaces documentation portal&lt;/a&gt; in &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/PSA_Cryptography_API_Specification.pdf&#34;&gt;PDF&lt;/a&gt; and &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/html/index.html&#34;&gt;HTML&lt;/a&gt; formats.&lt;/p&gt; &#xA;&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. This implementation is not yet as mature as the rest of the library. Some parts of the code have not been reviewed as thoroughly, and some parts of the PSA implementation are not yet well optimized for code size.&lt;/p&gt; &#xA;&lt;p&gt;The X.509 and TLS code can use PSA cryptography for a limited subset of operations. To enable this support, activate the compilation option &lt;code&gt;MBEDTLS_USE_PSA_CRYPTO&lt;/code&gt; in &lt;code&gt;mbedtls_config.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are currently a few deviations where the library does not yet implement the latest version of the specification. Please refer to the &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls/labels/compliance&#34;&gt;compliance issues on Github&lt;/a&gt; for an up-to-date list.&lt;/p&gt; &#xA;&lt;h3&gt;Upcoming features&lt;/h3&gt; &#xA;&lt;p&gt;Future releases of this library will include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A driver programming interface, which makes it possible to use hardware accelerators instead of the default software implementation for chosen algorithms.&lt;/li&gt; &#xA; &lt;li&gt;Support for external keys to be stored and manipulated exclusively in a separate cryptoprocessor.&lt;/li&gt; &#xA; &lt;li&gt;A configuration mechanism to compile only the algorithms you need for your application.&lt;/li&gt; &#xA; &lt;li&gt;A wider set of cryptographic algorithms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under the &lt;a href=&#34;https://spdx.org/licenses/Apache-2.0.html&#34;&gt;Apache-2.0&lt;/a&gt; license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full text of this license. Contributors must accept that their contributions are made under both the Apache-2.0 AND &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-or-later.html&#34;&gt;GPL-2.0-or-later&lt;/a&gt; licenses. This enables LTS (Long Term Support) branches of the software to be provided under either the Apache-2.0 OR GPL-2.0-or-later licenses.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&#34;mailto:mbed-tls-security@lists.trustedfirmware.org&#34;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&#34;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Klipper3d/klipper</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/Klipper3d/klipper</id>
    <link href="https://github.com/Klipper3d/klipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klipper is a 3d-printer firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the Klipper project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo-small.png&#34; alt=&#34;Klipper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.klipper3d.org/&#34;&gt;https://www.klipper3d.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Klipper is a 3d-Printer firmware. It combines the power of a general purpose computer with one or more micro-controllers. See the &lt;a href=&#34;https://www.klipper3d.org/Features.html&#34;&gt;features document&lt;/a&gt; for more information on why you should use Klipper.&lt;/p&gt; &#xA;&lt;p&gt;To begin using Klipper start by &lt;a href=&#34;https://www.klipper3d.org/Installation.html&#34;&gt;installing&lt;/a&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Klipper is Free Software. See the &lt;a href=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/COPYING&#34;&gt;license&lt;/a&gt; or read the &lt;a href=&#34;https://www.klipper3d.org/Overview.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudwu/skynet</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/cloudwu/skynet</id>
    <link href="https://github.com/cloudwu/skynet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight online game framework&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;img src=&#34;https://github.com/cloudwu/skynet/wiki/image/skynet_metro.jpg&#34; alt=&#34;skynet logo&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Skynet is a lightweight online game framework which can be used in many other fields.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;For Linux, install autoconf first for jemalloc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/cloudwu/skynet.git&#xA;cd skynet&#xA;make &#39;PLATFORM&#39;  # PLATFORM can be linux, macosx, freebsd now&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PLAT=linux&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For FreeBSD , use gmake instead of make.&lt;/p&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;Run these in different consoles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./skynet examples/config&#x9;# Launch first skynet node  (Gate server) and a skynet-master (see config for standalone option)&#xA;./3rd/lua/lua examples/client.lua &#x9;# Launch a client, and try to input hello.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About Lua version&lt;/h2&gt; &#xA;&lt;p&gt;Skynet now uses a modified version of lua 5.4.4 ( &lt;a href=&#34;https://github.com/ejoy/lua/tree/skynet54&#34;&gt;https://github.com/ejoy/lua/tree/skynet54&lt;/a&gt; ) for multiple lua states.&lt;/p&gt; &#xA;&lt;p&gt;Official Lua versions can also be used as long as the Makefile is edited.&lt;/p&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read Wiki for documents &lt;a href=&#34;https://github.com/cloudwu/skynet/wiki&#34;&gt;https://github.com/cloudwu/skynet/wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The FAQ in wiki &lt;a href=&#34;https://github.com/cloudwu/skynet/wiki/FAQ&#34;&gt;https://github.com/cloudwu/skynet/wiki/FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>espressif/arduino-esp32</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/espressif/arduino-esp32</id>
    <link href="https://github.com/espressif/arduino-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino core for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino core for the ESP32, ESP32-S2, ESP32-S3 and ESP32-C3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/espressif/arduino-esp32/workflows/ESP32%20Arduino%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.com/projects/espressif-arduino-esp32/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Need help or have a question? Join the chat at &lt;a href=&#34;https://gitter.im/espressif/arduino-esp32?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/espressif/arduino-esp32.svg?sanitize=true&#34; alt=&#34;https://gitter.im/espressif/arduino-esp32&#34;&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions&#34;&gt;open a new Discussion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-planning&#34;&gt;Development Planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#supported-chips&#34;&gt;Supported Chips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#decoding-exceptions&#34;&gt;Decoding exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#issuebug-report-template&#34;&gt;Issue/Bug report template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Status&lt;/h3&gt; &#xA;&lt;p&gt;Latest Stable Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Development Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32/all.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date-pre/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads-pre/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development Planning&lt;/h3&gt; &#xA;&lt;p&gt;Our Development is fully tracked on this public &lt;strong&gt;&lt;a href=&#34;https://github.com/orgs/espressif/projects/3&#34;&gt;Roadmap 🎉&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For even more information you can take a look at &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/sprints-meeting-notes&#34;&gt;Sprint Meeting notes&lt;/a&gt; or join &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/monthly-community-meetings&#34;&gt;Monthly Community Meetings 🔔&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/&#34;&gt;Arduino-ESP32 Online Documentation&lt;/a&gt; to get all information about this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html&#34;&gt;Installing (Windows, Linux and macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/libraries.html&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/esp-idf_component.html&#34;&gt;ESP-IDF as Component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Chips&lt;/h3&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#supported-soc-s&#34;&gt;supported chips&lt;/a&gt; documentation to see the list of current supported ESP32 SoCs.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding exceptions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/me-no-dev/EspExceptionDecoder&#34;&gt;EspExceptionDecoder&lt;/a&gt; to get meaningful call trace.&lt;/p&gt; &#xA;&lt;h3&gt;Issue/Bug report template&lt;/h3&gt; &#xA;&lt;p&gt;Before reporting an issue, make sure you&#39;ve searched for similar one that was already created. Also make sure to go through all the issues labelled as &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues?q=is%3Aissue+label%3A%22Type%3A+For+reference%22+&#34;&gt;Type: For reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you are sure no one else had the issue, follow the &lt;strong&gt;Issue template&lt;/strong&gt; or &lt;strong&gt;Feature request template&lt;/strong&gt; while reporting any &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues/new/choose&#34;&gt;new Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions to the Arduino ESP32 project!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/contributing.html&#34;&gt;contributing&lt;/a&gt; in the documentation for more information on how to contribute to the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redis/hiredis</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/redis/hiredis</id>
    <link href="https://github.com/redis/hiredis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimalistic C client for Redis &gt;= 1.2&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/redis/hiredis/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/redis/hiredis/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This Readme reflects the latest changed in the master branch. See &lt;a href=&#34;https://github.com/redis/hiredis/tree/v1.0.0&#34;&gt;v1.0.0&lt;/a&gt; for the Readme and documentation for the latest release (&lt;a href=&#34;https://abi-laboratory.pro/?view=timeline&amp;amp;l=hiredis&#34;&gt;API/ABI history&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HIREDIS&lt;/h1&gt; &#xA;&lt;p&gt;Hiredis is a minimalistic C client library for the &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; database.&lt;/p&gt; &#xA;&lt;p&gt;It is minimalistic because it just adds minimal support for the protocol, but at the same time it uses a high level printf-alike API in order to make it much higher level than otherwise suggested by its minimal code base and the lack of explicit bindings for every Redis command.&lt;/p&gt; &#xA;&lt;p&gt;Apart from supporting sending commands and receiving replies, it comes with a reply parser that is decoupled from the I/O layer. It is a stream parser designed for easy reusability, which can for instance be used in higher level language bindings for efficient reply parsing.&lt;/p&gt; &#xA;&lt;p&gt;Hiredis only supports the binary-safe Redis protocol, so you can use it with any Redis version &amp;gt;= 1.2.0.&lt;/p&gt; &#xA;&lt;p&gt;The library comes with multiple APIs. There is the &lt;em&gt;synchronous API&lt;/em&gt;, the &lt;em&gt;asynchronous API&lt;/em&gt; and the &lt;em&gt;reply parsing API&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading to &lt;code&gt;1.0.2&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;NOTE: v1.0.1 erroneously bumped SONAME, which is why it is skipped here.&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Version 1.0.2 is simply 1.0.0 with a fix for &lt;a href=&#34;https://github.com/redis/hiredis/security/advisories/GHSA-hfm9-39pp-55p2&#34;&gt;CVE-2021-32765&lt;/a&gt;. They are otherwise identical.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading to &lt;code&gt;1.0.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.0.0 marks the first stable release of Hiredis. It includes some minor breaking changes, mostly to make the exposed API more uniform and self-explanatory. It also bundles the updated &lt;code&gt;sds&lt;/code&gt; library, to sync up with upstream and Redis. For code changes see the &lt;a href=&#34;https://raw.githubusercontent.com/redis/hiredis/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: As described below, a few member names have been changed but most applications should be able to upgrade with minor code changes and recompiling.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT: Breaking changes from &lt;code&gt;0.14.1&lt;/code&gt; -&amp;gt; &lt;code&gt;1.0.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;redisContext&lt;/code&gt; has two additional members (&lt;code&gt;free_privdata&lt;/code&gt;, and &lt;code&gt;privctx&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redisOptions.timeout&lt;/code&gt; has been renamed to &lt;code&gt;redisOptions.connect_timeout&lt;/code&gt;, and we&#39;ve added &lt;code&gt;redisOptions.command_timeout&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redisReplyObjectFunctions.createArray&lt;/code&gt; now takes &lt;code&gt;size_t&lt;/code&gt; instead of &lt;code&gt;int&lt;/code&gt; for its length parameter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IMPORTANT: Breaking changes when upgrading from 0.13.x -&amp;gt; 0.14.x&lt;/h2&gt; &#xA;&lt;p&gt;Bulk and multi-bulk lengths less than -1 or greater than &lt;code&gt;LLONG_MAX&lt;/code&gt; are now protocol errors. This is consistent with the RESP specification. On 32-bit platforms, the upper bound is lowered to &lt;code&gt;SIZE_MAX&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Change &lt;code&gt;redisReply.len&lt;/code&gt; to &lt;code&gt;size_t&lt;/code&gt;, as it denotes the the size of a string&lt;/p&gt; &#xA;&lt;p&gt;User code should compare this to &lt;code&gt;size_t&lt;/code&gt; values as well. If it was used to compare to other values, casting might be necessary or can be removed, if casting was applied before.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading from &lt;code&gt;&amp;lt;0.9.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Version 0.9.0 is a major overhaul of hiredis in every aspect. However, upgrading existing code using hiredis should not be a big pain. The key thing to keep in mind when upgrading is that hiredis &amp;gt;= 0.9.0 uses a &lt;code&gt;redisContext*&lt;/code&gt; to keep state, in contrast to the stateless 0.0.1 that only has a file descriptor to work with.&lt;/p&gt; &#xA;&lt;h2&gt;Synchronous API&lt;/h2&gt; &#xA;&lt;p&gt;To consume the synchronous API, there are only a few function calls that need to be introduced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *redisConnect(const char *ip, int port);&#xA;void *redisCommand(redisContext *c, const char *format, ...);&#xA;void freeReplyObject(void *reply);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisConnect&lt;/code&gt; is used to create a so-called &lt;code&gt;redisContext&lt;/code&gt;. The context is where Hiredis holds state for a connection. The &lt;code&gt;redisContext&lt;/code&gt; struct has an integer &lt;code&gt;err&lt;/code&gt; field that is non-zero when the connection is in an error state. The field &lt;code&gt;errstr&lt;/code&gt; will contain a string with a description of the error. More information on errors can be found in the &lt;strong&gt;Errors&lt;/strong&gt; section. After trying to connect to Redis using &lt;code&gt;redisConnect&lt;/code&gt; you should check the &lt;code&gt;err&lt;/code&gt; field to see if establishing the connection was successful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *c = redisConnect(&#34;127.0.0.1&#34;, 6379);&#xA;if (c == NULL || c-&amp;gt;err) {&#xA;    if (c) {&#xA;        printf(&#34;Error: %s\n&#34;, c-&amp;gt;errstr);&#xA;        // handle error&#xA;    } else {&#xA;        printf(&#34;Can&#39;t allocate redis context\n&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: A &lt;code&gt;redisContext&lt;/code&gt; is not thread-safe.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sending commands&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways to issue commands to Redis. The first that will be introduced is &lt;code&gt;redisCommand&lt;/code&gt;. This function takes a format similar to printf. In the simplest form, it is used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET foo bar&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The specifier &lt;code&gt;%s&lt;/code&gt; interpolates a string in the command, and uses &lt;code&gt;strlen&lt;/code&gt; to determine the length of the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET foo %s&#34;, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you need to pass binary safe strings in a command, the &lt;code&gt;%b&lt;/code&gt; specifier can be used. Together with a pointer to the string, it requires a &lt;code&gt;size_t&lt;/code&gt; length argument of the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET foo %b&#34;, value, (size_t) valuelen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Internally, Hiredis splits the command in different arguments and will convert it to the protocol used to communicate with Redis. One or more spaces separates arguments, so you can use the specifiers anywhere in an argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context, &#34;SET key:%s %s&#34;, myid, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using replies&lt;/h3&gt; &#xA;&lt;p&gt;The return value of &lt;code&gt;redisCommand&lt;/code&gt; holds a reply when the command was successfully executed. When an error occurs, the return value is &lt;code&gt;NULL&lt;/code&gt; and the &lt;code&gt;err&lt;/code&gt; field in the context will be set (see section on &lt;strong&gt;Errors&lt;/strong&gt;). Once an error is returned the context cannot be reused and you should set up a new connection.&lt;/p&gt; &#xA;&lt;p&gt;The standard replies that &lt;code&gt;redisCommand&lt;/code&gt; are of the type &lt;code&gt;redisReply&lt;/code&gt;. The &lt;code&gt;type&lt;/code&gt; field in the &lt;code&gt;redisReply&lt;/code&gt; should be used to test what kind of reply was received:&lt;/p&gt; &#xA;&lt;h3&gt;RESP2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_STATUS&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with a status reply. The status string can be accessed using &lt;code&gt;reply-&amp;gt;str&lt;/code&gt;. The length of this string can be accessed using &lt;code&gt;reply-&amp;gt;len&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_ERROR&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with an error. The error string can be accessed identical to &lt;code&gt;REDIS_REPLY_STATUS&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_INTEGER&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with an integer. The integer value can be accessed using the &lt;code&gt;reply-&amp;gt;integer&lt;/code&gt; field of type &lt;code&gt;long long&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_NIL&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with a &lt;strong&gt;nil&lt;/strong&gt; object. There is no data to access.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_STRING&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A bulk (string) reply. The value of the reply can be accessed using &lt;code&gt;reply-&amp;gt;str&lt;/code&gt;. The length of this string can be accessed using &lt;code&gt;reply-&amp;gt;len&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_ARRAY&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A multi bulk reply. The number of elements in the multi bulk reply is stored in &lt;code&gt;reply-&amp;gt;elements&lt;/code&gt;. Every element in the multi bulk reply is a &lt;code&gt;redisReply&lt;/code&gt; object as well and can be accessed via &lt;code&gt;reply-&amp;gt;element[..index..]&lt;/code&gt;. Redis may reply with nested arrays but this is fully supported.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RESP3&lt;/h3&gt; &#xA;&lt;p&gt;Hiredis also supports every new &lt;code&gt;RESP3&lt;/code&gt; data type which are as follows. For more information about the protocol see the &lt;code&gt;RESP3&lt;/code&gt; &lt;a href=&#34;https://github.com/antirez/RESP3/raw/master/spec.md&#34;&gt;specification.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_DOUBLE&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The command replied with a double-precision floating point number. The value is stored as a string in the &lt;code&gt;str&lt;/code&gt; member, and can be converted with &lt;code&gt;strtod&lt;/code&gt; or similar.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_BOOL&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A boolean true/false reply. The value is stored in the &lt;code&gt;integer&lt;/code&gt; member and will be either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_MAP&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array with the added invariant that there will always be an even number of elements. The MAP is functionally equivalent to &lt;code&gt;REDIS_REPLY_ARRAY&lt;/code&gt; except for the previously mentioned invariant.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_SET&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array response where each entry is unique. Like the MAP type, the data is identical to an array response except there are no duplicate values.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_PUSH&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array that can be generated spontaneously by Redis. This array response will always contain at least two subelements. The first contains the type of &lt;code&gt;PUSH&lt;/code&gt; message (e.g. &lt;code&gt;message&lt;/code&gt;, or &lt;code&gt;invalidate&lt;/code&gt;), and the second being a sub-array with the &lt;code&gt;PUSH&lt;/code&gt; payload itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_ATTR&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An array structurally identical to a &lt;code&gt;MAP&lt;/code&gt; but intended as meta-data about a reply. &lt;em&gt;As of Redis 6.0.6 this reply type is not used in Redis&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_BIGNUM&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A string representing an arbitrarily large signed or unsigned integer value. The number will be encoded as a string in the &lt;code&gt;str&lt;/code&gt; member of &lt;code&gt;redisReply&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_REPLY_VERB&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A verbatim string, intended to be presented to the user without modification. The string payload is stored in the &lt;code&gt;str&lt;/code&gt; member, and type data is stored in the &lt;code&gt;vtype&lt;/code&gt; member (e.g. &lt;code&gt;txt&lt;/code&gt; for raw text or &lt;code&gt;md&lt;/code&gt; for markdown).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Replies should be freed using the &lt;code&gt;freeReplyObject()&lt;/code&gt; function. Note that this function will take care of freeing sub-reply objects contained in arrays and nested arrays, so there is no need for the user to free the sub replies (it is actually harmful and will corrupt the memory).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; the current version of hiredis (1.0.0) frees replies when the asynchronous API is used. This means you should not call &lt;code&gt;freeReplyObject&lt;/code&gt; when you use this API. The reply is cleaned up by hiredis &lt;em&gt;after&lt;/em&gt; the callback returns. We may introduce a flag to make this configurable in future versions of the library.&lt;/p&gt; &#xA;&lt;h3&gt;Cleaning up&lt;/h3&gt; &#xA;&lt;p&gt;To disconnect and free the context the following function can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisFree(redisContext *c);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function immediately closes the socket and then frees the allocations done in creating the context.&lt;/p&gt; &#xA;&lt;h3&gt;Sending commands (cont&#39;d)&lt;/h3&gt; &#xA;&lt;p&gt;Together with &lt;code&gt;redisCommand&lt;/code&gt;, the function &lt;code&gt;redisCommandArgv&lt;/code&gt; can be used to issue commands. It has the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes the number of arguments &lt;code&gt;argc&lt;/code&gt;, an array of strings &lt;code&gt;argv&lt;/code&gt; and the lengths of the arguments &lt;code&gt;argvlen&lt;/code&gt;. For convenience, &lt;code&gt;argvlen&lt;/code&gt; may be set to &lt;code&gt;NULL&lt;/code&gt; and the function will use &lt;code&gt;strlen(3)&lt;/code&gt; on every argument to determine its length. Obviously, when any of the arguments need to be binary safe, the entire array of lengths &lt;code&gt;argvlen&lt;/code&gt; should be provided.&lt;/p&gt; &#xA;&lt;p&gt;The return value has the same semantic as &lt;code&gt;redisCommand&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pipelining&lt;/h3&gt; &#xA;&lt;p&gt;To explain how Hiredis supports pipelining in a blocking connection, there needs to be understanding of the internal execution flow.&lt;/p&gt; &#xA;&lt;p&gt;When any of the functions in the &lt;code&gt;redisCommand&lt;/code&gt; family is called, Hiredis first formats the command according to the Redis protocol. The formatted command is then put in the output buffer of the context. This output buffer is dynamic, so it can hold any number of commands. After the command is put in the output buffer, &lt;code&gt;redisGetReply&lt;/code&gt; is called. This function has the following two execution paths:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The input buffer is non-empty: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Try to parse a single reply from the input buffer and return it&lt;/li&gt; &#xA;   &lt;li&gt;If no reply could be parsed, continue at &lt;em&gt;2&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The input buffer is empty: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Write the &lt;strong&gt;entire&lt;/strong&gt; output buffer to the socket&lt;/li&gt; &#xA;   &lt;li&gt;Read from the socket until a single reply could be parsed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisGetReply&lt;/code&gt; is exported as part of the Hiredis API and can be used when a reply is expected on the socket. To pipeline commands, the only things that needs to be done is filling up the output buffer. For this cause, two commands can be used that are identical to the &lt;code&gt;redisCommand&lt;/code&gt; family, apart from not returning a reply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisAppendCommand(redisContext *c, const char *format, ...);&#xA;void redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After calling either function one or more times, &lt;code&gt;redisGetReply&lt;/code&gt; can be used to receive the subsequent replies. The return value for this function is either &lt;code&gt;REDIS_OK&lt;/code&gt; or &lt;code&gt;REDIS_ERR&lt;/code&gt;, where the latter means an error occurred while reading a reply. Just as with the other commands, the &lt;code&gt;err&lt;/code&gt; field in the context can be used to find out what the cause of this error is.&lt;/p&gt; &#xA;&lt;p&gt;The following examples shows a simple pipeline (resulting in only a single call to &lt;code&gt;write(2)&lt;/code&gt; and a single call to &lt;code&gt;read(2)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisReply *reply;&#xA;redisAppendCommand(context,&#34;SET foo bar&#34;);&#xA;redisAppendCommand(context,&#34;GET foo&#34;);&#xA;redisGetReply(context,(void**)&amp;amp;reply); // reply for SET&#xA;freeReplyObject(reply);&#xA;redisGetReply(context,(void**)&amp;amp;reply); // reply for GET&#xA;freeReplyObject(reply);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This API can also be used to implement a blocking subscriber:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;reply = redisCommand(context,&#34;SUBSCRIBE foo&#34;);&#xA;freeReplyObject(reply);&#xA;while(redisGetReply(context,(void *)&amp;amp;reply) == REDIS_OK) {&#xA;    // consume message&#xA;    freeReplyObject(reply);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;When a function call is not successful, depending on the function either &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;REDIS_ERR&lt;/code&gt; is returned. The &lt;code&gt;err&lt;/code&gt; field inside the context will be non-zero and set to one of the following constants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_IO&lt;/code&gt;&lt;/strong&gt;: There was an I/O error while creating the connection, trying to write to the socket or read from the socket. If you included &lt;code&gt;errno.h&lt;/code&gt; in your application, you can use the global &lt;code&gt;errno&lt;/code&gt; variable to find out what is wrong.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_EOF&lt;/code&gt;&lt;/strong&gt;: The server closed the connection which resulted in an empty read.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_PROTOCOL&lt;/code&gt;&lt;/strong&gt;: There was an error while parsing the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;REDIS_ERR_OTHER&lt;/code&gt;&lt;/strong&gt;: Any other error. Currently, it is only used when a specified hostname to connect to cannot be resolved.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In every case, the &lt;code&gt;errstr&lt;/code&gt; field in the context will be set to hold a string representation of the error.&lt;/p&gt; &#xA;&lt;h2&gt;Asynchronous API&lt;/h2&gt; &#xA;&lt;p&gt;Hiredis comes with an asynchronous API that works easily with any event library. Examples are bundled that show using Hiredis with &lt;a href=&#34;http://software.schmorp.de/pkg/libev.html&#34;&gt;libev&lt;/a&gt; and &lt;a href=&#34;http://monkey.org/~provos/libevent/&#34;&gt;libevent&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisAsyncConnect&lt;/code&gt; can be used to establish a non-blocking connection to Redis. It returns a pointer to the newly created &lt;code&gt;redisAsyncContext&lt;/code&gt; struct. The &lt;code&gt;err&lt;/code&gt; field should be checked after creation to see if there were errors creating the connection. Because the connection that will be created is non-blocking, the kernel is not able to instantly return if the specified host and port is able to accept a connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: A &lt;code&gt;redisAsyncContext&lt;/code&gt; is not thread-safe.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisAsyncContext *c = redisAsyncConnect(&#34;127.0.0.1&#34;, 6379);&#xA;if (c-&amp;gt;err) {&#xA;    printf(&#34;Error: %s\n&#34;, c-&amp;gt;errstr);&#xA;    // handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The asynchronous context can hold a disconnect callback function that is called when the connection is disconnected (either because of an error or per user request). This function should have the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void(const redisAsyncContext *c, int status);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On a disconnect, the &lt;code&gt;status&lt;/code&gt; argument is set to &lt;code&gt;REDIS_OK&lt;/code&gt; when disconnection was initiated by the user, or &lt;code&gt;REDIS_ERR&lt;/code&gt; when the disconnection was caused by an error. When it is &lt;code&gt;REDIS_ERR&lt;/code&gt;, the &lt;code&gt;err&lt;/code&gt; field in the context can be accessed to find out the cause of the error.&lt;/p&gt; &#xA;&lt;p&gt;The context object is always freed after the disconnect callback fired. When a reconnect is needed, the disconnect callback is a good point to do so.&lt;/p&gt; &#xA;&lt;p&gt;Setting the disconnect callback can only be done once per context. For subsequent calls it will return &lt;code&gt;REDIS_ERR&lt;/code&gt;. The function to set the disconnect callback has the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ac-&amp;gt;data&lt;/code&gt; may be used to pass user data to this callback, the same can be done for redisConnectCallback.&lt;/p&gt; &#xA;&lt;h3&gt;Sending commands and their callbacks&lt;/h3&gt; &#xA;&lt;p&gt;In an asynchronous context, commands are automatically pipelined due to the nature of an event loop. Therefore, unlike the synchronous API, there is only a single way to send commands. Because commands are sent to Redis asynchronously, issuing a command requires a callback function that is called when the reply is received. Reply callbacks should have the following prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void(redisAsyncContext *c, void *reply, void *privdata);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;privdata&lt;/code&gt; argument can be used to curry arbitrary data to the callback from the point where the command is initially queued for execution.&lt;/p&gt; &#xA;&lt;p&gt;The functions that can be used to issue commands in an asynchronous context are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int redisAsyncCommand(&#xA;  redisAsyncContext *ac, redisCallbackFn *fn, void *privdata,&#xA;  const char *format, ...);&#xA;int redisAsyncCommandArgv(&#xA;  redisAsyncContext *ac, redisCallbackFn *fn, void *privdata,&#xA;  int argc, const char **argv, const size_t *argvlen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both functions work like their blocking counterparts. The return value is &lt;code&gt;REDIS_OK&lt;/code&gt; when the command was successfully added to the output buffer and &lt;code&gt;REDIS_ERR&lt;/code&gt; otherwise. Example: when the connection is being disconnected per user-request, no new commands may be added to the output buffer and &lt;code&gt;REDIS_ERR&lt;/code&gt; is returned on calls to the &lt;code&gt;redisAsyncCommand&lt;/code&gt; family.&lt;/p&gt; &#xA;&lt;p&gt;If the reply for a command with a &lt;code&gt;NULL&lt;/code&gt; callback is read, it is immediately freed. When the callback for a command is non-&lt;code&gt;NULL&lt;/code&gt;, the memory is freed immediately following the callback: the reply is only valid for the duration of the callback.&lt;/p&gt; &#xA;&lt;p&gt;All pending callbacks are called with a &lt;code&gt;NULL&lt;/code&gt; reply when the context encountered an error.&lt;/p&gt; &#xA;&lt;h3&gt;Disconnecting&lt;/h3&gt; &#xA;&lt;p&gt;An asynchronous connection can be terminated using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void redisAsyncDisconnect(redisAsyncContext *ac);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this function is called, the connection is &lt;strong&gt;not&lt;/strong&gt; immediately terminated. Instead, new commands are no longer accepted and the connection is only terminated when all pending commands have been written to the socket, their respective replies have been read and their respective callbacks have been executed. After this, the disconnection callback is executed with the &lt;code&gt;REDIS_OK&lt;/code&gt; status and the context object is freed.&lt;/p&gt; &#xA;&lt;h3&gt;Hooking it up to event library &lt;em&gt;X&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are a few hooks that need to be set on the context object after it is created. See the &lt;code&gt;adapters/&lt;/code&gt; directory for bindings to &lt;em&gt;libev&lt;/em&gt; and &lt;em&gt;libevent&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reply parsing API&lt;/h2&gt; &#xA;&lt;p&gt;Hiredis comes with a reply parsing API that makes it easy for writing higher level language bindings.&lt;/p&gt; &#xA;&lt;p&gt;The reply parsing API consists of the following functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisReader *redisReaderCreate(void);&#xA;void redisReaderFree(redisReader *reader);&#xA;int redisReaderFeed(redisReader *reader, const char *buf, size_t len);&#xA;int redisReaderGetReply(redisReader *reader, void **reply);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same set of functions are used internally by hiredis when creating a normal Redis context, the above API just exposes it to the user for a direct usage.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisReaderCreate&lt;/code&gt; creates a &lt;code&gt;redisReader&lt;/code&gt; structure that holds a buffer with unparsed data and state for the protocol parser.&lt;/p&gt; &#xA;&lt;p&gt;Incoming data -- most likely from a socket -- can be placed in the internal buffer of the &lt;code&gt;redisReader&lt;/code&gt; using &lt;code&gt;redisReaderFeed&lt;/code&gt;. This function will make a copy of the buffer pointed to by &lt;code&gt;buf&lt;/code&gt; for &lt;code&gt;len&lt;/code&gt; bytes. This data is parsed when &lt;code&gt;redisReaderGetReply&lt;/code&gt; is called. This function returns an integer status and a reply object (as described above) via &lt;code&gt;void **reply&lt;/code&gt;. The returned status can be either &lt;code&gt;REDIS_OK&lt;/code&gt; or &lt;code&gt;REDIS_ERR&lt;/code&gt;, where the latter means something went wrong (either a protocol error, or an out of memory error).&lt;/p&gt; &#xA;&lt;p&gt;The parser limits the level of nesting for multi bulk payloads to 7. If the multi bulk nesting level is higher than this, the parser returns an error.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing replies&lt;/h3&gt; &#xA;&lt;p&gt;The function &lt;code&gt;redisReaderGetReply&lt;/code&gt; creates &lt;code&gt;redisReply&lt;/code&gt; and makes the function argument &lt;code&gt;reply&lt;/code&gt; point to the created &lt;code&gt;redisReply&lt;/code&gt; variable. For instance, if the response of type &lt;code&gt;REDIS_REPLY_STATUS&lt;/code&gt; then the &lt;code&gt;str&lt;/code&gt; field of &lt;code&gt;redisReply&lt;/code&gt; will hold the status as a vanilla C string. However, the functions that are responsible for creating instances of the &lt;code&gt;redisReply&lt;/code&gt; can be customized by setting the &lt;code&gt;fn&lt;/code&gt; field on the &lt;code&gt;redisReader&lt;/code&gt; struct. This should be done immediately after creating the &lt;code&gt;redisReader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://github.com/pietern/hiredis-rb/raw/master/ext/hiredis_ext/reader.c&#34;&gt;hiredis-rb&lt;/a&gt; uses customized reply object functions to create Ruby objects.&lt;/p&gt; &#xA;&lt;h3&gt;Reader max buffer&lt;/h3&gt; &#xA;&lt;p&gt;Both when using the Reader API directly or when using it indirectly via a normal Redis context, the redisReader structure uses a buffer in order to accumulate data from the server. Usually this buffer is destroyed when it is empty and is larger than 16 KiB in order to avoid wasting memory in unused buffers&lt;/p&gt; &#xA;&lt;p&gt;However when working with very big payloads destroying the buffer may slow down performances considerably, so it is possible to modify the max size of an idle buffer changing the value of the &lt;code&gt;maxbuf&lt;/code&gt; field of the reader structure to the desired value. The special value of 0 means that there is no maximum value for an idle buffer, so the buffer will never get freed.&lt;/p&gt; &#xA;&lt;p&gt;For instance if you have a normal Redis context you can set the maximum idle buffer to zero (unlimited) just with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;context-&amp;gt;reader-&amp;gt;maxbuf = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should be done only in order to maximize performances when working with large payloads. The context should be set back to &lt;code&gt;REDIS_READER_MAX_BUF&lt;/code&gt; again as soon as possible in order to prevent allocation of useless memory.&lt;/p&gt; &#xA;&lt;h3&gt;Reader max array elements&lt;/h3&gt; &#xA;&lt;p&gt;By default the hiredis reply parser sets the maximum number of multi-bulk elements to 2^32 - 1 or 4,294,967,295 entries. If you need to process multi-bulk replies with more than this many elements you can set the value higher or to zero, meaning unlimited with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;context-&amp;gt;reader-&amp;gt;maxelements = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SSL/TLS Support&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;SSL/TLS support is not built by default and requires an explicit flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make USE_SSL=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires OpenSSL development package (e.g. including header files to be available.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, SSL/TLS support is built into extra &lt;code&gt;libhiredis_ssl.a&lt;/code&gt; and &lt;code&gt;libhiredis_ssl.so&lt;/code&gt; static/dynamic libraries. This leaves the original libraries unaffected so no additional dependencies are introduced.&lt;/p&gt; &#xA;&lt;h3&gt;Using it&lt;/h3&gt; &#xA;&lt;p&gt;First, you&#39;ll need to make sure you include the SSL header file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;hiredis.h&#34;&#xA;#include &#34;hiredis_ssl.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to link against &lt;code&gt;libhiredis_ssl&lt;/code&gt;, &lt;strong&gt;in addition&lt;/strong&gt; to &lt;code&gt;libhiredis&lt;/code&gt; and add &lt;code&gt;-lssl -lcrypto&lt;/code&gt; to satisfy its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Hiredis implements SSL/TLS on top of its normal &lt;code&gt;redisContext&lt;/code&gt; or &lt;code&gt;redisAsyncContext&lt;/code&gt;, so you will need to establish a connection first and then initiate an SSL/TLS handshake.&lt;/p&gt; &#xA;&lt;h4&gt;Hiredis OpenSSL Wrappers&lt;/h4&gt; &#xA;&lt;p&gt;Before Hiredis can negotiate an SSL/TLS connection, it is necessary to initialize OpenSSL and create a context. You can do that in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Work directly with the OpenSSL API to initialize the library&#39;s global context and create &lt;code&gt;SSL_CTX *&lt;/code&gt; and &lt;code&gt;SSL *&lt;/code&gt; contexts. With an &lt;code&gt;SSL *&lt;/code&gt; object you can call &lt;code&gt;redisInitiateSSL()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Work with a set of Hiredis-provided wrappers around OpenSSL, create a &lt;code&gt;redisSSLContext&lt;/code&gt; object to hold configuration and use &lt;code&gt;redisInitiateSSLWithContext()&lt;/code&gt; to initiate the SSL/TLS handshake.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* An Hiredis SSL context. It holds SSL configuration and can be reused across&#xA; * many contexts.&#xA; */&#xA;redisSSLContext *ssl_context;&#xA;&#xA;/* An error variable to indicate what went wrong, if the context fails to&#xA; * initialize.&#xA; */&#xA;redisSSLContextError ssl_error;&#xA;&#xA;/* Initialize global OpenSSL state.&#xA; *&#xA; * You should call this only once when your app initializes, and only if&#xA; * you don&#39;t explicitly or implicitly initialize OpenSSL it elsewhere.&#xA; */&#xA;redisInitOpenSSL();&#xA;&#xA;/* Create SSL context */&#xA;ssl_context = redisCreateSSLContext(&#xA;    &#34;cacertbundle.crt&#34;,     /* File name of trusted CA/ca bundle file, optional */&#xA;    &#34;/path/to/certs&#34;,       /* Path of trusted certificates, optional */&#xA;    &#34;client_cert.pem&#34;,      /* File name of client certificate file, optional */&#xA;    &#34;client_key.pem&#34;,       /* File name of client private key, optional */&#xA;    &#34;redis.mydomain.com&#34;,   /* Server name to request (SNI), optional */&#xA;    &amp;amp;ssl_error);&#xA;&#xA;if(ssl_context == NULL || ssl_error != 0) {&#xA;    /* Handle error and abort... */&#xA;    /* e.g. &#xA;    printf(&#34;SSL error: %s\n&#34;, &#xA;        (ssl_error != 0) ? &#xA;            redisSSLContextGetError(ssl_error) : &#34;Unknown error&#34;);&#xA;    // Abort&#xA;    */&#xA;}&#xA;&#xA;/* Create Redis context and establish connection */&#xA;c = redisConnect(&#34;localhost&#34;, 6443);&#xA;if (c == NULL || c-&amp;gt;err) {&#xA;    /* Handle error and abort... */&#xA;}&#xA;&#xA;/* Negotiate SSL/TLS */&#xA;if (redisInitiateSSLWithContext(c, ssl_context) != REDIS_OK) {&#xA;    /* Handle error, in c-&amp;gt;err / c-&amp;gt;errstr */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RESP3 PUSH replies&lt;/h2&gt; &#xA;&lt;p&gt;Redis 6.0 introduced PUSH replies with the reply-type &lt;code&gt;&amp;gt;&lt;/code&gt;. These messages are generated spontaneously and can arrive at any time, so must be handled using callbacks.&lt;/p&gt; &#xA;&lt;h3&gt;Default behavior&lt;/h3&gt; &#xA;&lt;p&gt;Hiredis installs handlers on &lt;code&gt;redisContext&lt;/code&gt; and &lt;code&gt;redisAsyncContext&lt;/code&gt; by default, which will intercept and free any PUSH replies detected. This means existing code will work as-is after upgrading to Redis 6 and switching to &lt;code&gt;RESP3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom PUSH handler prototypes&lt;/h3&gt; &#xA;&lt;p&gt;The callback prototypes differ between &lt;code&gt;redisContext&lt;/code&gt; and &lt;code&gt;redisAsyncContext&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;redisContext&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void my_push_handler(void *privdata, void *reply) {&#xA;    /* Handle the reply */&#xA;&#xA;    /* Note: We need to free the reply in our custom handler for&#xA;             blocking contexts.  This lets us keep the reply if&#xA;             we want. */&#xA;    freeReplyObject(reply);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;redisAsyncContext&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void my_async_push_handler(redisAsyncContext *ac, void *reply) {&#xA;    /* Handle the reply */&#xA;&#xA;    /* Note:  Because async hiredis always frees replies, you should&#xA;              not call freeReplyObject in an async push callback. */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing a custom handler&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to set your own PUSH handlers.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;push_cb&lt;/code&gt; or &lt;code&gt;async_push_cb&lt;/code&gt; in the &lt;code&gt;redisOptions&lt;/code&gt; struct and connect with &lt;code&gt;redisConnectWithOptions&lt;/code&gt; or &lt;code&gt;redisAsyncConnectWithOptions&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisOptions = {0};&#xA;REDIS_OPTIONS_SET_TCP(&amp;amp;options, &#34;127.0.0.1&#34;, 6379);&#xA;options-&amp;gt;push_cb = my_push_handler;&#xA;redisContext *context = redisConnectWithOptions(&amp;amp;options);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;redisSetPushCallback&lt;/code&gt; or &lt;code&gt;redisAsyncSetPushCallback&lt;/code&gt; on a connected context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *context = redisConnect(&#34;127.0.0.1&#34;, 6379);&#xA;redisSetPushCallback(context, my_push_handler);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note &lt;code&gt;redisSetPushCallback&lt;/code&gt; and &lt;code&gt;redisAsyncSetPushCallback&lt;/code&gt; both return any currently configured handler, making it easy to override and then return to the old value.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Specifying no handler&lt;/h3&gt; &#xA;&lt;p&gt;If you have a unique use-case where you don&#39;t want hiredis to automatically intercept and free PUSH replies, you will want to configure no handler at all. This can be done in two ways.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the &lt;code&gt;REDIS_OPT_NO_PUSH_AUTOFREE&lt;/code&gt; flag in &lt;code&gt;redisOptions&lt;/code&gt; and leave the callback function pointer &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisOptions = {0};&#xA;REDIS_OPTIONS_SET_TCP(&amp;amp;options, &#34;127.0.0.1&#34;, 6379);&#xA;options-&amp;gt;options |= REDIS_OPT_NO_PUSH_AUTOFREE;&#xA;redisContext *context = redisConnectWithOptions(&amp;amp;options);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;redisSetPushCallback&lt;/code&gt; with &lt;code&gt;NULL&lt;/code&gt; once connected.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redisContext *context = redisConnect(&#34;127.0.0.1&#34;, 6379);&#xA;redisSetPushCallback(context, NULL);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: With no handler configured, calls to &lt;code&gt;redisCommand&lt;/code&gt; may generate more than one reply, so this strategy is only applicable when there&#39;s some kind of blocking&lt;code&gt;redisGetReply()&lt;/code&gt; loop (e.g. &lt;code&gt;MONITOR&lt;/code&gt; or &lt;code&gt;SUBSCRIBE&lt;/code&gt; workloads).&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Allocator injection&lt;/h2&gt; &#xA;&lt;p&gt;Hiredis uses a pass-thru structure of function pointers defined in &lt;a href=&#34;https://github.com/redis/hiredis/raw/f5d25850/alloc.h#L41&#34;&gt;alloc.h&lt;/a&gt; that contain the currently configured allocation and deallocation functions. By default they just point to libc (&lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;calloc&lt;/code&gt;, &lt;code&gt;realloc&lt;/code&gt;, etc).&lt;/p&gt; &#xA;&lt;h3&gt;Overriding&lt;/h3&gt; &#xA;&lt;p&gt;One can override the allocators like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hiredisAllocFuncs myfuncs = {&#xA;    .mallocFn = my_malloc,&#xA;    .callocFn = my_calloc,&#xA;    .reallocFn = my_realloc,&#xA;    .strdupFn = my_strdup,&#xA;    .freeFn = my_free,&#xA;};&#xA;&#xA;// Override allocators (function returns current allocators if needed)&#xA;hiredisAllocFuncs orig = hiredisSetAllocators(&amp;amp;myfuncs);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reset the allocators to their default libc function simply call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hiredisResetAllocators();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AUTHORS&lt;/h2&gt; &#xA;&lt;p&gt;Salvatore Sanfilippo (antirez at gmail),&lt;br&gt; Pieter Noordhuis (pcnoordhuis at gmail)&lt;br&gt; Michael Grunder (michael dot grunder at gmail)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Hiredis is released under the BSD license.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>colmap/colmap</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/colmap/colmap</id>
    <link href="https://github.com/colmap/colmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;COLMAP - Structure-from-Motion and Multi-View Stereo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COLMAP&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;COLMAP is a general-purpose Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline with a graphical and command-line interface. It offers a wide range of features for reconstruction of ordered and unordered image collections. The software is licensed under the new BSD license. If you use this project for your research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{schoenberger2016sfm,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Frahm, Jan-Michael},&#xA;    title={Structure-from-Motion Revisited},&#xA;    booktitle={Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;    year={2016},&#xA;}&#xA;&#xA;@inproceedings{schoenberger2016mvs,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Zheng, Enliang and Pollefeys, Marc and Frahm, Jan-Michael},&#xA;    title={Pixelwise View Selection for Unstructured Multi-View Stereo},&#xA;    booktitle={European Conference on Computer Vision (ECCV)},&#xA;    year={2016},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the image retrieval / vocabulary tree engine, please also cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{schoenberger2016vote,&#xA;    author={Sch\&#34;{o}nberger, Johannes Lutz and Price, True and Sattler, Torsten and Frahm, Jan-Michael and Pollefeys, Marc},&#xA;    title={A Vote-and-Verify Strategy for Fast Spatial Verification in Image Retrieval},&#xA;    booktitle={Asian Conference on Computer Vision (ACCV)},&#xA;    year={2016},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest source code is available at &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;https://github.com/colmap/colmap&lt;/a&gt;. COLMAP builds on top of existing works and when using specific algorithms within COLMAP, please also cite the original authors, as specified in the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Executables for Windows and Mac and other resources can be downloaded from &lt;a href=&#34;https://demuc.de/colmap/&#34;&gt;https://demuc.de/colmap/&lt;/a&gt;. Executables for Linux/Unix/BSD are available at &lt;a href=&#34;https://repology.org/metapackage/colmap/versions&#34;&gt;https://repology.org/metapackage/colmap/versions&lt;/a&gt;. To build COLMAP from source, please see &lt;a href=&#34;https://colmap.github.io/install.html&#34;&gt;https://colmap.github.io/install.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the pre-built binaries from &lt;a href=&#34;https://demuc.de/colmap/&#34;&gt;https://demuc.de/colmap/&lt;/a&gt; or build the library manually as described in the documentation.&lt;/li&gt; &#xA; &lt;li&gt;Download one of the provided datasets at &lt;a href=&#34;https://demuc.de/colmap/datasets/&#34;&gt;https://demuc.de/colmap/datasets/&lt;/a&gt; or use your own images.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;strong&gt;automatic reconstruction&lt;/strong&gt; to easily build models with a single click or command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available at &lt;a href=&#34;https://colmap.github.io/&#34;&gt;https://colmap.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please, use the COLMAP Google Group at &lt;a href=&#34;https://groups.google.com/forum/#!forum/colmap&#34;&gt;https://groups.google.com/forum/#!forum/colmap&lt;/a&gt; (&lt;a href=&#34;mailto:colmap@googlegroups.com&#34;&gt;colmap@googlegroups.com&lt;/a&gt;) for questions and the GitHub issue tracker at &lt;a href=&#34;https://github.com/colmap/colmap&#34;&gt;https://github.com/colmap/colmap&lt;/a&gt; for bug reports, feature requests/additions, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The library was written by Johannes L. Schönberger (&lt;a href=&#34;https://demuc.de/&#34;&gt;https://demuc.de/&lt;/a&gt;). Funding was provided by his PhD advisors Jan-Michael Frahm (&lt;a href=&#34;http://frahm.web.unc.edu/&#34;&gt;http://frahm.web.unc.edu/&lt;/a&gt;) and Marc Pollefeys (&lt;a href=&#34;https://people.inf.ethz.ch/pomarc/&#34;&gt;https://people.inf.ethz.ch/pomarc/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions (bug reports, bug fixes, improvements, etc.) are very welcome and should be submitted in the form of new issues and/or pull requests on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The COLMAP library is licensed under the new BSD license. Note that this text refers only to the license for COLMAP itself, independent of its dependencies, which are separately licensed. Building COLMAP with these dependencies may affect the resulting COLMAP license.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2022, ETH Zurich and UNC Chapel Hill.&#xA;All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;    * Redistributions of source code must retain the above copyright&#xA;      notice, this list of conditions and the following disclaimer.&#xA;&#xA;    * Redistributions in binary form must reproduce the above copyright&#xA;      notice, this list of conditions and the following disclaimer in the&#xA;      documentation and/or other materials provided with the distribution.&#xA;&#xA;    * Neither the name of ETH Zurich and UNC Chapel Hill nor the names of&#xA;      its contributors may be used to endorse or promote products derived&#xA;      from this software without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&#xA;ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE&#xA;LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR&#xA;CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF&#xA;SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS&#xA;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN&#xA;CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#xA;ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE&#xA;POSSIBILITY OF SUCH DAMAGE.&#xA;&#xA;Author: Johannes L. Schoenberger (jsch-at-demuc-dot-de)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ThrowTheSwitch/Unity</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/ThrowTheSwitch/Unity</id>
    <link href="https://github.com/ThrowTheSwitch/Unity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Unit Testing for C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity Test &lt;img src=&#34;https://github.com/ThrowTheSwitch/Unity/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Copyright (c) 2007 - 2021 Unity Project by Mike Karlesky, Mark VanderVoord, and Greg Williams&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the Unity Test Project, one of the main projects of ThrowTheSwitch.org. Unity Test is a unit testing framework built for C, with a focus on working with embedded toolchains.&lt;/p&gt; &#xA;&lt;p&gt;This project is made to test code targetting microcontrollers big and small. The core project is a single C file and a pair of headers, allowing it to the added to your existing build setup without too much headache. You may use any compiler you wish, and may use most existing build systems including Make, CMake, etc. If you&#39;d like to leave the hard work to us, you might be interested in Ceedling, a build tool also by ThrowTheSwitch.org.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to Unity, we encourage you to tour the &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/&#34;&gt;docs&lt;/a&gt; folder contains a &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityGettingStartedGuide.md&#34;&gt;getting started guide&lt;/a&gt; and much more tips about using Unity.&lt;/p&gt; &#xA;&lt;h2&gt;Unity Assertion Summary&lt;/h2&gt; &#xA;&lt;p&gt;For the full list, see &lt;a href=&#34;https://raw.githubusercontent.com/ThrowTheSwitch/Unity/master/docs/UnityAssertionsReference.md&#34;&gt;UnityAssertionsReference.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Validity Tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_TRUE(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to false&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FALSE(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluates whatever code is in condition and fails if it evaluates to true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_TRUE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_UNLESS(condition)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling &lt;code&gt;TEST_ASSERT_FALSE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_FAIL()&#xA;TEST_FAIL_MESSAGE(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test is automatically marked as a failure. The message is output stating why.&lt;/p&gt; &#xA;&lt;h3&gt;Numerical Assertions: Integers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_INT(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT8(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT16(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT32(expected, actual)&#xA;TEST_ASSERT_EQUAL_INT64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two integers for equality and display errors as signed integers. A cast will be performed to your natural integer size so often this can just be used. When you need to specify the exact size, like when comparing arrays, you can use a specific version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_UINT(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT8(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT16(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT32(expected, actual)&#xA;TEST_ASSERT_EQUAL_UINT64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two integers for equality and display errors as unsigned integers. Like INT, there are variants for different sizes also.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX8(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX16(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX32(expected, actual)&#xA;TEST_ASSERT_EQUAL_HEX64(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compares two integers for equality and display errors as hexadecimal. Like the other integer comparisons, you can specify the size... here the size will also effect how many nibbles are shown (for example, &lt;code&gt;HEX16&lt;/code&gt; will show 4 nibbles).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way of calling TEST_ASSERT_EQUAL_INT&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_INT_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_GREATER_THAN(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is greater than the threshold. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is less than the threshold. This also comes in size specific variants.&lt;/p&gt; &#xA;&lt;h3&gt;Arrays&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;_ARRAY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can append &lt;code&gt;_ARRAY&lt;/code&gt; to any of these macros to make an array comparison of that type. Here you will need to care a bit more about the actual size of the value being checked. You will also specify an additional argument which is the number of elements to compare. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, elements)&#xA;&#xA;_EACH_EQUAL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another array comparison option is to check that EVERY element of an array is equal to a single expected value. You do this by specifying the EACH_EQUAL macro. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, elements)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numerical Assertions: Bitwise&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS(mask, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be compared between two other integers. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_HIGH(mask, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set high. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BITS_LOW(mask, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an integer mask to specify which bits should be inspected to determine if they are all set low. High bits in the mask are compared, low bits ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_HIGH(bit, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test a single bit and verify that it is high. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_BIT_LOW(bit, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test a single bit and verify that it is low. The bit is specified 0-31 for a 32-bit integer.&lt;/p&gt; &#xA;&lt;h3&gt;Numerical Assertions: Floats&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)&#xA;TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is within plus or minus delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_FLOAT_NOT_WITHIN(delta, expected, actual)&#xA;TEST_ASSERT_DOUBLE_NOT_WITHIN(delta, expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is NOT within plus or minus delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_FLOAT(expected, actual)&#xA;TEST_ASSERT_EQUAL_DOUBLE(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that two floating point values are &#34;equal&#34; within a small % delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_EQUAL_FLOAT(expected, actual)&#xA;TEST_ASSERT_NOT_EQUAL_DOUBLE(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that two floating point values are NOT &#34;equal&#34; within a small % delta of the expected value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_LESS_THAN_FLOAT(threshold, actual)&#xA;TEST_ASSERT_LESS_THAN_DOUBLE(threshold, actual)&#xA;TEST_ASSERT_GREATER_THAN_FLOAT(threshold, actual)&#xA;TEST_ASSERT_GREATER_THAN_DOUBLE(threshold, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asserts that the actual value is less than or greater than the threshold.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;LESS_OR_EQUAL&lt;/code&gt; and &lt;code&gt;GREATER_OR_EQUAL&lt;/code&gt; variations. These obey the same rules for equality as do &lt;code&gt;TEST_ASSERT_EQUAL_FLOAT&lt;/code&gt; and &lt;code&gt;TEST_ASSERT_EQUAL_DOUBLE&lt;/code&gt;: If the two values are within a small % delta of the expected value, the assertion will pass.&lt;/p&gt; &#xA;&lt;h3&gt;String Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING(expected, actual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two null-terminate strings. Fail if any character is different or if the lengths are different. Output a custom message on failure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two strings. Fail if any character is different, stop comparing after len characters. Output a custom message on failure.&lt;/p&gt; &#xA;&lt;h3&gt;Pointer Assertions&lt;/h3&gt; &#xA;&lt;p&gt;Most pointer operations can be performed by simply using the integer comparisons above. However, a couple of special cases are added for clarity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NULL(pointer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fails if the pointer is not equal to NULL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_NOT_NULL(pointer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fails if the pointer is equal to NULL&lt;/p&gt; &#xA;&lt;h3&gt;Memory Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compare two blocks of memory. This is a good generic assertion for types that can&#39;t be coerced into acting like standard types... but since it&#39;s a memory compare, you have to be careful that your data types are packed.&lt;/p&gt; &#xA;&lt;h3&gt;_MESSAGE&lt;/h3&gt; &#xA;&lt;p&gt;You can append &lt;code&gt;\_MESSAGE&lt;/code&gt; to any of the macros to make them take an additional argument. This argument is a string that will be printed at the end of the failure strings. This is useful for specifying more information about the problem.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FRRouting/frr</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/FRRouting/frr</id>
    <link href="https://github.com/FRRouting/frr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The FRRouting Protocol Suite&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://docs.frrouting.org/en/latest/_static/frr-icon.svg?sanitize=true&#34; alt=&#34;Icon&#34; width=&#34;20%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;FRRouting&lt;/h1&gt; &#xA;&lt;p&gt;FRR is free software that implements and manages various IPv4 and IPv6 routing protocols. It runs on nearly all distributions of Linux and BSD and supports all modern CPU architectures.&lt;/p&gt; &#xA;&lt;p&gt;FRR currently supports the following protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BGP&lt;/li&gt; &#xA; &lt;li&gt;OSPFv2&lt;/li&gt; &#xA; &lt;li&gt;OSPFv3&lt;/li&gt; &#xA; &lt;li&gt;RIPv1&lt;/li&gt; &#xA; &lt;li&gt;RIPv2&lt;/li&gt; &#xA; &lt;li&gt;RIPng&lt;/li&gt; &#xA; &lt;li&gt;IS-IS&lt;/li&gt; &#xA; &lt;li&gt;PIM-SM/MSDP&lt;/li&gt; &#xA; &lt;li&gt;LDP&lt;/li&gt; &#xA; &lt;li&gt;BFD&lt;/li&gt; &#xA; &lt;li&gt;Babel&lt;/li&gt; &#xA; &lt;li&gt;PBR&lt;/li&gt; &#xA; &lt;li&gt;OpenFabric&lt;/li&gt; &#xA; &lt;li&gt;VRRP&lt;/li&gt; &#xA; &lt;li&gt;EIGRP (alpha)&lt;/li&gt; &#xA; &lt;li&gt;NHRP (alpha)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Use&lt;/h2&gt; &#xA;&lt;p&gt;For source tarballs, see the &lt;a href=&#34;https://github.com/FRRouting/frr/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Debian and its derivatives, use the APT repository at &lt;a href=&#34;https://deb.frrouting.org/&#34;&gt;https://deb.frrouting.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instructions on building and installing from source for supported platforms may be found in the &lt;a href=&#34;http://docs.frrouting.org/projects/dev-guide/en/latest/building.html&#34;&gt;developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, please refer to the &lt;a href=&#34;http://docs.frrouting.org/&#34;&gt;user guide&lt;/a&gt; for instructions on use.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The FRRouting email list server is located &lt;a href=&#34;https://lists.frrouting.org/listinfo&#34;&gt;here&lt;/a&gt; and offers the following public lists:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:dev@lists.frrouting.org&#34;&gt;dev@lists.frrouting.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Users &amp;amp; Operators&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:frog@lists.frrouting.org&#34;&gt;frog@lists.frrouting.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Announcements&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:announce@lists.frrouting.org&#34;&gt;announce@lists.frrouting.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For chat, we currently use &lt;a href=&#34;https://frrouting.slack.com&#34;&gt;Slack&lt;/a&gt;. You can join by clicking the &#34;Slack&#34; link under the &lt;a href=&#34;https://frrouting.org/community&#34;&gt;Participate&lt;/a&gt; section of our website.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;FRR maintains &lt;a href=&#34;http://docs.frrouting.org/projects/dev-guide/en/latest/index.html&#34;&gt;developer&#39;s documentation&lt;/a&gt; which contains the &lt;a href=&#34;http://docs.frrouting.org/projects/dev-guide/en/latest/workflow.html&#34;&gt;project workflow&lt;/a&gt; and expectations for contributors. Some technical documentation on project internals is also available.&lt;/p&gt; &#xA;&lt;p&gt;We welcome and appreciate all contributions, no matter how small!&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;To report security issues, please use our security mailing list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;security [at] lists.frrouting.org&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>liaozhelin/yds-charger</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/liaozhelin/yds-charger</id>
    <link href="https://github.com/liaozhelin/yds-charger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个精致的多功能四路166W桌面充电器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;四路桌面智能充电站&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是一个实用型智能充电器项目&lt;/p&gt; &#xA; &lt;p&gt;视频介绍：&lt;a href=&#34;https://www.bilibili.com/video/BV1X94y1U7av/&#34;&gt;【开源】如何自制一个全能桌面充电站？&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;如果觉得视频还可以的话，留下一键三连哦 ( ˊ•̥▵•)੭₎₎&lt;/p&gt; &#xA; &lt;p&gt;本项目欢迎复刻，禁止商用！！&lt;/p&gt; &#xA; &lt;p&gt;整体成本（纯硬件）在50元左右，目前没有贵的离谱芯片，选用的芯片基本都是国产使用量较高的&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liaozhelin/picgo/master/5E3306F0C8ED8A1241D5FD975B7F77DC.png&#34; alt=&#34;5E3306F0C8ED8A1241D5FD975B7F77DC&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;仓库目录说明&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hardware：【上层板/下层板/前面板/后面板 】gerber文件/原理图源文件/原理图PDF文件/坐标文件/BOM文件&lt;/li&gt; &#xA; &lt;li&gt;Firmware：【 ESP32C3FN4 的固件以及工具 】固件/驱动/下载烧录软件&lt;/li&gt; &#xA; &lt;li&gt;Software： 【 软件工程源码 】esp-idf-4.4 版本开发环境&lt;/li&gt; &#xA; &lt;li&gt;Structure： 【 整机结构文件 】包含电路板及外壳装配文件，软件版本Soliworks2022&lt;/li&gt; &#xA; &lt;li&gt;Documents： 【 项目所用到的文档手册等 】部分手册，有些手册是厂家不让流传的没有上传&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;资料说明 （更新日期22-5-30）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;已添加gerber文件，包含上层版，下层板，前面板，后面板，可直接打样（上层板若审核不通过备注断板不补即可）&lt;/li&gt; &#xA; &lt;li&gt;已添加原理图源文件&lt;/li&gt; &#xA; &lt;li&gt;已添加 README 文件&lt;/li&gt; &#xA; &lt;li&gt;已添加烧录软件,bootloader固件以及app固件&lt;/li&gt; &#xA; &lt;li&gt;已添加结构设计文件夹&lt;/li&gt; &#xA; &lt;li&gt;已添加手册文件夹&lt;/li&gt; &#xA; &lt;li&gt;已添加 esp32c3 usb cdc/jtag驱动文件&lt;/li&gt; &#xA; &lt;li&gt;已添加源码工程文件夹，希望大佬们可以帮忙改进，代码里有什么错误以及疑问都可以提交issue交流，当然能帮我完善功能就更好了😊&lt;/li&gt; &#xA; &lt;li&gt;已提交新版上层板 (Gerber_topBoard-Fix.zip) ，修改掉不好生产的边框处后两层板实在没办法走通，改成四层板了，打样一样免费，就是颜色可能也得绿色了，可以先试试原版两层板，有概率通过，不通过再换成新版上层板。👀&lt;/li&gt; &#xA; &lt;li&gt;已添加上下层板的动态BOM表，说明文件，可以方便焊接选料，若打样嘉立创不通过可以考虑捷配，新用户也可以免费打板审核也比较松。&lt;/li&gt; &#xA; &lt;li&gt;已添加器件采购指南，只做样例，若链接失效自行找类似器件替换。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目介绍：&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 硬件选型：&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目的硬件购买都来自于淘宝，虽然有可能有假货，但是我没有翻车，大家可以酌情选择。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;项目控制核心采用乐鑫&lt;strong&gt;ESP32C3&lt;/strong&gt;芯片作为控制MCU，具备Wifi和Bluetooth，价格便宜功能强大，后期可供二次开发增加特定的功能(内置4M大FLASH)。&lt;/li&gt; &#xA; &lt;li&gt;C口功率级采用了智融&lt;strong&gt;SW3526&lt;/strong&gt;的功率芯片（4.5元一片😍），该芯片内置多种快充协议，芯片内部集成功率管可以减少PCB面积，最大功率为单通道65W，本项目中设计了两路通道。&lt;/li&gt; &#xA; &lt;li&gt;A口功率级采用了英集芯的&lt;strong&gt;IP6525T&lt;/strong&gt;，该芯片内置多种快充协议，价格低廉（1元一片😍），最大功率为单通道18W，本项目中设计了两路, 设计在机身后部, 主要是给桌面上的固定设备供电, 比如台灯, 小服务器等, 可通过MOS管远程控制开关&lt;/li&gt; &#xA; &lt;li&gt;交互界面显示屏采用了&lt;strong&gt;0.96&lt;/strong&gt;寸OLED屏（尺寸刚好,至于烧屏问题后面会通过屏保解决）。&lt;/li&gt; &#xA; &lt;li&gt;输入部分设计了保护电路，具备防反接（方便车充应用）功能，反接系统不会工作。具备过流保护电路（10A），过流会熔断保险丝。具备防打火缓启动电路，可以防止上电火花。&lt;/li&gt; &#xA; &lt;li&gt;板载四路RGB指示灯以及面板，可以实现当前系统状态的快速指示。&lt;/li&gt; &#xA; &lt;li&gt;加速度传感器为&lt;strong&gt;LIS3DH&lt;/strong&gt;，可以实现震动控制或者体感操作等功能。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liaozhelin/picgo/master/3.jpg&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.2 项目参数&lt;/h3&gt; &#xA;&lt;p&gt;输入电压：10V-32V直流 (推荐使用换下来的笔记本充电器,咸鱼便宜量大,当然更推荐24V5A台达电源,可以最大程度发挥功率)&lt;/p&gt; &#xA;&lt;p&gt;输入功率：＞80W&lt;/p&gt; &#xA;&lt;p&gt;快充参数如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C口输出协议：PPS/PD3.0/PD2.0/QC4+/QC4/QC3.0/QC2.0/AFC/FCP/SCP/PE2.0/PE1.1/SFCP/BC2.1/苹果/三星&lt;/li&gt; &#xA; &lt;li&gt;C口输出电压：0.3-22V&lt;/li&gt; &#xA; &lt;li&gt;C口输出电流：0-3.3A&lt;/li&gt; &#xA; &lt;li&gt;A口输出协议：DCP/QC2.0/QC3.0/FCP/AFC&lt;/li&gt; &#xA; &lt;li&gt;A口输出电压：0.3-12V&lt;/li&gt; &#xA; &lt;li&gt;A口输出电流：0-3A&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PCB参数：47*80(mm) 厚度1.6mm 四层板&lt;/p&gt; &#xA;&lt;p&gt;整体尺寸（含外壳）：50X&lt;em&gt;20X&lt;/em&gt;80(mm)&lt;/p&gt; &#xA;&lt;h2&gt;制作教程&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 制作注意事项&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本产品焊接完成，测试无短路虚焊后，可通过下载口USB连接电脑，烧写程序后即可使用（ESP32C3自带内部USB和JTAG,十分方便）,如果不识别可能需要自行下载C3驱动安装即可&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;装机时请注意功率级部分的散热，推荐在功率级部分背面垫导热片增强散热能力。&lt;/li&gt; &#xA; &lt;li&gt;焊接推荐采用钢网焊接，本项目中器件均为单面布置，可以快速实现低成本回流焊。&lt;/li&gt; &#xA; &lt;li&gt;初次上电时，推荐使用5V电源，测量RY8411输出正常3.3V后才可以升高电压进行后面的测试。&lt;/li&gt; &#xA; &lt;li&gt;C1口为板载，C2口通过排针在上层板中引出。&lt;/li&gt; &#xA; &lt;li&gt;ESP32的固件还在不断完善中，基本功能都已经实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.2 固件烧录教程&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;通过Fireware/tools文件夹中的 flash_download_tool_3.9.2 工具下载&lt;/p&gt; &#xA; &lt;p&gt;本项目暂时不提供源码下载以及PCB源文件，一个是资料还在整理，现在还不够规范&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;​ 本项目不需要烧录器/下载器，只需要你有一个USB线，但是需要自己焊接一个降压电路将USB口的5V转到3.3V（或者不从排针3.3V处供电，直接通过DC口供电）,&lt;strong&gt;一定不要把5V接到板子上的3.3V处，必烧ESP32&lt;/strong&gt;，我是使用了一个洞洞板+AMS1117焊接的简单下载器：&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/liaozhelin/picgo/master/image-20220528000844883.png&#34; alt=&#34;image-20220528000844883&#34; style=&#34;zoom: 15%;&#34;&gt; &#xA;&lt;p&gt;​ 固件位置在 Fireware/bin 中，软件打开后将设备连接到电脑&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/liaozhelin/picgo/master/image-20220528000432670.png&#34; alt=&#34;image-20220528000432670&#34; style=&#34;zoom: 30%;&#34;&gt; &#xA;&lt;p&gt;​ 按照下面的图片设置好软件，点击下载应该就可以下载固件了（如果出现连接错误可以将上板后面的拨动开关向左拨动不松，然后再上电，就会进Boot模式）&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/liaozhelin/picgo/master/image-20220528003317226.png&#34; alt=&#34;image-20220528003317226&#34; style=&#34;zoom: 10%;&#34;&gt; &#xA;&lt;p&gt;​ ESP32 采用了 APP+OTA1+OTA2 的乒乓更新分区（这样就算更新到一半断电断网也不会变砖），可以实现远程更新，首次烧录完后续盖上盖子后，之后就可以使用无线更新了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;功能开发（更新日期22-5-27）：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;✅ 已经开发完成 🚩正在开发中 ❌还未开发或放弃开发&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;设计功能&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;状态&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;远程网络升级（OTA）&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;带固件版本号校验&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;WIFI配网&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;通过ESPTouch软件配网&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;主界面显示&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;待机休眠屏保待完善&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;快充协议解析&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;已实现&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RGB指示灯&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;已实现，控制逻辑待完善&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;各口电压电流监测&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;已实现&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;过流反接保护&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;以实现，已校验&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;远程控制充电器四口开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚩&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;硬件已验证，还未写逻辑&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;加速度计(重力感应)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚩&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;程序已驱动，还未写功能&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C口功率限制&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚩&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;程序已实现，界面还未增加&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OTA自动检测版本升级&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚩&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;版本验证已完成，json解析还在修改&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;电脑CPU占用，内存占用显示&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;还未开发&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;天气显示&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;还未开发&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;粉丝数显示&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;还未开发&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;重力旋转屏幕&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;还未开发&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;蓝牙广播检测手环自动开关机&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;还未开发&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;......&lt;/p&gt; &#xA;&lt;p&gt;未完待续&lt;/p&gt; &#xA;&lt;p&gt;......&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目禁止商用，仅供同好们复刻使用，在制作项目时候，请确保硬件无故障再连接设备使用（我已经使用了两个月，目前没有出过问题，手头设备不是很多，所以测试可能不是很完善，不能保证系统不存在隐藏的问题。希望大家能发现问题一起改进），对于造成高价值设备损坏以及其他连带损失的的，本人不承担任何责任哈。&lt;/p&gt; &#xA; &lt;p&gt;海拔高度：＜ 2000米&lt;/p&gt; &#xA; &lt;p&gt;环境湿度：≤ 75% RH&lt;/p&gt; &#xA; &lt;p&gt;工作环境：0℃ - 50摄氏度&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;纪念一下开发过程中的炮灰小弟们，第一代和第三代（总共迭代了5版本，其中有2代搬板拆了，剩下这两个完好的）：&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/liaozhelin/picgo/master/image-20220528181253005.png&#34; alt=&#34;image-20220528181253005&#34; style=&#34;zoom:50%;&#34;&gt;</summary>
  </entry>
  <entry>
    <title>taosdata/TDengine</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/taosdata/TDengine</id>
    <link href="https://github.com/taosdata/TDengine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source time-series database with high-performance, scalability and SQL support. It can be widely used in IoT, Connected Vehicles, DevOps, Energy, Finance and other fields.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cloud.drone.io/taosdata/TDengine&#34;&gt;&lt;img src=&#34;https://cloud.drone.io/api/badges/taosdata/TDengine/status.svg?ref=refs/heads/master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/sangshuduo/tdengine-2n8ge/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/kf3pwh2or5afsgl9/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/taosdata/TDengine?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/taosdata/TDengine/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4201&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4201/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/tdengine&#34;&gt;&lt;img src=&#34;https://snapcraft.io//tdengine/badge.svg?sanitize=true&#34; alt=&#34;tdengine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.taosdata.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/taosdata/TDengine/develop/TDenginelogo.png&#34; alt=&#34;TDengine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/develop/README-CN.md&#34;&gt;简体中文&lt;/a&gt; We are hiring, check &lt;a href=&#34;https://www.taosdata.com/en/careers/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is TDengine？&lt;/h1&gt; &#xA;&lt;p&gt;TDengine is a high-performance, scalable time-series database with SQL support. Its code including cluster feature is open source under &lt;a href=&#34;http://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;GNU AGPL v3.0&lt;/a&gt;. Besides the database, it provides caching, stream processing, data subscription and other functionalities to reduce the complexity and cost of development and operation. TDengine differentiates itself from other TSDBs with the following advantages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: TDengine outperforms other time series databases in data ingestion and querying while significantly reducing storage cost and compute costs, with an innovatively designed and purpose-built storage engine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: TDengine provides out-of-box scalability and high-availability through its native distributed design. Nodes can be added through simple configuration to achieve greater data processing power. In addition, this feature is open source.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQL Support&lt;/strong&gt;: TDengine uses SQL as the query language, thereby reducing learning and migration costs, while adding SQL extensions to handle time-series data better, and supporting convenient and flexible schemaless data ingestion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;All in One&lt;/strong&gt;: TDengine has built-in caching, stream processing and data subscription functions, it is no longer necessary to integrate Kafka/Redis/HBase/Spark or other software in some scenarios. It makes the system architecture much simpler and easy to maintain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Integration&lt;/strong&gt;: Without a single line of code, TDengine provide seamless integration with third-party tools such as Telegraf, Grafana, EMQX, Prometheus, StatsD, collectd, etc. More will be integrated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero Management&lt;/strong&gt;: Installation and cluster setup can be done in seconds. Data partitioning and sharding are executed automatically. TDengine’s running status can be monitored via Grafana or other DevOps tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero Learning Cost&lt;/strong&gt;: With SQL as the query language, support for ubiquitous tools like Python, Java, C/C++, Go, Rust, Node.js connectors, there is zero learning cost.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interactive Console&lt;/strong&gt;: TDengine provides convenient console access to the database to run ad hoc queries, maintain the database, or manage the cluster without any programming.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TDengine can be widely applied to Internet of Things (IoT), Connected Vehicles, Industrial IoT, DevOps, energy, finance and many other scenarios.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For user manual, system design and architecture, engineering blogs, refer to &lt;a href=&#34;https://www.taosdata.com/en/documentation/&#34;&gt;TDengine Documentation&lt;/a&gt;(中文版请点击&lt;a href=&#34;https://www.taosdata.com/cn/documentation20/&#34;&gt;这里&lt;/a&gt;) for details. The documentation from our website can also be downloaded locally from &lt;em&gt;documentation/tdenginedocs-en&lt;/em&gt; or &lt;em&gt;documentation/tdenginedocs-cn&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;At the moment, TDengine server only supports running on Linux systems. You can choose to &lt;a href=&#34;https://www.taosdata.com/en/getting-started/#Install-from-Package&#34;&gt;install from packages&lt;/a&gt; or build it from the source code. This quick guide is for installation from the source only.&lt;/p&gt; &#xA;&lt;p&gt;To build TDengine, use &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.0.2 or higher versions in the project directory.&lt;/p&gt; &#xA;&lt;h2&gt;Install build dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 16.04 and above or Debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y gcc cmake build-essential git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu 14.04&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y gcc cmake3 build-essential git binutils-2.26&#xA;export PATH=/usr/lib/binutils-2.26/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile and package the JDBC driver source code, you should have a Java jdk-8 or higher and Apache Maven 2.7 or higher installed.&lt;/p&gt; &#xA;&lt;p&gt;To install openjdk-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y openjdk-8-jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools&lt;/h4&gt; &#xA;&lt;p&gt;We provide a few useful tools such as taosBenchmark (was named taosdemo) and taosdump. They were part of TDengine. From TDengine 2.4.0.0, taosBenchmark and taosdump were not released together with TDengine. By default, TDengine compiling does not include taosTools. You can use &#39;cmake .. -DBUILD_TOOLS=true&#39; to make them be compiled with TDengine.&lt;/p&gt; &#xA;&lt;p&gt;To build the &lt;a href=&#34;https://github.com/taosdata/taos-tools&#34;&gt;taosTools&lt;/a&gt; on Ubuntu/Debian, the following packages need to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential libjansson-dev libsnappy-dev liblzma-dev libz-dev pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 7&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install epel-release&#xA;sudo yum update&#xA;sudo yum install -y gcc gcc-c++ make cmake3 git&#xA;sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install openjdk-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install -y java-1.8.0-openjdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install -y maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 8 &amp;amp; Fedora&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y gcc gcc-c++ make cmake epel-release git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install openjdk-8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y java-1.8.0-openjdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Apache Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools on CentOS&lt;/h4&gt; &#xA;&lt;p&gt;To build the &lt;a href=&#34;https://github.com/taosdata/taos-tools&#34;&gt;taosTools&lt;/a&gt; on CentOS, the following packages need to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install zlib-devel xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libstdc++-static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Since snappy lacks pkg-config support (refer to &lt;a href=&#34;https://github.com/google/snappy/pull/86&#34;&gt;link&lt;/a&gt;), it lead a cmake prompt libsnappy not found. But snappy will works well.&lt;/p&gt; &#xA;&lt;h3&gt;Setup golang environment&lt;/h3&gt; &#xA;&lt;p&gt;TDengine includes few components developed by Go language. Please refer to golang.org official documentation for golang environment setup.&lt;/p&gt; &#xA;&lt;p&gt;Please use version 1.14+. For the user in China, we recommend using a proxy to accelerate package downloading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on&#xA;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the source codes&lt;/h2&gt; &#xA;&lt;p&gt;First of all, you may clone the source codes from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/taosdata/TDengine.git&#xA;cd TDengine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The connectors for go &amp;amp; Grafana and some tools have been moved to separated repositories, so you should run this command in the TDengine directory to install them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify the file ~/.gitconfig to use ssh protocol instead of https for better download speed. You need to upload ssh public key to GitHub first. Please refer to GitHub official documentation for detail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[url &#34;git@github.com:&#34;]&#xA;    insteadOf = https://github.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build TDengine&lt;/h2&gt; &#xA;&lt;h3&gt;On Linux platform&lt;/h3&gt; &#xA;&lt;p&gt;You can run the bash script &lt;code&gt;build.sh&lt;/code&gt; to build both TDengine and taosTools including taosBenchmark and taosdump as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It equals to execute following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;mkdir debug&#xA;cd debug&#xA;cmake .. -DBUILD_TOOLS=true&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note TDengine 2.3.x.0 and later use a component named &#39;taosAdapter&#39; to play http daemon role by default instead of the http daemon embedded in the early version of TDengine. The taosAdapter is programmed by go language. If you pull TDengine source code to the latest from an existing codebase, please execute &#39;git submodule update --init --recursive&#39; to pull taosAdapter source code. Please install go language version 1.14 or above for compiling taosAdapter. If you meet difficulties regarding &#39;go mod&#39;, especially you are from China, you can use a proxy to solve the problem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on&#xA;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The embedded http daemon still be built from TDengine source code by default. Or you can use the following command to choose to build taosAdapter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DBUILD_HTTP=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Jemalloc as memory allocator instead of glibc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install autoconf&#xA;cmake .. -DJEMALLOC_ENABLED=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TDengine build script can detect the host machine&#39;s architecture on X86-64, X86, arm64, arm32 and mips64 platform. You can also specify CPUTYPE option like aarch64 or aarch32 too if the detection result is not correct:&lt;/p&gt; &#xA;&lt;p&gt;aarch64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=aarch64 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;aarch32:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=aarch32 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mips64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=mips64 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows platform&lt;/h3&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2013, please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;amd64&#34; for 64 bits Windows or specify &#34;x86&#34; is for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat&#34; &amp;lt; amd64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2019 or 2017:&lt;/p&gt; &#xA;&lt;p&gt;please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;x64&#34; for 64 bits Windows or specify &#34;x86&#34; is for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;c:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat&#34; &amp;lt; x64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can simply open a command window by clicking Windows Start -&amp;gt; &#34;Visual Studio &amp;lt; 2019 | 2017 &amp;gt;&#34; folder -&amp;gt; &#34;x64 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; or &#34;x86 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; depends what architecture your Windows is, then execute commands as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On macOS platform&lt;/h3&gt; &#xA;&lt;p&gt;Please install XCode command line tools and cmake. Verified with XCode 11.4+ on Catalina and Big Sur.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;cmake .. &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;h2&gt;On Linux platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can find more information about directories installed on the system in the &lt;a href=&#34;https://www.taosdata.com/en/documentation/administrator/#Directory-and-Files&#34;&gt;directory and files&lt;/a&gt; section. Since version 2.0, installing from source code will also configure service management for TDengine. Users can also choose to &lt;a href=&#34;https://www.taosdata.com/en/getting-started/#Install-from-Package&#34;&gt;install from packages&lt;/a&gt; for it.&lt;/p&gt; &#xA;&lt;p&gt;To start the service after installation, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl start taosd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then users can use the &lt;a href=&#34;https://www.taosdata.com/en/getting-started/#TDengine-Shell&#34;&gt;TDengine shell&lt;/a&gt; to connect the TDengine server. In a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TDengine shell connects the server successfully, welcome messages and version info are printed. Otherwise, an error message is shown.&lt;/p&gt; &#xA;&lt;h3&gt;Install TDengine by apt-get&lt;/h3&gt; &#xA;&lt;p&gt;If you use Debian or Ubuntu system, you can use &#39;apt-get&#39; command to install TDengine from official repository. Please use following commands to setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -qO - http://repos.taosdata.com/tdengine.key | sudo apt-key add -&#xA;echo &#34;deb [arch=amd64] http://repos.taosdata.com/tdengine-stable stable main&#34; | sudo tee /etc/apt/sources.list.d/tdengine-stable.list&#xA;[Optional] echo &#34;deb [arch=amd64] http://repos.taosdata.com/tdengine-beta beta main&#34; | sudo tee /etc/apt/sources.list.d/tdengine-beta.list&#xA;sudo apt-get update&#xA;apt-cache policy tdengine&#xA;sudo apt-get install tdengine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Windows platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;nmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On macOS platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the service after installation, config &lt;code&gt;.plist&lt;/code&gt; file first, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp ../packaging/macOS/com.taosdata.tdengine.plist /Library/LaunchDaemons&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the service, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl load /Library/LaunchDaemons/com.taosdata.tdengine.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To stop the service, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl unload /Library/LaunchDaemons/com.taosdata.tdengine.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Run&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to run TDengine as a service, you can run it in current shell. For example, to quickly start a TDengine server after building, run the command below in terminal: (We take Linux as an example, command on Windows will be &lt;code&gt;taosd.exe&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taosd -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, use the TDengine shell to connect the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taos -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;option &#34;-c test/cfg&#34; specifies the system configuration file directory.&lt;/p&gt; &#xA;&lt;h1&gt;Try TDengine&lt;/h1&gt; &#xA;&lt;p&gt;It is easy to run SQL commands from TDengine shell which is the same as other SQL databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE demo;&#xA;USE demo;&#xA;CREATE TABLE t (ts TIMESTAMP, speed INT);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 00:00:00&#39;, 10);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 01:00:00&#39;, 20);&#xA;SELECT * FROM t;&#xA;          ts          |   speed   |&#xA;===================================&#xA; 19-07-15 00:00:00.000|         10|&#xA; 19-07-15 01:00:00.000|         20|&#xA;Query OK, 2 row(s) in set (0.001700s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Developing with TDengine&lt;/h1&gt; &#xA;&lt;h2&gt;Official Connectors&lt;/h2&gt; &#xA;&lt;p&gt;TDengine provides abundant developing tools for users to develop on TDengine. Follow the links below to find your desired connectors and relevant documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector/java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#c-cpp&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#restful&#34;&gt;RESTful API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector#nodejs&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taosdata.com/en/documentation/connector/rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third Party Connectors&lt;/h2&gt; &#xA;&lt;p&gt;The TDengine community has also kindly built some of their own connectors! Follow the links below to find the source code for them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/songtianyi/tdengine-rust-bindings/tree/master/examples&#34;&gt;Rust Bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maikebing/Maikebing.EntityFrameworkCore.Taos&#34;&gt;.Net Core Connector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taosdata/TDengine/tree/develop/tests/examples/lua&#34;&gt;Lua Connector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to run the test cases and how to add a new test case&lt;/h1&gt; &#xA;&lt;p&gt;TDengine&#39;s test framework and all test cases are fully open source. Please refer to &lt;a href=&#34;https://github.com/taosdata/TDengine/raw/develop/tests/How-To-Run-Test-And-How-To-Add-New-Test-Case.md&#34;&gt;this document&lt;/a&gt; for how to run test and develop new test case.&lt;/p&gt; &#xA;&lt;h1&gt;TDengine Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support event-driven stream computing&lt;/li&gt; &#xA; &lt;li&gt;Support user defined functions&lt;/li&gt; &#xA; &lt;li&gt;Support MQTT connection&lt;/li&gt; &#xA; &lt;li&gt;Support OPC connection&lt;/li&gt; &#xA; &lt;li&gt;Support Hadoop, Spark connections&lt;/li&gt; &#xA; &lt;li&gt;Support Tableau and other BI tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute to TDengine&lt;/h1&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/develop/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; to contribute to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Join TDengine WeChat Group&lt;/h1&gt; &#xA;&lt;p&gt;Add WeChat “tdengine” to join the group，you can communicate with other users.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/taosdata/TDengine/issues/2432&#34;&gt;User List&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;If you are using TDengine and feel it helps or you&#39;d like to do some contributions, please add your company to &lt;a href=&#34;https://github.com/taosdata/TDengine/issues/2432&#34;&gt;user list&lt;/a&gt; and let us know your needs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EveronLife/EveronLife</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/EveronLife/EveronLife</id>
    <link href="https://github.com/EveronLife/EveronLife" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Everon Life is a community-driven open-source Arma Reforger RPG framework&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; width=&#34;400&#34; srcset=&#34;https://user-images.githubusercontent.com/8494013/170880753-e3cfb7cb-c430-4ef7-a4b0-6123fee560d9.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; width=&#34;400&#34; srcset=&#34;https://user-images.githubusercontent.com/8494013/170880762-59b39e3d-9e6b-43ad-9043-5c1ebd8f8219.png&#34;&gt; &#xA;  &lt;img alt=&#34;Everon Life&#34; width=&#34;400&#34; src=&#34;https://user-images.githubusercontent.com/8494013/170880762-59b39e3d-9e6b-43ad-9043-5c1ebd8f8219.png&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EveronLife/EveronLife/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/EveronLife/EveronLife&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EveronLife/EveronLife/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/EveronLife/EveronLife&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/everonlife&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/976203864632086619?label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Everon Life RPG Framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Everon Life is a community-driven open-source Arma Reforger RPG framework.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our vision is to develop a framework with and for the community. There are almost no restrictions regarding participation. Through our high quality standards, our love for the community and our mature collaboration guidelines, we guarantee full control and transparency.&lt;/p&gt; &#xA;&lt;h4&gt;▶ &lt;a href=&#34;https://github.com/EveronLife/EveronLife/discussions/42&#34;&gt;READ MORE ABOUT EVERON LIFE&lt;/a&gt; ◀&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🚀 Features&lt;/h2&gt; &#xA;&lt;!--&#xA;🚧 meaning is being actively worked on&#xA;✅ is somewhat implemeted (even an early WIP state is okay)&#xA;- 🚧 Fully persitent world&#xA;### To be discussed (follow the discussion links)&#xA;- Player driven Economy &#xA;### Non Features&#xA;- No weapons (link to alternative everon life guns&#xA;- No models beyond basic stuff&#xA;--&gt; &#xA;&lt;p&gt;To be further defined, please checkout our &lt;a href=&#34;https://github.com/EveronLife/EveronLife/milestones?direction=asc&amp;amp;sort=due_date&amp;amp;state=open&#34;&gt;initial milestones here&lt;/a&gt;. Additional milestones will follow soon but please feel free to start dicussions with your &lt;a href=&#34;https://github.com/EveronLife/EveronLife/discussions/categories/ideas&#34;&gt;ideas here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⚡ Quick start&lt;/h2&gt; &#xA;&lt;p&gt;How to &lt;a href=&#34;https://raw.githubusercontent.com/EveronLife/EveronLife/main/docs/custom_server.md&#34;&gt;customize your server&lt;/a&gt; (including how to set one up)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Quick start guide for server owners using Docker coming soon.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed information for server owners and our technical documentation can be found here &lt;a href=&#34;https://raw.githubusercontent.com/EveronLife/EveronLife/main/docs/index.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🛠️ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this community effort, please check out our &lt;a href=&#34;https://raw.githubusercontent.com/EveronLife/EveronLife/main/.github/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/EveronLife/EveronLife/main/docs/development_setup.md&#34;&gt;development setup instructions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>axboe/liburing</title>
    <updated>2022-06-01T01:36:01Z</updated>
    <id>tag:github.com,2022-06-01:/axboe/liburing</id>
    <link href="https://github.com/axboe/liburing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;liburing&lt;/h2&gt; &#xA;&lt;p&gt;This is the io_uring library, liburing. liburing provides helpers to setup and teardown io_uring instances, and also a simplified interface for applications that don&#39;t need (or want) to deal with the full kernel side implementation.&lt;/p&gt; &#xA;&lt;p&gt;For more info on io_uring, please see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kernel.dk/io_uring.pdf&#34;&gt;https://kernel.dk/io_uring.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subscribe to &lt;a href=&#34;mailto:io-uring@vger.kernel.org&#34;&gt;io-uring@vger.kernel.org&lt;/a&gt; for io_uring related discussions and development for both kernel and userspace. The list is archived here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/io-uring/&#34;&gt;https://lore.kernel.org/io-uring/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;kernel version dependency&lt;/h2&gt; &#xA;&lt;p&gt;liburing itself is not tied to any specific kernel release, and hence it&#39;s possible to use the newest liburing release even on older kernels (and vice versa). Newer features may only be available on more recent kernels, obviously.&lt;/p&gt; &#xA;&lt;h2&gt;ulimit settings&lt;/h2&gt; &#xA;&lt;p&gt;io_uring accounts memory it needs under the rlimit memlocked option, which can be quite low on some setups (64K). The default is usually enough for most use cases, but bigger rings or things like registered buffers deplete it quickly. root isn&#39;t under this restriction, but regular users are. Going into detail on how to bump the limit on various systems is beyond the scope of this little blurb, but check /etc/security/limits.conf for user specific settings, or /etc/systemd/user.conf and /etc/systemd/system.conf for systemd setups. This affects 5.11 and earlier, new kernels are less dependent on RLIMIT_MEMLOCK.&lt;/p&gt; &#xA;&lt;h2&gt;Regressions tests&lt;/h2&gt; &#xA;&lt;p&gt;The bulk of liburing is actually regression/unit tests for both liburing and the kernel io_uring support. Please note that this suite isn&#39;t expected to pass on older kernels, and may even crash or hang older kernels!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All software contained within this repo is dual licensed LGPL and MIT, see COPYING and LICENSE, except for a header coming from the kernel which is dual licensed GPL with a Linux-syscall-note exception and MIT, see COPYING.GPL and &lt;a href=&#34;https://spdx.org/licenses/Linux-syscall-note.html&#34;&gt;https://spdx.org/licenses/Linux-syscall-note.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Jens Axboe 2022-05-19&lt;/p&gt;</summary>
  </entry>
</feed>