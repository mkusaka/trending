<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-12T01:37:36Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yshui/picom</title>
    <updated>2022-07-12T01:37:36Z</updated>
    <id>tag:github.com,2022-07-12:/yshui/picom</id>
    <link href="https://github.com/yshui/picom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight compositor for X11&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;picom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;picom&lt;/strong&gt; is a compositor for X, and a &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/History.md&#34;&gt;fork of Compton&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a development branch, bugs to be expected&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can leave your feedback or thoughts in the &lt;a href=&#34;https://github.com/yshui/picom/discussions&#34;&gt;discussion tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Call for testers&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;--experimental-backends&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This flag enables the refactored/partially rewritten backends.&lt;/p&gt; &#xA;&lt;p&gt;Currently, new backends feature better vsync with the xrender backend and improved input lag with the glx backend (for non-NVIDIA users). The performance should be on par with the old backends.&lt;/p&gt; &#xA;&lt;p&gt;New backend features will only be implemented on the new backends from now on, and the old backends will eventually be phased out after the new backends stabilize.&lt;/p&gt; &#xA;&lt;p&gt;To test the new backends, add the &lt;code&gt;--experimental-backends&lt;/code&gt; flag to the command you use to run picom. This flag is not available from the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;To report issues with the new backends, please state explicitly you are using the new backends in your report.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/yshui/picom/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you already have all the usual building tools installed (e.g. gcc, python, meson, ninja, etc.), you still need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libx11&lt;/li&gt; &#xA; &lt;li&gt;libx11-xcb&lt;/li&gt; &#xA; &lt;li&gt;libXext&lt;/li&gt; &#xA; &lt;li&gt;xproto&lt;/li&gt; &#xA; &lt;li&gt;xcb&lt;/li&gt; &#xA; &lt;li&gt;xcb-damage&lt;/li&gt; &#xA; &lt;li&gt;xcb-xfixes&lt;/li&gt; &#xA; &lt;li&gt;xcb-shape&lt;/li&gt; &#xA; &lt;li&gt;xcb-renderutil&lt;/li&gt; &#xA; &lt;li&gt;xcb-render&lt;/li&gt; &#xA; &lt;li&gt;xcb-randr&lt;/li&gt; &#xA; &lt;li&gt;xcb-composite&lt;/li&gt; &#xA; &lt;li&gt;xcb-image&lt;/li&gt; &#xA; &lt;li&gt;xcb-present&lt;/li&gt; &#xA; &lt;li&gt;xcb-xinerama&lt;/li&gt; &#xA; &lt;li&gt;xcb-glx&lt;/li&gt; &#xA; &lt;li&gt;pixman&lt;/li&gt; &#xA; &lt;li&gt;libdbus (optional, disable with the &lt;code&gt;-Ddbus=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libconfig (optional, disable with the &lt;code&gt;-Dconfig_file=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libGL (optional, disable with the &lt;code&gt;-Dopengl=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libpcre (optional, disable with the &lt;code&gt;-Dregex=false&lt;/code&gt; meson configure flag)&lt;/li&gt; &#xA; &lt;li&gt;libev&lt;/li&gt; &#xA; &lt;li&gt;uthash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Debian based distributions (e.g. Ubuntu), the needed packages are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libxext-dev libxcb1-dev libxcb-damage0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-xinerama0-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl1-mesa-dev libpcre2-dev libpcre3-dev libevdev-dev uthash-dev libev-dev libx11-xcb-dev meson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, the needed packages are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dbus-devel gcc git libconfig-devel libdrm-devel libev-devel libX11-devel libX11-xcb libXext-devel libxcb-devel mesa-libGL-devel meson pcre-devel pixman-devel uthash-devel xcb-util-image-devel xcb-util-renderutil-devel xorg-x11-proto-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the documents, you need &lt;code&gt;asciidoc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive&#xA;$ meson --buildtype=release . build&#xA;$ ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Built binary can be found in &lt;code&gt;build/src&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have libraries and/or headers installed at non-default location (e.g. under &lt;code&gt;/usr/local/&lt;/code&gt;), you might need to tell meson about them, since meson doesn&#39;t look for dependencies there by default.&lt;/p&gt; &#xA;&lt;p&gt;You can do that by setting the &lt;code&gt;CPPFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; environment variables when running &lt;code&gt;meson&lt;/code&gt;. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LDFLAGS=&#34;-L/path/to/libraries&#34; CPPFLAGS=&#34;-I/path/to/headers&#34; meson --buildtype=release . build&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example, on FreeBSD, you might have to run meson with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LDFLAGS=&#34;-L/usr/local/lib&#34; CPPFLAGS=&#34;-I/usr/local/include&#34; meson --buildtype=release . build&#xA;$ ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ninja -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default install prefix is &lt;code&gt;/usr/local&lt;/code&gt;, you can change it with &lt;code&gt;meson configure -Dprefix=&amp;lt;path&amp;gt; build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;You can look at the &lt;a href=&#34;https://github.com/yshui/picom/projects&#34;&gt;Projects&lt;/a&gt; page, and see if there is anything that interests you. Or you can take a look at the &lt;a href=&#34;https://github.com/yshui/picom/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Non-code&lt;/h3&gt; &#xA;&lt;p&gt;Even if you don&#39;t want to contribute code, you can still contribute by compiling and running this branch, and report any issue you can find.&lt;/p&gt; &#xA;&lt;p&gt;Contributions to the documents and wiki will also be appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/CONTRIBUTORS&#34;&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The README for the &lt;a href=&#34;https://github.com/chjj/compton/&#34;&gt;original Compton project&lt;/a&gt; can be found &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/History.md#Compton&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;picom is free software, made available under the &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/LICENSES/MIT&#34;&gt;MIT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/yshui/picom/next/LICENSES/MPL-2.0&#34;&gt;MPL-2.0&lt;/a&gt; software licenses. See the individual source files for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>olikraus/u8g2</title>
    <updated>2022-07-12T01:37:36Z</updated>
    <id>tag:github.com,2022-07-12:/olikraus/u8g2</id>
    <link href="https://github.com/olikraus/u8g2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;U8glib library for monochrome displays, version 2&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/olikraus/u8g2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/olikraus/u8g2/ref/u8g2_logo_transparent_orange.png&#34; alt=&#34;https://raw.githubusercontent.com/wiki/olikraus/u8g2/ref/u8g2_logo_transparent_orange.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;U8g2: Library for monochrome displays, version 2&lt;/p&gt; &#xA;&lt;p&gt;U8g2 is a monochrome graphics library for embedded devices. U8g2 supports monochrome OLEDs and LCDs, which include the following controllers: SSD1305, SSD1306, SSD1309, SSD1312, SSD1316, SSD1320, SSD1322, SSD1325, SSD1327, SSD1329, SSD1606, SSD1607, SH1106, SH1107, SH1108, SH1122, T6963, RA8835, LC7981, PCD8544, PCF8812, HX1230, UC1601, UC1604, UC1608, UC1610, UC1611, UC1617, UC1638, UC1701, ST7511, ST7528, ST7565, ST7567, ST7571, ST7586, ST7588, ST75256, ST75320, NT7534, ST7920, IST3020, IST7920, LD7032, KS0108, KS0713, HD44102, T7932, SED1520, SBN1661, IL3820, MAX7219 (see &lt;a href=&#34;https://github.com/olikraus/u8g2/wiki/u8g2setupcpp&#34;&gt;here&lt;/a&gt; for a full list).&lt;/p&gt; &#xA;&lt;p&gt;The Arduino library U8g2 can be installed from the library manager of the Arduino IDE. U8g2 also includes U8x8 library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;U8g2 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Includes all graphics procedures (line/box/circle draw).&lt;/li&gt; &#xA;   &lt;li&gt;Supports many fonts. (Almost) no restriction on the font height.&lt;/li&gt; &#xA;   &lt;li&gt;Requires some memory in the microcontroller to render the display.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;U8x8 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text output only (character) device.&lt;/li&gt; &#xA;   &lt;li&gt;Only fonts allowed with fit into a 8x8 pixel grid.&lt;/li&gt; &#xA;   &lt;li&gt;Writes directly to the display. No buffer in the microcontroller required.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/olikraus/u8g2/wiki&#34;&gt;Setup Guide and Reference Manual&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>netero1010/RDPHijack-BOF</title>
    <updated>2022-07-12T01:37:36Z</updated>
    <id>tag:github.com,2022-07-12:/netero1010/RDPHijack-BOF</id>
    <link href="https://github.com/netero1010/RDPHijack-BOF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cobalt Strike Beacon Object File (BOF) that uses WinStationConnect API to perform local/remote RDP session hijacking.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BOF - RDPHijack&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Cobalt Strike Beacon Object File (BOF) that uses WinStationConnect API to perform local/remote RDP session hijacking. With a valid access token / kerberos ticket (e.g., golden ticket) of the session owner, you will be able to hijack the session remotely without dropping any beacon/tool on the target server.&lt;/p&gt; &#xA;&lt;p&gt;To enumerate sessions locally/remotely, you could use &lt;a href=&#34;https://github.com/netero1010/Quser-BOF&#34;&gt;Quser-BOF&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Screenshot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/netero1010/RDPHijack-BOF/raw/main/demo.png&#34; alt=&#34;HowTo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: bof-rdphijack [your console session id] [target session id to hijack] [password|server] [argument]&#xA;&#xA;Command         Description&#xA;--------        -----------&#xA;password        Specifies the password of the user who owns the session to which you want to connect.&#xA;server          Specifies the remote server that you want to perform RDP hijacking.&#xA;&#xA;Sample usage&#xA;--------&#xA;Redirect session 2 to session 1 (require SYSTEM privilege):&#xA;bof-rdphijack 1 2&#xA;&#xA;Redirect session 2 to session 1 with password of the user who owns the session 2 (require high integrity beacon):&#xA;bof-rdphijack 1 2 password P@ssw0rd123&#xA;&#xA;Redirect session 2 to session 1 for a remote server (require token/ticket of the user who owns the session 2):&#xA;bof-rdphijack 1 2 server SQL01.lab.internal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;p&gt;tscon.exe&lt;/p&gt;</summary>
  </entry>
</feed>