<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-26T01:32:56Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CodeXTF2/ScreenshotBOF</title>
    <updated>2022-10-26T01:32:56Z</updated>
    <id>tag:github.com,2022-10-26:/CodeXTF2/ScreenshotBOF</id>
    <link href="https://github.com/CodeXTF2/ScreenshotBOF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An alternative screenshot capability for Cobalt Strike that uses WinAPI and does not perform a fork &amp; run. Screenshot downloaded in memory.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ScreenshotBOF&lt;/h1&gt; &#xA;&lt;p&gt;An alternative screenshot capability for Cobalt Strike that uses WinAPI and does not perform a fork &amp;amp; run. Screenshot downloaded in memory.&lt;/p&gt; &#xA;&lt;h2&gt;Self Compilation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;git clone the repo&lt;/li&gt; &#xA; &lt;li&gt;open the solution in Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;Build project BOF&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;import the screenshotBOF.cna script into Cobalt Strike&lt;/li&gt; &#xA; &lt;li&gt;use the command screenshot_bof {local filename}&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; screenshot_bof sad.bmp&#xA;[*] Running screenshot BOF by (@codex_tf2)&#xA;[+] host called home, sent: 4860 bytes&#xA;[+] received output:&#xA;[*] Tasked beacon to printscreen and save to sad.bmp&#xA;[+] received output:&#xA;[+] PrintScreen saved to bitmap...&#xA;[*] started download of sad.bmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no evasion is performed, which should be fine since the WinAPIs used are not malicious&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why did I make this?&lt;/h2&gt; &#xA;&lt;p&gt;Cobalt Strike uses a technique known as fork &amp;amp; run for many of its post-ex capabilities, including the screenshot command. While this behaviour provides stability, it is now well known and heavily monitored for. This BOF is meant to provide a more OPSEC safe version of the screenshot capability.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Made using &lt;a href=&#34;https://github.com/securifybv/Visual-Studio-BOF-template&#34;&gt;https://github.com/securifybv/Visual-Studio-BOF-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save BMP to file from &lt;a href=&#34;https://stackoverflow.com/a/60667564&#34;&gt;https://stackoverflow.com/a/60667564&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;in memory download from &lt;a href=&#34;https://github.com/anthemtotheego/CredBandit&#34;&gt;https://github.com/anthemtotheego/CredBandit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tsl0922/ttyd</title>
    <updated>2022-10-26T01:32:56Z</updated>
    <id>tag:github.com,2022-10-26:/tsl0922/ttyd</id>
    <link href="https://github.com/tsl0922/ttyd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Share your terminal over the web&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/tsl0922/ttyd/workflows/backend/badge.svg?sanitize=true&#34; alt=&#34;backend&#34;&gt; &lt;img src=&#34;https://github.com/tsl0922/ttyd/workflows/frontend/badge.svg?sanitize=true&#34; alt=&#34;frontend&#34;&gt; &lt;a href=&#34;https://repology.org/project/ttyd/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/ttyd.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ttyd - Share your terminal over the web&lt;/h1&gt; &#xA;&lt;p&gt;ttyd is a simple command-line tool for sharing terminal over the web.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tsl0922/ttyd/raw/main/screenshot.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built on top of &lt;a href=&#34;https://libwebsockets.org&#34;&gt;Libwebsockets&lt;/a&gt; with &lt;a href=&#34;https://libuv.org&#34;&gt;libuv&lt;/a&gt; for speed&lt;/li&gt; &#xA; &lt;li&gt;Fully-featured terminal based on &lt;a href=&#34;https://xtermjs.org&#34;&gt;Xterm.js&lt;/a&gt; with &lt;a href=&#34;https://en.wikipedia.org/wiki/CJK_characters&#34;&gt;CJK&lt;/a&gt; and IME support&lt;/li&gt; &#xA; &lt;li&gt;Graphical &lt;a href=&#34;https://en.wikipedia.org/wiki/ZMODEM&#34;&gt;ZMODEM&lt;/a&gt; integration with &lt;a href=&#34;https://ohse.de/uwe/software/lrzsz.html&#34;&gt;lrzsz&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sixel&#34;&gt;Sixel&lt;/a&gt; image output support (&lt;a href=&#34;https://saitoha.github.io/libsixel/&#34;&gt;Usage&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SSL support based on &lt;a href=&#34;https://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt; / &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls&#34;&gt;Mbed TLS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run any custom command with options&lt;/li&gt; &#xA; &lt;li&gt;Basic authentication support and many other custom options&lt;/li&gt; &#xA; &lt;li&gt;Cross platform: macOS, Linux, FreeBSD/OpenBSD, &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWrt&lt;/a&gt;, Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ù§ Special thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=ttyd&#34;&gt;JetBrains&lt;/a&gt; for sponsoring the opensource license to this project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Install on macOS&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;http://brew.sh&#34;&gt;homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ttyd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install on Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Binary version (recommended): download from the &lt;a href=&#34;https://github.com/tsl0922/ttyd/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the snap:&lt;/p&gt; &lt;p&gt;&lt;code&gt;sudo snap install ttyd --classic&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build from source (debian/ubuntu):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential cmake git libjson-c-dev libwebsockets-dev&#xA;git clone https://github.com/tsl0922/ttyd.git&#xA;cd ttyd &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake ..&#xA;make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You may also need to compile/install &lt;a href=&#34;https://libwebsockets.org&#34;&gt;libwebsockets&lt;/a&gt; from source if the &lt;code&gt;libwebsockets-dev&lt;/code&gt; package is outdated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install on Gentoo: clone the &lt;a href=&#34;https://bitbucket.org/mgpagano/ttyd/src/master&#34;&gt;repo&lt;/a&gt; and follow the directions &lt;a href=&#34;https://wiki.gentoo.org/wiki/Custom_repository#Creating_a_local_repository&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install on Windows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tsl0922/ttyd/wiki/Compile-on-Windows&#34;&gt;Compile on Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install on OpenWrt&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opkg install ttyd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Command-line Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;ttyd is a tool for sharing terminal over the web&#xA;&#xA;USAGE:&#xA;    ttyd [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;]&#xA;&#xA;VERSION:&#xA;    1.7.2&#xA;&#xA;OPTIONS:&#xA;    -p, --port              Port to listen (default: 7681, use `0` for random port)&#xA;    -i, --interface         Network interface to bind (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock)&#xA;    -c, --credential        Credential for Basic Authentication (format: username:password)&#xA;    -u, --uid               User id to run with&#xA;    -g, --gid               Group id to run with&#xA;    -s, --signal            Signal to send to the command when exit it (default: 1, SIGHUP)&#xA;    -a, --url-arg           Allow client to send command line arguments in URL (eg: http://localhost:7681?arg=foo&amp;amp;arg=bar)&#xA;    -R, --readonly          Do not allow clients to write to the TTY&#xA;    -t, --client-option     Send option to client (format: key=value), repeat to add more options&#xA;    -T, --terminal-type     Terminal type to report, default: xterm-256color&#xA;    -O, --check-origin      Do not allow websocket connection from different origin&#xA;    -m, --max-clients       Maximum clients to support (default: 0, no limit)&#xA;    -o, --once              Accept only one client and exit on disconnection&#xA;    -B, --browser           Open terminal with the default system browser&#xA;    -I, --index             Custom index.html path&#xA;    -b, --base-path         Expected base path for requests coming from a reverse proxy (eg: /mounted/here, max length: 128)&#xA;    -P, --ping-interval     Websocket ping interval(sec) (default: 300)&#xA;    -6, --ipv6              Enable IPv6 support&#xA;    -S, --ssl               Enable SSL&#xA;    -C, --ssl-cert          SSL certificate file path&#xA;    -K, --ssl-key           SSL key file path&#xA;    -A, --ssl-ca            SSL CA file path for client certificate verification&#xA;    -d, --debug             Set log level (default: 7)&#xA;    -v, --version           Print the version and exit&#xA;    -h, --help              Print this text and exit&#xA;&#xA;Visit https://github.com/tsl0922/ttyd to get more information and report bugs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the example usage on the &lt;a href=&#34;https://github.com/tsl0922/ttyd/wiki/Example-Usage&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;p&gt;Modern browsers, See &lt;a href=&#34;https://github.com/xtermjs/xterm.js#browser-support&#34;&gt;Browser Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krishnasrinivas/wetty&#34;&gt;Wetty&lt;/a&gt;: &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; based web terminal (SSH/login)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yudai/gotty&#34;&gt;GoTTY&lt;/a&gt;: &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; based web terminal&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SpikySabra/Kernel-Cactus</title>
    <updated>2022-10-26T01:32:56Z</updated>
    <id>tag:github.com,2022-10-26:/SpikySabra/Kernel-Cactus</id>
    <link href="https://github.com/SpikySabra/Kernel-Cactus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s pointy and it hurts!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kernel-Cactus&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s pointy and it hurts!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Kernel Cactus&lt;/code&gt; is a C written framework to utilize perform attacks on Windows OS while utilising CVE-2021-21551 (dbutil_2_3.sys).&lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Please Read our full &lt;a href=&#34;https://spikysabra.gitbook.io/kernelcactus/&#34;&gt;article&lt;/a&gt; to further understand the ins and outs of all the offensive and defensive code in this repo.&lt;/p&gt; &#xA;&lt;h1&gt;Pre - Reqs&lt;/h1&gt; &#xA;&lt;p&gt;In order for Kernel Cactus to work it is required that you will have Dbutil_2_3.sys installed and its service started. how to do so? its your choice really. anything from sc.exe to 3rd party driver loaders is good. you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sc.exe create dbutil_2_3 binpath= C:\path\to\dbutil_2_3.sys type= filesys&#xA;&#xA;sc.exe start dbutil_2_3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is a new framework still mostly at POC level for abusing CVE-2021-21551. As such, this framework tempers with danegrous variables in the kernel , which may cause BSOD from time to time. USING THIS IN PRODUCTION ENVIORNMENT IS RISKY! use it with all the cuation you can! Fixes to stabilize possible BSOD&#39;s will come in the next update, although its mostly safe to use at the moment. if you are not familiar with the nature of this CVE please reffer to &lt;a href=&#34;https://spikysabra.gitbook.io/kernelcactus/&#34;&gt;https://spikysabra.gitbook.io/kernelcactus/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Offsets&lt;/h1&gt; &#xA;&lt;p&gt;in order to use KernelCactus.exe you first must extract the offsets of your Ntoskrnl.exe in order to do so we have included Radare debugger and a python script. first copy the contents of Radare to your desired path, and add that path th PATH enviornment variable.&lt;/p&gt; &#xA;&lt;p&gt;After that use the python script like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python offsetExtract.py -i &amp;lt;your exe&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;after you receive your CSV file , place it in the same dir of KernelCactus.exe and run it :)&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;--help&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Display usage &#xA;&#xA;--etw 0/1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Disable/Enable ETW&#xA;&#xA;--ppl PID 0/1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Disable/Enable PPL from any process &#xA;&#xA;--terminate&#x9;PID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Terminate single Process:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this is aimed mostly for protected processes. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;but will work for any process that provieds you with PROCESS_QUERY_LIMITED_INFORMATION in its ACL.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;        (in case you do not hold such right, you are more then welcome to use &#39;--token PID current --terminate PID in order to recive one :D )&#xA;&#xA;--delete PATH&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Delete any file that provides you with ANY handle access ;)&#xA;&#xA;&#xA;--token srcPID dstPID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copy a token via kernel from one process to another. works both on local AND domain purposes ;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(use &#39;current&#39; on dstPID in order to change the current process token)&#xA;&#xA;--tokenspawn PID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;spawn a new CMD shell with the chosen process token.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;--destroyservice path\to\pids.txt path\to\files.txt&#x9;&#x9;WARNING, USE WITH RESPONSIBILLITY!&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ALL FILES DELETED ARE NOT RESTORABLE, MAKE A COPY PRIOR TO DELETING IF YOU NEED TO...&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Will kill all processes in pid list (line seperated) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Will delete all Files in the File list (line seperated)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this module is aimed for services that own a WatchDog service. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;deleting and killing all files is only in case that the lowest handle access&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;is available to you by ACL, so again feel free to use --token to elevate privs. &#xA;&#xA;--tinject PID \path\to\shellcode&#x9;&#x9;&#x9;&#x9;Perform RemoteThreadInjection to any process that provides you ANY handle , including protected processes &#xA;&#xA;--thijack PID \path\to\shellcode&#x9;&#x9;&#x9;&#x9;Perform ThreadHijacking via kernel operations to any process that provides you ANY handle , including protected processes &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;(shellcode must be in binary format )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/itamar-medyoni-b6aba6179/&#34;&gt;Itamar Medyoni (@T045T3)&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/matan-haim-guez-6905131b4/&#34;&gt;Matan Haim Guez (@0xs0ns3)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stabilize the attacks by adding refferences to kernel objects&lt;/li&gt; &#xA; &lt;li&gt;Stabilize the Process hiding feature already hiding in this code&lt;/li&gt; &#xA; &lt;li&gt;Re-Factor the code to work with other types of vulnerable drivers in factory method&lt;/li&gt; &#xA; &lt;li&gt;Add support for older versions of windows.&lt;/li&gt; &#xA; &lt;li&gt;Hope the indutry patches this up :).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Honorable Mentions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Master of endless inspiration- &lt;a href=&#34;https://github.com/br-sn/CheekyBlinder&#34;&gt;https://github.com/br-sn/CheekyBlinder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Functional masters and elegant code writers- &lt;a href=&#34;https://github.com/wavestone-cdt/EDRSandblast&#34;&gt;https://github.com/wavestone-cdt/EDRSandblast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amazing story teller and absolute monster- &lt;a href=&#34;https://connormcgarr.github.io/cve-2020-21551-sploit/&#34;&gt;https://connormcgarr.github.io/cve-2020-21551-sploit/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>