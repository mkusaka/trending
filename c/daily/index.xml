<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-25T01:31:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>othermod/PSPi-Version-6</title>
    <updated>2023-07-25T01:31:15Z</updated>
    <id>tag:github.com,2023-07-25:/othermod/PSPi-Version-6</id>
    <link href="https://github.com/othermod/PSPi-Version-6" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PSPi 6&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the PSPi 6 GitHub repository! This project is a combination of hardware and software development aiming to retrofit a PSP with almost every type of Raspberry Pi.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://othermod.com/wp-content/uploads/IMG_8727.jpg&#34; alt=&#34;PSPi&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Improved Display:&lt;/strong&gt; The new board uses 7 bits for each color when using the Pi Zero and 8 bits for each color when using the Compute Module, improving color depth for images and videos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LCD Power Consumption:&lt;/strong&gt; Adjustments have been made to the LCD components to reduce power consumption when the screen is off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battery Charging:&lt;/strong&gt; A new battery charger has been added, charging the battery faster with almost no heat generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Power Circuits Overhaul:&lt;/strong&gt; All of the power circuits underwent a major overhaul, better handling the high current of the Compute Module and gracefully managing power on and power off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Microcontroller:&lt;/strong&gt; The board uses an atmega8a, a cost-effective microcontroller functionally identical to the atmega328p used in Arduino boards for this specific application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Board Shape:&lt;/strong&gt; Changes to the board shape have made it closer to the shape of the original PSP board, simplifying the speaker connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility:&lt;/strong&gt; This new board features a 40-pin Raspberry Pi female connector and is compatible with all standard 40-pin Raspberry Pi boards.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Software Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supports RetroPie, Lakka, and many more operating systems:&lt;/strong&gt; RetroPie provides a great, minimal interface that gives decent play time because it isnâ€™t doing too much in the background when its idle. Lakka looks great on the PSP but uses a ton of processing power and drains the battery faster. I plan to get Ubuntu working next.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Software Volume Adjustment:&lt;/strong&gt; The board now supports software volume adjustment, and both the headphone and speaker volume adjust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battery Calculation and Indication:&lt;/strong&gt; The software displays the battery capacity remaining at all times.&lt;/li&gt; &#xA; &lt;li&gt;The software is still somewhat basic, and being used to test some of the hardware functions. It will be gradually improved as the board gets closer to release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources Included Here&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code for Raspberry Pi:&lt;/strong&gt; This repository includes the necessary code for the Raspberry Pi that forms the brains of the PSPi.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Firmware for atmega:&lt;/strong&gt; The firmware for the atmega microcontroller used in the PSPi is also part of this repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PCB and Schematics:&lt;/strong&gt; You can find the PCB and schematics on EasyEDA at &lt;a href=&#34;https://oshwlab.com/adamseamster/pspi-zero-version-5_copy_copy&#34;&gt;this link&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The project is still a work in progress, and although the basic functions are now up and running, there are still a few tweaks and improvements to be made.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;This project is a one-man-show but any help or input is welcome and appreciated. Whether you have experience with design, coding, testing, or just have some ideas for improvement, your contribution is valuable. You can also contribute by spreading the word and sharing the project with others. Financial contributions are also greatly appreciated to help cover the cost of prototypes and speed up testing and improvements.&lt;/p&gt; &#xA;&lt;h2&gt;Follow the Project&lt;/h2&gt; &#xA;&lt;p&gt;You can follow along with the project on &lt;a href=&#34;https://oshwlab.com/adamseamster/pspi-zero-version-5_copy_copy&#34;&gt;EasyEDA&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/V96c3JC&#34;&gt;Discord&lt;/a&gt; for constant updates, or on &lt;a href=&#34;https://youtube.com/othermod&#34;&gt;YouTube&lt;/a&gt; for occasional updates.&lt;/p&gt; &#xA;&lt;h2&gt;Ordering&lt;/h2&gt; &#xA;&lt;p&gt;The boards can be ordered from the manufacturer at any point, but please be aware that the project is still in the testing phase and changes may be made. Some assembly will be required if you order from them, and they are quite expensive in low quantities. I&#39;ll also eventually sell these board on my website.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any thoughts, suggestions, or ideas, please feel free to reach out. Contributions, either by helping with the design, coding, testing, or just recommending improvements, are always welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Thank you for your interest in the PSPi project, and stay tuned for more updates.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mackron/miniaudio</title>
    <updated>2023-07-25T01:31:15Z</updated>
    <id>tag:github.com,2023-07-25:/mackron/miniaudio</id>
    <link href="https://github.com/mackron/miniaudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio playback and capture library written in C, in a single source file.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://miniaud.io&#34;&gt;&lt;img src=&#34;https://miniaud.io/img/miniaudio_wide.png&#34; alt=&#34;miniaudio&#34; width=&#34;1280&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;An audio playback and capture library in a single source file.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/9vpqbjU&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/712952679415939085?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fosstodon.org/@mackron&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/109293691403797709?color=blue&amp;amp;domain=https%3A%2F%2Ffosstodon.org&amp;amp;label=mastodon&amp;amp;logo=mastodon&amp;amp;style=flat-square&#34; alt=&#34;mastodon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/miniaudio&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/miniaudio?label=r%2Fminiaudio&amp;amp;logo=reddit&amp;amp;style=flat-square&#34; alt=&#34;reddit&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#features&#34;&gt;Features&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#examples&#34;&gt;Examples&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#building&#34;&gt;Building&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#documentation&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;miniaudio is written in C with no dependencies except the standard library and should compile clean on all major compilers without the need to install any additional development packages. All major desktop and mobile platforms are supported.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple build system with no external dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Simple and flexible API.&lt;/li&gt; &#xA; &lt;li&gt;Low-level API for direct access to raw audio data.&lt;/li&gt; &#xA; &lt;li&gt;High-level API for sound management, mixing, effects and optional 3D spatialization.&lt;/li&gt; &#xA; &lt;li&gt;Flexible node graph system for advanced mixing and effect processing.&lt;/li&gt; &#xA; &lt;li&gt;Resource management for loading sound files.&lt;/li&gt; &#xA; &lt;li&gt;Decoding, with built-in support for WAV, FLAC and MP3, in addition to being able to plug in custom decoders.&lt;/li&gt; &#xA; &lt;li&gt;Encoding (WAV only).&lt;/li&gt; &#xA; &lt;li&gt;Data conversion.&lt;/li&gt; &#xA; &lt;li&gt;Resampling, including custom resamplers.&lt;/li&gt; &#xA; &lt;li&gt;Channel mapping.&lt;/li&gt; &#xA; &lt;li&gt;Basic generation of waveforms and noise.&lt;/li&gt; &#xA; &lt;li&gt;Basic effects and filters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://miniaud.io/docs/manual/&#34;&gt;Programming Manual&lt;/a&gt; for a more complete description of available features in miniaudio.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;This example shows one way to play a sound using the high level API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define MINIAUDIO_IMPLEMENTATION&#xA;#include &#34;miniaudio.h&#34;&#xA;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int main()&#xA;{&#xA;    ma_result result;&#xA;    ma_engine engine;&#xA;&#xA;    result = ma_engine_init(NULL, &amp;amp;engine);&#xA;    if (result != MA_SUCCESS) {&#xA;        return -1;&#xA;    }&#xA;&#xA;    ma_engine_play_sound(&amp;amp;engine, &#34;sound.wav&#34;, NULL);&#xA;&#xA;    printf(&#34;Press Enter to quit...&#34;);&#xA;    getchar();&#xA;&#xA;    ma_engine_uninit(&amp;amp;engine);&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows how to decode and play a sound using the low level API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define MINIAUDIO_IMPLEMENTATION&#xA;#include &#34;miniaudio.h&#34;&#xA;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;void data_callback(ma_device* pDevice, void* pOutput, const void* pInput, ma_uint32 frameCount)&#xA;{&#xA;    ma_decoder* pDecoder = (ma_decoder*)pDevice-&amp;gt;pUserData;&#xA;    if (pDecoder == NULL) {&#xA;        return;&#xA;    }&#xA;&#xA;    ma_decoder_read_pcm_frames(pDecoder, pOutput, frameCount, NULL);&#xA;&#xA;    (void)pInput;&#xA;}&#xA;&#xA;int main(int argc, char** argv)&#xA;{&#xA;    ma_result result;&#xA;    ma_decoder decoder;&#xA;    ma_device_config deviceConfig;&#xA;    ma_device device;&#xA;&#xA;    if (argc &amp;lt; 2) {&#xA;        printf(&#34;No input file.\n&#34;);&#xA;        return -1;&#xA;    }&#xA;&#xA;    result = ma_decoder_init_file(argv[1], NULL, &amp;amp;decoder);&#xA;    if (result != MA_SUCCESS) {&#xA;        return -2;&#xA;    }&#xA;&#xA;    deviceConfig = ma_device_config_init(ma_device_type_playback);&#xA;    deviceConfig.playback.format   = decoder.outputFormat;&#xA;    deviceConfig.playback.channels = decoder.outputChannels;&#xA;    deviceConfig.sampleRate        = decoder.outputSampleRate;&#xA;    deviceConfig.dataCallback      = data_callback;&#xA;    deviceConfig.pUserData         = &amp;amp;decoder;&#xA;&#xA;    if (ma_device_init(NULL, &amp;amp;deviceConfig, &amp;amp;device) != MA_SUCCESS) {&#xA;        printf(&#34;Failed to open playback device.\n&#34;);&#xA;        ma_decoder_uninit(&amp;amp;decoder);&#xA;        return -3;&#xA;    }&#xA;&#xA;    if (ma_device_start(&amp;amp;device) != MA_SUCCESS) {&#xA;        printf(&#34;Failed to start playback device.\n&#34;);&#xA;        ma_device_uninit(&amp;amp;device);&#xA;        ma_decoder_uninit(&amp;amp;decoder);&#xA;        return -4;&#xA;    }&#xA;&#xA;    printf(&#34;Press Enter to quit...&#34;);&#xA;    getchar();&#xA;&#xA;    ma_device_uninit(&amp;amp;device);&#xA;    ma_decoder_uninit(&amp;amp;decoder);&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/examples&#34;&gt;examples&lt;/a&gt; folder or online here: &lt;a href=&#34;https://miniaud.io/docs/examples/&#34;&gt;https://miniaud.io/docs/examples/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Do the following in one source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define MINIAUDIO_IMPLEMENTATION&#xA;#include &#34;miniaudio.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just compile. There&#39;s no need to install any dependencies. On Windows and macOS there&#39;s no need to link to anything. On Linux just link to &lt;code&gt;-lpthread&lt;/code&gt;, &lt;code&gt;-lm&lt;/code&gt; and &lt;code&gt;-ldl&lt;/code&gt;. On BSD just link to &lt;code&gt;-lpthread&lt;/code&gt; and &lt;code&gt;-lm&lt;/code&gt;. On iOS you need to compile as Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;If you get errors about undefined references to &lt;code&gt;__sync_val_compare_and_swap_8&lt;/code&gt;, &lt;code&gt;__atomic_load_8&lt;/code&gt;, etc. you need to link with &lt;code&gt;-latomic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer separate .h and .c files, you can find a split version of miniaudio in the extras/miniaudio_split folder. From here you can use miniaudio as a traditional .c and .h library - just add miniaudio.c to your source tree like any other source file and include miniaudio.h like a normal header. If you prefer compiling as a single translation unit (AKA unity builds), you can just #include the .c file in your main source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;miniaudio.c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the split version is auto-generated using a tool and is based on the main file in the root directory. If you want to contribute, please make the change in the main file.&lt;/p&gt; &#xA;&lt;p&gt;ABI compatibility is not guaranteed between versions so take care if compiling as a DLL/SO. The suggested way to integrate miniaudio is by adding it directly to your source tree.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Online documentation can be found here: &lt;a href=&#34;https://miniaud.io/docs/&#34;&gt;https://miniaud.io/docs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation can also be found at the top of &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/miniaudio.h&#34;&gt;miniaudio.h&lt;/a&gt; which is always the most up-to-date and authoritive source of information on how to use miniaudio. All other documentation is generated from this in-code documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Supported Platforms&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;macOS, iOS&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD / OpenBSD / NetBSD&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Raspberry Pi&lt;/li&gt; &#xA; &lt;li&gt;Emscripten / HTML5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;miniaudio should compile clean on other platforms, but it will not include any support for playback or capture by default. To support that, you would need to implement a custom backend. You can do this without needing to modify the miniaudio source code. See the &lt;a href=&#34;https://raw.githubusercontent.com/mackron/miniaudio/master/examples/custom_backend.c&#34;&gt;custom_backend&lt;/a&gt; example.&lt;/p&gt; &#xA;&lt;h2&gt;Backends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WASAPI&lt;/li&gt; &#xA; &lt;li&gt;DirectSound&lt;/li&gt; &#xA; &lt;li&gt;WinMM&lt;/li&gt; &#xA; &lt;li&gt;Core Audio (Apple)&lt;/li&gt; &#xA; &lt;li&gt;ALSA&lt;/li&gt; &#xA; &lt;li&gt;PulseAudio&lt;/li&gt; &#xA; &lt;li&gt;JACK&lt;/li&gt; &#xA; &lt;li&gt;sndio (OpenBSD)&lt;/li&gt; &#xA; &lt;li&gt;audio(4) (NetBSD and OpenBSD)&lt;/li&gt; &#xA; &lt;li&gt;OSS (FreeBSD)&lt;/li&gt; &#xA; &lt;li&gt;AAudio (Android 8.0+)&lt;/li&gt; &#xA; &lt;li&gt;OpenSL|ES (Android only)&lt;/li&gt; &#xA; &lt;li&gt;Web Audio (Emscripten)&lt;/li&gt; &#xA; &lt;li&gt;Null (Silence)&lt;/li&gt; &#xA; &lt;li&gt;Custom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Your choice of either public domain or &lt;a href=&#34;https://github.com/aws/mit-0&#34;&gt;MIT No Attribution&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nesbox/TIC-80</title>
    <updated>2023-07-25T01:31:15Z</updated>
    <id>tag:github.com,2023-07-25:/nesbox/TIC-80</id>
    <link href="https://github.com/nesbox/TIC-80" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TIC-80 is a fantasy computer for making, playing and sharing tiny games.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nesbox/TIC-80/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/nesbox/TIC-80/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tic80.com/img/logo64.png&#34; alt=&#34;TIC-80&#34;&gt; &lt;strong&gt;TIC-80 TINY COMPUTER&lt;/strong&gt; - &lt;a href=&#34;https://tic80.com&#34;&gt;https://tic80.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;TIC-80 is a free and open source fantasy computer for making, playing and sharing tiny games.&lt;/p&gt; &#xA;&lt;p&gt;With TIC-80 you get built-in tools for development: code, sprites, maps, sound editors and the command line, which is enough to create a mini retro game.&lt;/p&gt; &#xA;&lt;p&gt;Games are packaged into a cartridge file, which can be easily distributed. TIC-80 works on all popular platforms. This means your cartridge can be played in any device.&lt;/p&gt; &#xA;&lt;p&gt;To make a retro styled game, the whole process of creation and execution takes place under some technical limitations: 240x136 pixel display, 16 color palette, 256 8x8 color sprites, 4 channel sound, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1101448/92492270-d6bcbc80-f1fb-11ea-9d2d-468ad015ace2.gif&#34; alt=&#34;TIC-80&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple programming languages: &lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt;, &lt;a href=&#34;https://moonscript.org&#34;&gt;Moonscript&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;Javascript&lt;/a&gt;, &lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://wren.io/&#34;&gt;Wren&lt;/a&gt;, &lt;a href=&#34;https://fennel-lang.org&#34;&gt;Fennel&lt;/a&gt;, &lt;a href=&#34;http://www.squirrel-lang.org&#34;&gt;Squirrel&lt;/a&gt;, and &lt;a href=&#34;https://janet-lang.org&#34;&gt;Janet&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Games can have mouse and keyboard as input&lt;/li&gt; &#xA; &lt;li&gt;Games can have up to 4 controllers as input (with up to 8 buttons, each)&lt;/li&gt; &#xA; &lt;li&gt;Built-in editors: for code, sprites, world maps, sound effects and music&lt;/li&gt; &#xA; &lt;li&gt;An additional memory bank: load different assets from your cartridge while your game is executing&lt;/li&gt; &#xA; &lt;li&gt;Moderated community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Binary Downloads&lt;/h1&gt; &#xA;&lt;p&gt;You can download compiled versions for the major operating systems directly from our &lt;a href=&#34;https://github.com/nesbox/TIC-80/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Nightly builds&lt;/h2&gt; &#xA;&lt;p&gt;Can be downloaded from &lt;a href=&#34;https://nightly.link/nesbox/TIC-80/workflows/build/main&#34;&gt;nightly builds&lt;/a&gt; page or from the &lt;a href=&#34;https://github.com/nesbox/TIC-80/actions?query=branch%3Amain&#34;&gt;Github Actions&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h1&gt;Pro Version&lt;/h1&gt; &#xA;&lt;p&gt;To help support TIC-80 development, we have a &lt;a href=&#34;https://nesbox.itch.io/tic80&#34;&gt;PRO Version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This version has a few additional features and binaries can only be downloaded on our Itch.io page.&lt;/p&gt; &#xA;&lt;p&gt;For users who can&#39;t spend the money, we made it easy to build the pro version from the source code: (&lt;code&gt;cmake .. -DBUILD_PRO=On&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Pro features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save/load cartridges in text format, and create your game in any editor you want, also useful for version control systems.&lt;/li&gt; &#xA; &lt;li&gt;Even more memory banks: instead of having only 1 memory bank you have 8.&lt;/li&gt; &#xA; &lt;li&gt;Export your game without editors, and then publish it to app stores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;You can play and share games, tools and music at &lt;a href=&#34;https://tic80.com/play&#34;&gt;https://tic80.com/play&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The community also hangs out and discusses on &lt;a href=&#34;https://t.me/tic80&#34;&gt;Telegram&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/HwZDw7n4dN&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;You can contribute by reporting a bug or requesting a new feature on our &lt;a href=&#34;https://github.com/nesbox/TIC-80/issues&#34;&gt;issues page&lt;/a&gt;. Keep in mind when engaging on a discussion to follow our &lt;a href=&#34;https://github.com/nesbox/TIC-80/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also contribute by reviewing or improving our &lt;a href=&#34;https://github.com/nesbox/TIC-80/wiki&#34;&gt;wiki&lt;/a&gt;. The wiki holds TIC-80 documentation, code snippets and game development tutorials.&lt;/p&gt; &#xA;&lt;h1&gt;Build instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h3&gt;with Visual Studio 2017&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install &lt;code&gt;Visual Studio 2017&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;Ruby&lt;/code&gt; (you can use &lt;a href=&#34;https://rubyinstaller.org/&#34;&gt;RubyInstaller&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;run following commands in &lt;code&gt;cmd&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -G &#34;Visual Studio 15 2017 Win64&#34; ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open &lt;code&gt;TIC-80.sln&lt;/code&gt; and build&lt;/li&gt; &#xA; &lt;li&gt;enjoy :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;with MinGW&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install &lt;code&gt;mingw-w64&lt;/code&gt; (&lt;a href=&#34;http://mingw-w64.org&#34;&gt;http://mingw-w64.org&lt;/a&gt;) and add &lt;code&gt;.../mingw/bin&lt;/code&gt; path to the &lt;em&gt;System Variables Path&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;cmake&lt;/code&gt; (&lt;a href=&#34;https://cmake.org&#34;&gt;https://cmake.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;Ruby&lt;/code&gt; (you can use &lt;a href=&#34;https://rubyinstaller.org/&#34;&gt;RubyInstaller&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;run following commands within a &lt;code&gt;mingw64&lt;/code&gt; context, for example within a MingW64 shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -G &#34;MinGW Makefiles&#34; ..&#xA;mingw32-make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 14.04&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git cmake ruby-full libgles1-mesa-dev libglu-dev -y&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install the latest CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget &#34;https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.sh&#34;&#xA;sudo sh cmake-3.12.0-Linux-x86_64.sh --skip-license --prefix=/usr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu 18.04&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install g++ git cmake ruby-full libglvnd-dev libglu1-mesa-dev freeglut3-dev libasound2-dev -y&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S cmake ruby mesa libglvnd glu&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora 36&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf -y groupinstall &#34;Development Tools&#34; &#34;Development Libraries&#34;&#xA;sudo dnf -y install ruby rubygem-{tk{,-doc},rake,test-unit} cmake libglvnd-devel libglvnd-gles freeglut-devel clang libXext-devel SDL_sound pipewire-devel pipewire-jack-audio-connection-kit-devel pulseaudio-libs-devel&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake .. -DCMAKE_CXX_COMPILER=clang++ -DSDL_ALSA=On&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Raspberry Pi (Retropie)&lt;/h3&gt; &#xA;&lt;p&gt;First, add jessie-backports repo to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# required public keys&#xA;gpg --keyserver pgpkeys.mit.edu --recv-key  8B48AD6246925553&#xA;gpg -a --export 8B48AD6246925553 | sudo apt-key add -&#xA;gpg --keyserver pgpkeys.mit.edu --recv-key 7638D0442B90D010&#xA;gpg -a --export 7638D0442B90D010 | sudo apt-key add -&#xA;&#xA;# upgrade system&#xA;sudo apt-get update&#xA;sudo apt-get dist-upgrade&#xA;&#xA;# install software&#xA;sudo apt-get install git build-essential ruby-full libsdl2-dev zlib1g-dev&#xA;sudo apt-get install -t jessie-backports liblua5.3-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you are using a normal Raspberry Pi image (not Retropie) you may not have OpenGL drivers enabled. Run &lt;code&gt;sudo raspi-config&lt;/code&gt;, then select 7 for &#34;Advanced Options&#34;, followed by 6 for &#34;GL Drivers&#34;, and enable &#34;GL (Fake KMS) Desktop Driver&#34;. After changing this setting, reboot.&lt;/p&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;p&gt;install &lt;code&gt;Command Line Tools for Xcode&lt;/code&gt; and &lt;code&gt;brew&lt;/code&gt; package manager&lt;/p&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install git cmake&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to create application icon for development version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/Applications/TIC80dev.app/Contents/{MacOS,Resources}&#xA;cp -f macosx/tic80.plist ~/Applications/TIC80dev.app/Contents/Info.plist&#xA;cp -f macosx/tic80.icns ~/Applications/TIC80dev.app/Contents/Resources&#xA;cat &amp;gt; ~/Applications/TIC80dev.app/Contents/MacOS/tic80 &amp;lt;&amp;lt;EOF&#xA;#!/bin/sh&#xA;exec /Users/nesbox/projects/TIC-80/build/bin/tic80 --skip --scale 2 &amp;gt;/dev/null&#xA;EOF&#xA;chmod +x ~/Applications/TIC80dev.app/Contents/MacOS/TIC80dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to update the absolute path to the tic80 binary in the script, or update the launch arguments.&lt;/p&gt; &#xA;&lt;h2&gt;FreeBSD&lt;/h2&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pkg install gcc git cmake ruby libglvnd libglu freeglut mesa-devel mesa-dri alsa-lib&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mesa looks for swrast_dri.so from the wrong path, so also symlink it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ln -s /usr/local/lib/dri/swrast_dri.so /usr/local/lib/dri-devel/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Install instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;To install run &lt;code&gt;sudo make install -j4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;TIC-80 can now be run with &lt;code&gt;tic80&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iOS / tvOS&lt;/h2&gt; &#xA;&lt;p&gt;You can find iOS/tvOS version here&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0.60.3: &lt;a href=&#34;https://github.com/brunophilipe/TIC-80&#34;&gt;https://github.com/brunophilipe/TIC-80&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;0.45.0: &lt;a href=&#34;https://github.com/CliffsDover/TIC-80&#34;&gt;https://github.com/CliffsDover/TIC-80&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filippo Rivato - &lt;a href=&#34;https://twitter.com/HomineLudens&#34;&gt;Twitter @HomineLudens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fred Bednarski - &lt;a href=&#34;https://twitter.com/FredBednarski&#34;&gt;Twitter @FredBednarski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Al Rado - &lt;a href=&#34;https://twitter.com/alrado2&#34;&gt;Twitter @alrado2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trevor Martin - &lt;a href=&#34;https://twitter.com/trelemar&#34;&gt;Twitter @trelemar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MonstersGoBoom - &lt;a href=&#34;https://twitter.com/MonstersGo&#34;&gt;Twitter @MonstersGoBoom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matheus Lessa - &lt;a href=&#34;https://twitter.com/matheuslrod&#34;&gt;Twitter @matheuslrod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CliffsDover - &lt;a href=&#34;https://twitter.com/DancingBottle&#34;&gt;Twitter @DancingBottle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Frantisek Jahoda - &lt;a href=&#34;https://github.com/jahodfra&#34;&gt;GitHub @jahodfra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guilherme Medeiros - &lt;a href=&#34;https://github.com/frenetic&#34;&gt;GitHub @frenetic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrei Rudenko - &lt;a href=&#34;https://github.com/RudenkoArts&#34;&gt;GitHub @RudenkoArts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Phil Hagelberg - &lt;a href=&#34;https://technomancy.us/colophon&#34;&gt;@technomancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rob Loach - &lt;a href=&#34;https://twitter.com/RobLoach&#34;&gt;Twitter @RobLoach&lt;/a&gt; &lt;a href=&#34;https://github.com/RobLoach&#34;&gt;GitHub @RobLoach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wade Brainerd - &lt;a href=&#34;https://github.com/wadetb&#34;&gt;GitHub @wadetb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Robinson - &lt;a href=&#34;https://github.com/paul59&#34;&gt;GitHub @paul59&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stefan Devai - &lt;a href=&#34;https://github.com/stefandevai&#34;&gt;GitHub @stefandevai&lt;/a&gt; &lt;a href=&#34;https://stefandevai.me&#34;&gt;Blog stefandevai.me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Damien de Lemeny - &lt;a href=&#34;https://github.com/ddelemeny&#34;&gt;GitHub @ddelemeny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adrian Siekierka - &lt;a href=&#34;https://github.com/asiekierka&#34;&gt;GitHub @asiekierka&lt;/a&gt; &lt;a href=&#34;https://asie.pl/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jay Em (Sweetie16 palette) - &lt;a href=&#34;https://twitter.com/GrafxKid&#34;&gt;Twitter @GrafxKid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;msx80 - &lt;a href=&#34;https://twitter.com/msx80&#34;&gt;Twitter @msx80&lt;/a&gt; &lt;a href=&#34;https://github.com/msx80&#34;&gt;Github msx80&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Josh Goebel - &lt;a href=&#34;https://twitter.com/dreamer3&#34;&gt;Twitter @dreamer3&lt;/a&gt; &lt;a href=&#34;https://github.com/joshgoebel&#34;&gt;Github joshgoebel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joshua Minor - &lt;a href=&#34;https://github.com/jminor&#34;&gt;GitHub @jminor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Julia Nelz - &lt;a href=&#34;https://github.com/remi6397&#34;&gt;Github @remi6397&lt;/a&gt; &lt;a href=&#34;https://nelz.pl&#34;&gt;WWW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thorben KrÃ¼ger - &lt;a href=&#34;https://chaos.social/@benthor&#34;&gt;Mastodon @benthor@chaos.social&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;David St-Hilaire - &lt;a href=&#34;https://github.com/sthilaid&#34;&gt;GitHub @sthilaid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alec Troemel - &lt;a href=&#34;https://github.com/AlecTroemel&#34;&gt;Github @alectroemel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kolten Pearson - &lt;a href=&#34;https://github.com/koltenpearson&#34;&gt;Github @koltenpearson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>