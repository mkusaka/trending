<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:33:00Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>werman/noise-suppression-for-voice</title>
    <updated>2022-08-30T01:33:00Z</updated>
    <id>tag:github.com,2022-08-30:/werman/noise-suppression-for-voice</id>
    <link href="https://github.com/werman/noise-suppression-for-voice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Noise suppression plugin based on Xiph&#39;s RNNoise&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; style=&#34;line-height:0;&#34;&gt;Real-time Noise Suppression Plugin&lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;VST2, VST3, LV2, LADSPA, AU, AUv3&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;Licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/werman/noise-suppression-for-voice/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/werman/noise-suppression-for-voice?label=Latest&amp;amp;style=flat&#34; alt=&#34;Latest&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;A real-time noise suppression plugin for voice based on &lt;a href=&#34;https://github.com/xiph/rnnoise&#34;&gt;Xiph&#39;s RNNoise&lt;/a&gt;. &lt;a href=&#34;https://people.xiph.org/~jm/demo/rnnoise/&#34;&gt;More info about the base library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The plugin is meant to suppress a wide range of noise origins (&lt;a href=&#34;https://arxiv.org/pdf/1709.08243.pdf&#34;&gt;from original paper&lt;/a&gt;): computer fans, office, crowd, airplane, car, train, construction.&lt;/p&gt; &#xA;&lt;p&gt;From my tests mild background noise is always suppressed, loud sounds, like clicking of mechanical keyboard, are suppressed while there is no voice however they are only reduced in volume when voice is present.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this plugin could not improve the voice quality with bad microphone, it even could make things worse by misclassifying the voice as a noise which would reduce already not-so-good voice quality.&lt;/p&gt; &#xA;&lt;p&gt;The plugin works with one or more channels, 16 bit, 48000 Hz audio input.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt; &lt;span&gt;❗&lt;/span&gt; &lt;span&gt;❗&lt;/span&gt; Do NOT use any other sample rates, use ONLY 48000 Hz, make sure your audio source is 48000 Hz and force it to be 48000 Hz if it is not.&lt;/p&gt; &#xA;&lt;p&gt;There is a minimalistic GUI with all parameters and diagnostic stats:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/xPkoqlU.png&#34; alt=&#34;GUI of the plugin&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/werman/noise-suppression-for-voice/releases&#34;&gt;Latest releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How-to&lt;/h2&gt; &#xA;&lt;h3&gt;Plugin Settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;VAD Threshold (%)&lt;/code&gt; - if probability of sound being a voice is lower than this threshold - it will be silenced. In most cases the threshold between 85% - 95% would be fine. Without the VAD some loud noises may still be a bit audible when there is no voice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VAD Grace Period (ms)&lt;/code&gt; - for how long after the last voice detection the output won&#39;t be silenced. This helps when ends of words/sentences are being cut off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Retroactive VAD Grace Period (ms)&lt;/code&gt; - similar to &lt;code&gt;VAD Grace Period (ms)&lt;/code&gt; but for starts of words/sentences. &lt;span&gt;⚠&lt;/span&gt; This introduces latency!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows + Equalizer APO (VST2)&lt;/h3&gt; &#xA;&lt;p&gt;To check or change mic settings go to &#34;Recording devices&#34; -&amp;gt; &#34;Recording&#34; -&amp;gt; &#34;Properties&#34; of the target mic -&amp;gt; &#34;Advanced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To enable the plugin in Equalizer APO select &#34;Plugins&#34; -&amp;gt; &#34;VST Plugin&#34; and specify the plugin dll.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://medium.com/@bssankaran/free-and-open-source-software-noise-cancelling-for-working-from-home-edb1b4e9764e&#34;&gt;detailed guide&lt;/a&gt; provided by &lt;a href=&#34;https://github.com/bssankaran&#34;&gt;@bssankaran&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1.0: Now there is a GUI, so it became easy to change parameters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;PipeWire&lt;/h4&gt; &#xA;&lt;p&gt;Since version &lt;code&gt;0.3.45&lt;/code&gt; PipeWire uses &lt;a href=&#34;https://gitlab.freedesktop.org/pipewire/pipewire/-/wikis/Config-PipeWire#split-file-configuration&#34;&gt;Split-File Configuration&lt;/a&gt;, making it extremely easy to set up plugins and tweak configuration.&lt;/p&gt; &#xA;&lt;p&gt;For older PipeWire version you&#39;d have to copy &lt;code&gt;/usr/share/pipewire/pipewire.conf&lt;/code&gt; into &lt;code&gt;~/.config/pipewire/pipewire.conf&lt;/code&gt; and then append the configuration below to already existing &lt;code&gt;context.modules&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For PipeWire &amp;gt;= &lt;code&gt;0.3.45&lt;/code&gt; you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create config directory: &lt;code&gt;~/.config/pipewire/pipewire.conf.d/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create config for plugin: &lt;code&gt;~/.config/pipewire/pipewire.conf.d/99-input-denoising.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paste configuration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;context.modules = [&#xA;{   name = libpipewire-module-filter-chain&#xA;    args = {&#xA;        node.description =  &#34;Noise Canceling source&#34;&#xA;        media.name =  &#34;Noise Canceling source&#34;&#xA;        filter.graph = {&#xA;            nodes = [&#xA;                {&#xA;                    type = ladspa&#xA;                    name = rnnoise&#xA;                    plugin = /path/to/librnnoise_ladspa.so&#xA;                    label = noise_suppressor_mono&#xA;                    control = {&#xA;                        &#34;VAD Threshold (%)&#34; 50.0&#xA;                        &#34;VAD Grace Period (ms)&#34; 200&#xA;                        &#34;Retroactive VAD Grace (ms)&#34; 0&#xA;                    }&#xA;                }&#xA;            ]&#xA;        }&#xA;        capture.props = {&#xA;            node.name =  &#34;capture.rnnoise_source&#34;&#xA;            node.passive = true&#xA;            audio.rate = 48000&#xA;        }&#xA;        playback.props = {&#xA;            node.name =  &#34;rnnoise_source&#34;&#xA;            media.class = Audio/Source&#xA;            audio.rate = 48000&#xA;        }&#xA;    }&#xA;}&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change &lt;code&gt;/path/to/librnnoise_ladspa.so&lt;/code&gt; to actual library path&lt;/li&gt; &#xA; &lt;li&gt;If you are &lt;strong&gt;absolutely&lt;/strong&gt; sure that you need stereo output - change &lt;code&gt;noise_suppressor_mono&lt;/code&gt; -&amp;gt; &lt;code&gt;noise_suppressor_stereo&lt;/code&gt;. Even if your mic says that it is stereo - you probably don&#39;t need stereo output. It also would consume 2x resources.&lt;/li&gt; &#xA; &lt;li&gt;Configure plugin parameters: &lt;code&gt;VAD Threshold (%)&lt;/code&gt;, ...&lt;/li&gt; &#xA; &lt;li&gt;Restart PipeWire: &lt;code&gt;systemctl restart --user pipewire.service&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now you should be able to select &lt;code&gt;Noise Canceling source&lt;/code&gt; as input device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information consult PipeWire documentation on &lt;a href=&#34;https://docs.pipewire.org/page_module_filter_chain.html&#34;&gt;Filter-Chains&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Troubleshooting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TODO, how to change sample rate for mic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternative solutions for PipeWire/PulseAudio configuration which also use RNNoise:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wwmm/easyeffects&#34;&gt;EasyEffects&lt;/a&gt; - a general solution for audio effects GUI for PipeWire. Easy to set up and use. Fewer settings for denoising. Available on Flathub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noisetorch/NoiseTorch&#34;&gt;NoiseTorch&lt;/a&gt; - easy to set up, works with PulseAudio and Pipewire. Fewer settings for denoising.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PulseAudio&lt;/h4&gt; &#xA;&lt;p&gt;TLDR: Use PipeWire... or follow the instructions below.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions (click me)&lt;/summary&gt; &#xA; &lt;p&gt;The idea is:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a sink from which apps will take audio later and which will be the end sink in the chain.&lt;/li&gt; &#xA;  &lt;li&gt;Load the plugin which outputs to already created sink (&lt;code&gt;sink_master&lt;/code&gt; parameter) and has input sink (&lt;code&gt;sink_name&lt;/code&gt; parameter, sink will be created).&lt;/li&gt; &#xA;  &lt;li&gt;Create loopback from microphone (&lt;code&gt;source&lt;/code&gt;) to input sink of plugin (&lt;code&gt;sink&lt;/code&gt;) with 1 channel.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;For example, to create a new mono device with noise-reduced audio from your microphone, first, find your mic name using e.g.:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pactl list sources short&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then, create the new device using:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacmd load-module module-null-sink sink_name=mic_denoised_out rate=48000&#xA;pacmd load-module module-ladspa-sink sink_name=mic_raw_in sink_master=mic_denoised_out label=noise_suppressor_mono plugin=/path/to/librnnoise_ladspa.so control=50,20,0,0,0&#xA;pacmd load-module module-loopback source=&amp;lt;your_mic_name&amp;gt; sink=mic_raw_in channels=1 source_dont_move=true sink_dont_move=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This needs to be executed every time PulseAudio is launched. You can automate this by creating file in &lt;code&gt;~/.config/pulse/default.pa&lt;/code&gt; with the content:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;.include /etc/pulse/default.pa&#xA;&#xA;load-module module-null-sink sink_name=mic_denoised_out rate=48000&#xA;load-module module-ladspa-sink sink_name=mic_raw_in sink_master=mic_denoised_out label=noise_suppressor_mono plugin=/path/to/librnnoise_ladspa.so control=50,200,0,0,0&#xA;load-module module-loopback source=your_mic_name sink=mic_raw_in channels=1 source_dont_move=true sink_dont_move=true&#xA;&#xA;set-default-source mic_denoised_out.monitor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The order of settings in &lt;code&gt;control=50,200,0,0,0&lt;/code&gt; is: &lt;code&gt;VAD Threshold (%)&lt;/code&gt;, &lt;code&gt;VAD Grace Period (ms)&lt;/code&gt;, &lt;code&gt;Retroactive VAD Grace Period (ms)&lt;/code&gt;, &lt;code&gt;Placeholder1&lt;/code&gt;, &lt;code&gt;Placeholder2&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you are absolutely sure that you want a stereo input use these options instead:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;label=noise_suppressor_stereo&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;channels=2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you have problems with audio crackling or high / periodically increasing latency, adding &lt;code&gt;latency_msec=1&lt;/code&gt; to the loopback might help:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;load-module module-loopback source=your_mic_name sink=mic_raw_in channels=1 source_dont_move=true sink_dont_move=true latency_msec=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Chrome and other Chromium based browsers will ignore monitor devices and you will not be able to select the &#34;Monitor of Null Output&#34;. To work around this, either use pavucontrol to assign the input to Chrome, or remap this device in PulseAudio to create a regular source:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacmd load-module module-remap-source source_name=denoised master=mic_denoised_out.monitor channels=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You may still need to set correct input for application, this can be done in audio mixer panel (if you have one) in &#39;Recording&#39; tab where you should set &#39;Monitor of Null Output&#39; as source.&lt;/p&gt; &#xA; &lt;p&gt;Further reading:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Useful detailed info about PulseAudio logic &lt;a href=&#34;https://github.com/toadjaune/pulseaudio-config&#34;&gt;toadjaune/pulseaudio-config&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=101043&#34;&gt;thread&lt;/a&gt; which helped me with how to post-process mic output and make it available to applications.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;TODO, contributions are welcomed!&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The plugin is tested with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Equalizer APO v1.2 x64 (open source system-wide equalizer for Windows)&lt;/li&gt; &#xA; &lt;li&gt;PipeWire on Arch Linux&lt;/li&gt; &#xA; &lt;li&gt;Carla (on Linux)&lt;/li&gt; &#xA; &lt;li&gt;Audacity (on Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;m not associated with the original RNNoise work and do NOT have any understanding of recurrent neural networks it is based upon.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;External dependencies are vendored via &lt;a href=&#34;https://github.com/ingydotnet/git-subrepo&#34;&gt;git-subrepo&lt;/a&gt;. So that there is no need to use submodules, and patching subrepos is easy (at the moment we have several patches for JUCE).&lt;/p&gt; &#xA;&lt;p&gt;Improvements are welcomed! Though if you want to contribute anything sizeable - open an issue first.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;p&gt;Compiling for x64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -Bbuild-x64 -H. -GNinja -DCMAKE_BUILD_TYPE=Release&#xA;ninja -C build-x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compiling for x32:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -D CMAKE_CXX_FLAGS=-m32 -D CMAKE_C_FLAGS=-m32 -Bbuild-x32 -H. -GNinja -DCMAKE_BUILD_TYPE=Release&#xA;ninja -C build-x32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cross-compiling for Windows x64 (MinGW builds are failing at the moment due to certain incompatibilities in JUCE):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -Bbuild-mingw64 -H. -GNinja -DCMAKE_TOOLCHAIN_FILE=toolchains/toolchain-mingw64.cmake -DCMAKE_BUILD_TYPE=Release&#xA;ninja -C build-mingw64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiling only selected plugins&lt;/h4&gt; &#xA;&lt;p&gt;By default, all plugins supported for a platform are being built. You can deliberately turn off plugins with the following CMake flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_LADSPA_PLUGIN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_VST_PLUGIN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_VST3_PLUGIN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_LV2_PLUGIN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_AU_PLUGIN&lt;/code&gt; (macOS only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_AUV3_PLUGIN&lt;/code&gt; (macOS only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DBUILD_VST_PLUGIN=OFF -DBUILD_LV2_PLUGIN=OFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the GNU General Public License v3.0 - see the LICENSE file for details.&lt;/p&gt; &#xA;&lt;p&gt;Used libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juce-framework/JUCE&#34;&gt;JUCE&lt;/a&gt; is used under GPLv3 license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.iem.at/zmoelnig/FST/&#34;&gt;FST&lt;/a&gt; - GPLv3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catchorg/Catch2&#34;&gt;catch2&lt;/a&gt; - BSL-1.0&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LongSoft/UEFITool</title>
    <updated>2022-08-30T01:33:00Z</updated>
    <id>tag:github.com,2022-08-30:/LongSoft/UEFITool</id>
    <link href="https://github.com/LongSoft/UEFITool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UEFI firmware image viewer and editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UEFITool&lt;/h1&gt; &#xA;&lt;p&gt;UEFITool is a viewer and editor of firmware images conforming to UEFI Platform Interface (PI) Specifications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LongSoft/UEFITool/new_engine/UEFITool/icons/uefitool_64x64.png&#34; alt=&#34;UEFITool icon&#34; title=&#34;UEFITool icon&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/LongSoft/UEFITool/actions/workflows/main.yml/badge.svg?branch=new_engine&#34; alt=&#34;CI Status&#34;&gt; &lt;a href=&#34;https://scan.coverity.com/projects/17209&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/17209/badge.svg?flat=1&#34; alt=&#34;Scan Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Very Brief Introduction to UEFI&lt;/h2&gt; &#xA;&lt;p&gt;Unified Extensible Firmware Interface or UEFI is a post-BIOS firmware specification originally written by Intel for Itanium architecture and than adapted for X86 systems.&lt;br&gt; The first EFI-compatible x86 firmwares were used on Apple Macintosh systems in 2006 and PC motherboard vendors started putting UEFI-compatible firmwares on their boards in 2011.&lt;br&gt; In 2015 there are numerous systems using UEFI-compatible firmware including PCs, Macs, Tablets and Smartphones on x86, x86-64 and ARM architectures.&lt;br&gt; More information on UEFI is available on &lt;a href=&#34;http://www.uefi.org/faq&#34;&gt;UEFI Forum official site&lt;/a&gt; and in &lt;a href=&#34;http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface&#34;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Very Brief Introduction to UEFITool&lt;/h2&gt; &#xA;&lt;p&gt;UEFITool is a cross-platform open source application written in C++/Qt, that parses UEFI-compatible firmware image into a tree structure, verifies image&#39;s integrity and provides a GUI to manipulate image&#39;s elements.&lt;br&gt; Project development started in the middle of 2013 because of the lack of cross-platform open source utilities for tinkering with UEFI images.&lt;/p&gt; &#xA;&lt;p&gt;In the beginning of 2015 the major refactoring round was started to make the program compatible with newer UEFI features including FFSv3 volumes and fixed image elements. It&#39;s in development right now with the following features still missing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Editor part, i.e image reconstruction routines&lt;/li&gt; &#xA; &lt;li&gt;Console UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The missing parts are in development and the version with a new engine will be made as soon as image reconstruction works again.&lt;/p&gt; &#xA;&lt;h2&gt;Derived projects&lt;/h2&gt; &#xA;&lt;p&gt;There are some other projects that use UEFITool&#39;s engine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UEFIExtract, which uses ffsParser to parse supplied firmware image into a tree structure and dumps the parsed structure recursively on the FS. Jethro Beekman&#39;s &lt;a href=&#34;https://github.com/jethrogb/uefireverse&#34;&gt;tree&lt;/a&gt; utility can be used to work with the extracted tree.&lt;/li&gt; &#xA; &lt;li&gt;UEFIFind, which uses ffsParser to find image elements containing a specified pattern. It was developed for &lt;a href=&#34;http://www.win-raid.com/t154f16-Tool-Guide-News-quot-UEFI-BIOS-Updater-quot-UBU.html&#34;&gt;UBU&lt;/a&gt; project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuxuser/UEFITool/tree/OZM/OZMTool&#34;&gt;OZMTool&lt;/a&gt;, which uses UEFITool&#39;s engine to perform various &#34;hackintosh&#34;-related firmware modifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Right now there are some alternatives to UEFITool that you could find useful too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/linuxboot/fiano&#34;&gt;Fiano&lt;/a&gt;&lt;/strong&gt; by Google and Facebook. Go-based cross-platform open source toolset for modifying UEFI firmware images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://forums.mydigitallife.info/threads/13194-Tool-to-Insert-Replace-SLIC-in-Phoenix-Insyde-Dell-EFI-BIOSes&#34;&gt;PhoenixTool&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&#34;http://forums.mydigitallife.info/members/39295-andyp&#34;&gt;AndyP&lt;/a&gt;. Windows-only freeware GUI application written in C#. Used mostly for SLIC-related modifications, but it not limited to this task. Requires Microsoft .NET 3.5 to work properly. Supports unpacking firmware images from various vendor-specific formats like encrypted HP update files and Dell installers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/theopolis/uefi-firmware-parser&#34;&gt;uefi-firmware-parser&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&#34;https://github.com/theopolis&#34;&gt;Teddy Reed&lt;/a&gt;. Cross-platform open source console application written in Python. Very tinker-friendly due to use of Python. Can be used in scripts to automate firmware patching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/chipsec/chipsec&#34;&gt;Chipsec&lt;/a&gt;&lt;/strong&gt; by Intel. Cross-platform partially open source console application written in Python and C. Can be used to test Intel-based platforms for various security-related misconfigurations, but also has NVRAM parser and other components aimed to firmware modification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MMTool&lt;/strong&gt; by AMI. Windows-only proprietary application available to AMI clients. Works only with Aptio4- and AptioV-based firmware images, but has some interesting features including OptionROM replacement and microcode update. Must be licensed from AMI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;H2OEZE&lt;/strong&gt; by Insyde. Windows-only proprietary application available to Insyde clients. Works only with InsydeH2O-based firmware images. Must be licensed from Insyde.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SCT BIOS Editor&lt;/strong&gt; by Phoenix. Windows-only proprietary application available to Phoenix clients. Works only with Phoenix SCT-based firmware images. Must be licensed from Phoenix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can either use &lt;a href=&#34;https://github.com/LongSoft/UEFITool/releases&#34;&gt;pre-built binaries for Windows and macOS&lt;/a&gt; or build a binary yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To build a binary that uses Qt library (UEFITool) you need a C++ compiler and an instance of &lt;a href=&#34;https://www.qt.io&#34;&gt;Qt5&lt;/a&gt; library. Install both of them, get the sources, generate makefiles using qmake (&lt;code&gt;qmake UEFITool.pro&lt;/code&gt;) and use your system&#39;s make command on that generated files (i.e. &lt;code&gt;nmake release&lt;/code&gt;, &lt;code&gt;make release&lt;/code&gt; and so on).&lt;/li&gt; &#xA; &lt;li&gt;To build a binary that doesn&#39;t use Qt (UEFIExtract, UEFIFind), you need a C++ compiler and &lt;a href=&#34;https://cmake.org&#34;&gt;CMAKE&lt;/a&gt; utility to generate a makefile for your OS and build environment. Install both of them, get the sources, generate makefiles using cmake (&lt;code&gt;cmake UEFIExtract&lt;/code&gt;) and use your system&#39;s make command on that generated files (i.e. &lt;code&gt;nmake release&lt;/code&gt;, &lt;code&gt;make release&lt;/code&gt; and so on).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some vendor-specific firmware update files can be opened incorrectly or can&#39;t be opened at all. This includes encrypted HP update files, Dell HDR and EXE files, some InsydeFlash FD files and so on. Enabling support for such files will require massive amount of reverse-engineering which is almost pointless because the updated image can be obtained from BIOS chip where it&#39;s already decrypted and unpacked.&lt;/li&gt; &#xA; &lt;li&gt;Intel Firmware Interface Table (FIT) editing is not supported right now. FIT contains pointers to various image components that must be loaded before executing the first CPU instruction from the BIOS chip. Those components include CPU microcode updates, binaries and settings used by BIOS Guard and Boot Guard technologies and some other stuff. More information on FIT can be obtained &lt;a href=&#34;http://downloadmirror.intel.com/18931/eng/Intel%20TXT%20LAB%20Handout.pdf&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Builder code is still not ready.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>0015/ThatProject</title>
    <updated>2022-08-30T01:33:00Z</updated>
    <id>tag:github.com,2022-08-30:/0015/ThatProject</id>
    <link href="https://github.com/0015/ThatProject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;*That Project&#39;s project repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;That Project&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to my project repository. The source code for each project can be downloaded here, and please refer to the below video for the project tutorial. Thank you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/ThatProject&#34;&gt;Youtube Channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ESP32 Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLnq7JUnBumAyhSBBp95MsQ5-chBAYheZw&#34;&gt;Youtube ESP32 Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://youtu.be/gliwNg25fLE&#34;&gt; &lt;img src=&#34;https://github.com/0015/ThatProject/raw/master/ESP32_LVGL/LVGL8/5_System_Monitor/demo/demo.gif&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;[Make your own System Monitor with ESP32 + LVGL 8] &lt;a href=&#34;https://youtu.be/gliwNg25fLE&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/5_System_Monitor&#34;&gt;[Source Code]&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://youtu.be/zJvDw4UVDLc&#34;&gt; &lt;img src=&#34;https://i.ytimg.com/vi/zJvDw4UVDLc/hqdefault.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;[LoRa, GPS Data showing on the Map] &lt;a href=&#34;https://youtu.be/zJvDw4UVDLc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32-LoRa/LoRa_GPS_Data_Viewer&#34;&gt;[Source Code]&lt;/a&gt;&lt;a href=&#34;https://0015.github.io/LoRa_GPS_Viewer&#34;&gt;[Try here]&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://youtu.be/vaYJydZcObU&#34;&gt; &lt;img src=&#34;https://i.ytimg.com/vi/vaYJydZcObU/hqdefault.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;[My ESP32 Tag App for my own ESP32Tag Device!] &lt;a href=&#34;https://youtu.be/vaYJydZcObU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_UWB/2_My-ESP32Tag-App&#34;&gt;[Source Code]&lt;/a&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.thatproject.my_esp32tag&#34;&gt;[Google Play]&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[QR Code Maker (ESP32+LVGL8)]&lt;a href=&#34;https://youtu.be/Ss3zBO-V9kI&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/4_QR_Code_Maker&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Part.2: Creating Tesla&#39;s Website in SquareLine Studio (ESP32+LVGL)]&lt;a href=&#34;https://youtu.be/7PXBPRm_8_Y&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8_SquareLine/02_Tesla_Multi_Pages&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Creating Tesla&#39;s Website in SquareLine Studio (ESP32+LVGL)]&lt;a href=&#34;https://youtu.be/LrvqSjLzo44&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8_SquareLine/01_Tesla_Single_Page&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 + UWB | Warning sounds depending on the distance]&lt;a href=&#34;https://youtu.be/xrDvu8QT1Qs&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_UWB/1_My_Anchor_With_Audio&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Not AirTag, But ESP32Tag]&lt;a href=&#34;https://youtu.be/_Bu3lw49m5s&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_UWB/0_ESP32TAG&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 3. Base Project for WiFi Settings]&lt;a href=&#34;https://youtu.be/r62vfOhWXeo&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/3_BaseProject_Network_Selector&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Auto Focus with OV5640 on ESP32 AI-Thinker Board]&lt;a href=&#34;https://youtu.be/922BWy3OOoQ&#34;&gt;[Video]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[OV5640 for ESP32 Camera (Compared to OV2640)]&lt;a href=&#34;https://youtu.be/BCvOBMQSliY&#34;&gt;[Video]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | Sending images via UDP?]&lt;a href=&#34;https://youtu.be/1kHxd5FOUEU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_UDP&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Tic Tac Camera Using ESP32CAM And Wireless Charging]&lt;a href=&#34;https://youtu.be/hteut2R8eQ0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/TicTacCamera&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 2. Shortcuts for Pull Stack Developer]&lt;a href=&#34;https://youtu.be/i4qrWbHXH3U&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/2_LILYPI_StackOverflow_BLE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 1. Demos with LILY PI]&lt;a href=&#34;https://youtu.be/kRTFc2vY5A8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/1_LILYPI_ST7796_LovyanGFX&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 0. GFX Setup (ft. LovyanGFX)]&lt;a href=&#34;https://youtu.be/IPCvQ4o_WP8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/0_ILI9488_LovyanGFX&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Mini E-Paper | Ep1. Uploading Emoji to E-Paper from Flutter App (iOS &amp;amp; Android)]&lt;a href=&#34;https://youtu.be/pP9YXFNOBhY&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/E-Paper_Projects/01_Emoji2MiniE-Paper&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[IoT | Cloud Firestore - Ep 4. Firebase Client Flutter App for iOS and Android]&lt;a href=&#34;https://youtu.be/nsopdabOcug&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/4_iot_firestore_flutter_app&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Send an SMS from ESP32 (ft. Twilio)]&lt;a href=&#34;https://youtu.be/SP4pvYCQAfc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/MESSAGE/Twilio/0_ESP32TTGO_FIRESTORE_SMS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 3. Status Icons on Display (The End)]&lt;a href=&#34;https://youtu.be/LR_FgObfuCw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/3_Display_Done&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 2. Firebase Client For ESP32]&lt;a href=&#34;https://youtu.be/KiF9uGFkA_o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/2_Firebase_Client&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 1. Firebase Setup]&lt;a href=&#34;https://youtu.be/KV0D8nrsBLg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/1_Network_Class&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 0. Showing temp/humidity from DHT11 on TTGO display [Upgraded Version]]&lt;a href=&#34;https://youtu.be/aAUIlCWs_bc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/0_ESP32TTGO_DHT11&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[OTA Solution - Build your own OTA platform (2/2, ESP32 OTA Application)]&lt;a href=&#34;https://youtu.be/oNFqwvYYWe4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_OTA/Simple_OTA_Solution/Simple_OTA_Application&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[OTA Solution - Build your own OTA platform (1/2, Preparing Python Flask API Server)]&lt;a href=&#34;https://youtu.be/_uTZad8RMZk&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_OTA/Simple_OTA_Solution/Python_Flask_REST_API_Server&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | Python MQTT Client for Multiple ESP32CAM]&lt;a href=&#34;https://youtu.be/-0L0PrfuSEo&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/3_Python_MQTT_Client_App&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | Flutter MQTT Client App [Full Version]]&lt;a href=&#34;https://youtu.be/aY7i0xnQW54&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/2_Flutter_MQTT_Client_App/mqtt_esp32cam_viewer_full_version&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | Flutter MQTT Client App for macOS - UI Part (For Newbies)]&lt;a href=&#34;https://youtu.be/viGjd3VDlr4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/2_Flutter_MQTT_Client_App/mqtt_esp32cam_viewer_ui_part&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | ESP32CAM working as a publisher on MQTT]&lt;a href=&#34;https://youtu.be/7_3qbou_keg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/1_ESP32CAM_AWSMQTT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | How to install Mosquitto Broker on Amazon EC2]&lt;a href=&#34;https://youtu.be/SDrkv2hUzAc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/0_AWS_Mosquitto_Test&#34;&gt;[Template Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL7 = My Shortcuts for Windows 10 = (ft. BLE HID Keyboard)]&lt;a href=&#34;https://youtu.be/EWKAyQBdcYM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/MyShortcuts_LVGL7&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Multi-Touch Test(ft. FT6236)]&lt;a href=&#34;https://youtu.be/8sp4LKYSdEk&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MultiTouch_FT6236/GetTouchEvent&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | Android(Flutter App) Wired Communication - Base64 Encoding/Decoding [2/2]]&lt;a href=&#34;https://youtu.be/-jygTxRmroA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/WIRED_ESP32_CAM_with_FlutterApp/Part.2_FlutterAppForSerialCam&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | Android(Flutter App) Wired Communication - Baud Rate Test [1/2]]&lt;a href=&#34;https://youtu.be/Mod9gX7NWA8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/WIRED_ESP32_CAM_with_FlutterApp/Part.1_BaudRateTest&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[What&#39;s different TTGO T-Camera Plus vs ESP32CAM AI-THINKER?]&lt;a href=&#34;https://youtu.be/ixtT7kt4YdI&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_TTGO/TTGO_T-Camera/CameraWebServerForTCamera&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[GY-BNO055 | Ep.0: Connecting with ESP32 TTGO via I2C (ft. Heading Direction)]&lt;a href=&#34;https://youtu.be/dgCpOPEA6ZM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_TTGO/GY-BNO055/TTGO_GY-BNO055_Heading&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Walkie-Talkie based on Node.js Server for multi-clients (ft. PCM speaker)]&lt;a href=&#34;https://youtu.be/vq7mPgecGKA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_TTGO/Walkie-Talkie_Project/Server_NodeJS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Walkie-Talkie, Half-duplex communication based on WebSocket]&lt;a href=&#34;https://youtu.be/kw30vLdrGE8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/Walkie-Talkie_Project&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Wireless Wiretap System using 2x ESP32, INMP441 &amp;amp; MAX98357A]&lt;a href=&#34;https://youtu.be/5q5a5pee4ZQ&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/Wiretap_INMP441_MAX98357A_via_websocket&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Bluetooth LE Secure Server for multi clients (ft. PassKey)]&lt;a href=&#34;https://youtu.be/TwexLJwdLEw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/BLE_Secure_Server&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32TTGO - Battery Indicator 🔋⚡]&lt;a href=&#34;https://youtu.be/osAOdmZuvDc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/TTGO_Battery_Indicator&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32TTGO | INMP441 - Drawing a meter bar for sound level display (ft. TFT_eFEX)]&lt;a href=&#34;https://youtu.be/IqXVAG8ssjg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/INMP441_MeterBarForSoundLevel&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32TTGO x ESP32CAM] Which One Is Faster? RGB565 vs. JPEG (ft. Dedicated JPEG Decoder)]&lt;a href=&#34;https://youtu.be/aD3C-mGh7I8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/ESP32CAM_WiFi_Direct_v2_Faster&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32TTGO x ESP32CAM] Wi-Fi Direct! Output images of ESP32CAM to TTGO display. (ft. WebSocket)]&lt;a href=&#34;https://youtu.be/OdEmfRKDJts&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/ESP32CAM_WiFi_Direct&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32 TTGO] My hardware key to operate my app (Ep.2/2 - Completing App)]&lt;a href=&#34;https://youtu.be/aGuBQSU2oMs&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/my_hardware_key_demo_app&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32 TTGO] Getting Started! #StartingLine #BasicSetup (ft. Image Animation)]&lt;a href=&#34;https://youtu.be/Bl1C7Vdl3GA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/AnimationImage&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Toy Camera = ESP32CAM + ILI9488 + LVGL7 | Part 2, LVGL Configure #ESP32CAM #TOYCAM]&lt;a href=&#34;https://youtu.be/K4VEvUVOkG0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_TOY_CAMERA/PART2&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Toy Camera = ESP32CAM + ILI9488 + LVGL7 | Part 1, Live Feed Display #ESP32CAM #TOYCAM]&lt;a href=&#34;https://youtu.be/K5Tr0AjK-Uc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_TOY_CAMERA/PART1&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | MPU6050 | MahonyAHRS - Adding BLE module(ft. String vs Float)]&lt;a href=&#34;https://youtu.be/lpnG7K0-E88&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_MPU6050_MahonyARHS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | MPU6050 - Using MahonyAHRS (ft. dice)]&lt;a href=&#34;https://youtu.be/UgROd5juFtM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_MPU6050_MahonyARHS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE HID - Camera Shutter App for the smartphone [Part. 3/3 ADD BLE HID]]&lt;a href=&#34;https://youtu.be/I6rlpXpBimc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ESP-IDF_Camera_Timer_For_Smartphone_LVGL7/Part.3/camera_timer_ble_hid&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE HID - Camera Shutter App for the smartphone [Part. 2/3 UI Design in LVGL]]&lt;a href=&#34;https://youtu.be/IQsND5MwSEQ&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ESP-IDF_Camera_Timer_For_Smartphone_LVGL7/Part.2/camera_timer_ble_hid&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE HID - Camera Shutter App for the smartphone [Part. 1/3 LVGL on ESP-IDF]]&lt;a href=&#34;https://youtu.be/7-QiGUAWkys&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ESP-IDF_Camera_Timer_For_Smartphone_LVGL7/Part.1/camera_timer_ble_hid&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[💬Chat App | ESP32 + ESP-NOW + LVGL7 | Part 2/2 - ESP-NOW bidirectional Comm (Primary - Secondary) ]&lt;a href=&#34;https://youtu.be/Kpqz00_IzTc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ChatApp_LVGL7/Step_2_ESP-NOW&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[💬Chat App | ESP32 + ESP-NOW + LVGL7 | Part 1/2 - LVGL UI Layout]&lt;a href=&#34;https://youtu.be/zRLQPF5417Y&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ChatApp_LVGL7/Step_1_UI&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Dynamic WIFI configuration GUI using LVGL7.x]&lt;a href=&#34;https://youtu.be/AvJms6_Pf_o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/DynamicWIFIConnector_LVGL7&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.10] Multiple CAM Secure Dashboard (ft. HTTPS, WSS)🔒]&lt;a href=&#34;https://youtu.be/mxfj5Jg206A&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_MULTICAM/Part.10-Multiple_CAM_Dashboard_with_HTTPS_WSS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.9] Multiple CAM Dashboard With New Features (ft. ⏯️🔴💾)]&lt;a href=&#34;https://youtu.be/ba9NLj0FKRU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_MULTICAM/Part.9-Multiple_CAM_Dashboard_with_new_features&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.8] Multiple CAM Dashboard (ft. Modified Jpeg Header)]&lt;a href=&#34;https://youtu.be/rTY2Ibk-gco&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_MULTICAM/Part.8-Multiple_CAM_Dashboard&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLUETOOTH CLASSIC | FLUTTER - Generate your own QR code and display it on the SSD1351🔲]&lt;a href=&#34;https://youtu.be/7HLh-7vONT4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32_SSD1351_QR_BT_SERIAL&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLUETOOTH CLASSIC | FLUTTER - &lt;em&gt;Realtime&lt;/em&gt; Audio Recorder🗣️🎙️(ft. INMP441)]&lt;a href=&#34;https://youtu.be/AFGC9iYBxFQ&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32_INMP441_BT_SERIAL&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | BLUETOOTH CLASSIC | FLUTTER - TWO-WAY Serial BT Communication (ft. uint8_t* buffer)🖼️]&lt;a href=&#34;https://youtu.be/Fl3tDWzTWk8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32CAM_BT_SERIAL&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLUETOOTH CLASSIC | FLUTTER - Let&#39;s build BT Serial based on the examples. (Ft. Chat App)]&lt;a href=&#34;https://youtu.be/WUw-_X66dLE&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32_BLUETOOTH_SERIAL_DEMO&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | INMP441 - Doorbell🚪🔔 Project Rev.1 (Ft. Telegram)]&lt;a href=&#34;https://youtu.be/Fj21iHHUvf4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_DOORBELL/Rev.1&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.5] Speech-to-Text Powered by Google Cloud machine learning]&lt;a href=&#34;https://youtu.be/RZVzZfndIS0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_SPEECH_TO_TEXT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.4] Capturing audio from i2s mic to save WAV file (I2S interface)]&lt;a href=&#34;https://youtu.be/qmruNKeIN-o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_RECORDING&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Flutter | Tutorial - [Part.3] App for Sound Level Meter Viewer (ft. BLE Client)]&lt;a href=&#34;https://youtu.be/CcLt-nBLWJU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_FLUTTER_BLE_APP/flutter_app_slm&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.2] Emitting Sound Level Meter through BLE (ft. FreeRTOS)]&lt;a href=&#34;https://youtu.be/F88HRGTiiNw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_SLM_BLE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Introduce - [Part.1] Sound Level Meter]&lt;a href=&#34;https://youtu.be/QREKVWaZLi4&#34;&gt;[Video]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.0] Set up I2S for Microphone]&lt;a href=&#34;https://youtu.be/m8LwPNXqK9o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_SETUP&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LittlevGL | Arduino IDE - [Part.2] By LittlevGL for Simple Note App📝]&lt;a href=&#34;https://youtu.be/PIzMeCShNZA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/SimpleNoteAPP_LVGL6/Part2&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LittlevGL | Arduino IDE - [Part.1] Basic LittlevGL for Simple Note App📝]&lt;a href=&#34;https://youtu.be/dErIWm-IVhc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/SimpleNoteAPP_LVGL6/Part1&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LittlevGL | Arduino IDE - [Part.0] Touch Display Setup for Simple Note App📝]&lt;a href=&#34;https://youtu.be/OXUZEHMFFwc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/SimpleNoteAPP_LVGL6/Part0&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM | Google Vision - [Part.7] AI Camera📷🔥(Image labeling)]&lt;a href=&#34;https://youtu.be/bpCCqerQ56o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_AICamera_Labelling&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM | Flutter App - [Part.6] In wireless directly, a mobile app connecting ESP32CAM (Dash Cam)]&lt;a href=&#34;https://youtu.be/6FUbo9HRCoU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_Dashcam_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM | Tutorial - [Part.5] In wireless directly, connecting ESP32CAM to ESP32 (feat. TFT LCD)]&lt;a href=&#34;https://youtu.be/TfuEI1-YrsA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_WIFI_CONNECT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Flutter | Tutorial - [Part.4] Video Recording with FFmpeg (Baby Monitor)]&lt;a href=&#34;https://youtu.be/Z5vBs8Mk5rA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_Xiaomi_Clone_FLUTTER/flutter_xiaomi_clone_app_ffmpeg&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Flutter | Tutorial - [Part.3] Xiaomi YI Home App Clone (Baby Monitor)]&lt;a href=&#34;https://youtu.be/9GyOTlOGjSA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_Xiaomi_Clone_FLUTTER/flutter_xiaomi_clone_app&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.2] World Wide Access to ESP32CAM (feat. GCP)]&lt;a href=&#34;https://youtu.be/CpIkG9N5-JM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_GoogleCloudServer&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.1] Streaming into the local network]&lt;a href=&#34;https://youtu.be/kE0idrJYPII&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_LocalServer&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | FIRESTORE - Dust Sensor, A simple Air Monitor App (Serverless REST API with Firestore)]&lt;a href=&#34;https://youtu.be/Z8ju93IYZ1A&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_dust_sensor_firestore_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - MPU6050, Rotate your 3d object in the app]&lt;a href=&#34;https://youtu.be/FMZO4UTVZBk&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_MPU6050_ble_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Dust Sensor, A simple Air Monitor App (with Graph)]&lt;a href=&#34;https://youtu.be/w6jo2kJanqU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_dust_sensor_ble_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | WIFI | USB SERIAL - UPDATE WIFI CREDENTIALS VIA USB SERIAL (FEAT. UART)]&lt;a href=&#34;https://youtu.be/Be0vYIiJlyg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESp32_Flutter_Android_wifi_credential_update_via_USB&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | USB SERIAL - HOW TO CONNECT THE ESP32 TO THE ANDROID(FLUTTER) USING THE USB CABLE (feat. UART)]&lt;a href=&#34;https://youtu.be/zk0xY88l6Rc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_Flutter_Android_usb_serial_comm&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE | WIFI - HOW TO UPDATE WIFI SSID &amp;amp; PW VIA BLE in ESP32]&lt;a href=&#34;https://youtu.be/-N52wL8xQzM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_wifi_ssid_pw_via_ble&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE | Data --* Server (feat. JoyPad)]&lt;a href=&#34;https://youtu.be/fQz7aajslJc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_Flutter_JoyPad&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Local Notification]&lt;a href=&#34;https://youtu.be/a71xc5Dm8xU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_Flutter_BLE_LocalNoti&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE | SERVER - CLIENT]&lt;a href=&#34;https://youtu.be/jcGIA99V0c0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_BLE_to_BLE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Ultrasonic Range Finder with 1.5inch OLED, Part 2]&lt;a href=&#34;https://youtu.be/s_BTQveXpwY&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_ultrasonic_range_finder&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Ultrasonic Range Finder with 1.5inch OLED, Part 1]&lt;a href=&#34;https://youtu.be/sTaa4bGqVwc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_ultrasonic_range_finder/Esp32_Ultrasonic_module&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Flutter | FIREBASE - Flutter application with ESP32 to get the sensor data through FIREBASE realtime DB]&lt;a href=&#34;https://youtu.be/nVrACWPXi8g&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_Flutter_firebase_DHT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Flutter | Ble - Flutter application with ESP32 to get the sensor data through BLE]&lt;a href=&#34;https://youtu.be/13voX5Y9fTc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_temperature_humidity_ble_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Project - Temperature &amp;amp; Humidity Check App with 1.5inch OLED SSD1351 and DHT11]&lt;a href=&#34;https://youtu.be/TF4Dm8Lq7Pc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_temperature_humidity&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Project - Hardware SPI vs Software SPI with SSD1351]&lt;a href=&#34;https://youtu.be/COPe5fKlkqA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_display_ssd1351_jpeg&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Project - Fast Jpeg images in 3.2-inch TFT LCD (ILI9341)]&lt;a href=&#34;https://youtu.be/4eD6recBq4M&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_jpeg&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NodeMCU(ESP8266) Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLnq7JUnBumAxh2Sr-vKQYxeyW7a6qje7x&#34;&gt;Youtube NodeMCU(ESP8266) Project&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Twitter Hash Search Application with #️⃣NodeMCU(ESP8266) #️⃣ILI9341]&lt;a href=&#34;https://youtu.be/lhOlv6Y4_vw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_Twitter_Hash_Search&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[FIREBASE | FLUTTER | Stream builder from Realtime DB to Flutter(iOS, Android)]&lt;a href=&#34;https://youtu.be/uoQtH2IYBCU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/FIREBASE/STREAMING_FROM_ESP_TO_FLUTTER/flutter_realtime_dht11&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[FIREBASE | Streaming from ESP32 to ESP8266(Ft. DHT11 - Temperature, Humidity &amp;amp; Heat Index)]&lt;a href=&#34;https://youtu.be/-iKCn9lTD2Q&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/FIREBASE/STREAMING_FROM_ESP32_TO_ESP8266&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP-NOW | Communication between NodeMCU(ESP8266) as [Master] and two ESP32 as [Slave]]&lt;a href=&#34;https://youtu.be/F_h22AXZ7ts&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESPNOW/ESPNOW_ESP8266_MASTER_ESP32_SLAVE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NodeMCU(ESP8266) | GPS | CSV Data Logging - GPS Tracker (feat. GPS Visualizer)🛰️]&lt;a href=&#34;https://youtu.be/edD3X6KG8AE&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_GPS_DATA_LOG/ESP8266_GPS_TRACKER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NodeMCU(ESP8266) | GPS | ILI9488 - Showing Google Map with Device Position on Display🗺️]&lt;a href=&#34;https://youtu.be/lQ157ftTnSs&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_GOOGLEMAP_GPS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NodeMCU(ESP8266) | GPS | ILI9488 - Showing the Latitude and Longitude on Display]&lt;a href=&#34;https://youtu.be/9wrHhbfYFXg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_BASIC_GPS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Created &amp;amp; Maintained By&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0015&#34;&gt;Eric Nam&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/ThatProject&#34;&gt;Youtube&lt;/a&gt;) (&lt;a href=&#34;https://www.facebook.com/groups/138965931539175&#34;&gt;Facebook&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2019 - 2022 Eric N&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>