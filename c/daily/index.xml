<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-13T01:30:32Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NixOS/patchelf</title>
    <updated>2023-04-13T01:30:32Z</updated>
    <id>tag:github.com,2023-04-13:/NixOS/patchelf</id>
    <link href="https://github.com/NixOS/patchelf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small utility to modify the dynamic linker and RPATH of ELF executables&lt;/p&gt;&lt;hr&gt;&lt;p&gt;PatchELF is a simple utility for modifying existing ELF executables and libraries. In particular, it can do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the dynamic loader (&#34;ELF interpreter&#34;) of executables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --set-interpreter /lib/my-ld-linux.so.2 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the &lt;code&gt;RPATH&lt;/code&gt; of executables and libraries:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --set-rpath /opt/my-libs/lib:/other-libs my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shrink the &lt;code&gt;RPATH&lt;/code&gt; of executables and libraries:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --shrink-rpath my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This removes from the &lt;code&gt;RPATH&lt;/code&gt; all directories that do not contain a library referenced by &lt;code&gt;DT_NEEDED&lt;/code&gt; fields of the executable or library. For instance, if an executable references one library &lt;code&gt;libfoo.so&lt;/code&gt;, has an RPATH &lt;code&gt;/lib:/usr/lib:/foo/lib&lt;/code&gt;, and &lt;code&gt;libfoo.so&lt;/code&gt; can only be found in &lt;code&gt;/foo/lib&lt;/code&gt;, then the new &lt;code&gt;RPATH&lt;/code&gt; will be &lt;code&gt;/foo/lib&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In addition, the &lt;code&gt;--allowed-rpath-prefixes&lt;/code&gt; option can be used for further rpath tuning. For instance, if an executable has an &lt;code&gt;RPATH&lt;/code&gt; &lt;code&gt;/tmp/build-foo/.libs:/foo/lib&lt;/code&gt;, it is probably desirable to keep the &lt;code&gt;/foo/lib&lt;/code&gt; reference instead of the &lt;code&gt;/tmp&lt;/code&gt; entry. To accomplish that, use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --shrink-rpath --allowed-rpath-prefixes /usr/lib:/foo/lib my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove declared dependencies on dynamic libraries (&lt;code&gt;DT_NEEDED&lt;/code&gt; entries):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --remove-needed libfoo.so.1 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This option can be given multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a declared dependency on a dynamic library (&lt;code&gt;DT_NEEDED&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --add-needed libfoo.so.1 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This option can be give multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace a declared dependency on a dynamic library with another one (&lt;code&gt;DT_NEEDED&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --replace-needed liboriginal.so.1 libreplacement.so.1 my-program&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This option can be give multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change &lt;code&gt;SONAME&lt;/code&gt; of a dynamic library:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ patchelf --set-soname libnewname.so.3.4.5 path/to/libmylibrary.so.1.2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling and Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Via Autotools&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./bootstrap.sh&#xA;./configure&#xA;make&#xA;make check&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via Nix&lt;/h3&gt; &#xA;&lt;p&gt;You can build with Nix in several ways.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Building via &lt;code&gt;nix build&lt;/code&gt; will produce the result in &lt;code&gt;./result/bin/patchelf&lt;/code&gt;. If you would like to build &lt;em&gt;patchelf&lt;/em&gt; with &lt;em&gt;musl&lt;/em&gt; try &lt;code&gt;nix build .#patchelf-musl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can launch a development environment with &lt;code&gt;nix develop&lt;/code&gt; and follow the autotools steps above. If you would like to develop with &lt;em&gt;musl&lt;/em&gt; try &lt;code&gt;nix develop .#musl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2004-2019 Eelco Dolstra &lt;a href=&#34;mailto:edolstra@gmail.com&#34;&gt;edolstra@gmail.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>plasma-umass/sqlwrite</title>
    <updated>2023-04-13T01:30:32Z</updated>
    <id>tag:github.com,2023-04-13:/plasma-umass/sqlwrite</id>
    <link href="https://github.com/plasma-umass/sqlwrite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQLwrite: AI in your DBMS! Automatically converts natural language queries to SQL.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQLwrite&lt;/h1&gt; &#xA;&lt;p&gt;by &lt;a href=&#34;https://emeryberger.com&#34;&gt;Emery Berger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Integrates AI into your database: automatically converts natural language queries into SQL, and then runs the SQL query. As far as we are aware, this is the first integration of LLMs to enable natural language queries into a production database manager. Currently works as an extension to SQLite3, more to come!&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;These example queries use a &lt;a href=&#34;https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite&#34;&gt;large SQLite database with multiple tables&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Basic queries&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./sqlite3 Chinook_Sqlite.sqlite&#xA;sqlite&amp;gt; select ask(&#39;show me the total invoiced for all artists.&#39;);&#xA;2328.6&#xA;(SQLwrite translation to SQL: SELECT sum(Invoice.Total) FROM Invoice;;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queries with JOINs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; select ask(&#39;show me the total invoiced for all artists whose last name starts with &#34;S&#34;&#39;);&#xA;306.98&#xA;(SQLwrite translation to SQL: SELECT SUM(Invoice.Total) as total_invoiced    FROM Invoice        JOIN Customer ON Invoice.CustomerId = Customer.CustomerId    WHERE Customer.LastName LIKE &#39;S%&#39;;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Complex query synthesis with multiple JOINs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; select ask(&#39;give me a list of all artists (with no duplicates) whose genre is reggae&#39;);&#xA;Cidade Negra&#xA;Lenny Kravitz&#xA;UB40&#xA;(SQLwrite translation to SQL: SELECT DISTINCT Artist.Name     FROM Artist    JOIN Album ON Artist.ArtistId = Album.ArtistId    JOIN Track ON Album.AlbumId = Track.AlbumId    JOIN Genre ON Track.GenreId = Genre.GenreId    WHERE Genre.Name = &#39;Reggae&#39;;;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Natural languages besides English!&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; select ask(&#39;Haz una lista de todos los artistas cuyos nombres empiezan con la letra L&#39;);&#xA;Led Zeppelin&#xA;Luiz Melodia&#xA;Legi√£o Urbana&#xA;Lenny Kravitz&#xA;Lulu Santos&#xA;Lost&#xA;Los Lonely Boys&#xA;Los Hermanos&#xA;Luciana Souza/Romero Lubambo&#xA;London Symphony Orchestra &amp;amp; Sir Charles Mackerras&#xA;Luciano Pavarotti&#xA;Leonard Bernstein &amp;amp; New York Philharmonic&#xA;Les Arts Florissants &amp;amp; William Christie&#xA;(SQLwrite translation to SQL: SELECT Name FROM Artist WHERE Name LIKE &#39;L%&#39;;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download and run &lt;code&gt;make&lt;/code&gt;. Currently Mac and Linux only. You may need to install the &lt;code&gt;curl&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libcurl4-gnutls-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Either use the built-in SQLite (if it was built to allow extensions), or run the generated &lt;code&gt;sqlite3&lt;/code&gt; file on your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./sqlite3 my_database.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run the following command to load the SQLwrite extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;select load_extension(&#34;the_path_to_your_sqlwrite_directory/sqlwrite&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.load the_path_to_your_sqlwrite_directory/sqlwrite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now issue English language queries by using the &lt;code&gt;ask&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT ask(&#39;(whatever you want)&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;SQLwrite includes SQLite3 (&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;https://www.sqlite.org/index.html&lt;/a&gt;), and is built with the assistance of several excellent libraries, whose code is (for now) included in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/olrea/openai-cpp&#34;&gt;https://github.com/olrea/openai-cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;https://github.com/nlohmann/json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fmt.dev/latest/index.html&#34;&gt;https://fmt.dev/latest/index.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>