<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-07T01:30:25Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wh04m1001/SysmonEoP</title>
    <updated>2022-12-07T01:30:25Z</updated>
    <id>tag:github.com,2022-12-07:/Wh04m1001/SysmonEoP</id>
    <link href="https://github.com/Wh04m1001/SysmonEoP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SysmonEoP&lt;/h1&gt; &#xA;&lt;p&gt;Proof of Concept for arbitrary file delete/write in Sysmon (CVE-2022-41120/CVE-2022-XXXXX)&lt;/p&gt; &#xA;&lt;h1&gt;Vulnerability&lt;/h1&gt; &#xA;&lt;p&gt;Vulnerability is in code responsible for ClipboardChange event that can be reached through RPC. Local users can send data to RPC server which will then be written in C:\Sysmon directory (default ArchiveDirectory) and deleted afterwards. In version before 14.11 Sysmon would not check if directory was created by low privilege user or if it&#39;s a junction which can be abused to perform arbitrary file delete/write (kinda limited as you can only write strings) in context of NT AUTHORITY\SYSTEM user. In version 14.11/14.12, after initial fix, Sysmon would check if directory exists and would refuse to write/delete files if directory exists. This patch was bypassed by letting Sysmon create C:\Sysmon directory first (using CreateDirectory API) and opening handle on it before SetFileSecurity is called and change DACL&#39;s on C:\Sysmon directory.&lt;/p&gt; &#xA;&lt;h1&gt;Exploitation&lt;/h1&gt; &#xA;&lt;p&gt;All testing was done on Windows 10.&lt;/p&gt; &#xA;&lt;p&gt;In my PoC I have chained arbitrary file delete/write to first delete setup information file of printer driver and then write modified .INF file (as spooler service is enabled by default and low privilege users can re-install printer drivers on windows clients). Setup information files can be abused to perform all kind of operations such service creation, registry modification, file copy etc. I choose to copy some of printer default DLL&#39;s in c:\windows\system32 and set permissions on it so that low privilege users can modify it, this is done using CopyFiles directive (&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/install/inf-copyfiles-directive&#34;&gt;https://learn.microsoft.com/en-us/windows-hardware/drivers/install/inf-copyfiles-directive&lt;/a&gt;). Once file is copied it is overwritten with DLL that will spawn elevated cmd.exe process. It is possible to abuse just arbitrary file delete for LPE by abusing windows installer behavior (trick found by &lt;a href=&#34;https://twitter.com/KLINIX5&#34;&gt;@KLINIX5&lt;/a&gt; and is documented by ZDI here &lt;a href=&#34;https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks&#34;&gt;https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Vulnerable versions and pre-requirements&lt;/h1&gt; &#xA;&lt;p&gt;All testing was done on versions 13.34-14.12. I donâ€™t know exactly lowest version that is vulnerable, but I believe that versions 12.0 - 14.12 are vulnerable as ClipboardChange event was introduced in version 12.0. In order to exploit this vulnerability events that use ArchiveDirectory should not be enabled (ClipboardChange and FileDelete I believe) as if those two are used then ArchiveDirectory will be created and have secure permissions.&lt;/p&gt; &#xA;&lt;h1&gt;Workaround&lt;/h1&gt; &#xA;&lt;p&gt;If you are using vulnerable version and cannot update you can create ArchiveDirectory (C:\Sysmon by default) and set permissions that will only allow access to NT AUTHORITY\SYSTEM account.&lt;/p&gt; &#xA;&lt;h1&gt;Timeline&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2022/06/13 - Vulnerability reported to Microsoft&lt;/li&gt; &#xA; &lt;li&gt;2022/06/16 - Vulnerability confirmed.&lt;/li&gt; &#xA; &lt;li&gt;2022/11/08 - Patch and CVE released.&lt;/li&gt; &#xA; &lt;li&gt;2022/11/08 - Bypass reported to Microsoft.&lt;/li&gt; &#xA; &lt;li&gt;2022/11/11 - Microsoft cannot reproduce vulnerability, asks for different PoC.&lt;/li&gt; &#xA; &lt;li&gt;2022/11/11 - I send same PoC and suggest that sysmon is either not installed on testing VM or installation was corrupted.&lt;/li&gt; &#xA; &lt;li&gt;2022/11/15 - Microsoft confirmed bypass.&lt;/li&gt; &#xA; &lt;li&gt;2022/11/28 - Microsoft release v14.13 that patched vulnerabilty (CVE will be released in December Patch Tuesday)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Links &amp;amp; Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itm4n.github.io/fuzzing-windows-rpc-rpcview/&#34;&gt;https://itm4n.github.io/fuzzing-windows-rpc-rpcview/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks&#34;&gt;https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apache/age</title>
    <updated>2022-12-07T01:30:25Z</updated>
    <id>tag:github.com,2022-12-07:/apache/age</id>
    <link href="https://github.com/apache/age" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Graph database optimized for fast analysis and real-time data processing. It is provided as an extension to PostgreSQL.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; &#34; height=&#34;30% alt=&#34; Apache AGE&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://age.apache.org/age-manual/master/_static/logo.png&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; is a leading multi-model graph database &lt;/h3&gt;  &#xA;&lt;h3 align=&#34;center&#34;&gt;Graph Processing &amp;amp; Analytics for Relational Databases&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/apache/age/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Release-v1.1.0-FFA500?labelColor=gray&amp;amp;style=flat&amp;amp;link=https://github.com/apache/age/releases&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/network/members&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/apache/age/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/apache/age&#34;&gt; &lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://discord.gg/NMsBs9X8Ss&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1022177873127280680.svg?label=discord&amp;amp;style=flat&amp;amp;color=5a66f6&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/AGE.png&#34;&gt;&amp;nbsp;&amp;nbsp;What is Apache AGE?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://age.apache.org/#&#34;&gt;Apache AGE&lt;/a&gt; is an extension for PostgreSQL that enables users to leverage a graph database on top of the existing relational databases. AGE is an acronym for A Graph Extension and is inspired by Bitnine&#39;s AgensGraph, a multi-model database fork of PostgreSQL. The basic principle of the project is to create a single storage that handles both the relational and graph data model so that the users can use the standard ANSI SQL along with openCypher, one of the most popular graph query languages today. &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/age-01.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Since AGE is based on the powerful PostgreSQL RDBMS, it is robust and fully featured. AGE is optimized for handling complex connected graph data. It provides plenty of robust databases features essential to the database environment, including ACID transactions, multi-version concurrency control (MVCC), stored procedure, triggers, constraints, sophisticated monitoring, and a flexible data model (JSON). Users with a relational background who require graph data analytics can use this extension with minimal effort because they can use existing data without having to go through migration.&lt;/p&gt; &#xA;&lt;p&gt;There is a strong need for cohesive, easy-to-implement multi-model databases. As an extension of PostgreSQL, AGE supports all the functionalities and features of PostgreSQL while also offering a graph model to boot.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/tick.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Apache AGE is :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful&lt;/strong&gt;: adds graph database support to the already popular PostgreSQL database: PostgreSQL is used by organizations including Apple, Spotify, and NASA.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: allows you to perform openCypher queries, which makes complex queries much easier to write. It also enables multiple graphs at the same time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intelligent&lt;/strong&gt;: allows you to perform graph queries that are the basis for many next-level web services such as fraud detection, master data management, product recommendations, identity and relationship management, experience personalization, knowledge management, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/features.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Features&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/age-03.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cypher Query&lt;/strong&gt;: supports graph query language&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hybrid Querying&lt;/strong&gt;: enables SQL and/or Cypher&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Querying&lt;/strong&gt;: enables multiple graphs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hierarchical&lt;/strong&gt;: graph label organization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Property Indexes&lt;/strong&gt;: on both vertices(nodes) and edges&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full PostgreSQL&lt;/strong&gt;: supports PG features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/documentation.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Refer to our latest &lt;a href=&#34;https://age.apache.org/age-manual/master/index.html&#34;&gt;Apache AGE documentation&lt;/a&gt; to learn about installation, features, built-in functions, and Cypher queries.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/installation.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Pre-Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the following essential libraries according to each OS. Building AGE from the source depends on the following Linux libraries (Ubuntu package names shown below):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CentOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install gcc glibc glib-common readline readline-devel zlib zlib-devel flex bison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fedora&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install gcc glibc bison flex readline readline-devel zlib zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/installation.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Apache AGE is intended to be simple to install and run. It can be installed with Docker and other traditional ways.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a&gt;&lt;img width=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/pg.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp;Install PosgtreSQL &lt;/h4&gt; &#xA;&lt;p&gt;You will need to install an AGE compatible version of Postgres&lt;a&gt;, for now AGE supports Postgres 11 and 12. Supporting the latest versions is on AGE roadmap.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a&gt; &lt;h4&gt; &amp;nbsp;Install From Package Manager &lt;/h4&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a&gt;You can use a &lt;/a&gt;&lt;a href=&#34;https://www.postgresql.org/download/&#34;&gt;package management &lt;/a&gt; that your OS provides to download AGE.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install postgresql &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt; &amp;nbsp;Install From Source Code &lt;/h4&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://www.postgresql.org/ftp/source/&#34;&gt; download the Postgres &lt;/a&gt; source code and install your own instance of Postgres. You can read instructions on how to install from source code for different versions on the &lt;a href=&#34;https://www.postgresql.org/docs/11/installation.html&#34;&gt;offical Postgres Website.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;img width=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/tux.svg?sanitize=true&#34;&gt;&lt;img width=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/apple.svg?sanitize=true&#34;&gt; &amp;nbsp;Install AGE on Linux and MacOS &lt;/h4&gt; &#xA;&lt;p&gt;Clone the &lt;a href=&#34;https://github.com/apache/age&#34;&gt;github repository&lt;/a&gt; or download the&lt;a href=&#34;https://github.com/apache/age/releases&#34;&gt;download an official release. &lt;/a&gt; Run the pg_config utility and check the version of PostgreSQL. Currently, only PostgreSQL versions 11 &amp;amp; 12 are supported. If you have any other version of Postgres, you will need to install PostgreSQL version 11 &amp;amp; 12. &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pg_config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command in the source code directory of Apache AGE to build and install the extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the path to your Postgres installation is not in the PATH variable, add the path in the arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make PG_CONFIG=/path/to/postgres/bin/pg_config install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;img width=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/docker.svg?sanitize=true&#34;&gt; &amp;nbsp;Run using Docker &lt;/h4&gt; &#xA;&lt;h5&gt; Get the docker image &lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull apache/age&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt; Create AGE docker container &lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;    --name age  \&#xA;    -p 5455:5432 \&#xA;    -e POSTGRES_USER=postgresUser \&#xA;    -e POSTGRES_PASSWORD=postgresPW \&#xA;    -e POSTGRES_DB=postgresDB \&#xA;    -d \&#xA;    apache/age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/contents.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Post Installation&lt;/h2&gt; &#xA;&lt;p&gt;For every connection of AGE you start, you will need to load the AGE extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CREATE EXTENSION age;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LOAD &#39;age&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SET search_path = ag_catalog, &#34;$user&#34;, public;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/contents.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To create a graph, use the create_graph function located in the ag_catalog namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;create_graph(graph_name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a single vertex, use the CREATE clause.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    CREATE (n)&#xA;$$) as (v agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a single vertex with the label, use the CREATE clause.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    CREATE (:label)&#xA;$$) as (v agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To query the graph, you can use the MATCH clause.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * FROM cypher(&#39;graph_name&#39;, $$&#xA;MATCH (v)&#xA;RETURN v&#xA;$$) as (v agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the following to create an edge, for example, between two nodes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    MATCH (a:lable), (b:lable)&#xA;    WHERE a.property = &#39;Node A&#39; AND b.property = &#39;Node B&#39;&#xA;    CREATE (a)-[e:RELTYPE]-&amp;gt;(b)&#xA;    RETURN e&#xA;$$) as (e agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create an edge and set properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    MATCH (a:label), (b:label)&#xA;    WHERE a.property = &#39;Node A&#39; AND b.property = &#39;Node B&#39;&#xA;    CREATE (a)-[e:RELTYPE {property:a.property + &#39;&amp;lt;-&amp;gt;&#39; + b.property}]-&amp;gt;(b)&#xA;    RETURN e&#xA;$$) as (e agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SELECT * &#xA;FROM cypher(&#39;graph_name&#39;, $$&#xA;    MATCH (a:Person), (b:Person)&#xA;    WHERE a.name = &#39;Node A&#39; AND b.name = &#39;Node B&#39;&#xA;    CREATE (a)-[e:RELTYPE {name:a.name + &#39;&amp;lt;-&amp;gt;&#39; + b.name}]-&amp;gt;(b)&#xA;    RETURN e&#xA;$$) as (e agtype);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/gettingstarted.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Language Specific Drivers&lt;/h2&gt; &#xA;&lt;p&gt;Starting with Apache AGE is very simple. You can easily&amp;nbsp;select&amp;nbsp;your platform and incorporate&amp;nbsp;the relevant SDK into your code. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/age-02.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Built-in&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/golang&#34;&gt;Go driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/jdbc&#34;&gt;Java driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/nodejs&#34;&gt;NodeJs driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/age/master/drivers/python&#34;&gt;Python driver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Community-driven Driver&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dzordzu/rust-apache-age.git&#34;&gt;Apache AGE Rust Driver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/contributing.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join the AGE community for help, questions, discussions, and contributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check our &lt;a href=&#34;https://age.apache.org/&#34;&gt;website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat live with us on &lt;a href=&#34;https://discord.com/invite/NMsBs9X8Ss/&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://twitter.com/apache_age?s=20&amp;amp;t=7Hu8Txk4vjvuEp-ryakacg&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://lists.apache.org/list.html?dev@age.apache.org&#34;&gt;Dev community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/visualization.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Graph Visualization Tool for AGE&lt;/h2&gt; &#xA;&lt;p&gt;Apache AGE Viewer is a user interface for Apache AGE that provides visualization and exploration of data. This web visualization tool allows users to enter complex graph queries and explore the results in graph and table forms. Apache AGE Viewer is enhanced to proceed with extensive graph data and discover insights through various graph algorithms. Apache AGE Viewer will become a graph data administration and development platform for Apache AGE to support multiple relational databases: &lt;a href=&#34;https://github.com/apache/age-viewer&#34;&gt;https://github.com/apache/age-viewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a visualization tool.&lt;/strong&gt; After installing AGE Extension, you may use this tool to get access to the visualization features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/age/master/img/agce.gif&#34; alt=&#34;Viewer gdb, and graph&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img height=&#34;20&#34; src=&#34;https://raw.githubusercontent.com/apache/age/master/img/community.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can improve ongoing efforts or initiate new ones by sending pull requests to &lt;a href=&#34;https://github.com/apache/age&#34;&gt;this repository&lt;/a&gt;. Also, you can learn from the code review process, how to merge pull requests, and from code style compliance to documentation by visiting the &lt;a href=&#34;https://age.apache.org/contribution/guide&#34;&gt;Apache AGE official site - Developer Guidelines&lt;/a&gt;. Send all your comments and inquiries to the user mailing list, &lt;a href=&#34;mailto:users@age.apache.org&#34;&gt;users@age.apache.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheWover/donut</title>
    <updated>2022-12-07T01:30:25Z</updated>
    <id>tag:github.com,2022-12-07:/TheWover/donut</id>
    <link href="https://github.com/TheWover/donut" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generates x86, x64, or AMD64+x86 position-independent shellcode that loads .NET Assemblies, PE files, and other Windows payloads from memory and runs them with parameters&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/TheWover/donut/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/thewover/donut&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheWover/donut/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/thewover/donut&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheWover/donut/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/thewover/donut&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheWover/donut/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/thewover/donut&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/thewover/donut&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bloodhoundgang.herokuapp.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%23donut-orange&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.somsubhra.com/github-release-stats/?username=thewover&amp;amp;repository=donut&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/thewover/donut/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=https://github.com/TheWover/donut&amp;amp;text=%23Donut+An+open-source+shellcode+generator+that+supports+in%2Dmemory+execution+of+VBS%2FJS%2FEXE%2FDLL+files:+https://github.com/TheWover/donut&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Twitter URL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/TheWover/donut/raw/master/img/donut_logo_white.jpg?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Donut Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Current version: &lt;a href=&#34;https://thewover.github.io/TBD/&#34;&gt;v0.9.3&lt;/a&gt; &lt;em&gt;please submit issues and requests for v1.0 release&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#how&#34;&gt;How It Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#build&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#subproj&#34;&gt;Subprojects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#dev&#34;&gt;Developing with Donut&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#qad&#34;&gt;Questions and Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheWover/donut/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2 id=&#34;intro&#34;&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Donut&lt;/strong&gt; is a position-independent code that enables in-memory execution of VBScript, JScript, EXE, DLL files and dotNET assemblies. A module created by Donut can either be staged from a HTTP server or embedded directly in the loader itself. The module is optionally encrypted using the &lt;a href=&#34;https://tinycrypt.wordpress.com/2017/02/20/asmcodes-chaskey-cipher/&#34;&gt;Chaskey&lt;/a&gt; block cipher and a 128-bit randomly generated key. After the file is loaded and executed in memory, the original reference is erased to deter memory scanners. The generator and loader support the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compression of input files with aPLib and LZNT1, Xpress, Xpress Huffman via RtlCompressBuffer.&lt;/li&gt; &#xA; &lt;li&gt;Using entropy for API hashes and generation of strings.&lt;/li&gt; &#xA; &lt;li&gt;128-bit symmetric encryption of files.&lt;/li&gt; &#xA; &lt;li&gt;Patching Antimalware Scan Interface (AMSI) and Windows Lockdown Policy (WLDP).&lt;/li&gt; &#xA; &lt;li&gt;Patching command line for EXE files.&lt;/li&gt; &#xA; &lt;li&gt;Patching exit-related API to avoid termination of host process.&lt;/li&gt; &#xA; &lt;li&gt;Multiple output formats: C, Ruby, Python, PowerShell, Base64, C#, Hexadecimal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are dynamic and static libraries for both Linux and Windows that can be integrated into your own projects. There&#39;s also a python module which you can read more about in &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/docs/2019-08-21-Python_Extension.md&#34;&gt;Building and using the Python extension.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 id=&#34;how&#34;&gt;2. How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Donut contains individual loaders for each supported file type. For dotNET EXE/DLL assemblies, Donut uses the Unmanaged CLR Hosting API to load the Common Language Runtime. Once the CLR is loaded into the host process, a new Application Domain is created to allow for running Assemblies in disposable AppDomains. When the AppDomain is ready, the dotNET Assembly is loaded via the AppDomain.Load_3 method. Finally, the Entry Point for EXEs or public method for DLLs specified by the user is invoked with any additional parameters. Refer to MSDN for documentation on the &lt;a href=&#34; https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clr-hosting-interfaces&#34;&gt;Unmanaged CLR Hosting API.&lt;/a&gt; For a standalone example of a CLR Host, refer to &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/DonutTest/rundotnet.cpp&#34;&gt;code here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;VBScript and JScript files are executed using the IActiveScript interface. There&#39;s also minimal support for some of the methods provided by the Windows Script Host (wscript/cscript). For a standalone example, refer to &lt;a href=&#34;https://gist.github.com/odzhan/d18145b9538a3653be2f9a580b53b063&#34;&gt;code here.&lt;/a&gt; For a more detailed description, read: &lt;a href=&#34;https://modexp.wordpress.com/2019/07/21/inmem-exec-script/&#34;&gt;In-Memory Execution of JavaScript, VBScript, JScript and XSL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unmanaged or native EXE/DLL files are executed using a custom PE loader with support for Delayed Imports, TLS and patching the command line. Only files with relocation information are supported. Read &lt;a href=&#34;https://modexp.wordpress.com/2019/06/24/inmem-exec-dll/&#34;&gt;In-Memory Execution of DLL&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The loader can disable AMSI and WLDP to help evade detection of malicious files executed in-memory. For more information, read &lt;a href=&#34;https://modexp.wordpress.com/2019/06/03/disable-amsi-wldp-dotnet/&#34;&gt;How Red Teams Bypass AMSI and WLDP for .NET Dynamic Code&lt;/a&gt;. It also supports decompression of files in memory using aPLib or the RtlDecompressBuffer API. Read &lt;a href=&#34;https://modexp.wordpress.com/2019/12/08/shellcode-compression/&#34;&gt;Data Compression&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed walkthrough using the generator and how Donut affects tradecraft, read &lt;a href=&#34;https://thewover.github.io/Introducing-Donut/&#34;&gt;Donut - Injecting .NET Assemblies as Shellcode&lt;/a&gt;. For more information about the loader, read &lt;a href=&#34;https://modexp.wordpress.com/2019/05/10/dotnet-loader-shellcode/&#34;&gt;Loading .NET Assemblies From Memory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Those who wish to know more about the internals should refer to &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/docs/devnotes.md&#34;&gt;Developer notes.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 id=&#34;build&#34;&gt;3. Building&lt;/h2&gt; &#xA;&lt;p&gt;There are two types of build. If you want to debug Donut, please refer to &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/docs/devnotes.md&#34;&gt;documentation here&lt;/a&gt;. If not, continue reading for the release build.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Clone&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;From a Windows command prompt or Linux terminal, clone the repository.&lt;/p&gt; &#xA;&lt;pre&gt; &#xA;  git clone http://github.com/thewover/donut.git&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The next step depends on your operating system and what compiler you decide to use. Currently, the generator and loader template for Donut can be compiled successfully with both Microsoft Visual Studio 2019 (Native Tools Command Prompt for VS 2019) and MingGW-64. To use the libraries in your own C/C++ project, please refer to the &lt;a href=&#34;https://github.com/TheWover/donut/tree/master/examples&#34;&gt;examples provided here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To generate the loader template, dynamic library donut.dll, the static library donut.lib and the generator donut.exe. Start an x64 Microsoft Visual Studio Developer Command Prompt, change to the directory where you cloned the Donut repository and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  nmake -f Makefile.msvc&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;To do the same, except using MinGW-64 on Windows or Linux, change to the directory where you cloned the Donut repository and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  make -f Makefile.mingw&#xA;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To generate the dynamic library donut.so, the static library donut.a and the generator donut. Change to the directory where you cloned the Donut repository and simply type make.&lt;/p&gt; &#xA;&lt;h3&gt;Python Module&lt;/h3&gt; &#xA;&lt;p&gt;Donut can be installed and used as a Python module. To install from source requires pip for Python3. First, ensure older versions of donut-shellcode are not installed by issuing the following command on Linux terminal or Microsoft Visual Studio command prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  pip3 uninstall donut-shellcode&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;After you confirm older versions are no longer installed, issue the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  pip3 install .&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;You may also install Donut as a Python module by grabbing it from the PyPi repository.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  pip3 install donut-shellcode&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please refer to &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/docs/2019-08-21-Python_Extension.md&#34;&gt;Building and using the Python extension.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Tags have been provided for each release version of Donut that contain the compiled executables.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheWover/donut/releases/tag/v0.9.3&#34;&gt;v0.9.3, TBD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheWover/donut/releases/tag/v0.9.2&#34;&gt;v0.9.2, Bear Claw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheWover/donut/releases/tag/v0.9.1&#34;&gt;v0.9.1, Apple Fritter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheWover/donut/releases/tag/v0.9&#34;&gt;v0.9.0, Initial Release&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, there are two other generators available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n1xbyte/donutCS&#34;&gt;C# generator by n1xbyte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Binject/go-donut&#34;&gt;Go generator by awgh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;usage&#34;&gt;4. Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following table lists switches supported by the command line version of the generator.&lt;/p&gt; &#xA;&lt;table border=&#34;1&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Switch&lt;/th&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-a&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;arch&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Target architecture for loader : 1=x86, 2=amd64, 3=x86+amd64(default).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-b&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;level&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Behavior for bypassing AMSI/WLDP : 1=None, 2=Abort on fail, 3=Continue on fail.(default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-c&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;class&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional class name. (required for .NET DLL) Can also include namespace: e.g &lt;em&gt;namespace.class&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-d&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;name&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AppDomain name to create for .NET. If entropy is enabled, one will be generated randomly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-e&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;level&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Entropy level. 1=None, 2=Generate random names, 3=Generate random names + use symmetric encryption (default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-f&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;format&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The output format of loader saved to file. 1=Binary (default), 2=Base64, 3=C, 4=Ruby, 5=Python, 6=PowerShell, 7=C#, 8=Hexadecimal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-m&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;name&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional method or function for DLL. (a method is required for .NET DLL)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-n&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;name&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Module name for HTTP staging. If entropy is enabled, one is generated randomly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-o&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;path&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies where Donut should save the loader. Default is &#34;loader.bin&#34; in the current directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-p&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;parameters&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional parameters/command line inside quotations for DLL method/function or EXE.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-r&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;version&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CLR runtime version. MetaHeader used by default or v4.0.30319 if none available.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-s&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;server&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL for the HTTP server that will host a Donut module.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-t&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run the entrypoint of an unmanaged/native EXE as a thread and wait for thread to end.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-w&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Command line is passed to unmanaged DLL function in UNICODE format. (default is ANSI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;option&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines how the loader should exit. 1=exit thread (default), 2=exit process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-y&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;addr&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a new thread for the loader and continues execution at the address of host process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-z&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;var&gt;engine&lt;/var&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pack/Compress the input file. 1=None, 2=aPLib, 3=LZNT1, 4=Xpress, 5=Xpress Huffman. Currently, the last three are only supported on Windows.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3 id=&#34;requirements&#34;&gt;Payload Requirements&lt;/h3&gt; &#xA;&lt;p&gt;There are some specific requirements that your payload must meet in order for Donut to successfully load it.&lt;/p&gt; &#xA;&lt;h3 id=&#34;requirements-dotnet&#34;&gt;.NET Assemblies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The entry point method must only take strings as arguments, or take no arguments.&lt;/li&gt; &#xA; &lt;li&gt;The entry point method must be marked as public and static.&lt;/li&gt; &#xA; &lt;li&gt;The class containing the entry point method must be marked as public.&lt;/li&gt; &#xA; &lt;li&gt;The Assembly must NOT be a Mixed Assembly (contain both managed and native code).&lt;/li&gt; &#xA; &lt;li&gt;As such, the Assembly must NOT contain any Unmanaged Exports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3 id=&#34;requirements-native&#34;&gt;Native EXE/DLL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binaries built with Cygwin are unsupported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cygwin executables use initialization routines that expect the host process to be running from disk. If executing from memory, the host process will likely crash.&lt;/p&gt; &#xA;&lt;h3 id=&#34;requirements-dotnet&#34;&gt;Unmanaged DLLs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A user-specified entry point method must only take a string as an argument, or take no arguments. We have provided an &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/DonutTest/dlltest.c/&#34;&gt;example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;subproj&#34;&gt;5. Subprojects&lt;/h2&gt; &#xA;&lt;p&gt;There are four companion projects provided with donut:&lt;/p&gt; &#xA;&lt;table border=&#34;1&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DemoCreateProcess&lt;/td&gt; &#xA;   &lt;td&gt;A sample .NET Assembly to use in testing. Takes two command-line parameters that each specify a program to execute.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DonutTest&lt;/td&gt; &#xA;   &lt;td&gt;A simple C# shellcode injector to use in testing donut. The shellcode must be base64 encoded and copied in as a string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ModuleMonitor&lt;/td&gt; &#xA;   &lt;td&gt;A proof-of-concept tool that detects CLR injection as it is done by tools such as Donut and Cobalt Strike&#39;s execute-assembly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProcessManager&lt;/td&gt; &#xA;   &lt;td&gt;A Process Discovery tool that offensive operators may use to determine what to inject into and defensive operators may use to determine what is running, what properties those processes have, and whether or not they have the CLR loaded. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2 id=&#34;dev&#34;&gt;6. Developing with Donut&lt;/h2&gt; &#xA;&lt;p&gt;You may want to add support for more types of payloads, change our feature set, or integrate Donut into your existing tooling. We have provided &lt;a href=&#34;https://github.com/TheWover/donut/raw/master/docs/devnotes.md&#34;&gt;developer documentation&lt;/a&gt;. Additional features are left as exercises to the reader. Our suggestions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add environmental keying.&lt;/li&gt; &#xA; &lt;li&gt;Make Donut polymorphic by obfuscating the loader every time shellcode is generated.&lt;/li&gt; &#xA; &lt;li&gt;Integrate Donut as a module into your favorite RAT/C2 Framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;qad&#34;&gt;7. Questions and Discussion&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or comments about Donut. Join the #Donut channel in the &lt;a href=&#34;https://bloodhoundgang.herokuapp.com/&#34;&gt;BloodHound Gang Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 id=&#34;disclaimer&#34;&gt;8. Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;We are not responsible for any misuse of this software or technique. Donut is provided as a demonstration of CLR Injection and in-memory loading through shellcode in order to provide red teamers a way to emulate adversaries and defenders a frame of reference for building analytics and mitigations. This inevitably runs the risk of malware authors and threat actors misusing it. However, we believe that the net benefit outweighs the risk. Hopefully that is correct. In the event EDR or AV products are capable of detecting Donut via signatures or behavioral patterns, we will not update Donut to counter signatures or detection methods. To avoid being offended, please do not ask.&lt;/p&gt;</summary>
  </entry>
</feed>