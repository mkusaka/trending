<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-29T01:32:37Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ProtonVPN/android-app</title>
    <updated>2022-09-29T01:32:37Z</updated>
    <id>tag:github.com,2022-09-29:/ProtonVPN/android-app</id>
    <link href="https://github.com/ProtonVPN/android-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official ProtonVPN Android app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ProtonVPN for Android&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2019 Proton Technologies AG&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install sdk, ndk, cmake, swig&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew assembleProdDebug&lt;/code&gt; or open and build in Android Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build release&lt;/h3&gt; &#xA;&lt;p&gt;To complete a release build signing keys need to be provided: ./gradlew assembleProdRelease -PkeyStoreFilePath=&#xA; &lt;keystore&gt;&#xA;   -PkeyStoreKeyAlias=&#xA;  &lt;alias&gt;&#xA;    -PkeyStorePassword=&#xA;   &lt;pass&gt;&#xA;     -PkeyStoreKeyPassword=&#xA;    &lt;key-pass&gt;&#xA;     `&#xA;    &lt;/key-pass&gt;&#xA;   &lt;/pass&gt;&#xA;  &lt;/alias&gt;&#xA; &lt;/keystore&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rebuild strongswan&lt;/h3&gt; &#xA;&lt;p&gt;This project is using native libraries from &lt;a href=&#34;https://www.strongswan.org/&#34;&gt;open-source project Strongswan&lt;/a&gt;. To simplify the build process we include prebuilt copies of those libraries &lt;a href=&#34;https://raw.githubusercontent.com/ProtonVPN/android-app/master/app/src/main/jniLibs&#34;&gt;here&lt;/a&gt;. To rebuild them follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git submodule init&lt;/code&gt; followed by &lt;code&gt;git submodule update&lt;/code&gt; in the main directory (we include original Strongswan repository as a git submodule)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd strongswan&lt;/code&gt; and follow &lt;a href=&#34;https://wiki.strongswan.org/projects/strongswan/wiki/AndroidVPNClientBuild&#34;&gt;build instructions&lt;/a&gt; from Strongswan to rebuild native libraries&lt;/li&gt; &#xA; &lt;li&gt;after a successful build, run &lt;code&gt;cp -r strongswan/src/frontends/android/app/src/main/libs/* app/src/main/jniLibs&lt;/code&gt; in our main directory to copy the prebuilt libraries and rebuild the ProtonVPN client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code style&lt;/h2&gt; &#xA;&lt;p&gt;Project uses agreed code style ProtonStyle.xml for java. Import it in Android studio via &lt;code&gt;File&amp;gt;&amp;gt;Settings&amp;gt;&amp;gt;Editor&amp;gt;&amp;gt;Code style&amp;gt;&amp;gt;Import Scheme&lt;/code&gt; For kotlin&#39;s code style we use ktlint with default rules&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute, please keep in mind the following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try to stick to the project&#39;s existing code style and naming conventions&lt;/li&gt; &#xA; &lt;li&gt;The code base is mostly written in Java, but we are transitioning to Kotlin, so new code should be written in Kotlin where possible&lt;/li&gt; &#xA; &lt;li&gt;Our preferred tech stack is Kotlin, MVVM, data-binding and coroutines, so any new features or large refactors should conform to this preferred tech stack&lt;/li&gt; &#xA; &lt;li&gt;After adding/updating open source dependencies run &lt;code&gt;gradlew updateLicensesJson&lt;/code&gt; to update attributions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internally our CI automatically checks all pull requests for code style issues, and runs our tests. However you can run those locally as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradlew checkstyle&#xA;gradlew detekt&#xA;gradlew test&#xA;gradlew androidTest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By making a contribution to this project you agree to the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I assign any and all copyright related to the contribution to Proton Technologies AG;&lt;/li&gt; &#xA; &lt;li&gt;I certify that the contribution was created in whole by me;&lt;/li&gt; &#xA; &lt;li&gt;I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it) is maintained indefinitely and may be redistributed with this project or the open source license(s) involved.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Manage Image for the CI&lt;/h2&gt; &#xA;&lt;h3&gt;Create an image NAME_IMAGE:branch-&#xA; &lt;branch&gt;&lt;/branch&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make image [branch=name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For the dev ~ Build the image on your computer: output ci-android:latest&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the image built via make local on your compute so you can inspect its content&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make debug-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy the image of the CI from your computer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make deploy-local: login-deploy imag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version matches format: &lt;code&gt;[major][minor][patch]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and datafiles in this distribution are licensed under the terms of the GPLv3 as published by the Free Software Foundation. See &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt; for a copy of this license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2019 Proton Technologies AG&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ARM-software/arm-trusted-firmware</title>
    <updated>2022-09-29T01:32:37Z</updated>
    <id>tag:github.com,2022-09-29:/ARM-software/arm-trusted-firmware</id>
    <link href="https://github.com/ARM-software/arm-trusted-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Read-only mirror of Trusted Firmware-A&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trusted Firmware-A&lt;/h1&gt; &#xA;&lt;p&gt;Trusted Firmware-A (TF-A) is a reference implementation of secure world software for &lt;code&gt;Arm A-Profile architectures&lt;/code&gt;_ (Armv8-A and Armv7-A), including an Exception Level 3 (EL3) &lt;code&gt;Secure Monitor&lt;/code&gt;_. It provides a suitable starting point for productization of secure world boot and runtime firmware, in either the AArch32 or AArch64 execution states.&lt;/p&gt; &#xA;&lt;p&gt;TF-A implements Arm interface standards, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Power State Coordination Interface (PSCI)&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Trusted Board Boot Requirements CLIENT (TBBR-CLIENT)&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SMC Calling Convention&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;System Control and Management Interface (SCMI)&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Software Delegated Exception Interface (SDEI)&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The code is designed to be portable and reusable across hardware platforms and software models that are based on the Armv8-A and Armv7-A architectures.&lt;/p&gt; &#xA;&lt;p&gt;In collaboration with interested parties, we will continue to enhance TF-A with reference implementations of Arm standards to benefit developers working with Armv7-A and Armv8-A TrustZone technology.&lt;/p&gt; &#xA;&lt;p&gt;Users are encouraged to do their own security validation, including penetration testing, on any secure world code derived from TF-A.&lt;/p&gt; &#xA;&lt;h2&gt;More Info and Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To find out more about Trusted Firmware-A, please &lt;code&gt;view the full documentation&lt;/code&gt;_ that is available through &lt;code&gt;trustedfirmware.org&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Copyright (c) 2013-2019, Arm Limited and Contributors. All rights reserved.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. _Armv7-A and Armv8-A: &lt;a href=&#34;https://developer.arm.com/products/architecture/a-profile&#34;&gt;https://developer.arm.com/products/architecture/a-profile&lt;/a&gt; .. _Secure Monitor: &lt;a href=&#34;http://www.arm.com/products/processors/technologies/trustzone/tee-smc.php&#34;&gt;http://www.arm.com/products/processors/technologies/trustzone/tee-smc.php&lt;/a&gt; .. &lt;em&gt;Power State Coordination Interface (PSCI): PSCI&lt;/em&gt; .. _PSCI: &lt;a href=&#34;http://infocenter.arm.com/help/topic/com.arm.doc.den0022d/Power_State_Coordination_Interface_PDD_v1_1_DEN0022D.pdf&#34;&gt;http://infocenter.arm.com/help/topic/com.arm.doc.den0022d/Power_State_Coordination_Interface_PDD_v1_1_DEN0022D.pdf&lt;/a&gt; .. _Trusted Board Boot Requirements CLIENT (TBBR-CLIENT): &lt;a href=&#34;https://developer.arm.com/docs/den0006/latest/trusted-board-boot-requirements-client-tbbr-client-armv8-a&#34;&gt;https://developer.arm.com/docs/den0006/latest/trusted-board-boot-requirements-client-tbbr-client-armv8-a&lt;/a&gt; .. _SMC Calling Convention: &lt;a href=&#34;http://infocenter.arm.com/help/topic/com.arm.doc.den0028b/ARM_DEN0028B_SMC_Calling_Convention.pdf&#34;&gt;http://infocenter.arm.com/help/topic/com.arm.doc.den0028b/ARM_DEN0028B_SMC_Calling_Convention.pdf&lt;/a&gt; .. &lt;em&gt;System Control and Management Interface (SCMI): SCMI&lt;/em&gt; .. _SCMI: &lt;a href=&#34;http://infocenter.arm.com/help/topic/com.arm.doc.den0056a/DEN0056A_System_Control_and_Management_Interface.pdf&#34;&gt;http://infocenter.arm.com/help/topic/com.arm.doc.den0056a/DEN0056A_System_Control_and_Management_Interface.pdf&lt;/a&gt; .. &lt;em&gt;Software Delegated Exception Interface (SDEI): SDEI&lt;/em&gt; .. _SDEI: &lt;a href=&#34;http://infocenter.arm.com/help/topic/com.arm.doc.den0054a/ARM_DEN0054A_Software_Delegated_Exception_Interface.pdf&#34;&gt;http://infocenter.arm.com/help/topic/com.arm.doc.den0054a/ARM_DEN0054A_Software_Delegated_Exception_Interface.pdf&lt;/a&gt; .. _Arm A-Profile architectures: &lt;a href=&#34;https://developer.arm.com/architectures/cpu-architecture/a-profile&#34;&gt;https://developer.arm.com/architectures/cpu-architecture/a-profile&lt;/a&gt; .. _view the full documentation: &lt;a href=&#34;https://www.trustedfirmware.org/docs/tf-a&#34;&gt;https://www.trustedfirmware.org/docs/tf-a&lt;/a&gt; .. _trustedfirmware.org: &lt;a href=&#34;http://www.trustedfirmware.org&#34;&gt;http://www.trustedfirmware.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DavidBuchanan314/monomorph</title>
    <updated>2022-09-29T01:32:37Z</updated>
    <id>tag:github.com,2022-09-29:/DavidBuchanan314/monomorph</id>
    <link href="https://github.com/DavidBuchanan314/monomorph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MD5-Monomorphic Shellcode Packer - all payloads have the same MD5 hash&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                                                &#xA;                                                &#xA;                                                &#xA;    ════════════════════════════════════╦═══    &#xA;     ╔═╦═╗ ╔═╗ ╔═╗ ╔═╗ ╔═╦═╗ ╔═╗ ╔══╔═╗ ╠═╗     &#xA;    ═╩ ╩ ╩═╚═╝═╩ ╩═╚═╝═╩ ╩ ╩═╚═╝═╩  ╠═╝═╩ ╩═    &#xA;    ════════════════════════════════╩═══════    &#xA;                                  By Retr0id    &#xA;                                                &#xA;    ═══ MD5-Monomorphic Shellcode Packer ═══    &#xA;                                                &#xA;                                                &#xA;USAGE: python3 monomorph.py input_file output_file [payload_file]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What does it do?&lt;/h2&gt; &#xA;&lt;p&gt;It packs up to 4KB of compressed shellcode into an executable binary, near-instantly. The output file will &lt;em&gt;always&lt;/em&gt; have the same MD5 hash: &lt;code&gt;3cebbe60d91ce760409bbe513593e401&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently, only Linux x86-64 is supported. It would be trivial to port this technique to other platforms, although each version would end up with a different MD5. It would also be possible to use a multi-platform polyglot file like &lt;a href=&#34;https://justine.lol/ape.html&#34;&gt;APE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 monomorph.py bin/monomorph.linux.x86-64.benign bin/monomorph.linux.x86-64.meterpreter sample_payloads/bin/linux.x64.meterpreter.bind_tcp.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;People have &lt;a href=&#34;https://www.mscs.dal.ca/~selinger/md5collision/&#34;&gt;previously&lt;/a&gt; used single collisions to toggle a binary between &#34;good&#34; and &#34;evil&#34; modes. Monomorph takes this concept to the next level.&lt;/p&gt; &#xA;&lt;p&gt;Some people still insist on using MD5 to reference file samples, for various reasons that don&#39;t make sense to me. If any of these people end up investigating code packed using Monomorph, they&#39;re going to get very confused.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;For every bit we want to encode, a colliding MD5 block has been pre-calculated using FastColl. As summarised &lt;a href=&#34;https://github.com/corkami/collisions/tree/master/hashquines#read-an-encoded-value&#34;&gt;here&lt;/a&gt;, each collision gives us a pair of blocks that we can swap out without changing the overall MD5 hash. The loader checks which block was chosen at runtime, to decode the bit.&lt;/p&gt; &#xA;&lt;p&gt;To encode 4KB of data, we need to generate 4*1024*8 collisions (which takes a few hours), taking up 4MB of space in the final file.&lt;/p&gt; &#xA;&lt;p&gt;To speed this up, I made some small tweaks to FastColl to make it even faster in practice, enabling it to be run in parallel. I&#39;m sure there are smarter ways to parallelise it, but my naive approach is to start N instances simultaneously and wait for the first one to complete, then kill all the others.&lt;/p&gt; &#xA;&lt;p&gt;Since I&#39;ve already done the pre-computation, reconfiguring the payload can be done near-instantly. Swapping the state of the pre-computed blocks is done using &lt;a href=&#34;https://github.com/corkami/collisions/raw/master/hashquines/scripts/collisions.py&#34;&gt;a technique&lt;/a&gt; implemented by Ange Albertini.&lt;/p&gt; &#xA;&lt;h2&gt;Is it detectable?&lt;/h2&gt; &#xA;&lt;p&gt;Yes. It&#39;s not very stealthy at all, nor does it try to be. You can detect the collision blocks using &lt;a href=&#34;https://github.com/cr-marcstevens/hashclash/tree/collisiondetection/src/collisiondetection&#34;&gt;detectcoll&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>