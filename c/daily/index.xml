<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-26T01:23:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>placeholderkv/placeholderkv</title>
    <updated>2024-03-26T01:23:47Z</updated>
    <id>tag:github.com,2024-03-26:/placeholderkv/placeholderkv</id>
    <link href="https://github.com/placeholderkv/placeholderkv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new project to resume development on the formerly open-source Redis project. Name is placeholder.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This README is under construction as we work to build a new community driven high performance key-value store.&lt;/p&gt; &#xA;&lt;p&gt;This project was forked from the open source Redis project right before the transition to their new source available licenses.&lt;/p&gt; &#xA;&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. We are currently working on a more permanent documentation page.&lt;/p&gt; &#xA;&lt;h2&gt;What is PlaceHolderKV?&lt;/h2&gt; &#xA;&lt;p&gt;The name is temporary, as we work to find a new name that the community accepts. It also happens to be a very easy string to search for.&lt;/p&gt; &#xA;&lt;h2&gt;Building PlaceHolderKV&lt;/h2&gt; &#xA;&lt;p&gt;PlaceHolderKV can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; &#xA;&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and PlaceHolderKV is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; &#xA;&lt;p&gt;It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To append a suffix to PlaceHolderKV program names, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&#34;-alt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build a 32 bit PlaceHolderKV binary using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make 32bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building PlaceHolderKV, it is a good idea to test it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TLS is built, running the tests with TLS enabled (you will need &lt;code&gt;tcl-tls&lt;/code&gt; installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./utils/gen-test-certs.sh&#xA;% ./runtest --tls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; &#xA;&lt;p&gt;PlaceHolderKV has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; &#xA;&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will clean: jemalloc, lua, hiplaceholderkv, linenoise and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; &#xA;&lt;p&gt;If after building PlaceHolderKV with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the PlaceHolderKV distribution.&lt;/p&gt; &#xA;&lt;p&gt;In case of build errors when trying to build a 32 bit binary of PlaceHolderKV, try the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; &#xA; &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&#34;-m32 -march=native&#34; LDFLAGS=&#34;-m32&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Allocator&lt;/h2&gt; &#xA;&lt;p&gt;Selecting a non-default memory allocator when building PlaceHolderKV is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. PlaceHolderKV is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; &#xA;&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=libc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monotonic clock&lt;/h2&gt; &#xA;&lt;p&gt;By default, PlaceHolderKV will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&#34;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&#34;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make CFLAGS=&#34;-DUSE_PROCESSOR_CLOCK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verbose build&lt;/h2&gt; &#xA;&lt;p&gt;PlaceHolderKV will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make V=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running PlaceHolderKV&lt;/h2&gt; &#xA;&lt;p&gt;To run PlaceHolderKV with the default configuration, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./placeholderkv-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to provide your placeholderkv.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./placeholderkv-server /path/to/placeholderkv.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to alter the PlaceHolderKV configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./placeholderkv-server --port 9999 --replicaof 127.0.0.1 6379&#xA;% ./placeholderkv-server /etc/placeholderkv/6379.conf --loglevel debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the options in placeholderkv.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; &#xA;&lt;h2&gt;Running PlaceHolderKV with TLS:&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/placeholderkv/placeholderkv/unstable/TLS.md&#34;&gt;TLS.md&lt;/a&gt; file for more information on how to use PlaceHolderKV with TLS.&lt;/p&gt; &#xA;&lt;h2&gt;Playing with PlaceHolderKV&lt;/h2&gt; &#xA;&lt;p&gt;You can use placeholderkv-cli to play with PlaceHolderKV. Start a placeholderkv-server instance, then in another terminal try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./placeholderkv-cli&#xA;placeholderkv&amp;gt; ping&#xA;PONG&#xA;placeholderkv&amp;gt; set foo bar&#xA;OK&#xA;placeholderkv&amp;gt; get foo&#xA;&#34;bar&#34;&#xA;placeholderkv&amp;gt; incr mycounter&#xA;(integer) 1&#xA;placeholderkv&amp;gt; incr mycounter&#xA;(integer) 2&#xA;placeholderkv&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing PlaceHolderKV&lt;/h2&gt; &#xA;&lt;p&gt;In order to install PlaceHolderKV binaries into /usr/local/bin, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with PlaceHolderKV, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd utils&#xA;% ./install_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; &#xA;&lt;p&gt;The script will ask you a few questions and will setup everything you need to run PlaceHolderKV properly as a background daemon that will start again on system reboots.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be able to stop and start PlaceHolderKV using the script named &lt;code&gt;/etc/init.d/placeholderkv_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/placeholderkv_6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;Note: By contributing code to the PlaceHolderKV project in any form, including sending a pull request via Github, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the BSD license that you can find in the &lt;a href=&#34;https://github.com/madolson/placeholderkv/raw/unstable/COPYING&#34;&gt;COPYING&lt;/a&gt; file included in the PlaceHolderKV source distribution.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/madolson/placeholderkv/raw/unstable/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file in this source distribution for more information. For security bugs and vulnerabilities, please see &lt;a href=&#34;https://github.com/madolson/placeholderkv/raw/unstable/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Florents-Tselai/pgJQ</title>
    <updated>2024-03-26T01:23:47Z</updated>
    <id>tag:github.com,2024-03-26:/Florents-Tselai/pgJQ</id>
    <link href="https://github.com/Florents-Tselai/pgJQ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jq extension for Postgres&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgJQ: Use &lt;code&gt;jq&lt;/code&gt; in Postgres&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MIT license-blue.svg&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/Florents-Tselai/pgJQ&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;pgJQ&lt;/strong&gt; extension embeds the standard jq compiler and brings the much loved &lt;a href=&#34;https://github.com/jqlang/jq&#34;&gt;jq&lt;/a&gt; lang to Postgres.&lt;/p&gt; &#xA;&lt;p&gt;It adds a &lt;code&gt;jqprog&lt;/code&gt; data type to express &lt;code&gt;jq&lt;/code&gt; programs and a &lt;code&gt;jq(jsonb, jqprog)&lt;/code&gt; function to execute them on &lt;code&gt;jsonb&lt;/code&gt; objects. It works seamlessly with standard &lt;code&gt;jsonb&lt;/code&gt; functions, operators, and &lt;code&gt;jsonpath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT jq(&#39;[{&#34;bar&#34;: &#34;baz&#34;, &#34;balance&#34;: 7.77, &#34;active&#34;:false}]&#39;::jsonb, &#39;.[0].bar&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;  jq   &#xA;-------&#xA; &#34;baz&#34;&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Florents-Tselai/pgJQ/main/pgjq-demo.gif&#34; alt=&#34;til&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Filters&lt;/h3&gt; &#xA;&lt;p&gt;You can run basic filters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT jq(&#39;[{&#34;bar&#34;: &#34;baz&#34;, &#34;balance&#34;: 7.77, &#34;active&#34;:false}]&#39;::jsonb, &#39;.[0].bar&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;  jq   &#xA;-------&#xA; &#34;baz&#34;&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;jsonb&lt;/code&gt; &lt;code&gt;@@&lt;/code&gt; &lt;code&gt;jqprog&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a syntactic sugar addict, you can use the &lt;code&gt;@@&lt;/code&gt; operator to achieve the same. It&#39;s better be explicit with the &lt;code&gt;::jqprog&lt;/code&gt; when using operators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &#39;[{&#34;bar&#34;: &#34;baz&#34;, &#34;balance&#34;: 7.77, &#34;active&#34;:false}]&#39; @@ &#39;.[0].bar&#39;::jqprog;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;  jq   &#xA;-------&#xA; &#34;baz&#34;&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Complex Programs&lt;/h3&gt; &#xA;&lt;p&gt;You can run more complex &lt;code&gt;jq&lt;/code&gt; programs too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT jq(&#39;[true,false,[5,true,[true,[false]],false]]&#39;,&#xA;          &#39;(..|select(type==&#34;boolean&#34;)) |= if . then 1 else 0 end&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;             jq              &#xA;-----------------------------&#xA; [1, 0, [5, 1, [1, [0]], 0]]&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT jq(&#39;[1,5,3,0,7]&#39; , &#39;(.[] | select(. &amp;gt;= 2)) |= empty&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;   jq   &#xA;--------&#xA; [1, 0]&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing Arguments to &lt;code&gt;jqprog&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you want to pass dynamic arguments to &lt;code&gt;jqprog&lt;/code&gt;, you can pass them as a &lt;code&gt;jsonb&lt;/code&gt; object and refer to them as &lt;code&gt;$var&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select jq(&#39;{&#xA;  &#34;runner&#34;: 1,&#xA;  &#34;message&#34;: &#34;jobStatus&#34;,&#xA;  &#34;jobs&#34;: [&#xA;    {&#xA;      &#34;id&#34;: 9,&#xA;      &#34;is_successfull&#34;: true&#xA;    },&#xA;    {&#xA;      &#34;id&#34;: 100,&#xA;      &#34;is_successfull&#34;: false,&#xA;      &#34;metdata&#34;: {&#xA;        &#34;environ&#34;: &#34;prod&#34;&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#39;::jsonb, &#39;.jobs[] | select(.is_successfull == $is_success and .id == 100) | .&#39;, &#39;{&#34;is_success&#34;: false, &#34;id&#34;: 100}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                  jq                                  &#xA;----------------------------------------------------------------------&#xA; {&#34;id&#34;: 100, &#34;metdata&#34;: {&#34;environ&#34;: &#34;prod&#34;}, &#34;is_successfull&#34;: false}&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;jq&lt;/code&gt; and &lt;code&gt;jsonpath&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can even chain &lt;code&gt;jq&lt;/code&gt; and &lt;code&gt;jsonpath&lt;/code&gt; together!&lt;/p&gt; &#xA;&lt;p&gt;Note here that the later part &lt;code&gt;- &#39;{trans}&#39; @&amp;gt; &#39;{&#34;cust&#34;: &#34;baz&#34;}&#39;&lt;/code&gt; is &lt;code&gt;jsonpath&lt;/code&gt;, not &lt;code&gt;jq&lt;/code&gt; code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT jq(&#39;[&#xA;  {&#xA;    &#34;cust&#34;: &#34;baz&#34;,&#xA;    &#34;trans&#34;: {&#xA;      &#34;balance&#34;: 100,&#xA;      &#34;date&#34;: &#34;2023-08-01&#34;&#xA;    },&#xA;    &#34;active&#34;: true,&#xA;    &#34;geo&#34;: {&#xA;      &#34;branch&#34;: &#34;paloukia&#34;&#xA;    }&#xA;  }&#xA;]&#39;, &#39;(.[] | select(.active == true))&#39;) - &#39;{trans}&#39; @&amp;gt; &#39;{&#34;cust&#34;: &#34;baz&#34;}&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; ?column? &#xA;----------&#xA; t&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you opt for using operators here, you should help the parser by adding parentheses and explicit casts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT (&#39;[&#xA;  {&#xA;    &#34;cust&#34;: &#34;baz&#34;,&#xA;    &#34;trans&#34;: {&#xA;      &#34;balance&#34;: 100,&#xA;      &#34;date&#34;: &#34;2023-08-01&#34;&#xA;    },&#xA;    &#34;active&#34;: true,&#xA;    &#34;geo&#34;: {&#xA;      &#34;branch&#34;: &#34;paloukia&#34;&#xA;    }&#xA;  }&#xA;]&#39; @@ &#39;(.[] | select(.active == true))&#39;::jqprog) - &#39;{trans}&#39; @&amp;gt; &#39;{&#34;cust&#34;: &#34;baz&#34;}&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is strongly recommended to be explicit with type casts and ordering when using overloaded operators, especially when you&#39;re working a lot with text. Otherwise, you&#39;ll find yourself in an obfuscated labyrinth of &lt;code&gt;jqprog&lt;/code&gt;s, &lt;code&gt;jsonb&lt;/code&gt;s, &lt;code&gt;jsonpath&lt;/code&gt;s and possibly &lt;code&gt;tsvector&lt;/code&gt;s , impossible to escape from.&lt;/p&gt; &#xA;&lt;h3&gt;Working with Files&lt;/h3&gt; &#xA;&lt;p&gt;If you have superuser privileges in Postgres you can use the &lt;code&gt;pg_read_file&lt;/code&gt; to run your queries on JSON files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT jq(pg_read_file(&#39;/path/to/f.json&#39;, &#39;.[]&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see more examples in the &lt;a href=&#34;https://raw.githubusercontent.com/Florents-Tselai/pgJQ/main/test/sql/basic.sql&#34;&gt;test cases&lt;/a&gt; or try reproducing the &lt;a href=&#34;https://jqlang.github.io/jq/manual/&#34;&gt;&lt;code&gt;jq&lt;/code&gt; manual&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/Florents-Tselai/pgJQ.git&#xA;cd pgJQ&#xA;make install # set PG_CONFIG=/path/to/bin/pg_config if necessary.&#xA;make installcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a Postgres session run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION pgjq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;pgJQ does not re-implement the &lt;code&gt;jq&lt;/code&gt; lang in Postgres. It instead embeds the standard &lt;code&gt;jq&lt;/code&gt; compiler and uses it to parse &lt;code&gt;jq&lt;/code&gt; programs supplied in SQL queries. These programs are fed with &lt;code&gt;jsonb&lt;/code&gt; objects as input.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; has evolved from &lt;em&gt;just a cli tool&lt;/em&gt; to a full-fledged DSL, but it still remains a 20-80 tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pgJQ&lt;/strong&gt; has been TDDed against those 20% of the cases. If you come across regressions between vanilla &lt;code&gt;jq&lt;/code&gt; and pgJQ, especially around piped filters or complex functions, please do add an issue, along with a test case!&lt;/p&gt; &#xA;&lt;p&gt;Keeping in mind, though, that there&#39;s probably not much point reproducing the whole DSL in an RDBMS context.&lt;/p&gt; &#xA;&lt;p&gt;Some known issues are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only string, bool and numeric arguments can be passed to &lt;code&gt;jqprog&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Currently, &lt;code&gt;jq&lt;/code&gt; programs including pipes, like &lt;code&gt;.[] | .name&lt;/code&gt; are buggy and unpredictable.&lt;/li&gt; &#xA; &lt;li&gt;Modules are not supported, but they could be theoretically supported, given that Postgres is fairly open to dynamic loading.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>