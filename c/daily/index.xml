<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-16T01:31:49Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Jaysmito101/cgl</title>
    <updated>2022-11-16T01:31:49Z</updated>
    <id>tag:github.com,2022-11-16:/Jaysmito101/cgl</id>
    <link href="https://github.com/Jaysmito101/cgl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CGL (C Game Library) is a multipurpose library mainly for recreational coding / demo scenes / prototyping / small games / experimentation.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Jaysmito101/cgl/main/logo.png&#34; border=&#34;0&#34;&gt;&#xA; &lt;!--&#xA;&lt;/p--&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub repo size&#34; src=&#34;https://img.shields.io/github/repo-size/Jaysmito101/cgl?style=for-the-badge&#34;&gt; &lt;img alt=&#34;Lines of code&#34; src=&#34;https://img.shields.io/tokei/lines/github/Jaysmito101/cgl?style=for-the-badge&#34;&gt; &lt;img alt=&#34;GitHub commit activity&#34; src=&#34;https://img.shields.io/github/commit-activity/w/Jaysmito101/cgl?style=for-the-badge&#34;&gt; &lt;br&gt; &lt;img alt=&#34;Maintenance&#34; src=&#34;https://img.shields.io/maintenance/yes/2022?style=for-the-badge&#34;&gt; &lt;a href=&#34;https://patreon.com/jaysmito101&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Djaysmito101%26type%3Dpledges&amp;amp;style=for-the-badge&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;CGL&lt;/h1&gt; &#xA;&lt;p&gt;CGL (C Graphics Library) is a multipurpose library mainly for recreational coding / demo scenes / prototyping / small games / experimentation. This has a lot of utilities for graphics. And best of all all of it is inside a single header file &lt;code&gt;cgl.h&lt;/code&gt;. Also CGL is made purely in C but is also compatible with C++.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Do not think that header only means its going to increase compile time as the implementation needs be enabled only for 1 file using &lt;code&gt;#define CGL_IMPLEMENTATION&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jaysmito101/cgl/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Target Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;MacOS (untested)&lt;/li&gt; &#xA; &lt;li&gt;WebAssembly (Beta)&lt;/li&gt; &#xA; &lt;li&gt;Android (Comming soon...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What does CGL provide?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windowing library (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can completely disable it by &lt;code&gt;#define CGL_EXCLUDE_WINDOW_API&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;This windowing library is primarily a wrapper GLFW along with a few extra functionalities. For example in case you are using some library like &lt;code&gt;nuklear&lt;/code&gt; for GUI it will mess up all &lt;code&gt;glfw&lt;/code&gt; callbacks so with CGL you can restore the CGL callbacks with a call to &lt;code&gt;CGL_window_resecure_callbacks&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Utility functionalities&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reading/Writing files&lt;/li&gt; &#xA;   &lt;li&gt;Random float/int/bool/vec2/vec3/color generation&lt;/li&gt; &#xA;   &lt;li&gt;CRC32/CRC64&lt;/li&gt; &#xA;   &lt;li&gt;ROT13 encryption&lt;/li&gt; &#xA;   &lt;li&gt;General Purpose Hashing Functions &lt;a href=&#34;http://www.azillionmonkeys.com/qed/hash.html&#34;&gt;refer here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Colored printf (red, green, blue, gray/yellow)&lt;/li&gt; &#xA;   &lt;li&gt;TODO: [ MD5 / SHA 256 / SHA 128 / AES ]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Data structures&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List(dynamic array) + Stack (implemented together)&lt;/li&gt; &#xA;   &lt;li&gt;Hashtable -&amp;gt; This hastable is general purpose. Key can be string or a n-bit buffer. The value can be anything int, string, float, custom types, ... &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Hashtable Iterator -&amp;gt; Iterate through the hashtable using a &lt;a href=&#34;https://github.com/Jaysmito101/cgl/raw/main/examples/using_hashtable_iterator.c&#34;&gt;simple&lt;/a&gt; API&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logger&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be enabled/disabled by &lt;code&gt;#define CGL_DISABLE_LOGGER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Log to multiple log files simultaneously&lt;/li&gt; &#xA;   &lt;li&gt;Log to console with colored output for seperate log levels&lt;/li&gt; &#xA;   &lt;li&gt;Logger with auto timestamps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross Platform Networking (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can disable all networking by &lt;code&gt;#define CGL_EXCLUDE_NETWORKING&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Low-level sockets&lt;/li&gt; &#xA;   &lt;li&gt;SSL sockets (optional) (requires OpenSSL)&lt;/li&gt; &#xA;   &lt;li&gt;HTTP/HTTPS request (beta)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;General Purpose Markov Chains (Optional) &lt;a href=&#34;https://raw.githubusercontent.com/Jaysmito101/cgl/main/examples/markov_text_generation.c&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can work with any type of data ( text / image / etc. )&lt;/li&gt; &#xA;   &lt;li&gt;Train/Generate with 3 - 4 lines of code&lt;/li&gt; &#xA;   &lt;li&gt;Trainer implemented for text generation (n-gram based)&lt;/li&gt; &#xA;   &lt;li&gt;Custom trainer API for custom scenarios&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross Platform Threading&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Threads&lt;/li&gt; &#xA;   &lt;li&gt;Mutex&lt;/li&gt; &#xA;   &lt;li&gt;Condition Variables (TODO)&lt;/li&gt; &#xA;   &lt;li&gt;NOTE: Implemented using &lt;code&gt;Win32 Threads&lt;/code&gt; on Windows and &lt;code&gt;pthread&lt;/code&gt; on Linux. (on Linux you need to link &lt;code&gt;pthread&lt;/code&gt; to build)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bloom&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Apply bloom to any tuxtures with just 1 line of code&lt;/li&gt; &#xA;   &lt;li&gt;Implementation based of Unity&#39;s bloom&lt;/li&gt; &#xA;   &lt;li&gt;Custom thresholding&lt;/li&gt; &#xA;   &lt;li&gt;Custom downsample/upsample passes&lt;/li&gt; &#xA;   &lt;li&gt;Entirely done in Compute Shaders&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CGL Widgets (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can disable it by &lt;code&gt;#define CGL_EXCLUDE_WIDGETS&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;API Like &lt;a href=&#34;https://p5js.org/&#34;&gt;p5.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Text widgets (render high quality crisp text without loading or baking any font)&lt;/li&gt; &#xA;   &lt;li&gt;Batch Renderer backend (very fast even for a large number of widgets)&lt;/li&gt; &#xA;   &lt;li&gt;draw (filled or stroked) : &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;triangle [&lt;code&gt;CGL_widgets_add_triangle&lt;/code&gt;]&lt;/li&gt; &#xA;     &lt;li&gt;general quad [&lt;code&gt;CGL_widgets_add_quad&lt;/code&gt;]&lt;/li&gt; &#xA;     &lt;li&gt;rectangle [&lt;code&gt;CGL_widgets_add_rect&lt;/code&gt; &lt;code&gt;CGL_widgets_add_rect2f&lt;/code&gt;]&lt;/li&gt; &#xA;     &lt;li&gt;line [&lt;code&gt;CGL_widgets_add_line&lt;/code&gt;]&lt;/li&gt; &#xA;     &lt;li&gt;circle [&lt;code&gt;CGL_widgets_add_circle&lt;/code&gt; &lt;code&gt;CGL_widgets_add_circle2f&lt;/code&gt;]&lt;/li&gt; &#xA;     &lt;li&gt;oval [&lt;code&gt;CGL_widgets_add_oval&lt;/code&gt;, &lt;code&gt;CGL_widgets_add_oval2f&lt;/code&gt;]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Add individual vertices&lt;/li&gt; &#xA;   &lt;li&gt;Adjust stroke color/thickness&lt;/li&gt; &#xA;   &lt;li&gt;Customize Batch renderer max vertices capacity (for low memory systems)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Math library&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;vec2/vec3/vec4&lt;/li&gt; &#xA;   &lt;li&gt;mat3/mat4&lt;/li&gt; &#xA;   &lt;li&gt;add/sub/mul/div/scale/length/normalize/lerp/min/max/equal for vec2/vec3/vec4&lt;/li&gt; &#xA;   &lt;li&gt;rotate_x/rotate_y/rotate_z for vec3&lt;/li&gt; &#xA;   &lt;li&gt;scale/translate/rotate_x/rotate_y/rotate_z/add/sub/mul for mat4&lt;/li&gt; &#xA;   &lt;li&gt;perspective for mat4&lt;/li&gt; &#xA;   &lt;li&gt;transpose for mat4/(mat3 TODO)&lt;/li&gt; &#xA;   &lt;li&gt;look_at matrix&lt;/li&gt; &#xA;   &lt;li&gt;Quaternion math&lt;/li&gt; &#xA;   &lt;li&gt;NOTE: Most of math functions are implemented via macros so will be totally inclined and quite fast without any unnecessary function calls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High Level OpenGL API for (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can completely disable it by &lt;code&gt;#define CGL_EXCLUDE_GRAPHICS_API&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Texture (2D / 2D Array / Cube map)&lt;/li&gt; &#xA;   &lt;li&gt;Framebuffers&lt;/li&gt; &#xA;   &lt;li&gt;SSBO (Shader Storage Buffer Object)&lt;/li&gt; &#xA;   &lt;li&gt;Shaders &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Vertex &amp;amp; Fragment (Geometry Shader not included as its not very widely used)&lt;/li&gt; &#xA;     &lt;li&gt;Compute Shader API&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CGL Mesh API&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CGL has a high level API for handling meshes&lt;/li&gt; &#xA;   &lt;li&gt;2 types of meshes are there &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;CPU mesh -&amp;gt; stores the data also used for mesh operations like &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;generate triangle&lt;/li&gt; &#xA;       &lt;li&gt;generate quad&lt;/li&gt; &#xA;       &lt;li&gt;load OBJ (beta)&lt;/li&gt; &#xA;       &lt;li&gt;generate cube&lt;/li&gt; &#xA;       &lt;li&gt;generate sphere&lt;/li&gt; &#xA;       &lt;li&gt;generate mesh out of any parametric surface function &lt;a href=&#34;https://stackoverflow.com/a/31326534/14911094&#34;&gt;refer here&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;calculate normals (TODO)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;GPU mesh -&amp;gt; the pointer to the data stored on GPU side (internally handles the Vertex buffer, Index buffer, Vertex Array) and can used for &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;render&lt;/li&gt; &#xA;       &lt;li&gt;render instanced&lt;/li&gt; &#xA;       &lt;li&gt;render wireframe&lt;/li&gt; &#xA;       &lt;li&gt;render wireframe instanced&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CGL camera&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CGL provides a proper camera abstraction&lt;/li&gt; &#xA;   &lt;li&gt;Perspective &amp;amp; Orthographic&lt;/li&gt; &#xA;   &lt;li&gt;It internally handles all matrix calculations (just input the position and rotation)&lt;/li&gt; &#xA;   &lt;li&gt;Auto calculates the Up, Right, Front vectors&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Text Rendering (Optional) (Requires &lt;a href=&#34;http://freetype.org/&#34;&gt;FreeType2&lt;/a&gt;)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can completely disable it with &lt;code&gt;#define CGL_EXCLUDE_TEXT_RENDER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Load Fonts from &lt;code&gt;.ttf&lt;/code&gt; files&lt;/li&gt; &#xA;   &lt;li&gt;Bake bitmaps for characters&lt;/li&gt; &#xA;   &lt;li&gt;Bake textures from strings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sky Renderer (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can completely disable it with &lt;code&gt;#define CGL_EXCLUDE_SKY_RENDERER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Supports both a Sky Box (cube mesh) and Sky Sphere/Dome (sphere mesh)&lt;/li&gt; &#xA;   &lt;li&gt;Supports Cube map Textured Sky&lt;/li&gt; &#xA;   &lt;li&gt;Supports Realtime Procedurally Generated Sky ( + procedural clouds)&lt;/li&gt; &#xA;   &lt;li&gt;Render a beautiful sky with just 3 - 5 lines of code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Phong Renderer (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can disable it via &lt;code&gt;#define CGL_EXCLUDE_PHONG_RENDERER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;It has: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Phone Pipeline -&amp;gt; it is the pipeline holding shader data and global engine data. Options available are &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;enable/disable blinn correction&lt;/li&gt; &#xA;       &lt;li&gt;enable/disable depth test&lt;/li&gt; &#xA;       &lt;li&gt;enable/disable gamma correction&lt;/li&gt; &#xA;       &lt;li&gt;setup ambient lighting&lt;/li&gt; &#xA;       &lt;li&gt;add/remove lights&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Phong Light -&amp;gt; It can be of 3 types: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Directional -&amp;gt; it takes (direction, color, intensity)&lt;/li&gt; &#xA;       &lt;li&gt;Point -&amp;gt; it takes (position, color, itensity, constant, linear, quadratic)&lt;/li&gt; &#xA;       &lt;li&gt;Spot (TODO)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Phong Material &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;dissuse texture/color&lt;/li&gt; &#xA;       &lt;li&gt;specular texture/color&lt;/li&gt; &#xA;       &lt;li&gt;shininess&lt;/li&gt; &#xA;       &lt;li&gt;normal maps (TODO)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tilemap Renderer (Optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can disable it with &lt;code&gt;#define CGL_EXCLUDE_TILEMAP_RENDERER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Renders a NxN tilemap with a single line of code&lt;/li&gt; &#xA;   &lt;li&gt;Each tile can have following states &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;clear (transparent or disabled)&lt;/li&gt; &#xA;     &lt;li&gt;solid color&lt;/li&gt; &#xA;     &lt;li&gt;texture -&amp;gt; Texture can be supplied via: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;texture 2d array -&amp;gt; you need to provide depth for each tile&lt;/li&gt; &#xA;       &lt;li&gt;tileset or texture atlas -&amp;gt; you have to provide bounds (normalized 0.0-1.0) of the area of the alas to be used on tile&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;NOTE: this tile render renders only 4 vertices and has only 1 draw call (not a instanced call so its quite fast&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things that are being worked on:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PBR renderer (optional)&lt;/li&gt; &#xA; &lt;li&gt;IBL (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GLFW&lt;/li&gt; &#xA; &lt;li&gt;Glad&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>FelixKratz/SketchyBar</title>
    <updated>2022-11-16T01:31:49Z</updated>
    <id>tag:github.com,2022-11-16:/FelixKratz/SketchyBar</id>
    <link href="https://github.com/FelixKratz/SketchyBar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A highly customizable macOS status bar replacement&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/FelixKratz/SketchyBar/master/images/Sbar.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://felixkratz.github.io/SketchyBar/setup&#34;&gt;Install&lt;/a&gt; &lt;span&gt; • &lt;/span&gt; &lt;a href=&#34;https://felixkratz.github.io/SketchyBar/config/bar&#34;&gt;Documentation&lt;/a&gt; &lt;span&gt; • &lt;/span&gt; &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/47&#34;&gt;Setups&lt;/a&gt; &lt;span&gt; • &lt;/span&gt; &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/12&#34;&gt;Plugins&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/FelixKratz/SketchyBar.svg?style=flat&amp;amp;color=orange&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/FelixKratz/SketchyBar/latest.svg?color=orange&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Free_and_open-source_software&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/FOSS-100%25-green.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; This bar project aims to create a highly flexible, customizable, fast and powerful status bar replacement for people that like playing with shell scripts. &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FelixKratz/SketchyBar/master/images/example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/47&#34;&gt;More Setups&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized to be &lt;em&gt;Fast&lt;/em&gt; and &lt;em&gt;Efficient&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Completely &lt;em&gt;Scriptable&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fully &lt;em&gt;Configurable&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Entirely &lt;em&gt;Animatable&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for drawing native macOS menu bar applications (aliases)&lt;/li&gt; &#xA; &lt;li&gt;Powerful event and scripting system&lt;/li&gt; &#xA; &lt;li&gt;Popup Menus&lt;/li&gt; &#xA; &lt;li&gt;Mouse Support&lt;/li&gt; &#xA; &lt;li&gt;Support for graphs&lt;/li&gt; &#xA; &lt;li&gt;Per display and per space individualization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the installation guide in the &lt;a href=&#34;https://felixkratz.github.io/SketchyBar/setup&#34;&gt;documentation&lt;/a&gt; to get the program set up. Once this is sorted you can start to become familiar with the syntax of sketchybar by going through the default &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/raw/master/sketchybarrc&#34;&gt;&lt;em&gt;sketchybarrc&lt;/em&gt;&lt;/a&gt; file, which is located in &lt;code&gt;~/.config/sketchybar/sketchybarrc&lt;/code&gt; and looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FelixKratz/SketchyBar/master/images/default.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All commands and options are explained in detail in the relevant sections of the configuration &lt;a href=&#34;https://felixkratz.github.io/SketchyBar/config/bar&#34;&gt;documentation&lt;/a&gt;. You can try the commands directly from the commandline to see which affect they have and how they alter the bar. Once you have become familiar with the syntax you can look for a config to start from &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/47&#34;&gt;here&lt;/a&gt; or start from scratch and customize everything to your liking.&lt;/p&gt; &#xA;&lt;p&gt;You might also enjoy looking at the &lt;a href=&#34;https://felixkratz.github.io/SketchyBar/config/tricks&#34;&gt;Tips &amp;amp; Tricks&lt;/a&gt; section for some further tips on your journey. If you are searching for functional items you might want to check the &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/12&#34;&gt;plugins&lt;/a&gt; section if someone has already created what you are looking for.&lt;/p&gt; &#xA;&lt;p&gt;Should you encounter things not working as you expect them to, please &lt;em&gt;do not&lt;/em&gt; hesitate to open an &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/issues&#34;&gt;issue&lt;/a&gt;, as this is either a bug or a documentation problem and relevant in any case.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For the full documentation of all commands and properties please refer to the &lt;a href=&#34;https://felixkratz.github.io/SketchyBar/config/bar&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If questions remain, feel free to consult the &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/categories/q-a&#34;&gt;Q&amp;amp;A&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;You&lt;/em&gt; can support this project is many ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By &lt;em&gt;creating&lt;/em&gt; issues and pull-requests if you encounter problems&lt;/li&gt; &#xA; &lt;li&gt;By &lt;em&gt;sharing&lt;/em&gt; your &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/12&#34;&gt;plugins&lt;/a&gt; and &lt;a href=&#34;https://github.com/FelixKratz/SketchyBar/discussions/47&#34;&gt;setups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;By &lt;em&gt;starring&lt;/em&gt; the project on GitHub&lt;/li&gt; &#xA; &lt;li&gt;If this project has value to you, consider quantifying it and &lt;em&gt;donating&lt;/em&gt; to a charity of your choice. If you want to let me know about your donation, you can contact me via &lt;a href=&#34;mailto:felix.kratz@tu-dortmund.de?Subject=Donation&#34;&gt;email&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project was forked from &lt;em&gt;&lt;a href=&#34;https://github.com/cmacrae/spacebar&#34;&gt;spacebar&lt;/a&gt;&lt;/em&gt; and completely reimagined and rewritten. &lt;br&gt; The original idea is based on the status bar that was included in &lt;em&gt;&lt;a href=&#34;https://github.com/koekeishiya/yabai&#34;&gt;yabai&lt;/a&gt;&lt;/em&gt; before getting removed.&lt;/p&gt; &#xA;&lt;h2&gt;Demonstration of the animation system&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/22680421/173958567-c475eaa2-cd56-45c1-86fc-839d697eaad6.mp4&#34;&gt;https://user-images.githubusercontent.com/22680421/173958567-c475eaa2-cd56-45c1-86fc-839d697eaad6.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GoldHEN/GoldHEN_Cheat_Manager</title>
    <updated>2022-11-16T01:31:49Z</updated>
    <id>tag:github.com,2022-11-16:/GoldHEN/GoldHEN_Cheat_Manager</id>
    <link href="https://github.com/GoldHEN/GoldHEN_Cheat_Manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoldHEN Cheats Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GoldHEN Cheats Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/GoldHEN/GoldHEN_Cheat_Manager/total.svg?maxAge=3600&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/GoldHEN/GoldHEN_Cheat_Manager.svg?maxAge=3600&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/GoldHEN/GoldHEN_Cheat_Manager.svg?maxAge=2592000&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open-source PlayStation 4 cheat code manager for GoldHEN.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GoldHEN/GoldHEN_Cheat_Manager/main/docs/screenshots/main-menu.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;GoldHEN Cheats Manager&lt;/strong&gt; is a simple PS4 homebrew application that manages GoldHEN cheat codes files.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;Get the &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/releases/latest&#34;&gt;latest version here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/GoldHEN/GoldHEN_Cheat_Manager/main/CHANGELOG.md&#34;&gt;latest changes here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Donations&lt;/h1&gt; &#xA;&lt;p&gt;My GitHub projects are open to a &lt;a href=&#34;https://patreon.com/dparrino&#34;&gt;Patreon sponsor program&lt;/a&gt;. If you feel that my tools helped you in some way or you would like to support future developments, you can consider a &lt;a href=&#34;https://www.paypal.me/bucanerodev&#34;&gt;PayPal donation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Setup instructions&lt;/h1&gt; &#xA;&lt;p&gt;No special setup is needed. Just download the latest &lt;code&gt;IV0000-GOLD00777_00-GOLDCHEATS000PS4.pkg&lt;/code&gt; package and install it on your PlayStation 4. On first run, the application will detect and setup the required user settings.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Using the application is simple and straight-forward:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Move &lt;kbd&gt;UP&lt;/kbd&gt;/&lt;kbd&gt;DOWN&lt;/kbd&gt; to select the cheat file you want to view, and press &lt;img src=&#34;https://github.com/bucanero/pkgi-ps3/raw/master/data/CROSS.png&#34; alt=&#34;X button&#34;&gt;. The cheat list screen will show the available codes for the game.&lt;/li&gt; &#xA; &lt;li&gt;To view the item&#39;s details, press &lt;img src=&#34;https://github.com/bucanero/pkgi-ps3/raw/master/data/TRIANGLE.png&#34; alt=&#34;Triangle&#34;&gt;. It will open the context menu on the screen. Press &lt;img src=&#34;https://github.com/bucanero/pkgi-ps3/raw/master/data/CIRCLE.png&#34; alt=&#34;O button&#34;&gt; to return to the list.&lt;/li&gt; &#xA; &lt;li&gt;To reload the list, press &lt;img src=&#34;https://github.com/bucanero/pkgi-ps3/raw/master/data/SQUARE.png&#34; alt=&#34;Square&#34;&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;kbd&gt;L1&lt;/kbd&gt;/&lt;kbd&gt;L2&lt;/kbd&gt; or &lt;kbd&gt;R1&lt;/kbd&gt;/&lt;kbd&gt;R2&lt;/kbd&gt; trigger buttons to move pages up or down.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Online Database&lt;/h1&gt; &#xA;&lt;p&gt;The application also provides direct access to the &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Repository&#34;&gt;Online Cheat database&lt;/a&gt;, the official GoldHEN repository of cheat files for PlayStation 4 games.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero&#34;&gt;Bucanero&lt;/a&gt;: Project developer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ctn123&#34;&gt;Ctn123&lt;/a&gt;: Cheat Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ScriptSK&#34;&gt;Shiningami&lt;/a&gt;: Cheat Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SiSTR0&#34;&gt;SiSTRo&lt;/a&gt;: &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN&#34;&gt;GoldHEN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmeps4&#34;&gt;Kameleon&lt;/a&gt;: QA Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Artemis PS3 credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dnawrkshp/&#34;&gt;Dnawrkshp&lt;/a&gt;: &lt;a href=&#34;https://github.com/Dnawrkshp/ArtemisPS3&#34;&gt;Artemis PS3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.psx-place.com/members/berion.1431/&#34;&gt;Berion&lt;/a&gt;: GUI design&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;You need to have installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenOrbis/OpenOrbis-PS4-Toolchain/&#34;&gt;Open Orbis SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/cJSON&#34;&gt;cJSON&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/zip&#34;&gt;Zip&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PacBrew/SDL/tree/ps4&#34;&gt;SDL2&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/ps4-libjbc&#34;&gt;libJbc&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/mxml&#34;&gt;Mini-XML&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/oosdk_libraries/tree/master/polarssl-1.3.9&#34;&gt;PolarSSL&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/oosdk_libraries/tree/master/curl-7.64.1&#34;&gt;libcurl&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bucanero/dbglogger&#34;&gt;dbglogger&lt;/a&gt; library (required for debug logging)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to create a release build. If you want to include the latest save patches in your &lt;code&gt;.pkg&lt;/code&gt; file, run &lt;code&gt;make createzip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also set the &lt;code&gt;PS3LOAD&lt;/code&gt; environment variable to your PS4 IP address: &lt;code&gt;export PS3LOAD=tcp:x.x.x.x&lt;/code&gt;. This will allow you to use &lt;code&gt;make run&lt;/code&gt; and send &lt;code&gt;eboot.bin&lt;/code&gt; directly to the &lt;a href=&#34;https://github.com/bucanero/ps4load&#34;&gt;PS4Load listener&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable debug logging, build it with &lt;code&gt;make DEBUGLOG=1&lt;/code&gt;. The application will send debug messages to UDP multicast address &lt;code&gt;239.255.0.100:30000&lt;/code&gt;. To receive them you can use &lt;a href=&#34;http://www.dest-unreach.org/socat/&#34;&gt;socat&lt;/a&gt; on your computer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ socat udp4-recv:30000,ip-add-membership=239.255.0.100:0.0.0.0 -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/&#34;&gt;GoldHEN Cheats Manager&lt;/a&gt; - Copyright (C) 2022 &lt;a href=&#34;https://twitter.com/dparrino&#34;&gt;Damian Parrino&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN_Cheat_Manager/raw/main/LICENSE&#34;&gt;GNU General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt;</summary>
  </entry>
</feed>