<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-02T01:31:19Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alt-romes/programmer-calculator</title>
    <updated>2023-02-02T01:31:19Z</updated>
    <id>tag:github.com,2023-02-02:/alt-romes/programmer-calculator</id>
    <link href="https://github.com/alt-romes/programmer-calculator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal calculator made for programmers working with multiple number representations, sizes, and overall close to the bits&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Programmer calculator&lt;/h2&gt; &#xA;&lt;p&gt;The programmer calculator is a simple terminal tool designed to give maximum efficiency and flexibility to the programmer working with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;binary, hexadecimal and decimal representations at the same time&lt;/li&gt; &#xA; &lt;li&gt;bitwise operations&lt;/li&gt; &#xA; &lt;li&gt;various operand sizes &lt;em&gt;(16bits, 32bits, 8bits, etc)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and who likes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a clear, simple and customizable interface&lt;/li&gt; &#xA; &lt;li&gt;open source software&lt;/li&gt; &#xA; &lt;li&gt;terminal/cli tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alt-romes/programmer-calculator/master/assets/v2.0-ss.png&#34; alt=&#34;Screen&#34;&gt; The above picture depicts &lt;code&gt;pcalc&lt;/code&gt; without colors, and below is an example of &lt;code&gt;pcalc&lt;/code&gt; with colors enabled (&lt;code&gt;--colors&lt;/code&gt;) (which change depending on the terminal profile colors) &lt;img src=&#34;https://raw.githubusercontent.com/alt-romes/programmer-calculator/colors/assets/v2.0-ss-colors.png&#34; alt=&#34;Screen-Colored&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Making of&lt;/h2&gt; &#xA;&lt;p&gt;The idea was born while developing a Nintendo Gameboy Emulator. Romes - the pitcher - found that the tools given online were clunky and did not allow for &#34;nice multitasking&#34;&lt;/p&gt; &#xA;&lt;p&gt;With the constant need to visualize and manipulate bits, it became evident that a better solution had to come to life&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;Install from the homebrew official packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install pcalc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch Based Distros&lt;/h4&gt; &#xA;&lt;p&gt;Install from AUR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yay -S programmer-calculator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building from Source (alternative)&lt;/h4&gt; &#xA;&lt;h5&gt;Prerequisites:&lt;/h5&gt; &#xA;&lt;p&gt;To build from source you need &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;ncurses&lt;/code&gt;, and the source files. &lt;strong&gt;If you don&#39;t have ncurses, please install it (i.e. with your system&#39;s package manager) first.&lt;/strong&gt; &lt;em&gt;(To install ncurses in Debian based distros run &lt;code&gt;sudo apt-get install libncurses5-dev libncursesw5-dev&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Building:&lt;/h5&gt; &#xA;&lt;p&gt;First, clone the repository and change directory to it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/alt-romes/programmer-calculator ; cd programmer-calculator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, compile the code into an executable file and install it (installs in /usr/local/bin)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Updating&lt;/h4&gt; &#xA;&lt;p&gt;Either re-build from source, or, using brew do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;followed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew upgrade pcalc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running&lt;/h4&gt; &#xA;&lt;p&gt;Just run the programmer calculator program&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pcalc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;There are various ways to insert values/operators, see the example &lt;code&gt;2 + 2&lt;/code&gt; below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;, followed by &lt;code&gt;+&lt;/code&gt;, followed by &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;, followed by &lt;code&gt;+2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2+&lt;/code&gt;, followed by &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2+2&lt;/code&gt; (or i.e. &lt;code&gt;2 + 2&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Inline Math&lt;/h4&gt; &#xA;&lt;p&gt;Operator precedence and parenthesis for grouping is used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2+2*3&lt;/code&gt; evaluates to &lt;code&gt;8&lt;/code&gt; and &lt;code&gt;(2+2)*3&lt;/code&gt; evaluates to &lt;code&gt;12&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hex + Binary + Decimal&lt;/h3&gt; &#xA;&lt;p&gt;All three number representations are available at the same time, you can insert &lt;code&gt;0xff + 0b101101 - 5&lt;/code&gt; directly onto the calculator&lt;/p&gt; &#xA;&lt;h3&gt;Operand Size&lt;/h3&gt; &#xA;&lt;p&gt;By default, 64 bits are used for arithmetic, however, when working with bits, quite often we want to work with less. With this calculator you can change the amount of bits used. the number displayed will be unsigned&lt;/p&gt; &#xA;&lt;p&gt;To use 16 bits instead, type &lt;code&gt;16bit&lt;/code&gt; (bits will also work)&lt;/p&gt; &#xA;&lt;p&gt;To use 8 bits, type &lt;code&gt;8bit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use 0 &amp;lt; n &amp;lt;= 64 bits, type &lt;code&gt;nbit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customizing Interface&lt;/h3&gt; &#xA;&lt;p&gt;While running the calculator, you can type &lt;em&gt;what you see&lt;/em&gt; for it to appear/disappear:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;history&lt;/code&gt; to toggle the history &lt;code&gt;decimal&lt;/code&gt; to toggle the decimal representation &lt;code&gt;binary&lt;/code&gt; to toggle the binary representation &lt;code&gt;hex&lt;/code&gt; to toggle the hexadecimal representation &lt;code&gt;operation&lt;/code&gt; to toggle the operation display&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the interface colors can be toggled on and off.&lt;/p&gt; &#xA;&lt;p&gt;To set a default interface, define an alias for the program with the desired hidden options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias pcalc=&#39;pcalc -ibxdosn&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;i: history, b: binary, x: hex, d: decimal, o: operation, s: symbols, n: no colors&lt;/p&gt; &#xA;&lt;p&gt;You can also use the long options to hide parts: &lt;code&gt;--history&lt;/code&gt;, &lt;code&gt;--decimal&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Operations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ADD  +    SUB  -    MUL  *    DIV  /&#xA;MOD  %    AND  &amp;amp;    OR   |    NOR  $&#xA;XOR  ^    NOT  ~    SL   &amp;lt;    SR   &amp;gt;&#xA;RL   :    RR   ;    2&#39;s  _    SE   @&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ADD: &lt;code&gt;a + b&lt;/code&gt; arithmetic addition&lt;/li&gt; &#xA; &lt;li&gt;SUB: &lt;code&gt;a - b&lt;/code&gt; arithmetic subtraction&lt;/li&gt; &#xA; &lt;li&gt;MUL: &lt;code&gt;a * b&lt;/code&gt; arithmetic multiplication&lt;/li&gt; &#xA; &lt;li&gt;DIV: &lt;code&gt;a / b&lt;/code&gt; arithmetic integer division&lt;/li&gt; &#xA; &lt;li&gt;MOD: &lt;code&gt;a % b&lt;/code&gt; modulus from the division&lt;/li&gt; &#xA; &lt;li&gt;AND: &lt;code&gt;a &amp;amp; b&lt;/code&gt; bit-wise AND operation&lt;/li&gt; &#xA; &lt;li&gt;OR : &lt;code&gt;a | b&lt;/code&gt; bit-wise OR operation&lt;/li&gt; &#xA; &lt;li&gt;NOR: &lt;code&gt;a $ b&lt;/code&gt; bit-wise NOR operation : opposite of OR&lt;/li&gt; &#xA; &lt;li&gt;XOR: &lt;code&gt;a ^ b&lt;/code&gt; bit-wise XOR operation : exclusive OR&lt;/li&gt; &#xA; &lt;li&gt;NOT: &lt;code&gt;~a&lt;/code&gt; bit-wise NOT operation : change all bits of a, 0&#39;s into 1&#39;s and 1&#39;s into 0&#39;s&lt;/li&gt; &#xA; &lt;li&gt;SL : &lt;code&gt;a &amp;lt; b&lt;/code&gt; bit-wise SHIFT-LEFT operation : shift a left b number of times&lt;/li&gt; &#xA; &lt;li&gt;SR : &lt;code&gt;a &amp;gt; b&lt;/code&gt; bit-wise SHIFT-RIGHT operation : shift a right b number of times&lt;/li&gt; &#xA; &lt;li&gt;RL : &lt;code&gt;a : b&lt;/code&gt; bit-wise ROTATE-LEFT operation : rotate a left b number of times&lt;/li&gt; &#xA; &lt;li&gt;RR : &lt;code&gt;a ; b&lt;/code&gt; bit-wise ROTATE-LEFT operation : rotate a right b number of times&lt;/li&gt; &#xA; &lt;li&gt;2&#39;s: &lt;code&gt;_a&lt;/code&gt; 2&#39;s complement operation : 2&#39;s complement of a (usually is the symmetric of a)&lt;/li&gt; &#xA; &lt;li&gt;SE : &lt;code&gt;@a&lt;/code&gt; swap endianness : swap the byte order of a (uses the number of bits set by &lt;code&gt;bit&lt;/code&gt; to determine the amount of bits swapped)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please reference &lt;a href=&#34;https://github.com/alt-romes/programmer-calculator/raw/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;example usage in iterm panel&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alt-romes/programmer-calculator/master/assets/panels.png&#34; alt=&#34;Panels&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>universal-ctags/ctags</title>
    <updated>2023-02-02T01:31:19Z</updated>
    <id>tag:github.com,2023-02-02:/universal-ctags/ctags</id>
    <link href="https://github.com/universal-ctags/ctags" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A maintained ctags implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Universal Ctags&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/projects/4355&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/4355/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/universal-ctags/ctags?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/universal-ctags/ctags/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/universalctags/ctags/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/6hk2p5lv6jsrd9o7/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.ctags.io&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/ctags/badge&#34; alt=&#34;RTD build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/universal-ctags&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/universal-ctags/ctags.svg?style=shield&amp;amp;circle-token=2e582261da84ebc6d21725b05381f410bc5de29d&#34; alt=&#34;CircleCI Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/universal-ctags/ctags/workflows/run%20units%20target%20under%20VALGRIND/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions/VALGRIND&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ctags.io/&#34;&gt;Universal Ctags&lt;/a&gt; (abbreviated as u-ctags) is a &lt;em&gt;maintained&lt;/em&gt; implementation of &lt;code&gt;ctags&lt;/code&gt;. &lt;code&gt;ctags&lt;/code&gt; generates an index (or tag) file of language objects found in source files for programming languages. This index makes it easy for text editors and other tools to locate the indexed items.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ctags.sourceforge.net/&#34;&gt;Exuberant Ctags&lt;/a&gt; (e-ctags) maintained by Darren Hiebert, the ancestor of Universal Ctags, improved traditional &lt;code&gt;ctags&lt;/code&gt; with multi-language support, the ability for the user to define new languages searched by regular expressions (called optlib in Universal Ctags), and the ability to generate emacs-style TAGS files. But the activity of the project unfortunately stalled.&lt;/p&gt; &#xA;&lt;p&gt;Universal Ctags has the objective of continuing the development of Exuberant Ctags. Reza Jelveh &lt;a href=&#34;mailto:reza.jelveh@gmail.com&#34;&gt;reza.jelveh@gmail.com&lt;/a&gt; initially created a personal fork of Exuberant Ctags on GitHub. As interest and participation grew, it was decided to move development to a dedicated project as Universal Ctags. The goal of this project is to maintain a common/unified working space where people interested in making ctags better can work together.&lt;/p&gt; &#xA;&lt;p&gt;Some of the major features of Universal Ctags are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;more numbers of improved language support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;new extended C/C++ language parser, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;fully extended optlib (a feature to define a new language parser from a command line)&lt;/li&gt; &#xA; &lt;li&gt;interactive mode (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The latest build and package&lt;/h2&gt; &#xA;&lt;p&gt;If you want to try the latest Universal Ctags without building it yourself...&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Daily builds are available at the &lt;a href=&#34;https://github.com/universal-ctags/ctags-win32&#34;&gt;ctags-win32&lt;/a&gt; project. Go to the &lt;a href=&#34;https://github.com/universal-ctags/ctags-win32/releases&#34;&gt;releases&lt;/a&gt; page to download zip packages.&lt;/p&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/universal-ctags/homebrew-universal-ctags&#34;&gt;Homebrew Tap for Universal Ctags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Snap&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/universal-ctags/ctags-snap&#34;&gt;ctags-snap&lt;/a&gt; and clone the &lt;code&gt;ctags-snap&lt;/code&gt; repo. Then, follow instructions to build the snap package of Universal Ctags. Snapcraft will automatically fetch the source code from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;How to build and install&lt;/h2&gt; &#xA;&lt;p&gt;To build with Autotools (Autoconf and Automake) on GNU/Linux, OSX, or Windows 10 WSL,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ git clone https://github.com/universal-ctags/ctags.git&#xA;    $ cd ctags&#xA;    $ ./autogen.sh&#xA;    $ ./configure --prefix=/where/you/want # defaults to /usr/local&#xA;    $ make&#xA;    $ make install # may require extra privileges depending on where to install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GNU make is assumed as the &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/universal-ctags/ctags/raw/master/docs/autotools.rst&#34;&gt;&lt;code&gt;docs/autotools.rst&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;To build on Windows, see &lt;a href=&#34;https://github.com/universal-ctags/ctags/raw/master/docs/windows.rst&#34;&gt;&lt;code&gt;docs/windows.rst&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;To build on OSX, see &lt;a href=&#34;https://github.com/universal-ctags/ctags/raw/master/docs/osx.rst&#34;&gt;&lt;code&gt;docs/osx.rst&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;The primary documents of Universal Ctags are man pages. Users should first consult the &lt;a href=&#34;https://docs.ctags.io/en/latest/man/ctags.1.html&#34;&gt;ctags(1)&lt;/a&gt;, and &lt;a href=&#34;https://docs.ctags.io/en/latest/man-pages.html&#34;&gt;other man pages&lt;/a&gt; if necessary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.ctags.io&#34;&gt;Universal Ctags Hacking Guide&lt;/a&gt;, which also includes the man pages, is primarily for developers and provides additional information to the man pages, including experimental features.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;*/README.md&lt;/code&gt; on this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Differences from exuberant-ctags&lt;/h2&gt; &#xA;&lt;p&gt;You may be interested in how Universal Ctags is different from Exuberant Ctags. See &lt;a href=&#34;https://docs.ctags.io/en/latest/man/ctags-incompatibilities.7.html&#34;&gt;ctags-incompatibilities(7)&lt;/a&gt; and &lt;a href=&#34;https://docs.ctags.io/en/latest/news.html&#34;&gt;Introduced changes&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;The most significant incompatible changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Universal Ctags doesn&#39;t load &lt;code&gt;~/.ctags&lt;/code&gt; and &lt;code&gt;./.ctags&lt;/code&gt; at starting up time. Instead, it loads &lt;code&gt;~/.ctags.d/*.ctags&lt;/code&gt; and &lt;code&gt;./.ctags.d/*.ctags&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Universal Ctags is more strict about characters that can be used in kind letters and kind names than Exuberant-ctags.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The letter must be an alphabetical character (&lt;code&gt;[a-zA-EG-Z]&lt;/code&gt;). &lt;code&gt;F&lt;/code&gt; is reserved for &lt;code&gt;file&lt;/code&gt; kind.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The first character of the name must be alphabetic, and the rest characters must be alphanumeric (&lt;code&gt;[a-zA-Z][a-zA-Z0-9]*&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The detailed background is explained in &lt;a href=&#34;https://github.com/universal-ctags/ctags/pull/1737&#34;&gt;#1737&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you want to reuse your &lt;code&gt;.ctags&lt;/code&gt; written for Exuberant-ctags, you must review kind letters and names defined with &lt;code&gt;--regex-&amp;lt;LANG&amp;gt;=...&lt;/code&gt; options. When updating the definitions, using &lt;code&gt;--kinddef-&amp;lt;LANG&amp;gt;=...&lt;/code&gt; option is appreciated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2022-4515&#34;&gt;CVE-2022-4515&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;It is not affected to Universal Ctags. It was fixed in &lt;a href=&#34;https://github.com/universal-ctags/ctags/commit/e00c55d7a0204dc1d0ae316141323959e1e16162&#34;&gt;e00c55d7a0204dc1d0ae316141323959e1e16162&lt;/a&gt; in 2016. Thanks to the reporter.&lt;/p&gt; &#xA;&lt;p&gt;Pull-requests are welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OmriBaso/RToolZ</title>
    <updated>2023-02-02T01:31:19Z</updated>
    <id>tag:github.com,2023-02-02:/OmriBaso/RToolZ</id>
    <link href="https://github.com/OmriBaso/RToolZ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Stealthy Lsass Dumper - can abuse ProcExp152.sys driver to dump PPL Lsass, no dbghelp.lib calls.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RToolZ&lt;/h1&gt; &#xA;&lt;p&gt;A Stealthy Lsass Dumper - can abuse ProcExp152.sys driver to dump PPL Lsass.&lt;/p&gt; &#xA;&lt;h1&gt;What Is So Special About It?&lt;/h1&gt; &#xA;&lt;p&gt;No calls to MiniDump or any dbghelp.lib methods, all of the dumping process is done MANUALLY by the dumper while reducing the dump size to minimal by removing unessacery DLLs.&lt;/p&gt; &#xA;&lt;h1&gt;Methods &amp;amp; How to use&lt;/h1&gt; &#xA;&lt;p&gt;The OmriToolZ have 3 methods to dump lsass:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first method is simply using direct syscalls to get an lsass handle.&lt;/li&gt; &#xA; &lt;li&gt;The second method, an handle to lsass is being requested with the &lt;code&gt;PROCESS_CREATE_PROCESS&lt;/code&gt; permissions, create a new process in the name of lsass and forks the new process in order to get &lt;code&gt;PROCESS_ALL_ACCESS&lt;/code&gt; to lsass.exe (some kind of handle privilege escaltion).&lt;/li&gt; &#xA; &lt;li&gt;The third method can only work with &lt;code&gt;PROCEXP152.sys&lt;/code&gt; DRIVER loaded, this method will obtain an HANDLE to the driver and abuse it to get an handle on the LSASS.exe process&lt;br&gt; this can be used to bypass &lt;code&gt;&#34;RunAsPPL&#34;&lt;/code&gt; lsass defense, simply run &lt;code&gt;.\procexp64.exe -accepteula /t&lt;/code&gt; &lt;em&gt;BEFORE&lt;/em&gt; using the third method of dumping, you can also load the driver in any other way that you would like.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Flags:&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;--valid&lt;/code&gt; - flag will be used to generate a dump without randomizing the signiture, if it is not used you must use the restore_signature.sh script.&lt;br&gt; &lt;code&gt;--write&lt;/code&gt; - specifies the path where you throw the dump into the disk.&lt;br&gt; &lt;code&gt;-m&lt;/code&gt; - specifies the methods listed above.&lt;br&gt; &lt;code&gt;-p&lt;/code&gt; - the PID of lsass.exe&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Some of the code was taken and modified from the &lt;a href=&#34;https://github.com/helpsystems/nanodump&#34;&gt;https://github.com/helpsystems/nanodump&lt;/a&gt; project.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>