<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-20T01:31:59Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joeycastillo/Sensor-Watch</title>
    <updated>2022-10-20T01:31:59Z</updated>
    <id>tag:github.com,2022-10-20:/joeycastillo/Sensor-Watch</id>
    <link href="https://github.com/joeycastillo/Sensor-Watch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Sensor Watch&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.sensorwatch.net&#34;&gt;Sensor Watch&lt;/a&gt; is a board replacement for the classic Casio F-91W wristwatch. It is powered by a Microchip SAM L22 microcontroller with built-in segment LCD controller. You can write your own programs for the watch using the provided watch library, program the watch over USB using the built-in UF2 bootloader, and then install the board in your existing watch case to run your own software on your wrist.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joeycastillo/Sensor-Watch/main/images/sensor-watch.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ARM Cortex M0+ microcontroller&lt;/li&gt; &#xA; &lt;li&gt;32KHz crystal for real-time clock with alarm function&lt;/li&gt; &#xA; &lt;li&gt;Ten digit segment LCD, plus five indicator segments&lt;/li&gt; &#xA; &lt;li&gt;Three interrupt capable buttons&lt;/li&gt; &#xA; &lt;li&gt;Red / green PWM’able LED backlight&lt;/li&gt; &#xA; &lt;li&gt;Optional piezo buzzer (requires some light soldering)&lt;/li&gt; &#xA; &lt;li&gt;On-board USB Micro B connector&lt;/li&gt; &#xA; &lt;li&gt;Reset button with double-tap UF2 bootloader&lt;/li&gt; &#xA; &lt;li&gt;Nine-pin flex PCB connector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joeycastillo/Sensor-Watch/main/images/sensor-board.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may have noticed that there are no sensors on this board. That is by design: rather than pick sensors for you, the goal is to add a tiny flexible PCB with the sensors YOU want, and interface them over the nine-pin connector. The connector provides the following options for power and connectivity:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3V power (nominal voltage from a CR2016 coin cell, can drop to ~2.7V)&lt;/li&gt; &#xA; &lt;li&gt;An I²C interface with built-in pull-up resistors&lt;/li&gt; &#xA; &lt;li&gt;Five general purpose IO pins, which can be configured as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Five analog inputs&lt;/li&gt; &#xA;   &lt;li&gt;Five interrupt-capable digital inputs, with internal pull-up or pull-down resistors&lt;/li&gt; &#xA;   &lt;li&gt;Five digital outputs&lt;/li&gt; &#xA;   &lt;li&gt;SPI controller (with one spare analog / GPIO pin leftover)&lt;/li&gt; &#xA;   &lt;li&gt;One UART TX/RX pair (with three GPIO leftover)&lt;/li&gt; &#xA;   &lt;li&gt;Up to four PWM pins on two independent TC instances&lt;/li&gt; &#xA;   &lt;li&gt;Two external wake inputs that can wake from the ultra-low-power BACKUP mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Pin&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Digital&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Interrupt&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Analog&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;I2C&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;SPI&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;UART&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;PWM&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Ext. Wake&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[4]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[12]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;SCL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SCL&lt;br&gt;SERCOM1[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;SDA&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SDA&lt;br&gt;SERCOM1[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[9]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SCK&lt;br&gt;SERCOM3[3]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RX&lt;br&gt;SERCOM3[3]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC3[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[2]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[10]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MOSI&lt;br&gt;SERCOM3[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TX or RX&lt;br&gt;SERCOM3[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC2[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RTC/IN[1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[3]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[11]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CS&lt;br&gt;SERCOM3[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RX&lt;br&gt;SERCOM3[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC2[1]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;A4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PB00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EIC/EXTINT[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADC/AIN[8]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;—&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MISO&lt;br&gt;SERCOM3[2]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TX or RX&lt;br&gt;SERCOM3[2]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TC3[0]&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RTC/IN[0]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These tiny “sensor boards” have a set outline, and the available area for your electronics is quite small (5.7 × 5.7 × 1 mm). Still, this is plenty of room for an environmental sensor, MEMS accelerometer or magnetometer and a couple of decoupling capacitors. Note that you will likely be limited to QFN and LGA type parts; SOICs are too large, and even SSOP packages are generally too thick. You can find reference designs for several sensor boards in the &lt;code&gt;PCB/Sensor Boards&lt;/code&gt; directory within this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Getting code on the watch&lt;/h2&gt; &#xA;&lt;p&gt;The watch library in this repository is very work-in-progress, but it should allow you to get started. To create a new project, copy the “starter-project” folder in the apps folder, and write your code in the app.c file.&lt;/p&gt; &#xA;&lt;p&gt;You will need to install &lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads/&#34;&gt;the GNU Arm Embedded Toolchain&lt;/a&gt; to build projects for the watch. The watch library has been tested with the &lt;code&gt;9-2019-q4-major&lt;/code&gt; version and the &lt;code&gt;10.3-2021.07&lt;/code&gt; versions. If you&#39;re using Debian or Ubuntu, it should be sufficient to &lt;code&gt;apt install gcc-arm-none-eabi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build your project, open your terminal and navigate to the project&#39;s &lt;code&gt;make&lt;/code&gt; folder, then type &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install the project onto your Sensor Watch board, plug the watch into your USB port and double tap the tiny Reset button on the back of the board. You should see the LED light up red and begin pulsing. (If it does not, make sure you didn’t plug the board in upside down). Once you see the “WATCHBOOT” drive appear on your desktop, type &lt;code&gt;make install&lt;/code&gt;. This will convert your compiled program to a UF2 file, and copy it over to the watch.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Movement framework&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to make minor modifications and use existing code, start with the &lt;code&gt;movement&lt;/code&gt; directory. You can build the default watch firmware with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd movement/make&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then copy &lt;code&gt;movement/make/build/watch.uf2&lt;/code&gt; to your watch. If you&#39;d like to modify which faces are built, see &lt;code&gt;movement_config.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may want to test out changes in the emulator first. To do this, you&#39;ll need to install &lt;a href=&#34;https://emscripten.org/&#34;&gt;emscripten&lt;/a&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd movement/make&#xA;emmake make&#xA;python3 -m http.server 8000 -d build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, visit &lt;a href=&#34;http://localhost:8000/watch.html&#34;&gt;watch.html&lt;/a&gt; to see your work.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mcu-tools/mcuboot</title>
    <updated>2022-10-20T01:31:59Z</updated>
    <id>tag:github.com,2022-10-20:/mcu-tools/mcuboot</id>
    <link href="https://github.com/mcu-tools/mcuboot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Secure boot for 32-bit Microcontrollers!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;http://mcuboot.com/&#34;&gt;MCUboot&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/imgtool/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/imgtool.svg?sanitize=true&#34; alt=&#34;Package on PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/mcuboot&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/12307/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mcu-tools/mcuboot/actions?query=workflow:Sim&#34;&gt;&lt;img src=&#34;https://github.com/mcu-tools/mcuboot/workflows/Sim/badge.svg?sanitize=true&#34; alt=&#34;Build Status (Sim)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mcu-tools/mcuboot/actions?query=workflow:Mynewt&#34;&gt;&lt;img src=&#34;https://github.com/mcu-tools/mcuboot/workflows/Mynewt/badge.svg?sanitize=true&#34; alt=&#34;Build Status (Mynewt)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mcu-tools/mcuboot/actions?query=workflow:imgtool&#34;&gt;&lt;img src=&#34;https://github.com/mcu-tools/mcuboot/workflows/imgtool/badge.svg?sanitize=true&#34; alt=&#34;Publishing Status (imgtool)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/mcu-tools/mcuboot&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/mcu-tools/mcuboot/main.svg?label=travis-ci&#34; alt=&#34;Build Status (Travis CI)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mcu-tools/mcuboot/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is MCUboot version 1.10.0-dev&lt;/p&gt; &#xA;&lt;p&gt;MCUboot is a secure bootloader for 32-bits microcontrollers. It defines a common infrastructure for the bootloader and the system flash layout on microcontroller systems, and provides a secure bootloader that enables easy software upgrade.&lt;/p&gt; &#xA;&lt;p&gt;MCUboot is not dependent on any specific operating system and hardware and relies on hardware porting layers from the operating system it works with. Currently, MCUboot works with the following operating systems and SoCs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zephyrproject.org/&#34;&gt;Zephyr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mynewt.apache.org/&#34;&gt;Apache Mynewt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuttx.apache.org/&#34;&gt;Apache NuttX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.riot-os.org/&#34;&gt;RIOT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.mbed.com/&#34;&gt;Mbed OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.espressif.com/&#34;&gt;Espressif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cypress.com/&#34;&gt;Cypress/Infineon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;RIOT is supported only as a boot target. We will accept any new port contributed by the community once it is good enough.&lt;/p&gt; &#xA;&lt;h2&gt;MCUboot How-tos&lt;/h2&gt; &#xA;&lt;p&gt;See the following pages for instructions on using MCUboot with different operating systems and SoCs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/docs/readme-zephyr.md&#34;&gt;Zephyr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/docs/readme-mynewt.md&#34;&gt;Apache Mynewt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/docs/readme-nuttx.md&#34;&gt;Apache NuttX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/docs/readme-riot.md&#34;&gt;RIOT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/docs/readme-mbed.md&#34;&gt;Mbed OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/docs/readme-espressif.md&#34;&gt;Espressif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/boot/cypress/README.md&#34;&gt;Cypress/Infineon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also instructions for the &lt;a href=&#34;https://raw.githubusercontent.com/mcu-tools/mcuboot/main/sim/README.rst&#34;&gt;Simulator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The issues being planned and worked on are tracked using GitHub issues. To give your input, visit &lt;a href=&#34;https://github.com/mcu-tools/mcuboot/issues&#34;&gt;MCUboot GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Source files&lt;/h2&gt; &#xA;&lt;p&gt;You can find additional documentation on the bootloader in the source files. For more information, use the following links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/bootutil&#34;&gt;boot/bootutil&lt;/a&gt; - The core of the bootloader itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/boot_serial&#34;&gt;boot/boot_serial&lt;/a&gt; - Support for serial upgrade within the bootloader itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/zephyr&#34;&gt;boot/zephyr&lt;/a&gt; - Port of the bootloader to Zephyr.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/mynewt&#34;&gt;boot/mynewt&lt;/a&gt; - Bootloader application for Apache Mynewt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/nuttx&#34;&gt;boot/nuttx&lt;/a&gt; - Bootloader application and port of MCUboot interfaces for Apache NuttX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/mbed&#34;&gt;boot/mbed&lt;/a&gt; - Port of the bootloader to Mbed OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/espressif&#34;&gt;boot/espressif&lt;/a&gt; - Bootloader application and MCUboot port for Espressif SoCs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/boot/cypress&#34;&gt;boot/cypress&lt;/a&gt; - Bootloader application and MCUboot port for Cypress/Infineon SoCs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/scripts/imgtool.py&#34;&gt;imgtool&lt;/a&gt; - A tool to securely sign firmware images for booting by MCUboot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcu-tools/mcuboot/tree/main/sim&#34;&gt;sim&lt;/a&gt; - A bootloader simulator for testing and regression.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Joining the project&lt;/h2&gt; &#xA;&lt;p&gt;Developers are welcome!&lt;/p&gt; &#xA;&lt;p&gt;Use the following links to join or see more about the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.io/g/MCUBoot&#34;&gt;Our developer mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mcuboot.slack.com/&#34;&gt;Our Slack channel&lt;/a&gt; &lt;br&gt; Get &lt;a href=&#34;https://join.slack.com/t/mcuboot/shared_invite/MjE2NDcwMTQ2MTYyLTE1MDA4MTIzNTAtYzgyZTU0NjFkMg&#34;&gt;your invite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>BohemiaInteractive/DayZ-Central-Economy</title>
    <updated>2022-10-20T01:31:59Z</updated>
    <id>tag:github.com,2022-10-20:/BohemiaInteractive/DayZ-Central-Economy</id>
    <link href="https://github.com/BohemiaInteractive/DayZ-Central-Economy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DayZ Central Economy configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DayZ-Central-Economy&lt;/h1&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the following pages for more information&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.bistudio.com/wiki/DayZ:Central_Economy_Configuration&#34;&gt;https://community.bistudio.com/wiki/DayZ:Central_Economy_Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.bistudio.com/wiki/DayZ:Central_Economy_setup_for_custom_terrains&#34;&gt;https://community.bistudio.com/wiki/DayZ:Central_Economy_setup_for_custom_terrains&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Arma and Dayz Public License Share Alike (ADPL-SA)&lt;/p&gt; &#xA;&lt;p&gt;PLEASE, NOTE THAT THIS SUMMARY HAS NO LEGAL EFFECT AND IS ONLY OF AN INFORMATORY NATURE DESIGNED FOR YOU TO GET THE BASIC INFORMATION ABOUT THE CONTENT OF THIS LICENCE. THE ONLY LEGALLY BINDING PROVISIONS ARE THOSE IN THE ORIGINAL AND FULL TEXT OF THIS LICENSE.&lt;/p&gt; &#xA;&lt;p&gt;With this license you are free to adapt (i.e. modify, rework or update) and share (i.e. copy, distribute or transmit) the material under the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Attribution - You must attribute the material in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the material).&lt;/li&gt; &#xA; &lt;li&gt;Noncommercial - You may not use this material for any commercial purposes.&lt;/li&gt; &#xA; &lt;li&gt;Arma and Dayz Only - You may not convert or adapt this material to be used in other games than Arma and Dayz.&lt;/li&gt; &#xA; &lt;li&gt;Share Alike - If you adapt, or build upon this material, you may distribute the resulting material only under the same license.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full text: &lt;a href=&#34;https://www.bohemia.net/community/licenses/arma-and-dayz-public-license-share-alike-adpl-sa&#34;&gt;https://www.bohemia.net/community/licenses/arma-and-dayz-public-license-share-alike-adpl-sa&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>