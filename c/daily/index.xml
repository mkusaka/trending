<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-31T01:25:23Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antirez/smallchat</title>
    <updated>2023-10-31T01:25:23Z</updated>
    <id>tag:github.com,2023-10-31:/antirez/smallchat</id>
    <link href="https://github.com/antirez/smallchat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal programming example for a chat server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smallchat&lt;/h1&gt; &#xA;&lt;p&gt;TLDR: This is just a programming example for a few friends of mine. Long story follows.&lt;/p&gt; &#xA;&lt;p&gt;Yesterday I was talking with a few friends of mine, front-end developers mostly, that are a bit far from system programming. We were remembering the old times of IRC. And inevitably I said: to write a very simple IRC server is an experience everybody should do. There are very interesting parts in a program like that. A single process doing multiplexing, taking the client state, that can be done in different ways, and so forth.&lt;/p&gt; &#xA;&lt;p&gt;But then the discussion evolved and I thought, I&#39;ll show you a very minimal example in C. But what is the smallest chat server you can write? For starters to be truly minimal we should not require any proper client. Even if not very well, it should work with &lt;code&gt;telnet&lt;/code&gt; or &lt;code&gt;nc&lt;/code&gt; (netcat). The server main operation is just to receive some chat line and send it to all the other clients, in what is sometimes called a fan-out operation. But yet, this would require a proper readline() function, then buffering, and so forth. We want it simpler: let&#39;s cheat using the kernel buffers, and pretending we every time receive a full-formed line from the client (an assumption that is in the practice often true, so things kinda work).&lt;/p&gt; &#xA;&lt;p&gt;Well, with this tricks we can implement a chat that even has the ability to let the user set their nick in just 200 lines of code (removing spaces and comments, of course). Since I wrote this little program as an example for my friends, I decided to also push it here on Github.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>netero1010/GhostTask</title>
    <updated>2023-10-31T01:25:23Z</updated>
    <id>tag:github.com,2023-10-31:/netero1010/GhostTask</id>
    <link href="https://github.com/netero1010/GhostTask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ghost Scheduled Task&lt;/h1&gt; &#xA;&lt;p&gt;While using scheduled tasks as a means of persistence is not a novel approach, threat actors have employed various techniques to conceal their malicious tasks. A notable method involves &lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/&#34;&gt;removing the SD registry key&lt;/a&gt;, which represents the security descriptor, thereby obscuring the scheduled task from forensic investigations.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://twitter.com/WithSecure&#34;&gt;WithSecure&lt;/a&gt;&#39;s research on &lt;a href=&#34;https://labs.withsecure.com/publications/scheduled-task-tampering&#34;&gt;Scheduled Task Tampering&lt;/a&gt;, they explained the feasibility of creating a scheduled task solely through registry key manipulation. Such an approach can bypass the generation of scheduled task creation event logs, like &lt;code&gt;4698&lt;/code&gt; and &lt;code&gt;106&lt;/code&gt;, offering a more stealth method of establishing persistence. In light of these insights, I&#39;ve crafted this POC to demonstrate creating scheduled tasks via direct registry manipulation.&lt;/p&gt; &#xA;&lt;p&gt;Given the undocumented nature of the registry key data structures related to scheduled tasks, my methodology for crafting them primarily relied on trial and error by comparing them with legitimate scheduled tasks. I also made references to the interfaces within &lt;code&gt;Taskschd.h&lt;/code&gt; and drew extensively from &lt;a href=&#34;https://cyber.wtf/2022/06/01/windows-registry-analysis-todays-episode-tasks/&#34;&gt;Cyber.WTF Windows Registry Analysis â€“ Today&#39;s Episode: Tasks&lt;/a&gt;. This research was invaluable in guiding me to formulate the data structures for key registry components, such as &lt;code&gt;Triggers&lt;/code&gt;, &lt;code&gt;Actions&lt;/code&gt;, and &lt;code&gt;DynamicInfo&lt;/code&gt;, which were essential to construct a functional scheduled task.&lt;/p&gt; &#xA;&lt;p&gt;The tool offers the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creates scheduled tasks with a restrictive security descriptor, making them invisible to all users.&lt;/li&gt; &#xA; &lt;li&gt;Establishes scheduled tasks directly via the registry, bypassing the generation of standard Windows event logs.&lt;/li&gt; &#xA; &lt;li&gt;Provides support to modify existing scheduled tasks without generating Windows event logs.&lt;/li&gt; &#xA; &lt;li&gt;Supports remote scheduled task creation (by using specially crafted Silver Ticket).&lt;/li&gt; &#xA; &lt;li&gt;Supports to run in C2 with in-memory PE execution module (e.g., &lt;code&gt;BruteRatel&#39;s memexec&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*Remark:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As of October 21, 2023, this tool has been tested on Windows 10, Windows Server 2016, 2019, and 2022&lt;/li&gt; &#xA; &lt;li&gt;As of October 21, 2023, no alert and no scheduled task creation event (&lt;code&gt;ScheduledTaskCreated&lt;/code&gt; action type) will be generated in MDE (Microsoft Defender For Endpoint)&lt;/li&gt; &#xA; &lt;li&gt;To create a scheduled task using this tool, &lt;strong&gt;&#34;NT AUTHORITY/SYSTEM&#34;&lt;/strong&gt; privileges are required&lt;/li&gt; &#xA; &lt;li&gt;After configuring the scheduled task, you&#39;ll need to either &lt;strong&gt;restart the system&lt;/strong&gt; or &lt;strong&gt;await the next reboot&lt;/strong&gt; for the task to be loaded into the &#34;Schedule&#34; service process and subsequently executed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: GhostTask.exe &amp;lt;hostname/localhost&amp;gt; &amp;lt;operation&amp;gt; &amp;lt;taskname&amp;gt; &amp;lt;program&amp;gt; &amp;lt;argument&amp;gt; &amp;lt;username&amp;gt; &amp;lt;scheduletype&amp;gt; &amp;lt;time/second&amp;gt; &amp;lt;day&amp;gt;&#xA;- hostname/localhost: Remote computer name or &#34;localhost&#34;.&#xA;- operation: add/delete&#xA;  - add: Create or modify a scheduled task using only registry keys. Requires restarting the &#34;Schedule&#34; service to load the task definition.&#xA;  - delete: Delete a scheduled task. Requires restarting the &#34;Schedule&#34; service to offload the task.&#xA;- taskname: Name of the scheduled task.&#xA;- program: Program to be executed.&#xA;- argument: Arguments for the program.&#xA;- username: User account under which the scheduled task will run.&#xA;- scheduletype: Supported triggers: second, daily, weekly, and logon.&#xA;- time/second (applicable for &#39;second&#39;, &#39;daily&#39;, and &#39;weekly&#39; triggers):&#xA;  - For &#39;second&#39; trigger: Specify the frequency in seconds for task execution.&#xA;  - For &#39;daily&#39; and &#39;weekly&#39; triggers: Specify the exact time (e.g., 22:30) for task execution.&#xA;- day (applicable for &#39;weekly&#39; trigger): Days to execute the scheduled task (e.g., monday, thursday).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;x86_64-w64-mingw32-gcc GhostTask.c -o GhostTask.exe -lrpcrt4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;1. Create a new scheduled task that will call notepad.exe every Monday and Thursday at 2:12 pm:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GhostTask.exe localhost add demo &#34;cmd.exe&#34; &#34;/c notepad.exe&#34; LAB\Administrator weekly 14:12 monday,thursday&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/netero1010/GhostTask/raw/main/example1.png&#34; alt=&#34;HowTo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Modify existing scheduled task with new schedule type, user and program:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GhostTask.exe localhost add &#34;Microsoft\Office\Office Automatic Updates 2.0&#34; &#34;cmd.exe&#34; &#34;/c notepad.exe&#34; LAB\employee001 daily 20:37&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/netero1010/GhostTask/raw/main/example2.png&#34; alt=&#34;HowTo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Create a new scheduled task on remote computer:&lt;/h3&gt; &#xA;&lt;p&gt;As discussed in the WithSecure blog (&lt;a href=&#34;https://labs.withsecure.com/publications/scheduled-task-tampering&#34;&gt;Extra: Lateral Movement&lt;/a&gt; section), you can use specially crafted Silver Ticket to modify registry keys associated to scheduled tasks on . This allows you to create a scheduled task remotely.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kerberos::golden /domain:LAB.CORP /sid:S-1-5-21-1111111111-1111111111-1111111111 /aes256:[aes256hash] /user:Administrator /service:cifs /target:dc01.lab.corp /sids:S-1-5-18 /endin:600 /renewmax:10080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new scheduled task on the DC01 server remotely, which will launch notepad.exe every day at 3:19 pm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GhostTask.exe DC01.lab.corp add demo &#34;cmd.exe&#34; &#34;/c notepad.exe&#34; LAB\Administrator daily 15:19&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/netero1010/GhostTask/raw/main/example3.png&#34; alt=&#34;HowTo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/WithSecure&#34;&gt;WithSecure&lt;/a&gt; for their research &lt;a href=&#34;https://labs.withsecure.com/publications/scheduled-task-tampering&#34;&gt;WithSecure Scheduled Task Tampering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cyber.wtf/&#34;&gt;Cyber.WTF&lt;/a&gt; for their research &lt;a href=&#34;https://cyber.wtf/2022/06/01/windows-registry-analysis-todays-episode-tasks/&#34;&gt;Windows Registry Analysis â€“ Todayâ€™s Episode: Tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ausecwa&#34;&gt;ausecwa&lt;/a&gt; for his &lt;a href=&#34;https://github.com/ausecwa/bof-registry&#34;&gt;bof-registry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>witnessmenow/ESP32-Cheap-Yellow-Display</title>
    <updated>2023-10-31T01:25:23Z</updated>
    <id>tag:github.com,2023-10-31:/witnessmenow/ESP32-Cheap-Yellow-Display</id>
    <link href="https://github.com/witnessmenow/ESP32-Cheap-Yellow-Display" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building a community around a cheap ESP32 Display with a touch screen&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32-Cheap-Yellow-Display&lt;/h1&gt; &#xA;&lt;p&gt;There is an ESP32 with a built in 320 x 240 LCD display with a touch screen called the &#34;ESP32-2432S028R&#34;, since this doesn&#39;t roll of the tounge, I propose it should be renamed the &#34;Cheap Yellow Display&#34; or CYD for short. This display is only about $15 delievered so I think it&#39;s really good value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/witnessmenow/ESP32-Cheap-Yellow-Display/assets/1562562/76c3d481-2523-4b6f-881c-2e29f9368cd0&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The CYD has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 (With Wifi and Bluetooth)&lt;/li&gt; &#xA; &lt;li&gt;320 x 240 LCD Display&lt;/li&gt; &#xA; &lt;li&gt;Touch Screen (Resistive)&lt;/li&gt; &#xA; &lt;li&gt;USB for powering and programming&lt;/li&gt; &#xA; &lt;li&gt;SD Card Slot, LED and some addtional pins broken out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is it good for?&lt;/h2&gt; &#xA;&lt;p&gt;I think it&#39;s useful for the following types of people:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;People just getting started with working hardware&lt;/strong&gt; - as everything is already connected, there is no soldering or additional components required&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;People who are familar with working with hardware, but are lazy&lt;/strong&gt; - (like me) Sometimes you just want to build a project without having to assemble any hardware&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;People who aren&#39;t really looking to learn anything, but just want to build some cool things&lt;/strong&gt; - More about this later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the purpose of this page?&lt;/h2&gt; &#xA;&lt;p&gt;So this is pretty nice hardware and a cheap price, but the software instructions/support around it is pretty poor. Just a single link to a zip file on a random website.&lt;/p&gt; &#xA;&lt;p&gt;A couple of years ago I released the &lt;a href=&#34;https://github.com/witnessmenow/ESP32-Trinity&#34;&gt;ESP32 Trinity&lt;/a&gt;, which is an open source ESP32 board for controlling Matrix panels. I think the main benifit people get out of the work I did on the Trinty is not the hardware, but the documentation, example code and ready to go projects.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m no longer creating hardware products, but I think it would be interesting if we could create the same kind of community around this display, where people can share examples and projects made for this display.&lt;/p&gt; &#xA;&lt;h2&gt;Where to buy?&lt;/h2&gt; &#xA;&lt;p&gt;Buy from wherever works out cheapest for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s.click.aliexpress.com/e/_DkSpIjB&#34;&gt;Aliexpress*&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s.click.aliexpress.com/e/_DkcmuCh&#34;&gt;Aliexpress*&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aliexpress.com/item/1005004502250619.html&#34;&gt;Aliexpress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.makerfabs.com/sunton-esp32-2-8-inch-tft-with-touch.html&#34;&gt;Makerfabs&lt;/a&gt; - Seems to come with a 16GB SD card. Makerfabs also stock my &lt;a href=&#34;https://github.com/witnessmenow/ESP32-Trinity&#34;&gt;ESP32 Trinity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;* = Affilate Link&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started With Your CYD&lt;/h2&gt; &#xA;&lt;p&gt;For details on how to get started with your CYD, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/SETUP.md&#34;&gt;Setup and Configuration&lt;/a&gt; page&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;The Basics&lt;/h3&gt; &#xA;&lt;p&gt;A collection of examples demonstrating how to use the different features of the CYD, this is a good place to get started. &lt;a href=&#34;https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Examples/Basics&#34;&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternative Display Libraries&lt;/h3&gt; &#xA;&lt;p&gt;The basics examples are based on the TFT_eSPI display library, but the CYD also works with other display libraries too. Here is some example code if you prefer to use an alternative Arduino library. &lt;a href=&#34;https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Examples/AlternativeLibraries&#34;&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ESPHome&lt;/h3&gt; &#xA;&lt;p&gt;Some examples for using the CYD in ESPHome. &lt;a href=&#34;https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Examples/ESPHome&#34;&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3DPrinting&lt;/h3&gt; &#xA;&lt;p&gt;Some examples of 3D printed stands. &lt;a href=&#34;https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/3dModels&#34;&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help Support what I do!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/witnessmenow/&#34;&gt;If you enjoy my work, please consider becoming a Github sponsor!&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>