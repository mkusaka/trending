<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-26T01:23:10Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pgaudit/pgaudit</title>
    <updated>2023-08-26T01:23:10Z</updated>
    <id>tag:github.com,2023-08-26:/pgaudit/pgaudit</id>
    <link href="https://github.com/pgaudit/pgaudit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL Audit Extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgAudit &lt;br&gt; Open Source PostgreSQL Audit Logging&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The PostgreSQL Audit Extension (pgAudit) provides detailed session and/or object audit logging via the standard PostgreSQL logging facility.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the pgAudit is to provide PostgreSQL users with capability to produce audit logs often required to comply with government, financial, or ISO certifications.&lt;/p&gt; &#xA;&lt;p&gt;An audit is an official inspection of an individual&#39;s or organization&#39;s accounts, typically by an independent body. The information gathered by pgAudit is properly called an audit trail or audit log. The term audit log is used in this documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Why pgAudit?&lt;/h2&gt; &#xA;&lt;p&gt;Basic statement logging can be provided by the standard logging facility with &lt;code&gt;log_statement = all&lt;/code&gt;. This is acceptable for monitoring and other usages but does not provide the level of detail generally required for an audit. It is not enough to have a list of all the operations performed against the database. It must also be possible to find particular statements that are of interest to an auditor. The standard logging facility shows what the user requested, while pgAudit focuses on the details of what happened while the database was satisfying the request.&lt;/p&gt; &#xA;&lt;p&gt;For example, an auditor may want to verify that a particular table was created inside a documented maintenance window. This might seem like a simple job for grep, but what if you are presented with something like this (intentionally obfuscated) example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DO $$&#xA;BEGIN&#xA;    EXECUTE &#39;CREATE TABLE import&#39; || &#39;ant_table (id INT)&#39;;&#xA;END $$;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Standard logging will give you this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LOG:  statement: DO $$&#xA;BEGIN&#xA;    EXECUTE &#39;CREATE TABLE import&#39; || &#39;ant_table (id INT)&#39;;&#xA;END $$;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It appears that finding the table of interest may require some knowledge of the code in cases where tables are created dynamically. This is not ideal since it would be preferable to just search on the table name. This is where pgAudit comes in. For the same input, it will produce this output in the log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AUDIT: SESSION,33,1,FUNCTION,DO,,,&#34;DO $$&#xA;BEGIN&#xA;    EXECUTE &#39;CREATE TABLE import&#39; || &#39;ant_table (id INT)&#39;;&#xA;END $$;&#34;&#xA;AUDIT: SESSION,33,2,DDL,CREATE TABLE,TABLE,public.important_table,CREATE TABLE important_table (id INT)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Not only is the &lt;code&gt;DO&lt;/code&gt; block logged, but substatement 2 contains the full text of the &lt;code&gt;CREATE TABLE&lt;/code&gt; with the statement type, object type, and full-qualified name to make searches easy.&lt;/p&gt; &#xA;&lt;p&gt;When logging &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;DML&lt;/code&gt; statements, pgAudit can be configured to log a separate entry for each relation referenced in a statement. No parsing is required to find all statements that touch a particular table. In fact, the goal is that the statement text is provided primarily for deep forensics and should not be required for an audit.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Considerations&lt;/h2&gt; &#xA;&lt;p&gt;Depending on settings, it is possible for pgAudit to generate an enormous volume of logging. Be careful to determine exactly what needs to be audit logged in your environment to avoid logging too much.&lt;/p&gt; &#xA;&lt;p&gt;For example, when working in an OLAP environment it would probably not be wise to audit log inserts into a large fact table. The size of the log file will likely be many times the actual data size of the inserts because the log file is expressed as text. Since logs are generally stored with the OS this may lead to disk space being exhausted very quickly. In cases where it is not possible to limit audit logging to certain tables, be sure to assess the performance impact while testing and allocate plenty of space on the log volume. This may also be true for OLTP environments. Even if the insert volume is not as high, the performance impact of audit logging may still noticeably affect latency.&lt;/p&gt; &#xA;&lt;p&gt;To limit the number of relations audit logged for &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;DML&lt;/code&gt; statements, consider using object audit logging (see &lt;a href=&#34;https://raw.githubusercontent.com/pgaudit/pgaudit/master/#object-audit-logging&#34;&gt;Object Auditing&lt;/a&gt;). Object audit logging allows selection of the relations to be logged allowing for reduction of the overall log volume. However, when new relations are added they must be explicitly added to object audit logging. A programmatic solution where specified tables are excluded from logging and all others are included may be a good option in this case.&lt;/p&gt; &#xA;&lt;h2&gt;PostgreSQL Version Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;pgAudit was developed to support PostgreSQL 9.5 or greater.&lt;/p&gt; &#xA;&lt;p&gt;In order to support new functionality introduced in each PostgreSQL release, pgAudit maintains a separate branch for each PostgreSQL major version (currently PostgreSQL 9.5 - 16) which will be maintained in a manner similar to the PostgreSQL project.&lt;/p&gt; &#xA;&lt;p&gt;Aside from bug fixes, no further development is planned for stable branches. New development, if any, will be strictly for next unreleased major version of PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;pgAudit versions relate to PostgreSQL major versions as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v16.X&lt;/strong&gt; is intended to support PostgreSQL 16.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.7.X&lt;/strong&gt; is intended to support PostgreSQL 15.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.6.X&lt;/strong&gt; is intended to support PostgreSQL 14.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.5.X&lt;/strong&gt; is intended to support PostgreSQL 13.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.4.X&lt;/strong&gt; is intended to support PostgreSQL 12.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.3.X&lt;/strong&gt; is intended to support PostgreSQL 11.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.2.X&lt;/strong&gt; is intended to support PostgreSQL 10.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.1.X&lt;/strong&gt; is intended to support PostgreSQL 9.6.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAudit v1.0.X&lt;/strong&gt; is intended to support PostgreSQL 9.5.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compile and Install&lt;/h2&gt; &#xA;&lt;p&gt;pgAudit can be compiled against an installed copy of PostgreSQL with development packages using &lt;code&gt;PGXS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following instructions are for RHEL 7.&lt;/p&gt; &#xA;&lt;p&gt;Clone the pgAudit extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/pgaudit/pgaudit.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to pgAudit directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd pgaudit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout &lt;code&gt;REL_16_STABLE&lt;/code&gt; branch (note that the stable branch may not exist for unreleased versions of PostgreSQL):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout REL_16_STABLE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build and install pgAudit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install USE_PGXS=1 PG_CONFIG=/usr/pgsql-16/bin/pg_config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instructions for testing and development may be found in &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;Settings may be modified only by a superuser. Allowing normal users to change their settings would defeat the point of an audit log.&lt;/p&gt; &#xA;&lt;p&gt;Settings can be specified globally (in &lt;code&gt;postgresql.conf&lt;/code&gt; or using &lt;code&gt;ALTER SYSTEM ... SET&lt;/code&gt;), at the database level (using &lt;code&gt;ALTER DATABASE ... SET&lt;/code&gt;), or at the role level (using &lt;code&gt;ALTER ROLE ... SET&lt;/code&gt;). Note that settings are not inherited through normal role inheritance and &lt;code&gt;SET ROLE&lt;/code&gt; will not alter a user&#39;s pgAudit settings. This is a limitation of the roles system and not inherent to pgAudit.&lt;/p&gt; &#xA;&lt;p&gt;The pgAudit extension must be loaded in &lt;a href=&#34;http://www.postgresql.org/docs/16/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES&#34;&gt;shared_preload_libraries&lt;/a&gt;. Otherwise, an error will be raised at load time and no audit logging will occur.&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;code&gt;CREATE EXTENSION pgaudit&lt;/code&gt; must be called before &lt;code&gt;pgaudit.log&lt;/code&gt; is set to ensure proper pgaudit functionality. The extension installs event triggers which add additional auditing for DDL. pgAudit will work without the extension installed but DDL statements will not have information about the object type and name.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;pgaudit&lt;/code&gt; extension is dropped and needs to be recreated then &lt;code&gt;pgaudit.log&lt;/code&gt; must be unset first otherwise an error will be raised.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log&lt;/h3&gt; &#xA;&lt;p&gt;Specifies which classes of statements will be logged by session audit logging. Possible values are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;READ&lt;/strong&gt;: &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt; when the source is a relation or a query.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WRITE&lt;/strong&gt;: &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;TRUNCATE&lt;/code&gt;, and &lt;code&gt;COPY&lt;/code&gt; when the destination is a relation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;FUNCTION&lt;/strong&gt;: Function calls and &lt;code&gt;DO&lt;/code&gt; blocks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ROLE&lt;/strong&gt;: Statements related to roles and privileges: &lt;code&gt;GRANT&lt;/code&gt;, &lt;code&gt;REVOKE&lt;/code&gt;, &lt;code&gt;CREATE/ALTER/DROP ROLE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;DDL&lt;/strong&gt;: All &lt;code&gt;DDL&lt;/code&gt; that is not included in the &lt;code&gt;ROLE&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MISC&lt;/strong&gt;: Miscellaneous commands, e.g. &lt;code&gt;DISCARD&lt;/code&gt;, &lt;code&gt;FETCH&lt;/code&gt;, &lt;code&gt;CHECKPOINT&lt;/code&gt;, &lt;code&gt;VACUUM&lt;/code&gt;, &lt;code&gt;SET&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MISC_SET&lt;/strong&gt;: Miscellaneous &lt;code&gt;SET&lt;/code&gt; commands, e.g. &lt;code&gt;SET ROLE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ALL&lt;/strong&gt;: Include all of the above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Multiple classes can be provided using a comma-separated list and classes can be subtracted by prefacing the class with a &lt;code&gt;-&lt;/code&gt; sign (see &lt;a href=&#34;https://raw.githubusercontent.com/pgaudit/pgaudit/master/#session-audit-logging&#34;&gt;Session Audit Logging&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_catalog&lt;/h3&gt; &#xA;&lt;p&gt;Specifies that session logging should be enabled in the case where all relations in a statement are in pg_catalog. Disabling this setting will reduce noise in the log from tools like psql and PgAdmin that query the catalog heavily.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_client&lt;/h3&gt; &#xA;&lt;p&gt;Specifies whether log messages will be visible to a client process such as psql. This setting should generally be left disabled but may be useful for debugging or other purposes.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;pgaudit.log_level&lt;/code&gt; is only enabled when &lt;code&gt;pgaudit.log_client&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;off&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_level&lt;/h3&gt; &#xA;&lt;p&gt;Specifies the log level that will be used for log entries (see &lt;a href=&#34;http://www.postgresql.org/docs/16/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS&#34;&gt;Message Severity Levels&lt;/a&gt; for valid levels) but note that &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;FATAL&lt;/code&gt;, and &lt;code&gt;PANIC&lt;/code&gt; are not allowed). This setting is used for regression testing and may also be useful to end users for testing or other purposes.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;pgaudit.log_level&lt;/code&gt; is only enabled when &lt;code&gt;pgaudit.log_client&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt;; otherwise the default will be used.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_parameter&lt;/h3&gt; &#xA;&lt;p&gt;Specifies that audit logging should include the parameters that were passed with the statement. When parameters are present they will be included in &lt;code&gt;CSV&lt;/code&gt; format after the statement text.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;off&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_parameter_max_size&lt;/h3&gt; &#xA;&lt;p&gt;Specifies that parameter values longer than this setting (in bytes) should not be logged, but replaced with &lt;code&gt;&amp;lt;long param suppressed&amp;gt;&lt;/code&gt;. This is set in bytes, not characters, so does not account for multi-byte characters in a text parameters&#39;s encoding. This setting has no effect if &lt;code&gt;log_parameter&lt;/code&gt; is &lt;code&gt;off&lt;/code&gt;. If this setting is 0 (the default), all parameters are logged regardless of length&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_relation&lt;/h3&gt; &#xA;&lt;p&gt;Specifies whether session audit logging should create a separate log entry for each relation (&lt;code&gt;TABLE&lt;/code&gt;, &lt;code&gt;VIEW&lt;/code&gt;, etc.) referenced in a &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;DML&lt;/code&gt; statement. This is a useful shortcut for exhaustive logging without using object audit logging.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;off&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_rows&lt;/h3&gt; &#xA;&lt;p&gt;Specifies that audit logging should include the rows retrieved or affected by a statement. When enabled the rows field will be included after the parameter field.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;off&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_statement&lt;/h3&gt; &#xA;&lt;p&gt;Specifies whether logging will include the statement text and parameters (if enabled). Depending on requirements, an audit log might not require this and it makes the logs less verbose.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.log_statement_once&lt;/h3&gt; &#xA;&lt;p&gt;Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry. Disabling this setting will result in less verbose logging but may make it more difficult to determine the statement that generated a log entry, though the statement/substatement pair along with the process id should suffice to identify the statement text logged with a previous entry.&lt;/p&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;off&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;pgaudit.role&lt;/h3&gt; &#xA;&lt;p&gt;Specifies the master role to use for object audit logging. Multiple audit roles can be defined by granting them to the master role. This allows multiple groups to be in charge of different aspects of audit logging.&lt;/p&gt; &#xA;&lt;p&gt;There is no default.&lt;/p&gt; &#xA;&lt;h2&gt;Session Audit Logging&lt;/h2&gt; &#xA;&lt;p&gt;Session audit logging provides detailed logs of all statements executed by a user in the backend.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Session logging is enabled with the &lt;a href=&#34;https://raw.githubusercontent.com/pgaudit/pgaudit/master/#pgauditlog&#34;&gt;pgaudit.log&lt;/a&gt; setting.&lt;/p&gt; &#xA;&lt;p&gt;Enable session logging for all &lt;code&gt;DML&lt;/code&gt; and &lt;code&gt;DDL&lt;/code&gt; and log all relations in &lt;code&gt;DML&lt;/code&gt; statements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set pgaudit.log = &#39;write, ddl&#39;;&#xA;set pgaudit.log_relation = on;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable session logging for all commands except &lt;code&gt;MISC&lt;/code&gt; and raise audit log messages as &lt;code&gt;NOTICE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set pgaudit.log = &#39;all, -misc&#39;;&#xA;set pgaudit.log_level = notice;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;In this example session audit logging is used for logging &lt;code&gt;DDL&lt;/code&gt; and &lt;code&gt;SELECT&lt;/code&gt; statements. Note that the insert statement is not logged since the &lt;code&gt;WRITE&lt;/code&gt; class is not enabled&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;SQL&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set pgaudit.log = &#39;read, ddl&#39;;&#xA;&#xA;create table account&#xA;(&#xA;    id int,&#xA;    name text,&#xA;    password text,&#xA;    description text&#xA;);&#xA;&#xA;insert into account (id, name, password, description)&#xA;             values (1, &#39;user1&#39;, &#39;HASH1&#39;, &#39;blah, blah&#39;);&#xA;&#xA;select *&#xA;    from account;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Log Output&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AUDIT: SESSION,1,1,DDL,CREATE TABLE,TABLE,public.account,create table account&#xA;(&#xA;    id int,&#xA;    name text,&#xA;    password text,&#xA;    description text&#xA;);,&amp;lt;not logged&amp;gt;&#xA;AUDIT: SESSION,2,1,READ,SELECT,,,select *&#xA;    from account,,&amp;lt;not logged&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Object Audit Logging&lt;/h2&gt; &#xA;&lt;p&gt;Object audit logging logs statements that affect a particular relation. Only &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; commands are supported. &lt;code&gt;TRUNCATE&lt;/code&gt; is not included in object audit logging.&lt;/p&gt; &#xA;&lt;p&gt;Object audit logging is intended to be a finer-grained replacement for &lt;code&gt;pgaudit.log = &#39;read, write&#39;&lt;/code&gt;. As such, it may not make sense to use them in conjunction but one possible scenario would be to use session logging to capture each statement and then supplement that with object logging to get more detail about specific relations.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Object-level audit logging is implemented via the roles system. The &lt;a href=&#34;https://raw.githubusercontent.com/pgaudit/pgaudit/master/#pgauditrole&#34;&gt;pgaudit.role&lt;/a&gt; setting defines the role that will be used for audit logging. A relation (&lt;code&gt;TABLE&lt;/code&gt;, &lt;code&gt;VIEW&lt;/code&gt;, etc.) will be audit logged when the audit role has permissions for the command executed or inherits the permissions from another role. This allows you to effectively have multiple audit roles even though there is a single master role in any context.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;a href=&#34;https://raw.githubusercontent.com/pgaudit/pgaudit/master/#pgauditrole&#34;&gt;pgaudit.role&lt;/a&gt; to &lt;code&gt;auditor&lt;/code&gt; and grant &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; privileges on the &lt;code&gt;account&lt;/code&gt; table. Any &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; statements on the &lt;code&gt;account&lt;/code&gt; table will now be logged:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set pgaudit.role = &#39;auditor&#39;;&#xA;&#xA;grant select, delete&#xA;   on public.account&#xA;   to auditor;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;In this example object audit logging is used to illustrate how a granular approach may be taken towards logging of &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;DML&lt;/code&gt; statements. Note that logging on the &lt;code&gt;account&lt;/code&gt; table is controlled by column-level permissions, while logging on the &lt;code&gt;account_role_map&lt;/code&gt; table is table-level.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;SQL&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set pgaudit.role = &#39;auditor&#39;;&#xA;&#xA;create table account&#xA;(&#xA;    id int,&#xA;    name text,&#xA;    password text,&#xA;    description text&#xA;);&#xA;&#xA;grant select (password)&#xA;   on public.account&#xA;   to auditor;&#xA;&#xA;select id, name&#xA;  from account;&#xA;&#xA;select password&#xA;  from account;&#xA;&#xA;grant update (name, password)&#xA;   on public.account&#xA;   to auditor;&#xA;&#xA;update account&#xA;   set description = &#39;yada, yada&#39;;&#xA;&#xA;update account&#xA;   set password = &#39;HASH2&#39;;&#xA;&#xA;create table account_role_map&#xA;(&#xA;    account_id int,&#xA;    role_id int&#xA;);&#xA;&#xA;grant select&#xA;   on public.account_role_map&#xA;   to auditor;&#xA;&#xA;select account.password,&#xA;       account_role_map.role_id&#xA;  from account&#xA;       inner join account_role_map&#xA;            on account.id = account_role_map.account_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Log Output&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AUDIT: OBJECT,1,1,READ,SELECT,TABLE,public.account,select password&#xA;  from account,&amp;lt;not logged&amp;gt;&#xA;AUDIT: OBJECT,2,1,WRITE,UPDATE,TABLE,public.account,update account&#xA;   set password = &#39;HASH2&#39;,&amp;lt;not logged&amp;gt;&#xA;AUDIT: OBJECT,3,1,READ,SELECT,TABLE,public.account,select account.password,&#xA;       account_role_map.role_id&#xA;  from account&#xA;       inner join account_role_map&#xA;            on account.id = account_role_map.account_id,&amp;lt;not logged&amp;gt;&#xA;AUDIT: OBJECT,3,1,READ,SELECT,TABLE,public.account_role_map,select account.password,&#xA;       account_role_map.role_id&#xA;  from account&#xA;       inner join account_role_map&#xA;            on account.id = account_role_map.account_id,&amp;lt;not logged&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Format&lt;/h2&gt; &#xA;&lt;p&gt;Audit entries are written to the standard logging facility and contain the following columns in comma-separated format. Output is compliant CSV format only if the log line prefix portion of each log entry is removed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AUDIT_TYPE&lt;/strong&gt; - &lt;code&gt;SESSION&lt;/code&gt; or &lt;code&gt;OBJECT&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;STATEMENT_ID&lt;/strong&gt; - Unique statement ID for this session. Each statement ID represents a backend call. Statement IDs are sequential even if some statements are not logged. There may be multiple entries for a statement ID when more than one relation is logged.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SUBSTATEMENT_ID&lt;/strong&gt; - Sequential ID for each sub-statement within the main statement. For example, calling a function from a query. Sub-statement IDs are continuous even if some sub-statements are not logged. There may be multiple entries for a sub-statement ID when more than one relation is logged.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CLASS&lt;/strong&gt; - e.g. &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;ROLE&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/pgaudit/pgaudit/master/#pgauditlog&#34;&gt;pgaudit.log&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;COMMAND&lt;/strong&gt; - e.g. &lt;code&gt;ALTER TABLE&lt;/code&gt;, &lt;code&gt;SELECT&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OBJECT_TYPE&lt;/strong&gt; - &lt;code&gt;TABLE&lt;/code&gt;, &lt;code&gt;INDEX&lt;/code&gt;, &lt;code&gt;VIEW&lt;/code&gt;, etc. Available for &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;DML&lt;/code&gt; and most &lt;code&gt;DDL&lt;/code&gt; statements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OBJECT_NAME&lt;/strong&gt; - The fully-qualified object name (e.g. public.account). Available for &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;DML&lt;/code&gt; and most &lt;code&gt;DDL&lt;/code&gt; statements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;STATEMENT&lt;/strong&gt; - Statement executed on the backend.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PARAMETER&lt;/strong&gt; - If &lt;code&gt;pgaudit.log_parameter&lt;/code&gt; is set then this field will contain the statement parameters as quoted CSV or &lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt; if there are no parameters. Otherwise, the field is &lt;code&gt;&amp;lt;not logged&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://www.postgresql.org/docs/16/runtime-config-logging.html#GUC-LOG-LINE-PREFIX&#34;&gt;log_line_prefix&lt;/a&gt; to add any other fields that are needed to satisfy your audit log requirements. A typical log line prefix might be &lt;code&gt;&#39;%m %u %d [%p]: &#39;&lt;/code&gt; which would provide the date/time, user name, database name, and process id for each audit log.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Object renames are logged under the name they were renamed to. For example, renaming a table will produce the following result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ALTER TABLE test RENAME TO test2;&#xA;&#xA;AUDIT: SESSION,36,1,DDL,ALTER TABLE,TABLE,public.test2,ALTER TABLE test RENAME TO test2,&amp;lt;not logged&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to have a command logged more than once. For example, when a table is created with a primary key specified at creation time the index for the primary key will be logged independently and another audit log will be made for the index under the create entry. The multiple entries will however be contained within one statement ID.&lt;/p&gt; &#xA;&lt;p&gt;Autovacuum and Autoanalyze are not logged.&lt;/p&gt; &#xA;&lt;p&gt;Statements that are executed after a transaction enters an aborted state will not be audit logged. However, the statement that caused the error and any subsequent statements executed in the aborted transaction will be logged as ERRORs by the standard logging facility.&lt;/p&gt; &#xA;&lt;p&gt;It is not possible to reliably audit superusers with pgAudit. One solution is to restrict access to superuser accounts and use the &lt;a href=&#34;https://github.com/pgaudit/set_user&#34;&gt;set_user&lt;/a&gt; extension to escalate permissions when required.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;The PostgreSQL Audit Extension is based on the &lt;a href=&#34;http://www.2ndquadrant.com&#34;&gt;2ndQuadrant&lt;/a&gt; &lt;a href=&#34;https://github.com/2ndQuadrant/pgaudit&#34;&gt;pgaudit project&lt;/a&gt; authored by Simon Riggs, Abhijit Menon-Sen, and Ian Barwick and submitted as an extension to PostgreSQL core. Additional development has been done by David Steele of &lt;a href=&#34;http://www.crunchydata.com&#34;&gt;Crunchy Data&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0x90/wifi-arsenal</title>
    <updated>2023-08-26T01:23:10Z</updated>
    <id>tag:github.com,2023-08-26:/0x90/wifi-arsenal</id>
    <link href="https://github.com/0x90/wifi-arsenal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WiFi arsenal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WiFi Arsenal&lt;/h1&gt; &#xA;&lt;p&gt;Repo fully maintained by &lt;a href=&#34;https://github.com/0x90/wifi-arsenal&#34;&gt;0x90/wifi-arsenal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;README.md created by &lt;a href=&#34;https://github.com/techge/wifi-arsenal&#34;&gt;techge/wifi-arsenal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#general-wifi-information&#34;&gt;General WiFi Information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#noteworthy-tools-of-different-categories&#34;&gt;Noteworthy Tools of Different Categories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#attackpentesting&#34;&gt;Attack/PenTesting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#denial-of-service&#34;&gt;Denial of Service&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#encryption-attack&#34;&gt;Encryption Attack&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#wepwpawpa2&#34;&gt;WEP/WPA/WPA2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#wps&#34;&gt;WPS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#others&#34;&gt;Others&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#injection&#34;&gt;Injection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#rogue-apfake-ap-mitm&#34;&gt;Rogue AP/Fake AP/ MITM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#sniffing&#34;&gt;Sniffing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#wardriving&#34;&gt;Wardriving&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#miscellaneous-attacking-tools&#34;&gt;Miscellaneous Attacking Tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#information-gathering&#34;&gt;Information Gathering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#defencedetection&#34;&gt;Defence/Detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#librariesgeneral-purpose-tools&#34;&gt;Libraries/General Purpose Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#visualization&#34;&gt;Visualization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#localisation&#34;&gt;Localisation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#configurationsetup&#34;&gt;Configuration/setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#monitoring&#34;&gt;Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/0x90/wifi-arsenal/master/#miscellaneousnot-sorted-&#34;&gt;Miscellaneous/not sorted :)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TOC created by &lt;a href=&#34;https://github.com/ekalinin/github-markdown-toc&#34;&gt;gh-md-toc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General WiFi Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supportforums.cisco.com/t5/wireless-mobility-documents/802-11-frames-a-starter-guide-to-learn-wireless-sniffer-traces/ta-p/3110019/&#34;&gt;802.11 frames&lt;/a&gt; - A starter guide to learn wireless sniffer traces&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.willhackforsushi.com/papers/80211_Pocket_Reference_Guide.pdf&#34;&gt;80211 Pocket Reference Guide&lt;/a&gt; - Cheat Sheet for 802.11&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CTU-IIG/802.11p-wireless-regdb/&#34;&gt;802.11p-wireless-regdb &lt;/a&gt; - Wireless regulatory database for CRDA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://my.safaribooksonline.com/book/networking/wireless/0596001835/802dot11-framing-in-detail/wireless802dot11-chp-4-sect-3/&#34;&gt;802.11 Wireless Networks: The Definitive Guide&lt;/a&gt; - Partly open chapters of O‘Reilly 802.11 book&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinbeatz/Armory/&#34;&gt;Armory&lt;/a&gt; - The 802.11 Hacking Repo (Meta Information, Link collection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edelahozuah/awesome-wifi-security/&#34;&gt;Awesome-wifi-security&lt;/a&gt; - A collection of awesome resources related to 802.11 security, tools and other things&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d33tah/call-for-wpa3/&#34;&gt;Call-for-wpa3&lt;/a&gt; - Call for WPA3 - what&#39;s wrong with WPA2 security and how to fix it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.wireshark.org/review/gitweb?p=wireshark.git&amp;amp;a=blob_plain&amp;amp;f=manuf&#34;&gt;Known manufacturer MAC list&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_802.11&#34;&gt;Wikipedia&lt;/a&gt; - IEEE802.11 site of Wikipedia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Noteworthy Tools of Different Categories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/&#34;&gt;Aircrack-ng&lt;/a&gt; - WiFi security auditing tools suite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/&#34;&gt;airgeddon&lt;/a&gt; - This is a multi-use bash script for Linux systems to audit wireless networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atimorin/karma/&#34;&gt;karma&lt;/a&gt; - KARMA Attacks Radioed Machines Automatically (KARMA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kismetwireless/kismet/&#34;&gt;kismet&lt;/a&gt; - Wireless network detector, sniffer, and intrusion detection system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ytisf/mdk3_6.1/&#34;&gt;mdk3_6.1&lt;/a&gt; - A fork and modification of the original MDK3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JPaulMora/Pyrit/&#34;&gt;pyrit&lt;/a&gt; - The famous WPA precomputed cracker, Migrated from Google&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/secdev/scapy&#34;&gt;Scapy&lt;/a&gt; - Python-based interactive packet manipulation program &amp;amp; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SYWorks/waidps/&#34;&gt;waidps&lt;/a&gt; - Wireless Auditing, Intrusion Detection &amp;amp; Prevention System&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/P0cL4bs/WiFi-Pumpkin/&#34;&gt;WiFi-Pumpkin&lt;/a&gt; - Framework for Rogue Wi-Fi Access Point Attack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SYWorks/wireless-ids/&#34;&gt;Wireless-ids&lt;/a&gt; - Ability to detect suspicious activity such as (WEP/WPA/WPS) attack by sniffing the air for wireless packets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hatRiot/zarp/&#34;&gt;zarp&lt;/a&gt; - Network attack tool centered around the exploitation of local networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attack/PenTesting&lt;/h2&gt; &#xA;&lt;h3&gt;Denial of Service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phildom/80211mgmtDoS/&#34;&gt;80211mgmtDoS&lt;/a&gt; - 802.11 DoS Attacks based on unprotected Management frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maroviher/airodump_mod/&#34;&gt;airodump_mod&lt;/a&gt; - Improved version of airodump-ng with ability to kick-off a stations from AP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bcopeland/android_packetspammer/&#34;&gt;android_packetspammer&lt;/a&gt; - Packetspammer sends unencrypted broadcast packets down a mac80211 wireless interface that should be set for Monitor mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d4rkcat/apflood/&#34;&gt;apflood&lt;/a&gt; - Flood area with fake essids&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ndyakov/dw/&#34;&gt;dw&lt;/a&gt; - Small tool for sending 802.11 disassociation and deauthentication packets to specific clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/hwk/&#34;&gt;hwk&lt;/a&gt; - Hwk is a collection of packet crafting/network flooding tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unixpickle/JamWiFi/&#34;&gt;JamWiFi&lt;/a&gt; - A GUI, easy to use WiFi network jammer for Mac OS X&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shunghsiyu/mass-deauth-attack/&#34;&gt;Mass-deauth-attack&lt;/a&gt; - A program that does Deauthentication Attack on every nearby wireless device&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Andy-Maclachlan/mass-deauth/&#34;&gt;Mass-deauth&lt;/a&gt; - A script for 802.11 mass-deauthentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ytisf/mdk3_6.1/&#34;&gt;mdk3_6.1&lt;/a&gt; - A fork and modification of the original MDK3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanhoefm/modwifi/&#34;&gt;modwifi&lt;/a&gt; - Advanced Wi-Fi Attacks Using Commodity Hardware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrizator/netattack/&#34;&gt;netattack&lt;/a&gt; - Python script that allows you to scan your local area for WiFi Networks and perform deauthentification attacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catalyst256/MyJunk/raw/master/scapy-deauth.py/&#34;&gt;Scapy-deauth&lt;/a&gt; - Scapy based wifi Deauth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/ska/&#34;&gt;ska&lt;/a&gt; - Framework for sniffing ieee80211 packets and generating deauth packets and sending raw packets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/wificurse/&#34;&gt;wificurse&lt;/a&gt; - WiFi DoS attack tool created for educational purposes only. It works only in Linux and requires wireless card drivers capable of injecting packets in wireless networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Revimal/WifiDeauth/&#34;&gt;WifiDeauth&lt;/a&gt; - A lightweight Wi-Fi auto deauthentication attack tool (libtins/C++)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DanMcInerney/wifijammer/&#34;&gt;wifijammer&lt;/a&gt; - Continuously jam all wifi clients/routers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/WiFi-Rifle/&#34;&gt;WiFi-Rifle&lt;/a&gt; - Creating a wireless rifle de-authentication gun, which utilized a yagi antenna and a Raspberry Pi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phr34k0/wirelessjammer/&#34;&gt;wirelessjammer&lt;/a&gt; - Continuously jam all wifi clients and access points within range&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyrus-and/zizzania/&#34;&gt;zizzania&lt;/a&gt; - Automated DeAuth attack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Encryption Attack&lt;/h3&gt; &#xA;&lt;h4&gt;WEP/WPA/WPA2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nosmo/Eircog/&#34;&gt;Eicrog&lt;/a&gt; - WEP key generator for predictable key weaknesses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davux/huawei_wifi/&#34;&gt;huawei_wifi&lt;/a&gt; - Wifi utilities for finding Huawei routers&#39; default key&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/&#34;&gt;Aircrack-ng&lt;/a&gt; - WiFi security auditing tools suite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/parrotsec/airmode/&#34;&gt;airmode&lt;/a&gt; - AirMode is a GUI that can help you to use the Aircrack framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wi-fi-analyzer/airoscriptng/&#34;&gt;airoscriptng&lt;/a&gt; - Airoscript-ng python complete implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hiteshchoudhary/Airvengers/&#34;&gt;Airvengers&lt;/a&gt; - A GUI to pentest wifi Network, based on Aircrack-ng tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/asleap/&#34;&gt;asleap&lt;/a&gt; - Recovers weak LEAP password. Pronounced asleep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pasdesignal/autokwaker/&#34;&gt;autokwaker&lt;/a&gt; - Creating an auto cracker for 802.11 networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adelashraf/cenarius/&#34;&gt;cenarius&lt;/a&gt; - Cenarius tool for crack Wi-Fi , crack wpa-psk , crack wpa2-psk , crack wep , crack wps pin and crack hidden AP . cenarius psk crack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axilirator/cherry/&#34;&gt;cherry&lt;/a&gt; - Distributed WPA/WPA2 cracker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.willhackforsushi.com/?page_id=50/&#34;&gt;Cowpatty&lt;/a&gt; - Offline dictionary attack against WPA/WPA2 networks using PSK-based authentication (e.g. WPA-Personal)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfontanini/dot11decrypt/&#34;&gt;dot11decrypt&lt;/a&gt; - An 802.11 WEP/WPA2 on-the-fly decrypter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savio-code/fern-wifi-cracker/&#34;&gt;Fern-wifi-cracker&lt;/a&gt; - Crack and recover WEP/WPA/WPS keys and also run other network based attacks on wireless or ethernet based networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d4rkcat/HandShaker/&#34;&gt;HandShaker&lt;/a&gt; - Detect, capture, crack WPA/2 handshakes, WEP Keys and geotag with Android GPS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZerBea/hcxtools/&#34;&gt;hcxtools&lt;/a&gt; - Solution for capturing wlan traffic and conversion to hashcat formats (recommended by hashcat) and to John the Ripper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ph4r05/kismet-deauth-wpa2-handshake-plugin/&#34;&gt;kismet-deauth-wpa2-handshake-plugin&lt;/a&gt; - Python plugin for Kismet to perform deauthentication to collect WPA2 handshakes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pupi1985/marfil/&#34;&gt;marfil&lt;/a&gt; - Assess WiFi network security. It allows to split the work of performing long running dictionary attacks among many computers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpp0/peapwn/&#34;&gt;peapwn&lt;/a&gt; - Proof-of-concept implementation of the Apple relay attack in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XayOn/pyrcrack/&#34;&gt;pyrcrack&lt;/a&gt; - Python Aircrack-ng&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JPaulMora/Pyrit/&#34;&gt;pyrit&lt;/a&gt; - The famous WPA precomputed cracker, Migrated from Google&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Slickness/pythonAir/&#34;&gt;pythonAir&lt;/a&gt; - Flask/aircrack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alf-Alfa/uploadwpa/&#34;&gt;uploadwpa&lt;/a&gt; - This module will upload a wpa handshake from a single capture file to an online hash cracker site&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mi-Al/WiFi-autopwner/&#34;&gt;WiFi-autopwner&lt;/a&gt; - Script to automate searching and auditing Wi-Fi networks with weak security&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/faizann24/wifi-bruteforcer-fsecurify/&#34;&gt;Wifi-bruteforcer-fsecurify&lt;/a&gt; - Android application to brute force WiFi passwords without requiring a rooted device&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brannondorsey/wifi-cracking/&#34;&gt;wificracking&lt;/a&gt; - Crack WPA/WPA2 Wi-Fi Routers with Airodump-ng and Aircrack-ng/Hashcat&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esc0rtd3w/wifi-hacker/&#34;&gt;Wifi-hacker&lt;/a&gt; - Shell Script For Attacking Wireless Connections Using Built-In Kali Tools. Supports All Securities (WEP, WPS, WPA, WPA2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derv82/wifite2/&#34;&gt;wifite2&lt;/a&gt; - Python script for auditing wireless networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derv82/wifite/&#34;&gt;wifite&lt;/a&gt; - An automated wireless attack tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aanarchyy/wifite-mod-pixiewps/&#34;&gt;Wifite-mod-pixiewps&lt;/a&gt; - Wifite with PixieWPS support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kbeflo/wifite-openwrt/&#34;&gt;Wifite-openwrt&lt;/a&gt; - Wifite for the WiFi Pineapple NANO + TETRA (Chaos Calmer - openWrt)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wi-fi-analyzer/wlandecrypter/&#34;&gt;wlandecrypter&lt;/a&gt; - Dictionary attack (spanish)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dxa4481/WPA2-HalfHandshake-Crack/&#34;&gt;WPA2-HalfHandshake-Crack&lt;/a&gt; - Capture enough of a handshake with a user from a fake AP to crack a WPA2 network without knowing the passphrase of the actual AP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/historypeats/wpa2hc/&#34;&gt;wpa2hc&lt;/a&gt; - Quick script to automate converting WPA .cap files for Hashcat .hccap files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vnik5287/wpa-autopwn/&#34;&gt;Wpa-autopwn&lt;/a&gt; - WPA/WPA2 autopwn script that parses captured handshakes and sends them to the Crackq&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SYWorks/wpa-bruteforcer/&#34;&gt;Wpa-bruteforcer&lt;/a&gt; - Attacking WPA/WPA encrypted access point without client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derv82/wpacrack/&#34;&gt;wpacrack&lt;/a&gt; - Open-source distributed Wifi-Protected Access (WPA) cracker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shagrath89m/WPA_DECRYPTION_MPI/&#34;&gt;WPA_DECRYPTION_MPI&lt;/a&gt; - WPA/WPA2 for cluster processing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leminski/WPAdiz/&#34;&gt;WPAdiz&lt;/a&gt; - Bruteforce - New method for generate dictionaries (Wireless)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WPS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/auto-reaver/&#34;&gt;autoreaver&lt;/a&gt; - Automatically exported from code.google.com/p/auto-reaver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aanarchyy/bully/&#34;&gt;bully&lt;/a&gt; - New implementation of the WPS brute force attack, written in C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sigginet/greaver/&#34;&gt;greaver&lt;/a&gt; - GUI for Reaver, WPS brute force tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SilentGhostX/HT-WPS-Breaker/&#34;&gt;HT-WPS-Breaker&lt;/a&gt; - HT-WPS Breaker (High Touch WPS Breaker)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dadas190/penetrator-wps/&#34;&gt;Penetrators-wps&lt;/a&gt; - Experimental tool that is capable of attacking multiple WPS-enabled wireless access points in real time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phpreaver/phpreaver/&#34;&gt;phpreaver&lt;/a&gt; - A command line PHP script which uses the reaver WPS pin cracker to test multiple AP&#39;s with multiple WiFi adapters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ru-faraon/pixiewps-android/&#34;&gt;Pixiewps-android&lt;/a&gt; - Pixiewps is a tool written in C used to bruteforce offline the WPS pin exploiting the low or non-existing entropy of some APs (pixie dust attack).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wiire-a/pixiewps/&#34;&gt;pixiewps&lt;/a&gt; - An offline WPS brute-force utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/byt3bl33d3r/pyReaver/&#34;&gt;pyReaver&lt;/a&gt; - WPS attack tool written in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgilhutton/pyxiewps_WPShack-Python/&#34;&gt;pyxiewps_WPShack-Python&lt;/a&gt; - Wireless attack tool written in python that uses reaver, pixiewps and aircrack to retrieve the WPS pin of any vulnerable AP in seconds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kurobeats/reaver_reattempt/&#34;&gt;reaver_reattempt&lt;/a&gt; - Change the Mac address of the wifi connection as well as the emulated one created by airmon-ng in an attempt to avoid being locked out of routers for repeated WPS attack attempts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deoxxa/reaver-ui/&#34;&gt;Reaver-ui&lt;/a&gt; - Hacky UI to wrap around reaver-wps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fopina/reaver-webui/&#34;&gt;Reaver-webui&lt;/a&gt; - Simple WebUI to crack wireless networks using reaver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/t6x/reaver-wps-fork-t6x/&#34;&gt;Reaver-wps-fork-t6x&lt;/a&gt; - Community forked version which includes various bug fixes, new features and additional attack method (such as the offline Pixie Dust attack)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabrielrcouto/reaver-wps/&#34;&gt;Reaver-wps&lt;/a&gt; - Brute force attack against Wifi Protected Setup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ml31415/wpscrack/&#34;&gt;wpscrack&lt;/a&gt; - Continuation of wpscrack originally written by Stefan Viehböck&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devttys0/wps/&#34;&gt;wps&lt;/a&gt; - WPS related utilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coresecurity.com/corelabs-research/open-source-tools/wpsig&#34;&gt;WPSIG&lt;/a&gt; - Simple tool (written in Python) that does information gathering using&amp;nbsp;WPS&amp;nbsp;information elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/dudux/wpsoffline/&#34;&gt;wpsoffline&lt;/a&gt; - PoC for routers vulnerable with WPS and deficiencies in their PRNG state&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wps-scripts/&#34;&gt;Wps-scripts&lt;/a&gt; - WPS hacking scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/younextvictim/Wps-Ultimate-Cracker/&#34;&gt;Wps-Ultimate-Cracker&lt;/a&gt; - This script will help help you to get the most of router in morocco by using pixiewps , reaver , aircrack-ng ,wifite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Others&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanhoefm/apbleed/&#34;&gt;apbleed&lt;/a&gt; - Allows you to use existing heartbleed tools to test the RADIUS server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.willhackforsushi.com/?page_id=67&#34;&gt;eapmd5pass&lt;/a&gt; - An implementation of an offline dictionary attack against the EAP-MD5 protocol. This utility can be used to audit passwords used for EAP-MD5 networks from wireless packet captures, or by manually specifying the challenge, response and associated authentication information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AdamKnube/haircrack/&#34;&gt;haircrack&lt;/a&gt; - Automated aircrack/reaver/pyrit (An interface for aircrack/reaver/pyrit written in python. The interface itself may never get finished.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ikecrack.sourceforge.net/&#34;&gt;IKECrack&lt;/a&gt; - IKE/IPSec authentication crack tool. This tool is designed to bruteforce or dictionary attack the key/password used with Pre-Shared-Key [PSK] IKE authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sa7mon/wpe-parse/&#34;&gt;Wpe-parse&lt;/a&gt; - This is a simple parsing script to convert output from hostapd-wpe (which makes John the Ripper-formatted logs) to Hashcat format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Injection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpp0/aggr-inject/&#34;&gt;Aggr-inject&lt;/a&gt; - Remote frame injection PoC by exploiting a standard compliant A-MPDU aggregation vulnerability in 802.11n networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SaltwaterC/aircrack-db/&#34;&gt;Aircrack-db&lt;/a&gt; - A list of wireless cards tested with the dual-card injection test and in the field&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sh0/airown/&#34;&gt;airown&lt;/a&gt; - Packet injection tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/M0Rf30/airpwn/&#34;&gt;airpwn&lt;/a&gt; - A generic packet injection tool for 802.11 networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ICSec/airpwn-ng/&#34;&gt;Airpwn-ng&lt;/a&gt; - New and improved version of airpwn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iitis/iitis-generator/&#34;&gt;Iitis-generator&lt;/a&gt; - Software for distributed statistical evaluation of IEEE 802.11 wireless networks using Linux mac80211 packet injection facility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teddyyy/libfcap/&#34;&gt;libfcap&lt;/a&gt; - Library for manipulate 802.11 frame in monitor mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/libmoep-1.1/&#34;&gt;libmoep&lt;/a&gt; - Allows for frame injection on monitor mode devices with per-frame radiotap options such as TX rate / MCS index and RTS/CTS protection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenSecurityResearch/lorcon_examples/&#34;&gt;Lorcon-examples&lt;/a&gt; - Various examples and patches for LORCON&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/lorcon/&#34;&gt;lorcon&lt;/a&gt; - A common injection and control library for wireless packet crafting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x0d/lrc/&#34;&gt;lrc&lt;/a&gt; - Fast Wi-Fi hijacker in C, based on AirPwn ideas and LORCON&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moepinet/moepdefend/&#34;&gt;moepdefend&lt;/a&gt; - Example monitoring/injection tool based on libmoep&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juzna/packet-injector/&#34;&gt;packetinjector&lt;/a&gt; - Packet analyzer and injector, written in JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derosier/packetvector/&#34;&gt;packetvector&lt;/a&gt; - 802.11 management packet injection tool based on packetspammer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tom5760/pylorcon2/&#34;&gt;pylorcon2&lt;/a&gt; - Pure Python wrapper for the LORCON library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/viscousliquid/wifitap/&#34;&gt;wifitap&lt;/a&gt; - WiFi injection tool through tun/tap device&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CoreSecurity/wiwo/&#34;&gt;wiwo&lt;/a&gt; - Wiwo is a distributed 802.11 monitoring and injecting system that was designed to be simple and scalable&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anyfi/wperf/&#34;&gt;wperf&lt;/a&gt; - 802.11 frame injection/reception tool for Linux mac80211 stack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rogue AP/Fake AP/ MITM&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nick-the-Greek/Aerial/&#34;&gt;Aerial&lt;/a&gt; - Multi-mode wireless LAN Based on a Software Access point for Kali Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MrMugiwara/AIRBASE-NG-SSLSTRIP-AIRSTRIP-/&#34;&gt;AIRBASE-NG-SSLSTRIP-AIRSTRIP- &lt;/a&gt; - AIRBASE-NG + SSLSTRIP = AIRSTRIP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lgrangeia/cupid/&#34;&gt;cupid&lt;/a&gt; - Patch for hostapd and wpa_supplicant to attempt to exploit heartbleed on EAP-PEAP/TLS/TTLS connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DanMcInerney/fakeAP/&#34;&gt;FakeAP&lt;/a&gt; - Create fake AP in Kali with 1 command&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/raw/master/fakeaps.c/&#34;&gt;fakeaps&lt;/a&gt; - Fake Access Points using Atheros wireless cards in Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FluxionNetwork/fluxion/&#34;&gt;fluxion&lt;/a&gt; - Fluxion is the future of MITM WPA attacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lostincynicism/FuzzAP/&#34;&gt;FuzzAP&lt;/a&gt; - A python script for obfuscating wireless networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xtr4nge/hostapd-karma/&#34;&gt;Hostapd-karma&lt;/a&gt; - DigiNinja patches to hostapd for rogue access points.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NerdyProjects/hostapd-wpe-extended/&#34;&gt;Hostapd-wpe-extended&lt;/a&gt; - Modification and tools for using hostapd for rogue AP attacks impersonating WPA-Enterprise networks to steal user credentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenSecurityResearch/hostapd-wpe/&#34;&gt;Hostapd-wpe&lt;/a&gt; - Modified hostapd to facilitate AP impersonation attacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atimorin/karma/&#34;&gt;karma&lt;/a&gt; - KARMA Attacks Radioed Machines Automatically (KARMA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/mana/&#34;&gt;mana&lt;/a&gt; - Our mana toolkit for wifi rogue AP attacks and MitM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xdavidhu/mitmAP/&#34;&gt;mitmAP&lt;/a&gt; - A python program to create a fake AP and sniff data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jakev/mitm-helper-wifi/&#34;&gt;Mitm-helper-wifi&lt;/a&gt; - Make it easy and straight-forward to configure a Ubuntu virtual machine to act as a WiFi access point (AP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wshen0123/mitm-rogue-WiFi-AP/&#34;&gt;Mitm-rogue-WiFi-AP&lt;/a&gt; - MITM Attack Example Code with Rogue Wi-Fi AP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/konker/openrtls/&#34;&gt;openrtls&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/experimental-platform/platform-hostapd/&#34;&gt;Platform-hostapd&lt;/a&gt; - Wireless access point for experimental-platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SilverFoxx/PwnSTAR/&#34;&gt;PwnSTAR&lt;/a&gt; - PwnSTAR (Pwn SofT-Ap scRipt) - for all your fake-AP needs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrew14824/rogue_ap/&#34;&gt;rogue_ap&lt;/a&gt; - RogueAP_hostapd.py is a script designed to create a Rogue Access Point&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wouter-glasswall/rogueap/&#34;&gt;rogueap&lt;/a&gt; - Start a rogue access point with no effort, with support for hostapd, airbase, sslstrip, sslsplit, tcpdump builtin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/olanb7/rogueDetect/&#34;&gt;rogueDetect&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/H0nus/RogueSploit/&#34;&gt;RogueSploit&lt;/a&gt; - Powerfull Wi-Fi trap&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zackiles/Rspoof/&#34;&gt;Rspoof&lt;/a&gt; - Wifi Automated Fake HotSpot Hijacking with aicrack-ng, airbase, ssl-strip, and dns spoof in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpp0/scapy-fakeap/&#34;&gt;Scapy-fakeap&lt;/a&gt; - Fake wireless Access Point (AP) implementation using Python and Scapy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrewhilts/snifflab/&#34;&gt;snifflab&lt;/a&gt; - Scripts to create your own MITM&#39;ing, packet sniffing WiFi access point&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sa7mon/startools/&#34;&gt;startools&lt;/a&gt; - To use a RasPi to do an Evil Twin attack and capture 802.1x RADIUS creds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/wifi_honey/&#34;&gt;wifi_honey&lt;/a&gt; - Setting up four fake access points, each with a different type of encryption, None, WEP, WPA and WPA2 and the seeing which of the four the client connects to&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wifiphisher/wifiphisher/&#34;&gt;wifiphisher&lt;/a&gt; - Automated victim-customized phishing attacks against Wi-Fi clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/P0cL4bs/WiFi-Pumpkin/&#34;&gt;WiFi-Pumpkin&lt;/a&gt; - Framework for Rogue Wi-Fi Access Point Attack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coolshou/wifisoftap/&#34;&gt;wifisoftap&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ahhh/Wifi_Trojans/&#34;&gt;Wifi_Trojans&lt;/a&gt; - Collection of wireless based bind and reverse connect shells for penetration testers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sniffing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivanlei/airodump-iv/&#34;&gt;Airodump-iv&lt;/a&gt; - A python implementation of airodump-ng&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atiti/airodump-logger/&#34;&gt;Airodump-logger&lt;/a&gt; - Logging clients with airodump-ng&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhovner/airport-sniffer/&#34;&gt;Airport-sniffer&lt;/a&gt; - Very simple Wi-Fi sniffer and dump parser for built-in macbook AirPort Extreme card. Only native MacOS tools used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saintkepha/airtraf/&#34;&gt;airtraf&lt;/a&gt; - Wireless 802.11 network sniffer and analyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eldraco/darm/&#34;&gt;darm&lt;/a&gt; - Intelligent network sniffer for the masses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/4ZM/datasamalen/&#34;&gt;datasamalen&lt;/a&gt; - Pick up wifi-probe requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wirelesshack/DeSniffer/&#34;&gt;DeSniffer&lt;/a&gt; - 802.11 wireless sniffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DepthDeluxe/dot11sniffer/&#34;&gt;dot11sniffer&lt;/a&gt; - Sniffs 802.11 traffic and counts the number of active wireless devices in an area&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rafikMeg/eap_detect/&#34;&gt;eap_detect&lt;/a&gt; - A simple script using the python library Scapy to detect the 802.1X authentication mechanism&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/raw/master/handshakeharvest-K1-K2-K2016-4-0.sh/&#34;&gt;handshakeharvest&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brycethomas/liber80211/&#34;&gt;liber80211&lt;/a&gt; - 802.11 monitor mode for Android without root&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weaknetlabs/libpcap-80211-c/&#34;&gt;libpcap-80211-c&lt;/a&gt; - Sniffs on a RFMON-enabled device for a beacon when compiled, linked and loaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chillancezen/mac80211-user/&#34;&gt;mac80211-user&lt;/a&gt; - Intercept 80211 data frame and put it into userspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jazoza/milicone/&#34;&gt;milicone&lt;/a&gt; - Investigating interaction with wireless communication traffic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgumbley/mr-nosy/&#34;&gt;Mr-nosy&lt;/a&gt; - Liked to know about everything that was going on&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DE-IBH/mupe/&#34;&gt;mupe&lt;/a&gt; - MUltiPath Estimator - Create statistical analysis of 802.11 Radiotap sniffs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/veenfang/naive_project/&#34;&gt;Naive-project&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/6e726d/Native-WiFi-API-Beacon-Sniffer/&#34;&gt;Native-WiFi-API-Beacon-Sniffer &lt;/a&gt; - Tool that dumps beacon frames to a pcap file. Works on Windows Vista or Later with any Wireless Card&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abnarain/oculus/&#34;&gt;oculus&lt;/a&gt; - Lightweight tool to collect traces from wifi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HalfdanJ/ofxSniffer/&#34;&gt;ofxSniffer&lt;/a&gt; - Wrapper for the libtins library. Libtins can be used to sniff network packages, or to generate network pacakages yourself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ransford/phystats/&#34;&gt;phystats&lt;/a&gt; - Gather &amp;amp; plot ieee80211 counters from Linux debugfs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hydrogen18/probecap/&#34;&gt;probecap&lt;/a&gt; - A quick and dirty utility to capture and store WiFi probes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jjb3tee3/probemon/&#34;&gt;probemon&lt;/a&gt; - Monitors 802.11 probe packets sent from roaming mobile devices. Developed using PyLorcon2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xdavidhu/probeSniffer/&#34;&gt;probesniffer&lt;/a&gt; - A tool for sniffing unencrypted wireless probe requests from devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dappiu/rifsniff/&#34;&gt;rifsniff&lt;/a&gt; - Remote Interface Sniffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wouterbudding/ScapyGELFtoGraylog2/&#34;&gt;ScapyGELFtoGraylog2&lt;/a&gt; - Sniff some 802.11 packages and send the date and MAC with GELF UDP to Graylog2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rahilsharma/Scapy-wireless-scanner/&#34;&gt;Scapy-wireless-scanner&lt;/a&gt; - Simple wireless scanner built using Scapy Library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SamClarke2012/SSIDentity/&#34;&gt;SSIDentity&lt;/a&gt; - Passive sniffing of 802.11 probe requests, stored in a central database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bwoolf1122/TCP-SeqNum/&#34;&gt;TCP-SeqNum&lt;/a&gt; - Means to sniff 802.11 traffic and obtain TCP session info using netfiter_queue. Use that data to construct a packet in scappy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x0d/wallofshame/&#34;&gt;wallofshame&lt;/a&gt; - Multi protocol sniffer, created for ChaosConstruction conference HackSpace&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catalyst256/Watcher/&#34;&gt;Watcher&lt;/a&gt; - Canari framework based Maltego transform pack that allows you to perform wireless sniffing within Maltego&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dcrisan/WiFi-802.11-Demo-Sniffer/&#34;&gt;WiFi-802.11-Demo-Sniffer&lt;/a&gt; - This 802.11 sniffer written in Python provides a useful tool to raise awareness at the amount of data phones release for anyone to read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SYWorks/wifi-harvester/&#34;&gt;Wifi-harvester&lt;/a&gt; - For collecting probed SSID name by wireless devices, Access point detail and connected clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rajkotraja/wifiJamMac/&#34;&gt;wifijamMac&lt;/a&gt; - Allows you to select one or more nearby wireless networks, thereupon presenting a list of clients which are currently active on the network(s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wifimon/Wifimon/&#34;&gt;Wifimon&lt;/a&gt; - Wi-fi 802.11 Beacon Frame sniffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/edkeeble/wifi-scan/&#34;&gt;Wifi-scan&lt;/a&gt; - Short python script scans for probe requests from whitelisted WiFi clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Geovation/wifispy/&#34;&gt;wifispy&lt;/a&gt; - Sniff Wifi traffic, log device addresses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlanslovenija/wireless-info/&#34;&gt;Wireless-info&lt;/a&gt; - Obtain information about wireless interfaces from MAC80211 stack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stef/wireless-radar/&#34;&gt;Wireless-radar&lt;/a&gt; - DF and other tools to explore a 2.4GHz environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gauravpatwardhan/Wireless-Sniffer/&#34;&gt;Wireless-Sniffer&lt;/a&gt; - A 802.11 wireless sniffer tool (c-based)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wardriving&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeffThompson/MappingWirelessNetworks/&#34;&gt;MappingWirelessNetworks&lt;/a&gt; - Code, data, and (possibly) schematics for recording wireless network data around a city&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pan0pt1c0n/WAPMap/&#34;&gt;WAPMap&lt;/a&gt; - Parse Kismet .netxml output and then return a CSV file that can be uploaded to Google Maps Engine to map WEP or OPEN networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/warcarrier/&#34;&gt;warcarrier&lt;/a&gt; - An NCURSES-based, all-in-one instrument panel for professional Wardriving&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyberpython/WifiScanAndMap/&#34;&gt;WifiScanAndMap&lt;/a&gt; - A Linux Python application to create maps of 802.11 networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Miscellaneous Attacking Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travisgoodspeed/80211scrambler/&#34;&gt;80211scrambler&lt;/a&gt; - Small collection of tools in Verilog for working&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/&#34;&gt;airgeddon&lt;/a&gt; - This is a multi-use bash script for Linux systems to audit wireless networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maroviher/airodump_mar_attack/&#34;&gt;airodump_mar_attack&lt;/a&gt; - Maroviher attack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gat3way/AirPirate/&#34;&gt;AirPirate&lt;/a&gt; - Android 802.11 pentesting tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davll/airspf/&#34;&gt;airspf&lt;/a&gt; - AirSpoof/Airpwn ??&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/balle/airxploit/&#34;&gt;airxploit&lt;/a&gt; - Wireless discovery and exploitation framework written in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NORMA-Inc/AtEar/&#34;&gt;AtEar&lt;/a&gt; - Wireless Hacking, WiFi Security, Vulnerability Analyzer, Pentestration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MisterBianco/BoopSuite/&#34;&gt;BoopSuite&lt;/a&gt; - A Suite of Tools written in Python for wireless auditing and security testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xiao106347/chap2asleap/&#34;&gt;chap2aleap&lt;/a&gt; - Work with asleap+genk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tjetzinger/CloudCrackInstaller/&#34;&gt;CloudCrackInstaller&lt;/a&gt; - Script which installs Crunch, Pyrit and Cowpatty on a running Amazon EC2 Cluster GPU Instance to crack WPA and WPA2 keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Konsole512/Crippled/&#34;&gt;Crippled&lt;/a&gt; - WPA/WPA2 Belkin.XXXX, Belkin_XXXXXX, belkin.xxx and belkin.xxxx router default key generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/securestate/eapeak/&#34;&gt;eapeak&lt;/a&gt; - Analysis Suite For EAP Enabled Wireless Networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brav0hax/easy-creds/&#34;&gt;Easy-creds&lt;/a&gt; - Leverages tools for stealing credentials during a pen test&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xtr4nge/FruityWifi/&#34;&gt;FruityWiFi&lt;/a&gt; - Wireless network auditing tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisk44/Hijacker/&#34;&gt;Hijacker&lt;/a&gt; - Aircrack, Airodump, Aireplay, MDK3 and Reaver GUI Application for Android&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d4rkcat/killosx/&#34;&gt;killosx&lt;/a&gt; - Use the Apple CoreText exploit (CVE-2012-3716) and launch an AP to affect all devices within wifi range&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DanMcInerney/LANs.py/&#34;&gt;LANs.py&lt;/a&gt; - Inject code, jam wifi, and spy on wifi users&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/edkeeble/null-packet-wifi-prompt/&#34;&gt;Null-packet-wifi-promt&lt;/a&gt; - Simple script to prompt responses from wireless devices with a known MAC address&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Crypt0s/PiWAT/&#34;&gt;PiWAT&lt;/a&gt; - Wireless Attack Toolkit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jordan-wright/python-wireless-attacks/&#34;&gt;Python-wireless-attacks&lt;/a&gt; - Wireless Attacks in Python (Based on blog series)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nrohsak/Secpi/&#34;&gt;Secpi&lt;/a&gt; - Python based script for wifi pentesting on the RasPi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinistermachine/sly-fi/&#34;&gt;Sly-fi&lt;/a&gt; - Wifi pwnage automation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XayOn/smoothie/&#34;&gt;smoothie&lt;/a&gt; - Web based wireless auditory tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smoz1986/WHAT-PRO/&#34;&gt;WHAT-PRO&lt;/a&gt; - 802.11 Exploitation Tool for use with Kali 2. More tools available than WHAT or WHAT Pi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vivek-Ramachandran/wi-door/&#34;&gt;Wi-door&lt;/a&gt; - Wi-Fi Backdoors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/raw/master/Wireless%20IDS%20Tool.py/&#34;&gt;WIDSTT&lt;/a&gt; - Wireless Intrusion Detection Systems Testing Tool – test your WIDS by performing attacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AbbySec/WifiAttack/&#34;&gt;WifiAttack&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/jpgerek/wifi-default-password/&#34;&gt;wifi-default-password&lt;/a&gt; - Bash script that tries all the default passwords for a particular wifi access point&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flankerhqd/wifimonster/&#34;&gt;wifimonster&lt;/a&gt; - Wifi sniffing and hijacking tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifuzz/&#34;&gt;wifuzz&lt;/a&gt; - Access Point 802.11 stack fuzzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xd012/wifuzzit/&#34;&gt;wifuzzit&lt;/a&gt; - A 802.11 wireless fuzzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cozybit/wtf/&#34;&gt;wtf&lt;/a&gt; - Wireless Test Framework. Collection of test suites for validating various wifi functionality on various wifi devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hatRiot/zarp/&#34;&gt;zarp&lt;/a&gt; - Network attack tool centered around the exploitation of local networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Information Gathering&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binarymaster/3WiFi/&#34;&gt;3WiFi Database&lt;/a&gt; - Collect data from Router Scan log reports, search for access points, obtain its geolocation coordinates, and display it on world map&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kootenpv/access_points/&#34;&gt;access_points&lt;/a&gt; - Scan your WiFi and get access point information and signal quality&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h3pr5tq/accumulation-rssi/&#34;&gt;Accumulation-rssi&lt;/a&gt; - Linux utility for accumulation of WiFi RSSI to text file. Using nl80211, Managed mode. Useful for experiments with WiFi (example, localization)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trou/airscan/&#34;&gt;airscan&lt;/a&gt; - Wi-Fi scanning utility for the Nintendo DS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/enkore/basiciw/&#34;&gt;basiciw&lt;/a&gt; - Retrieve information such as ESSID or signal quality from wireless cards (Python module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h3pr5tq/get-rssi/&#34;&gt;Get-rssi&lt;/a&gt; - Linux utility for getting RSSI WiFi of APs to text file. Using Monitor mode, libpcap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/otherview/IndoorPositionr/&#34;&gt;IndoorPositionr&lt;/a&gt; - Indoor positioning using Android to provide the surrounding Access Points signals and guess the position&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hubert3/iSniff-GPS/&#34;&gt;Isniff-GPS&lt;/a&gt; - Passive sniffing tool for capturing and visualising WiFi location data disclosed by iOS devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AravinthPanch/rssi/&#34;&gt;rssi&lt;/a&gt; - Indoor localisation using RSSI. RSSI is received signal strength indicator in IEEE 802.11 beacon packet to announce the presence of WiFi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hkm/whoishere.py/&#34;&gt;whoishere&lt;/a&gt; - WIFI Client Detection - Identify people by assigning a name to a device performing a wireless probe request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Viralmaniar/Wifi-Dumper/&#34;&gt;Wifi-Dumper&lt;/a&gt; - Dump the wifi profiles and cleartext passwords of the connected access points on the Windows machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eye9poob/Wifi-monitor/&#34;&gt;Wifi-monitor&lt;/a&gt; - Prints the IPs on your local network that&#39;re sending the most packets ack = 802.11 control frame acknowledgement or …&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/6e726d/WIG/&#34;&gt;WIG&lt;/a&gt; - Tools for 802.11 information gathering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Defence/Detection&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atechdad/badkarma/&#34;&gt;badkarma&lt;/a&gt; - BadKarma is a simple python script used to detect and disrupt rouge access points/honeypots using the karma attack such as the wifi pineapple&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moha99sa/EvilAP_Defender/&#34;&gt;EvilAP_Defender&lt;/a&gt; - Protect your Wireless Network from Evil Access Points&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/huntpineapples/&#34;&gt;huntpineapples&lt;/a&gt; - WiFi Pineapple hunter from DC23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IGRSoft/KisMac2/&#34;&gt;KisMac2&lt;/a&gt; - Free, open source wireless stumbling and security tool for Mac OS X&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaulMcMillan/kismetclient/&#34;&gt;kismetclient&lt;/a&gt; - A Python client for the Kismet server protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kismetwireless/kismet/&#34;&gt;kismet&lt;/a&gt; - Wireless network detector, sniffer, and intrusion detection system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kismon/kismon/&#34;&gt;kismon&lt;/a&gt; - A GUI client for kismet&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aircrack-ng/OpenWIPS-ng&#34;&gt;Openwips-ng&lt;/a&gt; - Open source and modular Wireless IPS (Intrusion Prevention System)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/python-kismet/&#34;&gt;Python-kismet&lt;/a&gt; - Python threaded listener to Kismet broadcasts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/baggybin/RogueDetection/&#34;&gt;RogueDetection&lt;/a&gt; - Rogue Access Point Detection and WIDS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SYWorks/waidps/&#34;&gt;waidps&lt;/a&gt; - Wireless Auditing, Intrusion Detection &amp;amp; Prevention System&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hkparker/Wave/&#34;&gt;Wave&lt;/a&gt; - 802.11 IDS, visualizer, and analytics platform for the web&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nipunjaswal/Wireless-forensics-framework/&#34;&gt;Wireless-forensics-framework&lt;/a&gt; - Automated Wireless Penetration Testing and Carrying out Wireless Forensics in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SYWorks/wireless-ids/&#34;&gt;Wireless-ids&lt;/a&gt; - Ability to detect suspicious activity such as (WEP/WPA/WPS) attack by sniffing the air for wireless packets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/securestate/wmd/&#34;&gt;wmd&lt;/a&gt; - Simple solution for the detection and location of Rogue Access Points.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wraith-wireless/wraith/&#34;&gt;wraith&lt;/a&gt; - Wireless Reconnaissance And Intelligent Target Harvesting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nan-Do/wspy/&#34;&gt;wspy&lt;/a&gt; - Python tool to create a wireless ids it detects which clients are connected to a network to allow the creation of usage patterns of a netowrk by the clients&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libraries/General Purpose Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanmatthew/80211p_raw/&#34;&gt;80211p_raw&lt;/a&gt; - Raw socket utilities for 802.11p transmission&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MinimumLaw/80211_raw/&#34;&gt;80211_raw&lt;/a&gt; - Sender and receiver for WiFi (IEEE802.11) network with raw sockets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/banjax/&#34;&gt;banjax&lt;/a&gt; - Library for low-level programming of IEEE 802.11 wireless network interfaces on the GNU/Linux operating system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timow/dot11er/&#34;&gt;dot11er&lt;/a&gt; - Some tools for playing with IEEE802.11&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhodey/frame-utils.js/&#34;&gt;Frame-utils.js&lt;/a&gt; - A collection of utilities for processing streams of 80211 frames and radiotap headers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dutchcoders/gopacket-80211/&#34;&gt;Gopacket-80211&lt;/a&gt; - Extra gopacket layers for Radiotap and 802.11 (has been integrated in Gopacket)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wraith-wireless/itamae/&#34;&gt;itamae&lt;/a&gt; - 802.11 radiotap and MPDU parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hbock/libairpcap-nl/&#34;&gt;Libairpcap-nl&lt;/a&gt; - Implementation of AirPcap library, targetting the NL80211 protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/br101/libuwifi/&#34;&gt;libuwifi&lt;/a&gt; - C library for parsing, generating and analyzing Wifi (WLAN 802.11) frames in userspace and related functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flupzor/packetparser/&#34;&gt;packetparser&lt;/a&gt; - IEEE 802.11 packetparser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/securitytube/pcap2xml/&#34;&gt;pcap2xml&lt;/a&gt; - Convert 802.11 Packet Traces to XML and SQLITE Format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvnn3/PCS/&#34;&gt;PCS&lt;/a&gt; - Set of Python modules and objects that make building network protocol code easier for the protocol developer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/probr/probr-core/&#34;&gt;Probr-core&lt;/a&gt; - The core-component for generic WiFi tracking: remote device management, packet capturing, packet storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/py80211/&#34;&gt;py80211&lt;/a&gt; - Suite of libraries for parsing 802.11 packets as well as managing wireless cards and working with 802.11 information&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wraith-wireless/PyRIC/&#34;&gt;PyRIC&lt;/a&gt; - PyRIC (is a Linux only) library providing wireless developers and pentesters the ability to identify, enumerate and manipulate their system&#39;s wireless cards programmatically in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/llazzaro/python3-wifi/&#34;&gt;python3-wifi&lt;/a&gt; - Python WiFi is a Python module that provides read and write access to a wireless network card&#39;s capabilities using the Linux Wireless Extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bcopeland/python-radiotap/&#34;&gt;Python-radiotap&lt;/a&gt; - Tiny lib for parsing radiotap/802.11 headers in python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/python-wifi/&#34;&gt;python-wifi&lt;/a&gt; - Python WiFi is a Python module that provides read and write access to a wireless network card&#39;s capabilities using the Linux Wireless Extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcgrof/qca-swiss-army-knife/&#34;&gt;Qca-swiss-army-knife&lt;/a&gt; - Hosts a set of utilities that we use to debug / help with our driver development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AlexanderSelzer/Radioparse/&#34;&gt;Radioparse&lt;/a&gt; - A WiFi protocol parser that can be used with radiotap packets and node-pcap&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/secdev/scapy&#34;&gt;Scapy&lt;/a&gt; - Python-based interactive packet manipulation program &amp;amp; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmegli/wifi-scan/&#34;&gt;Wifi-scan&lt;/a&gt; - A nl80211 C/C++ library for monitoring signal strength of WiFi networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-scripts&#34;&gt;wifi-scripts&lt;/a&gt; - Misc scripts and tools for WiFi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshvillbrandt/wireless/&#34;&gt;wireless&lt;/a&gt; - Dead simple, cross-platform Python library to connect to wireless networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Visualization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Crypt0s/airview/&#34;&gt;airview&lt;/a&gt; - A python web application compliment to py80211 which allows you to visualize the airwaves around you with your web browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bcopeland/speccy/&#34;&gt;speccy&lt;/a&gt; - Visualization tool for ath spectral scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bertabus/wifi-contour/&#34;&gt;Wifi-contour&lt;/a&gt; - A contour mapping program of wireless 802.11 signal strength&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beaugunderson/wifi-heatmap/&#34;&gt;Wifi-heatmap&lt;/a&gt; - Generate heatmaps of wifi coverage with Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/securitytube/wifiscanvisualizer/&#34;&gt;wifiscanvisualizer&lt;/a&gt; - Wi-Fi Scan Visualizer by Pentester Academy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s7jones/Wifi-Signal-Plotter/&#34;&gt;Wifi-Signal-Plotter&lt;/a&gt; - A Python script for graphing and comparing the WiFi signal strengths between WiFi adaptors in Windows or Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitdbg/wifivis/&#34;&gt;wifivis&lt;/a&gt; - Visualize some mit wifi access point data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dioh/wipi/&#34;&gt;wipi&lt;/a&gt; - Visualize the WiFi packages that are floating around us all the time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hughobrien/wlan-stats/&#34;&gt;Wlan-stats&lt;/a&gt; - Tool chain using tshark to pull data from pcaps, further process them in python, and graph the output in R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localisation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schollz/find-lf/&#34;&gt;Find-lf&lt;/a&gt; - Track the location of every Wi-Fi device (📱) in your house using Raspberry Pis and FIND&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yzfedora/geowifi/&#34;&gt;geowifi&lt;/a&gt; - This is a Geographic WiFi Positioning program written under the Linux.(it is also a WiFi Positioning API written for C language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nikseetharaman/GrapplingHook/&#34;&gt;GrapplingHook&lt;/a&gt; - Open Source 802.11 Direction Finder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jedivind/gtaiad/&#34;&gt;gtaiad&lt;/a&gt; - Indoor Wi-Fi navigation prototype using triangulation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freifunk/openwifimap-api/&#34;&gt;Openwifimap-api&lt;/a&gt; - OpenWiFiMap database and its api&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/initbrain/Python-Wi-Fi-Positioning-System/&#34;&gt;Python Wi-Fi Positioning System&lt;/a&gt; - Python Wi-Fi Positioning System - Wi-Fi geolocation script using the Google Geolocation API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akrv/pyWPSLocalisation/&#34;&gt;pyWPSLocation&lt;/a&gt; - Using Python for localisation using Google Geolocation API (GGAPI) and WiFi Positioning System (WPS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kootenpv/whereami/&#34;&gt;whereami&lt;/a&gt; - Uses WiFi signals 📶 and machine learning to predict where you are&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/genekogan/wifi_geolocation/&#34;&gt;Wifi-geolocation&lt;/a&gt; - Get your latitude/longitude via wifi access points&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/utexas-air-fri/wifi_localization/&#34;&gt;Wifi-localization&lt;/a&gt; - Wifi Localization using a map and reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clockfort/wifi-locator/&#34;&gt;Wifi-locator&lt;/a&gt; - Determines physical location of station judging from 802.11 beacons&#39; BSSID/Signal/Noise/Quality information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romebop/wi-finder/&#34;&gt;Wi-finder&lt;/a&gt; - Wi-Fi hotspot finder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wlan-pos/&#34;&gt;Wlan-pos&lt;/a&gt; - Location fingerprinting and triangulation engine for WLAN (IEEE802.11,aka WiFi) environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration/setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CTU-IIG/802.11p-iw/&#34;&gt;802.11p-iw &lt;/a&gt; - Wireless configuration tool (UNIX)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mengning/agentapd/&#34;&gt;agentapd&lt;/a&gt; - Agent of WiFi hardware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nathanshimp/AirLibre/&#34;&gt;AirLibre&lt;/a&gt; - Python API For UBNT AirOS Devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aaronkish/Atheros-AR9271/&#34;&gt;Atheros-AR9271 &lt;/a&gt; - Kernel Extension for AR9271 chipset (Wireless USB Card)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andyvand/AtherosROMKit/&#34;&gt;AtherosROMKit &lt;/a&gt; - Atheros ROM modding and recovery kit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulpatras/cac/&#34;&gt;cac&lt;/a&gt; - A Centralized Adaptive Control algorithm that optimises the performance of IEEE 802.11 WLANs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bendemott/captiveportal/&#34;&gt;captiveportal&lt;/a&gt; - A captive portal that can be used on most linux distributions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mengning/cloudap/&#34;&gt;cloudap&lt;/a&gt; - AP Manager in Cloud,AP Hardware on your side&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kurokid/connme/&#34;&gt;connme&lt;/a&gt; - Client for Hostapd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcgrof/crda/&#34;&gt;crda&lt;/a&gt; - Central Regulatory Domain Agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oblique/create_ap/&#34;&gt;create_ap&lt;/a&gt; - This script creates a NATed or Bridged WiFi Access Point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/claymichaels/disable-802.11b-snmp/&#34;&gt;disable-802.11b-snmp&lt;/a&gt; - A tool to set 802.11 protocols on thousands of Access Points with SNMP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ealexeev/do-wifi/&#34;&gt;Do-wifi&lt;/a&gt; - Command line tool for scanning and connecting to wifi networks in Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doom5/ath9k_ath5k_full_permissive_unlock_all_channels.patch/&#34;&gt;full_permissive_unlock_ath&lt;/a&gt; - This kernel patch enable all 2GHZ &amp;amp; 5GHZ channels (without restriction) for ath9k &amp;amp; ath5k forced to use buildin world regulatory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/szehl/FWAP/&#34;&gt;FWAP&lt;/a&gt; - Minimal, very lightweight access point implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nims11/hostapd.py/&#34;&gt;hostapd&lt;/a&gt; - Python script to make using and configuring hostapd easier&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://w1.fi/hostapd/&#34;&gt;hostapd&lt;/a&gt; - User space daemon for access point and authentication servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adde88/hostapd-mana/&#34;&gt;Hostapd-mana&lt;/a&gt; - Hostapd-mana for the 6.th gen. Wifi Pineapple, and OpenWRT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adde88/hostapd-mana-openwrt/&#34;&gt;hostapd-mana-openwrt&lt;/a&gt; - Hostapd-mana - build-files, and installation-files for OpenWRT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yunus/Hostapd-with-WebID/&#34;&gt;Hostapd-with-WebID&lt;/a&gt; - WebID integrated hostapd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TarlogicSecurity/hostapd-wpe-openwrt/&#34;&gt;Hostapd-wpe-openwrt&lt;/a&gt; - Hostapd-wpe (Wireless Pwnage Edition) packages for OpenWRT Barrier Breaker 14.07&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prahladyeri/hotspotd/&#34;&gt;hotspotd&lt;/a&gt; - Simple daemon to create a wifi hotspot on Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UtkMSNL/IEEE802.11-complete/&#34;&gt;IEEE802.11-complete&lt;/a&gt; - IEEE802.11 protocol, including PHY, MAC, and rate adaptation approaches upon GNURadio/USRP software-defined radio platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/R2dR/linux-wifi-tools/&#34;&gt;Linux-wifi-tools&lt;/a&gt; - A set of Linux command line tools for managing and troubleshooting wifi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuter/monmob/&#34;&gt;monmob&lt;/a&gt; - Set of tools to provide monitor mode and raw frame injection for devices using broadcom chipsets bcm4325, bcm4329 and bcm4330&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seemoo-lab/nexmon/&#34;&gt;nexmon&lt;/a&gt; - The C-based Firmware Patching Framework for Broadcom/Cypress WiFi Chips that enables Monitor Mode, Frame Injection and much more&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/6e726d/PyWiWi/&#34;&gt;PyWiWi&lt;/a&gt; - Python Windows Wifi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/tree/master/lowlevel/reghack/&#34;&gt;reghack&lt;/a&gt; - Replaces the regulatory domain rules in the driver binaries with less restrictive ones&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thuehn/RegMon/&#34;&gt;RegMon&lt;/a&gt; - RegMon is a Atheros WiFi card register monitoring tool for Linux OpenWrt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mengning/remoteapd/&#34;&gt;remoteapd&lt;/a&gt; - Remote NL80211-Extent driver for Hostapd 2.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/resfi/resfi/&#34;&gt;resfi&lt;/a&gt; - Framework supporting creation of RRM functionality in residential WiFi deployments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/violentshell/rollmac/&#34;&gt;rollmac&lt;/a&gt; - Automated WiFi limit evasion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Marchrius/RT73-USB-Wireless-/&#34;&gt;RT73-USB-Wireless-&lt;/a&gt; - Patched version of RT73USBWireless for Yosemite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jenssegers/RTL8188-hostapd/&#34;&gt;RTL8188-hostapd&lt;/a&gt; - Hostapd for Realtek RTL8188&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foosel/wifi-ap/&#34;&gt;Wifi-ap&lt;/a&gt; - Library wrapper around hostapd and dnsmasq and their respective configuration files that allows for programmatically creating access points in Debian-based Linux environments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/singe/wifi-frequency-hacker/&#34;&gt;Wifi-frequency-hacker&lt;/a&gt; - A modified frequency regulatory domain configuration that doesn&#39;t limit you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/baldwmic/wifi-pentesting/&#34;&gt;Wifi-pentesting&lt;/a&gt; - Wifi Penetration Testing of Home Network&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acidprime/WirelessConfig/&#34;&gt;WirelessConfig&lt;/a&gt; - A 802.1x Python wireless configuration tool with Cocoa wrappers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JackieXie168/como/&#34;&gt;como&lt;/a&gt; - CoMo is a passive monitoring system that supports arbitrary real time traffic queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/br101/horst/&#34;&gt;horst&lt;/a&gt; - Lightweight IEEE802.11 wireless LAN analyzer with a text interface. Its basic function is similar to tcpdump, Wireshark or Kismet, but it&#39;s much smaller and shows different, aggregated information which is not easily available from other tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jahrome/scapybase/&#34;&gt;scapybase&lt;/a&gt; - 802.11 monitor AP based on scapy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuomasb/scapy-survey/&#34;&gt;Scapy-survey&lt;/a&gt; - 802.11 signal strength logger using Scapy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tecknowledge/sigmon/&#34;&gt;sigmon&lt;/a&gt; - Modular WiFi/RF Monitoring and Analysis Implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wi-fi-analyzer/uniband-installer/&#34;&gt;Uniband-installer&lt;/a&gt; - Wireless monitoring framework to help using kismet dumpcap and horst (installation files)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dixel/wifi-linux/&#34;&gt;Wifi-linux&lt;/a&gt; - Simple python script to monitor access point signal strength.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dave5623/wifi_monitor/&#34;&gt;Wifi-monitor&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tadashi/wifi-monitor/&#34;&gt;Wifi-monitor&lt;/a&gt; - Python, py_libpcap, handover&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bliz937/WiPy/&#34;&gt;WiPy&lt;/a&gt; - Sends the WiFi signal strength from multiple clients to a central server. Built for Arch Linux ARM running on Raspberry pi 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sajjanbh/WLAN-Monitoring/&#34;&gt;WLAN-Monitoring&lt;/a&gt; - Monitor our vicinity to monitor wireless devices and traffic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wmon/wmon/&#34;&gt;wmon&lt;/a&gt; - A Wireless Network Monitor with advanced measurement capabilities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Miscellaneous/not sorted :)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tillwo/80211ping/&#34;&gt;80211ping&lt;/a&gt; - Linux command-line tool to ping 802.11 stations (e.g. any WiFi device)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcgrof/acs/&#34;&gt;acs&lt;/a&gt; - Automatic Channel Selection utility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rednaks/airfree-wt/&#34;&gt;Airfree-wt&lt;/a&gt; - Wireless Security Toolkit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doctaweeks/ap-notify/&#34;&gt;Ap-notify&lt;/a&gt; - An example of using the Linux kernel netlink protocol, specifically nl80211 via libnl/libnl-genl, to catch stations associating/disassociating with an 802.11 AP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rboninsegna/ath9k-4W-patch/&#34;&gt;ath9k-4w-patch&lt;/a&gt; - Resources for increasing power of ath9k devices, such as TP-link WN722N&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hughobrien/ath9k-nav/&#34;&gt;Ath9k-nav&lt;/a&gt; - Linux kernel module to poll the NAV register on Atheros 9k series WLAN cards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mothran/bunny/&#34;&gt;bunny&lt;/a&gt; - Bunny is a wireless. meshing, darknet that uses 802.11 to hide its communications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wraith-wireless/captiv8/&#34;&gt;captiv8&lt;/a&gt; - Captive Portal Evasion Tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mousam05/connect-wifi/&#34;&gt;Connect-wifi&lt;/a&gt; - Dmenu based application for Linux that connects to the strongest open wireless network&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abnarain/covert_channel/&#34;&gt;Cover-channel&lt;/a&gt; - Userland code for creating a covert channel in wireless broadcast medium&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bradleykirwan/disassociatedWiFi/&#34;&gt;disassociatedWiFi&lt;/a&gt; - DisassociatedWiFi creates a virtual network interface (using the Linux TUN/TAP device driver) which sends and receives ethernet frames over an 802.11 (WiFi) interface, that has been placed in monitor mode, and supports packet injection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simonwunderlich/FFT_eval/&#34;&gt;FFT_eval&lt;/a&gt; - Aid open source spectrum analyzer development for Qualcomm/Atheros AR92xx and AR93xx based chipsets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mike-albano/frame-randomizer/&#34;&gt;Frame-randomizer&lt;/a&gt; - Capture and randomize 802.11 Association Request frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylemcdonald/FreeWifi/&#34;&gt;FreeWifi&lt;/a&gt; - How to get free wifi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jedahan/haiku-wifi/&#34;&gt;Haiku-wifi&lt;/a&gt; - Turn your wireless router&#39;s extra radios into a public billboard!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/kismet2earth/&#34;&gt;kismet2earth&lt;/a&gt; - Set of utilities that convert from Kismet logs to Google Earth .kml format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreagrandi/kismeth2earth/&#34;&gt;kismeth2earth&lt;/a&gt; - Parsing Kismet logs to get collected data from wireless networks and generate a Google Earth map&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/exp/Kismet-to-KML/&#34;&gt;Kismet-to-KML&lt;/a&gt; - Converts kismet gps log files into kml files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abnarain/mac-analyzer/&#34;&gt;Mac-analyzer&lt;/a&gt; - Collects cross layer stats from ath9k&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulpatras/madwifi-be/&#34;&gt;Madwifi-be&lt;/a&gt; - Modified version of the madwifi driver allowing update of WME parameters for the BE access category&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulpatras/madwifi-hopping/&#34;&gt;Madwifi-hopping&lt;/a&gt; - Modified version of the Madwifi WLAN driver, that employs power-hopping for packet transmission&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fhector/make-a-new-mac80211-to-wirelessAP/&#34;&gt;make-a-new-mac80211-to-wirelessAP&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.salecker.org/software/netxml2kml.html/&#34;&gt;netxml2kml&lt;/a&gt; - Converts netxml files from Kismet Newcore into KML or KMZ files for Google Earth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mubix/osx-wificleaner/&#34;&gt;Osx-wificleaner&lt;/a&gt; - Cleans out open wireless connections from OSX machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kornysietsma/osx-wifi-scan/&#34;&gt;Osx-wifi-scan&lt;/a&gt; - Hacky wifi signal scanner for osx&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sa7mon/parsecaps/&#34;&gt;parsecaps&lt;/a&gt; - Parse wpa.cap generated from besside-ng and create individual .caps for each network with a captured handshake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/enukane/pcap80211analyzer/&#34;&gt;pcap80211analyzer&lt;/a&gt; - Not-so-smart 802.11 frame pcapng analyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/probr/probr-analysis/&#34;&gt;Probr-analysis&lt;/a&gt; - Analysis components for the probr WiFi tracking system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mzhaase/py_DD_WRT_Remote_Mac_Adder/&#34;&gt;py_DD_WRT_Remote_Mac_Adder&lt;/a&gt; - Python Script to remotely update mac filterlists of DD-WRT routers with wl or atheros wifi drivers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/pykismetkml/wikis/pykismetkml.wiki/&#34;&gt;pykismetkml&lt;/a&gt; - Python script designed to export .gps and .xml files (in &amp;lt; Kismet RC1) to .kml files and .netxml files to .kml files in =&amp;gt; Kismet RC2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/pykismetstats/&#34;&gt;pykismetstats&lt;/a&gt; - Pykismetstats parses NetXML file generated by kismet and write statistics to CSV file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ogreworld/PyScapy/&#34;&gt;PyScapy&lt;/a&gt; - This is a package of using scapy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fabriziogiuliano/react80211/&#34;&gt;react80211&lt;/a&gt; - Solution for mitigating the performance impairments of CSMA/CA protocols in multi-hop topologies based on the dynamic adaptation of the contention process experienced by nodes in a wireless network&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/violentshell/Rollmac/&#34;&gt;Rollmac&lt;/a&gt; - Automated WiFi limit evasion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azz2k/scapy-rssi/&#34;&gt;Scapy-rssi&lt;/a&gt; - Example of how to read RSSI values from wifi packaged using Scapy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sheenhx/setbssid/&#34;&gt;setbssid&lt;/a&gt; - Modify the MAC80211 layer in Linux Kernel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/skybluetero/&#34;&gt;skybluetero&lt;/a&gt; - 802.11b/g packet airtime consumption analyzer GUI for Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catalyst256/sniffMyPackets/&#34;&gt;sniffmypackets&lt;/a&gt; - Canari package for pcap file analysis within Maltego&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/snoopy-ng/&#34;&gt;Snoopy-ng&lt;/a&gt; - Snoopy v2.0 - modular digital terrestrial tracking framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0x90/wifi-arsenal/raw/master/spectrum.py/&#34;&gt;spectrum.py&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellais/VX/&#34;&gt;VX&lt;/a&gt; - It might be fun to play tricks on somebody trying to crack your WEP protected router&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skullkey/wbc-utils/&#34;&gt;Wbc-utils&lt;/a&gt; - Couple of hacked together utils for use with the wifibroadcast system by befinitiv&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wi5/wi5-aggregation/&#34;&gt;wi5-aggregation&lt;/a&gt; - Implementing and testing 802.11 frame aggregation (A-MPDU)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b00sti/WiFi-Analyzer/&#34;&gt;WiFi-Analyzer&lt;/a&gt; - Analyzer 802.11 networks - android app [to refactor]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/siriuxy/wifi_based_population_estimator/&#34;&gt;wifi_based_population_estimator&lt;/a&gt; - This is a piece of glueware that sticks up different components from hardware detection to real-time web display.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tillwo/wifi-beeper/&#34;&gt;Wifi-beeper&lt;/a&gt; - Linux command-line tool to make WLAN frames audible&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twitchyliquid64/wifidec/&#34;&gt;wifidec&lt;/a&gt; - Repository for scriptz playing around with decoding elements of the Wifi stack (mainly Radiotap and 802.11 frames)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cmpxchg8/wifi_decode/&#34;&gt;wifi_decode&lt;/a&gt; - Wireless Key Dumper for Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arplote/WifiDirectLinux/&#34;&gt;WifiDirectLinux&lt;/a&gt; - Use p2p with Wifi Direct on Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wifidog/wifidog-gateway/&#34;&gt;Wifidog-gateway&lt;/a&gt; - Repository for the wifidog-gateway captive portal designed for embedded systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abnarain/wifi-dump-analysis/&#34;&gt;Wifi-dump-analysis&lt;/a&gt; - Processing wireless traces from binary files written and read in custom format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abnarain/wifi_dump_parser-v3/&#34;&gt;wifi_dump_parser-v3&lt;/a&gt; - Is the modified parser for the new data set collected using Wifi-dump&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abnarain/wifi_dump-tmpfs/&#34;&gt;wifi_dump-tmpfs&lt;/a&gt; - Dumps wifi data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saljam/wifihisicipy/&#34;&gt;wifihisicipy&lt;/a&gt; - Temporarily runs a wifi hotspot and a &#39;captive portal&#39; to let you choose a permanent wireless network to connect to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rockymeza/wifi/&#34;&gt;wifi&lt;/a&gt; - [unmaintained] WiFi tools for linux &lt;a href=&#34;http://pypi.python.org/pypi/wifi&#34;&gt;http://pypi.python.org/pypi/wifi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cnlohr/wifirxpower/&#34;&gt;wifirxpower&lt;/a&gt; - Linux-based WiFi RX Power Grapher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mehdilauters/wifiScanMap/&#34;&gt;wifiScanMap&lt;/a&gt; - An other wifi mapping tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UtkMSNL/WiFi-scheduling/&#34;&gt;WiFi-scheduling&lt;/a&gt; - This project evaluates the efficiency and overhead of wireless network scheduling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simonwunderlich/wifi_statistics/&#34;&gt;wifi_statistics&lt;/a&gt; - Linux kernel module to gather wifi statistics from peer and non-peer STAs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DHNishi/wifitracker/&#34;&gt;wifitracker&lt;/a&gt; - Raspberry Pi Wifi Tracking API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bob-King/WifiTrafficAnalyzer/&#34;&gt;WifiTrafficAnalyzer&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LionSec/wifresti/&#34;&gt;wifresti&lt;/a&gt; - Find your wireless network password in Windows , Linux and Mac OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anburocky3/wime/&#34;&gt;wime&lt;/a&gt; - Wifi password recover tool for Windows, Linux, Mac.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kedos/win32wifi/&#34;&gt;win32wifi&lt;/a&gt; - Python Windows Wifi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/toleda/wireless_half-mini/&#34;&gt;wireless_half-mini&lt;/a&gt; - MacOS Airport Half Mini (WiFi and Bluetooth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rgupta9/WIRELESSINFO/&#34;&gt;WIRELESSINFO&lt;/a&gt; - Extract Important Data From Cisco Wireless Controllers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agnostino/wireless_RSSI/&#34;&gt;wireless_RSSI&lt;/a&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bakerface/wireless-tools/&#34;&gt;Wireless-tools&lt;/a&gt; - Wireless tools for Node.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/substack/wit/&#34;&gt;wit&lt;/a&gt; - Command-line wifi manager for linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/observ3r/wobs/&#34;&gt;wobs&lt;/a&gt; - Detects near-by devices such as cell phones, tablets, and laptops. Does this through 802.11, Bluetooth, cell phone protocols, etc..&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>