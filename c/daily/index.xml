<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-19T01:29:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marcoroth/herb</title>
    <updated>2025-04-19T01:29:15Z</updated>
    <id>tag:github.com,2025-04-19:/marcoroth/herb</id>
    <link href="https://github.com/marcoroth/herb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåø Powerful and seamless HTML-aware ERB parsing and tooling.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;Herb HTML+ERB parser&#34; height=&#34;256px&#34; src=&#34;https://github.com/user-attachments/assets/d0714ee1-ca33-4aa4-aaa9-d632ba79d54a&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Herb&lt;/h2&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;HTML + ERB (HTML Embedded Ruby)&lt;/h4&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; Powerful and seamless HTML-aware ERB parsing and tooling.&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project builds the Herb program and its associated unit tests using a Makefile for automation. The Makefile provides several useful commands for compiling, running tests, and cleaning the project.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libcheck.github.io/check/&#34;&gt;&lt;strong&gt;Check&lt;/strong&gt;&lt;/a&gt;: For unit testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org&#34;&gt;&lt;strong&gt;Clang 19&lt;/strong&gt;&lt;/a&gt;: The compiler used to build this project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;strong&gt;Clang Format 19&lt;/strong&gt;&lt;/a&gt;: For formatting the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/extra/clang-tidy/&#34;&gt;&lt;strong&gt;Clang Tidy 19&lt;/strong&gt;&lt;/a&gt;: For linting the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ruby/prism/releases/tag/v1.4.0&#34;&gt;&lt;strong&gt;Prism Ruby Parser v1.4.0&lt;/strong&gt;&lt;/a&gt;: We use Prism for Parsing the Ruby Source Code in the HTML+ERB files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/a&gt;: We need Ruby as a dependency for &lt;code&gt;bundler&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bundler.io&#34;&gt;&lt;strong&gt;Bundler&lt;/strong&gt;&lt;/a&gt;: We are using &lt;code&gt;bundler&lt;/code&gt; to build &lt;a href=&#34;https://github.com/ruby/prism&#34;&gt;&lt;code&gt;prism&lt;/code&gt;&lt;/a&gt; from source so we can build &lt;code&gt;herb&lt;/code&gt; against it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emscripten.org&#34;&gt;&lt;strong&gt;Emscripten&lt;/strong&gt;&lt;/a&gt;: For the WebAssembly build of &lt;code&gt;libherb&lt;/code&gt; so it can be used in the browser using the &lt;a href=&#34;https://github.com/marcoroth/herb/raw/main/javascript/packages/browser&#34;&gt;&lt;code&gt;@herb-tools/browser&lt;/code&gt;&lt;/a&gt; package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.doxygen.nl&#34;&gt;&lt;strong&gt;Doxygen&lt;/strong&gt;&lt;/a&gt;: For building the C-Reference documentation pages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;For Linux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xargs sudo apt-get install &amp;lt; Aptfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install check clang-19 clang-tidy-19 clang-format-19 emscripten doxygen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;For macOS (using Homebrew)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install check llvm@19 emscripten doxygen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;h4&gt;Clone the Repo&lt;/h4&gt; &#xA;&lt;p&gt;Clone the Git Repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/marcoroth/herb &amp;amp;&amp;amp; cd herb/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build Herb&lt;/h4&gt; &#xA;&lt;p&gt;We can now compile all source files in &lt;code&gt;src/&lt;/code&gt; and generate the &lt;code&gt;herb&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] For any consecutive builds you can just run &lt;code&gt;make&lt;/code&gt;/&lt;code&gt;make all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;herb&lt;/code&gt; executable exposes a few commands for interacting with &lt;code&gt;.html.erb&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ùØ ./herb&#xA;./herb [command] [options]&#xA;&#xA;Herb üåø Powerful and seamless HTML-aware ERB parsing and tooling.&#xA;&#xA;./herb lex [file]      -  Lex a file&#xA;./herb lex_json [file] -  Lex a file and return the result as json.&#xA;./herb parse [file]    -  Parse a file&#xA;./herb ruby [file]     -  Extract Ruby from a file&#xA;./herb html [file]     -  Extract HTML from a file&#xA;./herb prism [file]    -  Extract Ruby from a file and parse the Ruby source with Prism&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the executable shows a pretty-printed output for the respective command and the time it took to execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ùØ ./herb lex examples/simple_erb.html.erb&#xA;&#xA;#&amp;lt;Herb::Token type=&#34;TOKEN_ERB_START&#34; value=&#34;&amp;lt;%&#34; range=[0, 2] start=(1:0) end=(1:2)&amp;gt;&#xA;#&amp;lt;Herb::Token type=&#34;TOKEN_ERB_CONTENT&#34; value=&#34; title &#34; range=[2, 9] start=(1:2) end=(1:9)&amp;gt;&#xA;#&amp;lt;Herb::Token type=&#34;TOKEN_ERB_END&#34; value=&#34;%&amp;gt;&#34; range=[9, 11] start=(1:9) end=(1:11)&amp;gt;&#xA;#&amp;lt;Herb::Token type=&#34;TOKEN_NEWLINE&#34; value=&#34;\n&#34; range=[11, 12] start=(1:0) end=(2:1)&amp;gt;&#xA;#&amp;lt;Herb::Token type=&#34;TOKEN_EOF&#34; value=&#34;&#34; range=[12, 12] start=(2:1) end=(2:1)&amp;gt;&#xA;&#xA;Finished lexing in:&#xA;&#xA;        12 ¬µs&#xA;     0.012 ms&#xA;  0.000012  s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the Ruby extension&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;rake-compiler&lt;/code&gt; to compile the Ruby extension. Running rake will generate the needed templates, run make, build the needed artifacts, and run the Ruby tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;rake&lt;/code&gt; was successful you can use &lt;code&gt;bundle console&lt;/code&gt; to interact with &lt;code&gt;Herb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;irb(main):001&amp;gt; Herb.parse(&#34;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#34;)&#xA;&#xA;# =&amp;gt; #&amp;lt;Herb::ParseResult:0x0000000 ... &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;Builds the test suite from files in &lt;code&gt;test/&lt;/code&gt; and creates the &lt;code&gt;run_herb_tests&lt;/code&gt; executable to run the tests:&lt;/p&gt; &#xA;&lt;h4&gt;For the C Tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test &amp;amp;&amp;amp; ./run_herb_tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For the Ruby Tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clean&lt;/h3&gt; &#xA;&lt;p&gt;Removes the &lt;code&gt;herb&lt;/code&gt;, &lt;code&gt;run_herb_tests&lt;/code&gt;, &lt;code&gt;prism&lt;/code&gt; installation, and all &lt;code&gt;.o&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Integration Testing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;bin/integration&lt;/code&gt; script allows for quick local iteration. On every run it cleans the directory, builds the source from scratch and runs all checks, including the C-Tests, Ruby Tests, Linters, and examples in succession.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The integration was successful if you see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ùØ bin/integration&#xA;&#xA;[...]&#xA;&#xA;Integration successful!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/marcoroth/herb/main/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>