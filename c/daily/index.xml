<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-10T01:33:16Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Bearer/bearer</title>
    <updated>2023-03-10T01:33:16Z</updated>
    <id>tag:github.com,2023-03-10:/Bearer/bearer</id>
    <link href="https://github.com/Bearer/bearer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code security scanning tool (SAST) that discover, filter and prioritize security risks and vulnerabilities leading to sensitive data exposures (PII, PHI, PD).&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./docs/assets/img/bearer-logo-dark.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Bearer&#34; src=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/docs/assets/img/bearer-logo-light.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; Discover, filter, and prioritize security risks and vulnerabilities impacting your code. &#xA; &lt;br&gt;&#xA; &lt;br&gt; Bearer is a static application security testing (SAST) tool that scans your source code and analyzes your data flows to discover, filter and prioritize security risks and vulnerabilities leading to sensitive data exposures (PII, PHI, PD). &#xA; &lt;br&gt;&#xA; &lt;br&gt; Currently supporting &#xA; &lt;strong&gt;JavaScript&lt;/strong&gt; and &#xA; &lt;strong&gt;Ruby&lt;/strong&gt; stacks. &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/#rocket-getting-started&#34;&gt;Getting Started&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/#question-faqs&#34;&gt;FAQ&lt;/a&gt; - &lt;a href=&#34;https://docs.bearer.com&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://github.com/Bearer/bearer/issues/new/choose&#34;&gt;Report a Bug&lt;/a&gt; - &lt;a href=&#34;https://discord.gg/eaHZBJUXRF&#34;&gt;Discord Community&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Bearer/bearer/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Bearer/bearer.svg?logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Bearer/bearer/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/Bearer/bearer/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/eaHZBJUXRF&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1042147477765242973?label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Code security scanner that natively filters and prioritizes security risks using sensitive data flow analysis.&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/380564/221234857-4d449804-fe20-4ca4-8d4d-145b7997c379.mov&#34;&gt;https://user-images.githubusercontent.com/380564/221234857-4d449804-fe20-4ca4-8d4d-145b7997c379.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bearer provides built-in rules against a common set of security risks and vulnerabilities, known as &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34;&gt;OWASP Top 10&lt;/a&gt;. Here are some practical examples of what those rules look for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-filtered user input.&lt;/li&gt; &#xA; &lt;li&gt;Leakage of sensitive data through cookies, internal loggers, third-party logging services, and into analytics environments.&lt;/li&gt; &#xA; &lt;li&gt;Usage of weak encryption libraries or misusage of encryption algorithms.&lt;/li&gt; &#xA; &lt;li&gt;Unencrypted incoming and outgoing communication (HTTP, FTP, SMTP) of sensitive information.&lt;/li&gt; &#xA; &lt;li&gt;Hard-coded secrets and tokens.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many &lt;a href=&#34;https://docs.bearer.com/reference/rules/&#34;&gt;more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bearer is Open Source (&lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/#mortar_board-license&#34;&gt;&lt;em&gt;see license&lt;/em&gt;&lt;/a&gt;) and fully customizable, from creating your own rules to component detection (database, API) and data classification.&lt;/p&gt; &#xA;&lt;p&gt;Bearer also powers our commercial offering, &lt;a href=&#34;https://www.bearer.com&#34;&gt;Bearer Cloud&lt;/a&gt;, allowing security teams to scale and monitor their application security program using the same engine.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Discover your most critical security risks and vulnerabilities in only a few minutes. In this guide, you will install Bearer, run a scan on a local project, and view the results. Let&#39;s get started!&lt;/p&gt; &#xA;&lt;h3&gt;Install Bearer&lt;/h3&gt; &#xA;&lt;p&gt;The quickest way to install Bearer is with the install script. It will auto-select the best build for your architecture. &lt;em&gt;Defaults installation to &lt;code&gt;./bin&lt;/code&gt; and to the latest release version&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sfL https://raw.githubusercontent.com/Bearer/bearer/main/contrib/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other install options&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Homebrew&lt;/summary&gt; &#xA; &lt;p&gt;Using &lt;a href=&#34;https://github.com/Bearer/homebrew-tap&#34;&gt;Bearer&#39;s official Homebrew tap&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install bearer/tap/bearer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Debian/Ubuntu&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo apt-get install apt-transport-https&#xA;$ echo &#34;deb [trusted=yes] https://apt.fury.io/bearer/ /&#34; | sudo tee -a /etc/apt/sources.list.d/fury.list&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install bearer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;RHEL/CentOS&lt;/summary&gt; &#xA; &lt;p&gt;Add repository setting:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo vim /etc/yum.repos.d/fury.repo&#xA;[fury]&#xA;name=Gemfury Private Repo&#xA;baseurl=https://yum.fury.io/bearer/&#xA;enabled=1&#xA;gpgcheck=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then install with yum:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  $ sudo yum -y update&#xA;  $ sudo yum -y install bearer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Docker&lt;/summary&gt; &#xA; &lt;p&gt;Bearer is also available as a Docker image on &lt;a href=&#34;https://hub.docker.com/r/bearer/bearer&#34;&gt;Docker Hub&lt;/a&gt; and &lt;a href=&#34;https://github.com/Bearer/bearer/pkgs/container/bearer&#34;&gt;ghcr.io&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;With docker installed, you can run the following command with the appropriate paths in place of the examples.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v /path/to/repo:/tmp/scan bearer/bearer:latest-amd64 scan /tmp/scan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Additionally, you can use docker compose. Add the following to your &lt;code&gt;docker-compose.yml&lt;/code&gt; file and replace the volumes with the appropriate paths for your project:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  bearer:&#xA;    platform: linux/amd64&#xA;    image: bearer/bearer:latest-amd64&#xA;    volumes:&#xA;      - /path/to/repo:/tmp/scan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then, run the &lt;code&gt;docker compose run&lt;/code&gt; command to run Bearer with any specified flags:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose run bearer scan /tmp/scan --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Binary&lt;/summary&gt; &#xA; &lt;p&gt;Download the archive file for your operating system/architecture from &lt;a href=&#34;https://github.com/Bearer/bearer/releases/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Unpack the archive, and put the binary somewhere in your $PATH (on UNIX-y systems, /usr/local/bin or the like). Make sure it has permission to execute.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Scan your project&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try out Bearer is with our example project, &lt;a href=&#34;https://github.com/Bearer/bear-publishing&#34;&gt;Bear Publishing&lt;/a&gt;. It simulates a realistic Ruby application with common security flaws. Clone or download it to a convenient location to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Bearer/bear-publishing.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, run the scan command with &lt;code&gt;bearer scan&lt;/code&gt; on the project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bearer scan bear-publishing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A progress bar will display the status of the scan.&lt;/p&gt; &#xA;&lt;p&gt;Once the scan is complete, Bearer will output a security report with details of any rule failures, as well as where in the codebase the infractions happened and why.&lt;/p&gt; &#xA;&lt;p&gt;By default the &lt;code&gt;scan&lt;/code&gt; command use the SAST scanner, other &lt;a href=&#34;https://docs.bearer.com/explanations/scanners&#34;&gt;scanner types&lt;/a&gt; are available.&lt;/p&gt; &#xA;&lt;h3&gt;Analyze the report&lt;/h3&gt; &#xA;&lt;p&gt;The security report is an easily digestible view of the security issues detected by Bearer. A report is made up of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The list of &lt;a href=&#34;https://docs.bearer.com/reference/rules/&#34;&gt;rules&lt;/a&gt; run against your code.&lt;/li&gt; &#xA; &lt;li&gt;Each detected failure, containing the file location and lines that triggered the rule failure.&lt;/li&gt; &#xA; &lt;li&gt;A stat section with a summary of rules checks, failures and warnings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/Bearer/bear-publishing&#34;&gt;Bear Publishing&lt;/a&gt; example application will trigger rule failures and output a full report. Here&#39;s a section of the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;...&#xA;CRITICAL: Only communicate using SFTP connections.&#xA;https://docs.bearer.com/reference/rules/ruby_lang_insecure_ftp&#xA;&#xA;File: bear-publishing/app/services/marketing_export.rb:34&#xA;&#xA; 34     Net::FTP.open(&#xA; 35       &#39;marketing.example.com&#39;,&#xA; 36       &#39;marketing&#39;,&#xA; 37       &#39;password123&#39;&#xA;  &#x9;...&#xA; 41     end&#xA;&#xA;&#xA;=====================================&#xA;&#xA;56 checks, 10 failures, 6 warnings&#xA;&#xA;CRITICAL: 7&#xA;HIGH: 0&#xA;MEDIUM: 0&#xA;LOW: 3&#xA;WARNING: 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The security report is just one &lt;a href=&#34;https://docs.bearer.com/explanations/reports&#34;&gt;report type&lt;/a&gt; available in Bearer.&lt;/p&gt; &#xA;&lt;p&gt;Additional options for using and configuring the &lt;code&gt;scan&lt;/code&gt; command can be found in the &lt;a href=&#34;https://docs.bearer.com/reference/commands/#scan&#34;&gt;scan documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For additional guides and usage tips, &lt;a href=&#34;https://docs.bearer.com/&#34;&gt;view the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;❓&lt;/span&gt; FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;How do you detect sensitive data flows from the code?&lt;/h3&gt; &#xA;&lt;p&gt;When you run Bearer on your codebase, it discovers and classifies data by identifying patterns in the source code. Specifically, it looks for data types and matches against them. Most importantly, it never views the actual values (it just can’t)—but only the code itself.&lt;/p&gt; &#xA;&lt;p&gt;Bearer assesses 120+ data types from sensitive data categories such as Personal Data (PD), Sensitive PD, Personally identifiable information (PII), and Personal Health Information (PHI). You can view the full list in the &lt;a href=&#34;https://docs.bearer.com/reference/datatypes/&#34;&gt;supported data types documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In a nutshell, our static code analysis is performed on two levels: Analyzing class names, methods, functions, variables, properties, and attributes. It then ties those together to detected data structures. It does variable reconciliation etc. Analyzing data structure definitions files such as OpenAPI, SQL, GraphQL, and Protobuf.&lt;/p&gt; &#xA;&lt;p&gt;Bearer then passes this over to the classification engine we built to support this very particular discovery process.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more, here is the &lt;a href=&#34;https://docs.bearer.com/explanations/discovery-and-classification/&#34;&gt;longer explanation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;When and where to use Bearer?&lt;/h3&gt; &#xA;&lt;p&gt;We recommend running Bearer in your CI to check new PR automatically for security issues, so your development team has a direct feedback loop to fix issues immediately.&lt;/p&gt; &#xA;&lt;p&gt;You can also integrate Bearer in your CD, though we recommend to only make it fail on high criticality issues only, as the impact for your organization might be important.&lt;/p&gt; &#xA;&lt;p&gt;In addition, running Bearer on a scheduled job is a great way to keep track of your security posture and make sure new security issues are found even in projects with low activity.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Language&lt;/h3&gt; &#xA;&lt;p&gt;Bearer currently supports JavaScript and Ruby and their associated most used frameworks and libraries. More languages will follow.&lt;/p&gt; &#xA;&lt;h3&gt;What makes Bearer different from any other SAST tools?&lt;/h3&gt; &#xA;&lt;p&gt;SAST tools are known to bury security teams and developers under hundreds of issues with little context and no sense of priority, often requiring security analysts to triage issues. Not Bearer.&lt;/p&gt; &#xA;&lt;p&gt;The most vulnerable asset today is sensitive data, so we start there and prioritize application security risks and vulnerabilities by assessing sensitive data flows in your code to highlight what is urgent, and what is not.&lt;/p&gt; &#xA;&lt;p&gt;We believe that by linking security issues with a clear business impact and risk of a data breach, or data leak, we can build better and more robust software, at no extra cost.&lt;/p&gt; &#xA;&lt;p&gt;In addition, by being Open Source, extendable by design, and built with a great developer UX in mind, we bet you will see the difference for yourself.&lt;/p&gt; &#xA;&lt;h3&gt;How long does it take to scan my code? Is it fast?&lt;/h3&gt; &#xA;&lt;p&gt;It depends on the size of your applications. It can take as little as 20 seconds, up to a few minutes for an extremely large code base. We’ve added an internal caching layer that only looks at delta changes to allow quick, subsequent scans.&lt;/p&gt; &#xA;&lt;p&gt;Running Bearer should not take more time than running your test suite.&lt;/p&gt; &#xA;&lt;h3&gt;What about false positives?&lt;/h3&gt; &#xA;&lt;p&gt;If you’re familiar with other SAST tools, false positives are always a possibility.&lt;/p&gt; &#xA;&lt;p&gt;By using the most modern static code analysis techniques and providing a native filtering and prioritizing solution on the most important issues, we believe this problem won’t be a concern when using Bearer.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;✋&lt;/span&gt; Get in touch&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for using Bearer. Still have questions?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start with the &lt;a href=&#34;https://docs.bearer.com&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have a question or need some help? Find the Bearer team on &lt;a href=&#34;https://discord.gg/eaHZBJUXRF&#34;&gt;Discord&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Got a feature request or found a bug? &lt;a href=&#34;https://github.com/Bearer/bearer/issues/new/choose&#34;&gt;Open a new issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Found a security issue? Check out our &lt;a href=&#34;https://github.com/Bearer/bearer/security/policy&#34;&gt;Security Policy&lt;/a&gt; for reporting details.&lt;/li&gt; &#xA; &lt;li&gt;Find out more at&amp;nbsp;&lt;a href=&#34;https://www.bearer.com&#34;&gt;Bearer.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🤝&lt;/span&gt; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Interested in contributing? We&#39;re here for it! For details on how to contribute, setting up your development environment, and our processes, review the &lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🚨&lt;/span&gt; Code of conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting with this project is expected to follow the guidelines of our &lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🛡&lt;/span&gt; Security&lt;/h2&gt; &#xA;&lt;p&gt;To report a vulnerability or suspected vulnerability, &lt;a href=&#34;https://github.com/Bearer/bearer/security/policy&#34;&gt;see our security policy&lt;/a&gt;. For any questions, concerns or other security matters, feel free to &lt;a href=&#34;https://github.com/Bearer/bearer/issues/new/choose&#34;&gt;open an issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.gg/eaHZBJUXRF&#34;&gt;Discord Community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎓&lt;/span&gt; License&lt;/h2&gt; &#xA;&lt;p&gt;Bearer code is licensed under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/Bearer/bearer/main/LICENSE.txt&#34;&gt;Elastic License 2.0&lt;/a&gt; (ELv2), which means you can use it freely inside your organization to protect your applications without any commercial requirements.&lt;/p&gt; &#xA;&lt;p&gt;You are not allowed to provide Bearer to third parties as a hosted or managed service without the explicit approval of Bearer Inc.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Lora-net/LoRaMac-node</title>
    <updated>2023-03-10T01:33:16Z</updated>
    <id>tag:github.com,2023-03-10:/Lora-net/LoRaMac-node</id>
    <link href="https://github.com/Lora-net/LoRaMac-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reference implementation and documentation of a LoRa network node.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LoRaWAN end-device stack implementation and example projects&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ______                              _&#xA; / _____)             _              | |&#xA;( (____  _____ ____ _| |_ _____  ____| |__&#xA; \____ \| ___ |    (_   _) ___ |/ ___)  _ \&#xA; _____) ) ____| | | || |_| ____( (___| | | |&#xA;(______/|_____)_|_|_| \__)_____)\____)_| |_|&#xA;    (C)2013-2022 Semtech&#xA;&#xA; ___ _____ _   ___ _  _____ ___  ___  ___ ___&#xA;/ __|_   _/_\ / __| |/ / __/ _ \| _ \/ __| __|&#xA;\__ \ | |/ _ \ (__| &#39; &amp;lt;| _| (_) |   / (__| _|&#xA;|___/ |_/_/ \_\___|_|\_\_| \___/|_|_\\___|___|&#xA;embedded.connectivity.solutions===============&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The aim of this project is to show an example of an end-device LoRaWAN stack implementation.&lt;/p&gt; &#xA;&lt;p&gt;This project has 2 active branches in place.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;L2 spec&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;RP spec&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag/Milestone&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Class&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/ts001-1-0-4-lorawan-l2-1-0-4-specification&#34;&gt;1.0.4&lt;/a&gt; / &lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/lorawan-specification-v1-1&#34;&gt;1.1.0&lt;/a&gt; + &lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/fopts-encryption-usage-of-fcntdwn-errata-on-the-lorawan-l2-1-1-specification&#34;&gt;FCntDwn ERRATA&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/rp2-1-0-3-lorawan-regional-parameters&#34;&gt;2-1.0.3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Lora-net/LoRaMac-node/releases/tag/v4.7.0&#34;&gt;v4.7.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A/B/C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LoRaWAN L2 1.0.4 - &lt;strong&gt;&lt;em&gt;Released&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Lora-net/LoRaMac-node/tree/master&#34;&gt;master&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/ts001-1-0-4-lorawan-l2-1-0-4-specification&#34;&gt;1.0.4&lt;/a&gt; / &lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/lorawan-specification-v1-1&#34;&gt;1.1.0&lt;/a&gt; + &lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/fopts-encryption-usage-of-fcntdwn-errata-on-the-lorawan-l2-1-1-specification&#34;&gt;FCntDwn ERRATA&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/rp2-1-0-3-lorawan-regional-parameters&#34;&gt;2-1.0.3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Lora-net/LoRaMac-node/milestone/10&#34;&gt;v4.7.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A/B/C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LoRaWAN L2 1.0.4 / 1.1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Lora-net/LoRaMac-node/tree/v5.0.0-branch&#34;&gt;v5.0.0-branch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/ts001-1-0-4-lorawan-l2-1-0-4-specification&#34;&gt;1.0.4&lt;/a&gt; / &lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/lorawan-specification-v1-1&#34;&gt;1.1.0&lt;/a&gt; + &lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/fopts-encryption-usage-of-fcntdwn-errata-on-the-lorawan-l2-1-1-specification&#34;&gt;FCntDwn ERRATA&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://resources.lora-alliance.org/technical-specifications/rp2-1-0-3-lorawan-regional-parameters&#34;&gt;2-1.0.3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Lora-net/LoRaMac-node/milestone/11&#34;&gt;M 5.0.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A/B/C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LoRaWAN L2 1.0.4 / 1.1.0 - Adds support for LR-FHSS modulation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This project fully implements ClassA, ClassB and ClassC end-device classes and it also provides SX1272/73, SX1276/77/78/79, SX1261/2 and LR1110 radio drivers.&lt;/p&gt; &#xA;&lt;p&gt;For each currently supported platform example applications are provided.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRaMac/fuota-test-01&lt;/strong&gt;: FUOTA test scenario 01 end-device example application. (Based on provided application common packages)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRaMac/periodic-uplink-lpp&lt;/strong&gt;: ClassA/B/C end-device example application. Periodically uplinks a frame using the Cayenne LPP protocol. (Based on provided application common packages)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ping-pong&lt;/strong&gt;: Point to point RF link example application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rx-sensi&lt;/strong&gt;: Example application useful to measure the radio sensitivity level using an RF generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tx-cw&lt;/strong&gt;: Example application to show how to generate an RF Continuous Wave transmission.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Each LoRaWAN application example (LoRaMac/*) includes an implementation of the LoRa-Alliance; LoRaWAN certification protocol.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;The LoRaWAN stack API documentation can be found at: &lt;a href=&#34;http://stackforce.github.io/LoRaMac-doc/&#34;&gt;http://stackforce.github.io/LoRaMac-doc/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;This project currently provides support for the below platforms.&lt;br&gt; This project can be ported to other platforms using different MCU than the ones currently supported.&lt;br&gt; The &lt;a href=&#34;https://stackforce.github.io/LoRaMac-doc/LoRaMac-doc-v4.7.0/_p_o_r_t_i_n_g__g_u_i_d_e.html&#34;&gt;Porting Guide&lt;/a&gt; document provides guide lines on how to port the project to other platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;NAMote72&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/NAMote72-platform.md&#34;&gt;NAMote72 platform documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NucleoLxxx - Discovery kit&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/NucleoLxxx-platform.md&#34;&gt;NucleoLxxx and Discovery kit platforms documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SKiM880B, SKiM980A, SKiM881AXL&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/SKiM88xx-platform.md&#34;&gt;SKiM88xx platforms documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SAMR34&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/SAMR34-platform.md&#34;&gt;SAMR34 platform documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Please follow instructions provided by &lt;a href=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/development-environment.md&#34;&gt;Development environment&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h3&gt;Cloning the repository&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository from GitHub&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/lora-net/loramac-node.git loramac-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LoRaMac-node project contains Git submodules that must be initialized&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd loramac-node&#xA;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Secure-element commissioning&lt;/h3&gt; &#xA;&lt;p&gt;This project currently supports 3 different secure-elements &lt;code&gt;soft-se&lt;/code&gt;, &lt;code&gt;lr1110-se&lt;/code&gt; and &lt;code&gt;atecc608a-tnglora-se&lt;/code&gt; implementations.&lt;/p&gt; &#xA;&lt;p&gt;In order to personalize the MCU binary file with LoRaWAN EUIs or/and AES128 keys one must follow the instructions provided by &lt;a href=&#34;####soft-se&#34;&gt;soft-se&lt;/a&gt;, &lt;a href=&#34;####lr1110-se&#34;&gt;lr1110-se&lt;/a&gt; and &lt;a href=&#34;####atecc608a-tnglora-se&#34;&gt;atecc608a-tnglora-se&lt;/a&gt; chapters&lt;/p&gt; &#xA;&lt;h4&gt;soft-se&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;soft-se&lt;/em&gt; is a pure software emulation of a secure-element. It means that everything is located on the host MCU memories. The &lt;code&gt;DevEUI&lt;/code&gt;, &lt;code&gt;JoinEUI&lt;/code&gt; and &lt;code&gt;AES128 keys&lt;/code&gt; may be stored on a non-volatile memory through dedicated APIs.&lt;/p&gt; &#xA;&lt;p&gt;In order to update the end-device identity (&lt;code&gt;DevEUI&lt;/code&gt;, &lt;code&gt;JoinEUI&lt;/code&gt; and &lt;code&gt;AES128 keys&lt;/code&gt;) one must update the &lt;code&gt;se-identity.h&lt;/code&gt; file located under &lt;code&gt;./src/peripherals/soft-se/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In previous versions of this project this was done inside &lt;code&gt;Commissioning.h&lt;/code&gt; files located under each provided example directory.&lt;/p&gt; &#xA;&lt;h4&gt;lr1110-se&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;lr1110-se&lt;/em&gt; abstraction implementation handles all the required exchanges with the LR1110 radio crypto-engine.&lt;/p&gt; &#xA;&lt;p&gt;All LR1110 radio chips are pre-provisioned out of factory in order to be used with &lt;a href=&#34;https://www.loracloud.com/documentation/join_service&#34;&gt;LoRa Cloud Device Join Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case other Join Servers are to be used the &lt;code&gt;DevEUI&lt;/code&gt;, &lt;code&gt;Pin&lt;/code&gt;, &lt;code&gt;JoinEUI&lt;/code&gt; and &lt;code&gt;AES128 keys&lt;/code&gt; can be updated by following the instructions provided on chapter &#34;13. LR1110 Provisioning&#34; of the &lt;a href=&#34;https://semtech.my.salesforce.com/sfc/p/#E0000000JelG/a/2R000000Q2PM/KGm1YHDoHhtaicNYHCIAnh0CbG3yodEuWWJ2WrFRafM&#34;&gt;LR1110 User Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When the compile option &lt;code&gt;SECURE_ELEMENT_PRE_PROVISIONED&lt;/code&gt; is set to &lt;code&gt;ON&lt;/code&gt; the &lt;em&gt;lr1110-se&lt;/em&gt; will use the factory provisioned data (&lt;code&gt;DevEUI&lt;/code&gt;, &lt;code&gt;JoinEUI&lt;/code&gt; and &lt;code&gt;AES128 keys&lt;/code&gt;).&lt;br&gt; When the compile option &lt;code&gt;SECURE_ELEMENT_PRE_PROVISIONED&lt;/code&gt; is set to &lt;code&gt;OFF&lt;/code&gt; the &lt;em&gt;lr1110-se&lt;/em&gt; has to be provisioned by following one of the methods described on chapter &#34;13. LR1110 Provisioning&#34; of the &lt;a href=&#34;https://semtech.my.salesforce.com/sfc/p/#E0000000JelG/a/2R000000Q2PM/KGm1YHDoHhtaicNYHCIAnh0CbG3yodEuWWJ2WrFRafM&#34;&gt;LR1110 User Manual&lt;/a&gt;. The &lt;code&gt;DevEUI&lt;/code&gt;, &lt;code&gt;Pin&lt;/code&gt; and &lt;code&gt;JoinEUI&lt;/code&gt; can be changed by editing the &lt;code&gt;se-identity.h&lt;/code&gt; file located in &lt;code&gt;./src/peripherals/lr1110-se/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;atecc608a-tnglora-se&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;em&gt;atecc608a-tnglora-se&lt;/em&gt; abstraction implementation handles all the required exchanges with the ATECC608A-TNGLORA and ATECC608B-TNGLORA secure-elements.&lt;/p&gt; &#xA;&lt;p&gt;This secure-element is always pre-provisioned and its contents can&#39;t be changed.&lt;/p&gt; &#xA;&lt;h3&gt;Building Process&lt;/h3&gt; &#xA;&lt;h4&gt;Command line&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;periodic-uplink-lpp&lt;/strong&gt; example for NucleoL476 platform with LR1110MB1DIS MBED shield and using LR1110 pre-provisioned secure-element&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake -DCMAKE_BUILD_TYPE=Release \&#xA;        -DTOOLCHAIN_PREFIX=&#34;&amp;lt;replace by toolchain path&amp;gt;&#34; \&#xA;        -DCMAKE_TOOLCHAIN_FILE=&#34;../cmake/toolchain-arm-none-eabi.cmake&#34; \&#xA;        -DAPPLICATION=&#34;LoRaMac&#34; \&#xA;        -DSUB_PROJECT=&#34;periodic-uplink-lpp&#34; \&#xA;        -DCLASSB_ENABLED=&#34;ON&#34; \&#xA;        -DACTIVE_REGION=&#34;LORAMAC_REGION_EU868&#34; \&#xA;        -DREGION_EU868=&#34;ON&#34; \&#xA;        -DREGION_US915=&#34;OFF&#34; \&#xA;        -DREGION_CN779=&#34;OFF&#34; \&#xA;        -DREGION_EU433=&#34;OFF&#34; \&#xA;        -DREGION_AU915=&#34;OFF&#34; \&#xA;        -DREGION_AS923=&#34;OFF&#34; \&#xA;        -DREGION_CN470=&#34;OFF&#34; \&#xA;        -DREGION_KR920=&#34;OFF&#34; \&#xA;        -DREGION_IN865=&#34;OFF&#34; \&#xA;        -DREGION_RU864=&#34;OFF&#34; \&#xA;        -DBOARD=&#34;NucleoL476&#34; \&#xA;        -DMBED_RADIO_SHIELD=&#34;LR1110MB1XXS&#34; \&#xA;        -DSECURE_ELEMENT=&#34;LR1110_SE&#34; \&#xA;        -DSECURE_ELEMENT_PRE_PROVISIONED=&#34;ON&#34; \&#xA;        -DUSE_RADIO_DEBUG=&#34;ON&#34; ..&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ping-pong&lt;/strong&gt; example using LoRa modulation for NucleoL476 platform with LR1110MB1DIS MBED shield&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake -DCMAKE_BUILD_TYPE=Release \&#xA;        -DTOOLCHAIN_PREFIX=&#34;&amp;lt;replace by toolchain path&amp;gt;&#34; \&#xA;        -DCMAKE_TOOLCHAIN_FILE=&#34;../cmake/toolchain-arm-none-eabi.cmake&#34; \&#xA;        -DAPPLICATION=&#34;ping-pong&#34; \&#xA;        -DMODULATION:&#34;LORA&#34; \&#xA;        -DREGION_EU868=&#34;ON&#34; \&#xA;        -DREGION_US915=&#34;OFF&#34; \&#xA;        -DREGION_CN779=&#34;OFF&#34; \&#xA;        -DREGION_EU433=&#34;OFF&#34; \&#xA;        -DREGION_AU915=&#34;OFF&#34; \&#xA;        -DREGION_AS923=&#34;OFF&#34; \&#xA;        -DREGION_CN470=&#34;OFF&#34; \&#xA;        -DREGION_KR920=&#34;OFF&#34; \&#xA;        -DREGION_IN865=&#34;OFF&#34; \&#xA;        -DREGION_RU864=&#34;OFF&#34; \&#xA;        -DBOARD=&#34;NucleoL476&#34; \&#xA;        -DMBED_RADIO_SHIELD=&#34;LR1110MB1XXS&#34; \&#xA;        -DUSE_RADIO_DEBUG=&#34;ON&#34; ..&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VSCode&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;periodic-uplink-lpp&lt;/strong&gt; example for NucleoL476 platform with LR1110MB1DIS MBED shield and using LR1110 pre-provisioned secure-element&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please edit .vscode/settings.json file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// Place your settings in this file to overwrite default and user settings.&#xA;{&#xA;    &#34;cmake.configureSettings&#34;: {&#xA;&#xA;        // In case your GNU ARM-Toolchain is not installed under the default&#xA;        // path:&#xA;        //     Windows : No default path. Specify the path where the&#xA;        //               toolchain is installed. i.e:&#xA;        //               &#34;C:/PROGRA~2/GNUTOO~1/92019-~1&#34;.&#xA;        //     Linux   : /usr&#xA;        //     OSX     : /usr/local&#xA;        // It is required to uncomment and to fill the following line.&#xA;        &#34;TOOLCHAIN_PREFIX&#34;:&#34;/path/to/toolchain&#34;,&#xA;&#xA;        // In case your OpenOCD is not installed under the default path:&#xA;        //     Windows : C:/openocd/bin/openocd.exe&#xA;        //     Linux   : /usr/bin/openocd&#xA;        //     OSX     : /usr/local/bin/openocd&#xA;        // Please uncomment the following line and fill it accordingly.&#xA;        //&#34;OPENOCD_BIN&#34;:&#34;C:/openocd/bin/openocd.exe&#34;,&#xA;&#xA;        // Specifies the path to the CMAKE toolchain file.&#xA;        &#34;CMAKE_TOOLCHAIN_FILE&#34;:&#34;cmake/toolchain-arm-none-eabi.cmake&#34;,&#xA;&#xA;        // Determines the application. You can choose between:&#xA;        // LoRaMac (Default), ping-pong, rx-sensi, tx-cw.&#xA;        &#34;APPLICATION&#34;:&#34;LoRaMac&#34;,&#xA;&#xA;        // Select LoRaMac sub project. You can choose between:&#xA;        // periodic-uplink-lpp, fuota-test-01.&#xA;        &#34;SUB_PROJECT&#34;:&#34;periodic-uplink-lpp&#34;,&#xA;&#xA;        // Switch for Class B support of LoRaMac:&#xA;        &#34;CLASSB_ENABLED&#34;:&#34;ON&#34;,&#xA;&#xA;        // Select the active region for which the stack will be initialized.&#xA;        // You can choose between:&#xA;        // LORAMAC_REGION_EU868, LORAMAC_REGION_US915, ..&#xA;        &#34;ACTIVE_REGION&#34;:&#34;LORAMAC_REGION_EU868&#34;,&#xA;&#xA;        // Select the type of modulation, applicable to the ping-pong or&#xA;        // rx-sensi applications. You can choose between:&#xA;        // LORA or FSK&#xA;        &#34;MODULATION&#34;:&#34;LORA&#34;,&#xA;&#xA;        // Target board, the following boards are supported:&#xA;        // NAMote72, NucleoL073 (Default), NucleoL152, NucleoL476, SAMR34, SKiM880B, SKiM980A, SKiM881AXL, B-L072Z-LRWAN1.&#xA;        &#34;BOARD&#34;:&#34;NucleoL476&#34;,&#xA;&#xA;        // MBED Radio shield selection. (Applies only to Nucleo platforms)&#xA;        // The following shields are supported:&#xA;        // SX1272MB2DAS, SX1276MB1LAS, SX1276MB1MAS, SX1261MBXBAS(Default), SX1262MBXCAS, SX1262MBXDAS, LR1110MB1XXS.&#xA;        &#34;MBED_RADIO_SHIELD&#34;:&#34;LR1110MB1XXS&#34;,&#xA;&#xA;        // Secure element type selection the following are supported&#xA;        // SOFT_SE(Default), LR1110_SE, ATECC608A_TNGLORA_SE&#xA;        &#34;SECURE_ELEMENT&#34;:&#34;LR1110_SE&#34;,&#xA;&#xA;        // Secure element is pre-provisioned&#xA;        &#34;SECURE_ELEMENT_PRE_PROVISIONED&#34;:&#34;ON&#34;,&#xA;&#xA;        // Region support activation, Select the ones you want to support.&#xA;        // By default only REGION_EU868 support is enabled.&#xA;        &#34;REGION_EU868&#34;:&#34;ON&#34;,&#xA;        &#34;REGION_US915&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_CN779&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_EU433&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_AU915&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_AS923&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_CN470&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_KR920&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_IN865&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_RU864&#34;:&#34;OFF&#34;,&#xA;        &#34;USE_RADIO_DEBUG&#34;:&#34;ON&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on &#34;CMake: Debug: Ready&#34; and select build type Debug or Release.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/images/vscode-cmake-configure.png&#34; alt=&#34;cmake configure&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for configuration process to finish&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Build&#34; to build the project.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/images/vscode-cmake-build.png&#34; alt=&#34;cmake build&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for build process to finish&lt;/li&gt; &#xA; &lt;li&gt;Binary files will be available under &lt;code&gt;./build/src/apps/LoRaMac/&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LoRaMac-periodic-uplink-lpp - elf format&lt;/li&gt; &#xA;   &lt;li&gt;LoRaMac-periodic-uplink-lpp.bin - binary format&lt;/li&gt; &#xA;   &lt;li&gt;LoRaMac-periodic-uplink-lpp.hex - hex format&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ping-pong&lt;/strong&gt; example using LoRa modulation for NucleoL476 platform with LR1110MB1DIS MBED shield&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please edit .vscode/settings.json file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// Place your settings in this file to overwrite default and user settings.&#xA;{&#xA;    &#34;cmake.configureSettings&#34;: {&#xA;&#xA;        // In case your GNU ARM-Toolchain is not installed under the default&#xA;        // path:&#xA;        //     Windows : No default path. Specify the path where the&#xA;        //               toolchain is installed. i.e:&#xA;        //               &#34;C:/PROGRA~2/GNUTOO~1/92019-~1&#34;.&#xA;        //     Linux   : /usr&#xA;        //     OSX     : /usr/local&#xA;        // It is required to uncomment and to fill the following line.&#xA;        &#34;TOOLCHAIN_PREFIX&#34;:&#34;/path/to/toolchain&#34;,&#xA;&#xA;        // In case your OpenOCD is not installed under the default path:&#xA;        //     Windows : C:/openocd/bin/openocd.exe&#xA;        //     Linux   : /usr/bin/openocd&#xA;        //     OSX     : /usr/local/bin/openocd&#xA;        // Please uncomment the following line and fill it accordingly.&#xA;        //&#34;OPENOCD_BIN&#34;:&#34;C:/openocd/bin/openocd.exe&#34;,&#xA;&#xA;        // Specifies the path to the CMAKE toolchain file.&#xA;        &#34;CMAKE_TOOLCHAIN_FILE&#34;:&#34;cmake/toolchain-arm-none-eabi.cmake&#34;,&#xA;&#xA;        // Determines the application. You can choose between:&#xA;        // LoRaMac (Default), ping-pong, rx-sensi, tx-cw.&#xA;        &#34;APPLICATION&#34;:&#34;ping-pong&#34;,&#xA;&#xA;        // Select LoRaMac sub project. You can choose between:&#xA;        // periodic-uplink-lpp, fuota-test-01.&#xA;        &#34;SUB_PROJECT&#34;:&#34;periodic-uplink-lpp&#34;,&#xA;&#xA;        // Switch for Class B support of LoRaMac:&#xA;        &#34;CLASSB_ENABLED&#34;:&#34;ON&#34;,&#xA;&#xA;        // Select the active region for which the stack will be initialized.&#xA;        // You can choose between:&#xA;        // LORAMAC_REGION_EU868, LORAMAC_REGION_US915, ..&#xA;        &#34;ACTIVE_REGION&#34;:&#34;LORAMAC_REGION_EU868&#34;,&#xA;&#xA;        // Select the type of modulation, applicable to the ping-pong or&#xA;        // rx-sensi applications. You can choose between:&#xA;        // LORA or FSK&#xA;        &#34;MODULATION&#34;:&#34;LORA&#34;,&#xA;&#xA;        // Target board, the following boards are supported:&#xA;        // NAMote72, NucleoL073 (Default), NucleoL152, NucleoL476, SAMR34, SKiM880B, SKiM980A, SKiM881AXL, B-L072Z-LRWAN1.&#xA;        &#34;BOARD&#34;:&#34;NucleoL476&#34;,&#xA;&#xA;        // MBED Radio shield selection. (Applies only to Nucleo platforms)&#xA;        // The following shields are supported:&#xA;        // SX1272MB2DAS, SX1276MB1LAS, SX1276MB1MAS, SX1261MBXBAS(Default), SX1262MBXCAS, SX1262MBXDAS, LR1110MB1XXS.&#xA;        &#34;MBED_RADIO_SHIELD&#34;:&#34;SX1261MBXBAS&#34;,&#xA;&#xA;        // Secure element type selection the following are supported&#xA;        // SOFT_SE(Default), LR1110_SE, ATECC608A_TNGLORA_SE&#xA;        &#34;SECURE_ELEMENT&#34;:&#34;SOFT_SE&#34;,&#xA;&#xA;        // Secure element is pre-provisioned&#xA;        &#34;SECURE_ELEMENT_PRE_PROVISIONED&#34;:&#34;ON&#34;,&#xA;&#xA;        // Region support activation, Select the ones you want to support.&#xA;        // By default only REGION_EU868 support is enabled.&#xA;        &#34;REGION_EU868&#34;:&#34;ON&#34;,&#xA;        &#34;REGION_US915&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_CN779&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_EU433&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_AU915&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_AS923&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_CN470&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_KR920&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_IN865&#34;:&#34;OFF&#34;,&#xA;        &#34;REGION_RU864&#34;:&#34;OFF&#34;,&#xA;        &#34;USE_RADIO_DEBUG&#34;:&#34;ON&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on &#34;CMake: Debug: Ready&#34; and select build type Debug or Release.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/images/vscode-cmake-configure.png&#34; alt=&#34;cmake configure&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for configuration process to finish&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Build&#34; to build the project.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Lora-net/LoRaMac-node/master/doc/images/vscode-cmake-build.png&#34; alt=&#34;cmake build&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for build process to finish&lt;/li&gt; &#xA; &lt;li&gt;Binary files will be available under &lt;code&gt;./build/src/apps/ping-pong/&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ping-pong - elf format&lt;/li&gt; &#xA;   &lt;li&gt;ping-pong.bin - binary format&lt;/li&gt; &#xA;   &lt;li&gt;ping-pong.hex - hex format&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Serial console NVM management&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;periodic-uplink-lpp&lt;/code&gt; and &lt;code&gt;fuota-test-01&lt;/code&gt; examples allow to reset the NVM storage through the serial interface.&lt;/p&gt; &#xA;&lt;p&gt;In order to reset the NVM contents one must hit &lt;code&gt;ESC&lt;/code&gt; + &lt;code&gt;N&lt;/code&gt; keyboard keys on a serial terminal.&lt;/p&gt; &#xA;&lt;p&gt;The serial terminal will show the following after &lt;code&gt;ESC&lt;/code&gt; + &lt;code&gt;N&lt;/code&gt; keyboard keys are hit. After reseting the end-device the clean NVM will be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ESC + N&#xA;&#xA;&#xA;NVM factory reset succeed&#xA;&#xA;&#xA;PLEASE RESET THE END-DEVICE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The mbed (&lt;a href=&#34;https://mbed.org/&#34;&gt;https://mbed.org/&lt;/a&gt;) project was used at the beginning as source of inspiration.&lt;/li&gt; &#xA; &lt;li&gt;This program uses the AES algorithm implementation (&lt;a href=&#34;http://www.gladman.me.uk/&#34;&gt;http://www.gladman.me.uk/&lt;/a&gt;) by Brian Gladman.&lt;/li&gt; &#xA; &lt;li&gt;This program uses the CMAC algorithm implementation (&lt;a href=&#34;http://www.cse.chalmers.se/research/group/dcs/masters/contikisec/&#34;&gt;http://www.cse.chalmers.se/research/group/dcs/masters/contikisec/&lt;/a&gt;) by Lander Casado, Philippas Tsigas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thethingsindustries.com/&#34;&gt;The Things Industries&lt;/a&gt; for providing Microchip/Atmel SAMR34 platform and ATECC608A-TNGLORA secure-element support.&lt;/li&gt; &#xA; &lt;li&gt;Tencent Blade Team for security breach findings and solving propositions.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>