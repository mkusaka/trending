<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:35:48Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tio/tio</title>
    <updated>2022-07-16T01:35:48Z</updated>
    <id>tag:github.com,2022-07-16:/tio/tio</id>
    <link href="https://github.com/tio/tio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple serial device I/O tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tio - a simple serial device I/O tool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/tio/tio/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/tio/tio/tree/master.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/tio&#34;&gt;&lt;img src=&#34;https://snapcraft.io/tio/badge.svg?sanitize=true&#34; alt=&#34;tio&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/tio/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/tio.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;p&gt;tio is a simple serial device tool which features a straightforward command-line and configuration file interface to easily connect to serial TTY devices for basic I/O operations.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tio/tio/master/images/tio-demo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;1.1 Motivation&lt;/h3&gt; &#xA;&lt;p&gt;To make a simpler serial device tool for talking with serial TTY devices with less focus on classic terminal/modem features and more focus on the needs of embedded developers and hackers.&lt;/p&gt; &#xA;&lt;p&gt;tio was originally created to replace &lt;a href=&#34;https://www.gnu.org/software/screen&#34;&gt;screen&lt;/a&gt; for connecting to serial devices when used in combination with &lt;a href=&#34;https://tmux.github.io&#34;&gt;tmux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2. Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily connect to serial TTY devices&lt;/li&gt; &#xA; &lt;li&gt;Automatic connect&lt;/li&gt; &#xA; &lt;li&gt;Support for arbitrary baud rates&lt;/li&gt; &#xA; &lt;li&gt;List available serial devices by ID&lt;/li&gt; &#xA; &lt;li&gt;Show RX/TX statistics&lt;/li&gt; &#xA; &lt;li&gt;Toggle serial lines&lt;/li&gt; &#xA; &lt;li&gt;Pulse the DTR line&lt;/li&gt; &#xA; &lt;li&gt;Local echo support&lt;/li&gt; &#xA; &lt;li&gt;Map characters (nl, cr-nl, bs, lowercase to uppercase, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Line timestamps&lt;/li&gt; &#xA; &lt;li&gt;Support for delayed output per character&lt;/li&gt; &#xA; &lt;li&gt;Support for delayed output per line&lt;/li&gt; &#xA; &lt;li&gt;Hexadecimal mode&lt;/li&gt; &#xA; &lt;li&gt;Log to file&lt;/li&gt; &#xA; &lt;li&gt;Autogeneration of log filename&lt;/li&gt; &#xA; &lt;li&gt;Configuration file support&lt;/li&gt; &#xA; &lt;li&gt;Activate sub-configurations by name or pattern&lt;/li&gt; &#xA; &lt;li&gt;Redirect I/O to file or network socket for scripting or TTY sharing&lt;/li&gt; &#xA; &lt;li&gt;Pipe input and/or output&lt;/li&gt; &#xA; &lt;li&gt;Bash completion&lt;/li&gt; &#xA; &lt;li&gt;Color support&lt;/li&gt; &#xA; &lt;li&gt;Remapping of prefix key&lt;/li&gt; &#xA; &lt;li&gt;Man page documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. Usage&lt;/h2&gt; &#xA;&lt;p&gt;For more usage details please see the man page documentation &lt;a href=&#34;https://raw.githubusercontent.com/tio/tio/master/man/tio.1.txt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3.1 Command-line&lt;/h3&gt; &#xA;&lt;p&gt;The command-line interface is straightforward as reflected in the output from &#39;tio --help&#39;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Usage: tio [&amp;lt;options&amp;gt;] &amp;lt;tty-device|sub-config&amp;gt;&#xA;&#xA;  Connect to tty device directly or via sub-configuration.&#xA;&#xA;  Options:&#xA;    -b, --baudrate &amp;lt;bps&amp;gt;                   Baud rate (default: 115200)&#xA;    -d, --databits 5|6|7|8                 Data bits (default: 8)&#xA;    -f, --flow hard|soft|none              Flow control (default: none)&#xA;    -s, --stopbits 1|2                     Stop bits (default: 1)&#xA;    -p, --parity odd|even|none|mark|space  Parity (default: none)&#xA;    -o, --output-delay &amp;lt;ms&amp;gt;                Output character delay (default: 0)&#xA;    -O, --output-line-delay &amp;lt;ms&amp;gt;           Output line delay (default: 0)&#xA;        --dtr-pulse-duration &amp;lt;ms&amp;gt;          DTR pulse duration (default: 100)&#xA;    -n, --no-autoconnect                   Disable automatic connect&#xA;    -e, --local-echo                       Enable local echo&#xA;    -t, --timestamp                        Enable line timestamp&#xA;        --timestamp-format &amp;lt;format&amp;gt;        Set timestamp format (default: 24hour)&#xA;    -L, --list-devices                     List available serial devices&#xA;    -l, --log                              Enable log to file&#xA;        --log-file &amp;lt;filename&amp;gt;              Set log filename&#xA;        --log-strip                        Strip control characters and escape sequences&#xA;    -m, --map &amp;lt;flags&amp;gt;                      Map characters&#xA;    -c, --color 0..255|bold|none|list      Colorize tio text (default: bold)&#xA;    -S, --socket &amp;lt;socket&amp;gt;                  Redirect I/O to file or network socket&#xA;    -x, --hexadecimal                      Enable hexadecimal mode&#xA;    -v, --version                          Display version&#xA;    -h, --help                             Display help&#xA;&#xA;  Options and sub-configurations may be set via configuration file.&#xA;&#xA;  See the man page for more details.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default tio automatically connects to the provided TTY device if present. If the device is not present, it will wait for it to appear and then connect. If the connection is lost (eg. device is unplugged), it will wait for the device to reappear and then reconnect. However, if the &lt;code&gt;--no-autoconnect&lt;/code&gt; option is provided, tio will exit if the device is not present or an established connection is lost.&lt;/p&gt; &#xA;&lt;p&gt;tio features full bash autocompletion.&lt;/p&gt; &#xA;&lt;p&gt;Typical use is without options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tio /dev/ttyUSB0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which corresponds to the commonly used default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tio -b 115200 -d 8 -f none -s 1 -p none /dev/ttyUSB0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to connect serial tty devices by ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tio /dev/serial/by-id/usb-FTDI_TTL232R-3V3_FTGQVXBL-if00-port0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using serial devices by ID ensures that tio automatically reconnects to the correct serial device if it is disconnected and then reconnected.&lt;/p&gt; &#xA;&lt;h3&gt;3.2 Key commands&lt;/h3&gt; &#xA;&lt;p&gt;Various in session key commands are supported. When tio is started, press ctrl-t ? to list the available key commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[20:19:12.040] Key commands:&#xA;[20:19:12.040]  ctrl-t ?   List available key commands&#xA;[20:19:12.040]  ctrl-t b   Send break&#xA;[20:19:12.040]  ctrl-t c   Show configuration&#xA;[20:19:12.040]  ctrl-t d   Toggle DTR line&#xA;[20:19:12.040]  ctrl-t D   Pulse DTR line&#xA;[20:19:12.040]  ctrl-t e   Toggle local echo mode&#xA;[20:19:12.040]  ctrl-t h   Toggle hexadecimal mode&#xA;[20:19:12.040]  ctrl-t l   Clear screen&#xA;[20:19:12.040]  ctrl-t L   Show line states&#xA;[20:19:12.040]  ctrl-t q   Quit&#xA;[20:19:12.040]  ctrl-t r   Toggle RTS line&#xA;[20:19:12.041]  ctrl-t s   Show statistics&#xA;[20:19:12.041]  ctrl-t t   Send ctrl-t key code&#xA;[20:19:12.041]  ctrl-t T   Toggle line timestamp mode&#xA;[20:19:12.041]  ctrl-t U   Toggle conversion to uppercase&#xA;[20:19:12.041]  ctrl-t v   Show version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If needed, the prefix key (ctrl-t) can be remapped via configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;3.3 Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Options can be set via the configuration file first found in any of the following locations in the order listed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$XDG_CONFIG_HOME/tio/tiorc&lt;/li&gt; &#xA; &lt;li&gt;$HOME/.config/tio/tiorc&lt;/li&gt; &#xA; &lt;li&gt;$HOME/.tiorc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The configuration file supports sub-configurations using named sections which can be activated via the command-line by name or pattern. A sub-configuration specifies which tty to connect to and other options.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Defaults&#xA;baudrate = 9600&#xA;databits = 8&#xA;parity = none&#xA;stopbits = 1&#xA;color = 10&#xA;dtr-pulse-duration = 50&#xA;&#xA;[rpi3]&#xA;tty = /dev/serial/by-id/usb-FTDI_TTL232R-3V3_FTGQVXBL-if00-port0&#xA;baudrate = 115200&#xA;no-autoconnect = enable&#xA;log = enable&#xA;log-file = rpi3.log&#xA;color = 12&#xA;&#xA;[usb devices]&#xA;pattern = usb([0-9]*)&#xA;tty = /dev/ttyUSB%s&#xA;color = 13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a specific sub-configuration by name simply start tio like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tio rpi3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by pattern match:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tio usb12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Installation&lt;/h2&gt; &#xA;&lt;h3&gt;4.1 Installation using package manager&lt;/h3&gt; &#xA;&lt;p&gt;Packages for various GNU/Linux distributions are available. Please consult your package manager tool to find and install tio.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to see tio included in your favorite distribution, please reach out to their package maintainers team.&lt;/p&gt; &#xA;&lt;h3&gt;4.2 Installation using snap (Linux)&lt;/h3&gt; &#xA;&lt;p&gt;Install latest stable version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ snap install tio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.3 Installation using brew (MacOS, Linux)&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;http://brew.sh&#34;&gt;brew&lt;/a&gt; installed, you can install tio like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ brew install tio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.4 Installation from source&lt;/h3&gt; &#xA;&lt;p&gt;The latest source releases can be found &lt;a href=&#34;https://github.com/tio/tio/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ meson build&#xA;    $ meson compile -C build&#xA;    $ meson install -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See meson_options.txt for tio specific build options.&lt;/p&gt; &#xA;&lt;p&gt;Note: It is recommended to only try to install from source if you are familiar with how to build stuff using meson.&lt;/p&gt; &#xA;&lt;h2&gt;5. Contributing&lt;/h2&gt; &#xA;&lt;p&gt;tio is open source. If you want to help out with the project please feel free to join in.&lt;/p&gt; &#xA;&lt;p&gt;All contributions (bug reports, code, doc, ideas, etc.) are welcome.&lt;/p&gt; &#xA;&lt;p&gt;Please use the github issue tracker and pull request features.&lt;/p&gt; &#xA;&lt;p&gt;Also, if you find this free open source software useful please feel free to consider making a donation of your choice:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.me/lundmar&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tio/tio/master/images/paypal.png&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Support&lt;/h2&gt; &#xA;&lt;p&gt;Submit bug reports via GitHub: &lt;a href=&#34;https://github.com/tio/tio/issues&#34;&gt;https://github.com/tio/tio/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7. Website&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://tio.github.io&#34;&gt;tio.github.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8. License&lt;/h2&gt; &#xA;&lt;p&gt;tio is GPLv2+. See LICENSE file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;9. Authors&lt;/h2&gt; &#xA;&lt;p&gt;Created by Martin Lund &amp;lt;&lt;a href=&#34;mailto:martin.lund@keep-it-simple.com&#34;&gt;martin.lund@keep-it-simple.com&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;See the AUTHORS file for full list of contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>peng-zhihui/Dummy-Robot</title>
    <updated>2022-07-16T01:35:48Z</updated>
    <id>tag:github.com,2022-07-16:/peng-zhihui/Dummy-Robot</id>
    <link href="https://github.com/peng-zhihui/Dummy-Robot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;我的超迷你机械臂机器人项目。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dummy-Robot: Super compact smart robotic-arm&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;我的超迷你机械臂机器人项目。&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;视频介绍：&lt;a href=&#34;https://www.bilibili.com/video/BV12341117rG&#34;&gt;【自制】我造了一台 钢 铁 侠 的 机 械 臂 ！【硬核】&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Video : &lt;a href=&#34;https://www.youtube.com/watch?v=F29vrvUwqS4&#34;&gt;I made a DUMMY ROBOTIC ARM from scratch！ - YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/dummy1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/case.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;资料说明（更新日期22-2-9）&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;已添加3D模型设计源文件。&lt;/li&gt; &#xA; &lt;li&gt;已添加夹爪硬件设计文件和LED灯环PCB&lt;/li&gt; &#xA; &lt;li&gt;已添加无线空间定位控制器PCB文件&lt;/li&gt; &#xA; &lt;li&gt;已添加无线示教器Peak软硬件工程（作为submodule）&lt;/li&gt; &#xA; &lt;li&gt;已添加REF的硬件设计文件&lt;/li&gt; &#xA; &lt;li&gt;已添加DummyStudio上位机&lt;/li&gt; &#xA; &lt;li&gt;已添加Dummy核心控制器的固件源代码（使用说明见后文）&lt;/li&gt; &#xA; &lt;li&gt;已添加42步进电机驱动器硬件工程&lt;/li&gt; &#xA; &lt;li&gt;已添加20步进电机驱动器硬件工程&lt;/li&gt; &#xA; &lt;li&gt;已添加42/20步进电机驱动的固件源代码&lt;/li&gt; &#xA; &lt;li&gt;已添加命令行调试工具reftool（基于odrivetool框架）&lt;/li&gt; &#xA; &lt;li&gt;已添加便携手提箱的模型文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是视频中原版机械臂的完整设计方案，该方案成本和制作难度都比较高，因此想复现的同学建议再等等我后面会发布的&lt;strong&gt;Dummy青春版&lt;/strong&gt;，该版本会有如下改进：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;整机重新设计结构，改用3D打印作为制造方案（原版为铝CNC），大幅降低制造成本&lt;/li&gt; &#xA;  &lt;li&gt;采用我自己设计的小型摆线针轮减速器替代原版的谐波减速器，大幅降低零件成本&lt;/li&gt; &#xA;  &lt;li&gt;所有软件和固件和原版通用，功能也完全一致&lt;/li&gt; &#xA;  &lt;li&gt;添加我自己设计的PC端上位机和手机端APP（争取把用户初始化设置引导加进去）&lt;/li&gt; &#xA;  &lt;li&gt;改进原版电机驱动器的走线方式，原版电源走线采用焊接的形式，不便于安装和拆卸，后面的青春版会使用4p接插件（电源+CAN总线）连接&lt;/li&gt; &#xA;  &lt;li&gt;整机成本争取做到2000以内&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;最重要的，会找人出一个保姆级的视频教程！&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;关于结构设计&lt;/h2&gt; &#xA;&lt;p&gt;我视频中原版设计使用的&lt;code&gt;步进电机&lt;/code&gt;+Harmonic的&lt;code&gt;谐波减速模组&lt;/code&gt;，其中后者成本较高（我买的二手大概是600元一个），因此为了能让大家尽量复现本项目，我后期会添加一个&lt;code&gt;自制摆线针轮减速器&lt;/code&gt;+&lt;code&gt;3D打印&lt;/code&gt;的低成本方案。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目前摆线减速器已经设计好了正在验证，预期会使用PC（或者亚克力）切割结合3D打印制作，精度有所下降但是功能都保持不变，整机硬件成本希望控制在2000元以内。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;设计好的摆线减速器见我的另一个仓库：&lt;a href=&#34;https://github.com/peng-zhihui/CycloidAcuratorNano&#34;&gt;peng-zhihui/CycloidAcuratorNano &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/cycliod-nano.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;关于电路模块&lt;/h2&gt; &#xA;&lt;p&gt;电路为了实现主要的机械臂运动控制功能其实核心就4块板子：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;REF核心板&lt;/li&gt; &#xA; &lt;li&gt;REF底板（也就是机械臂底座里面的控制器电路板）&lt;/li&gt; &#xA; &lt;li&gt;步进电机驱动&lt;/li&gt; &#xA; &lt;li&gt;Peak示教器&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;其中前两者和Peak我都开源了，步进驱动设计的时候参考了： &lt;a href=&#34;https://github.com/unlir/XDrive&#34;&gt;https://github.com/unlir/XDrive&lt;/a&gt; 这个项目，这是我一个朋友开源的闭环驱动，基于STM32。该驱动分为开源版和闭源版，闭源版基于分立MOSFET性能极其强劲且功能很完善，开源版用的ADC+斩波驱动芯片，具备基础功能，不带CAN协议。&lt;/p&gt; &#xA;&lt;p&gt;我重新设计了驱动器的PCB电路（本项目分别用到20、42步进，57的文件只是供大家扩展使用），添加了CAN总线的硬件支持，也对原版核心代码进行了完全重构，&lt;strong&gt;提供编译好的二进制文件可以直接烧录：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/fw2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;主要改进如下：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用C++11重构了代码，引入很多高级语言特性，同时底层部分用C混编，不影响代码性能&lt;/li&gt; &#xA; &lt;li&gt;对硬件依赖完全解耦了，可以方便以后移植到其他平台的MCU，去除了冗余代码代码也结构化逻辑更加清晰&lt;/li&gt; &#xA; &lt;li&gt;添加了CAN协议和UART协议的自定义模板&lt;/li&gt; &#xA; &lt;li&gt;添加了模拟EEPROM的参数储存，可以断电保存数据&lt;/li&gt; &#xA; &lt;li&gt;添加了任意位置设置为零点，且保证双向半圈内归零（而不是单向归零）&lt;/li&gt; &#xA; &lt;li&gt;完全兼容STM32-HAL库，可以使用STM32CubeMX直接生成配置代码&lt;/li&gt; &#xA; &lt;li&gt;其他改进，大家二次开发仅需关注UserApp文件夹下的文件即可&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Ctrl-Step驱动的使用方式比较简单，下载好固件后，第一次上电电机会进行编码器校准，如果成功则下次上电后按下按键1会进入闭环模式，通过CAN或者串口发送指令即可控制电机，关于指令的说明见源代码&lt;code&gt;UserApp&lt;/code&gt;文件夹的&lt;code&gt;interface_can.cpp&lt;/code&gt;和&lt;code&gt;interface_uart.cpp&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/fw3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其他按键的作用：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;同时按住两个按键上电，会自动进行编码器校准，如果首次校准失败可以通过这个方式重新校准&lt;/li&gt; &#xA;  &lt;li&gt;短按按键1在&lt;strong&gt;使能闭环/失能闭环&lt;/strong&gt;间切换&lt;/li&gt; &#xA;  &lt;li&gt;长按按键1板子重启&lt;/li&gt; &#xA;  &lt;li&gt;短按按键2清除堵转保护&lt;/li&gt; &#xA;  &lt;li&gt;长按按键2将目标值归零（比如如果是在位置模式那位置会归零）&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;其他的功能要通过代码或者通信协议设置，比如设置&lt;strong&gt;home零点&lt;/strong&gt;、&lt;strong&gt;PID参数&lt;/strong&gt;、CAN节点ID、&lt;strong&gt;各种运动参数&lt;/strong&gt;等等，可以自己研究代码。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;当然另一种方式是大家也可以自行使用GRBL类的驱动器改装用来驱动本机械臂，这样方案的问题在于，grbl固件耦合性比较强（毕竟不是针对机械臂而是CNC类应用设计的）不便于扩展，另外脉冲形式的控制方式使得走线极其不优雅（每一个关节都要单独拉&lt;code&gt;step/dir&lt;/code&gt;线到控制器，导致最后几个关节走线很长）。&lt;/p&gt; &#xA;&lt;p&gt;而我用一体闭环的方式则可以以串联的形式把所有电机连起来即可，走CAN总线使得整体走线只需要四根线（电源正负两根，CAN信号线两根），此外总线模型使得电机可以工作在&lt;code&gt;力矩&lt;/code&gt;、&lt;code&gt;速度&lt;/code&gt;、&lt;code&gt;位置&lt;/code&gt;、&lt;code&gt;轨迹&lt;/code&gt;模式下，而脉冲模式只能工作在位置和轨迹模式，无法进行复杂控制。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Peak的话我之前已经软硬件都开源了，可以去SubModules文件夹里面看那边的README说明。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;关于核心固件&lt;/h2&gt; &#xA;&lt;p&gt;这个机械臂的固件核心就是运动学姿态解算，&lt;del&gt;这块我还在整理，后面会封装得更完善一些进行开源&lt;/del&gt;，&lt;strong&gt;已开源&lt;/strong&gt;，现在写死的很多参数会设计成可配置的，&lt;strong&gt;方便大家用本项目学习完后迁移到自己设计的机械臂中&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;REF的固件使用说明：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;固件主要包括几大功能模块：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BSP驱动：板载的各种硬件驱动比如OLED、IMU、LED、蜂鸣器、非易失储存等等&lt;/li&gt; &#xA; &lt;li&gt;3rdParty库：包括U8G2的图形库和Fibre的序列化/反序列化库&lt;/li&gt; &#xA; &lt;li&gt;Core：ST官方的HAL库&lt;/li&gt; &#xA; &lt;li&gt;Driver：ARM的CMSIS驱动&lt;/li&gt; &#xA; &lt;li&gt;Midwares：FreeRTOS支持包&lt;/li&gt; &#xA; &lt;li&gt;Robot：核心机器人库，包括各种算法和驱动代码&lt;/li&gt; &#xA; &lt;li&gt;UserApp：上层应用，可以基于我提供的API接口自行开发其他应用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;其中OLED使用Arduino的U8G2库移植而来，可以方便地现实各种调试和系统信息，另外由于STM32的硬件I2C又BUG这里使用了软件I2C驱动屏幕，实测帧率比硬件I2C更高。&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;DummyRobot&lt;/code&gt;类是Dummy的完整定义所在，初始化的时候需要设置好&lt;strong&gt;步进电机驱动的信息&lt;/strong&gt;以及&lt;strong&gt;自身的DH参数&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/fw1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;其中驱动器信息包含：CAN节点ID、&lt;strong&gt;是否反向&lt;/strong&gt;、减速器的减速比、&lt;strong&gt;运动限制范围&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;而DH参数的含义如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/Dummy-Robot/main/5.Docs/1.Images/fw2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;机械臂的构型需要满足Pieper判据（机器人的三个相邻关节轴交于一点或三轴线平行），才能得出解析解，所以大家可以根据Dummy的结构进行修改，然后自己替换DH参数即可以移植我的代码。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;关于位置的记忆，和上电零点校准：&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;由于绝对值编码器的位置只在一圈内有效，工业机械臂经过减速后为了获取绝对位置一般是做输出端编码，但是这样精度就降低了30倍（减速比），所以更合理的是做&lt;code&gt;双编码器&lt;/code&gt;或者低&lt;code&gt;功耗编码器+电池&lt;/code&gt;；而我这个项目中双编码器影响结构紧凑设计，所以用了更巧妙的方式：利用电机驱动的电流环控制上电后进行低力矩的无零点定向运动，碰到机械臂限位之后确认粗零点（无限位开关归零），然后根据单圈绝对值编码器的位置精调零点。这个方式的零点是没有误差的，而且几乎不受加工精度影响，因为在12度（360/30）内都是绝对值编码器的有效精度范围。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Peak的固件说明：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Peak基于X-Track项目，大家可以去Peak仓库查看。&lt;/p&gt; &#xA;&lt;h2&gt;关于上位机&lt;/h2&gt; &#xA;&lt;p&gt;视频中的软件仿真基于RoboDK，我在视频中开发了连接Dummy的Driver（驱动部分官方document有介绍的，原版是基于TCP网络接口，我修改成了串口并兼容dummy的协议）。不过由于这个软件是收费的，因此我也基于Unity3D开发了自己的上位机，已经发布在仓库。&lt;/p&gt; &#xA;&lt;p&gt;上位机目前暂时没有计划开源，因为还有很多功能要添加，我也是希望最后能做成一个类似RoboDK的通用软件，大家以后自己做机械臂也能用上，当然软件肯定会是免费的。&lt;/p&gt; &#xA;&lt;h2&gt;关于控制算法&lt;/h2&gt; &#xA;&lt;p&gt;首先运动学部分是已经实现了的，正逆解都是传统DH参数计算的，正解（关节角求末端位姿）是唯一解比较好办，逆解（末端位姿求关节角）的话会涉及多解（一般是8个），我这里使用的算法是&lt;strong&gt;求解上一姿态和目标姿态中6个关节变化最大角里面最小的那一组作为逆解采用的config&lt;/strong&gt;。这样可以保证机械臂始终以最小转角进行姿态切换。&lt;/p&gt; &#xA;&lt;p&gt;然后关节角到电机驱动器输入信号的转换这一块，我使用的是梯形加减速曲线进行速度位置规划。举个例子在MoveJ指令中，当收到一个关节角运动指令，控制器会进行运动角度差分计算，得到6个运动差分角度，然后取6个差分角中最大的角θ，同时根据设置的JointSpeed参数计算运动θ角需要的时间（考虑上加减速），把这一时间作为其余5个电机的运动参数计算各自的加减速度&amp;amp;最高速度，然后6个电机根据计算的参数同步运动，就可以保证其同步性和流畅性了。&lt;/p&gt; &#xA;&lt;p&gt;另外六个电机使用CAN总线连接，每个电机接受两个ID号的信息（自己的ID、0号ID），0号ID作为信息广播和同步用。电机接收到运动指令后将信息储存在影子寄存器中，待收到广播的同步信号后开始运动，这样能进一步保证电机同步性。&lt;/p&gt; &#xA;&lt;p&gt;最后，动力学部分还在开发中，这块暂时没有完全实现。上&lt;strong&gt;述的运动学和动力学算法都强烈建议去看一下《机器人学导论》这本书&lt;/strong&gt;，里面写得非常详细。&lt;/p&gt; &#xA;&lt;h2&gt;指令模式&lt;/h2&gt; &#xA;&lt;p&gt;Dummy固件支持三种不同的指令模式（指令可以由USB、串口、CAN接收），不同模式的特性有所区别，见下表：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;指令发送频率&lt;/th&gt; &#xA;   &lt;th&gt;指令执行方式&lt;/th&gt; &#xA;   &lt;th&gt;可被新指令打断&lt;/th&gt; &#xA;   &lt;th&gt;指令间停顿&lt;/th&gt; &#xA;   &lt;th&gt;适合场景&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SEQ（顺序指令）&lt;/td&gt; &#xA;   &lt;td&gt;随机，低（&amp;lt;5Hz）&lt;/td&gt; &#xA;   &lt;td&gt;FIFO队列依次执行&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;   &lt;td&gt;有&lt;/td&gt; &#xA;   &lt;td&gt;一次性发送几个关键点位姿，等待依次执行，可以确保关键点到达；但是由于关键点之间存在减速到0的过程所以存在一定停顿；适合场景例如&lt;strong&gt;视觉抓取、码垛等应用&lt;/strong&gt;。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INT（实时指令）&lt;/td&gt; &#xA;   &lt;td&gt;随机，频率不限&lt;/td&gt; &#xA;   &lt;td&gt;指令覆盖，立即执行&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;无&lt;/td&gt; &#xA;   &lt;td&gt;用于实时控制，新指令会覆盖正在执行的指令得到立即响应；但是如果一次性发送一系列指令的话则效果会是只执行最后一条；适合场景例如&lt;strong&gt;动作同步&lt;/strong&gt;。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ToDo&lt;/code&gt;TRJ（轨迹跟踪）&lt;/td&gt; &#xA;   &lt;td&gt;固定，高（200Hz）&lt;/td&gt; &#xA;   &lt;td&gt;自动插值，固定周期执行&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;   &lt;td&gt;无&lt;/td&gt; &#xA;   &lt;td&gt;适合用于需要进行精确轨迹跟踪的应用，速度会放慢；示例场景比如&lt;strong&gt;3D打印、雕刻、绘画等&lt;/strong&gt;。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;感谢以下项目作者：&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/unlir/XDrive&#34;&gt;unlir/XDrive: Stepper motor with multi-function interface and closed loop function. 具有多功能接口和闭环功能的步进电机。 (github.com)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/odriverobotics/ODrive&#34;&gt;odriverobotics/ODrive: High performance motor control (github.com)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/olikraus/u8g2&#34;&gt;olikraus/u8g2: U8glib library for monochrome displays, version 2 (github.com)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/samuelsadok/fibre&#34;&gt;samuelsadok/fibre: Abstraction layer for painlessly building object oriented distributed systems that just work (github.com)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>libgit2/libgit2</title>
    <updated>2022-07-16T01:35:48Z</updated>
    <id>tag:github.com,2022-07-16:/libgit2/libgit2</id>
    <link href="https://github.com/libgit2/libgit2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform, linkable library implementation of Git that you can use in your application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libgit2 - the Git linkable library&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;main&lt;/strong&gt; branch CI builds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libgit2/libgit2/actions?query=workflow%3A%22CI+Build%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/libgit2/libgit2/workflows/CI%20Build/badge.svg?event=push&#34; alt=&#34;CI Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.4 branch&lt;/strong&gt; CI builds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libgit2/libgit2/actions?query=workflow%3A%22CI+Build%22+event%3Apush+branch%3Amaint%2Fv1.4&#34;&gt;&lt;img src=&#34;https://github.com/libgit2/libgit2/workflows/CI%20Build/badge.svg?branch=maint%2Fv1.4&amp;amp;event=push&#34; alt=&#34;CI Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.3 branch&lt;/strong&gt; CI builds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libgit2/libgit2/actions?query=workflow%3A%22CI+Build%22+event%3Apush+branch%3Amaint%2Fv1.3&#34;&gt;&lt;img src=&#34;https://github.com/libgit2/libgit2/workflows/CI%20Build/badge.svg?branch=maint%2Fv1.3&amp;amp;event=push&#34; alt=&#34;CI Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Nightly&lt;/strong&gt; builds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libgit2/libgit2/actions?query=workflow%3A%22Nightly+Build%22&#34;&gt;&lt;img src=&#34;https://github.com/libgit2/libgit2/workflows/Nightly%20Build/badge.svg?sanitize=true&#34; alt=&#34;Nightly Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/639&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/639/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;libgit2&lt;/code&gt; is a portable, pure C implementation of the Git core methods provided as a linkable library with a solid API, allowing to build Git functionality into your application. Language bindings like &lt;a href=&#34;https://github.com/libgit2/rugged&#34;&gt;Rugged&lt;/a&gt; (Ruby), &lt;a href=&#34;https://github.com/libgit2/libgit2sharp&#34;&gt;LibGit2Sharp&lt;/a&gt; (.NET), &lt;a href=&#34;http://www.pygit2.org/&#34;&gt;pygit2&lt;/a&gt; (Python) and &lt;a href=&#34;http://nodegit.org&#34;&gt;NodeGit&lt;/a&gt; (Node) allow you to build Git tooling in your favorite language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libgit2&lt;/code&gt; is used to power Git GUI clients like &lt;a href=&#34;https://gitkraken.com/&#34;&gt;GitKraken&lt;/a&gt; and &lt;a href=&#34;https://gmaster.io/&#34;&gt;gmaster&lt;/a&gt; and on Git hosting providers like &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt; and &lt;a href=&#34;https://azure.com/devops&#34;&gt;Azure DevOps&lt;/a&gt;. We perform the merge every time you click &#34;merge pull request&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libgit2&lt;/code&gt; is licensed under a &lt;strong&gt;very permissive license&lt;/strong&gt; (GPLv2 with a special Linking Exception). This basically means that you can link it (unmodified) with any kind of software without having to release its source code. Additionally, the example code has been released to the public domain (see the &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/examples/COPYING&#34;&gt;separate license&lt;/a&gt; for more information).&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#using-libgit2&#34;&gt;Using libgit2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#what-it-can-do&#34;&gt;What It Can Do&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#optional-dependencies&#34;&gt;Optional dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#threading&#34;&gt;Threading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#conventions&#34;&gt;Conventions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#building-libgit2---using-cmake&#34;&gt;Building libgit2 - Using CMake&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#compiler-and-linker-options&#34;&gt;Compiler and linker options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#macos-x&#34;&gt;MacOS X&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#mingw&#34;&gt;MinGW&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#language-bindings&#34;&gt;Language Bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#how-can-i-contribute&#34;&gt;How Can I Contribute?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Using libgit2&lt;/h1&gt; &#xA;&lt;p&gt;Most of these instructions assume that you&#39;re writing an application in C and want to use libgit2 directly. If you&#39;re &lt;em&gt;not&lt;/em&gt; using C, and you&#39;re writing in a different language or platform like .NET, Node.js, or Ruby, then there is probably a &#34;&lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/#language-bindings&#34;&gt;language binding&lt;/a&gt;&#34; that you can use to take care of the messy tasks of calling into native code.&lt;/p&gt; &#xA;&lt;p&gt;But if you &lt;em&gt;do&lt;/em&gt; want to use libgit2 directly - because you&#39;re building an application in C - then you may be able use an existing binary. There are packages for the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; and &lt;a href=&#34;https://conan.io/center/libgit2&#34;&gt;conan&lt;/a&gt; package managers. And libgit2 is available in &lt;a href=&#34;https://formulae.brew.sh/formula/libgit2&#34;&gt;Homebrew&lt;/a&gt; and most Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;However, these versions &lt;em&gt;may&lt;/em&gt; be outdated and we recommend using the latest version if possible. Thankfully libgit2 is not hard to compile.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt; for building libgit2:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;, and is recommended to be installed into your &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt; is used by our test framework, and should be installed into your &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;C compiler: libgit2 is C90 and should compile on most compilers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: Visual Studio is recommended&lt;/li&gt; &#xA;   &lt;li&gt;Mac: Xcode is recommended&lt;/li&gt; &#xA;   &lt;li&gt;Unix: gcc or clang is recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a build directory beneath the libgit2 source directory, and change into it: &lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create the cmake build environment: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build libgit2: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Trouble with these steps? Read our &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/docs/troubleshooting.md&#34;&gt;troubleshooting guide&lt;/a&gt;. More detailed build guidance is available below.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Help&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chat with us&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via IRC: join &lt;a href=&#34;https://web.libera.chat/#libgit2&#34;&gt;#libgit2&lt;/a&gt; on &lt;a href=&#34;https://libera.chat&#34;&gt;libera&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;via Slack: visit &lt;a href=&#34;http://slack.libgit2.org/&#34;&gt;slack.libgit2.org&lt;/a&gt; to sign up, then join us in &lt;code&gt;#libgit2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Getting Help&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about the library, please be sure to check out the &lt;a href=&#34;http://libgit2.github.com/libgit2/&#34;&gt;API documentation&lt;/a&gt;. If you still have questions, reach out to us on Slack or post a question on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/libgit2&#34;&gt;StackOverflow&lt;/a&gt; (with the &lt;code&gt;libgit2&lt;/code&gt; tag).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reporting Bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please open a &lt;a href=&#34;https://github.com/libgit2/libgit2/issues&#34;&gt;GitHub Issue&lt;/a&gt; and include as much information as possible. If possible, provide sample code that illustrates the problem you&#39;re seeing. If you&#39;re seeing a bug only on a specific repository, please provide a link to it if possible.&lt;/p&gt; &#xA;&lt;p&gt;We ask that you not open a GitHub Issue for help, only for bug reports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reporting Security Issues&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please have a look at SECURITY.md.&lt;/p&gt; &#xA;&lt;h1&gt;What It Can Do&lt;/h1&gt; &#xA;&lt;p&gt;libgit2 provides you with the ability to manage Git repositories in the programming language of your choice. It&#39;s used in production to power many applications including GitHub.com, Plastic SCM and Azure DevOps.&lt;/p&gt; &#xA;&lt;p&gt;It does not aim to replace the git tool or its user-facing commands. Some APIs resemble the plumbing commands as those align closely with the concepts of the Git system, but most commands a user would type are out of scope for this library to implement directly.&lt;/p&gt; &#xA;&lt;p&gt;The library provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SHA conversions, formatting and shortening&lt;/li&gt; &#xA; &lt;li&gt;abstracted ODB backend system&lt;/li&gt; &#xA; &lt;li&gt;commit, tag, tree and blob parsing, editing, and write-back&lt;/li&gt; &#xA; &lt;li&gt;tree traversal&lt;/li&gt; &#xA; &lt;li&gt;revision walking&lt;/li&gt; &#xA; &lt;li&gt;index file (staging area) manipulation&lt;/li&gt; &#xA; &lt;li&gt;reference management (including packed references)&lt;/li&gt; &#xA; &lt;li&gt;config file management&lt;/li&gt; &#xA; &lt;li&gt;high level repository management&lt;/li&gt; &#xA; &lt;li&gt;thread safety and reentrancy&lt;/li&gt; &#xA; &lt;li&gt;descriptive and detailed error messages&lt;/li&gt; &#xA; &lt;li&gt;...and more (over 175 different API calls)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As libgit2 is purely a consumer of the Git system, we have to adjust to changes made upstream. This has two major consequences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some changes may require us to change provided interfaces. While we try to implement functions in a generic way so that no future changes are required, we cannot promise a completely stable API.&lt;/li&gt; &#xA; &lt;li&gt;As we have to keep up with changes in behavior made upstream, we may lag behind in some areas. We usually to document these incompatibilities in our issue tracker with the label &#34;git change&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Optional dependencies&lt;/h1&gt; &#xA;&lt;p&gt;While the library provides git functionality without the need for dependencies, it can make use of a few libraries to add to it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pthreads (non-Windows) to enable threadsafe access as well as multi-threaded pack generation&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL (non-Windows) to talk over HTTPS and provide the SHA-1 functions&lt;/li&gt; &#xA; &lt;li&gt;LibSSH2 to enable the SSH transport&lt;/li&gt; &#xA; &lt;li&gt;iconv (OSX) to handle the HFS+ path encoding peculiarities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Initialization&lt;/h1&gt; &#xA;&lt;p&gt;The library needs to keep track of some global state. Call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git_libgit2_init();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;before calling any other libgit2 functions. You can call this function many times. A matching number of calls to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git_libgit2_shutdown();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will free the resources. Note that if you have worker threads, you should call &lt;code&gt;git_libgit2_shutdown&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; those threads have exited. If you require assistance coordinating this, simply have the worker threads call &lt;code&gt;git_libgit2_init&lt;/code&gt; at startup and &lt;code&gt;git_libgit2_shutdown&lt;/code&gt; at shutdown.&lt;/p&gt; &#xA;&lt;h1&gt;Threading&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/docs/threading.md&#34;&gt;threading&lt;/a&gt; for information&lt;/p&gt; &#xA;&lt;h1&gt;Conventions&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/docs/conventions.md&#34;&gt;conventions&lt;/a&gt; for an overview of the external and internal API/coding conventions we use.&lt;/p&gt; &#xA;&lt;h1&gt;Building libgit2 - Using CMake&lt;/h1&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;libgit2&lt;/code&gt; builds cleanly on most platforms without any external dependencies. Under Unix-like systems, like Linux, *BSD and Mac OS X, libgit2 expects &lt;code&gt;pthreads&lt;/code&gt; to be available; they should be installed by default on all systems. Under Windows, libgit2 uses the native Windows API for threading.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;libgit2&lt;/code&gt; library is built using &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; (version 2.8 or newer) on all platforms.&lt;/p&gt; &#xA;&lt;p&gt;On most systems you can build the library using the following commands&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake ..&#xA;$ cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can point the CMake GUI tool to the CMakeLists.txt file and generate platform specific build project or IDE workspace.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not familiar with CMake, &lt;a href=&#34;https://preshing.com/20170511/how-to-build-a-cmake-based-project/&#34;&gt;a more detailed explanation&lt;/a&gt; may be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;Once built, you can run the tests from the &lt;code&gt;build&lt;/code&gt; directory with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ctest -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can run the test suite directly using,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./libgit2_tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoking the test suite directly is useful because it allows you to execute individual tests, or groups of tests using the &lt;code&gt;-s&lt;/code&gt; flag. For example, to run the index tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./libgit2_tests -sindex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a single test named &lt;code&gt;index::racy::diff&lt;/code&gt;, which corresponds to the test function &lt;a href=&#34;https://github.com/libgit2/libgit2/raw/main/tests/index/racy.c#L23&#34;&gt;&lt;code&gt;test_index_racy__diff&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./libgit2_tests -sindex::racy::diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suite will print a &lt;code&gt;.&lt;/code&gt; for every passing test, and an &lt;code&gt;F&lt;/code&gt; for any failing test. An &lt;code&gt;S&lt;/code&gt; indicates that a test was skipped because it is not applicable to your platform or is particularly expensive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There should be &lt;em&gt;no&lt;/em&gt; failing tests when you build an unmodified source tree from a &lt;a href=&#34;https://github.com/libgit2/libgit2/releases&#34;&gt;release&lt;/a&gt;, or from the &lt;a href=&#34;https://github.com/libgit2/libgit2/tree/main&#34;&gt;main branch&lt;/a&gt;. Please contact us or &lt;a href=&#34;https://github.com/libgit2/libgit2/issues&#34;&gt;open an issue&lt;/a&gt; if you see test failures.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the library you can specify the install prefix by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake .. -DCMAKE_INSTALL_PREFIX=/install/prefix&#xA;$ cmake --build . --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;For more advanced use or questions about CMake please read &lt;a href=&#34;https://cmake.org/Wiki/CMake_FAQ&#34;&gt;https://cmake.org/Wiki/CMake_FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following CMake variables are declared:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CMAKE_INSTALL_BINDIR&lt;/code&gt;: Where to install binaries to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CMAKE_INSTALL_LIBDIR&lt;/code&gt;: Where to install libraries to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CMAKE_INSTALL_INCLUDEDIR&lt;/code&gt;: Where to install headers to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt;: Build libgit2 as a Shared Library (defaults to ON)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUILD_TESTS&lt;/code&gt;: Build the unit and integration test suites (defaults to ON)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;USE_THREADS&lt;/code&gt;: Build libgit2 with threading support (defaults to ON)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To list all build options and their current value, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Create and set up a build directory&#xA;$ mkdir build&#xA;$ cmake ..&#xA;# List all build options and their values&#xA;$ cmake -L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiler and linker options&lt;/h2&gt; &#xA;&lt;p&gt;CMake lets you specify a few variables to control the behavior of the compiler and linker. These flags are rarely used but can be useful for 64-bit to 32-bit cross-compilation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CMAKE_C_FLAGS&lt;/code&gt;: Set your own compiler flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CMAKE_FIND_ROOT_PATH&lt;/code&gt;: Override the search path for libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZLIB_LIBRARY&lt;/code&gt;, &lt;code&gt;OPENSSL_SSL_LIBRARY&lt;/code&gt; AND &lt;code&gt;OPENSSL_CRYPTO_LIBRARY&lt;/code&gt;: Tell CMake where to find those specific libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LINK_WITH_STATIC_LIBRARIES&lt;/code&gt;: Link only with static versions of system libraries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MacOS X&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build a universal binary for Mac OS X, CMake sets it all up for you if you use &lt;code&gt;-DCMAKE_OSX_ARCHITECTURES=&#34;i386;x86_64&#34;&lt;/code&gt; when configuring.&lt;/p&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;Extract toolchain from NDK using, &lt;code&gt;make-standalone-toolchain.sh&lt;/code&gt; script. Optionally, crosscompile and install OpenSSL inside of it. Then create CMake toolchain file that configures paths to your crosscompiler (substitute &lt;code&gt;{PATH}&lt;/code&gt; with full path to the toolchain):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SET(CMAKE_SYSTEM_NAME Linux)&#xA;SET(CMAKE_SYSTEM_VERSION Android)&#xA;&#xA;SET(CMAKE_C_COMPILER   {PATH}/bin/arm-linux-androideabi-gcc)&#xA;SET(CMAKE_CXX_COMPILER {PATH}/bin/arm-linux-androideabi-g++)&#xA;SET(CMAKE_FIND_ROOT_PATH {PATH}/sysroot/)&#xA;&#xA;SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)&#xA;SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)&#xA;SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE={pathToToolchainFile}&lt;/code&gt; to cmake command when configuring.&lt;/p&gt; &#xA;&lt;h2&gt;MinGW&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build the library in MinGW environment with SSH support enabled, you may need to pass &lt;code&gt;-DCMAKE_LIBRARY_PATH=&#34;${MINGW_PREFIX}/${MINGW_CHOST}/lib/&#34;&lt;/code&gt; flag to CMake when configuring. This is because CMake cannot find the Win32 libraries in MinGW folders by default and you might see an error message stating that CMake could not resolve &lt;code&gt;ws2_32&lt;/code&gt; library during configuration.&lt;/p&gt; &#xA;&lt;p&gt;Another option would be to install &lt;code&gt;msys2-w32api-runtime&lt;/code&gt; package before configuring. This package installs the Win32 libraries into &lt;code&gt;/usr/lib&lt;/code&gt; folder which is by default recognized as the library path by CMake. Please note though that this package is meant for MSYS subsystem which is different from MinGW.&lt;/p&gt; &#xA;&lt;h1&gt;Language Bindings&lt;/h1&gt; &#xA;&lt;p&gt;Here are the bindings to libgit2 that are currently available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libqgit2, Qt bindings &lt;a href=&#34;https://projects.kde.org/projects/playground/libs/libqgit2/repository/&#34;&gt;https://projects.kde.org/projects/playground/libs/libqgit2/repository/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Chicken Scheme &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;chicken-git &lt;a href=&#34;https://wiki.call-cc.org/egg/git&#34;&gt;https://wiki.call-cc.org/egg/git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;D &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dlibgit &lt;a href=&#34;https://github.com/s-ludwig/dlibgit&#34;&gt;https://github.com/s-ludwig/dlibgit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delphi &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitForDelphi &lt;a href=&#34;https://github.com/libgit2/GitForDelphi&#34;&gt;https://github.com/libgit2/GitForDelphi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;libgit2-delphi &lt;a href=&#34;https://github.com/todaysoftware/libgit2-delphi&#34;&gt;https://github.com/todaysoftware/libgit2-delphi&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Erlang &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Geef &lt;a href=&#34;https://github.com/carlosmn/geef&#34;&gt;https://github.com/carlosmn/geef&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git2go &lt;a href=&#34;https://github.com/libgit2/git2go&#34;&gt;https://github.com/libgit2/git2go&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GObject &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libgit2-glib &lt;a href=&#34;https://wiki.gnome.org/Projects/Libgit2-glib&#34;&gt;https://wiki.gnome.org/Projects/Libgit2-glib&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Guile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Guile-Git &lt;a href=&#34;https://gitlab.com/guile-git/guile-git&#34;&gt;https://gitlab.com/guile-git/guile-git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;hgit2 &lt;a href=&#34;https://github.com/jwiegley/gitlib&#34;&gt;https://github.com/jwiegley/gitlib&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Jagged &lt;a href=&#34;https://github.com/ethomson/jagged&#34;&gt;https://github.com/ethomson/jagged&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Git24j &lt;a href=&#34;https://github.com/git24j/git24j&#34;&gt;https://github.com/git24j/git24j&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Javascript / WebAssembly ( browser and nodejs ) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WASM-git &lt;a href=&#34;https://github.com/petersalomonsen/wasm-git&#34;&gt;https://github.com/petersalomonsen/wasm-git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Julia &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LibGit2.jl &lt;a href=&#34;https://github.com/JuliaLang/julia/tree/master/stdlib/LibGit2&#34;&gt;https://github.com/JuliaLang/julia/tree/master/stdlib/LibGit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lua &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;luagit2 &lt;a href=&#34;https://github.com/libgit2/luagit2&#34;&gt;https://github.com/libgit2/luagit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;.NET &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libgit2sharp &lt;a href=&#34;https://github.com/libgit2/libgit2sharp&#34;&gt;https://github.com/libgit2/libgit2sharp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Node.js &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nodegit &lt;a href=&#34;https://github.com/nodegit/nodegit&#34;&gt;https://github.com/nodegit/nodegit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Objective-C &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;objective-git &lt;a href=&#34;https://github.com/libgit2/objective-git&#34;&gt;https://github.com/libgit2/objective-git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OCaml &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ocaml-libgit2 &lt;a href=&#34;https://github.com/fxfactorial/ocaml-libgit2&#34;&gt;https://github.com/fxfactorial/ocaml-libgit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Parrot Virtual Machine &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;parrot-libgit2 &lt;a href=&#34;https://github.com/letolabs/parrot-libgit2&#34;&gt;https://github.com/letolabs/parrot-libgit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Perl &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Git-Raw &lt;a href=&#34;https://github.com/jacquesg/p5-Git-Raw&#34;&gt;https://github.com/jacquesg/p5-Git-Raw&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pharo Smalltalk &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libgit2-pharo-bindings &lt;a href=&#34;https://github.com/pharo-vcs/libgit2-pharo-bindings&#34;&gt;https://github.com/pharo-vcs/libgit2-pharo-bindings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PHP &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;php-git &lt;a href=&#34;https://github.com/libgit2/php-git&#34;&gt;https://github.com/libgit2/php-git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;pygit2 &lt;a href=&#34;https://github.com/libgit2/pygit2&#34;&gt;https://github.com/libgit2/pygit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;R &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gert &lt;a href=&#34;https://docs.ropensci.org/gert&#34;&gt;https://docs.ropensci.org/gert&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;git2r &lt;a href=&#34;https://github.com/ropensci/git2r&#34;&gt;https://github.com/ropensci/git2r&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ruby &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rugged &lt;a href=&#34;https://github.com/libgit2/rugged&#34;&gt;https://github.com/libgit2/rugged&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Rust &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git2-rs &lt;a href=&#34;https://github.com/rust-lang/git2-rs&#34;&gt;https://github.com/rust-lang/git2-rs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Swift &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SwiftGit2 &lt;a href=&#34;https://github.com/SwiftGit2/SwiftGit2&#34;&gt;https://github.com/SwiftGit2/SwiftGit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tcl &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;lg2 &lt;a href=&#34;https://github.com/apnadkarni/tcl-libgit2&#34;&gt;https://github.com/apnadkarni/tcl-libgit2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vala &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libgit2.vapi &lt;a href=&#34;https://github.com/apmasell/vapis/raw/master/libgit2.vapi&#34;&gt;https://github.com/apmasell/vapis/blob/master/libgit2.vapi&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you start another language binding to libgit2, please let us know so we can add it to the list.&lt;/p&gt; &#xA;&lt;h1&gt;How Can I Contribute?&lt;/h1&gt; &#xA;&lt;p&gt;We welcome new contributors! We have a number of issues marked as &lt;a href=&#34;https://github.com/libgit2/libgit2/issues?q=is%3Aissue+is%3Aopen+label%3A%22up+for+grabs%22&#34;&gt;&#34;up for grabs&#34;&lt;/a&gt; and &lt;a href=&#34;https://github.com/libgit2/libgit2/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3A%22easy+fix%22&#34;&gt;&#34;easy fix&#34;&lt;/a&gt; that are good places to jump in and get started. There&#39;s much more detailed information in our list of &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/docs/projects.md&#34;&gt;outstanding projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please be sure to check the &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/docs/contributing.md&#34;&gt;contribution guidelines&lt;/a&gt; to understand our workflow, and the libgit2 &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/docs/conventions.md&#34;&gt;coding conventions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;libgit2&lt;/code&gt; is under GPL2 &lt;strong&gt;with linking exception&lt;/strong&gt;. This means you can link to and use the library from any program, proprietary or open source; paid or gratis. However, if you modify libgit2 itself, you must distribute the source to your modified version of libgit2.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/libgit2/libgit2/main/COPYING&#34;&gt;COPYING file&lt;/a&gt; for the full license text.&lt;/p&gt;</summary>
  </entry>
</feed>