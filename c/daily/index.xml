<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-28T01:25:42Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OneOfEleven/uv-k5-firmware-custom</title>
    <updated>2023-09-28T01:25:42Z</updated>
    <id>tag:github.com,2023-09-28:/OneOfEleven/uv-k5-firmware-custom</id>
    <link href="https://github.com/OneOfEleven/uv-k5-firmware-custom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A customized version of https://github.com/DualTachyon/uv-k5-firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open reimplementation of the Quan Sheng UV-K5 v2.1.27 firmware&lt;/h1&gt; &#xA;&lt;p&gt;This repository is a cloned and customized version of DualTachyon&#39;s open firmware found here ..&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DualTachyon/uv-k5-firmware&#34;&gt;https://github.com/DualTachyon/uv-k5-firmware&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A cool achievement&lt;/p&gt; &#xA;&lt;h1&gt;Radio performance&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the Quansheng uv-k radios are not professional quality transceivers, their performance is strictly limited, somewhat below that of a decent transceiver. The RX front end has no track-tuned band pass filtering at all, and so are wide band/wide open to any and all signals over a wide frequency range. Using the radio in high intensity RF environments will nearly always destroy your reception, the receiver simply doesn&#39;t have a great dynamic range, though are quite sensitive (weak signal wise).&lt;/p&gt; &#xA;&lt;p&gt;Saying that, they are nice toys for the price, fun to play with.&lt;/p&gt; &#xA;&lt;h1&gt;User customization&lt;/h1&gt; &#xA;&lt;p&gt;You can customize the firmware by enabling/disabling various compile options. You&#39;ll find the options at the top of &#34;Makefile&#34; (&#39;0&#39; = disable, &#39;1&#39; = enable) ..&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ENABLE_SWD                    := 0       only needed if using CPU&#39;s SWD port (debugging/programming)&#xA;ENABLE_OVERLAY                := 1       cpu FLASH stuff&#xA;ENABLE_UART                   := 1       without this you can&#39;t configure radio via PC&#xA;ENABLE_AIRCOPY                := 0       easier to just enter frequency&#xA;ENABLE_FMRADIO                := 1       WBFM VHF band 2 RX&#xA;ENABLE_NOAA                   := 0       everything NOAA&#xA;ENABLE_VOICE                  := 0       want to hear voices ?&#xA;ENABLE_ALARM                  := 0       TX alarms&#xA;ENABLE_BIG_FREQ               := 0       big font frequencies&#xA;ENABLE_SMALL_BOLD             := 1       bold channel name/no. (when name + freq channel display mode)&#xA;ENABLE_KEEP_MEM_NAME          := 1       maintain channel name when (re)saving memory channel&#xA;ENABLE_WIDE_RX                := 1       full 18MHz to 1300MHz RX (though frontend not tuned over full range)&#xA;ENABLE_TX_WHEN_AM             := 0       allow TX (always FM) when RX is set to AM&#xA;ENABLE_CTCSS_TAIL_PHASE_SHIFT := 1       standard CTCSS tail phase shift rather than QS&#39;s own 55Hz tone method&#xA;ENABLE_MAIN_KEY_HOLD          := 1       initial F-key press not needed, instead hold down keys 0-9 to access the functions&#xA;ENABLE_BOOT_BEEPS             := 0       give user audio feedback on volume knob position at boot-up&#xA;ENABLE_COMPANDER              := 1       compander option (per channel)&#xA;ENABLE_SHOW_CHARGE_LEVEL      := 0       show the charge level when the radio is on charge&#xA;ENABLE_REVERSE_BAT_SYMBOL     := 1       mirror the battery symbol on the status bar (+ pole on the right)&#xA;ENABLE_NO_SCAN_TIMEOUT        := 1       remove the 32 sec timeout from the CTCSS/DCS scan (press exit butt to end scan)&#xA;ENABLE_AM_FIX                 := 1       dynamically adjust the front end gains when in AM mode to helo prevent AM demodulator saturation - ignore the on-screen RSSI (for now)&#xA;ENABLE_AM_FIX_SHOW_DATA       := 1       show debug data for the AM fix&#xA;ENABLE_SQUELCH1_LOWER         := 0       adjusts squelch setting &#39;1&#39; to be more sensitive - I plan to let user adjust it in the menu&#xA;ENABLE_AUDIO_BAR              := 0       experimental, display an audo bar level when TX&#39;ing&#xA;#ENABLE_COPY_CHAN_TO_VFO      := 1       not yet implemented - copy the channel into the VFO&#xA;#ENABLE_SINGLE_VFO_CHAN       := 1       not yet implemented - single VFO on display when possible&#xA;#ENABLE_BAND_SCOPE            := 1       not yet implemented - spectrum/pan-adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Some changes made from the Quansheng firmware&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Various Quansheng firmware bugs fixed&lt;/li&gt; &#xA; &lt;li&gt;Added new bugs&lt;/li&gt; &#xA; &lt;li&gt;Mic menu includes max gain possible&lt;/li&gt; &#xA; &lt;li&gt;AM RX everywhere (left the TX as is)&lt;/li&gt; &#xA; &lt;li&gt;An attempt to improve the AM RX audio (demodulator getting saturated/overloaded in Quansheng firmware)&lt;/li&gt; &#xA; &lt;li&gt;keypad-5/NOAA button now toggles scanlist-1 on/off for current channel when held down - IF NOAA not used&lt;/li&gt; &#xA; &lt;li&gt;Better backlight times (inc always on)&lt;/li&gt; &#xA; &lt;li&gt;Live DTMF decoder option, though the decoder needs some coeff tuning changes to decode other radios it seems&lt;/li&gt; &#xA; &lt;li&gt;Various menu re-wordings (trying to reduce &#39;WTH does that mean ?&#39;)&lt;/li&gt; &#xA; &lt;li&gt;..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compiler&lt;/h1&gt; &#xA;&lt;p&gt;arm-none-eabi GCC version 10.3.1 is recommended, which is the current version on Ubuntu 22.04.03 LTS. Other versions may generate a flash file that is too big. You can get an appropriate version from: &lt;a href=&#34;https://developer.arm.com/downloads/-/gnu-rm&#34;&gt;https://developer.arm.com/downloads/-/gnu-rm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;To build the firmware, you need to fetch the submodules and then run make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive --depth=1&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile directly in windows without the need of a linux virtual machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Download and install &#34;gcc-arm-none-eabi-10.3-2021.10-win32.exe&#34; from https://developer.arm.com/downloads/-/gnu-rm&#xA;2. Download and install &#34;gnu_make-3.81.exe&#34; from https://gnuwin32.sourceforge.net/packages/make.htm&#xA;&#xA;3. You may (or not) need to manualy add gcc path to you OS environment PATH.&#xA;   ie add C:\Program Files (x86)\GNU Arm Embedded Toolchain\10 2021.10\bin&#xA;&#xA;4. You may (or not) need to reboot your PC after installing the above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run &#39;win_make.bat&#39; from the directory you saved this source code too. You may need to edit the bat file (path to make.exe) depending on where you installed the above two packages too.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve left some notes in the win_make.bat file to maybe help with stuff.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Many thanks to various people on Telegram for putting up with me during this effort and helping:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DualTachyon&#34;&gt;DualTachyon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fagci&#34;&gt;Mikhail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tunas1337&#34;&gt;Andrej&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/manujedi&#34;&gt;Manuel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@wagner&lt;/li&gt; &#xA; &lt;li&gt;@Lohtse Shar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spm81&#34;&gt;@Matoz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@Davide&lt;/li&gt; &#xA; &lt;li&gt;@Ismo OH2FTG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OneOfEleven&#34;&gt;OneOfEleven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@d1ced95&lt;/li&gt; &#xA; &lt;li&gt;and others I forget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2023 Dual Tachyon &lt;a href=&#34;https://github.com/DualTachyon&#34;&gt;https://github.com/DualTachyon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example changes/updates&lt;/h1&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/OneOfEleven/uv-k5-firmware-custom/main/image1.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/OneOfEleven/uv-k5-firmware-custom/main/image2.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/OneOfEleven/uv-k5-firmware-custom/main/image3.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Video showing the AM fix working ..&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;/AM_fix.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://github.com/OneOfEleven/uv-k5-firmware-custom/assets/51590168/2a3a9cdc-97da-4966-bf0d-1ce6ad09779c&#34;&gt;&lt;/video&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tursodatabase/libsql</title>
    <updated>2023-09-28T01:25:42Z</updated>
    <id>tag:github.com,2023-09-28:/tursodatabase/libsql</id>
    <link href="https://github.com/tursodatabase/libsql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;libSQL is a fork of SQLite that is both Open Source, and Open Contributions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/libsql/libsql/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VzbXemj6Rg&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1026540227218640906?color=5865F2&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=8a9095&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/331197/205099307-3f20b4e5-96cf-466c-be62-73907e9f2325.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;What is libSQL?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://turso.tech/libsql&#34;&gt;libSQL&lt;/a&gt; is an open source, open contribution fork of SQLite, created and maintained by &lt;a href=&#34;https://turso.tech&#34;&gt;Turso&lt;/a&gt;. We aim to evolve it to suit many more use cases than SQLite was originally designed for, and plan to use third-party OSS code wherever it makes sense.&lt;/p&gt; &#xA;&lt;p&gt;libSQL is licensed under an &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/LICENSE.md&#34;&gt;Open Source License&lt;/a&gt;, and we adhere to a clear &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embedded replicas that allow you to have replicated database inside your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/sqld&#34;&gt;libSQL server&lt;/a&gt; for remote SQLite access, similar to PostgreSQL or MySQL&lt;/li&gt; &#xA; &lt;li&gt;Supports Rust, JavaScript, Python, Go, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also various improvements and extensions to the core SQLite:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/raw/main/doc/libsql_extensions.md#altering-columns&#34;&gt;&lt;code&gt;ALTER TABLE&lt;/code&gt; extension for modifying column types and constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/issues/12&#34;&gt;Randomized ROWID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.turso.tech/webassembly-functions-for-your-sqlite-compatible-database-7e1ad95a2aa7&#34;&gt;WebAssembly User Defined Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/pull/87&#34;&gt;Pass down SQL string to virtual table implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql/pull/53&#34;&gt;Virtual write-ahead log interface&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The comprehensive description can be found &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/doc/libsql_extensions.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The project provides two interfaces: the libSQL API, which supports all the features, and the SQLite C API for compatibility.&lt;/p&gt; &#xA;&lt;p&gt;To get started with the libSQL API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql-experimental-node&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/core&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsql/libsql-experimental-python&#34;&gt;Python&lt;/a&gt; (experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/bindings/go&#34;&gt;Go&lt;/a&gt; (experimental)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/libsql/main/bindings/c&#34;&gt;C&lt;/a&gt; (experimantal)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build the SQLite-compatible C library and tools, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./configure &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the SQL shell, launch the &lt;code&gt;libsql&lt;/code&gt; program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./libsql&#xA;libSQL version 0.2.1 (based on SQLite version 3.43.0) 2023-05-23 11:47:56&#xA;Enter &#34;.help&#34; for usage hints.&#xA;Connected to a transient in-memory database.&#xA;Use &#34;.open FILENAME&#34; to reopen on a persistent database.&#xA;libsql&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why a fork?&lt;/h2&gt; &#xA;&lt;p&gt;SQLite has solidified its place in modern technology stacks, embedded in nearly any computing device you can think of. Its open source nature and public domain availability make it a popular choice for modification to meet specific use cases.&lt;/p&gt; &#xA;&lt;p&gt;But despite having its code available, SQLite famously doesn&#39;t accept external contributors and doesn&#39;t adhere to a code of conduct. So community improvements cannot be widely enjoyed.&lt;/p&gt; &#xA;&lt;p&gt;There have been other forks in the past, but they all focus on a specific technical difference. We aim to be a community where people can contribute from many different angles and motivations.&lt;/p&gt; &#xA;&lt;p&gt;We want to see a world where everyone can benefit from all of the great ideas and hard work that the SQLite community contributes back to the codebase. Community contributions work well, because we’ve done it before. If this was possible, what do you think SQLite could become?&lt;/p&gt; &#xA;&lt;p&gt;You can read more about our goals an motivation in our &lt;a href=&#34;https://turso.tech/libsql-manifesto&#34;&gt;product vision&lt;/a&gt; and our &lt;a href=&#34;https://glaubercosta-11125.medium.com/sqlite-qemu-all-over-again-aedad19c9a1c&#34;&gt;announcement article&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility with SQLite&lt;/h2&gt; &#xA;&lt;p&gt;Compatibility with SQLite is of great importance for us. But it can mean many things. So here&#39;s our stance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The file format&lt;/strong&gt;: libSQL will always be able to ingest and write the SQLite file format. We would love to add extensions like encryption, and CRC that require the file to be changed. But we commit to always doing so in a way that generates standard sqlite files if those features are not used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The API&lt;/strong&gt;: libSQL will keep 100% compatibility with the SQLite API, but we may add additional APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embedded&lt;/strong&gt;: SQLite is an embedded database that can be consumed as a single .c file with its accompanying header. libSQL will always be embeddable, meaning it runs inside your process without needing a network connection. But we may change the distribution, so that object files are generated, instead of a single .c file.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ColinIanKing/stress-ng</title>
    <updated>2023-09-28T01:25:42Z</updated>
    <id>tag:github.com,2023-09-28:/ColinIanKing/stress-ng</id>
    <link href="https://github.com/ColinIanKing/stress-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the stress-ng upstream project git repository. stress-ng will stress test a computer system in various selectable ways. It was designed to exercise various physical subsystems of a computer as well as the various operating system kernel interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stress-ng (stress next generation)&lt;/h1&gt; &#xA;&lt;a href=&#34;https://repology.org/project/stress-ng/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/stress-ng.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;stress-ng will stress test a computer system in various selectable ways. It was designed to exercise various physical subsystems of a computer as well as the various operating system kernel interfaces. Stress-ng features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;300+ stress tests&lt;/li&gt; &#xA; &lt;li&gt;80+ CPU specific stress tests that exercise floating point, integer, bit manipulation and control flow&lt;/li&gt; &#xA; &lt;li&gt;20+ virtual memory stress tests&lt;/li&gt; &#xA; &lt;li&gt;40+ file system stress tests&lt;/li&gt; &#xA; &lt;li&gt;30+ memory/CPU cache stress tests&lt;/li&gt; &#xA; &lt;li&gt;portable: builds on Linux (Debian, Devuan, RHEL, Fedora, Centos, Slackware OpenSUSE, Ubuntu, etc..), Solaris, FreeBSD, NetBSD, OpenBSD, DragonFlyBSD, Minix, Android, MacOS X, Serenity OS, GNU/Hurd, Haiku, Windows Subsystem for Linux and SunOs/Dilos/Solaris. with gcc, musl-gcc, clang, icc, icx, tcc and pcc.&lt;/li&gt; &#xA; &lt;li&gt;tested on alpha, armel, armhf, arm64, hppa, i386, m68k, mips32, mips64, power32, ppc64el, risc-v, sh4, s390x, sparc64, x86-64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;stress-ng was originally intended to make a machine work hard and trip hardware issues such as thermal overruns as well as operating system bugs that only occur when a system is being thrashed hard. Use stress-ng with caution as some of the tests can make a system run hot on poorly designed hardware and also can cause excessive system thrashing which may be difficult to stop.&lt;/p&gt; &#xA;&lt;p&gt;stress-ng can also measure test throughput rates; this can be useful to observe performance changes across different operating system releases or types of hardware. However, it has never been intended to be used as a precise benchmark test suite, so do NOT use it in this manner.&lt;/p&gt; &#xA;&lt;p&gt;Running stress-ng with root privileges will adjust out of memory settings on Linux systems to make the stressors unkillable in low memory situations, so use this judiciously. With the appropriate privilege, stress-ng can allow the ionice class and ionice levels to be adjusted, again, this should be used with care.&lt;/p&gt; &#xA;&lt;h2&gt;Tarballs&lt;/h2&gt; &#xA;&lt;p&gt;Tarballs of each version of stress-ng can be downloaded using the URL:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ColinIanKing/stress-ng/tarball/version&#34;&gt;https://github.com/ColinIanKing/stress-ng/tarball/version&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;where version is the relevant version number, for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ColinIanKing/stress-ng/tarball/V0.13.05&#34;&gt;https://github.com/ColinIanKing/stress-ng/tarball/V0.13.05&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running latest stress-ng snapshot in a container&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm ghcr.io/colinianking/stress-ng --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm colinianking/stress-ng --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debian packages for Ubuntu&lt;/h2&gt; &#xA;&lt;p&gt;Recent versions of stress-ng are available in the Ubuntu stress-ng ppa for various Ubuntu releases:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://launchpad.net/~colin-king/+archive/ubuntu/stress-ng&#34;&gt;https://launchpad.net/~colin-king/+archive/ubuntu/stress-ng&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:colin-king/stress-ng&#xA;sudo apt update&#xA;sudo apt install stress-ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building stress-ng&lt;/h2&gt; &#xA;&lt;p&gt;To build, the following libraries will ensure a fully functional stress-ng build: (note libattr is not required for more recent disto releases).&lt;/p&gt; &#xA;&lt;p&gt;Debian, Ubuntu:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc&lt;/li&gt; &#xA; &lt;li&gt;g++&lt;/li&gt; &#xA; &lt;li&gt;libaio-dev&lt;/li&gt; &#xA; &lt;li&gt;libapparmor-dev&lt;/li&gt; &#xA; &lt;li&gt;libatomic1&lt;/li&gt; &#xA; &lt;li&gt;libattr1-dev&lt;/li&gt; &#xA; &lt;li&gt;libbsd-dev&lt;/li&gt; &#xA; &lt;li&gt;libcap-dev&lt;/li&gt; &#xA; &lt;li&gt;libeigen3-dev&lt;/li&gt; &#xA; &lt;li&gt;libgbm-dev&lt;/li&gt; &#xA; &lt;li&gt;libgcrypt-dev&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-dev&lt;/li&gt; &#xA; &lt;li&gt;libipsec-mb-dev&lt;/li&gt; &#xA; &lt;li&gt;libjpeg-dev&lt;/li&gt; &#xA; &lt;li&gt;libjudy-dev&lt;/li&gt; &#xA; &lt;li&gt;libkeyutils-dev&lt;/li&gt; &#xA; &lt;li&gt;libkmod-dev&lt;/li&gt; &#xA; &lt;li&gt;libmd-dev&lt;/li&gt; &#xA; &lt;li&gt;libmpfr-dev&lt;/li&gt; &#xA; &lt;li&gt;libsctp-dev&lt;/li&gt; &#xA; &lt;li&gt;libxxhash-dev&lt;/li&gt; &#xA; &lt;li&gt;zlib1g-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;RHEL, Fedora, Centos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc&lt;/li&gt; &#xA; &lt;li&gt;g++&lt;/li&gt; &#xA; &lt;li&gt;eigen3-devel&lt;/li&gt; &#xA; &lt;li&gt;Judy-devel&lt;/li&gt; &#xA; &lt;li&gt;keyutils-libs-devel&lt;/li&gt; &#xA; &lt;li&gt;kmod-devel&lt;/li&gt; &#xA; &lt;li&gt;libaio-devel&lt;/li&gt; &#xA; &lt;li&gt;libatomic&lt;/li&gt; &#xA; &lt;li&gt;libattr-devel&lt;/li&gt; &#xA; &lt;li&gt;libbsd-devel&lt;/li&gt; &#xA; &lt;li&gt;libcap-devel&lt;/li&gt; &#xA; &lt;li&gt;libgbm-devel&lt;/li&gt; &#xA; &lt;li&gt;libgcrypt-devel&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-core-devel&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-devel&lt;/li&gt; &#xA; &lt;li&gt;libjpeg-devel&lt;/li&gt; &#xA; &lt;li&gt;libmd-devel&lt;/li&gt; &#xA; &lt;li&gt;mpfr-devel&lt;/li&gt; &#xA; &lt;li&gt;libX11-devel&lt;/li&gt; &#xA; &lt;li&gt;libXau-devel&lt;/li&gt; &#xA; &lt;li&gt;libxcb-devel&lt;/li&gt; &#xA; &lt;li&gt;lksctp-tools-devel&lt;/li&gt; &#xA; &lt;li&gt;xorg-x11-proto-devel&lt;/li&gt; &#xA; &lt;li&gt;xxhash-devel&lt;/li&gt; &#xA; &lt;li&gt;zlib-devel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;RHEL, Fedora, Centos (static builds):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc&lt;/li&gt; &#xA; &lt;li&gt;g++&lt;/li&gt; &#xA; &lt;li&gt;eigen3-devel&lt;/li&gt; &#xA; &lt;li&gt;glibc-static&lt;/li&gt; &#xA; &lt;li&gt;Judy-devel&lt;/li&gt; &#xA; &lt;li&gt;keyutils-libs-devel&lt;/li&gt; &#xA; &lt;li&gt;libaio-devel&lt;/li&gt; &#xA; &lt;li&gt;libatomic-static&lt;/li&gt; &#xA; &lt;li&gt;libattr-devel&lt;/li&gt; &#xA; &lt;li&gt;libbsd-devel&lt;/li&gt; &#xA; &lt;li&gt;libcap-devel&lt;/li&gt; &#xA; &lt;li&gt;libgbm-devel&lt;/li&gt; &#xA; &lt;li&gt;libgcrypt-devel&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-core-devel&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-devel&lt;/li&gt; &#xA; &lt;li&gt;libjpeg-devel&lt;/li&gt; &#xA; &lt;li&gt;libmd-devel&lt;/li&gt; &#xA; &lt;li&gt;libX11-devel&lt;/li&gt; &#xA; &lt;li&gt;libXau-devel&lt;/li&gt; &#xA; &lt;li&gt;libxcb-devel&lt;/li&gt; &#xA; &lt;li&gt;lksctp-tools-devel&lt;/li&gt; &#xA; &lt;li&gt;mpfr-devel&lt;/li&gt; &#xA; &lt;li&gt;xorg-x11-proto-devel&lt;/li&gt; &#xA; &lt;li&gt;xxhash-devel&lt;/li&gt; &#xA; &lt;li&gt;zlib-devel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SUSE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc&lt;/li&gt; &#xA; &lt;li&gt;gcc-c++&lt;/li&gt; &#xA; &lt;li&gt;eigen3-devel&lt;/li&gt; &#xA; &lt;li&gt;keyutils-devel&lt;/li&gt; &#xA; &lt;li&gt;libaio-devel&lt;/li&gt; &#xA; &lt;li&gt;libapparmor-devel&lt;/li&gt; &#xA; &lt;li&gt;libatomic1&lt;/li&gt; &#xA; &lt;li&gt;libattr-devel&lt;/li&gt; &#xA; &lt;li&gt;libbsd-devel&lt;/li&gt; &#xA; &lt;li&gt;libcap-devel&lt;/li&gt; &#xA; &lt;li&gt;libgbm-devel&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-devel&lt;/li&gt; &#xA; &lt;li&gt;libjpeg-turbo&lt;/li&gt; &#xA; &lt;li&gt;libkmod-devel&lt;/li&gt; &#xA; &lt;li&gt;libmd-devel&lt;/li&gt; &#xA; &lt;li&gt;libseccomp-devel&lt;/li&gt; &#xA; &lt;li&gt;lksctp-tools-devel&lt;/li&gt; &#xA; &lt;li&gt;mpfr-devel&lt;/li&gt; &#xA; &lt;li&gt;xxhash-devel&lt;/li&gt; &#xA; &lt;li&gt;zlib-devel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ClearLinux:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;devpkg-eigen&lt;/li&gt; &#xA; &lt;li&gt;devpkg-Judy&lt;/li&gt; &#xA; &lt;li&gt;devpkg-kmod&lt;/li&gt; &#xA; &lt;li&gt;devpkg-attr&lt;/li&gt; &#xA; &lt;li&gt;devpkg-libbsd&lt;/li&gt; &#xA; &lt;li&gt;devpkg-libgcrypt&lt;/li&gt; &#xA; &lt;li&gt;devpkg-libjpeg-turbo&lt;/li&gt; &#xA; &lt;li&gt;devpkg-libsctp&lt;/li&gt; &#xA; &lt;li&gt;devpkg-mesa&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alpine Linux:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build-base&lt;/li&gt; &#xA; &lt;li&gt;eigen-dev&lt;/li&gt; &#xA; &lt;li&gt;jpeg-dev&lt;/li&gt; &#xA; &lt;li&gt;judy-dev&lt;/li&gt; &#xA; &lt;li&gt;keyutils-dev&lt;/li&gt; &#xA; &lt;li&gt;kmod-dev&lt;/li&gt; &#xA; &lt;li&gt;libaio-dev&lt;/li&gt; &#xA; &lt;li&gt;libatomic&lt;/li&gt; &#xA; &lt;li&gt;libattr&lt;/li&gt; &#xA; &lt;li&gt;libbsd-dev&lt;/li&gt; &#xA; &lt;li&gt;libcap-dev&lt;/li&gt; &#xA; &lt;li&gt;libgcrypt-dev&lt;/li&gt; &#xA; &lt;li&gt;libmd-dev&lt;/li&gt; &#xA; &lt;li&gt;libseccomp-dev&lt;/li&gt; &#xA; &lt;li&gt;lksctp-tools-dev&lt;/li&gt; &#xA; &lt;li&gt;mesa-dev&lt;/li&gt; &#xA; &lt;li&gt;mpfr-dev&lt;/li&gt; &#xA; &lt;li&gt;xxhash-dev&lt;/li&gt; &#xA; &lt;li&gt;zlib-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: the build will try to detect build dependencies and will build an image with functionality disabled if the support libraries are not installed.&lt;/p&gt; &#xA;&lt;p&gt;At build-time stress-ng will detect kernel features that are available on the target build system and enable stress tests appropriately. Stress-ng has been build-tested on Ubuntu, Debian, Debian GNU/Hurd, Slackware, RHEL, SLES, Centos, kFreeBSD, OpenBSD, NetBSD, FreeBSD, Debian kFreeBSD, DragonFly BSD, OS X, Minix, Solaris 11.3, OpenIndiana and Hiaku. Ports to other POSIX/UNIX like operating systems should be relatively easy.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: ALWAYS run &lt;code&gt;make clean&lt;/code&gt; after fetching changes from the git repository to force the build to regenerate the build configuration file. Parallel builds using make -j are supported.&lt;/p&gt; &#xA;&lt;p&gt;To build on BSD systems, one requires gcc and GNU make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        CC=gcc gmake clean&#xA;&#x9;CC=gcc gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build on OS X systems, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build on MINIX, gmake and clang are required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;CC=clang gmake clean&#xA;&#x9;CC=clang gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build on SunOS, one requires GCC and GNU make, build using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;CC=gcc gmake clean&#xA;&#x9;CC=gcc gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build on Dilos, one requires GCC and GNU make, build using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;CC=gcc gmake clean&#xA;&#x9;CC=gcc gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build on Haiku Alpha 4:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a static image (example, for Android), use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;STATIC=1 make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with full warnings enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;PEDANTIC=1 make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with the Tiny C compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;CC=tcc make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with the PCC portable C compiler use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;CC=pcc make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with the musl C library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;CC=musl-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with the Intel C compiler icc use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;CC=icc make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with the Intel C compiler icx use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;CC=icx make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To perform a cross-compilation using gcc, use a static build, specify the toolchain (both CC and CXX). For example, a mips64 cross build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;make clean&#xA;&#x9;STATIC=1 CC=mips64-linux-gnuabi64-gcc CXX=mips64-linux-gnuabi64-g++ make -j $(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to stress-ng:&lt;/h2&gt; &#xA;&lt;p&gt;Send patches to &lt;a href=&#34;mailto:colin.i.king@gmail.com&#34;&gt;colin.i.king@gmail.com&lt;/a&gt; or merge requests at &lt;a href=&#34;https://github.com/ColinIanKing/stress-ng&#34;&gt;https://github.com/ColinIanKing/stress-ng&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start Reference Guide&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://wiki.ubuntu.com/Kernel/Reference/stress-ng&#34;&gt;Ubuntu stress-ng reference guide&lt;/a&gt; contains a brief overview and worked examples.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Run 4 CPU, 2 virtual memory, 1 disk and 8 fork stressors for 2 minutes and print measurements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stress-ng --cpu 4 --vm 2 --hdd 1 --fork 8 --timeout 2m --metrics&#xA;stress-ng: info:  [573366] setting to a 120 second (2 mins, 0.00 secs) run per stressor&#xA;stress-ng: info:  [573366] dispatching hogs: 4 cpu, 2 vm, 1 hdd, 8 fork&#xA;stress-ng: info:  [573366] successful run completed in 123.78s (2 mins, 3.78 secs)&#xA;stress-ng: info:  [573366] stressor       bogo ops real time  usr time  sys time   bogo ops/s     bogo ops/s CPU used per&#xA;stress-ng: info:  [573366]                           (secs)    (secs)    (secs)   (real time) (usr+sys time) instance (%)&#xA;stress-ng: info:  [573366] cpu              515396    120.00    453.02      0.18      4294.89        1137.24        94.42&#xA;stress-ng: info:  [573366] vm              2261023    120.01    223.80      1.80     18840.15       10022.27        93.99&#xA;stress-ng: info:  [573366] hdd              367558    123.78     10.63     11.67      2969.49       16482.42        18.02&#xA;stress-ng: info:  [573366] fork             598058    120.00     68.24     65.88      4983.80        4459.13        13.97&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run matrix stressor on all online CPUs for 60 seconds and measure temperature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stress-ng --matrix -1 --tz -t 60&#xA;stress-ng: info:  [1171459] setting to a 60 second run per stressor&#xA;stress-ng: info:  [1171459] dispatching hogs: 8 matrix&#xA;stress-ng: info:  [1171459] successful run completed in 60.01s (1 min, 0.01 secs)&#xA;stress-ng: info:  [1171459] matrix:&#xA;stress-ng: info:  [1171459]               acpitz0   75.00 C (348.15 K)&#xA;stress-ng: info:  [1171459]               acpitz1   75.00 C (348.15 K)&#xA;stress-ng: info:  [1171459]          pch_skylake   60.17 C (333.32 K)&#xA;stress-ng: info:  [1171459]         x86_pkg_temp   62.72 C (335.87 K)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a mix of 4 I/O stressors and check for changes in disk S.M.A.R.T. metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo stress-ng --iomix 4 --smart -t 30s&#xA;stress-ng: info:  [1171471] setting to a 30 second run per stressor&#xA;stress-ng: info:  [1171471] dispatching hogs: 4 iomix&#xA;stress-ng: info:  [1171471] successful run completed in 30.37s&#xA;stress-ng: info:  [1171471] Device     ID S.M.A.R.T. Attribute                 Value      Change&#xA;stress-ng: info:  [1171471] sdc        01 Read Error Rate                   88015771       71001&#xA;stress-ng: info:  [1171471] sdc        07 Seek Error Rate                   59658169          92&#xA;stress-ng: info:  [1171471] sdc        c3 Hardware ECC Recovered            88015771       71001&#xA;stress-ng: info:  [1171471] sdc        f1 Total LBAs Written               481904395         877&#xA;stress-ng: info:  [1171471] sdc        f2 Total LBAs Read                 3768039248        5139&#xA;stress-ng: info:  [1171471] sdd        be Temperature Difference             3670049           1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Benchmark system calls using the VDSO:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stress-ng --vdso 1 -t 5 --metrics&#xA;stress-ng: info:  [1171584] setting to a 5 second run per stressor&#xA;stress-ng: info:  [1171584] dispatching hogs: 1 vdso&#xA;stress-ng: info:  [1171585] stress-ng-vdso: exercising vDSO functions: clock_gettime time gettimeofday getcpu&#xA;stress-ng: info:  [1171585] stress-ng-vdso: 9.88 nanoseconds per call (excluding 1.73 nanoseconds test overhead)&#xA;stress-ng: info:  [1171584] successful run completed in 5.10s&#xA;stress-ng: info:  [1171584] stressor       bogo ops real time  usr time  sys time   bogo ops/s     bogo ops/s CPU used per&#xA;stress-ng: info:  [1171584]                           (secs)    (secs)    (secs)   (real time) (usr+sys time) instance (%)&#xA;stress-ng: info:  [1171584] vdso          430633496      5.10      5.10      0.00  84375055.96    84437940.39        99.93&#xA;stress-ng: info:  [1171584] vdso               9.88 nanoseconds per call (average per stressor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate and measure branch misses using perf metrics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo stress-ng --branch 1 --perf -t 10 --stdout | grep Branch&#xA;stress-ng: info:  [1171714]                604,703,327 Branch Instructions            53.30 M/sec&#xA;stress-ng: info:  [1171714]                598,760,234 Branch Misses                  52.77 M/sec (99.02%)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bugs and regressions found with stress-ng&lt;/h2&gt; &#xA;&lt;p&gt;stress-ng has found Kernel and QEMU bugs/regressions and appropriate fixes have been landed to address these issues:&lt;/p&gt; &#xA;&lt;p&gt;2015:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ca4da5dd1f99fe9c59f1709fb43e818b18ad20e0&#34;&gt;KEYS: ensure we free the assoc array edit if edit is valid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=41a0c249cb8706a2efa1ab3d59466b23a27d0c8b&#34;&gt;proc: fix -ESRCH error when writing to /proc/$pid/coredump_filter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.centos.org/view.php?id=14366&#34;&gt;SMP divide error&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2016:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lkml.org/lkml/2016/11/27/212&#34;&gt;fs/locks.c: kernel oops during posix lock stress test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=135e8c9250dd5c8c9aae5984fde6f230d0cbfeaf&#34;&gt;sched/core: Fix a race between try_to_wake_up() and a woken up task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5353ed8deedee9e5acb9f896e9032158f5d998de&#34;&gt;devpts: fix null pointer dereference on failed memory allocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e6d9a52543338603e25e71e0e4942f05dae0dd8a&#34;&gt;arm64: do not enforce strict 16 byte alignment to stack pointer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2017:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=b9b4bf504c9e94fe38b93aa2784991c80cebcf2e&#34;&gt;ARM: dts: meson8b: add reserved memory zone to fix silent freezes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=bba8e3f42736cf7f974968a818e53b128286ad1d&#34;&gt;ARM64: dts: meson-gx: Add firmware reserved memory zones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=dac7a4b4b1f664934e8b713f529b629f67db313c&#34;&gt;ext4: lock the xattr block before checksuming it&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lkml.org/lkml/2017/8/28/574&#34;&gt;rcu_preempt detected stalls on CPUs/tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lkml.org/lkml/2017/10/30/247&#34;&gt;BUG: unable to handle kernel NULL pointer dereference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spinics.net/lists/kernel/msg2679315.html&#34;&gt;WARNING: possible circular locking dependency detected&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2018:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.illumos.org/issues/9061&#34;&gt;Illumos: ofdlock(): assertion failed: lckdat-&amp;gt;l_start == 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1ea9b98b007a662e402551a41a4413becad40a65&#34;&gt;debugobjects: Use global free list in __debug_check_no_obj_freed()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1780137&#34;&gt;ext4_validate_inode_bitmap:99: comm stress-ng: Corrupt inode bitmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=78b1a52e05c9db11d293342e8d6d8a230a04b4e7&#34;&gt;virtio/s390: fix race in ccw_io_helper()&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2019:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/mm/page_idle.c?id=d96d6145d9796d5f1eac242538d45559e9a23404&#34;&gt;mm/page_idle.c: fix oops because end_pfn is larger than max_pfn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=670105a25608affe01cb0ccdc2a1f4bd2327172b&#34;&gt;mm: compaction: avoid 100% CPU usage during compaction when a task is killed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=82dd23e84be3ead53b6d584d836f51852d1096e6&#34;&gt;mm/vmalloc.c: preload a CPU with one object for split purpose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b397f8468fa27f08b83b348ffa56a226f72453af&#34;&gt;perf evlist: Use unshare(CLONE_FS) in sb threads to let setns(CLONE_NEWNS) work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=556f47ac6083d778843e89aa21b1242eee2693ed&#34;&gt;riscv: reject invalid syscalls below -1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2020:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e0d17c842c0f824fd4df9f4688709fc6907201e1&#34;&gt;RISC-V: Don&#39;t allow write+exec only page mapping request in mmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c749bb2d554825e007cbc43b791f54e124dadfce&#34;&gt;riscv: set max_pfn to the PFN of the last page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=57b1aac1b426b7255afa195298ed691ffea204c6&#34;&gt;crypto: hisilicon - update SEC driver module parameter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2f71e00619dcde3d8a98ba3e7f52e98282504b7d&#34;&gt;net: atm: fix update of position index in lec_seq_next&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8d4d9c7b4333abccb3bf310d76ef7ea2edb9828f&#34;&gt;sched/debug: Fix memory corruption caused by multiple small reads of flags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=45680967ee29e67b62e6800a8780440b840a0b1f&#34;&gt;ocfs2: ratelimit the &#39;max lookup times reached&#39; notice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1875941&#34;&gt;using perf can crash kernel with a stack overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1879470&#34;&gt;stress-ng on gcov enabled focal kernel triggers OOPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1849196&#34;&gt;kernel bug list_del corruption on s390x from stress-ng mknod and stress-ng symlink&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2021:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=e5e8b80d352ec999d2bba3ea584f541c83f4ca3f&#34;&gt;sparc64: Fix opcode filtering in handling of no fault loads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugzilla.kernel.org/show_bug.cgi?id=213041&#34;&gt;opening a file with O_DIRECT on a file system that does not support it will leave an empty file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7e1088760cfe0bb1fdb1f0bd155bfd52f080683a&#34;&gt;locking/atomic: sparc: Fix arch_cmpxchg64_local()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=986aa0f276752ca4809f95b260f59fafef01a6a7&#34;&gt;btrfs: fix exhaustion of the system chunk array due to concurrent allocations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=79bd37120b149532af5b21953643ed74af69654f&#34;&gt;btrfs: rework chunk allocation to avoid exhaustion of the system chunk array&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1cb3db1cf383a3c7dbda1aa0ce748b0958759947&#34;&gt;btrfs: fix deadlock with concurrent chunk allocations involving system chunks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7e1088760cfe0bb1fdb1f0bd155bfd52f080683a&#34;&gt;locking/atomic: sparc: Fix arch_cmpxchg64_local()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fe67f4dd8daa252eb9aa7acb61555f3cc3c1ce4c&#34;&gt;pipe: do FASYNC notifications for every pipe IO, not just state changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d3e9f732c415cf22faa33d6f195e291ad82dc92e&#34;&gt;io-wq: remove GFP_ATOMIC allocation off schedule out path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=36ca7943ac18aebf8aad4c50829eb2ea5ec847df&#34;&gt;mm/swap: consider max pages in iomap_swapfile_add_extent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=990e78116d38059c9306cf0560c1c4ed1cf358d3&#34;&gt;block: loop: fix deadlock between open and remove&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2022:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ddc204b517e60ae64db34f9832dc41dafa77c751&#34;&gt;copy_process(): Move fd_install() out of sighand-&amp;gt;siglock critical section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9ce3c0d26c42d279b6c378a03cd6a61d828f19ca&#34;&gt;minix: fix bug when opening a file with O_DIRECT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5524cbb1bfcdff0cad0aaa9f94e6092002a07259&#34;&gt;arch/arm64: Fix topology initialization for core scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stichting-MINIX-Research-Foundation/minix/issues/333&#34;&gt;running stress-ng on Minux 3.4.0-RC6 on amd64 assert in vm/region.c:313&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1959215&#34;&gt;unshare test triggers unhandled page fault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spinics.net/lists/kernel/msg4349826.html&#34;&gt;request_module DoS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/YmrWK%2FKoU1zrAxPI@fuller.cnet&#34;&gt;NUMA Benchmark Regression In Linux 5.18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/linux-mm/20220625003854.1230114-1-Liam.Howlett@oracle.com/&#34;&gt;Underflow in mas_spanning_rebalance() and test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=71e2d666ef85d51834d658830f823560c402b8b6&#34;&gt;mm/huge_memory: do not clobber swp_entry_t during THP split&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lkml.org/lkml/2022/12/31/27&#34;&gt;AppArmor: -42.5% regression of stress-ng.kill.ops_per_sec due to commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/20221220082512.186283-1-feng.tang@intel.com/t/&#34;&gt;clocksource: Suspend the watchdog temporarily when high read lantency detected&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2023:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/qemu-project/qemu/-/issues/1462&#34;&gt;qemu-system-m68k segfaults on opcode 0x4848&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=db370a8b9f67ae5f17e3d5482493294467784504&#34;&gt;rtmutex: Ensure that the top waiter is always woken up&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6fe7d6b992113719e96744d974212df3fcddc76c&#34;&gt;mm/swap: fix swap_info_struct race between swapoff and get_swap_pages()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e53413f8deedf738a6782cc14cc00bd5852ccf18&#34;&gt;block, bfq: Fix division by zero error on zero wsum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=6569fc12e442ea973d96db39e542aa19a7bc3a79&#34;&gt;riscv: mm: Ensure prot of VM_WRITE and VM_EXEC must be readable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=71c3ad65fabec9620d3f548b2da948c79c7ad9d5&#34;&gt;Revert &#34;mm: vmscan: make global slab shrink lockless&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugzilla.kernel.org/show_bug.cgi?id=217738&#34;&gt;crash/hang in mm/swapfile.c:718 add_to_avail_list when exercising stress-ng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=04fc7816089c5a32c29a04ec94b998e219dfb946&#34;&gt;mm: fix zswap writeback race condition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2c66ca3949dc701da7f4c9407f2140ae425683a5&#34;&gt;x86/fpu: Set X86_FEATURE_OSXSAVE feature after enabling OSXSAVE in CR4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d243b34459cea30cfe5f3a9b2feb44e7daff9938&#34;&gt;kernel/fork: beware of __put_task_struct() calling context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=fcf7ff67a2aa6d8055b9b815ad8a28a5231afa1e&#34;&gt;arm64: dts: ls1028a: add l1 and l2 cache info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kernel improvements that used stress-ng&lt;/h2&gt; &#xA;&lt;p&gt;2020:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=54b27f9287a7b3dfc85549f01fc9d292c92c68b9&#34;&gt;selinux: complete the inlining of hashtab functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e67b2ec9f6171895e774f6543626913960e019df&#34;&gt;selinux: store role transitions in a hash table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b4fb015eeff7f3e5518a7dbe8061169a3e2f2bc7&#34;&gt;sched/rt: Optimize checking group RT scheduler constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=01cfcde9c26d8555f0e6e9aea9d6049f87683998&#34;&gt;sched/fair: handle case of task_h_load() returning 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=feff2e65efd8d84cf831668e182b2ce73c604bbb&#34;&gt;sched/deadline: Unthrottle PI boosted threads while enqueuing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=66383800df9cbdbf3b0c34d5a51bf35bcdb72fd2&#34;&gt;mm: fix madvise WILLNEED performance problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=437ef802e0adc9f162a95213a3488e8646e5fc03&#34;&gt;powerpc/dma: Fix dma_map_ops::get_required_mask&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spinics.net/lists/linux-rt-users/msg22350.html&#34;&gt;stress-ng close causes kernel oops(es) v5.6-rt and v5.4-rt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2021:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9b1ea29bc0d7b94d420f96a0f4121403efc3dd85&#34;&gt;Revert &#34;mm, slub: consider rest of partial list if acquire_slab() fails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5db4f15c4fd7ae74dd40c6f84bf56dfcf13d10cf&#34;&gt;mm: memory: add orig_pmd to struct vm_fault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=34f7f79827ec4db30cff9001dfba19f496473e8d&#34;&gt;selftests/powerpc: Add test of mitigation patching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=528b16bfc3ae5f11638e71b3b63a81f9999df727&#34;&gt;dm crypt: Avoid percpu_counter spinlock contention in crypt_page_alloc()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=295be91f7ef0027fca2f2e4788e99731aa931834&#34;&gt;mm/migrate: optimize hotplug-time demotion order updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=38f7b7067dae0c101be573106018e8af22a90fdf&#34;&gt;powerpc/rtas: rtas_busy_delay() improvements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2022:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b171501f258063f5c56dd2c5fdf310802d8d7dc1&#34;&gt;sched/core: Accounting forceidle time for all tasks except idle task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d60c4d01a98bc1942dba6e3adc02031f5519f94b&#34;&gt;ipc/mqueue: use get_tree_nodev() in mqueue_get_tree()&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2023:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7717fc1a12f88701573f9ed897cc4f6699c661e3&#34;&gt;mm/swapfile: add cond_resched() in get_swap_pages()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=df3e764d8e5cd416efee29e0de3c93917dff5d33&#34;&gt;module: add debug stats to help identify memory pressure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=064f4536d13939b6e8cdb71298ff5d657f4f8caa&#34;&gt;module: avoid allocation if module is already present and ready&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=41abdba9374734b743019fc1cc05e3225c82ba6b&#34;&gt;sched: Interleave cfs bandwidth timers for improved single thread performance at low utilization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c8be03806738c86521dbf1e0503bc90855fb99a3&#34;&gt;filemap: add filemap_map_order0_folio() to handle order0 folio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Presentations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://static.sched.com/hosted_files/osseu19/29/Lyon-stress-ng-presentation-oct-2019.pdf&#34;&gt;Stress-ng presentation at ELCE 2019 Lyon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8QaXStKfq3A&#34;&gt;Video of the above presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gD3Hn02VSHA&#34;&gt;Stress-ng: How to Stress Test Your Computer (and Possibly Break It)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdrdv2-public.intel.com/723902/lkp-tests.pdf&#34;&gt;Linux kernel performance test tool&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2015:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cs.gmu.edu/~menasce/cs788/papers/ICCAC2015-Outin.pdf&#34;&gt;Enhancing Cloud energy models for optimizing datacenters efficiency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hal.archives-ouvertes.fr/hal-01211772/document&#34;&gt;Tejo: A Supervised Anomaly Detection Scheme for NewSQL Databases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.scitepress.org/Papers/2015/54480/54480.pdf&#34;&gt;CoMA: Resource Monitoring of Docker Containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.diva-portal.org/smash/get/diva2:861239/FULLTEXT02&#34;&gt;An Investigation of CPU utilization relationship between host and guests in a Cloud infrastructure&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2016:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/increasing-platform-determinism-pqos-dpdk-paper.pdf&#34;&gt;Increasing Platform Determinism PQOS DPDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pdsw.org/pdsw-discs16/papers/p43-kougkas.pdf&#34;&gt;Towards Energy Efficient Data Management in HPC: The Open Ethernet Drive Approach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ieeexplore.ieee.org/document/7877341/&#34;&gt;CPU and memory performance analysis on dynamic and dedicated resource allocation using XenServer in Data Center environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ena-hpc.org/2016/pdf/khan_et_al_enahpc.pdf&#34;&gt;How Much Power Does your Server Consume? Estimating Wall Socket Power Using RAPL Measurements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ericsson.com/assets/local/publications/conference-papers/devops.pdf&#34;&gt;DevOps for IoT Applications using Cellular Networks and Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uu.diva-portal.org/smash/get/diva2:1043751/FULLTEXT01.pdf&#34;&gt;A Virtual Network Function Workload Simulator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lofstead.org/papers/2016-varsys.pdf&#34;&gt;Characterizing and Reducing Cross-Platform Performance Variability Using OS-level Virtualization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/306004997_How_much_power_does_your_server_consume_Estimating_wall_socket_power_using_RAPL_measurements&#34;&gt;How much power does your server consume? Estimating wall socket power using RAPL measurements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www3.cs.stonybrook.edu/~anshul/ic2e16_uie.pdf&#34;&gt;UIE: User-centric Interference Estimation for Cloud Applications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2017:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/319905237_Auto-Scaling_of_Containers_The_Impact_of_Relative_and_Absolute_Metrics&#34;&gt;Auto-scaling of Containers: the impact of Relative and Absolute Metrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/wsl/2017/04/11/testing-the-windows-subsystem-for-linux/&#34;&gt;Testing the Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.diva-portal.org/smash/get/diva2:1106630/FULLTEXT01.pdf&#34;&gt;Practical analysis of the Precision Time Protocol under different types of system load&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://eprints.whiterose.ac.uk/124309/1/paper_final.pdf&#34;&gt;Towards Virtual Machine Energy-Aware Cost Prediction in Clouds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://books.google.co.uk/books?id=S4wwDwAAQBAJ&amp;amp;pg=PA7&amp;amp;lpg=PA7&amp;amp;dq=http://kernel.ubuntu.com/~cking/stress-ng/&amp;amp;source=bl&amp;amp;ots=bVZccBq2Io&amp;amp;sig=rIqKWyEhGmVPosAJiemKjGgEv0M&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwiFo6LO2fbXAhWBtxQKHRcnDY04HhDoAQguMAE#v=onepage&amp;amp;q=http%3A%2F%2Fkernel.ubuntu.com%2F~cking%2Fstress-ng%2F&amp;amp;f=false&#34;&gt;Algorithms and Architectures for Parallel Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.riverpublishers.com/pdf/ebook/RP_9788793519411.pdf&#34;&gt;Advanced concepts and tools for renewable energy supply of Data Centres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://staff.www.ltu.se/~damvar/Publications/Eriksson%20et%20al.%20-%202017%20-%20Monitoring%20and%20Modelling%20Open%20Compute%20Servers.pdf&#34;&gt;Monitoring and Modelling Open Compute Servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://personals.ac.upc.edu/jguitart/HomepageFiles/ECM16.pdf&#34;&gt;Experimental and numerical analysis for potential heat reuse in liquid cooled data centres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www3.cs.stonybrook.edu/~anshul/mascots17.pdf&#34;&gt;Modeling and Analysis of Performance under Interference in the Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elinux.org/images/a/a9/ELC2017-_Effectively_Measure_and_Reduce_Kernel_Latencies_for_Real-time_Constraints_%281%29.pdf&#34;&gt;Effectively Measure and Reduce Kernel Latencies for Real time Constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.diva-portal.org/smash/get/diva2:861235/FULLTEXT02&#34;&gt;Monitoring and Analysis of CPU load relationships between Host and Guests in a Cloud Networking Infrastructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://events17.linuxfoundation.org/sites/events/files/slides/rtpatch.pdf&#34;&gt;Measuring the impacts of the Preempt-RT patch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rp.os3.nl/2016-2017/p64/report.pdf&#34;&gt;Reliable Library Identification Using VMI Techniques&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/319613604_Elastic-PPQ_A_two-level_autonomic_system_for_spatial_preference_query_processing_over_dynamic_data_streams&#34;&gt;Elastic-PPQ: A two-level autonomic system for spatial preference query processing over dynamic data stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jultika.oulu.fi/files/nbnfioulu-201706082638.pdf&#34;&gt;OpenEPC integration within 5GTN as an NFV proof of concept&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uwspace.uwaterloo.ca/bitstream/handle/10012/12182/Arafa_Pansy.pdf?sequence=3&#34;&gt;Time-Aware Dynamic Binary Instrumentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hal.laas.fr/hal-01576291/document&#34;&gt;Experience Report: Log Mining using Natural Language Processing and Application to Anomaly Detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://re.public.polimi.it/retrieve/handle/11311/1033069/292404/paper-accepted-version.pdf&#34;&gt;Mixed time-criticality process interferences characterization on a multicore Linux system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ec.europa.eu/research/participants/documents/downloadPublic/RFpPOGljenYrclUyK3N5eFN4NnVVZEJpVEl3TTAxcFhXRzRGaXdzN2dmSjBycjNIbXB6dlJ3PT0=/attachment/VFEyQTQ4M3ptUWQ4VDN5UWNDYVZ0UEVSWSt2REhrV1Q=&#34;&gt;Cloud Orchestration at the Level of Application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2018:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://indico.esa.int/event/165/contributions/1230/attachments/1195/1412/04b_-_Multicore_-_Presentation.pdf&#34;&gt;Multicore Emulation on Virtualised Environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seb.vaucher.org/papers/stress-sgx.pdf&#34;&gt;Stress-SGX : Load and Stress your Enclaves for Fun and Profit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3184422&amp;amp;dl=ACM&amp;amp;coll=DL&amp;amp;preflayout=flat&#34;&gt;quiho: Automated Performance Regression Testing Using Inferred Resource Utilization Profiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dspace.ut.ee/bitstream/handle/10062/60705/Viitkar_BSc2018.pdf&#34;&gt;Hypervisor and Virtual Machine Memory Optimization Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elinux.org/images/4/43/ELC2018_Real-time_testing_with_Fuego-181024m.pdf&#34;&gt;Real-Time testing with Fuego&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.academia.edu/68455840/FECBench_An_Extensible_Framework_for_Pinpointing_Sources_of_Performance_Interference_in_the_Cloud_Edge_Resource_Spectrum&#34;&gt;FECBench: An Extensible Framework for Pinpointing Sources of Performance Interference in the Cloud-Edge Resource Spectrum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.abo.fi/ws/files/26568716/QuantifyingInteraction.pdf&#34;&gt;Quantifying the Interaction Between Structural Properties of Software and Hardware in the ARM Big.LITTLE Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2019:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thinkmind.org/articles/ambient_2019_2_20_40020.pdf&#34;&gt;Performance Isolation of Co-located Workload in a Container-based Vehicle Software Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ssg.lancs.ac.uk/wp-content/uploads/2020/07/analysis_and_detection_vateva.pdf&#34;&gt;Analysis and Detection of Cache-Based Exploits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.vu.nl/ws/files/122357910/KMVX.pdf&#34;&gt;kMVX: Detecting Kernel Information Leaks with Multi-variant Execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.diva-portal.org/smash/get/diva2:1367111/FULLTEXT02&#34;&gt;Scalability of Kubernetes Running Over AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.springer.com/article/10.1007/s10586-018-02890-1&#34;&gt;A study on performance measures for auto-scaling CPU-intensive containerized applications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2020:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdpi.com/1996-1073/13/9/2409/htm&#34;&gt;Performance and Energy Trade-Offs for Parallel Applications on Heterogeneous Multi-Processing Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2009.08912.pdf&#34;&gt;C-Balancer: A System for Container Profiling and Scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/9284328&#34;&gt;Modelling VM Latent Characteristics and Predicting Application Performance using Semi-supervised Non-negative Matrix Factorization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3419111.3421299&#34;&gt;Semi-dynamic load balancing: efficient distributed learning in non-dedicated environments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1556&amp;amp;context=eng_etds&#34;&gt;A Performance Analysis of Hardware-assisted Security Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eprints.leedsbeckett.ac.uk/id/eprint/7294/1/GreenCloudSoftwareEngineeringForBigDataProcessingPV-KOR.pdf&#34;&gt;Green Cloud Software Engineering for Big Data Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.proquest.com/docview/2533920884&#34;&gt;Real-Time Detection for Cache Side Channel Attack using Performance Counter Monitor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://svs.informatik.uni-hamburg.de/publications/2020/2020-08-27-Bohling-IMA.pdf&#34;&gt;Subverting Linux’ Integrity Measurement Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://onlinelibrary.wiley.com/doi/full/10.1002/eng2.12114&#34;&gt;Real-time performance assessment using fast interrupt request on a standard Linux kernel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://revistas.usfq.edu.ec/index.php/avances/article/download/2108/2919/18081&#34;&gt;Low Energy Consumption on Post-Moore Platforms for HPC Research&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s2group.cs.vu.nl/files/pubs/2020-JSS-IG-Edge_Cloud.pdf&#34;&gt;Managing Latency in Edge-Cloud Environment&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2021:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3445814.3446742&#34;&gt;Streamline: A Fast, Flushless Cache Covert-Channel Attack by Enabling Asynchronous Collusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdpi.com/1131714&#34;&gt;Experimental Analysis in Hadoop MapReduce: A Closer Look at Fault Detection and Recovery Techniques&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2105.06619.pdf&#34;&gt;Performance Characteristics of the BlueField-2 SmartNIC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdpi.com/1996-1073/14/11/3322&#34;&gt;Evaluating Latency in Multiprocessing Embedded Systems for the Smart Grid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3477244.3477614&#34;&gt;Work-in-Progress: Timing Diversity as a Protective Mechanism&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2109.14276.pdf&#34;&gt;Sequential Deep Learning Architectures for Anomaly Detection in Virtual Network Function Chains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/356342806_WattEdge_A_Holistic_Approach_for_Empirical_Energy_Measurements_in_Edge_Computing&#34;&gt;WattEdge: A Holistic Approach for Empirical Energy Measurements in Edge Computing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pure.ed.ac.uk/ws/portalfiles/portal/196157550/PTEMagnet_MARGARITOV_DOA19112020_AFV.pdf&#34;&gt;PTEMagnet: Fine-Grained Physical Memory Reservation for Faster Page Walks in Public Clouds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www4.cs.fau.de/Publications/2021/herzog_2021_eurosec.pdf&#34;&gt;The Price of Meltdown and Spectre: Energy Overhead of Mitigations at Operating System Level&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://digitalcommons.kennesaw.edu/cgi/viewcontent.cgi?article=1590&amp;amp;context=undergradsymposiumksu&#34;&gt;An Empirical Study of Thermal Attacks on Edge Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://people.csail.mit.edu/delimitrou/papers/2021.asplos.sage.pdf&#34;&gt;Sage: Practical &amp;amp; Scalable ML-Driven Performance Debugging in Microservices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.marquez-barja.com/images/papers/A_Generalized_Approach_For_Software_Placement_In_The_Fog_Using_A_MAPE_K_Control_Loop-AuthorVersion.pdf&#34;&gt;A Generalized Approach For Practical Task Allocation Using A MAPE-K Control Loop&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.spec.org/icpe_proceedings/2021/companion/p21.pdf&#34;&gt;Towards Independent Run-time Cloud Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tu-dresden.de/zih/forschung/ressourcen/dateien/projekte/firestarter/FIRESTARTER-2-Dynamic-Code-Generation-for-Processor-Stress-Tests.pdf?lang=en&#34;&gt;FIRESTARTER 2: Dynamic Code Generation for Processor Stress Tests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2022:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.springer.com/article/10.1007/s11227-022-04318-5&#34;&gt;A general method for evaluating the overhead when consolidating servers: performance degradation in virtual machines and containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2208.08764.pdf&#34;&gt;FedComm: Understanding Communication Protocols for Edge-based Federated Learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drops.dagstuhl.de/opus/volltexte/2022/16332/pdf/LIPIcs-ECRTS-2022-15.pdf&#34;&gt;Achieving Isolation in Mixed-Criticality Industrial Edge Systems with Real-Time Containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdpi.com/2079-9292/11/22/3765&#34;&gt;Design and Implementation of Machine Learning-Based Fault Prediction System in Cloud Infrastructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2211.14138.pdf&#34;&gt;The TSN Building Blocks in Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.usenix.org/system/files/atc22-guerraoui.pdf&#34;&gt;uKharon: A Membership Service for Microsecond Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scholar.afit.edu/cgi/viewcontent.cgi?article=6319&amp;amp;context=etd&#34;&gt;Evaluating Secure Enclave Firmware Development for Contemporary RISC-V WorkstationsContemporary RISC-V Workstation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trepo.tuni.fi/bitstream/handle/10024/138547/J%C3%A4mb%C3%A4ckMarkus.pdf&#34;&gt;Evaluation of Real-Time Linux on RISC-V processor architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2023:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3519601&#34;&gt;Fight Hardware with Hardware: System-wide Detection and Mitigation of Side-Channel Attacks using Performance Counters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2205.14188.pdf&#34;&gt;Introducing k4.0s: a Model for Mixed-Criticality Container Orchestration in Industry 4.0 &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2301.06070.pdf&#34;&gt;A Comprehensive Study on Optimizing Systems with Data Processing Units&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.chalmers.se/publication/506903/file/506903_Fulltext.pdf&#34;&gt;Estimating Cloud Application Performance Based on Micro-Benchmark Profiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lifeasageek.github.io/papers/yoochan-pspray.pdf&#34;&gt;PSPRAY: Timing Side-Channel based Linux Kernel Heap Exploitation Technique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://journalofcloudcomputing.springeropen.com/articles/10.1186/s13677-022-00383-6#Fn4&#34;&gt;Robust and accurate performance anomaly detection and prediction for cloud applications: a novel ensemble learning-based framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdpi.com/2079-9292/12/6/1426&#34;&gt;Feasibility Study for a Python-Based Embedded Real-Time Control System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdpi.com/2076-3417/13/8/5115#B56-applsci-13-05115&#34;&gt;Adaptation of Parallel SaaS to Heterogeneous Co-Located Cloud Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3578244.3583728&#34;&gt;A Methodology and Framework to Determine the Isolation Capabilities of Virtualisation Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2305.03842.pdf&#34;&gt;Data Station: Delegated, Trustworthy, and Auditable Computation to Enable Data-Sharing Consortia with a Data Escrow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3578354.3592873&#34;&gt;An Empirical Study of Resource-Stressing Faults in Edge-Computing Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repositories.lib.utexas.edu/handle/2152/120282&#34;&gt;Finding flaky tests in JavaScript applications using stress and test suite reordering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2306.16391.pdf&#34;&gt;The Power of Telemetry: Uncovering Software-Based Side-Channel Attacks on Apple M1/M2 Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jstage.jst.go.jp/article/ipsjjip/31/0/31_78/_pdf&#34;&gt;A Performance Evaluation of Embedded Multi-core Mixed-criticality System Based on PREEMPT RT Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scholar.smu.edu/cgi/viewcontent.cgi?article=1034&amp;amp;context=engineering_compsci_etds&#34;&gt;Data Leakage in Isolated Virtualized Enterprise Computing SystemsSystems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-dcn-bmwg-containerized-infra/&#34;&gt;Considerations for Benchmarking Network Performance in Containerized Infrastructures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hotcarbon.org/2023/pdf/a4-he.pdf&#34;&gt;EnergAt: Fine-Grained Energy Attribution for Multi-Tenancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3609510.3609814&#34;&gt;Quantifying the Security Profile of Linux Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2207.13981.pdf&#34;&gt;Gotham Testbed: a Reproducible IoT Testbed for Security Experiments and Dataset Generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://assets.researchsquare.com/files/rs-3169665/v1_covered_63751076-8387-429e-8296-3f3cc4c3ed34.pdf?c=1689832627&#34;&gt;Profiling with Trust: System Monitoring from Trusted Execution Environments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sciopen.com/article/pdf/10.26599/TST.2021.9010075.pdf&#34;&gt;Thermal-Aware on-Device Inference Using Single-Layer Parallelization with Heterogeneous Processors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2308.02896.pdf&#34;&gt;Towards Fast, Adaptive, and Hardware-Assisted User-Space Scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2302.06914.pdf&#34;&gt;Heterogeneous Anomaly Detection for Software Systems via Semi-supervised Cross-modal Attention&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I am keen to add to the stress-ng project page any citations to research or projects that use stress-ng. I also appreciate information concerning kernel bugs or performance regressions found with stress-ng.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to the following contributors to stress-ng (in alphabetical order):&lt;/p&gt; &#xA;&lt;p&gt;Abdul Haleem, Aboorva Devarajan, Adriand Martin, Adrian Ratiu, Aleksandar N. Kostadinov, Alexander Kanavin, Alexandru Ardelean, Alfonso Sánchez-Beato, Allen H, André Wild, Anisse Astier, Anton Eliasson, Arjan van de Ven, Baruch Siach, Bryan W. Lewis, Camille Constans, Carlos Santos, Christian Ehrhardt, Christopher Brown, Chunyu Hu, Danilo Krummrich, Davidson Francis, David Turner, Dominik B Czarnota, Dorinda Bassey, Eder Zulian, Eric Lin, Erik Stahlman, Erwan Velu, Fabien Malfoy, Fabrice Fontaine, Fernand Sieber,Florian Weimer, Francis Laniel, Guilherme Janczak, Hui Wang, Hsieh-Tseng Shen, Iyán Méndez Veiga, James Hunt, Jan Luebbe, Jianshen Liu, John Kacur, Jules Maselbas, Julien Olivain, Kenny Gong, Khalid Elmously, Khem Raj, Luca Pizzamiglio, Luis Chamberlain, Luis Henriques, Matthew Tippett, Mauricio Faria de Oliveira, Maxime Chevallier, Maya Rashish, Mayuresh Chitale, Meysam Azad, Mike Koreneff, Nick Hanley, Paul Menzel, Piyush Goyal, Ralf Ramsauer, Rosen Penev, Siddhesh Poyarekar, Shoily Rahman, Thadeu Lima de Souza Cascardo, Thia Wyrod, Thinh Tran, Tim Gardner, Tim Gates, Tim Orling, Tommi Rantala, Witold Baryluk, Yong-Xuan Wang, Zhiyi Sun.&lt;/p&gt;</summary>
  </entry>
</feed>