<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T01:35:58Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sqlcipher/sqlcipher</title>
    <updated>2022-07-24T01:35:58Z</updated>
    <id>tag:github.com,2022-07-24:/sqlcipher/sqlcipher</id>
    <link href="https://github.com/sqlcipher/sqlcipher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQLCipher is a standalone fork of SQLite that adds 256 bit AES encryption of database files and other security features.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;SQLCipher&lt;/h2&gt; &#xA;&lt;p&gt;SQLCipher is a standalone fork of the &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; database library that adds 256 bit AES encryption of database files and other security features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on-the-fly encryption&lt;/li&gt; &#xA; &lt;li&gt;tamper detection&lt;/li&gt; &#xA; &lt;li&gt;memory sanitization&lt;/li&gt; &#xA; &lt;li&gt;strong key derivation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SQLCipher is based on SQLite and stable upstream release features are periodically integrated. While SQLCipher is maintained as a separate version of the source tree, the project minimizes alterations to core SQLite code whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;SQLCipher is maintained by Zetetic, LLC, and additional information and documentation is available on the official &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast performance with as little as 5-15% overhead for encryption on many operations&lt;/li&gt; &#xA; &lt;li&gt;100% of data in the database file is encrypted&lt;/li&gt; &#xA; &lt;li&gt;Good security practices (CBC mode, HMAC, key derivation)&lt;/li&gt; &#xA; &lt;li&gt;Zero-configuration and application level cryptography&lt;/li&gt; &#xA; &lt;li&gt;Algorithms provided by the peer reviewed OpenSSL crypto library.&lt;/li&gt; &#xA; &lt;li&gt;Configurable crypto providers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;SQLCipher maintains database format compatibility within the same major version number so an application on any platform can open databases created by any other application provided the major version of SQLCipher is the same between them. However, major version updates (e.g. from 3.x to 4.x) often include changes to default settings. This means that newer major versions of SQLCipher will not open databases created by older versions without using special settings. For example, SQLCipher 4 introduces many new performance and security enhancements. The new default algorithms, increased KDF iterations, and larger page size mean that SQLCipher 4 will not open databases created by SQLCipher 1.x, 2.x, or 3.x by default. Instead, an application would either need to migrate the older databases to use the new format or enable a special backwards-compatibility mode. The available options are described in SQLCipher&#39;s &lt;a href=&#34;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&#34;&gt;upgrade documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SQLCipher is also compatible with standard SQLite databases. When a key is not provided, SQLCipher will behave just like the standard SQLite library. It is also possible to convert from a plaintext database (standard SQLite) to an encrypted SQLCipher database using &lt;a href=&#34;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868&#34;&gt;ATTACH and the sqlcipher_export() convenience function&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;The SQLCipher team welcomes contributions to the core library. All contributions including pull requests and patches should be based on the &lt;code&gt;prerelease&lt;/code&gt; branch, and must be accompanied by a &lt;a href=&#34;https://www.zetetic.net/contributions/&#34;&gt;contributor agreement&lt;/a&gt;. We strongly encourage &lt;a href=&#34;https://discuss.zetetic.net/c/sqlcipher&#34;&gt;discussion&lt;/a&gt; of the proposed change prior to development and submission.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Building SQLCipher is similar to compiling a regular version of SQLite from source, with a couple of small exceptions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You &lt;em&gt;must&lt;/em&gt; define &lt;code&gt;SQLITE_HAS_CODEC&lt;/code&gt; and either &lt;code&gt;SQLITE_TEMP_STORE=2&lt;/code&gt; or &lt;code&gt;SQLITE_TEMP_STORE=3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You will need to link against a support cryptographic provider (OpenSSL, LibTomCrypt, CommonCrypto/Security.framework, or NSS)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following examples demonstrate linking against OpenSSL, which is a readily available provider on most Unix-like systems.&lt;/p&gt; &#xA;&lt;p&gt;Example 1. Static linking (replace /opt/local/lib with the path to libcrypto.a). Note in this example, &lt;code&gt;--enable-tempstore=yes&lt;/code&gt; is setting &lt;code&gt;SQLITE_TEMP_STORE=2&lt;/code&gt; for the build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-tempstore=yes CFLAGS=&#34;-DSQLITE_HAS_CODEC&#34; \&#xA;&#x9;LDFLAGS=&#34;/opt/local/lib/libcrypto.a&#34;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 2. Dynamic linking&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-tempstore=yes CFLAGS=&#34;-DSQLITE_HAS_CODEC&#34; \&#xA;&#x9;LDFLAGS=&#34;-lcrypto&#34;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The full SQLite test suite will not complete successfully when using SQLCipher. In some cases encryption interferes with low-level tests that require access to database file data or features which are unsupported by SQLCipher. Those tests that are intended to support encryption are intended for non-SQLCipher implementations. In addition, because SQLite tests are not always isolated, if one test fails it can trigger a domino effect with other failures in later steps.&lt;/p&gt; &#xA;&lt;p&gt;As a result, the SQLCipher package includes it&#39;s own independent tests that exercise and verify the core functionality of the SQLCipher extensions. This test suite is intended to provide an abbreviated verification of SQLCipher&#39;s internal logic; it does not perform an exhaustive test of the SQLite database system as a whole or verify functionality on specific platforms. Because SQLCipher is based on stable upstream builds of SQLite, it is considered a basic assumption that the core SQLite library code is operating properly (the SQLite core is almost untouched in SQLCipher). Thus, the additional SQLCipher-specific test provide the requisite verification that the library is operating as expected with SQLCipher&#39;s security features enabled.&lt;/p&gt; &#xA;&lt;p&gt;To run SQLCipher specific tests, configure as described here and run the following to execute the tests and receive a report of the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-tempstore=yes --enable-fts5 CFLAGS=&#34;-DSQLITE_HAS_CODEC -DSQLCIPHER_TEST&#34; \&#xA;&#x9;LDFLAGS=&#34;-lcrypto&#34;&#xA;$ make testfixture&#xA;$ ./testfixture test/sqlcipher.test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encrypting a database&lt;/h2&gt; &#xA;&lt;p&gt;To specify an encryption passphrase for the database via the SQL interface you use a PRAGMA. The passphrase you enter is passed through PBKDF2 key derivation to obtain the encryption key for the database&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA key = &#39;passphrase&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, you can specify an exact byte sequence using a blob literal. If you use this method it is your responsibility to ensure that the data you provide is a 64 character hex string, which will be converted directly to 32 bytes (256 bits) of key data without key derivation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA key = &#34;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To encrypt a database programmatically you can use the &lt;code&gt;sqlite3_key&lt;/code&gt; function. The data provided in &lt;code&gt;pKey&lt;/code&gt; is converted to an encryption key according to the same rules as &lt;code&gt;PRAGMA key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;int sqlite3_key(sqlite3 *db, const void *pKey, int nKey);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PRAGMA key&lt;/code&gt; or &lt;code&gt;sqlite3_key&lt;/code&gt; should be called as the first operation when a database is open.&lt;/p&gt; &#xA;&lt;h2&gt;Changing a database key&lt;/h2&gt; &#xA;&lt;p&gt;To change the encryption passphrase for an existing database you may use the rekey PRAGMA after you&#39;ve supplied the correct database password;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA key = &#39;passphrase&#39;; -- start with the existing database passphrase&#xA;PRAGMA rekey = &#39;new-passphrase&#39;; -- rekey will reencrypt with the new passphrase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The hex rekey pragma may be used to rekey to a specific binary value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRAGMA rekey = &#34;x&#39;2DD29CA851E7B56E4697B0E1F08507293D761A05CE4D1B628663F411A8086D99&#39;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be accomplished programmatically by using sqlite3_rekey;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite3_rekey(sqlite3 *db, const void *pKey, int nKey)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The primary source for complete documentation (design, API, platforms, usage) is the SQLCipher website:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/documentation&#34;&gt;https://www.zetetic.net/sqlcipher/documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The primary avenue for support and discussions is the SQLCipher discuss site:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discuss.zetetic.net/c/sqlcipher&#34;&gt;https://discuss.zetetic.net/c/sqlcipher&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issues or support questions on using SQLCipher should be entered into the GitHub Issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sqlcipher/sqlcipher/issues&#34;&gt;https://github.com/sqlcipher/sqlcipher/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please DO NOT post issues, support questions, or other problems to blog posts about SQLCipher as we do not monitor them frequently.&lt;/p&gt; &#xA;&lt;p&gt;If you are using SQLCipher in your own software please let us know at &lt;a href=&#34;mailto:support@zetetic.net&#34;&gt;support@zetetic.net&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Community Edition Open Source License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2020, ZETETIC LLC All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the ZETETIC LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY ZETETIC LLC &#39;&#39;AS IS&#39;&#39; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;h1&gt;Begin SQLite README.md&lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;SQLite Source Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the complete source code for the &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite database engine&lt;/a&gt;. Some test scripts are also included. However, many other test scripts and most of the documentation are managed separately.&lt;/p&gt; &#xA;&lt;h2&gt;Version Control&lt;/h2&gt; &#xA;&lt;p&gt;SQLite sources are managed using the &lt;a href=&#34;https://www.fossil-scm.org/&#34;&gt;Fossil&lt;/a&gt;, a distributed version control system that was specifically designed and written to support SQLite development. The &lt;a href=&#34;https://sqlite.org/src/timeline&#34;&gt;Fossil repository&lt;/a&gt; contains the urtext.&lt;/p&gt; &#xA;&lt;p&gt;If you are reading this on GitHub or some other Git repository or service, then you are looking at a mirror. The names of check-ins and other artifacts in a Git mirror are different from the official names for those objects. The offical names for check-ins are found in a footer on the check-in comment for authorized mirrors. The official check-in name can also be seen in the &lt;code&gt;manifest.uuid&lt;/code&gt; file in the root of the tree. Always use the official name, not the Git-name, when communicating about an SQLite check-in.&lt;/p&gt; &#xA;&lt;p&gt;If you pulled your SQLite source code from a secondary source and want to verify its integrity, there are hints on how to do that in the &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/#vauth&#34;&gt;Verifying Code Authenticity&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining The Code&lt;/h2&gt; &#xA;&lt;p&gt;If you do not want to use Fossil, you can download tarballs or ZIP archives or &lt;a href=&#34;https://sqlite.org/cli.html#sqlar&#34;&gt;SQLite archives&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Lastest trunk check-in as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest release as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz?r=release&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip?r=release&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar?r=release&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For other check-ins, substitute an appropriate branch name or tag or hash prefix in place of &#34;release&#34; in the URLs of the previous bullet. Or browse the &lt;a href=&#34;https://www.sqlite.org/src/timeline&#34;&gt;timeline&lt;/a&gt; to locate the check-in desired, click on its information page link, then click on the &#34;Tarball&#34; or &#34;ZIP Archive&#34; links on the information page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do want to use Fossil to check out the source tree, first install Fossil version 2.0 or later. (Source tarballs and precompiled binaries available &lt;a href=&#34;https://www.fossil-scm.org/fossil/uv/download.html&#34;&gt;here&lt;/a&gt;. Fossil is a stand-alone program. To install, simply download or build the single executable file and put that file someplace on your $PATH.) Then run commands like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mkdir -p ~/sqlite ~/Fossils&#xA;    cd ~/sqlite&#xA;    fossil clone https://www.sqlite.org/src ~/Fossils/sqlite.fossil&#xA;    fossil open ~/Fossils/sqlite.fossil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After setting up a repository using the steps above, you can always update to the lastest version using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    fossil update trunk   ;# latest trunk check-in&#xA;    fossil update release ;# latest official release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or type &#34;fossil ui&#34; to get a web-based user interface.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling for Unix-like systems&lt;/h2&gt; &#xA;&lt;p&gt;First create a directory in which to place the build products. It is recommended, but not required, that the build directory be separate from the source directory. Cd into the build directory and then from the build directory run the configure script found at the root of the source tree. Then run &#34;make&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    tar xzf sqlite.tar.gz    ;#  Unpack the source tree into &#34;sqlite&#34;&#xA;    mkdir bld                ;#  Build will occur in a sibling directory&#xA;    cd bld                   ;#  Change to the build directory&#xA;    ../sqlite/configure      ;#  Run the configure script&#xA;    make                     ;#  Run the makefile.&#xA;    make sqlite3.c           ;#  Build the &#34;amalgamation&#34; source file&#xA;    make test                ;#  Run some tests (requires Tcl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the makefile for additional targets.&lt;/p&gt; &#xA;&lt;p&gt;The configure script uses autoconf 2.61 and libtool. If the configure script does not work out for you, there is a generic makefile named &#34;Makefile.linux-gcc&#34; in the top directory of the source tree that you can copy and edit to suit your needs. Comments on the generic makefile show what changes are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Using MSVC for Windows systems&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, all applicable build products can be compiled with MSVC. First open the command prompt window associated with the desired compiler version (e.g. &#34;Developer Command Prompt for VS2013&#34;). Next, use NMAKE with the provided &#34;Makefile.msc&#34; to build one of the supported targets.&lt;/p&gt; &#xA;&lt;p&gt;For example, from the parent directory of the source subtree named &#34;sqlite&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mkdir bld&#xA;    cd bld&#xA;    nmake /f ..\sqlite\Makefile.msc TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc sqlite3.c TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc sqlite3.dll TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc sqlite3.exe TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc test TOP=..\sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are several build options that can be set via the NMAKE command line. For example, to build for WinRT, simply add &#34;FOR_WINRT=1&#34; argument to the &#34;sqlite3.dll&#34; command line above. When debugging into the SQLite code, adding the &#34;DEBUG=1&#34; argument to one of the above command lines is recommended.&lt;/p&gt; &#xA;&lt;p&gt;SQLite does not require &lt;a href=&#34;http://www.tcl.tk/&#34;&gt;Tcl&lt;/a&gt; to run, but a Tcl installation is required by the makefiles (including those for MSVC). SQLite contains a lot of generated code and Tcl is used to do much of that code generation.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code Tour&lt;/h2&gt; &#xA;&lt;p&gt;Most of the core source files are in the &lt;strong&gt;src/&lt;/strong&gt; subdirectory. The &lt;strong&gt;src/&lt;/strong&gt; folder also contains files used to build the &#34;testfixture&#34; test harness. The names of the source files used by &#34;testfixture&#34; all begin with &#34;test&#34;. The &lt;strong&gt;src/&lt;/strong&gt; also contains the &#34;shell.c&#34; file which is the main program for the &#34;sqlite3.exe&#34; &lt;a href=&#34;https://sqlite.org/cli.html&#34;&gt;command-line shell&lt;/a&gt; and the &#34;tclsqlite.c&#34; file which implements the &lt;a href=&#34;https://sqlite.org/tclsqlite.html&#34;&gt;Tcl bindings&lt;/a&gt; for SQLite. (Historical note: SQLite began as a Tcl extension and only later escaped to the wild as an independent library.)&lt;/p&gt; &#xA;&lt;p&gt;Test scripts and programs are found in the &lt;strong&gt;test/&lt;/strong&gt; subdirectory. Addtional test code is found in other source repositories. See &lt;a href=&#34;http://www.sqlite.org/testing.html&#34;&gt;How SQLite Is Tested&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;ext/&lt;/strong&gt; subdirectory contains code for extensions. The Full-text search engine is in &lt;strong&gt;ext/fts3&lt;/strong&gt;. The R-Tree engine is in &lt;strong&gt;ext/rtree&lt;/strong&gt;. The &lt;strong&gt;ext/misc&lt;/strong&gt; subdirectory contains a number of smaller, single-file extensions, such as a REGEXP operator.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;tool/&lt;/strong&gt; subdirectory contains various scripts and programs used for building generated source code files or for testing or for generating accessory programs such as &#34;sqlite3_analyzer(.exe)&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Generated Source Code Files&lt;/h3&gt; &#xA;&lt;p&gt;Several of the C-language source files used by SQLite are generated from other sources rather than being typed in manually by a programmer. This section will summarize those automatically-generated files. To create all of the automatically-generated files, simply run &#34;make target_source&#34;. The &#34;target_source&#34; make target will create a subdirectory &#34;tsrc/&#34; and fill it with all the source files needed to build SQLite, both manually-edited files and automatically-generated files.&lt;/p&gt; &#xA;&lt;p&gt;The SQLite interface is defined by the &lt;strong&gt;sqlite3.h&lt;/strong&gt; header file, which is generated from src/sqlite.h.in, ./manifest.uuid, and ./VERSION. The &lt;a href=&#34;http://www.tcl.tk&#34;&gt;Tcl script&lt;/a&gt; at tool/mksqlite3h.tcl does the conversion. The manifest.uuid file contains the SHA3 hash of the particular check-in and is used to generate the SQLITE_SOURCE_ID macro. The VERSION file contains the current SQLite version number. The sqlite3.h header is really just a copy of src/sqlite.h.in with the source-id and version number inserted at just the right spots. Note that comment text in the sqlite3.h file is used to generate much of the SQLite API documentation. The Tcl scripts used to generate that documentation are in a separate source repository.&lt;/p&gt; &#xA;&lt;p&gt;The SQL language parser is &lt;strong&gt;parse.c&lt;/strong&gt; which is generate from a grammar in the src/parse.y file. The conversion of &#34;parse.y&#34; into &#34;parse.c&#34; is done by the &lt;a href=&#34;https://raw.githubusercontent.com/sqlcipher/sqlcipher/master/doc/lemon.html&#34;&gt;lemon&lt;/a&gt; LALR(1) parser generator. The source code for lemon is at tool/lemon.c. Lemon uses the tool/lempar.c file as a template for generating its parser. Lemon also generates the &lt;strong&gt;parse.h&lt;/strong&gt; header file, at the same time it generates parse.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;opcodes.h&lt;/strong&gt; header file contains macros that define the numbers corresponding to opcodes in the &#34;VDBE&#34; virtual machine. The opcodes.h file is generated by the scanning the src/vdbe.c source file. The Tcl script at ./mkopcodeh.tcl does this scan and generates opcodes.h. A second Tcl script, ./mkopcodec.tcl, then scans opcodes.h to generate the &lt;strong&gt;opcodes.c&lt;/strong&gt; source file, which contains a reverse mapping from opcode-number to opcode-name that is used for EXPLAIN output.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;keywordhash.h&lt;/strong&gt; header file contains the definition of a hash table that maps SQL language keywords (ex: &#34;CREATE&#34;, &#34;SELECT&#34;, &#34;INDEX&#34;, etc.) into the numeric codes used by the parse.c parser. The keywordhash.h file is generated by a C-language program at tool mkkeywordhash.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;pragma.h&lt;/strong&gt; header file contains various definitions used to parse and implement the PRAGMA statements. The header is generated by a script &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt;. If you want to add a new PRAGMA, edit the &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt; file to insert the information needed by the parser for your new PRAGMA, then run the script to regenerate the &lt;strong&gt;pragma.h&lt;/strong&gt; header file.&lt;/p&gt; &#xA;&lt;h3&gt;The Amalgamation&lt;/h3&gt; &#xA;&lt;p&gt;All of the individual C source code and header files (both manually-edited and automatically-generated) can be combined into a single big source file &lt;strong&gt;sqlite3.c&lt;/strong&gt; called &#34;the amalgamation&#34;. The amalgamation is the recommended way of using SQLite in a larger application. Combining all individual source code files into a single big source code file allows the C compiler to perform more cross-procedure analysis and generate better code. SQLite runs about 5% faster when compiled from the amalgamation versus when compiled from individual source files.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation is generated from the tool/mksqlite3c.tcl Tcl script. First, all of the individual source files must be gathered into the tsrc/ subdirectory (using the equivalent of &#34;make target_source&#34;) then the tool/mksqlite3c.tcl script is run to copy them all together in just the right order while resolving internal &#34;#include&#34; references.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation source file is more than 200K lines long. Some symbolic debuggers (most notably MSVC) are unable to deal with files longer than 64K lines. To work around this, a separate Tcl script, tool/split-sqlite3c.tcl, can be run on the amalgamation to break it up into a single small C file called &lt;strong&gt;sqlite3-all.c&lt;/strong&gt; that does #include on about seven other files named &lt;strong&gt;sqlite3-1.c&lt;/strong&gt;, &lt;strong&gt;sqlite3-2.c&lt;/strong&gt;, ..., &lt;strong&gt;sqlite3-7.c&lt;/strong&gt;. In this way, all of the source code is contained within a single translation unit so that the compiler can do extra cross-procedure optimization, but no individual source file exceeds 32K lines in length.&lt;/p&gt; &#xA;&lt;h2&gt;How It All Fits Together&lt;/h2&gt; &#xA;&lt;p&gt;SQLite is modular in design. See the &lt;a href=&#34;http://www.sqlite.org/arch.html&#34;&gt;architectural description&lt;/a&gt; for details. Other documents that are useful in (helping to understand how SQLite works include the &lt;a href=&#34;http://www.sqlite.org/fileformat2.html&#34;&gt;file format&lt;/a&gt; description, the &lt;a href=&#34;http://www.sqlite.org/opcode.html&#34;&gt;virtual machine&lt;/a&gt; that runs prepared statements, the description of &lt;a href=&#34;http://www.sqlite.org/atomiccommit.html&#34;&gt;how transactions work&lt;/a&gt;, and the &lt;a href=&#34;http://www.sqlite.org/optoverview.html&#34;&gt;overview of the query planner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Years of effort have gone into optimizating SQLite, both for small size and high performance. And optimizations tend to result in complex code. So there is a lot of complexity in the current SQLite implementation. It will not be the easiest library in the world to hack.&lt;/p&gt; &#xA;&lt;p&gt;Key files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqlite.h.in&lt;/strong&gt; - This file defines the public interface to the SQLite library. Readers will need to be familiar with this interface before trying to understand how the library works internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqliteInt.h&lt;/strong&gt; - this header file defines many of the data objects used internally by SQLite. In addition to &#34;sqliteInt.h&#34;, some subsystems have their own header files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;parse.y&lt;/strong&gt; - This file describes the LALR(1) grammar that SQLite uses to parse SQL statements, and the actions that are taken at each step in the parsing process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;vdbe.c&lt;/strong&gt; - This file implements the virtual machine that runs prepared statements. There are various helper files whose names begin with &#34;vdbe&#34;. The VDBE has access to the vdbeInt.h header file which defines internal data objects. The rest of SQLite interacts with the VDBE through an interface defined by vdbe.h.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;where.c&lt;/strong&gt; - This file (together with its helper files named by &#34;where*.c&#34;) analyzes the WHERE clause and generates virtual machine code to run queries efficiently. This file is sometimes called the &#34;query optimizer&#34;. It has its own private header file, whereInt.h, that defines data objects used internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;btree.c&lt;/strong&gt; - This file contains the implementation of the B-Tree storage engine used by SQLite. The interface to the rest of the system is defined by &#34;btree.h&#34;. The &#34;btreeInt.h&#34; header defines objects used internally by btree.c and not published to the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pager.c&lt;/strong&gt; - This file contains the &#34;pager&#34; implementation, the module that implements transactions. The &#34;pager.h&#34; header file defines the interface between pager.c and the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;os_unix.c&lt;/strong&gt; and &lt;strong&gt;os_win.c&lt;/strong&gt; - These two files implement the interface between SQLite and the underlying operating system using the run-time pluggable VFS interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;shell.c.in&lt;/strong&gt; - This file is not part of the core SQLite library. This is the file that, when linked against sqlite3.a, generates the &#34;sqlite3.exe&#34; command-line shell. The &#34;shell.c.in&#34; file is transformed into &#34;shell.c&#34; as part of the build process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tclsqlite.c&lt;/strong&gt; - This file implements the Tcl bindings for SQLite. It is not part of the core SQLite library. But as most of the tests in this repository are written in Tcl, the Tcl language bindings are important.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;em&gt;test&lt;/em&gt;.c&lt;/em&gt;* - Files in the src/ folder that begin with &#34;test&#34; go into building the &#34;testfixture.exe&#34; program. The testfixture.exe program is an enhanced Tcl shell. The testfixture.exe program runs scripts in the test/ folder to validate the core SQLite code. The testfixture program (and some other test programs too) is build and run when you type &#34;make test&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ext/misc/json1.c&lt;/strong&gt; - This file implements the various JSON functions that are build into SQLite.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many other source files. Each has a succinct header comment that describes its purpose and role within the larger system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;vauth&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying Code Authenticity&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;manifest&lt;/code&gt; file at the root directory of the source tree contains either a SHA3-256 hash (for newer files) or a SHA1 hash (for older files) for every source file in the repository. The SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file itself is the official name of the version of the source tree that you have. The &lt;code&gt;manifest.uuid&lt;/code&gt; file should contain the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file. If all of the above hash comparisons are correct, then you can be confident that your source tree is authentic and unadulterated.&lt;/p&gt; &#xA;&lt;p&gt;The format of the &lt;code&gt;manifest&lt;/code&gt; file should be mostly self-explanatory, but if you want details, they are available &lt;a href=&#34;https://fossil-scm.org/fossil/doc/trunk/www/fileformat.wiki#manifest&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;p&gt;The main SQLite website is &lt;a href=&#34;http://www.sqlite.org/&#34;&gt;http://www.sqlite.org/&lt;/a&gt; with geographically distributed backups at &lt;a href=&#34;http://www2.sqlite.org&#34;&gt;http://www2.sqlite.org/&lt;/a&gt; and &lt;a href=&#34;http://www3.sqlite.org&#34;&gt;http://www3.sqlite.org/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>randorisec/CVE-2022-34918-LPE-PoC</title>
    <updated>2022-07-24T01:35:58Z</updated>
    <id>tag:github.com,2022-07-24:/randorisec/CVE-2022-34918-LPE-PoC</id>
    <link href="https://github.com/randorisec/CVE-2022-34918-LPE-PoC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2022-34918 LPE PoC&lt;/h1&gt; &#xA;&lt;p&gt;LPE exploit for CVE-2022-34918. This exploit has been written for the kernel &lt;code&gt;Linux ubuntu 5.15.0-39-generic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find the associated write-up on our &lt;a href=&#34;https://randorisec.fr/crack-linux-firewall/&#34;&gt;blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;get_root&lt;/code&gt; should be in the current folder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls&#xA;get_root poc&#xA;$ ./poc&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Kitware/CMake</title>
    <updated>2022-07-24T01:35:58Z</updated>
    <id>tag:github.com,2022-07-24:/Kitware/CMake</id>
    <link href="https://github.com/Kitware/CMake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of CMake upstream repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;CMake&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;CMake is a cross-platform, open-source build system generator. For full documentation visit the &lt;code&gt;CMake Home Page&lt;/code&gt;_ and the &lt;code&gt;CMake Documentation Page&lt;/code&gt;&lt;em&gt;. The &lt;code&gt;CMake Community Wiki&lt;/code&gt;&lt;/em&gt; also references useful guides and recipes.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;CMake Home Page&lt;/code&gt;: &lt;a href=&#34;https://cmake.org&#34;&gt;https://cmake.org&lt;/a&gt; .. _&lt;code&gt;CMake Documentation Page&lt;/code&gt;: &lt;a href=&#34;https://cmake.org/documentation&#34;&gt;https://cmake.org/documentation&lt;/a&gt; .. _&lt;code&gt;CMake Community Wiki&lt;/code&gt;: &lt;a href=&#34;https://gitlab.kitware.com/cmake/community/-/wikis/home&#34;&gt;https://gitlab.kitware.com/cmake/community/-/wikis/home&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CMake is maintained and supported by &lt;code&gt;Kitware&lt;/code&gt;_ and developed in collaboration with a productive community of contributors.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;Kitware&lt;/code&gt;: &lt;a href=&#34;http://www.kitware.com/cmake&#34;&gt;http://www.kitware.com/cmake&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;CMake is distributed under the OSI-approved BSD 3-clause License. See &lt;code&gt;Copyright.txt&lt;/code&gt;_ for details.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;Copyright.txt&lt;/code&gt;: Copyright.txt&lt;/p&gt; &#xA;&lt;h1&gt;Building CMake&lt;/h1&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Windows&lt;/li&gt; &#xA; &lt;li&gt;Apple macOS&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD&lt;/li&gt; &#xA; &lt;li&gt;Solaris&lt;/li&gt; &#xA; &lt;li&gt;AIX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other UNIX-like operating systems may work too out of the box, if not it should not be a major problem to port CMake to this platform. Please post to the &lt;code&gt;CMake Discourse Forum&lt;/code&gt;_ to ask if others have had experience with the platform.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;CMake Discourse Forum&lt;/code&gt;: &lt;a href=&#34;https://discourse.cmake.org&#34;&gt;https://discourse.cmake.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building CMake from Scratch&lt;/h2&gt; &#xA;&lt;p&gt;UNIX/Mac OSX/MinGW/MSYS/Cygwin ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;You need to have a C++ compiler (supporting C++11) and a &lt;code&gt;make&lt;/code&gt; installed. Run the &lt;code&gt;bootstrap&lt;/code&gt; script you find in the source directory of CMake. You can use the &lt;code&gt;--help&lt;/code&gt; option to see the supported options. You may use the &lt;code&gt;--prefix=&amp;lt;install_prefix&amp;gt;&lt;/code&gt; option to specify a custom installation directory for CMake. Once this has finished successfully, run &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you simply want to build and install CMake from source, you can build directly in the source tree::&lt;/p&gt; &#xA;&lt;p&gt;$ ./bootstrap &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/p&gt; &#xA;&lt;p&gt;Or, if you plan to develop CMake or otherwise run the test suite, create a separate build tree::&lt;/p&gt; &#xA;&lt;p&gt;$ mkdir cmake-build &amp;amp;&amp;amp; cd cmake-build $ ../cmake-source/bootstrap &amp;amp;&amp;amp; make&lt;/p&gt; &#xA;&lt;p&gt;Windows ^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;There are two ways for building CMake under Windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile with MSVC from VS 2015 or later. You need to download and install a binary release of CMake. You can get these releases from the &lt;code&gt;CMake Download Page&lt;/code&gt;&lt;em&gt;. Then proceed with the instructions below for &lt;code&gt;Building CMake with CMake&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bootstrap with MinGW under MSYS2. Download and install &lt;code&gt;MSYS2&lt;/code&gt;_. Then install the required build tools::&lt;/p&gt; &lt;p&gt;$ pacman -S --needed git base-devel mingw-w64-x86_64-gcc&lt;/p&gt; &lt;p&gt;and bootstrap as above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;CMake Download Page&lt;/code&gt;: &lt;a href=&#34;https://cmake.org/download&#34;&gt;https://cmake.org/download&lt;/a&gt; .. _&lt;code&gt;MSYS2&lt;/code&gt;: &lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building CMake with CMake&lt;/h2&gt; &#xA;&lt;p&gt;You can build CMake as any other project with a CMake-based build system: run the installed CMake on the sources of this CMake with your preferred options and generators. Then build it and install it. For instructions how to do this, see documentation on &lt;code&gt;Running CMake&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;Running CMake&lt;/code&gt;: &lt;a href=&#34;https://cmake.org/runningcmake&#34;&gt;https://cmake.org/runningcmake&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build the documentation, install &lt;code&gt;Sphinx&lt;/code&gt;_ and configure CMake with &lt;code&gt;-DSPHINX_HTML=ON&lt;/code&gt; and/or &lt;code&gt;-DSPHINX_MAN=ON&lt;/code&gt; to enable the &#34;html&#34; or &#34;man&#34; builder. Add &lt;code&gt;-DSPHINX_EXECUTABLE=/path/to/sphinx-build&lt;/code&gt; if the tool is not found automatically.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;Sphinx&lt;/code&gt;: &lt;a href=&#34;http://sphinx-doc.org&#34;&gt;http://sphinx-doc.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reporting Bugs&lt;/h1&gt; &#xA;&lt;p&gt;If you have found a bug:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have a patch, please read the &lt;code&gt;CONTRIBUTING.rst&lt;/code&gt;_ document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, please post to the &lt;code&gt;CMake Discourse Forum&lt;/code&gt;_ and ask about the expected and observed behaviors to determine if it is really a bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, if the issue is not resolved by the above steps, open an entry in the &lt;code&gt;CMake Issue Tracker&lt;/code&gt;_.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;CMake Issue Tracker&lt;/code&gt;: &lt;a href=&#34;https://gitlab.kitware.com/cmake/cmake/-/issues&#34;&gt;https://gitlab.kitware.com/cmake/cmake/-/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;code&gt;CONTRIBUTING.rst&lt;/code&gt;_ for instructions to contribute.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;CONTRIBUTING.rst&lt;/code&gt;: CONTRIBUTING.rst&lt;/p&gt;</summary>
  </entry>
</feed>