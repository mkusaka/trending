<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-18T01:31:36Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kenzok8/small-package</title>
    <updated>2023-04-18T01:31:36Z</updated>
    <id>tag:github.com,2023-04-18:/kenzok8/small-package</id>
    <link href="https://github.com/kenzok8/small-package" rel="alternate"></link>
    <summary type="html">&lt;p&gt;自动同步更新上游库软件&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats.vercel.app/api?username=kenzok8&amp;amp;show_icons=true&amp;amp;theme=merko&#34; alt=&#34;kenzo github stats&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;同步上游分支代码&lt;/h1&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/issues/kenzok8/small-package?color=green&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/stars/kenzok8/small-package?color=yellow&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/forks/kenzok8/small-package?color=orange&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/license/kenzok8/small-package?color=ff69b4&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/languages/code-size/kenzok8/small-package?color=blueviolet&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;small-package&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;常用OpenWrt软件包源码合集，同步上游更新！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通用版luci适合18.06与19.07&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;关于有好的插件请在issues提交&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;感谢以上github仓库所有者！&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;插件下载:&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kenzok8/compile-package/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kenzok8/compile-package?style=for-the-badge&amp;amp;label=%E6%8F%92%E4%BB%B6%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;关于Secrets、TOKEN的小知识&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;首先需要获取 &lt;strong&gt;Github Token&lt;/strong&gt;: &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;点击这里&lt;/a&gt; 获取,&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;Note&lt;/code&gt;项填写一个名称,&lt;code&gt;Select scopes&lt;/code&gt;不理解就&lt;strong&gt;全部打勾&lt;/strong&gt;,操作完成后点击下方&lt;code&gt;Generate token&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;复制页面中生成的 &lt;strong&gt;Token&lt;/strong&gt;,并保存到本地,&lt;strong&gt;Token 只会显示一次!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fork&lt;/strong&gt; 我的&lt;code&gt;small-package&lt;/code&gt;仓库,然后进入你的&lt;code&gt;small-package&lt;/code&gt;仓库进行之后的设置&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;点击上方菜单中的&lt;code&gt;Settings&lt;/code&gt;,依次点击&lt;code&gt;Secrets&lt;/code&gt;-&lt;code&gt;New repository secret&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;其中&lt;code&gt;Name&lt;/code&gt;项填写&lt;code&gt;ACCESS_TOKEN&lt;/code&gt;,然后将你的 &lt;strong&gt;Token&lt;/strong&gt; 粘贴到&lt;code&gt;Value&lt;/code&gt;项,完成后点击&lt;code&gt;Add secert&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;对应&lt;code&gt;.github/workflows&lt;/code&gt;目录下的&lt;code&gt;yml&lt;/code&gt;工作流文件里的&lt;code&gt;ACCESS_TOKEN&lt;/code&gt;名称（依据自己yml文件修改）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在仓库&lt;code&gt;Settings-&amp;gt;Secrets&lt;/code&gt;中添加 &lt;code&gt;SCKEY &lt;/code&gt;可通过&lt;a href=&#34;http://sc.ftqq.com&#34;&gt;Server酱&lt;/a&gt; 推送编译结果到微信&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在仓库&lt;code&gt;Settings-&amp;gt;Secrets&lt;/code&gt;中添加 &lt;code&gt;TELEGRAM_CHAT_ID, TELEGRAM_TOKEN &lt;/code&gt;可推送编译结果到&lt;code&gt;Telegram Bot&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;使用方式（三选一）：&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;先cd进package目录，然后执行&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; git clone https://github.com/kenzok8/small-package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;或者添加下面代码到feeds.conf.default文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; src-git small8 https://github.com/kenzok8/small-package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;lede/下运行 或者openwrt/下运行&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kenzok8/small-package package/small-package&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>michal-z/zig-gamedev</title>
    <updated>2023-04-18T01:31:36Z</updated>
    <id>tag:github.com,2023-04-18:/michal-z/zig-gamedev</id>
    <link href="https://github.com/michal-z/zig-gamedev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building game development ecosystem for @ziglang!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Please note that the project requires latest Zig compiler (master/nightly). It can be downloaded &lt;a href=&#34;https://ziglang.org/download/&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#libraries&#34;&gt;Libraries&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#sample-applications-native-wgpu&#34;&gt;Sample applications&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#vision&#34;&gt;Vision&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#others-using-zig-gamedev&#34;&gt;Others using zig-gamedev&lt;/a&gt; - &lt;a href=&#34;https://github.com/michal-z/zig-gamedev/wiki/Progress-Reports&#34;&gt;Monthly reports&lt;/a&gt; - &lt;a href=&#34;https://github.com/michal-z/zig-gamedev/wiki/Roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;zig-gamedev project&lt;/h1&gt; &#xA;&lt;p&gt;We build game development ecosystem for &lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig programming language&lt;/a&gt;, everyday since July 2021. Please consider &lt;a href=&#34;https://github.com/sponsors/michal-z&#34;&gt;supporting the project&lt;/a&gt;. We create:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform and composable &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#libraries&#34;&gt;libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#sample-applications-native-wgpu&#34;&gt;sample applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DirectX 12 &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#sample-applications-directx-12&#34;&gt;sample applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mini-games (in planning)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started on Windows/Linux/macOS try out &lt;a href=&#34;https://github.com/michal-z/zig-gamedev/tree/main/samples/physically_based_rendering_wgpu&#34;&gt;physically based rendering (wgpu)&lt;/a&gt; sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/michal-z/zig-gamedev.git&#xA;cd zig-gamedev&#xA;zig build physically_based_rendering_wgpu-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Latest version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zphysics&#34;&gt;zphysics&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.0.5&lt;/td&gt; &#xA;   &lt;td&gt;Zig API and C API for &lt;a href=&#34;https://github.com/jrouwe/JoltPhysics&#34;&gt;Jolt Physics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zflecs&#34;&gt;zflecs&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;Zig bindings for &lt;a href=&#34;https://github.com/SanderMertens/flecs&#34;&gt;flecs&lt;/a&gt; ECS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zopengl&#34;&gt;zopengl&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.1.0&lt;/td&gt; &#xA;   &lt;td&gt;OpenGL loader (supports 3.3 Core Profile and ES 2.0 Profile)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zsdl&#34;&gt;zsdl&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;Bindings for SDL2 (wip)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zgpu&#34;&gt;zgpu&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Small helper library built on top of native wgpu implementation (&lt;a href=&#34;https://github.com/michal-z/dawn-bin&#34;&gt;Dawn&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zgui&#34;&gt;zgui&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.6&lt;/td&gt; &#xA;   &lt;td&gt;Easy to use &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;dear imgui&lt;/a&gt; bindings (includes &lt;a href=&#34;https://github.com/epezent/implot&#34;&gt;ImPlot&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zaudio&#34;&gt;zaudio&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.3&lt;/td&gt; &#xA;   &lt;td&gt;Fully-featured audio library built on top of &lt;a href=&#34;https://github.com/mackron/miniaudio&#34;&gt;miniaudio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zmath&#34;&gt;zmath&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.6&lt;/td&gt; &#xA;   &lt;td&gt;SIMD math library for game developers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zstbi&#34;&gt;zstbi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.3&lt;/td&gt; &#xA;   &lt;td&gt;Image reading, writing and resizing with &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb&lt;/a&gt; libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zmesh&#34;&gt;zmesh&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Loading, generating, processing and optimizing triangle meshes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/ztracy&#34;&gt;ztracy&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Support for CPU profiling with &lt;a href=&#34;https://github.com/wolfpld/tracy&#34;&gt;Tracy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zpool&#34;&gt;zpool&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Generic pool &amp;amp; handle implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zglfw&#34;&gt;zglfw&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.5.2&lt;/td&gt; &#xA;   &lt;td&gt;Minimalistic &lt;a href=&#34;https://github.com/glfw/glfw&#34;&gt;GLFW&lt;/a&gt; bindings with no translate-c dependency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/znoise&#34;&gt;znoise&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.1.0&lt;/td&gt; &#xA;   &lt;td&gt;Zig bindings for &lt;a href=&#34;https://github.com/Auburn/FastNoiseLite&#34;&gt;FastNoiseLite&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zjobs&#34;&gt;zjobs&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.1.0&lt;/td&gt; &#xA;   &lt;td&gt;Generic job queue implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zbullet&#34;&gt;zbullet&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.2.0&lt;/td&gt; &#xA;   &lt;td&gt;Zig bindings and C API for &lt;a href=&#34;https://github.com/bulletphysics/bullet3&#34;&gt;Bullet physics library&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zwin32&#34;&gt;zwin32&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Zig bindings for Win32 API (d3d12, d3d11, xaudio2, directml, wasapi and more)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zd3d12&#34;&gt;zd3d12&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Helper library for DirectX 12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zxaudio2&#34;&gt;zxaudio2&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Helper library for XAudio2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zpix&#34;&gt;zpix&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.9.0&lt;/td&gt; &#xA;   &lt;td&gt;Support for GPU profiling with PIX for Windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very modular &#34;toolbox of libraries&#34;, user can use only the components she needs&lt;/li&gt; &#xA; &lt;li&gt;Works on Windows, macOS and Linux&lt;/li&gt; &#xA; &lt;li&gt;Has zero dependency except &lt;a href=&#34;https://ziglang.org/download/&#34;&gt;Zig compiler (master)&lt;/a&gt; and &lt;code&gt;git&lt;/code&gt; with &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;Git LFS&lt;/a&gt; - no Visual Studio, Build Tools, Windows SDK, gcc, dev packages, system headers/libs, cmake, ninja, etc. is needed&lt;/li&gt; &#xA; &lt;li&gt;Building is as easy as running &lt;code&gt;zig build&lt;/code&gt; (see: &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/#building-sample-applications&#34;&gt;Building&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Libraries are written from scratch in Zig &lt;em&gt;or&lt;/em&gt; provide Ziggified bindings for carefully selected C/C++ libraries&lt;/li&gt; &#xA; &lt;li&gt;Uses native wgpu implementation (&lt;a href=&#34;https://github.com/michal-z/dawn-bin&#34;&gt;Dawn&lt;/a&gt;) or OpenGL for cross-platfrom graphics and DirectX 12 for low-level graphics on Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample applications (native wgpu)&lt;/h2&gt; &#xA;&lt;p&gt;Some of the sample applications are listed below. More can be found in &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/&#34;&gt;samples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/physically_based_rendering_wgpu&#34;&gt;physically based rendering (wgpu)&lt;/a&gt;: This sample implements physically-based rendering (PBR) and image-based lighting (IBL) to achive realistic looking rendering results.&lt;br&gt;&lt;code&gt;zig build physically_based_rendering_wgpu-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/physically_based_rendering_wgpu&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/physically_based_rendering_wgpu/screenshot0.jpg&#34; alt=&#34;physically based rendering (wgpu)&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/audio_experiments_wgpu&#34;&gt;audio experiments (wgpu)&lt;/a&gt;: This sample lets the user to experiment with audio and observe data that feeds the hardware.&lt;br&gt;&lt;code&gt;zig build audio_experiments_wgpu-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/audio_experiments_wgpu&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/audio_experiments_wgpu/screenshot.png&#34; alt=&#34;audio experiments (wgpu)&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/bullet_physics_test_wgpu&#34;&gt;bullet physics test (wgpu)&lt;/a&gt;: This sample application demonstrates how to use full 3D physics engine in your Zig programs.&lt;br&gt;&lt;code&gt;zig build bullet_physics_test_wgpu-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/bullet_physics_test_wgpu&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/bullet_physics_test_wgpu/screenshot.jpg&#34; alt=&#34;bullet physics test (wgpu)&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/procedural_mesh_wgpu&#34;&gt;procedural mesh (wgpu)&lt;/a&gt;: This sample shows how to efficiently draw several procedurally generated meshes.&lt;br&gt;&lt;code&gt;zig build procedural_mesh_wgpu-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/procedural_mesh_wgpu&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/procedural_mesh_wgpu/screenshot.png&#34; alt=&#34;procedural mesh (wgpu)&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/gui_test_wgpu&#34;&gt;gui test (wgpu)&lt;/a&gt;: This sample shows how to use our &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/libs/zgui&#34;&gt;zgui&lt;/a&gt; library.&lt;br&gt;&lt;code&gt;zig build gui_test_wgpu-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/gui_test_wgpu&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/gui_test_wgpu/screenshot.png&#34; alt=&#34;gui test (wgpu)&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sample applications (DirectX 12)&lt;/h2&gt; &#xA;&lt;p&gt;Some of the sample applications are listed below. More can be found in &lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/&#34;&gt;samples&lt;/a&gt; directory. They can be built and run on Windows and Linux (Wine + VKD3D-Proton 2.8+):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/bindless&#34;&gt;bindless&lt;/a&gt;: This sample implements physically based shading and image based lighting to achive realistic looking rendering results. It uses bindless textures and HLSL 6.6 dynamic resources.&lt;br&gt;&lt;code&gt;zig build bindless-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/bindless&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/bindless/screenshot.png&#34; alt=&#34;bindless&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/rasterization&#34;&gt;rasterization&lt;/a&gt;: This sample application shows how GPU rasterizes triangles in slow motion.&lt;br&gt;&lt;code&gt;zig build rasterization-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/rasterization&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/rasterization/screenshot.png&#34; alt=&#34;rasterization&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/simple_raytracer&#34;&gt;simple raytracer&lt;/a&gt;: This sample implements basic hybrid renderer. It uses rasterization to resolve primary rays and raytracing (DXR) for shadow rays.&lt;br&gt;&lt;code&gt;zig build simple_raytracer-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/simple_raytracer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/simple_raytracer/screenshot.png&#34; alt=&#34;simple raytracer&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/mesh_shader_test&#34;&gt;mesh shader test&lt;/a&gt;: This sample shows how to use DirectX 12 Mesh Shader.&lt;br&gt;&lt;code&gt;zig build mesh_shader_test-run&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/mesh_shader_test&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michal-z/zig-gamedev/main/samples/mesh_shader_test/screenshot.png&#34; alt=&#34;mesh shader test&#34; height=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Others using zig-gamedev&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foxnne/aftersun&#34;&gt;Aftersun&lt;/a&gt; - Top-down 2D RPG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foxnne/pixi&#34;&gt;Pixi&lt;/a&gt; - Pixel art editor made with Zig&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ckrowland/simulations&#34;&gt;Simulations&lt;/a&gt; - GPU Accelerated agent-based modeling to visualize and simulate complex systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Srekel/elvengroin-legacy&#34;&gt;elvengroin legacy&lt;/a&gt; - TBD&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jack-ji/jok&#34;&gt;jok&lt;/a&gt; - A minimal 2D/3D game framework for Zig&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building sample applications&lt;/h2&gt; &#xA;&lt;p&gt;To build all sample applications (assuming &lt;code&gt;zig&lt;/code&gt; is in the PATH and &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;Git LFS&lt;/a&gt; is installed):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/michal-z/zig-gamedev.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd zig-gamedev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zig build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Build artifacts will show up in &lt;code&gt;zig-out/bin&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;zig build &amp;lt;sample_name&amp;gt;&lt;/code&gt; will build sample application named &lt;code&gt;&amp;lt;sample_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;zig build &amp;lt;sample_name&amp;gt;-run&lt;/code&gt; will build and run sample application named &lt;code&gt;&amp;lt;sample_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To list all available sample names run &lt;code&gt;zig build --help&lt;/code&gt; and navigate to &lt;code&gt;Steps&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;h4&gt;Build options&lt;/h4&gt; &#xA;&lt;p&gt;Options for Windows applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dzd3d12-enable-debug-layer=[bool]&lt;/code&gt; - Direct3D 12, Direct2D, DXGI debug layers enabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dzd3d12-enable-gbv=[bool]&lt;/code&gt; - Direct3D 12 GPU-Based Validation (GBV) enabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dzpix-enable=[bool]&lt;/code&gt; - PIX markers and events enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GitHub Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all people who sponsor zig-gamedev project! In particular, these fine folks sponsor zig-gamedev for $25/month or more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/derekcollison&#34;&gt;Derek Collison (derekcollison)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/garettbass&#34;&gt;Garett Bass (garettbass)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ckrowland&#34;&gt;Connor Rowland (ckrowland)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zig Software Foundation (ziglang)&lt;/li&gt; &#xA; &lt;li&gt;Joran Dirk Greef (jorangreef)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>surge-synthesizer/surge</title>
    <updated>2023-04-18T01:31:36Z</updated>
    <id>tag:github.com,2023-04-18:/surge-synthesizer/surge</id>
    <link href="https://github.com/surge-synthesizer/surge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Synthesizer plug-in (previously released as Vember Audio Surge)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Surge XT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are a musician looking to use Surge, please download the appropriate binary &lt;a href=&#34;https://surge-synthesizer.github.io&#34;&gt;from our website&lt;/a&gt;. Surge Synth Team makes regular releases for all supported platforms.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Over 2021, after the successful release of Surge 1.9, the Surge Synth team undertook an effort to rebuild Surge in JUCE and add a variety of features. This project resulted in the new version of Surge, called &#39;Surge XT&#39;. The head of this repo contains the current version of Surge XT. If you are looking to compile a stable production version of Surge, we tag each release, so if you want to compile Surge 1.9, please check out the &lt;code&gt;release_1.9.0&lt;/code&gt; tag.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;CI: &lt;a href=&#34;https://dev.azure.com/surge-synthesizer/surge/_build/latest?definitionId=2&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/surge-synthesizer/surge/_apis/build/status/surge-synthesizer.surge?branchName=main&#34; alt=&#34;CI Build Status&#34;&gt;&lt;/a&gt; Release: &lt;a href=&#34;https://dev.azure.com/surge-synthesizer/surge/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/surge-synthesizer/surge/_apis/build/status/surge-synthesizer.releases?branchName=master&#34; alt=&#34;Release Build Status&#34;&gt;&lt;/a&gt; Release-XT: &lt;a href=&#34;https://dev.azure.com/surge-synthesizer/surge/_build/latest?definitionId=13&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/surge-synthesizer/surge/_apis/build/status/surge-synthesizer.releases-xt?branchName=master&#34; alt=&#34;Release-XT Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Surge is a free and open-source hybrid synthesizer, originally written and sold as a commercial product by @kurasu/Claes Johanson at &lt;a href=&#34;http://vemberaudio.se&#34;&gt;Vember Audio&lt;/a&gt;. In September 2018, Claes decided to release a partially completed version of Surge 1.6 under GPL3, and a group of developers have been improving it since. You can learn more about the team at &lt;a href=&#34;https://surge-synth-team.org/&#34;&gt;https://surge-synth-team.org/&lt;/a&gt; or connect with us on &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge-synthesizer.github.io/master/_includes/discord_invite_link&#34;&gt;Discord&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;If you would also like to participate in discussions, testing and design of Surge, we have details below and also in the &lt;a href=&#34;https://surge-synthesizer.github.io/#contributors&#34;&gt;contributors section of the Surge website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This readme serves as the root of developer documentation for Surge.&lt;/p&gt; &#xA;&lt;h1&gt;Developing Surge XT&lt;/h1&gt; &#xA;&lt;p&gt;We welcome developers! Our workflow revolves around GitHub issues in this repository and conversations at our Discord server. You can read our developer guidelines in &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/doc/Developer%20Guide.md&#34;&gt;our developer guide document&lt;/a&gt;. If you want to contribute and are new to Git, we also have a &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/doc/How%20to%20Git.md&#34;&gt;Git How To&lt;/a&gt;, tailored at Surge development.&lt;/p&gt; &#xA;&lt;p&gt;The developer guide also contains information about testing and debugging in particular hosts on particular platforms.&lt;/p&gt; &#xA;&lt;p&gt;Surge XT uses CMake for all of its build-related tasks, and requires a set of free tools to build the synth. If you have a development environment set up, you almost definitely have what you need, but if not, please check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/#windows&#34;&gt;Setting up Build Environment on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/#macos&#34;&gt;Setting up Build Environment on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/#linux&#34;&gt;Setting up Build Environment on Linux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have set your environment up, you need to checkout the Surge code with Git, grab submodules, run CMake to configure, then run CMake to build. Your IDE may support CMake (more on that below), but a reliable way to build Surge on all platforms is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/surge-synthesizer/surge.git&#xA;cd surge&#xA;git submodule update --init --recursive&#xA;cmake -Bbuild&#xA;cmake --build build --config Release --target surge-staged-assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build all the Surge binary assets in the directory &lt;code&gt;build/surge_xt_products&lt;/code&gt; and is often enough of a formula to do a build.&lt;/p&gt; &#xA;&lt;h2&gt;Developing from your own fork&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/doc/How%20to%20Git.md&#34;&gt;Git How To&lt;/a&gt; explains how we are using Git. If you want to develop from your own fork, please consult there, but the short version is (1) fork this project on GitHub and (2) clone your fork, rather than the main repo as described above. So press the &lt;code&gt;Fork&lt;/code&gt; button here and then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:youruserid/surge.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the rest of the steps are unchanged.&lt;/p&gt; &#xA;&lt;h2&gt;Building projects for your IDE&lt;/h2&gt; &#xA;&lt;p&gt;When you run the first CMake step, CMake will generate IDE-compatible files for you. On Windows, it will generate Visual Studio files. On Mac it will generate makefiles by default, but if you add the argument &lt;code&gt;-GXcode&lt;/code&gt; you can get an XCode project if you want.&lt;/p&gt; &#xA;&lt;p&gt;Surge developers regularly develop with all sorts of tools. CLion, Visual Studio, vim, emacs, VS Code, and many others can work properly with the software.&lt;/p&gt; &#xA;&lt;h2&gt;Building a VST2&lt;/h2&gt; &#xA;&lt;p&gt;Due to licensing restrictions, VST2 builds of Surge &lt;strong&gt;may not&lt;/strong&gt; be redistributed. However, it is possible to build a VST2 of Surge for your own personal use. First, obtain a local copy of the VST2 SDK, and unzip it to a folder of your choice. Then set &lt;code&gt;VST2SDK_DIR&lt;/code&gt; to point to that folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export VST2SDK_DIR=&#34;/your/path/to/VST2SDK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, in the Windows command prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set VST2SDK_DIR=c:\path\to\VST2SDK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run CMake afresh, and build the VST2 targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bbuild_vst2&#xA;cmake --build build_vst2 --config Release --target surge-xt_VST --parallel 4&#xA;cmake --build build_vst2 --config Release --target surge-fx_VST --parallel 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then have VST2 plugins in &lt;code&gt;build_vst2/surge-xt_artefacts/Release/VST&lt;/code&gt; and &lt;code&gt;build_vst2/surge-fx_artefacts/Release/VST&lt;/code&gt; respectively. Adjust the number of cores that will be used for building process by modifying the value of &lt;code&gt;--parallel&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;h2&gt;Building with support for ASIO&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, building with ASIO is often preferred for Surge standalone, since it enables users to use the ASIO low-latency audio driver.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, due to licensing conflicts, binaries of Surge that are built with ASIO &lt;strong&gt;may not&lt;/strong&gt; be redistributed. However, you can build Surge with ASIO for your own personal use, provided you do not redistribute those builds.&lt;/p&gt; &#xA;&lt;p&gt;If you already have a copy of the ASIO SDK, simply set the following environment variable and you&#39;re good to go!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set ASIOSDK_DIR=c:\path\to\asio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you DON&#39;T have a copy of the ASIO SDK at hand, CMake can download it for you, and allow you to build with ASIO under your own personal license. To enable this functionality, run your CMake configuration command as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bbuild -DBUILD_USING_MY_ASIO_LICENSE=True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building an LV2&lt;/h2&gt; &#xA;&lt;p&gt;On Linux, using a community fork of JUCE, you can build an LV2. Here&#39;s how! We assume you have checked out Surge and can build.&lt;/p&gt; &#xA;&lt;p&gt;First, clone &lt;a href=&#34;https://github.com/lv2-porting-project/JUCE/tree/lv2&#34;&gt;https://github.com/lv2-porting-project/JUCE/tree/lv2&lt;/a&gt; on branch lv2, to some directory of your choosing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install -y lv2-dev&#xA;cd /some/location&#xA;git clone --branch lv2 https://github.com/lv2-porting-project/JUCE JUCE-lv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run a fresh CMake to (1) point to that JUCE fork and (2) activate LV2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bbuild_lv2 -DCMAKE_BUILD_TYPE=Release -DJUCE_SUPPORTS_LV2=True -DSURGE_JUCE_PATH=/some/location/JUCE-lv2/&#xA;cmake --build build_lv2 --config Release --target surge-xt_LV2 --parallel 4&#xA;cmake --build build_lv2 --config Release --target surge-fx_LV2 --parallel 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then have LV2s in &lt;code&gt;build_lv2/src/surge-xt/surge-xt_artefacts/Release/LV2&lt;/code&gt; and &lt;code&gt;build_lv2/src/surge-xt/surge-fx_artefacts/Release/LV2&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Building an Installer&lt;/h2&gt; &#xA;&lt;p&gt;The CMake target &lt;code&gt;surge-xt-distribution&lt;/code&gt; builds an install image on your platform at the end of the build process. On Mac and Linux, the installer generator is built into the platform; on Windows, our CMake file uses NuGet to download InnoSetup, so you will need the &lt;a href=&#34;https://nuget.org/&#34;&gt;nuget.exe CLI&lt;/a&gt; in your path.&lt;/p&gt; &#xA;&lt;h2&gt;Using CMake on the Command Line for More&lt;/h2&gt; &#xA;&lt;p&gt;We have a variety of other CMake options and targets which can allow you to develop and install Surge more easily.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Development&lt;/h3&gt; &#xA;&lt;p&gt;JUCE supports a mode where a plugin (AU, VST3, etc...) is copied to a local install area after a build. This is off by default with CMake, but you can turn it on with &lt;code&gt;-DSURGE_COPY_AFTER_BUILD=True&lt;/code&gt; at &lt;code&gt;cmake&lt;/code&gt; time. If you do this on Unixes, building the VST3 or AU targets will copy them to the appropriate local area (&lt;code&gt;~/.vst3&lt;/code&gt; on Linux, &lt;code&gt;~/Library/Audio/Plugins&lt;/code&gt; on Mac). On Windows it will attempt to install the VST3, so setting this option may require administrator privileges in your build environment.&lt;/p&gt; &#xA;&lt;h3&gt;CMake Install Targets (Linux and other non-Apple Unixes only)&lt;/h3&gt; &#xA;&lt;p&gt;On systems which are &lt;code&gt;UNIX AND NOT APPLE&lt;/code&gt;, the CMake file provides an install target which will install all needed assets to the &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;. This means a complete install can be accomplished by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bignore/sxt -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr&#xA;cmake --build ignore/sxt --config Release --parallel 8&#xA;sudo cmake --install ignore/sxt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you should get a working install in &lt;code&gt;/usr/bin&lt;/code&gt;, &lt;code&gt;/usr/share&lt;/code&gt; and &lt;code&gt;/usr/lib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Specific Choices&lt;/h2&gt; &#xA;&lt;h3&gt;Building 32- vs 64-bit on Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you are building with Visual Studio 2019, use the &lt;code&gt;-A&lt;/code&gt; flag in your CMake command to specify 32/64-bit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 64-bit&#xA;cmake -Bbuild -G&#34;Visual Studio 16 2019&#34; -A x64&#xA;&#xA;# 32-bit&#xA;cmake -Bbuild32 -G&#34;Visual Studio 16 2019&#34; -A Win32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using an older version of Visual Studio, you must specify your preference with your choice of CMake generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 64-bit&#xA;cmake -Bbuild -G&#34;Visual Studio 15 2017 Win64&#34;&#xA;&#xA;# 32-bit&#xA;cmake -Bbuild32 -G&#34;Visual Studio 15 2017&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building a Mac Fat Binary (ARM/Intel)&lt;/h3&gt; &#xA;&lt;p&gt;To build a fat binary on a Mac, simply add the following CMake argument to your initial CMake run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-D&#34;CMAKE_OSX_ARCHITECTURES=arm64;x86_64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building for Raspberry Pi&lt;/h3&gt; &#xA;&lt;p&gt;To build for a Raspberry Pi, you want to add the &lt;code&gt;LINUX_ON_ARM&lt;/code&gt; CMake variable when you first run CMake. Otherwise, the commands are unchanged. So, on a Pi, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bbuild -DLINUX_ON_ARM=True&#xA;cmake --build build --config Release --target surge-staged-assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-compiling for aarch64&lt;/h3&gt; &#xA;&lt;p&gt;To cross-compile for aarch64, use the CMake Linux toolchain for aarch64, as shown in the Azure pipeline here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -Bignore/xc64 -DCMAKE_TOOLCHAIN_FILE=cmake/linux-aarch64-ubuntu-crosscompile-toolchain.cmake -DCMAKE_BUILD_TYPE=DEBUG -GNinja&#xA;cmake --build ignore/xc64 --config Debug --target surge-testrunner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, that toolchain makes specific choices. You can make other choices as long as (1) you set the CMake variable &lt;code&gt;LINUX_ON_ARM&lt;/code&gt; and (2) you make sure your host and your target compiler are both 64-bit.&lt;/p&gt; &#xA;&lt;h3&gt;Cross-compiling for macOS&lt;/h3&gt; &#xA;&lt;p&gt;Surge cross-compiles to macOS Intel from Linux and BSD.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/tpoechtrager/osxcross&#34;&gt;osxcross&lt;/a&gt;. Make sure to also install the &lt;code&gt;libclang_rt&lt;/code&gt; library built by their &lt;code&gt;build_compiler_rt.sh&lt;/code&gt; script.&lt;/li&gt; &#xA; &lt;li&gt;Configure and build Surge:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_TOOLCHAIN_FILE=cmake/x86_64-apple-darwin20.4-clang.cmake -DCMAKE_FIND_ROOT_PATH=&amp;lt;path_to_osxcross_sdk&amp;gt; -Bbuild&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setting up for Your OS&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;You need to install the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2017, 2019, or later(version 15.5 or newer)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt; , &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2017 or newer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;When you install Visual Studio, make sure to include CLI tools and CMake, which are included in &#39;Optional CLI support&#39; and &#39;Toolset for desktop&#39; install bundles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;To build on macOS, you need &lt;code&gt;Xcode&lt;/code&gt;, &lt;code&gt;Xcode Command Line Utilities&lt;/code&gt;, and CMake. Once you have installed &lt;code&gt;Xcode&lt;/code&gt; from the App Store, the command line to install the &lt;code&gt;Xcode Command Line Utilities&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a variety of ways to install CMake. If you use &lt;a href=&#34;https://brew.sh&#34;&gt;homebrew&lt;/a&gt;, you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;Most Linux systems have CMake, Git and a modern C++ compiler installed. Make sure yours does. We test with most gccs older than 7 or so and clangs after 9 or 10. You will also need to install a set of dependencies. If you use &lt;code&gt;apt&lt;/code&gt;, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential libcairo-dev libxkbcommon-x11-dev libxkbcommon-dev libxcb-cursor-dev libxcb-keysyms1-dev libxcb-util-dev libxrandr-dev libxinerama-dev libxcursor-dev libasound2-dev libjack-jackd2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;You can find more info about Surge on Linux and other Unix-like distros in&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge/main/doc/Linux-and-other-Unix-like-distributions.md&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Continuous Integration&lt;/h1&gt; &#xA;&lt;p&gt;In addition to the build commands above, we use Azure pipelines for continuous integration. This means that each and every pull request will be automatically built across all our environments, and a clean build on all platforms is an obvious pre-requisite. If you have questions about our CI tools, don&#39;t hesitate to ask on our &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge-synthesizer.github.io/master/_includes/discord_invite_link&#34;&gt;Discord&lt;/a&gt; server. We are grateful to Microsoft for providing Azure pipelines for free to the open-source community!&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most Surge-related conversation happens on the Surge Synthesizer Discord server. You can join via &lt;a href=&#34;https://raw.githubusercontent.com/surge-synthesizer/surge-synthesizer.github.io/master/_includes/discord_invite_link&#34;&gt;this link&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Discussion at KvR forum &lt;a href=&#34;https://www.kvraudio.com/forum/viewtopic.php?f=1&amp;amp;t=511922&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>