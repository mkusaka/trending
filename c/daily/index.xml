<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:37:24Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>octalmage/robotjs</title>
    <updated>2022-06-27T01:37:24Z</updated>
    <id>tag:github.com,2022-06-27:/octalmage/robotjs</id>
    <link href="https://github.com/octalmage/robotjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js Desktop Automation.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cldup.com/1ATDf2JMtv.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://travis-ci.org/octalmage/robotjs&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/octalmage/robotjs.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/octalmage/robotjs&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/qh2eqb37j7ap6x36?svg=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/robotjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/robotjs.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/octalmage/robotjs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://waffle.io/octalmage/robotjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/waffle/label/octalmage/robotjs/ready.svg?maxAge=3600&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Node.js Desktop Automation. Control the mouse, keyboard, and read the screen.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;RobotJS supports Mac, &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/2&#34;&gt;Windows&lt;/a&gt;, and &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/17&#34;&gt;Linux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a work in progress so the exported functions could change at any time before the first stable release (1.0.0). &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/4&#34;&gt;Ideas?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/octalmage/robotjs/wiki/Projects-using-RobotJS&#34;&gt;Check out some of the cool things people are making with RobotJS&lt;/a&gt;! Have your own rad RobotJS project? Feel free to add it!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/robotjavascript&#34;&gt;&lt;img width=&#34;300&#34; src=&#34;https://cldup.com/Et-C6_ue45.png&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://blog.robotjs.io&#34;&gt;&lt;img width=&#34;300&#34; src=&#34;https://cldup.com/3apDirNmSB.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://robotjs.io/docs/syntax&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#plans&#34;&gt;Plans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#progress&#34;&gt;Progress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install RobotJS using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install robotjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s that easy! npm will download one of the prebuilt &lt;a href=&#34;https://github.com/octalmage/robotjs/releases/latest&#34;&gt;binaries&lt;/a&gt; for your OS.&lt;/p&gt; &#xA;&lt;p&gt;You can get npm &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;here&lt;/a&gt; if you don&#39;t have it installed.&lt;/p&gt; &#xA;&lt;p&gt;If you need to build RobotJS, see the &lt;a href=&#34;https://raw.githubusercontent.com/octalmage/robotjs/master/#building&#34;&gt;building&lt;/a&gt; section. Instructions for &lt;a href=&#34;https://github.com/octalmage/robotjs/wiki/Electron&#34;&gt;Electron&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/octalmage/robotjs/wiki/Syntax#mouse&#34;&gt;Mouse&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cldup.com/lugVjjAkEi.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// Move the mouse across the screen as a sine wave.&#xA;var robot = require(&#34;robotjs&#34;);&#xA;&#xA;// Speed up the mouse.&#xA;robot.setMouseDelay(2);&#xA;&#xA;var twoPI = Math.PI * 2.0;&#xA;var screenSize = robot.getScreenSize();&#xA;var height = (screenSize.height / 2) - 10;&#xA;var width = screenSize.width;&#xA;&#xA;for (var x = 0; x &amp;lt; width; x++)&#xA;{&#xA;&#x9;y = height * Math.sin((twoPI * x) / width) + height;&#xA;&#x9;robot.moveMouse(x, y);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/octalmage/robotjs/wiki/Syntax#keyboard&#34;&gt;Keyboard&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// Type &#34;Hello World&#34; then press enter.&#xA;var robot = require(&#34;robotjs&#34;);&#xA;&#xA;// Type &#34;Hello World&#34;.&#xA;robot.typeString(&#34;Hello World&#34;);&#xA;&#xA;// Press enter.&#xA;robot.keyTap(&#34;enter&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/octalmage/robotjs/wiki/Syntax#screen&#34;&gt;Screen&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// Get pixel color under the mouse.&#xA;var robot = require(&#34;robotjs&#34;);&#xA;&#xA;// Get mouse position.&#xA;var mouse = robot.getMousePos();&#xA;&#xA;// Get pixel color in hex format.&#xA;var hex = robot.getPixelColor(mouse.x, mouse.y);&#xA;console.log(&#34;#&#34; + hex + &#34; at x:&#34; + mouse.x + &#34; y:&#34; + mouse.y);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://github.com/octalmage/robotjs/wiki&#34;&gt;Wiki&lt;/a&gt; for more information!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://robotjs.io/docs/syntax&#34;&gt;API&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The RobotJS API is hosted at &lt;a href=&#34;https://robotjs.io/docs/syntax&#34;&gt;https://robotjs.io/docs/syntax&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Please ensure you have the required dependencies before installing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;windows-build-tools npm package (&lt;code&gt;npm install --global --production windows-build-tools&lt;/code&gt; from an elevated PowerShell or CMD.exe)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Xcode Command Line Tools.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python (v2.7 recommended, v3.x.x is not supported).&lt;/li&gt; &#xA;   &lt;li&gt;make.&lt;/li&gt; &#xA;   &lt;li&gt;A C/C++ compiler like GCC.&lt;/li&gt; &#xA;   &lt;li&gt;libxtst-dev and libpng++-dev (&lt;code&gt;sudo apt-get install libxtst-dev libpng++-dev&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install node-gyp using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g node-gyp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node-gyp rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/nodejs/node-gyp#installation&#34;&gt;node-gyp readme&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;√ Control the mouse by changing the mouse position, left/right clicking, and dragging.&lt;/li&gt; &#xA; &lt;li&gt;√ Control the keyboard by pressing keys, holding keys down, and typing words.&lt;/li&gt; &#xA; &lt;li&gt;√ Read pixel color from the screen and capture the screen.&lt;/li&gt; &#xA; &lt;li&gt;Find an image on screen, read pixels from an image.&lt;/li&gt; &#xA; &lt;li&gt;Possibly include window management?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Progress&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mouse&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;All planned features implemented.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keyboard&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;All planned features implemented.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Screen&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;85%&lt;/td&gt; &#xA;   &lt;td&gt;Image search, pixel search.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bitmap&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0%&lt;/td&gt; &#xA;   &lt;td&gt;Saving/opening, png support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Does RobotJS support global hotkeys?&lt;/h4&gt; &#xA;&lt;p&gt;Not currently, and I don&#39;t know if it ever will. I personally use &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt;/&lt;a href=&#34;http://nwjs.io/&#34;&gt;NW.js&lt;/a&gt; for global hotkeys, and this works well. Later on I might add hotkey support or create a separate module. See &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/55&#34;&gt;#55&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;Can I take a screenshot with RobotJS?&lt;/h4&gt; &#xA;&lt;p&gt;Soon! This is a bit more complicated than the rest of the features, so I saved it for last. Luckily the code is already there, I just need to write the bindings, and I&#39;ve already started. Subscribe to &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/13&#34;&gt;#13&lt;/a&gt; for updates.&lt;/p&gt; &#xA;&lt;h4&gt;Why is &amp;lt;insert key&amp;gt; missing from the keyboard functions?&lt;/h4&gt; &#xA;&lt;p&gt;We&#39;ve been implementing keys as we need them. Feel free to create an issue or submit a pull request!&lt;/p&gt; &#xA;&lt;h4&gt;How about multi-monitor support?&lt;/h4&gt; &#xA;&lt;p&gt;The library doesn&#39;t have explicit multi-monitor support, so anything that works is kind of on accident. Subscribe to &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/88&#34;&gt;#88&lt;/a&gt; for updates.&lt;/p&gt; &#xA;&lt;p&gt;For any other questions please &lt;a href=&#34;https://github.com/octalmage/robotjs/issues/new&#34;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Story&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m a huge fan of &lt;a href=&#34;https://www.autohotkey.com/&#34;&gt;AutoHotkey&lt;/a&gt;, and I&#39;ve used it for a very long time. AutoHotkey is great for automation and it can do a bunch of things that are very difficult in other languages. For example, it&#39;s &lt;a href=&#34;https://www.autohotkey.com/docs/commands/ImageSearch.htm&#34;&gt;imagesearch&lt;/a&gt; and &lt;a href=&#34;https://www.autohotkey.com/docs/commands/PixelGetColor.htm&#34;&gt;pixel&lt;/a&gt; related functions are hard to reproduce on Mac, especially in scripting languages. These functions are great for automating apps that can&#39;t be automated like &lt;a href=&#34;http://blueshirtdesign.com/apps/autoflix/&#34;&gt;Netflix&lt;/a&gt;. This has never been a big deal since I&#39;ve always used Windows at work, but for the past few years I&#39;ve been using Mac exclusively.&lt;/p&gt; &#xA;&lt;p&gt;I like AutoHotkey, but I like Node.js more. By developing RobotJS I get an AutoHotkey replacement on Mac (finally!), and I get to use my favorite language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; There&#39;s nothing like AutoHotkey on Mac, so I&#39;m making it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;p&gt;Based on &lt;a href=&#34;https://github.com/msanders/autopy&#34;&gt;autopy&lt;/a&gt;. Maintained by &lt;a href=&#34;http://jason.stallin.gs&#34;&gt;Jason Stallings&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/darwin-xnu</title>
    <updated>2022-06-27T01:37:24Z</updated>
    <id>tag:github.com,2022-06-27:/apple/darwin-xnu</id>
    <link href="https://github.com/apple/darwin-xnu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Darwin Kernel (mirror). This repository is a pure mirror and contributions are currently not accepted via pull-requests, please submit your contributions via https://developer.apple.com/bug-reporting/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is XNU?&lt;/h1&gt; &#xA;&lt;p&gt;XNU kernel is part of the Darwin operating system for use in macOS and iOS operating systems. XNU is an acronym for X is Not Unix. XNU is a hybrid kernel combining the Mach kernel developed at Carnegie Mellon University with components from FreeBSD and a C++ API for writing drivers called IOKit. XNU runs on x86_64 for both single processor and multi-processor configurations.&lt;/p&gt; &#xA;&lt;h1&gt;XNU Source Tree&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; - configurations for exported apis for supported architecture and platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SETUP&lt;/code&gt; - Basic set of tools used for configuring the kernel, versioning and kextsymbol management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXTERNAL_HEADERS&lt;/code&gt; - Headers sourced from other projects to avoid dependency cycles when building. These headers should be regularly synced when source is updated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libkern&lt;/code&gt; - C++ IOKit library code for handling of drivers and kexts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libsa&lt;/code&gt; - kernel bootstrap code for startup&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libsyscall&lt;/code&gt; - syscall library interface for userspace programs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libkdd&lt;/code&gt; - source for user library for parsing kernel data like kernel chunked data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;makedefs&lt;/code&gt; - top level rules and defines for kernel build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;osfmk&lt;/code&gt; - Mach kernel based subsystems&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pexpert&lt;/code&gt; - Platform specific code like interrupt handling, atomics etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;security&lt;/code&gt; - Mandatory Access Check policy interfaces and related implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bsd&lt;/code&gt; - BSD subsystems code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt; - A set of utilities for testing, debugging and profiling kernel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to build XNU&lt;/h1&gt; &#xA;&lt;h2&gt;Building &lt;code&gt;DEVELOPMENT&lt;/code&gt; kernel&lt;/h2&gt; &#xA;&lt;p&gt;The xnu make system can build kernel based on &lt;code&gt;KERNEL_CONFIGS&lt;/code&gt; &amp;amp; &lt;code&gt;ARCH_CONFIGS&lt;/code&gt; variables as arguments. Here is the syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make SDKROOT=&amp;lt;sdkroot&amp;gt; ARCH_CONFIGS=&amp;lt;arch&amp;gt; KERNEL_CONFIGS=&amp;lt;variant&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&amp;lt;sdkroot&amp;gt;: path to macOS SDK on disk. (defaults to &lt;code&gt;/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;variant&amp;gt;: can be &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;profile&lt;/code&gt; and configures compilation flags and asserts throughout kernel code.&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;arch&amp;gt; : can be valid arch to build for. (E.g. &lt;code&gt;X86_64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build a kernel for the same architecture as running OS, just type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;$ make SDKROOT=macosx.internal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, there is support for configuring architectures through &lt;code&gt;ARCH_CONFIGS&lt;/code&gt; and kernel configurations with &lt;code&gt;KERNEL_CONFIGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=DEVELOPMENT&#xA;$ make SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=&#34;RELEASE DEVELOPMENT DEBUG&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, architecture is set to the build machine architecture, and the default kernel config is set to build for DEVELOPMENT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will also create a bootable image, kernel.[config], and a kernel binary with symbols, kernel.[config].unstripped.&lt;/p&gt; &#xA;&lt;p&gt;To intall the kernel into a DSTROOT, use the &lt;code&gt;install_kernels&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make install_kernels DSTROOT=/tmp/xnu-dst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hint: For a more satisfying kernel debugging experience, with access to all local variables and arguments, but without all the extra check of the DEBUG kernel, add something like: CFLAGS_DEVELOPMENTARM64=&#34;-O0 -g -DKERNEL_STACK_MULTIPLIER=2&#34; CXXFLAGS_DEVELOPMENTARM64=&#34;-O0 -g -DKERNEL_STACK_MULTIPLIER=2&#34; to your make command. Replace DEVELOPMENT and ARM64 with the appropriate build and platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To build with RELEASE kernel configuration&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make KERNEL_CONFIGS=RELEASE SDKROOT=/path/to/SDK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building FAT kernel binary&lt;/h2&gt; &#xA;&lt;p&gt;Define architectures in your environment or when running a make command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make ARCH_CONFIGS=&#34;X86_64&#34; exporthdrs all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other makefile options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$ make MAKEJOBS=-j8 # this will use 8 processes during the build. The default is 2x the number of active CPUS.&lt;/li&gt; &#xA; &lt;li&gt;$ make -j8 # the standard command-line option is also accepted&lt;/li&gt; &#xA; &lt;li&gt;$ make -w # trace recursive make invocations. Useful in combination with VERBOSE=YES&lt;/li&gt; &#xA; &lt;li&gt;$ make BUILD_LTO=0 # build without LLVM Link Time Optimization&lt;/li&gt; &#xA; &lt;li&gt;$ make REMOTEBUILD=user@remotehost # perform build on remote host&lt;/li&gt; &#xA; &lt;li&gt;$ make BUILD_JSON_COMPILATION_DATABASE=1 # Build Clang JSON Compilation Database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The XNU build system can optionally output color-formatted build output. To enable this, you can either set the &lt;code&gt;XNU_LOGCOLORS&lt;/code&gt; environment variable to &lt;code&gt;y&lt;/code&gt;, or you can pass &lt;code&gt;LOGCOLORS=y&lt;/code&gt; to the make command.&lt;/p&gt; &#xA;&lt;h1&gt;Debug information formats&lt;/h1&gt; &#xA;&lt;p&gt;By default, a DWARF debug information repository is created during the install phase; this is a &#34;bundle&#34; named kernel.development.&amp;lt;variant&amp;gt;.dSYM To select the older STABS debug information format (where debug information is embedded in the kernel.development.unstripped image), set the BUILD_STABS environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export BUILD_STABS=1&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building KernelCaches&lt;/h1&gt; &#xA;&lt;p&gt;To test the xnu kernel, you need to build a kernelcache that links the kexts and kernel together into a single bootable image. To build a kernelcache you can use the following mechanisms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using automatic kernelcache generation with &lt;code&gt;kextd&lt;/code&gt;. The kextd daemon keeps watching for changing in &lt;code&gt;/System/Library/Extensions&lt;/code&gt; directory. So you can setup new kernel as&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp BUILD/obj/DEVELOPMENT/X86_64/kernel.development /System/Library/Kernels/&#xA;$ touch /System/Library/Extensions&#xA;$ ps -e | grep kextd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manually invoking &lt;code&gt;kextcache&lt;/code&gt; to build new kernelcache.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ kextcache -q -z -a x86_64 -l -n -c /var/tmp/kernelcache.test -K /var/tmp/kernel.test /System/Library/Extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Running KernelCache on Target machine&lt;/h1&gt; &#xA;&lt;p&gt;The development kernel and iBoot supports configuring boot arguments so that we can safely boot into test kernel and, if things go wrong, safely fall back to previously used kernelcache. Following are the steps to get such a setup:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create kernel cache using the kextcache command as &lt;code&gt;/kernelcache.test&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy exiting boot configurations to alternate file&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp /Library/Preferences/SystemConfiguration/com.apple.Boot.plist /next_boot.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the kernelcache and boot-args for your setup&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ plutil -insert &#34;Kernel Cache&#34; -string &#34;kernelcache.test&#34; /next_boot.plist&#xA;$ plutil -replace &#34;Kernel Flags&#34; -string &#34;debug=0x144 -v kernelsuffix=test &#34; /next_boot.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the new config to &lt;code&gt;/Library/Preferences/SystemConfiguration/&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cp /next_boot.plist /Library/Preferences/SystemConfiguration/boot.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bless the volume with new configs.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ sudo -n bless  --mount / --setBoot --nextonly --options &#34;config=boot&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--nextonly&lt;/code&gt; flag specifies that use the &lt;code&gt;boot.plist&lt;/code&gt; configs only for one boot. So if the kernel panic&#39;s you can easily power reboot and recover back to original kernel.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Creating tags and cscope&lt;/h1&gt; &#xA;&lt;p&gt;Set up your build environment and from the top directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make tags     # this will build ctags and etags on a case-sensitive volume, only ctags on case-insensitive&#xA;$ make TAGS     # this will build etags&#xA;$ make cscope   # this will build cscope database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How to install a new header file from XNU&lt;/h1&gt; &#xA;&lt;p&gt;To install IOKit headers, see additional comments in &lt;a href=&#34;&#34;&gt;iokit/IOKit/Makefile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;XNU installs header files at the following locations -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers&#xA;b. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders&#xA;c. $(DSTROOT)/usr/include/&#xA;d. $(DSTROOT)/System/DriverKit/usr/include/&#xA;e. $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Kernel.framework&lt;/code&gt; is used by kernel extensions.&lt;br&gt; The &lt;code&gt;System.framework&lt;/code&gt; and &lt;code&gt;/usr/include&lt;/code&gt; are used by user level applications. &lt;br&gt; &lt;code&gt;/System/DriverKit/usr/include&lt;/code&gt; is used by userspace drivers. &lt;br&gt; The header files in framework&#39;s &lt;code&gt;PrivateHeaders&lt;/code&gt; are only available for ** Apple Internal Development **.&lt;/p&gt; &#xA;&lt;p&gt;The directory containing the header file should have a Makefile that creates the list of files that should be installed at different locations. If you are adding the first header file in a directory, you will need to create Makefile similar to &lt;code&gt;xnu/bsd/sys/Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add your header file to the correct file list depending on where you want to install it. The default locations where the header files are installed from each file list are -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. `DATAFILES` : To make header file available in user level -&#xA;   `$(DSTROOT)/usr/include`&#xA;&#xA;b. `DRIVERKIT_DATAFILES` : To make header file available to DriverKit userspace drivers -&#xA;   `$(DSTROOT)/System/DriverKit/usr/include`&#xA;&#xA;c. `PRIVATE_DATAFILES` : To make header file available to Apple internal in&#xA;   user level -&#xA;   `$(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders`&#xA;&#xA;d. `KERNELFILES` : To make header file available in kernel level -&#xA;   `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers`&#xA;   `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`&#xA;&#xA;e. `PRIVATE_KERNELFILES` : To make header file available to Apple internal&#xA;   for kernel extensions -&#xA;   `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Makefile combines the file lists mentioned above into different install lists which are used by build system to install the header files. There are two types of install lists: machine-dependent and machine-independent. These lists are indicated by the presence of &lt;code&gt;MD&lt;/code&gt; and &lt;code&gt;MI&lt;/code&gt; in the build setting, respectively. If your header is architecture-specific, then you should use a machine-dependent install list (e.g. &lt;code&gt;INSTALL_MD_LIST&lt;/code&gt;). If your header should be installed for all architectures, then you should use a machine-independent install list (e.g. &lt;code&gt;INSTALL_MI_LIST&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If the install list that you are interested does not exist, create it by adding the appropriate file lists. The default install lists, its member file lists and their default location are described below -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. `INSTALL_MI_LIST` : Installs header file to a location that is available to everyone in user level.&#xA;    Locations -&#xA;       $(DSTROOT)/usr/include&#xA;   Definition -&#xA;       INSTALL_MI_LIST = ${DATAFILES}&#xA;&#xA;b. `INSTALL_DRIVERKIT_MI_LIST` : Installs header file to a location that is&#xA;    available to DriverKit userspace drivers.&#xA;    Locations -&#xA;       $(DSTROOT)/System/DriverKit/usr/include&#xA;   Definition -&#xA;       INSTALL_DRIVERKIT_MI_LIST = ${DRIVERKIT_DATAFILES}&#xA;&#xA;c.  `INSTALL_MI_LCL_LIST` : Installs header file to a location that is available&#xA;   for Apple internal in user level.&#xA;   Locations -&#xA;       $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders&#xA;   Definition -&#xA;       INSTALL_MI_LCL_LIST = ${PRIVATE_DATAFILES}&#xA;&#xA;d. `INSTALL_KF_MI_LIST` : Installs header file to location that is available&#xA;   to everyone for kernel extensions.&#xA;   Locations -&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers&#xA;   Definition -&#xA;        INSTALL_KF_MI_LIST = ${KERNELFILES}&#xA;&#xA;e. `INSTALL_KF_MI_LCL_LIST` : Installs header file to location that is&#xA;   available for Apple internal for kernel extensions.&#xA;   Locations -&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders&#xA;   Definition -&#xA;        INSTALL_KF_MI_LCL_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}&#xA;&#xA;f. `EXPORT_MI_LIST` : Exports header file to all of xnu (bsd/, osfmk/, etc.)&#xA;   for compilation only. Does not install anything into the SDK.&#xA;   Definition -&#xA;        EXPORT_MI_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}&#xA;&#xA;g. `INSTALL_MODULEMAP_INCDIR_MI_LIST` : Installs module map file to a&#xA;   location that is available to everyone in user level, installing at the&#xA;   root of INCDIR.&#xA;   Locations -&#xA;       $(DSTROOT)/usr/include&#xA;   Definition -&#xA;       INSTALL_MODULEMAP_INCDIR_MI_LIST = ${MODULEMAP_INCDIR_FILES}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install the header file in a sub-directory of the paths described in (1), specify the directory name using two variables &lt;code&gt;INSTALL_MI_DIR&lt;/code&gt; and &lt;code&gt;EXPORT_MI_DIR&lt;/code&gt; as follows -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;INSTALL_MI_DIR = dirname&#xA;EXPORT_MI_DIR = dirname&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A single header file can exist at different locations using the steps mentioned above. However it might not be desirable to make all the code in the header file available at all the locations. For example, you want to export a function only to kernel level but not user level.&lt;/p&gt; &#xA;&lt;p&gt;You can use C language&#39;s pre-processor directive (#ifdef, #endif, #ifndef) to control the text generated before a header file is installed. The kernel only includes the code if the conditional macro is TRUE and strips out code for FALSE conditions from the header file.&lt;/p&gt; &#xA;&lt;p&gt;Some pre-defined macros and their descriptions are -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. `PRIVATE` : If defined, enclosed definitions are considered System&#xA;Private Interfaces. These are visible within xnu and&#xA;exposed in user/kernel headers installed within the AppleInternal&#xA;&#34;PrivateHeaders&#34; sections of the System and Kernel frameworks.&#xA;b. `KERNEL_PRIVATE` : If defined, enclosed code is available to all of xnu&#xA;kernel and Apple internal kernel extensions and omitted from user&#xA;headers.&#xA;c. `BSD_KERNEL_PRIVATE` : If defined, enclosed code is visible exclusively&#xA;within the xnu/bsd module.&#xA;d. `MACH_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively&#xA;within the xnu/osfmk module.&#xA;e. `XNU_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively&#xA;within xnu.&#xA;f. `KERNEL` :  If defined, enclosed code is available within xnu and kernel&#xA;   extensions and is not visible in user level header files.  Only the&#xA;   header files installed in following paths will have the code -&#xA;&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers&#xA;        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders&#xA;g. `DRIVERKIT`: If defined, enclosed code is visible exclusively in the&#xA;DriverKit SDK headers used by userspace drivers.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Conditional compilation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;xnu&lt;/code&gt; offers the following mechanisms for conditionally compiling code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a. *CPU Characteristics* If the code you are guarding has specific&#xA;characterstics that will vary only based on the CPU architecture being&#xA;targeted, use this option. Prefer checking for features of the&#xA;architecture (e.g. `__LP64__`, `__LITTLE_ENDIAN__`, etc.).&#xA;b. *New Features* If the code you are guarding, when taken together,&#xA;implements a feature, you should define a new feature in `config/MASTER`&#xA;and use the resulting `CONFIG` preprocessor token (e.g. for a feature&#xA;named `config_virtual_memory`, check for `#if CONFIG_VIRTUAL_MEMORY`).&#xA;This practice ensures that existing features may be brought to other&#xA;platforms by simply changing a feature switch.&#xA;c. *Existing Features* You can use existing features if your code is&#xA;strongly tied to them (e.g. use `SECURE_KERNEL` if your code implements&#xA;new functionality that is exclusively relevant to the trusted kernel and&#xA;updates the definition/understanding of what being a trusted kernel means).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended that you avoid compiling based on the target platform. &lt;code&gt;xnu&lt;/code&gt; does not define the platform macros from &lt;code&gt;TargetConditionals.h&lt;/code&gt; (&lt;code&gt;TARGET_OS_OSX&lt;/code&gt;, &lt;code&gt;TARGET_OS_IOS&lt;/code&gt;, etc.).&lt;/p&gt; &#xA;&lt;p&gt;There is a deprecated &lt;code&gt;TARGET_OS_EMBEDDED&lt;/code&gt; macro, but this should be avoided as it is in general too broad a definition for most functionality. Please refer to TargetConditionals.h for a full picture.&lt;/p&gt; &#xA;&lt;h1&gt;How to add a new syscall&lt;/h1&gt; &#xA;&lt;h1&gt;Testing the kernel&lt;/h1&gt; &#xA;&lt;p&gt;XNU kernel has multiple mechanisms for testing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Assertions - The DEVELOPMENT and DEBUG kernel configs are compiled with assertions enabled. This allows developers to easily test invariants and conditions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;XNU Power On Self Tests (&lt;code&gt;XNUPOST&lt;/code&gt;): The XNUPOST config allows for building the kernel with basic set of test functions that are run before first user space process is launched. Since XNU is hybrid between MACH and BSD, we have two locations where tests can be added.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;xnu/osfmk/tests/     # For testing mach based kernel structures and apis.&#xA;bsd/tests/           # For testing BSD interfaces.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please follow the documentation at &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/osfmk/tests/README.md&#34;&gt;osfmk/tests/README.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User level tests: The &lt;code&gt;tools/tests/&lt;/code&gt; directory holds all the tests that verify syscalls and other features of the xnu kernel. The make target &lt;code&gt;xnu_tests&lt;/code&gt; can be used to build all the tests supported.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make RC_ProjectName=xnu_tests SDKROOT=/path/to/SDK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These tests are individual programs that can be run from Terminal and report tests status by means of std posix exit codes (0 -&amp;gt; success) and/or stdout. Please read detailed documentation in &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/tools/tests/unit_tests/README.md&#34;&gt;tools/tests/unit_tests/README.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Kernel data descriptors&lt;/h1&gt; &#xA;&lt;p&gt;XNU uses different data formats for passing data in its api. The most standard way is using syscall arguments. But for complex data it often relies of sending memory saved by C structs. This packaged data transport mechanism is fragile and leads to broken interfaces between user space programs and kernel apis. &lt;code&gt;libkdd&lt;/code&gt; directory holds user space library that can parse custom data provided by the same version of kernel. The kernel chunked data format is described in detail at &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/libkdd/README.md&#34;&gt;libkdd/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Debugging the kernel&lt;/h1&gt; &#xA;&lt;p&gt;The xnu kernel supports debugging with a remote kernel debugging protocol (kdp). Please refer documentation at [technical note] &lt;a href=&#34;https://developer.apple.com/library/mac/technotes/tn2063/_index.html&#34; title=&#34;Understanding and Debugging Kernel Panics&#34;&gt;TN2063&lt;/a&gt; By default the kernel is setup to reboot on a panic. To debug a live kernel, the kdp server is setup to listen for UDP connections over ethernet. For machines without ethernet port, this behavior can be altered with use of kernel boot-args. Following are some common options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debug=0x144&lt;/code&gt; - setups debug variables to start kdp debugserver on panic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; - print kernel logs on screen. By default XNU only shows grey screen with boot art.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kdp_match_name=en1&lt;/code&gt; - Override default port selection for kdp. Supported for ethernet, thunderbolt and serial debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To debug a panic&#39;ed kernel, use llvm debugger (lldb) along with unstripped symbol rich kernel binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh$ lldb kernel.development.unstripped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can connect to panic&#39;ed machine with &lt;code&gt;kdp_remote [ip addr]&lt;/code&gt; or &lt;code&gt;gdb_remote [hostip : port]&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;Each kernel is packaged with kernel specific debug scripts as part of the build process. For security reasons these special commands and scripts do not get loaded automatically when lldb is connected to machine. Please add the following setting to your &lt;code&gt;~/.lldbinit&lt;/code&gt; if you wish to always load these macros.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;settings set target.load-script-from-symbol-file true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;tools/lldbmacros&lt;/code&gt; directory contains the source for each of these commands. Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/apple/darwin-xnu/main/tools/lldbmacros/README.md&#34;&gt;README.md&lt;/a&gt; for detailed explanation of commands and their usage.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pschatzmann/arduino-audio-tools</title>
    <updated>2022-06-27T01:37:24Z</updated>
    <id>tag:github.com,2022-06-27:/pschatzmann/arduino-audio-tools</id>
    <link href="https://github.com/pschatzmann/arduino-audio-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino Audio Tools (Music Player, Music Recorder supporting I2S, Microphones, DAC, ADC, A2DP, Url, MP3, AAC, AudioKit, ES8388)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino Audio Tools&lt;/h1&gt; &#xA;&lt;p&gt;Some basic &lt;strong&gt;header-only C++ classes&lt;/strong&gt; that can be used for &lt;strong&gt;Audio Processing&lt;/strong&gt; provided as &lt;strong&gt;Arduino Library&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We provide different &#34;Audio Sources&#34; and &#34;Audio Sinks&#34; (see next section)&lt;/li&gt; &#xA; &lt;li&gt;Support for different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_encoder.html&#34;&gt;Encoders&lt;/a&gt; and &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_decoder.html&#34;&gt;Decoders&lt;/a&gt; for MP3, AAC, WAV, FLAC, etc&lt;/li&gt; &#xA; &lt;li&gt;Different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_sound_generator.html&#34;&gt;Sound Generators&lt;/a&gt; (e.g. to generate a sine tone)&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_effects.html&#34;&gt;Sound Effects&lt;/a&gt; with different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_effect.html&#34;&gt;Effect Implementations&lt;/a&gt; (e.g. Boost, Distortion, Echo, Reverb...)&lt;/li&gt; &#xA; &lt;li&gt;Different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_base_buffer.html&#34;&gt;Buffer Implementations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_base_converter.html&#34;&gt;Converters&lt;/a&gt; and &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_filter.html&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_musical_notes.html&#34;&gt;Musical Notes&lt;/a&gt; (with frequencies of notes)&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_timer_alarm_repeating_def.html&#34;&gt;Repeating Timer&lt;/a&gt; (e.g. for sampling audio data using exact times)&lt;/li&gt; &#xA; &lt;li&gt;Desktop Integration: Building of Arduino Audio Sketches to be run on &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Running-an-Audio-Sketch-on-the-Desktop&#34;&gt;Linux, Windows and OS/X&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This functionality provides the glue which makes different audio processing components and libraries work together. We also provide plenty of examples that demonstrate how to implement the different scenarios. The &lt;strong&gt;design philosophy&lt;/strong&gt; is based on the Arduino conventions: we use the &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; methods to start and stop the processing and we propagate the &lt;strong&gt;use of Streams&lt;/strong&gt;. We all know the &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/class_stream.html&#34;&gt;Arduino Streams&lt;/a&gt;: We usually use them to write out print messages and sometimes we use them to read the output from Serial devices. The same thing applies to “Audio Streams”: You can read audio data from “Audio Sources” and you write them to “Audio Sinks”.&lt;/p&gt; &#xA;&lt;p&gt;As “Audio Sources” we will have e.g.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Digital Microphones – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_i2_s_stream.html&#34;&gt;I2SStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analog Microphones – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_analog_audio_stream.html&#34;&gt;AnalogAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Files on the Internet – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_u_r_l_stream.html&#34;&gt;URLStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Streaming Internet Radios - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_i_c_y_stream.html&#34;&gt;ICYStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generated Sound – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_generated_sound_stream.html&#34;&gt;GeneratedSoundStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mobile Phone A2DP Bluetooth – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_a2_d_p_stream.html&#34;&gt;A2DPStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Binary Data in Flash Memory – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_memory_stream.html&#34;&gt;MemoryStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio generated by STK Framwork - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_s_t_k_stream.html&#34;&gt;STKStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Desktop Integration - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_port_audio_stream.html&#34;&gt;PortAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A Timer based Source - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_timer_callback_audio_stream.html&#34;&gt;TimerCallbackAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32 AudioKit - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_kit_stream.html&#34;&gt;AudioKitStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Input using FIR, IIR Filters - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_filtered_stream.html&#34;&gt;FilteredStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow Lite - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_tf_lite_audio_stream.html&#34;&gt;TfLiteAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any other Arduino Classes implementing Streams: SD, Ethernet etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As “Audio Sinks” we will have e.g:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;external DAC – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_i2_s_stream.html&#34;&gt;I2SStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analog output e.g. to an Amplifier – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_analog_audio_stream.html&#34;&gt;AnalogAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output using PWM – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_p_w_m_audio_stream_base.html&#34;&gt;PWMAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output to SPDIF/TOSLINK - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_s_p_d_i_f_stream.html&#34;&gt;SPDIFStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Speakers – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_a2_d_p_stream.html&#34;&gt;A2DPStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Serial to display the data as CSV – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_csv_stream.html&#34;&gt;CsvStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Serial to display the data as hex dump - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_hex_dump_stream.html&#34;&gt;HexDumpStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Encoding and Decoding of Audio &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_encoded_audio_stream.html&#34;&gt;EncodedAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Desktop Integration - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_port_audio_stream.html&#34;&gt;PortAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ID3 Metadata for MP3 - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_meta_data_i_d3.html&#34;&gt;MetaDataID3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A Timer based Sink - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_timer_callback_audio_stream.html&#34;&gt;TimerCallbackAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32 AudioKit - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_kit_stream.html&#34;&gt;AudioKitStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Callback integration e.g. with ESP8266Audio &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_output_with_callback.html&#34;&gt;AudioOutputWithCallback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output using FIR, IRR Filters - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_filtered_stream.html&#34;&gt;FilteredStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Determine the Volume - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_volume_print.html&#34;&gt;VolumePrint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Split the Output to different Destinations - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_multi_output.html&#34;&gt;MultiOutput&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3 Band Equilizer - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_equilizer3_bands.html&#34;&gt;Equilizer3Bands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FFT - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_real_f_f_t.html&#34;&gt;AudioRealFFT&lt;/a&gt; and &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_kiss_f_f_t.html&#34;&gt;AudioKissFFT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow Lite - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_tf_lite_audio_stream.html&#34;&gt;TfLiteAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any other Arduino Classes implementing Streams: SD, Ethernet etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Here is an simple example which streams a file from the Flash Memory and writes it to I2S:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &#34;AudioTools.h&#34;&#xA;#include &#34;StarWars30.h&#34;&#xA;&#xA;uint8_t channels = 2;&#xA;uint16_t sample_rate = 22050;&#xA;&#xA;MemoryStream music(StarWars30_raw, StarWars30_raw_len);&#xA;I2SStream i2s;  // Output to I2S&#xA;StreamCopy copier(i2s, music); // copies sound into i2s&#xA;&#xA;void setup(){&#xA;    Serial.begin(115200);&#xA;&#xA;    auto config = i2s.defaultConfig(TX_MODE);&#xA;    config.sample_rate = sample_rate;&#xA;    config.channels = channels;&#xA;    config.bits_per_sample = 16;&#xA;    i2s.begin(config);&#xA;}&#xA;&#xA;void loop(){&#xA;    if (!copier.copy()){&#xA;      i2s.end();&#xA;      stop();&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each stream has it&#39;s own configuration object that should be passed to the begin method. The defaultConfig() method is providing a default proposal which will usually &#34;just work&#34;. Please consult the class documentation for the available configuration parameters. You can also easily adapt any provided examples: If you e.g. replace the I2SStream with the AnalogAudioStream class, you will get analog instead of digital output.&lt;/p&gt; &#xA;&lt;p&gt;Further examples can be found in the &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Examples&#34;&gt;Wiki&lt;/a&gt;. The library also provides a versatile &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/The-Audio-Player-Class&#34;&gt;AudioPlayer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The application uses a built in logger (see AudioLogger.h and AudioConfig.h). You can e.g. deactivate the logging by changing USE_AUDIO_LOGGING to false in the AudioConfig.h:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define USE_AUDIO_LOGGING false&#xA;#define LOG_LEVEL AudioLogger::Warning&#xA;#define LOG_STREAM Serial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Per default we use the log level warning and the logging output is going to Serial. You can also change this in your sketch by calling AudioLogger begin with the output stream and the log level e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AudioLogger::instance().begin(Serial, AudioLogger::Debug);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Dependent on the example you might need to install some of the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/ESP32-A2DP&#34;&gt;ESP32-A2DP Library&lt;/a&gt; to support A2DP Bluetooth Audio&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Encoding-and-Decoding-of-Audio&#34;&gt;Many Codec Libraries&lt;/a&gt; which are described in the Wiki&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/arduino-audiokit&#34;&gt;arduino-audiokit&lt;/a&gt; Support for the &lt;strong&gt;ESP32 AudioKit&lt;/strong&gt; and decoder chips (ES8388, A1S, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/arduino-midi&#34;&gt;arduino-midi&lt;/a&gt; A simple &lt;strong&gt;MIDI&lt;/strong&gt; message parser and generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/arduino-SAM&#34;&gt;SAM&lt;/a&gt; A Text to Speech Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/TTS&#34;&gt;TTS&lt;/a&gt; A Text to Speech Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/arduino-flite&#34;&gt;flite&lt;/a&gt; A Text to Speech Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/arduino-simple-tts&#34;&gt;simple-tts&lt;/a&gt; A Simple TTS engine which is based on prerecorded audio (Talking Clock, Talking Numbers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/Arduino-STK&#34;&gt;arduino-stk&lt;/a&gt; Synthesis ToolKit in C++ (STK)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/Maximilian&#34;&gt;Maximilian&lt;/a&gt; cross-platform and multi-target audio synthesis and signal processing library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/Mozzi&#34;&gt;Mozzi&lt;/a&gt; A sound synthesis library for Arduino&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/rp2040-i2s&#34;&gt;rp2040-i2s&lt;/a&gt; I2S library for RP2040 (mbed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/tflite-micro-arduino-examples&#34;&gt;Tensorflow Lite&lt;/a&gt; Machine Learning for Arduino&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/kissfft&#34;&gt;KissFFT&lt;/a&gt; Fast Fourier Transform FFT Library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/esp32-fft&#34;&gt;esp32-fft&lt;/a&gt; Another FFT library (not only for the ESP32)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pschatzmann/rp2040-i2s&#34;&gt;rp2040-i2s&lt;/a&gt; I2S for MBED RP2040&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greiman/SdFat&#34;&gt;SdFat Library&lt;/a&gt; to read and write files supporting SD cards with FAT16/FAT32 and exFAT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.arduino.cc/en/reference/SD&#34;&gt;SD Library&lt;/a&gt; to read and write files supporting SD cards with FAT16 and FAT32&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing a library, you might need to activate it&#39;s usage in the &lt;code&gt;AudioConfig.h&lt;/code&gt; file!&lt;/p&gt; &#xA;&lt;h2&gt;Show and Tell&lt;/h2&gt; &#xA;&lt;p&gt;Get some inspiration &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/discussions/categories/show-and-tell&#34;&gt;from projects that were using this library&lt;/a&gt; or share your projects with the community.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here is the generated &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/namespaceaudio__tools.html&#34;&gt;Class Documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please also check out the &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki&#34;&gt;Information in the Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You also might find further information in &lt;a href=&#34;https://www.pschatzmann.ch/home/category/machine-sound/&#34;&gt;one of my Blogs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation in Arduino&lt;/h3&gt; &#xA;&lt;p&gt;You can download the library as zip and call include Library -&amp;gt; zip library. Or you can git clone this project into the Arduino libraries folder e.g. with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd  ~/Documents/Arduino/libraries&#xA;git clone pschatzmann/arduino-audio-tools.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I recommend to use git because you can easily update to the latest version just by executing the &lt;code&gt;git pull&lt;/code&gt; command in the project folder.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the library in PlatformIO, you can find a &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Working-with-PlatformIO&#34;&gt;detailed description in the Wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>