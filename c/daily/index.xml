<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-17T01:30:27Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>monoprosito/holbertonschool-low_level_programming</title>
    <updated>2022-12-17T01:30:27Z</updated>
    <id>tag:github.com,2022-12-17:/monoprosito/holbertonschool-low_level_programming</id>
    <link href="https://github.com/monoprosito/holbertonschool-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repository that stores low-level programming projects done on Holberton Campus&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Holberton School Low-Level Programming&lt;/h1&gt; This repository stores my solutions to the amazing low-level programming projects I did at the Holberton Campus. &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://www.holbertonschool.com/&#34;&gt;&lt;img src=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/raw/master/holby.jpg?raw=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monoprosito/holbertonschool-low_level_programming/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monoprosito/holbertonschool-low_level_programming/master/#projects&#34;&gt;Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monoprosito/holbertonschool-low_level_programming/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The C scripts were compiled with &lt;strong&gt;GCC 4.8.4&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some scripts need more specific requirements, but these will be shown where they are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;p&gt;Here is the complete list of projects in this repository, each project has its description in its respective folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x00-hello_world&#34;&gt;0x00. C - Hello, World&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x01-variables_if_else_while&#34;&gt;0x01. C - Variables, if, else, while&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x02-functions_nested_loops&#34;&gt;0x02. C - Functions, nested loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x03-debugging&#34;&gt;0x03. C - Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x04-more_functions_nested_loops&#34;&gt;0x04. C - More functions, more nested loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x05-pointers_arrays_strings&#34;&gt;0x05. C - Pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x06-pointers_arrays_strings&#34;&gt;0x06. C - More pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x07-pointers_arrays_strings&#34;&gt;0x07. C - Even more pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x08-recursion&#34;&gt;0x08. C - Recursion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x09-static_libraries&#34;&gt;0x09. C - Static libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x0A-argc_argv&#34;&gt;0x0A. C - argc, argv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x0B-malloc_free&#34;&gt;0x0B. C - malloc, free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x0C-more_malloc_free&#34;&gt;0x0C. C - More malloc, free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x0D-preprocessor&#34;&gt;0x0D. C - Preprocessor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x0E-structures_typedef&#34;&gt;0x0E. C - Structures, typedef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x0F-function_pointers&#34;&gt;0x0F. C - Function pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x10-variadic_functions&#34;&gt;0x10. C - Variadic functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/printf&#34;&gt;0x11. C - printf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x12-singly_linked_lists&#34;&gt;0x12. C - Singly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x13-more_singly_linked_lists&#34;&gt;0x13. C - More singly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x14-bit_manipulation&#34;&gt;0x14. C - Bit manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x15-file_io&#34;&gt;0x15. C - File I/O&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreammgcol/simple_shell&#34;&gt;0x16. C - Simple Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x17-doubly_linked_lists&#34;&gt;0x17. C - Doubly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x18-dynamic_libraries&#34;&gt;0x18. C - Dynamic libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/monty&#34;&gt;0x19. C - Stacks, Queues - LIFO, FIFO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x1A-hash_tables&#34;&gt;0x1A. C - Hash tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/sorting_algorithms&#34;&gt;0x1B. C - Sorting algorithms &amp;amp; Big O&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x1C-makefiles&#34;&gt;0x1C. C - Makefiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jormao/binary_trees&#34;&gt;0x1D. C - Binary trees&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoprosito/holbertonschool-low_level_programming/tree/master/0x1E-search_algorithms&#34;&gt;0x1E. C - Search Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Each project and task contains the instructions to compile the code and execute the results.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fishwaldo/esp_ghota</title>
    <updated>2022-12-17T01:30:27Z</updated>
    <id>tag:github.com,2022-12-17:/Fishwaldo/esp_ghota</id>
    <link href="https://github.com/Fishwaldo/esp_ghota" rel="alternate"></link>
    <summary type="html">&lt;p&gt;esp32 OTA Component to update firmware from Github Releases&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GITHUB OTA for ESP32 devices&lt;/h1&gt; &#xA;&lt;p&gt;Automate your OTA and CI/CD pipeline with Github Actions to update your ESP32 devices in the field direct from github releases&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses the esp_htps_ota library under the hood to update firmware images&lt;/li&gt; &#xA; &lt;li&gt;Can also update spiffs/littlefs/fatfs partitions&lt;/li&gt; &#xA; &lt;li&gt;Uses SemVer to compare versions and only update if a newer version is available&lt;/li&gt; &#xA; &lt;li&gt;Plays nicely with App rollback and anti-rollback features of the esp-idf bootloader&lt;/li&gt; &#xA; &lt;li&gt;Download firmware and partitiion images from the github release page directly&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple devices with different firmware images&lt;/li&gt; &#xA; &lt;li&gt;Includes a sample Github Actions that builds and releases images when a new tag is pushed&lt;/li&gt; &#xA; &lt;li&gt;Updates can be triggered manually, or via a interval timer&lt;/li&gt; &#xA; &lt;li&gt;Uses a streaming JSON parser for to reduce memory usage (Github API responses can be huge)&lt;/li&gt; &#xA; &lt;li&gt;Supports Private Repositories (Github API token required*)&lt;/li&gt; &#xA; &lt;li&gt;Supports Github Enterprise&lt;/li&gt; &#xA; &lt;li&gt;Supports Github Personal Access Tokens to overcome Github API Ratelimits&lt;/li&gt; &#xA; &lt;li&gt;Sends progress of Updates via the esp_event_loop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: You should be careful with your GitHub PAT and putting it in the source code. I would suggest that you store the PAT in NVS, and the user enters it when running, as otherwise the PAT would be easily extractable from your firmware images.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;esp-idf via Espressif Component Registry:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;idf.py add-dependency Fishwaldo/ghota^0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Platform IO Registry:&lt;/h4&gt; &#xA;&lt;p&gt;add this to your platform.ini file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;lib_deps = &#xA;    Fishwaldo/ghota@^0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to copy the contents of &lt;a href=&#34;https://raw.githubusercontent.com/Fishwaldo/esp_ghota/master/Kconfig&#34;&gt;Kconfig&lt;/a&gt; into your project&#39;s Kconfig file, and run pio run -t menuconfig to configure the component.&lt;/p&gt; &#xA;&lt;h4&gt;API Documentation:&lt;/h4&gt; &#xA;&lt;p&gt;More details on the API are available &lt;a href=&#34;https://esp-github-ota.readthedocs.io/en/latest/index.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;After Initilizing Network Access, Start a timer to periodically check for new releases:&lt;/p&gt; &#xA;&lt;p&gt;(if you a reading this from &lt;a href=&#34;https://components.espressif.com&#34;&gt;https://components.espressif.com&lt;/a&gt;, please note that this website munges the examples below. Please refer to &lt;a href=&#34;https://github.com/Fishwaldo/esp_ghota&#34;&gt;https://github.com/Fishwaldo/esp_ghota&lt;/a&gt; for the correct examples)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    ghota_config_t ghconfig = {&#xA;        .filenamematch = &#34;GithubOTA-esp32.bin&#34;, // Glob Pattern to match against the Firmware file&#xA;        .storagenamematch = &#34;storage-esp32.bin&#34;, // Glob Pattern to match against the storage firmware file&#xA;        .storagepartitionname = &#34;storage&#34;, // Update the storage partition&#xA;        .updateInterval = 60, // Check for updates every 60 minuites&#xA;    };&#xA;    ghota_client_handle_t *ghota_client = ghota_init(&amp;amp;ghconfig);&#xA;    if (ghota_client == NULL) {&#xA;        ESP_LOGE(TAG, &#34;ghota_client_init failed&#34;);&#xA;        return;&#xA;    }&#xA;    esp_event_handler_register(GHOTA_EVENTS, ESP_EVENT_ANY_ID, &amp;amp;ghota_event_callback, ghota_client); // Register a handler to get updates on progress &#xA;    ESP_ERROR_CHECK(ghota_start_update_timer(ghota_client)); // Start the timer to check for updates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manually Checking for updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    ghota_config_t ghconfig = {&#xA;        .filenamematch = &#34;GithubOTA-esp32.bin&#34;,&#xA;        .storagenamematch = &#34;storage-esp32.bin&#34;,&#xA;        .storagepartitionname = &#34;storage&#34;,&#xA;        .updateInterval = 60,&#xA;    };&#xA;    ghota_client_handle_t *ghota_client = ghota_init(&amp;amp;ghconfig);&#xA;    if (ghota_client == NULL) {&#xA;        ESP_LOGE(TAG, &#34;ghota_client_init failed&#34;);&#xA;        return;&#xA;    }&#xA;    esp_event_handler_register(GHOTA_EVENTS, ESP_EVENT_ANY_ID, &amp;amp;ghota_event_callback, ghota_client);&#xA;    ESP_ERROR_CHECK(ghota_check(ghota_client));&#xA;&#xA;    semver_t *cur = ghota_get_current_version(ghota_client);&#xA;    if (cur) {&#xA;        ESP_LOGI(TAG, &#34;Current version: %d.%d.%d&#34;, cur-&amp;gt;major, cur-&amp;gt;minor, cur-&amp;gt;patch);&#xA;        semver_free(cur);&#xA;    }&#xA;&#xA;    semver_t *new = ghota_get_latest_version(ghota_client);&#xA;    if (new) {&#xA;        ESP_LOGI(TAG, &#34;New version: %d.%d.%d&#34;, new-&amp;gt;major, new-&amp;gt;minor, new-&amp;gt;patch);&#xA;        semver_free(new);&#xA;    }&#xA;    ESP_ERROR_CHECK(ghota_update(ghota_client));&#xA;    ESP_ERROR_CHECK(ghota_free(ghota_client));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The following configuration options are available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* config.filenamematch &amp;lt;- Glob pattern to match against the firmware file from the Github Releases page. &#xA;* config.storagenamematch &amp;lt;- Glob pattern to match against the storage file from the Github Releases page.&#xA;* config.storagepartitionname &amp;lt;- Name of the storage partition to update (as defined in partitions.csv)&#xA;* config.hostname &amp;lt;- Hostname of the Github API (default: api.github.com)&#xA;* config.orgname &amp;lt;- Name of the Github User or Organization&#xA;* config.reponame &amp;lt;- Name of the Github Repository&#xA;* config.updateInterval &amp;lt;- Interval in minutes to check for updates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Github Actions&lt;/h2&gt; &#xA;&lt;p&gt;The Github Actions included in this repository can be used to build and release firmware images to Github Releases. This is a good way to automate your CI/CD pipeline, and update your devices in the field. In this example, we build two variants of the Firmware - on for a ESP32 and one for a ESP32-S3 device Using the filenamematch and storagenamematch config options, we can match against the correct firmware image for the device.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  push:&#xA;  pull_request:&#xA;    branches: [master]&#xA;&#xA;permissions:&#xA;  contents: write&#xA;name: Build&#xA;jobs:&#xA;  build:&#xA;    strategy:&#xA;      fail-fast: true&#xA;      matrix: &#xA;        targets: [esp32, esp32s3]&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - name: Checkout repo&#xA;      uses: actions/checkout@v3&#xA;      with:&#xA;        submodules: &#39;recursive&#39;&#xA;    - name: esp-idf build&#xA;      uses: Fishwaldo/esp-idf-ci-action@v1.1&#xA;      with:&#xA;        esp_idf_version: v4.4.3&#xA;        target: ${{ matrix.targets }}&#xA;        path: &#39;examples/esp_ghota_example&#39;&#xA;    - name: Rename artifact&#xA;      run: |&#xA;        ls -lah &#xA;        cp examples/esp_ghota_example/build/esp_ghota_example.bin esp_ghota_example-${{ matrix.targets }}.bin&#xA;        cp examples/esp_ghota_example/build/storage.bin storage-${{ matrix.targets }}.bin&#xA;    - name: Archive Firmware Files&#xA;      uses: actions/upload-artifact@v3&#xA;      with: &#xA;        name: ${{ matrix.targets }}-firmware&#xA;        path: &#34;*-${{ matrix.targets }}.bin&#34;&#xA;&#xA;  release:&#xA;    needs: build&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - name: Download Firmware Files&#xA;      uses: actions/download-artifact@v2&#xA;      with:&#xA;        path: release&#xA;    - name: Release Firmware&#xA;      uses: ncipollo/release-action@v1&#xA;      if: startsWith(github.ref, &#39;refs/tags/&#39;) &#xA;      with:&#xA;        artifacts: release/*/*.bin&#xA;        generateReleaseNotes: true&#xA;        allowUpdates: true&#xA;        token: ${{ secrets.GITHUB_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>HydrasDB/hydra</title>
    <updated>2022-12-17T01:30:27Z</updated>
    <id>tag:github.com,2022-12-17:/HydrasDB/hydra</id>
    <link href="https://github.com/HydrasDB/hydra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open source Snowflake alternative. OLAP Postgres&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HydrasDB/hydra/main/.images/header.svg?sanitize=true&#34; alt=&#34;Hydra - the open source data warehouse&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hydras.io/#early-access&#34;&gt;Request Access&lt;/a&gt; - &lt;a href=&#34;https://docs.hydras.io/getting-started/readme&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://www.youtube.com/watch?v=DD1oD1LWNOo&#34;&gt;Demo&lt;/a&gt; - &lt;a href=&#34;https://hydras.io/&#34;&gt;Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The open source Snowflake alternative. OLAP Postgres.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hydras.io/&#34;&gt;Hydra&lt;/a&gt; is an open source data warehouse built on Postgres. It’s easy to use and designed for OLAP and HTAP workloads. Hydra serves analytical reporting with parallelized query execution and vectorization on columnar storage. Operational work and high-throughput transactions write to standard Postgres heap tables. All Postgres extensions, tools, and connectors work with Hydra.&lt;/p&gt; &#xA;&lt;p&gt;Eliminate data silos today. Solve hard problems fast.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 🗃 hosted postgres database - &lt;a href=&#34;https://docs.hydras.io/getting-started&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 📎 append-only columnar store - &lt;a href=&#34;https://docs.hydras.io/concepts/what-is-columnar&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 📊 external tables - &lt;a href=&#34;https://docs.hydras.io/concepts/using-hydra-external-tables&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 📅 postgres scheduler - &lt;a href=&#34;https://docs.hydras.io/cloud-warehouse-operations/using-hydra-scheduler&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 🤹‍♀️ query parallelization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 🐎 vectorized execution of WHERE clauses&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 📝 updates and deletes for columnar store&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 🏎️ vectorized execution of aggegate functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 🚅 use of SIMD in vectorized execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ↔️ separation of compute and storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HydrasDB/hydra/main/.images/hydra-db.png&#34; alt=&#34;Where does Hydra fit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⏩ Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The Hydra &lt;a href=&#34;https://github.com/hydrasdb/hydra/pkgs/container/hydra&#34;&gt;Docker image&lt;/a&gt; is a drop-in replacement for &lt;a href=&#34;https://hub.docker.com/_/postgres&#34;&gt;postgres Docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also try out Hydra locally using &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/HydrasDB/hydra &amp;amp;&amp;amp; cd hydra&#xA;cp .env.example .env&#xA;docker compose up&#xA;psql postgres://postgres:hydra@127.0.0.1:5432&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Or&lt;/h3&gt; &#xA;&lt;p&gt;Managed in the &lt;a href=&#34;https://hydras.io/#early-access&#34;&gt;cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📄 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find our documentation &lt;a href=&#34;https://docs.hydras.io/getting-started/setup-guide&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;👩🏾‍🤝‍👨🏻 Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/invite/zKpVxbXnNY&#34;&gt;Discord chat&lt;/a&gt; for quick questions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HydrasDB/hydra/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; for longer topics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HydrasDB/hydra/issues&#34;&gt;GitHub Issues&lt;/a&gt; for bugs and missing features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/hydrasdb&#34;&gt;@HydrasDB&lt;/a&gt; on Twitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;✅ Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Early Access: Closed, private testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Open Alpha: Open for everyone&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Open Beta: Hydra can handle most non-enterprise use&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Production: Enterprise ready&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are currently in Early Access. Watch &lt;a href=&#34;https://github.com/HydrasDB/hydra/releases&#34;&gt;releases&lt;/a&gt; of this repo to get notified of updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HydrasDB/hydra/main/.images/follow.gif&#34; alt=&#34;follow the repo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🛠 Developing Hydra&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/HydrasDB/hydra/main/DEVELOPERS.md&#34;&gt;DEVELOPERS.md&lt;/a&gt; for information on contributing to Hydra and building the image.&lt;/p&gt; &#xA;&lt;h2&gt;📑 License and Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Hydra is only possible by building on the shoulders of giants.&lt;/p&gt; &#xA;&lt;p&gt;The code in this repo is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/HydrasDB/hydra/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;. Pre-built images are subject to additional licenses as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HydrasDB/hydra/tree/main/columnar&#34;&gt;Hydra columnar engine&lt;/a&gt; - AGPL 3.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zalando/spilo&#34;&gt;Spilo&lt;/a&gt; - Apache 2.0&lt;/li&gt; &#xA; &lt;li&gt;The underlying Spilo image contains a large number of open source projects, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Postgres - &lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;the Postgres license&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wal-g/wal-g&#34;&gt;WAL-G&lt;/a&gt; - Apache 2.0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;Ubuntu&#39;s docker image&lt;/a&gt; - various copyleft licenses (MIT, GPL, Apache, etc)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As for any pre-built image usage, it is the image user&#39;s responsibility to ensure that any use of this image complies with any relevant licenses for all software contained within.&lt;/p&gt;</summary>
  </entry>
</feed>