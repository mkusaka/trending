<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-12T01:32:11Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Pithikos/C-Thread-Pool</title>
    <updated>2023-07-12T01:32:11Z</updated>
    <id>tag:github.com,2023-07-12:/Pithikos/C-Thread-Pool</id>
    <link href="https://github.com/Pithikos/C-Thread-Pool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal but powerful thread pool in ANSI C&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Pithikos/C-Thread-Pool&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/Pithikos/C-Thread-Pool.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;C Thread Pool&lt;/h1&gt; &#xA;&lt;p&gt;This is a minimal but advanced threadpool implementation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ANCI C and POSIX compliant&lt;/li&gt; &#xA; &lt;li&gt;Pause/resume/wait as you like&lt;/li&gt; &#xA; &lt;li&gt;Simple easy-to-digest API&lt;/li&gt; &#xA; &lt;li&gt;Well tested&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The threadpool is under MIT license. Notice that this project took a considerable amount of work and sacrifice of my free time and the reason I give it for free (even for commercial use) is so when you become rich and wealthy you don&#39;t forget about us open-source creatures of the night. Cheers!&lt;/p&gt; &#xA;&lt;p&gt;If this project reduced your development time feel free to buy me a coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.me/seferidis&#34;&gt;&lt;img src=&#34;https://www.paypal.com/en_US/i/btn/x-click-but21.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run an example&lt;/h2&gt; &#xA;&lt;p&gt;The library is not precompiled so you have to compile it with your project. The thread pool uses POSIX threads so if you compile with gcc on Linux you have to use the flag &lt;code&gt;-pthread&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc example.c thpool.c -D THPOOL_DEBUG -pthread -o example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the executable like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Include the header in your source file: &lt;code&gt;#include &#34;thpool.h&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a thread pool with number of threads you want: &lt;code&gt;threadpool thpool = thpool_init(4);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add work to the pool: &lt;code&gt;thpool_add_work(thpool, (void*)function_p, (void*)arg_p);&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The workers(threads) will start their work automatically as fast as there is new work in the pool. If you want to wait for all added work to be finished before continuing you can use &lt;code&gt;thpool_wait(thpool);&lt;/code&gt;. If you want to destroy the pool you can use &lt;code&gt;thpool_destroy(thpool);&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;For a deeper look into the documentation check in the &lt;a href=&#34;https://github.com/Pithikos/C-Thread-Pool/raw/master/thpool.h&#34;&gt;thpool.h&lt;/a&gt; file. Below is a fast practical overview.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function example&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_init(4)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will return a new threadpool with &lt;code&gt;4&lt;/code&gt; threads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_add_work(thpool, (void*)function_p, (void*)arg_p)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will add new work to the pool. Work is simply a function. You can pass a single argument to the function if you wish. If not, &lt;code&gt;NULL&lt;/code&gt; should be passed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_wait(thpool)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will wait for all jobs (both in queue and currently running) to finish.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_destroy(thpool)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This will destroy the threadpool. If jobs are currently being executed, then it will wait for them to finish.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_pause(thpool)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All threads in the threadpool will pause no matter if they are idle or executing work.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_resume(thpool)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the threadpool is paused, then all threads will resume from where they were.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;thpool_num_threads_working(thpool)&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will return the number of currently working threads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;You are very welcome to contribute. If you have a new feature in mind, you can always open an issue on github describing it so you don&#39;t end up doing a lot of work that might not be eventually merged. Generally we are very open to contributions as long as they follow the below keypoints.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try to keep the API as minimal as possible. That means if a feature or fix can be implemented without affecting the existing API but requires more development time, then we will opt to sacrifice development time.&lt;/li&gt; &#xA; &lt;li&gt;Solutions need to be POSIX compliant. The thread-pool is advertised as such so it makes sense that it actually is.&lt;/li&gt; &#xA; &lt;li&gt;For coding style simply try to stick to the conventions you find in the existing codebase.&lt;/li&gt; &#xA; &lt;li&gt;Tests: A new fix or feature should be covered by tests. If the existing tests are not sufficient, we expect an according test to follow with the pull request.&lt;/li&gt; &#xA; &lt;li&gt;Documentation: for a new feature please add documentation. For an API change the documentation has to be thorough and super easy to understand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you wish to &lt;strong&gt;get access as a collaborator&lt;/strong&gt; feel free to mention it in the issue &lt;a href=&#34;https://github.com/Pithikos/C-Thread-Pool/issues/78&#34;&gt;https://github.com/Pithikos/C-Thread-Pool/issues/78&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lh3/pangene</title>
    <updated>2023-07-12T01:32:11Z</updated>
    <id>tag:github.com,2023-07-12:/lh3/pangene</id>
    <link href="https://github.com/lh3/pangene" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WIP: Constructing a pangenome gene graph&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;a name=&#34;started&#34;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Align proteins to each genome&#xA;miniprot --outs=0.97 --no-cs -Iut16 genome1.fna proteins.faa &amp;gt; genome1.paf&#xA;miniprot --outs=0.97 --no-cs -Iut16 genome2.fna proteins.faa &amp;gt; genome2.paf&#xA;&#xA;# Construct a pangene graph&#xA;pangene -a2 genome1.paf genome2.paf &amp;gt; graph.gfa&#xA;&#xA;# Extract a subgraph around several genes&#xA;gfatools view -wl C4A,C4B -r3 graph.gfa &amp;gt; subgraph.gfa&#xA;&#xA;# Visit http://45.55.105.22:8000 for pangene HPRC graph&#xA;# Visualize small subgraphs at https://lh3.github.io/gfatools/&#xA;&#xA;# Check manpage&#xA;man ./pangene.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#build&#34;&gt;Graph Construction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#prep-aa&#34;&gt;Preparing a protein set&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#align-aa&#34;&gt;Aligning proteins to genomes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#build-graph&#34;&gt;Constructing a pangene graph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#visual&#34;&gt;Graph Visualization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/#limit&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;intro&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Pangene is a command-line tool to construct a pangenome gene graph. In this graph, a node repsents a marker gene and an edge between two genes indicates their genomic adjaceny on input genomes. Pangene takes the &lt;a href=&#34;https://github.com/lh3/miniprot&#34;&gt;miniprot&lt;/a&gt; alignment between a protein set and multiple genomes and produces a graph in the GFA format. It attempts to reduce the redundancy in the input proteins and filter spurious alignments while preserving close but non-identical paralogs. The output graph can be visualized in generic GFA viewers such as &lt;a href=&#34;https://github.com/asl/BandageNG&#34;&gt;BandageNG&lt;/a&gt; or via a &lt;a href=&#34;https://raw.githubusercontent.com/lh3/pangene/main/@visual&#34;&gt;web interface&lt;/a&gt;. Users can explore local human subgraphs at a &lt;a href=&#34;http://pangene.liheng.org&#34;&gt;public server&lt;/a&gt;. Prebuilt pangene graphs can be found at &lt;a href=&#34;https://doi.org/10.5281/zenodo.8118576&#34;&gt;DOI:10.5281/zenodo.8118576&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bacterial pangenome tools such as &lt;a href=&#34;https://github.com/gtonkinhill/panaroo&#34;&gt;panaroo&lt;/a&gt; often leverage gene graphs to build bacterial pangenomes. Pangene is different in that it uses miniprot to infer gene models. This makes pangene applicable to large Eukaryotic pangenomes and robust to imperfect gene annotations.&lt;/p&gt; &#xA;&lt;p&gt;Pangene is a &lt;strong&gt;work-in-progress&lt;/strong&gt;. It may not be properly handling corner cases during graph construction. Please create an issue if you see bugs or questionable subgraphs.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;build&#34;&gt;&lt;/a&gt;Graph Construction&lt;/h2&gt; &#xA;&lt;p&gt;Pangene takes a list of protein-to-genome alignment as input. To generate these alignments, you need to align the same set of proteins to multiple genomes. How to choose the protein set can be tricky.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;prep-aa&#34;&gt;&lt;/a&gt;Preparing a protein set&lt;/h3&gt; &#xA;&lt;p&gt;For constructing a human pangene graph, the simplest choice is to use annotated genes on GRCh38. It is highly recommended to name a protein sequence like &lt;code&gt;RGPD6:ENSP00000512633.1&lt;/code&gt; where &lt;code&gt;RGPD6&lt;/code&gt; is the gene name and &lt;code&gt;ENSP00000512633.1&lt;/code&gt; is the protein identifier. Different isoforms of the same gene can be present in the protein set. Pangene is designed to work with them. In the output GFA, nodes are named after genes. You would want to use human-readable gene names for visualization later.&lt;/p&gt; &#xA;&lt;p&gt;Due to structural variations, some individuals may have genes distinct from the gene annotations on the reference genome. In principle, it is preferred to include structurally variable genes in the protein set. Nonetheless, such genes are rare in the human genome. You can still get decent pangene graphs with reference gene annotations only.&lt;/p&gt; &#xA;&lt;p&gt;For a new species without good gene annotations, you may use protein annotations from a closely related species. You may pool proteins from multiple closely related species as well. Pangene aims to work with such input but this use case has not been carefully evaluated.&lt;/p&gt; &#xA;&lt;p&gt;Given a bacteria pangenome, you may predict genes with existing tools, cluster them with CD-HIT or MMseqs2 and feed the representative protein of each cluster to pangene. This apparently works for ~150 complete &lt;em&gt;Mycobacterium tuberculosis&lt;/em&gt; genomes but again, more evaluation is needed.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;align-aa&#34;&gt;&lt;/a&gt;Aligning proteins to genomes&lt;/h3&gt; &#xA;&lt;p&gt;Pangene currently only works with miniprot&#39;s PAF output. You may align proteins to each genome with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;miniprot --outs=0.97 --no-cs -Iut16 genomeX.fna proteins.faa &amp;gt; genomeX.paf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For aligning proteins to bacterial genomes without splicing, add &lt;code&gt;-S&lt;/code&gt; to the command line above.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;build-graph&#34;&gt;&lt;/a&gt;Constructing a pangene graph&lt;/h3&gt; &#xA;&lt;p&gt;The following command-line constructs a pangene graph&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pangene *.paf &amp;gt; graph.gfa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the output graph is cluttered in the Bandage viewer, you may add option &lt;code&gt;-a2&lt;/code&gt; to filter out edges supported by a single genome. By default, pangene filters out genes occurring in less than 5% of the genomes after deredundancy. If you want to retain low-frequency genes, add &lt;code&gt;-p0&lt;/code&gt; to disable the filter.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;visual&#34;&gt;&lt;/a&gt;Graph Visualization&lt;/h2&gt; &#xA;&lt;p&gt;You can look at the entire graph in the Bandage GFA viewer. Bandage shows the topology but not the haplotype paths. When you are interested in a specific gene, you would probably like to try the gfa-server that is part of &lt;a href=&#34;https://github.com/lh3/gfatools&#34;&gt;gfatools&lt;/a&gt;. &lt;a href=&#34;http://pangene.liheng.org&#34;&gt;Here&lt;/a&gt; is a public server for human genes. You can deploy this server on your machine with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://zenodo.org/record/8126999/files/pangene-r87-bin.tar.bz2?download=1|tar -jxvf -&#xA;cd pangene-r87-bin&#xA;bin_mac-arm64/gfa-server -d html data/HPRC-r87a.gfa.gz 2&amp;gt; server.log # for Mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can open link &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt; in your browser, type gene names and visualize a local subgraph around input genes.&lt;/p&gt; &#xA;&lt;p&gt;The gfa-server is built on top of gfatools. You can directly use gfatools to extract subgraphs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gfatools view -wl C4A,C4B -r3 graph.gfa &amp;gt; subgraph.gfa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;-w&lt;/code&gt; tries to flip gene paths to the same orientation, &lt;code&gt;-l&lt;/code&gt; specifies the list of gene names and &lt;code&gt;-r&lt;/code&gt; extracts nearby genes. If you put gene names in a file &lt;code&gt;list.txt&lt;/code&gt;, you may use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gfatools view -wl @list.txt -r3 graph.gfa &amp;gt; subgraph.gfa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can visualize subgraphs at a &lt;a href=&#34;https://lh3.github.io/gfatools/&#34;&gt;online gfatools viewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;limit&#34;&gt;&lt;/a&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In general, more testing needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pangene only works with &lt;a href=&#34;https://github.com/lh3/miniprot&#34;&gt;miniprot&lt;/a&gt;&#39;s PAF output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the output graph, arcs on W-lines may be absent from L-lines.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>