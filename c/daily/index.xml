<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-08T01:36:55Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pjreddie/darknet</title>
    <updated>2022-06-08T01:36:55Z</updated>
    <id>tag:github.com,2022-06-08:/pjreddie/darknet</id>
    <link href="https://github.com/pjreddie/darknet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convolutional Neural Networks&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://pjreddie.com/media/files/darknet-black-small.png&#34; alt=&#34;Darknet Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Darknet&lt;/h1&gt; &#xA;&lt;p&gt;Darknet is an open source neural network framework written in C and CUDA. It is fast, easy to install, and supports CPU and GPU computation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discord&lt;/strong&gt; invite link for for communication and questions: &lt;a href=&#34;https://discord.gg/zSq8rtW&#34;&gt;https://discord.gg/zSq8rtW&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scaled-YOLOv4:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;paper (CVPR 2021)&lt;/strong&gt;: &lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2021/html/Wang_Scaled-YOLOv4_Scaling_Cross_Stage_Partial_Network_CVPR_2021_paper.html&#34;&gt;https://openaccess.thecvf.com/content/CVPR2021/html/Wang_Scaled-YOLOv4_Scaling_Cross_Stage_Partial_Network_CVPR_2021_paper.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;source code - Pytorch (use to reproduce results):&lt;/strong&gt; &lt;a href=&#34;https://github.com/WongKinYiu/ScaledYOLOv4&#34;&gt;https://github.com/WongKinYiu/ScaledYOLOv4&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;source code - Darknet:&lt;/strong&gt; &lt;a href=&#34;https://github.com/AlexeyAB/darknet&#34;&gt;https://github.com/AlexeyAB/darknet&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Medium:&lt;/strong&gt; &lt;a href=&#34;https://alexeyab84.medium.com/scaled-yolo-v4-is-the-best-neural-network-for-object-detection-on-ms-coco-dataset-39dfa22fa982?source=friends_link&amp;amp;sk=c8553bfed861b1a7932f739d26f487c8&#34;&gt;https://alexeyab84.medium.com/scaled-yolo-v4-is-the-best-neural-network-for-object-detection-on-ms-coco-dataset-39dfa22fa982?source=friends_link&amp;amp;sk=c8553bfed861b1a7932f739d26f487c8&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;YOLOv4:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;paper:&lt;/strong&gt; &lt;a href=&#34;https://arxiv.org/abs/2004.10934&#34;&gt;https://arxiv.org/abs/2004.10934&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;source code:&lt;/strong&gt; &lt;a href=&#34;https://github.com/AlexeyAB/darknet&#34;&gt;https://github.com/AlexeyAB/darknet&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wiki:&lt;/strong&gt; &lt;a href=&#34;https://github.com/AlexeyAB/darknet/wiki&#34;&gt;https://github.com/AlexeyAB/darknet/wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;useful links:&lt;/strong&gt; &lt;a href=&#34;https://medium.com/@alexeyab84/yolov4-the-most-accurate-real-time-neural-network-on-ms-coco-dataset-73adfd3602fe?source=friends_link&amp;amp;sk=6039748846bbcf1d960c3061542591d7&#34;&gt;https://medium.com/@alexeyab84/yolov4-the-most-accurate-real-time-neural-network-on-ms-coco-dataset-73adfd3602fe?source=friends_link&amp;amp;sk=6039748846bbcf1d960c3061542591d7&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information see the &lt;a href=&#34;http://pjreddie.com/darknet&#34;&gt;Darknet project website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4096485/146988929-1ed0cbec-1e01-4ad0-b42c-808dcef32994.png&#34; alt=&#34;yolo_progress&#34;&gt; &lt;a href=&#34;https://paperswithcode.com/sota/object-detection-on-coco&#34;&gt;https://paperswithcode.com/sota/object-detection-on-coco&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4096485/112776361-281d8380-9048-11eb-8083-8728b12dcd55.png&#34; alt=&#34;scaled_yolov4&#34;&gt; AP50:95 - FPS (Tesla V100) Paper: &lt;a href=&#34;https://arxiv.org/abs/2011.08036&#34;&gt;https://arxiv.org/abs/2011.08036&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4096485/101363015-e5c21200-38b1-11eb-986f-b3e516e05977.png&#34; alt=&#34;YOLOv4Tiny&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4096485/90338826-06114c80-dff5-11ea-9ba2-8eb63a7409b3.png&#34; alt=&#34;YOLOv4&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4096485/90338805-e5e18d80-dff4-11ea-8a68-5710956256ff.png&#34; alt=&#34;OpenCV_TRT&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{bochkovskiy2020yolov4,&#xA;      title={YOLOv4: Optimal Speed and Accuracy of Object Detection}, &#xA;      author={Alexey Bochkovskiy and Chien-Yao Wang and Hong-Yuan Mark Liao},&#xA;      year={2020},&#xA;      eprint={2004.10934},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@InProceedings{Wang_2021_CVPR,&#xA;    author    = {Wang, Chien-Yao and Bochkovskiy, Alexey and Liao, Hong-Yuan Mark},&#xA;    title     = {{Scaled-YOLOv4}: Scaling Cross Stage Partial Network},&#xA;    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;    month     = {June},&#xA;    year      = {2021},&#xA;    pages     = {13029-13038}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>xianyi/OpenBLAS</title>
    <updated>2022-06-08T01:36:55Z</updated>
    <id>tag:github.com,2022-06-08:/xianyi/OpenBLAS</id>
    <link href="https://github.com/xianyi/OpenBLAS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenBLAS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/xianyi/OpenBLAS?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/xianyi/OpenBLAS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Travis CI: &lt;a href=&#34;https://travis-ci.com/xianyi/OpenBLAS&#34;&gt;&lt;img src=&#34;https://travis-ci.com/xianyi/OpenBLAS.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AppVeyor: &lt;a href=&#34;https://ci.appveyor.com/project/xianyi/openblas/branch/develop&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/09sohd35n8nkkx64/branch/develop?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Drone CI: &lt;a href=&#34;https://cloud.drone.io/xianyi/OpenBLAS/&#34;&gt;&lt;img src=&#34;https://cloud.drone.io/api/badges/xianyi/OpenBLAS/status.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/xianyi/OpenBLAS/_build/latest?definitionId=1&amp;amp;branchName=develop&#34;&gt;&lt;img src=&#34;https://dev.azure.com/xianyi/OpenBLAS/_apis/build/status/xianyi.OpenBLAS?branchName=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OpenBLAS is an optimized BLAS (Basic Linear Algebra Subprograms) library based on GotoBLAS2 1.13 BSD version.&lt;/p&gt; &#xA;&lt;p&gt;Please read the documentation on the OpenBLAS wiki pages: &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a general introduction to the BLAS routines, please refer to the extensive documentation of their reference implementation hosted at netlib: &lt;a href=&#34;https://www.netlib.org/blas&#34;&gt;https://www.netlib.org/blas&lt;/a&gt;. On that site you will likewise find documentation for the reference implementation of the higher-level library LAPACK - the &lt;strong&gt;L&lt;/strong&gt;inear &lt;strong&gt;A&lt;/strong&gt;lgebra &lt;strong&gt;Pack&lt;/strong&gt;age that comes included with OpenBLAS. If you are looking for a general primer or refresher on Linear Algebra, the set of six 20-minute lecture videos by Prof. Gilbert Strang on either MIT OpenCourseWare &lt;a href=&#34;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/&#34;&gt;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/&lt;/a&gt; or Youtube &lt;a href=&#34;https://www.youtube.com/playlist?list=PLUl4u3cNGP61iQEFiWLE21EJCxwmWvvek&#34;&gt;https://www.youtube.com/playlist?list=PLUl4u3cNGP61iQEFiWLE21EJCxwmWvvek&lt;/a&gt; may be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Binary Packages&lt;/h2&gt; &#xA;&lt;p&gt;We provide official binary packages for the following platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows x86/x86_64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can download them from &lt;a href=&#34;https://sourceforge.net/projects/openblas/files/&#34;&gt;file hosting on sourceforge.net&lt;/a&gt; or from the Releases section of the github project page, &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/releases&#34;&gt;https://github.com/xianyi/OpenBLAS/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from Source&lt;/h2&gt; &#xA;&lt;p&gt;Download from project homepage, &lt;a href=&#34;https://xianyi.github.com/OpenBLAS/&#34;&gt;https://xianyi.github.com/OpenBLAS/&lt;/a&gt;, or check out the code using Git from &lt;a href=&#34;https://github.com/xianyi/OpenBLAS.git&#34;&gt;https://github.com/xianyi/OpenBLAS.git&lt;/a&gt;. (If you want the most up to date version, be sure to use the develop branch - master is several years out of date due to a change of maintainership.) Buildtime parameters can be chosen in Makefile.rule, see there for a short description of each option. Most can also be given directly on the make or cmake command line.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Building OpenBLAS requires the following to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;A C compiler, e.g. GCC or Clang&lt;/li&gt; &#xA; &lt;li&gt;A Fortran compiler (optional, for LAPACK)&lt;/li&gt; &#xA; &lt;li&gt;IBM MASS (optional, see below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Normal compile&lt;/h3&gt; &#xA;&lt;p&gt;Simply invoking &lt;code&gt;make&lt;/code&gt; (or &lt;code&gt;gmake&lt;/code&gt; on BSD) will detect the CPU automatically. To set a specific target CPU, use &lt;code&gt;make TARGET=xxx&lt;/code&gt;, e.g. &lt;code&gt;make TARGET=NEHALEM&lt;/code&gt;. The full target list is in the file &lt;code&gt;TargetList.txt&lt;/code&gt;. For building with &lt;code&gt;cmake&lt;/code&gt;, the usual conventions apply, i.e. create a build directory either underneath the toplevel OpenBLAS source directory or separate from it, and invoke &lt;code&gt;cmake&lt;/code&gt; there with the path to the source tree and any build options you plan to set.&lt;/p&gt; &#xA;&lt;h3&gt;Cross compile&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;FC&lt;/code&gt; to point to the cross toolchains, and set &lt;code&gt;HOSTCC&lt;/code&gt; to your host C compiler. The target must be specified explicitly when cross compiling.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On an x86 box, compile this library for a loongson3a CPU:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make BINARY=64 CC=mips64el-unknown-linux-gnu-gcc FC=mips64el-unknown-linux-gnu-gfortran HOSTCC=gcc TARGET=LOONGSON3A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or same with the newer mips-crosscompiler put out by Loongson that defaults to the 32bit ABI:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc CC=&#39;/opt/mips-loongson-gcc7.3-linux-gnu/2019.06-29/bin/mips-linux-gnu-gcc -mabi=64&#39; FC=&#39;/opt/mips-loongson-gcc7.3-linux-gnu/2019.06-29/bin/mips-linux-gnu-gfortran -mabi=64&#39; TARGET=LOONGSON3A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On an x86 box, compile this library for a loongson3a CPU with loongcc (based on Open64) compiler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make CC=loongcc FC=loongf95 HOSTCC=gcc TARGET=LOONGSON3A CROSS=1 CROSS_SUFFIX=mips64el-st-linux-gnu-   NO_LAPACKE=1 NO_SHARED=1 BINARY=32&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debug version&lt;/h3&gt; &#xA;&lt;p&gt;A debug version can be built using &lt;code&gt;make DEBUG=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compile with MASS support on Power CPU (optional)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ibm.com/support/home/product/W511326D80541V01/other_software/mathematical_acceleration_subsystem&#34;&gt;IBM MASS&lt;/a&gt; library consists of a set of mathematical functions for C, C++, and Fortran applications that are tuned for optimum performance on POWER architectures. OpenBLAS with MASS requires a 64-bit, little-endian OS on POWER. The library can be installed as shown:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On Ubuntu:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -q http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/public.gpg -O- | sudo apt-key add -&#xA;echo &#34;deb http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/ trusty main&#34; | sudo tee /etc/apt/sources.list.d/ibm-xl-compiler-eval.list&#xA;sudo apt-get update&#xA;sudo apt-get install libxlmass-devel.8.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On RHEL/CentOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/repodata/repomd.xml.key&#xA;sudo rpm --import repomd.xml.key&#xA;wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/ibm-xl-compiler-eval.repo&#xA;sudo cp ibm-xl-compiler-eval.repo /etc/yum.repos.d/&#xA;sudo yum install libxlmass-devel.8.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing the MASS library, compile OpenBLAS with &lt;code&gt;USE_MASS=1&lt;/code&gt;. For example, to compile on Power8 with MASS support: &lt;code&gt;make USE_MASS=1 TARGET=POWER8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install to a specific directory (optional)&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;PREFIX=&lt;/code&gt; when invoking &lt;code&gt;make&lt;/code&gt;, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make install PREFIX=your_installation_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default installation directory is &lt;code&gt;/opt/OpenBLAS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported CPUs and Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;code&gt;GotoBLAS_01Readme.txt&lt;/code&gt; for older CPU models already supported by the 2010 GotoBLAS.&lt;/p&gt; &#xA;&lt;h3&gt;Additional supported CPUs&lt;/h3&gt; &#xA;&lt;h4&gt;x86/x86-64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Xeon 56xx (Westmere)&lt;/strong&gt;: Used GotoBLAS2 Nehalem codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Sandy Bridge&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Haswell&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX2 and FMA on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Skylake-X&lt;/strong&gt;: Optimized Level-3 and Level-2 BLAS with AVX512 and FMA on x86-64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intel Cooper Lake&lt;/strong&gt;: as Skylake-X with improved BFLOAT16 support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD Bobcat&lt;/strong&gt;: Used GotoBLAS2 Barcelona codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD Bulldozer&lt;/strong&gt;: x86-64 ?GEMM FMA4 kernels. (Thanks to Werner Saar)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD PILEDRIVER&lt;/strong&gt;: Uses Bulldozer codes with some optimizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD STEAMROLLER&lt;/strong&gt;: Uses Bulldozer codes with some optimizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AMD ZEN&lt;/strong&gt;: Uses Haswell codes with some optimizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MIPS32&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS 1004K&lt;/strong&gt;: uses P5600 codes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS 24K&lt;/strong&gt;: uses P5600 codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MIPS64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ICT Loongson 3A&lt;/strong&gt;: Optimized Level-3 BLAS and the part of Level-1,2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ICT Loongson 3B&lt;/strong&gt;: Experimental&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ARM&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv6&lt;/strong&gt;: Optimized BLAS for vfpv2 and vfpv3-d16 (e.g. BCM2835, Cortex M0+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv7&lt;/strong&gt;: Optimized BLAS for vfpv3-d32 (e.g. Cortex A8, A9 and A15)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ARM64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARMv8&lt;/strong&gt;: Basic ARMV8 with small caches, optimized Level-3 and Level-2 BLAS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-A53&lt;/strong&gt;: same as ARMV8 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-A55&lt;/strong&gt;: same as ARMV8 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A57&lt;/strong&gt;: Optimized Level-3 and Level-2 functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A72&lt;/strong&gt;: same as A57 ( different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex A73&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Falkor&lt;/strong&gt;: same as A57 (different cpu specifications)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX&lt;/strong&gt;: Optimized some Level-1 functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX2T99&lt;/strong&gt;: Optimized Level-3 BLAS and parts of Levels 1 and 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ThunderX3T110&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TSV110&lt;/strong&gt;: Optimized some Level-3 helper functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EMAG 8180&lt;/strong&gt;: preliminary support based on A57&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neoverse N1&lt;/strong&gt;: (AWS Graviton2) preliminary support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Apple Vortex&lt;/strong&gt;: preliminary support based on ARMV8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PPC/PPC64&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;POWER8&lt;/strong&gt;: Optimized BLAS, only for PPC64LE (Little Endian), only with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POWER9&lt;/strong&gt;: Optimized Level-3 BLAS (real) and some Level-1,2. PPC64LE with OpenMP only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POWER10&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IBM zEnterprise System&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Z13&lt;/strong&gt;: Optimized Level-3 BLAS and Level-1,2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Z14&lt;/strong&gt;: Optimized Level-3 BLAS and (single precision) Level-1,2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;RISC-V&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C910V&lt;/strong&gt;: Optimized Level-3 BLAS (real) and Level-1,2 by RISC-V Vector extension 0.7.1. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make HOSTCC=gcc TARGET=C910V CC=riscv64-unknown-linux-gnu-gcc FC=riscv64-unknown-linux-gnu-gfortran&#xA;&lt;/code&gt;&lt;/pre&gt; (also known to work on C906)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support for multiple targets in a single library&lt;/h3&gt; &#xA;&lt;p&gt;OpenBLAS can be built for multiple targets with runtime detection of the target cpu by specifiying &lt;code&gt;DYNAMIC_ARCH=1&lt;/code&gt; in Makefile.rule, on the gmake command line or as &lt;code&gt;-DDYNAMIC_ARCH=TRUE&lt;/code&gt; in cmake.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;x86_64&lt;/strong&gt;, the list of targets this activates contains Prescott, Core2, Nehalem, Barcelona, Sandybridge, Bulldozer, Piledriver, Steamroller, Excavator, Haswell, Zen, SkylakeX. For cpu generations not included in this list, the corresponding older model is used. If you also specify &lt;code&gt;DYNAMIC_OLDER=1&lt;/code&gt;, specific support for Penryn, Dunnington, Opteron, Opteron/SSE3, Bobcat, Atom and Nano is added. Finally there is an option &lt;code&gt;DYNAMIC_LIST&lt;/code&gt; that allows to specify an individual list of targets to include instead of the default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DYNAMIC_ARCH&lt;/code&gt; is also supported on &lt;strong&gt;x86&lt;/strong&gt;, where it translates to Katmai, Coppermine, Northwood, Prescott, Banias, Core2, Penryn, Dunnington, Nehalem, Athlon, Opteron, Opteron_SSE3, Barcelona, Bobcat, Atom and Nano.&lt;/p&gt; &#xA;&lt;p&gt;On &lt;strong&gt;ARMV8&lt;/strong&gt;, it enables support for CortexA53, CortexA57, CortexA72, CortexA73, Falkor, ThunderX, ThunderX2T99, TSV110 as well as generic ARMV8 cpus.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;POWER&lt;/strong&gt;, the list encompasses POWER6, POWER8 and POWER9, on &lt;strong&gt;ZARCH&lt;/strong&gt; it comprises Z13 and Z14.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;TARGET&lt;/code&gt; option can be used in conjunction with &lt;code&gt;DYNAMIC_ARCH=1&lt;/code&gt; to specify which cpu model should be assumed for all the common code in the library, usually you will want to set this to the oldest model you expect to encounter. Please note that it is not possible to combine support for different architectures, so no combined 32 and 64 bit or x86_64 and arm64 in the same library.&lt;/p&gt; &#xA;&lt;h3&gt;Supported OS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GNU/Linux&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MinGW or Visual Studio (CMake)/Windows&lt;/strong&gt;: Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Darwin/macOS/OSX/iOS&lt;/strong&gt;: Experimental. Although GotoBLAS2 already supports Darwin, we are not OSX/iOS experts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NetBSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DragonFly BSD&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: Supported by the community. Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AIX&lt;/strong&gt;: Supported on PPC up to POWER8&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Haiku&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SunOS&lt;/strong&gt;: Supported by the community. We don&#39;t actively test the library on this OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cortex-M&lt;/strong&gt;: Supported by the community. Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-on-Cortex-M&#34;&gt;https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-on-Cortex-M&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Statically link with &lt;code&gt;libopenblas.a&lt;/code&gt; or dynamically link with &lt;code&gt;-lopenblas&lt;/code&gt; if OpenBLAS was compiled as a shared library.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the number of threads using environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Environment variables are used to specify a maximum number of threads. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OPENBLAS_NUM_THREADS=4&#xA;export GOTO_NUM_THREADS=4&#xA;export OMP_NUM_THREADS=4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The priorities are &lt;code&gt;OPENBLAS_NUM_THREADS&lt;/code&gt; &amp;gt; &lt;code&gt;GOTO_NUM_THREADS&lt;/code&gt; &amp;gt; &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you compile this library with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;, you should set the &lt;code&gt;OMP_NUM_THREADS&lt;/code&gt; environment variable; OpenBLAS ignores &lt;code&gt;OPENBLAS_NUM_THREADS&lt;/code&gt; and &lt;code&gt;GOTO_NUM_THREADS&lt;/code&gt; when compiled with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the number of threads at runtime&lt;/h3&gt; &#xA;&lt;p&gt;We provide the following functions to control the number of threads at runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void goto_set_num_threads(int num_threads);&#xA;void openblas_set_num_threads(int num_threads);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these are only used once at library initialization, and are not available for fine-tuning thread numbers in individual BLAS calls. If you compile this library with &lt;code&gt;USE_OPENMP=1&lt;/code&gt;, you should use the above functions too.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please submit an issue in &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/issues&#34;&gt;https://github.com/xianyi/OpenBLAS/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenBLAS users mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/openblas-users&#34;&gt;https://groups.google.com/forum/#!forum/openblas-users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenBLAS developers mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/openblas-dev&#34;&gt;https://groups.google.com/forum/#!forum/openblas-dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see Changelog.txt to view the differences between OpenBLAS and GotoBLAS2 1.13 BSD version.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/Faq&#34;&gt;FAQ&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;Please use GCC version 4.6 and above to compile Sandy Bridge AVX kernels on Linux/MinGW/BSD.&lt;/li&gt; &#xA; &lt;li&gt;Please use Clang version 3.1 and above to compile the library on Sandy Bridge microarchitecture. Clang 3.0 will generate the wrong AVX binary code.&lt;/li&gt; &#xA; &lt;li&gt;Please use GCC version 6 or LLVM version 6 and above to compile Skylake AVX512 kernels.&lt;/li&gt; &#xA; &lt;li&gt;The number of CPUs/cores should be less than or equal to 256. On Linux &lt;code&gt;x86_64&lt;/code&gt; (&lt;code&gt;amd64&lt;/code&gt;), there is experimental support for up to 1024 CPUs/cores and 128 numa nodes if you build the library with &lt;code&gt;BIGNUMA=1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;OpenBLAS does not set processor affinity by default. On Linux, you can enable processor affinity by commenting out the line &lt;code&gt;NO_AFFINITY=1&lt;/code&gt; in Makefile.rule. However, note that this may cause &lt;a href=&#34;https://stat.ethz.ch/pipermail/r-sig-hpc/2012-April/001348.html&#34;&gt;a conflict with R parallel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Loongson 3A, &lt;code&gt;make test&lt;/code&gt; may fail with a &lt;code&gt;pthread_create&lt;/code&gt; error (&lt;code&gt;EAGAIN&lt;/code&gt;). However, it will be okay when you run the same test case on the shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xianyi/OpenBLAS/issues&#34;&gt;Check for open issues&lt;/a&gt; or open a fresh issue to start a discussion around a feature idea or a bug.&lt;/li&gt; &#xA; &lt;li&gt;Fork the &lt;a href=&#34;https://github.com/xianyi/OpenBLAS&#34;&gt;OpenBLAS&lt;/a&gt; repository to start making your changes.&lt;/li&gt; &#xA; &lt;li&gt;Write a test which shows that the bug was fixed or that the feature works as expected.&lt;/li&gt; &#xA; &lt;li&gt;Send a pull request. Make sure to add yourself to &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/xianyi/OpenBLAS/wiki/Donation&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acidanthera/OpenCorePkg</title>
    <updated>2022-06-08T01:36:55Z</updated>
    <id>tag:github.com,2022-06-08:/acidanthera/OpenCorePkg</id>
    <link href="https://github.com/acidanthera/OpenCorePkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenCore bootloader&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/Logos/OpenCore_with_text_Small.png&#34; width=&#34;200&#34; height=&#34;48&#34;&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg/actions&#34;&gt;&lt;img src=&#34;https://github.com/acidanthera/OpenCorePkg/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/18169&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/18169/badge.svg?flat=1&#34; alt=&#34;Scan Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;OpenCore bootloader with development SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;p&gt;This repository also contains additional UEFI support common libraries shared by other projects in &lt;a href=&#34;https://github.com/acidanthera&#34;&gt;Acidanthera&lt;/a&gt;. The primary purpose of the library set is to provide supplemental functionality for Apple-specific UEFI drivers. Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple disk image loading support&lt;/li&gt; &#xA; &lt;li&gt;Apple keyboard input aggregation&lt;/li&gt; &#xA; &lt;li&gt;Apple PE image signature verification&lt;/li&gt; &#xA; &lt;li&gt;Apple UEFI secure boot supplemental code&lt;/li&gt; &#xA; &lt;li&gt;Audio management with screen reading support&lt;/li&gt; &#xA; &lt;li&gt;Basic ACPI and SMBIOS manipulation&lt;/li&gt; &#xA; &lt;li&gt;CPU information gathering with timer support&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic primitives (SHA-256, RSA, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Decompression primitives (zlib, lzss, lzvn, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Helper code for ACPI reads and modifications&lt;/li&gt; &#xA; &lt;li&gt;Higher level abstractions for files, strings, UEFI variables&lt;/li&gt; &#xA; &lt;li&gt;Overflow checking arithmetics&lt;/li&gt; &#xA; &lt;li&gt;PE image loading with no UEFI Secure Boot conflict&lt;/li&gt; &#xA; &lt;li&gt;Plist configuration format parsing&lt;/li&gt; &#xA; &lt;li&gt;PNG image manipulation&lt;/li&gt; &#xA; &lt;li&gt;Text output and graphics output implementations&lt;/li&gt; &#xA; &lt;li&gt;XNU kernel driver injection and patch engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Early history of the codebase could be found in &lt;a href=&#34;https://github.com/acidanthera/AppleSupportPkg&#34;&gt;AppleSupportPkg&lt;/a&gt; and PicoLib library set by The HermitCrabs Lab.&lt;/p&gt; &#xA;&lt;h4&gt;OcGuardLib&lt;/h4&gt; &#xA;&lt;p&gt;This library implements basic safety features recommended for the use within the project. It implements fast safe integral arithmetics mapping on compiler builtins, type alignment checking, and UBSan runtime, based on &lt;a href=&#34;https://blog.netbsd.org/tnf/entry/introduction_to_%C2%B5ubsan_a_clean&#34;&gt;NetBSD implementation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The use of UBSan runtime requires the use of Clang compiler and &lt;code&gt;-fsanitize=undefined&lt;/code&gt; argument. Refer to &lt;a href=&#34;https://releases.llvm.org/7.0.0/tools/clang/docs/UndefinedBehaviorSanitizer.html&#34;&gt;Clang documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Credits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The HermitCrabs Lab&lt;/li&gt; &#xA; &lt;li&gt;All projects providing third-party code (refer to file headers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://applelife.ru&#34;&gt;AppleLife&lt;/a&gt; team and user-contributed resources&lt;/li&gt; &#xA; &lt;li&gt;Chameleon and Clover teams for hints and legacy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/al3xtjames&#34;&gt;al3xtjames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Andrey1970AppleLife&#34;&gt;Andrey1970AppleLife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhaeuser&#34;&gt;mhaeuser (ex Download-Fritz)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Goldfish64&#34;&gt;Goldfish64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikeBeaton&#34;&gt;MikeBeaton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nms42&#34;&gt;nms42&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PMheart&#34;&gt;PMheart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savvamitrofanov&#34;&gt;savvamitrofanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usr-sse2&#34;&gt;usr-sse2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vit9696&#34;&gt;vit9696&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Discussion&lt;/h4&gt; &#xA;&lt;p&gt;Please refer to the following &lt;a href=&#34;https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/FORUMS.md&#34;&gt;list of OpenCore discussion forums&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>