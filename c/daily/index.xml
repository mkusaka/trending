<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-15T01:28:14Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kilograham/rp2040-doom</title>
    <updated>2024-08-15T01:28:14Z</updated>
    <id>tag:github.com,2024-08-15:/kilograham/rp2040-doom</id>
    <link href="https://github.com/kilograham/rp2040-doom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully-featured Doom port for the Raspberry Pi RP2040 microcontroller&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RP2040 (+RP2350) Doom&lt;/h1&gt; &#xA;&lt;p&gt;This is a port of Doom for RP2040 / RP2350 devices, derived from &lt;a href=&#34;https://github.com/chocolate-doom/chocolate-doom&#34;&gt;Chocolate Doom&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Significant changes have been made to support running on the RP2xxx device, but particularly to support running the entire shareware &lt;code&gt;DOOM1.WAD&lt;/code&gt; which is 4M big on a Raspberry Pi Pico with only 2M flash!&lt;/p&gt; &#xA;&lt;p&gt;You can read many details on this port in the blog post &lt;a href=&#34;https://kilograham.github.io/rp2040-doom/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that a hopefully-fully-functional &lt;code&gt;chocolate-doom&lt;/code&gt; executable is buildable from this RP2xxx code base as a means of verification that everything still works, but whilst they can still be built, Hexen, Strife and Heretic are almost certainly broken, so are not built by default.&lt;/p&gt; &#xA;&lt;p&gt;This chocolate-doom commit that the code is branched off can be found in the &lt;code&gt;upstream&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;The original Chocolate Doom README is &lt;a href=&#34;https://raw.githubusercontent.com/kilograham/rp2040-doom/rp2/README-chocolate.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code State&lt;/h2&gt; &#xA;&lt;p&gt;Thus far, the focus has been entirely on getting RP2040 Doom running. Not a lot of time has been spent cleaning the code up. There are a bunch of defunct &lt;code&gt;#ifdefs&lt;/code&gt; and other code that was useful at some point, but no longer are, and indeed changing them may result in non-functional code. This is particularly true of the &lt;code&gt;whd_gen&lt;/code&gt; tool used to convert/compress WADs who&#39;s code is likely completely incomprehensible!&lt;/p&gt; &#xA;&lt;h2&gt;Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;You can find a RP2040 Doom UF2s based on the standard VGA/I2S pins in the releases of this repository. There are also versions with the shareware DOOM1.WAD already embedded.&lt;/p&gt; &#xA;&lt;p&gt;Note you can always use &lt;code&gt;picotool info -a &amp;lt;UF2 file&amp;gt;&lt;/code&gt; to see the pins used by a particular build.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The main goals for this port were:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Everything should match the original game experience, i.e. all the graphics at classic 320x200 resolution, stereo sound, OPL2 music, save/load, demo playback, cheats, network multiplayer... basically it should feel like the original game.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOOM1.WAD&lt;/code&gt; should run on a Raspberry Pi Pico. There was also to be no sneaky discarding of splash screens, altering of levels, down-sampling of textures or whatever. RP2040 boards with 8M should be able to play at least the full &lt;em&gt;Ultimate Doom&lt;/em&gt; and &lt;em&gt;DOOM II&lt;/em&gt; WADs.&lt;/li&gt; &#xA; &lt;li&gt;The RP2040 should output directly to VGA (16 color pins for RGB565 along with HSync/VSync) along with stereo sound.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/eDVazQVycP4&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/eDVazQVycP4/maxresdefault.jpg&#34; alt=&#34;RP2040 Doom on a Raspberry Pi Pico&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full &lt;code&gt;DOOM1.WAD&lt;/code&gt; playable on Raspberry Pi Pico with 2M flash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Ultimate Doom&lt;/em&gt; and &lt;em&gt;Doom II&lt;/em&gt; are playable on 8M devices.&lt;/li&gt; &#xA; &lt;li&gt;320x200x60 VGA output (really 1280x1024x60).&lt;/li&gt; &#xA; &lt;li&gt;9 Channel OPL2 Sound at 49716Hz.&lt;/li&gt; &#xA; &lt;li&gt;9 Channel Stereo Sound Effects.&lt;/li&gt; &#xA; &lt;li&gt;I2C networking for up to 4 players.&lt;/li&gt; &#xA; &lt;li&gt;Save/Load of games.&lt;/li&gt; &#xA; &lt;li&gt;All cheats supported.&lt;/li&gt; &#xA; &lt;li&gt;Demos from original WADs run correctly.&lt;/li&gt; &#xA; &lt;li&gt;USB Keyboard Input support.&lt;/li&gt; &#xA; &lt;li&gt;All end scenes, intermissions, help screens etc. supported.&lt;/li&gt; &#xA; &lt;li&gt;Good frame rate; generally 30-35+ FPS.&lt;/li&gt; &#xA; &lt;li&gt;Uses 270Mhz overclock (requires flash chip that will run at 135Mhz)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;RP2040 Doom should build fine on Linux and macOS. The RP2040 targeting builds should also work on Windows, though I haven&#39;t tried.&lt;/p&gt; &#xA;&lt;p&gt;The build uses &lt;code&gt;CMake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Regular chocolate-doom/native builds&lt;/h2&gt; &#xA;&lt;p&gt;To build everything, assuming you have SDL2 dependencies installed, you can create a build directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;make -j&amp;lt;num_cpus&amp;gt;&lt;/code&gt; from that directory. To build a particular target e.g. &lt;code&gt;chocolate-doom&lt;/code&gt;, do &lt;code&gt;make chocolate-doom&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note this is the way you build the &lt;code&gt;whd_gen&lt;/code&gt; tool too.&lt;/p&gt; &#xA;&lt;h2&gt;RP2040 Doom builds&lt;/h2&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://github.com/raspberrypi/pico-sdk&#34;&gt;pico-sdk&lt;/a&gt; and &lt;strong&gt;the latest version of&lt;/strong&gt; &lt;a href=&#34;https://github.com/raspberrypi/pico-extras&#34;&gt;pico-extras&lt;/a&gt; installed, along with the regular pico-sdk requisites (e.g. &lt;code&gt;arm-none-eabi-gcc&lt;/code&gt;). If in doubt, see the Raspberry Pi &lt;a href=&#34;https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf&#34;&gt;documentation&lt;/a&gt;. I have been building against the &lt;code&gt;develop&lt;/code&gt; branch of &lt;code&gt;pico-sdk&lt;/code&gt;, so I recommend that..&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: I am building with arm-none-eabi-gcc 13.2.rel1 .. whilst other versions may work, changes in compiler version may affect the binary size which, being tight, can cause problems (either link failure, or you may see stack overflow in the form of color palette corruption). Particularly I know tjhat arm-none-eabi-gcc 10.x versions don&#39;t work well.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For USB keyboard input support, RP2040 Doom currently uses a modified version of TinyUSB included as a submodule. Make sure you have initialized this submodule via &lt;code&gt;git submodule update --init&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create a build directly like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir rp2040-build&#xA;cd rp2040-build&#xA;cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DPICO_BOARD=vgaboard -DPICO_SDK_PATH=/path/to/pico-sdk -DPICO_EXTRAS_PATH=/path/to/pico-extras ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;PICO_BOARD&lt;/code&gt; setting is for the standard VGA demo board which has RGB on pins 0-&amp;gt;15, sync pins on 16,17 and I2S on 26,27,28.&lt;/p&gt; &#xA;&lt;p&gt;As before, use &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;make &amp;lt;target&amp;gt;&lt;/code&gt; to build.&lt;/p&gt; &#xA;&lt;p&gt;The RP2040 version has four targets, each of which create a similarly named &lt;code&gt;UF2&lt;/code&gt; file (e.g. &lt;code&gt;doom_tiny.uf2&lt;/code&gt;). These UF2 files contain the executable code/data, but they do not contain the WAD data which is converted into a RP2040 Domom specific WHD/WHX format by &lt;code&gt;whd_gen&lt;/code&gt; (for more see below). The WHD/WHX file must also be loaded onto the device at a specific address which varies by binary.&lt;/p&gt; &#xA;&lt;p&gt;&#34;super-tiny&#34; refers to RP2040 Doom builds that use the more compressed WHX format, and required for&lt;code&gt;DOOM1. WAD&lt;/code&gt; to run on a 2M Raspberry Pi Pico. &#34;Non super-tiny&#34; refers to RP2040 Doom builds that use the WHD format which is larger, but also is required for &lt;em&gt;Ultimate Doom&lt;/em&gt; and &lt;em&gt;Doom II&lt;/em&gt; WADs. These binaries are distinct as supporting both formats in the same binary would just have made things bigger and slower.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;doom_tiny&lt;/strong&gt; This is a &#34;super tiny&#34; version with no USB keyboard support. You can use &lt;a href=&#34;https://github.com/kilograham/sdl_event_forwarder&#34;&gt;SDL Event Forwarder&lt;/a&gt; to tunnel keyboard input from your host computer over UART. The WHX file must be loaded at &lt;code&gt;0x10040000&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;doom_tiny_usb&lt;/strong&gt; This is a &#34;super tiny&#34; version with additional USB keyboard support. Because of the extra USB code, the WHX file must be loaded at &lt;code&gt;0x10042000&lt;/code&gt;. As you can see USB support via TinyUSB causes the binary to grow by 2K (hence the move of the WHX file address) leaving less space for saved games (which are also stored in flash).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;doom_tiny_nost&lt;/strong&gt; This is a &#34;non super tiny&#34; version of &lt;code&gt;doom_tiny&lt;/code&gt; supporting larger WADs stored as WHD. The WHD file must be loaded at &lt;code&gt;0x10048000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;doom_tiny_nost_usb&lt;/strong&gt; This is a &#34;non super tiny&#34; version of &lt;code&gt;doom_tiny_usb&lt;/code&gt; supporting larger WADs stored as WHD. The WHD file must be loaded at &lt;code&gt;0x10048000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can load you WHD/WHX file using &lt;a href=&#34;https://github.com/raspberrypi/picotool&#34;&gt;picotool&lt;/a&gt;. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;picotool load -v -t bin doom1.whx -o 0x10042000.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;whd_gen&lt;/code&gt; further below for generating &lt;code&gt;WHX&lt;/code&gt; or &lt;code&gt;WHD&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h4&gt;USB keyboard support&lt;/h4&gt; &#xA;&lt;p&gt;Note that TinyUSB host mode support for keyboard may not work with all keyboards especially since the RP2040 Doom has been built with small limits for number/sizes of hubs etc. I know that Raspberry Pi keyboards work fine, as did my ancient Dell keyboard. Your keyboard may just do nothing, or may cause a crash. If so, for now, you are stuck forwarding keys from another PC via sdl_event_forwarder.&lt;/p&gt; &#xA;&lt;h3&gt;RP2040 Doom builds not targeting an RP2040 device&lt;/h3&gt; &#xA;&lt;p&gt;You can also build the RP2040 Doom to run on your host computer (Linux or macOS) by using &lt;a href=&#34;https://github.com/raspberrypi/pico-host-sdl&#34;&gt;pico_host_sdl&lt;/a&gt; which simulates RP2040 based video/audio output using SDL.&lt;/p&gt; &#xA;&lt;p&gt;This version currently embeds the WHD/WHX in &lt;code&gt;src/tiny.whd.h&lt;/code&gt; so you must generate this file.&lt;/p&gt; &#xA;&lt;p&gt;You can do this via &lt;code&gt;./cup.sh &amp;lt;whd/whx_file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir host-build&#xA;cd host-build&#xA;cmake -DPICO_PLATFORM=host -DPICO_SDK_PATH=/path/to/pico-sdk -DPICO_EXTRAS_PATH=/path/to/pico-extras -DPICO_SDK_PRE_LIST_DIRS=/path/to/pico_host_sdl ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and then &lt;code&gt;make&lt;/code&gt; as usual.&lt;/p&gt; &#xA;&lt;h2&gt;whd_gen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;doom1.whx&lt;/code&gt; is includd in this repository, otherwise you need to build &lt;code&gt;whd_gen&lt;/code&gt; using the regular native build instructions above.&lt;/p&gt; &#xA;&lt;p&gt;To generate a WHX file (you must use this to convert DOOM1.WAD to run on a 2M Raspberry Pi Pico)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;whd_gen &amp;lt;wad_file&amp;gt; &amp;lt;whx_file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The larger WADs (e.g. &lt;em&gt;Ultimate Doom&lt;/em&gt; or &lt;em&gt;Doom II&lt;/em&gt; have levels which are too complex to convert into a super tiny WHX file. These larger WADs are not going to fit in a 2M flash anywy, so the less compressed WHD format can be used given that the device now probably has 8M of flash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;whd_gen &amp;lt;wad_file&amp;gt; &amp;lt;whd_file&amp;gt; -no-super-tiny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;whd_gen&lt;/code&gt; has not been tested with a wide variety of WADs, so whilst it is possible that non Id WADs may work, it is by no means guaranteed!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You should use a release build of &lt;code&gt;whd_gen&lt;/code&gt; for the best sound effect fidelity, as the debug build deliberately lowers the encoding quality for the sake of speed.&lt;/p&gt; &#xA;&lt;h1&gt;Running the RP2040 version&lt;/h1&gt; &#xA;&lt;p&gt;The releases here use pins as defined when building with &lt;code&gt;PICO_BOARD=vgaboard&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; 0-4:    Red 0-4&#xA; 6-10:   Green 0-4&#xA; 11-15:  Blue 0-4&#xA; 16:     HSync&#xA; 17:     VSync&#xA; 18:     I2C1 SDA&#xA; 19:     I2C1 SCL&#xA; 20:     UART1 TX&#xA; 21:     UART1 RX&#xA; 26:     I2S DIN&#xA; 27:     I2S BCK&#xA; 28:     I2S LRCK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always find these from your ELF or UF2 with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;picotool info -a &amp;lt;filename&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These match for example the Pimoroni Pico VGA Demo Base which itself is based on the suggested Raspberry Pi Documentation &lt;a href=&#34;https://datasheets.raspberrypi.com/rp2040/hardware-design-with-rp2040.pdf&#34;&gt;here&lt;/a&gt; and the design files zipped &lt;a href=&#34;https://datasheets.raspberrypi.com/rp2040/VGA-KiCAD.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Future&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Evilution&lt;/em&gt; and &lt;em&gt;Plutonia&lt;/em&gt; are not yet supported. There is an issue tracking it &lt;a href=&#34;https://github.com/kilograham/rp2040-doom/issues/1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;RP2040 Doom Licenses&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any code derived from chocolate-doom matinains its existing license (generally GPLv2).&lt;/li&gt; &#xA; &lt;li&gt;New RP2040 Doom specific code not implementing existing chocolate-doom interfaces is licensed BSD-3.&lt;/li&gt; &#xA; &lt;li&gt;ADPCM-XA is unmodified and is licensed BSD-3.&lt;/li&gt; &#xA; &lt;li&gt;Modified emu8950 derived code retains its MIT license.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>