<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-14T01:31:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bitcoin-core/secp256k1</title>
    <updated>2022-12-14T01:31:47Z</updated>
    <id>tag:github.com,2022-12-14:/bitcoin-core/secp256k1</id>
    <link href="https://github.com/bitcoin-core/secp256k1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Optimized C library for EC operations on curve secp256k1&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libsecp256k1&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cirrus-ci.com/github/bitcoin-core/secp256k1&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/bitcoin-core/secp256k1.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/dependencies-none-success&#34; alt=&#34;Dependencies: None&#34;&gt; &lt;a href=&#34;https://web.libera.chat/#secp256k1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/irc.libera.chat-%23secp256k1-success&#34; alt=&#34;irc.libera.chat #secp256k1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Optimized C library for ECDSA signatures and secret/public key operations on curve secp256k1.&lt;/p&gt; &#xA;&lt;p&gt;This library is intended to be the highest quality publicly available library for cryptography on the secp256k1 curve. However, the primary focus of its development has been for usage in the Bitcoin system and usage unlike Bitcoin&#39;s may be less well tested, verified, or suffer from a less well thought out interface. Correct usage requires some care and consideration that the library is fit for your application&#39;s purpose.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;secp256k1 ECDSA signing/verification and key generation.&lt;/li&gt; &#xA; &lt;li&gt;Additive and multiplicative tweaking of secret/public keys.&lt;/li&gt; &#xA; &lt;li&gt;Serialization/parsing of secret keys, public keys, signatures.&lt;/li&gt; &#xA; &lt;li&gt;Constant time, constant memory access signing and public key generation.&lt;/li&gt; &#xA; &lt;li&gt;Derandomized ECDSA (via RFC6979 or with a caller provided function.)&lt;/li&gt; &#xA; &lt;li&gt;Very efficient implementation.&lt;/li&gt; &#xA; &lt;li&gt;Suitable for embedded systems.&lt;/li&gt; &#xA; &lt;li&gt;No runtime dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Optional module for public key recovery.&lt;/li&gt; &#xA; &lt;li&gt;Optional module for ECDH key exchange.&lt;/li&gt; &#xA; &lt;li&gt;Optional module for Schnorr signatures according to &lt;a href=&#34;https://github.com/bitcoin/bips/raw/master/bip-0340.mediawiki&#34;&gt;BIP-340&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation details&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No runtime heap allocation.&lt;/li&gt; &#xA;   &lt;li&gt;Extensive testing infrastructure.&lt;/li&gt; &#xA;   &lt;li&gt;Structured to facilitate review and analysis.&lt;/li&gt; &#xA;   &lt;li&gt;Intended to be portable to any system with a C89 compiler and uint64_t support.&lt;/li&gt; &#xA;   &lt;li&gt;No use of floating types.&lt;/li&gt; &#xA;   &lt;li&gt;Expose only higher level interfaces to minimize the API surface and improve application security. (&#34;Be difficult to use insecurely.&#34;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Field operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimized implementation of arithmetic modulo the curve&#39;s field size (2^256 - 0x1000003D1). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using 5 52-bit limbs (including hand-optimized assembly for x86_64, by Diederik Huys).&lt;/li&gt; &#xA;     &lt;li&gt;Using 10 26-bit limbs (including hand-optimized assembly for 32-bit ARM, by Wladimir J. van der Laan). &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;This is an experimental feature that has not received enough scrutiny to satisfy the standard of quality of this library but is made available for testing and review by the community.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scalar operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimized implementation without data-dependent branches of arithmetic modulo the curve&#39;s order. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using 4 64-bit limbs (relying on __int128 support in the compiler).&lt;/li&gt; &#xA;     &lt;li&gt;Using 8 32-bit limbs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modular inverses (both field elements and scalars) based on &lt;a href=&#34;https://gcd.cr.yp.to/index.html&#34;&gt;safegcd&lt;/a&gt; with some modifications, and a variable-time variant (by Peter Dettman).&lt;/li&gt; &#xA; &lt;li&gt;Group operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Point addition formula specifically simplified for the curve equation (y^2 = x^3 + 7).&lt;/li&gt; &#xA;   &lt;li&gt;Use addition between points in Jacobian and affine coordinates where possible.&lt;/li&gt; &#xA;   &lt;li&gt;Use a unified addition/doubling formula where necessary to avoid data-dependent branches.&lt;/li&gt; &#xA;   &lt;li&gt;Point/x comparison without a field inversion by comparison in the Jacobian coordinate space.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Point multiplication for verification (a&lt;em&gt;P + b&lt;/em&gt;G). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use wNAF notation for point multiplicands.&lt;/li&gt; &#xA;   &lt;li&gt;Use a much larger window for multiples of G, using precomputed multiples.&lt;/li&gt; &#xA;   &lt;li&gt;Use Shamir&#39;s trick to do the multiplication with the public key and the generator simultaneously.&lt;/li&gt; &#xA;   &lt;li&gt;Use secp256k1&#39;s efficiently-computable endomorphism to split the P multiplicand into 2 half-sized ones.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Point multiplication for signing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use a precomputed table of multiples of powers of 16 multiplied with the generator, so general multiplication becomes a series of additions.&lt;/li&gt; &#xA;   &lt;li&gt;Intended to be completely free of timing sidechannels for secret-key operations (on reasonable hardware/toolchains) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Access the table with branch-free conditional moves so memory access is uniform.&lt;/li&gt; &#xA;     &lt;li&gt;No data-dependent branches&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Optional runtime blinding which attempts to frustrate differential power analysis.&lt;/li&gt; &#xA;   &lt;li&gt;The precomputed tables add and eventually subtract points for which no known scalar (secret key) is known, preventing even an attacker with control over the secret key used to control the data internally.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build steps&lt;/h2&gt; &#xA;&lt;p&gt;libsecp256k1 is built using autotools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./autogen.sh&#xA;$ ./configure&#xA;$ make&#xA;$ make check  # run the test suite&#xA;$ sudo make install  # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile optional modules (such as Schnorr signatures), you need to run &lt;code&gt;./configure&lt;/code&gt; with additional flags (such as &lt;code&gt;--enable-module-schnorrsig&lt;/code&gt;). Run &lt;code&gt;./configure --help&lt;/code&gt; to see the full list of available flags.&lt;/p&gt; &#xA;&lt;h2&gt;Usage examples&lt;/h2&gt; &#xA;&lt;p&gt;Usage examples can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples&#34;&gt;examples&lt;/a&gt; directory. To compile them you need to configure with &lt;code&gt;--enable-examples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples/ecdsa.c&#34;&gt;ECDSA example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples/schnorr.c&#34;&gt;Schnorr signatures example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/examples/ecdh.c&#34;&gt;Deriving a shared secret (ECDH) example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To compile the Schnorr signature and ECDH examples, you also need to configure with &lt;code&gt;--enable-module-schnorrsig&lt;/code&gt; and &lt;code&gt;--enable-module-ecdh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Test coverage&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to have full coverage of the reachable lines and branches.&lt;/p&gt; &#xA;&lt;p&gt;To create a test coverage report, configure with &lt;code&gt;--enable-coverage&lt;/code&gt; (use of GCC is necessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-coverage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a report, &lt;code&gt;gcovr&lt;/code&gt; is recommended, as it includes branch coverage reporting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gcovr --exclude &#39;src/bench*&#39; --print-summary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a HTML report with coloured and annotated source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p coverage&#xA;$ gcovr --exclude &#39;src/bench*&#39; --html --html-details -o coverage/coverage.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;If configured with &lt;code&gt;--enable-benchmark&lt;/code&gt; (which is the default), binaries for benchmarking the libsecp256k1 functions will be present in the root directory after the build.&lt;/p&gt; &#xA;&lt;p&gt;To print the benchmark result to the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bench_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a CSV file for the benchmark result :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bench_name | sed &#39;2d;s/ \{1,\}//g&#39; &amp;gt; bench_name.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting a vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-core/secp256k1/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nalgeon/sqlean</title>
    <updated>2022-12-14T01:31:47Z</updated>
    <id>tag:github.com,2022-12-14:/nalgeon/sqlean</id>
    <link href="https://github.com/nalgeon/sqlean" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate set of SQLite extensions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;All the missing SQLite functions&lt;/h1&gt; &#xA;&lt;p&gt;SQLite has few functions compared to other database management systems. SQLite authors see this as a feature rather than a problem, because SQLite has an extension mechanism in place.&lt;/p&gt; &#xA;&lt;p&gt;There are a lot of SQLite extensions out there, but they are incomplete, inconsistent and scattered across the internet. &lt;code&gt;sqlean&lt;/code&gt; brings them together, neatly packaged into domain modules, documented, tested, and built for Linux, Windows and macOS.&lt;/p&gt; &#xA;&lt;p&gt;We do not try to gather all the existing extensions into one giant pile — that would not be very useful. The goal is to create a well-thought set of domain modules with a convenient API. A kind of standard library for SQLite.&lt;/p&gt; &#xA;&lt;p&gt;To achieve it, we split extensions that are too broad, merge the ones that are too narrow, refactor, add missing features, test, document, and do a ton of other small things.&lt;/p&gt; &#xA;&lt;h2&gt;The main set&lt;/h2&gt; &#xA;&lt;p&gt;These are the most popular functions. They are tested, documented and organized into the domain modules with clear API.&lt;/p&gt; &#xA;&lt;p&gt;Think of them as the extended standard library for SQLite:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/crypto.md&#34;&gt;crypto&lt;/a&gt;: secure hashes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/define.md&#34;&gt;define&lt;/a&gt;: user-defined functions and dynamic sql&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/fileio.md&#34;&gt;fileio&lt;/a&gt;: read and write files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/fuzzy.md&#34;&gt;fuzzy&lt;/a&gt;: fuzzy string matching and phonetics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/ipaddr.md&#34;&gt;ipaddr&lt;/a&gt;: IP address manipulation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/json1.md&#34;&gt;json1&lt;/a&gt;: JSON functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/math.md&#34;&gt;math&lt;/a&gt;: math functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/re.md&#34;&gt;re&lt;/a&gt;: regular expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/stats.md&#34;&gt;stats&lt;/a&gt;: math statistics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/text.md&#34;&gt;text&lt;/a&gt;: string functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/unicode.md&#34;&gt;unicode&lt;/a&gt;: Unicode support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/uuid.md&#34;&gt;uuid&lt;/a&gt;: Universally Unique IDentifiers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/vsv.md&#34;&gt;vsv&lt;/a&gt;: CSV files as virtual tables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The incubator&lt;/h2&gt; &#xA;&lt;p&gt;These extensions haven&#39;t yet made their way to the main set. They may be untested, poorly documented, too broad, too narrow, or without a well-thought API.&lt;/p&gt; &#xA;&lt;p&gt;Think of them as candidates for the standard library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004109889&#34;&gt;array&lt;/a&gt;: one-dimensional arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-999732640&#34;&gt;besttype&lt;/a&gt;: convert string value to numeric&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1002267134&#34;&gt;bloom&lt;/a&gt;: a fast way to tell if a value is already in a table&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004896027&#34;&gt;btreeinfo&lt;/a&gt;, &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007421989&#34;&gt;memstat&lt;/a&gt;, &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-999732907&#34;&gt;recsize&lt;/a&gt; and &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007654407&#34;&gt;stmt&lt;/a&gt;: various database introspection features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-996605444&#34;&gt;cbrt&lt;/a&gt; and &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-999128539&#34;&gt;math2&lt;/a&gt;: additional math functions and bit arithmetics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1001239676&#34;&gt;classifier&lt;/a&gt;: binary classifier via logistic regression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004931771&#34;&gt;closure&lt;/a&gt;: navigate hierarchic tables with parent/child relationships&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1000937999&#34;&gt;compress&lt;/a&gt; and &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1000938046&#34;&gt;sqlar&lt;/a&gt;: compress / uncompress data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997427979&#34;&gt;cron&lt;/a&gt;: match dates against cron patterns&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1006791300&#34;&gt;dbdump&lt;/a&gt;: export database as SQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007348326&#34;&gt;decimal&lt;/a&gt;, &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997482625&#34;&gt;fcmp&lt;/a&gt; and &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007375162&#34;&gt;ieee754&lt;/a&gt;: decimal and floating-point arithmetic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997423609&#34;&gt;envfuncs&lt;/a&gt;: read environment variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-998138191&#34;&gt;isodate&lt;/a&gt;: additional date and time functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1252243005&#34;&gt;lines&lt;/a&gt;: read files line-by-line&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1252243356&#34;&gt;path&lt;/a&gt;: parsing and querying paths&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997417836&#34;&gt;pearson&lt;/a&gt;: Pearson correlation coefficient between two data sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997052157&#34;&gt;pivotvtab&lt;/a&gt;: pivot tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007464840&#34;&gt;prefixes&lt;/a&gt;: generate string prefixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007500659&#34;&gt;rotate&lt;/a&gt;: string obfuscation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1002297477&#34;&gt;spellfix&lt;/a&gt;: search a large vocabulary for close matches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1000902666&#34;&gt;stats2&lt;/a&gt; and &lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1002703581&#34;&gt;stats3&lt;/a&gt;: additional math statistics functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1003105288&#34;&gt;text2&lt;/a&gt;: additional string functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1001232670&#34;&gt;uint&lt;/a&gt;: natural string sorting and comparison&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997432989&#34;&gt;unhex&lt;/a&gt;: reverse for &lt;code&gt;hex()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007687162&#34;&gt;unionvtab&lt;/a&gt;: union similar tables into one&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-997018486&#34;&gt;xmltojson&lt;/a&gt;: convert XML to JSON string&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1001190336&#34;&gt;zipfile&lt;/a&gt;: read and write zip files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007733209&#34;&gt;zorder&lt;/a&gt;: map multidimensional data to a single dimension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/issues/27&#34;&gt;Vote for your favorites&lt;/a&gt;! We&#39;ll refactor and merge popular ones into the main set.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://github.com/nalgeon/sqlean/releases/latest&#34;&gt;precompiled binaries&lt;/a&gt; for every OS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlean-win-x64.zip&lt;/code&gt; - for Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlean-linux-x86.zip&lt;/code&gt; - for Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlean-macos-x86.zip&lt;/code&gt; - for Intel-based macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlean-macos-arm64.zip&lt;/code&gt; - for Apple silicon (ARM-based) macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Binaries are 64-bit and require a 64-bit SQLite version. If you are using SQLite shell on Windows (&lt;code&gt;sqlite.exe&lt;/code&gt;), its 64-bit version is available at &lt;a href=&#34;https://github.com/nalgeon/sqlite&#34;&gt;https://github.com/nalgeon/sqlite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Incubator extensions are &lt;a href=&#34;https://github.com/nalgeon/sqlean/releases/tag/incubator&#34;&gt;also available&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;CLI usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; .load ./stats&#xA;sqlite&amp;gt; select median(value) from generate_series(1, 99);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IDE usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;select load_extension(&#39;c:\Users\anton\sqlite\stats.dll&#39;);&#xA;select median(value) from generate_series(1, 99);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In-app usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3&#xA;&#xA;connection = sqlite3.connect(&#34;:memory:&#34;)&#xA;connection.enable_load_extension(True)&#xA;connection.load_extension(&#34;./stats.so&#34;)&#xA;connection.execute(&#34;select median(value) from generate_series(1, 99)&#34;)&#xA;connection.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify any other supported extension instead of &lt;code&gt;stats&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Submit your own or third-party extension to the incubator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/raw/incubator/docs/submit.md&#34;&gt;How to submit your extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalgeon/sqlean/raw/incubator/docs/external.md&#34;&gt;How to submit a third-party extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We want every extension to be self-contained. So we limit the project scope to extensions without external dependencies (other than the C standard library and SQLite itself).&lt;/p&gt; &#xA;&lt;p&gt;Please note that we only accept extensions with permissive licenses (MIT License, Apache License etc) or public domain. Copyleft licenses like GPL won&#39;t do.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2021+ &lt;a href=&#34;https://antonz.org/&#34;&gt;Anton Zhiyanov&lt;/a&gt;, &lt;a href=&#34;https://github.com/nalgeon/sqlean/graphs/contributors&#34;&gt;Contributors&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nalgeon/sqlean/main/docs/third-party.md&#34;&gt;Third-party Authors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The software is available under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Stay tuned&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/ohmypy&#34;&gt;&lt;strong&gt;@ohmypy&lt;/strong&gt;&lt;/a&gt; on Twitter to keep up with new features 🚀&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SRombauts/SQLiteCpp</title>
    <updated>2022-12-14T01:31:47Z</updated>
    <id>tag:github.com,2022-12-14:/SRombauts/SQLiteCpp</id>
    <link href="https://github.com/SRombauts/SQLiteCpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQLiteC++ (SQLiteCpp) is a smart and easy to use C++ SQLite3 wrapper.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;SQLiteC++&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/SRombauts/SQLiteCpp.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/SRombauts/SQLiteCpp&#34; title=&#34;Travis CI Linux Build Status&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SRombauts/SQLiteCpp.svg?branch=master&#34; alt=&#34;Travis CI Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/SbastienRombauts/SQLiteCpp&#34; title=&#34;AppVeyor Windows Build status&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/SRombauts/SQLiteCpp?svg=true&#34; alt=&#34;AppVeyor Windows Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp/actions&#34; title=&#34;GitHhub Actions Build status&#34;&gt;&lt;img src=&#34;https://github.com/SRombauts/SQLiteCpp/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/SRombauts/SQLiteCpp&#34; title=&#34;Coveralls test coverage&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/SRombauts/SQLiteCpp.svg?sanitize=true&#34; alt=&#34;Coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/srombauts-sqlitecpp&#34; title=&#34;Coverity Scan Build Status&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/14508.svg?sanitize=true&#34; alt=&#34;Coverity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/SRombauts/SQLiteCpp?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/SRombauts/SQLiteCpp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SQLiteC++ (SQLiteCpp) is a lean and easy to use C++ SQLite3 wrapper.&lt;/p&gt; &#xA;&lt;!--Keywords: sqlite, sqlite3, C, library, wrapper C++--&gt; &#xA;&lt;meta name=&#34;keywords&#34; content=&#34;sqlite, sqlite3, C, library, wrapper C++&#34;&gt; &#xA;&lt;h2&gt;About SQLiteC++:&lt;/h2&gt; &#xA;&lt;p&gt;SQLiteC++ offers an encapsulation around the native C APIs of SQLite, with a few intuitive and well documented C++ classes.&lt;/p&gt; &#xA;&lt;h3&gt;License:&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022 Sébastien Rombauts (&lt;a href=&#34;mailto:sebastien.rombauts@gmail.com&#34;&gt;sebastien.rombauts@gmail.com&lt;/a&gt;) &lt;a href=&#34;https://www.paypal.me/SRombauts&#34; title=&#34;Pay Me a Beer! Donate with PayPal :)&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/webstatic/paypalme/images/pp_logo_small.png&#34; width=&#34;118&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt or copy at &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Note on redistribution of SQLite source files&lt;/h4&gt; &#xA;&lt;p&gt;As stated by the MIT License, you are welcome to reuse, modify, and redistribute the SQLiteCpp source code the way you want it to, be it a git submodule, a subdirectory, or a selection of some source files.&lt;/p&gt; &#xA;&lt;p&gt;I would love a mention in your README, a web link to the SQLite repository, and a mention of the author, but none of those are mandatory.&lt;/p&gt; &#xA;&lt;h3&gt;About SQLite underlying library:&lt;/h3&gt; &#xA;&lt;p&gt;SQLite is a library that implements a serverless transactional SQL database engine. It is the most widely deployed SQL database engine in the world. All of the code and documentation in SQLite has been dedicated to the public domain by the authors. &lt;a href=&#34;http://www.sqlite.org/about.html&#34;&gt;http://www.sqlite.org/about.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The goals of SQLiteC++ are:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to offer the best of the existing simple C++ SQLite wrappers&lt;/li&gt; &#xA; &lt;li&gt;to be elegantly written with good C++11 design, STL, exceptions and RAII idiom&lt;/li&gt; &#xA; &lt;li&gt;to keep dependencies to a minimum (C++11 STL and SQLite3)&lt;/li&gt; &#xA; &lt;li&gt;to be portable&lt;/li&gt; &#xA; &lt;li&gt;to be light and fast&lt;/li&gt; &#xA; &lt;li&gt;to be thread-safe only as much as SQLite &#34;Multi-thread&#34; mode (see below)&lt;/li&gt; &#xA; &lt;li&gt;to have a good unit test coverage&lt;/li&gt; &#xA; &lt;li&gt;to use API names sticking with those of the SQLite library&lt;/li&gt; &#xA; &lt;li&gt;to be well documented with Doxygen tags, and with some good examples&lt;/li&gt; &#xA; &lt;li&gt;to be well maintained&lt;/li&gt; &#xA; &lt;li&gt;to use a permissive MIT license, similar to BSD or Boost, for proprietary/commercial usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is designed using the Resource Acquisition Is Initialization (RAII) idiom (see &lt;a href=&#34;http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&#34;&gt;http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&lt;/a&gt;), and throwing exceptions in case of SQLite errors (except in destructors, where assert() are used instead). Each SQLiteC++ object must be constructed with a valid SQLite database connection, and then is always valid until destroyed.&lt;/p&gt; &#xA;&lt;h3&gt;Supported platforms:&lt;/h3&gt; &#xA;&lt;p&gt;Now requires a C++11 compiler. Use branch &lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp/tree/sqlitecpp-2.x&#34;&gt;sqlitecpp-2.x&lt;/a&gt; for latest pre-C++11 developments.&lt;/p&gt; &#xA;&lt;p&gt;Developments and tests are done under the following OSs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 14.04, 16.04 and 18.04 (Travis CI and Github Actions)&lt;/li&gt; &#xA; &lt;li&gt;Windows 10, and Windows Server 2012 R2, Windows Server 2016, Windows Server 2022 (AppVeyor and Github Actions)&lt;/li&gt; &#xA; &lt;li&gt;MacOS 10.11 and 11.7 (Travis CI and Github Actions)&lt;/li&gt; &#xA; &lt;li&gt;Valgrind memcheck tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the following IDEs/Compilers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GCC 4.8.4, 5.3.0, 7.1.1 and latest eg 9.4 (C++11, C++14, C++17)&lt;/li&gt; &#xA; &lt;li&gt;Clang 5 and 7 (Travis CI)&lt;/li&gt; &#xA; &lt;li&gt;AppleClang 8, 9 and 13 (Travis CI and Github Actions)&lt;/li&gt; &#xA; &lt;li&gt;Xcode 8 &amp;amp; 9 (Travis CI)&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Community/Entreprise 2022, 2019, 2017, and 2015 (AppVeyor and Github Actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a modern C++11 STL implementation with GCC, Clang, or Visual Studio 2015&lt;/li&gt; &#xA; &lt;li&gt;exception support (the class Exception inherits from std::runtime_error)&lt;/li&gt; &#xA; &lt;li&gt;the SQLite library (3.7.15 minimum from 2012-12-12) either by linking to it dynamically or statically (install the libsqlite3-dev package under Debian/Ubuntu/Mint Linux), or by adding its source file in your project code base (source code provided in src/sqlite3 for Windows), with the &lt;code&gt;SQLITE_ENABLE_COLUMN_METADATA&lt;/code&gt; macro defined (see &lt;a href=&#34;http://www.sqlite.org/compile.html#enable_column_metadata&#34;&gt;http://www.sqlite.org/compile.html#enable_column_metadata&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To use this wrapper, you need to add the SQLiteC++ source files from the src/ directory in your project code base, and compile/link against the sqlite library.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to do this is to add the wrapper as a library. The &#34;CMakeLists.txt&#34; file defining the static library is provided in the root directory, so you simply have to add_subdirectory(SQLiteCpp) to you main CMakeLists.txt and link to the &#34;SQLiteCpp&#34; wrapper library.&lt;/p&gt; &#xA;&lt;p&gt;Example for Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/thirdparty/SQLiteCpp)&#xA;&#xA;add_executable(main src/main.cpp)&#xA;target_link_libraries(main&#xA;  SQLiteCpp&#xA;  sqlite3&#xA;  pthread&#xA;  dl&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thus this SQLiteCpp repository can be directly used as a Git submodule. See the &lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp_Example&#34;&gt;SQLiteCpp_Example&lt;/a&gt; side repository for a standalone &#34;from scratch&#34; example.&lt;/p&gt; &#xA;&lt;p&gt;Under Debian/Ubuntu/Mint Linux, you can install the libsqlite3-dev package if you don&#39;t want to use the embedded sqlite3 library.&lt;/p&gt; &#xA;&lt;h3&gt;Building example and unit-tests:&lt;/h3&gt; &#xA;&lt;p&gt;Use git to clone the repository. Then init and update submodule &#34;googletest&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;git clone https://github.com/SRombauts/SQLiteCpp.git&#xA;cd SQLiteCpp&#xA;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing SQLiteCpp (vcpkg)&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can build and install SQLiteCpp using &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install sqlitecpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The SQLiteCpp port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h4&gt;Using SQLiteCpp on a system-wide installation&lt;/h4&gt; &#xA;&lt;p&gt;If you installed this package to your system, a &lt;code&gt;SQLiteCppConfig.cmake&lt;/code&gt; file will be generated &amp;amp; installed to your system.&lt;br&gt; This file lets you link against the SQLiteCpp library for use in your Cmake project.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of using this in your CMakeLists.txt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;# You can optionally define a minimum version in this call&#xA;find_package(SQLiteCpp REQUIRED)&#xA;# For this example, lets say you created an target with add_executable (or add_library) called &#34;my_target&#34;&#xA;# You can optionally declare PUBLIC or PRIVATE linkage here, depending on your needs.&#xA;target_link_libraries(my_target PRIVATE SQLiteCpp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CMake and tests&lt;/h4&gt; &#xA;&lt;p&gt;A CMake configuration file is also provided for multi-platform support and testing.&lt;/p&gt; &#xA;&lt;p&gt;Typical generic build for MS Visual Studio under Windows (from &lt;a href=&#34;https://raw.githubusercontent.com/SRombauts/SQLiteCpp/master/build.bat&#34;&gt;build.bat&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Batchfile&#34;&gt;mkdir build&#xA;cd build&#xA;&#xA;cmake ..        # cmake .. -G &#34;Visual Studio 16 2019&#34;    # for Visual Studio 2019&#xA;@REM Generate a Visual Studio solution for latest version found&#xA;cmake -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_BUILD_TESTS=ON ..&#xA;&#xA;@REM Build default configuration (ie &#39;Debug&#39;)&#xA;cmake --build .&#xA;&#xA;@REM Build and run tests&#xA;ctest --output-on-failure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating the Linux Makefile, building in Debug and executing the tests (from &lt;a href=&#34;https://raw.githubusercontent.com/SRombauts/SQLiteCpp/master/build.sh&#34;&gt;build.sh&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;mkdir Debug&#xA;cd Debug&#xA;&#xA;# Generate a Makefile for GCC (or Clang, depanding on CC/CXX envvar)&#xA;cmake -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_BUILD_TESTS=ON ..&#xA;&#xA;# Build (ie &#39;make&#39;)&#xA;cmake --build .&#xA;&#xA;# Build and run unit-tests (ie &#39;make test&#39;)&#xA;ctest --output-on-failure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building the Doxygen/html documentation&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you have Dogygen installed and configure CMake using the &lt;code&gt;SQLITECPP_RUN_DOXYGEN=ON&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DSQLITECPP_RUN_DOXYGEN=ON   &amp;lt;MORE ARGUMENTS_HERE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then execute the &lt;code&gt;SQLiteCpp_doxygen&lt;/code&gt; target (or build all targets, see above). The documentation will be generated in the &#39;doc&#39; subfolder of the source tree.&lt;/p&gt; &#xA;&lt;h4&gt;CMake options&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more options on customizing the build, see the &lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp/raw/master/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Troubleshooting&lt;/h4&gt; &#xA;&lt;p&gt;Under Linux, if you get multiple linker errors like &#34;undefined reference to sqlite3_xxx&#34;, it&#39;s that you lack the &#34;sqlite3&#34; library: install the libsqlite3-dev package.&lt;/p&gt; &#xA;&lt;p&gt;If you get a single linker error &#34;Column.cpp: undefined reference to sqlite3_column_origin_name&#34;, it&#39;s that your &#34;sqlite3&#34; library was not compiled with the &lt;code&gt;SQLITE_ENABLE_COLUMN_METADATA&lt;/code&gt; macro defined (see &lt;a href=&#34;http://www.sqlite.org/compile.html#enable_column_metadata&#34;&gt;http://www.sqlite.org/compile.html#enable_column_metadata&lt;/a&gt;). You can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;either recompile the sqlite3 library provided by your distribution yourself (seek help online)&lt;/li&gt; &#xA; &lt;li&gt;or turn off the &lt;code&gt;option(SQLITE_ENABLE_COLUMN_METADATA &#34;Enable Column::getColumnOriginName(). Require support from sqlite3 library.&#34; ON)&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/SRombauts/SQLiteCpp/master/CMakeFiles.txt&#34;&gt;CMakeFiles.txt&lt;/a&gt; (or other build system scripts)&lt;/li&gt; &#xA; &lt;li&gt;or turn on the &lt;code&gt;option(SQLITECPP_INTERNAL_SQLITE &#34;Add the internal SQLite3 source to the project.&#34; ON)&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/SRombauts/SQLiteCpp/master/CMakeFiles.txt&#34;&gt;CMakeFiles.txt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Continuous Integration&lt;/h3&gt; &#xA;&lt;p&gt;This project is continuously tested under Ubuntu Linux with the gcc and clang compilers using the Travis CI community service with the above CMake building and testing procedure. It is also tested in the same way under Windows Server 2012 R2 with Visual Studio 2013 compiler using the AppVeyor continuous integration service.&lt;/p&gt; &#xA;&lt;p&gt;Detailed results can be seen online:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/SRombauts/SQLiteCpp&#34;&gt;https://travis-ci.org/SRombauts/SQLiteCpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.appveyor.com/project/SbastienRombauts/SQLiteCpp&#34;&gt;https://ci.appveyor.com/project/SbastienRombauts/SQLiteCpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Thread-safety&lt;/h3&gt; &#xA;&lt;p&gt;SQLite supports three modes of thread safety, as describe in &#34;SQLite And Multiple Threads&#34;: see &lt;a href=&#34;http://www.sqlite.org/threadsafe.html&#34;&gt;http://www.sqlite.org/threadsafe.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This SQLiteC++ wrapper does no add any locks (no mutexes) nor any other thread-safety mechanism above the SQLite library itself, by design, for lightness and speed.&lt;/p&gt; &#xA;&lt;p&gt;Thus, SQLiteC++ naturally supports the &#34;Multi Thread&#34; mode of SQLite: &#34;In this mode, SQLite can be safely used by multiple threads provided that no single database connection is used simultaneously in two or more threads.&#34;&lt;/p&gt; &#xA;&lt;p&gt;But SQLiteC++ does not support the fully thread-safe &#34;Serialized&#34; mode of SQLite, because of the way it shares the underlying SQLite precompiled statement in a custom shared pointer (See the inner class &#34;Statement::Ptr&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Valgrind memcheck&lt;/h3&gt; &#xA;&lt;p&gt;Run valgrind to search for memory leaks in your application, the SQLiteCpp wrapper, or the sqlite3 library. Execute the following command under Unix like OS (Linux, MacOS or WSL2/Ubuntu under Windows Subsystem for Linux):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose build/SQLiteCpp_example1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or uncoment the line at the end of &lt;a href=&#34;https://raw.githubusercontent.com/SRombauts/SQLiteCpp/master/build.sh&#34;&gt;build.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;The first sample demonstrates how to query a database and get results:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;try&#xA;{&#xA;    // Open a database file&#xA;    SQLite::Database    db(&#34;example.db3&#34;);&#xA;    &#xA;    // Compile a SQL query, containing one parameter (index 1)&#xA;    SQLite::Statement   query(db, &#34;SELECT * FROM test WHERE size &amp;gt; ?&#34;);&#xA;    &#xA;    // Bind the integer value 6 to the first parameter of the SQL query&#xA;    query.bind(1, 6);&#xA;    &#xA;    // Loop to execute the query step by step, to get rows of result&#xA;    while (query.executeStep())&#xA;    {&#xA;        // Demonstrate how to get some typed column value&#xA;        int         id      = query.getColumn(0);&#xA;        const char* value   = query.getColumn(1);&#xA;        int         size    = query.getColumn(2);&#xA;        &#xA;        std::cout &amp;lt;&amp;lt; &#34;row: &#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &#34;, &#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &#34;, &#34; &amp;lt;&amp;lt; size &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;}&#xA;catch (std::exception&amp;amp; e)&#xA;{&#xA;    std::cout &amp;lt;&amp;lt; &#34;exception: &#34; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The second sample shows how to manage a transaction:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;try&#xA;{&#xA;    SQLite::Database    db(&#34;transaction.db3&#34;, SQLite::OPEN_READWRITE|SQLite::OPEN_CREATE);&#xA;&#xA;    db.exec(&#34;DROP TABLE IF EXISTS test&#34;);&#xA;&#xA;    // Begin transaction&#xA;    SQLite::Transaction transaction(db);&#xA;&#xA;    db.exec(&#34;CREATE TABLE test (id INTEGER PRIMARY KEY, value TEXT)&#34;);&#xA;&#xA;    int nb = db.exec(&#34;INSERT INTO test VALUES (NULL, \&#34;test\&#34;)&#34;);&#xA;    std::cout &amp;lt;&amp;lt; &#34;INSERT INTO test VALUES (NULL, \&#34;test\&#34;)\&#34;, returned &#34; &amp;lt;&amp;lt; nb &amp;lt;&amp;lt; std::endl;&#xA;&#xA;    // Commit transaction&#xA;    transaction.commit();&#xA;}&#xA;catch (std::exception&amp;amp; e)&#xA;{&#xA;    std::cout &amp;lt;&amp;lt; &#34;exception: &#34; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to handle assertion in SQLiteC++:&lt;/h3&gt; &#xA;&lt;p&gt;Exceptions shall not be used in destructors, so SQLiteC++ uses SQLITECPP_ASSERT() to check for errors in destructors. If you don&#39;t want assert() to be called, you have to enable and define an assert handler as shown below, and by setting the flag SQLITECPP_ENABLE_ASSERT_HANDLER when compiling the lib.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#ifdef SQLITECPP_ENABLE_ASSERT_HANDLER&#xA;namespace SQLite&#xA;{&#xA;/// definition of the assertion handler enabled when SQLITECPP_ENABLE_ASSERT_HANDLER is defined in the project (CMakeList.txt)&#xA;void assertion_failed(const char* apFile, const long apLine, const char* apFunc, const char* apExpr, const char* apMsg)&#xA;{&#xA;    // Print a message to the standard error output stream, and abort the program.&#xA;    std::cerr &amp;lt;&amp;lt; apFile &amp;lt;&amp;lt; &#34;:&#34; &amp;lt;&amp;lt; apLine &amp;lt;&amp;lt; &#34;:&#34; &amp;lt;&amp;lt; &#34; error: assertion failed (&#34; &amp;lt;&amp;lt; apExpr &amp;lt;&amp;lt; &#34;) in &#34; &amp;lt;&amp;lt; apFunc &amp;lt;&amp;lt; &#34;() with message \&#34;&#34; &amp;lt;&amp;lt; apMsg &amp;lt;&amp;lt; &#34;\&#34;\n&#34;;&#xA;    std::abort();&#xA;}&#xA;}&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub website&lt;/h3&gt; &#xA;&lt;p&gt;The most efficient way to help and contribute to this wrapper project is to use the tools provided by GitHub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;please fill bug reports and feature requests here: &lt;a href=&#34;https://github.com/SRombauts/SQLiteCpp/issues&#34;&gt;https://github.com/SRombauts/SQLiteCpp/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;fork the repository, make some small changes and submit them with pull-request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;You can also email me directly, I will try to answer questions and requests whenever I get the time for it.&lt;/p&gt; &#xA;&lt;h3&gt;Coding Style Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;The source code use the CamelCase naming style variant where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;type names (class, struct, typedef, enums...) begin with a capital letter&lt;/li&gt; &#xA; &lt;li&gt;files (.cpp/.h) are named like the class they contain&lt;/li&gt; &#xA; &lt;li&gt;function and variable names begin with a lower case letter&lt;/li&gt; &#xA; &lt;li&gt;member variables begin with a &#39;m&#39;, function arguments begin with a &#39;a&#39;, booleans with a &#39;b&#39;, pointers with a &#39;p&#39;&lt;/li&gt; &#xA; &lt;li&gt;each file, class, method and member variable is documented using Doxygen tags&lt;/li&gt; &#xA; &lt;li&gt;braces on their own line See also &lt;a href=&#34;http://www.appinf.com/download/CppCodingStyleGuide.pdf&#34;&gt;http://www.appinf.com/download/CppCodingStyleGuide.pdf&lt;/a&gt; for good guidelines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also - Some other simple C++ SQLite wrappers:&lt;/h2&gt; &#xA;&lt;p&gt;See bellow a short comparison of other wrappers done at the time of writing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/sqdbcpp/&#34;&gt;sqdbcpp&lt;/a&gt;: RAII design, simple, no dependencies, UTF-8/UTF-16, new BSD license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ed.am/dev/sqlite3cc&#34;&gt;sqlite3cc&lt;/a&gt;: uses boost, modern design, LPGPL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iwongu/sqlite3pp&#34;&gt;sqlite3pp&lt;/a&gt;: modern design inspired by boost, MIT License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sqlitepp.berlios.de/&#34;&gt;SQLite++&lt;/a&gt;: uses boost build system, Boost License 1.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/6343/CppSQLite-C-Wrapper-for-SQLite/&#34;&gt;CppSQLite&lt;/a&gt;: famous Code Project but old design, BSD License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/easysqlite/&#34;&gt;easySQLite&lt;/a&gt;: manages table as structured objects, complex&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/keramer/sqlite_modern_cpp&#34;&gt;sqlite_modern_cpp&lt;/a&gt;: modern C++11, all in one file, MIT license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fnc12/sqlite_orm&#34;&gt;sqlite_orm&lt;/a&gt;: modern C++14, header only all in one file, no raw string queries, BSD-3 license&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>