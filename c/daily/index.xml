<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-24T01:29:38Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jniebuhr/gaggimate</title>
    <updated>2025-05-24T01:29:38Z</updated>
    <id>tag:github.com,2025-05-24:/jniebuhr/gaggimate</id>
    <link href="https://github.com/jniebuhr/gaggimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project upgrades a Gaggia espresso machine with smart controls to improve your coffee-making experience. By adding a display and custom electronics, you can monitor and control the machine more easily.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jniebuhr/gaggimate/master/docs/assets/logo.png&#34; alt=&#34;Logo&#34; width=&#34;250px&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/APw7rgPGPf&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/APw7rgPGPf&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY--NC--SA%204.0-lightgrey.svg?style=for-the-badge&#34; alt=&#34;CC BY-NC-SA 4.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jniebuhr_gaggimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/sonar/quality_gate/jniebuhr_gaggimate?server=https%3A%2F%2Fsonarcloud.io&amp;amp;style=for-the-badge&#34; alt=&#34;Sonar QG&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jniebuhr_gaggimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/sonar/blocker_violations/jniebuhr_gaggimate?server=https%3A%2F%2Fsonarcloud.io&amp;amp;style=for-the-badge&#34; alt=&#34;Sonar Violations&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=jniebuhr_gaggimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/sonar/tech_debt/jniebuhr_gaggimate?server=https%3A%2F%2Fsonarcloud.io&amp;amp;style=for-the-badge&#34; alt=&#34;Sonar Tech Debt&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project upgrades a Gaggia espresso machine with smart controls to improve your coffee-making experience. By adding a display and custom electronics, you can monitor and control the machine more easily.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jniebuhr/gaggimate/master/docs/assets/gaggimate-render.png&#34; alt=&#34;Gaggia Classic Installation&#34; width=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Temperature Control&lt;/strong&gt;: Monitor the boiler temperature to ensure optimal brewing conditions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brew timer&lt;/strong&gt;: Set a target duration and run the brewing for the specific time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Steam and Hot Water mode&lt;/strong&gt;: Control the pump and valve to run the respective task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safety Features&lt;/strong&gt;: Automatic shutoff if the system becomes unresponsive or overheats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: Simple, intuitive display to control and monitor the machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots and Images&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jniebuhr/gaggimate/master/docs/assets/standby-screen.png&#34; alt=&#34;Standby Screen&#34; width=&#34;250px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jniebuhr/gaggimate/master/docs/assets/brew-screen.png&#34; alt=&#34;Brew Screen&#34; width=&#34;250px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jniebuhr/gaggimate/master/docs/assets/pcb_render.jpg&#34; alt=&#34;PCB Render&#34; width=&#34;250px&#34;&gt; &#xA;&lt;h3&gt;How to buy&lt;/h3&gt; &#xA;&lt;p&gt;The shop is now open for preorders and you can buy your kit on &lt;a href=&#34;https://shop.gaggimate.eu/&#34;&gt;https://shop.gaggimate.eu/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;The display allows you to control the espresso machine and see live temperature updates. If the machine becomes unresponsive or the temperature goes too high, it will automatically turn off for safety.&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;The docs were moved to &lt;a href=&#34;https://gaggimate.eu/&#34;&gt;https://gaggimate.eu/&lt;/a&gt;. You can find all sourcing and assembly information there.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is licensed under CC BY-NC-SA 4.0. To view a copy of this license, visit &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;https://creativecommons.org/licenses/by-nc-sa/4.0/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FDio/vpp</title>
    <updated>2025-05-24T01:29:38Z</updated>
    <id>tag:github.com,2025-05-24:/FDio/vpp</id>
    <link href="https://github.com/FDio/vpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of VPP code base hosted at git.fd.io&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vector Packet Processing&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The VPP platform is an extensible framework that provides out-of-the-box production quality switch/router functionality. It is the open source version of Cisco&#39;s Vector Packet Processing (VPP) technology: a high performance, packet-processing stack that can run on commodity CPUs.&lt;/p&gt; &#xA;&lt;p&gt;The benefits of this implementation of VPP are its high performance, proven technology, its modularity and flexibility, and rich feature set.&lt;/p&gt; &#xA;&lt;p&gt;For more information on VPP and its features please visit the &lt;a href=&#34;http://fd.io/&#34;&gt;FD.io website&lt;/a&gt; and &lt;a href=&#34;https://wiki.fd.io/view/VPP/What_is_VPP%3F&#34;&gt;What is VPP?&lt;/a&gt; pages.&lt;/p&gt; &#xA;&lt;h2&gt;Changes&lt;/h2&gt; &#xA;&lt;p&gt;Details of the changes leading up to this version of VPP can be found under doc/releasenotes.&lt;/p&gt; &#xA;&lt;h2&gt;Directory layout&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Directory name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;build-data&lt;/td&gt; &#xA;   &lt;td&gt;Build metadata&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;build-root&lt;/td&gt; &#xA;   &lt;td&gt;Build output directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;docs&lt;/td&gt; &#xA;   &lt;td&gt;Sphinx Documentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dpdk&lt;/td&gt; &#xA;   &lt;td&gt;DPDK patches and build infrastructure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;extras/libmemif&lt;/td&gt; &#xA;   &lt;td&gt;Client library for memif&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/examples&lt;/td&gt; &#xA;   &lt;td&gt;VPP example code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/plugins&lt;/td&gt; &#xA;   &lt;td&gt;VPP bundled plugins directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/svm&lt;/td&gt; &#xA;   &lt;td&gt;Shared virtual memory allocation library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/tests&lt;/td&gt; &#xA;   &lt;td&gt;Standalone tests (not part of test harness)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vat&lt;/td&gt; &#xA;   &lt;td&gt;VPP API test program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vlib&lt;/td&gt; &#xA;   &lt;td&gt;VPP application library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vlibapi&lt;/td&gt; &#xA;   &lt;td&gt;VPP API library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vlibmemory&lt;/td&gt; &#xA;   &lt;td&gt;VPP Memory management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vnet&lt;/td&gt; &#xA;   &lt;td&gt;VPP networking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vpp&lt;/td&gt; &#xA;   &lt;td&gt;VPP application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vpp-api&lt;/td&gt; &#xA;   &lt;td&gt;VPP application API bindings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vppinfra&lt;/td&gt; &#xA;   &lt;td&gt;VPP core library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src/vpp/api&lt;/td&gt; &#xA;   &lt;td&gt;Not-yet-relocated API bindings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;   &lt;td&gt;Unit tests and Python test harness&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;In general anyone interested in building, developing or running VPP should consult the &lt;a href=&#34;https://wiki.fd.io/view/VPP&#34;&gt;VPP wiki&lt;/a&gt; for more complete documentation.&lt;/p&gt; &#xA;&lt;p&gt;In particular, readers are recommended to take a look at [Pulling, Building, Running, Hacking, Pushing](&lt;a href=&#34;https://wiki.fd.io/view/VPP/Pulling,_Building,_Run&#34;&gt;https://wiki.fd.io/view/VPP/Pulling,_Building,_Run&lt;/a&gt; ning,_Hacking_and_Pushing_VPP_Code) which provides extensive step-by-step coverage of the topic.&lt;/p&gt; &#xA;&lt;p&gt;For the impatient, some salient information is distilled below.&lt;/p&gt; &#xA;&lt;h3&gt;Quick-start: On an existing Linux host&lt;/h3&gt; &#xA;&lt;p&gt;To install system dependencies, build VPP and then install it, simply run the build script. This should be performed a non-privileged user with &lt;code&gt;sudo&lt;/code&gt; access from the project base directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./extras/vagrant/build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a more fine-grained approach because you intend to do some development work, the &lt;code&gt;Makefile&lt;/code&gt; in the root directory of the source tree provides several convenience shortcuts as &lt;code&gt;make&lt;/code&gt; targets that may be of interest. To see the available targets run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick-start: Vagrant&lt;/h3&gt; &#xA;&lt;p&gt;The directory &lt;code&gt;extras/vagrant&lt;/code&gt; contains a &lt;code&gt;VagrantFile&lt;/code&gt; and supporting scripts to bootstrap a working VPP inside a Vagrant-managed Virtual Machine. This VM can then be used to test concepts with VPP or as a development platform to extend VPP. Some obvious caveats apply when using a VM for VPP since its performance will never match that of bare metal; if your work is timing or performance sensitive, consider using bare metal in addition or instead of the VM.&lt;/p&gt; &#xA;&lt;p&gt;For this to work you will need a working installation of Vagrant. Instructions for this can be found [on the Setting up Vagrant wiki page] (&lt;a href=&#34;https://wiki.fd.io/view/DEV/Setting_Up_Vagrant&#34;&gt;https://wiki.fd.io/view/DEV/Setting_Up_Vagrant&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Quick-start: FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;VPP is packaged in the FreeBSD ports system. Binary packages are available and can be installed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pkg install vpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;Several modules provide documentation, see @subpage user_doc for more end-user-oriented information. Also see @subpage dev_doc for developer notes.&lt;/p&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://wiki.fd.io/view/VPP&#34;&gt;VPP wiki&lt;/a&gt; for details on more advanced building strategies and other development notes.&lt;/p&gt;</summary>
  </entry>
</feed>