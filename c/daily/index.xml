<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-22T01:27:27Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SJTU-IPADS/PowerInfer</title>
    <updated>2023-12-22T01:27:27Z</updated>
    <id>tag:github.com,2023-12-22:/SJTU-IPADS/PowerInfer</id>
    <link href="https://github.com/SJTU-IPADS/PowerInfer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-speed Large Language Model Serving on PCs with Consumer-grade GPUs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerInfer: Fast Large Language Model Serving with a Consumer-grade GPU&lt;/h1&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer is a CPU/GPU LLM inference engine leveraging &lt;strong&gt;activation locality&lt;/strong&gt; for your device.&lt;/p&gt; &#xA;&lt;h2&gt;Demo 🔥&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/fe441a42-5fce-448b-a3e5-ea4abb43ba23&#34;&gt;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/fe441a42-5fce-448b-a3e5-ea4abb43ba23&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PowerInfer v.s. llama.cpp on a single RTX 4090(24G) running Falcon(ReLU)-40B-FP16 with a 11x speedup!&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Both PowerInfer and llama.cpp were running on the same hardware and fully utilized VRAM on RTX 4090.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;p&gt;We introduce PowerInfer, a high-speed Large Language Model (LLM) inference engine on a personal computer (PC) equipped with a single consumer-grade GPU. The key underlying the design of PowerInfer is exploiting the high &lt;strong&gt;locality&lt;/strong&gt; inherent in LLM inference, characterized by a power-law distribution in neuron activation.&lt;/p&gt; &#xA;&lt;p&gt;This distribution indicates that a small subset of neurons, termed hot neurons, are consistently activated across inputs, while the majority, cold neurons, vary based on specific inputs. PowerInfer exploits such an insight to design a GPU-CPU hybrid inference engine: hot-activated neurons are preloaded onto the GPU for fast access, while cold-activated neurons are computed on the CPU, thus significantly reducing GPU memory demands and CPU-GPU data transfers. PowerInfer further integrates adaptive predictors and neuron-aware sparse operators, optimizing the efficiency of neuron activation and computational sparsity.&lt;/p&gt; &#xA;&lt;p&gt;Evaluation shows that PowerInfer attains an average token generation rate of 13.20 tokens/s, with a peak of 29.08 tokens/s, across various LLMs (including OPT-175B) on a single NVIDIA RTX 4090 GPU, only 18% lower than that achieved by a top-tier server-grade A100 GPU. This significantly outperforms llama.cpp by up to 11.69x while retaining model accuracy.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer is a high-speed and easy-to-use inference engine for deploying LLMs locally.&lt;/p&gt; &#xA;&lt;p&gt;PowerInfer is fast with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Locality-centric design&lt;/strong&gt;: Utilizes sparse activation and &#39;hot&#39;/&#39;cold&#39; neuron concept for efficient LLM inference, ensuring high speed with lower resource demands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hybrid CPU/GPU Utilization&lt;/strong&gt;: Seamlessly integrates memory/computation capabilities of CPU and GPU for a balanced workload and faster processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PowerInfer is flexible and easy to use with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Integration&lt;/strong&gt;: Compatible with popular &lt;a href=&#34;https://huggingface.co/SparseLLM&#34;&gt;ReLU-sparse models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local Deployment Ease&lt;/strong&gt;: Designed and deeply optimized for local deployment on consumer-grade hardware, enabling low-latency LLM inference and serving on a single GPU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backward Compatibility&lt;/strong&gt;: While distinct from llama.cpp, you can make use of most of &lt;code&gt;examples/&lt;/code&gt; the same way as llama.cpp such as server and batched generation. PowerInfer also supports inference with llama.cpp&#39;s model weights for compatibility purposes, but there will be no performance gain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use these models with PowerInfer today:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Falcon-40B&lt;/li&gt; &#xA; &lt;li&gt;Llama2 family&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have tested PowerInfer on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86-64 CPU (with AVX2 instructions) on Linux&lt;/li&gt; &#xA; &lt;li&gt;x86-64 CPU and NVIDIA GPU on Linux&lt;/li&gt; &#xA; &lt;li&gt;Apple M Chips on macOS (As we do not optimize for Mac, the performance improvement is not significant now.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And new features coming soon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mistral-7B model&lt;/li&gt; &#xA; &lt;li&gt;Metal backend for sparse inference on macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/#setup-and-installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SJTU-IPADS/PowerInfer/main/#model-weights&#34;&gt;Model Weights&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup and Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Get the Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/SJTU-IPADS/PowerInfer&#xA;cd PowerInfer&#xA;pip install -r requirements.txt # install Python helpers&#39; dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;In order to build PowerInfer you have two different options. These commands are supposed to be run from the root directory of the project.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;CMake&lt;/code&gt;(3.13+) on Linux or macOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have an NVIDIA GPU:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -S . -B build -DLLAMA_CUBLAS=ON&#xA;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you just CPU:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -S . -B build&#xA;cmake --build build --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model Weights&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer models are stored in a special format called &lt;em&gt;PowerInfer GGUF&lt;/em&gt; based on GGUF format, consisting of both LLM weights and predictor weights.&lt;/p&gt; &#xA;&lt;h3&gt;Download PowerInfer GGUF via Hugging Face&lt;/h3&gt; &#xA;&lt;p&gt;You can obtain PowerInfer GGUF weights at &lt;code&gt;*.powerinfer.gguf&lt;/code&gt; as well as profiled model activation statistics for &#39;hot&#39;-neuron offloading from each Hugging Face repo below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Base Model&lt;/th&gt; &#xA;   &lt;th&gt;PowerInfer GGUF&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-7B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-13B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-13B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-13B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Falcon(ReLU)-40B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluFalcon-40B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluFalcon-40B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-70B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-70B-PowerInfer-GGUF&#34;&gt;PowerInfer/ReluLLaMA-70B-PowerInfer-GGUF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We suggest downloading/cloning the whole repo so PowerInfer can automatically make use of such directory structure for feature-complete model offloading:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── *.powerinfer.gguf (Unquantized PowerInfer model)&#xA;├── *.q4.powerinfer.gguf (INT4 quantized PowerInfer model, if available)&#xA;├── activation (Profiled activation statistics for fine-grained FFN offloading)&#xA;│   ├── activation_x.pt (Profiled activation statistics for layer x)&#xA;│   └── ...&#xA;├── *.[q4].powerinfer.gguf.generated.gpuidx (Generated GPU index at runtime for corresponding model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert from Original Model Weights + Predictor Weights&lt;/h3&gt; &#xA;&lt;p&gt;Hugging Face limits single model weight to 50GiB. For unquantized models &amp;gt;= 40B, you can convert PowerInfer GGUF from the original model weights and predictor weights obtained from Hugging Face.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Base Model&lt;/th&gt; &#xA;   &lt;th&gt;Original Model&lt;/th&gt; &#xA;   &lt;th&gt;Predictor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluLLaMA-7B&#34;&gt;SparseLLM/ReluLLaMA-7B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-7B-Predictor&#34;&gt;PowerInfer/ReluLLaMA-7B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-13B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluLLaMA-13B&#34;&gt;SparseLLM/ReluLLaMA-13B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-13B-Predictor&#34;&gt;PowerInfer/ReluLLaMA-13B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Falcon(ReLU)-40B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluFalcon-40B&#34;&gt;SparseLLM/ReluFalcon-40B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluFalcon-40B-Predictor&#34;&gt;PowerInfer/ReluFalcon-40B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA(ReLU)-2-70B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SparseLLM/ReluLLaMA-70B&#34;&gt;SparseLLM/ReluLLaMA-70B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/PowerInfer/ReluLLaMA-70B-Predictor&#34;&gt;PowerInfer/ReluLLaMA-70B-Predictor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can use the following command to convert the original model weights and predictor weights to PowerInfer GGUF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make sure that you have done `pip install -r requirements.txt`&#xA;python convert.py --outfile /PATH/TO/POWERINFER/GGUF/REPO/MODELNAME.powerinfer.gguf /PATH/TO/ORIGINAL/MODEL /PATH/TO/PREDICTOR&#xA;# python convert.py --outfile ./ReluLLaMA-70B-PowerInfer-GGUF/llama-70b-relu.powerinfer.gguf ./SparseLLM/ReluLLaMA-70B ./PowerInfer/ReluLLaMA-70B-Predictor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the same reason, we suggest keeping the same directory structure as PowerInfer GGUF repos after conversion.&lt;/p&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;For CPU-only and CPU-GPU hybrid inference with all available VRAM, you can use the following instructions to run PowerInfer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/main -m /PATH/TO/MODEL -n $output_token_count -t $thread_num -p $prompt&#xA;# ./build/bin/main -m ./ReluFalcon-40B-PowerInfer-GGUF/falcon-40b-relu.q4.powerinfer.gguf -n 128 -t 8 -p &#34;Once upon a time&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to limit the VRAM usage of GPU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/main -m /PATH/TO/MODEL -n $output_token_count -t $thread_num -p $prompt --vram-budget $vram_gb&#xA;# ./build/bin/main -m ./ReluLLaMA-7B-PowerInfer-GGUF/llama-7b-relu.powerinfer.gguf -n 128 -t 8 -p &#34;Once upon a time&#34; --vram-budget 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Under CPU-GPU hybrid inference, PowerInfer will automatically offload all dense activation blocks to GPU, then split FFN and offload to GPU if possible.&lt;/p&gt; &#xA;&lt;h2&gt;Quantization&lt;/h2&gt; &#xA;&lt;p&gt;PowerInfer has optimized quantization support for INT4(&lt;code&gt;Q4_0&lt;/code&gt;) models. You can use the following instructions to quantize PowerInfer GGUF model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/quantize /PATH/TO/MODEL /PATH/TO/OUTPUT/QUANTIZED/MODEL Q4_0&#xA;# ./build/bin/quantize ./ReluFalcon-40B-PowerInfer-GGUF/falcon-40b-relu.powerinfer.gguf ./ReluFalcon-40B-PowerInfer-GGUF/falcon-40b-relu.q4.powerinfer.gguf Q4_0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use the quantized model for inference with PowerInfer with the same instructions as above.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;We evaluated PowerInfer vs. llama.cpp on a single RTX 4090(24G) with a series of FP16 ReLU models under inputs of length 64, and the results are shown below. PowerInfer achieves up to 11x speedup on Falcon 40B and up to 3x speedup on Llama 2 70B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/d700fa6c-77ba-462f-a2fc-3fd21c898f33&#34; alt=&#34;github-eval-4090&#34;&gt; &lt;sub&gt;The X axis indicates the output length, and the Y axis represents the speedup compared with llama.cpp. The number above each bar indicates the end-to-end generation speed (total prompting + generation time / total tokens generated, in tokens/s).&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also evaluated PowerInfer on a single RTX 2080Ti(11G) with INT4 ReLU models under inputs of length 8, and the results are illustrated in the same way as above. PowerInfer achieves up to 8x speedup on Falcon 40B and up to 3x speedup on Llama 2 70B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SJTU-IPADS/PowerInfer/assets/34213478/0fc1bfc4-aafc-4e82-a865-bec0143aff1a&#34; alt=&#34;github-eval-2080ti-q4&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://ipads.se.sjtu.edu.cn/_media/publications/powerinfer-20231219.pdf&#34;&gt;paper&lt;/a&gt; for more evaluation details.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;What if I encountered &lt;code&gt;CUDA_ERROR_OUT_OF_MEMORY&lt;/code&gt;?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can try to run with &lt;code&gt;--reset-gpu-index&lt;/code&gt; argument to rebuild the GPU index for this model to avoid any stale cache.&lt;/li&gt; &#xA;   &lt;li&gt;Due to our current implementation, model offloading might not be as accurate as expected. You can try with &lt;code&gt;--vram-budget&lt;/code&gt; with a slightly lower value or &lt;code&gt;--disable-gpu-index&lt;/code&gt; to disable FFN offloading.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does PowerInfer support mistral, original llama, Qwen, ...?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Now we only support models with ReLU/ReGLU/Squared ReLU activation function. So we do not support these models now. It&#39;s worth mentioning that a &lt;a href=&#34;https://arxiv.org/pdf/2310.04564.pdf&#34;&gt;paper&lt;/a&gt; has demonstrated that using the ReLU/ReGLU activation function has a negligible impact on convergence and performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why is there a noticeable downgrade in the performance metrics of our current ReLU model, particularly the 70B model?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In contrast to the typical requirement of around 2T tokens for LLM training, our model&#39;s fine-tuning was conducted with only 5B tokens. This insufficient retraining has resulted in the model&#39;s inability to regain its original performance. We are actively working on updating to a more capable model, so please stay tuned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;What if...&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Issues are welcomed! Please feel free to open an issue and attach your running environment and running parameters. We will try our best to help you.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;p&gt;We will release the code and data in the following order, please stay tuned!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Release core code of PowerInfer, supporting Llama-2, Falcon-40B.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Mistral-7B&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support text-generation-webui&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release perplexity evaluation code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Metal for Mac&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release code for OPT models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release predictor training code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support online split for FFN network&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Multi-GPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Paper and Citation&lt;/h2&gt; &#xA;&lt;p&gt;More technical details can be found in our &lt;a href=&#34;https://ipads.se.sjtu.edu.cn/_media/publications/powerinfer-20231219.pdf&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find PowerInfer useful or relevant to your project and research, please kindly cite our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{song2023powerinfer,&#xA;      title={PowerInfer: Fast Large Language Model Serving with a Consumer-grade GPU}, &#xA;      author={Yixin Song and Zeyu Mi and Haotong Xie and Haibo Chen},&#xA;      year={2023},&#xA;      eprint={2312.12456},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We are thankful for the easily modifiable operator library &lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;ggml&lt;/a&gt; and execution runtime provided by &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;. We also extend our gratitude to &lt;a href=&#34;https://nlp.csai.tsinghua.edu.cn/&#34;&gt;THUNLP&lt;/a&gt; for their support of ReLU-based sparse models. We also appreciate the research of &lt;a href=&#34;https://proceedings.mlr.press/v202/liu23am.html&#34;&gt;Deja Vu&lt;/a&gt;, which inspires PowerInfer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>webui-dev/webui</title>
    <updated>2023-12-22T01:27:27Z</updated>
    <id>tag:github.com,2023-12-22:/webui-dev/webui</id>
    <link href="https://github.com/webui-dev/webui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use any web browser as GUI, with your preferred language in the backend and HTML5 in the frontend, all in a lightweight portable lib.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/c92e712f-0698-486a-a460-d4acea28a4f8&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;WebUI v2.4.2&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/webui-dev/webui/ci.yml?branch=main&amp;amp;style=for-the-badge&amp;amp;logo=githubactions&amp;amp;labelColor=414868&amp;amp;logoColor=C0CAF5&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webui-dev/webui/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/webui-dev/webui?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=C0CAF5&amp;amp;labelColor=414868&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webui-dev/webui/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/webui-dev/webui?style=for-the-badge&amp;amp;logo=webtrees&amp;amp;logoColor=C0CAF5&amp;amp;labelColor=414868&amp;amp;color=7664C6&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webui-dev/webui/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/webui-dev/webui?style=for-the-badge&amp;amp;logo=opensourcehardware&amp;amp;label=License&amp;amp;logoColor=C0CAF5&amp;amp;labelColor=414868&amp;amp;color=8c73cc&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;WebUI is not a web-server solution or a framework, but it allows you to use any web browser as a GUI, with your preferred language in the backend and HTML5 in the frontend. All in a lightweight portable lib.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/57992ef1-4f7f-4d60-8045-7b07df4088c6&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/releases&#34;&gt;Latest Stable Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/releases/tag/nightly&#34;&gt;Nightly Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#showcase&#34;&gt;Showcase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#ui--the-web-technologies&#34;&gt;UI &amp;amp; The Web Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#wrappers&#34;&gt;Wrappers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#supported-web-browsers&#34;&gt;Supported Web Browsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webui-dev/webui/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable (&lt;em&gt;Needs only a web browser at runtime&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;One header file&lt;/li&gt; &#xA; &lt;li&gt;Lightweight (&lt;em&gt;Few Kb library&lt;/em&gt;) &amp;amp; Small memory footprint&lt;/li&gt; &#xA; &lt;li&gt;Fast binary communication protocol&lt;/li&gt; &#xA; &lt;li&gt;Multi-platform &amp;amp; Multi-Browser&lt;/li&gt; &#xA; &lt;li&gt;Using private profile for safety&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/webui-dev/webui/tree/main/examples/C/text-editor&#34;&gt;text editor&lt;/a&gt; is a lightweight and portable example written in C using WebUI as the GUI library.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/c1ccf29c-806a-4742-bfd7-a3dc30cab70b&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;UI &amp;amp; The Web Technologies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ibob.bg/&#34;&gt;Borislav Stanimirov&lt;/a&gt; discusses using HTML5 in the web browser as GUI at the &lt;a href=&#34;https://www.youtube.com/watch?v=bbbcZd4cuxg&#34;&gt;C++ Conference 2019 (&lt;em&gt;YouTube&lt;/em&gt;)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- &lt;div align=&#34;center&#34;&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=bbbcZd4cuxg&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/bbbcZd4cuxg/0.jpg&#34; alt=&#34;Embrace Modern Technology: Using HTML 5 for GUI in C++ - Borislav Stanimirov - CppCon 2019&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/webui-dev/webui/assets/34311583/4e830caa-4ca0-44ff-825f-7cd6d94083c8&#34; alt=&#34;CPPCon&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Web application UI design is not just about how a product looks but how it works. Using web technologies in your UI makes your product modern and professional, And a well-designed web application will help you make a solid first impression on potential customers. Great web application design also assists you in nurturing leads and increasing conversions. In addition, it makes navigating and using your web app easier for your users.&lt;/p&gt; &#xA;&lt;h3&gt;Why Use Web Browsers?&lt;/h3&gt; &#xA;&lt;p&gt;Today&#39;s web browsers have everything a modern UI needs. Web browsers are very sophisticated and optimized. Therefore, using it as a GUI will be an excellent choice. While old legacy GUI lib is complex and outdated, a WebView-based app is still an option. However, a WebView needs a huge SDK to build and many dependencies to run, and it can only provide some features like a real web browser. That is why WebUI uses real web browsers to give you full features of comprehensive web technologies while keeping your software lightweight and portable.&lt;/p&gt; &#xA;&lt;h3&gt;How Does it Work?&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/ttytm/webui/assets/34311583/dbde3573-3161-421e-925c-392a39f45ab3&#34; alt=&#34;Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Think of WebUI like a WebView controller, but instead of embedding the WebView controller in your program, which makes the final program big in size, and non-portable as it needs the WebView runtimes. Instead, by using WebUI, you use a tiny static/dynamic library to run any installed web browser and use it as GUI, which makes your program small, fast, and portable. &lt;strong&gt;All it needs is a web browser&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Runtime Dependencies Comparison&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;WebView&lt;/th&gt; &#xA;   &lt;th&gt;Qt&lt;/th&gt; &#xA;   &lt;th&gt;WebUI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runtime Dependencies on Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;WebView2&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;QtCore, QtGui, QtWidgets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;A Web Browser&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runtime Dependencies on Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;GTK3, WebKitGTK&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;QtCore, QtGui, QtWidgets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;A Web Browser&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runtime Dependencies on macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Cocoa, WebKit&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;QtCore, QtGui, QtWidgets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;A Web Browser&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; We are currently writing documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webui.me/docs/#/c_api&#34;&gt;Online Documentation - C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webui.me/docs/#/cpp_api&#34;&gt;Online Documentation - C++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# GCC&#xA;mingw32-make&#xA;&#xA;# MSVC&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Windows SSL/TLS (&lt;em&gt;Optional&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Download and install the OpenSSL pre-compiled binaries for Windows:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MSVC: &lt;a href=&#34;https://slproweb.com/download/Win64OpenSSL-3_1_3.msi&#34;&gt;x64 OpenSSL v3.1.3&lt;/a&gt; or &lt;a href=&#34;https://slproweb.com/download/Win32OpenSSL-3_1_3.msi&#34;&gt;&lt;em&gt;32Bit&lt;/em&gt;&lt;/a&gt;. Please check this &lt;a href=&#34;https://wiki.openssl.org/index.php/Binaries&#34;&gt;Wiki list&lt;/a&gt; for more info.&lt;/li&gt; &#xA;   &lt;li&gt;MinGW: &lt;a href=&#34;https://curl.se/windows/&#34;&gt;Curl for Windows win OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# GCC&#xA;mingw32-make WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE=&#34;C:\curl-xxx-xxx-mingw\curl-xxx-xxx-mingw\include&#34; WEBUI_TLS_LIB=&#34;C:\curl-xxx-xxx-mingw\curl-xxx-xxx-mingw\lib&#34;&#xA;&#xA;# MSVC&#xA;nmake WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE=&#34;C:\Program Files\OpenSSL-xxx\include&#34; WEBUI_TLS_LIB=&#34;C:\Program Files\OpenSSL-xxx\lib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# GCC&#xA;make&#xA;&#xA;# Clang&#xA;make CC=clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Linux SSL/TLS (&lt;em&gt;Optional&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo apt install libssl-dev&#xA;&#xA;# GCC&#xA;make WEBUI_USE_TLS=1&#xA;&#xA;# Clang&#xA;make WEBUI_USE_TLS=1 CC=clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;macOS SSL/TLS (&lt;em&gt;Optional&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install openssl&#xA;make WEBUI_USE_TLS=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/tree/main/examples/C&#34;&gt;C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/tree/main/examples/C++&#34;&gt;C++&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wrappers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/go-webui&#34;&gt;Go-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/nim-webui&#34;&gt;Nim-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pascal&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/pascal-webui&#34;&gt;Pascal-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/python-webui&#34;&gt;Python-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not complete&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/rust-webui&#34;&gt;Rust-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript / JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/deno-webui&#34;&gt;Deno-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/v-webui&#34;&gt;V-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not complete&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/zig-webui&#34;&gt;Zig-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Odin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not complete&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webui-dev/odin-webui&#34;&gt;Odin-WebUI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported Web Browsers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Browser&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mozilla Firefox&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Chrome&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft Edge&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chromium&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yandex&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Brave&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vivaldi&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Epic&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not available&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple Safari&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not available&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not available&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Opera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;coming soon&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Licensed under MIT License.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Stargazers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/webui-dev/webui/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/webui-dev/webui&#34; alt=&#34;Stargazers repo roster for @webui-dev/webui&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>