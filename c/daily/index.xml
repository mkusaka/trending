<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-08T01:31:43Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scandum/fluxsort</title>
    <updated>2023-02-08T01:31:43Z</updated>
    <id>tag:github.com,2023-02-08:/scandum/fluxsort</id>
    <link href="https://github.com/scandum/fluxsort" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A branchless stable quicksort / mergesort hybrid.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This document describes a stable quicksort / mergesort hybrid named fluxsort. The sort is stable, adaptive, branchless, and has exceptional performance. A &lt;a href=&#34;https://github.com/scandum/fluxsort#visualization&#34;&gt;visualisation&lt;/a&gt; and &lt;a href=&#34;https://github.com/scandum/fluxsort#benchmarks&#34;&gt;benchmarks&lt;/a&gt; are available at the bottom.&lt;/p&gt; &#xA;&lt;h2&gt;Analyzer&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort starts out with an analyzer that detects fully sorted arrays, and sorts reverse order arrays, using n comparisons. It also splits the array in 4 segments and obtains a measure of presortedness for each segment, switching to &lt;a href=&#34;https://github.com/scandum/quadsort&#34;&gt;quadsort&lt;/a&gt; if the segment is more than 50% ordered.&lt;/p&gt; &#xA;&lt;p&gt;While arguably not as adaptive as the bottom-up analyzer used by quadsort, a top-down analyzer works well because quicksort significantly benefits from sorting longer ranges. This approach results in more robust overall adaptivity as fluxsort cannot be tricked into performing less efficient partitions by small sorted runs. In addition, the analyzer will execute what could be considered a true top-down merge on the 4 segments.&lt;/p&gt; &#xA;&lt;p&gt;Increasing the segments from 4 to 16 is challenging due to register pressure.&lt;/p&gt; &#xA;&lt;h2&gt;Partitioning&lt;/h2&gt; &#xA;&lt;p&gt;Partitioning is performed in a top-down manner similar to quicksort. Fluxsort obtains the pseudomedian of 9 for partitions smaller than 2024 elements, the pseudomedian of 25 if the array is smaller than 65536, and the median of 128, 256, or 512 otherwise, making the pivot selection an approximation of the cubic root of the partition size. The median element obtained will be referred to as the pivot. Partitions that grow smaller than 24 elements are sorted with quadsort.&lt;/p&gt; &#xA;&lt;p&gt;After obtaining a pivot the array is parsed from start to end. Elements smaller than the pivot are copied in-place to the start of the array, elements greater than the pivot are copied to swap memory. The partitioning routine is called recursively on the two partitions in main and swap memory.&lt;/p&gt; &#xA;&lt;p&gt;Recursively partitioning through both swap and main memory is accomplished by passing along a pointer (ptx) to either swap or main memory, so swap memory does not need to be copied back to main memory before it can be partitioned again.&lt;/p&gt; &#xA;&lt;h2&gt;Worst case handling&lt;/h2&gt; &#xA;&lt;p&gt;To avoid run-away recursion fluxsort switches to quadsort for both partitions if one partition is less than 1/16th the size of the other partition. On a distribution of random unique values the observed chance of a false positive is 1 in 1,336 for the pseudomedian of 9 and approximately 1 in 4 million for the pseudomedian of 25.&lt;/p&gt; &#xA;&lt;p&gt;Combined with the analyzer fluxsort starts out with this makes the existence of killer patterns unlikely, other than at most a 33% performance slowdown by prematurely triggering the use of quadsort. However, for more complex comparisons, like strings, quadsort matches fluxsort, in which case it wouldn&#39;t make a difference.&lt;/p&gt; &#xA;&lt;h2&gt;Branchless optimizations&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort uses a branchless comparison optimization. The ability of quicksort to partition branchless was first described in &#34;BlockQuicksort: How Branch Mispredictions don&#39;t affect Quicksort&#34; by Stefan Edelkamp and Armin Weiss. Since Fluxsort uses auxiliary memory the partitioning scheme is simpler and faster than the one used by BlockQuicksort.&lt;/p&gt; &#xA;&lt;p&gt;Median selection uses a branchless comparison technique that selects the pseudomedian of 9 using 12 comparisons, and the pseudomedian of 25 using 42 comparisons.&lt;/p&gt; &#xA;&lt;p&gt;When sorting, branchless comparisons are primarily useful to take advantage of memory-level parallelism. After writing data, the process can continue without having to wait for the write operation to have actually finished, and the process will primarily stall when a cache line is fetched. Since quicksort partitions to two memory regions, part of the loop can continue, reducing the wait time for cache line fetches. This gives an overall performance gain, even though the branchless operation is more expensive.&lt;/p&gt; &#xA;&lt;p&gt;When the comparison becomes more expensive (like string comparisons), the size of the type is increased, the size of the partition is increased, or the comparison accesses uncached memory regions, the benefit of memory-level parallelism is reduced, and can even result in slower overall execution. While it&#39;s possible to write to four memory regions at once, instead of two, the cost-benefit is dubious for a general purpose sort, the added complexity would make porting and validating the code less appealing, and the performance gains are mostly hardware dependent.&lt;/p&gt; &#xA;&lt;p&gt;Quadsort, as of September 2021, uses a branchless optimization as well, and writes to two distinct memory regions by merging both ends of an array simultaneously. For sorting strings and objects quadsort&#39;s overall branchless performance is better than fluxsort&#39;s with the exception that fluxsort is faster on random data with low cardinality.&lt;/p&gt; &#xA;&lt;p&gt;As a general note, branch prediction is awesome. Quadsort and fluxsort try to take advantage of branch prediction where possible.&lt;/p&gt; &#xA;&lt;h2&gt;Generic data optimizations&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort uses a method that mimicks dual-pivot quicksort to improve generic data handling. If after a partition all elements were smaller or equal to the pivot, a reverse partition is performed, filtering out all elements equal to the pivot, next it carries on as usual. This typically only occurs when sorting tables with many identical values, like gender, age, etc. Fluxsort has a small bias in its pivot selection to increase the odds of this happening. In addition, generic data performance is improved slightly by checking if the same pivot is chosen twice in a row, in which case it performs a reverse partition as well. Pivot retention was first introduced by &lt;a href=&#34;https://github.com/orlp/pdqsort&#34;&gt;pdqsort&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌──────────────────────────────────┬───┬──────────────┐&#xA;│             E &amp;lt;= P               │ P │    E &amp;gt; P     | default partition&#xA;└──────────────────────────────────┴───┴──────────────┘&#xA;&#xA;┌──────────────┬───┬───────────────────┐&#xA;│    P &amp;gt; E     │ P │    P &amp;lt;= E         |                reverse partition&#xA;└──────────────┴───┴───────────────────┘&#xA;&#xA;┌──────────────┬───┬───────────────┬───┬──────────────┐&#xA;│    E &amp;lt; P     │ P │    E == P     │ P │     E &amp;gt; P    | &#xA;└──────────────┴───┴───────────────┴───┴──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adaptive partitioning&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort performs low cost run detection while it partitions and switches to quadsort if a long run is detected. While the run detection is not fully robust it can result in significant performance gains at a neglible cost.&lt;/p&gt; &#xA;&lt;h2&gt;Large array optimizations&lt;/h2&gt; &#xA;&lt;p&gt;For partitions larger than 65536 elements fluxsort obtains the median of 128, 256, or 512. It does so by copying 128, 256, or 512 random elements to swap memory, sorting them with quadsort, and taking the center element.&lt;/p&gt; &#xA;&lt;h2&gt;Small array optimizations&lt;/h2&gt; &#xA;&lt;p&gt;For partitions smaller than 24 elements fluxsort uses quadsort&#39;s small array sorting routine. This routine uses branchless parity merges for the first 4 or 8 elements, and twice-unguarded insertion sort to sort the remainder. If the array exceeds 15 elements it is split in 4 segments and parity merged. This gives a significant performance gain compared to the unguarded insertion sort used by most introsorts.&lt;/p&gt; &#xA;&lt;h2&gt;Big O&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;                 ┌───────────────────────┐┌───────────────────────┐&#xA;                 │comparisons            ││swap memory            │&#xA;┌───────────────┐├───────┬───────┬───────┤├───────┬───────┬───────┤┌──────┐┌─────────┐┌─────────┐&#xA;│name           ││min    │avg    │max    ││min    │avg    │max    ││stable││partition││adaptive │&#xA;├───────────────┤├───────┼───────┼───────┤├───────┼───────┼───────┤├──────┤├─────────┤├─────────┤&#xA;│fluxsort       ││n      │n log n│n log n││1      │n      │n      ││yes   ││yes      ││yes      │&#xA;├───────────────┤├───────┼───────┼───────┤├───────┼───────┼───────┤├──────┤├─────────┤├─────────┤&#xA;│quadsort       ││n      │n log n│n log n││1      │n      │n      ││yes   ││no       ││yes      │&#xA;├───────────────┤├───────┼───────┼───────┤├───────┼───────┼───────┤├──────┤├─────────┤├─────────┤&#xA;│quicksort      ││n log n│n log n│n²     ││1      │1      │1      ││no    ││yes      ││no       │&#xA;├───────────────┤├───────┼───────┼───────┤├───────┼───────┼───────┤├──────┤├─────────┤├─────────┤&#xA;│pdqsort        ││n      │n log n│n log n││1      │1      │1      ││no    ││yes      ││semi     │&#xA;└───────────────┘└───────┴───────┴───────┘└───────┴───────┴───────┘└──────┘└─────────┘└─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Types&lt;/h2&gt; &#xA;&lt;p&gt;The C implementation of fluxsort supports long doubles and 8, 16, 32, and 64 bit data types. By using pointers it&#39;s possible to sort any other data type, like strings.&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort uses the same interface as qsort, which is described in &lt;a href=&#34;https://man7.org/linux/man-pages/man3/qsort.3p.html&#34;&gt;man qsort&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Fluxsort comes with the fluxsort_prim(void *array, size_t nmemb, size_t size) function to perform primitive comparisons on arrays of 32 and 64 bit integers. Nmemb is the number of elements. Size should be either sizeof(int) or sizeof(long long) for signed integers, and sizeof(int) + 1 or sizeof(long long) + 1 for unsigned integers. Support for additional primitive as well as custom types can be added to fluxsort.h and quadsort.h.&lt;/p&gt; &#xA;&lt;h2&gt;Memory&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort allocates n elements of swap memory, which is shared with quadsort. Recursion requires log n stack memory.&lt;/p&gt; &#xA;&lt;p&gt;If memory allocation fails fluxsort defaults to quadsort, which requires n / 4 elements of swap memory. If allocation fails again quadsort will sort in-place through rotations.&lt;/p&gt; &#xA;&lt;p&gt;If in-place stable sorting is desired the best option is to use &lt;a href=&#34;https://github.com/scandum/blitsort&#34;&gt;blitsort&lt;/a&gt;, which is a properly in-place alternative to fluxsort. For in-place unstable sorting &lt;a href=&#34;https://github.com/scandum/blitsort&#34;&gt;crumsort&lt;/a&gt; is an option as well.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Fluxsort is one of the fastest stable comparison sorts written to date.&lt;/p&gt; &#xA;&lt;p&gt;To take full advantage of branchless operations the &lt;code&gt;cmp&lt;/code&gt; macro can be uncommented in bench.c, which will double the performance on primitive types. Fluxsort, after crumsort, is faster than a radix sort for sorting 64 bit integers. An adaptive radix sort, like &lt;a href=&#34;https://github.com/scandum/wolfsort&#34;&gt;wolfsort&lt;/a&gt;, has better performance on 8, 16, and 32 bit types.&lt;/p&gt; &#xA;&lt;p&gt;Fluxsort needs to be compiled using &lt;code&gt;gcc -O3&lt;/code&gt; for optimal performance.&lt;/p&gt; &#xA;&lt;h2&gt;Porting&lt;/h2&gt; &#xA;&lt;p&gt;People wanting to port fluxsort might want to have a look at &lt;a href=&#34;https://github.com/scandum/piposort&#34;&gt;piposort&lt;/a&gt;, which is a simplified implementation of quadsort. Fluxsort itself is relatively simple. Earlier versions of fluxsort have a less bulky analyzer. Fluxsort works without the analyzer, but will be less adaptive.&lt;/p&gt; &#xA;&lt;h2&gt;Variants&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/scandum/blitsort&#34;&gt;blitsort&lt;/a&gt; is an in-place variant of fluxsort. By default blitsort uses 512 elements of auxiliary memory, but it can easily be used with anywhere from 32 to n elements. It can be configured to use sqrt(n) memory, but other schemes are possible, allowing blitsort to outperform fluxsort by optimizing memory use for a specific system. The only other difference with fluxsort is that it currently does not detect emergent patterns.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/scandum/crumsort&#34;&gt;crumsort&lt;/a&gt; is a hybrid unstable in-place quicksort / quadsort. Crumsort has many similarities with fluxsort, but it uses a novel in-place and unstable partitioning scheme.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/scandum/piposort&#34;&gt;piposort&lt;/a&gt; is a simplified branchless quadsort with a much smaller code size and complexity while still being very fast. Piposort might be of use to people who want to port quadsort. This is a lot easier when you start out small.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/scandum/wolfsort&#34;&gt;wolfsort&lt;/a&gt; is a hybrid stable radixsort / fluxsort with improved performance on random data. It&#39;s mostly a proof of concept that only works on unsigned 32 bit integers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/orlp/glidesort&#34;&gt;glidesort&lt;/a&gt; is a hybrid stable quicksort / timsort written in Rust. The timsort is enhanced with quadsort&#39;s bidirectional branchless merge logic. Partitioning is similar to fluxsort, except that it is bidirectional like a parity merge, writing to 4 instead of 2 memory regions. Similarly, the memory regions of the merge routine are increase from 2 to 4 through partitioning and conjoining quad merges. Reportedly, doing this gives a performance benefit on the most recent hardware, while decreasing overall performance on older hardware as per my own experiments. Like fluxsort, pivot selection is branchless and pivot candidate selection is an approximation of the square root of the partition size for large arrays. Small array sorting has been sped up by using quadsort&#39;s branchless parity merges.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Visualization&lt;/h2&gt; &#xA;&lt;p&gt;In the visualization below four tests are performed on 512 elements: Random, Generic, Random Half, and Ascending Tiles. Partitions greater than 48 elements use the pseudomedian of 15 to select the pivot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/pXPrCTi-gRE&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scandum/fluxsort/main/images/fluxsort.gif&#34; alt=&#34;fluxsort visualization&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The following benchmark was on WSL gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) using the &lt;a href=&#34;https://github.com/scandum/wolfsort&#34;&gt;wolfsort&lt;/a&gt; benchmark. The source code was compiled using g++ -O3 -w -fpermissive bench.c. The bar graph shows the best run out of 100 on 100,000 32 bit integers. Comparisons for timsort, fluxsort and std::stable_sort are inlined.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scandum/fluxsort/main/images/fluxsort_vs_stdstablesort.png&#34; alt=&#34;fluxsort vs stdstablesort&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;data table&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.010946&lt;/td&gt; &#xA;    &lt;td&gt;0.011070&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.008525&lt;/td&gt; &#xA;    &lt;td&gt;0.008616&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.012787&lt;/td&gt; &#xA;    &lt;td&gt;0.012885&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.006119&lt;/td&gt; &#xA;    &lt;td&gt;0.006166&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.001947&lt;/td&gt; &#xA;    &lt;td&gt;0.001974&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.007788&lt;/td&gt; &#xA;    &lt;td&gt;0.007839&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Loops&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.005996&lt;/td&gt; &#xA;    &lt;td&gt;0.006033&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001852&lt;/td&gt; &#xA;    &lt;td&gt;0.001872&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.007584&lt;/td&gt; &#xA;    &lt;td&gt;0.007616&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003818&lt;/td&gt; &#xA;    &lt;td&gt;0.003845&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000657&lt;/td&gt; &#xA;    &lt;td&gt;0.000668&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.005606&lt;/td&gt; &#xA;    &lt;td&gt;0.005644&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000670&lt;/td&gt; &#xA;    &lt;td&gt;0.000688&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000044&lt;/td&gt; &#xA;    &lt;td&gt;0.000045&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000045&lt;/td&gt; &#xA;    &lt;td&gt;0.000046&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001359&lt;/td&gt; &#xA;    &lt;td&gt;0.001389&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000328&lt;/td&gt; &#xA;    &lt;td&gt;0.000331&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000842&lt;/td&gt; &#xA;    &lt;td&gt;0.000853&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001124&lt;/td&gt; &#xA;    &lt;td&gt;0.001152&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000206&lt;/td&gt; &#xA;    &lt;td&gt;0.000207&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000465&lt;/td&gt; &#xA;    &lt;td&gt;0.000472&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000905&lt;/td&gt; &#xA;    &lt;td&gt;0.000919&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000055&lt;/td&gt; &#xA;    &lt;td&gt;0.000055&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000092&lt;/td&gt; &#xA;    &lt;td&gt;0.000093&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001602&lt;/td&gt; &#xA;    &lt;td&gt;0.001618&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000418&lt;/td&gt; &#xA;    &lt;td&gt;0.000421&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000785&lt;/td&gt; &#xA;    &lt;td&gt;0.000797&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002030&lt;/td&gt; &#xA;    &lt;td&gt;0.002063&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000627&lt;/td&gt; &#xA;    &lt;td&gt;0.000630&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001992&lt;/td&gt; &#xA;    &lt;td&gt;0.002012&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003491&lt;/td&gt; &#xA;    &lt;td&gt;0.003531&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001080&lt;/td&gt; &#xA;    &lt;td&gt;0.001095&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.004022&lt;/td&gt; &#xA;    &lt;td&gt;0.004040&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000919&lt;/td&gt; &#xA;    &lt;td&gt;0.000942&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000294&lt;/td&gt; &#xA;    &lt;td&gt;0.000297&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000836&lt;/td&gt; &#xA;    &lt;td&gt;0.000878&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001172&lt;/td&gt; &#xA;    &lt;td&gt;0.001201&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001717&lt;/td&gt; &#xA;    &lt;td&gt;0.001743&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002240&lt;/td&gt; &#xA;    &lt;td&gt;0.002352&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The following benchmark was on WSL 2 gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) using the &lt;a href=&#34;https://github.com/scandum/wolfsort&#34;&gt;wolfsort benchmark&lt;/a&gt;. The source code was compiled using &lt;code&gt;g++ -O3 -w -fpermissive bench.c&lt;/code&gt;. It measures the performance on random data with array sizes ranging from 10 to 10,000,000. It&#39;s generated by running the benchmark using 10000000 0 0 as the argument. The benchmark is weighted, meaning the number of repetitions halves each time the number of items doubles. A table with the best and average time in seconds can be uncollapsed below the bar graph.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scandum/fluxsort/main/images/fluxsort_vs_stdstablesort_2.png&#34; alt=&#34;fluxsort vs stdstablesort&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;data table&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.127779&lt;/td&gt; &#xA;    &lt;td&gt;0.128149&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.049679&lt;/td&gt; &#xA;    &lt;td&gt;0.049883&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.141079&lt;/td&gt; &#xA;    &lt;td&gt;0.144350&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.242744&lt;/td&gt; &#xA;    &lt;td&gt;0.243288&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.112359&lt;/td&gt; &#xA;    &lt;td&gt;0.113083&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.341105&lt;/td&gt; &#xA;    &lt;td&gt;0.341710&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;1000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.362902&lt;/td&gt; &#xA;    &lt;td&gt;0.363586&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 1000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;1000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.137569&lt;/td&gt; &#xA;    &lt;td&gt;0.138066&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 1000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;1000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.493047&lt;/td&gt; &#xA;    &lt;td&gt;0.493622&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 1000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;10000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.476859&lt;/td&gt; &#xA;    &lt;td&gt;0.477168&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;10000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.160565&lt;/td&gt; &#xA;    &lt;td&gt;0.160774&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;10000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.637224&lt;/td&gt; &#xA;    &lt;td&gt;0.641950&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.602276&lt;/td&gt; &#xA;    &lt;td&gt;0.602838&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 100000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.187420&lt;/td&gt; &#xA;    &lt;td&gt;0.187915&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 100000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.762078&lt;/td&gt; &#xA;    &lt;td&gt;0.762648&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 100000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;1000000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.731715&lt;/td&gt; &#xA;    &lt;td&gt;0.734021&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 1000000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;1000000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.217196&lt;/td&gt; &#xA;    &lt;td&gt;0.219207&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 1000000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;1000000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.895532&lt;/td&gt; &#xA;    &lt;td&gt;0.896547&lt;/td&gt; &#xA;    &lt;td&gt;0.0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 1000000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;stablesort&lt;/td&gt; &#xA;    &lt;td&gt;10000000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.891028&lt;/td&gt; &#xA;    &lt;td&gt;0.895325&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10000000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;10000000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.266910&lt;/td&gt; &#xA;    &lt;td&gt;0.269159&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10000000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;timsort&lt;/td&gt; &#xA;    &lt;td&gt;10000000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;1.081709&lt;/td&gt; &#xA;    &lt;td&gt;1.089263&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;10&lt;/td&gt; &#xA;    &lt;td&gt;random 10000000&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The following benchmark was on WSL gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1). The source code was compiled using gcc -O3 bench.c. The bar graph shows the best run out of 100 on 100,000 32 bit integers. Comparisons for qsort, fluxsort and quadsort are not inlined. The stdlib qsort() in the benchmark is a mergesort variant.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/scandum/fluxsort/raw/main/images/fluxsort_vs_qsort.png&#34; alt=&#34;fluxsort vs qsort&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;data table&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.017033&lt;/td&gt; &#xA;    &lt;td&gt;0.017227&lt;/td&gt; &#xA;    &lt;td&gt;1536381&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.009928&lt;/td&gt; &#xA;    &lt;td&gt;0.010212&lt;/td&gt; &#xA;    &lt;td&gt;1782460&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.010777&lt;/td&gt; &#xA;    &lt;td&gt;0.010909&lt;/td&gt; &#xA;    &lt;td&gt;1684673&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.015398&lt;/td&gt; &#xA;    &lt;td&gt;0.015551&lt;/td&gt; &#xA;    &lt;td&gt;1536491&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random double&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.007646&lt;/td&gt; &#xA;    &lt;td&gt;0.007811&lt;/td&gt; &#xA;    &lt;td&gt;1781640&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random double&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.008702&lt;/td&gt; &#xA;    &lt;td&gt;0.008818&lt;/td&gt; &#xA;    &lt;td&gt;1684633&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random double&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.011014&lt;/td&gt; &#xA;    &lt;td&gt;0.011124&lt;/td&gt; &#xA;    &lt;td&gt;1536491&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random long&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.004859&lt;/td&gt; &#xA;    &lt;td&gt;0.004965&lt;/td&gt; &#xA;    &lt;td&gt;1781640&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random long&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.006043&lt;/td&gt; &#xA;    &lt;td&gt;0.006120&lt;/td&gt; &#xA;    &lt;td&gt;1684633&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random long&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.010834&lt;/td&gt; &#xA;    &lt;td&gt;0.010965&lt;/td&gt; &#xA;    &lt;td&gt;1536634&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random int&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.004596&lt;/td&gt; &#xA;    &lt;td&gt;0.004662&lt;/td&gt; &#xA;    &lt;td&gt;1790032&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random int&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.005365&lt;/td&gt; &#xA;    &lt;td&gt;0.005422&lt;/td&gt; &#xA;    &lt;td&gt;1684734&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random int&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.018219&lt;/td&gt; &#xA;    &lt;td&gt;0.019014&lt;/td&gt; &#xA;    &lt;td&gt;1536491&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.011178&lt;/td&gt; &#xA;    &lt;td&gt;0.011290&lt;/td&gt; &#xA;    &lt;td&gt;1781640&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.011141&lt;/td&gt; &#xA;    &lt;td&gt;0.011258&lt;/td&gt; &#xA;    &lt;td&gt;1684633&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.009328&lt;/td&gt; &#xA;    &lt;td&gt;0.009505&lt;/td&gt; &#xA;    &lt;td&gt;1536491&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.004025&lt;/td&gt; &#xA;    &lt;td&gt;0.004095&lt;/td&gt; &#xA;    &lt;td&gt;1781640&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.004103&lt;/td&gt; &#xA;    &lt;td&gt;0.004143&lt;/td&gt; &#xA;    &lt;td&gt;1684633&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.008932&lt;/td&gt; &#xA;    &lt;td&gt;0.009094&lt;/td&gt; &#xA;    &lt;td&gt;1536634&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003403&lt;/td&gt; &#xA;    &lt;td&gt;0.003453&lt;/td&gt; &#xA;    &lt;td&gt;1790032&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003373&lt;/td&gt; &#xA;    &lt;td&gt;0.003419&lt;/td&gt; &#xA;    &lt;td&gt;1684734&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.006692&lt;/td&gt; &#xA;    &lt;td&gt;0.006831&lt;/td&gt; &#xA;    &lt;td&gt;1532465&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001322&lt;/td&gt; &#xA;    &lt;td&gt;0.001352&lt;/td&gt; &#xA;    &lt;td&gt;897246&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002723&lt;/td&gt; &#xA;    &lt;td&gt;0.002816&lt;/td&gt; &#xA;    &lt;td&gt;1415417&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002233&lt;/td&gt; &#xA;    &lt;td&gt;0.002371&lt;/td&gt; &#xA;    &lt;td&gt;815024&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000174&lt;/td&gt; &#xA;    &lt;td&gt;0.000175&lt;/td&gt; &#xA;    &lt;td&gt;99999&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000159&lt;/td&gt; &#xA;    &lt;td&gt;0.000161&lt;/td&gt; &#xA;    &lt;td&gt;99999&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003067&lt;/td&gt; &#xA;    &lt;td&gt;0.003177&lt;/td&gt; &#xA;    &lt;td&gt;915020&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000545&lt;/td&gt; &#xA;    &lt;td&gt;0.000549&lt;/td&gt; &#xA;    &lt;td&gt;300011&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000897&lt;/td&gt; &#xA;    &lt;td&gt;0.000915&lt;/td&gt; &#xA;    &lt;td&gt;379624&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002480&lt;/td&gt; &#xA;    &lt;td&gt;0.002523&lt;/td&gt; &#xA;    &lt;td&gt;884462&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000381&lt;/td&gt; &#xA;    &lt;td&gt;0.000382&lt;/td&gt; &#xA;    &lt;td&gt;200006&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000457&lt;/td&gt; &#xA;    &lt;td&gt;0.000462&lt;/td&gt; &#xA;    &lt;td&gt;277113&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002459&lt;/td&gt; &#xA;    &lt;td&gt;0.002535&lt;/td&gt; &#xA;    &lt;td&gt;853904&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000186&lt;/td&gt; &#xA;    &lt;td&gt;0.000187&lt;/td&gt; &#xA;    &lt;td&gt;99999&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000164&lt;/td&gt; &#xA;    &lt;td&gt;0.000166&lt;/td&gt; &#xA;    &lt;td&gt;99999&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003289&lt;/td&gt; &#xA;    &lt;td&gt;0.003361&lt;/td&gt; &#xA;    &lt;td&gt;953892&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000555&lt;/td&gt; &#xA;    &lt;td&gt;0.000561&lt;/td&gt; &#xA;    &lt;td&gt;300013&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000922&lt;/td&gt; &#xA;    &lt;td&gt;0.000930&lt;/td&gt; &#xA;    &lt;td&gt;391547&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003943&lt;/td&gt; &#xA;    &lt;td&gt;0.004005&lt;/td&gt; &#xA;    &lt;td&gt;1012073&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001181&lt;/td&gt; &#xA;    &lt;td&gt;0.001207&lt;/td&gt; &#xA;    &lt;td&gt;623604&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001203&lt;/td&gt; &#xA;    &lt;td&gt;0.001221&lt;/td&gt; &#xA;    &lt;td&gt;592061&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.005791&lt;/td&gt; &#xA;    &lt;td&gt;0.005986&lt;/td&gt; &#xA;    &lt;td&gt;1200713&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001974&lt;/td&gt; &#xA;    &lt;td&gt;0.002004&lt;/td&gt; &#xA;    &lt;td&gt;1028725&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002055&lt;/td&gt; &#xA;    &lt;td&gt;0.002092&lt;/td&gt; &#xA;    &lt;td&gt;1006728&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.004085&lt;/td&gt; &#xA;    &lt;td&gt;0.004223&lt;/td&gt; &#xA;    &lt;td&gt;1209200&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001523&lt;/td&gt; &#xA;    &lt;td&gt;0.001557&lt;/td&gt; &#xA;    &lt;td&gt;528889&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002073&lt;/td&gt; &#xA;    &lt;td&gt;0.002130&lt;/td&gt; &#xA;    &lt;td&gt;671244&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;qsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.005143&lt;/td&gt; &#xA;    &lt;td&gt;0.005429&lt;/td&gt; &#xA;    &lt;td&gt;1553378&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003263&lt;/td&gt; &#xA;    &lt;td&gt;0.003385&lt;/td&gt; &#xA;    &lt;td&gt;1798806&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;quadsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003179&lt;/td&gt; &#xA;    &lt;td&gt;0.003218&lt;/td&gt; &#xA;    &lt;td&gt;1727134&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The following benchmark was on WSL gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) using the &lt;a href=&#34;https://github.com/scandum/wolfsort&#34;&gt;wolfsort&lt;/a&gt; benchmark. The source code was compiled using g++ -O3 -w -fpermissive bench.c. The bar graph shows the best run out of 100 on 100,000 32 bit integers. Comparisons for pdqsort, fluxsort and crumsort are inlined.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/scandum/fluxsort/raw/main/images/fluxsort_vs_pdqsort.png&#34; alt=&#34;fluxsort vs pdqsort&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;data table&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.005854&lt;/td&gt; &#xA;    &lt;td&gt;0.005954&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.008555&lt;/td&gt; &#xA;    &lt;td&gt;0.008662&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;128&lt;/td&gt; &#xA;    &lt;td&gt;0.008253&lt;/td&gt; &#xA;    &lt;td&gt;0.008312&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Compares&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.002660&lt;/td&gt; &#xA;    &lt;td&gt;0.002683&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.001950&lt;/td&gt; &#xA;    &lt;td&gt;0.001973&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;64&lt;/td&gt; &#xA;    &lt;td&gt;0.001850&lt;/td&gt; &#xA;    &lt;td&gt;0.001864&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Items&lt;/th&gt; &#xA;    &lt;th&gt;Type&lt;/th&gt; &#xA;    &lt;th&gt;Best&lt;/th&gt; &#xA;    &lt;th&gt;Average&lt;/th&gt; &#xA;    &lt;th&gt;Loops&lt;/th&gt; &#xA;    &lt;th&gt;Samples&lt;/th&gt; &#xA;    &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002687&lt;/td&gt; &#xA;    &lt;td&gt;0.002711&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001826&lt;/td&gt; &#xA;    &lt;td&gt;0.001857&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001799&lt;/td&gt; &#xA;    &lt;td&gt;0.001815&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000785&lt;/td&gt; &#xA;    &lt;td&gt;0.000792&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000656&lt;/td&gt; &#xA;    &lt;td&gt;0.000669&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000560&lt;/td&gt; &#xA;    &lt;td&gt;0.000565&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random % 100&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000091&lt;/td&gt; &#xA;    &lt;td&gt;0.000091&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000044&lt;/td&gt; &#xA;    &lt;td&gt;0.000044&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000044&lt;/td&gt; &#xA;    &lt;td&gt;0.000044&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003465&lt;/td&gt; &#xA;    &lt;td&gt;0.003482&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000329&lt;/td&gt; &#xA;    &lt;td&gt;0.000337&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000628&lt;/td&gt; &#xA;    &lt;td&gt;0.000636&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002840&lt;/td&gt; &#xA;    &lt;td&gt;0.002862&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000215&lt;/td&gt; &#xA;    &lt;td&gt;0.000218&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000359&lt;/td&gt; &#xA;    &lt;td&gt;0.000364&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;pipe organ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000195&lt;/td&gt; &#xA;    &lt;td&gt;0.000200&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000055&lt;/td&gt; &#xA;    &lt;td&gt;0.000056&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000056&lt;/td&gt; &#xA;    &lt;td&gt;0.000056&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending order&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.003236&lt;/td&gt; &#xA;    &lt;td&gt;0.003275&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000329&lt;/td&gt; &#xA;    &lt;td&gt;0.000331&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000637&lt;/td&gt; &#xA;    &lt;td&gt;0.000648&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;descending saw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002566&lt;/td&gt; &#xA;    &lt;td&gt;0.002587&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000624&lt;/td&gt; &#xA;    &lt;td&gt;0.000629&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000879&lt;/td&gt; &#xA;    &lt;td&gt;0.000888&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random tail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002670&lt;/td&gt; &#xA;    &lt;td&gt;0.002697&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001064&lt;/td&gt; &#xA;    &lt;td&gt;0.001081&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001199&lt;/td&gt; &#xA;    &lt;td&gt;0.001216&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;random half&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002316&lt;/td&gt; &#xA;    &lt;td&gt;0.002425&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.000293&lt;/td&gt; &#xA;    &lt;td&gt;0.000299&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001518&lt;/td&gt; &#xA;    &lt;td&gt;0.001545&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;ascending tiles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;pdqsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.002670&lt;/td&gt; &#xA;    &lt;td&gt;0.002694&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;fluxsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001692&lt;/td&gt; &#xA;    &lt;td&gt;0.001737&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;crumsort&lt;/td&gt; &#xA;    &lt;td&gt;100000&lt;/td&gt; &#xA;    &lt;td&gt;32&lt;/td&gt; &#xA;    &lt;td&gt;0.001785&lt;/td&gt; &#xA;    &lt;td&gt;0.001805&lt;/td&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td&gt;100&lt;/td&gt; &#xA;    &lt;td&gt;bit reversal&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>linux-test-project/ltp</title>
    <updated>2023-02-08T01:31:43Z</updated>
    <id>tag:github.com,2023-02-08:/linux-test-project/ltp</id>
    <link href="https://github.com/linux-test-project/ltp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux Test Project http://linux-test-project.github.io/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux Test Project&lt;/h1&gt; &#xA;&lt;p&gt;Linux Test Project is a joint project started by SGI, OSDL and Bull developed and maintained by IBM, Cisco, Fujitsu, SUSE, Red Hat, Oracle and others. The project goal is to deliver tests to the open source community that validate the reliability, robustness, and stability of Linux.&lt;/p&gt; &#xA;&lt;p&gt;The LTP testsuite contains a collection of tools for testing the Linux kernel and related features. Our goal is to improve the Linux kernel and system libraries by bringing test automation to the testing effort. Interested open source contributors are encouraged to join.&lt;/p&gt; &#xA;&lt;p&gt;Project pages are located at: &lt;a href=&#34;http://linux-test-project.github.io/&#34;&gt;http://linux-test-project.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The latest image is always available at: &lt;a href=&#34;https://github.com/linux-test-project/ltp/releases&#34;&gt;https://github.com/linux-test-project/ltp/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The discussion about the project happens at LTP mailing list: &lt;a href=&#34;http://lists.linux.it/listinfo/ltp&#34;&gt;http://lists.linux.it/listinfo/ltp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LTP mailing list is archived at: &lt;a href=&#34;https://lore.kernel.org/ltp/&#34;&gt;https://lore.kernel.org/ltp/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IRC #ltp at: &lt;a href=&#34;https://libera.chat/&#34;&gt;irc.libera.chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The git repository is located at GitHub at: &lt;a href=&#34;https://github.com/linux-test-project/ltp&#34;&gt;https://github.com/linux-test-project/ltp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The patchwork instance is at: &lt;a href=&#34;https://patchwork.ozlabs.org/project/ltp/list/&#34;&gt;https://patchwork.ozlabs.org/project/ltp/list/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Warning!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Be careful with these tests!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t run them on production systems. Growfiles, doio, and iogen in particular stress the I/O capabilities of systems and while they should not cause problems on properly functioning systems, they are intended to find (or cause) problems.&lt;/p&gt; &#xA;&lt;h1&gt;Quick guide to running the tests&lt;/h1&gt; &#xA;&lt;p&gt;If you have git, autoconf, automake, m4, pkgconf / pkg-config, libc headers, linux kernel headers and other common development packages installed (see INSTALL and ci/*.sh), the chances are the following will work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/linux-test-project/ltp.git&#xA;$ cd ltp&#xA;$ make autotools&#xA;$ ./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can continue either with compiling and running a single test or with compiling and installing the whole testsuite.&lt;/p&gt; &#xA;&lt;p&gt;For optional library dependencies look into scripts for major distros in &lt;code&gt;ci/&lt;/code&gt; directory. You can also build whole LTP with &lt;code&gt;./build.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcut to running a single test&lt;/h2&gt; &#xA;&lt;p&gt;If you need to execute a single test you actually do not need to compile the whole LTP, if you want to run a syscall testcase following should work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd testcases/kernel/syscalls/foo&#xA;$ make&#xA;$ PATH=$PATH:$PWD ./foo01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shell testcases are a bit more complicated since these need a path to a shell library as well as to compiled binary helpers, but generally following should work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd testcases/lib&#xA;$ make&#xA;$ cd ../commands/foo&#xA;$ PATH=$PATH:$PWD:$PWD/../../lib/ ./foo01.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open Posix Testsuite has it&#39;s own build system which needs Makefiles to be generated first, then compilation should work in subdirectories as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd testcases/open_posix_testsuite/&#xA;$ make generate-makefiles&#xA;$ cd conformance/interfaces/foo&#xA;$ make&#xA;$ ./foo_1-1.run-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling and installing all testcases&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install LTP to &lt;code&gt;/opt/ltp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a problem see &lt;code&gt;doc/mini-howto-building-ltp-from-git.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you still have a problem see &lt;code&gt;INSTALL&lt;/code&gt; and &lt;code&gt;./configure --help&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Failing that, ask for help on the mailing list or Github.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some tests will be disabled if the configure script can not find their build dependencies.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a test returns &lt;code&gt;TCONF&lt;/code&gt; due to a missing component, check the &lt;code&gt;./configure&lt;/code&gt; output.&lt;/li&gt; &#xA; &lt;li&gt;If a tests fails due to a missing user or group, see the Quick Start section of &lt;code&gt;INSTALL&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;To run all the test suites&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /opt/ltp&#xA;$ ./runltp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that many test cases have to be executed as root.&lt;/p&gt; &#xA;&lt;p&gt;To run a particular test suite&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./runltp -f syscalls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all tests with &lt;code&gt;madvise&lt;/code&gt; in the name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./runltp -f syscalls -s madvise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also see&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./runltp --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test suites (e.g. syscalls) are defined in the runtest directory. Each file contains a list of test cases in a simple format, see doc/ltp-run-files.txt.&lt;/p&gt; &#xA;&lt;p&gt;Each test case has its own executable or script, these can be executed directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ testcases/bin/abort01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some have arguments&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ testcases/bin/mesgq\_nstest -m none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The vast majority of test cases accept the -h (help) switch&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ testcases/bin/ioctl01 -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many require certain environment variables to be set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ LTPROOT=/opt/ltp PATH=&#34;$PATH:$LTPROOT/testcases/bin&#34; testcases/bin/wc01.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most commonly, the path variable needs to be set and also &lt;code&gt;LTPROOT&lt;/code&gt;, but there are a number of other variables, &lt;code&gt;runltp&lt;/code&gt; usually sets these for you.&lt;/p&gt; &#xA;&lt;p&gt;Note that all shell scripts need the &lt;code&gt;PATH&lt;/code&gt; to be set. However this is not limited to shell scripts, many C based tests need environment variables as well.&lt;/p&gt; &#xA;&lt;p&gt;For more info see &lt;code&gt;doc/user-guide.txt&lt;/code&gt; or online at &lt;a href=&#34;https://github.com/linux-test-project/ltp/wiki/User-Guidelines&#34;&gt;https://github.com/linux-test-project/ltp/wiki/User-Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Network tests&lt;/h2&gt; &#xA;&lt;p&gt;Network tests require certain setup, described in &lt;code&gt;testcases/network/README.md&lt;/code&gt; (online at &lt;a href=&#34;https://github.com/linux-test-project/ltp/tree/master/testcases/network&#34;&gt;https://github.com/linux-test-project/ltp/tree/master/testcases/network&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Developers corner&lt;/h1&gt; &#xA;&lt;p&gt;Before you start you should read following documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/test-writing-guidelines.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/build-system-guide.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/library-api-writing-guidelines.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a step-by-step tutorial:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/c-test-tutorial-simple.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If something is not covered there don&#39;t hesitate to ask on the LTP mailing list. Also note that these documents are available online at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linux-test-project/ltp/wiki/Test-Writing-Guidelines&#34;&gt;https://github.com/linux-test-project/ltp/wiki/Test-Writing-Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linux-test-project/ltp/wiki/LTP-Library-API-Writing-Guidelines&#34;&gt;https://github.com/linux-test-project/ltp/wiki/LTP-Library-API-Writing-Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linux-test-project/ltp/wiki/Build-System&#34;&gt;https://github.com/linux-test-project/ltp/wiki/Build-System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linux-test-project/ltp/wiki/C-Test-Case-Tutorial&#34;&gt;https://github.com/linux-test-project/ltp/wiki/C-Test-Case-Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Although we accept GitHub pull requests, the preferred way is sending patches to our mailing list.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to test patches on GitHub Actions before posting to mailing list. Our GitHub Actions setup covers various architectures and distributions in order to make sure LTP compiles cleanly on most common configurations. For testing you need to just push your changes to your own LTP fork on GitHub.&lt;/p&gt;</summary>
  </entry>
</feed>