<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-12T01:29:03Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>54zorb/Zorb-Framework</title>
    <updated>2023-11-12T01:29:03Z</updated>
    <id>tag:github.com,2023-11-12:/54zorb/Zorb-Framework</id>
    <link href="https://github.com/54zorb/Zorb-Framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个轻量级嵌入式框架&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Zorb Framework简介&lt;/h2&gt; &#xA;&lt;p&gt;​ Zorb Framework是一个轻量级的嵌入式框架，搭建目的是为在不能运行Linux的芯片上快速开发应用，不用反复造轮子。&lt;/p&gt; &#xA;&lt;p&gt;​ Zorb Framework的初步设计功能有&lt;/p&gt; &#xA;&lt;p&gt;​ 1、时间系统功能zf_time&lt;/p&gt; &#xA;&lt;p&gt;​ 2、环形缓冲区功能zf_buffer&lt;/p&gt; &#xA;&lt;p&gt;​ 3、列表功能zf_list&lt;/p&gt; &#xA;&lt;p&gt;​ 4、状态机功能zf_fsm&lt;/p&gt; &#xA;&lt;p&gt;​ 5、事件功能zf_event&lt;/p&gt; &#xA;&lt;p&gt;​ 6、定时器功能zf_timer&lt;/p&gt; &#xA;&lt;p&gt;​ 7、任务功能zf_task&lt;/p&gt; &#xA;&lt;p&gt;​ 前6个功能，就可以实现纯事件驱动的程序，基本可以满足中小型嵌入式应用程序开发的需求。加上任务功能，是为了满足部分程序对实时性要求较高的需求。当然，也可以将前6个功能裁剪出来，然后运行在现有的嵌入式系统上面，这样子也可以满足实时性的需求。&lt;/p&gt; &#xA;&lt;h2&gt;测试例子&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/54zorb/p/9278680.html&#34;&gt;1、环形缓冲区测试例子&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/54zorb/p/9279805.html&#34;&gt;2、列表测试例子&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/54zorb/p/9285805.html&#34;&gt;3、状态机测试例子&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/54zorb/p/9325298.html&#34;&gt;4、事件测试例子&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/54zorb/p/9325510.html&#34;&gt;5、定时器测试例子&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/54zorb/p/9337754.html&#34;&gt;6、任务测试例子&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DragonQuestHero/Medusa</title>
    <updated>2023-11-12T01:29:03Z</updated>
    <id>tag:github.com,2023-11-12:/DragonQuestHero/Medusa</id>
    <link href="https://github.com/DragonQuestHero/Medusa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Radical Windows ARK&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;美杜莎（希腊语：Μέδουσα、英语：Medusa）是古希腊神话中的蛇发女妖，戈耳工三姐妹之一&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DragonQuestHero/Medusa/raw/master/Readme-en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;我不在意GDT和IDT到底有没有被修改 也不想重复process hacker已经有的功能 更不在乎某个进程连接了哪个IP&lt;/h5&gt; &#xA;&lt;h5&gt;重点关注进程 内存 线程 内核等重灾区 大多ARK为了功能足够多舍弃了一些不好维护或添加或不够稳定的功能&lt;/h5&gt; &#xA;&lt;h5&gt;添加其他ARK等没有的更加激进功能成为主要方向(虚表钩子 指针替换扫描 IOCTL检查 回调钩子检查 虚拟化环境检查 进程断链检查 驱动断链检查 内存加载驱动检查 未知内存扫描 安全dump 更多并且更加强硬的注入方式 模仿反作弊或仿真检查 ....)&lt;/h5&gt; &#xA;&lt;h5&gt;在不加载PDB以及不加载驱动的情况下 保障一些基础功能的正常使用和运行 尽可能提供不依赖以上两样的最大支持&lt;/h5&gt; &#xA;&lt;h3&gt;v1.0版本已在1809 21h1 21h2上通过单元测试&lt;/h3&gt; &#xA;&lt;h4&gt;已完成(应用层):&lt;/h4&gt; &#xA;&lt;h5&gt;---进程 线程 模块 内核驱动枚举列表&lt;/h5&gt; &#xA;&lt;h5&gt;---文件内存代码段对比(hook扫描)&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/10.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h6&gt;-----如果驱动没有加载 单纯的应用层扫描 如果驱动已经加载 通过内核获取PEB链表得到模块列表 再利用内核读写内存来读取进程 最后应用层读取文件对比&lt;/h6&gt; &#xA;&lt;h5&gt;---应用层虚拟化检测(包括但不限于各类虚拟机以及虚拟化框架及驱动)&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/1.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h5&gt;---符号文件查询 下载 浏览(内核驱动和应用层DLL可直接显示加载地址)和传递内核使用&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/4.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/6.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/5.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h5&gt;使用全局变量路径 可选的&lt;a href=&#34;https://github.com/szdyg/pdb_proxy&#34;&gt;https://github.com/szdyg/pdb_proxy&lt;/a&gt; 代理下载&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/7.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4&gt;已完成(内核部分):&lt;/h4&gt; &#xA;&lt;h5&gt;---进程断链检查 一共4次检查 4次结果汇总 第三次以ObjectTable不为空为标志 第四次即便ObjectTable不为空也依旧加入列表并且标红 4次检查以后绝大部分进程断链方式都会被筛查出&lt;/h5&gt; &#xA;&lt;h6&gt;-----应用层枚举第一次&lt;/h6&gt; &#xA;&lt;h6&gt;-----内核调用ZwQuerySystemInformation枚举第二次&lt;/h6&gt; &#xA;&lt;h6&gt;-----内核调用PsLookupProcessByProcessId枚举进程ID第三次检查&lt;/h6&gt; &#xA;&lt;h6&gt;-----内核调用PsLookupThreadByThreadId枚举线程ID第四次检查&lt;/h6&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/2.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h5&gt;---驱动断链检查&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/3.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h5&gt;---已卸载驱动查询&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/8.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h5&gt;---进程隐藏&lt;/h5&gt; &#xA;&lt;h5&gt;---驱动隐藏&lt;/h5&gt; &#xA;&lt;h5&gt;---已卸载驱动和未卸载驱动加载信息清理&lt;/h5&gt; &#xA;&lt;h5&gt;---进程模块检查&lt;/h5&gt; &#xA;&lt;h6&gt;-----应用层枚举第一次&lt;/h6&gt; &#xA;&lt;h6&gt;-----PEB链表枚举第二次&lt;/h6&gt; &#xA;&lt;h6&gt;-----&lt;/h6&gt; &#xA;&lt;h5&gt;---线程列表检查&lt;/h5&gt; &#xA;&lt;h5&gt;---线程栈回潮查看 依赖PDB 用内核APC和直接拷贝内存的方式搜索栈&lt;/h5&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DragonQuestHero/Medusa/master/IMG/9.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h5&gt;代码开源 已有代码的情况下我只缝合 基础功能齐全后上传release&lt;/h5&gt; &#xA;&lt;h5&gt;群:729338597&lt;/h5&gt;</summary>
  </entry>
  <entry>
    <title>glennrp/libpng</title>
    <updated>2023-11-12T01:29:03Z</updated>
    <id>tag:github.com,2023-11-12:/glennrp/libpng</id>
    <link href="https://github.com/glennrp/libpng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LIBPNG: Portable Network Graphics support, official libpng repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for libpng version 1.6.41.git&lt;/h1&gt; &#xA;&lt;p&gt;See the note about version numbers near the top of &lt;code&gt;png.h&lt;/code&gt;. See &lt;code&gt;INSTALL&lt;/code&gt; for instructions on how to install libpng.&lt;/p&gt; &#xA;&lt;p&gt;Libpng comes in several distribution formats. Get &lt;code&gt;libpng-*.tar.gz&lt;/code&gt; or &lt;code&gt;libpng-*.tar.xz&lt;/code&gt; if you want UNIX-style line endings in the text files, or &lt;code&gt;lpng*.7z&lt;/code&gt; or &lt;code&gt;lpng*.zip&lt;/code&gt; if you want DOS-style line endings.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed description on using libpng, read &lt;code&gt;libpng-manual.txt&lt;/code&gt;. For examples of libpng in a program, see &lt;code&gt;example.c&lt;/code&gt; and &lt;code&gt;pngtest.c&lt;/code&gt;. For usage information and restrictions (what little they are) on libpng, see &lt;code&gt;png.h&lt;/code&gt;. For a description on using zlib (the compression library used by libpng) and zlib&#39;s restrictions, see &lt;code&gt;zlib.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should use zlib 1.0.4 or later to run this, but it &lt;em&gt;may&lt;/em&gt; work with versions as old as zlib 0.95. Even so, there are bugs in older zlib versions which can cause the output of invalid compression streams for some images.&lt;/p&gt; &#xA;&lt;p&gt;You should also note that zlib is a compression library that is useful for more things than just PNG files. You can use zlib as a drop-in replacement for &lt;code&gt;fread()&lt;/code&gt; and &lt;code&gt;fwrite()&lt;/code&gt;, if you are so inclined.&lt;/p&gt; &#xA;&lt;p&gt;zlib should be available at the same place that libpng is, or at &lt;a href=&#34;https://zlib.net&#34;&gt;https://zlib.net&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;You may also want a copy of the PNG specification. It is available as an RFC, a W3C Recommendation, and an ISO/IEC Standard. You can find these at &lt;a href=&#34;http://www.libpng.org/pub/png/pngdocs.html&#34;&gt;http://www.libpng.org/pub/png/pngdocs.html&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;This code is currently being archived at &lt;a href=&#34;https://libpng.sourceforge.io&#34;&gt;https://libpng.sourceforge.io&lt;/a&gt; in the download area, and at &lt;a href=&#34;http://libpng.download/src&#34;&gt;http://libpng.download/src&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;This release, based in a large way on Glenn&#39;s, Guy&#39;s and Andreas&#39; earlier work, was created and will be supported by myself and the PNG development group.&lt;/p&gt; &#xA;&lt;p&gt;Send comments, corrections and commendations to &lt;code&gt;png-mng-implement&lt;/code&gt; at &lt;code&gt;lists.sourceforge.net&lt;/code&gt;. (Subscription is required; visit &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/png-mng-implement&#34;&gt;https://lists.sourceforge.net/lists/listinfo/png-mng-implement&lt;/a&gt; to subscribe.)&lt;/p&gt; &#xA;&lt;p&gt;Send general questions about the PNG specification to &lt;code&gt;png-mng-misc&lt;/code&gt; at &lt;code&gt;lists.sourceforge.net&lt;/code&gt;. (Subscription is required; visit &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/png-mng-misc&#34;&gt;https://lists.sourceforge.net/lists/listinfo/png-mng-misc&lt;/a&gt; to subscribe.)&lt;/p&gt; &#xA;&lt;h2&gt;Historical notes&lt;/h2&gt; &#xA;&lt;p&gt;The libpng library has been in extensive use and testing since mid-1995. Version 0.89, published a year later, was the first official release. By late 1997, it had finally gotten to the stage where there hadn&#39;t been significant changes to the API in some time, and people have a bad feeling about libraries with versions below 1.0. Version 1.0.0 was released in March 1998.&lt;/p&gt; &#xA;&lt;p&gt;Note that some of the changes to the &lt;code&gt;png_info&lt;/code&gt; structure render this version of the library binary incompatible with libpng-0.89 or earlier versions if you are using a shared library. The type of the &lt;code&gt;filler&lt;/code&gt; parameter for &lt;code&gt;png_set_filler()&lt;/code&gt; has changed from &lt;code&gt;png_byte&lt;/code&gt; to &lt;code&gt;png_uint_32&lt;/code&gt;, which will affect shared-library applications that use this function.&lt;/p&gt; &#xA;&lt;p&gt;To avoid problems with changes to the internals of the &lt;code&gt;info_struct&lt;/code&gt;, new APIs have been made available in 0.95 to avoid direct application access to &lt;code&gt;info_ptr&lt;/code&gt;. These functions are the &lt;code&gt;png_set_&amp;lt;chunk&amp;gt;&lt;/code&gt; and &lt;code&gt;png_get_&amp;lt;chunk&amp;gt;&lt;/code&gt; functions. These functions should be used when accessing/storing the &lt;code&gt;info_struct&lt;/code&gt; data, rather than manipulating it directly, to avoid such problems in the future.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that the APIs did not make current programs that access the info struct directly incompatible with the new library, through libpng-1.2.x. In libpng-1.4.x, which was meant to be a transitional release, members of the &lt;code&gt;png_struct&lt;/code&gt; and the &lt;code&gt;info_struct&lt;/code&gt; can still be accessed, but the compiler will issue a warning about deprecated usage. Since libpng-1.5.0, direct access to these structs is not allowed, and the definitions of the structs reside in private &lt;code&gt;pngstruct.h&lt;/code&gt; and &lt;code&gt;pnginfo.h&lt;/code&gt; header files that are not accessible to applications. It is strongly suggested that new programs use the new APIs (as shown in &lt;code&gt;example.c&lt;/code&gt; and &lt;code&gt;pngtest.c&lt;/code&gt;), and older programs be converted to the new format, to facilitate upgrades in the future.&lt;/p&gt; &#xA;&lt;p&gt;The additions since 0.89 include the ability to read from a PNG stream which has had some (or all) of the signature bytes read by the calling application. This also allows the reading of embedded PNG streams that do not have the PNG file signature. As well, it is now possible to set the library action on the detection of chunk CRC errors. It is possible to set different actions based on whether the CRC error occurred in a critical or an ancillary chunk.&lt;/p&gt; &#xA;&lt;p&gt;The additions since 0.90 include the ability to compile libpng as a Windows DLL, and new APIs for accessing data in the &lt;code&gt;info_struct&lt;/code&gt;. Experimental functions included the ability to set weighting and cost factors for row filter selection, direct reads of integers from buffers on big-endian processors that support misaligned data access, faster methods of doing alpha composition, and more accurate 16-to-8 bit color conversion. Some of these experimental functions, such as the weighted filter heuristics, have since been removed.&lt;/p&gt; &#xA;&lt;h2&gt;Files included in this distribution&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;ANNOUNCE      =&amp;gt;  Announcement of this version, with recent changes&#xA;AUTHORS       =&amp;gt;  List of contributing authors&#xA;CHANGES       =&amp;gt;  Description of changes between libpng versions&#xA;INSTALL       =&amp;gt;  Instructions to install libpng&#xA;LICENSE       =&amp;gt;  License to use and redistribute libpng&#xA;README        =&amp;gt;  This file&#xA;TODO          =&amp;gt;  Things not implemented in the current library&#xA;TRADEMARK     =&amp;gt;  Trademark information&#xA;example.c     =&amp;gt;  Example code for using libpng functions&#xA;libpng.3      =&amp;gt;  Manual page for libpng (includes libpng-manual.txt)&#xA;libpng-manual.txt  =&amp;gt;  Description of libpng and its functions&#xA;libpngpf.3    =&amp;gt;  Manual page for libpng&#39;s private functions (deprecated)&#xA;png.5         =&amp;gt;  Manual page for the PNG format&#xA;png.c         =&amp;gt;  Basic interface functions common to library&#xA;png.h         =&amp;gt;  Library function and interface declarations (public)&#xA;pngpriv.h     =&amp;gt;  Library function and interface declarations (private)&#xA;pngconf.h     =&amp;gt;  System specific library configuration (public)&#xA;pngstruct.h   =&amp;gt;  png_struct declaration (private)&#xA;pnginfo.h     =&amp;gt;  png_info struct declaration (private)&#xA;pngdebug.h    =&amp;gt;  debugging macros (private)&#xA;pngerror.c    =&amp;gt;  Error/warning message I/O functions&#xA;pngget.c      =&amp;gt;  Functions for retrieving info from struct&#xA;pngmem.c      =&amp;gt;  Memory handling functions&#xA;pngbar.png    =&amp;gt;  PNG logo, 88x31&#xA;pngnow.png    =&amp;gt;  PNG logo, 98x31&#xA;pngpread.c    =&amp;gt;  Progressive reading functions&#xA;pngread.c     =&amp;gt;  Read data/helper high-level functions&#xA;pngrio.c      =&amp;gt;  Lowest-level data read I/O functions&#xA;pngrtran.c    =&amp;gt;  Read data transformation functions&#xA;pngrutil.c    =&amp;gt;  Read data utility functions&#xA;pngset.c      =&amp;gt;  Functions for storing data into the info_struct&#xA;pngtest.c     =&amp;gt;  Library test program&#xA;pngtest.png   =&amp;gt;  Library test sample image&#xA;pngtrans.c    =&amp;gt;  Common data transformation functions&#xA;pngwio.c      =&amp;gt;  Lowest-level write I/O functions&#xA;pngwrite.c    =&amp;gt;  High-level write functions&#xA;pngwtran.c    =&amp;gt;  Write data transformations&#xA;pngwutil.c    =&amp;gt;  Write utility functions&#xA;arm/          =&amp;gt;  Optimized code for the ARM platform&#xA;intel/        =&amp;gt;  Optimized code for the INTEL-SSE2 platform&#xA;mips/         =&amp;gt;  Optimized code for the MIPS platform&#xA;powerpc/      =&amp;gt;  Optimized code for the PowerPC platform&#xA;ci/           =&amp;gt;  Scripts for continuous integration&#xA;contrib/      =&amp;gt;  External contributions&#xA;    arm-neon/     =&amp;gt;  Optimized code for the ARM-NEON platform&#xA;    mips-msa/     =&amp;gt;  Optimized code for the MIPS-MSA platform&#xA;    powerpc-vsx/  =&amp;gt;  Optimized code for the POWERPC-VSX platform&#xA;    examples/     =&amp;gt;  Examples of libpng usage&#xA;    gregbook/     =&amp;gt;  Source code for PNG reading and writing, from&#xA;                      &#34;PNG: The Definitive Guide&#34; by Greg Roelofs,&#xA;                      O&#39;Reilly, 1999&#xA;    libtests/     =&amp;gt;  Test programs&#xA;    oss-fuzz/     =&amp;gt;  Files used by the OSS-Fuzz project for fuzz-testing&#xA;                      libpng&#xA;    pngminim/     =&amp;gt;  Minimal decoder, encoder, and progressive decoder&#xA;                      programs demonstrating the use of pngusr.dfa&#xA;    pngminus/     =&amp;gt;  Simple pnm2png and png2pnm programs&#xA;    pngsuite/     =&amp;gt;  Test images&#xA;    testpngs/     =&amp;gt;  Test images&#xA;    tools/        =&amp;gt;  Various tools&#xA;    visupng/      =&amp;gt;  VisualPng, a Windows viewer for PNG images&#xA;projects/     =&amp;gt;  Project files and workspaces for various IDEs&#xA;    owatcom/      =&amp;gt;  OpenWatcom project&#xA;    visualc71/    =&amp;gt;  Microsoft Visual C++ 7.1 workspace&#xA;    vstudio/      =&amp;gt;  Microsoft Visual Studio workspace&#xA;scripts/      =&amp;gt;  Scripts and makefiles for building libpng&#xA;                  (see scripts/README.txt for the complete list)&#xA;tests/        =&amp;gt;  Test scripts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good luck, and happy coding!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cosmin Truta (current maintainer, since 2018)&lt;/li&gt; &#xA; &lt;li&gt;Glenn Randers-Pehrson (former maintainer, 1998-2018)&lt;/li&gt; &#xA; &lt;li&gt;Andreas Eric Dilger (former maintainer, 1996-1997)&lt;/li&gt; &#xA; &lt;li&gt;Guy Eric Schalnat (original author and former maintainer, 1995-1996) (formerly of Group 42, Inc.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>