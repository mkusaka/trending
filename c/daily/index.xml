<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-01T01:31:44Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>infoskirmish/hive</title>
    <updated>2023-02-01T01:31:44Z</updated>
    <id>tag:github.com,2023-02-01:/infoskirmish/hive</id>
    <link href="https://github.com/infoskirmish/hive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The CIA Hive source code as released by Wikileaks&lt;/p&gt;&lt;hr&gt;&lt;p&gt;From WikiLeaks:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Today, 9 November 2017, WikiLeaks publishes the source code and development logs to Hive, a major component of the CIA infrastructure to control its malware.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Hive solves a critical problem for the malware operators at the CIA. Even the most sophisticated malware implant on a target computer is useless if there is no way for it to communicate with its operators in a secure manner that does not draw attention. Using Hive even if an implant is discovered on a target computer, attributing it to the CIA is difficult by just looking at the communication of the malware with other servers on the internet. Hive provides a covert communications platform for a whole range of CIA malware to send exfiltrated information to CIA servers and to receive new instructions from operators at the CIA.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Hive can serve multiple operations using multiple implants on target computers. Each operation anonymously registers at least one cover domain (e.g. &#34;perfectly-boring-looking-domain.com&#34;) for its own use. The server running the domain website is rented from commercial hosting providers as a VPS (virtual private server) and its software is customized according to CIA specifications. These servers are the public-facing side of the CIA back-end infrastructure and act as a relay for HTTP(S) traffic over a VPN connection to a &#34;hidden&#34; CIA server called &#39;Blot&#39;. source: &lt;a href=&#34;https://wikileaks.org/vault8/&#34;&gt;https://wikileaks.org/vault8/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>lmarzen/esp32-weather-epd</title>
    <updated>2023-02-01T01:31:44Z</updated>
    <id>tag:github.com,2023-02-01:/lmarzen/esp32-weather-epd</id>
    <link href="https://github.com/lmarzen/esp32-weather-epd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A low-power E-Paper weather display powered by an ESP32 microcontroller. Utilizes the OpenWeatherMap API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32 E-Paper Weather Display&lt;/h1&gt; &#xA;&lt;p&gt;This is a weather display powered by a wifi-enabled ESP32 microcontroller and a 7.5in E-Paper (aka E-ink) display. Current and forecasted weather data is obtained from the OpenWeatherMap API. A sensor provides the display with accurate indoor temperature and humidity.&lt;/p&gt; &#xA;&lt;p&gt;The project draws ~14μA when sleeping and an estimated average of ~83mA during its ~10s wake period. The display can be configured to update as frequently as desired. When the refresh interval is set to 30 minutes, the device will run for &amp;gt;6 monthes on a single 5000mAh battery. The project displays accurate battery life percentage and can be recharged via a USB-C cable connected to wall-adapter or computer.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/assembled-demo-raleigh-front.jpg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/assembled-demo-raleigh-side.jpg&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/assembled-demo-raleigh-back.jpg&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/assembled-demo-bottom-cover.jpg&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/assembled-demo-bottom-cover-removed.jpg&#34; width=&#34;49%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;I made a small stand for mine by hollowing out a piece of wood from the bottom. On the back I used a short USB extension cable so that I could charge the battery without needing to remove the components from the stand. I also wired a small reset button, so that I can refresh the display manually. Additionally, I 3d printed a cover for the bottom which is held on by magnets. The E-paper screen is very thin so I decided to use a thin piece of acrylic to support it.&lt;/p&gt; &#xA;&lt;p&gt;There are configuration options for everything from location, time/date formats, units, and language to air quality index scale and hourly outlook graph bounds.&lt;/p&gt; &#xA;&lt;p&gt;The hourly outlook graph (bottom right) shows a line that indicates temperature and shaded bars that indicate probability of precipitation.&lt;/p&gt; &#xA;&lt;p&gt;Here are two examples utilizing various different configuration options:&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/demo-new-york.jpg&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/demo-london.jpg&#34; width=&#34;49%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Setup Guide&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;p&gt;7.5inch (800×480) E-Ink Display w/ HAT for Raspberry Pi, SPI interface&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Advantages of E-Paper&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ultra Low Power Consumption - E-Paper (or E-Ink) displays are ideal for low-power applications that do not require frequent display refreshes. E-Paper displays only draw power when refreshing the display and do not have a backlight. Images will remain on the screen even when power is removed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Limitations of E-Paper:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Colors - E-Paper has traditionally been limited to just black and white, but in recent years 3-color E-Paper screens have started showing up.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Refresh Times and Ghosting - E-Paper displays are highly susceptible to ghosting effects if refreshed too quickly. To avoid this, E-Paper displays often take a few seconds to refresh(4s for the unit used in this project) and will alternate between black and white a few times, which can be distracting.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.waveshare.com/product/7.5inch-e-paper-hat.htm&#34;&gt;https://www.waveshare.com/product/7.5inch-e-paper-hat.htm&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FireBeetle 2 ESP32-E Microcontroller&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Why the ESP32?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Onboard WiFi.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;520kB of RAM and 4MB of FLASH. Enough to store lots of icons and fonts.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Low power consumption.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Small size, many small development boards available.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why the FireBeetle 2 ESP32-E&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Drobot&#39;s FireBeetle ESP32 models are optimized for low-power consumption (&lt;a href=&#34;https://diyi0t.com/reduce-the-esp32-power-consumption/&#34;&gt;https://diyi0t.com/reduce-the-esp32-power-consumption/&lt;/a&gt;). The Drobot&#39;s FireBeetle 2 ESP32-E variant offers USB-C, but older versions of the board with Mirco-USB would work just fine too.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Firebeelte ESP32 models include onboard charging circuitry for a 3.7v lithium-ion(LiPo) battery.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;FireBeetle ESP32 models include onboard circuitry to monitor battery voltage of a battery connected to its JST-PH2.0 connector.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dfrobot.com/product-2195.html&#34;&gt;https://www.dfrobot.com/product-2195.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BME280 - Pressure, Temperature, and Humidity Sensor&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Provides accurate indoor temperature and humidity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Much faster than the DHT22, which requires a 2-second wait before reading temperature and humidity samples.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3.7V Lipo Battery w/ 2 Pin JST Connector&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Size is up to you. I used a 10000mah battery so that the device can operate on a single charge for &amp;gt;1 year.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The battery can be charged by plugging the FireBeetle ESP32 into the wall via the USB-C connector while the battery is plugged into the ESP32&#39;s JST connector.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; The polarity of JST-PH2.0 connectors is not standardized! You may need to swap order of the wires in the connector.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wiring&lt;/h3&gt; &#xA;&lt;p&gt;Pin connections are defined in config.cpp.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the FireBeetle 2 ESP32-E, you can use the connections I used or change them how you would like.&lt;/p&gt; &#xA;&lt;p&gt;The E-Paper Driver Hat has two physical switches that must be set correctly for the display to work.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Display Config: Set switch to position B.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interface Config: Set switch to position 0.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/showcase/demo-tucson.jpg&#34; alt=&#34;tucson&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration, Compilation, and Upload&lt;/h3&gt; &#xA;&lt;p&gt;PlatformIO for VSCode is used for managing dependencies, code compilation, and upload to ESP32.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository or download and extract the .zip.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install VSCode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow these instructions to install the PlatformIO extension for VSCode: &lt;a href=&#34;https://platformio.org/install/ide?install=vscode&#34;&gt;https://platformio.org/install/ide?install=vscode&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the project in VSCode.&lt;/p&gt; &lt;p&gt;a. File &amp;gt; Open Folder...&lt;/p&gt; &lt;p&gt;b. Navigate to this project and select the folder called &#34;platformio&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Options.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Most configuration options are located in config.cpp with the a few in config.h. Language options can also be found in lang_en_us.cpp.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Important settings to configure in config.cpp:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;WiFi credentials (ssid, password).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Open Weather Map API key (it&#39;s free, see next section for important notes about obtaining an API key).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Latitude and longitude.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Time and date formats.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Sleep duration.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Pin connections for E-Paper (SPI), BME280 (I2C), and battery voltage (ADC).&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Important settings to configure in config.h:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Units (Metric or Imperial).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Comments explain each option in detail.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and Upload Code.&lt;/p&gt; &lt;p&gt;a. Connect ESP32 to your computer via USB.&lt;/p&gt; &lt;p&gt;b. Click the upload arrow along the bottom of the VSCode window. (Should say &#34;PlatformIO: Upload&#34; if you hover over it.)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;PlatformIO will automatically download the required third-party libraries, compile, and upload the code. :)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You will not see this if you don&#39;t have the PlatformIO extension installed.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you are getting errors during the upload process, you may need to install drivers to allow you to upload code to the ESP32.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;OpenWeatherMap API Key&lt;/h3&gt; &#xA;&lt;p&gt;Sign up here to get an API key, it&#39;s free. &lt;a href=&#34;https://openweathermap.org/api&#34;&gt;https://openweathermap.org/api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project will make calls to 2 different APIs (&#34;One Call&#34; and &#34;Air Pollution&#34;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; OpenWeatherMap One Call 2.5 API has been deprecated for all new free users (accounts created after Summer 2022). Fortunately, you can make 1,000 calls/day to the One Call 3.0 API for free by following the steps below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have an account that was created before Summer 2022 you can simply use the One Call 2.5 API by changing &lt;code&gt;OWM_ONECALL_VERSION = &#34;2.5&#34;;&lt;/code&gt; in config.cpp.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, the One Call API 3.0 is included in the &#34;One Call by Call&#34; subscription only. This separate subscription includes 1,000 calls/day for free and allows you to pay only for the number of API calls made to this product.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here’s how to subscribe and avoid any credit card changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://home.openweathermap.org/subscriptions/billing_info/onecall_30/base?key=base&amp;amp;service=onecall_30&#34;&gt;https://home.openweathermap.org/subscriptions/billing_info/onecall_30/base?key=base&amp;amp;service=onecall_30&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions to complete the subscription.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://home.openweathermap.org/subscriptions&#34;&gt;https://home.openweathermap.org/subscriptions&lt;/a&gt; and set the &#34;Calls per day (no more than)&#34; to 1,000. This ensures you will never overrun the free calls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;My work is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt; with tools/fonts/icons whose licenses are as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gnu.org/software/freefont/&#34;&gt;GNU FreeFont: FreeSans&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenType Font (.otf)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit-GFX-Library/tree/master/fontconvert&#34;&gt;Adafruit-GFX-Library: fontconvert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/fonts/fontconvert/license.txt&#34;&gt;BSD License&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CLI tool for preprocessing fonts to be used with the Adafruit_GFX Arduino library.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/erikflowers/weather-icons&#34;&gt;Weather Icons&lt;/a&gt; (&#39;wi-**.svg&#39;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://scripts.sil.org/OFL&#34;&gt;SIL OFL 1.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The vast majority of the icons used in this project.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Other Icons (.svg)&lt;/td&gt; &#xA;   &lt;td&gt;Varies, please see &lt;a href=&#34;https://raw.githubusercontent.com/lmarzen/esp32-weather-epd/main/icons/README&#34;&gt;icons/README&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Other icons were collected from many different sources (too many to list here)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>