<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-29T01:29:17Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CDSoft/luax</title>
    <updated>2024-05-29T01:29:17Z</updated>
    <id>tag:github.com,2024-05-29:/CDSoft/luax</id>
    <link href="https://github.com/CDSoft/luax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;luax is a Lua interpreter and REPL based on Lua 5.4, augmented with some useful packages. It is also a &#34;compiler&#34; that produces standalone executables from Lua scripts.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/luax-banner.svg?sanitize=true&#34; style=&#34;width:100.0%&#34;&gt; &#xA;&lt;h1&gt;Lua eXtended&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; is a Lua interpreter and REPL based on Lua 5.4, augmented with some useful packages. &lt;code&gt;luax&lt;/code&gt; can also produce executable scripts from Lua scripts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; runs on several platforms with no dependency:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (x86_64, aarch64)&lt;/li&gt; &#xA; &lt;li&gt;MacOS (x86_64, aarch64)&lt;/li&gt; &#xA; &lt;li&gt;Windows (x86_64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; can compile scripts from and to any of these platforms. It can produce scripts that can run everywhere Lua or LuaX is installed as well as standalone executables containing the LuaX runtime and the Lua scripts. The target platform can be explicitly specified to cross-compile[^1] scripts for a supported platform.&lt;/p&gt; &#xA;&lt;h2&gt;Getting in touch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdelord.fr/luax&#34;&gt;cdelord.fr/luax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CDSoft/luax&#34;&gt;github.com/CDSoft/luax&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt;: to compile LuaX using the LuaX Ninja file&lt;/li&gt; &#xA; &lt;li&gt;C compiler (&lt;code&gt;cc&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;, …): to generate the Ninja file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;h3&gt;Quick compilation&lt;/h3&gt; &#xA;&lt;p&gt;The script &lt;code&gt;bootstrap.sh&lt;/code&gt; installs &lt;code&gt;ninja&lt;/code&gt;, &lt;code&gt;zig&lt;/code&gt; and compiles LuaX. Once done, LuaX can be installed with &lt;code&gt;ninja install&lt;/code&gt;. &lt;code&gt;git&lt;/code&gt; must already be installed, which is likely to be the case if LuaX has been cloned with &lt;code&gt;git&lt;/code&gt;…&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/CDSoft/luax&#xA;$ cd luax&#xA;$ ./bootstrap.sh&#xA;$ ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this fails, please try a manual compilation. Contributions on non supported platforms are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Manual compilation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; is written in C and Lua. The build system uses Ninja and Zig (automatically downloaded by the Ninja file).&lt;/p&gt; &#xA;&lt;p&gt;Just download &lt;code&gt;luax&lt;/code&gt; (&lt;a href=&#34;https://github.com/CDSoft/luax&#34;&gt;https://github.com/CDSoft/luax&lt;/a&gt;), generate &lt;code&gt;build.ninja&lt;/code&gt; and run &lt;code&gt;ninja&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/CDSoft/luax&#xA;$ cd luax&#xA;$ ninja -f bootstrap.ninja  # compile Lua and generate build.ninja&#xA;$ ninja             # compile LuaX&#xA;$ ninja test        # run tests&#xA;$ ninja doc         # generate LuaX documentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;ninja&lt;/code&gt; will download a Zig compiler.&lt;/p&gt; &#xA;&lt;p&gt;If the bootstrap stage fails, you can try to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;use another C compiler: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CC=gcc ninja -f bootstrap.ninja&lt;/code&gt; to compile Lua with &lt;code&gt;gcc&lt;/code&gt; instead of &lt;code&gt;cc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CC=clang ninja -f bootstrap.ninja&lt;/code&gt; to compile Lua with &lt;code&gt;clang&lt;/code&gt; instead of &lt;code&gt;cc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;…&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;or install Lua and generate &lt;code&gt;build.ninja&lt;/code&gt; manually: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt install lua&lt;/code&gt;, &lt;code&gt;dnf install lua&lt;/code&gt;, …&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lua tools/bang.lua&lt;/code&gt; to generate &lt;code&gt;build.lua&lt;/code&gt; with the Lua interpreter provided by your OS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Compilation options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- fast&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optimized for speed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- small&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optimized for size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Debug symbols kept, not optimized&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- san&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compiled with ASan and UBSan (implies clang)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- zig&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compile LuaX with Zig&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- gcc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compile LuaX with gcc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bang -- clang&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compile LuaX with clang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;bang&lt;/code&gt; must be run before &lt;code&gt;ninja&lt;/code&gt; to change the compilation options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lua tools/bang.lua&lt;/code&gt; can be used instead of &lt;a href=&#34;https://cdelord.fr/bang&#34;&gt;bang&lt;/a&gt; if it is not installed.&lt;/p&gt; &#xA;&lt;p&gt;The default compilation options are &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;zig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Zig is downloaded by the ninja file. gcc and clang must be already installed.&lt;/p&gt; &#xA;&lt;h3&gt;Compilation in debug mode&lt;/h3&gt; &#xA;&lt;p&gt;LuaX can be compiled in debug mode (less optimization, debug symbols kept in the binaries). With the &lt;code&gt;san&lt;/code&gt; option, the tests are executed with &lt;a href=&#34;https://clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;ASan&lt;/a&gt; and &lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UBSan&lt;/a&gt;. They run slower but this helps finding tricky bugs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/CDSoft/luax&#xA;$ cd luax&#xA;$ tools/bang.lua -- debug san # generate build.ninja in debug mode with sanitizers&#xA;$ ninja                       # compile LuaX&#xA;$ ninja test                  # run tests on the host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cross-compilation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; can compile scripts and link them to precompiled libraries for all supported targets.&lt;/p&gt; &#xA;&lt;p&gt;E.g.: to produce an executable containing the LuaX runtime for the current host and &lt;code&gt;hello.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ luax compile -t native -o hello hello.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.: to produce an executable containing the LuaX runtime for &lt;code&gt;linux-x86_64-musl&lt;/code&gt; and &lt;code&gt;hello.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ luax compile -t linux-x86_64-musl -o hello hello.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.: to produce an executable with the compiled Lua bytecode with no debug information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ luax compile -s -t linux-x86_64-musl -o hello hello.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;luax compile&lt;/code&gt; can compile Lua scripts to Lua bytecode. If scripts are large they will start quickly but will run as fast as the original Lua scripts.&lt;/p&gt; &#xA;&lt;h2&gt;Precompiled LuaX binaries&lt;/h2&gt; &#xA;&lt;p&gt;In case precompiled binaries are needed (GNU/Linux, MacOS, Windows), some can be found at &lt;a href=&#34;http://cdelord.fr/hey&#34;&gt;cdelord.fr/hey&lt;/a&gt;. These archives contain LuaX as well as some other softwares more or less related to LuaX.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: There are Linux binaries linked with musl and glibc. The musl binaries are platform independent but can not load shared libraries. The glibc binaries can load shared libraries but may depend on some specific glibc versions on the host.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ninja install                 # install luax to ~/.local/bin and ~/.local/lib&#xA;$ PREFIX=/usr ninja install     # install luax to /usr/bin and /usr/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; is a single autonomous executable. It does not need to be installed and can be copied anywhere you want.&lt;/p&gt; &#xA;&lt;h3&gt;LuaX artifacts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ninja install&lt;/code&gt; installs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/bin/luax&lt;/code&gt;: LuaX binary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/bin/luax.lua&lt;/code&gt;: a pure Lua REPL reimplementing some LuaX libraries, usable in any Lua 5.4 interpreter (e.g.: lua, pandoc lua, …)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/bin/luax-pandoc.lua&lt;/code&gt;: LuaX run in a Pandoc Lua interpreter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/lib/libluax.so&lt;/code&gt;: Linux LuaX shared libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/lib/libluax.dylib&lt;/code&gt;: MacOS LuaX shared libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/lib/libluax.dll&lt;/code&gt;: Windows LuaX shared libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PREFIX/lib/luax.lua&lt;/code&gt;: a pure Lua reimplementation of some LuaX libraries, usable in any Lua 5.4 interpreter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; is very similar to &lt;code&gt;lua&lt;/code&gt; and adds more options to compile scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: luax [cmd] [options]&#xA;&#xA;Commands:&#xA;  &#34;help&#34;    (or &#34;-h&#34;)   Show this help&#xA;  &#34;version&#34; (or &#34;-v&#34;)   Show LuaX version&#xA;  &#34;run&#34;     (or none)   Run scripts&#xA;  &#34;compile&#34; (or &#34;c&#34;)    Compile scripts&#xA;  &#34;env&#34;                 Set LuaX environment variables&#xA;&#xA;&#34;run&#34; options:&#xA;  -e stat         execute string &#39;stat&#39;&#xA;  -i              enter interactive mode after executing &#39;script&#39;&#xA;  -l name         require library &#39;name&#39; into global &#39;name&#39;&#xA;  -l g=name       require library &#39;name&#39; into global &#39;g&#39;&#xA;  -l _=name       require library &#39;name&#39; (no global variable)&#xA;  -v              show version information&#xA;  --              stop handling options&#xA;  -               stop handling options and execute stdin&#xA;  script [args]   script to execute&#xA;&#xA;&#34;compile&#34; options:&#xA;  -t target       name of the targetted platform&#xA;  -t list         list available targets&#xA;  -o file         name the executable file to create&#xA;  -b              compile to Lua bytecode&#xA;  -s              emit bytecode without debug information&#xA;  -k key          script encryption key&#xA;  -q              quiet compilation (error messages only)&#xA;  scripts         scripts to compile&#xA;&#xA;Environment variables:&#xA;&#xA;  LUA_INIT_5_4, LUA_INIT&#xA;                code executed before handling command line&#xA;                options and scripts (not in compilation&#xA;                mode). When LUA_INIT_5_4 is defined,&#xA;                LUA_INIT is ignored.&#xA;&#xA;  PATH          PATH shall contain the bin directory where&#xA;                LuaX is installed&#xA;&#xA;  LUA_PATH      LUA_PATH shall point to the lib directory&#xA;                where the Lua implementation of LuaX&#xA;                lbraries are installed&#xA;&#xA;  LUA_CPATH     LUA_CPATH shall point to the lib directory&#xA;                where LuaX shared libraries are installed&#xA;&#xA;PATH, LUA_PATH and LUA_CPATH can be set in .bashrc or .zshrc&#xA;with « luax env ».&#xA;E.g.: eval $(luax env)&#xA;&#xA;« luax env » can also generate shell variables from a script.&#xA;E.g.: eval $(luax env script.lua)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When compiling scripts (options &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt;), the scripts shall contain tags (e.g.&amp;nbsp;in comments) showing how the script is used by LuaX:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--@MAIN&lt;/code&gt;: main script (must be unique)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--@LOAD&lt;/code&gt;: library that is &lt;code&gt;require&lt;/code&gt;’d before the main script is run and stored in a global variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--@LOAD=&amp;lt;global variable name&amp;gt;&lt;/code&gt;: as &lt;code&gt;--@LOAD&lt;/code&gt; but the module is stored in a global variable with the given name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--@LIB&lt;/code&gt;: library that must be explicitly &lt;code&gt;require&lt;/code&gt;’d by the main script&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--@LIB=&amp;lt;new module name&amp;gt;&lt;/code&gt;: library that is &lt;code&gt;require&lt;/code&gt;’d with &lt;code&gt;&amp;lt;new module name&amp;gt;&lt;/code&gt; instead of the source filename.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scripts without tags are classified using a simplistic heuristic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the last non empty line starts with &lt;code&gt;return&lt;/code&gt; then it is a library (as if it contained a &lt;code&gt;@LIB&lt;/code&gt; tag)&lt;/li&gt; &#xA; &lt;li&gt;otherwise it is the main script (as if it contained the &lt;code&gt;@MAIN&lt;/code&gt; tag).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This heuristic should work for most of the Lua scripts but explicit tags are recommended.&lt;/p&gt; &#xA;&lt;p&gt;LuaX can also embed files that are not Lua scripts. These files are embedded as Lua modules that return the file content as a string. In this case, the module name if the file name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note for Windows users&lt;/strong&gt;: since Windows does not support shebangs, a script &lt;code&gt;script&lt;/code&gt; shall be explicitly launched with &lt;code&gt;luax&lt;/code&gt; (e.g.: &lt;code&gt;luax script&lt;/code&gt;). If &lt;code&gt;script&lt;/code&gt; is not found, it is searched in the installation directory of &lt;code&gt;luax&lt;/code&gt; or in &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Compilation (standalone executable script for LuaX)&#xA;$ luax compile -o executable main.lua lib1.lua lib2.lua&#xA;$ ./executable      # equivalent to luax main.lua&#xA;&#xA;# Compilation for Lua&#xA;$ luax compile -o executable -t lua main.lua lib1.lua lib2.lua&#xA;$ ./executable      # equivalent to lua main.lua&#xA;&#xA;# Compilation for Pandoc Lua&#xA;$ luax compile -o executable -t pandoc main.lua lib1.lua lib2.lua&#xA;$ ./executable      # equivalent to pandoc lua main.lua&#xA;&#xA;# Available targets&#xA;$ luax compile -t list&#xA;luax&#xA;lua&#xA;pandoc&#xA;native&#xA;linux-x86_64&#xA;linux-x86_64-musl&#xA;linux-aarch64&#xA;linux-aarch64-musl&#xA;macos-x86_64&#xA;macos-aarch64&#xA;windows-x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Built-in modules&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;luax&lt;/code&gt; runtime comes with a few builtin modules.&lt;/p&gt; &#xA;&lt;p&gt;Some modules are heavily inspired by &lt;a href=&#34;http://cdelord.fr/bl&#34;&gt;BonaLuna&lt;/a&gt; and &lt;a href=&#34;http://cdelord.fr/lapp&#34;&gt;lapp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/repl.md&#34;&gt;LuaX interactive usage&lt;/a&gt;: improved Lua REPL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/package.md&#34;&gt;package&lt;/a&gt;: modified Lua package &lt;code&gt;package&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/debug.md&#34;&gt;debug&lt;/a&gt;: modified Lua package &lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/import.md&#34;&gt;import&lt;/a&gt;: import Lua scripts to user table instead of &lt;code&gt;_G&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/F.md&#34;&gt;F&lt;/a&gt;: functional programming inspired functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/fs.md&#34;&gt;fs&lt;/a&gt;: file system management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/sh.md&#34;&gt;sh&lt;/a&gt;: shell command execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/mathx.md&#34;&gt;mathx&lt;/a&gt;: complete math library for Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/imath.md&#34;&gt;imath&lt;/a&gt;: arbitrary precision integer and rational arithmetic library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/qmath.md&#34;&gt;qmath&lt;/a&gt;: rational number library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/complex.md&#34;&gt;complex&lt;/a&gt;: math library for complex numbers based on C99&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/ps.md&#34;&gt;ps&lt;/a&gt;: Process management module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/sys.md&#34;&gt;sys&lt;/a&gt;: System module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/term.md&#34;&gt;term&lt;/a&gt;: Terminal manipulation module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/crypt.md&#34;&gt;crypt&lt;/a&gt;: cryptography module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/lz4.md&#34;&gt;lz4&lt;/a&gt;: Extremely Fast Compression algorithm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/lpeg.md&#34;&gt;lpeg&lt;/a&gt;: Parsing Expression Grammars For Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/luasocket.md&#34;&gt;luasocket&lt;/a&gt;: Network support for the Lua language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/argparse.md&#34;&gt;argparse&lt;/a&gt;: Feature-rich command line parser for Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/serpent.md&#34;&gt;serpent&lt;/a&gt;: Lua serializer and pretty printer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/cbor.md&#34;&gt;cbor&lt;/a&gt;: pure Lua implementation of the CBOR&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/linenoise.md&#34;&gt;linenoise&lt;/a&gt;: A small, portable GNU readline replacement with UTF-8 support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/json.md&#34;&gt;json&lt;/a&gt;: JSON Module for Lua&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shared libraries&lt;/h2&gt; &#xA;&lt;p&gt;LuaX is also available as a shared library. This shared library is a Lua module that can be loaded with &lt;code&gt;require&lt;/code&gt;. It provides the same modules than the LuaX executable and can be used by a regular Lua interpreter (e.g.: lua, pandoc, …).&lt;/p&gt; &#xA;&lt;p&gt;E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lua -l libluax&#xA;Lua 5.4.7  Copyright (C) 1994-2024 Lua.org, PUC-Rio&#xA;&amp;gt; F = require &#34;F&#34;&#xA;&amp;gt; F.range(100):sum()&#xA;5050&#xA;&amp;gt; F.show({x=1, y=2})&#xA;{x=1, y=2}&#xA;&amp;gt; F.show({x=1, y=2}, {indent=4})&#xA;{&#xA;    x = 1,&#xA;    y = 2,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pure Lua modules&lt;/h2&gt; &#xA;&lt;p&gt;LuaX modules also provide pure Lua implementations (no LuaX dependency). The script &lt;code&gt;lib/luax.lua&lt;/code&gt; can be reused in pure Lua programs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CDSoft/luax/master/doc/luax.lua.md&#34;&gt;luax.lua&lt;/a&gt;: LuaX modules reimplemented in pure Lua (except LuaSocket and lpeg)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;luax is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;luax is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with luax.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&#xA;For further information about luax you can visit&#xA;http://cdelord.fr/luax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;luax&lt;/code&gt; uses other third party softwares:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt;&lt;/strong&gt;: General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software. (&lt;a href=&#34;https://github.com/ziglang/zig/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;Lua 5.4&lt;/a&gt;&lt;/strong&gt;: Copyright (C) 1994-2023 Lua.org, PUC-Rio (&lt;a href=&#34;http://www.lua.org/license.html&#34;&gt;MIT license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.inf.puc-rio.br/~roberto/lpeg/&#34;&gt;Lpeg&lt;/a&gt;&lt;/strong&gt;: Parsing Expression Grammars For Lua (&lt;a href=&#34;http://www.lua.org/license.html&#34;&gt;MIT license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/diegonehab/luasocket&#34;&gt;luasocket&lt;/a&gt;&lt;/strong&gt;: Network support for the Lua language (&lt;a href=&#34;https://github.com/diegonehab/luasocket/raw/master/LICENSE&#34;&gt;LuaSocket 3.0 license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/pkulchenko/serpent&#34;&gt;serpent&lt;/a&gt;&lt;/strong&gt;: Lua serializer and pretty printer. (&lt;a href=&#34;https://github.com/pkulchenko/serpent/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lz4/lz4&#34;&gt;LZ4&lt;/a&gt;&lt;/strong&gt;: Extremely Fast Compression algorithm (&lt;a href=&#34;https://github.com/lz4/lz4/raw/dev/lib/LICENSE&#34;&gt;License&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mpeterv/argparse&#34;&gt;Argparse&lt;/a&gt;&lt;/strong&gt;: a feature-rich command line parser for Lua (&lt;a href=&#34;https://github.com/mpeterv/argparse/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/yhirose/linenoise/tree/utf8-support&#34;&gt;Linenoise&lt;/a&gt;&lt;/strong&gt;: A minimal, zero-config, BSD licensed, readline replacement (&lt;a href=&#34;https://github.com/antirez/linenoise/raw/master/LICENSE&#34;&gt;BSD license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://dkolf.de/dkjson-lua/&#34;&gt;dkjson.lua&lt;/a&gt;&lt;/strong&gt;: JSON Module for Lua (&lt;a href=&#34;http://www.lua.org/license.html&#34;&gt;MIT license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.zash.se/lua-cbor.html&#34;&gt;CBOR&lt;/a&gt;&lt;/strong&gt;: pure Lua implementation of the CBOR (&lt;a href=&#34;https://code.zash.se/lua-cbor/file/tip/COPYING&#34;&gt;License&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: &lt;code&gt;luax&lt;/code&gt; uses &lt;code&gt;zig&lt;/code&gt; to link the LuaX runtime with the Lua scripts. The Lua scripts are actually compiled to Lua bytecode. &lt;code&gt;luax&lt;/code&gt; produces executables that do not require LuaX to be installed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pytorch/cpuinfo</title>
    <updated>2024-05-29T01:29:17Z</updated>
    <id>tag:github.com,2024-05-29:/pytorch/cpuinfo</id>
    <link href="https://github.com/pytorch/cpuinfo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CPU INFOrmation library (x86/x86-64/ARM/ARM64, Linux/Windows/Android/macOS/iOS)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CPU INFOrmation library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pytorch/cpuinfo/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD%202--Clause%20%22Simplified%22%20License-blue.svg?sanitize=true&#34; alt=&#34;BSD (2 clause) License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/pytorch/cpuinfo&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/pytorch/cpuinfo.svg?sanitize=true&#34; alt=&#34;Linux/Mac build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/MaratDukhan/cpuinfo/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/g5khy9nr0xm458t7/branch/master?svg=true&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cpuinfo is a library to detect essential for performance optimization information about host CPU.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; availability: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux, Windows, macOS, Android, and iOS operating systems&lt;/li&gt; &#xA;   &lt;li&gt;x86, x86-64, ARM, and ARM64 architectures&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modern &lt;strong&gt;C/C++ interface&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thread-safe&lt;/li&gt; &#xA;   &lt;li&gt;No memory allocation after initialization&lt;/li&gt; &#xA;   &lt;li&gt;No exceptions thrown&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Detection of &lt;strong&gt;supported instruction sets&lt;/strong&gt;, up to AVX512 (x86) and ARMv8.3 extensions&lt;/li&gt; &#xA; &lt;li&gt;Detection of SoC and core information: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Processor (SoC) name&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Vendor and &lt;strong&gt;microarchitecture&lt;/strong&gt; for each CPU core&lt;/li&gt; &#xA;   &lt;li&gt;ID (&lt;strong&gt;MIDR&lt;/strong&gt; on ARM, &lt;strong&gt;CPUID&lt;/strong&gt; leaf 1 EAX value on x86) for each CPU core&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Detection of &lt;strong&gt;cache information&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cache type (instruction/data/unified), size and line size&lt;/li&gt; &#xA;   &lt;li&gt;Cache associativity&lt;/li&gt; &#xA;   &lt;li&gt;Cores and logical processors (hyper-threads) sharing the cache&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Detection of &lt;strong&gt;topology information&lt;/strong&gt; (relative between logical processors, cores, and processor packages)&lt;/li&gt; &#xA; &lt;li&gt;Well-tested &lt;strong&gt;production-quality&lt;/strong&gt; code: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;60+ mock tests based on data from real devices&lt;/li&gt; &#xA;   &lt;li&gt;Includes work-arounds for common bugs in hardware and OS kernels&lt;/li&gt; &#xA;   &lt;li&gt;Supports systems with heterogenous cores, such as &lt;strong&gt;big.LITTLE&lt;/strong&gt; and Max.Med.Min&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Permissive &lt;strong&gt;open-source&lt;/strong&gt; license (Simplified BSD)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Log processor name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cpuinfo_initialize();&#xA;printf(&#34;Running on %s CPU\n&#34;, cpuinfo_get_package(0)-&amp;gt;name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect if target is a 32-bit or 64-bit ARM system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#if CPUINFO_ARCH_ARM || CPUINFO_ARCH_ARM64&#xA;    /* 32-bit ARM-specific code here */&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if the host CPU supports ARM NEON&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cpuinfo_initialize();&#xA;if (cpuinfo_has_arm_neon()) {&#xA;    neon_implementation(arguments);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if the host CPU supports x86 AVX&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cpuinfo_initialize();&#xA;if (cpuinfo_has_x86_avx()) {&#xA;    avx_implementation(arguments);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if the thread runs on a Cortex-A53 core&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cpuinfo_initialize();&#xA;switch (cpuinfo_get_current_core()-&amp;gt;uarch) {&#xA;    case cpuinfo_uarch_cortex_a53:&#xA;        cortex_a53_implementation(arguments);&#xA;        break;&#xA;    default:&#xA;        generic_implementation(arguments);&#xA;        break;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the size of level 1 data cache on the fastest core in the processor (e.g. big core in big.LITTLE ARM systems):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cpuinfo_initialize();&#xA;const size_t l1_size = cpuinfo_get_processor(0)-&amp;gt;cache.l1d-&amp;gt;size;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pin thread to cores sharing L2 cache with the current core (Linux or Android)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cpuinfo_initialize();&#xA;cpu_set_t cpu_set;&#xA;CPU_ZERO(&amp;amp;cpu_set);&#xA;const struct cpuinfo_cache* current_l2 = cpuinfo_get_current_processor()-&amp;gt;cache.l2;&#xA;for (uint32_t i = 0; i &amp;lt; current_l2-&amp;gt;processor_count; i++) {&#xA;    CPU_SET(cpuinfo_get_processor(current_l2-&amp;gt;processor_start + i)-&amp;gt;linux_id, &amp;amp;cpu_set);&#xA;}&#xA;pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &amp;amp;cpu_set);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use via pkg-config&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to provide your project&#39;s build environment with the necessary compiler and linker flags in a portable manner, the library by default when built enables &lt;code&gt;CPUINFO_BUILD_PKG_CONFIG&lt;/code&gt; and will generate a &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt; manifest (&lt;em&gt;libcpuinfo.pc&lt;/em&gt;). Here are several examples of how to use it:&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;If you used your distro&#39;s package manager to install the library, you can verify that it is available to your build environment like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pkg-config --cflags --libs libcpuinfo&#xA;-I/usr/include/x86_64-linux-gnu/ -L/lib/x86_64-linux-gnu/ -lcpuinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have installed the library from source into a non-standard prefix, pkg-config may need help finding it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ PKG_CONFIG_PATH=&#34;/home/me/projects/cpuinfo/prefix/lib/pkgconfig/:$PKG_CONFIG_PATH&#34; pkg-config --cflags --libs libcpuinfo&#xA;-I/home/me/projects/cpuinfo/prefix/include -L/home/me/projects/cpuinfo/prefix/lib -lcpuinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Autotools&lt;/h3&gt; &#xA;&lt;p&gt;To &lt;a href=&#34;https://autotools.io/pkgconfig/pkg_check_modules.html&#34;&gt;use&lt;/a&gt; with the GNU Autotools include the following snippet in your project&#39;s &lt;code&gt;configure.ac&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;# CPU INFOrmation library...&#xA;PKG_CHECK_MODULES(&#xA;    [libcpuinfo], [libcpuinfo], [],&#xA;    [AC_MSG_ERROR([libcpuinfo missing...])])&#xA;YOURPROJECT_CXXFLAGS=&#34;$YOURPROJECT_CXXFLAGS $libcpuinfo_CFLAGS&#34;&#xA;YOURPROJECT_LIBS=&#34;$YOURPROJECT_LIBS $libcpuinfo_LIBS&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;p&gt;To use with Meson you just need to add &lt;code&gt;dependency(&#39;libcpuinfo&#39;)&lt;/code&gt; as a dependency for your executable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-meson&#34;&gt;project(&#xA;    &#39;MyCpuInfoProject&#39;,&#xA;    &#39;cpp&#39;,&#xA;    meson_version: &#39;&amp;gt;=0.55.0&#39;&#xA;)&#xA;&#xA;executable(&#xA;    &#39;MyCpuInfoExecutable&#39;,&#xA;    sources: &#39;main.cpp&#39;,&#xA;    dependencies: dependency(&#39;libcpuinfo&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;This project can be built using &lt;a href=&#34;https://bazel.build/install&#34;&gt;Bazel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also use this library as a dependency to your Bazel project. Add to the &lt;code&gt;WORKSPACE&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;load(&#34;@bazel_tools//tools/build_defs/repo:git.bzl&#34;, &#34;git_repository&#34;)&#xA;&#xA;git_repository(&#xA;    name = &#34;org_pytorch_cpuinfo&#34;,&#xA;    branch = &#34;master&#34;,&#xA;    remote = &#34;https://github.com/Vertexwahn/cpuinfo.git&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to your &lt;code&gt;BUILD&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cc_binary(&#xA;    name = &#34;cpuinfo_test&#34;,&#xA;    srcs = [&#xA;        # ...&#xA;    ],&#xA;    deps = [&#xA;        &#34;@org_pytorch_cpuinfo//:cpuinfo&#34;,&#xA;    ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;To use with CMake use the &lt;a href=&#34;https://cmake.org/cmake/help/latest/module/FindPkgConfig.html&#34;&gt;FindPkgConfig&lt;/a&gt; module. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.6)&#xA;project(&#34;MyCpuInfoProject&#34;)&#xA;&#xA;find_package(PkgConfig)&#xA;pkg_check_modules(CpuInfo REQUIRED IMPORTED_TARGET libcpuinfo)&#xA;&#xA;add_executable(${PROJECT_NAME} main.cpp)&#xA;target_link_libraries(${PROJECT_NAME} PkgConfig::CpuInfo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;p&gt;To use within a vanilla makefile, you can call pkg-config directly to supply compiler and linker flags using shell substitution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;CFLAGS=-g3 -Wall -Wextra -Werror ...&#xA;LDFLAGS=-lfoo ...&#xA;...&#xA;CFLAGS+= $(pkg-config --cflags libcpuinfo)&#xA;LDFLAGS+= $(pkg-config --libs libcpuinfo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exposed information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Processor (SoC) name&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Microarchitecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Usable instruction sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CPU frequency&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cache &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Size&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Associativity&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Line size&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Number of partitions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flags (unified, inclusive, complex hash function)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Topology (logical processors that share this cache level)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; TLB &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Number of entries&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Associativity&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Covered page types (instruction, data)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Covered page sizes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Topology information &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Logical processors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cores&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Packages (sockets)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported environments:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Android &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86 ABI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86_64 ABI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; armeabi ABI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; armeabiv7-a ABI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; arm64-v8a ABI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;mips ABI&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;mips64 ABI&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86-64&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 32-bit ARM (ARMv5T and later)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM64&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; PowerPC64&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; iOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86 (iPhone simulator)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86-64 (iPhone simulator)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARMv7&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM64&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; macOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86-64&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM64 (Apple silicon)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86-64&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; arm64&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Processor (SoC) name detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaves 0x80000002–0x80000004 on x86/x86-64&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;/proc/cpuinfo&lt;/code&gt; on ARM&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;ro.chipname&lt;/code&gt;, &lt;code&gt;ro.board.platform&lt;/code&gt;, &lt;code&gt;ro.product.board&lt;/code&gt;, &lt;code&gt;ro.mediatek.platform&lt;/code&gt;, &lt;code&gt;ro.arch&lt;/code&gt; properties (Android)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using kernel log (&lt;code&gt;dmesg&lt;/code&gt;) on ARM Linux&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using Windows registry on ARM64 Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vendor and microarchitecture detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Intel-designed x86/x86-64 cores (up to Sunny Cove, Goldmont Plus, and Knights Mill)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AMD-designed x86/x86-64 cores (up to Puma/Jaguar and Zen 2)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; VIA-designed x86/x86-64 cores&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Other x86 cores (DM&amp;amp;P, RDC, Transmeta, Cyrix, Rise)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM-designed ARM cores (up to Cortex-A55, Cortex-A77, and Neoverse E1/V1/N2/V2)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Qualcomm-designed ARM cores (Scorpion, Krait, and Kryo)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nvidia-designed ARM cores (Denver and Carmel)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Samsung-designed ARM cores (Exynos)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Intel-designed ARM cores (XScale up to 3rd-gen)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apple-designed ARM cores (up to Lightning and Thunder)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cavium-designed ARM cores (ThunderX)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AppliedMicro-designed ARM cores (X-Gene)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Instruction set detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID (x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;/proc/cpuinfo&lt;/code&gt; on 32-bit ARM EABI (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using microarchitecture heuristics on (32-bit ARM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;FPSID&lt;/code&gt; and &lt;code&gt;WCID&lt;/code&gt; registers (32-bit ARM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;getauxval&lt;/code&gt; (Linux/ARM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;/proc/self/auxv&lt;/code&gt; (Android/ARM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using instruction probing on ARM (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using CPUID registers on ARM64 (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using IsProcessorFeaturePresent on ARM64 Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cache detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaf 0x00000002 (x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaf 0x00000004 (non-AMD x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using CPUID leaves 0x80000005-0x80000006 (AMD x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaf 0x8000001D (AMD x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;/proc/cpuinfo&lt;/code&gt; (Linux/pre-ARMv7)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using microarchitecture heuristics (ARM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using chipset name (ARM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;sysctlbyname&lt;/code&gt; (Mach)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using sysfs &lt;code&gt;typology&lt;/code&gt; directories (ARM/Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using sysfs &lt;code&gt;cache&lt;/code&gt; directories (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;GetLogicalProcessorInformationEx&lt;/code&gt; on ARM64 Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;TLB detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaf 0x00000002 (x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using CPUID leaves 0x80000005-0x80000006 and 0x80000019 (AMD x86/x86-64)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using microarchitecture heuristics (ARM)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Topology detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaf 0x00000001 on x86/x86-64 (legacy APIC ID)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using CPUID leaf 0x0000000B on x86/x86-64 (Intel APIC ID)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using CPUID leaf 0x8000001E on x86/x86-64 (AMD APIC ID)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;/proc/cpuinfo&lt;/code&gt; (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;host_info&lt;/code&gt; (Mach)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using &lt;code&gt;GetLogicalProcessorInformationEx&lt;/code&gt; (Windows)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using sysfs (Linux)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Using chipset name (ARM/Linux)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>null-luo/btrace</title>
    <updated>2024-05-29T01:29:17Z</updated>
    <id>tag:github.com,2024-05-29:/null-luo/btrace</id>
    <link href="https://github.com/null-luo/btrace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;btrace：binder_transaction+eBPF+Golang实现通用的Android APP动态行为追踪工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;btrace&lt;/h1&gt; &#xA;&lt;p&gt;btrace：binder_transaction+eBPF+Golang实现通用的Android APP动态行为追踪工具。&lt;/p&gt; &#xA;&lt;p&gt;方案说明：&lt;a href=&#34;https://bbs.kanxue.com/thread-281895.htm&#34;&gt;https://bbs.kanxue.com/thread-281895.htm&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>