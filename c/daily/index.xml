<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-08T01:31:29Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RIOT-OS/RIOT</title>
    <updated>2022-11-08T01:31:29Z</updated>
    <id>tag:github.com,2022-11-08:/RIOT-OS/RIOT</id>
    <link href="https://github.com/RIOT-OS/RIOT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RIOT - The friendly OS for IoT&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://ci.riot-os.org/nightlies.html#master&#34;&gt;&lt;img src=&#34;https://ci.riot-os.org/RIOT-OS/RIOT/master/latest/badge.svg?sanitize=true&#34; alt=&#34;Nightly CI status master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hil.riot-os.org/results/nightly/latest/overview&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CI-HiL-blue&#34; alt=&#34;Nightly HiL CI overview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RIOT-OS/RIOT/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/RIOT-OS/RIOT.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RIOT-OS/RIOT/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/RIOT-OS/RIOT&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doc.riot-os.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-API-informational.svg?sanitize=true&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RIOT-OS/RIOT/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-Wiki-informational.svg?sanitize=true&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/riot-os&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-%5Briot--os%5D-yellow&#34; alt=&#34;Stack Overflow questions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/RIOT_OS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/social-Twitter-informational.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#riot-os:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-Matrix-brightgreen.svg?sanitize=true&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RIOT-OS/RIOT/master/doc/doxygen/src/riot-logo.svg?sanitize=true&#34; width=&#34;66%&#34;&gt;&#xA; &lt;!--&#xA;                          ZZZZZZ&#xA;                        ZZZZZZZZZZZZ&#xA;                      ZZZZZZZZZZZZZZZZ&#xA;                     ZZZZZZZ     ZZZZZZ&#xA;                    ZZZZZZ        ZZZZZ&#xA;                    ZZZZZ          ZZZZ&#xA;                    ZZZZ           ZZZZZ&#xA;                    ZZZZ           ZZZZ&#xA;                    ZZZZ          ZZZZZ&#xA;                    ZZZZ        ZZZZZZ&#xA;                    ZZZZ     ZZZZZZZZ       777        7777       7777777777&#xA;              ZZ    ZZZZ   ZZZZZZZZ         777      77777777    77777777777&#xA;          ZZZZZZZ   ZZZZ  ZZZZZZZ           777     7777  7777       777&#xA;        ZZZZZZZZZ   ZZZZ    Z               777     777    777       777&#xA;       ZZZZZZ       ZZZZ                    777     777    777       777&#xA;      ZZZZZ         ZZZZ                    777     777    777       777&#xA;     ZZZZZ          ZZZZZ    ZZZZ           777     777    777       777&#xA;     ZZZZ           ZZZZZ    ZZZZZ          777     777    777       777&#xA;     ZZZZ           ZZZZZ     ZZZZZ         777     777    777       777&#xA;     ZZZZ           ZZZZ       ZZZZZ        777     777    777       777&#xA;     ZZZZZ         ZZZZZ        ZZZZZ       777     777    777       777&#xA;      ZZZZZZ     ZZZZZZ          ZZZZZ      777     7777777777       777&#xA;       ZZZZZZZZZZZZZZZ            ZZZZ      777      77777777        777&#xA;         ZZZZZZZZZZZ               Z&#xA;            ZZZZZ                                                           --&gt;&lt;/p&gt; &#xA;&lt;p&gt;The friendly Operating System for IoT!&lt;/p&gt; &#xA;&lt;p&gt;RIOT is a real-time multi-threading operating system that supports a range of devices that are typically found in the Internet of Things (IoT): 8-bit, 16-bit and 32-bit microcontrollers.&lt;/p&gt; &#xA;&lt;p&gt;RIOT is based on the following design principles: energy-efficiency, real-time capabilities, small memory footprint, modularity, and uniform API access, independent of the underlying hardware (this API offers partial POSIX compliance).&lt;/p&gt; &#xA;&lt;p&gt;RIOT is developed by an international open source community which is independent of specific vendors (e.g. similarly to the Linux community). RIOT is licensed with LGPLv2.1, a copyleft license which fosters indirect business models around the free open-source software platform provided by RIOT, e.g. it is possible to link closed-source code with the LGPL code.&lt;/p&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;p&gt;RIOT provides features including, but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a preemptive, tickless scheduler with priorities&lt;/li&gt; &#xA; &lt;li&gt;flexible memory management&lt;/li&gt; &#xA; &lt;li&gt;high resolution, long-term timers&lt;/li&gt; &#xA; &lt;li&gt;MTD abstraction layer&lt;/li&gt; &#xA; &lt;li&gt;File System integration&lt;/li&gt; &#xA; &lt;li&gt;support 200+ boards based on AVR, MSP430, ESP8266, ESP32, RISC-V, ARM7 and ARM Cortex-M&lt;/li&gt; &#xA; &lt;li&gt;the native port allows to run RIOT as-is on Linux and BSD. Multiple instances of RIOT running on a single machine can also be interconnected via a simple virtual Ethernet bridge or via a simulated IEEE 802.15.4 network (ZEP)&lt;/li&gt; &#xA; &lt;li&gt;IPv6&lt;/li&gt; &#xA; &lt;li&gt;6LoWPAN (RFC4944, RFC6282, and RFC6775)&lt;/li&gt; &#xA; &lt;li&gt;UDP&lt;/li&gt; &#xA; &lt;li&gt;RPL (storing mode, P2P mode)&lt;/li&gt; &#xA; &lt;li&gt;CoAP&lt;/li&gt; &#xA; &lt;li&gt;OTA updates via SUIT&lt;/li&gt; &#xA; &lt;li&gt;MQTT&lt;/li&gt; &#xA; &lt;li&gt;USB (device mode)&lt;/li&gt; &#xA; &lt;li&gt;Display / Touchscreen support&lt;/li&gt; &#xA; &lt;li&gt;CCN-Lite&lt;/li&gt; &#xA; &lt;li&gt;LoRaWAN&lt;/li&gt; &#xA; &lt;li&gt;UWB&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth (BLE) via &lt;a href=&#34;https://github.com/apache/mynewt-nimble&#34;&gt;NimBLE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GETTING RIOT&lt;/h2&gt; &#xA;&lt;p&gt;The most convenient way to get RIOT is to clone it via Git&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/RIOT-OS/RIOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will ensure that you get all the newest features and bug fixes with the caveat of an ever changing work environment.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer things more stable, you can download the source code of one of our quarter annual releases &lt;a href=&#34;https://github.com/RIOT-OS/RIOT/releases&#34;&gt;via Github&lt;/a&gt; as ZIP file or tarball. You can also checkout a release in a cloned Git repository using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git pull --tags&#xA;$ git checkout &amp;lt;YYYY.MM&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on our release cycle, check our &lt;a href=&#34;https://doc.riot-os.org/release-cycle.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GETTING STARTED&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to start the RIOT? Just follow our &lt;a href=&#34;https://doc.riot-os.org/index.html#the-quickest-start&#34;&gt;quickstart guide&lt;/a&gt; or try this &lt;a href=&#34;https://github.com/RIOT-OS/Tutorials/raw/master/README.md&#34;&gt;tutorial&lt;/a&gt;. For specific toolchain installation, follow instructions in the &lt;a href=&#34;https://doc.riot-os.org/getting-started.html&#34;&gt;getting started&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;The RIOT API itself can be built from the code using doxygen. The latest version of the documentation is uploaded daily to &lt;a href=&#34;https://doc.riot-os.org&#34;&gt;doc.riot-os.org&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FORUM&lt;/h2&gt; &#xA;&lt;p&gt;Do you have a question, want to discuss a new feature, or just want to present your latest project using RIOT? Come over to our &lt;a href=&#34;https://forum.riot-os.org&#34;&gt;forum&lt;/a&gt; and post to your hearts content.&lt;/p&gt; &#xA;&lt;h2&gt;CONTRIBUTE&lt;/h2&gt; &#xA;&lt;p&gt;To contribute something to RIOT, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/RIOT-OS/RIOT/master/CONTRIBUTING.md&#34;&gt;contributing document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;MAILING LISTS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RIOT commits: &lt;a href=&#34;https://lists.riot-os.org/mailman/listinfo/commits&#34;&gt;commits@riot-os.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github notifications: &lt;a href=&#34;https://lists.riot-os.org/mailman/listinfo/notifications&#34;&gt;notifications@riot-os.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most of the code developed by the RIOT community is licensed under the GNU Lesser General Public License (LGPL) version 2.1 as published by the Free Software Foundation.&lt;/li&gt; &#xA; &lt;li&gt;Some external sources, especially files developed by SICS are published under a separate license.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All code files contain licensing information.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the RIOT website:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.riot-os.org&#34;&gt;https://www.riot-os.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>4g3nt47/Striker</title>
    <updated>2022-11-08T01:31:29Z</updated>
    <id>tag:github.com,2022-11-08:/4g3nt47/Striker</id>
    <link href="https://github.com/4g3nt47/Striker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Command and Control (C2)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Striker C2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Striker&lt;/strong&gt; is a simple &lt;em&gt;Command and Control&lt;/em&gt; (C2) program.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54174043/199905391-d07651bb-e720-4b41-90ee-ec5401e979e8.png&#34; alt=&#34;Pasted image 20221022194999&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/54174043/199905117-2c6c7555-2210-461b-85f0-5d0062127f27.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is under active development. Most of the features are experimental, with more to come. Expect breaking changes.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A) Agents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native agents for linux and windows hosts.&lt;/li&gt; &#xA; &lt;li&gt;Self-contained, minimal python agent should you ever need it.&lt;/li&gt; &#xA; &lt;li&gt;HTTP(s) channels.&lt;/li&gt; &#xA; &lt;li&gt;Aynchronous tasks execution.&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple redirectors, and can fallback to others when active one goes down.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;B) Backend / Teamserver&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports multiple operators.&lt;/li&gt; &#xA; &lt;li&gt;Most features exposed through the REST API, making it easy to automate things.&lt;/li&gt; &#xA; &lt;li&gt;Uses web sockets for faster comms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;C) User Interface&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Smooth and reactive UI thanks to &lt;em&gt;Svelte&lt;/em&gt; and &lt;em&gt;SocketIO&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Easy to configure as it compiles into static HTML, JavaScript, and CSS files, which can be hosted with even the most basic web server you can find.&lt;/li&gt; &#xA; &lt;li&gt;Teamchat feature to communicate with other operators over text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing Striker&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repo;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/4g3nt47/Striker.git&#xA;$ cd Striker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The codebase is divided into 4 independent sections;&lt;/p&gt; &#xA;&lt;h3&gt;1. The C2 Server / Backend&lt;/h3&gt; &#xA;&lt;p&gt;This handles all server-side logic for both operators and agents. It is a &lt;code&gt;NodeJS&lt;/code&gt; application made with;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;express&lt;/code&gt; - For the REST API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;socket.io&lt;/code&gt; - For Web Socket communtication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mongoose&lt;/code&gt; - For connecting to &lt;em&gt;MongoDB&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multer&lt;/code&gt; - For handling file uploads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bcrypt&lt;/code&gt; - For hashing user passwords.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The source code is in the &lt;code&gt;backend/&lt;/code&gt; directory. To setup the server;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setup a MongoDB database;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Striker uses MongoDB as backend database to store all important data. You can install this locally on your machine using &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04&#34;&gt;this guide&lt;/a&gt; for debian-based distros, or create a free one with &lt;a href=&#34;https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/&#34;&gt;MongoDB Atlas&lt;/a&gt; (A database-as-a-service platform).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Move into the source directory;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install dependencies;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create a directory for static files;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this folder to host static files on the server. This should also be where your &lt;code&gt;UPLOAD_LOCATION&lt;/code&gt; is set to in the &lt;code&gt;.env&lt;/code&gt; file (more on this later), but this is not necessary. Files in this directory will be publicly accessible under the path &lt;code&gt;/static/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: Values between &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; are placeholders. Replace them with appropriate values (including the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;). For fields that require random strings, you can generate them easily using;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ head -c 100 /dev/urandom | sha256sum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;DB_URL=&amp;lt;your MongoDB connection URL&amp;gt;&#xA;HOST=&amp;lt;host to listen on (default: 127.0.0.1)&amp;gt;&#xA;PORT=&amp;lt;port to listen on (default: 3000)&amp;gt;&#xA;SECRET=&amp;lt;random string to use for signing session cookies and encrypting session data&amp;gt;&#xA;ORIGIN_URL=&amp;lt;full URL of the server you will be hosting the frontend at. Used to setup CORS&amp;gt;&#xA;REGISTRATION_KEY=&amp;lt;random string to use for authentication during signup&amp;gt;&#xA;MAX_UPLOAD_SIZE=&amp;lt;max file upload size, in bytes&amp;gt;&#xA;UPLOAD_LOCATION=&amp;lt;directory to store uploaded files to (default: static)&amp;gt;&#xA;SSL_KEY=&amp;lt;your SSL key file (optional)&amp;gt;&#xA;SSL_CERT=&amp;lt;your SSL cert file (optional)&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;SSL_KEY&lt;/code&gt; and &lt;code&gt;SSL_CERT&lt;/code&gt; are optional. If any is not defined, a plain HTTP server will be created. This helps avoid needless overhead when running the server behind an SSL-enabled reverse proxy on the same host.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Start the server;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node index.js&#xA;[12:45:30 PM]  Connecting to backend database...&#xA;[12:45:31 PM]  Starting HTTP server...&#xA;[12:45:31 PM]  Server started on port: 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. The Frontend&lt;/h3&gt; &#xA;&lt;p&gt;This is the web UI used by operators. It is a single page web application written in &lt;em&gt;Svelte&lt;/em&gt;, and the source code is in the &lt;code&gt;frontend/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To setup the frontend;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Move into the source directory;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install dependencies;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file with the variable &lt;code&gt;VITE_STRIKER_API&lt;/code&gt; set to the full URL of the C2 server as configured above;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VITE_STRIKER_API=https://c2.striker.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Build;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will compile everything into a static web application in &lt;code&gt;dist/&lt;/code&gt; directory. You can move all the files inside into the web root of your web server, or even host it with a basic HTTP server like that of python;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd dist&#xA;$ python3 -m http.server 8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Signup;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the site in a web browser. You should see a login page.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;Register&lt;/code&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Enter a username, password, and the registration key in use (see &lt;code&gt;REGISTRATION_KEY&lt;/code&gt; in &lt;code&gt;backend/.env&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will create a standard user account. You will need an admin account to access some features. Your first admin account must be created manually, afterwards you can upgrade and downgrade other accounts in the &lt;code&gt;Users&lt;/code&gt; tab of the web UI.&lt;/p&gt; &#xA;&lt;p&gt;To create your first admin account;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to the MongoDB database used by the backend.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;users&lt;/code&gt; collection and set the &lt;code&gt;admin&lt;/code&gt; field of the target user to &lt;code&gt;true&lt;/code&gt;;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are different ways you can do this. If you have &lt;code&gt;mongo&lt;/code&gt; available in you CLI, you can do it using;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mongo &amp;lt;your MongoDB connection URL&amp;gt;&#xA;&amp;gt; db.users.updateOne({username: &#34;&amp;lt;your username&amp;gt;&#34;}, {$set: {admin: true}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get the following response if it works;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;acknowledged&#34; : true, &#34;matchedCount&#34; : 1, &#34;modifiedCount&#34; : 1 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now login :)&lt;/p&gt; &#xA;&lt;h3&gt;3. The C2 Redirector&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A) Dumb Pipe Redirection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A dumb pipe redirector written for &lt;em&gt;Striker&lt;/em&gt; is available at &lt;code&gt;redirector/redirector.py&lt;/code&gt;. Obviously, this will only work for plain HTTP traffic, or for HTTPS when SSL verification is disabled (you can do this by enabling the &lt;code&gt;INSECURE_SSL&lt;/code&gt; macro in the C agent).&lt;/p&gt; &#xA;&lt;p&gt;The following example listens on port &lt;code&gt;443&lt;/code&gt; on all interfaces and forward to &lt;code&gt;c2.example.org&lt;/code&gt; on port &lt;code&gt;443&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd redirector&#xA;$ ./redirector.py 0.0.0.0:443 c2.example.org:443&#xA;[*] Starting redirector on 0.0.0.0:443...&#xA;[+] Listening for connections...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;B) Nginx Reverse Proxy as Redirector&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Nginx;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a vhost config (e.g: &lt;code&gt;/etc/nginx/sites-available/striker&lt;/code&gt;);&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Placeholders;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;domain-name&amp;gt;&lt;/code&gt; - This is your server&#39;s FQDN, and should match the one in you SSL cert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ssl-cert&amp;gt;&lt;/code&gt; - The SSL cert file to use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ssl-key&amp;gt;&lt;/code&gt; - The SSL key file to use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c2-server&amp;gt;&lt;/code&gt; - The full URL of the C2 server to forward requests to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;WARNING: &lt;code&gt;client_max_body_size&lt;/code&gt; should be as large as the size defined by &lt;code&gt;MAX_UPLOAD_SIZE&lt;/code&gt; in your &lt;code&gt;backend/.env&lt;/code&gt; file, or uploads for large files will fail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server {&#xA;    listen 443 ssl;&#xA;    server_name             &amp;lt;domain-name&amp;gt;;&#xA;    ssl_certificate         &amp;lt;ssl-cert&amp;gt;;&#xA;    ssl_certificate_key     &amp;lt;ssl-key&amp;gt;;&#xA;    client_max_body_size    100M;&#xA;    access_log              /var/log/nginx/striker.log;&#xA;&#xA;    location / {&#xA;      proxy_pass              &amp;lt;c2-server&amp;gt;;&#xA;      proxy_redirect          off;&#xA;      proxy_ssl_verify        off;&#xA;      proxy_read_timeout      90;&#xA;      proxy_http_version      1.0;&#xA;      proxy_set_header        Upgrade $http_upgrade;&#xA;      proxy_set_header        Connection &#34;upgrade&#34;;&#xA;      proxy_set_header        Host $host;&#xA;      proxy_set_header        X-Real-IP $remote_addr;&#xA;      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Enable it;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ln -s /etc/nginx/sites-available/striker /etc/nginx/sites-enabled/striker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Restart Nginx;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo service nginx restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your redirector should now be up and running on port &lt;code&gt;443&lt;/code&gt;, and can be tested using (assuming your FQDN is &lt;code&gt;striker.local&lt;/code&gt;);&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl https://striker.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it works, you should get the 404 response used by the backend, like;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;error&#34;:&#34;Invalid route!&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. The Agents (Implants)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A) The C Agent&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;These are the implants used by Striker. The primary agent is written in C, and is located in &lt;code&gt;agent/C/&lt;/code&gt;. It supports both linux and windows hosts. The linux agent depends externally on &lt;code&gt;libcurl&lt;/code&gt;, which you will find installed in most systems.&lt;/p&gt; &#xA;&lt;p&gt;The windows agent does not have an external dependency. It uses &lt;code&gt;wininet&lt;/code&gt; for comms, which I believe is available on all windows hosts.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Building for linux&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Assuming you&#39;re on a 64 bit host, the following will build for 64 host;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd agent/C&#xA;$ mkdir bin&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build for 32 bit on 64;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install gcc-multilib&#xA;$ make arch=32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above compiles everything into the &lt;code&gt;bin/&lt;/code&gt; directory. You will need only two files to generate working implants;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bin/stub&lt;/code&gt; - This is the agent stub that will be used as template to generate working implants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bin/builder&lt;/code&gt; - This is what you will use to patch the agent stub to generate working implants.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The builder accepts the following arguments;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./bin/builder &#xA;[-] Usage: ./bin/builder &amp;lt;url&amp;gt; &amp;lt;auth_key&amp;gt; &amp;lt;delay&amp;gt; &amp;lt;stub&amp;gt; &amp;lt;outfile&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; - The server to report to. This should ideally be a redirector, but a direct URL to the server will also work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;auth_key&amp;gt;&lt;/code&gt; - The authentication key to use when connecting to the C2. You can create this in the &lt;em&gt;auth keys&lt;/em&gt; tab of the web UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;delay&amp;gt;&lt;/code&gt; - Delay between each callback, in seconds. This should be at least 2, depending on how noisy you want it to be.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;stub&amp;gt;&lt;/code&gt; - The stub file to read, &lt;code&gt;bin/stub&lt;/code&gt; in this case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;outfile&amp;gt;&lt;/code&gt; - The output filename of the new implant.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./bin/builder https://localhost:3000 979a9d5ace15653f8ffa9704611612fc 5 bin/stub bin/striker&#xA;[*] Obfuscating strings...&#xA;[+] 69 strings obfuscated :)&#xA;[*] Finding offsets of our markers...&#xA;[+] Offsets:&#xA;            URL: 0x0000a2e0&#xA;       OBFS Key: 0x0000a280&#xA;       Auth Key: 0x0000a2a0&#xA;          Delay: 0x0000a260&#xA;[*] Patching...&#xA;[+] Operation completed!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Building for windows&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will need &lt;em&gt;MinGW&lt;/em&gt; for this. The following will install the 32 and 64 bit dev windows environment;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install mingw-w64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build for 64 bit;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;$ cd agent/C&#xA;$ mdkir bin&#xA;$ make target=win&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile for 32 bit;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;$ make target=win arch=32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile everything into the &lt;code&gt;bin/&lt;/code&gt; directory, and you will have the builder and the stub as &lt;code&gt;bin\stub.exe&lt;/code&gt; and &lt;code&gt;bin\builder.exe&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;B) The Python Agent&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Striker also comes with a self-contained python 3 agent. This is located at &lt;code&gt;agent/python/&lt;/code&gt;. Only the most basic features are implemented in this agent. Useful for hosts that can&#39;t run the C agent but have python installed.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 file in this directory;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stub.py&lt;/code&gt; - This is the payload stub to pass to the builder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;builder.py&lt;/code&gt; - This is what you&#39;ll be using to generate an implant.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./builder.py&#xA;[-] Usage: builder.py &amp;lt;url&amp;gt; &amp;lt;auth_key&amp;gt; &amp;lt;delay&amp;gt; &amp;lt;stub&amp;gt; &amp;lt;outfile&amp;gt;&#xA;# The following will generate a working payload as `output.py`&#xA;$ ./builder.py http://localhost:3000 979a9d5ace15653f8ffa9704611612fc 2 stub.py output.py&#xA;[*] Loading agent stub...&#xA;[*] Writing configs...&#xA;[+] Agent built successfully: output.py&#xA;# Run it&#xA;$ python3 output.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;After following the above instructions, &lt;em&gt;Striker&lt;/em&gt; should now be ready for use. Kindly go through &lt;a href=&#34;https://raw.githubusercontent.com/4g3nt47/Striker/master/USAGE.md&#34;&gt;the usage guide&lt;/a&gt;. Have fun, and happy hacking!&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you like the project, consider helping me turn &lt;a href=&#34;https://ko-fi.com/4g3nt47&#34;&gt;coffee into code&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ExpressLRS/ExpressLRS</title>
    <updated>2022-11-08T01:31:29Z</updated>
    <id>tag:github.com,2022-11-08:/ExpressLRS/ExpressLRS</id>
    <link href="https://github.com/ExpressLRS/ExpressLRS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;STM32/ESP32/ESP8285-based High-Performance Radio Link for RC applications&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ExpressLRS/ExpressLRS-Hardware/raw/master/img/banner.png?raw=true&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ExpressLRS/ExpressLRS?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/ExpressLRS/ExpressLRS/Build%20ExpressLRS?logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ExpressLRS/ExpressLRS?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ExpressLRS/ExpressLRS?style=flat-square&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/expresslrs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/596350022191415318?color=%235865F2&amp;amp;logo=discord&amp;amp;logoColor=%23FFFFFF&amp;amp;style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Support ExpressLRS&lt;/h2&gt; &#xA;&lt;p&gt;You can support ExpressLRS by contributing code, testing new features, sharing your ideas, or helping others get started. We are exceptionally grateful for those who donate their time to our passion.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have time to lend a hand in that way but still want to have an impact, consider donating. Donations are used for infrastructure costs and to buy test equipment needed to further the project and make it securely accessible. ExpressLRS accepts donations through Open Collective, which provides recognition of donors and transparency on how that support is utilized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/expresslrs&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/expresslrs?label=Open%20Collective%20backers&amp;amp;style=flat-square&#34; alt=&#34;Open Collective backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We appreciate all forms of contribution and hope you will join us on Discord!&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;For general information on the project please refer to our guides on the &lt;a href=&#34;https://www.expresslrs.org/&#34;&gt;website&lt;/a&gt;, and our &lt;a href=&#34;https://www.expresslrs.org/2.0/faq/&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;ExpressLRS is an open source Radio Link for Radio Control applications. Designed to be the best FPV Racing link, it is based on the fantastic Semtech &lt;strong&gt;SX127x&lt;/strong&gt;/&lt;strong&gt;SX1280&lt;/strong&gt; LoRa hardware combined with an Espressif or STM32 Processor. Using LoRa modulation as well as reduced packet size it achieves best in class range and latency. It achieves this using a highly optimized over-the-air packet structure, giving simultaneous range and latency advantages. It supports both 900 MHz and 2.4 GHz links, each with their own benefits. 900 MHz supports a maximum of 200 Hz packet rate, with higher penetration. 2.4 GHz supports a blistering fast 1000 Hz on &lt;a href=&#34;http://edgetx.org/&#34;&gt;EdgeTX&lt;/a&gt;. With over 60 different hardware targets and 13 hardware manufacuturers, the choice of hardware is ever growing, with different hardware suited to different requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Configurator&lt;/h2&gt; &#xA;&lt;p&gt;To configure your ExpressLRS hardware, the ExpressLRS Configurator can be used, which is found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS-Configurator/releases/&#34;&gt;https://github.com/ExpressLRS/ExpressLRS-Configurator/releases/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We have both a &lt;a href=&#34;https://discord.gg/expresslrs&#34;&gt;Discord Server&lt;/a&gt; and &lt;a href=&#34;https://www.facebook.com/groups/636441730280366&#34;&gt;Facebook Group&lt;/a&gt;, which have great support for new users and constant ongoing development discussion&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;ExpressLRS has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1000 Hz Packet Rate&lt;/li&gt; &#xA; &lt;li&gt;Telemetry (Betaflight Lua Compatibility)&lt;/li&gt; &#xA; &lt;li&gt;Wifi Updates&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Sim Joystick&lt;/li&gt; &#xA; &lt;li&gt;Oled &amp;amp; TFT Displays&lt;/li&gt; &#xA; &lt;li&gt;2.4 GHz or 900 MHz RC Link&lt;/li&gt; &#xA; &lt;li&gt;Ceramic Antenna - allows for easier installation into micros&lt;/li&gt; &#xA; &lt;li&gt;VTX and VRX Frequency adjustments from the Lua&lt;/li&gt; &#xA; &lt;li&gt;Bind Phrases - no need for button binding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;with many more features on the way!&lt;/p&gt; &#xA;&lt;h2&gt;Supported Hardware&lt;/h2&gt; &#xA;&lt;p&gt;ExpressLRS currently supports hardware from the following manufacturers: AxisFlying, BETAFPV, Flywoo, FrSky, HappyModel, HiYounger, HGLRC, ImmersionRC, iFlight, JHEMCU, Jumper, Matek, NamimnoRC, QuadKopters and SIYI.&lt;/p&gt; &#xA;&lt;p&gt;For an exhaustive list of hardware targets and their user guides, check out the &lt;a href=&#34;https://www.expresslrs.org/2.0/hardware/supported-hardware/&#34;&gt;Supported Hardware&lt;/a&gt; and &lt;a href=&#34;https://www.expresslrs.org/2.0/hardware/receiver-selection/&#34;&gt;Receiver Selection&lt;/a&gt; pages on the website. We do not manufacture any of our hardware, so we can only provide limited support on defective hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;If you are a developer and would like to contribute to the project, feel free to join the &lt;a href=&#34;https://discord.gg/expresslrs&#34;&gt;discord&lt;/a&gt; and chat about bugs and issues. You can also look for issues at the &lt;a href=&#34;https://github.com/ExpressLRS/ExpressLRS/issues&#34;&gt;GitHub Issue Tracker&lt;/a&gt;. The best thing to do is to a submit a Pull Request to the GitHub Repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ExpressLRS/ExpressLRS-Hardware/raw/master/img/community.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>