<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-02T01:29:56Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ianlancetaylor/libbacktrace</title>
    <updated>2023-08-02T01:29:56Z</updated>
    <id>tag:github.com,2023-08-02:/ianlancetaylor/libbacktrace</id>
    <link href="https://github.com/ianlancetaylor/libbacktrace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C library that may be linked into a C/C++ program to produce symbolic backtraces&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libbacktrace&lt;/h1&gt; &#xA;&lt;p&gt;A C library that may be linked into a C/C++ program to produce symbolic backtraces&lt;/p&gt; &#xA;&lt;p&gt;Initially written by Ian Lance Taylor &lt;a href=&#34;mailto:iant@golang.org&#34;&gt;iant@golang.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is version 1.0. It is likely that this will always be version 1.0.&lt;/p&gt; &#xA;&lt;p&gt;The libbacktrace library may be linked into a program or library and used to produce symbolic backtraces. Sample uses would be to print a detailed backtrace when an error occurs or to gather detailed profiling information. In general the functions provided by this library are async-signal-safe, meaning that they may be safely called from a signal handler.&lt;/p&gt; &#xA;&lt;p&gt;The libbacktrace library is provided under a BSD license. See the source files for the exact license text.&lt;/p&gt; &#xA;&lt;p&gt;The public functions are declared and documented in the header file backtrace.h, which should be #include&#39;d by a user of the library.&lt;/p&gt; &#xA;&lt;p&gt;Building libbacktrace will generate a file backtrace-supported.h, which a user of the library may use to determine whether backtraces will work. See the source file backtrace-supported.h.in for the macros that it defines.&lt;/p&gt; &#xA;&lt;p&gt;As of October 2020, libbacktrace supports ELF, PE/COFF, Mach-O, and XCOFF executables with DWARF debugging information. In other words, it supports GNU/Linux, *BSD, macOS, Windows, and AIX. The library is written to make it straightforward to add support for other object file and debugging formats.&lt;/p&gt; &#xA;&lt;p&gt;The library relies on the C++ unwind API defined at &lt;a href=&#34;https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html&#34;&gt;https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html&lt;/a&gt; This API is provided by GCC and clang.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brunodev85/winlator</title>
    <updated>2023-08-02T01:29:56Z</updated>
    <id>tag:github.com,2023-08-02:/brunodev85/winlator</id>
    <link href="https://github.com/brunodev85/winlator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/brunodev85/winlator/main/logo.png&#34; width=&#34;376&#34; height=&#34;128&#34; alt=&#34;Winlator Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Winlator&lt;/h1&gt; &#xA;&lt;p&gt;Winlator is an Android application that lets you to run Windows (x86_64) applications with Wine and Box86/Box64.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install the APK from &lt;a href=&#34;https://github.com/brunodev85/Winlator/releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the OBB file (main.1.com.winlator.obb) and put it into the directory &lt;code&gt;/storage/emulated/0/Android/obb/com.winlator&lt;/code&gt; (create it if it doesn&#39;t exist)&lt;/li&gt; &#xA; &lt;li&gt;Launch the app and wait for the installation process to finish&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9E4wnKf2OsI&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/9E4wnKf2OsI/2.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=czEn4uT3Ja8&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/czEn4uT3Ja8/2.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=eD36nxfT_Z0&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/eD36nxfT_Z0/2.jpg&#34; alt=&#34;Play on Youtube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Credits and Third-party apps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu RootFs (&lt;a href=&#34;https://releases.ubuntu.com/focal&#34;&gt;Focal Fossa&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Wine (&lt;a href=&#34;https://www.winehq.org/&#34;&gt;winehq.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Box86/Box64 by &lt;a href=&#34;https://github.com/ptitSeb&#34;&gt;ptitseb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PRoot (&lt;a href=&#34;https://proot-me.github.io&#34;&gt;proot-me.github.io&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mesa3D (&lt;a href=&#34;https://www.mesa3d.org&#34;&gt;mesa3d.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;DXVK (&lt;a href=&#34;https://github.com/doitsujin/dxvk&#34;&gt;github.com/doitsujin/dxvk&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;D8VK (&lt;a href=&#34;https://github.com/AlpyneDreams/d8vk&#34;&gt;github.com/AlpyneDreams/d8vk&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/alexvorxx&#34;&gt;alexvorxx&lt;/a&gt; for the Mesa mods and build instructions&lt;/p&gt;</summary>
  </entry>
</feed>