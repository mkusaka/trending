<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:32:29Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>neineit/ICE_TEA_BIOS</title>
    <updated>2022-10-12T01:32:29Z</updated>
    <id>tag:github.com,2022-10-12:/neineit/ICE_TEA_BIOS</id>
    <link href="https://github.com/neineit/ICE_TEA_BIOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The BIOS Code from project C970&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>webview/webview</title>
    <updated>2022-10-12T01:32:29Z</updated>
    <id>tag:github.com,2022-10-12:/webview/webview</id>
    <link href="https://github.com/webview/webview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny cross-platform webview library for C/C++/Golang. Uses WebKit (Gtk/Cocoa) and Edge (Windows)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;webview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/zserge/webview?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/zserge/webview.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/zserge/webview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/webview/webview&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/webview/webview/CI%20Pipeline&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/webview/webview&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/webview/webview?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/webview/webview&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/webview/webview&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tiny cross-platform webview library for C/C++/Go to build modern cross-platform GUIs.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the project is to create a common HTML5 UI abstraction layer for the most widely used platforms.&lt;/p&gt; &#xA;&lt;p&gt;It supports two-way JavaScript bindings (to call JavaScript from C/C++/Go and to call C/C++/Go from JavaScript).&lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Technologies&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.gtk.org/gtk3/&#34;&gt;GTK 3&lt;/a&gt;, &lt;a href=&#34;https://webkitgtk.org/&#34;&gt;WebKitGTK&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;Cocoa, &lt;a href=&#34;https://webkit.org/&#34;&gt;WebKit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list&#34;&gt;Windows API&lt;/a&gt;, &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/webview2/&#34;&gt;WebView2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have started working on publishing documentation at &lt;a href=&#34;https://webview.dev&#34;&gt;webview.dev&lt;/a&gt; but you can always find the most up-to-date documentation right in the source code. Improving the documentation is a continuous effort and you are more than welcome to &lt;a href=&#34;https://github.com/webview/webview/issues/new&#34;&gt;offer suggestions&lt;/a&gt; or &lt;a href=&#34;https://github.com/webview/docs&#34;&gt;contribute with content&lt;/a&gt;. Please bear with us if the latest updates are not yet published.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Your compiler must support minimum C++11 except for platforms that require a more modern version.&lt;/p&gt; &#xA;&lt;h3&gt;Linux and BSD&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.gtk.org/gtk3/&#34;&gt;GTK&lt;/a&gt; and &lt;a href=&#34;https://webkitgtk.org/&#34;&gt;WebKit2GTK&lt;/a&gt; libraries are required for development and distribution. You need to check your package repositories regarding how to install those those.&lt;/p&gt; &#xA;&lt;p&gt;Debian-based systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Packages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Development: &lt;code&gt;apt install libgtk-3-dev libwebkit2gtk-4.0-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Production: &lt;code&gt;apt install libgtk-3-0 libwebkit2gtk-4.0-37&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BSD-based systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeBSD packages: &lt;code&gt;pkg install webkit2-gtk3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execution on BSD-based systems may require adding the &lt;code&gt;wxallowed&lt;/code&gt; option (see &lt;a href=&#34;https://man.openbsd.org/mount.8&#34;&gt;mount(8)&lt;/a&gt;) to your fstab to bypass &lt;a href=&#34;https://en.wikipedia.org/wiki/W%5EX&#34; title=&#34;write xor execute&#34;&gt;W^X&lt;/a&gt; memory protection for your executable. Please see if it works without disabling this security feature first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Your compiler must support C++17 and we recommend to pair it with an up-to-date Windows 10 SDK.&lt;/p&gt; &#xA;&lt;p&gt;For Visual C++ we recommend Visual Studio 2022 or later. We have a &lt;a href=&#34;https://raw.githubusercontent.com/webview/webview/master/#mingw-w64-requirements&#34;&gt;separate section for MinGW-w64&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Developers and end-users must have the &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/webview2/&#34;&gt;WebView2 runtime&lt;/a&gt; installed on their system for any version of Windows before Windows 11.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you are a developer of this project then please go to the &lt;a href=&#34;https://raw.githubusercontent.com/webview/webview/master/#development&#34;&gt;development section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instructions here are written for GCC when compiling C/C++ code using Unix-style command lines, and assumes that you run multiple commands in the same shell. Use the Command shell on Windows with these instructions rather than PowerShell. See the &lt;a href=&#34;https://raw.githubusercontent.com/webview/webview/master/#mingw-w64-requirements&#34;&gt;MinGW-w64 requirements&lt;/a&gt; when building on Windows.&lt;/p&gt; &#xA;&lt;p&gt;You will have a working app but you are encouraged to explore the &lt;a href=&#34;https://github.com/webview/webview/tree/master/examples&#34;&gt;available examples&lt;/a&gt; and try the ones that go beyond the mere basics.&lt;/p&gt; &#xA;&lt;p&gt;Start with creating a new directory structure for your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir my-project &amp;amp;&amp;amp; cd my-project&#xA;mkdir build libs &#34;libs/webview&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows Preperation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Web.WebView2&#34;&gt;WebView2 SDK&lt;/a&gt; is required when compiling programs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;mkdir libs\webview2&#xA;curl -sSL &#34;https://www.nuget.org/api/v2/package/Microsoft.Web.WebView2&#34; | tar -xf - -C libs\webview2&#xA;copy /Y libs\webview2\build\native\x64\WebView2Loader.dll build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;WebView2Loader.dll&lt;/code&gt; must be distributed along with your app unless you link it statically, in which case you must use Visual C++ for compilation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All of the examples here assume that you are targeting &lt;code&gt;x64&lt;/code&gt; so make sure to specify the correct path for WebView2 depending on what you are targeting.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;C/C++ Preparation&lt;/h3&gt; &#xA;&lt;p&gt;Fetch the webview library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSLo &#34;libs/webview/webview.h&#34; &#34;https://raw.githubusercontent.com/webview/webview/master/webview.h&#34;&#xA;curl -sSLo &#34;libs/webview/webview.cc&#34; &#34;https://raw.githubusercontent.com/webview/webview/master/webview.cc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting Started with C++&lt;/h3&gt; &#xA;&lt;p&gt;Save the basic C++ example into your project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSLo basic.cc &#34;https://raw.githubusercontent.com/webview/webview/master/examples/basic.cc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build and run the example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Linux&#xA;g++ basic.cc -std=c++11 -Ilibs/webview $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0) -o build/basic &amp;amp;&amp;amp; ./build/basic&#xA;# macOS&#xA;g++ basic.cc -std=c++11 -Ilibs/webview -framework WebKit -o build/basic &amp;amp;&amp;amp; ./build/basic&#xA;# Windows/MinGW&#xA;g++ basic.cc -std=c++17 -mwindows -Ilibs/webview -Ilibs/webview2/build/native/include -Llibs/webview2/build/native/x64 -lWebView2Loader.dll -lole32 -lshell32 -lshlwapi -luser32 -o build/basic.exe &amp;amp;&amp;amp; &#34;build/basic.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bonus for Visual C++&lt;/h4&gt; &#xA;&lt;p&gt;Build a shared library with WebView2 linked statically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;cl libs\webview\webview.cc /std:c++17 /EHsc /Fobuild\ ^&#xA;    /D &#34;WEBVIEW_API=__declspec(dllexport)&#34; ^&#xA;    /I libs\webview ^&#xA;    /I libs\webview2\build\native\include ^&#xA;    libs\webview2\build\native\x64\WebView2LoaderStatic.lib ^&#xA;    /link /DLL advapi32.lib /OUT:build\webview.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the example with WebView2 linked statically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;cl basic.cc /std:c++17 /EHsc /Fobuild\ ^&#xA;    /I libs\webview ^&#xA;    /I libs\webview2\build\native\include ^&#xA;    libs\webview2\build\native\x64\WebView2LoaderStatic.lib ^&#xA;    /link advapi32.lib /OUT:build\basic.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting Started with C&lt;/h3&gt; &#xA;&lt;p&gt;Save the basic C example into your project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSLo basic.c &#34;https://raw.githubusercontent.com/webview/webview/master/examples/basic.c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the library and example, then run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Linux&#xA;g++ -c libs/webview/webview.cc -std=c++11 $(pkg-config --cflags gtk+-3.0 webkit2gtk-4.0) -o build/webview.o&#xA;gcc -c basic.c -std=c99 -Ilibs/webview -o build/basic.o&#xA;g++ build/basic.o build/webview.o $(pkg-config --libs gtk+-3.0 webkit2gtk-4.0) -o build/basic &amp;amp;&amp;amp; build/basic&#xA;# macOS&#xA;g++ -c libs/webview/webview.cc -std=c++11 -o build/webview.o&#xA;gcc -c basic.c -std=c99 -Ilibs/webview -o build/basic.o&#xA;g++ build/basic.o build/webview.o -framework WebKit -o build/basic &amp;amp;&amp;amp; build/basic&#xA;# Windows/MinGW&#xA;g++ -c libs/webview/webview.cc -std=c++17 -Ilibs/webview2/build/native/include -o build/webview.o&#xA;gcc -c basic.c -std=c99 -Ilibs/webview -o build/basic.o&#xA;g++ build/basic.o build/webview.o -mwindows -Llibs/webview2/build/native/x64 -lWebView2Loader.dll -lole32 -lshell32 -lshlwapi -luser32 -o build/basic.exe &amp;amp;&amp;amp; &#34;build/basic.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting Started with Go&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pkg.go.dev/github.com/webview/webview&#34;&gt;Go package documentation&lt;/a&gt; for the Go API documentation, or simply read the source code.&lt;/p&gt; &#xA;&lt;p&gt;Create a new Go module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go mod init example.com/m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows you will need to make the WebView2 loader discoverable by cgo (see &lt;a href=&#34;https://raw.githubusercontent.com/webview/webview/master/#windows-preperation&#34;&gt;Windows Preperation&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;set CGO_CXXFLAGS=&#34;-I%cd%\libs\webview2\build\native\include&#34;&#xA;set CGO_LDFLAGS=&#34;-L%cd%\libs\webview2\build\native\x64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Argument quoting works for Go 1.18 and later. Quotes can be removed if paths have no spaces.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Save the basic Go example into your project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSLo basic.go &#34;https://raw.githubusercontent.com/webview/webview/master/examples/basic.go&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/webview/webview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build and run the example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Linux, macOS&#xA;go build -o build/basic basic.go &amp;amp;&amp;amp; ./build/basic&#xA;# Windows&#xA;go build -ldflags=&#34;-H windowsgui&#34; -o build/basic.exe basic.go &amp;amp;&amp;amp; &#34;build/basic.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Examples&lt;/h3&gt; &#xA;&lt;p&gt;The examples shown here are mere pieces of a bigger picture so we encourage you to try &lt;a href=&#34;https://github.com/webview/webview/tree/master/examples&#34;&gt;other examples&lt;/a&gt; and explore on your own—you can follow the same procedure. Please &lt;a href=&#34;https://github.com/webview/webview/issues/new&#34;&gt;get in touch&lt;/a&gt; if you find any issues.&lt;/p&gt; &#xA;&lt;h2&gt;App Distribution&lt;/h2&gt; &#xA;&lt;p&gt;Distribution of your app is outside the scope of this library but we can give some pointers for you to explore.&lt;/p&gt; &#xA;&lt;h3&gt;macOS Application Bundle&lt;/h3&gt; &#xA;&lt;p&gt;On macOS you would typically create a bundle for your app with an icon and proper metadata.&lt;/p&gt; &#xA;&lt;p&gt;A minimalistic bundle typically has the following directory structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;example.app                 bundle&#xA;└── Contents&#xA;    ├── Info.plist          information property list&#xA;    ├── MacOS&#xA;    |   └── example         executable&#xA;    └── Resources&#xA;        └── example.icns    icon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about the &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html&#34;&gt;structure of bundles&lt;/a&gt; at the Apple Developer site.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tip: The &lt;code&gt;png2icns&lt;/code&gt; tool can create icns files from PNG files. See the &lt;code&gt;icnsutils&lt;/code&gt; package for Debian-based systems.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Windows Apps&lt;/h3&gt; &#xA;&lt;p&gt;You would typically create a resource script file (&lt;code&gt;*.rc&lt;/code&gt;) with information about the app as well as an icon. Since you should have MinGW-w64 readily available then you can compile the file using &lt;code&gt;windres&lt;/code&gt; and link it into your program. If you instead use Visual C++ then look into the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/menurc/resource-compiler&#34;&gt;Windows Resource Compiler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The directory structure could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my-project/&#xA;├── icons/&#xA;|   ├── application.ico&#xA;|   └── window.ico&#xA;├── basic.cc&#xA;└── resources.rc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;resources.rc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;100 ICON &#34;icons\\application.ico&#34;&#xA;32512 ICON &#34;icons\\window.ico&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The ID of the icon resource to be used for the window must be &lt;code&gt;32512&lt;/code&gt; (&lt;code&gt;IDI_APPLICATION&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;windres -o build/resources.o resources.rc&#xA;g++ basic.cc build/resources.o [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to bundle the DLLs you have not linked statically, e.g. &lt;code&gt;WebView2Loader.dll&lt;/code&gt; and those from MinGW-w64.&lt;/p&gt; &#xA;&lt;h2&gt;MinGW-w64 Requirements&lt;/h2&gt; &#xA;&lt;p&gt;In order to build this library using MinGW-w64 on Windows then it must support C++17 and have an up-to-date Windows SDK. This applies both when explicitly building the C/C++ library as well as when doing so implicitly through Go/cgo.&lt;/p&gt; &#xA;&lt;p&gt;Distributions that are known to be compatible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mstorsjo/llvm-mingw&#34;&gt;LLVM MinGW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://winlibs.com/&#34;&gt;WinLibs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build the library, examples and run tests, run &lt;code&gt;script/build.sh&lt;/code&gt; on Unix-based systems and &lt;code&gt;script/build.bat&lt;/code&gt; on Windows.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These scripts are not in the best condition but a rewrite is being planned. Please bear with us and manually edit the scripts to your liking.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;Browser Features&lt;/h3&gt; &#xA;&lt;p&gt;Since a browser engine is not a full web browser it may not support every feature you may expect from a browser. If you find that a feature does not work as expected then please consult with the browser engine&#39;s documentation and &lt;a href=&#34;https://github.com/webview/webview/issues/new&#34;&gt;open an issue&lt;/a&gt; if you think that the library should support it.&lt;/p&gt; &#xA;&lt;p&gt;For example, the library does not attempt to support user interaction features like &lt;code&gt;alert()&lt;/code&gt;, &lt;code&gt;confirm()&lt;/code&gt; and &lt;code&gt;prompt()&lt;/code&gt; and other non-essential features like &lt;code&gt;console.log()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Go Bindings&lt;/h3&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;Eval()&lt;/code&gt; or &lt;code&gt;Dispatch()&lt;/code&gt; before &lt;code&gt;Run()&lt;/code&gt; does not work because the webview instance has only been configured and not yet started.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webview/webview_csharp&#34;&gt;webview/webview_csharp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/naqvis/webview&#34;&gt;naqvis/webview&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webview/webview_deno&#34;&gt;webview/webview_deno&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/webview/webview&#34;&gt;webview/webview&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lettier/webviewhs&#34;&gt;lettier/webviewhs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Janet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/janet-lang/webview&#34;&gt;janet-lang/webview&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shannah/webviewjar&#34;&gt;shannah/webviewjar&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Winterreisender/webviewko&#34;&gt;Winterreisender/webviewko&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/oskca/webview&#34;&gt;oskca/webview&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pascal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/PierceNg/fpwebview&#34;&gt;PierceNg/fpwebview&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zserge/webview-python&#34;&gt;zserge/webview-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Maaarcocr/webview_ruby&#34;&gt;Maaarcocr/webview_ruby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Boscop/webview-rs&#34;&gt;Boscop/webview-rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you wish to add bindings to the list, feel free to submit a pull request or &lt;a href=&#34;https://github.com/webview/webview/issues/new&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Code is distributed under MIT license, feel free to use it in your proprietary projects as well.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>goatshriek/stumpless</title>
    <updated>2022-10-12T01:32:29Z</updated>
    <id>tag:github.com,2022-10-12:/goatshriek/stumpless</id>
    <link href="https://github.com/goatshriek/stumpless" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a C logging library built for high performance and a rich feature set&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/assets/logo-and-name.png&#34; alt=&#34;Stumpless logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A C logging library built for high performance and a rich feature set.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/goatshriek/stumpless/actions/workflows/linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/goatshriek/stumpless/actions/workflows/linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goatshriek/stumpless/actions/workflows/windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/goatshriek/stumpless/actions/workflows/windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goatshriek/stumpless/actions/workflows/mac.yml&#34;&gt;&lt;img src=&#34;https://github.com/goatshriek/stumpless/actions/workflows/mac.yml/badge.svg?sanitize=true&#34; alt=&#34;Mac Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/goatshriek/stumpless&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/goatshriek/stumpless/branch/latest/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=stumpless&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=stumpless&amp;amp;metric=alert_status&#34; alt=&#34;SonarCloud Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/stumpless/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stumpless/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goatshriek/stumpless/raw/latest/docs/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.1-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/#key-features&#34;&gt;Key Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/#quick-build-and-install&#34;&gt;Download and Build&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/#basic-usage&#34;&gt;Basic Usage&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;p&gt;Stumpless offers a robust set of features to make logging in C faster and easier:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;structured and unstructured logging to suit your needs&lt;/li&gt; &#xA; &lt;li&gt;easy logging to &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/#what-can-it-log-to&#34;&gt;lots of things&lt;/a&gt; like Splunk, rsyslog, journald, the Windows Event Log, and more!&lt;/li&gt; &#xA; &lt;li&gt;interoperable with common log daemons and libraries&lt;/li&gt; &#xA; &lt;li&gt;cross-platform builds on Linux, Windows, Mac, Cygwin, and more&lt;/li&gt; &#xA; &lt;li&gt;completely thread safe&lt;/li&gt; &#xA; &lt;li&gt;can be adjusted or removed during compilation for zero runtime impact&lt;/li&gt; &#xA; &lt;li&gt;localized for multiple languages &lt;span&gt;🇧🇬&lt;/span&gt; &lt;span&gt;🇨🇿&lt;/span&gt; &lt;span&gt;🇩🇪&lt;/span&gt; &lt;span&gt;🇪🇸&lt;/span&gt; &lt;span&gt;🇫🇷&lt;/span&gt; &lt;span&gt;🇮🇹&lt;/span&gt; &lt;span&gt;🇵🇱&lt;/span&gt; &lt;span&gt;🇸🇪&lt;/span&gt; &lt;span&gt;🇸🇰&lt;/span&gt; &lt;span&gt;🇺🇸&lt;/span&gt; &lt;span&gt;🇬🇷&lt;/span&gt; (&lt;a href=&#34;https://github.com/goatshriek/stumpless/raw/latest/docs/localization.md&#34;&gt;add yours!&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;easy-access &lt;a href=&#34;https://goatshriek.github.io/stumpless/docs/c/latest/index.html&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/goatshriek/stumpless/tree/latest/docs/examples&#34;&gt;examples&lt;/a&gt;, and &lt;a href=&#34;https://gitter.im/stumpless/community&#34;&gt;support&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What can it log to?&lt;/h3&gt; &#xA;&lt;p&gt;A primary goal of this library is to provide a consistent logging interface to a wide variety of log targets. This means you can focus on defining events and where you want them to go, without finding other SDKs or adding daemons and plugins to get them where you want. Stumpless can write logs to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple character buffers&lt;/li&gt; &#xA; &lt;li&gt;Files and Streams&lt;/li&gt; &#xA; &lt;li&gt;Unix sockets (such as a local syslog daemon)&lt;/li&gt; &#xA; &lt;li&gt;Network Servers (IPv4 or IPv6, TCP or UDP)&lt;/li&gt; &#xA; &lt;li&gt;Systemd Journald Service&lt;/li&gt; &#xA; &lt;li&gt;Windows Event Log&lt;/li&gt; &#xA; &lt;li&gt;Custom functions, for whatever else you may need!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t see what you need? Create an &lt;a href=&#34;https://github.com/goatshriek/stumpless/issues/new?template=feature_request.md&#34;&gt;issue&lt;/a&gt; with your request and we&#39;ll work it into our &lt;a href=&#34;https://github.com/goatshriek/stumpless/raw/latest/docs/roadmap.md&#34;&gt;roadmap&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Quick Build and Install&lt;/h2&gt; &#xA;&lt;p&gt;Stumpless only requires cmake and a cmake-supported build toolchain (like GCC or Visual Studio) to build. For a system using the standard GNU make toolchain, you can simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cloning the latest version of the source tree&#xA;git clone git@github.com:goatshriek/stumpless.git&#xA;&#xA;# creating a new build directory&#xA;mkdir build&#xA;cd build&#xA;&#xA;# configuring the new build&#xA;cmake ../stumpless&#xA;&#xA;# building stumpless (with 4 threads - adjust as desired)&#xA;make -j 4 all&#xA;&#xA;# install the library (you probably need sudo to do this)&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/INSTALL.md&#34;&gt;Installation Instructions&lt;/a&gt; for more detail on building and installing stumpless in different environments and/or with other toolchains.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following code snippets show the most common ways to use stumpless.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Logging Functions&lt;/h3&gt; &#xA;&lt;p&gt;The simplest way to get started is to use the &lt;code&gt;stumplog&lt;/code&gt; function as a direct replacement for the standard library&#39;s &lt;code&gt;syslog&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// if you&#39;re used to doing this:&#xA;syslog( LOG_INFO | LOG_USER, &#34;My message #%d&#34;, count );&#xA;&#xA;// then you can start doing this:&#xA;stumplog( LOG_INFO | LOG_USER, &#34;My message #%d&#34;, count );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t opened a target, this will log messages to the default target for the platform: on Linux this is &lt;code&gt;/dev/log&lt;/code&gt;, on a Mac system this will be &lt;code&gt;/var/run/syslog&lt;/code&gt;, and on a Windows machine it is the Windows Event Log. If you open a target or a few before calling &lt;code&gt;stumplog&lt;/code&gt;, then logs will be sent to the most recently opened target.&lt;/p&gt; &#xA;&lt;p&gt;If you want an even shorter function call, you can use the &lt;code&gt;stump&lt;/code&gt; function to send a message to the current target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;stump( &#34;My message #%d&#34;, count );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And of course, you can use format specifiers in both functions just as you would with &lt;code&gt;printf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;stump( &#34;Login attempt failure #%d for user %s&#34;, count, username );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t need format specifiers, use one of the &lt;code&gt;_str&lt;/code&gt; variants: it&#39;s both faster and safer!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;stump_str( &#34;Login failure! See structured data for info.&#34; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to open a specific target rather than using the default, then just open the target that you need and start sending messages. For example, to log to a file named &lt;code&gt;example.log&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;target = stumpless_open_file_target( &#34;example.log&#34; );&#xA;&#xA;// uses the last opened target by default&#xA;stump( &#34;Login attempt failure #%d for user %s&#34;, count, username );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending messages over the network to something like Splunk or rsyslog is just as easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;target = stumpless_open_udp4_target( &#34;send-to-splunk-example&#34;,&#xA;                                     &#34;mylogserver.com&#34; ); // or use an IP&#xA;stump( &#34;Login attempt failure #%d for user %s&#34;, count, username );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have multiple targets, you can send messages to a chosen target like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;stumpless_add_message( target,&#xA;                       &#34;Login attempt failure #%d for user %s&#34;,&#xA;                       count,&#xA;                       username );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Severity Shorthand&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s common to specify severity levels directly in logging calls, so stumpless provides some macro functions to make this less verbose and more efficient. For example, to log messages with a severity of INFO, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;stump_i( &#34;this gets logged as an info message&#34; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you want to also see source file, line number, and function name info in each message you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;stump_t( &#34;this is easy to trace to the source&#34; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using these functions has the added benefit that they can be removed at compile time by simply defining the &lt;code&gt;STUMPLESS_ENABLE_UPTO&lt;/code&gt; or &lt;code&gt;STUMPLESS_DISABLE_DOWNTO&lt;/code&gt; symbols. This makes it easy to change logging levels between builds, for example to have prod and debug versions without differences in their source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// be sure to define this before stumpless.h gets included&#xA;#define STUMPLESS_ENABLE_UPTO_INFO&#xA;&#xA;// ...&#xA;&#xA;// this log will go through just fine&#xA;stump_i( &#34;I&#39;m doing that thing you asked&#34; );&#xA;&#xA;// this debugging message is completely removed: no runtime impact whatsoever&#xA;stump_d( &#34;DEBUG info: %d, %d, %s&#34;, thing_1, thing_2, stringy_thingy );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the headers in &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/include/stumpless/level&#34;&gt;stumpless/level&lt;/a&gt; to see the full list of severity shorthand functions, or the &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/docs/examples/severity_level&#34;&gt;severity level example&lt;/a&gt; to see a complete program in action.&lt;/p&gt; &#xA;&lt;h3&gt;Even more examples&lt;/h3&gt; &#xA;&lt;p&gt;For more detailed examples of the above scenarios, usage of specific target types, how to handle more complicated message structures, and more check out the &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/docs/examples&#34;&gt;examples&lt;/a&gt;. These include annoted example code files to compile, run, and modify to get you started.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Notice a problem or have a feature request? Just create an issue using one of the templates, and we will respond as quickly as we can. You can also look at the project&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/docs/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; for more details on the different ways you can give back to the open source community!&lt;/p&gt; &#xA;&lt;p&gt;If you want to actually write some code or make an update yourself, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/goatshriek/stumpless/latest/docs/development.md&#34;&gt;development guide&lt;/a&gt; to get a detailed orientation. There are a few options based on your level of experience and familiarity with making contributions.&lt;/p&gt; &#xA;&lt;p&gt;The first option is to browse the list of issues that are marked with the label &lt;a href=&#34;https://github.com/goatshriek/stumpless/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issue&lt;/a&gt;. These issues are selected to be a small but meaningful amount of work, and include details on the general approach that you can take to complete them. They are a great place to start if you are just looking to test the waters of this project or open source contribution in general.&lt;/p&gt; &#xA;&lt;p&gt;More experienced developers may prefer to look at the full list of issues on the project, as well as the &lt;a href=&#34;https://github.com/goatshriek/stumpless/raw/latest/docs/roadmap.md&#34;&gt;roadmap&lt;/a&gt;. If an item catches your interest, drop a comment in the existing issue or open a new one if it doesn&#39;t exist yet and state your intent to work on it so that others will have a way to know it is underway.&lt;/p&gt; &#xA;&lt;p&gt;Or perhaps you are just looking for a way to say thanks! If that&#39;s the case or if there is something that you would prefer to drop me a private message about, please feel free to do so on Twitter with &lt;a href=&#34;https://twitter.com/search?q=%23StumplessLib&#34;&gt;#StumplessLib&lt;/a&gt;, or in an &lt;a href=&#34;mailto:joelanderson333@gmail.com&#34;&gt;email&lt;/a&gt;! I&#39;d love to see you share the project with others or just hear your thoughts on it.&lt;/p&gt; &#xA;&lt;h2&gt;Further Documentation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re curious about how something in stumpless works that isn&#39;t explained here, you can check the appropriate section of the documentation, stored in the docs folder of the repository. Folders in the repository contain their own README files that detail what they contain and any other relevant information. If you still can&#39;t find an answer, submit an issue or head over to &lt;a href=&#34;https://gitter.im/stumpless/community&#34;&gt;gitter&lt;/a&gt; and ask for some help.&lt;/p&gt;</summary>
  </entry>
</feed>