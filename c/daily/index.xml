<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-22T01:36:35Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kurtjd/CHIPnGo</title>
    <updated>2022-07-22T01:36:35Z</updated>
    <id>tag:github.com,2022-07-22:/kurtjd/CHIPnGo</id>
    <link href="https://github.com/kurtjd/CHIPnGo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A custom-built CHIP-8 hand-held gaming console powered by a STM32 microcontroller.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CHIPnGo&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Current Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kurtjd/CHIPnGo/main/images/current_status.jpg?raw=true&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Recently I&#39;ve taken a serious interest in embedded development, so I decided for my first project I would attempt to port my &lt;a href=&#34;https://github.com/kurtjd/jaxe&#34;&gt;CHIP-8 emulator&lt;/a&gt; to a STM32 microcontroller in order to eventually build a CHIP-8 hand-held gaming console. Since this is being done as a learning experience, I also decided I would do this bare-metal with no libraries and write all drivers from scratch. While this is proving to be slow and extremely frustrating at times, it has also been very insightful and I&#39;ve already learned a ton in such a short time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SVods0DDVes&#34;&gt;See it in action!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Guide&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in building your own CHIPnGo, check out &lt;a href=&#34;https://kurtjd.github.io/2022/07/16/chipngo-build-guide/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Blog&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in reading about my development of the project, some challenges I faced, and the bone-headed design decisions I made along the way due to my inexperience, check out my &lt;a href=&#34;https://kurtjd.github.io/2022/07/08/chipngo-dev-1-intro/&#34;&gt;dev blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully supports all CHIP-8 and S-CHIP ROMs&lt;/li&gt; &#xA; &lt;li&gt;LCD graphical display&lt;/li&gt; &#xA; &lt;li&gt;Four directional buttons and two action buttons&lt;/li&gt; &#xA; &lt;li&gt;Piezo buzzer for simple tone generation&lt;/li&gt; &#xA; &lt;li&gt;SD card reader for quick loading of any CHIP-8 ROM&lt;/li&gt; &#xA; &lt;li&gt;Battery power&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kurtjd/CHIPnGo/main/tools/cartridge8/&#34;&gt;Desktop application to manage ROMs on an SD card (aka game cartridge)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ToDo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve startup menu for user to select ROM via SD card (make a bit more pretty)&lt;/li&gt; &#xA; &lt;li&gt;Improve startup splash screen (want something cool and animated)&lt;/li&gt; &#xA; &lt;li&gt;Iron out minor firmware bugs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Although my original emulator also has full support for XO-CHIP roms, I decided to focus on just CHIP-8 and S-CHIP for now for several reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XO-CHIP ROMs expect up to 64kb of memory, as opposed to 4kb expected by original CHIP-8 ROMs.&lt;/li&gt; &#xA; &lt;li&gt;XO-CHIP supports up to three colors, which would mean needing to move beyond a simple monochrome display.&lt;/li&gt; &#xA; &lt;li&gt;XO-CHIP supports variable frequencies/tones whereas CHIP-8 ROMs can only produce a single frequency, which makes handling sound simple.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CHIP-8 supports 16 keys for input, however for design purposes, the console only has 6 buttons. However, most games only use a few buttons so this isn&#39;t too much of an issue.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>istoreos/istoreos</title>
    <updated>2022-07-22T01:36:35Z</updated>
    <id>tag:github.com,2022-07-22:/istoreos/istoreos</id>
    <link href="https://github.com/istoreos/istoreos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;提供更易使用的网关、存储系统&lt;/p&gt;&lt;hr&gt;&lt;p&gt;iStoreOS 是提供给入门级 OpenWRT 爱好者使用的固件， 基于原版 OpenWRT ，在 ARS2 上经过长期迭代，最终开放适配到多个硬件平台&lt;/p&gt; &#xA;&lt;p&gt;更多信息请参阅 &lt;a href=&#34;https://github.com/istoreos&#34;&gt;https://github.com/istoreos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;以下是 OpenWRT 原始的 README&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/istoreos/istoreos/main/include/logo.png&#34; alt=&#34;OpenWrt logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenWrt Project is a Linux operating system targeting embedded devices. Instead of trying to create a single, static firmware, OpenWrt provides a fully writable filesystem with package management. This frees you from the application selection and configuration provided by the vendor and allows you to customize the device through the use of packages to suit any application. For developers, OpenWrt is the framework to build an application without having to build a complete firmware around it; for users this means the ability for full customization, to use the device in ways never envisioned.&lt;/p&gt; &#xA;&lt;p&gt;Sunshine!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or MacOSX system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to compile OpenWrt, the package names vary between distributions. A complete list with distribution specific packages is found in the &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build System Setup&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc binutils bzip2 flex python3 perl make find grep diff unzip gawk getopt&#xA;subversion libz-dev libc-dev rsync which&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called &lt;code&gt;opkg&lt;/code&gt;. If you&#39;re looking to develop the web interface or port packages to OpenWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/packages&#34;&gt;OpenWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.openwrt.org&#34;&gt;Forum&lt;/a&gt;: For usage, projects, discussions and hardware advise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.oftc.net/#openwrt&#34;&gt;Support Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developer Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.openwrt.org&#34;&gt;Bug Reports&lt;/a&gt;: Report bugs in OpenWrt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.openwrt.org/mailman/listinfo/openwrt-devel&#34;&gt;Dev Mailing List&lt;/a&gt;: Send patches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.oftc.net/#openwrt-devel&#34;&gt;Dev Chat&lt;/a&gt;: Channel &lt;code&gt;#openwrt-devel&lt;/code&gt; on &lt;strong&gt;oftc.net&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenWrt is licensed under GPL-2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bellard/quickjs</title>
    <updated>2022-07-22T01:36:35Z</updated>
    <id>tag:github.com,2022-07-22:/bellard/quickjs</id>
    <link href="https://github.com/bellard/quickjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Public repository of the QuickJS Javascript Engine. Pull requests are not accepted. Use the mailing list to submit patches.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The main documentation is in doc/quickjs.pdf or doc/quickjs.html.&lt;/p&gt;</summary>
  </entry>
</feed>