<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:32:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mecomonteshbtn/C-low_level_programming</title>
    <updated>2022-09-11T01:32:47Z</updated>
    <id>tag:github.com,2022-09-11:/mecomonteshbtn/C-low_level_programming</id>
    <link href="https://github.com/mecomonteshbtn/C-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository about Low Level Programming in C language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;C - Hello, World&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why C programming is awesome (donâ€™t forget to tweet today, with the hashtag #cisfun :))&lt;/li&gt; &#xA; &lt;li&gt;Who invented C&lt;/li&gt; &#xA; &lt;li&gt;Who are Dennis Ritchie, Brian Kernighan and Linus Torvalds&lt;/li&gt; &#xA; &lt;li&gt;What happens when you type gcc main.c&lt;/li&gt; &#xA; &lt;li&gt;What is an entry point&lt;/li&gt; &#xA; &lt;li&gt;What is main&lt;/li&gt; &#xA; &lt;li&gt;How to print text using printf, puts and putchar&lt;/li&gt; &#xA; &lt;li&gt;How to get the size of a specific type using the unary operator sizeof&lt;/li&gt; &#xA; &lt;li&gt;How to compile using gcc&lt;/li&gt; &#xA; &lt;li&gt;What is the default program name when compiling with gcc&lt;/li&gt; &#xA; &lt;li&gt;What is the official Holberton C coding style and how to check your code with betty-style&lt;/li&gt; &#xA; &lt;li&gt;How to find the right header to include in your source code when using a standard library function&lt;/li&gt; &#xA; &lt;li&gt;How does the main function influence the return value of the program&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements C&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allowed editors: vi, vim, emacs&lt;/li&gt; &#xA; &lt;li&gt;All your files will be compiled on Ubuntu 14.04 LTS using gcc 4.8.4&lt;/li&gt; &#xA; &lt;li&gt;All your files should end with a new line&lt;/li&gt; &#xA; &lt;li&gt;A README.md file at the root of the holbertonschool-low_level_programming repo, containing a description of the repository&lt;/li&gt; &#xA; &lt;li&gt;A README.md file, at the root of the folder of this project, containing a description of the project&lt;/li&gt; &#xA; &lt;li&gt;There should be no errors and no warnings during compilation&lt;/li&gt; &#xA; &lt;li&gt;You are not allowed to use system&lt;/li&gt; &#xA; &lt;li&gt;Your code should use the Betty style. It will be checked using betty-style.pl and betty-doc.pl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0-preprocessor: Preprocessor&lt;/h2&gt; &#xA;&lt;p&gt;A script that runs a &lt;em&gt;C&lt;/em&gt; file through the preprocessor and save the result into another file. The C file name will be saved in the variable &lt;em&gt;$CFILE&lt;/em&gt;; The output should be saved in the file &lt;em&gt;c&lt;/em&gt; using &lt;em&gt;gcc $CFILE -E -o c&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;1-compiler: Compiler&lt;/h2&gt; &#xA;&lt;p&gt;A script that compiles a C file but does not link. The &lt;em&gt;C&lt;/em&gt; file name will be saved in the variable &lt;em&gt;$CFILE&lt;/em&gt;; The output file should be named the same as the &lt;em&gt;C&lt;/em&gt; file, but with the extension &lt;em&gt;.o&lt;/em&gt; instead of &lt;em&gt;.c&lt;/em&gt;;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; if the C file is &lt;em&gt;main.c&lt;/em&gt;, the output file should be &lt;em&gt;main.o&lt;/em&gt; using &lt;em&gt;gcc -c $CFILE&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2-assembler: Assembler&lt;/h2&gt; &#xA;&lt;p&gt;A script that generates the assembly code of a &lt;em&gt;C&lt;/em&gt; code and save it in an output file. The &lt;em&gt;C&lt;/em&gt; file name will be saved in the variable &lt;em&gt;$CFILE&lt;/em&gt;; The output file should be named the same as the &lt;em&gt;C&lt;/em&gt; file, but with the extension &lt;em&gt;.s&lt;/em&gt; instead of &lt;em&gt;.c&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; if the &lt;em&gt;C&lt;/em&gt; file is &lt;em&gt;main.c&lt;/em&gt;, the output file should be &lt;em&gt;main.s&lt;/em&gt; using &lt;em&gt;gcc -S $CFILE&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;3-name: Name&lt;/h2&gt; &#xA;&lt;p&gt;A script that compiles a &lt;em&gt;C&lt;/em&gt; file and creates an executable named &lt;em&gt;cisfun&lt;/em&gt;. The &lt;em&gt;C&lt;/em&gt; file name will be saved in the variable &lt;em&gt;$CFILE&lt;/em&gt; using &lt;em&gt;gcc $CFILE -o cisfun&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;4-puts.c: Hello, puts&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;em&gt;C&lt;/em&gt; program that prints exactly &lt;em&gt;&#34;Programming is like building a multilingual puzzle, followed by a new line.&lt;/em&gt;. Use the function &lt;em&gt;puts&lt;/em&gt;; You are not allowed to use &lt;em&gt;printf&lt;/em&gt;; Your program should end with the value &lt;em&gt;0&lt;/em&gt; using:&lt;/p&gt; &#xA;&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;int main(void) { puts(&#34;Programming is like building a multilingual puzzle\n&#34;); return (0); }&lt;/p&gt; &#xA;&lt;h2&gt;5-printf.c: Hello, printf&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;em&gt;C&lt;/em&gt; program that prints exactly &lt;em&gt;with proper grammar, but the outcome is a piece of art,&lt;/em&gt;, followed by a new line. Use the function &lt;em&gt;printf&lt;/em&gt;; You are not allowed to use the function &lt;em&gt;puts&lt;/em&gt;; Your program should return &lt;em&gt;0&lt;/em&gt;; Your program should compile without warning when using the &lt;em&gt;-Wall gcc&lt;/em&gt; option using:&lt;/p&gt; &#xA;&lt;p&gt;{ #include &amp;lt;stdio.h&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;int main(void) { printf(&#34;with proper grammar, but the outcome is a piece of art,\n&#34;); return (0); } }&lt;/p&gt; &#xA;&lt;h2&gt;6-size.c: Size is not grandeur, and territory does not make a nation&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;em&gt;C&lt;/em&gt; program that prints the size of various types on the computer it is compiled and run on. You should produce the exact same output as in the example; Warnings are allowed; Your program should return &lt;em&gt;0&lt;/em&gt;; You might have to install the package &lt;em&gt;libc6-dev-i386&lt;/em&gt; on your Linux (Vagrant) to test the &lt;em&gt;-m32 gcc&lt;/em&gt; option using:&lt;/p&gt; &#xA;&lt;p&gt;{ #include &amp;lt;stdio.h&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;int main(void) { int a; long int b; long long int c; char d; float f;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;printf(&#34;Size of a char: %lu byte(s)\n&#34;, (unsigned long)sizeof(d));&#xA;printf(&#34;Size of an int: %lu byte(s)\n&#34;, (unsigned long)sizeof(a));&#xA;printf(&#34;Size of a long int: %lu byte(s)\n&#34;, (unsigned long)sizeof(b));&#xA;printf(&#34;Size of a long long int: %lu byte(s)\n&#34;, (unsigned long)sizeof(c));&#xA;printf(&#34;Size of a float: %lu byte(s)\n&#34;, (unsigned long)sizeof(f));&#xA;return (0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;} }&lt;/p&gt; &#xA;&lt;h2&gt;100-intel: Intel&lt;/h2&gt; &#xA;&lt;p&gt;A script that generates the assembly code (Intel syntax) of a &lt;em&gt;C&lt;/em&gt; code and save it in an output file. The &lt;em&gt;C&lt;/em&gt; file name will be saved in the variable &lt;em&gt;$CFILE&lt;/em&gt;. The output file should be named the same as the &lt;em&gt;C&lt;/em&gt; file, but with the extension &lt;em&gt;.s&lt;/em&gt; instead of &lt;em&gt;.c&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; if the &lt;em&gt;C&lt;/em&gt; file is &lt;em&gt;main.c&lt;/em&gt;, the output file should be &lt;em&gt;main.s&lt;/em&gt; using &lt;em&gt;gcc -S -masm=intel $CFILE&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;101-quote.c: UNIX is basically a simple operating system, but you have to be a genius to understand the simplicity&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;em&gt;C&lt;/em&gt; program that prints exactly &lt;em&gt;and that piece of art is useful&#34; - Dora Korpar, 2015-10-19&lt;/em&gt;, followed by a new line, to the standard error. You are not allowed to use any functions listed in the &lt;em&gt;NAME&lt;/em&gt; section of the &lt;em&gt;man (3) printf or man (3) puts&lt;/em&gt;; Your program should return &lt;em&gt;1&lt;/em&gt;; Your program should compile without any warnings when using the &lt;em&gt;-Wall gcc&lt;/em&gt; option using:&lt;/p&gt; &#xA;&lt;p&gt;{ #include &amp;lt;stdio.h&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;int main(void) { write(2, &#34;and that piece of art is useful&#34; - Dora Korpar, 2015-10-19\n&#34;, 61);&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;return (1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;} }&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lroudge/holbertonschool-low_level_programming</title>
    <updated>2022-09-11T01:32:47Z</updated>
    <id>tag:github.com,2022-09-11:/lroudge/holbertonschool-low_level_programming</id>
    <link href="https://github.com/lroudge/holbertonschool-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository contains C projects and other low level programming exercices.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kai-dg/holbertonschool-low_level_programming</title>
    <updated>2022-09-11T01:32:47Z</updated>
    <id>tag:github.com,2022-09-11:/kai-dg/holbertonschool-low_level_programming</id>
    <link href="https://github.com/kai-dg/holbertonschool-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Holberton Curriculum for learning C. Learning the basic fundamentals.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Holberton School Low-level Programming&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Holberton&#39;s curriculum for low-level programming. These projects are meant to help us learn basic concepts of programming in order to have the capacity to learn any other language quickly.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x00-hello_world&#34;&gt;0x00. C - Hello, World&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x01-variables_if_else_while&#34;&gt;0x01. C - Variables, if, else, while&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x02-functions_nested_loops&#34;&gt;0x02. C - Functions, nested loops&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x03-more_functions_nested_loops&#34;&gt;0x03. C - More functions, more nested loops&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x04-pointers_arrays_strings&#34;&gt;0x04. C - Pointers, arrays and strings&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x05-pointers_arrays_strings&#34;&gt;0x05. C - More pointers, arrays and strings&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x06-pointers_arrays_strings&#34;&gt;0x06. C - Even more pointers, arrays and strings&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x07-recursion&#34;&gt;0x07. C - Recursion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x08-static_libraries&#34;&gt;0x08. C - Static libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x09-argc_argv&#34;&gt;0x09. C - argc, argv&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x0A-malloc_free&#34;&gt;0x0A. C - malloc, free&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x0B-more_malloc_free&#34;&gt;0x0B. C - More malloc, free&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x0C-preprocessor&#34;&gt;0x0C. C - Preprocessor&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x0D-structures_typedef&#34;&gt;0x0D. C - Structures, typedef&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x0E-function_pointers&#34;&gt;0x0E. C - Function pointers&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x0F-variadic_functions&#34;&gt;0x0F. C - Variadic functions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/kai-dg/printf&#34;&gt;0x10. C - printf&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2-man project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x11-singly_linked_lists&#34;&gt;0x11. C - Singly linked lists&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x12-more_singly_linked_lists&#34;&gt;0x12. C - More singly linked lists&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x13-bit_manipulation&#34;&gt;0x13. C - Bit manipulation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x14-file_io&#34;&gt;0x14. C - File I/O&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/kai-dg/simple_shell&#34;&gt;0x15. C - Simple Shell&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3-man project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x16-doubly_linked_lists&#34;&gt;0x16. C - Doubly linked lists&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x17-dynamic_libraries&#34;&gt;0x17. C - Dynamic libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kai-dg/holbertonschool-low_level_programming/master/0x18-stacks_queues_lifo_fifo&#34;&gt;0x18. C - Stacks, Queues - LIFO, FIFO&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Derrick Gee - &lt;a href=&#34;https://github.com/kai-dg&#34;&gt;kai-dg&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>