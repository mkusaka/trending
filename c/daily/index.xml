<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:35:53Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openresty/openresty</title>
    <updated>2022-06-15T01:35:53Z</updated>
    <id>tag:github.com,2022-06-15:/openresty/openresty</id>
    <link href="https://github.com/openresty/openresty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High Performance Web Platform Based on Nginx and LuaJIT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;OpenResty - Turning Nginx into a Full-Fledged Scriptable Web Platform&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#description&#34;&gt;Description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#for-users&#34;&gt;For Users&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#for-bundle-maintainers&#34;&gt;For Bundle Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#additional-features&#34;&gt;Additional Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#resolvconf-parsing&#34;&gt;resolv.conf parsing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#mailing-list&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#report-bugs&#34;&gt;Report Bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#copyright--license&#34;&gt;Copyright &amp;amp; License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;OpenResty is a full-fledged web application server by bundling the standard nginx core, lots of 3rd-party nginx modules, as well as most of their external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;This bundle is maintained by Yichun Zhang (agentzh).&lt;/p&gt; &#xA;&lt;p&gt;Because most of the nginx modules are developed by the bundle maintainers, it can ensure that all these modules are played well together.&lt;/p&gt; &#xA;&lt;p&gt;The bundled software components are copyrighted by the respective copyright holders.&lt;/p&gt; &#xA;&lt;p&gt;The homepage for this project is on &lt;a href=&#34;https://openresty.org/&#34;&gt;openresty.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For Users&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://openresty.org/en/download.html&#34;&gt;download page&lt;/a&gt; on the &lt;code&gt;openresty.org&lt;/code&gt; web site to download the latest bundle tarball, and follow the installation instructions in the &lt;a href=&#34;https://openresty.org/en/installation.html&#34;&gt;installation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For Bundle Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;The bundle&#39;s source is at the following git repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/openresty&#34;&gt;https://github.com/openresty/openresty&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To reproduce the bundle tarball, just do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;at the top of the bundle source tree.&lt;/p&gt; &#xA;&lt;p&gt;Please note that you may need to install some extra dependencies, like &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;dos2unix&lt;/code&gt;, and &lt;code&gt;mercurial&lt;/code&gt;. On Fedora 22, for example, installing the dependencies is as simple as running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install perl dos2unix mercurial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Additional Features&lt;/h1&gt; &#xA;&lt;p&gt;In additional to the standard nginx core features, this bundle also supports the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resolv.conf parsing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;resolver address ... [valid=time] [ipv6=on|off] [local=on|off|path]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;-&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, stream, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to the &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver&#34;&gt;&lt;code&gt;resolver&lt;/code&gt; directive&lt;/a&gt; in standard nginx core with additional support for parsing additional resolvers from the &lt;code&gt;resolv.conf&lt;/code&gt; file format.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;local=on&lt;/code&gt;, the standard path of &lt;code&gt;/etc/resolv.conf&lt;/code&gt; will be used. You may also specify arbitrary path to be used for parsing, for example: &lt;code&gt;local=/tmp/test.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;local=off&lt;/code&gt;, parsing will be disabled (this is the default).&lt;/p&gt; &#xA;&lt;p&gt;This feature is not available on Windows platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mailing List&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re very welcome to join the English OpenResty mailing list hosted on Google Groups:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/openresty-en&#34;&gt;https://groups.google.com/group/openresty-en&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Chinese mailing list is here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/openresty&#34;&gt;https://groups.google.com/group/openresty&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Report Bugs&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re very welcome to report issues on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/openresty/issues&#34;&gt;https://github.com/openresty/openresty/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Copyright &amp;amp; License&lt;/h1&gt; &#xA;&lt;p&gt;The bundle itself is licensed under the 2-clause BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2011-2019, Yichun &#34;agentzh&#34; Zhang (章亦春) &lt;a href=&#34;mailto:agentzh@gmail.com&#34;&gt;agentzh@gmail.com&lt;/a&gt;, OpenResty Inc.&lt;/p&gt; &#xA;&lt;p&gt;This module is licensed under the terms of the BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openresty/openresty/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/cuda-samples</title>
    <updated>2022-06-15T01:35:53Z</updated>
    <id>tag:github.com,2022-06-15:/NVIDIA/cuda-samples</id>
    <link href="https://github.com/NVIDIA/cuda-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for CUDA Developers which demonstrates features in CUDA Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CUDA Samples&lt;/h1&gt; &#xA;&lt;p&gt;Samples for CUDA Developers which demonstrates features in CUDA Toolkit. This version supports &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 11.6&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the release notes for the CUDA Samples on GitHub only.&lt;/p&gt; &#xA;&lt;h3&gt;CUDA 11.6&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added new folder structure for samples&lt;/li&gt; &#xA; &lt;li&gt;Added support of Visual Studio 2022 to all samples supported on &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/#windows-1&#34;&gt;Windows&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;All CUDA samples are now only available on &lt;a href=&#34;https://github.com/nvidia/cuda-samples&#34;&gt;GitHub&lt;/a&gt;. They are no longer available via CUDA toolkit.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/CHANGELOG.md&#34;&gt;older versions...&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Download and install the &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 11.6&lt;/a&gt; for your corresponding platform. For system requirements and installation instructions of cuda toolkit, please refer to the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-linux/&#34;&gt;Linux Installation Guide&lt;/a&gt;, and the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html&#34;&gt;Windows Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the CUDA Samples&lt;/h3&gt; &#xA;&lt;p&gt;Using git clone the repository of CUDA Samples using the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/NVIDIA/cuda-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without using git the easiest way to use these samples is to download the zip file containing the current version by clicking the &#34;Download ZIP&#34; button on the repo page. You can then unzip the entire archive and use the samples.&lt;/p&gt; &#xA;&lt;h2&gt;Building CUDA Samples&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;The Windows samples are built using the Visual Studio IDE. Solution files (.sln) are provided for each supported version of Visual Studio, using the format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*_vs&amp;lt;version&amp;gt;.sln - for Visual Studio &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complete samples solution files exist at parent directory of the repo:&lt;/p&gt; &#xA;&lt;p&gt;Each individual sample has its own set of solution files at: &lt;code&gt;&amp;lt;CUDA_SAMPLES_REPO&amp;gt;\Samples\&amp;lt;sample_dir&amp;gt;\&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build/examine all the samples at once, the complete solution files should be used. To build/examine a single sample, the individual sample solution files should be used.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;The Linux samples are built using makefiles. To use the makefiles, change the current directory to the sample directory you wish to build, and run make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;sample_dir&amp;gt;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The samples makefiles can take advantage of certain options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TARGET_ARCH=&#xA;    &lt;arch&gt;&lt;/arch&gt;&lt;/strong&gt; - cross-compile targeting a specific architecture. Allowed architectures are x86_64, ppc64le, armv7l, aarch64. By default, TARGET_ARCH is set to HOST_ARCH. On a x86_64 machine, not setting TARGET_ARCH is the equivalent of setting TARGET_ARCH=x86_64.&lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=x86_64&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=ppc64le&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=armv7l&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=aarch64&lt;/code&gt; &lt;br&gt; See &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-samples/index.html#cross-samples&#34;&gt;here&lt;/a&gt; for more details on cross platform compilation of cuda samples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dbg=1&lt;/strong&gt; - build with debug symbols&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make dbg=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SMS=&#34;A B ...&#34;&lt;/strong&gt; - override the SM architectures for which the sample will be built, where &lt;code&gt;&#34;A B ...&#34;&lt;/code&gt; is a space-delimited list of SM architectures. For example, to generate SASS for SM 50 and SM 60, use &lt;code&gt;SMS=&#34;50 60&#34;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make SMS=&#34;50 60&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HOST_COMPILER=&amp;lt;host_compiler&amp;gt;&lt;/strong&gt; - override the default g++ host compiler. See the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements&#34;&gt;Linux Installation Guide&lt;/a&gt; for a list of supported host compilers.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make HOST_COMPILER=g++&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples list&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/0_Introduction/README.md&#34;&gt;0. Introduction&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Basic CUDA samples for beginners that illustrate key concepts with using CUDA and CUDA runtime APIs.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/1_Utilities/README.md&#34;&gt;1. Utilities&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Utility samples that demonstrate how to query device capabilities and measure GPU/CPU bandwidth.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/2_Concepts_and_Techniques/README.md&#34;&gt;2. Concepts and Techniques&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate CUDA related concepts and common problem solving techniques.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/3_CUDA_Features/README.md&#34;&gt;3. CUDA Features&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate CUDA Features (Cooperative Groups, CUDA Dynamic Parallelism, CUDA Graphs etc).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/4_CUDA_Libraries/README.md&#34;&gt;4. CUDA Libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate how to use CUDA platform libraries (NPP, NVJPEG, NVGRAPH cuBLAS, cuFFT, cuSPARSE, cuSOLVER and cuRAND).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/5_Domain_Specific/README.md&#34;&gt;5. Domain Specific&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that are specific to domain (Graphics, Finance, Image Processing).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/6_Performance/README.md&#34;&gt;6. Performance&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate performance optimization.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Some CUDA Samples rely on third-party applications and/or libraries, or features provided by the CUDA Toolkit and Driver, to either build or execute. These dependencies are listed below.&lt;/p&gt; &#xA;&lt;p&gt;If a sample has a third-party dependency that is available on the system, but is not installed, the sample will waive itself at build time.&lt;/p&gt; &#xA;&lt;p&gt;Each sample&#39;s dependencies are listed in its README&#39;s Dependencies section.&lt;/p&gt; &#xA;&lt;h3&gt;Third-Party Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;These third-party dependencies are required by some CUDA samples. If available, these dependencies are either installed on your system automatically, or are installable via your system&#39;s package manager (Linux) or a third-party website.&lt;/p&gt; &#xA;&lt;h4&gt;FreeImage&lt;/h4&gt; &#xA;&lt;p&gt;FreeImage is an open source imaging library. FreeImage can usually be installed on Linux using your distribution&#39;s package manager system. FreeImage can also be downloaded from the FreeImage website.&lt;/p&gt; &#xA;&lt;p&gt;To set up FreeImage on a Windows system, extract the FreeImage DLL distribution into the folder &lt;code&gt;../../../Common/FreeImage/Dist/x64&lt;/code&gt; such that it contains the .h and .lib files. Copy the .dll file to root level &lt;code&gt;bin/win64/Debug&lt;/code&gt; and &lt;code&gt;bin/win64/Release&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Message Passing Interface&lt;/h4&gt; &#xA;&lt;p&gt;MPI (Message Passing Interface) is an API for communicating data between distributed processes. A MPI compiler can be installed using your Linux distribution&#39;s package manager system. It is also available on some online resources, such as &lt;a href=&#34;http://www.open-mpi.org/&#34;&gt;Open MPI&lt;/a&gt;. On Windows, to build and run MPI-CUDA applications one can install &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx&#34;&gt;MS-MPI SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Only 64-Bit&lt;/h4&gt; &#xA;&lt;p&gt;Some samples can only be run on a 64-bit operating system.&lt;/p&gt; &#xA;&lt;h4&gt;DirectX&lt;/h4&gt; &#xA;&lt;p&gt;DirectX is a collection of APIs designed to allow development of multimedia applications on Microsoft platforms. For Microsoft platforms, NVIDIA&#39;s CUDA Driver supports DirectX. Several CUDA Samples for Windows demonstrates CUDA-DirectX Interoperability, for building such samples one needs to install Microsoft Visual Studio 2012 or higher which provides Microsoft Windows SDK for Windows 8.&lt;/p&gt; &#xA;&lt;h4&gt;DirectX12&lt;/h4&gt; &#xA;&lt;p&gt;DirectX 12 is a collection of advanced low-level programming APIs which can reduce driver overhead, designed to allow development of multimedia applications on Microsoft platforms starting with Windows 10 OS onwards. For Microsoft platforms, NVIDIA&#39;s CUDA Driver supports DirectX. Few CUDA Samples for Windows demonstrates CUDA-DirectX12 Interoperability, for building such samples one needs to install &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk&#34;&gt;Windows 10 SDK or higher&lt;/a&gt;, with VS 2015 or VS 2017.&lt;/p&gt; &#xA;&lt;h4&gt;OpenGL&lt;/h4&gt; &#xA;&lt;p&gt;OpenGL is a graphics library used for 2D and 3D rendering. On systems which support OpenGL, NVIDIA&#39;s OpenGL implementation is provided with the CUDA Driver.&lt;/p&gt; &#xA;&lt;h4&gt;OpenGL ES&lt;/h4&gt; &#xA;&lt;p&gt;OpenGL ES is an embedded systems graphics library used for 2D and 3D rendering. On systems which support OpenGL ES, NVIDIA&#39;s OpenGL ES implementation is provided with the CUDA Driver.&lt;/p&gt; &#xA;&lt;h4&gt;Vulkan&lt;/h4&gt; &#xA;&lt;p&gt;Vulkan is a low-overhead, cross-platform 3D graphics and compute API. Vulkan targets high-performance realtime 3D graphics applications such as video games and interactive media across all platforms. On systems which support Vulkan, NVIDIA&#39;s Vulkan implementation is provided with the CUDA Driver. For building and running Vulkan applications one needs to install the &lt;a href=&#34;https://www.lunarg.com/vulkan-sdk/&#34;&gt;Vulkan SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;OpenMP&lt;/h4&gt; &#xA;&lt;p&gt;OpenMP is an API for multiprocessing programming. OpenMP can be installed using your Linux distribution&#39;s package manager system. It usually comes preinstalled with GCC. It can also be found at the &lt;a href=&#34;http://openmp.org/&#34;&gt;OpenMP website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Screen&lt;/h4&gt; &#xA;&lt;p&gt;Screen is a windowing system found on the QNX operating system. Screen is usually found as part of the root filesystem.&lt;/p&gt; &#xA;&lt;h4&gt;X11&lt;/h4&gt; &#xA;&lt;p&gt;X11 is a windowing system commonly found on *-nix style operating systems. X11 can be installed using your Linux distribution&#39;s package manager, and comes preinstalled on Mac OS X systems.&lt;/p&gt; &#xA;&lt;h4&gt;EGL&lt;/h4&gt; &#xA;&lt;p&gt;EGL is an interface between Khronos rendering APIs (such as OpenGL, OpenGL ES or OpenVG) and the underlying native platform windowing system.&lt;/p&gt; &#xA;&lt;h4&gt;EGLOutput&lt;/h4&gt; &#xA;&lt;p&gt;EGLOutput is a set of EGL extensions which allow EGL to render directly to the display.&lt;/p&gt; &#xA;&lt;h4&gt;EGLSync&lt;/h4&gt; &#xA;&lt;p&gt;EGLSync is a set of EGL extensions which provides sync objects that are synchronization primitive, representing events whose completion can be tested or waited upon.&lt;/p&gt; &#xA;&lt;h4&gt;NVSCI&lt;/h4&gt; &#xA;&lt;p&gt;NvSci is a set of communication interface libraries out of which CUDA interops with NvSciBuf and NvSciSync. NvSciBuf allows applications to allocate and exchange buffers in memory. NvSciSync allows applications to manage synchronization objects which coordinate when sequences of operations begin and end.&lt;/p&gt; &#xA;&lt;h4&gt;NvMedia&lt;/h4&gt; &#xA;&lt;p&gt;NvMedia provides powerful processing of multimedia data for true hardware acceleration across NVIDIA Tegra devices. Applications leverage the NvMedia Application Programming Interface (API) to process the image and video data.&lt;/p&gt; &#xA;&lt;h3&gt;CUDA Features&lt;/h3&gt; &#xA;&lt;p&gt;These CUDA features are needed by some CUDA samples. They are provided by either the CUDA Toolkit or CUDA Driver. Some features may not be available on your system.&lt;/p&gt; &#xA;&lt;h4&gt;CUFFT Callback Routines&lt;/h4&gt; &#xA;&lt;p&gt;CUFFT Callback Routines are user-supplied kernel routines that CUFFT will call when loading or storing data. These callback routines are only available on Linux x86_64 and ppc64le systems.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Dynamic Parallellism&lt;/h4&gt; &#xA;&lt;p&gt;CDP (CUDA Dynamic Parallellism) allows kernels to be launched from threads running on the GPU. CDP is only available on GPUs with SM architecture of 3.5 or above.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-block Cooperative Groups&lt;/h4&gt; &#xA;&lt;p&gt;Multi Block Cooperative Groups(MBCG) extends Cooperative Groups and the CUDA programming model to express inter-thread-block synchronization. MBCG is available on GPUs with Pascal and higher architecture.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Device Cooperative Groups&lt;/h4&gt; &#xA;&lt;p&gt;Multi Device Cooperative Groups extends Cooperative Groups and the CUDA programming model enabling thread blocks executing on multiple GPUs to cooperate and synchronize as they execute. This feature is available on GPUs with Pascal and higher architecture.&lt;/p&gt; &#xA;&lt;h4&gt;CUBLAS&lt;/h4&gt; &#xA;&lt;p&gt;CUBLAS (CUDA Basic Linear Algebra Subroutines) is a GPU-accelerated version of the BLAS library.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Interprocess Communication&lt;/h4&gt; &#xA;&lt;p&gt;IPC (Interprocess Communication) allows processes to share device pointers.&lt;/p&gt; &#xA;&lt;h4&gt;CUFFT&lt;/h4&gt; &#xA;&lt;p&gt;CUFFT (CUDA Fast Fourier Transform) is a GPU-accelerated FFT library.&lt;/p&gt; &#xA;&lt;h4&gt;CURAND&lt;/h4&gt; &#xA;&lt;p&gt;CURAND (CUDA Random Number Generation) is a GPU-accelerated RNG library.&lt;/p&gt; &#xA;&lt;h4&gt;CUSPARSE&lt;/h4&gt; &#xA;&lt;p&gt;CUSPARSE (CUDA Sparse Matrix) provides linear algebra subroutines used for sparse matrix calculations.&lt;/p&gt; &#xA;&lt;h4&gt;CUSOLVER&lt;/h4&gt; &#xA;&lt;p&gt;CUSOLVER library is a high-level package based on the CUBLAS and CUSPARSE libraries. It combines three separate libraries under a single umbrella, each of which can be used independently or in concert with other toolkit libraries. The intent ofCUSOLVER is to provide useful LAPACK-like features, such as common matrix factorization and triangular solve routines for dense matrices, a sparse least-squares solver and an eigenvalue solver. In addition cuSolver provides a new refactorization library useful for solving sequences of matrices with a shared sparsity pattern.&lt;/p&gt; &#xA;&lt;h4&gt;NPP&lt;/h4&gt; &#xA;&lt;p&gt;NPP (NVIDIA Performance Primitives) provides GPU-accelerated image, video, and signal processing functions.&lt;/p&gt; &#xA;&lt;h4&gt;NVGRAPH&lt;/h4&gt; &#xA;&lt;p&gt;NVGRAPH is a GPU-accelerated graph analytics library.&lt;/p&gt; &#xA;&lt;h4&gt;NVJPEG&lt;/h4&gt; &#xA;&lt;p&gt;NVJPEG library provides high-performance, GPU accelerated JPEG decoding functionality for image formats commonly used in deep learning and hyperscale multimedia applications.&lt;/p&gt; &#xA;&lt;h4&gt;NVRTC&lt;/h4&gt; &#xA;&lt;p&gt;NVRTC (CUDA RunTime Compilation) is a runtime compilation library for CUDA C++.&lt;/p&gt; &#xA;&lt;h4&gt;Stream Priorities&lt;/h4&gt; &#xA;&lt;p&gt;Stream Priorities allows the creation of streams with specified priorities. Stream Priorities is only available on GPUs with SM architecture of 3.5 or above.&lt;/p&gt; &#xA;&lt;h4&gt;Unified Virtual Memory&lt;/h4&gt; &#xA;&lt;p&gt;UVM (Unified Virtual Memory) enables memory that can be accessed by both the CPU and GPU without explicit copying between the two. UVM is only available on Linux and Windows systems.&lt;/p&gt; &#xA;&lt;h4&gt;16-bit Floating Point&lt;/h4&gt; &#xA;&lt;p&gt;FP16 is a 16-bit floating-point format. One bit is used for the sign, five bits for the exponent, and ten bits for the mantissa.&lt;/p&gt; &#xA;&lt;h4&gt;C++11 CUDA&lt;/h4&gt; &#xA;&lt;p&gt;NVCC support of &lt;a href=&#34;https://en.wikipedia.org/wiki/C++11&#34;&gt;C++11 features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors Guide&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your input on issues and suggestions for samples. At this time we are not accepting contributions from the public, check back here as we evolve our contribution model.&lt;/p&gt; &#xA;&lt;p&gt;We use Google C++ Style Guide for all the sources &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;https://google.github.io/styleguide/cppguide.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;Answers to frequently asked questions about CUDA can be found at &lt;a href=&#34;http://developer.nvidia.com/cuda-faq&#34;&gt;http://developer.nvidia.com/cuda-faq&lt;/a&gt; and in the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&#34;&gt;CUDA Toolkit Release Notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html&#34;&gt;CUDA Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/blog/?tags=accelerated-computing&#34;&gt;Accelerated Computing Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Teapot image is obtained from &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg&#34;&gt;Wikimedia&lt;/a&gt; and is licensed under the Creative Commons &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/2.0/deed.en&#34;&gt;Attribution-Share Alike 2.0&lt;/a&gt; Generic license. The image is modified for samples use cases.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emscripten-core/emscripten</title>
    <updated>2022-06-15T01:35:53Z</updated>
    <id>tag:github.com,2022-06-15:/emscripten-core/emscripten</id>
    <link href="https://github.com/emscripten-core/emscripten" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emscripten: An LLVM-to-WebAssembly Compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emscripten-core/emscripten/main/media/switch_logo.png&#34; alt=&#34;emscripten logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main project page: &lt;a href=&#34;https://emscripten.org&#34;&gt;https://emscripten.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub CI status: &lt;a href=&#34;https://circleci.com/gh/emscripten-core/emscripten/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/emscripten-core/emscripten.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chromium builder status: &lt;a href=&#34;https://ci.chromium.org/p/emscripten-releases&#34;&gt;emscripten-releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten compiles C and C++ to &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/LLVM&#34;&gt;LLVM&lt;/a&gt; and &lt;a href=&#34;https://github.com/WebAssembly/binaryen/&#34;&gt;Binaryen&lt;/a&gt;. Emscripten output can run on the Web, in Node.js, and in &lt;a href=&#34;https://v8.dev/blog/emscripten-standalone-wasm#running-in-wasm-runtimes&#34;&gt;wasm runtimes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Emscripten provides Web support for popular portable APIs such as OpenGL and SDL2, allowing complex graphical native applications to be ported, such as the &lt;a href=&#34;https://docs.unity3d.com/Manual/webgl-gettingstarted.html&#34;&gt;Unity game engine&lt;/a&gt; and &lt;a href=&#34;https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html&#34;&gt;Google Earth&lt;/a&gt;. It can probably port your codebase, too!&lt;/p&gt; &#xA;&lt;p&gt;While Emscripten mostly focuses on compiling C and C++ using &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt;, it can be integrated with other LLVM-using compilers (for example, Rust has Emscripten integration, with the &lt;code&gt;wasm32-unknown-emscripten&lt;/code&gt; and &lt;code&gt;asmjs-unknown-emscripten&lt;/code&gt; targets).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten is available under 2 licenses, the MIT license and the University of Illinois/NCSA Open Source License.&lt;/p&gt; &#xA;&lt;p&gt;Both are permissive open source licenses, with little if any practical difference between them.&lt;/p&gt; &#xA;&lt;p&gt;The reason for offering both is that (1) the MIT license is well-known and suitable for a compiler toolchain, while (2) LLVM&#39;s original license, the University of Illinois/NCSA Open Source License, was also offered to allow Emscripten&#39;s code to be integrated upstream into LLVM. The second reason became less important after Emscripten switched to the LLVM wasm backend, at which point there isn&#39;t any code we expect to move back and forth between the projects; also, LLVM relicensed to Apache 2.0 + exceptions meanwhile. In practice you can just consider Emscripten as MIT licensed (which allows you to do pretty much anything you want with a compiler, including commercial and non-commercial use).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;LICENSE&lt;/code&gt; for the full content of the licenses.&lt;/p&gt;</summary>
  </entry>
</feed>