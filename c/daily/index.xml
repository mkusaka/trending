<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-27T01:27:16Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>labwc/labwc</title>
    <updated>2023-09-27T01:27:16Z</updated>
    <id>tag:github.com,2023-09-27:/labwc/labwc</id>
    <link href="https://github.com/labwc/labwc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Wayland window-stacking compositor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;labwc&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;[&lt;a href=&#34;https://labwc.github.io/&#34;&gt;Website&lt;/a&gt;] [&lt;a href=&#34;https://github.com/labwc/labwc-scope#readme&#34;&gt;Scope&lt;/a&gt;] [&lt;a href=&#34;https://web.libera.chat/gamja/?channels=#labwc&#34;&gt;IRC&amp;nbsp;Channel&lt;/a&gt;] [&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/NEWS.md&#34;&gt;Release&amp;nbsp;Notes&lt;/a&gt;]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#1-project-description&#34;&gt;1. Project Description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#11-what-is-this&#34;&gt;1.1 What Is This?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#12-why&#34;&gt;1.2 Why&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#13-why-the-openbox-theme-specification&#34;&gt;1.3 Why The Openbox Theme Specification?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#14-very-high-level-scope&#34;&gt;1.4 Very High Level Scope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#15-videos&#34;&gt;1.5 Videos&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#16-screenshot&#34;&gt;1.6 Screenshot&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#2-build-and-installation&#34;&gt;2. Build and Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#3-configuration&#34;&gt;3. Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#4-theming&#34;&gt;4. Theming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#5-usage&#34;&gt;5. Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#51-gaming&#34;&gt;5.1 Gaming&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/#6-integration&#34;&gt;6. Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. Project Description&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 What Is This?&lt;/h3&gt; &#xA;&lt;p&gt;Labwc stands for Lab Wayland Compositor, where lab can mean any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sense of experimentation and treading new ground&lt;/li&gt; &#xA; &lt;li&gt;inspired by BunsenLabs and ArchLabs&lt;/li&gt; &#xA; &lt;li&gt;your favorite pet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Labwc is a &lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots&#34;&gt;wlroots&lt;/a&gt;-based window-stacking compositor for &lt;a href=&#34;https://wayland.freedesktop.org/&#34;&gt;wayland&lt;/a&gt;, inspired by &lt;a href=&#34;http://openbox.org/wiki/Help:Contents&#34;&gt;openbox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is light-weight and independent with a focus on simply stacking windows well and rendering some window decorations. It takes a no-bling/frills approach and says no to features such as icons (except window buttons), animations, decorative gradients and any other options not required to reasonably render common themes. It relies on clients for panels, screenshots, wallpapers and so on to create a full desktop environment.&lt;/p&gt; &#xA;&lt;p&gt;Labwc tries to stay in keeping with &lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlroots&#34;&gt;wlroots&lt;/a&gt; and &lt;a href=&#34;https://github.com/swaywm&#34;&gt;sway&lt;/a&gt; in terms of general approach and coding style.&lt;/p&gt; &#xA;&lt;p&gt;Labwc has no reliance on any particular Desktop Environment, Desktop Shell or session. Nor does it depend on any UI toolkits such as Qt or GTK.&lt;/p&gt; &#xA;&lt;h3&gt;1.2 Why?&lt;/h3&gt; &#xA;&lt;p&gt;Firstly, we believe that there is a need for a simple Wayland window-stacking compositor which strikes a balance between minimalism and bloat approximately at the level where Window Managers like Openbox reside in the X11 domain. Most of the core developers are accustomed to low resource Desktop Environments such as Mate/XFCE or standalone Window Managers such as Openbox under X11. Labwc aims to make a similar setup possible under Wayland, with small and independent components rather than a large, integrated software eco-system.&lt;/p&gt; &#xA;&lt;p&gt;Secondly, the Wayland community has achieved an amazing amount so far, and we want to help solve the unsolved problems to make Wayland viable for more people. We think that standardisation and de-fragmentation is a route to greater Wayland adoption, and wanting to play our part in this, Labwc only understands &lt;a href=&#34;https://gitlab.freedesktop.org/wayland/wayland-protocols&#34;&gt;wayland-protocols&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://gitlab.freedesktop.org/wlroots/wlr-protocols&#34;&gt;wlr-protocols&lt;/a&gt;, and it cannot be controlled with dbus, sway/i3/custom-IPC or other technology.&lt;/p&gt; &#xA;&lt;p&gt;Thirdly, it is important to us that scope is tightly controlled so that the compositor matures to production quality. On the whole, we value robustness, reliability, stability and simplicity over new features. Coming up with new ideas and features is easy - maintaining and stabilising them is not.&lt;/p&gt; &#xA;&lt;p&gt;Fourthly, we are of the view that a compositor should be boring in order to do its job well. In this regard we follow in the footsteps of &lt;a href=&#34;https://github.com/GNOME/metacity&#34;&gt;metacity&lt;/a&gt; which describes itself as a &#34;Boring window manager for the adult in you. Many window managers are like Marshmallow Froot Loops; Metacity is like Cheerios.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Finally, we think that an elegant solution to all of this does not need feel square and pixelated like something out of the 1990s, but should look contemporary and enable cutting-edge performance.&lt;/p&gt; &#xA;&lt;h3&gt;1.3 Why The Openbox Theme Specification?&lt;/h3&gt; &#xA;&lt;p&gt;In order to avoid reinventing configuration and theme syntaxes, the &lt;a href=&#34;http://openbox.org/wiki/Help:Contents&#34;&gt;openbox&lt;/a&gt; 3.6 specification is used. This does not mean that labwc is an openbox clone but rather that configuration files will look and feel familiar.&lt;/p&gt; &#xA;&lt;p&gt;Also, parsing GTK3+ and Qt themes for window decorations is very complicated, so using much simpler specs such as those used by openbox and xfwm makes sense for a compositor such as labwc, both in terms of implementation and for user modification.&lt;/p&gt; &#xA;&lt;p&gt;Openbox spec is somewhat of a stable standard considering how long it has remained unchanged for and how wide-spread its adoption is by lightweight distributions such as LXDE, LXQt, BunsenLabs, ArchLabs, Mabox and Raspian. Some widely used themes (for example Numix and Arc) have built-in support.&lt;/p&gt; &#xA;&lt;p&gt;We could have invented a whole new syntax, but that&#39;s not where we want to spend our effort.&lt;/p&gt; &#xA;&lt;h3&gt;1.4 Very High Level Scope&lt;/h3&gt; &#xA;&lt;p&gt;A lot of emphasis is put on code simplicity when considering features.&lt;/p&gt; &#xA;&lt;p&gt;The main development effort is focused on producing a solid foundation for a stacking compositor rather than adding configuration and theming options.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/labwc/labwc-scope#readme&#34;&gt;scope&lt;/a&gt; for full details on implemented features.&lt;/p&gt; &#xA;&lt;p&gt;High-level summary of items that Labwc supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Config files (rc.xml, autostart, environment, menu.xml)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Theme files and xbm icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic desktop and client menus&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HiDPI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wlroots protocols such as &lt;code&gt;output-management&lt;/code&gt;, &lt;code&gt;layer-shell&lt;/code&gt; and &lt;code&gt;foreign-toplevel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optionally xwayland&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Items which are &lt;em&gt;not&lt;/em&gt; intended to be implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Icons (except window buttons)&lt;/li&gt; &#xA; &lt;li&gt;Animations&lt;/li&gt; &#xA; &lt;li&gt;Gradients for decoration and menus&lt;/li&gt; &#xA; &lt;li&gt;Any theme option not required to reasonably render common themes (it is amazing how few options are actually required).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.5 Videos&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;video link&lt;/th&gt; &#xA;   &lt;th&gt;date&lt;/th&gt; &#xA;   &lt;th&gt;content&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://youtu.be/guBnx18EQiA&#34;&gt;Video (2:48)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;31-Oct-2022&lt;/td&gt; &#xA;   &lt;td&gt;0.6.0 release video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://youtu.be/AU_M3n_FS-E&#34;&gt;Video (1:10)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;05-Aug-2021&lt;/td&gt; &#xA;   &lt;td&gt;window gymnastics, theming and waybar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://youtu.be/rE1bQjSVJzg&#34;&gt;Video (3:42)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;25-Feb-2021&lt;/td&gt; &#xA;   &lt;td&gt;setting background and themes; xwayland/xdg-shell windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;1.6 Screenshot&lt;/h3&gt; &#xA;&lt;p&gt;The obligatory screenshot:&lt;/p&gt; &#xA;&lt;a href=&#34;https://i.imgur.com/vOelinT.png&#34;&gt; &lt;img src=&#34;https://i.imgur.com/vOelinTl.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;2. Build and Installation&lt;/h2&gt; &#xA;&lt;p&gt;To build, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup build/&#xA;meson compile -C build/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run-time dependencies include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wlroots, wayland, libinput, xkbcommon&lt;/li&gt; &#xA; &lt;li&gt;libxml2, cairo, pango, glib-2.0&lt;/li&gt; &#xA; &lt;li&gt;libpng, librsvg-2.0&lt;/li&gt; &#xA; &lt;li&gt;xwayland, xcb (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Build dependencies include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;meson, ninja, gcc/clang&lt;/li&gt; &#xA; &lt;li&gt;wayland-protocols&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Disable xwayland with &lt;code&gt;meson -Dxwayland=disabled build/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For OS/distribution specific details see see &lt;a href=&#34;https://github.com/labwc/labwc/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;3. Configuration&lt;/h2&gt; &#xA;&lt;p&gt;User config files are located at &lt;code&gt;${XDG_CONFIG_HOME:-$HOME/.config/labwc/}&lt;/code&gt; with the following five files being used: &lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/docs/rc.xml.all&#34;&gt;rc.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/docs/menu.xml&#34;&gt;menu.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/docs/autostart&#34;&gt;autostart&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/docs/environment&#34;&gt;environment&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/docs/themerc&#34;&gt;themerc-override&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;labwc --reconfigure&lt;/code&gt; to reload configuration and theme.&lt;/p&gt; &#xA;&lt;p&gt;For a step-by-step initial configuration guide, see &lt;a href=&#34;https://labwc.github.io/getting-started.html&#34;&gt;getting-started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;4. Theming&lt;/h2&gt; &#xA;&lt;p&gt;Themes are located at &lt;code&gt;~/.local/share/themes/\&amp;lt;theme-name\&amp;gt;/openbox-3/&lt;/code&gt; or equivalent &lt;code&gt;XDG_DATA_{DIRS,HOME}&lt;/code&gt; location in accordance with freedesktop XDG directory specification.&lt;/p&gt; &#xA;&lt;p&gt;For full theme options, see &lt;a href=&#34;https://labwc.github.io/labwc-theme.5.html&#34;&gt;labwc-theme(5)&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/labwc/labwc/master/docs/themerc&#34;&gt;themerc&lt;/a&gt; example file.&lt;/p&gt; &#xA;&lt;p&gt;For themes, search the internet for &#34;openbox themes&#34; and place them in &lt;code&gt;~/.local/share/themes/&lt;/code&gt;. Some good starting points include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/addy-dclxvi/openbox-theme-collections&#34;&gt;https://github.com/addy-dclxvi/openbox-theme-collections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/the-zero885/Lubuntu-Arc-Round-Openbox-Theme&#34;&gt;https://github.com/the-zero885/Lubuntu-Arc-Round-Openbox-Theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/archlabslinux/themes/&#34;&gt;https://bitbucket.org/archlabslinux/themes/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BunsenLabs/bunsen-themes&#34;&gt;https://github.com/BunsenLabs/bunsen-themes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5. Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/labwc [-s &amp;lt;command&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; If you are running on &lt;strong&gt;NVIDIA&lt;/strong&gt;, you will need the &lt;code&gt;nvidia-drm.modeset=1&lt;/code&gt; kernel parameter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have not created an rc.xml config file, default bindings will be:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;combination&lt;/th&gt; &#xA;   &lt;th&gt;action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;-&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;activate next window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;super&lt;/code&gt;-&lt;code&gt;return&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alacritty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;-&lt;code&gt;F3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bemenu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;-&lt;code&gt;F4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;close window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;super&lt;/code&gt;-&lt;code&gt;a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle maximize&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;-&lt;code&gt;mouse-left&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;-&lt;code&gt;mouse-right&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;resize window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;-&lt;code&gt;arrow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move window to edge&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;super&lt;/code&gt;-&lt;code&gt;arrow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;resize window to fill half the output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XF86_AudioLowerVolume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;amixer sset Master 5%-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XF86_AudioRaiseVolume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;amixer sset Master 5%+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XF86_AudioMute&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;amixer sset Master toggle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XF86_MonBrightnessUp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;brightnessctl set +10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XF86_MonBrightnessDown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;brightnessctl set 10%-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A root-menu can be opened by clicking on the desktop.&lt;/p&gt; &#xA;&lt;h3&gt;5.1 Gaming&lt;/h3&gt; &#xA;&lt;p&gt;Cursor confinement is supported from version &lt;code&gt;0.6.2&lt;/code&gt;. If using older versions, use a nested &lt;a href=&#34;https://github.com/Plagman/gamescope&#34;&gt;gamescope&lt;/a&gt; instance for gaming. It can be added to steam via game launch option: &lt;code&gt;gamescope -f -- %command%&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;6. Integration&lt;/h2&gt; &#xA;&lt;p&gt;Suggested apps to use with labwc:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screen shooter: &lt;a href=&#34;https://github.com/emersion/grim&#34;&gt;grim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Screen recorder: &lt;a href=&#34;https://github.com/ammen99/wf-recorder&#34;&gt;wf-recorder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Background image: &lt;a href=&#34;https://github.com/swaywm/swaybg&#34;&gt;swaybg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Panel: &lt;a href=&#34;https://github.com/Alexays/Waybar&#34;&gt;waybar&lt;/a&gt;, &lt;a href=&#34;https://codeberg.org/dnkl/yambar&#34;&gt;yambar&lt;/a&gt;, &lt;a href=&#34;https://sr.ht/~leon_plickat/LavaLauncher&#34;&gt;lavalauncher&lt;/a&gt;, &lt;a href=&#34;https://github.com/LBCrion/sfwbar&#34;&gt;sfwbar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launchers: &lt;a href=&#34;https://github.com/Cloudef/bemenu&#34;&gt;bemenu&lt;/a&gt;, &lt;a href=&#34;https://codeberg.org/dnkl/fuzzel&#34;&gt;fuzzel&lt;/a&gt;, &lt;a href=&#34;https://hg.sr.ht/~scoopta/wofi&#34;&gt;wofi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output managers: &lt;a href=&#34;https://git.sr.ht/~leon_plickat/wlopm&#34;&gt;wlopm&lt;/a&gt;, &lt;a href=&#34;https://sr.ht/~emersion/kanshi/&#34;&gt;kanshi&lt;/a&gt;, &lt;a href=&#34;https://sr.ht/~emersion/wlr-randr/&#34;&gt;wlr-randr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Screen locker: &lt;a href=&#34;https://github.com/swaywm/swaylock&#34;&gt;swaylock&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://labwc.github.io/integration.html&#34;&gt;integration&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shauninman/MinUI</title>
    <updated>2023-09-27T01:27:16Z</updated>
    <id>tag:github.com,2023-09-27:/shauninman/MinUI</id>
    <link href="https://github.com/shauninman/MinUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A custom launcher for the Trimui Smart, Miyoo Mini(s), and Anbernic RG35XX with more to come...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MinUI&lt;/h1&gt; &#xA;&lt;p&gt;MinUI is a focused, custom launcher for the Trimui Smart, Miyoo Mini(s), and Anbernic RG35XX.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shauninman/MinUI/main/github/minui-main.png&#34; width=&#34;320&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shauninman/MinUI/main/github/minui-menu-gbc.png&#34; width=&#34;320&#34;&gt;&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/shauninman/MinUI/main/github/&#34;&gt;more screenshots&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple launcher, simple SD card&lt;/li&gt; &#xA; &lt;li&gt;No settings or configuration&lt;/li&gt; &#xA; &lt;li&gt;No boxart, themes, or distractions&lt;/li&gt; &#xA; &lt;li&gt;Automatically hides hidden files and extension and region/version cruft in display names&lt;/li&gt; &#xA; &lt;li&gt;Consistent in-emulator menu with quick access to save states, disc changing, and emulator options&lt;/li&gt; &#xA; &lt;li&gt;Automatically sleeps after 30 seconds or press POWER to sleep (and wake)&lt;/li&gt; &#xA; &lt;li&gt;Automatically powers off while asleep after two minutes or hold POWER for one second&lt;/li&gt; &#xA; &lt;li&gt;Automatically resumes right where you left off if powered off while in-game, manually or while asleep&lt;/li&gt; &#xA; &lt;li&gt;Resume from manually created, last used save state by pressing X in the launcher instead of A&lt;/li&gt; &#xA; &lt;li&gt;Streamlined emulator frontend (minarch + libretro cores)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://github.com/shauninman/MinUI/releases&#34;&gt;grab the latest version here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Devices with a physical power switch use MENU to sleep and wake instead of POWER. Once asleep the device can safely be powered off manually with the switch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Legacy versions&lt;/h2&gt; &#xA;&lt;p&gt;The original Trimui Model S version of MinUI has been archived &lt;a href=&#34;https://github.com/shauninman/MinUI-Legacy-Trimui-Model-S&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The sequel, MiniUI for the Miyoo Mini, has been archived &lt;a href=&#34;https://github.com/shauninman/MiniUI-Legacy-Miyoo-Mini&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The return of MinUI for the Anbernic RG35XX has been archived &lt;a href=&#34;https://github.com/shauninman/MinUI-Legacy-RG35XX&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PortAudio/portaudio</title>
    <updated>2023-09-27T01:27:16Z</updated>
    <id>tag:github.com,2023-09-27:/PortAudio/portaudio</id>
    <link href="https://github.com/PortAudio/portaudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PortAudio is a cross-platform, open-source C language library for real-time audio input and output.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PortAudio - portable audio I/O library&lt;/h1&gt; &#xA;&lt;p&gt;PortAudio is a portable audio I/O library designed for cross-platform support of audio. It uses either a callback mechanism to request audio processing, or blocking read/write calls to buffer data between the native audio subsystem and the client. Audio can be processed in various formats, including 32 bit floating point, and will be converted to the native format internally.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation is available at &lt;a href=&#34;http://www.portaudio.com/docs/&#34;&gt;http://www.portaudio.com/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or at &lt;code&gt;/doc/html/index.html&lt;/code&gt; after running Doxygen.&lt;/li&gt; &#xA; &lt;li&gt;Also see &lt;code&gt;src/common/portaudio.h&lt;/code&gt; for the API spec.&lt;/li&gt; &#xA; &lt;li&gt;And see the &lt;code&gt;examples/&lt;/code&gt; and &lt;code&gt;test/&lt;/code&gt; directories for many examples of usage. (We suggest &lt;code&gt;examples/paex_saw.c&lt;/code&gt; for an example.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For information on compiling programs with PortAudio, please see the tutorial at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://portaudio.com/docs/v19-doxydocs/tutorial_start.html&#34;&gt;http://portaudio.com/docs/v19-doxydocs/tutorial_start.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have an active mailing list for user and developer discussions. Please feel free to join. See &lt;a href=&#34;http://www.portaudio.com&#34;&gt;http://www.portaudio.com&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Important Files and Folders:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;include/portaudio.h     = header file for PortAudio API. Specifies API.&#x9;&#xA;src/common/             = platform independent code, host independent &#xA;                          code for all implementations.&#xA;src/os                  = os specific (but host api neutral) code&#xA;src/hostapi             = implementations for different host apis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Host API Implementations:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;src/hostapi/alsa        = Advanced Linux Sound Architecture (ALSA)&#xA;src/hostapi/asihpi      = AudioScience HPI&#xA;src/hostapi/asio        = ASIO for Windows and Macintosh&#xA;src/hostapi/audioio     = /dev/audio (Solaris/NetBSD Audio)&#xA;src/hostapi/coreaudio   = Macintosh Core Audio for OS X&#xA;src/hostapi/dsound      = Windows Direct Sound&#xA;src/hostapi/jack        = JACK Audio Connection Kit&#xA;src/hostapi/oss         = Unix Open Sound System (OSS)&#xA;src/hostapi/wasapi      = Windows Vista WASAPI&#xA;src/hostapi/wdmks       = Windows WDM Kernel Streaming&#xA;src/hostapi/wmme        = Windows MultiMedia Extensions (MME)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test Programs:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;test/pa_fuzz.c         = guitar fuzz box&#xA;test/pa_devs.c         = print a list of available devices&#xA;test/pa_minlat.c       = determine minimum latency for your machine&#xA;test/paqa_devs.c       = self test that opens all devices&#xA;test/paqa_errs.c       = test error detection and reporting&#xA;test/patest_clip.c     = hear a sine wave clipped and unclipped&#xA;test/patest_dither.c   = hear effects of dithering (extremely subtle)&#xA;test/patest_pink.c     = fun with pink noise&#xA;test/patest_record.c   = record and playback some audio&#xA;test/patest_maxsines.c = how many sine waves can we play? Tests Pa_GetCPULoad().&#xA;test/patest_sine.c     = output a sine wave in a simple PA app&#xA;test/patest_sync.c     = test synchronization of audio and video&#xA;test/patest_wire.c     = pass input to output, wire simulator&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>