<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-05T01:30:00Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xdp-project/xdp-tutorial</title>
    <updated>2023-01-05T01:30:00Z</updated>
    <id>tag:github.com,2023-01-05:/xdp-project/xdp-tutorial</id>
    <link href="https://github.com/xdp-project/xdp-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;XDP tutorial&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- fill-column: 76; -&lt;/em&gt;-&lt;/h1&gt; &#xA;&lt;p&gt;#+TITLE: XDP Programming Hands-On Tutorial #+OPTIONS: ^:nil&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a tutorial that aims to introduce you to the basic steps needed to effectively write programs for the eXpress Data Path (XDP) system in the Linux kernel, which offers high-performance programmable packet processing integrated with the kernel.&lt;/p&gt; &#xA;&lt;p&gt;The tutorial is composed of a number of lessons, each of which has its own repository. Start with the lessons starting with &#34;basicXX&#34;, and read the README.org file in each repository for instructions for that lesson.&lt;/p&gt; &#xA;&lt;p&gt;Keep reading below for an introduction to XDP and an overview of what you will learn in this tutorial, or jump [[file:basic01-xdp-pass/README.org][straight to the first lesson]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#introduction][Introduction]]&lt;/li&gt; &#xA; &lt;li&gt;[[#first-step-setup-dependencies][First step: Setup dependencies]]&lt;/li&gt; &#xA; &lt;li&gt;[[#how-the-lessons-are-organised][How the lessons are organised]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#basic-setup-lessons][Basic setup lessons]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#packet-processing-lessons][Packet processing lessons]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#advanced-lessons][Advanced lessons]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;XDP is a part of the upstream Linux kernel, and enables users to install packet processing programs into the kernel, that will be executed for each arriving packet, before the kernel does any other processing on the data. The programs are written in restricted C, and compiled into the eBPF byte code format that is executed and JIT-compiled in the kernel, after being verified for safety. This approach offers great flexibility and high performance, and integrates well with the rest of the system. For a general introduction to XDP, read [[https://github.com/xdp-project/xdp-paper/blob/master/xdp-the-express-data-path.pdf][the academic paper (pdf)]], or the [[https://cilium.readthedocs.io/en/latest/bpf/][Cilium BPF reference guide]].&lt;/p&gt; &#xA;&lt;p&gt;This tutorial aims to be a practical introduction to the different steps needed to successfully write useful programs using the XDP system. We assume you have a basic understanding of Linux networking and how to configure it with the =iproute2= suite of tools, but assume no prior experience with eBPF or XDP. Prior programming experience is also helpful: the lessons are all written in C and they include some basic pointer arithmetic and aliasing.&lt;/p&gt; &#xA;&lt;p&gt;The tutorial is a work in progress, and was initially created for use as a live tutorial at the [[https://www.netdevconf.org/0x13/session.html?tutorial-XDP-hands-on][Netdev Conference]] in Prague in March 2019. Since the kernel BPF subsystem continues to develop at a rapid pace, this tutorial has not kept up with all developments. However, everything presented here will work with recent kernels, and this tutorial functions as a self-contained introduction that anyone can go through to learn the XDP basics. Input and contributions to advance towards this goal are very welcome; just open issues or pull requests in the [[https://github.com/xdp-project/xdp-tutorial/][Github repository]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First step: Setup dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before you can start completing step in this tutorial, you will need to install a few dependencies on your system. These are described in [[file:setup_dependencies.org]].&lt;/p&gt; &#xA;&lt;p&gt;We also provide a helper script that will set up a test environment with virtual interfaces for you to test your code on. This is introduced in the basic lessons, and also has [[file:testenv/README.org][it&#39;s own README file]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How the lessons are organised The tutorial is organised into a number of lessons; each lesson has its own subdirectory, and the lessons are grouped by category:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic setup (directories starting with basicXX)&lt;/li&gt; &#xA; &lt;li&gt;Packet processing (directories starting with packetXX)&lt;/li&gt; &#xA; &lt;li&gt;Advanced topics (directories starting with advancedXX)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend you start with the &#34;basic&#34; lessons, and follow the lessons in each category in numerical order. Read the README.org file in each lesson directory for instructions on how to complete the lesson.&lt;/p&gt; &#xA;&lt;p&gt;** Basic setup lessons We recommend you start with these lessons, as they will teach you how to compile and inspect the eBPF programs that will implement your packet processing code, how to load them into the kernel, and how to inspect the state afterwards. As part of the basic lessons you will also be writing an eBPF program loader that you will need in subsequent lessons.&lt;/p&gt; &#xA;&lt;p&gt;** Packet processing lessons Once you have the basics figured out and know how to load programs into the kernel, you are ready to start processing some packets. The lessons in the packet processing category will teach you about the different steps needed to process data packets, including parsing, rewriting, instructing the kernel about what to do with the packet after processing, and how to use helpers to access existing kernel functionality.&lt;/p&gt; &#xA;&lt;p&gt;** Advanced lessons After having completed the lessons in the basic and packet processing categories, you should be all set to write your first real XDP program that will do useful processing of the packets coming into the system. However, there are some slightly more advanced topics that will probably be useful once you start expanding your program to do more things.&lt;/p&gt; &#xA;&lt;p&gt;The topics covered in the advanced lessons include how to make eBPF programs in other parts of the kernel interact with your XDP program, passing metadata between programs, best practices for interacting with userspace and kernel features, and how to run multiple XDP programs on a single interface.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skuep/AIOC</title>
    <updated>2023-01-05T01:30:00Z</updated>
    <id>tag:github.com,2023-01-05:/skuep/AIOC</id>
    <link href="https://github.com/skuep/AIOC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ham Radio All-in-one-Cable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AIOC&lt;/h1&gt; &#xA;&lt;p&gt;This is the Ham Radio &lt;em&gt;All-in-one-Cable&lt;/em&gt;. &lt;strong&gt;It is currently in beta testing phase - Be wary!&lt;/strong&gt;. Please read this README carefully before ordering anything.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/doc/images/k1-aioc-wouxun.jpg?raw=true&#34; alt=&#34;AIOC with Wouxun and Direwolf&#34; title=&#34;AIOC with Wouxun and Direwolf&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What does it do?&lt;/h2&gt; &#xA;&lt;p&gt;The AIOC is a small adapter with a USB-C connector that enumerates itself as a sound-card (e.g. for APRS purposes) and a virtual tty (&#34;COM Port&#34;) for programming and asserting the PTT (Push-To-Talk).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cheap &amp;amp; Hackable Digital mode USB interface (similar to digirig, mobilinkd, etc...)&lt;/li&gt; &#xA; &lt;li&gt;Programming Cable Function via virtual Serial Port&lt;/li&gt; &#xA; &lt;li&gt;Compact form-factor (DIY overmolded enclosure is currently TBD)&lt;/li&gt; &#xA; &lt;li&gt;Based on easy-to-hack STM32F302 with internal ADC/DAC (Programmable via USB bootloader using &lt;a href=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/#how-to-program&#34;&gt;DFU&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tested with Wouxun UV-9D Mate and Baofeng UV-5R&lt;/li&gt; &#xA; &lt;li&gt;Can support Dual-PTT HTs&lt;/li&gt; &#xA; &lt;li&gt;Supports at least: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/#notes-on-direwolf&#34;&gt;Direwolf&lt;/a&gt; as AX.25 modem/APRS en+decoder/...&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/#notes-on-aprsdroid&#34;&gt;APRSdroid&lt;/a&gt; as APRS en+decoder&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/#notes-on-chirp&#34;&gt;CHIRP&lt;/a&gt; for programming&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Future Work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overmolded enclosure design (DIY using 3D-Printed mold and Resin/Hotglue)&lt;/li&gt; &#xA; &lt;li&gt;Maybe integrate a TNC Modem with KISS interface? (I am not sure if that is worth the effort)&lt;/li&gt; &#xA; &lt;li&gt;Maybe change the USB-C connector type due to sporadic connection issues with JLCPCB&#39;s SMT reflow process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/doc/images/k1-aioc-photo.jpg?raw=true&#34; alt=&#34;Top side of PCB&#34; title=&#34;Top side of PCB&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How To Fab&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to JLCPCB.com and upload the GERBER-k1-aioc.zip package (under &lt;code&gt;kicad/k1-aioc/jlcpcb&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select PCB Thickness 1.2mm (that is what I recommend with the TRS connectors I used)&lt;/li&gt; &#xA;   &lt;li&gt;You may want to select LeadFree HASL&lt;/li&gt; &#xA;   &lt;li&gt;Select Silkscreen/Soldermask color to your liking&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check &#34;PCB Assembly&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PCBA Type &#34;Economic&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Assembly Side &#34;Top Side&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Tooling Holes &#34;Added by Customer&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Press Confirm&lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Add BOM File&#34; and upload &lt;code&gt;BOM-k1-aioc.csv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Add CPL File&#34; and upload &lt;code&gt;POS-k1-aioc.csv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Press Next&lt;/li&gt; &#xA;   &lt;li&gt;Look Through components, see if something is missing or problematic and press Next&lt;/li&gt; &#xA;   &lt;li&gt;Check everything looks roughly good (rotations are already baked-in and should be correct). Save to Cart&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This gives you 5 (or more) SMD assembled AIOC. The only thing left to do is soldering on the TRS connectors (see &lt;a href=&#34;https://raw.githubusercontent.com/skuep/AIOC/master/#how-to-build&#34;&gt;here&lt;/a&gt;). The total bill should be around 60$ US for 5 pieces plus tax and shipping from China.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build&lt;/h2&gt; &#xA;&lt;p&gt;This is the process I use for building. See photographs in &lt;code&gt;images&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to use Monacor PG-204P and PG-203P or compatible TRS connectors (2 solder lugs and a big tab for the sleeve connection)&lt;/li&gt; &#xA; &lt;li&gt;Cut the 2.5mm and 3.5mm TRS sleeve tab where the hole is located&lt;/li&gt; &#xA; &lt;li&gt;Put both TRS connectors into the solder guide (or a cheap HT that you don&#39;t mind potentially damaging). Make sure, that they are seated all the way in&lt;/li&gt; &#xA; &lt;li&gt;Insert the AIOC PCB into the solder guide&lt;/li&gt; &#xA; &lt;li&gt;Solder sleeve tab on the back side for both TRS connectors first&lt;/li&gt; &#xA; &lt;li&gt;Turn around PCB and solder remaining solder lugs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Program&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Short outermost pins on the programming header. This will set the device into bootloader mode in the next step.&lt;/li&gt; &#xA; &lt;li&gt;Connect USB-C cable to the AIOC PCB&lt;/li&gt; &#xA; &lt;li&gt;Use a tool like &lt;code&gt;dfu-util&lt;/code&gt; to program the Release Binary like this: &lt;pre&gt;&lt;code&gt;dfu-util -a 0 -s 0x08000000 -D aioc-fw.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note&lt;/strong&gt; that a &lt;code&gt;libusb&lt;/code&gt; driver is required for this. On Windows there are additional steps required as shown &lt;a href=&#34;https://yeswolf.github.io/dfu&#34;&gt;here&lt;/a&gt; (&lt;em&gt;DFuSe Utility and dfu-util&lt;/em&gt;). On other operating systems (e.g. Linux, MacOS), this just works ™ (provided libusb is installed on your system).&lt;/li&gt; &#xA; &lt;li&gt;Remove short from first step, unplug and replug the device, it should now enumerate as the AIOC device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;p&gt;The serial interface of the AIOC enumerates as a regular COM (Windows) or ttyACM port (Linux) and can be used as such for programming the radio as well as PTT (Asserted on RTS=1 and DTR=0).&lt;/p&gt; &#xA;&lt;p&gt;The soundcard interface of the AIOC gives access to the audio data channels. It has one mono microphone channel and one mono speaker channel and currently supports the following baudrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;48000 Hz (preferred)&lt;/li&gt; &#xA; &lt;li&gt;24000 Hz&lt;/li&gt; &#xA; &lt;li&gt;22050 Hz (specifically for APRSdroid, has approx. 90 ppm of frequency error)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;USB HID based PTT control (and general configuration of the AIOC) is currently on the idea list. For further discussion go to GitHub issues.&lt;/p&gt; &#xA;&lt;h2&gt;Notes on Direwolf&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the regular setup guide with direwolf to determine the correct audio device to use&lt;/li&gt; &#xA; &lt;li&gt;Configure the device as follows &lt;pre&gt;&lt;code&gt;[...]&#xA;ADEVICE  plughw:&amp;lt;x&amp;gt;,0&#xA;ARATE 48000&#xA;[...]&#xA;PTT &amp;lt;port&amp;gt; RTS -DTR&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes on APRSdroid&lt;/h2&gt; &#xA;&lt;p&gt;APRSdroid support has been added by AIOC by implementing support for the fixed 22050 Hz sample rate that APRSdroid requires. It is important to notice, that the exact sample rate can not be achieved by the hardware, due to the 8 MHz crystal. The actual sample rate used is 22052 Hz (which represents around 90 ppm of error). From my testing this does not seem to be a problem for APRS at all.&lt;/p&gt; &#xA;&lt;p&gt;However, since APRSdroid does not have any PTT control, sending data is currently not possible using the AIOC. See &lt;a href=&#34;https://github.com/ge0rg/aprsdroid/issues/324&#34;&gt;https://github.com/ge0rg/aprsdroid/issues/324&lt;/a&gt;. My previous experience is, that the Android kernel brings support for ttyACM devices (which is perfect for the AIOC) so implementing this feature for APRSdroid should theoretically be no problem.&lt;/p&gt; &#xA;&lt;p&gt;Ideas such as implementing a digital-modes-spefic VOX-emulation to workaround this problem and let the AIOC activate the PTT automatically are currently being considered. Voice your opinion and ideas in the GitHub issues if this seems interesting to you.&lt;/p&gt; &#xA;&lt;h2&gt;Notes on CHIRP&lt;/h2&gt; &#xA;&lt;p&gt;CHIRP is a very popuplar open-source programming software that supports a very wide array of HT radios. You can use CHIRP just as you would like with a regular programming cable.&lt;/p&gt; &#xA;&lt;p&gt;Download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start CHIRP&lt;/li&gt; &#xA; &lt;li&gt;Select Radio-&amp;gt;Download from Radio&lt;/li&gt; &#xA; &lt;li&gt;Select the AIOC COM/ttyACM port and start&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Upload:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select Radio-&amp;gt;Upload to Radio&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s it&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kkos/oniguruma</title>
    <updated>2023-01-05T01:30:00Z</updated>
    <id>tag:github.com,2023-01-05:/kkos/oniguruma</id>
    <link href="https://github.com/kkos/oniguruma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;regular expression library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kkos/oniguruma&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kkos/oniguruma.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/kkos/oniguruma/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/kkos/oniguruma.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Code Quality: Cpp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/kkos/oniguruma/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/kkos/oniguruma.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#oniguruma&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/oniguruma.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.trust-in-soft.com/projects/kkos/oniguruma&#34;&gt;&lt;img src=&#34;https://ci.trust-in-soft.com/projects/kkos/oniguruma.svg?branch=master&#34; alt=&#34;TrustInSoft CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Oniguruma&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Since 2020, Oniguruma has been under attack on Google search in Japan.&lt;/strong&gt; &lt;a href=&#34;https://github.com/kkos/oniguruma/issues/234&#34;&gt;(Issue #234)&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kkos/oniguruma&#34;&gt;https://github.com/kkos/oniguruma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oniguruma is a modern and flexible regular expressions library. It encompasses features from different regular expression implementations that traditionally exist in different languages.&lt;/p&gt; &#xA;&lt;p&gt;Character encoding can be specified per regular expression object.&lt;/p&gt; &#xA;&lt;p&gt;Supported character encodings:&lt;/p&gt; &#xA;&lt;p&gt;ASCII, UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, UTF-32LE, EUC-JP, EUC-TW, EUC-KR, EUC-CN, Shift_JIS, Big5, GB18030, KOI8-R, CP1251, ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8, ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14, ISO-8859-15, ISO-8859-16&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GB18030: contributed by KUBO Takehiro&lt;/li&gt; &#xA; &lt;li&gt;CP1251: contributed by Byte&lt;/li&gt; &#xA; &lt;li&gt;doc/SYNTAX.md: contributed by seanofw&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notice (from 6.9.6)&lt;/h2&gt; &#xA;&lt;p&gt;When using configure script, if you have the POSIX API enabled in an earlier version (disabled by default in 6.9.5) and you need application binary compatibility with the POSIX API, specify &#34;--enable-binary-compatible-posix-api=yes&#34; instead of &#34;--enable-posix-api=yes&#34;. Starting in 6.9.6, &#34;--enable-posix-api=yes&#34; only supports source-level compatibility for 6.9.5 and earlier about POSIX API. (Issue #210)&lt;/p&gt; &#xA;&lt;h2&gt;Master branch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Unicode version 15.0.0&lt;/li&gt; &#xA; &lt;li&gt;NEW API: ONIG_OPTION_MATCH_WHOLE_STRING&lt;/li&gt; &#xA; &lt;li&gt;Fixed: (?I) option was not enabled for character classes (Issue #264).&lt;/li&gt; &#xA; &lt;li&gt;Changed specification to check for incorrect POSIX bracket (Issue #253).&lt;/li&gt; &#xA; &lt;li&gt;Changed [[:punct:]] in Unicode encodings to be compatible with POSIX definition. (Issue #268)&lt;/li&gt; &#xA; &lt;li&gt;Fixed: ONIG_OPTION_FIND_LONGEST behavior&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 6.9.8&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Unicode version 14.0.0&lt;/li&gt; &#xA; &lt;li&gt;Whole options &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(?C) : ONIG_OPTION_DONT_CAPTURE_GROUP&lt;/li&gt; &#xA;   &lt;li&gt;(?I) : ONIG_OPTION_IGNORECASE_IS_ASCII&lt;/li&gt; &#xA;   &lt;li&gt;(?L) : ONIG_OPTION_FIND_LONGEST&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fixed some problems found by OSS-Fuzz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 6.9.7&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NEW API: ONIG_OPTION_CALLBACK_EACH_MATCH&lt;/li&gt; &#xA; &lt;li&gt;NEW API: ONIG_OPTION_IGNORECASE_IS_ASCII&lt;/li&gt; &#xA; &lt;li&gt;NEW API: ONIG_SYNTAX_PYTHON&lt;/li&gt; &#xA; &lt;li&gt;Fixed some problems found by OSS-Fuzz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 6.9.6&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NEW: configure option --enable-binary-compatible-posix-api=[yes/no]&lt;/li&gt; &#xA; &lt;li&gt;NEW API: Limiting the maximum number of calls of subexp-call&lt;/li&gt; &#xA; &lt;li&gt;NEW API: ONIG_OPTION_NOT_BEGIN_STRING / NOT_END_STRING / NOT_BEGIN_POSITION&lt;/li&gt; &#xA; &lt;li&gt;Fixed behavior of ONIG_OPTION_NOTBOL / NOTEOL&lt;/li&gt; &#xA; &lt;li&gt;Fixed many problems found by OSS-Fuzz&lt;/li&gt; &#xA; &lt;li&gt;Fixed many problems found by Coverity&lt;/li&gt; &#xA; &lt;li&gt;Fixed CVE-2020-26159 (This turned out not to be a problem later. #221)&lt;/li&gt; &#xA; &lt;li&gt;Under cygwin and mingw, generate and install the libonig.def file (Issue #220)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 6.9.5 revised 1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed Issue #192&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 6.9.5&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;POSIX API disabled by default for Unix (* Enabled by: configure --enable-posix-api=yes)&lt;/li&gt; &#xA; &lt;li&gt;Update Unicode version 13.0.0&lt;/li&gt; &#xA; &lt;li&gt;NEW: Code point sequence notation \x{HHHH HHHH ...}, \o{OOOO OOOO ...}&lt;/li&gt; &#xA; &lt;li&gt;NEW API: retry limit in search functions&lt;/li&gt; &#xA; &lt;li&gt;NEW API: maximum nesting level of subexp call&lt;/li&gt; &#xA; &lt;li&gt;Fixed behavior of isolated options in Perl and Java syntaxes. /...(?i).../&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD license.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Case 1: Linux distribution packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora: &lt;code&gt;dnf install oniguruma-devel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RHEL/CentOS: &lt;code&gt;yum install oniguruma&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian/Ubuntu: &lt;code&gt;apt install libonig5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch: &lt;code&gt;pacman -S oniguruma&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;openSUSE: &lt;code&gt;zypper install oniguruma&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Case 2: Manual compilation on Linux, Unix, and Cygwin platform&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;autoreconf -vfi (* case: configure script is not found.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;./configure&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;make&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;make install&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;uninstall&lt;/p&gt; &lt;p&gt;make uninstall&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;configuration check&lt;/p&gt; &lt;p&gt;onig-config --cflags onig-config --libs onig-config --prefix onig-config --exec-prefix&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Case 3: Windows 64/32bit platform (Visual Studio)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;build library&lt;/p&gt; &lt;p&gt;.\make_win.bat&lt;/p&gt; &lt;p&gt;onig_s.lib: static link library onig.dll: dynamic link library&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;make test programs&lt;/p&gt; &lt;p&gt;.\make_win.bat all-test&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can build and install oniguruma using &lt;a href=&#34;https://github.com/microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/Microsoft/vcpkg.git&#34;&gt;https://github.com/Microsoft/vcpkg.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cd vcpkg&lt;/li&gt; &#xA; &lt;li&gt;./bootstrap-vcpkg.bat&lt;/li&gt; &#xA; &lt;li&gt;./vcpkg integrate install&lt;/li&gt; &#xA; &lt;li&gt;./vcpkg install oniguruma&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The oniguruma port in vcpkg is kept up to date by microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Regular Expressions&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kkos/oniguruma/master/doc/RE&#34;&gt;doc/RE&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/kkos/oniguruma/master/doc/RE.ja&#34;&gt;doc/RE.ja&lt;/a&gt; for Japanese.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Include oniguruma.h in your program. (Oniguruma API) See doc/API for Oniguruma API.&lt;/p&gt; &#xA;&lt;p&gt;If you want to disable UChar type (== unsigned char) definition in oniguruma.h, define ONIG_ESCAPE_UCHAR_COLLISION and then include oniguruma.h.&lt;/p&gt; &#xA;&lt;p&gt;If you want to disable regex_t type definition in oniguruma.h, define ONIG_ESCAPE_REGEX_T_COLLISION and then include oniguruma.h.&lt;/p&gt; &#xA;&lt;p&gt;Example of the compiling/linking command line in Unix or Cygwin, (prefix == /usr/local case)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cc sample.c -L/usr/local/lib -lonig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use static link library(onig_s.lib) in Win32, add option -DONIG_EXTERN=extern to C compiler.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Programs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/callout.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of callouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/count.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of built-in callout *COUNT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/echo.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of user defined callouts of name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/encode.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of some encodings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/listcap.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of the capture history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/names.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of the named group callback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/posix.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;POSIX API sample&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/regset.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of using RegSet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/scan.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of using onig_scan()&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/simple.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of the minimum (Oniguruma API)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/sql.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of the variable meta characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/user_property.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;example of user defined Unicode property&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Test Programs&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/syntax.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Perl, Java and ASIS syntax test.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sample/crnl.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--enable-crnl-as-line-terminator test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Source Files&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;oniguruma.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Oniguruma API header file (public)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onig-config.in&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;configuration check program template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regenc.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;character encodings framework header file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regint.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;internal definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regparse.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;internal definitions for regparse.c and regcomp.c&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regcomp.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;compiling and optimization functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regenc.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;character encodings framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regerror.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;error message function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regext.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;extended API functions (deluxe version API)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regexec.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;search and match functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regparse.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;parsing functions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regsyntax.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;pattern syntax functions and built-in syntax definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regtrav.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;capture history tree data traverse functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regversion.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;version info function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;st.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hash table functions header file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;st.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hash table functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;oniggnu.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GNU regex API header file (public)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;reggnu.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GNU regex API functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onigposix.h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;POSIX API header file (public)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regposerr.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;POSIX error message function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regposix.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;POSIX API functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mktable.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;character type table generator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ascii.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ASCII encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;euc_jp.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EUC-JP encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;euc_tw.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EUC-TW encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;euc_kr.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EUC-KR, EUC-CN encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sjis.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Shift_JIS encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;big5.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Big5 encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gb18030.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GB18030 encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;koi8.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;KOI8 encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;koi8_r.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;KOI8-R encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cp1251.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CP1251 encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_1.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-1 (Latin-1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_2.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-2 (Latin-2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_3.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-3 (Latin-3)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_4.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-4 (Latin-4)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_5.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-5 (Cyrillic)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_6.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-6 (Arabic)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_7.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-7 (Greek)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_8.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-8 (Hebrew)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_9.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-9 (Latin-5 or Turkish)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_10.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-10 (Latin-6 or Nordic)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_11.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-11 (Thai)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_13.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-13 (Latin-7 or Baltic Rim)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_14.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-14 (Latin-8 or Celtic)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_15.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-15 (Latin-9 or West European with Euro)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iso8859_16.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ISO-8859-16 (Latin-10)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;utf8.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UTF-8 encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;utf16_be.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UTF-16BE encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;utf16_le.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UTF-16LE encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;utf32_be.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UTF-32BE encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;utf32_le.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UTF-32LE encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;unicode.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;common codes of Unicode encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;unicode_fold_data.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Unicode folding data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;windows/testc.c&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test program for Windows (VC++)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>