<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-27T01:29:01Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Encryqed/Dumper-7</title>
    <updated>2024-05-27T01:29:01Z</updated>
    <id>tag:github.com,2024-05-27:/Encryqed/Dumper-7</id>
    <link href="https://github.com/Encryqed/Dumper-7" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dumper-7&lt;/h1&gt; &#xA;&lt;p&gt;SDK Generator for all Unreal Engine games. Supported versions are all of UE4 and UE5.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile the dll in x64-Release&lt;/li&gt; &#xA; &lt;li&gt;Inject the dll into your target game&lt;/li&gt; &#xA; &lt;li&gt;The SDK is generated into the path specified by &lt;code&gt;Settings::SDKGenerationPath&lt;/code&gt;, by default this is &lt;code&gt;C:\\Dumper-7&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Encryqed/Dumper-7/main/UsingTheSDK.md&#34;&gt;UsingTheSDK&lt;/a&gt; for a guide to get started, or to migrate from an old SDK.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Me&lt;/h2&gt; &#xA;&lt;p&gt;KoFi: &lt;a href=&#34;https://ko-fi.com/fischsalat&#34;&gt;https://ko-fi.com/fischsalat&lt;/a&gt; &lt;br&gt; Patreon: &lt;a href=&#34;https://patreon.com/user?u=119629245&#34;&gt;https://patreon.com/user?u=119629245&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;Summary:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added TUObjectArrayWrapper which automatically initializes &lt;code&gt;GObjects&lt;/code&gt; the first time it&#39;s accessed&lt;/li&gt; &#xA; &lt;li&gt;Added predefined member &lt;strong&gt;ULevel::Actors&lt;/strong&gt; to the SDK&lt;/li&gt; &#xA; &lt;li&gt;Added support for more Properties&lt;/li&gt; &#xA; &lt;li&gt;Functions with &lt;code&gt;EFunctionFlags::Static&lt;/code&gt; are now automatically called on the classes&#39; DefaultObject&lt;/li&gt; &#xA; &lt;li&gt;Fixed name-collisions between classes/structs, between enums, between members/functions, and between packages&lt;/li&gt; &#xA; &lt;li&gt;Fixed cyclic dependencies&lt;/li&gt; &#xA; &lt;li&gt;Fixed incorrect size/alignment on classes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find the full changelog for the new GeneratorRewrite in &lt;a href=&#34;https://raw.githubusercontent.com/Encryqed/Dumper-7/main/Changelog.md&#34;&gt;Changelog.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overriding Offsets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Only override any offsets if the generator doesn&#39;t find them by itself&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All overrides are made in &lt;strong&gt;Generator::InitEngineCore()&lt;/strong&gt; inside of &lt;strong&gt;Generator.cpp&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GObjects&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ObjectArray::Init(/*GObjectsOffset*/, /*ChunkSize*/, /*bIsChunked*/);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/* Make sure only to use types which exist in the sdk (eg. uint8, uint64) */&#xA;InitObjectArrayDecryption([](void* ObjPtr) -&amp;gt; uint8* { return reinterpret_cast&amp;lt;uint8*&amp;gt;(uint64(ObjPtr) ^ 0x8375); });&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FName::AppendString&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;FName::Init(/*FName::AppendStringOffset*/);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ProcessEvent&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Off::InSDK::InitPE(/*PEIndex*/);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues using the Dumper, please create an Issue on this repository&lt;br&gt; and explain the problem &lt;strong&gt;in detail&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Should your game be crashing while dumping, attach Visual Studios&#39; debugger to the game and inject the Dumper-7.dll in debug-configuration. Then include screenshots of the exception causing the crash, a screenshot of the callstack, as well as the console output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Should there be any compiler-errors in the SDK please send screenshots of them. Please note that &lt;strong&gt;only build errors&lt;/strong&gt; are considered errors, as Intellisense often reports false positives. Make sure to always send screenshots of the code causing the first error, as it&#39;s likely to cause a chain-reaction of errors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Should your own dll-project crash, verify your code thoroughly to make sure the error actually lies within the generated SDK.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MrForExample/ComfyUI-3D-Pack</title>
    <updated>2024-05-27T01:29:01Z</updated>
    <id>tag:github.com,2024-05-27:/MrForExample/ComfyUI-3D-Pack</id>
    <link href="https://github.com/MrForExample/ComfyUI-3D-Pack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensive node suite that enables ComfyUI to process 3D inputs (Mesh &amp; UV Texture, etc) using cutting edge algorithms (3DGS, NeRF, etc.)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ComfyUI-3D-Pack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make ComfyUI generates 3D assets as good &amp;amp; convenient as it generates image/video!&lt;/strong&gt; &lt;br&gt; This is an extensive node suite that enables ComfyUI to process 3D inputs (Mesh &amp;amp; UV Texture, etc.) using cutting edge algorithms (3DGS, NeRF, etc.) and models (InstantMesh, CRM, TripoSR, etc.)&lt;/p&gt; &#xA;&lt;span style=&#34;font-size:1.5em;&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#currently-support&#34;&gt;Features&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#install&#34;&gt;Install&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#run&#34;&gt;Run&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#tips&#34;&gt;Tips&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/#supporters&#34;&gt;Supporters&lt;/a&gt; &lt;/span&gt; &#xA;&lt;h2&gt;Currently support:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For use case please check &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/&#34;&gt;Example Workflows&lt;/a&gt;. [&lt;strong&gt;Last update: 23/05/2024&lt;/strong&gt;]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; you need to put &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Inputs_Files/&#34;&gt;Example Inputs Files &amp;amp; Folders&lt;/a&gt; under ComfyUI Root Directory\ComfyUI\input folder before you can run the example workflow&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/C0nsumption/Consume-ComfyUI-Workflows/tree/main/assets/tripo_sr/00&#34;&gt;tripoSR-layered-diffusion workflow&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/c0nsumption_&#34;&gt;@Consumption&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;InstantMesh Reconstruction Model&lt;/strong&gt;: &lt;a href=&#34;https://github.com/TencentARC/InstantMesh&#34;&gt;TencentARC/InstantMesh&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sparse multi-view images with white background to 3D Mesh with RGB texture&lt;/li&gt; &#xA;   &lt;li&gt;Works with arbitrary MVDiffusion models (Probably works best with Zero123++, but also works with CRM MVDiffusion model)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&#xA;   &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/a0648a44-f8cb-4f78-9704-a907f9174936&#34;&gt;&lt;/video&gt; &#xA;   &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/33aecedb-f595-4c12-90dd-89d5f718598e&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero123++&lt;/strong&gt;: &lt;a href=&#34;https://github.com/SUDO-AI-3D/zero123plus&#34;&gt;SUDO-AI-3D/zero123plus&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Single image to 6 multi-view images&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CRM&lt;/strong&gt;: &lt;a href=&#34;https://github.com/thu-ml/CRM&#34;&gt;thu-ml/CRM&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Three stages pipeline:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Single image to 6 multi-view images (Front, Back, Left, Right, Top &amp;amp; Down)&lt;/li&gt; &#xA;     &lt;li&gt;Single image &amp;amp; 6 multi-view images to 6 same views CCMs (Canonical Coordinate Maps)&lt;/li&gt; &#xA;     &lt;li&gt;6 multi-view images &amp;amp; CCMs to 3D mesh&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Note: For low vram pc, if you can&#39;t fit all three models for each stages into your GPU memory, then you can divide those three stages into different comfy workflow and run them separately&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/cf68bb83-9244-44df-9db8-f80eb3fdc29e&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TripoSR&lt;/strong&gt;: &lt;a href=&#34;https://github.com/VAST-AI-Research/TripoSR&#34;&gt;VAST-AI-Research/TripoSR&lt;/a&gt; | &lt;a href=&#34;https://github.com/flowtyone/ComfyUI-Flowty-TripoSR&#34;&gt;ComfyUI-Flowty-TripoSR&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Generate NeRF representation and using marching cube to turn it into 3D mesh&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/ec4f8df5-5907-4bbf-ba19-c0565fe95a97&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wonder3D&lt;/strong&gt;: &lt;a href=&#34;https://github.com/xxlong0/Wonder3D&#34;&gt;xxlong0/Wonder3D&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generate spatial consistent 6 views images &amp;amp; normal maps from a single image &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Wonder3D_FatCat_MVs.jpg&#34; alt=&#34;Wonder3D_FatCat_MVs&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Large Multiview Gaussian Model&lt;/strong&gt;: &lt;a href=&#34;https://github.com/3DTopia/LGM&#34;&gt;3DTopia/LGM&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Enable single image to 3D Gaussian in less than 30 seconds on a RTX3080 GPU, later you can also convert 3D Gaussian to mesh&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/e221d7f8-49ac-4ed4-809b-d4c790b6270e&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Triplane Gaussian Transformers&lt;/strong&gt;: &lt;a href=&#34;https://github.com/VAST-AI-Research/TriplaneGaussian&#34;&gt;VAST-AI-Research/TriplaneGaussian&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Enable single image to 3D Gaussian in less than 10 seconds on a RTX3080 GPU, later you can also convert 3D Gaussian to mesh&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/90e7f298-bdbd-4c15-9378-1ca46cbb4871&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Preview 3DGS and 3D Mesh&lt;/strong&gt;: 3D Visualization inside ComfyUI:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/huggingface/gsplat.js/tree/main&#34;&gt;gsplat.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/mrdoob/three.js/tree/dev&#34;&gt;three.js&lt;/a&gt; for 3DGS &amp;amp; 3D Mesh visualization respectively&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Custumizable background base on JS library: &lt;a href=&#34;https://github.com/mdbassit/Coloris&#34;&gt;mdbassit/Coloris&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/9f3c56b1-afb3-4bf1-8845-ab1025a87463&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stack Orbit Camera Poses&lt;/strong&gt;: Automatically generate all range of camera pose combinations&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can use it to conditioning the &lt;a href=&#34;https://comfyanonymous.github.io/ComfyUI_examples/3d/&#34;&gt;StableZero123 (You need to Download the checkpoint first)&lt;/a&gt;, with full range of camera poses in one prompt pass&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can use it to generate the orbit camera poses and directly input to other 3D process node (e.g. GaussianSplatting and BakeTextureToMesh)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Example usage:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Clockwise_Camposes.png&#34; width=&#34;256&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Counter_Clockwise_Camposes.png&#34; width=&#34;256&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Clockwise.gif&#34; width=&#34;256&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/Cammy_Cam_Rotate_Counter_Clockwise.gif&#34; width=&#34;256&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Coordinate system:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Azimuth: In top view, from angle 0 rotate 360 degree with step -90 you get (0, -90, -180/180, 90, 0), in this case camera rotates clock-wise, vice versa.&lt;/li&gt; &#xA;     &lt;li&gt;Elevation: 0 when camera points horizontally forward, pointing down to the ground is negitive angle, vice versa.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;FlexiCubes&lt;/strong&gt;: &lt;a href=&#34;https://github.com/nv-tlabs/FlexiCubes&#34;&gt;nv-tlabs/FlexiCubes&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Multi-View depth &amp;amp; mask (optional normal maps) as inputs&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Export to 3D Mesh&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Usage guide:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;em&gt;voxel_grids_resolution&lt;/em&gt;: determine mesh resolution/quality&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;depth_min_distance&lt;/em&gt; &lt;em&gt;depth_max_distance&lt;/em&gt; : distance from object to camera, object parts in the render that is closer(futher) to camera than depth_min_distance(depth_max_distance) will be rendered with pure white(black) RGB value 1, 1, 1(0, 0, 0)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;mask_loss_weight&lt;/em&gt;: Control the silhouette of reconstrocted 3D mesh&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;depth_loss_weight&lt;/em&gt;: Control the shape of reconstrocted 3D mesh, this loss will also affect the mesh deform detail on the surface, so results depends on quality of the depth map&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;normal_loss_weight&lt;/em&gt;: Optional. Use to refine the mesh deform detail on the surface&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;sdf_regularizer_weight&lt;/em&gt;: Helps to remove floaters in areas of the shape that are not supervised by the application objective, such as internal faces when using image supervision only&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;remove_floaters_weight&lt;/em&gt;: This can be increased if you observe artifacts in flat areas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;cube_stabilizer_weight&lt;/em&gt;: This does not have a significant impact during the optimization of a single shape, however it helps to stabilizing training in somecases&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;&#xA;     &lt;video controls autoplay loop src=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/assets/62230687/166bbc1f-04b7-42c8-87bb-302e3f5aabb2&#34;&gt;&lt;/video&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Instant NGP&lt;/strong&gt;: &lt;a href=&#34;https://github.com/nerfstudio-project/nerfacc&#34;&gt;nerfacc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-View images as inputs&lt;/li&gt; &#xA;   &lt;li&gt;Export to 3D Mesh using marching cubes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;3D Gaussian Splatting&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ashawkey/diff-gaussian-rasterization&#34;&gt;Improved Differential Gaussian Rasterization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Better Compactness-based Densification method from &lt;a href=&#34;https://gsgen3d.github.io/&#34;&gt;Gsgen&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Support initialize gaussians from given 3D mesh (Optional)&lt;/li&gt; &#xA;   &lt;li&gt;Support mini-batch optimazation&lt;/li&gt; &#xA;   &lt;li&gt;Multi-View images as inputs&lt;/li&gt; &#xA;   &lt;li&gt;Export to standard 3DGS .ply format supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Gaussian Splatting Orbit Renderer&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Render 3DGS to images sequences or video, given a 3DGS file and camera poses generated by &lt;strong&gt;Stack Orbit Camera Poses&lt;/strong&gt; node&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mesh Orbit Renderer&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Render 3D mesh to images sequences or video, given a mesh file and camera poses generated by &lt;strong&gt;Stack Orbit Camera Poses&lt;/strong&gt; node&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fitting_Mesh_With_Multiview_Images&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bake Multi-View images into UVTexture of given 3D mesh using &lt;a href=&#34;https://github.com/NVlabs/nvdiffrast&#34;&gt;Nvdiffrast&lt;/a&gt;, supports:&lt;/li&gt; &#xA;   &lt;li&gt;Export to .obj, .ply, .glb&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NeuS&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fit a coarse mesh from sparse multi-view images &amp;amp; normal maps, as little as 4 to 6 views, pretty good at reconstruct the shape from reference images but texture lacking details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deep Marching Tetrahedrons&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow convert 3DGS .ply file to 3D mesh &lt;br&gt; &lt;em&gt;Note: I didn&#39;t spent time to turn the hyperprameters yet, the result will be improved in the future!&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Save &amp;amp; Load 3D file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.obj, .ply, .glb for 3D Mesh&lt;/li&gt; &#xA;   &lt;li&gt;.ply for 3DGS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Switch Axis for 3DGS &amp;amp; 3D Mesh&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Since different algorithms likely use different coordinate system, so the ability to re-mapping the axis of coordinate is crucial for passing generated result between differnt nodes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/configs/system.conf&#34;&gt;Customizable system config file&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Custom clients IP address&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add DMTet algorithm to allow conversion from points cloud(Gaussian/.ply) to mesh (.obj, .ply, .glb)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Integrate &lt;a href=&#34;https://zouzx.github.io/TriplaneGaussian/&#34;&gt;Triplane Meets Gaussian Splatting: Fast and Generalizable Single-View 3D Reconstruction with Transformers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add interactive 3D UI inside ComfuUI to visulaize training and generated results for 3D representations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add a new node to generate renderer image sequence given a 3D gaussians and orbit camera poses (So we can later feed it to the differentiable renderer to bake it onto a given mesh)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Integrate &lt;a href=&#34;https://me.kiui.moe/lgm/&#34;&gt;LGM: Large Multi-View Gaussian Model for High-Resolution 3D Content Creation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Add camera pose estimation from raw multi-views images&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Add &amp;amp; Improve a few best MVS algorithms (e.g instant-ngp, NeuS2, GaussianPro, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Improve 3DGS/Nerf to Mesh conversion algorithms:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support to training DMTet with images(RGB, Alpha, Normal Map)&lt;/li&gt; &#xA;   &lt;li&gt;Find better methods to converts 3DGS or Points Cloud to Mesh (Normal maps reconstruction maybe?)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a general SDS/ISM Optimization algorithm to allow training 3D representations with diffusion model&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Need to do some in-depth research on Interval Score Matching (ISM), since math behind it makes perfect sense and also there are so many ways we could improve upon the result obtained from &lt;a href=&#34;https://github.com/EnVision-Research/LucidDreamer&#34;&gt;LucidDreamer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;On Hold since runtime cost to generate an is too big (3+hours for an average RTX GPU like 3080)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;[IMPORTANT!!!]&lt;/strong&gt; &lt;br&gt; Currently this package is only been tested in following setups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10/11 (Tested on my laptop)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 23.10 &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/16&#34;&gt;(Tested by @watsieboi)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ComfyUI python_embed/Miniconda/Conda Python 3.11.x&lt;/li&gt; &#xA; &lt;li&gt;Torch version &amp;gt;= 2.1.2+cu121&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Assume you have already downloaded &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt; &amp;amp; Configed your &lt;a href=&#34;https://developer.nvidia.com/cuda-12-1-0-download-archive&#34;&gt;CUDA&lt;/a&gt; environment.&lt;/p&gt; &#xA;&lt;h3&gt;Install Method 0: Directly inside ComfyUI Windows Python Embeded Environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Currently support: (python3.10/3.11/3.12 cuda12.1)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;First install &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/?q=build+tools&#34;&gt;Visual Studio Build Tools 2022/2019&lt;/a&gt; with Workloads: Desktop development with C++ (There are a few JIT torch cpp extension that builds in runtime)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively, according to &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/5&#34;&gt;@doctorpangloss&lt;/a&gt;, you can setup the c++/cuda build environments in windows by using &lt;a href=&#34;https://chocolatey.org/&#34;&gt;chocolatey&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Go to the Comfy3D root directory: &lt;em&gt;ComfyUI Root Directory\ComfyUI\custom_nodes\ComfyUI-3D-Pack&lt;/em&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run .bat with python version corresponding to the version of your ComfyUI python environment&#xA;&#xA;# install_windows_portable_win_py310_cu121.bat&#xA;install_windows_portable_win_py311_cu121.bat&#xA;# install_windows_portable_win_py312_cu121.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Method 1: Using Miniconda(Works on Windows &amp;amp; Linux &amp;amp; Mac)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note: &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/49&#34;&gt;In some edge cases Miniconda fails but Anaconda could fix the issue&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup with Miniconda:&lt;/h4&gt; &#xA;&lt;p&gt;First download &lt;a href=&#34;https://docs.conda.io/projects/miniconda/en/latest/&#34;&gt;Miniconda&lt;/a&gt; (&lt;em&gt;One of the best way to manage a clean and separated python envirments&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Then running following commands to setup the Miniconda environment for ComfyUI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go to your Your ComfyUI root directory, for my example:&#xA;cd C:\Users\reall\Softwares\ComfyUI_windows_portable &#xA;&#xA;conda create -p ./python_miniconda_env/ComfyUI python=3.11&#xA;&#xA;# conda will tell what command to use to activate the env&#xA;conda activate C:\Users\reall\Softwares\ComfyUI_windows_portable\python_miniconda_env\ComfyUI&#xA;&#xA;# update pip&#xA;python -m pip install --upgrade pip&#xA;&#xA;# You can using following command to installing CUDA only in the miniconda environment you just created if you don&#39;t want to donwload and install it manually &amp;amp; globally:&#xA;# conda install -c &#34;nvidia/label/cuda-12.1.0&#34; cuda-toolkit&#xA;&#xA;# Install the main packahes&#xA;pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121&#xA;&#xA;pip install -r ./ComfyUI/requirements.txt&#xA;&#xA;# Then go to ComfyUI-3D-Pack directory under the ComfyUI Root Directory\ComfyUI\custom_nodes for my example is:&#xA;cd C:\Users\reall\Softwares\ComfyUI_windows_portable\ComfyUI\custom_nodes\ComfyUI-3D-Pack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively you can check this tutorial: &lt;a href=&#34;https://www.comflowy.com/preparation-for-study/install#step-two-download-comfyui&#34;&gt;Installing ComfyUI with Miniconda On Windows and Mac&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install with Miniconda:&lt;/h4&gt; &#xA;&lt;p&gt;Go to the Comfy3D root directory: &lt;em&gt;ComfyUI Root Directory\ComfyUI\custom_nodes\ComfyUI-3D-Pack&lt;/em&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;install_miniconda.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just in case &lt;code&gt;install_miniconda.bat&lt;/code&gt; may not working in your OS, you could also run the following commands under the same directory: (Works with Linux &amp;amp; macOS)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&#xA;pip install -r requirements_post.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plus:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For those who want to run it inside Google Colab, you can check the &lt;a href=&#34;https://github.com/MrForExample/ComfyUI-3D-Pack/issues/13&#34;&gt;install instruction from @lovisdotio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can find some of the pre-build wheels for Linux here: &lt;a href=&#34;https://github.com/remsky/ComfyUI3D-Assorted-Wheels&#34;&gt;remsky/ComfyUI3D-Assorted-Wheels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install and run with docker:&lt;/h4&gt; &#xA;&lt;p&gt;Gpu support during Docker build time is required to install all requirenents. On Linux host you could setup &lt;code&gt;nvidia-container-runtime&lt;/code&gt;. On Windows it is quite different and not checked at moment.&lt;/p&gt; &#xA;&lt;h5&gt;Linux setup:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install nvidia-container-runtime:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install nvidia-container-runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit/create the /etc/docker/daemon.json with content:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;runtimes&#34;: {&#xA;        &#34;nvidia&#34;: {&#xA;            &#34;path&#34;: &#34;/usr/bin/nvidia-container-runtime&#34;,&#xA;            &#34;runtimeArgs&#34;: []&#xA;        } &#xA;    },&#xA;    &#34;default-runtime&#34;: &#34;nvidia&#34; &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart docker daemon:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Finally build and run docker container with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t comfy3d . &amp;amp;&amp;amp; docker run --rm -it -p 8188:8188 --gpus all comfy3d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run:&lt;/h2&gt; &#xA;&lt;p&gt;Copy the files inside folder &lt;a href=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_New_ComfyUI_Bats/&#34;&gt;__New_ComfyUI_Bats&lt;/a&gt; to your ComfyUI root directory, and double click run_nvidia_gpu_miniconda.bat to start ComfyUI!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively you can just activate the Conda env: &lt;code&gt;python_miniconda_env\ComfyUI&lt;/code&gt;, and go to your ComfyUI root directory then run command &lt;code&gt;python ./ComfyUI/main.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL world &amp;amp; camera coordinate system:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    World            Camera        &#xA;  &#xA;     +y              up  target                                              &#xA;     |               |  /                                            &#xA;     |               | /                                                &#xA;     |______+x       |/______right                                      &#xA;    /                /         &#xA;   /                /          &#xA;  /                /           &#xA; +z               forward           &#xA;&#xA;elevation: in (-90, 90), from +y to -y is (-90, 90)&#xA;azimuth: in (-180, 180), from +z to +x is (0, 90)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wonder3D world &amp;amp; camera coordinate system:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/wonder3d_coordinate.png&#34; alt=&#34;wonder3d_coordinate&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Three.js coordinate system: (z-axis is pointing towards you and is coming out of the screen)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrForExample/ComfyUI-3D-Pack/main/_Example_Workflows/_Example_Outputs/right_hand_coordinate_system.png&#34; alt=&#34;right_hand_coordinate_system&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter OpenGL errors (e.g., &lt;code&gt;[F glutil.cpp:338] eglInitialize() failed&lt;/code&gt;), then set &lt;code&gt;force_cuda_rasterize&lt;/code&gt; to true on corresponding node&lt;/li&gt; &#xA; &lt;li&gt;If after the installation, your ComfyUI get stucked at starting or running, you could following the instruction in following link to solve the problem: &lt;a href=&#34;https://github.com/lava-nc/lava-dl/discussions/211&#34;&gt;Code Hangs Indefinitely When Evaluating Neuron Models on GPU&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/janusch_patas&#34;&gt;MrNeRF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>