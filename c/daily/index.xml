<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-23T01:35:35Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guanzhi/GmSSL</title>
    <updated>2022-07-23T01:35:35Z</updated>
    <id>tag:github.com,2022-07-23:/guanzhi/GmSSL</id>
    <link href="https://github.com/guanzhi/GmSSL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;支持国密SM2/SM3/SM4/SM9/SSL的密码工具箱&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GmSSL 3.0 Dev&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guanzhi/GmSSL/actions/workflows/cmake.yml&#34;&gt;&lt;img src=&#34;https://github.com/guanzhi/GmSSL/workflows/CMake/badge.svg?sanitize=true&#34; alt=&#34;CMake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GmSSL的2.x版本的开发始于2016年，目前主分支在功能上实现了对主要国密算法、标准和协议的覆盖，并成功应用于多种互联网场景中。但是随着GmSSL在物联网、区块链等新场景中的应用，及在密码产品合规检测过程中的实践，我们发现应用对GmSSL提出了一些新的需求。由于很难在基于OpenSSL的GmSSL 2.x版本上满足新需求，因此我们重新设计了GmSSL的架构，GmSSL也迎来第三个大版本——GmSSL 3.0。&lt;/p&gt; &#xA;&lt;h2&gt;典型应用&lt;/h2&gt; &#xA;&lt;h4&gt;Nginx-with-GmSSL3.0&lt;/h4&gt; &#xA;&lt;p&gt;目前GmSSL项目组已经实现了Nginx对GmSSL3.0的支持，并提供了Docker实现，具体参见&lt;a href=&#34;https://github.com/zhaoxiaomeng/Nginx-with-GmSSLv3&#34;&gt;Nginx-with-GmSSL3.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;编译与安装&lt;/h2&gt; &#xA;&lt;p&gt;GmSSL 3.0 采用了cmake构建系统。下载源代码后将其解压缩，进入源码目录，执行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make&#xA;make test&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;主要新特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;超轻量：GmSSL 3.0大幅度降低了内存需求和二进制代码体积，不依赖动态内存，可以用于无操作系统的低功耗嵌入式环境(MCU、SOC等)，开发者也可以更容易地将国密算法和SSL协议嵌入到现有的项目中。&lt;/li&gt; &#xA; &lt;li&gt;更合规：GmSSL 3.0 可以配置为仅包含国密算法和国密协议(TLCP协议)，依赖GmSSL 的密码应用更容易满足密码产品型号检测的要求，避免由于混杂非国密算法、不安全算法等导致的安全问题和合规问题。&lt;/li&gt; &#xA; &lt;li&gt;更安全：TLS 1.3在安全性和通信延迟上相对之前的TLS协议有巨大的提升，GmSSL 3.0支持TLS 1.3协议和RFC 8998的国密套件。GmSSL 3.0默认支持密钥的加密保护，提升了密码算法的抗侧信道攻击能力。&lt;/li&gt; &#xA; &lt;li&gt;跨平台：GmSSL 3.0更容易跨平台，构建系统不再依赖Perl，默认的CMake构建系统可以容易地和Visual Studio、Android NDK等默认编译工具配合使用，开发者也可以手工编写Makefile在特殊环境中编译、剪裁。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;主要功能&lt;/h2&gt; &#xA;&lt;h3&gt;密码算法&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;分组密码：SM4 (CBC, CTR, GCM), AES (GCM)&lt;/li&gt; &#xA; &lt;li&gt;序列密码：ZUC/ZUC-256, ChaCha20, RC4&lt;/li&gt; &#xA; &lt;li&gt;哈希函数: SM3, SHA-224/256/384/512, SHA-1, MD5&lt;/li&gt; &#xA; &lt;li&gt;公钥密码算法：SM2, SM9, ECDH, ECDSA&lt;/li&gt; &#xA; &lt;li&gt;椭圆曲线参数：SM2, NIST-P256&lt;/li&gt; &#xA; &lt;li&gt;伪随机数生成器：HASH_DRBG (NIST.SP.800-90A)&lt;/li&gt; &#xA; &lt;li&gt;MAC算法：HMAC, GHASH&lt;/li&gt; &#xA; &lt;li&gt;密钥导出函数：PBKDF2、HKDF&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PKI相关标准&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数字证书：X.509证书, CRL, CSR (PKCS #10)&lt;/li&gt; &#xA; &lt;li&gt;私钥加密格式：口令加密私钥PEM格式 (PKCS #8)&lt;/li&gt; &#xA; &lt;li&gt;数字信封：SM2加密签名消 (GM/T 0010-2012)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SSL协议&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TLCP 1.1，支持密码套件：&lt;code&gt;ECDHE_SM4_CBC_SM3 {0xE0,0x11}&lt;/code&gt; (GB/T 38636-2020、GM/T 0024-2014)&lt;/li&gt; &#xA; &lt;li&gt;TLS 1.2，支持密码套件：&lt;code&gt;ECDHE_SM4_CBC_SM3 {0xE0,0x11}&lt;/code&gt; (GB/T 38636-2020、GM/T 0024-2014、RFC 5246)&lt;/li&gt; &#xA; &lt;li&gt;TLS 1.3，支持密码套件：&lt;code&gt;TLS_SM4_GCM_SM3 {0x00,0xC6}&lt;/code&gt; +ECDHE/SM2 (RFC 8998), &lt;code&gt;TLS_AES_128_GCM_SHA256&lt;/code&gt; + ECDHE/ECDSA/NIST-P256&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>FeralInteractive/gamemode</title>
    <updated>2022-07-23T01:35:35Z</updated>
    <id>tag:github.com,2022-07-23:/FeralInteractive/gamemode</id>
    <link href="https://github.com/FeralInteractive/gamemode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Optimise Linux system performance on demand&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GameMode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GameMode&lt;/strong&gt; is a daemon/lib combo for Linux that allows games to request a set of optimisations be temporarily applied to the host OS and/or a game process.&lt;/p&gt; &#xA;&lt;p&gt;GameMode was designed primarily as a stop-gap solution to problems with the Intel and AMD CPU powersave or ondemand governors, but is now host to a range of optimisation features and configurations.&lt;/p&gt; &#xA;&lt;p&gt;Currently GameMode includes support for optimisations including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU governor&lt;/li&gt; &#xA; &lt;li&gt;I/O priority&lt;/li&gt; &#xA; &lt;li&gt;Process niceness&lt;/li&gt; &#xA; &lt;li&gt;Kernel scheduler (&lt;code&gt;SCHED_ISO&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Screensaver inhibiting&lt;/li&gt; &#xA; &lt;li&gt;GPU performance mode (NVIDIA and AMD), GPU overclocking (NVIDIA)&lt;/li&gt; &#xA; &lt;li&gt;Custom scripts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GameMode packages are available for Ubuntu, Debian, Solus, Arch, Gentoo, Fedora, OpenSUSE, Mageia and possibly more.&lt;/p&gt; &#xA;&lt;p&gt;Issues with GameMode should be reported here in the issues section, and not reported to Feral directly.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requesting GameMode&lt;/h2&gt; &#xA;&lt;p&gt;For games/launchers which integrate GameMode support (see list later on), simply running the game will automatically activate GameMode.&lt;/p&gt; &#xA;&lt;p&gt;For others, you must manually request GameMode when running the game. This can be done by launching the game through &lt;code&gt;gamemoderun&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gamemoderun ./game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or edit the Steam launch options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gamemoderun %command%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: for older versions of GameMode (before 1.3) use this string in place of &lt;code&gt;gamemoderun&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LD_PRELOAD=&#34;$LD_PRELOAD:/usr/\$LIB/libgamemodeauto.so.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note the backslash here in &lt;code&gt;\$LIB&lt;/code&gt; is required.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The daemon is configured with a &lt;code&gt;gamemode.ini&lt;/code&gt; file. &lt;a href=&#34;https://github.com/FeralInteractive/gamemode/raw/master/example/gamemode.ini&#34;&gt;example/gamemode.ini&lt;/a&gt; is an example of what this file would look like, with explanations for all the variables.&lt;/p&gt; &#xA;&lt;p&gt;Config files are loaded and merged from the following directories, in order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/gamemode/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; or &lt;code&gt;$HOME/.config/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PWD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Note for Hybrid GPU users&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s not possible to integrate commands like optirun automatically inside GameMode, since the GameMode request is made once the game has already started. However it is possible to use a hybrid GPU wrapper like optirun by starting the game with &lt;code&gt;gamemoderun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can do this by setting the environment variable &lt;code&gt;GAMEMODERUNEXEC&lt;/code&gt; to your wrapper&#39;s launch command, so for example &lt;code&gt;GAMEMODERUNEXEC=optirun&lt;/code&gt;, &lt;code&gt;GAMEMODERUNEXEC=&#34;env DRI_PRIME=1&#34;&lt;/code&gt;, or &lt;code&gt;GAMEMODERUNEXEC=&#34;env __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia __VK_LAYER_NV_optimus=NVIDIA_only&#34;&lt;/code&gt;. This environment variable can be set globally (e.g. in /etc/environment), so that the same prefix command does not have to be duplicated everywhere you want to use &lt;code&gt;gamemoderun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GameMode will not be injected to the wrapper.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Apps with GameMode integration&lt;/h2&gt; &#xA;&lt;h3&gt;Games&lt;/h3&gt; &#xA;&lt;p&gt;The following games are known to integrate GameMode support (meaning they don&#39;t require any additional configuration to activate GameMode while running):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DiRT 4&lt;/li&gt; &#xA; &lt;li&gt;Rise of the Tomb Raider&lt;/li&gt; &#xA; &lt;li&gt;Shadow of the Tomb Raider&lt;/li&gt; &#xA; &lt;li&gt;Total War Saga: Thrones of Britannia&lt;/li&gt; &#xA; &lt;li&gt;Total War: ROME REMASTERED&lt;/li&gt; &#xA; &lt;li&gt;Total War: Three Kingdoms&lt;/li&gt; &#xA; &lt;li&gt;Total War: WARHAMMER II&lt;/li&gt; &#xA; &lt;li&gt;Total War: WARHAMMER III&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;Other apps which can integrate with GameMode include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atlauncher.com/downloads&#34;&gt;ATLauncher&lt;/a&gt; Minecraft launcher&lt;/li&gt; &#xA; &lt;li&gt;GNOME Shell (&lt;a href=&#34;https://github.com/gicmo/gamemode-extension&#34;&gt;via extension&lt;/a&gt;) - indicates when GameMode is active in the top panel.&lt;/li&gt; &#xA; &lt;li&gt;Lutris - Enables GameMode for all games by default if available (must have both 32- and 64-bit GameMode libraries installed), configurable in preferences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.retroarch.com&#34;&gt;RetroArch&lt;/a&gt; - is a frontend for emulators, game engines and media players.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Development &lt;a href=&#34;https://github.com/FeralInteractive/gamemode/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/FeralInteractive/gamemode/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and test&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The design of GameMode has a clear-cut abstraction between the host daemon and library (&lt;code&gt;gamemoded&lt;/code&gt; and &lt;code&gt;libgamemode&lt;/code&gt;), and the client loaders (&lt;code&gt;libgamemodeauto&lt;/code&gt; and &lt;code&gt;gamemode_client.h&lt;/code&gt;) that allows for safe use without worrying about whether the daemon is installed or running. This design also means that while the host library currently relies on &lt;code&gt;systemd&lt;/code&gt; for exchanging messages with the daemon, it&#39;s entirely possible to implement other internals that still work with the same clients.&lt;/p&gt; &#xA;&lt;p&gt;See repository subdirectories for information on each component.&lt;/p&gt; &#xA;&lt;h3&gt;Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;GameMode depends on &lt;code&gt;meson&lt;/code&gt; for building and &lt;code&gt;systemd&lt;/code&gt; for internal communication. This repo contains a &lt;code&gt;bootstrap.sh&lt;/code&gt; script to allow for quick install to the user bus, but check &lt;code&gt;meson_options.txt&lt;/code&gt; for custom settings.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu/Debian (you may also need &lt;code&gt;dbus-user-session&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install meson libsystemd-dev pkg-config ninja-build git libdbus-1-dev libinih-dev build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Ubuntu 18.04, you&#39;ll need to install &lt;code&gt;python3&lt;/code&gt; package and install the latest meson version from &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv .venv&#xA;source .venv/bin/activate&#xA;pip install meson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Later you can deactivate the virtual environment and remove it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deactivate&#xA;rm -rf .venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S meson systemd git dbus libinih&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install meson systemd-devel pkg-config git dbus-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gentoo&lt;/h4&gt; &#xA;&lt;p&gt;Gentoo has an ebuild which builds a stable release from sources. It will also pull in all the dependencies so you can work on the source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;emerge --ask games-util/gamemode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install using the latest sources from git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ACCEPT_KEYWORDS=&#34;**&#34; emerge --ask ~games-util/gamemode-9999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build and Install GameMode&lt;/h3&gt; &#xA;&lt;p&gt;Then clone, build and install a release version of GameMode at 1.7:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/FeralInteractive/gamemode.git&#xA;cd gamemode&#xA;git checkout 1.7 # omit to build the master branch&#xA;./bootstrap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test GameMode installed and will run correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gamemoded -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl --user stop gamemoded.service&#xA;ninja uninstall -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests must match with the coding style found in the &lt;code&gt;.clang-format&lt;/code&gt; file, please run this before committing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang-format -i $(find . -name &#39;*.[ch]&#39; -not -path &#34;*subprojects/*&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maintained by&lt;/h3&gt; &#xA;&lt;p&gt;Feral Interactive&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/FeralInteractive/gamemode/graphs/contributors&#34;&gt;contributors&lt;/a&gt; section for an extended list of contributors.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2017-2022 Feral Interactive&lt;/p&gt; &#xA;&lt;p&gt;GameMode is available under the terms of the BSD 3-Clause License (Revised)&lt;/p&gt; &#xA;&lt;p&gt;The &#34;inih&#34; library is distributed under the New BSD license&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mpaland/printf</title>
    <updated>2022-07-23T01:35:35Z</updated>
    <id>tag:github.com,2022-07-23:/mpaland/printf</id>
    <link href="https://github.com/mpaland/printf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny, fast, non-dependent and fully loaded printf implementation for embedded systems. Extensive test suite passing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A printf / sprintf Implementation for Embedded Systems&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/mpaland/printf&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mpaland/printf.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mpaland/printf&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mpaland/printf/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/mpaland-printf&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/14180.svg?sanitize=true&#34; alt=&#34;Coverity Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://github.com/mpaland/printf/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/mpaland/printf.svg?sanitize=true&#34; alt=&#34;Github Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mpaland/printf/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/mpaland/printf.svg?sanitize=true&#34; alt=&#34;Github Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mpaland/avl_array/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a tiny but &lt;strong&gt;fully loaded&lt;/strong&gt; printf, sprintf and (v)snprintf implementation. Primarily designed for usage in embedded systems, where printf is not available due to memory issues or in avoidance of linking against libc. Using the standard libc printf may pull &lt;strong&gt;a lot&lt;/strong&gt; of unwanted library stuff and can bloat code size about 20k or is not 100% thread safe. In this cases the following implementation can be used. Absolutely &lt;strong&gt;NO dependencies&lt;/strong&gt; are required, &lt;em&gt;printf.c&lt;/em&gt; brings all necessary routines, even its own fast &lt;code&gt;ftoa&lt;/code&gt; (floating point), &lt;code&gt;ntoa&lt;/code&gt; (decimal) conversion.&lt;/p&gt; &#xA;&lt;p&gt;If memory footprint is really a critical issue, floating point, exponential and &#39;long long&#39; support and can be turned off via the &lt;code&gt;PRINTF_DISABLE_SUPPORT_FLOAT&lt;/code&gt;, &lt;code&gt;PRINTF_DISABLE_SUPPORT_EXPONENTIAL&lt;/code&gt; and &lt;code&gt;PRINTF_DISABLE_SUPPORT_LONG_LONG&lt;/code&gt; compiler switches. When using printf (instead of sprintf/snprintf) you have to provide your own &lt;code&gt;_putchar()&lt;/code&gt; low level function as console/serial output.&lt;/p&gt; &#xA;&lt;h2&gt;2020 announcement&lt;/h2&gt; &#xA;&lt;p&gt;This project is not dead! I just had no time in 2019 for sufficient support, sorry. Within the next weeks, I will have a look to all PRs and open issues.&lt;br&gt; Thank you all for supporting this project.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights and Design Goals&lt;/h2&gt; &#xA;&lt;p&gt;There is a boatload of so called &#39;tiny&#39; printf implementations around. So why this one? I&#39;ve tested many implementations, but most of them have very limited flag/specifier support, a lot of other dependencies or are just not standard compliant and failing most of the test suite. Therefore I decided to write an own, final implementation which meets the following items:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very small implementation (around 600 code lines)&lt;/li&gt; &#xA; &lt;li&gt;NO dependencies, no libs, just one module file&lt;/li&gt; &#xA; &lt;li&gt;Support of all important flags, width and precision sub-specifiers (see below)&lt;/li&gt; &#xA; &lt;li&gt;Support of decimal/floating number representation (with an own fast itoa/ftoa)&lt;/li&gt; &#xA; &lt;li&gt;Reentrant and thread-safe, malloc free, no static vars/buffers&lt;/li&gt; &#xA; &lt;li&gt;LINT and compiler L4 warning free, mature, coverity clean, automotive ready&lt;/li&gt; &#xA; &lt;li&gt;Extensive test suite (&amp;gt; 400 test cases) passing&lt;/li&gt; &#xA; &lt;li&gt;Simply the best &lt;em&gt;printf&lt;/em&gt; around the net&lt;/li&gt; &#xA; &lt;li&gt;MIT license&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add/link &lt;em&gt;printf.c&lt;/em&gt; to your project and include &lt;em&gt;printf.h&lt;/em&gt;. That&#39;s it. Implement your low level output function needed for &lt;code&gt;printf()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void _putchar(char character)&#xA;{&#xA;  // send char to console etc.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage is 1:1 like the according stdio.h library version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int printf(const char* format, ...);&#xA;int sprintf(char* buffer, const char* format, ...);&#xA;int snprintf(char* buffer, size_t count, const char* format, ...);&#xA;int vsnprintf(char* buffer, size_t count, const char* format, va_list va);&#xA;&#xA;// use output function (instead of buffer) for streamlike interface&#xA;int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Due to general security reasons it is highly recommended to prefer and use &lt;code&gt;snprintf&lt;/code&gt; (with the max buffer size as &lt;code&gt;count&lt;/code&gt; parameter) instead of &lt;code&gt;sprintf&lt;/code&gt;.&lt;/strong&gt; &lt;code&gt;sprintf&lt;/code&gt; has no buffer limitation, so when needed - use it really with care!&lt;/p&gt; &#xA;&lt;h3&gt;Streamlike Usage&lt;/h3&gt; &#xA;&lt;p&gt;Besides the regular standard &lt;code&gt;printf()&lt;/code&gt; functions, this module also provides &lt;code&gt;fctprintf()&lt;/code&gt;, which takes an output function as first parameter to build a streamlike output like &lt;code&gt;fprintf()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// define the output function&#xA;void my_stream_output(char character, void* arg)&#xA;{&#xA;  // opt. evaluate the argument and send the char somewhere&#xA;}&#xA;&#xA;{&#xA;  // in your code&#xA;  void* arg = (void*)100;  // this argument is passed to the output function&#xA;  fctprintf(&amp;amp;my_stream_output, arg, &#34;This is a test: %X&#34;, 0xAA);&#xA;  fctprintf(&amp;amp;my_stream_output, nullptr, &#34;Send to null dev&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Format Specifiers&lt;/h2&gt; &#xA;&lt;p&gt;A format specifier follows this prototype: &lt;code&gt;%[flags][width][.precision][length]type&lt;/code&gt; The following format specifiers are supported:&lt;/p&gt; &#xA;&lt;h3&gt;Supported Types&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;d or i&lt;/td&gt; &#xA;   &lt;td&gt;Signed decimal integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;u&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned decimal integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;o&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned octal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned hexadecimal integer (lowercase)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned hexadecimal integer (uppercase)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f or F&lt;/td&gt; &#xA;   &lt;td&gt;Decimal floating point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;e or E&lt;/td&gt; &#xA;   &lt;td&gt;Scientific-notation (exponential) floating point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;g or G&lt;/td&gt; &#xA;   &lt;td&gt;Scientific or decimal floating point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;Single character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;String of characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;Pointer address&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;%&lt;/td&gt; &#xA;   &lt;td&gt;A % followed by another % character will write a single %&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supported Flags&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flags&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Left-justify within the given field width; Right justification is the default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;   &lt;td&gt;Forces to precede the result with a plus or minus sign (+ or -) even for positive numbers.&lt;br&gt;By default, only negative numbers are preceded with a - sign.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(space)&lt;/td&gt; &#xA;   &lt;td&gt;If no sign is going to be written, a blank space is inserted before the value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;#&lt;/td&gt; &#xA;   &lt;td&gt;Used with o, b, x or X specifiers the value is preceded with 0, 0b, 0x or 0X respectively for values different than zero.&lt;br&gt;Used with f, F it forces the written output to contain a decimal point even if no more digits follow. By default, if no digits follow, no decimal point is written.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Left-pads the number with zeros (0) instead of spaces when padding is specified (see width sub-specifier).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supported Width&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Width&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(number)&lt;/td&gt; &#xA;   &lt;td&gt;Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;The width is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supported Precision&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Precision&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.number&lt;/td&gt; &#xA;   &lt;td&gt;For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0.&lt;br&gt;For f and F specifiers: this is the number of digits to be printed after the decimal point. &lt;strong&gt;By default, this is 6, maximum is 9&lt;/strong&gt;.&lt;br&gt;For s: this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered.&lt;br&gt;If the period is specified without an explicit value for precision, 0 is assumed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.*&lt;/td&gt; &#xA;   &lt;td&gt;The precision is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supported Length&lt;/h3&gt; &#xA;&lt;p&gt;The length sub-specifier modifies the length of the data type.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Length&lt;/th&gt; &#xA;   &lt;th&gt;d i&lt;/th&gt; &#xA;   &lt;th&gt;u o x X&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(none)&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;unsigned int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hh&lt;/td&gt; &#xA;   &lt;td&gt;char&lt;/td&gt; &#xA;   &lt;td&gt;unsigned char&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;h&lt;/td&gt; &#xA;   &lt;td&gt;short int&lt;/td&gt; &#xA;   &lt;td&gt;unsigned short int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l&lt;/td&gt; &#xA;   &lt;td&gt;long int&lt;/td&gt; &#xA;   &lt;td&gt;unsigned long int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ll&lt;/td&gt; &#xA;   &lt;td&gt;long long int&lt;/td&gt; &#xA;   &lt;td&gt;unsigned long long int (if PRINTF_SUPPORT_LONG_LONG is defined)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;j&lt;/td&gt; &#xA;   &lt;td&gt;intmax_t&lt;/td&gt; &#xA;   &lt;td&gt;uintmax_t&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;z&lt;/td&gt; &#xA;   &lt;td&gt;size_t&lt;/td&gt; &#xA;   &lt;td&gt;size_t&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;t&lt;/td&gt; &#xA;   &lt;td&gt;ptrdiff_t&lt;/td&gt; &#xA;   &lt;td&gt;ptrdiff_t (if PRINTF_SUPPORT_PTRDIFF_T is defined)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Return Value&lt;/h3&gt; &#xA;&lt;p&gt;Upon successful return, all functions return the number of characters written, &lt;em&gt;excluding&lt;/em&gt; the terminating null character used to end the string. Functions &lt;code&gt;snprintf()&lt;/code&gt; and &lt;code&gt;vsnprintf()&lt;/code&gt; don&#39;t write more than &lt;code&gt;count&lt;/code&gt; bytes, &lt;em&gt;including&lt;/em&gt; the terminating null byte (&#39;\0&#39;). Anyway, if the output was truncated due to this limit, the return value is the number of characters that &lt;em&gt;could&lt;/em&gt; have been written. Notice that a value equal or larger than &lt;code&gt;count&lt;/code&gt; indicates a truncation. Only when the returned value is non-negative and less than &lt;code&gt;count&lt;/code&gt;, the string has been completely written. If any error is encountered, &lt;code&gt;-1&lt;/code&gt; is returned.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;buffer&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt; (&lt;code&gt;nullptr&lt;/code&gt;) nothing is written and just the formatted length is returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int length = sprintf(NULL, &#34;Hello, world&#34;); // length is set to 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiler Switches/Defines&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_INCLUDE_CONFIG_H&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;Define this as compiler switch (e.g. &lt;code&gt;gcc -DPRINTF_INCLUDE_CONFIG_H&lt;/code&gt;) to include a &#34;printf_config.h&#34; definition file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_NTOA_BUFFER_SIZE&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;ntoa (integer) conversion buffer size. This must be big enough to hold one converted numeric number &lt;em&gt;including&lt;/em&gt; leading zeros, normally 32 is a sufficient value. Created on the stack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_FTOA_BUFFER_SIZE&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;ftoa (float) conversion buffer size. This must be big enough to hold one converted float number &lt;em&gt;including&lt;/em&gt; leading zeros, normally 32 is a sufficient value. Created on the stack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_DEFAULT_FLOAT_PRECISION&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Define the default floating point precision&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_MAX_FLOAT&lt;/td&gt; &#xA;   &lt;td&gt;1e9&lt;/td&gt; &#xA;   &lt;td&gt;Define the largest suitable value to be printed with %f, before using exponential representation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_DISABLE_SUPPORT_FLOAT&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;Define this to disable floating point (%f) support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_DISABLE_SUPPORT_EXPONENTIAL&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;Define this to disable exponential floating point (%e) support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_DISABLE_SUPPORT_LONG_LONG&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;Define this to disable long long (%ll) support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRINTF_DISABLE_SUPPORT_PTRDIFF_T&lt;/td&gt; &#xA;   &lt;td&gt;undefined&lt;/td&gt; &#xA;   &lt;td&gt;Define this to disable ptrdiff_t (%t) support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;None anymore (finally).&lt;/p&gt; &#xA;&lt;h2&gt;Test Suite&lt;/h2&gt; &#xA;&lt;p&gt;For testing just compile, build and run the test suite located in &lt;code&gt;test/test_suite.cpp&lt;/code&gt;. This uses the &lt;a href=&#34;https://github.com/catchorg/Catch2&#34;&gt;catch&lt;/a&gt; framework for unit-tests, which is auto-adding main(). Running with the &lt;code&gt;--wait-for-keypress exit&lt;/code&gt; option waits for the enter key after test end.&lt;/p&gt; &#xA;&lt;h2&gt;Projects Using printf&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpaland/turnkeyboard&#34;&gt;turnkeyboard&lt;/a&gt; uses printf as log and generic tty (formatting) output.&lt;/li&gt; &#xA; &lt;li&gt;printf is part of &lt;a href=&#34;https://github.com/embeddedartistry/libc&#34;&gt;embeddedartistry/libc&lt;/a&gt;, a libc targeted for embedded systems usage.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/adrian3git/HatchlingPlatform&#34;&gt;Hatchling Platform&lt;/a&gt; uses printf.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Just send me a mail/issue/PR to get &lt;em&gt;your&lt;/em&gt; project listed here)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Give this project a &lt;span&gt;⭐&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an issue and describe your idea&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpaland/printf/fork&#34;&gt;Fork it&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Publish the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new pull request&lt;/li&gt; &#xA; &lt;li&gt;Profit! &lt;span&gt;✔&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;printf is written under the &lt;a href=&#34;http://www.opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>