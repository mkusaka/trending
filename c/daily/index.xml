<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-09T01:24:17Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>npurson/vscode-server-toolchain-workaround</title>
    <updated>2024-02-09T01:24:17Z</updated>
    <id>tag:github.com,2024-02-09:/npurson/vscode-server-toolchain-workaround</id>
    <link href="https://github.com/npurson/vscode-server-toolchain-workaround" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Workaround for the raised toolchain requirements of VS Code Server 1.86+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VS Code Server Toolchain Workaround&lt;/h1&gt; &#xA;&lt;p&gt;Starting with VS Code release 1.86, the minimum requirements for the build toolchain of the remote server were raised. The prebuilt servers distributed by VS Code are compatible with Linux distributions based on glibc 2.28 or later.&lt;/p&gt; &#xA;&lt;p&gt;This toolkit provides a workaround for whose setup does not meet these requirements and you are unable to upgrade the Linux distribution but still want to update VS Code. It ensembles glibc, libstdc++ and patchelf.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following steps have to be executed each time VS Code is updated.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update the VS Code on local.&lt;/li&gt; &#xA; &lt;li&gt;Connect to the remote server and await the downloadâ€™s completion until the error regarding unsatisfied prerequisites is encountered.&lt;/li&gt; &#xA; &lt;li&gt;Execute the &lt;code&gt;run.sh&lt;/code&gt; script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Prerequisites for VS Code&lt;/h2&gt; &#xA;&lt;p&gt;kernel &amp;gt;= 4.18, glibc &amp;gt;=2.28, libstdc++ &amp;gt;= 3.4.25 (gcc 8.1.0), Python 2.6 or 2.7, tar&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites&#34;&gt;https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites&lt;/a&gt; &lt;a href=&#34;https://code.visualstudio.com/docs/remote/faq#_can-i-run-vs-code-server-on-older-linux-distributions&#34;&gt;https://code.visualstudio.com/docs/remote/faq#_can-i-run-vs-code-server-on-older-linux-distributions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Workings&lt;/h2&gt; &#xA;&lt;h3&gt;1. Bypassing the requirements check of VS Code&lt;/h3&gt; &#xA;&lt;p&gt;The following excerpt is from &lt;code&gt;~/.vscode-server/bin/05047486b6df5eb8d44b2ecd70ea3bdf775fd937/bin/helpers/check-requirements.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ -f &#34;/tmp/vscode-skip-server-requirements-check&#34; ]; then&#xA;        echo &#34;!!! WARNING: Skipping server pre-requisite check !!!&#34;&#xA;        echo &#34;!!! Server stability is not guaranteed. Proceed at your own risk. !!!&#34;&#xA;        exit 0&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hence, creating the file &lt;code&gt;/tmp/vscode-skip-server-requirements-check&lt;/code&gt; can skip the requirements check.&lt;/p&gt; &#xA;&lt;h3&gt;2. Upgrading glibc and libstdc++ for VS Code&lt;/h3&gt; &#xA;&lt;p&gt;Utilize PatchELF to modify the dynamic linker and RPATH of ELF executables.&lt;/p&gt; &#xA;&lt;p&gt;Note: The loading priority of the dynamic linker is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;RPATH within the ELF&lt;/li&gt; &#xA; &lt;li&gt;LD_LIBRARY_PATH environment variables&lt;/li&gt; &#xA; &lt;li&gt;RUNPATH within the ELF&lt;/li&gt; &#xA; &lt;li&gt;Cache in /etc/ld.so.cache&lt;/li&gt; &#xA; &lt;li&gt;/lib and /usr/lib&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>tsoding/raylib.js</title>
    <updated>2024-02-09T01:24:17Z</updated>
    <id>tag:github.com,2024-02-09:/tsoding/raylib.js</id>
    <link href="https://github.com/tsoding/raylib.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unofficial Implementation of Subset of Raylib API in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raylib.js&lt;/h1&gt; &#xA;&lt;p&gt;Unofficial Implementation of Subset of &lt;a href=&#34;https://github.com/raysan5/raylib&#34;&gt;Raylib&lt;/a&gt; API in JavaScript so you can use it from WebAssembly. Intended as a simplier Web version of Raylib that does not require Emscripten.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING! This is a Research Project and not guaranteed to be useful in present or/and future! If you quickly need to port your Raylib game to Web just follow these instructions: &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main Idea&lt;/h2&gt; &#xA;&lt;p&gt;The main idea is to enable a very specific style of &lt;a href=&#34;https://surma.dev/things/c-to-webassembly/&#34;&gt;Programming in C for WebAssembly without Emscripten&lt;/a&gt; but for Raylib. The current limitation is that Raylib.js is not fully implemented, but it does not mean it is useless! If you have a Game that uses only implemented function you can use Raylib.js. And if only few needed functions are not implemented you can implement them and submit a PR thus improving the library for future uses.&lt;/p&gt; &#xA;&lt;p&gt;We have no plans to replace the official Emscripten version of Raylib. This is a Reasearch Project intended to explore how far this approach can be pushed.&lt;/p&gt; &#xA;&lt;h2&gt;Start Demo Locally&lt;/h2&gt; &#xA;&lt;p&gt;The demo is deployed to GitHub pages: &lt;a href=&#34;https://tsoding.github.io/raylib.js/&#34;&gt;https://tsoding.github.io/raylib.js/&lt;/a&gt; But you can run it locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./build.sh&#xA;$ python3 -m http.server 6969&#xA;$ &amp;lt;browser&amp;gt; http://localhost:6969/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Rakashazi/emu-ex-plus-alpha</title>
    <updated>2024-02-09T01:24:17Z</updated>
    <id>tag:github.com,2024-02-09:/Rakashazi/emu-ex-plus-alpha</id>
    <link href="https://github.com/Rakashazi/emu-ex-plus-alpha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-platform computer &amp; game console emulation system including supporting code (EmuFramework) and core engine (Imagine)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EX Emulators&lt;/h1&gt; &#xA;&lt;h2&gt;Nightly Builds&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Download nightly builds from continuous integration:&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Rakashazi/emu-ex-plus-alpha/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Rakashazi/emu-ex-plus-alpha/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>