<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-28T01:32:55Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ZeroMemoryEx/Chaos-Rootkit</title>
    <updated>2023-03-28T01:32:55Z</updated>
    <id>tag:github.com,2023-03-28:/ZeroMemoryEx/Chaos-Rootkit</id>
    <link href="https://github.com/ZeroMemoryEx/Chaos-Rootkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;x64 ring0 Rootkit with Process Hiding and Privilege Escalation Capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chaos-Rootkit&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227610457-51555f6e-885c-47fd-8a04-ab2351035a2b.png&#34; alt=&#34;Image Description&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chaos-Rootkit is a x64 kernel-mode rootkit that can hide processes or elevate their privileges, work on the latest Windows versions .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Hide process: This feature allows you to hide processes from listing tools via DKOM.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Elevate specific process privileges : This feature enables you to elevate specific processes privilege .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spawn elevated process: launch command prompt with elevated privileges .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SSDT hook (soon)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TCP &amp;amp; UDP connections (soon)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Technical Details&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First, we locate the &lt;code&gt;ActiveProcessLinks&lt;/code&gt;, which is a pointer to the &lt;code&gt;PLIST_ENTRY&lt;/code&gt; structure. In our case, the &lt;code&gt;ActiveProcessLinks&lt;/code&gt; pointer is located at offset &lt;code&gt;0x448&lt;/code&gt; within the &lt;code&gt;EPROCESS&lt;/code&gt; structure. It is important to note that this offset may vary across different windows versions .&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227363440-488dcf7d-d513-4563-8651-e44c50794881.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;x64&lt;/th&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;x86&lt;/th&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0xE0&lt;/td&gt; &#xA;     &lt;td&gt;(late 5.2)&lt;/td&gt; &#xA;     &lt;td&gt;0xB4&lt;/td&gt; &#xA;     &lt;td&gt;(3.10)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0xE8&lt;/td&gt; &#xA;     &lt;td&gt;(6.0)&lt;/td&gt; &#xA;     &lt;td&gt;0x98&lt;/td&gt; &#xA;     &lt;td&gt;(3.50 to 4.0)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0188&lt;/td&gt; &#xA;     &lt;td&gt;(6.1)&lt;/td&gt; &#xA;     &lt;td&gt;0xA0&lt;/td&gt; &#xA;     &lt;td&gt;(5.0)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x02E8&lt;/td&gt; &#xA;     &lt;td&gt;(6.2 to 6.3)&lt;/td&gt; &#xA;     &lt;td&gt;0x88&lt;/td&gt; &#xA;     &lt;td&gt;(5.1 to early 5.2)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x02F0&lt;/td&gt; &#xA;     &lt;td&gt;(10.0 to 1607)&lt;/td&gt; &#xA;     &lt;td&gt;0x98&lt;/td&gt; &#xA;     &lt;td&gt;(late 5.2)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x02E8&lt;/td&gt; &#xA;     &lt;td&gt;(1703 to 1809)&lt;/td&gt; &#xA;     &lt;td&gt;0xA0&lt;/td&gt; &#xA;     &lt;td&gt;(6.0)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x02F0&lt;/td&gt; &#xA;     &lt;td&gt;(1903)&lt;/td&gt; &#xA;     &lt;td&gt;0xB8&lt;/td&gt; &#xA;     &lt;td&gt;(6.1 to 1903)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0448&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;0xE8&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;PLIST_ENTRY&lt;/code&gt; structure is a doubly linked list structure . It contains two members, &lt;code&gt;Blink&lt;/code&gt; and &lt;code&gt;Flink&lt;/code&gt;, which are pointers to the previous and next entries in the list, respectively, These pointers allow for efficient traversal of the linked list in both directions.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227370531-b1a90f9a-4fe7-4f57-8787-e1da1543e1b7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The flink member resides in offset &lt;code&gt;0x0&lt;/code&gt; and the blink member resides in offset &lt;code&gt;0x8&lt;/code&gt;. The flink address &lt;code&gt;0xffff9c8b\&lt;/code&gt;071e3488&lt;code&gt;points to the next process node, while the blink address&lt;/code&gt;0xfffff805`5121e0a0` points to the previous process node&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227380821-92717306-66ee-40a0-8831-1cfc1a819eda.png&#34; alt=&#34;Screenshot 2023-03-23 222046&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;a diagram represents the &lt;code&gt;PLIST_ENTRY&lt;/code&gt; structure.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227361450-d35e0fbb-cfbd-4fbf-bfd6-cef3373ab07a.png&#34; alt=&#34;Screenshot 2023-03-23 181753&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To hide our chosen process in a listing tool, we can use a technique where we modify the flink and blink pointers of the adjacent process nodes to point to each other, effectively removing our process from the linked list. Specifically, we make the next process node&#39;s blink pointer point to the previous node, and the previous process node&#39;s flink pointer point to the next node. This makes our process appear invisible in the listing tool&#39;s view of the linked list of processes&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227380533-0e80298c-0800-485a-8797-1cc7a0efb757.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note: After removing a node from a PLIST_ENTRY, we should set the pointer to NULL to ensure that the nodes before and after the removed node are no longer pointing to it. This can prevent potential null pointer dereferences and avoid BSODs.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227399548-54da930d-031f-4b82-9e8a-ed7cc6e42a4a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Elevate specific process privileges&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When a process is created, it inherits the token of the user who created it, The token is used by the system to determine what actions the process can perform. The token contains information about the user&#39;s security identifier (SID), group memberships, and privileges.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226148214-1d63149a-e2e6-4938-9067-30df7939c9db.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Token member resides at offset &lt;code&gt;0x4b8&lt;/code&gt; in the &lt;code&gt;_EPROCESS&lt;/code&gt; structure, which is a data structure that represents a process object. The Token member is defined in &lt;code&gt;_EX_FAST_REF&lt;/code&gt; structure, which is a union type that can store either a pointer to a kernel object or a reference count, depending on the size of the pointer , The offset of the &lt;code&gt;_EX_FAST_REF&lt;/code&gt; structure within &lt;code&gt;_EPROCESS&lt;/code&gt; depends on the specific version of Windows being used, but it is typically located at an offset of &lt;code&gt;0x4b8&lt;/code&gt; in recent versions of Windows..&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Build Number token Offsets for x64 and x86 Architectures&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;x64 offsets&lt;/th&gt; &#xA;     &lt;th&gt;x86 offsets&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0160 (late 5.2)&lt;/td&gt; &#xA;     &lt;td&gt;0x0150 (3.10)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0168 (6.0)&lt;/td&gt; &#xA;     &lt;td&gt;0x0108 (3.50 to 4.0)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0208 (6.1)&lt;/td&gt; &#xA;     &lt;td&gt;0x012C (5.0)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0348 (6.2 to 6.3)&lt;/td&gt; &#xA;     &lt;td&gt;0xC8 (5.1 to early 5.2)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0358 (10.0 to 1809)&lt;/td&gt; &#xA;     &lt;td&gt;0xD8 (late 5.2)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x0360 (1903)&lt;/td&gt; &#xA;     &lt;td&gt;0xE0 (6.0)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;0x04B8&lt;/td&gt; &#xA;     &lt;td&gt;0xF8 (6.1)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;0xEC (6.2 to 6.3)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;0xF4 (10.0 to 1607)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;0xFC (1703 to 1903)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;0x012C&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226148257-b679202e-2371-4bda-98ea-689107221075.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;_EX_FAST_REF&lt;/code&gt; structure in Windows contains three members: &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;RefCount&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226148720-8807b491-591c-479c-981f-734c1e868981.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can either spawn a privileged process or elevate an already existing process ID.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226211454-7266638a-8cce-4417-a139-d3490d1fb68e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the sake of this explanation, we will focus on the second option and use CMD as an example&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226149275-cfd76437-dda3-4964-9a54-43fa20247b3e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CMD inherited Token&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226149373-2bf16ae9-e67f-4150-86b3-8376b0eb8428.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;we send the Process ID to the driver through an IOCTL&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226196873-f5cd9ab4-5c71-4d05-a0d4-4ae80a8dd809.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;after the driver receives the PID from the user mode application, it uses it to obtain a pointer to the &lt;code&gt;_EPROCESS&lt;/code&gt; structure for the target process. The driver then accesses the Token member of the &lt;code&gt;_EPROCESS&lt;/code&gt; structure to obtain a pointer to the process token, which it replaces with the system token, effectively changing the security context of the process to that of the system. However, if the driver does not correctly locate the Token member within the &lt;code&gt;_EPROCESS&lt;/code&gt; structure or if the offset of the Token is other than &lt;code&gt;0x4b8&lt;/code&gt; , the driver may crash the system or the target process ,this problem will be fixed in the next updates .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cmd token after&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/227381408-58e9cc54-95ac-4ec5-8d9c-5de6c28f7062.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the process privileges, groups, rights&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/226149800-e80ea9d8-5f69-4425-ad0e-a4a65cd946d9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;DEMO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/60795188/227605986-dd59463e-f9f1-4fa0-ba87-3c06d3c34ca0.mp4&#34;&gt;https://user-images.githubusercontent.com/60795188/227605986-dd59463e-f9f1-4fa0-ba87-3c06d3c34ca0.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>