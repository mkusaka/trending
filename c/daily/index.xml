<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:27:09Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cyberus-technology/virtualbox-kvm</title>
    <updated>2024-02-11T01:27:09Z</updated>
    <id>tag:github.com,2024-02-11:/cyberus-technology/virtualbox-kvm</id>
    <link href="https://github.com/cyberus-technology/virtualbox-kvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VirtualBox with KVM Backend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VirtualBox KVM&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains an adapted version of the open source virtualization tool VirtualBox called VirtualBox KVM. VirtualBox KVM uses Linux KVM as the underlying hypervisor.&lt;/p&gt; &#xA;&lt;h2&gt;What to expect&lt;/h2&gt; &#xA;&lt;p&gt;The basic look and feel of VirtualBox KVM will be the same as with an conventional VirtualBox. The user is able to boot the same guest VMs in their existing VirtualBox configuration.&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, there are the following benefits of using VirtualBox KVM compared to the conventional VirtualBox:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VirtualBox can run in parallel to QEMU/KVM&lt;/li&gt; &#xA; &lt;li&gt;VirtualBox kernel driver (&lt;code&gt;vboxdrv&lt;/code&gt;) is not required&lt;/li&gt; &#xA; &lt;li&gt;Modern virtualization features supported by KVM are automatically used (e.g. APICv)&lt;/li&gt; &#xA; &lt;li&gt;KVM is part of the Linux kernel and therefore always directly available with every kernel update&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Due to the replacement of the underlying hypervisor, there will be differences in the guest performance. Performance differences heavily depend on the guest workload.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are no prebuilt packages of VirtualBox KVM and it needs to be built from source. The process of building VirtualBox from source can be found &lt;a href=&#34;https://www.virtualbox.org/wiki/Linux%20build%20instructions&#34;&gt;on virtualbox.org&lt;/a&gt; and only minor adjustments are required to build VirtualBox with KVM as a backend.&lt;/p&gt; &#xA;&lt;p&gt;On a fresh install of Ubuntu 22.04, you can use the following command to install all prerequisites via &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt install acpica-tools chrpath doxygen g++-multilib libasound2-dev libcap-dev \&#xA;        libcurl4-openssl-dev libdevmapper-dev libidl-dev libopus-dev libpam0g-dev \&#xA;        libpulse-dev libqt5opengl5-dev libqt5x11extras5-dev qttools5-dev libsdl1.2-dev libsdl-ttf2.0-dev \&#xA;        libssl-dev libvpx-dev libxcursor-dev libxinerama-dev libxml2-dev libxml2-utils \&#xA;        libxmu-dev libxrandr-dev make nasm python3-dev python2-dev qttools5-dev-tools \&#xA;        texlive texlive-fonts-extra texlive-latex-extra unzip xsltproc \&#xA;        \&#xA;        default-jdk libstdc++5 libxslt1-dev linux-kernel-headers makeself \&#xA;        mesa-common-dev subversion yasm zlib1g-dev glslang-tools \&#xA;        libc6-dev-i386 lib32stdc++6 libtpms-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Newer GCC versions (&amp;gt;= 12) might cause build issues. The command above installs a compatible version on Ubuntu 22.04.&lt;/p&gt; &#xA;&lt;p&gt;After having all the prerequisites installed, the build process can be condensed to the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./configure --with-kvm --disable-kmods --disable-docs --disable-hardening --disable-java&#xA;$ source ./env.sh&#xA;$ kmk&#xA;$ out/linux.amd64/release/bin/VirtualBox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The noticeable difference to the official build process is the addition of &lt;code&gt;--with-kvm&lt;/code&gt; when calling &lt;code&gt;./configure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues and limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently, Intel x86_64 is the only supported host platform. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AMD will most likely work too but is considered experimental at the moment.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux is required as a host operating system for building and running VirtualBox KVM.&lt;/li&gt; &#xA; &lt;li&gt;Starting with Intel Tiger Lake (11th Gen Core processors) or newer, split lock detection must be turned off in the host system. This can be achieved using the Linux kernel command line parameter &lt;code&gt;split_lock_detect=off&lt;/code&gt; or using the &lt;code&gt;split_lock_mitigate&lt;/code&gt; sysctl.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to engage&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use VirtualBox with KVM or if you have a need for custom virtualization solutions, we are happy to provide guidance and engineering services. Please reach out to us via our &lt;a href=&#34;https://cyberus-technology.de/contact&#34;&gt;support form&lt;/a&gt; or via e-mail at &lt;a href=&#34;mailto:service@cyberus-technology.de&#34;&gt;service@cyberus-technology.de&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter any issues please use the provided issue template and describe your problem as detailed as possible.&lt;/p&gt;</summary>
  </entry>
</feed>