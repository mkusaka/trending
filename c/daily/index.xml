<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-28T01:29:01Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tpm2-software/tpm2-tss</title>
    <updated>2024-06-28T01:29:01Z</updated>
    <id>tag:github.com,2024-06-28:/tpm2-software/tpm2-tss</id>
    <link href="https://github.com/tpm2-software/tpm2-tss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OSS implementation of the TCG TPM2 Software Stack (TSS2)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/tpm2-software/tpm2-tss/actions&#34;&gt;&lt;img src=&#34;https://github.com/tpm2-software/tpm2-tss/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/williamcroberts/tpm2-tss&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/1bqv1y7rntqiewln?svg=true&#34; alt=&#34;Windows Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/tpm2-software/tpm2-tss&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/tpm2-software/tpm2-tss.svg?branch=master&#34; alt=&#34;FreeBSD Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/tpm2-tss&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/3997.svg?sanitize=true&#34; alt=&#34;Coverity Scan&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tpm2-software/tpm2-tss&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tpm2-software/tpm2-tss/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/2332&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/2332/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/tpm2-software/tpm2-tss/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/tpm2-software/tpm2-tss.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/tpm2-software/tpm2-tss/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/tpm2-software/tpm2-tss.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tpm2-tss.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/tpm2-tss/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:tpm2-tss&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/tpm2-tss.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/tpm2-software/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/tpm2-software/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;This repository hosts source code implementing the Trusted Computing Group&#39;s (TCG) TPM2 Software Stack (TSS). This stack consists of the following layers from top to bottom:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Libraries&lt;/th&gt; &#xA;   &lt;th&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Description&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th&gt;Specifications&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature API (FAPI)&lt;/td&gt; &#xA;   &lt;td&gt;libtss2‑fapi&lt;/td&gt; &#xA;   &lt;td&gt;High-level API for simple TPM usage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TSS_FAPI_v0p94_r09_pub.pdf&#34;&gt;TCG Feature API (FAPI) Specification&lt;/a&gt;,&lt;br&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TSS_JSON_Policy_v0p7_r08_pub.pdf&#34;&gt;TCG TSS 2.0 JSON Data Types and Policy Language Specification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enhanced System API (ESAPI,&amp;nbsp;sometimes&amp;nbsp;ESYS)&lt;/td&gt; &#xA;   &lt;td&gt;libtss2‑esys&lt;/td&gt; &#xA;   &lt;td&gt;1-to-1 mapping of the TPM2 commands&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt; Session handling&lt;/li&gt;&#xA;     &lt;li&gt;Tracks meta data for TPM objects&lt;/li&gt;&#xA;     &lt;li&gt;Asynchronous calls&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TSS_ESAPI_v1p0_r08_pub.pdf&#34;&gt;TCG TSS 2.0 Enhanced System API (ESAPI) Specification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;System API (SAPI,&amp;nbsp;sometimes&amp;nbsp;SYS)&lt;/td&gt; &#xA;   &lt;td&gt;libtss2‑sys&lt;/td&gt; &#xA;   &lt;td&gt;1-to-1 mapping of the TPM2 commands&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Asynchronous calls&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TSS_SAPI_v1p1_r29_pub_20190806.pdf&#34;&gt;TCG TSS 2.0 System Level API (SAPI) Specification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Marshaling/Unmarshaling (MU)&lt;/td&gt; &#xA;   &lt;td&gt;libtss2‑mu&lt;/td&gt; &#xA;   &lt;td&gt;(Un)marshaling all data types in the TPM library specification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TCG_TSS_Marshaling_Unmarshaling_API_v1p0_r07_pub.pdf&#34;&gt;TCG TSS 2.0 Marshaling/Unmarshaling API Specification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TPM Command Transmission Interface (TCTI)&lt;/td&gt; &#xA;   &lt;td&gt;libtss2‑tcti‑device&lt;br&gt;libtss2‑tcti‑tbs&lt;br&gt; libtss2‑tctildr&lt;br&gt;libtss2‑tcti‑swtpm&lt;br&gt;…&lt;/td&gt; &#xA;   &lt;td&gt;Standard API to transmit/receive TPM commands and responses&lt;br&gt;&lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/doc/tcti.md&#34;&gt;doc/tcti.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TCG_TSS_TCTI_v1p0_r18_pub.pdf&#34;&gt;TCG TSS 2.0 TPM Command Transmission Interface (TCTI) API Specification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Basis for all implementations in this project. [1]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/wp-content/uploads/TCG_TSS_Overview_Common_Structures_v0.9_r03_published.pdf&#34;&gt;TCG TSS 2.0 Overview and Common Structures Specification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[1] We currently deviate from the specification by increasing the value of &lt;code&gt;TPM2_NUM_PCR_BANKS&lt;/code&gt; from 3 to 16 to ensure compatibility with TPM2 implementations that have enabled a larger than typical number of PCR banks. This is expected to be included in a future revision of the specification.&lt;/p&gt; &#xA;&lt;h1&gt;Build and Installation Instructions:&lt;/h1&gt; &#xA;&lt;p&gt;Instructions to build and install tpm2-tss are available in the &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Getting in Touch:&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re looking to discuss the source code in this project or get some questions answered you should join the TPM2 mailing list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/tpm2/&#34;&gt;https://lore.kernel.org/tpm2/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To subscribe write an email to &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/tpm2+subscribe@lists.linux.dev&#34;&gt;tpm2+subscribe@lists.linux.dev&lt;/a&gt; see also &lt;a href=&#34;https://subspace.kernel.org/subscribing.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The old list &lt;a href=&#34;https://lists.linuxfoundation.org/mailman/listinfo/tpm2&#34;&gt;https://lists.linuxfoundation.org/mailman/listinfo/tpm2&lt;/a&gt; was decomissioned by Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have an IRC channel set up on &lt;a href=&#34;https://freenode.net/&#34;&gt;FreeNode&lt;/a&gt; called #tpm2.0-tss. You can also try Gitter &lt;a href=&#34;https://gitter.im/tpm2-software/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/tpm2-software/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can join a weekly online call at &lt;a href=&#34;https://developers.tpm.dev/events/tpmdev-online-call&#34;&gt;TPM.dev&lt;/a&gt;, where we are discussing the tpm2-tss stack, the tpm2-pkcs11 project and other Linux TPM2 &amp;amp; TSS2-Software.&lt;/p&gt; &#xA;&lt;p&gt;In case you want to contribute to the project, please also have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The doxygen documentation can either be built by oneself (see the &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; file) or browsed directly on &lt;a href=&#34;https://tpm2-tss.readthedocs.io/&#34;&gt;tpm2-tss.readthedocs.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Test Suite&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a test suite intended to exercise the TCTI, SAPI and ESAPI code. This test suite is &lt;em&gt;not&lt;/em&gt; intended to test a TPM implementation, so this test suite should only be run against a TPM simulator. If this test suite is executed against a TPM other than the software simulator it may cause damage to the TPM (NV storage wear out, etc.). You have been warned.&lt;/p&gt; &#xA;&lt;h2&gt;Simulator&lt;/h2&gt; &#xA;&lt;p&gt;The TPM library specification contains reference code sufficient to construct a software TPM 2.0 simulator. This code was provided by Microsoft and they provide a binary download for Windows &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=52507&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two implementations that enable building and running this code on Linux. Issues building or running the simulator should be reported to respective project.&lt;/p&gt; &#xA;&lt;h3&gt;Software TPM&lt;/h3&gt; &#xA;&lt;p&gt;The Software TPM is an open-source TPM emulator with different front-end interfaces such as socket and character device. Its code is hosted &lt;a href=&#34;https://github.com/stefanberger/swtpm&#34;&gt;on GitHub&lt;/a&gt; and building is faciliated by the GNU Autotools. The TCTI module for using this simulator is called &lt;em&gt;swtpm&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since tpm2-tss v3.0 swtpm is the default simulator used by this project.&lt;/p&gt; &#xA;&lt;h3&gt;IBM&#39;s Software Simulator&lt;/h3&gt; &#xA;&lt;p&gt;IBM has also repackaged this code with a few Makefiles so that the Microsoft code can be built and run on Linux systems. The Linux version of the Microsoft TPM 2.0 simulator can be obtained &lt;a href=&#34;https://downloads.sourceforge.net/project/ibmswtpm2/ibmtpm974.tar.gz&#34;&gt;on SourceForge&lt;/a&gt;. Once you&#39;ve downloaded and successfully built and execute the simulator it will, by default, be accepting connections on the localhost, TCP ports 2321 and 2322. The TCTI module for using this simulator is called &lt;em&gt;mssim&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To test the various TCTI, SAPI and ESAPI api calls, unit and integration tests can be run by configuring the build to enable unit testing and running the &#34;check&#34; build target. It is recommended to use a simulator for testing, and the simulator will be automatically launched by the tests. Please review the dependency list in &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; for dependencies when building the test suite.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-unit --enable-integration&#xA;$ make -j$(nproc) check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a file called &#34;test-suite.log&#34; in the root of the build directory.&lt;/p&gt; &#xA;&lt;p&gt;Please report failures in a Github &#39;issue&#39; with a full log of the test run.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: The unit and integration tests can be enabled independently. The --enable-unit option controls unit tests, and --enable-integration controls the integration tests.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests on physical TPM device&lt;/h3&gt; &#xA;&lt;p&gt;To run integration tests on a physical TPM device, including a TPM hardware or a software TPM implemented in platform firmware the configure script provides two options. The first option is called --with-device and it is used to point to the TPM device interface exposed by the OS, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ ./configure  --with-device=/dev/tpm0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second option, --with-devicetests, enables a &#34;class&#34; of test. There are three classes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;destructive - these tests can affect TPM capability or lifespan&lt;/li&gt; &#xA; &lt;li&gt;mandatory - these tests check all the functionality that is mandatory per the TCG specification (default).&lt;/li&gt; &#xA; &lt;li&gt;optional - these tests are for functionality that is optional per the TCG specification.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example to enable both mandatory and optional test cases during configure one needs to set this flag as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ ./configure --with-devicetests=&#34;mandatory,optional&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tht default value for the flag is &#34;mandatory&#34; Any combination of the three is valid. The two flags are only valid when the integration tests are enabled with --enable-integration flag.&lt;/p&gt; &#xA;&lt;p&gt;After that the following command is used to run the test on the configured TPM device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ sudo make check-device&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ sudo make check -j 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The tests can not be run in paralel.&lt;/p&gt; &#xA;&lt;h3&gt;Running valgrind check&lt;/h3&gt; &#xA;&lt;p&gt;The unit and integration tests can be run under the valgrind tool, which performs additional checks on the library and test code, such as memory leak checks etc. The following command is used to run the tests under valgrind:&lt;/p&gt; &#xA;&lt;p&gt;$ make check-valgrind&lt;/p&gt; &#xA;&lt;p&gt;This command will enable all valgrind &#34;tools&#34; and kick off as many test as they support. It is possible to enable different valgrind tools (checks) in more granularity. This can be controlled by invoking different tools separately using check-valgrind-&amp;lt;tool&amp;gt;, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ make check-valgrind-memcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ make check-valgrind-drd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently the the following tools are supported:&lt;/p&gt; &#xA;&lt;p&gt;memcheck - Performs memory related checks. This is the default tool. helgrind - Performs synchronization errors checks. drd - Performs thread related checks. sgcheck - Performs stack overrun related checks.&lt;/p&gt; &#xA;&lt;p&gt;Note that the valgring tool can also be invoked manually using the standard libtool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ libtool exec valgrind --tool=memcheck --leak-check=full \&#xA;    test/integration/esys-auto-session-flags.int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows for more control on what checks are performed.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;While investigating issues it might be helpful to enable extra debug/trace output. It can be enabled separately for different components. The description how to do this can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/doc/logging.md&#34;&gt;logging&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Fuzzing&lt;/h3&gt; &#xA;&lt;p&gt;All system API function calls can be tested using a fuzzing library. The description how to do this can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/doc/fuzzing.md&#34;&gt;fuzzing&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Architecture/Block Diagram&lt;/h1&gt; &#xA;&lt;p&gt;SAPI library, TAB/RM, and Test Code Block Diagram: &lt;img src=&#34;https://raw.githubusercontent.com/tpm2-software/tpm2-tss/master/doc/TSS_block_diagram.png&#34; alt=&#34;Architecture Block Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Project Layout&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;|-- doc     : various bits of documentation\&#xA;|-- include : header files installed in $(includedir)\&#xA;|   +-- tss2      : all public headers for this project\&#xA;|-- lib     : data files used by the build or installed into $(libdir)\&#xA;|-- m4      : autoconf support macros\&#xA;|-- man     : man pages\&#xA;|-- script  : scripts used by the build or CI\&#xA;|-- src     : all source files\&#xA;|   |-- tss2-esys : enhanced system API (ESAPI) implementation\&#xA;|   |   +-- api   : ESAPI TPM API implementation\&#xA;|   |-- tss2-mu   : TPM2 type marshaling/unmarshaling (MU) API implementation\&#xA;|   |-- tss2-sys  : system API (SAPI) implementation\&#xA;|   |   +-- api   : SAPI public API implementation\&#xA;|   |-- tss2-tcti : TCTI implementations for device and mssim\&#xA;|   +-- util      : Internal utility library (e.g. logging framework)\&#xA;+-- test    : test code\&#xA;    |-- integration : integration test harness and test cases\&#xA;    |-- tpmclient   : monolithic, legacy test application\&#xA;    +-- unit        : unit tests&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>