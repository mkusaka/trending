<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-15T01:30:46Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>blasty/printer-cracktro</title>
    <updated>2022-12-15T01:30:46Z</updated>
    <id>tag:github.com,2022-12-15:/blasty/printer-cracktro</id>
    <link href="https://github.com/blasty/printer-cracktro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;printer cracktro&lt;/h1&gt; &#xA;&lt;p&gt;My Pwn2Own entries for Pwn2Own Toronto 2022 targeted two different printers. One is Linux based (Lexmark) and other is DryOS based (CANON).&lt;/p&gt; &#xA;&lt;p&gt;After pwning the software on the printer the entries would display a little oldschool crack-intro animation thing to celebrate/illustrate the victory.&lt;/p&gt; &#xA;&lt;p&gt;I got quite a bit of inquiries about &#34;how does the animation thing work???&#34;. Obviously, the answer is pretty underwhelming.. it is just a couple 100 lines of poorly written C code that push pixels to the framebuffers/LCD. :-)&lt;/p&gt; &#xA;&lt;p&gt;There was no time/actual hardware (although the printers do have some kind of piezo beepers) to add a sweet chiptune, sorry. ;-)&lt;/p&gt; &#xA;&lt;p&gt;Anyway, here it is for those who want to study it for whatever reason. The same codebase can be built for the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Canon (firmware 11.04, update specs/canon_gadgets.ld for other versions)&lt;/li&gt; &#xA; &lt;li&gt;Lexmark&lt;/li&gt; &#xA; &lt;li&gt;SDL2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haxx.in/files/canon_wasm.html&#34;&gt;WebAssembly&lt;/a&gt;! (through emscripten)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything is distributed as-is, don&#39;t expect support/updates.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt; &#xA;&lt;p&gt;-- blasty &lt;a href=&#34;mailto:peter@haxx.in&#34;&gt;peter@haxx.in&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>citusdata/pg_cron</title>
    <updated>2022-12-15T01:30:46Z</updated>
    <id>tag:github.com,2022-12-15:/citusdata/pg_cron</id>
    <link href="https://github.com/citusdata/pg_cron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run periodic jobs in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.citusdata.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/citusdata/pg_cron/main/github-banner.png&#34; alt=&#34;Citus Banner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://citus-public.slack.com/&#34;&gt;&lt;img src=&#34;https://citus-slack.herokuapp.com/badge.svg?sanitize=true&#34; alt=&#34;Slack Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is pg_cron?&lt;/h2&gt; &#xA;&lt;p&gt;pg_cron is a simple cron-based job scheduler for PostgreSQL (10 or higher) that runs inside the database as an extension. It uses the same syntax as regular cron, but it allows you to schedule PostgreSQL commands directly from the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Delete old data on Saturday at 3:30am (GMT)&#xA;SELECT cron.schedule(&#39;30 3 * * 6&#39;, $$DELETE FROM events WHERE event_time &amp;lt; now() - interval &#39;1 week&#39;$$);&#xA; schedule&#xA;----------&#xA;       42&#xA;&#xA;-- Vacuum every day at 10:00am (GMT)&#xA;SELECT cron.schedule(&#39;nightly-vacuum&#39;, &#39;0 10 * * *&#39;, &#39;VACUUM&#39;);&#xA; schedule&#xA;----------&#xA;       43&#xA;&#xA;-- Change to vacuum at 3:00am (GMT)&#xA;SELECT cron.schedule(&#39;nightly-vacuum&#39;, &#39;0 3 * * *&#39;, &#39;VACUUM&#39;);&#xA; schedule&#xA;----------&#xA;       43&#xA;&#xA;-- Stop scheduling jobs&#xA;SELECT cron.unschedule(&#39;nightly-vacuum&#39; );&#xA; unschedule &#xA;------------&#xA; t&#xA;&#xA;SELECT cron.unschedule(42);&#xA; unschedule&#xA;------------&#xA;          t&#xA;&#xA;-- Vacuum every Sunday at 4:00am (GMT) in a database other than the one pg_cron is installed in&#xA;SELECT cron.schedule_in_database(&#39;weekly-vacuum&#39;, &#39;0 4 * * *&#39;, &#39;VACUUM&#39;, &#39;some_other_database&#39;);&#xA; schedule&#xA;----------&#xA;       44&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pg_cron can run multiple jobs in parallel, but it runs at most one instance of a job at a time. If a second run is supposed to start before the first one finishes, then the second run is queued and started as soon as the first run completes.&lt;/p&gt; &#xA;&lt;p&gt;The schedule uses the standard cron syntax, in which * means &#34;run every time period&#34;, and a specific number means &#34;but only at this time&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ┌───────────── min (0 - 59)&#xA; │ ┌────────────── hour (0 - 23)&#xA; │ │ ┌─────────────── day of month (1 - 31)&#xA; │ │ │ ┌──────────────── month (1 - 12)&#xA; │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to&#xA; │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)&#xA; │ │ │ │ │&#xA; │ │ │ │ │&#xA; * * * * *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to create a cron schedule is: &lt;a href=&#34;http://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The code in pg_cron that handles parsing and scheduling comes directly from the cron source code by Paul Vixie, hence the same options are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Installing pg_cron&lt;/h2&gt; &#xA;&lt;p&gt;Install on Red Hat, CentOS, Fedora, Amazon Linux with PostgreSQL 12 using &lt;a href=&#34;https://yum.postgresql.org/repopackages/&#34;&gt;PGDG&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install the pg_cron extension&#xA;sudo yum install -y pg_cron_12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install on Debian, Ubuntu with PostgreSQL 12 using &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install the pg_cron extension&#xA;sudo apt-get -y install postgresql-12-cron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install pg_cron by building it from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/citusdata/pg_cron.git&#xA;cd pg_cron&#xA;# Ensure pg_config is in your path, e.g.&#xA;export PATH=/usr/pgsql-12/bin:$PATH&#xA;make &amp;amp;&amp;amp; sudo PATH=$PATH make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up pg_cron&lt;/h2&gt; &#xA;&lt;p&gt;To start the pg_cron background worker when PostgreSQL starts, you need to add pg_cron to &lt;code&gt;shared_preload_libraries&lt;/code&gt; in postgresql.conf. Note that pg_cron does not run any jobs as a long a server is in &lt;a href=&#34;https://www.postgresql.org/docs/current/static/hot-standby.html&#34;&gt;hot standby&lt;/a&gt; mode, but it automatically starts when the server is promoted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add to postgresql.conf&#xA;&#xA;# required to load pg_cron background worker on start-up&#xA;shared_preload_libraries = &#39;pg_cron&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the pg_cron background worker expects its metadata tables to be created in the &#34;postgres&#34; database. However, you can configure this by setting the &lt;code&gt;cron.database_name&lt;/code&gt; configuration parameter in postgresql.conf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add to postgresql.conf&#xA;&#xA;# optionally, specify the database in which the pg_cron background worker should run (defaults to postgres)&#xA;cron.database_name = &#39;postgres&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Previously we could only use GMT time, but now you can adapt your time by setting cron.timezone. You can configure this by setting the &lt;code&gt;cron.timezone&lt;/code&gt; configuration parameter in postgresql.conf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# add to postgresql.conf&#xA;&#xA;# optionally, specify the timezone in which the pg_cron background worker should run (defaults to GMT). E.g:&#xA;cron.timezone = &#39;PRC&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After restarting PostgreSQL, you can create the pg_cron functions and metadata tables using &lt;code&gt;CREATE EXTENSION pg_cron&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;pg_cron&lt;/code&gt; may only be installed to one database in a cluster. If you need to run jobs in multiple databases, use &lt;code&gt;cron.schedule_in_database()&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- run as superuser:&#xA;CREATE EXTENSION pg_cron;&#xA;&#xA;-- optionally, grant usage to regular users:&#xA;GRANT USAGE ON SCHEMA cron TO marco;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: By default, pg_cron uses libpq to open a new connection to the local database, which needs to be allowed by &lt;a href=&#34;https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html&#34;&gt;pg_hba.conf&lt;/a&gt;. It may be necessary to enable &lt;code&gt;trust&lt;/code&gt; authentication for connections coming from localhost in for the user running the cron job, or you can add the password to a &lt;a href=&#34;https://www.postgresql.org/docs/current/static/libpq-pgpass.html&#34;&gt;.pgpass file&lt;/a&gt;, which libpq will use when opening a connection.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, pg_cron can be configured to use background workers. In that case, the number of concurrent jobs is limited by the &lt;code&gt;max_worker_processes&lt;/code&gt; setting, so you may need to raise that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Schedule jobs via background workers instead of localhost connections&#xA;cron.use_background_workers = on&#xA;# Increase the number of available background workers from the default of 8&#xA;max_worker_processes = 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a unix domain socket directory as the hostname and enable &lt;code&gt;trust&lt;/code&gt; authentication for local connections in &lt;a href=&#34;https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html&#34;&gt;pg_hba.conf&lt;/a&gt;, which is normally safe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Connect via a unix domain socket&#xA;cron.host = &#39;/tmp&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For security, jobs are executed in the database in which the &lt;code&gt;cron.schedule&lt;/code&gt; function is called with the same permissions as the current user. In addition, users are only able to see their own jobs in the &lt;code&gt;cron.job&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;h2&gt;Example use cases&lt;/h2&gt; &#xA;&lt;p&gt;Articles showing possible ways of using pg_cron:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2018/01/24/citus-and-pg-partman-creating-a-scalable-time-series-database-on-postgresql/&#34;&gt;Auto-partitioning using pg_partman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2017/12/27/real-time-analytics-dashboards-with-citus/&#34;&gt;Computing rollups in an analytical dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/&#34;&gt;Deleting old data, vacuum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bonesmoses.org/2016/09/09/pg-phriday-irrelevant-inclinations/&#34;&gt;Feeding cats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluca1978.github.io/2019/05/21/pgcron.html&#34;&gt;Routinely invoking a function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.io/blog/2021/03/05/postgres-as-a-cron-server&#34;&gt;Postgres as a cron server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Managed services&lt;/h2&gt; &#xA;&lt;p&gt;The following table keeps track of which of the major managed Postgres services support pg_cron.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aiven.io/postgresql&#34;&gt;Aiven&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.alibabacloud.com/help/doc-detail/150355.htm&#34;&gt;Alibaba Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aws.amazon.com/rds/postgresql/&#34;&gt;Amazon RDS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/postgresql/&#34;&gt;Azure&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.crunchydata.com/products/crunchy-bridge/?ref=producthunt&#34;&gt;Crunchy Bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.digitalocean.com/products/managed-databases/&#34;&gt;DigitalOcean&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cloud.google.com/sql/postgresql/&#34;&gt;Google Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://elements.heroku.com/addons/heroku-postgresql&#34;&gt;Heroku&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://scalegrid.io/postgresql.html&#34;&gt;ScaleGrid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.scaleway.com/en/database/&#34;&gt;Scaleway&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://supabase.io/docs/guides/database&#34;&gt;Supabase&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>