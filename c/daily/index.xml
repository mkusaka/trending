<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-12T01:28:25Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eclipse-threadx/threadx</title>
    <updated>2024-01-12T01:28:25Z</updated>
    <id>tag:github.com,2024-01-12:/eclipse-threadx/threadx</id>
    <link href="https://github.com/eclipse-threadx/threadx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Azure RTOS ThreadX is an advanced real-time operating system (RTOS) designed specifically for deeply embedded applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure RTOS ThreadX&lt;/h1&gt; &#xA;&lt;p&gt;This advanced real-time operating system (RTOS) is designed specifically for deeply embedded applications. Among the multiple benefits it provides are advanced scheduling facilities, message passing, interrupt management, and messaging services. Azure RTOS ThreadX has many advanced features, including picokernel architecture, preemption threshold, event chaining, and a rich set of system services.&lt;/p&gt; &#xA;&lt;p&gt;Here are the key features and modules of ThreadX:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/docs/threadx-features.png&#34; alt=&#34;ThreadX Key Features&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Azure RTOS has been integrated to the semiconductor&#39;s SDKs and development environment. You can develop using the tools of choice from &lt;a href=&#34;https://www.st.com/content/st_com/en/campaigns/x-cube-azrtos-azure-rtos-stm32.html&#34;&gt;STMicroelectronics&lt;/a&gt;, &lt;a href=&#34;https://www.nxp.com/design/software/embedded-software/azure-rtos-for-nxp-microcontrollers:AZURE-RTOS&#34;&gt;NXP&lt;/a&gt;, &lt;a href=&#34;https://github.com/renesas/azure-rtos&#34;&gt;Renesas&lt;/a&gt; and &lt;a href=&#34;https://mu.microchip.com/get-started-simplifying-your-iot-design-with-azure-rtos&#34;&gt;Microchip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also provide &lt;a href=&#34;https://github.com/azure-rtos/getting-started&#34;&gt;getting started guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/azure-rtos/samples&#34;&gt;samples&lt;/a&gt; using hero development boards from semiconductors you can build and test with.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/rtos/threadx/overview-threadx&#34;&gt;Overview of Azure RTOS ThreadX&lt;/a&gt; for the high-level overview, and all documentation and APIs can be found in: &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/rtos/threadx/&#34;&gt;Azure RTOS ThreadX documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also there is dedicated &lt;a href=&#34;https://learn.microsoft.com/training/paths/azure-rtos-threadx/&#34;&gt;learning path of Azure RTOS ThreadX&lt;/a&gt; for learning systematically.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Directory layout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── cmake                        # CMakelist files for building the project&#xA;├── common                       # Core ThreadX files&#xA;├── common_modules               # Core ThreadX module files&#xA;├── common_smp                   # Core ThreadX SMP files&#xA;├── docs                         # Documentation supplements&#xA;├── ports                        # Architecture and compiler specific files. See below for directory breakdown     &#xA;│   ├── cortex_m7     &#xA;│   │   ├── iar                  # Example IAR compiler sample project&#xA;│   │   │   ├── example build    # IAR workspace and sample project files&#xA;│   │   │   ├── inc              # tx_port.h for this architecture&#xA;│   │   │   └── src              # Source files for this architecture&#xA;│   │   ├── ac6                  # Example ac6/Keil sample project&#xA;│   │   ├── gnu                  # Example gnu sample project&#xA;│   │   └── ...&#xA;│   └── ...        &#xA;├── ports_modules                # Architecture and compiler specific files for threadX modules&#xA;├── ports_smp                    # Architecture and compiler specific files for threadX SMP&#xA;├── samples                      # demo_threadx.c&#xA;└── utility                      # Test cases and utilities&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Branches &amp;amp; Releases&lt;/h2&gt; &#xA;&lt;p&gt;The master branch has the most recent code with all new features and bug fixes. It does not represent the latest General Availability (GA) release of the library. Each official release (preview or GA) will be tagged to mark the commit and push it into the Github releases tab, e.g. &lt;code&gt;v6.2-rel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When you see xx-xx-xxxx, 6.x or x.x in function header, this means the file is not officially released yet. They will be updated in the next release. See example below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;/**************************************************************************/&#xA;/*                                                                        */&#xA;/*  FUNCTION                                               RELEASE        */&#xA;/*                                                                        */&#xA;/*    _tx_initialize_low_level                          Cortex-M23/GNU    */&#xA;/*                                                           6.x          */&#xA;/*  AUTHOR                                                                */&#xA;/*                                                                        */&#xA;/*    Scott Larson, Microsoft Corporation                                 */&#xA;/*                                                                        */&#xA;/*  DESCRIPTION                                                           */&#xA;/*                                                                        */&#xA;/*    This function is responsible for any low-level processor            */&#xA;/*    initialization, including setting up interrupt vectors, setting     */&#xA;/*    up a periodic timer interrupt source, saving the system stack       */&#xA;/*    pointer for use in ISR processing later, and finding the first      */&#xA;/*    available RAM memory address for tx_application_define.             */&#xA;/*                                                                        */&#xA;/*  INPUT                                                                 */&#xA;/*                                                                        */&#xA;/*    None                                                                */&#xA;/*                                                                        */&#xA;/*  OUTPUT                                                                */&#xA;/*                                                                        */&#xA;/*    None                                                                */&#xA;/*                                                                        */&#xA;/*  CALLS                                                                 */&#xA;/*                                                                        */&#xA;/*    None                                                                */&#xA;/*                                                                        */&#xA;/*  CALLED BY                                                             */&#xA;/*                                                                        */&#xA;/*    _tx_initialize_kernel_enter           ThreadX entry function        */&#xA;/*                                                                        */&#xA;/*  RELEASE HISTORY                                                       */&#xA;/*                                                                        */&#xA;/*    DATE              NAME                      DESCRIPTION             */&#xA;/*                                                                        */&#xA;/*  09-30-2020      Scott Larson            Initial Version 6.1           */&#xA;/*  xx-xx-xxxx      Scott Larson            Include tx_user.h,            */&#xA;/*                                            resulting in version 6.x    */&#xA;/*                                                                        */&#xA;/**************************************************************************/ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Architecture Ports&lt;/h2&gt; &#xA;&lt;h3&gt;ThreadX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;arc_em      cortex_a12        cortex_m0     cortex_r4&#xA;arc_hs      cortex_a15        cortex_m23    cortex_r5&#xA;arm11       cortex_a17        cortex_m3     cortex_r7&#xA;arm9        cortex_a34        cortex_m33    &#xA;c667x       cortex_a35        cortex_m4    &#xA;linux       cortex_a5         cortex_m55&#xA;risc-v32    cortex_a53        cortex_m7&#xA;rxv1        cortex_a55        cortex_m85&#xA;rxv2        cortex_a57&#xA;rxv3        cortex_a5x&#xA;win32       cortex_a65&#xA;xtensa      cortex_a65ae&#xA;            cortex_a7&#xA;            cortex_a72&#xA;            cortex_a73&#xA;            cortex_a75&#xA;            cortex_a76&#xA;            cortex_a76ae&#xA;            cortex_a77&#xA;            cortex_a8&#xA;            cortex_a9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ThreadX Modules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/rtos/threadx-modules/chapter1&#34;&gt;Azure RTOS ThreadX Modules&lt;/a&gt; component provides an infrastructure for applications to dynamically load modules that are built separately from the resident portion of the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cortex_a35&#xA;cortex_a35_smp&#xA;cortex_a7&#xA;cortex_m0+&#xA;cortex_m23&#xA;cortex_m3&#xA;cortex_m33&#xA;cortex_m4&#xA;cortex_m7&#xA;cortex_r4&#xA;rxv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ThreadX SMP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/rtos/threadx/threadx-smp/chapter1&#34;&gt;Azure RTOS ThreadX SMP&lt;/a&gt; is a high-performance real-time SMP kernel designed specifically for embedded applications.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;arc_hs_smp&#xA;cortex_a34_smp&#xA;cortex_a35_smp&#xA;cortex_a53_smp&#xA;cortex_a55_smp&#xA;cortex_a57_smp&#xA;cortex_a5x_smp&#xA;cortex_a5_smp&#xA;cortex_a65ae_smp&#xA;cortex_a65_smp&#xA;cortex_a72_smp&#xA;cortex_a73_smp&#xA;cortex_a75_smp&#xA;cortex_a76ae_smp&#xA;cortex_a76_smp&#xA;cortex_a77_smp&#xA;cortex_a78_smp&#xA;cortex_a7_smp&#xA;cortex_a9_smp&#xA;linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adaptation layer for ThreadX&lt;/h2&gt; &#xA;&lt;p&gt;Azure RTOS ThreadX is an advanced real-time operating system (RTOS) designed specifically for deeply embedded applications. To help ease application migration to Azure RTOS, ThreadX provides &lt;a href=&#34;https://github.com/azure-rtos/threadx/tree/master/utility/rtos_compatibility_layers&#34;&gt;adaption layers&lt;/a&gt; for various legacy RTOS APIs (FreeRTOS, POSIX, OSEK, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Component dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The main components of Azure RTOS are each provided in their own repository, but there are dependencies between them, as shown in the following graph. This is important to understand when setting up your builds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/docs/deps.png&#34; alt=&#34;dependency graph&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will have to take the dependency graph above into account when building anything other than ThreadX itself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building and using the library&lt;/h3&gt; &#xA;&lt;p&gt;Instruction for building the ThreadX as static library using Arm GNU Toolchain and CMake. If you are using toolchain and IDE from semiconductor, you might follow its own instructions to use Azure RTOS components as explained in the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the following tools:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake&lt;/a&gt; version 3.0 or later&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads&#34;&gt;Arm GNU Toolchain for arm-none-eabi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ninja-build.org/&#34;&gt;Ninja&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/azure-rtos/threadx.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define the features and addons you need in &lt;code&gt;tx_user.h&lt;/code&gt; and build together with the component source code. You can refer to &lt;a href=&#34;https://github.com/azure-rtos/threadx/raw/master/common/inc/tx_user_sample.h&#34;&gt;&lt;code&gt;tx_user_sample.h&lt;/code&gt;&lt;/a&gt; as an example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building as a static library&lt;/p&gt; &lt;p&gt;Each component of Azure RTOS comes with a composable CMake-based build system that supports many different MCUs and host systems. Integrating any of these components into your device app code is as simple as adding a git submodule and then including it in your build using the CMake &lt;code&gt;add_subdirectory()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the typical usage pattern is to include ThreadX into your device code source tree to be built &amp;amp; linked with your code, you can compile this project as a standalone static library to confirm your build is set up correctly.&lt;/p&gt; &lt;p&gt;An example of building the library for Cortex-M4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake -Bbuild -GNinja -DCMAKE_TOOLCHAIN_FILE=cmake/cortex_m4.cmake .&#xA;&#xA;$ cmake --build ./build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Professional support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/support/options/&#34;&gt;Professional support plans&lt;/a&gt; are available from Microsoft. For community support and others, see the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/#resources&#34;&gt;Resources&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;License terms for using Azure RTOS are defined in the LICENSE.txt file of this repo. Please refer to this file for all definitive licensing information. No additional license fees are required for deploying Azure RTOS on hardware defined in the LICENSED-HARDWARE.txt file. If you are using hardware not defined in the LICENSED-HARDWARE.txt file or have licensing questions in general, please contact Microsoft directly at &lt;a href=&#34;https://aka.ms/azrtos-license&#34;&gt;https://aka.ms/azrtos-license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The following are references to additional Azure RTOS resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product introduction and white papers&lt;/strong&gt;: &lt;a href=&#34;https://azure.com/rtos&#34;&gt;https://azure.com/rtos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;General technical questions&lt;/strong&gt;: &lt;a href=&#34;https://aka.ms/QnA/azure-rtos&#34;&gt;https://aka.ms/QnA/azure-rtos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product issues and bugs, or feature requests&lt;/strong&gt;: &lt;a href=&#34;https://github.com/azure-rtos/threadx/issues&#34;&gt;https://github.com/azure-rtos/threadx/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Licensing and sales questions&lt;/strong&gt;: &lt;a href=&#34;https://aka.ms/azrtos-license&#34;&gt;https://aka.ms/azrtos-license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product roadmap and support policy&lt;/strong&gt;: &lt;a href=&#34;https://aka.ms/azrtos/lts&#34;&gt;https://aka.ms/azrtos/lts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blogs and videos&lt;/strong&gt;: &lt;a href=&#34;http://msiotblog.com&#34;&gt;http://msiotblog.com&lt;/a&gt; and &lt;a href=&#34;https://aka.ms/iotshow&#34;&gt;https://aka.ms/iotshow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Azure RTOS TraceX Installer&lt;/strong&gt;: &lt;a href=&#34;https://aka.ms/azrtos-tracex-installer&#34;&gt;https://aka.ms/azrtos-tracex-installer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also check &lt;a href=&#34;https://stackoverflow.com/questions/tagged/azure-rtos+threadx&#34;&gt;previous questions&lt;/a&gt; or ask new ones on StackOverflow using the &lt;code&gt;azure-rtos&lt;/code&gt; and &lt;code&gt;threadx&lt;/code&gt; tags.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Azure RTOS provides OEMs with components to secure communication and to create code and data isolation using underlying MCU/MPU hardware protection mechanisms. It is ultimately the responsibility of the device builder to ensure the device fully meets the evolving security requirements associated with its specific use case.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the instructions provided in the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse-threadx/threadx/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for the corresponding repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joexbayer/RetrOS-32</title>
    <updated>2024-01-12T01:28:25Z</updated>
    <id>tag:github.com,2024-01-12:/joexbayer/RetrOS-32</id>
    <link href="https://github.com/joexbayer/RetrOS-32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;32bit Hobby Operatingsystem with graphics, multitasking and networking on i386 architecture.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;RetrOS 32bit&lt;/h1&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/graphics/logo.png?raw=true&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/actions/workflows/pipeline.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Hobby 32bit operatingsystem project focusing on networking on i386 architecture. &lt;br&gt; &lt;a href=&#34;https://github.com/joexbayer/RetrOS-32/tree/main/docs&#34;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/joexbayer/RetrOS-32&#34;&gt;View Demo&lt;/a&gt; · &lt;a href=&#34;https://github.com/joexbayer/RetrOS-32/issues&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/joexbayer/RetrOS-32/issues&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- TABLE OF CONTENTS --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#about-the-project&#34;&gt;About The Project&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#built-with&#34;&gt;Built With&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/retros.gif?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/screenshot1.png?raw=true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/screenshot2.png?raw=true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/screenshot3.png?raw=true&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;32bit Hobby Operatingsystem with graphics, multitasking and networking!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Started: 12.05.2022&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/textmode.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Built With&lt;/h3&gt; &#xA;&lt;p&gt;This project is built with C &amp;amp; Assembly for the kernel, utilities and build system. C++ for userspace applications and Make for compilation. Docker used for crossplatform compilation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/docker-%230db7ed.svg?style=for-the-badge&amp;amp;logo=docker&amp;amp;logoColor=white&#34; alt=&#34;Docker&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/C-00599C?style=for-the-badge&amp;amp;logo=c&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/C%2B%2B-00599C?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;Tested on: Lenovo x240, Asus Eee PC series, Dell Optiplex 780, Samsung N150 Plus, Samsung NP-NC10, IBM Thinkpad a21p&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/hardware1.jpg?raw=true&#34; width=&#34;250&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/hardware2.jpg?raw=true&#34; width=&#34;250&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Crossplatform: Docker to compile the .iso file and QEMU for emulation.&lt;br&gt; For native compilation you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;i386-elf-gcc, i386-elf-ld and i386-elf-g++ for MacOS.&lt;/li&gt; &#xA; &lt;li&gt;build-essential and gcc-multilib for Linux / WSL (ubuntu)&lt;/li&gt; &#xA; &lt;li&gt;Also need: grub2, xorriso and xxd (for using Grub as bootloader)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;To compile the kernel and its needed programs you simply need to run &lt;em&gt;make img&lt;/em&gt; and &lt;em&gt;make qemu&lt;/em&gt; to open QEMU&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/joexbayer/RetrOS-32.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the kernel and create .img file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make img&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: needs sudo to mount the .img file and copy over files!&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch QEMU&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make qemu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use GRUB (Optional)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make grub&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;h5&gt;MacOS can compile the kernel but not the needed tools.&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/joexbayer/RetrOS-32.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the kernel / OS&lt;/p&gt; &lt;p&gt;Docker:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch QEMU&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make qemu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use GRUB (Optional)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make grub&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Using Docker (can also compile in WSL)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/joexbayer/RetrOS-32.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile and Launch QEMU&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./make.cmd run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- USAGE EXAMPLES --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run RetrOS-32:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://copy.sh/v86/&#34;&gt;http://copy.sh/v86/&lt;/a&gt; : Upload .img file as Hard disk image.&lt;/li&gt; &#xA; &lt;li&gt;QEMU: &lt;code&gt;make qemu&lt;/code&gt; or &lt;code&gt;qemu-system-i386 &amp;lt;image name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Real hardware: Burn .iso file to USB or CD (Use a GRUB iso)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;Tested on: Lenovo x240, Asus Eee PC series, Dell Optiplex 780, Samsung N150 Plus, Samsung NP-NC10, IBM Thinkpad a21p&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/hardware1.jpg?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/joexbayer/RetrOS-32/raw/main/docs/pictures/hardware2.jpg?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;p&gt;=======&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;blockquote&gt; &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;26e4e17bf04130ec26fc6176f7d3d05259fc6796&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &#xA;     &lt;/blockquote&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Project Structure (TBD)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;NETOS - Project&#xA;├── Dockerfile &#xA;├── LICENSE.txt&#xA;├── Makefile&#xA;├── apps (userspace applications)&#xA;│   ├── Makefile&#xA;│   ├── &amp;lt;app&amp;gt;&#xA;│   ├── libcore.a&#xA;│   ├── libgraphic.a&#xA;│   ├── libnet.a&#xA;│   ├── readme.md&#xA;│   └── utils&#xA;│       └── *.cpp&#xA;├── bin &#xA;│   └── *.o&#xA;├── boot (custom bootloader)&#xA;│   ├── bootloader.s&#xA;│   └── multiboot.ld&#xA;├── docker-compose.yml&#xA;├── docs (documentation)&#xA;│   ├── *.md&#xA;├── drivers (kernel drivers)&#xA;│   └── *.c&#xA;├── fs (filesystem)&#xA;│   ├── Makefile&#xA;│   ├── bin&#xA;│   └── *.c&#xA;├── graphics&#xA;│   └── *.c&#xA;├── include&#xA;│   ├── arch&#xA;│   │   └── *.h&#xA;│   ├── fs&#xA;│   │   └── *.h&#xA;│   ├── gfx&#xA;│   │   └── *.h&#xA;│   ├── lib&#xA;│   │   └── *.h&#xA;│   ├── net&#xA;│   │   └── *.h&#xA;│   └── *.h&#xA;├── kernel (main kernel source files)&#xA;│   ├── arch&#xA;│   │   └── *.c&#xA;│   ├── kthreads&#xA;│   │   └── *.c&#xA;│   └── *.c&#xA;├── legacy (old code)&#xA;├── lib (libraries)&#xA;│   └── *.c&#xA;├── net (networking code)&#xA;│   └── *.c&#xA;├── readme.md&#xA;├── rootfs (root filesystem for the OS)&#xA;├── tests (testing code)&#xA;│   ├── Makefile&#xA;│   ├── bin&#xA;│   ├── *_test.c&#xA;│   └── readme.md&#xA;└── tools (build tools)&#xA;    ├── scripts&#xA;    └── bin&#xA;        └── *.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ROADMAP --&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom Bootloader &amp;amp; GRUB compatible&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stage 2 bootloader&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Wallpapers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mountable image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-threaded pre-emptive scheduling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GDT &amp;amp; TSS kernel / userspace separation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interrupt handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PS/2 Keyboard &amp;amp; Mouse, PIT, VESA (640x480x8), RTC, Serial drivers, E1000&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PCI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 8Bit RGB to 8Bit VGA&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filesystem&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Textmode VGA only&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Networkstack &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ethernet, IP, ARP, UDP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Socket API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interfaces &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loopback&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DHCP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DNS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Netcat style commands&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Telnet&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; HTTP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; HTML&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ATA IDE Driver &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ext2 (like) Filesystem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FAT16, support for up to 32mb files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; read / write&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Atapi&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Memory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 32bit Virtual Memory&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; kalloc / kfree (kernel)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; malloc / free (userspace)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Graphics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Window Manager&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GFXLib&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Double framebuffer rendering&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mouse events&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamic resize&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fullscreen&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Terminal, Window Server, Process Informtaion, Finder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Library (printf, memcpy, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IPC&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; System calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; C Compiler / interpreter to bytecode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom VM to run bytecode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Editor with Syntax Highlighting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Calculator&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 3D Game&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Snake game (Textmode only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Userspace threads (shared virtual memory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remote virtual terminal over TCP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Build&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sync / Migration Took&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; mkfs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Testing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create &amp;amp; Encode icons and wallpapers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/joexbayer/RetrOS-32/issues&#34;&gt;open issues&lt;/a&gt; for a full list of proposed features (and known issues).&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE.txt&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- CONTACT --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Joe Bayer - &lt;a href=&#34;mailto:joeba@uio.no&#34;&gt;joeba@uio.no&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/joexbayer/RetrOS-32&#34;&gt;https://github.com/joexbayer/RetrOS-32&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGMENTS --&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Use this space to list resources you find helpful and would like to give credit to. I&#39;ve included a few of my favorites to kick things off!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;README Template(&lt;a href=&#34;https://github.com/othneildrew/Best-README-Template/raw/master/README.md&#34;&gt;https://github.com/othneildrew/Best-README-Template/blob/master/README.md&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/joexbayer/RetrOS-32/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
</feed>