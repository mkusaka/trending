<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-20T01:29:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GermanAizek/WinRing0</title>
    <updated>2025-04-20T01:29:47Z</updated>
    <id>tag:github.com,2025-04-20:/GermanAizek/WinRing0</id>
    <link href="https://github.com/GermanAizek/WinRing0" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WinRing0 is a hardware access library for Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WinRing0&lt;/h1&gt; &#xA;&lt;p&gt;WinRing0 is a hardware access library for Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;WinRing0 library allows x86/x64 Windows applications to access&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I/O port&lt;/li&gt; &#xA; &lt;li&gt;MSR (Model-Specific Register)&lt;/li&gt; &#xA; &lt;li&gt;PCI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyrights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2007-2009 &lt;a href=&#34;https://github.com/hiyohiyo&#34;&gt;hiyohiyo&lt;/a&gt; &amp;lt;&lt;a href=&#34;mailto:hiyohiyo@crystalmark.info&#34;&gt;hiyohiyo@crystalmark.info&lt;/a&gt;&amp;gt; - original author&lt;/li&gt; &#xA; &lt;li&gt;2019-2024 &lt;a href=&#34;https://github.com/GermanAizek&#34;&gt;GermanAizek&lt;/a&gt; &amp;lt;&lt;a href=&#34;mailto:GermanAizek@yandex.ru&#34;&gt;GermanAizek@yandex.ru&lt;/a&gt;&amp;gt; - current maintainer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SPECIAL THANKS&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2007 kashiwano masahiro &amp;lt;&lt;a href=&#34;http://www.otto.to/~kasiwano/&#34;&gt;http://www.otto.to/~kasiwano/&lt;/a&gt;&amp;gt; - PCI Debug Library for Win32&lt;/li&gt; &#xA; &lt;li&gt;2007 Yariv Kaplan, WinIo (&lt;a href=&#34;http://www.internals.com/&#34;&gt;http://www.internals.com/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2008 habe - translation support &amp;amp; technical assistance&lt;/li&gt; &#xA; &lt;li&gt;2009 Patrick - bug patch&lt;/li&gt; &#xA; &lt;li&gt;2023 &lt;a href=&#34;https://github.com/Merlin1st&#34;&gt;Vitalii Khoruzhyi&lt;/a&gt; &amp;lt;&lt;a href=&#34;mailto:merlin_1st@livejournal.com&#34;&gt;merlin_1st@livejournal.com&lt;/a&gt;&amp;gt; - x64 build, additional features and work on code&lt;/li&gt; &#xA; &lt;li&gt;2023 &lt;a href=&#34;https://github.com/SecurityAndStuff&#34;&gt;Sophie Lemos&lt;/a&gt; &amp;lt;Press F to pay respects, thanks to microsoft-github&amp;gt; - fixed fatal BSOD error and porting to Windows ARM&lt;/li&gt; &#xA; &lt;li&gt;2023 &lt;a href=&#34;https://github.com/drvexplorer&#34;&gt;drvexplorer&lt;/a&gt; - I suggested using fileIoCreateDeviceSecure() and tidying up output files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;Put WinRing0.dll, WinRing0x64.dll, WinRing0.sys, WinRing0x64.sys, and WinRing0.vxd into the directory where your application&#39;s executable file resides.&lt;/p&gt; &#xA;&lt;h3&gt;C++&lt;/h3&gt; &#xA;&lt;p&gt;See also sample application.&lt;/p&gt; &#xA;&lt;h4&gt;Load-Time Dynamic Linking&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add WinRing0.lib or WinRing0x64.lib to your project.&lt;/li&gt; &#xA; &lt;li&gt;Add #include &#34;OlsApi.h&#34; statement to your source file.&lt;/li&gt; &#xA; &lt;li&gt;Call InitializeOls().&lt;/li&gt; &#xA; &lt;li&gt;Call GetDllStatus() to check error.&lt;/li&gt; &#xA; &lt;li&gt;Call the library&#39;s functions.&lt;/li&gt; &#xA; &lt;li&gt;Call DeinitializeOls().&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Reference : &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/dlls/load-time-dynamic-linking&#34;&gt;Load-Time Dynamic Linking (MSDN)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Run-Time Dynamic Linking&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add #include &#34;OlsApiInit.h&#34; statement to your source file.&lt;/li&gt; &#xA; &lt;li&gt;Call InitOpenLibSys().&lt;/li&gt; &#xA; &lt;li&gt;Call GetDllStatus() to check error.&lt;/li&gt; &#xA; &lt;li&gt;Call the library&#39;s functions. *&lt;/li&gt; &#xA; &lt;li&gt;Call DeinitOpenLibSys().&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*If you would like to call the library&#39;s functions on other source files, you should add #include &#34;OlsApiInitExt.h&#34; statement to the source files.&lt;/p&gt; &#xA;&lt;p&gt;Reference : &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/dlls/run-time-dynamic-linking&#34;&gt;Run-Time Dynamic Linking (MSDN)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C#&lt;/h3&gt; &#xA;&lt;p&gt;See also sample application.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put OpenLibSys.cs into your project.&lt;/li&gt; &#xA; &lt;li&gt;Add using OpenLibSys; statement to your source file.&lt;/li&gt; &#xA; &lt;li&gt;Call GetStatus() and GetDllStatus() to check error.&lt;/li&gt; &#xA; &lt;li&gt;Call the library&#39;s functions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*Supported platform target is &#34;x86&#34;, &#34;x64&#34; and &#34;Any CPU&#34;. But WinRing0 does not support &#34;IA64&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build (Requirement)&lt;/h2&gt; &#xA;&lt;h3&gt;Sample Code&lt;/h3&gt; &#xA;&lt;h4&gt;C++ and C#&lt;/h4&gt; &#xA;&lt;p&gt;Required Visual Studio 2015 Community or higher because of using MFC.&lt;/p&gt; &#xA;&lt;h3&gt;SYS (NT Driver)&lt;/h3&gt; &#xA;&lt;p&gt;Required WDK (Windows Driver Kits)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk&#34;&gt;Get WDK from MSDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install WDK&lt;/li&gt; &#xA; &lt;li&gt;cd WinRing0/source/dll/sys&lt;/li&gt; &#xA; &lt;li&gt;build &lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;VxD (9x Driver)&lt;/h3&gt; &#xA;&lt;p&gt;Required Windows XP SP1 DDK + Win Me support&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get Windows XP SP1 DDK from MSDN&lt;/li&gt; &#xA; &lt;li&gt;Install Windows XP SP1 DDK with Win Me support&lt;/li&gt; &#xA; &lt;li&gt;Open &#34;Win Me Free Build Environment&#34;&lt;/li&gt; &#xA; &lt;li&gt;cd WinRing0\source\dll\vxd&lt;/li&gt; &#xA; &lt;li&gt;nmake&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>clockworkpi/PicoCalc</title>
    <updated>2025-04-20T01:29:47Z</updated>
    <id>tag:github.com,2025-04-20:/clockworkpi/PicoCalc</id>
    <link href="https://github.com/clockworkpi/PicoCalc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A calculator like nothing you&#39;ve ever seen before, right?&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PicoCalc â€“ A cost-effective portable MCU terminal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/clockworkpi/PicoCalc/raw/master/wiki/PicoCalc.png&#34; alt=&#34;picocalc&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ðŸ“Œ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the Raspberry Pi &lt;strong&gt;Pico H&lt;/strong&gt;/&lt;strong&gt;Pico WH&lt;/strong&gt; series and various compatible modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Expandable hardware&lt;/strong&gt; with SPI/IÂ²C/UART for external peripherals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for Micropython &amp;amp; C/C++ development&lt;/strong&gt; using the Raspberry Pi Pico SDK.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable keypad &amp;amp; UI&lt;/strong&gt;, allowing users to modify functionalities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;USB Type-C&lt;/strong&gt; for power and multifunctional design, default is Picoâ€™s serial port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible with 3D-printed cases&lt;/strong&gt;, making it an ideal DIY project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ðŸ›  Development &amp;amp; Customization&lt;/h2&gt; &#xA;&lt;p&gt;PicoCalc supports &lt;strong&gt;C/C++ development&lt;/strong&gt; via Pico SDK,The firmware can be modified to include new features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Graphing functions and scientific calculations.&lt;/li&gt; &#xA; &lt;li&gt;IÂ²C/SPI communication for interfacing with external sensors.&lt;/li&gt; &#xA; &lt;li&gt;Keyboard remapping and custom UI modifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/clockworkpi/PicoCalc/tree/master/Code&#34;&gt;Code&lt;/a&gt; directory for sample applications.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ðŸ“¢ Community &amp;amp; Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official website: &lt;a href=&#34;https://www.clockworkpi.com/&#34;&gt;clockworkpi.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.clockworkpi.com/&#34;&gt;ClockworkPi Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub Issues: &lt;a href=&#34;https://github.com/clockworkpi/PicoCalc/issues&#34;&gt;Report Bugs &amp;amp; Features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>