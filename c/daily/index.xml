<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-14T01:32:03Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yuandaimaahao/AndroidFrameworkTutorial</title>
    <updated>2023-06-14T01:32:03Z</updated>
    <id>tag:github.com,2023-06-14:/yuandaimaahao/AndroidFrameworkTutorial</id>
    <link href="https://github.com/yuandaimaahao/AndroidFrameworkTutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;写给应用开发的 Android Framework 教程&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;1. 为什么要学习 Android Framework？&lt;/h2&gt; &#xA;&lt;p&gt;作为一名应用层 App 开发工程师，我们为什么要学习 Android Framework？答案很简单，为了不被淘汰！在 2023 年的当下,不会点 &lt;code&gt;Binder WMS AMS PMS&lt;/code&gt; 好像都找不到工作了，更过分的是应聘企业甚至希望你会点 &lt;code&gt;RN Fluter&lt;/code&gt; 等跨平台技术，顺便能掌握点前端技术就更好了，活生生的面试造火箭！对于市面上 99% 的 App 的开发是不需要我们掌握 Framework 的，企业去面试这些，只是为了筛人罢了，因为收到的简历确实太多了，常规的题目已经无法对应聘者做出筛选了。&lt;/p&gt; &#xA;&lt;p&gt;对于 Android 应用开发工程师，如果想要长期的在这个行业干下去，大的方向上大概有两条相对靠谱的进阶路线可以选择：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;大前端路线：掌握 Android IOS 双端原生开发，跨平台开发，前端开发&lt;/li&gt; &#xA; &lt;li&gt;系统开发路线：掌握 Linux 系统开发技术，熟悉 Framework 层核心组件原理，了解 Linux 内核&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;大前端路线出现的很大原因是企业挣不到钱了，养不起人了，希望一个人能干几个人的活，这种岗位主打的是性价比。&lt;/p&gt; &#xA;&lt;p&gt;不得不承认的是，移动互联网的黄金年代已经过去，大型 App 的开发机会几乎绝迹，更多的是短平快的小项目。对于这些短平快的小项目，5 年以上开发人员的优势非常小，在企业的角度甚至是减分项，为什么这么说？老开发工资高，加班接受度低，不吃老板画的饼了..... 相比之下，2-3 年工作经验的新人更受欢迎，工资低，有冲劲，能加班。最致命的问题是， App 开发，无论是原生，前端，跨平台技术栈，变化非常快。老开发通常有家庭需要照顾，精力有限，学习速度很可能是赶不上新人。以上种种，导致了 35 岁问题！&lt;/p&gt; &#xA;&lt;p&gt;35 岁问题出现最核心的原因是&lt;strong&gt;你积累的经验没有形成新人入行的门槛&lt;/strong&gt;。简单地说，你的工作不吃经验！&lt;/p&gt; &#xA;&lt;p&gt;Android 系统开发涉及的知识面很广，代码量大，复杂度高，相关的学习资料也非常匮乏。新人上手有较大的门槛，无形中就形成了岗位的护城河。&lt;/p&gt; &#xA;&lt;p&gt;从 2008 年发布 Android1.0 到现在，Android 迭代了很多版本，但核心基础组件是一直没有大的变化的（比如 Binder，应用层四大组件，Handler 等），也就是说系统开发积累的经验是可以积累并形成壁垒的。&lt;/p&gt; &#xA;&lt;p&gt;废了这么多话，归根结底一句话——&lt;strong&gt;Framework 是值得应用开发投入精力来学习的&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;以下是 Android Framework 核心基础的学习路线图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c48b66be13da4acbac0900375c21dc37~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;清晰的学习路线图可以在 &lt;code&gt; 链接：https://pan.baidu.com/s/1F0Ibi8pHcYT39HASy3zvNw 提取码：1234 &amp;nbsp;&lt;/code&gt; 处下载到。&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;学习路线一共分为 11 个专题，接下来看看这 11 个专题都需要学习哪些内容：&lt;/p&gt; &#xA;&lt;h2&gt;2. 基础篇&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153209.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;基础知识涉及的面很广，我们应该做好长期学习的准备，学习过程中做好笔记，及时复习和记忆。另外，我们应该一边学习系统源码，一遍学习基础，遇到不会的，再回头看看基础，形成知识记忆到应用的闭环。千万不要基础学完了，再去学习系统源码，效率低，效果差。&lt;/p&gt; &#xA;&lt;p&gt;基础部分我们主要掌握以下的学习内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux的基本使用：推荐学习 《Linux 运维之道 第二版》&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编程语言&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;C 语言：《一站式学习C编程》、《C语言非常道》、《嵌入式C语言自我修养》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;C++ ：《21天学通 C++》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Java：《Java 核心技术》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;JNI：这个没有特别合适的书籍推荐，可以关注我的博客和公众号，后续会分享一些我的学习笔记。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;工具类编程语言和软件构建工具，学习这部分内容，主要是为了学习 Android 的编译系统，以及在日常工作中能完成一些自动化脚本的编写，提升工作效率&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Makefile：这个没有特别推荐的资料，可以关注我的博客和公众号，后续会分享一些我的学习笔记。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Soong：这个主要就是参看源码中的写法以及参考官方提供的&lt;a href=&#34;https://ci.android.com/builds/submitted/9155974/linux/latest/view/soong_build.html&#34;&gt;文档&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Shell 脚本，推荐学习 《Linux Shell 核心编程指南》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Python，推荐学习 《Python 编程从入门到实战》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go，推荐学习 &lt;a href=&#34;https://time.geekbang.org/course/intro/100024001?tab=intro&#34;&gt;Go 语言从入门到实战&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux 系统编程是比较重要的部分&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.icourse163.org/course/XIYOU-1461794181?from=searchPage&amp;amp;outVendor=zw_mooc_pcssjg_&#34;&gt;Linux编程技术&lt;/a&gt;,这是西安邮电大学提供的一套 mooc 课程，可供入门学习使用&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;《Linux 系统编程 杰克-本尼 佩尔松》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;《UNIX 环境高级编程》《Linux/Unix 系统编程手册》：这两本书可以作为编程过程中的字典使用&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux 内核入门与操作系统基础&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.icourse163.org/course/XIYOU-1461809182?from=searchPage&amp;amp;outVendor=zw_mooc_pcssjg_&#34;&gt;操作系统及Linux内核&lt;/a&gt;， 这是西安邮电大学提供的一套 mooc 课程，可供入门学习使用&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;《深入理解 Linux 内核 第三版》 &amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;《奔跑吧Linux 内核 系列书籍》&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux 驱动开发入门：推荐韦东山老师 B 站分享的系列课程&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;基础部分已分享内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7203571284558381117&#34;&gt;Ubuntu 使用快速入门&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7203931072261193787&#34;&gt;Make 构建工具入门&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7207365636694458425&#34;&gt;理解 Unicode UTF-8 UTF-16 UTF-32&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7222931700439285817&#34;&gt;Linux Shell 脚本编程入门——核心基础语法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7208472817460248637&#34;&gt;SEAndroid 使用极速上手&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7216182763237146681&#34;&gt;理解 C++ 的 Memory Order&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7222931700439285817&#34;&gt;Linux Shell 脚本编程入门1——核心基础语法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7223669247711887416&#34;&gt;Linux Shell 脚本编程入门2——脚本自动化基础&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7224898006842097725&#34;&gt;Android 平台如何编译执行 C C++ 可执行程序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7231809738203611194&#34;&gt;如何阅读 Android 系统源码 —— Java 篇&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7231944822101098554&#34;&gt;如何阅读 Android 系统源码 —— C/C++ 篇&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. AOSP快速上手路线&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153046.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;这部分内容提供有&lt;a href=&#34;https://space.bilibili.com/246522770/channel/collectiondetail?sid=1354523&amp;amp;ctype=0&#34;&gt;免费配套视频教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;这部分内容主要是让大家上手 Android 系统源码，对系统开发有一个感性的认知，主要有以下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7202634945171537977&#34;&gt;AOSP 极速上手&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7216495812577427517&#34;&gt;系统开发工具&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7203958049983529015&#34;&gt;添加 Product&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pixel4 源码编译与刷机&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统开发案例——儿童学习机家长模式初探&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统模块添加&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7216624116337508412&#34;&gt;添加 C/C++、Java 可执行程序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7217279252316045372&#34;&gt;添加 C/C++、Java 库&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7217644586868391996&#34;&gt;添加配置文件与删除已有模块&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统 App 开发入门&amp;nbsp;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7207374216127103033&#34;&gt;系统 App 源码添加&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7207358268804579386&#34;&gt;使用 Android Studio 开发系统 App&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7219712310586474553&#34;&gt;添加开机自启动 Shell 脚本&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;添加开机自启动 C++ 程序&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;APK 预制详解&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统源码管理工具 Gerrit 搭建与使用&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4.Binder&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153146.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Binder 是一套 linux 上的 &lt;strong&gt;远程过程调用（RPC）&lt;/strong&gt; 编程框架，是整个 Android 系统的核心基础组件，在体验的系统开发的“快乐”以后，我们需要第一时间掌握 Binder 的里里外外。计划分享以下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;学习 Binder 的预备知识 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7232459954581307448&#34;&gt;虚拟内存与 Linux 文件访问接口&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7234370256746348581&#34;&gt;Linux 内核常用数据结构&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7235309338097123388&#34;&gt;linux 驱动开发入门&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7210175991837392933&#34;&gt;Binder 基本原理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7210245482861264955&#34;&gt;Binder 程序示例之 C 语言篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7214342319347712057&#34;&gt;Binder 服务注册过程情景分析之C语言篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7215401973842706491&#34;&gt;Binder 服务获取与使用过程情景分析之C语言篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7238491755446878267&#34;&gt;Binder 驱动情景分析之 ServiceManager 启动过程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7241452728747262013&#34;&gt;Binder 驱动情景分析之服务注册过程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7241884241615831098&#34;&gt;Binder 驱动情景分析之服务获取与使用过程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7222109036588810297&#34;&gt;Binder C++ 程序示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7242258285159546936&#34;&gt;Binder 程序示例之 aidl-cpp 篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7223185420157763641/&#34;&gt;Binder C++ 程序分析之主要类解析&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7223185420157943865&#34;&gt;Binder 服务注册过程情景分析之 C++ 篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7223410490763771941&#34;&gt;Binder 服务获取与使用过程情景分析之 C++ 篇&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Binder 程序示例之 Java 篇&lt;/li&gt; &#xA; &lt;li&gt;Binder Java 程序分析之主要类解析&lt;/li&gt; &#xA; &lt;li&gt;Binder 服务注册过程情景分析之 Java 篇&lt;/li&gt; &#xA; &lt;li&gt;Binder 服务获取与使用过程情景分析之 Java 篇&lt;/li&gt; &#xA; &lt;li&gt;Binder 多线程分析&lt;/li&gt; &#xA; &lt;li&gt;Binder 匿名服务分析&lt;/li&gt; &#xA; &lt;li&gt;Binder 死亡通知机制&lt;/li&gt; &#xA; &lt;li&gt;Binder 相关疑难 bug 解析&lt;/li&gt; &#xA; &lt;li&gt;Binder 面试题解析&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5.基础组件&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153351.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;所谓基础组件，就是系统源码中使用的较多的模块，需要学习的内容主要包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 源码中的智能指针&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 属性系统使用与分析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 日志系统使用与分析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 中的权限管理&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 匿名共享&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;基础组件面试题解析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;6.Hal 与硬件服务&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153441.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hal 主要是对驱动功能做一些封装，下接驱动，上接 Framework，主要学习以下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7207602567290765373&#34;&gt;Kernel 下载与编译&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7207607724900810812&#34;&gt;Linux 驱动开发入门&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/yuandaimaahao/AndroidFrameworkTutorial/raw/main/4.Hal%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%9C%8D%E5%8A%A1/3.Hal%20%E5%B1%82%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%20Hello%20Dirver%20%E7%9A%84%E6%8E%A5%E5%8F%A3.md&#34;&gt;Hal 层添加访问 linux 驱动的接口&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通过 JNI 访问到 Hal 层接口&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Framework 中添加访问 Hello Driver 的硬件服务&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编写 App 访问硬件服务&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HwBinder 分析上&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HwBinder 分析中&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HwBinder 分析下&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hal 层面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;7.构造系统&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153458.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;有的时候我们可能需要修改构造系统的行为，这需要我们对 AOSP 的构造系统有基本的认识，下面是构造系统的学习顺序：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;AOSP 构造系统的演进&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;构造系统初始化&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编译过程解析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打包流程解析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;构造系统面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;8. 应用层框架&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417153554.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;应用层框架是应用开发接触最频繁的组件，主要掌握以下几个方面：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;AMS/ATMS 与四大组件&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Activity 启动过程与进程启动&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Service 启动&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ContentProvider 实现原理&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;广播机制&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Handler与Looper消息处理机制&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PackageManagerService 工作流程与原理&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;应用层框架面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;9.系统启动过程&lt;/h2&gt; &#xA;&lt;p&gt;系统启动是我们常打交道的部分，其流程如下图所示：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417154556.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;图片来自&lt;a href=&#34;https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode/raw/master/article/android/framework/Android-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.md&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;主要熟悉以下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;系统启动过程整体流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;init 进程解析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;zygote 进程解析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SystemServer 进程解析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统启动过程面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;10.Android 图形系统&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417154734.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android 图形系统是系统框架中一个非常重要的子系统，我们从以下几个方面来学习和理解图形系统的整体框架：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;图形系统整体框架&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hal 层原理分析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SurfaceFlinger 实现与剖析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;WMS 实现与剖析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android View 系统分析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSync 原理解析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 图形系统面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;11.Android 输入系统&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417154922.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;输入系统主要分为输入子系统和 IMS，我们重以下几个角度来学习 Android 的输入系统：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;输入系统整体框架&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;事件的读取&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;事件的分发&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;事件的处理&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 输入系统面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;12.系统应用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/20230417154938.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;系统开发的大部分内容是做系统应用开发，常修改的系统应用如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launcher&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SystemUI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统应用开发相关面试题分析&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;总结&lt;/h2&gt; &#xA;&lt;p&gt;在掌握了这 11 个专题后，不论是继续研究 Framework 中其他模块，或是参与 App 开发，又或是研究内核与驱动，我相信，你一定早已是是游刃有余了！&lt;/p&gt; &#xA;&lt;h2&gt;关于&lt;/h2&gt; &#xA;&lt;p&gt;如果你对 Framework 感兴趣或者正在学习 Framework，可以关注我的微信公众号，我会在公众号上持续分享我的经验，帮助正在学习的你少走一些弯路。学习过程中如果你有疑问或者你的经验想要分享给大家可以添加我的微信，我拉你进技术交流群。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/stingerzou/pic-bed/raw/master/img/4e7348e352774883ecb19ab021d6cee.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SiliconLabs/gecko_sdk</title>
    <updated>2023-06-14T01:32:03Z</updated>
    <id>tag:github.com,2023-06-14:/SiliconLabs/gecko_sdk</id>
    <link href="https://github.com/SiliconLabs/gecko_sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Gecko SDK (GSDK) combines all Silicon Labs 32-bit IoT product software development kits (SDKs) based on Gecko Platform into a single, integrated SDK.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Silicon Labs Gecko SDK (GSDK)&lt;/h1&gt; &#xA;&lt;p&gt;The Gecko SDK (GSDK) combines Silicon Labs wireless software development kits (SDKs) and Gecko Platform into a single, integrated package. The GSDK is your primary tool for developing in the Silicon Labs IoT Software ecosystem. All of Silicon Labs&#39; stacks are written in-house to provide a seamless experience from silicon to tools, allowing you to unlock powerful features with ease, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Abstraction of complex requirements like multiprotocol and pre-certification&lt;/li&gt; &#xA; &lt;li&gt;Industry-leading ability to support a large number of nodes&lt;/li&gt; &#xA; &lt;li&gt;Ultra-low power consumption&lt;/li&gt; &#xA; &lt;li&gt;Strong network reliability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Silicon Labs also helps future-proof your devices with over-the-air software and security updates, helping to minimize maintenance cost and improve your end user product experience!&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Gecko SDK is covered by one of several different licenses. The default license is the &lt;a href=&#34;https://www.silabs.com/about-us/legal/master-software-license-agreement&#34;&gt;Master Software License Agreement (MSLA)&lt;/a&gt;, which applies unless otherwise noted. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/SiliconLabs/gecko_sdk/gsdk_4.3/License.txt&#34;&gt;License.txt&lt;/a&gt; for full details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;An archive of all documents associated with the latest release of GSDK can be found in &lt;a href=&#34;https://github.com/SiliconLabs/gecko_sdk/releases&#34;&gt;Releases&lt;/a&gt;. Documentation for some of the protocol SDKs and software components is available on &lt;a href=&#34;https://docs.silabs.com&#34;&gt;https://docs.silabs.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with GSDK&lt;/h2&gt; &#xA;&lt;p&gt;The recommended method to get started with the GSDK is to first install &lt;a href=&#34;https://www.silabs.com/developers/simplicity-studio&#34;&gt;Simplicity Studio 5&lt;/a&gt;, which will setup your development environment and walk you through the installation of GSDK. Alternatively, GSDK and other required tools may be installed manually.&lt;/p&gt; &#xA;&lt;h3&gt;Installing through Simplicity Studio&lt;/h3&gt; &#xA;&lt;p&gt;Simplicity Studio 5 includes everything needed for IoT product development with Silicon Labs devices, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detection and recognition of evaluation and development kits,&lt;/li&gt; &#xA; &lt;li&gt;Resource navigator with kit and device-specific content,&lt;/li&gt; &#xA; &lt;li&gt;Software project generator for multiple IDEs and GNU Make targets,&lt;/li&gt; &#xA; &lt;li&gt;Software and hardware configuration tools,&lt;/li&gt; &#xA; &lt;li&gt;Eclipse CDT-based IDE,&lt;/li&gt; &#xA; &lt;li&gt;GNU toolchain,&lt;/li&gt; &#xA; &lt;li&gt;Advanced network analysis tools,&lt;/li&gt; &#xA; &lt;li&gt;Code-correlated energy profiling,&lt;/li&gt; &#xA; &lt;li&gt;And a variety of other tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Start by downloading the &lt;a href=&#34;https://www.silabs.com/developers/simplicity-studio&#34;&gt;Simplicity Studio&lt;/a&gt; package for your operating system from &lt;a href=&#34;https://www.silabs.com/simplicity&#34;&gt;https://www.silabs.com/simplicity&lt;/a&gt;. Step-by-step installation instructions are provided in the online &lt;a href=&#34;https://docs.silabs.com/simplicity-studio-5-users-guide/latest/ss-5-users-guide-getting-started/install-ss-5-and-software&#34;&gt;Simplicity Studio 5 User’s Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing GSDK and Tools Manually&lt;/h3&gt; &#xA;&lt;p&gt;A GSDK development environment may also be installed and set up manually.&lt;/p&gt; &#xA;&lt;h4&gt;GSDK&lt;/h4&gt; &#xA;&lt;p&gt;GSDK releases are packaged as an archive that may be downloaded from the &lt;a href=&#34;https://github.com/SiliconLabs/gecko_sdk/releases&#34;&gt;Releases&lt;/a&gt; page on GitHub. You may also clone this repo using a &lt;a href=&#34;https://github.com/git-guides/install-git&#34;&gt;git client&lt;/a&gt;. Note that an installation of &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;git lfs&lt;/a&gt; is also required. If you are installing git lfs only to use with the GSDK, you do not need to specify file types.&lt;/p&gt; &#xA;&lt;h4&gt;Toolchain&lt;/h4&gt; &#xA;&lt;p&gt;This release of GSDK supports the Arm Embedded Toolchain version 10.3-2021.10 and IAR Embedded Workbench version 9.20.4. One of these toolchains must be installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&#34;&gt;GNU Arm Embedded Toolchain&lt;/a&gt; - Download and install v10.3-2021.10 for your host operating system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iar.com/downloads&#34;&gt;IAR Embedded Workbench for Arm&lt;/a&gt; - Only the latest version is available in Downloads; for older versions you must log-in to your &#34;My Pages&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Silicon Labs Configurator (SLC) Command-line Interface (CLI)&lt;/h4&gt; &#xA;&lt;p&gt;GSDK contains software that follows the &lt;a href=&#34;https://siliconlabs.github.io/slc-specification/&#34;&gt;SLC specification&lt;/a&gt;. Software is grouped into components (defined by .slcc files) that may provide features and/or require features provided by other components. Example projects (.slcp) describe a single software application (usually made up of multiple components plus application code) that can be used to generate an IDE project.&lt;/p&gt; &#xA;&lt;p&gt;Simplicity Studio 5 includes a pre-integrated version of SLC tooling. The SLC-CLI tool provides a command-line alternative that, among other things, will resolve project and component dependencies and generate a project for a specified embedded target and build system (for example, IAR Embedded Workbench or GNU tools via a Makefile).&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://siliconlabs.github.io/slc-specification/&#34;&gt;SLC specification&lt;/a&gt; for details about SLC. For information on installing and using the SLC-CLI, see &lt;a href=&#34;https://www.silabs.com/documents/public/user-guides/ug520-software-project-generation-configuration-with-slc-cli.pdf&#34;&gt;UG520: Software Project Generation and Configuration with SLC-CLI&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>