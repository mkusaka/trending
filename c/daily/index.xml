<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-30T01:24:43Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hmgle/graftcp</title>
    <updated>2023-09-30T01:24:43Z</updated>
    <id>tag:github.com,2023-09-30:/hmgle/graftcp</id>
    <link href="https://github.com/hmgle/graftcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flexible tool for redirecting a given program&#39;s TCP traffic to SOCKS5 or HTTP proxy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;graftcp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hmgle/graftcp/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;graftcp&lt;/code&gt; can redirect the TCP connection made by the given program [application, script, shell, etc.] to SOCKS5 or HTTP proxy.&lt;/p&gt; &#xA;&lt;p&gt;Compared with &lt;a href=&#34;https://linux.die.net/man/8/tsocks&#34;&gt;tsocks&lt;/a&gt;, &lt;a href=&#34;http://proxychains.sourceforge.net/&#34;&gt;proxychains&lt;/a&gt; or &lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34;&gt;proxychains-ng&lt;/a&gt;, &lt;code&gt;graftcp&lt;/code&gt; is not using the &lt;a href=&#34;https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick&#34;&gt;LD_PRELOAD trick&lt;/a&gt; which only work for dynamically linked programs, e.g., &lt;a href=&#34;https://github.com/rofl0r/proxychains-ng/issues/199&#34;&gt;applications built by Go can not be hook by proxychains-ng&lt;/a&gt;. &lt;code&gt;graftcp&lt;/code&gt; can trace or modify any given program&#39;s connect by &lt;a href=&#34;https://en.wikipedia.org/wiki/Ptrace&#34;&gt;&lt;code&gt;ptrace(2)&lt;/code&gt;&lt;/a&gt;, so it is workable for any program. The principle will be explained in this paragraph of &lt;a href=&#34;https://raw.githubusercontent.com/hmgle/graftcp/master/#principles&#34;&gt;how does it work&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;graftcp&lt;/code&gt; runs on Linux. Building &lt;code&gt;graftcp-local&lt;/code&gt; requires &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/hmgle/graftcp.git&#xA;cd graftcp&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After make finishes, you&#39;ll be able to use &lt;code&gt;local/graftcp-local&lt;/code&gt; and &lt;code&gt;./graftcp&lt;/code&gt;. Optionally, you can also install them to system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo make install&#xA;# Enable and activate systemed unit &#xA;sudo make install_systemd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install from binary package&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/hmgle/graftcp/releases/download/v0.4.0/graftcp_0.4.0-1_amd64.deb&#34;&gt;Debian&lt;/a&gt; or &lt;a href=&#34;https://github.com/hmgle/graftcp/releases/download/v0.4.0/graftcp-0.4.0-1-x86_64.pkg.tar.zst&#34;&gt;Arch Linux&lt;/a&gt; package from &lt;a href=&#34;https://github.com/hmgle/graftcp/releases&#34;&gt;https://github.com/hmgle/graftcp/releases&lt;/a&gt; and install.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;graftcp-local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ local/graftcp-local -h&#xA;Usage of local/graftcp-local:&#xA;  -config string&#xA;        Path to the configuration file&#xA;  -http_proxy string&#xA;        http proxy address, e.g.: 127.0.0.1:8080&#xA;  -listen string&#xA;        Listen address (default &#34;:2233&#34;)&#xA;  -logfile string&#xA;        Write logs to file&#xA;  -loglevel value&#xA;        Log level (0-6) (default 1)&#xA;  -pipepath string&#xA;        Pipe path for graftcp to send address info (default &#34;/tmp/graftcplocal.fifo&#34;)&#xA;  -select_proxy_mode string&#xA;        Set the mode for select a proxy [auto | random | only_http_proxy | only_socks5] (default &#34;auto&#34;)&#xA;  -service string&#xA;        Control the system service: [&#34;start&#34; &#34;stop&#34; &#34;restart&#34; &#34;install&#34; &#34;uninstall&#34;]&#xA;  -socks5 string&#xA;        SOCKS5 address (default &#34;127.0.0.1:1080&#34;)&#xA;  -syslog&#xA;        Send logs to the local system logger (Eventlog on Windows, syslog on Unix)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;graftcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ graftcp -h&#xA;Usage: graftcp [options] prog [prog-args]&#xA;&#xA;Options:&#xA;  -c --conf-file=&amp;lt;config-file-path&amp;gt;&#xA;                    Specify configuration file.&#xA;                    Default: $XDG_CONFIG_HOME/graftcp/graftcp.conf&#xA;  -a --local-addr=&amp;lt;graftcp-local-IP-addr&amp;gt;&#xA;                    graftcp-local&#39;s IP address. Default: localhost&#xA;  -p --local-port=&amp;lt;graftcp-local-port&amp;gt;&#xA;                    Which port is graftcp-local listening? Default: 2233&#xA;  -f --local-fifo=&amp;lt;fifo-path&amp;gt;&#xA;                    Path of fifo to communicate with graftcp-local.&#xA;                    Default: /tmp/graftcplocal.fifo&#xA;  -b --blackip-file=&amp;lt;black-ip-file-path&amp;gt;&#xA;                    The IP in black-ip-file will connect direct&#xA;  -w --whiteip-file=&amp;lt;white-ip-file-path&amp;gt;&#xA;                    Only redirect the connect that destination ip in the&#xA;                    white-ip-file to SOCKS5&#xA;  -n --not-ignore-local&#xA;                    Connecting to local is not changed by default, this&#xA;                    option will redirect it to SOCKS5&#xA;  -V --version&#xA;                    Show version&#xA;  -h --help&#xA;                    Display this help and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mgraftcp&lt;/code&gt;: Combined &lt;code&gt;graftcp-local&lt;/code&gt; and &lt;code&gt;graftcp&lt;/code&gt; (&lt;code&gt;mgraftcp&lt;/code&gt; = &lt;code&gt;graftcp-local&lt;/code&gt; + &lt;code&gt;graftcp&lt;/code&gt;). &lt;code&gt;mgraftcp&lt;/code&gt; can be used to replace &lt;code&gt;graftcp&lt;/code&gt; without running &lt;code&gt;graftcp-local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Usage: mgraftcp [-hn] [-b value] [--enable-debug-log] [--http_proxy value] [--select_proxy_mode value] \&#xA;    [--socks5 value] [--socks5_password value] [--socks5_username value] [--version] [-w value] prog [prog-args]&#xA; -b, --blackip-file=value&#xA;                The IP in black-ip-file will connect direct&#xA;     --enable-debug-log&#xA;                enable debug log&#xA; -h, --help     Display this help and exit&#xA;     --http_proxy=value&#xA;                http proxy address, e.g.: 127.0.0.1:8080&#xA; -n, --not-ignore-local&#xA;                Connecting to local is not changed by default, this option&#xA;                will redirect it to SOCKS5&#xA;     --select_proxy_mode=value&#xA;                Set the mode for select a proxy [auto | random |&#xA;                only_http_proxy | only_socks5 | direct] [auto]&#xA;     --socks5=value&#xA;                SOCKS5 address [127.0.0.1:1080]&#xA;     --socks5_password=value&#xA;                SOCKS5 password&#xA;     --socks5_username=value&#xA;                SOCKS5 username&#xA;     --version  Print the mgraftcp version information&#xA; -w, --whiteip-file=value&#xA;                Only redirect the connect that destination ip in the&#xA;                white-ip-file to SOCKS5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;graftcp-local&lt;/code&gt; and &lt;code&gt;mgraftcp&lt;/code&gt; look for config file in following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;File provided as a &lt;code&gt;--config&lt;/code&gt; argument&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$(the path of the executeable)/graftcp-local.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$(XDG_CONFIG_HOME)/graftcp-local/graftcp-local.conf&lt;/code&gt;, If &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is either not set or empty, a default equal to &lt;code&gt;$HOME/.config&lt;/code&gt; should be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/graftcp-local/graftcp-local.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Assume you are running the SOCKS5 proxy with the default IP address: &#34;localhost:1080&#34;. Start the &lt;code&gt;graftcp-local&lt;/code&gt; first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;local/graftcp-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the Go package from golang.org (now is blocked by the GFW) via &lt;code&gt;graftcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./graftcp go get -v golang.org/x/net/proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;Chromium&lt;/code&gt; / &lt;code&gt;Chrome&lt;/code&gt; / &lt;code&gt;Firefox&lt;/code&gt; browser via &lt;code&gt;graftcp&lt;/code&gt;, then all the requests from this browser will redirect to the SOCKS5 proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./graftcp chromium-browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch &lt;code&gt;Bash&lt;/code&gt; / &lt;code&gt;Zsh&lt;/code&gt; / &lt;code&gt;Fish&lt;/code&gt; via &lt;code&gt;graftcp&lt;/code&gt;, then all the TCP traffic generated by the command in this shell will redirect to the SOCKS5 proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;% ./graftcp bash&#xA;$ wget https://www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hmgle/graftcp/master/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;principles&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;To achieve the goal of redirecting the TCP connection of a app to another destination address and the app itself is not aware of it, these conditions are probably required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fork(2)&lt;/code&gt; a new process and trace it using &lt;code&gt;ptrace(2)&lt;/code&gt;, &lt;code&gt;execve(2)&lt;/code&gt; to run the app. Every &lt;code&gt;connect(2)&lt;/code&gt; syscall will be intercepted, then get the destination address argument and send it to &lt;code&gt;graftcp-local&lt;/code&gt; via &lt;code&gt;pipe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Modify the destination address argument of &lt;code&gt;connect(2)&lt;/code&gt; to &lt;code&gt;graftcp-local&lt;/code&gt;&#39;s address, and restart the stopped syscall. After the syscall returns successfully, the app thought it has connected the original destination address, but in fact it is connected to the &lt;code&gt;graftcp-local&lt;/code&gt;, so we named it &#34;graft&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graftcp-local&lt;/code&gt; establish a SOCKS5 connection based on the information of app&#39;s original destination address, then redirect the requests from the app to the SOCKS5 proxy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Someone may have a question here: since we can modify the arguments of a syscall, modify the app&#39;s &lt;code&gt;write(2)&lt;/code&gt; / &lt;code&gt;send(2)&lt;/code&gt; buf argument, attach the original destination information to the &lt;code&gt;write&lt;/code&gt; buffer, isn&#39;t it simpler? The answer is that cannot be done. Because attach data to the buffer of the tracked child process, it may case a buffer overflow, causing crash or overwrite other data.&lt;br&gt; In addition, as the &lt;a href=&#34;http://man7.org/linux/man-pages/man2/execve.2.html&#34;&gt;&lt;code&gt;execve(2)&lt;/code&gt; will detach and unmap all shared memory&lt;/a&gt;, we also cannot add extra data to the &lt;code&gt;write&lt;/code&gt; buffer of traced app by sharing memory, so we send the original destination address via &lt;code&gt;pipe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The simple sketch is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+---------------+             +---------+         +--------+         +------+&#xA;|   graftcp     |  dest host  |         |         |        |         |      |&#xA;|   (tracer)    +---PIPE-----&amp;gt;|         |         |        |         |      |&#xA;|      ^        |  info       |         |         |        |         |      |&#xA;|      | ptrace |             |         |         |        |         |      |&#xA;|      v        |             |         |         |        |         |      |&#xA;|  +---------+  |             |         |         |        |         |      |&#xA;|  |         |  |  connect    |         | connect |        | connect |      |&#xA;|  |         +---------------&amp;gt;| graftcp +--------&amp;gt;| SOCKS5 +--------&amp;gt;| dest |&#xA;|  |         |  |             | -local  |         |  or    |         | host |&#xA;|  |  app    |  |  req        |         |  req    | HTTP   |  req    |      |&#xA;|  |(tracee) +---------------&amp;gt;|         +--------&amp;gt;| proxy  +--------&amp;gt;|      |&#xA;|  |         |  |             |         |         |        |         |      |&#xA;|  |         |  |  resp       |         |  resp   |        |  resp   |      |&#xA;|  |         |&amp;lt;---------------+         |&amp;lt;--------+        |&amp;lt;--------+      |&#xA;|  +---------+  |             |         |         |        |         |      |&#xA;+---------------+             +---------+         +--------+         +------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ and Tips&lt;/h2&gt; &#xA;&lt;h3&gt;What are some ways to redirect TCP connections?&lt;/h3&gt; &#xA;&lt;p&gt;The main ones are: global way, environment variables setting way, and programs selection way.&lt;/p&gt; &#xA;&lt;p&gt;Global way: e.g., use &lt;code&gt;iptables&lt;/code&gt; + &lt;code&gt;RedSocks&lt;/code&gt; to convert the system&#39;s traffic that match certain rules into SOCKS5 traffic. The pros is that it is globally effective; the cons is that all traffic that satisfies the rule is redirected, and the scope of influence is large.&lt;/p&gt; &#xA;&lt;p&gt;Environment variable setting: some programs will read the proxy-related environment variables to determine whether to convert their own traffic to the corresponding proxy protocol traffic, such as &lt;code&gt;curl&lt;/code&gt; will &lt;a href=&#34;https://curl.haxx.se/libcurl/c/CURLOPT_PROXY.html&#34;&gt;read &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;ftp_proxy&lt;/code&gt;, &lt;code&gt;all_proxy &lt;/code&gt; Environment variables and decide which proxy traffic to convert based on the request URL scheme&lt;/a&gt;. This way is effective only if the program itself implements the traffic conversion function, so it is very limited.&lt;/p&gt; &#xA;&lt;p&gt;programs selection way: this way can only perform redirection for specified programs, such as &lt;code&gt;tsocks&lt;/code&gt; or &lt;code&gt;proxychains&lt;/code&gt;. As mentioned earlier, they were using the &lt;code&gt;LD_PRELOAD&lt;/code&gt; hijacking dynamic library function, and the default static link compiled program such as &lt;code&gt;Go&lt;/code&gt; is invalid. &lt;code&gt;graftcp&lt;/code&gt; improves this by being able to redirect TCP connections from any program.&lt;/p&gt; &#xA;&lt;h3&gt;Will &lt;code&gt;graftcp&lt;/code&gt; redirect the connection to the SOCKS5 proxy if the target address is localhost?&lt;/h3&gt; &#xA;&lt;p&gt;No. By default, &lt;code&gt;graftcp&lt;/code&gt; ignore the connections to localhost. If you want to redirect all addresses, you can use the &lt;code&gt;-n&lt;/code&gt; option. If you want to ignore more addresses, you can add them to the blacklist IP file; if you want to redirect only certain IP addresses, you can add them to the whitelist IP file. Use &lt;code&gt;graftcp --help&lt;/code&gt; to get more information.&lt;/p&gt; &#xA;&lt;h3&gt;I am suffering a DNS cache poisoning attack, does &lt;code&gt;graftcp&lt;/code&gt; handle DNS requests?&lt;/h3&gt; &#xA;&lt;p&gt;No. &lt;code&gt;graftcp&lt;/code&gt; currently only handles TCP connections. &lt;a href=&#34;https://github.com/jedisct1/dnscrypt-proxy&#34;&gt;&lt;code&gt;dnscrypt-proxy&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;ChinaDNS&lt;/code&gt; may help you.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;clone(2)&lt;/code&gt;&#39;s argument has a flag &lt;code&gt;CLONE_UNTRACED&lt;/code&gt; to avoid being traced, how does &lt;code&gt;graftcp&lt;/code&gt; do forced tracing?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;graftcp&lt;/code&gt; will intercept the &lt;code&gt;clone(2)&lt;/code&gt; syscall, and clearing the &lt;code&gt;CLONE_UNTRACED&lt;/code&gt; flag, so the tracked child process could not escape the fate of being tracked. In addition, this &lt;code&gt;CLONE_UNTRACED&lt;/code&gt; flag is intended for the kernel, and user space program should not set it.&lt;/p&gt; &#xA;&lt;p&gt;Linux provides a way to limit the &lt;code&gt;ptrace(2)&lt;/code&gt;: set the value of &lt;a href=&#34;https://www.kernel.org/doc/Documentation/security/Yama.txt&#34;&gt;&lt;code&gt;/proc/sys/kernel/yama/ptrace_scope&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;ptrace(2)&lt;/code&gt; is invalid, check if the default value has been modified.&lt;/p&gt; &#xA;&lt;h3&gt;Does it support macOS?&lt;/h3&gt; &#xA;&lt;p&gt;No. macOS&#39;s &lt;a href=&#34;http://polarhome.com/service/man/?qf=ptrace&amp;amp;af=0&amp;amp;sf=0&amp;amp;of=Darwin&amp;amp;tf=2&#34;&gt;&lt;code&gt;ptrace(2)&lt;/code&gt;&lt;/a&gt; is useless. &lt;del&gt;However, it can also be achieved theoretically by referring to &lt;code&gt;DTrace&lt;/code&gt;&lt;/del&gt;. See &lt;a href=&#34;https://github.com/hmgle/graftcp/issues/12&#34;&gt;issue 12&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM/Linux Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; i386/Linux Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements and References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p-e-w/maybe&#34;&gt;maybe&lt;/a&gt;, &lt;a href=&#34;http://proxychains.sourceforge.net/&#34;&gt;proxychains&lt;/a&gt; and &lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34;&gt;proxychains-ng&lt;/a&gt; for inspiration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://strace.io/&#34;&gt;strace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://troydhanson.github.io/uthash/&#34;&gt;uthash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kardianos/service&#34;&gt;service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jedisct1/dlog&#34;&gt;dlog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2016, 2018-2021 Hmgle &lt;a href=&#34;mailto:dustgle@gmail.com&#34;&gt;dustgle@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Released under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GNU General Public License, version 3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kmesh-net/kmesh</title>
    <updated>2023-09-30T01:24:43Z</updated>
    <id>tag:github.com,2023-09-30:/kmesh-net/kmesh</id>
    <link href="https://github.com/kmesh-net/kmesh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High Performance ServiceMesh Data Plane Based on Programmable Kernel&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/logo/KMESH-stacked-colour.png&#34; alt=&#34;kmesh-logo&#34; style=&#34;zoom: 100%;&#34;&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Kmesh is a high-performance service mesh data plane software based on programmable kernel. Provides high-performance service communication infrastructure in service mesh scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;Why Kmesh&lt;/h2&gt; &#xA;&lt;h3&gt;Challenges of the Service Mesh Data Plane&lt;/h3&gt; &#xA;&lt;p&gt;The service mesh software represented by Istio has gradually become popular and has become an important component of cloud infrastructure. However, the current service mesh still face some challenges:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extra latency overhead at the proxy layer&lt;/strong&gt;: Single hop service access increases by &lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/performance-and-scalability/#data-plane-performance&#34;&gt;2~3ms&lt;/a&gt;, which cannot meet the SLA requirements of latency-sensitive applications. Although the community has come up with a variety of data plane solutions to this problem, the overhead introduced by agents cannot be completely reduced.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High resources occupation&lt;/strong&gt;: The agent occupies extra CPU/MEM overhead, and the deployment density of service container decreases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kmesh：Kernel-native traffic governance&lt;/h3&gt; &#xA;&lt;p&gt;Kmesh innovatively proposes to move traffic governance to the OS, and build a transparent sidecarless service mesh without passing through the proxy layer on the data path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/why-kmesh-arch-en.png&#34; alt=&#34;image-20230927012356836&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Key features of Kmesh&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Smooth Compatibility&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application-transparent Traffic Management&lt;/li&gt; &#xA; &lt;li&gt;Automatically interconnecting with Istiod&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forwarding delay &lt;strong&gt;60%↓&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Service startup performance &lt;strong&gt;40%↑&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Low Overhead&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ServiceMesh data plane overhead &lt;strong&gt;70%↓&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Safety Isolation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;eBPF Virtual machine security&lt;/li&gt; &#xA; &lt;li&gt;Cgroup level orchestration isolation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full Stack Visualization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;E2E observation*&lt;/li&gt; &#xA; &lt;li&gt;Integration with Mainstream Observability Platforms*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open Ecology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports XDS protocol standards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: * Planning&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;prerequisite&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, Kmesh connects to the Istio control plane. Before starting Kmesh, install the Istio control plane software. For details, see &lt;a href=&#34;https://istio.io/latest/docs/setup/getting-started/#install&#34;&gt;https://istio.io/latest/docs/setup/getting-started/#install&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The complete Kmesh capability depends on the OS enhancement. Check whether the execution environment is in the &lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/kmesh_support.md&#34;&gt;OS list&lt;/a&gt; supported by Kmesh. For other OS environments, see &lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/kmesh_compile.md&#34;&gt;Kmesh Compilation and Building&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Kmesh container image prepare&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# add an image registry: hub.oepkgs.net&#xA;[root@ ~]# cat /etc/docker/daemon.json&#xA;    {&#xA;            &#34;insecure-registries&#34;: [&#xA;                    ...,&#xA;                    &#34;hub.oepkgs.net&#34;&#xA;            ]&#xA;    }&#xA;&#xA;# docker pull&#xA;[root@ ~]# docker pull hub.oepkgs.net/oncn/kmesh:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Kmesh&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# get kmesh.yaml from build/docker/kmesh.yaml&#xA;[root@ ~]# kubectl apply -f kmesh.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, the Kmesh base function is used, other function can be selected by adjusting the startup parameters in the yaml file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check kmesh service status&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@ ~]# kubectl get pods -A -owide | grep kmesh&#xA;  default        kmesh-deploy-j8q68                   1/1     Running   0          6h15m   192.168.11.6    node1   &amp;lt;none&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View the running status of kmesh service&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[root@ ~]# kubectl logs -f kmesh-deploy-j8q68&#xA;  time=&#34;2023-07-25T09:28:37+08:00&#34; level=info msg=&#34;options InitDaemonConfig successful&#34; subsys=manager&#xA;  time=&#34;2023-07-25T09:28:38+08:00&#34; level=info msg=&#34;bpf Start successful&#34; subsys=manager&#xA;  time=&#34;2023-07-25T09:28:38+08:00&#34; level=info msg=&#34;controller Start successful&#34; subsys=manager&#xA;  time=&#34;2023-07-25T09:28:38+08:00&#34; level=info msg=&#34;command StartServer successful&#34; subsys=manager&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;More compilation methods of Kmesh, See: &lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/kmesh_compile.md&#34;&gt;Kmesh Compilation and Construction&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kmesh Performance&lt;/h2&gt; &#xA;&lt;p&gt;Based on Fortio, the data plane execution performance of Kmesh and Envoy was compared and tested. The test results are as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/fortio_performance_test.png&#34; alt=&#34;fortio_performance_test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a complete performance test, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/test/performance/README.md&#34;&gt;Kmesh Performance Test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Software Architecture&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/kmesh-arch.png&#34; alt=&#34;kmesh-arch&#34; style=&#34;zoom:150%;&#34;&gt; &#xA;&lt;p&gt;The main components of Kmesh include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;kmesh-controller：&lt;/p&gt; &lt;p&gt;Kmesh management program, responsible for Kmesh lifecycle management, XDS protocol docking, observation and DevOps, and other functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;kmesh-api：&lt;/p&gt; &lt;p&gt;The API interface layer provided by Kmesh mainly includes: orchestration API after xds conversion, observation and DevOps channels, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;kmesh-runtime：&lt;/p&gt; &lt;p&gt;The runtime implemented in the kernel that supports L3~L7 traffic orchestration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;kmesh-orchestration：&lt;/p&gt; &lt;p&gt;Implement L3-L7 traffic scheduling based on ebpf, such as routing, grayscale, load balance, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;kmesh-probe：&lt;/p&gt; &lt;p&gt;Observation and DevOps probes, providing end-to-end observation capabilities.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feature Description&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Command List&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/kmesh_commands.md&#34;&gt;Kmesh Command List&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Demo&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/kmesh_demo.md&#34;&gt;Kmesh demo demonstration&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kmesh Capability Map&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature Field&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;2023.H1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;2023.H2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;2024.H1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;2024.H2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traffic management&lt;/td&gt; &#xA;   &lt;td&gt;sidecarless mesh data plane&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sockmap accelerate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Programmable governance based on ebpf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;http1.1 protocol&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;http2 protocol&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;grpc protocol&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quic protocol&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tcp protocol&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Retry&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Routing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;load balance&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fault injection&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gray release&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Circuit Breaker&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rate Limits&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Service security&lt;/td&gt; &#xA;   &lt;td&gt;mTLS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;L7 authorization&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cgroup-level isolation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traffic monitoring&lt;/td&gt; &#xA;   &lt;td&gt;Governance indicator monitoring&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;End-to-End observability&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Programmable&lt;/td&gt; &#xA;   &lt;td&gt;Plug-in expansion capability&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ecosystem collaboration&lt;/td&gt; &#xA;   &lt;td&gt;Data plane collaboration (Envoy etc.)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Operating environment support&lt;/td&gt; &#xA;   &lt;td&gt;container&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/docs/pics/support.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions, feel free to reach out to us in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/kmesh&#34;&gt;mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/kmesh/shared_invite/zt-23mte0eau-s3MoQNYPzsgvUwwXkOmIIA&#34;&gt;slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/kmesh_net&#34;&gt;twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in being a contributor and want to get involved in developing the Kmesh code, please see &lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Kmesh is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/kmesh-net/kmesh/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;Kmesh documentation is under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;CC-BY-4.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;This project was initially incubated in the &lt;a href=&#34;https://gitee.com/openeuler/Kmesh&#34;&gt;openEuler community&lt;/a&gt;, thanks openEuler Community for the help on promoting this project in early days.&lt;/p&gt;</summary>
  </entry>
</feed>