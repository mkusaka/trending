<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-04T01:26:56Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PureKFD/PureKFD</title>
    <updated>2024-01-04T01:26:56Z</updated>
    <id>tag:github.com,2024-01-04:/PureKFD/PureKFD</id>
    <link href="https://github.com/PureKFD/PureKFD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A KFD Focused Package Manager that supports 14.0-16.6.1!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;img align=&#34;right&#34; height=&#34;140&#34; src=&#34;https://github.com/PureKFD/PureKFD/raw/main/Icon.png?raw=true&#34; alt=&#34;PureKFD Logo&#34; style=&#34;float: right; border-radius: 10px;&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;left&#34;&gt;PureKFD - The Purest iOS Customization Toolbox&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/PureKFD/PureKFD/releases/latest&#34;&gt;Download&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://discord.gg/Mve4nWJMrz&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://twitter.com/Lrdsnow101&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;PureKFD is a KFD Focused Package Manager for iOS, focusing on iOS versions 14.0 through 16.6.1 using KFD (CVE-2023-41974) and MDC (CVE-2022-46689). PureKFD allows users to customize their iOS experience through a user-friendly interface, utilizing community-developed tweaks available from the community’s repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility:&lt;/strong&gt; Ensure your iOS device is running an iOS version 14.0 through 16.6.1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Installation:&lt;/strong&gt; Download PureKFD from the &lt;a href=&#34;https://github.com/PureKFD/PureKFD/releases/latest&#34;&gt;github releases&lt;/a&gt; for the latest release or &lt;a href=&#34;https://discord.gg/Mve4nWJMrz&#34;&gt;our discord&lt;/a&gt; for the latest betas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customize:&lt;/strong&gt; Explore the vast array of tweaks, personalize your iOS experience, and make your device truly yours.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lrdsnow&#34;&gt;&lt;strong&gt;Lrdsnow&lt;/strong&gt;&lt;/a&gt; - Main Developer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asdfugil&#34;&gt;&lt;strong&gt;Nick Chan&lt;/strong&gt;&lt;/a&gt; - Developer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leminlimez&#34;&gt;&lt;strong&gt;leminlimez&lt;/strong&gt;&lt;/a&gt; - Springboard Color Manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://icons8.com&#34;&gt;&lt;strong&gt;icons8&lt;/strong&gt;&lt;/a&gt; - Plumpy Icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emmikat&#34;&gt;&lt;strong&gt;emmikat&lt;/strong&gt;&lt;/a&gt; - M1/M2 Fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dhinakg&#34;&gt;&lt;strong&gt;dhinakg&lt;/strong&gt;&lt;/a&gt; - M1/M2 Fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lilmayofuksu&#34;&gt;&lt;strong&gt;lilmayofuksu&lt;/strong&gt;&lt;/a&gt; - M1/M2 Fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noxwell&#34;&gt;&lt;strong&gt;noxwell&lt;/strong&gt;&lt;/a&gt; - M1/M2 Fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/455513497288310785&#34;&gt;@dor4a&lt;/a&gt; - Icon/Tweak Creator/Translator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/424899221267939328&#34;&gt;@hackzy&lt;/a&gt; - Icon/Tweak Creator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/669665537051197491&#34;&gt;@dreelpoop_er&lt;/a&gt; - Icon/Tweak Creator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/olivertzeng&#34;&gt;&lt;strong&gt;Oliver Tzeng&lt;/strong&gt;&lt;/a&gt; - Translator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/1070904865657729035&#34;&gt;@lunginspector&lt;/a&gt; - Icon Creator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/717985587235258388&#34;&gt;@k3wl.4id&lt;/a&gt; - Icon Creator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/995151326264705074&#34;&gt;@&lt;em&gt;severalpeople&lt;/em&gt;&lt;/a&gt; - Icon Creator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/822833988997218314&#34;&gt;@mildpeppercat&lt;/a&gt; - Icon Creator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/users/672886506859266051&#34;&gt;@modmenus&lt;/a&gt; - Icon Creator&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>libffi/libffi</title>
    <updated>2024-01-04T01:26:56Z</updated>
    <id>tag:github.com,2024-01-04:/libffi/libffi</id>
    <link href="https://github.com/libffi/libffi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A portable foreign-function interface library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;libffi-3.4.4 was released on October 23, 2022. Check the libffi web page for updates: &lt;a href=&#34;URL:http://sourceware.org/libffi/&#34;&gt;URL:http://sourceware.org/libffi/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;What is libffi?&lt;/h1&gt; &#xA;&lt;p&gt;Compilers for high level languages generate code that follow certain conventions. These conventions are necessary, in part, for separate compilation to work. One such convention is the &#34;calling convention&#34;. The &#34;calling convention&#34; is essentially a set of assumptions made by the compiler about where function arguments will be found on entry to a function. A &#34;calling convention&#34; also specifies where the return value for a function is found.&lt;/p&gt; &#xA;&lt;p&gt;Some programs may not know at the time of compilation what arguments are to be passed to a function. For instance, an interpreter may be told at run-time about the number and types of arguments used to call a given function. Libffi can be used in such programs to provide a bridge from the interpreter program to compiled code.&lt;/p&gt; &#xA;&lt;p&gt;The libffi library provides a portable, high level programming interface to various calling conventions. This allows a programmer to call any function specified by a call interface description at run time.&lt;/p&gt; &#xA;&lt;p&gt;FFI stands for Foreign Function Interface. A foreign function interface is the popular name for the interface that allows code written in one language to call code written in another language. The libffi library really only provides the lowest, machine dependent layer of a fully featured foreign function interface. A layer must exist above libffi that handles type conversions for values passed between the two languages.&lt;/p&gt; &#xA;&lt;h1&gt;Supported Platforms&lt;/h1&gt; &#xA;&lt;p&gt;Libffi has been ported to many different platforms.&lt;/p&gt; &#xA;&lt;p&gt;At the time of release, the following basic configurations have been tested:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;   &lt;th&gt;Compiler&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AArch64 (ARM64)&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;Clang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AArch64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AArch64&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;MSVC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpha&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpha&lt;/td&gt; &#xA;   &lt;td&gt;Tru64&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARC&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARC32&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARC64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARM&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARM&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARM&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;MSVC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AVR32&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blackfin&lt;/td&gt; &#xA;   &lt;td&gt;uClinux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSKY&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HPPA&lt;/td&gt; &#xA;   &lt;td&gt;HPUX&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HPPA64&lt;/td&gt; &#xA;   &lt;td&gt;HPUX&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;KVX&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IA-64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LoongArch64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M68K&lt;/td&gt; &#xA;   &lt;td&gt;FreeMiNT&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M68K&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M68K&lt;/td&gt; &#xA;   &lt;td&gt;RTEMS&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M88K&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD/mvme88k&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Meta&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MicroBlaze&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MIPS&lt;/td&gt; &#xA;   &lt;td&gt;IRIX&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MIPS&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MIPS&lt;/td&gt; &#xA;   &lt;td&gt;RTEMS&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MIPS64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Moxie&lt;/td&gt; &#xA;   &lt;td&gt;Bare metal&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nios II&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenRISC&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC 32-bit&lt;/td&gt; &#xA;   &lt;td&gt;AIX&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC 32-bit&lt;/td&gt; &#xA;   &lt;td&gt;AIX&lt;/td&gt; &#xA;   &lt;td&gt;IBM XL C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC 64-bit&lt;/td&gt; &#xA;   &lt;td&gt;AIX&lt;/td&gt; &#xA;   &lt;td&gt;IBM XL C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC&lt;/td&gt; &#xA;   &lt;td&gt;AMIGA&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC&lt;/td&gt; &#xA;   &lt;td&gt;Mac OSX&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC 64-bit&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC 64-bit&lt;/td&gt; &#xA;   &lt;td&gt;Linux ELFv1&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerPC 64-bit&lt;/td&gt; &#xA;   &lt;td&gt;Linux ELFv2&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RISC-V 32-bit&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RISC-V 64-bit&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S390&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S390X&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPARC&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPARC&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPARC&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Solaris Studio C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPARC64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPARC64&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPARC64&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Solaris Studio C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TILE-Gx/TILEPro&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VAX&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD/vax&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WASM32&lt;/td&gt; &#xA;   &lt;td&gt;Emscripten&lt;/td&gt; &#xA;   &lt;td&gt;EMCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;GNU HURD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;Interix&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;kFreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;OS/2&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Solaris Studio C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;Windows/Cygwin&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86&lt;/td&gt; &#xA;   &lt;td&gt;Windows/MinGW&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;Linux/x32&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Solaris Studio C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;Windows/Cygwin&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;Windows/MinGW&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X86-64&lt;/td&gt; &#xA;   &lt;td&gt;Mac OSX&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xtensa&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;GCC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please send additional platform test results to &lt;a href=&#34;mailto:libffi-discuss@sourceware.org&#34;&gt;libffi-discuss@sourceware.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installing libffi&lt;/h1&gt; &#xA;&lt;p&gt;First you must configure the distribution for your particular system. Go to the directory you wish to build libffi in and run the &#34;configure&#34; program found in the root directory of the libffi source distribution. Note that building libffi requires a C99 compatible compiler.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re building libffi directly from git hosted sources, configure won&#39;t exist yet; run ./autogen.sh first. This will require that you install autoconf, automake and libtool.&lt;/p&gt; &#xA;&lt;p&gt;You may want to tell configure where to install the libffi library and header files. To do that, use the &lt;code&gt;--prefix&lt;/code&gt; configure switch. Libffi will install under /usr/local by default.&lt;/p&gt; &#xA;&lt;p&gt;If you want to enable extra run-time debugging checks use the the &lt;code&gt;--enable-debug&lt;/code&gt; configure switch. This is useful when your program dies mysteriously while using libffi.&lt;/p&gt; &#xA;&lt;p&gt;Another useful configure switch is &lt;code&gt;--enable-purify-safety&lt;/code&gt;. Using this will add some extra code which will suppress certain warnings when you are using Purify with libffi. Only use this switch when using Purify, as it will slow down the library.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to build documentation, use the &lt;code&gt;--disable-docs&lt;/code&gt; configure switch.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to build libffi on Windows platforms with Microsoft&#39;s Visual C++ compiler. In this case, use the msvcc.sh wrapper script during configuration like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/configure CC=path/to/msvcc.sh CXX=path/to/msvcc.sh LD=link CPP=&#34;cl -nologo -EP&#34; CPPFLAGS=&#34;-DFFI_BUILDING_DLL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 64-bit Windows builds, use &lt;code&gt;CC=&#34;path/to/msvcc.sh -m64&#34;&lt;/code&gt; and &lt;code&gt;CXX=&#34;path/to/msvcc.sh -m64&#34;&lt;/code&gt;. You may also need to specify &lt;code&gt;--build&lt;/code&gt; appropriately.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to build libffi on Windows platforms with the LLVM project&#39;s clang-cl compiler, like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/configure CC=&#34;path/to/msvcc.sh -clang-cl&#34; CXX=&#34;path/to/msvcc.sh -clang-cl&#34; LD=link CPP=&#34;clang-cl -EP&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When building with MSVC under a MingW environment, you may need to remove the line in configure that sets &#39;fix_srcfile_path&#39; to a &#39;cygpath&#39; command. (&#39;cygpath&#39; is not present in MingW, and is not required when using MingW-style paths.)&lt;/p&gt; &#xA;&lt;p&gt;To build static library for ARM64 with MSVC using visual studio solution, msvc_build folder have aarch64/Ffi_staticLib.sln required header files in aarch64/aarch64_include/&lt;/p&gt; &#xA;&lt;p&gt;SPARC Solaris builds require the use of the GNU assembler and linker. Point &lt;code&gt;AS&lt;/code&gt; and &lt;code&gt;LD&lt;/code&gt; environment variables at those tool prior to configuration.&lt;/p&gt; &#xA;&lt;p&gt;For iOS builds, the &lt;code&gt;libffi.xcodeproj&lt;/code&gt; Xcode project is available.&lt;/p&gt; &#xA;&lt;p&gt;Configure has many other options. Use &lt;code&gt;configure --help&lt;/code&gt; to see them all.&lt;/p&gt; &#xA;&lt;p&gt;Once configure has finished, type &#34;make&#34;. Note that you must be using GNU make. You can ftp GNU make from ftp.gnu.org:/pub/gnu/make .&lt;/p&gt; &#xA;&lt;p&gt;To ensure that libffi is working as advertised, type &#34;make check&#34;. This will require that you have DejaGNU installed.&lt;/p&gt; &#xA;&lt;p&gt;To install the library and header files, type &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;p&gt;See the git log for details at &lt;a href=&#34;http://github.com/libffi/libffi&#34;&gt;http://github.com/libffi/libffi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TBD - TBD&#xA;    Add support for wasm32.&#xA;    Add support for aarch64 branch target identification (bti).&#xA;    Add support for ARCv3: ARC32 &amp;amp; ARC64.&#xA;    Add support for HPPA64, and many HPPA fixes.&#xA;    Fixes for AIX, sparc64, and x86 Darwin fixes.&#xA;&#xA;3.4.4 Oct-23-2022&#xA;    Important aarch64 fixes, including support for linux builds&#xA;      with Link Time Optimization (-flto).&#xA;    Fix x86 stdcall stack alignment.&#xA;    Fix x86 Windows msvc assembler compatibility.&#xA;    Fix moxie and or1k small structure args.&#xA;&#xA;3.4.3 Sep-19-2022&#xA;    All struct args are passed by value, regardless of size, as per ABIs.&#xA;    Enable static trampolines for Cygwin.&#xA;    Add support for Loongson&#39;s LoongArch64 architecture.&#xA;    Fix x32 static trampolines.&#xA;    Fix 32-bit x86 stdcall stack corruption.&#xA;    Fix ILP32 aarch64 support.&#xA;&#xA;3.4.2 Jun-28-2021&#xA;    Add static trampoline support for Linux on x86_64 and ARM64.&#xA;    Add support for Alibaba&#39;s CSKY architecture.&#xA;    Add support for Kalray&#39;s KVX architecture.&#xA;    Add support for Intel Control-flow Enforcement Technology (CET).&#xA;    Add support for ARM Pointer Authentication (PA).&#xA;    Fix 32-bit PPC regression.&#xA;    Fix MIPS soft-float problem.&#xA;    Enable tmpdir override with the $LIBFFI_TMPDIR environment variable.&#xA;    Enable compatibility with MSVC runtime stack checking.&#xA;    Reject float and small integer argument in ffi_prep_cif_var().&#xA;      Callers must promote these types themselves.&#xA;&#xA;3.3 Nov-23-2019&#xA;    Add RISC-V support.&#xA;    New API in support of GO closures.&#xA;    Add IEEE754 binary128 long double support for 64-bit Power&#xA;    Default to Microsoft&#39;s 64 bit long double ABI with Visual C++.&#xA;    GNU compiler uses 80 bits (128 in memory) FFI_GNUW64 ABI.&#xA;    Add Windows on ARM64 (WOA) support.&#xA;    Add Windows 32-bit ARM support.&#xA;    Raw java (gcj) API deprecated.&#xA;    Add pre-built PDF documentation to source distribution.&#xA;    Many new test cases and bug fixes.&#xA;&#xA;3.2.1 Nov-12-2014&#xA;    Build fix for non-iOS AArch64 targets.&#xA;&#xA;3.2 Nov-11-2014&#xA;    Add C99 Complex Type support (currently only supported on&#xA;      s390).&#xA;    Add support for PASCAL and REGISTER calling conventions on x86&#xA;      Windows/Linux.&#xA;    Add OpenRISC and Cygwin-64 support.&#xA;    Bug fixes.&#xA;&#xA;3.1 May-19-2014&#xA;    Add AArch64 (ARM64) iOS support.&#xA;    Add Nios II support.&#xA;    Add m88k and DEC VAX support.&#xA;    Add support for stdcall, thiscall, and fastcall on non-Windows&#xA;      32-bit x86 targets such as Linux.&#xA;    Various Android, MIPS N32, x86, FreeBSD and UltraSPARC IIi&#xA;      fixes.&#xA;    Make the testsuite more robust: eliminate several spurious&#xA;      failures, and respect the $CC and $CXX environment variables.&#xA;    Archive off the manually maintained ChangeLog in favor of git&#xA;      log.&#xA;&#xA;3.0.13 Mar-17-2013&#xA;    Add Meta support.&#xA;    Add missing Moxie bits.&#xA;    Fix stack alignment bug on 32-bit x86.&#xA;    Build fix for m68000 targets.&#xA;    Build fix for soft-float Power targets.&#xA;    Fix the install dir location for some platforms when building&#xA;      with GCC (OS X, Solaris).&#xA;    Fix Cygwin regression.&#xA;&#xA;3.0.12 Feb-11-2013&#xA;    Add Moxie support.&#xA;    Add AArch64 support.&#xA;    Add Blackfin support.&#xA;    Add TILE-Gx/TILEPro support.&#xA;    Add MicroBlaze support.&#xA;    Add Xtensa support.&#xA;    Add support for PaX enabled kernels with MPROTECT.&#xA;    Add support for native vendor compilers on&#xA;      Solaris and AIX.&#xA;    Work around LLVM/GCC interoperability issue on x86_64.&#xA;&#xA;3.0.11 Apr-11-2012&#xA;    Lots of build fixes.&#xA;    Add support for variadic functions (ffi_prep_cif_var).&#xA;    Add Linux/x32 support.&#xA;    Add thiscall, fastcall and MSVC cdecl support on Windows.&#xA;    Add Amiga and newer MacOS support.&#xA;    Add m68k FreeMiNT support.&#xA;    Integration with iOS&#39; xcode build tools.&#xA;    Fix Octeon and MC68881 support.&#xA;    Fix code pessimizations.&#xA;&#xA;3.0.10 Aug-23-2011&#xA;    Add support for Apple&#39;s iOS.&#xA;    Add support for ARM VFP ABI.&#xA;    Add RTEMS support for MIPS and M68K.&#xA;    Fix instruction cache clearing problems on&#xA;      ARM and SPARC.&#xA;    Fix the N64 build on mips-sgi-irix6.5.&#xA;    Enable builds with Microsoft&#39;s compiler.&#xA;    Enable x86 builds with Oracle&#39;s Solaris compiler.&#xA;    Fix support for calling code compiled with Oracle&#39;s Sparc&#xA;      Solaris compiler.&#xA;    Testsuite fixes for Tru64 Unix.&#xA;    Additional platform support.&#xA;&#xA;3.0.9 Dec-31-2009&#xA;    Add AVR32 and win64 ports.  Add ARM softfp support.&#xA;    Many fixes for AIX, Solaris, HP-UX, *BSD.&#xA;    Several PowerPC and x86-64 bug fixes.&#xA;    Build DLL for windows.&#xA;&#xA;3.0.8 Dec-19-2008&#xA;    Add *BSD, BeOS, and PA-Linux support.&#xA;&#xA;3.0.7 Nov-11-2008&#xA;    Fix for ppc FreeBSD.&#xA;    (thanks to Andreas Tobler)&#xA;&#xA;3.0.6 Jul-17-2008&#xA;    Fix for closures on sh.&#xA;    Mark the sh/sh64 stack as non-executable.&#xA;    (both thanks to Kaz Kojima)&#xA;&#xA;3.0.5 Apr-3-2008&#xA;    Fix libffi.pc file.&#xA;    Fix #define ARM for IcedTea users.&#xA;    Fix x86 closure bug.&#xA;&#xA;3.0.4 Feb-24-2008&#xA;    Fix x86 OpenBSD configury.&#xA;&#xA;3.0.3 Feb-22-2008&#xA;    Enable x86 OpenBSD thanks to Thomas Heller, and&#xA;      x86-64 FreeBSD thanks to Björn König and Andreas Tobler.&#xA;    Clean up test instruction in README.&#xA;&#xA;3.0.2 Feb-21-2008&#xA;    Improved x86 FreeBSD support.&#xA;    Thanks to Björn König.&#xA;&#xA;3.0.1 Feb-15-2008&#xA;    Fix instruction cache flushing bug on MIPS.&#xA;    Thanks to David Daney.&#xA;&#xA;3.0.0 Feb-15-2008&#xA;    Many changes, mostly thanks to the GCC project.&#xA;    Cygnus Solutions is now Red Hat.&#xA;&#xA;  [10 years go by...]&#xA;&#xA;1.20 Oct-5-1998&#xA;    Raffaele Sena produces ARM port.&#xA;&#xA;1.19 Oct-5-1998&#xA;    Fixed x86 long double and long long return support.&#xA;    m68k bug fixes from Andreas Schwab.&#xA;    Patch for DU assembler compatibility for the Alpha from Richard&#xA;      Henderson.&#xA;&#xA;1.18 Apr-17-1998&#xA;    Bug fixes and MIPS configuration changes.&#xA;&#xA;1.17 Feb-24-1998&#xA;    Bug fixes and m68k port from Andreas Schwab. PowerPC port from&#xA;    Geoffrey Keating. Various bug x86, Sparc and MIPS bug fixes.&#xA;&#xA;1.16 Feb-11-1998&#xA;    Richard Henderson produces Alpha port.&#xA;&#xA;1.15 Dec-4-1997&#xA;    Fixed an n32 ABI bug. New libtool, auto* support.&#xA;&#xA;1.14 May-13-97&#xA;    libtool is now used to generate shared and static libraries.&#xA;    Fixed a minor portability problem reported by Russ McManus&#xA;    &amp;lt;mcmanr@eq.gs.com&amp;gt;.&#xA;&#xA;1.13 Dec-2-1996&#xA;    Added --enable-purify-safety to keep Purify from complaining&#xA;      about certain low level code.&#xA;    Sparc fix for calling functions with &amp;lt; 6 args.&#xA;    Linux x86 a.out fix.&#xA;&#xA;1.12 Nov-22-1996&#xA;    Added missing ffi_type_void, needed for supporting void return&#xA;      types. Fixed test case for non MIPS machines. Cygnus Support&#xA;      is now Cygnus Solutions.&#xA;&#xA;1.11 Oct-30-1996&#xA;    Added notes about GNU make.&#xA;&#xA;1.10 Oct-29-1996&#xA;    Added configuration fix for non GNU compilers.&#xA;&#xA;1.09 Oct-29-1996&#xA;    Added --enable-debug configure switch. Clean-ups based on LCLint&#xA;    feedback. ffi_mips.h is always installed. Many configuration&#xA;    fixes. Fixed ffitest.c for sparc builds.&#xA;&#xA;1.08 Oct-15-1996&#xA;    Fixed n32 problem. Many clean-ups.&#xA;&#xA;1.07 Oct-14-1996&#xA;    Gordon Irlam rewrites v8.S again. Bug fixes.&#xA;&#xA;1.06 Oct-14-1996&#xA;    Gordon Irlam improved the sparc port.&#xA;&#xA;1.05 Oct-14-1996&#xA;    Interface changes based on feedback.&#xA;&#xA;1.04 Oct-11-1996&#xA;    Sparc port complete (modulo struct passing bug).&#xA;&#xA;1.03 Oct-10-1996&#xA;    Passing struct args, and returning struct values works for&#xA;    all architectures/calling conventions. Expanded tests.&#xA;&#xA;1.02 Oct-9-1996&#xA;    Added SGI n32 support. Fixed bugs in both o32 and Linux support.&#xA;    Added &#34;make test&#34;.&#xA;&#xA;1.01 Oct-8-1996&#xA;    Fixed float passing bug in mips version. Restructured some&#xA;    of the code. Builds cleanly with SGI tools.&#xA;&#xA;1.00 Oct-7-1996&#xA;    First release. No public announcement.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Authors &amp;amp; Credits&lt;/h1&gt; &#xA;&lt;p&gt;libffi was originally written by Anthony Green &lt;a href=&#34;mailto:green@moxielogic.com&#34;&gt;green@moxielogic.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developers of the GNU Compiler Collection project have made innumerable valuable contributions. See the ChangeLog file for details.&lt;/p&gt; &#xA;&lt;p&gt;Some of the ideas behind libffi were inspired by Gianni Mariani&#39;s free gencall library for Silicon Graphics machines.&lt;/p&gt; &#xA;&lt;p&gt;The closure mechanism was designed and implemented by Kresten Krab Thorup.&lt;/p&gt; &#xA;&lt;p&gt;Major processor architecture ports were contributed by the following developers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aarch64             Marcus Shawcroft, James Greenhalgh&#xA;alpha               Richard Henderson&#xA;arc                 Hackers at Synopsis&#xA;arm                 Raffaele Sena&#xA;avr32               Bradley Smith&#xA;blackfin            Alexandre Keunecke I. de Mendonca&#xA;cris                Simon Posnjak, Hans-Peter Nilsson&#xA;csky                Ma Jun, Zhang Wenmeng&#xA;frv                 Anthony Green&#xA;ia64                Hans Boehm&#xA;kvx                 Yann Sionneau&#xA;loongarch64         Cheng Lulu, Xi Ruoyao, Xu Hao,&#xA;                    Zhang Wenlong, Pan Xuefeng&#xA;m32r                Kazuhiro Inaoka&#xA;m68k                Andreas Schwab&#xA;m88k                Miod Vallat&#xA;metag               Hackers at Imagination Technologies&#xA;microblaze          Nathan Rossi&#xA;mips                Anthony Green, Casey Marshall&#xA;mips64              David Daney&#xA;moxie               Anthony Green&#xA;nios ii             Sandra Loosemore&#xA;openrisc            Sebastian Macke&#xA;pa                  Randolph Chung, Dave Anglin, Andreas Tobler&#xA;pa64                Dave Anglin&#xA;powerpc             Geoffrey Keating, Andreas Tobler,&#xA;                    David Edelsohn, John Hornkvist&#xA;powerpc64           Jakub Jelinek&#xA;riscv               Michael Knyszek, Andrew Waterman, Stef O&#39;Rear&#xA;s390                Gerhard Tonn, Ulrich Weigand&#xA;sh                  Kaz Kojima&#xA;sh64                Kaz Kojima&#xA;sparc               Anthony Green, Gordon Irlam&#xA;tile-gx/tilepro     Walter Lee&#xA;vax                 Miod Vallat&#xA;wasm32              Hood Chatham, Brion Vibber, Kleis Auke Wolthuizen&#xA;x86                 Anthony Green, Jon Beniston&#xA;x86-64              Bo Thorsen&#xA;xtensa              Chris Zankel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jesper Skov and Andrew Haley both did more than their fair share of stepping through the code and tracking down bugs.&lt;/p&gt; &#xA;&lt;p&gt;Thanks also to Tom Tromey for bug fixes, documentation and configuration help.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Jim Blandy, who provided some useful feedback on the libffi interface.&lt;/p&gt; &#xA;&lt;p&gt;Andreas Tobler has done a tremendous amount of work on the testsuite.&lt;/p&gt; &#xA;&lt;p&gt;Alex Oliva solved the executable page problem for SElinux.&lt;/p&gt; &#xA;&lt;p&gt;The list above is almost certainly incomplete and inaccurate. I&#39;m happy to make corrections or additions upon request.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem, or have found a bug, please file an issue on our issue tracker at &lt;a href=&#34;https://github.com/libffi/libffi/issues&#34;&gt;https://github.com/libffi/libffi/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The author can be reached at &lt;a href=&#34;mailto:green@moxielogic.com&#34;&gt;green@moxielogic.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To subscribe/unsubscribe to our mailing lists, visit: &lt;a href=&#34;https://sourceware.org/mailman/listinfo/libffi-announce&#34;&gt;https://sourceware.org/mailman/listinfo/libffi-announce&lt;/a&gt; &lt;a href=&#34;https://sourceware.org/mailman/listinfo/libffi-discuss&#34;&gt;https://sourceware.org/mailman/listinfo/libffi-discuss&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ioi/isolate</title>
    <updated>2024-01-04T01:26:56Z</updated>
    <id>tag:github.com,2024-01-04:/ioi/isolate</id>
    <link href="https://github.com/ioi/isolate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sandbox for securely executing untrusted programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;isolate&lt;/h1&gt; &#xA;&lt;p&gt;Isolate is a sandbox built to safely run untrusted executables, offering them a limited-access environment and preventing them from affecting the host system. It takes advantage of features specific to the Linux kernel, like namespaces and control groups.&lt;/p&gt; &#xA;&lt;p&gt;Isolate was developed by Martin Mareš (&lt;a href=&#34;mailto:mj@ucw.cz&#34;&gt;mj@ucw.cz&lt;/a&gt;) and Bernard Blackham (&lt;a href=&#34;mailto:bernard@blackham.com.au&#34;&gt;bernard@blackham.com.au&lt;/a&gt;), who still maintain it. Several other people contributed patches for features and bug fixes (see Git history for a list). Thanks!&lt;/p&gt; &#xA;&lt;p&gt;Originally, Isolate was a part of the &lt;a href=&#34;http://www.ucw.cz/moe/&#34;&gt;Moe Contest Environment&lt;/a&gt;, but it evolved to a separate project used by different contest systems, most prominently &lt;a href=&#34;https://github.com/cms-dev/cms&#34;&gt;CMS&lt;/a&gt;. It now lives at &lt;a href=&#34;https://github.com/ioi/isolate&#34;&gt;GitHub&lt;/a&gt;, where you can submit bug reports and feature requests.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in more details, please read Martin&#39;s and Bernard&#39;s &lt;a href=&#34;http://mj.ucw.cz/papers/isolate.pdf&#34;&gt;paper&lt;/a&gt; presented at the IOI Conference. Also, Isolate&#39;s &lt;a href=&#34;http://www.ucw.cz/moe/isolate.1.html&#34;&gt;manual page&lt;/a&gt; is available online.&lt;/p&gt; &#xA;&lt;p&gt;To compile Isolate, you need the headers for the libcap library (usually available in a libcap-dev package).&lt;/p&gt; &#xA;&lt;p&gt;You may need &lt;code&gt;a2x&lt;/code&gt; (found in &lt;a href=&#34;https://asciidoc-py.github.io/a2x.1.html&#34;&gt;AsciiDoc&lt;/a&gt;) for building manual. But if you only want the isolate binary, you can just run &lt;code&gt;make isolate&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>