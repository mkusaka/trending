<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-13T01:29:06Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xicodomingues/francinette</title>
    <updated>2024-11-13T01:29:06Z</updated>
    <id>tag:github.com,2024-11-13:/xicodomingues/francinette</id>
    <link href="https://github.com/xicodomingues/francinette" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy to use testing framework for the 42 projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Francinette&lt;/h1&gt; &#xA;&lt;p&gt;An easy to use testing framework for the 42 projects.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;francinette&lt;/code&gt; or &lt;code&gt;paco&lt;/code&gt; inside a project folder to run it.&lt;/p&gt; &#xA;&lt;p&gt;Currently has tests for: &lt;code&gt;libft&lt;/code&gt;, &lt;code&gt;ft_printf&lt;/code&gt;, &lt;code&gt;get_next_line&lt;/code&gt;, &lt;code&gt;minitalk&lt;/code&gt; and &lt;code&gt;pipex&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Francinette&lt;/code&gt; is only tested and confirmed to work on MacOS on non ARM chips. Some testers may work on Linux and ARM, but I give no guaranties of any test working or even compiling.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;❗&lt;/span&gt; Important note:&lt;/h2&gt; &#xA;&lt;p&gt;If you have little to no experience programming, I highly highly highly recommend that you write your own tests first. For example, for &lt;code&gt;ft_split&lt;/code&gt; try to write a main that tests that your code works in most cases. It is also useful to think about corner cases, like what should it return if the string is &lt;code&gt;&#34;&#34;&lt;/code&gt; or &lt;code&gt;&#34; &#34;&lt;/code&gt; or &lt;code&gt;&#34;word&#34;&lt;/code&gt;. Don&#39;t rely just on &lt;code&gt;francinette&lt;/code&gt; or other tests.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;⚠&lt;/span&gt; Write your own tests, It&#39;s a very essential part of programming. &lt;span&gt;⚠&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#purpose&#34;&gt;Purpose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#Running&#34;&gt;Running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#uninstall&#34;&gt;Uninstall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Purpose:&lt;/h2&gt; &#xA;&lt;p&gt;This is designed to function as a kind of &lt;code&gt;moulinette&lt;/code&gt; that you can execute in local.&lt;/p&gt; &#xA;&lt;p&gt;That means that by executing &lt;code&gt;francinette&lt;/code&gt; it will check &lt;code&gt;norminette&lt;/code&gt;, compile the code and execute the tests.&lt;/p&gt; &#xA;&lt;p&gt;You can use it as a local test battery, to test your code.&lt;/p&gt; &#xA;&lt;h4&gt;Example execution:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xicodomingues/francinette/master/doc/example.png&#34; alt=&#34;Example Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;p&gt;Francinette has an automatic installer.&lt;/p&gt; &#xA;&lt;p&gt;Copy the line bellow to your console and execute it. It will automatically download the repo, create the necessary folders and alias, and install a python virtual environment dedicated to running this tool.&lt;/p&gt; &#xA;&lt;p&gt;In linux it will also download and install the necessary packages for it to run. It needs admin permission to do that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash -c &#34;$(curl -fsSL https://raw.github.com/xicodomingues/francinette/master/bin/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The francinette folder will be under your &lt;code&gt;$HOME&lt;/code&gt; directory (&lt;code&gt;/Users/&amp;lt;your_username&amp;gt;/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Update:&lt;/h2&gt; &#xA;&lt;p&gt;Normally francinette will prompt you when there is a new version, and you can then update it.&lt;/p&gt; &#xA;&lt;p&gt;You can also force it from francinette itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~ $&amp;gt; francinette -u              # Forces francinette to update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the above does not work you can also execute the command bellow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash -c &#34;$(curl -fsSL https://raw.github.com/xicodomingues/francinette/master/bin/update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running:&lt;/h2&gt; &#xA;&lt;p&gt;If you are on a root of a project, &lt;code&gt;francinette&lt;/code&gt; should be able to tell which project it is and execute the corresponding tests.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the shorter version of the command: &lt;code&gt;paco&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To see all the available options execute &lt;code&gt;paco -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/C00 $&amp;gt; francinette                  # Execute the tests for C00&#xA;&#xA;/C00/ex00 $&amp;gt; francinette             # Execute only the tests for ex00 in C00&#xA;&#xA;/libft $&amp;gt; francinette                # Execute the tests for libft&#xA;&#xA;~ $&amp;gt; francinette -h                  # Shows the help message&#xA;&#xA;libft $&amp;gt; paco memset isalpha memcpy  # Executes only the specified tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The name of the folder is not important. What is important is that you have a &lt;code&gt;Makefile&lt;/code&gt; that contains the name of the project (for example &lt;code&gt;libft&lt;/code&gt;), or the expected delivery files. If there is no &lt;code&gt;Makefile&lt;/code&gt; or delivery files are not present &lt;code&gt;francinette&lt;/code&gt; will not know what project to execute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~ $&amp;gt; francinette git@repo42.com/intra-uuid-234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command clones the git repository present in &lt;code&gt;git@repo42.com/intra-uuid-234&lt;/code&gt; into the current folder and executes the corresponding tests&lt;/p&gt; &#xA;&lt;p&gt;All the files are copied to the folder &lt;code&gt;~/francinette/temp/&amp;lt;project&amp;gt;&lt;/code&gt;. In here is where the norminette is checked, the code compiled and the tests executed. Normally you do not need to access this directory for anything. But if you run into unexpected problems, this is where the magic happens.&lt;/p&gt; &#xA;&lt;p&gt;Log files can be found in: &lt;code&gt;~/francinette/logs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall &lt;code&gt;francinette&lt;/code&gt; delete the &lt;code&gt;francinette&lt;/code&gt; folder. It should be located under your &lt;code&gt;$HOME&lt;/code&gt; directory (&lt;code&gt;/Users/&amp;lt;your_username&amp;gt;/&lt;/code&gt; or &lt;code&gt;/home/&amp;lt;your_username&amp;gt;/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;You also need to remove the automatically created aliases. For that open your &lt;code&gt;~/.zshrc&lt;/code&gt; file and delete the lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias francinette=&#34;$HOME&#34;/francinette/tester.sh&#xA;alias paco=&#34;$HOME&#34;/francinette/tester.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions you can create an issue or reach me on slack under &lt;code&gt;fsoares-&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;I&#39;m more advanced than the tests you have available. When are you adding more tests?&lt;/h4&gt; &#xA;&lt;p&gt;When I reach that exercise or project. You can also add them. For that you need to create a &lt;code&gt;ProjectTester.py&lt;/code&gt; file. and change the function &lt;code&gt;guess_project&lt;/code&gt; in &lt;code&gt;main.py&lt;/code&gt; to recognize the project.&lt;/p&gt; &#xA;&lt;h4&gt;This test that you put up is incorrect!&lt;/h4&gt; &#xA;&lt;p&gt;Please create a new github issue, indicating for what exercise which test fails, and a description of what you think is wrong. You can also try to fix it and create a pull request for that change!&lt;/p&gt; &#xA;&lt;h4&gt;What is NULL_CHECK in strict?&lt;/h4&gt; &#xA;&lt;p&gt;This is a way to test if you are protecting your &lt;code&gt;malloc&lt;/code&gt; calls. This means that it will make every call to &lt;code&gt;malloc&lt;/code&gt; fail and return &lt;code&gt;NULL&lt;/code&gt; instead of a newly allocated pointer. You need to take this into account when programming so that you don&#39;t get segmentation faults.&lt;/p&gt; &#xA;&lt;h4&gt;The tester for get_next_line is giving me Timeout errors&lt;/h4&gt; &#xA;&lt;p&gt;This is something that is very common. My tester will get slower for every malloc that you do, so if you do a lot of mallocs it will probably timeout.&lt;/p&gt; &#xA;&lt;p&gt;If it timeouts while in the strict mode, don&#39;t worry, this one is very very inefficient. I have plans to change some things to not make it so horrible, but for the time being, don&#39;t worry if it gives a Timeout.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;I&#39;ve installed francinette, but when I try to execute it I get the message: &lt;code&gt;command not found: francinette&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In the install script I try to set two alias to for &lt;code&gt;francinette&lt;/code&gt;: &lt;code&gt;francinette&lt;/code&gt; and &lt;code&gt;paco&lt;/code&gt;. If you are in MacOS I do that by adding two lines to the &lt;code&gt;.zshrc&lt;/code&gt; file, and to &lt;code&gt;.bashrc&lt;/code&gt; in linux. If by some chance you are using other shell, or for some other reason it does not work, You can try to set the aliases yourself, by adding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias francinette=&#34;$HOME&#34;/francinette/tester.sh&#xA;alias paco=&#34;$HOME&#34;/francinette/tester.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now it should work. If it does not, don&#39;t be afraid to contact me.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To 42 for providing me this opportunity&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/Tripouille&#34;&gt;Tripouille&lt;/a&gt; for &lt;a href=&#34;https://github.com/Tripouille/libftTester&#34;&gt;libftTester&lt;/a&gt;, &lt;a href=&#34;https://github.com/Tripouille/gnlTester&#34;&gt;gnlTester&lt;/a&gt; and &lt;a href=&#34;https://github.com/Tripouille/printfTester&#34;&gt;printfTester&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/jtoty&#34;&gt;jtoty&lt;/a&gt; and &lt;a href=&#34;https://github.com/y3ll0w42&#34;&gt;y3ll0w42&lt;/a&gt; for &lt;a href=&#34;https://github.com/y3ll0w42/libft-war-machine&#34;&gt;libft-war-machine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/alelievr&#34;&gt;alelievr&lt;/a&gt; for &lt;a href=&#34;https://github.com/alelievr/libft-unit-test&#34;&gt;libft-unit-test&lt;/a&gt; and &lt;a href=&#34;https://github.com/alelievr/printf-unit-test&#34;&gt;printf-unit-test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/cacharle&#34;&gt;cacharle&lt;/a&gt; for &lt;a href=&#34;https://github.com/cacharle/ft_printf_test&#34;&gt;ft_printf_test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/ombhd&#34;&gt;ombhd&lt;/a&gt; for &lt;a href=&#34;https://github.com/ombhd/Cleaner_42&#34;&gt;Cleaner_42&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/arsalas&#34;&gt;arsalas&lt;/a&gt; for the help in the minitalk tester&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/vfurmane&#34;&gt;vfurmane&lt;/a&gt; for &lt;a href=&#34;https://github.com/vfurmane/pipex-tester&#34;&gt;pipex-tester&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To &lt;a href=&#34;https://github.com/gmarcha&#34;&gt;gmarcha&lt;/a&gt; for &lt;a href=&#34;https://github.com/gmarcha/pipexMedic&#34;&gt;pipexMedic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pvvx/THB2</title>
    <updated>2024-11-13T01:29:06Z</updated>
    <id>tag:github.com,2024-11-13:/pvvx/THB2</id>
    <link href="https://github.com/pvvx/THB2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom firmware for Tuya devices on the PHY622x2 chipset&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-english-C1C1C1?style=for-the-badge&#34; alt=&#34;english&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/README-ru.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/also%20available%20in-russian-blue?style=for-the-badge&#34; alt=&#34;russian&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BTHome THB1, THB2, THB3, BTH01, TH05 (HW: v1.3..1.6), TH05F&lt;/h1&gt; &#xA;&lt;p&gt;Custom firmware for Tuya devices based on the PHY622x2 chipset.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/THB1&#34;&gt;THB1&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/THB2&#34;&gt;THB2&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/THB3&#34;&gt;THB3&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/BTH01/&#34;&gt;BTH01&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/TH05-v1.3&#34;&gt;TH05_V1.3&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/TH-05&#34;&gt;TH05_V1.4&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/TH05F&#34;&gt;TH05F&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/THB1/img/THB1.jpg&#34; alt=&#34;THB1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/THB2/img/THB2.jpg&#34; alt=&#34;THB2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/THB3/img/THB3.jpg&#34; alt=&#34;THB3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/BTH01/img/BTH01.jpg&#34; alt=&#34;BTH01&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/TH05-v1.3/img/TH05-V1.3.jpg&#34; alt=&#34;TH05V1.3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/TH-05/img/TH05V14.jpg&#34; alt=&#34;TH05V1.4&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://pvvx.github.io/TH05F/img/TH05F.jpg&#34; alt=&#34;TH05F&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This firmware works with &lt;a href=&#34;https://www.home-assistant.io/&#34;&gt;Home Assistant&lt;/a&gt; and other software running in the &lt;a href=&#34;https://bthome.io/&#34;&gt;BTHome&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;All firmware supports any of these sensors: CHT8215 (CHT8310), CHT8305, AHT20..30.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Software for setting up and making BLE OTA: &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Uploading OTA files to &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html&lt;/a&gt; is automatic. You don&#39;t need to download files from this repository for OTA.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To run &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html&lt;/a&gt; offline, just copy the &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/bthome_phy6222/web/PHY62x2BTHome.html&#34;&gt;html&lt;/a&gt; file to a local folder.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting started with the device&lt;/h2&gt; &#xA;&lt;p&gt;To work with the device, you need to write the &lt;code&gt;FW Boot&lt;/code&gt; firmware to the device via a USB-COM adapter. Boot firmware is a program with reduced functionality and provides secure OTA updates.&lt;/p&gt; &#xA;&lt;p&gt;Next, using the BLE connection in PHY62x2BTHome.html through the OTA tab, the main operating program of the &lt;code&gt;FW APP&lt;/code&gt; is recorded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FW APP&lt;/code&gt; can also be recorded using a USB-COM adapter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Boot and App firmware&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/#fw-boot-and-ota&#34;&gt;Boot&lt;/a&gt; firmware has minimal functions. &lt;code&gt;FW Boot&lt;/code&gt; is only used for downloading via OTA the full-featured version of &lt;code&gt;FW APP&lt;/code&gt; (&lt;code&gt;.bin&lt;/code&gt; files).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The device type can be distinguished externally by the smiley face symbol on the screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Device&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Boot file&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OTA file&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Printed circuit board labelling&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/THB1&#34;&gt;THB1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_THB1_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;THB1_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/THB2&#34;&gt;THB2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_THB2_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;THB2_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/THB3&#34;&gt;THB3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_THB2_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;THB2_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/BTH01&#34;&gt;BTH01&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_BTH01_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BTH01_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/TH-05&#34;&gt;TH05_V1.4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_TH05_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05_V1.4, TH05_V1.5, TH05_V1.6 (chip: BL55028)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/TH05-v1.3&#34;&gt;TH05_V1.3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_TH05D_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05D_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RSH-TH05-V1.3 (chip: BL55072)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pvvx.github.io/TH05F&#34;&gt;TH05F&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BOOT_TH05F_v19.hex&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05F_v19.bin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05Y_V1.1, TH05Y_V1.2 (chip: QD01 2332 NT)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The main firmware files, BOOT_XXX_vXX.hex (for programming via USB-COM adapter) and XXX_vXX.bin (for OTA), are located in the &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/bin&#34;&gt;bin&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Files for updating boot via OTA are located in the &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/update_boot&#34;&gt;update_boot&lt;/a&gt; directory. **&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The current `FW Boot&#39; version is &lt;strong&gt;v1.9&lt;/strong&gt; for all devices (errors fixed).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Internal GPIO pinout:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Firmware&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Sensor SDA/SCL/Power&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;LCD SDA/SCL/Power&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;LED&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;TRG(TX)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;IN(RX)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;THB1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18/P20/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P34/P33/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;THB2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18/P20/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;THB3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18/P20/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P34/P33/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BTH01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P33/P34/P00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P33/P34/P00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P33/P34/P02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P31/P32/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P11/P14/-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TH05F&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P33/P34/P00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P26/P31/P02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;With default settings&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BLE advertisement interval in &lt;a href=&#34;https://bthome.io&#34;&gt;BTHome v2&lt;/a&gt; format is 5 seconds.&lt;/li&gt; &#xA; &lt;li&gt;Humidity and temperature sensor is polled every second BLE advertisement interval - period of 10 seconds.&lt;/li&gt; &#xA; &lt;li&gt;Battery voltage measurement is done every minute.&lt;/li&gt; &#xA; &lt;li&gt;Recording of history every 30 minutes.&lt;/li&gt; &#xA; &lt;li&gt;The button is used for quick connection to old BT adapters. Pressing the button switches the BLE advertising interval to a shorter period (1562.5ms). The action will continue for 60 seconds, then the interval will be restored to the one set in the settings.&lt;/li&gt; &#xA; &lt;li&gt;The measured average consumption from a 3.3V source when scanning THB2 and BTH01 thermometers in passive mode is up to 8 µA.&lt;br&gt; For TH05_V1.4 the average consumption is about 23 µA (&lt;a href=&#34;https://github.com/pvvx/THB2/issues/8#issuecomment-1908982171&#34;&gt;this is the current of the installed components&lt;/a&gt;). Other versions with screen: 12 to 14 µA with LCD on and 7 to 12 µA with LCD off.&lt;/li&gt; &#xA; &lt;li&gt;Connection interval with Connect Latency (900ms).&lt;/li&gt; &#xA; &lt;li&gt;Handling of input counter contact for transmitted &lt;a href=&#34;https://github.com/pvvx/THB2/issues/10#issuecomment-1935169274&#34;&gt;Open/Close events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Processing of output contact switchable by set temperature and/or humidity with hysteresis.&lt;/li&gt; &#xA; &lt;li&gt;Support low-cost &lt;a href=&#34;https://github.com/pvvx/TLB2Z&#34;&gt;BLE to Zigbee advertising repeater&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version History&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;First release version.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Added trigger - TX2 output triggered by set temperature and/or humidity values with hysteresis. Transmission of the state of the RX2 output when connected.&lt;/li&gt;&#xA;     &lt;li&gt;Added display of smiley face with &#34;comfort&#34; for thermometers with screen.&lt;/li&gt;&#xA;     &lt;li&gt;Changed device name and MAC.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.2&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Processing and transmission of open/close events with counter from the output labelled &#34;RX2&#34; (for THB2 - &#34;RX1&#34;).&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.3&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Added THB1 and TH05_V1.3.&lt;/li&gt;&#xA;     &lt;li&gt;Next step is to reduce consumption for versions with LCD display by adding an option to switch off the display.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.4&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Stabilized connection for all device variants.&lt;/li&gt;&#xA;     &lt;li&gt;Added &lt;a href=&#34;https://pvvx.github.io/TH05F&#34;&gt;TH05F&lt;/a&gt;.&lt;/li&gt;&#xA;     &lt;li&gt;Fixed RTC progress.&lt;/li&gt;&#xA;     &lt;li&gt;Changed BLE name for TH05_V1.3 to &#34;TH05D&#34;.&lt;/li&gt;&#xA;     &lt;li&gt;Added files for OTA Boot update.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.5&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Added option to encrypt BLE ads with BindKey.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.6&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Added averaging of battery voltage calculation&lt;/li&gt;&#xA;     &lt;li&gt;Added duplication of open/close contact&lt;/li&gt;&#xA;     &lt;li&gt;Added counter status 12..20 sec (multiple of ad interval) after triggering and then every 30 min.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.7&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Fixed en error (&amp;gt; 42 C) for sensor CHT8305&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.8&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Added display of temperature in degrees Fahrenheit&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.9&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Fixed the bug of restoring the changed device name after power reset&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Firmware&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to flash the device with the Boot program via USB-COM adapter with 3.3V outputs.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect GND, TX, RX, RTS-RESET, VCC (+3.3B):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Adapter&lt;/th&gt; &#xA;   &lt;th&gt;Device&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GND&lt;/td&gt; &#xA;   &lt;td&gt;-Vbat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;+3.3V&lt;/td&gt; &#xA;   &lt;td&gt;+Vbat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TX&lt;/td&gt; &#xA;   &lt;td&gt;RX1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RX&lt;/td&gt; &#xA;   &lt;td&gt;TX1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RTS&lt;/td&gt; &#xA;   &lt;td&gt;RESET&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If there is no RST pin on the adapter, then short the RESET pin to GND (-Vbat) and quickly open it when the script starts (it may take a few tries).&lt;/p&gt; &#xA;&lt;p&gt;The name of the pins on the device can be found in the description at the links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pvvx.github.io/THB1&#34;&gt;THB1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pvvx.github.io/THB2&#34;&gt;THB2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pvvx.github.io/THB3&#34;&gt;THB3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pvvx.github.io/BTH01/&#34;&gt;BTH01&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pvvx.github.io/TH05-v1.3&#34;&gt;TH05_V1.3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pvvx.github.io/TH-05&#34;&gt;TH05_V1.4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install python3 and the necessary libraries:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the BOOT_XXX_vXX.hex file required for the specific device from the &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/bin&#34;&gt;bin&lt;/a&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 rdwr_phy62x2.py -p COM11 -e -r wh BOOT_XXX_vXX.hex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Boot flashing is complete. The device is operational and the adapter can be disconnected.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the full version of the firmware via OTA. To do this:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Apply power to the sensor.&lt;/li&gt; &#xA;   &lt;li&gt;Go to &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;code&gt;Connect&lt;/code&gt; button, look for the device, and connect.&lt;/li&gt; &#xA;   &lt;li&gt;Once connected, go to the &lt;code&gt;OTA&lt;/code&gt; tab, select the required firmware (&lt;code&gt;.bin&lt;/code&gt;) and click &lt;code&gt;Start&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The device should reboot and be ready for use.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Optional:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;To pre-wipe the entire flash, use the &lt;code&gt;-a&lt;/code&gt; option.&lt;/li&gt; &#xA;  &lt;li&gt;To pre-wipe the flash workspace, use the &lt;code&gt;-e&lt;/code&gt; option.&lt;/li&gt; &#xA;  &lt;li&gt;With the USB-COM adapter it is possible to write the main firmware (APP) immediately:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;python3 rdwr_phy62x2.py -p COM11 -r we 0x10000 XXX_vXX.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Saving the original firmware&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect GND, TX, RX, RTS-RESET, VCC (+3.3B).&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 rdwr_phy62x2.py -p COM11 -r rc 0x11000000 0x80000 ff_thb2.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Save the resulting ff_thb2.bin file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Restoring the original firmware&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Original Tuya firmware for a specific device type can be obtained from &lt;a href=&#34;https://raw.githubusercontent.com/pvvx/THB2/master/#boot-and-app-firmware&#34;&gt;the links in the table at the beginning of this README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Take the saved ff_thb2.bin file of the original firmware.&lt;/li&gt; &#xA; &lt;li&gt;Connect GND, TX, RX, RTS-RESET, VCC (+3.3B).&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 rdwr_phy62x2.py -p COM11 -b 1000000 -r we 0 ff_thb2.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not all USB-COM adapters support 1Mbit. Then remove the &lt;code&gt;-b 1000000&lt;/code&gt; option or select a different baud rate.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;The firmware has been flashed and the device should work.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Flash allocation (512 kilobytes)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Address&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x00000&lt;/td&gt; &#xA;   &lt;td&gt;ROM used&lt;/td&gt; &#xA;   &lt;td&gt;8 kilobytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x02000&lt;/td&gt; &#xA;   &lt;td&gt;Boot Info for ROM&lt;/td&gt; &#xA;   &lt;td&gt;4 kilobytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x03000&lt;/td&gt; &#xA;   &lt;td&gt;FW Boot with OTA function&lt;/td&gt; &#xA;   &lt;td&gt;52 kilobytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x10000&lt;/td&gt; &#xA;   &lt;td&gt;FW APP&lt;/td&gt; &#xA;   &lt;td&gt;128 kilobytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x30000&lt;/td&gt; &#xA;   &lt;td&gt;History Recording&lt;/td&gt; &#xA;   &lt;td&gt;304 kilobytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0x7C000&lt;/td&gt; &#xA;   &lt;td&gt;Save Settings (EEP)&lt;/td&gt; &#xA;   &lt;td&gt;16 kilobytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;FW Boot and OTA&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FW Boot&lt;/code&gt; has an OTA function, but does not have a history function or any other add-ons. It is used to handle OTA for any failed or incorrect updates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FW APP&lt;/code&gt; has no OTA function, for OTA it reboots into &lt;code&gt;FW Boot&lt;/code&gt;. It has additional features and extensions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Action of the button when the device is turned on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the button is pressed at startup, &lt;code&gt;FW Boot&lt;/code&gt; always starts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the button is not pressed, the &lt;code&gt;FW APP&lt;/code&gt; entry is checked or not. If there is an &lt;code&gt;FW APP&lt;/code&gt;, it launches the &lt;code&gt;FW APP&lt;/code&gt;. If there is no &lt;code&gt;FW APP&lt;/code&gt;, &lt;code&gt;FW Boot&lt;/code&gt; is launched.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On thermometers with a screen, if the time display is not turned on, during start or restart the following is displayed for a short time:&lt;/p&gt; &#xA;&lt;p&gt;&#34;Bot 14&#34; - &lt;code&gt;FW Boot&lt;/code&gt; version 1.4&lt;/p&gt; &#xA;&lt;p&gt;&#34;APP 15&#34; - &lt;code&gt;FW APP&lt;/code&gt; version 1.5&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to force a reboot to &lt;code&gt;FW Boot&lt;/code&gt; from &lt;code&gt;FW APP&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Switch off the power and hold down the button to switch on the power.&lt;/li&gt; &#xA; &lt;li&gt;Enter the &lt;code&gt;7233&lt;/code&gt; command in the &lt;code&gt;Service&lt;/code&gt; menu of the &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html program&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Complete reboot: Enter the &lt;code&gt;7201&lt;/code&gt; command in the &lt;code&gt;Service&lt;/code&gt; menu of the &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Through USB-UART adapter, APP can be written immediately after boot. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 rdwr_phy62x2.py -p COM11 -e wh ./bin/BOOT_TH05V13_v13.hex&#xA;python3 rdwr_phy62x2.py -p COM11 -r we 0x10000 ./bin/TH05V13_v13.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Open/Close event and pulse counting&lt;/h2&gt; &#xA;&lt;p&gt;Since version 1.2 it is supported to poll a pin connected to a reed switch or a contact shorted to GND.&lt;/p&gt; &#xA;&lt;p&gt;The maximum switching frequency is 100 times per second.&lt;/p&gt; &#xA;&lt;p&gt;If the contact is rattling, then it is advisable to shunt the contact with a capacitor.&lt;/p&gt; &#xA;&lt;p&gt;When closing or opening, a block of 5 BLE adverts is transmitted following each other after a period of 50 ms.&lt;/p&gt; &#xA;&lt;p&gt;At each &#34;Open&#34; event a counter is added.&lt;/p&gt; &#xA;&lt;p&gt;The counter value is transmitted together with each &#34;Open/Close&#34; event.&lt;/p&gt; &#xA;&lt;p&gt;Input contact on the thermometer board:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On &lt;a href=&#34;https://pvvx.github.io/THB1&#34;&gt;THB1&lt;/a&gt; - labelled as &lt;code&gt;RX&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On &lt;a href=&#34;https://pvvx.github.io/THB2&#34;&gt;THB2&lt;/a&gt; - labelled as &lt;code&gt;RX&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On &lt;a href=&#34;https://pvvx.github.io/THB3&#34;&gt;THB3&lt;/a&gt; - labelled as &lt;code&gt;RX&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On &lt;a href=&#34;https://pvvx.github.io/BTH01/&#34;&gt;BTH01&lt;/a&gt; - labelled as &lt;code&gt;RX2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On &lt;a href=&#34;https://pvvx.github.io/TH05-v1.3&#34;&gt;TH05_V1.3&lt;/a&gt; - labelled as &lt;code&gt;RX0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On &lt;a href=&#34;https://pvvx.github.io/TH-05&#34;&gt;TH05_V1.4&lt;/a&gt; - labelled as &lt;code&gt;RX2&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pvvx/THB2/assets/12629515/09f6f810-f2e2-4b61-9c84-f7c3770bb76a&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pvvx/THB2/assets/12629515/40de4978-2d97-4f79-af9d-565236d0ba2a&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Temperature and/or humidity control output of an external device&lt;/h2&gt; &#xA;&lt;p&gt;The contact on the printed circuit board labelled &#34;TX&#34; or &#34;TX2&#34; is controlled with hysteresis setpoints for temperature and humidity. It is possible to switch to inverse output control.&lt;/p&gt; &#xA;&lt;p&gt;The setting is made in &lt;a href=&#34;https://pvvx.github.io/THB2/web/PHY62x2BTHome.html&#34;&gt;PHY62x2BTHome.html program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Output operation is assigned by setting the hysteresis value:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the hysteresis value is zero, there will be no switching.&lt;/li&gt; &#xA; &lt;li&gt;If the hysteresis value is greater than zero, switching (switching on) will occur at a value lower than the setpoint + hysteresis.&lt;/li&gt; &#xA; &lt;li&gt;If the hysteresis value is less than zero, switching (switching on) will take place at a value higher than setpoint + hysteresis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reset basic settings&lt;/h2&gt; &#xA;&lt;p&gt;To reset basic parameters to initial values, take an Android smartphone and the &#34;nRFConnect&#34; app. Connect to the device and in the service &lt;code&gt;0xFCD2&lt;/code&gt; with characteristic &lt;code&gt;0xFFF4&lt;/code&gt; write &lt;code&gt;56&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pvvx/THB2/assets/12629515/85cfaf06-e430-492e-930a-536afb163b5b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pressing/releasing the button temporarily changes the connection interval for connection. Press the button briefly and connect in 60 sec. If you don&#39;t have time, press the button more often...&lt;/li&gt; &#xA; &lt;li&gt;The firmware checks all settings for compliance with Bluetooth SIG standards.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If the interval is more than 10 sec, it will set 10 sec as it is the maximum in the standard. So do other settings. However, not all BT adapters can work with 10 sec interval for connection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;When working with BLE in Linux it is mandatory to change Bluez options and/or kernel patches!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Firmware&lt;/h2&gt; &#xA;&lt;p&gt;The GNU Arm Embedded Toolchain is used to build the firmware.&lt;/p&gt; &#xA;&lt;p&gt;To work in Eclipse, use project import and install toolchain.path.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/pvvx/PHY62x2&#34;&gt;this&lt;/a&gt; for more information on PHY62xx chips.&lt;/p&gt;</summary>
  </entry>
</feed>