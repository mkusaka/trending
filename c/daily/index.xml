<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-31T01:32:45Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Esonhugh/sshd_backdoor</title>
    <updated>2023-01-31T01:32:45Z</updated>
    <id>tag:github.com,2023-01-31:/Esonhugh/sshd_backdoor</id>
    <link href="https://github.com/Esonhugh/sshd_backdoor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;/root/.ssh/authorized_keys evil file watchdog with ebpf tracepoint hook.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;sshd_backdoor&lt;/h2&gt; &#xA;&lt;p&gt;This Project is based on BlackHat USA 2021 and Defcon 29.&lt;/p&gt; &#xA;&lt;p&gt;About Using ebpf technique, hijacking the process during sshd service getting the ~/.ssh/authorized_keys to authorize user logging and injecting our public key make our login successful.&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2BUbPzwaGdk&#34; title=&#34;SSHD backdoor Demo&#34;&gt;&lt;img src=&#34;https://res.cloudinary.com/marcomontalbano/image/upload/v1674832434/video_to_markdown/images/youtube--2BUbPzwaGdk-c05b58ac6eb4c4700831b2b3070cd403.jpg&#34; alt=&#34;SSHD backdoor Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Main Process in ebpf program&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Hook OpenAt syscall enter: check if the sshd process call this, log the pid of sshd.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hook OpenAt Syscall exit: check the pid logged. logging the fd of pid, map pid-&amp;gt;fd.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hook Read Syscall enter: check the pid logged. logging the user_space_char_buffer of pid.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hook Read Syscall exit: check the pid logged. find the buffer and change the buffer into our Key. Then delete pid in map to avoid blocking administrators&#39; keys be read.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make help&#xA;&#xA;|=======================================================================================================&#xA;|usage:&#xA;|       build:  build full sshd_backdoor cli tool. But full sshd_backdoor is just supoorted the demo only&#xA;|       generate: Generate the ebpf prog in kernel with clang.&#xA;|                         if you need you can set the CFLAGS to append&#xA;|       test_ebpf: if you editing the ebpf-c c files and header files&#xA;|                          to test the ebpf can be compiled and pass ebpf verifier when load&#xA;|       tool_unload: bpftool unload progs.&#xA;|       tool_load: bpftool load  progs.&#xA;|       bpftrace_keylogging: logging sshd keys.Also it can catch the passwords when logging&#xA;|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;By the way&lt;/h2&gt; &#xA;&lt;h3&gt;sshd keylogging&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make bpftrace_keylogging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which logging all message in sshd process. Of Course the key log.&lt;/p&gt; &#xA;&lt;h3&gt;reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pathtofile/bad-bpf/raw/main/src/sudoadd.bpf.c&#34;&gt;https://github.com/pathtofile/bad-bpf/blob/main/src/sudoadd.bpf.c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5zixNDolLrg&#34;&gt;https://www.youtube.com/watch?v=5zixNDolLrg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;etc.&lt;/p&gt;</summary>
  </entry>
</feed>