<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-07T01:32:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ivmai/bdwgc</title>
    <updated>2023-03-07T01:32:15Z</updated>
    <id>tag:github.com,2023-03-07:/ivmai/bdwgc</id>
    <link href="https://github.com/ivmai/bdwgc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Boehm-Demers-Weiser conservative C/C++ Garbage Collector (bdwgc, also known as bdw-gc, boehm-gc, libgc)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Boehm-Demers-Weiser Garbage Collector&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/ivmai/bdwgc&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/ivmai/bdwgc.svg?branch=master&#34; alt=&#34;Travis-CI build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/ivmai/bdwgc&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/ivmai/bdwgc?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor CI build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/ivmai/bdwgc?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/ivmai/bdwgc/coverage.svg?branch=master&#34; alt=&#34;Codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/ivmai/bdwgc&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/ivmai/bdwgc/badge.png?branch=master&#34; alt=&#34;Coveralls test coverage status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/ivmai-bdwgc&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/10813/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fivmai%2Fbdwgc?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fivmai%2Fbdwgc.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6332&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6332/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hitsofcode.com/github/ivmai/bdwgc/view&#34;&gt;&lt;img src=&#34;https://hitsofcode.com/github/ivmai/bdwgc?branch=master&#34; alt=&#34;Hits-of-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shields.io/category/size&#34;&gt;&lt;img src=&#34;https://img.shields.io/tokei/lines/github/ivmai/bdwgc&#34; alt=&#34;Lines of code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shields.io/category/size&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/ivmai/bdwgc&#34; alt=&#34;GitHub code size in bytes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shields.io/category/downloads&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/ivmai/bdwgc/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/boehm-gc/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/boehm-gc.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is version 8.3.0 (next release development) of a conservative garbage collector for C and C++.&lt;/p&gt; &#xA;&lt;p&gt;License: &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/LICENSE&#34;&gt;MIT-style&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You might find a more recent/stable version on the &lt;a href=&#34;https://github.com/ivmai/bdwgc/wiki/Download&#34;&gt;Download&lt;/a&gt; page, or &lt;a href=&#34;http://www.hboehm.info/gc/&#34;&gt;BDWGC site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, the latest bug fixes and new features are available in the &lt;a href=&#34;https://github.com/ivmai/bdwgc&#34;&gt;development repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is intended to be a general purpose, garbage collecting storage allocator. The algorithms used are described in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Boehm, H., and M. Weiser, &#34;Garbage Collection in an Uncooperative Environment&#34;, Software Practice &amp;amp; Experience, September 1988, pp. 807-820.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boehm, H., A. Demers, and S. Shenker, &#34;Mostly Parallel Garbage Collection&#34;, Proceedings of the ACM SIGPLAN &#39;91 Conference on Programming Language Design and Implementation, SIGPLAN Notices 26, 6 (June 1991), pp. 157-164.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boehm, H., &#34;Space Efficient Conservative Garbage Collection&#34;, Proceedings of the ACM SIGPLAN &#39;91 Conference on Programming Language Design and Implementation, SIGPLAN Notices 28, 6 (June 1993), pp. 197-206.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boehm H., &#34;Reducing Garbage Collector Cache Misses&#34;, Proceedings of the 2000 International Symposium on Memory Management.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Possible interactions between the collector and optimizing compilers are discussed in&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Boehm, H., and D. Chase, &#34;A Proposal for GC-safe C Compilation&#34;, The Journal of C Language Translation 4, 2 (December 1992).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boehm H., &#34;Simple GC-safe Compilation&#34;, Proceedings of the ACM SIGPLAN &#39;96 Conference on Programming Language Design and Implementation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike the collector described in the second reference, this collector operates either with the mutator stopped during the entire collection (default) or incrementally during allocations. (The latter is supported on fewer machines.) On the most common platforms, it can be built with or without thread support. On some platforms, it can take advantage of a multiprocessor to speed up garbage collection.&lt;/p&gt; &#xA;&lt;p&gt;Many of the ideas underlying the collector have previously been explored by others. Notably, some of the run-time systems developed at Xerox PARC in the early 1980s conservatively scanned thread stacks to locate possible pointers (cf. Paul Rovner, &#34;On Adding Garbage Collection and Runtime Types to a Strongly-Typed Statically Checked, Concurrent Language&#34; Xerox PARC CSL 84-7). Doug McIlroy wrote a simpler fully conservative collector that was part of version 8 UNIX (tm), but appears to not have received widespread use.&lt;/p&gt; &#xA;&lt;p&gt;Rudimentary tools for use of the collector as a &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/leak.md&#34;&gt;leak detector&lt;/a&gt; are included, as is a fairly sophisticated string package &#34;cord&#34; that makes use of the collector. (See &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/README.cords&#34;&gt;README.cords&lt;/a&gt; and H.-J. Boehm, R. Atkinson, and M. Plass, &#34;Ropes: An Alternative to Strings&#34;, Software Practice and Experience 25, 12 (December 1995), pp. 1315-1330. This is very similar to the &#34;rope&#34; package in Xerox Cedar, or the &#34;rope&#34; package in the SGI STL or the g++ distribution.)&lt;/p&gt; &#xA;&lt;p&gt;Further collector documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/overview.md&#34;&gt;overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of the known uses of the collector are listed on the GitHub &lt;a href=&#34;https://github.com/ivmai/bdwgc/wiki/Known-clients&#34;&gt;Known-clients&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;General Description&lt;/h2&gt; &#xA;&lt;p&gt;This is a garbage collecting storage allocator that is intended to be used as a plug-in replacement for C&#39;s malloc.&lt;/p&gt; &#xA;&lt;p&gt;Since the collector does not require pointers to be tagged, it does not attempt to ensure that all inaccessible storage is reclaimed. However, in our experience, it is typically more successful at reclaiming unused memory than most C programs using explicit deallocation. Unlike manually introduced leaks, the amount of unreclaimed memory typically stays bounded.&lt;/p&gt; &#xA;&lt;p&gt;In the following, an &#34;object&#34; is defined to be a region of memory allocated by the routines described below.&lt;/p&gt; &#xA;&lt;p&gt;Any objects not intended to be collected must be pointed to either from other such accessible objects, or from the registers, stack, data, or statically allocated bss segments. Pointers from the stack or registers may point to anywhere inside an object. The same is true for heap pointers if the collector is compiled with &lt;code&gt;ALL_INTERIOR_POINTERS&lt;/code&gt; defined, or &lt;code&gt;GC_all_interior_pointers&lt;/code&gt; is otherwise set, as is now the default.&lt;/p&gt; &#xA;&lt;p&gt;Compiling without &lt;code&gt;ALL_INTERIOR_POINTERS&lt;/code&gt; may reduce accidental retention of garbage objects, by requiring pointers from the heap to the beginning of an object. But this no longer appears to be a significant issue for most programs occupying a small fraction of the possible address space.&lt;/p&gt; &#xA;&lt;p&gt;There are a number of routines which modify the pointer recognition algorithm. &lt;code&gt;GC_register_displacement&lt;/code&gt; allows certain interior pointers to be recognized even if &lt;code&gt;ALL_INTERIOR_POINTERS&lt;/code&gt; is not defined. &lt;code&gt;GC_malloc_ignore_off_page&lt;/code&gt; allows some pointers into the middle of large objects to be disregarded, greatly reducing the probability of accidental retention of large objects. For most purposes it seems best to compile with &lt;code&gt;ALL_INTERIOR_POINTERS&lt;/code&gt; and to use &lt;code&gt;GC_malloc_ignore_off_page&lt;/code&gt; if you get collector warnings from allocations of very large objects. See &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/debugging.md&#34;&gt;here&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;WARNING&lt;/em&gt;: pointers inside memory allocated by the standard (system) &lt;code&gt;malloc&lt;/code&gt; are not seen by the garbage collector. Thus objects pointed to only from such a region may be prematurely deallocated. It is thus suggested that the standard &lt;code&gt;malloc&lt;/code&gt; be used only for memory regions, such as I/O buffers, that are guaranteed not to contain pointers to garbage collectible memory. Pointers in C language automatic, static, or register variables, are correctly recognized. (Note that &lt;code&gt;GC_malloc_uncollectable&lt;/code&gt; has semantics similar to standard malloc, but allocates objects that are traced by the collector.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;WARNING&lt;/em&gt;: the collector does not always know how to find pointers in data areas that are associated with dynamic libraries. This is easy to remedy if you know how to find those data areas on your operating system (see &lt;code&gt;GC_add_roots&lt;/code&gt;). Code for doing this under SunOS, IRIX 5.X and 6.X, HP/UX, Alpha OSF/1, Linux, and Win32 is included and used by default. (See &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/platforms/README.win32&#34;&gt;README.win32&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/platforms/README.win64&#34;&gt;README.win64&lt;/a&gt; for Windows details.) On other systems, pointers from dynamic library data areas may not be considered by the collector. If you&#39;re writing a program that depends on the collector scanning dynamic library data areas, it may be a good idea to include at least one call to &lt;code&gt;GC_is_visible&lt;/code&gt; to ensure that those areas are visible to the collector.&lt;/p&gt; &#xA;&lt;p&gt;Note that the garbage collector does not need to be informed of shared read-only data. However, if the shared library mechanism can introduce discontiguous data areas that may contain pointers then the collector does need to be informed.&lt;/p&gt; &#xA;&lt;p&gt;Signal processing for most signals may be deferred during collection, and during uninterruptible parts of the allocation process. Like standard ANSI C mallocs, by default it is unsafe to invoke malloc (and other GC routines) from a signal handler while another malloc call may be in progress.&lt;/p&gt; &#xA;&lt;p&gt;The allocator/collector can also be configured for thread-safe operation. (Full signal safety can also be achieved, but only at the cost of two system calls per malloc, which is usually unacceptable.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;WARNING&lt;/em&gt;: the collector does not guarantee to scan thread-local storage (e.g. of the kind accessed with &lt;code&gt;pthread_getspecific&lt;/code&gt;). The collector does scan thread stacks, though, so generally the best solution is to ensure that any pointers stored in thread-local storage are also stored on the thread&#39;s stack for the duration of their lifetime. (This is arguably a longstanding bug, but it hasn&#39;t been fixed yet.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Portability&lt;/h2&gt; &#xA;&lt;p&gt;The collector operates silently in the default configuration. In the event of issues, this can usually be changed by defining the &lt;code&gt;GC_PRINT_STATS&lt;/code&gt; or &lt;code&gt;GC_PRINT_VERBOSE_STATS&lt;/code&gt; environment variables. This will result in a few lines of descriptive output for each collection. (The given statistics exhibit a few peculiarities. Things don&#39;t appear to add up for a variety of reasons, most notably fragmentation losses. These are probably much more significant for the contrived program &lt;code&gt;gctest&lt;/code&gt; than for your application.)&lt;/p&gt; &#xA;&lt;p&gt;On most Unix-like platforms, the collector can be built either using a GNU autoconf-based build infrastructure (type &lt;code&gt;./configure; make&lt;/code&gt; in the simplest case), or using CMake (see the sample below), or with a classic makefile by itself (type &lt;code&gt;make -f Makefile.direct&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Please note that the collector source repository does not contain configure and similar auto-generated files, thus the full procedure of autoconf-based build of &lt;code&gt;master&lt;/code&gt; branch of the collector could look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ivmai/bdwgc&#xA;cd bdwgc&#xA;git clone https://github.com/ivmai/libatomic_ops&#xA;./autogen.sh&#xA;./configure&#xA;make -j&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cloning of &lt;code&gt;libatomic_ops&lt;/code&gt; is now optional provided the compiler supports atomic intrinsics. See &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/README.autoconf&#34;&gt;README.autoconf&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;As noted above, alternatively, the collector could be built with CMake, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir out&#xA;cd out&#xA;cmake -Dbuild_tests=ON ..&#xA;cmake --build .&#xA;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/README.cmake&#34;&gt;README.cmake&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Finally, on most targets, the collector could be built and tested directly with a single compiler invocation, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc -I include -o gctest tests/gctest.c extra/gc.c &amp;amp;&amp;amp; ./gctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, CMake could be used to build the library as described above or by typing &lt;code&gt;nmake -f NT_MAKEFILE&lt;/code&gt;, this assumes you have Microsoft command-line tools installed and suitably configured. See &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/platforms/README.win32&#34;&gt;README.win32&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;The library is built with threads support on (i.e. for thread-safe operation) by default, unless &lt;code&gt;--disable-threads&lt;/code&gt; is passed to &lt;code&gt;./configure&lt;/code&gt; (or &lt;code&gt;-Denable_threads=OFF&lt;/code&gt; is passed to &lt;code&gt;cmake&lt;/code&gt; tool).&lt;/p&gt; &#xA;&lt;p&gt;The library could be configured more precisely during the build by defining the macros listed in &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/README.macros&#34;&gt;README.macros&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Below we focus on the collector build using classic makefile. For the Makefile.direct-based process, typing &lt;code&gt;make check&lt;/code&gt; instead of &lt;code&gt;make&lt;/code&gt; will automatically build the collector and then run &lt;code&gt;setjmp_test&lt;/code&gt; and &lt;code&gt;gctest&lt;/code&gt;. &lt;code&gt;setjmp_test&lt;/code&gt; will give you information about configuring the collector, which is useful primarily if you have a machine that&#39;s not already supported. gctest is a somewhat superficial test of collector functionality. Failure is indicated by a core dump or a message to the effect that the collector is broken. gctest takes about a second to two to run on reasonable 2007 vintage desktops. It may use up to about 30 MB of memory. (The multi-threaded version will use more. 64-bit versions may use more.) &lt;code&gt;make check&lt;/code&gt; will also, as its last step, attempt to build and test the &#34;cord&#34; string library.)&lt;/p&gt; &#xA;&lt;p&gt;Makefile.direct will generate a library libgc.a which you should link against. Typing &lt;code&gt;make -f Makefile.direct cords&lt;/code&gt; will build the cord library (libcord.a) as well.&lt;/p&gt; &#xA;&lt;p&gt;The GNU style build process understands the usual targets. &lt;code&gt;make check&lt;/code&gt; runs a number of tests. &lt;code&gt;make install&lt;/code&gt; installs at least libgc, and libcord. Try &lt;code&gt;./configure --help&lt;/code&gt; to see the configuration options. It is currently not possible to exercise all combinations of build options this way.&lt;/p&gt; &#xA;&lt;p&gt;All include files that need to be used by clients will be put in the include subdirectory. (Normally this is just gc.h. &lt;code&gt;make cords&lt;/code&gt; adds &#34;cord.h&#34; and &#34;ec.h&#34;.)&lt;/p&gt; &#xA;&lt;p&gt;The collector currently is designed to run essentially unmodified on machines that use a flat 32-bit or 64-bit address space. That includes the vast majority of Workstations and x86 (i386 or later) PCs.&lt;/p&gt; &#xA;&lt;p&gt;In a few cases (e.g., OS/2, Win32) a separate makefile is supplied; these have a separate host-specific docs/platforms/README.* file.&lt;/p&gt; &#xA;&lt;p&gt;Dynamic libraries are completely supported only under SunOS/Solaris, (and even that support is not functional on the last Sun 3 release), Linux, FreeBSD, NetBSD, IRIX, HP/UX, Win32 (not win32s) and OSF/1 on DEC AXP machines plus perhaps a few others listed near the top of dyn_load.c. On other machines we recommend that you do one of the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add dynamic library support (and send us the code).&lt;/li&gt; &#xA; &lt;li&gt;Use static versions of the libraries.&lt;/li&gt; &#xA; &lt;li&gt;Arrange for dynamic libraries to use the standard malloc. This is still dangerous if the library stores a pointer to a garbage collected object. But nearly all standard interfaces prohibit this, because they deal correctly with pointers to stack allocated objects. (&lt;code&gt;strtok&lt;/code&gt; is an exception. Don&#39;t use it.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In all cases we assume that pointer alignment is consistent with that enforced by the standard C compilers. If you use a nonstandard compiler you may have to adjust the alignment parameters defined in gc_priv.h. Note that this may also be an issue with packed records/structs, if those enforce less alignment for pointers.&lt;/p&gt; &#xA;&lt;p&gt;A port to a machine that is not byte addressed, or does not use 32 bit or 64 bit addresses will require a major effort. A port to plain MSDOS or win16 is hard.&lt;/p&gt; &#xA;&lt;p&gt;For machines not already mentioned, or for nonstandard compilers, some porting suggestions are provided &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/porting.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The C Interface to the Allocator&lt;/h2&gt; &#xA;&lt;p&gt;The following routines are intended to be directly called by the user. Note that usually only &lt;code&gt;GC_malloc&lt;/code&gt; is necessary. &lt;code&gt;GC_clear_roots&lt;/code&gt; and &lt;code&gt;GC_add_roots&lt;/code&gt; calls may be required if the collector has to trace from nonstandard places (e.g. from dynamic library data areas on a machine on which the collector doesn&#39;t already understand them.) On some machines, it may be desirable to set &lt;code&gt;GC_stackbottom&lt;/code&gt; to a good approximation of the stack base (bottom).&lt;/p&gt; &#xA;&lt;p&gt;Client code may include &#34;gc.h&#34;, which defines all of the following, plus many others.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_malloc(bytes)&lt;/code&gt; - Allocate an object of a given size. Unlike malloc, the object is cleared before being returned to the user. &lt;code&gt;GC_malloc&lt;/code&gt; will invoke the garbage collector when it determines this to be appropriate. GC_malloc may return 0 if it is unable to acquire sufficient space from the operating system. This is the most probable consequence of running out of space. Other possible consequences are that a function call will fail due to lack of stack space, or that the collector will fail in other ways because it cannot maintain its internal data structures, or that a crucial system process will fail and take down the machine. Most of these possibilities are independent of the malloc implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_malloc_atomic(bytes)&lt;/code&gt; - Allocate an object of a given size that is guaranteed not to contain any pointers. The returned object is not guaranteed to be cleared. (Can always be replaced by &lt;code&gt;GC_malloc&lt;/code&gt;, but results in faster collection times. The collector will probably run faster if large character arrays, etc. are allocated with &lt;code&gt;GC_malloc_atomic&lt;/code&gt; than if they are statically allocated.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_realloc(object, new_bytes)&lt;/code&gt; - Change the size of object to be of a given size. Returns a pointer to the new object, which may, or may not, be the same as the pointer to the old object. The new object is taken to be atomic if and only if the old one was. If the new object is composite and larger than the original object then the newly added bytes are cleared. This is very likely to allocate a new object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_free(object)&lt;/code&gt; - Explicitly deallocate an object returned by &lt;code&gt;GC_malloc&lt;/code&gt; or &lt;code&gt;GC_malloc_atomic&lt;/code&gt;, or friends. Not necessary, but can be used to minimize collections if performance is critical. Probably a performance loss for very small objects (&amp;lt;= 8 bytes).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_expand_hp(bytes)&lt;/code&gt; - Explicitly increase the heap size. (This is normally done automatically if a garbage collection failed to reclaim enough memory. Explicit calls to &lt;code&gt;GC_expand_hp&lt;/code&gt; may prevent unnecessarily frequent collections at program startup.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_malloc_ignore_off_page(bytes)&lt;/code&gt; - Identical to &lt;code&gt;GC_malloc&lt;/code&gt;, but the client promises to keep a pointer to the somewhere within the first 256 bytes of the object while it is live. (This pointer should normally be declared volatile to prevent interference from compiler optimizations.) This is the recommended way to allocate anything that is likely to be larger than 100 KB or so. (&lt;code&gt;GC_malloc&lt;/code&gt; may result in a failure to reclaim such objects.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_set_warn_proc(proc)&lt;/code&gt; - Can be used to redirect warnings from the collector. Such warnings should be rare, and should not be ignored during code development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_enable_incremental()&lt;/code&gt; - Enables generational and incremental collection. Useful for large heaps on machines that provide access to page dirty information. Some dirty bit implementations may interfere with debugging (by catching address faults) and place restrictions on heap arguments to system calls (since write faults inside a system call may not be handled well).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GC_register_finalizer(object, proc, data, 0, 0)&lt;/code&gt; and friends - Allow for registration of finalization code. User supplied finalization code (&lt;code&gt;(*proc)(object, data)&lt;/code&gt;) is invoked after object becomes unreachable. For more sophisticated uses, and for finalization ordering issues, see gc.h.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The global variable &lt;code&gt;GC_free_space_divisor&lt;/code&gt; may be adjusted up from it default value of 3 to use less space and more collection time, or down for the opposite effect. Setting it to 1 will almost disable collections and cause all allocations to simply grow the heap.&lt;/p&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;GC_non_gc_bytes&lt;/code&gt;, which is normally 0, may be changed to reflect the amount of memory allocated by the above routines that should not be considered as a candidate for collection. Careless use may, of course, result in excessive memory consumption.&lt;/p&gt; &#xA;&lt;p&gt;Some additional tuning is possible through the parameters defined near the top of gc_priv.h.&lt;/p&gt; &#xA;&lt;p&gt;If only &lt;code&gt;GC_malloc&lt;/code&gt; is intended to be used, it might be appropriate to define:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define malloc(n) GC_malloc(n)&#xA;#define calloc(m,n) GC_malloc((m)*(n))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For small pieces of VERY allocation intensive code, &lt;code&gt;gc_inline.h&lt;/code&gt; includes some allocation macros that may be used in place of &lt;code&gt;GC_malloc&lt;/code&gt; and friends.&lt;/p&gt; &#xA;&lt;p&gt;All externally visible names in the garbage collector start with &lt;code&gt;GC_&lt;/code&gt;. To avoid name conflicts, client code should avoid this prefix, except when accessing garbage collector routines.&lt;/p&gt; &#xA;&lt;p&gt;There are provisions for allocation with explicit type information. This is rarely necessary. Details can be found in &lt;code&gt;gc_typed.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The C++ Interface to the Allocator&lt;/h2&gt; &#xA;&lt;p&gt;The Ellis-Hull C++ interface to the collector is included in the collector distribution. If you intend to use this, type &lt;code&gt;./configure --enable-cplusplus &amp;amp;&amp;amp; make&lt;/code&gt; (or &lt;code&gt;cmake -Denable_cplusplus=ON . &amp;amp;&amp;amp; cmake --build .&lt;/code&gt;, or &lt;code&gt;make -f Makefile.direct c++&lt;/code&gt; depending on the build system you use). This creates libgccpp.a and libgctba.a files, or their shared library equivalents (libgccpp.so and libgctba.so). You should link with either the first (gccpp) or the second one (gctba), but not both. See gc_cpp.h and &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/docs/gcinterface.md&#34;&gt;here&lt;/a&gt; for the definition of the interface. This interface tries to approximate the Ellis-Detlefs C++ garbage collection proposal without compiler changes.&lt;/p&gt; &#xA;&lt;p&gt;Very often it will also be necessary to use &lt;code&gt;gc_allocator.h&lt;/code&gt; and the allocator declared there to construct STL data structures. Otherwise subobjects of STL data structures will be allocated using a system allocator, and objects they refer to may be prematurely collected.&lt;/p&gt; &#xA;&lt;h2&gt;Use as Leak Detector&lt;/h2&gt; &#xA;&lt;p&gt;The collector may be used to track down leaks in C programs that are intended to run with malloc/free (e.g. code with extreme real-time or portability constraints). To do so define &lt;code&gt;FIND_LEAK&lt;/code&gt; in Makefile. This will cause the collector to print a human-readable object description whenever an inaccessible object is found that has not been explicitly freed. Such objects will also be automatically reclaimed.&lt;/p&gt; &#xA;&lt;p&gt;If all objects are allocated with &lt;code&gt;GC_DEBUG_MALLOC&lt;/code&gt; (see the next section) then, by default, the human-readable object description will at least contain the source file and the line number at which the leaked object was allocated. This may sometimes be sufficient. (On a few machines, it will also report a cryptic stack trace. If this is not symbolic, it can sometimes be called into a symbolic stack trace by invoking program &#34;foo&#34; with &lt;code&gt;tools/callprocs.sh foo&lt;/code&gt;. It is a short shell script that invokes adb to expand program counter values to symbolic addresses. It was largely supplied by Scott Schwartz.)&lt;/p&gt; &#xA;&lt;p&gt;Note that the debugging facilities described in the next section can sometimes be slightly LESS effective in leak finding mode, since in the latter &lt;code&gt;GC_debug_free&lt;/code&gt; actually results in reuse of the object. (Otherwise the object is simply marked invalid.) Also, note that most GC tests are not designed to run meaningfully in &lt;code&gt;FIND_LEAK&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging Facilities&lt;/h2&gt; &#xA;&lt;p&gt;The routines &lt;code&gt;GC_debug_malloc&lt;/code&gt;, &lt;code&gt;GC_debug_malloc_atomic&lt;/code&gt;, &lt;code&gt;GC_debug_realloc&lt;/code&gt;, and &lt;code&gt;GC_debug_free&lt;/code&gt; provide an alternate interface to the collector, which provides some help with memory overwrite errors, and the like. Objects allocated in this way are annotated with additional information. Some of this information is checked during garbage collections, and detected inconsistencies are reported to stderr.&lt;/p&gt; &#xA;&lt;p&gt;Simple cases of writing past the end of an allocated object should be caught if the object is explicitly deallocated, or if the collector is invoked while the object is live. The first deallocation of an object will clear the debugging info associated with an object, so accidentally repeated calls to &lt;code&gt;GC_debug_free&lt;/code&gt; will report the deallocation of an object without debugging information. Out of memory errors will be reported to stderr, in addition to returning &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GC_debug_malloc&lt;/code&gt; checking during garbage collection is enabled with the first call to this function. This will result in some slowdown during collections. If frequent heap checks are desired, this can be achieved by explicitly invoking &lt;code&gt;GC_gcollect&lt;/code&gt;, e.g. from the debugger.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GC_debug_malloc&lt;/code&gt; allocated objects should not be passed to &lt;code&gt;GC_realloc&lt;/code&gt; or &lt;code&gt;GC_free&lt;/code&gt;, and conversely. It is however acceptable to allocate only some objects with &lt;code&gt;GC_debug_malloc&lt;/code&gt;, and to use &lt;code&gt;GC_malloc&lt;/code&gt; for other objects, provided the two pools are kept distinct. In this case, there is a very low probability that &lt;code&gt;GC_malloc&lt;/code&gt; allocated objects may be misidentified as having been overwritten. This should happen with probability at most one in 2**32. This probability is zero if &lt;code&gt;GC_debug_malloc&lt;/code&gt; is never called.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GC_debug_malloc&lt;/code&gt;, &lt;code&gt;GC_debug_malloc_atomic&lt;/code&gt;, and &lt;code&gt;GC_debug_realloc&lt;/code&gt; take two additional trailing arguments, a string and an integer. These are not interpreted by the allocator. They are stored in the object (the string is not copied). If an error involving the object is detected, they are printed.&lt;/p&gt; &#xA;&lt;p&gt;The macros &lt;code&gt;GC_MALLOC&lt;/code&gt;, &lt;code&gt;GC_MALLOC_ATOMIC&lt;/code&gt;, &lt;code&gt;GC_REALLOC&lt;/code&gt;, &lt;code&gt;GC_FREE&lt;/code&gt;, &lt;code&gt;GC_REGISTER_FINALIZER&lt;/code&gt; and friends are also provided. These require the same arguments as the corresponding (nondebugging) routines. If gc.h is included with &lt;code&gt;GC_DEBUG&lt;/code&gt; defined, they call the debugging versions of these functions, passing the current file name and line number as the two extra arguments, where appropriate. If gc.h is included without &lt;code&gt;GC_DEBUG&lt;/code&gt; defined then all these macros will instead be defined to their nondebugging equivalents. (&lt;code&gt;GC_REGISTER_FINALIZER&lt;/code&gt; is necessary, since pointers to objects with debugging information are really pointers to a displacement of 16 bytes from the object beginning, and some translation is necessary when finalization routines are invoked. For details, about what&#39;s stored in the header, see the definition of the type oh in dbg_mlc.c file.)&lt;/p&gt; &#xA;&lt;h2&gt;Incremental/Generational Collection&lt;/h2&gt; &#xA;&lt;p&gt;The collector normally interrupts client code for the duration of a garbage collection mark phase. This may be unacceptable if interactive response is needed for programs with large heaps. The collector can also run in a &#34;generational&#34; mode, in which it usually attempts to collect only objects allocated since the last garbage collection. Furthermore, in this mode, garbage collections run mostly incrementally, with a small amount of work performed in response to each of a large number of &lt;code&gt;GC_malloc&lt;/code&gt; requests.&lt;/p&gt; &#xA;&lt;p&gt;This mode is enabled by a call to &lt;code&gt;GC_enable_incremental&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Incremental and generational collection is effective in reducing pause times only if the collector has some way to tell which objects or pages have been recently modified. The collector uses two sources of information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Information provided by the VM system. This may be provided in one of several forms. Under Solaris 2.X (and potentially under other similar systems) information on dirty pages can be read from the /proc file system. Under other systems (e.g. SunOS4.X) it is possible to write-protect the heap, and catch the resulting faults. On these systems we require that system calls writing to the heap (other than read) be handled specially by client code. See &lt;code&gt;os_dep.c&lt;/code&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Information supplied by the programmer. The object is considered dirty after a call to &lt;code&gt;GC_end_stubborn_change&lt;/code&gt; provided the library has been compiled suitably. It is typically not worth using for short-lived objects. Note that bugs caused by a missing &lt;code&gt;GC_end_stubborn_change&lt;/code&gt; or &lt;code&gt;GC_reachable_here&lt;/code&gt; call are likely to be observed very infrequently and hard to trace.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Any memory that does not have a recognizable pointer to it will be reclaimed. Exclusive-or&#39;ing forward and backward links in a list doesn&#39;t cut it.&lt;/p&gt; &#xA;&lt;p&gt;Some C optimizers may lose the last undisguised pointer to a memory object as a consequence of clever optimizations. This has almost never been observed in practice.&lt;/p&gt; &#xA;&lt;p&gt;This is not a real-time collector. In the standard configuration, percentage of time required for collection should be constant across heap sizes. But collection pauses will increase for larger heaps. They will decrease with the number of processors if parallel marking is enabled.&lt;/p&gt; &#xA;&lt;p&gt;(On 2007 vintage machines, GC times may be on the order of 5 ms per MB of accessible memory that needs to be scanned and processed. Your mileage may vary.) The incremental/generational collection facility may help in some cases.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback, Contribution, Questions and Notifications&lt;/h2&gt; &#xA;&lt;p&gt;Please address bug reports and new feature ideas to &lt;a href=&#34;https://github.com/ivmai/bdwgc/issues&#34;&gt;GitHub issues&lt;/a&gt;. Before the submission please check that it has not been done yet by someone else.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, submit a &lt;a href=&#34;https://github.com/ivmai/bdwgc/pulls&#34;&gt;pull request&lt;/a&gt; to GitHub.&lt;/p&gt; &#xA;&lt;p&gt;If you need help, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/boehm-gc&#34;&gt;Stack Overflow&lt;/a&gt;. Older technical discussions are available in &lt;code&gt;bdwgc&lt;/code&gt; mailing list archive - it can be downloaded as a &lt;a href=&#34;https://github.com/ivmai/bdwgc/files/1038163/bdwgc-mailing-list-archive-2017_04.tar.gz&#34;&gt;compressed file&lt;/a&gt; or browsed at &lt;a href=&#34;http://bdwgc.opendylan.narkive.com&#34;&gt;Narkive&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get new release announcements, subscribe to &lt;a href=&#34;https://github.com/ivmai/bdwgc/releases.atom&#34;&gt;RSS feed&lt;/a&gt;. (To receive the notifications by email, a 3rd-party free service like &lt;a href=&#34;https://ifttt.com/feed&#34;&gt;IFTTT RSS Feed&lt;/a&gt; can be setup.) To be notified on all issues, please &lt;a href=&#34;https://github.com/ivmai/bdwgc/watchers&#34;&gt;watch&lt;/a&gt; the project on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; Warranty, Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Our intent is to make it easy to use bdwgc (libgc), in both free and proprietary software. Hence, the Boehm-Demers-Weiser conservative garbage collector code that we expect to be linked dynamically or statically into a client application is covered by own license, which is similar in spirit to an MIT-style one.&lt;/p&gt; &#xA;&lt;p&gt;The exact licensing information is provided in &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;All the contributors are listed in &lt;a href=&#34;https://raw.githubusercontent.com/ivmai/bdwgc/master/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>