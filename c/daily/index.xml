<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T01:28:09Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>blasty/unwyze</title>
    <updated>2023-11-01T01:28:09Z</updated>
    <id>tag:github.com,2023-11-01:/blasty/unwyze</id>
    <link href="https://github.com/blasty/unwyze" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;unwyze - a Wyze Cam v3 RCE Exploit&lt;/h1&gt; &#xA;&lt;h2&gt;background story&lt;/h2&gt; &#xA;&lt;p&gt;I worked on auditing the &lt;a href=&#34;https://www.wyze.com/products/wyze-cam&#34;&gt;Wyze Cam V3&lt;/a&gt; firmware as part of entering this year Pwn2Own 2023 Toronto competition. My entry came along nicely and I was able to identify and exploit some critical vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;The night before my flight to Toronto I became aware Wyze had just released a firmware update (&lt;code&gt;4.36.11.7071&lt;/code&gt;) which has the following changelog:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security improvements&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Yeah, that&#39;s it; the full changelog/revision history. This update killed an important vulnerability I was relying on: a authentication bypass for the encapsulated DTLS connection to a wyze camera. My entry (and the entry of many others) was killed right there.&lt;/p&gt; &#xA;&lt;p&gt;I guess Wyze&#39;s rationale was they wanted to prevent some kind of mini PR nightmare in the hopes of their camera not getting pwned during pwn2own. That didn&#39;t work, some other teams (synacktiv et al.) had additional bugs up their sleeves that did not require the authentication bypass.&lt;/p&gt; &#xA;&lt;p&gt;But you can&#39;t help but wonder why they sat on this patch for so long.. leaving their valued customers vulnerable in the meanwhile!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: A WyzeCam representative has informed me that:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I want to clarify a few things; we didn&#39;t know about this issue for years, this is an issue in the third-party library we use and we got a report about it just a few days before pwn2own and once we got the report in our bugbounty program we patched the issue in 3 days and released to public.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To celebrate their very wyze (huhu) decision I have decided to release my exploit to the public. Maybe next time they will prefer doing a coordinated disclosure through the ZDI program rather than frustrating a few contestants post-deadline.&lt;/p&gt; &#xA;&lt;h2&gt;the bugs&lt;/h2&gt; &#xA;&lt;h3&gt;DTLS authentication bypass&lt;/h3&gt; &#xA;&lt;p&gt;Wyze has a daemon (iCamera) that listens on UDP port 32761 speaking some derivative of the &lt;a href=&#34;https://www.throughtek.com/p2p-iot-connection/&#34;&gt;TUTK protocol&lt;/a&gt;. The outer layer of the protocol consists out of scrambled/XOR&#39;d frames using a funny constant (shout out to Charlie; the engineer!). Inside of this custom framing format you can establish a DTLS session with the camera. The only supported ciphersuite is &lt;code&gt;ECDHE-PSK-CHACHA20-POLY1305&lt;/code&gt; and a typical attacker does not have access to the (device unique) PSK. However there was a fallback method where you could specify a PSK identity that starts with &#39;AUTHTKN_&#39; during the TLS handshake in order to be able to pick an arbitrarily chosen PSK.&lt;/p&gt; &#xA;&lt;h3&gt;Stack buffer overflow in JSON unpacking&lt;/h3&gt; &#xA;&lt;p&gt;Shortly after establishing an authenticated DTLS session with the camera the client sends a packet containing a JSON object blob with a property called &lt;code&gt;cameraInfo&lt;/code&gt;. Inside this object there is an array with numbers called &lt;code&gt;audioEncoderList&lt;/code&gt;. The iCamera code responsible for parsing this JSON object will loop over all &lt;code&gt;audioEncoderList&lt;/code&gt; entries and copy them to a fixed-sized array of integers on the stack.&lt;/p&gt; &#xA;&lt;p&gt;Of course, since it is 2023 and this is IoT nonsense we shouldn&#39;t expect them to have compiled the binary with stack canaries or even as a position independent executable.&lt;/p&gt; &#xA;&lt;p&gt;Thus we don&#39;t need any additional information leaks to bypass ASLR or leak a canary value and we can ROP our way to victory!&lt;/p&gt; &#xA;&lt;h2&gt;Exploit&lt;/h2&gt; &#xA;&lt;p&gt;The exploit will use the vulnerabilities described above to spawn an interactive (connectback)shell. I have taken the liberty to backport the exploit to some older Wyze cam V3 versions as well, just because.&lt;/p&gt; &#xA;&lt;p&gt;The exploit has been tested on the following firmwares:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v4.36.10.4054&lt;/li&gt; &#xA; &lt;li&gt;v4.36.11.4679&lt;/li&gt; &#xA; &lt;li&gt;v4.36.11.5859&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Closing words&lt;/h2&gt; &#xA;&lt;p&gt;As usual, enjoy the codes and don&#39;t ask for support unless there is any good incentive for me to help you out.&lt;/p&gt; &#xA;&lt;p&gt;To the vendor (Wyze): I hope you will reconsider your ways!&lt;/p&gt; &#xA;&lt;p&gt;Greets fly out to all old &amp;amp; new friends I met during my stay in Toronto. Many interesting chats were had and many beverages got consumed; good times!&lt;/p&gt; &#xA;&lt;p&gt;-- blasty &lt;code&gt;&amp;lt;peter@haxx.in&amp;gt;&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>