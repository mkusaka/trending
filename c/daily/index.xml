<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-31T01:32:55Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/sanitizers</title>
    <updated>2022-08-31T01:32:55Z</updated>
    <id>tag:github.com,2022-08-31:/google/sanitizers</id>
    <link href="https://github.com/google/sanitizers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AddressSanitizer, ThreadSanitizer, MemorySanitizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sanitizers&lt;/h1&gt; &#xA;&lt;p&gt;This project is the home for Sanitizers: AddressSanitizer, MemorySanitizer, ThreadSanitizer, LeakSanitizer, and more The actual code resides in the &lt;a href=&#34;http://llvm.org&#34;&gt;LLVM&lt;/a&gt; repository. Here we keep extended &lt;a href=&#34;https://raw.githubusercontent.com/google/wiki&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/issues&#34;&gt;bugfixes&lt;/a&gt; and some helper code.&lt;/p&gt; &#xA;&lt;p&gt;The documentation for our tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wiki/AddressSanitizer&#34;&gt;AddressSanitizer&lt;/a&gt; (detects addressability issues) and &lt;a href=&#34;https://raw.githubusercontent.com/google/wiki/AddressSanitizerLeakSanitizer&#34;&gt;LeakSanitizer&lt;/a&gt; (detects memory leaks)&lt;/li&gt; &#xA; &lt;li&gt;ThreadSanitizer (detects data races and deadlocks) for &lt;a href=&#34;https://raw.githubusercontent.com/google/wiki/ThreadSanitizerCppManual&#34;&gt;C++&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/google/wiki/ThreadSanitizerGoManual&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wiki/MemorySanitizer&#34;&gt;MemorySanitizer&lt;/a&gt; (detects use of uninitialized memory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html&#34;&gt;HWASAN&lt;/a&gt;, or Hardware-assisted AddressSanitizer, a newer variant of AddressSanitizer that consumes much less memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UBSan&lt;/a&gt;, or UndefinedBehaviorSanitizer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some of the sanitizers are also available for different OS Kernels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/v4.12/dev-tools/kasan.html&#34;&gt;KASAN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/kmsan&#34;&gt;KMSAN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/ktsan/wiki/KCSAN&#34;&gt;KCSAN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>github/trilogy</title>
    <updated>2022-08-31T01:32:55Z</updated>
    <id>tag:github.com,2022-08-31:/github/trilogy</id>
    <link href="https://github.com/github/trilogy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trilogy is a client library for MySQL-compatible database servers, designed for performance, flexibility, and ease of embedding.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trilogy&lt;/h1&gt; &#xA;&lt;p&gt;Trilogy is a client library for MySQL-compatible database servers, designed for performance, flexibility, and ease of embedding.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s currently in production use on github.com.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports the most frequently used parts of the text protocol&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handshake&lt;/li&gt; &#xA;   &lt;li&gt;Password authentication&lt;/li&gt; &#xA;   &lt;li&gt;Query, ping, and quit commands&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Low-level protocol API completely decoupled from IO&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-blocking client API wrapping the protocol API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Blocking client API wrapping the non-blocking API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No dependencies outside of POSIX, the C standard library &amp;amp; OpenSSL&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Minimal dynamic allocation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MIT licensed&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only supports the parts of the text protocol that are in common use. There&#39;s no support for the binary protocol or prepared statements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No support for &lt;code&gt;LOAD DATA INFILE&lt;/code&gt; on local files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trilogy_escape&lt;/code&gt; assumes an ASCII-compatible connection encoding&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; - that&#39;s it. This will build a static &lt;code&gt;libtrilogy.a&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trilogy should build out of the box on most UNIX systems which have OpenSSL installed.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Trilogy&#39;s various APIs can be found in these header files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;blocking.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The blocking client API. These are simply a set of convenient wrapper functions around the non-blocking client API in &lt;code&gt;client.h&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;client.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The non-blocking client API. Every command is split into a &lt;code&gt;_send&lt;/code&gt; and &lt;code&gt;_recv&lt;/code&gt; function allowing callers to wait for IO readiness externally to Trilogy&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;builder.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;MySQL-compatible packet builder API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;charset.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Character set and encoding tables&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;error.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Error table. Every Trilogy function returning an &lt;code&gt;int&lt;/code&gt; uses the error codes defined here&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;packet_parser.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Streaming packet frame parser&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;protocol.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Low-level protocol API. Provides IO-decoupled functions to parse and build packets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reader.h&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Bounds-checked packet reader API&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;We maintain a &lt;a href=&#34;https://raw.githubusercontent.com/github/trilogy/main/contrib/ruby&#34;&gt;Ruby binding&lt;/a&gt; in this repository. This is currently stable and production-ready.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Trilogy is released under the &lt;a href=&#34;https://raw.githubusercontent.com/github/trilogy/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wren-lang/wren</title>
    <updated>2022-08-31T01:32:55Z</updated>
    <id>tag:github.com,2022-08-31:/wren-lang/wren</id>
    <link href="https://github.com/wren-lang/wren" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Wren Programming Language. Wren is a small, fast, class-based concurrent scripting language.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Wren is a small, fast, class-based concurrent scripting language&lt;/h2&gt; &#xA;&lt;p&gt;Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern &lt;a href=&#34;http://wren.io/syntax.html&#34;&gt;syntax&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;System.print(&#34;Hello, world!&#34;)&#xA;&#xA;class Wren {&#xA;  flyTo(city) {&#xA;    System.print(&#34;Flying to %(city)&#34;)&#xA;  }&#xA;}&#xA;&#xA;var adjectives = Fiber.new {&#xA;  [&#34;small&#34;, &#34;clean&#34;, &#34;fast&#34;].each {|word| Fiber.yield(word) }&#xA;}&#xA;&#xA;while (!adjectives.isDone) System.print(adjectives.call())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wren is small.&lt;/strong&gt; The VM implementation is under &lt;a href=&#34;https://github.com/wren-lang/wren/tree/main/src&#34;&gt;4,000 semicolons&lt;/a&gt;. You can skim the whole thing in an afternoon. It&#39;s &lt;em&gt;small&lt;/em&gt;, but not &lt;em&gt;dense&lt;/em&gt;. It is readable and &lt;a href=&#34;https://github.com/wren-lang/wren/raw/93dac9132773c5bc0bbe92df5ccbff14da9d25a6/src/vm/wren_value.h#L486-L541&#34;&gt;lovingly-commented&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wren is fast.&lt;/strong&gt; A fast single-pass compiler to tight bytecode, and a compact object representation help Wren &lt;a href=&#34;http://wren.io/performance.html&#34;&gt;compete with other dynamic languages&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wren is class-based.&lt;/strong&gt; There are lots of scripting languages out there, but many have unusual or non-existent object models. Wren places &lt;a href=&#34;http://wren.io/classes.html&#34;&gt;classes&lt;/a&gt; front and center.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wren is concurrent.&lt;/strong&gt; Lightweight &lt;a href=&#34;http://wren.io/concurrency.html&#34;&gt;fibers&lt;/a&gt; are core to the execution model and let you organize your program into an army of communicating coroutines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wren is a scripting language.&lt;/strong&gt; Wren is intended for embedding in applications. It has no dependencies, a small standard library, and &lt;a href=&#34;http://wren.io/embedding/&#34;&gt;an easy-to-use C API&lt;/a&gt;. It compiles cleanly as C99, C++98 or anything later.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you like the sound of this, &lt;a href=&#34;http://wren.io/getting-started.html&#34;&gt;let&#39;s get started&lt;/a&gt;. You can even try it &lt;a href=&#34;http://ppvk.github.io/wren-nest/&#34;&gt;in your browser&lt;/a&gt;! Excited? Well, come on and &lt;a href=&#34;http://wren.io/contributing.html&#34;&gt;get involved&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/wren-lang/wren&#34;&gt;&lt;img src=&#34;https://travis-ci.org/wren-lang/wren.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>