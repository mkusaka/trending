<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:35:35Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grbl/grbl</title>
    <updated>2022-08-09T01:35:35Z</updated>
    <id>tag:github.com,2022-08-09:/grbl/grbl</id>
    <link href="https://github.com/grbl/grbl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source, embedded, high performance g-code-parser and CNC milling controller written in optimized C that will run on a straight Arduino&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/gnea/gnea-Media/raw/master/Grbl%20Logo/Grbl%20Logo%20250px.png?raw=true&#34; alt=&#34;GitHub Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Grbl v1.1 has been released &lt;a href=&#34;https://github.com/gnea/grbl/releases&#34;&gt;here&lt;/a&gt;!&lt;/h3&gt; &#xA;&lt;h3&gt;Notice: This site will be phased out and moved to the new one!&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Grbl is a no-compromise, high performance, low cost alternative to parallel-port-based motion control for CNC milling. It will run on a vanilla Arduino (Duemillanove/Uno) as long as it sports an Atmega 328.&lt;/p&gt; &#xA;&lt;p&gt;The controller is written in highly optimized C utilizing every clever feature of the AVR-chips to achieve precise timing and asynchronous operation. It is able to maintain up to 30kHz of stable, jitter free control pulses.&lt;/p&gt; &#xA;&lt;p&gt;It accepts standards-compliant g-code and has been tested with the output of several CAM tools with no problems. Arcs, circles and helical motion are fully supported, as well as, all other primary g-code commands. Macro functions, variables, and most canned cycles are not supported, but we think GUIs can do a much better job at translating them into straight g-code anyhow.&lt;/p&gt; &#xA;&lt;p&gt;Grbl includes full acceleration management with look ahead. That means the controller will look up to 18 motions into the future and plan its velocities ahead to deliver smooth acceleration and jerk-free cornering.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/grbl/grbl/wiki/Licensing&#34;&gt;Licensing&lt;/a&gt;: Grbl is free software, released under the GPLv3 license.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more information and help, check out our &lt;strong&gt;&lt;a href=&#34;https://github.com/grbl/grbl/wiki&#34;&gt;Wiki pages!&lt;/a&gt;&lt;/strong&gt; If you find that the information is out-dated, please to help us keep it updated by editing it or notifying our community! Thanks!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lead Developer [&lt;em&gt;2011 - Current&lt;/em&gt;]: Sungeun(Sonny) K. Jeon, Ph.D. (USA) aka @chamnit&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lead Developer [&lt;em&gt;2009 - 2011&lt;/em&gt;]: Simen Svale Skogsrud (Norway). aka The Originator/Creator/Pioneer/Father of Grbl.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Official Supporters of the Grbl CNC Project&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gnea/gnea-Media/raw/master/Contributors.png?raw=true&#34; alt=&#34;Official Supporters&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Master Branch:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/1I8Ey4S&#34;&gt;Grbl v0.9j Atmega328p 16mhz 115200baud with generic defaults&lt;/a&gt; &lt;em&gt;(2016-03-17)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;IMPORTANT INFO WHEN UPGRADING TO GRBL v0.9 :&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Baudrate is now &lt;strong&gt;115200&lt;/strong&gt; (Up from 9600).&lt;/li&gt; &#xA;   &lt;li&gt;Homing cycle updated. Located based on switch trigger, rather than release point.&lt;/li&gt; &#xA;   &lt;li&gt;Variable spindle is now enabled by default. Z-limit(D12) and spindle enable(D11) have switched to access the hardware PWM on D11. Homing will not work if you do not re-wire your Z-limit switch to D12.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Archives:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/1EiviDk&#34;&gt;Grbl v0.9i Atmega328p 16mhz 115200baud with generic defaults&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/1m8E1Qa&#34;&gt;Grbl v0.9g Atmega328p 16mhz 115200baud with generic defaults&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/SSdCJE&#34;&gt;Grbl v0.8c Atmega328p 16mhz 9600baud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/ZhL15G&#34;&gt;Grbl v0.7d Atmega328p 16mhz 9600baud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/VD04A5&#34;&gt;Grbl v0.6b Atmega328p 16mhz 9600baud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/W75BS1&#34;&gt;Grbl v0.51 Atmega328p 16mhz 9600baud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/SScWnE&#34;&gt;Grbl v0.6b Atmega168 16mhz 9600baud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/VXyrYu&#34;&gt;Grbl v0.51 Atmega168 16mhz 9600baud&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Update Summary for v0.9j&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Restore EEPROM feature:&lt;/strong&gt; A new set of restore EEPROM features to help OEMs and users reset their Grbl installation to the build defaults. See Configuring Grbl Wiki for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More configuration options for input pins&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bug fixes including:&lt;/strong&gt; Soft limit error handling, disable spindle when S0, g-code reporting of G38.x.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Update Summary for v0.9i&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Homing cycle updated. Locates based on trigger point, rather than release point.&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;System tweaks: $14 cycle auto-start has been removed. No more QUEUE state.&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;New G-Codes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CoreXY Support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safety Door Support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Limit and Control Pin Configurability&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Compile-Time Feature Options&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Update Summary for v0.9h from v0.8&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Default serial baudrate is now 115200! (Up from 9600)&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Z-limit(D12) and spindle enable(D11) pins have switched to support variable spindle!&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Super Smooth Stepper Algorithm&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability and Robustness Updates&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(x4)+ Faster Planner&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile-able via Arduino IDE!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;G-Code Parser Overhaul&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Independent Acceleration and Velocity Settings&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Soft Limits&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Probing&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic Tool Length Offsets&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improved Arc Performance&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CPU Pin Mapping&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;New Grbl SIMULATOR! (by @jgeisler and @ashelly)&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configurable Real-time Status Reporting&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updated Homing Routine&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Optional Limit Pin Sharing&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Optional Variable Spindle Speed Output&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Additional Compile-Time Feature Options&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;List of Supported G-Codes in Grbl v0.9 Master:&#xA;  - Non-Modal Commands: G4, G10L2, G10L20, G28, G30, G28.1, G30.1, G53, G92, G92.1&#xA;  - Motion Modes: G0, G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80&#xA;  - Feed Rate Modes: G93, G94&#xA;  - Unit Modes: G20, G21&#xA;  - Distance Modes: G90, G91&#xA;  - Arc IJK Distance Modes: G91.1&#xA;  - Plane Select Modes: G17, G18, G19&#xA;  - Tool Length Offset Modes: G43.1, G49&#xA;  - Cutter Compensation Modes: G40&#xA;  - Coordinate System Modes: G54, G55, G56, G57, G58, G59&#xA;  - Control Modes: G61&#xA;  - Program Flow: M0, M1, M2, M30*&#xA;  - Coolant Control: M7*, M8, M9&#xA;  - Spindle Control: M3, M4, M5&#xA;  - Valid Non-Command Words: F, I, J, K, L, N, P, R, S, T, X, Y, Z&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>fholger/vrperfkit</title>
    <updated>2022-08-09T01:35:35Z</updated>
    <id>tag:github.com,2022-08-09:/fholger/vrperfkit</id>
    <link href="https://github.com/fholger/vrperfkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VR Performance Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VR Performance Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;Performance-oriented collection of mods for VR games.&lt;/p&gt; &#xA;&lt;p&gt;Included mods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upscaling techniques (render at lower resolution and upscale to target resolution) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AMD FidelityFX Super Resolution&lt;/li&gt; &#xA;   &lt;li&gt;NVIDIA Image Scaling&lt;/li&gt; &#xA;   &lt;li&gt;AMD Contrast Adaptive Sharpening&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fixed foveated rendering (render center of image at full resolution, but drop resolution towards edges) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Variable Rate Shading (only for NVIDIA RTX / GTX 16xx cards)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Planned mods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Fixed foveated&#34; rendering (render fewer pixels at the edges of the screen) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Radial Density Masking (all GPUs, but works only with a handful of games)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Force hidden area mask: don&#39;t render pixels at the edges that are not visible in the headset. Many games already use this mask, but not all. This mod will allow you to force its usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported VR runtimes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Oculus&lt;/li&gt; &#xA; &lt;li&gt;OpenVR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported graphics APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct3D 11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Extract &lt;code&gt;dxgi.dll&lt;/code&gt; and &lt;code&gt;vrperfkit.yml&lt;/code&gt; next to the game&#39;s main executable. For Unreal Engine games, this is typically &lt;code&gt;&amp;lt;Game&amp;gt;Game\Binaries\Win64\&amp;lt;Game&amp;gt;Game-Win64-Shipping.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;vrperfkit.yml&lt;/code&gt; config file to your heart&#39;s content. The available options are documented inside the config file; you&#39;ll have to experiment with them and try which options work for your particular game.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository and init all submodules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/fholger/vrperfkit.git&#xA;cd vrperfkit&#xA;git submodule init&#xA;git submodule update --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://developer.oculus.com/downloads/package/oculus-sdk-for-windows&#34;&gt;Oculus SDK&lt;/a&gt; and extract &lt;code&gt;LibOVR&lt;/code&gt; from the downloaded archive to the &lt;code&gt;ThirdParty&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://developer.nvidia.com/nvapi&#34;&gt;NVAPI&lt;/a&gt; (requires NVIDIA developer account) and extract the contents of the &lt;code&gt;Rxxx-developer&lt;/code&gt; folder to &lt;code&gt;ThirdParty\nvapi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run cmake to generate Visual Studio solution files. Build with Visual Studio. Note: Ninja does not work, due to the included shaders that need to be compiled. This is only supported with VS solutions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cashapp/zipline</title>
    <updated>2022-08-09T01:35:35Z</updated>
    <id>tag:github.com,2022-08-09:/cashapp/zipline</id>
    <link href="https://github.com/cashapp/zipline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Kotlin/JS libraries in Kotlin/JVM and Kotlin/Native programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zipline&lt;/h1&gt; &#xA;&lt;p&gt;This library streamlines using Kotlin/JS libraries from Kotlin/JVM and Kotlin/Native programs. It makes it fetching code as easy as fetching data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For continuous deployment within mobile apps, just like we do for servers and web apps. It&#39;d be simpler to do continuous deploys via the app stores! But that process is too slow and we can&#39;t guarantee that user’s devices will update immediately.&lt;/li&gt; &#xA; &lt;li&gt;For user-customizable behavior and plugin systems&lt;/li&gt; &#xA; &lt;li&gt;For updating business rules, like pricing or payments&lt;/li&gt; &#xA; &lt;li&gt;For fresh content like games&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Zipline works by embedding the &lt;a href=&#34;https://bellard.org/quickjs/&#34;&gt;QuickJS JavaScript engine&lt;/a&gt; in your Kotlin/JVM or Kotlin/Native program. It&#39;s a small and fast JavaScript engine that&#39;s well-suited to embedding in applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(Looking for &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/zipline/trunk/#duktape-android&#34;&gt;Duktape Android&lt;/a&gt;?)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Code Example&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s make a trivia game that has fresh questions every day, even if our users don&#39;t update their apps. We define &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/zipline/trunk/samples/trivia/trivia-shared/src/commonMain/kotlin/app/cash/zipline/samples/trivia/trivia.kt&#34;&gt;our interface&lt;/a&gt; in &lt;code&gt;commonMain&lt;/code&gt; so that we can call it from Kotlin/JVM and implement it in Kotlin/JS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface TriviaService : ZiplineService {&#xA;  fun games(): List&amp;lt;TriviaGame&amp;gt;&#xA;  fun answer(questionId: String, answer: String): AnswerResult&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/zipline/trunk/samples/trivia/trivia-js/src/jsMain/kotlin/app/cash/zipline/samples/trivia/triviaJs.kt&#34;&gt;implement it&lt;/a&gt; in &lt;code&gt;jsMain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class RealTriviaService : TriviaService {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s connect the implementation running in Kotlin/JS to the interface running in Kotlin/JVM. In &lt;code&gt;jsMain&lt;/code&gt; we define an &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/zipline/trunk/samples/trivia/trivia-js/src/jsMain/kotlin/app/cash/zipline/samples/trivia/launchZiplineJs.kt&#34;&gt;exported function&lt;/a&gt; to bind the implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@JsExport&#xA;fun launchZipline() {&#xA;  val zipline = Zipline.get()&#xA;  zipline.bind&amp;lt;TriviaService&amp;gt;(&#34;triviaService&#34;, RealTriviaService())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can start a development server to serve our JavaScript to any running applications that request it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./gradlew samples:trivia:trivia-js:jsBrowserProductionRun --info --continuous&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this Gradle won&#39;t ever reach 100%. That&#39;s expected; we want the development server to stay on. Also note that the &lt;code&gt;--continuous&lt;/code&gt; flag will trigger a re-compile whenever the code changes.&lt;/p&gt; &#xA;&lt;p&gt;You can see the served application manifest at &lt;a href=&#34;http://localhost:8080/manifest.zipline.json&#34;&gt;localhost:8080/manifest.zipline.json&lt;/a&gt;. It references all the code modules for the application.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;jvmMain&lt;/code&gt; we need write &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/zipline/trunk/samples/trivia/trivia-host/src/main/kotlin/app/cash/zipline/samples/trivia/launchZiplineJvm.kt&#34;&gt;a program&lt;/a&gt; that downloads our Kotlin/JS code and calls it. We use &lt;code&gt;ZiplineLoader&lt;/code&gt; which handles code downloading, caching, and loading. We create a &lt;code&gt;Dispatcher&lt;/code&gt; to run Kotlin/JS on. This must be a single-threaded dispatcher as each Zipline instance must be confined to a single thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun launchZipline(dispatcher: CoroutineDispatcher): Zipline {&#xA;  val manifestUrl = &#34;http://localhost:8080/manifest.zipline.json&#34;&#xA;  val loader = ZiplineLoader(dispatcher, OkHttpClient())&#xA;  return loader.loadOnce(&#34;trivia&#34;, manifestUrl)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we build and run the JVM program to put it all together. Do this in a separate terminal from the development server!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./gradlew samples:trivia:trivia-host:shadowJar&#xA;java -jar samples/trivia/trivia-host/build/libs/trivia-host-1.0.0-SNAPSHOT-all.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interface bridging&lt;/h3&gt; &#xA;&lt;p&gt;Zipline makes it easy to share interfaces with Kotlin/JS. Define an interface in &lt;code&gt;commonMain&lt;/code&gt;, implement it in Kotlin/JS, and call it from the host platform. Or do the opposite: implement it on the host platform and call it from Kotlin/JS.&lt;/p&gt; &#xA;&lt;p&gt;Bridged interfaces must extend &lt;code&gt;ZiplineService&lt;/code&gt;, which defines a single &lt;code&gt;close()&lt;/code&gt; method to release held resources.&lt;/p&gt; &#xA;&lt;p&gt;By default, arguments and return values are pass-by-value. Zipline uses &lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;kotlinx.serialization&lt;/a&gt; to encode and decode values passed across the boundary.&lt;/p&gt; &#xA;&lt;p&gt;Interface types that extend from &lt;code&gt;ZiplineService&lt;/code&gt; are pass-by-reference: the receiver may call methods on a live instance.&lt;/p&gt; &#xA;&lt;p&gt;Interface functions may be suspending. Internally Zipline implements &lt;code&gt;setTimeout()&lt;/code&gt; to make asynchronous code work as it&#39;s supposed to in Kotlin/JS.&lt;/p&gt; &#xA;&lt;p&gt;Zipline also supports &lt;code&gt;Flow&amp;lt;T&amp;gt;&lt;/code&gt; as a parameter or return type. This makes it easy to build reactive systems.&lt;/p&gt; &#xA;&lt;h3&gt;Fast&lt;/h3&gt; &#xA;&lt;p&gt;One potential bottleneck of embedding JavaScript is waiting for the engine to compile the input source code. Zipline precompiles JavaScript into efficient QuickJS bytecode to eliminate this performance penalty.&lt;/p&gt; &#xA;&lt;p&gt;Another bottleneck is waiting for code to download. Zipline addresses this with support for modular applications. Each input module (Like Kotlin&#39;s standard, serialization, and coroutines libraries) is downloaded concurrently. Each downloaded module is cached. Modules can also be embedded with the host application to avoid any downloads if the network is unreachable. If your application module changes more frequently than your libraries, users only download what&#39;s changed.&lt;/p&gt; &#xA;&lt;p&gt;If you run into performance problems in the QuickJS runtime, Zipline includes a sampling profiler. You can use this to get a breakdown of how your application spends its CPU time.&lt;/p&gt; &#xA;&lt;h3&gt;Developer-Friendly&lt;/h3&gt; &#xA;&lt;p&gt;Zipline implements &lt;code&gt;console.log&lt;/code&gt; by forwarding messages to the host platform. It uses &lt;code&gt;android.util.Log&lt;/code&gt; on Android, &lt;code&gt;java.util.logging&lt;/code&gt; on JVM, and &lt;code&gt;stdout&lt;/code&gt; on Kotlin/Native.&lt;/p&gt; &#xA;&lt;p&gt;Zipline integrates Kotlin source maps into QuickJS bytecode. If your process crashes, the stacktrace will print &lt;code&gt;.kt&lt;/code&gt; files and line numbers. Even though there&#39;s JavaScript underneath, developers don&#39;t need to interface with &lt;code&gt;.js&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;After using a bridged interface it must be closed so the peer object can be garbage collected. This is difficult to get right, so Zipline borrows ideas from &lt;a href=&#34;https://square.github.io/leakcanary/&#34;&gt;LeakCanary&lt;/a&gt; and aggressively detects when a &lt;code&gt;close()&lt;/code&gt; call is missed.&lt;/p&gt; &#xA;&lt;h3&gt;Secure&lt;/h3&gt; &#xA;&lt;p&gt;Zipline uses &lt;a href=&#34;https://en.wikipedia.org/wiki/EdDSA&#34;&gt;EdDSA&lt;/a&gt; signatures to authenticate downloaded libraries.&lt;/p&gt; &#xA;&lt;p&gt;Set up is straightforward. Generate an EdDSA key pair and put the private key on your build server and the public key in each host application.&lt;/p&gt; &#xA;&lt;p&gt;Configure the build server to sign:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.withType(ZiplineCompileTask::class) {&#xA;  signingKeys.create(&#34;key1&#34;) {&#xA;    privateKeyHex = ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the host application to verify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val manifestVerifier = ManifestVerifier.Builder()&#xA;  .addEd25519(&#34;key1&#34;, ...)&#xA;  .build()&#xA;val loader = ZiplineLoader(&#xA;  manifestVerifier = manifestVerifier,&#xA;  ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both signing and verifying accept multiple keys to support key rotation.&lt;/p&gt; &#xA;&lt;p&gt;Zipline is designed to run your organization&#39;s code when and where you want it. It does not offer a sandbox or process-isolation and should not be used to execute untrusted code.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Zipline works on Android 4.3+ (API level 18+), Java 8+, and &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets&#34;&gt;Kotlin/Native&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Zipline uses unstable APIs in its implementation and is sensitive to version updates for these components.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Component&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Supported Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kotlin Compiler&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.7.10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kotlin compiler plugins do not yet have a stable API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kotlin Coroutines&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.6.3-native-mt&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For &lt;code&gt;invokeOnClose()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kotlin Serialization&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.3.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For &lt;code&gt;decodeFromDynamic()&lt;/code&gt;, &lt;code&gt;encodeToDynamic()&lt;/code&gt;, &lt;code&gt;EmptySerializersModule&lt;/code&gt;, and &lt;code&gt;ContextualSerializer&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We intend to use stable APIs as soon as they are available.&lt;/p&gt; &#xA;&lt;p&gt;We intend to keep Zipline host and runtime releases interoperable so you can upgrade each independently.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Host Zipline Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Supported Runtime Zipline Versions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Exact same 0.x version as the host.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Any 1.x version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2015 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Duktape-Android&lt;/h1&gt; &#xA;&lt;p&gt;This project was previously known as Duktape-Android and packaged the &lt;a href=&#34;https://duktape.org/&#34;&gt;Duktape&lt;/a&gt; JavaScript engine for Android. The Duktape history is still present in this repo as are the release tags. Available versions are listed on &lt;a href=&#34;https://search.maven.org/artifact/com.squareup.duktape/duktape-android&#34;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>