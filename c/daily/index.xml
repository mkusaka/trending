<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:31:07Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bartobri/no-more-secrets</title>
    <updated>2023-07-23T01:31:07Z</updated>
    <id>tag:github.com,2023-07-23:/bartobri/no-more-secrets</id>
    <link href="https://github.com/bartobri/no-more-secrets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A command line tool that recreates the famous data decryption effect seen in the 1992 movie Sneakers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Version-1.0.1-green.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like this project? Consider tipping me: &lt;a href=&#34;https://github.com/sponsors/bartobri&#34;&gt;https://github.com/sponsors/bartobri&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;No More Secrets&lt;/h1&gt; &#xA;&lt;p&gt;This project provides a command line tool called &lt;code&gt;nms&lt;/code&gt; that recreates the famous data decryption effect seen on screen in the 1992 hacker movie Sneakers. For reference, you can see this effect at 0:35 in &lt;a href=&#34;https://www.youtube.com/watch?v=F5bAa6gFvLs&amp;amp;t=35&#34;&gt;this movie clip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This command works on piped data. Pipe any ASCII or UTF-8 text to &lt;code&gt;nms&lt;/code&gt;, and it will apply the Hollywood effect, initially showing encrypted data, then starting a decryption sequence to reveal the original plain-text characters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.brianbarto.info/static/nms/nms.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also included in this project is a program called &lt;code&gt;sneakers&lt;/code&gt; that recreates what we see in the above movie clip. Note that this program requires the user to select one of the menu options before it terminates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.brianbarto.info/static/nms/sneakers.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, this project has no dependencies, but it does rely on ANSI/VT100 terminal escape sequences to recreate the effect. Most modern terminal programs support these sequences so this should not be an issue for most users. If yours does not, this project also provides a ncurses implementation which supports non-ANSI terminals, but at the expense of losing the inline functionality (ncurses will always clear the screen prior to displaying output).&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bartobri/no-more-secrets/master/#download-and-install&#34;&gt;Download and Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bartobri/no-more-secrets/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bartobri/no-more-secrets/master/#the-nms-library&#34;&gt;The NMS Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bartobri/no-more-secrets/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Download and Install&lt;/h2&gt; &#xA;&lt;p&gt;More and more Unix/Linux platforms are including this project in their package manager. You may wish to search your package manager to see if it is an installation option. If you install from a package manager, please check that you have the latest version (&lt;code&gt;nms -v&lt;/code&gt;). If not, I suggest installing from source by following the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;To install this project from source, you will need to have the tools &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt; to download and build it. Install them from your package manager if they are not already installed.&lt;/p&gt; &#xA;&lt;p&gt;Once you have the necessary tools installed, follow these instructions:&lt;/p&gt; &#xA;&lt;h4&gt;Install:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/bartobri/no-more-secrets.git&#xA;$ cd ./no-more-secrets&#xA;$ make nms&#xA;$ make sneakers             ## Optional&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Uninstall:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install with Ncurses Support&lt;/h4&gt; &#xA;&lt;p&gt;If your terminal does not support ANSI/VT100 escape sequences, the effect may not render properly. This project provides a ncurses implementation for such cases. You will need the ncurses library installed. &lt;a href=&#34;https://raw.githubusercontent.com/bartobri/no-more-secrets/master/NCURSES.md&#34;&gt;Install this library from your package manager&lt;/a&gt;. Next, follow these instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/bartobri/no-more-secrets.git&#xA;$ cd ./no-more-secrets&#xA;$ make nms-ncurses&#xA;$ make sneakers-ncurses     ## Optional&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nms&lt;/code&gt; works on piped data. Pipe any ASCII or UTF-8 characters to it and enjoy the magic. In the below examples, I use a simple directory listing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls -l | nms&#xA;$ ls -l | nms -a           // Set auto-decrypt flag&#xA;$ ls -l | nms -s           // Set flag to mask space characters&#xA;$ ls -l | nms -f green     // Set foreground color to green&#xA;$ ls -l | nms -c           // Clear screen&#xA;$ nms -v                   // Display version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that by default, after the initial encrypted characters are displayed, &lt;code&gt;nms&lt;/code&gt; will wait for the user to press a key before initiating the decryption sequence. This is how the it is depicted in the movie.&lt;/p&gt; &#xA;&lt;h4&gt;Command Line Options&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the auto-decrypt flag. This will automatically start the decryption sequence without requiring a key press.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a flag to mask space characters. This will only mask single blank space characters. Other space characters such as tabs and newlines will not be masked.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-f &amp;lt;color&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the foreground color of the decrypted text to the color specified. Valid options are white, yellow, black, magenta, blue, green, or red. This is blue by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clear the screen prior to printing any output. Specifically, it saves the state of the terminal (all current output), and restores it once the effect is completed. Note that when using this option, &lt;code&gt;nms&lt;/code&gt; requires the user to press a key before restoring the terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Display version info.&lt;/p&gt; &#xA;&lt;h2&gt;The NMS Library&lt;/h2&gt; &#xA;&lt;p&gt;For those who would like to use this effect in their own projects, I have created a C library that provides simple interface and can easily be used for any program that runs from the command line.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/bartobri/libnms&#34;&gt;LibNMS&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License. See &lt;a href=&#34;https://raw.githubusercontent.com/bartobri/no-more-secrets/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ossec/ossec-hids</title>
    <updated>2023-07-23T01:31:07Z</updated>
    <id>tag:github.com,2023-07-23:/ossec/ossec-hids</id>
    <link href="https://github.com/ossec/ossec-hids" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OSSEC is an Open Source Host-based Intrusion Detection System that performs log analysis, file integrity checking, policy monitoring, rootkit detection, real-time alerting and active response.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;OSSEC v3.7.0 Copyright (C) 2019 Trend Micro Inc.&lt;/p&gt; &#xA;&lt;h1&gt;Information about OSSEC&lt;/h1&gt; &#xA;&lt;p&gt;OSSEC is a full platform to monitor and control your systems. It mixes together all the aspects of HIDS (host-based intrusion detection), log monitoring and SIM/SIEM together in a simple, powerful and open source solution.&lt;/p&gt; &#xA;&lt;p&gt;Visit our website for the latest information. &lt;a href=&#34;https://www.ossec.net&#34;&gt;www.ossec.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current Releases&lt;/h2&gt; &#xA;&lt;p&gt;The current stable releases are available on the ossec website.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Releases can be downloaded from: &lt;a href=&#34;https://www.ossec.net/downloads/&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Release documentation is available at: &lt;a href=&#34;https://www.ossec.net/docs/&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The development version is hosted on GitHub and just a simple git clone away.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ossec/ossec-hids&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ossec/ossec-hids.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/1847&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/1847/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;File Integrity Monitoring&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ossec/ossec-hids/master/doc/images/fim-test.gif&#34; alt=&#34;FIM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Attack Detection&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ossec/ossec-hids/master/doc/images/ssh-attack.gif&#34; alt=&#34;SSH Brute Force&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help / Support&lt;/h2&gt; &#xA;&lt;p&gt;Join us on slack, ossec.slack.com: Invites to &lt;a href=&#34;mailto:slack@ossec.net&#34;&gt;slack@ossec.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on Discord: &lt;a href=&#34;https://discord.gg/BXzM75Xzq7&#34;&gt;https://discord.gg/BXzM75Xzq7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits and Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OSSEC comes with a modified version of zlib and a small part of openssl (sha1 and blowfish libraries)&lt;/li&gt; &#xA; &lt;li&gt;This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (&lt;a href=&#34;http://www.openssl.org/&#34;&gt;http://www.openssl.org/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;This product includes cryptographic software written by Eric Young (&lt;a href=&#34;mailto:eay@cryptsoft.com&#34;&gt;eay@cryptsoft.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;This product include software developed by the zlib project (Jean-loup Gailly and Mark Adler)&lt;/li&gt; &#xA; &lt;li&gt;This product include software developed by the cJSON project (Dave Gamble)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.atomicorp.com&#34;&gt;Atomicorp&lt;/a&gt; hosting the annual OSSEC conference. Presentations for the 2019 conference can be found at &lt;a href=&#34;https://www.atomicorp.com/ossec-con2019/&#34;&gt;https://www.atomicorp.com/ossec-con2019/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>avaneev/lzav</title>
    <updated>2023-07-23T01:31:07Z</updated>
    <id>tag:github.com,2023-07-23:/avaneev/lzav</id>
    <link href="https://github.com/avaneev/lzav" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast In-Memory Data Compression Algorithm (in C)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LZAV - Fast Data Compression Algorithm (in C)&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;LZAV is a fast general-purpose in-memory data compression algorithm based on now-classic &lt;a href=&#34;https://wikipedia.org/wiki/LZ77_and_LZ78&#34;&gt;LZ77&lt;/a&gt; lossless data compression method. LZAV holds a good position on the Pareto landscape of factors, among many similar in-memory compression algorithms.&lt;/p&gt; &#xA;&lt;p&gt;LZAV algorithm&#39;s code is portable, scalar, header-only, inlineable C (C++ compatible). It supports little- and big-endian platforms, and any memory alignment models. The algorithm is efficient on both 32- and 64-bit platforms. Incompressible data expands by no more than 0.58%.&lt;/p&gt; &#xA;&lt;p&gt;LZAV does not sacrifice internal out-of-bounds (OOB) checks for decompression speed. This means that LZAV can be used in strict conditions where OOB memory writes (and especially reads) that lead to a trap, are unacceptable (e.g., real-time, system, server software). LZAV can be safely used to decompress malformed or damaged compressed data. Which means that LZAV does not require calculation of a checksum (or hash) of the compressed data. Only a checksum of uncompressed data may be required, depending on application&#39;s guarantees.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Information&lt;/h2&gt; &#xA;&lt;p&gt;To compress data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &#34;lzav.h&#34;&#xA;&#xA;int max_len = lzav_compress_bound( src_len );&#xA;void* comp_buf = malloc( max_len ); // Or similar.&#xA;int comp_len = lzav_compress_default( src_buf, comp_buf, src_len, max_len );&#xA;&#xA;if( comp_len == 0 &amp;amp;&amp;amp; src_len != 0 )&#xA;{&#xA;    // Error handling.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To decompress data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &#34;lzav.h&#34;&#xA;&#xA;void* decomp_buf = malloc( src_len ); // Or similar.&#xA;int l = lzav_decompress( comp_buf, decomp_buf, comp_len, src_len );&#xA;&#xA;if( l &amp;lt; 0 )&#xA;{&#xA;    // Error handling.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comparisons&lt;/h2&gt; &#xA;&lt;p&gt;The tables below present performance ballpark numbers of LZAV algorithm (based on Silesia dataset).&lt;/p&gt; &#xA;&lt;p&gt;While there LZ4 seems to be compressing faster, LZAV comparably provides 12% memory storage cost savings. This is a significant benefit in database and file system use cases since CPUs rarely run at their maximum capacity anyway. In general, LZAV holds a very strong position in this class of data compression algorithms, if one considers all factors: compression and decompression speeds, compression ratio, and not less important - code maintainability: LZAV is maximally portable and has a rather small independent codebase.&lt;/p&gt; &#xA;&lt;p&gt;Performance of LZAV is not limited to the presented ballpark numbers. Depending on the data being compressed, LZAV can achieve 750 MB/s compression and 4100 MB/s decompression speeds. Incompressible data decompresses at 9000 MB/s rate, which is not far from the &#34;memcpy&#34;. There are cases like the &lt;a href=&#34;https://mattmahoney.net/dc/textdata.html&#34;&gt;enwik9 dataset&lt;/a&gt; where LZAV provides 22% higher memory storage savings compared to LZ4.&lt;/p&gt; &#xA;&lt;p&gt;LZAV algorithm&#39;s geomean performance on a variety of datasets is 540 +/- 210 MB/s compression and 3000 +/- 1000 MB/s decompression speeds, on 4+ GHz 64-bit processors released after 2019. Note that the algorithm exhibits adaptive qualities, and its actual performance depends on the data being compressed.&lt;/p&gt; &#xA;&lt;p&gt;For a more comprehensive in-memory compression algorithms benchmark you may visit &lt;a href=&#34;https://github.com/inikep/lzbench&#34;&gt;lzbench&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Apple clang 12.0.0 64-bit, macOS 13.3.1, Apple M1, 3.5 GHz&lt;/h3&gt; &#xA;&lt;p&gt;Silesia compression corpus&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compressor&lt;/th&gt; &#xA;   &lt;th&gt;Compression&lt;/th&gt; &#xA;   &lt;th&gt;Decompression&lt;/th&gt; &#xA;   &lt;th&gt;Ratio&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LZAV 1.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;505 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2760 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;41.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LZ4 1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;670 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;3950 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;47.60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LZF 3.6&lt;/td&gt; &#xA;   &lt;td&gt;390 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;810 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;48.15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;LLVM clang-cl 8.0.1 64-bit, Windows 10, Ryzen 3700X (Zen2), 4.2 GHz&lt;/h3&gt; &#xA;&lt;p&gt;Silesia compression corpus&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compressor&lt;/th&gt; &#xA;   &lt;th&gt;Compression&lt;/th&gt; &#xA;   &lt;th&gt;Decompression&lt;/th&gt; &#xA;   &lt;th&gt;Ratio&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LZAV 1.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;425 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2480 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;41.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LZ4 1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;660 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;4200 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;47.60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LZF 3.6&lt;/td&gt; &#xA;   &lt;td&gt;350 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;700 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;48.15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;LLVM clang 12.0.1 64-bit, CentOS 8, Xeon E-2176G (CoffeeLake), 4.5 GHz&lt;/h3&gt; &#xA;&lt;p&gt;Silesia compression corpus&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compressor&lt;/th&gt; &#xA;   &lt;th&gt;Compression&lt;/th&gt; &#xA;   &lt;th&gt;Decompression&lt;/th&gt; &#xA;   &lt;th&gt;Ratio&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LZAV 1.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;370 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2050 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;41.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LZ4 1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;620 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;4300 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;47.60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LZF 3.6&lt;/td&gt; &#xA;   &lt;td&gt;370 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;880 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;48.15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>