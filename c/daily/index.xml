<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-05T01:28:28Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ibireme/yyjson</title>
    <updated>2023-11-05T01:28:28Z</updated>
    <id>tag:github.com,2023-11-05:/ibireme/yyjson</id>
    <link href="https://github.com/ibireme/yyjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest JSON library in C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ibireme/yyjson/actions/workflows/cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ibireme/yyjson/cmake.yml?branch=master&amp;amp;style=flat-square&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ibireme/yyjson&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/ibireme/yyjson/master?style=flat-square&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ibireme/yyjson/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ibireme/yyjson?color=blue&amp;amp;style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ibireme/yyjson/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ibireme/yyjson?color=orange&amp;amp;style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/yyjson/versions&#34;&gt;&lt;img src=&#34;https://img.shields.io/repology/repositories/yyjson.svg?style=flat-square&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A high performance JSON library written in ANSI C.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: can read or write gigabytes per second JSON data on modern CPUs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: complies with ANSI C (C89) for cross-platform compatibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strict&lt;/strong&gt;: complies with &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8259&#34;&gt;RFC 8259&lt;/a&gt; JSON standard, ensuring strict number format and UTF-8 validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extendable&lt;/strong&gt;: offers options to allow comments, trailing commas, NaN/Inf, and custom memory allocator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;: can accurately read and write &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;, and &lt;code&gt;double&lt;/code&gt; numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: supports unlimited JSON nesting levels, &lt;code&gt;\u0000&lt;/code&gt; characters, and non null-terminated strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manipulation&lt;/strong&gt;: supports querying and modifying using &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6901&#34;&gt;JSON Pointer&lt;/a&gt;, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6902&#34;&gt;JSON Patch&lt;/a&gt; and &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7386&#34;&gt;JSON Merge Patch&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer-Friendly&lt;/strong&gt;: easy integration with only one &lt;code&gt;h&lt;/code&gt; and one &lt;code&gt;c&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Limitations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An array or object is stored as a &lt;a href=&#34;https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__data_structure.html&#34;&gt;data structure&lt;/a&gt; such as linked list, which makes accessing elements by index or key slower than using an iterator.&lt;/li&gt; &#xA; &lt;li&gt;Duplicate keys are allowed in an object, and the order of the keys is preserved.&lt;/li&gt; &#xA; &lt;li&gt;JSON parsing result is immutable, requiring a &lt;code&gt;mutable copy&lt;/code&gt; for modification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Benchmark project and dataset: &lt;a href=&#34;https://github.com/ibireme/yyjson_benchmark&#34;&gt;yyjson_benchmark&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simdjson&#39;s new &lt;code&gt;On Demand&lt;/code&gt; API is faster if most JSON fields are known at compile-time. This benchmark project only checks the DOM API, a new benchmark will be added later.&lt;/p&gt; &#xA;&lt;h4&gt;AWS EC2 (AMD EPYC 7R32, gcc 9.3)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ibireme/yyjson/master/doc/images/perf_reader_ec2.svg?sanitize=true&#34; alt=&#34;ec2_chart&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;twitter.json&lt;/th&gt; &#xA;   &lt;th&gt;parse (GB/s)&lt;/th&gt; &#xA;   &lt;th&gt;stringify (GB/s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yyjson(insitu)&lt;/td&gt; &#xA;   &lt;td&gt;1.80&lt;/td&gt; &#xA;   &lt;td&gt;1.51&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yyjson&lt;/td&gt; &#xA;   &lt;td&gt;1.72&lt;/td&gt; &#xA;   &lt;td&gt;1.42&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simdjson&lt;/td&gt; &#xA;   &lt;td&gt;1.52&lt;/td&gt; &#xA;   &lt;td&gt;0.61&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sajson&lt;/td&gt; &#xA;   &lt;td&gt;1.16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson(insitu)&lt;/td&gt; &#xA;   &lt;td&gt;0.77&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson(utf8)&lt;/td&gt; &#xA;   &lt;td&gt;0.26&lt;/td&gt; &#xA;   &lt;td&gt;0.39&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cjson&lt;/td&gt; &#xA;   &lt;td&gt;0.32&lt;/td&gt; &#xA;   &lt;td&gt;0.17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jansson&lt;/td&gt; &#xA;   &lt;td&gt;0.05&lt;/td&gt; &#xA;   &lt;td&gt;0.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;iPhone (Apple A14, clang 12)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ibireme/yyjson/master/doc/images/perf_reader_a14.svg?sanitize=true&#34; alt=&#34;a14_chart&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;twitter.json&lt;/th&gt; &#xA;   &lt;th&gt;parse (GB/s)&lt;/th&gt; &#xA;   &lt;th&gt;stringify (GB/s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yyjson(insitu)&lt;/td&gt; &#xA;   &lt;td&gt;3.51&lt;/td&gt; &#xA;   &lt;td&gt;2.41&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yyjson&lt;/td&gt; &#xA;   &lt;td&gt;2.39&lt;/td&gt; &#xA;   &lt;td&gt;2.01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simdjson&lt;/td&gt; &#xA;   &lt;td&gt;2.19&lt;/td&gt; &#xA;   &lt;td&gt;0.80&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sajson&lt;/td&gt; &#xA;   &lt;td&gt;1.74&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson(insitu)&lt;/td&gt; &#xA;   &lt;td&gt;0.75&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson(utf8)&lt;/td&gt; &#xA;   &lt;td&gt;0.30&lt;/td&gt; &#xA;   &lt;td&gt;0.58&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cjson&lt;/td&gt; &#xA;   &lt;td&gt;0.48&lt;/td&gt; &#xA;   &lt;td&gt;0.33&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jansson&lt;/td&gt; &#xA;   &lt;td&gt;0.09&lt;/td&gt; &#xA;   &lt;td&gt;0.24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;More benchmark reports with interactive charts (update 2020-12-12)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;CPU&lt;/th&gt; &#xA;   &lt;th&gt;Compiler&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Report&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel NUC 8i5&lt;/td&gt; &#xA;   &lt;td&gt;Core i5-8259U&lt;/td&gt; &#xA;   &lt;td&gt;msvc 2019&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10 2004&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_msvc_2019.html&#34;&gt;Charts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel NUC 8i5&lt;/td&gt; &#xA;   &lt;td&gt;Core i5-8259U&lt;/td&gt; &#xA;   &lt;td&gt;clang 10.0&lt;/td&gt; &#xA;   &lt;td&gt;Ubuntu 20.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_clang_10.html&#34;&gt;Charts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel NUC 8i5&lt;/td&gt; &#xA;   &lt;td&gt;Core i5-8259U&lt;/td&gt; &#xA;   &lt;td&gt;gcc 9.3&lt;/td&gt; &#xA;   &lt;td&gt;Ubuntu 20.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_gcc_9.html&#34;&gt;Charts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS EC2 c5a.large&lt;/td&gt; &#xA;   &lt;td&gt;AMD EPYC 7R32&lt;/td&gt; &#xA;   &lt;td&gt;gcc 9.3&lt;/td&gt; &#xA;   &lt;td&gt;Ubuntu 20.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson_benchmark/reports/EC2_c5a.large_gcc_9.html&#34;&gt;Charts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS EC2 t4g.medium&lt;/td&gt; &#xA;   &lt;td&gt;Graviton2 (ARM64)&lt;/td&gt; &#xA;   &lt;td&gt;gcc 9.3&lt;/td&gt; &#xA;   &lt;td&gt;Ubuntu 20.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson_benchmark/reports/EC2_t4g.medium_gcc_9.html&#34;&gt;Charts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple iPhone 12 Pro&lt;/td&gt; &#xA;   &lt;td&gt;A14 (ARM64)&lt;/td&gt; &#xA;   &lt;td&gt;clang 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson_benchmark/reports/Apple_A14_clang_12.html&#34;&gt;Charts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;For better performance, yyjson prefers:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A modern processor with: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;high instruction level parallelism&lt;/li&gt; &#xA;   &lt;li&gt;excellent branch predictor&lt;/li&gt; &#xA;   &lt;li&gt;low penalty for misaligned memory access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A modern compiler with good optimizer (e.g. clang)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sample Code&lt;/h1&gt; &#xA;&lt;h3&gt;Read JSON string&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const char *json = &#34;{\&#34;name\&#34;:\&#34;Mash\&#34;,\&#34;star\&#34;:4,\&#34;hits\&#34;:[2,2,1,3]}&#34;;&#xA;&#xA;// Read JSON and get root&#xA;yyjson_doc *doc = yyjson_read(json, strlen(json), 0);&#xA;yyjson_val *root = yyjson_doc_get_root(doc);&#xA;&#xA;// Get root[&#34;name&#34;]&#xA;yyjson_val *name = yyjson_obj_get(root, &#34;name&#34;);&#xA;printf(&#34;name: %s\n&#34;, yyjson_get_str(name));&#xA;printf(&#34;name length:%d\n&#34;, (int)yyjson_get_len(name));&#xA;&#xA;// Get root[&#34;star&#34;]&#xA;yyjson_val *star = yyjson_obj_get(root, &#34;star&#34;);&#xA;printf(&#34;star: %d\n&#34;, (int)yyjson_get_int(star));&#xA;&#xA;// Get root[&#34;hits&#34;], iterate over the array&#xA;yyjson_val *hits = yyjson_obj_get(root, &#34;hits&#34;);&#xA;size_t idx, max;&#xA;yyjson_val *hit;&#xA;yyjson_arr_foreach(hits, idx, max, hit) {&#xA;    printf(&#34;hit%d: %d\n&#34;, (int)idx, (int)yyjson_get_int(hit));&#xA;}&#xA;&#xA;// Free the doc&#xA;yyjson_doc_free(doc);&#xA;&#xA;// All functions accept NULL input, and return NULL on error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write JSON string&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Create a mutable doc&#xA;yyjson_mut_doc *doc = yyjson_mut_doc_new(NULL);&#xA;yyjson_mut_val *root = yyjson_mut_obj(doc);&#xA;yyjson_mut_doc_set_root(doc, root);&#xA;&#xA;// Set root[&#34;name&#34;] and root[&#34;star&#34;]&#xA;yyjson_mut_obj_add_str(doc, root, &#34;name&#34;, &#34;Mash&#34;);&#xA;yyjson_mut_obj_add_int(doc, root, &#34;star&#34;, 4);&#xA;&#xA;// Set root[&#34;hits&#34;] with an array&#xA;int hits_arr[] = {2, 2, 1, 3};&#xA;yyjson_mut_val *hits = yyjson_mut_arr_with_sint32(doc, hits_arr, 4);&#xA;yyjson_mut_obj_add_val(doc, root, &#34;hits&#34;, hits);&#xA;&#xA;// To string, minified&#xA;const char *json = yyjson_mut_write(doc, 0, NULL);&#xA;if (json) {&#xA;    printf(&#34;json: %s\n&#34;, json); // {&#34;name&#34;:&#34;Mash&#34;,&#34;star&#34;:4,&#34;hits&#34;:[2,2,1,3]}&#xA;    free((void *)json);&#xA;}&#xA;&#xA;// Free the doc&#xA;yyjson_mut_doc_free(doc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read JSON file with options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Read JSON file, allowing comments and trailing commas&#xA;yyjson_read_flag flg = YYJSON_READ_ALLOW_COMMENTS | YYJSON_READ_ALLOW_TRAILING_COMMAS;&#xA;yyjson_read_err err;&#xA;yyjson_doc *doc = yyjson_read_file(&#34;/tmp/config.json&#34;, flg, NULL, &amp;amp;err);&#xA;&#xA;// Iterate over the root object&#xA;if (doc) {&#xA;    yyjson_val *obj = yyjson_doc_get_root(doc);&#xA;    yyjson_obj_iter iter;&#xA;    yyjson_obj_iter_init(obj, &amp;amp;iter);&#xA;    yyjson_val *key, *val;&#xA;    while ((key = yyjson_obj_iter_next(&amp;amp;iter))) {&#xA;        val = yyjson_obj_iter_get_val(key);&#xA;        printf(&#34;%s: %s\n&#34;, yyjson_get_str(key), yyjson_get_type_desc(val));&#xA;    }&#xA;} else {&#xA;    printf(&#34;read error (%u): %s at position: %ld\n&#34;, err.code, err.msg, err.pos);&#xA;}&#xA;&#xA;// Free the doc&#xA;yyjson_doc_free(doc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write JSON file with options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Read the JSON file as a mutable doc&#xA;yyjson_doc *idoc = yyjson_read_file(&#34;/tmp/config.json&#34;, 0, NULL, NULL);&#xA;yyjson_mut_doc *doc = yyjson_doc_mut_copy(idoc, NULL);&#xA;yyjson_mut_val *obj = yyjson_mut_doc_get_root(doc);&#xA;&#xA;// Remove null values in root object&#xA;yyjson_mut_obj_iter iter;&#xA;yyjson_mut_obj_iter_init(obj, &amp;amp;iter);&#xA;yyjson_mut_val *key, *val;&#xA;while ((key = yyjson_mut_obj_iter_next(&amp;amp;iter))) {&#xA;    val = yyjson_mut_obj_iter_get_val(key);&#xA;    if (yyjson_mut_is_null(val)) {&#xA;        yyjson_mut_obj_iter_remove(&amp;amp;iter);&#xA;    }&#xA;}&#xA;&#xA;// Write the json pretty, escape unicode&#xA;yyjson_write_flag flg = YYJSON_WRITE_PRETTY | YYJSON_WRITE_ESCAPE_UNICODE;&#xA;yyjson_write_err err;&#xA;yyjson_mut_write_file(&#34;/tmp/config.json&#34;, doc, flg, NULL, &amp;amp;err);&#xA;if (err.code) {&#xA;    printf(&#34;write error (%u): %s\n&#34;, err.code, err.msg);&#xA;}&#xA;&#xA;// Free the doc&#xA;yyjson_doc_free(idoc);&#xA;yyjson_mut_doc_free(doc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The latest (unreleased) documentation can be accessed in the &lt;a href=&#34;https://github.com/ibireme/yyjson/tree/master/doc&#34;&gt;doc&lt;/a&gt; directory. The pre-generated Doxygen HTML for the release version can be viewed here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson/doc/doxygen/html/&#34;&gt;Home Page&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__build_and_test.html&#34;&gt;Build and test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__a_p_i.html&#34;&gt;API and sample code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__data_structure.html&#34;&gt;Data structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ibireme.github.io/yyjson/doc/doxygen/html/md__c_h_a_n_g_e_l_o_g.html&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Packaging status&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/yyjson/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/yyjson.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Built With yyjson&lt;/h1&gt; &#xA;&lt;p&gt;A non-exhaustive list of projects that expose yyjson to other languages or use yyjson internally for a major feature. If you have a project that uses yyjson, feel free to open a PR to add it to this list.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tktech/py_yyjson&#34;&gt;py_yyjson&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;Python bindings for yyjson&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ijl/orjson&#34;&gt;orjson&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;JSON library for Python with an optional yyjson backend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yosh-matsuda/cpp-yyjson&#34;&gt;cpp-yyjson&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;C++ JSON library with a yyjson backend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/coolbutuseless/yyjsonr&#34;&gt;yyjsonr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;R binding for yyjson&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nixzhu/Ananda&#34;&gt;Ananda&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;JSON model decoding based on yyjson&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/duckdb/duckdb&#34;&gt;duckdb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;DuckDB is an in-process SQL OLAP Database Management System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add documentation page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add GitHub workflow for CI and codecov.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add more tests: valgrind, sanitizer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support JSON Pointer to query value from document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add fuzzer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add &lt;code&gt;RAW&lt;/code&gt; type for JSON reader and writer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add streaming API for JSON reader and writer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add documentation about performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Optimize performance for 32-bit processor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is released under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libbpf/libbpf-bootstrap</title>
    <updated>2023-11-05T01:28:28Z</updated>
    <id>tag:github.com,2023-11-05:/libbpf/libbpf-bootstrap</id>
    <link href="https://github.com/libbpf/libbpf-bootstrap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scaffolding for BPF application development with libbpf and BPF CO-RE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libbpf-bootstrap: demo BPF applications&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/libbpf/libbpf-bootstrap/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/libbpf/libbpf-bootstrap/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;minimal&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;minimal&lt;/code&gt; is just that – a minimal practical BPF application example. It doesn&#39;t use or require BPF CO-RE, so should run on quite old kernels. It installs a tracepoint handler which is triggered once every second. It uses &lt;code&gt;bpf_printk()&lt;/code&gt; BPF helper to communicate with the world. To see it&#39;s output, read &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt; file as a root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd examples/c&#xA;$ make minimal&#xA;$ sudo ./minimal&#xA;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;           &amp;lt;...&amp;gt;-3840345 [010] d... 3220701.101143: bpf_trace_printk: BPF triggered from PID 3840345.&#xA;           &amp;lt;...&amp;gt;-3840345 [010] d... 3220702.101265: bpf_trace_printk: BPF triggered from PID 3840345.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;minimal&lt;/code&gt; is great as a bare-bones experimental playground to quickly try out new ideas or BPF features.&lt;/p&gt; &#xA;&lt;h2&gt;minimal_ns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;minimal_ns&lt;/code&gt; is as same as &lt;code&gt;minimal&lt;/code&gt; but for namespaced environments. &lt;code&gt;minimal&lt;/code&gt; would not work in environments that have namespace, like containers, or WSL2, because the perceived pid of the process in the namespace is not the actual pid of the process. For executing &lt;code&gt;minimal&lt;/code&gt; in namespaced environments you need to use &lt;code&gt;minimal_ns&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd examples/c&#xA;$ make minimal_ns&#xA;$ sudo ./minimal_ns&#xA;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;           &amp;lt;...&amp;gt;-3840345 [022] d...1  8804.331204: bpf_trace_printk: BPF triggered from PID 9087.&#xA;           &amp;lt;...&amp;gt;-3840345 [022] d...1  8804.331215: bpf_trace_printk: BPF triggered from PID 9087.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;minimal_Legacy&lt;/h2&gt; &#xA;&lt;p&gt;This version of &lt;code&gt;minimal&lt;/code&gt; is modified to allow running on even older kernels that do not allow global variables. bpf_printk uses global variables unless BPF_NO_GLOBAL_DATA is defined before including bpf_helpers.h. Additionally, the global variable my_pid has been replaced with an array of one element to hold the process pid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd examples/c&#xA;$ make minimal_legacy&#xA;$ sudo ./minimal_legacy&#xA;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;  minimal_legacy-52030 [001] .... 491227.784078: 0x00000001: BPF triggered from PID 52030.&#xA;  minimal_legacy-52030 [001] .... 491228.840571: 0x00000001: BPF triggered from PID 52030.&#xA;  minimal_legacy-52030 [001] .... 491229.841643: 0x00000001: BPF triggered from PID 52030.&#xA;  minimal_legacy-52030 [001] .... 491230.842432: 0x00000001: BPF triggered from PID 52030.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;bootstrap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; is an example of a simple (but realistic) BPF application. It tracks process starts (&lt;code&gt;exec()&lt;/code&gt; family of syscalls, to be precise) and exits and emits data about filename, PID and parent PID, as well as exit status and duration of the process life. With &lt;code&gt;-d &amp;lt;min-duration-ms&amp;gt;&lt;/code&gt; you can specify minimum duration of the process to log. In such mode process start (technically, &lt;code&gt;exec()&lt;/code&gt;) events are not output (see example output below).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; was created in the similar spirit as &lt;a href=&#34;https://github.com/iovisor/bcc/tree/master/libbpf-tools&#34;&gt;libbpf-tools&lt;/a&gt; from BCC package, but is designed to be more stand-alone and with simpler Makefile to simplify adoption to user&#39;s particular needs. It demonstrates the use of typical BPF features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cooperating BPF programs (tracepoint handlers for process &lt;code&gt;exec&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; events, in this particular case);&lt;/li&gt; &#xA; &lt;li&gt;BPF map for maintaining the state;&lt;/li&gt; &#xA; &lt;li&gt;BPF ring buffer for sending data to user-space;&lt;/li&gt; &#xA; &lt;li&gt;global variables for application behavior parameterization.&lt;/li&gt; &#xA; &lt;li&gt;it utilizes BPF CO-RE and vmlinux.h to read extra process information from kernel&#39;s &lt;code&gt;struct task_struct&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; is intended to be the starting point for your own BPF application, with things like BPF CO-RE and vmlinux.h, consuming BPF ring buffer data, command line arguments parsing, graceful Ctrl-C handling, etc. all taken care of for you, which are crucial but mundane tasks that are no fun, but necessary to be able to do anything useful. Just copy/paste and do simple renaming to get yourself started.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example output in minimum process duration mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./bootstrap -d 50&#xA;TIME     EVENT COMM             PID     PPID    FILENAME/EXIT CODE&#xA;19:18:32 EXIT  timeout          3817109 402466  [0] (126ms)&#xA;19:18:32 EXIT  sudo             3817117 3817111 [0] (259ms)&#xA;19:18:32 EXIT  timeout          3817110 402466  [0] (264ms)&#xA;19:18:33 EXIT  python3.7        3817083 1       [0] (1026ms)&#xA;19:18:38 EXIT  python3          3817429 3817424 [1] (60ms)&#xA;19:18:38 EXIT  sh               3817424 3817420 [0] (79ms)&#xA;19:18:38 EXIT  timeout          3817420 402466  [0] (80ms)&#xA;19:18:43 EXIT  timeout          3817610 402466  [0] (70ms)&#xA;19:18:43 EXIT  grep             3817619 3817617 [1] (271ms)&#xA;19:18:43 EXIT  timeout          3817609 402466  [0] (321ms)&#xA;19:18:44 EXIT  iostat           3817585 3817531 [0] (3006ms)&#xA;19:18:44 EXIT  tee              3817587 3817531 [0] (3005ms)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;uprobe&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;uprobe&lt;/code&gt; is an example of dealing with user-space entry and exit (return) probes, &lt;code&gt;uprobe&lt;/code&gt; and &lt;code&gt;uretprobe&lt;/code&gt; in libbpf lingo. It attached &lt;code&gt;uprobe&lt;/code&gt; and &lt;code&gt;uretprobe&lt;/code&gt; BPF programs to its own functions (&lt;code&gt;uprobed_add()&lt;/code&gt; and &lt;code&gt;uprobed_sub()&lt;/code&gt;) and logs input arguments and return result, respectively, using &lt;code&gt;bpf_printk()&lt;/code&gt; macro. The user-space function is triggered once every second:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./uprobe&#xA;libbpf: loading object &#39;uprobe_bpf&#39; from buffer&#xA;...&#xA;Successfully started!&#xA;...........&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see &lt;code&gt;uprobe&lt;/code&gt; demo output in &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;          uprobe-1809291 [007] .... 4017233.106596: 0: uprobed_add ENTRY: a = 0, b = 1&#xA;          uprobe-1809291 [007] .... 4017233.106605: 0: uprobed_add EXIT: return = 1&#xA;          uprobe-1809291 [007] .... 4017233.106606: 0: uprobed_sub ENTRY: a = 0, b = 0&#xA;          uprobe-1809291 [007] .... 4017233.106607: 0: uprobed_sub EXIT: return = 0&#xA;          uprobe-1809291 [007] .... 4017234.106694: 0: uprobed_add ENTRY: a = 1, b = 2&#xA;          uprobe-1809291 [007] .... 4017234.106697: 0: uprobed_add EXIT: return = 3&#xA;          uprobe-1809291 [007] .... 4017234.106700: 0: uprobed_sub ENTRY: a = 1, b = 1&#xA;          uprobe-1809291 [007] .... 4017234.106701: 0: uprobed_sub EXIT: return = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;usdt&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;usdt&lt;/code&gt; is an example of dealing with USDT probe. It attaches USDT BPF programs to the &lt;a href=&#34;https://www.gnu.org/software/libc/manual/html_node/Non_002dlocal-Goto-Probes.html&#34;&gt;libc:setjmp&lt;/a&gt; probe, which is triggered by calling &lt;code&gt;setjmp&lt;/code&gt; in user-space program once per second and logs USDT arguments using &lt;code&gt;bpf_printk()&lt;/code&gt; macro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./usdt&#xA;libbpf: loading object &#39;usdt_bpf&#39; from buffer&#xA;...&#xA;Successfully started!&#xA;...........&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see &lt;code&gt;usdt&lt;/code&gt; demo output in &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;            usdt-1919077 [005] d..21 537310.886092: bpf_trace_printk: USDT auto attach to libc:setjmp: arg1 = 55d03d6a42a0, arg2 = 0, arg3 = 55d03d65e54e&#xA;            usdt-1919077 [005] d..21 537310.886105: bpf_trace_printk: USDT manual attach to libc:setjmp: arg1 = 55d03d6a42a0, arg2 = 0, arg3 = 55d03d65e54e&#xA;            usdt-1919077 [005] d..21 537311.886214: bpf_trace_printk: USDT auto attach to libc:setjmp: arg1 = 55d03d6a42a0, arg2 = 0, arg3 = 55d03d65e54e&#xA;            usdt-1919077 [005] d..21 537311.886227: bpf_trace_printk: USDT manual attach to libc:setjmp: arg1 = 55d03d6a42a0, arg2 = 0, arg3 = 55d03d65e54e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;fentry&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fentry&lt;/code&gt; is an example that uses fentry and fexit BPF programs for tracing. It attaches &lt;code&gt;fentry&lt;/code&gt; and &lt;code&gt;fexit&lt;/code&gt; traces to &lt;code&gt;do_unlinkat()&lt;/code&gt; which is called when a file is deleted and logs the return value, PID, and filename to the trace pipe.&lt;/p&gt; &#xA;&lt;p&gt;Important differences, compared to kprobes, are improved performance and usability. In this example, better usability is shown with the ability to directly dereference pointer arguments, like in normal C, instead of using various read helpers. The big distinction between &lt;strong&gt;fexit&lt;/strong&gt; and &lt;strong&gt;kretprobe&lt;/strong&gt; programs is that fexit one has access to both input arguments and returned result, while kretprobe can only access the result.&lt;/p&gt; &#xA;&lt;p&gt;fentry and fexit programs are available starting from 5.5 kernels.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./fentry&#xA;libbpf: loading object &#39;fentry_bpf&#39; from buffer&#xA;...&#xA;Successfully started!&#xA;..........&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;fentry&lt;/code&gt; output in &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt; should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;              rm-9290    [004] d..2  4637.798698: bpf_trace_printk: fentry: pid = 9290, filename = test_file&#xA;              rm-9290    [004] d..2  4637.798843: bpf_trace_printk: fexit: pid = 9290, filename = test_file, ret = 0&#xA;              rm-9290    [004] d..2  4637.798698: bpf_trace_printk: fentry: pid = 9290, filename = test_file2&#xA;              rm-9290    [004] d..2  4637.798843: bpf_trace_printk: fexit: pid = 9290, filename = test_file2, ret = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;kprobe&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;kprobe&lt;/code&gt; is an example of dealing with kernel-space entry and exit (return) probes, &lt;code&gt;kprobe&lt;/code&gt; and &lt;code&gt;kretprobe&lt;/code&gt; in libbpf lingo. It attaches &lt;code&gt;kprobe&lt;/code&gt; and &lt;code&gt;kretprobe&lt;/code&gt; BPF programs to the &lt;code&gt;do_unlinkat()&lt;/code&gt; function and logs the PID, filename, and return result, respectively, using &lt;code&gt;bpf_printk()&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./kprobe&#xA;libbpf: loading object &#39;kprobe_bpf&#39; from buffer&#xA;...&#xA;Successfully started!&#xA;...........&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;kprobe&lt;/code&gt; demo output in &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt; should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;              rm-9346    [005] d..3  4710.951696: bpf_trace_printk: KPROBE ENTRY pid = 9346, filename = test1&#xA;              rm-9346    [005] d..4  4710.951819: bpf_trace_printk: KPROBE EXIT: ret = 0&#xA;              rm-9346    [005] d..3  4710.951852: bpf_trace_printk: KPROBE ENTRY pid = 9346, filename = test2&#xA;              rm-9346    [005] d..4  4710.951895: bpf_trace_printk: KPROBE EXIT: ret = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;xdp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;xdp&lt;/code&gt; is an example written in Rust (using libbpf-rs). It attaches to the ingress path of networking device and logs the size of each packet, returning &lt;code&gt;XDP_PASS&lt;/code&gt; to allow the packet to be passed up to the kernel’s networking stack.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./target/release/xdp 1&#xA;..........&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;xdp&lt;/code&gt; output in &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt; should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;           &amp;lt;...&amp;gt;-823887  [000] d.s1 602386.079100: bpf_trace_printk: packet size: 75&#xA;           &amp;lt;...&amp;gt;-823887  [000] d.s1 602386.079141: bpf_trace_printk: packet size: 66&#xA;           &amp;lt;...&amp;gt;-2813507 [000] d.s1 602386.696702: bpf_trace_printk: packet size: 77&#xA;           &amp;lt;...&amp;gt;-2813507 [000] d.s1 602386.696735: bpf_trace_printk: packet size: 66&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;tc&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tc&lt;/code&gt; (short for Traffic Control) is an example of handling ingress network traffics. It creates a qdisc on the &lt;code&gt;lo&lt;/code&gt; interface and attaches the &lt;code&gt;tc_ingress&lt;/code&gt; BPF program to it. It reports the metadata of the IP packets that coming into the &lt;code&gt;lo&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./tc&#xA;...&#xA;Successfully started! Please run `sudo cat /sys/kernel/debug/tracing/trace_pipe` to see output of the BPF program.&#xA;......&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;tc&lt;/code&gt; output in &lt;code&gt;/sys/kernel/debug/tracing/trace_pipe&lt;/code&gt; should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo cat /sys/kernel/debug/tracing/trace_pipe&#xA;            node-1254811 [007] ..s1 8737831.671074: 0: Got IP packet: tot_len: 79, ttl: 64&#xA;            sshd-1254728 [006] ..s1 8737831.674334: 0: Got IP packet: tot_len: 79, ttl: 64&#xA;            sshd-1254728 [006] ..s1 8737831.674349: 0: Got IP packet: tot_len: 72, ttl: 64&#xA;            node-1254811 [007] ..s1 8737831.674550: 0: Got IP packet: tot_len: 71, ttl: 64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;profile&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;profile&lt;/code&gt; is an example written in Rust and C with BlazeSym. It attaches to perf events, sampling on every processor periodically. It shows addresses, symbols, file names, and line numbers of stacktraces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./target/release/profile&#xA;COMM: swapper/6 (pid=0) @ CPU 6&#xA;Kernel:&#xA;  0 [&amp;lt;ffffffff81bdf010&amp;gt;] intel_idle+0x96&#xA;  1 [&amp;lt;ffffffff819959b0&amp;gt;] cpuidle_enter_state+0x80 /ro/source/drivers/cpuidle/cpuidle.c:238&#xA;  2 [&amp;lt;ffffffff81995cc9&amp;gt;] cpuidle_enter+0x29 /ro/source/drivers/cpuidle/cpuidle.c:353&#xA;  3 [&amp;lt;ffffffff810f8c0b&amp;gt;] do_idle+0x1bb /ro/source/kernel/sched/idle.c:243&#xA;  4 [&amp;lt;ffffffff810f8de9&amp;gt;] cpu_startup_entry+0x19 /ro/source/kernel/sched/idle.c:396&#xA;  5 [&amp;lt;ffffffff81044f46&amp;gt;] start_secondary+0x116 /ro/source/arch/x86/kernel/smpboot.c:272&#xA;  6 [&amp;lt;ffffffff810000f5&amp;gt;] secondary_startup_64_no_verify+0xb0 /ro/source/arch/x86/kernel/head_64.S:283&#xA;No Userspace Stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;C version and Rust version show the same content. Both of them use BlazeSym to symbolize stacktraces.&lt;/p&gt; &#xA;&lt;h2&gt;sockfilter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;sockfilter&lt;/code&gt; is an example of monitoring packet and dealing with &lt;code&gt;__sk_buff&lt;/code&gt; structure. It attaches &lt;code&gt;socket&lt;/code&gt; BPF program to &lt;code&gt;sock_queue_rcv_skb()&lt;/code&gt; function and retrieve information from &lt;code&gt;BPF_MAP_TYPE_RINGBUF&lt;/code&gt;, then print protocol, src IP, src port, dst IP, dst port in standard output. Currently, most of the IPv4 protocols defined in &lt;code&gt;uapi/linux/in.h&lt;/code&gt; are included, please check &lt;code&gt;ipproto_mapping&lt;/code&gt; of &lt;code&gt;examples/c/sockfilter.c&lt;/code&gt; for the supported protocols.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./sockfilter -i &amp;lt;interface&amp;gt;&#xA;interface:lo    protocol: UDP   127.0.0.1:51845(src) -&amp;gt; 127.0.0.1:53(dst)&#xA;interface:lo    protocol: UDP   127.0.0.1:41552(src) -&amp;gt; 127.0.0.1:53(dst)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;libbpf-bootstrap supports multiple build systems that do the same thing. This serves as a cross reference for folks coming from different backgrounds.&lt;/p&gt; &#xA;&lt;h2&gt;Install Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;You will need &lt;code&gt;clang&lt;/code&gt; (at least v11 or later), &lt;code&gt;libelf&lt;/code&gt; and &lt;code&gt;zlib&lt;/code&gt; to build the examples, package names may vary across distros.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu/Debian, you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ apt install clang libelf1 libelf-dev zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On CentOS/Fedora, you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ dnf install clang elfutils-libelf elfutils-libelf-devel zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting the source code&lt;/h2&gt; &#xA;&lt;p&gt;Download the git repository and check out submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone --recurse-submodules https://github.com/libbpf/libbpf-bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;C Examples&lt;/h2&gt; &#xA;&lt;p&gt;Makefile build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule update --init --recursive       # check out libbpf&#xA;$ cd examples/c&#xA;$ make&#xA;$ sudo ./bootstrap&#xA;TIME     EVENT COMM             PID     PPID    FILENAME/EXIT CODE&#xA;00:21:22 EXIT  python3.8        4032353 4032352 [0] (123ms)&#xA;00:21:22 EXEC  mkdir            4032379 4032337 /usr/bin/mkdir&#xA;00:21:22 EXIT  mkdir            4032379 4032337 [0] (1ms)&#xA;00:21:22 EXEC  basename         4032382 4032381 /usr/bin/basename&#xA;00:21:22 EXIT  basename         4032382 4032381 [0] (0ms)&#xA;00:21:22 EXEC  sh               4032381 4032380 /bin/sh&#xA;00:21:22 EXEC  dirname          4032384 4032381 /usr/bin/dirname&#xA;00:21:22 EXIT  dirname          4032384 4032381 [0] (1ms)&#xA;00:21:22 EXEC  readlink         4032387 4032386 /usr/bin/readlink&#xA;^C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CMake build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule update --init --recursive       # check out libbpf&#xA;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake ../examples/c&#xA;$ make&#xA;$ sudo ./bootstrap&#xA;&amp;lt;...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;XMake build (Linux):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule update --init --recursive       # check out libbpf&#xA;$ cd examples/c&#xA;$ xmake&#xA;$ xmake run bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;XMake build (Android):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule update --init --recursive       # check out libbpf&#xA;$ cd examples/c&#xA;$ xmake f -p android&#xA;$ xmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;Xmake&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bash &amp;lt;(wget https://xmake.io/shget.text -O -)&#xA;$ source ~/.xmake/profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rust Examples&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;libbpf-cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cargo install libbpf-cargo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build using &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd examples/rust&#xA;$ cargo build --release&#xA;$ sudo ./target/release/xdp 1&#xA;&amp;lt;...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;Libbpf debug logs are quire helpful to pinpoint the exact source of problems, so it&#39;s usually a good idea to look at them before starting to debug or posting question online.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./minimal&lt;/code&gt; is always running with libbpf debug logs turned on.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;./bootstrap&lt;/code&gt;, run it in verbose mode (&lt;code&gt;-v&lt;/code&gt;) to see libbpf debug logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ./bootstrap -v&#xA;libbpf: loading object &#39;bootstrap_bpf&#39; from buffer&#xA;libbpf: elf: section(2) tp/sched/sched_process_exec, size 384, link 0, flags 6, type=1&#xA;libbpf: sec &#39;tp/sched/sched_process_exec&#39;: found program &#39;handle_exec&#39; at insn offset 0 (0 bytes), code size 48 insns (384 bytes)&#xA;libbpf: elf: section(3) tp/sched/sched_process_exit, size 432, link 0, flags 6, type=1&#xA;libbpf: sec &#39;tp/sched/sched_process_exit&#39;: found program &#39;handle_exit&#39; at insn offset 0 (0 bytes), code size 54 insns (432 bytes)&#xA;libbpf: elf: section(4) license, size 13, link 0, flags 3, type=1&#xA;libbpf: license of bootstrap_bpf is Dual BSD/GPL&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>