<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-03T01:34:04Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>StaZhu/enable-chromium-hevc-hardware-decoding</title>
    <updated>2022-09-03T01:34:04Z</updated>
    <id>tag:github.com,2022-09-03:/StaZhu/enable-chromium-hevc-hardware-decoding</id>
    <link href="https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A guide that teach you enable hardware HEVC decoding for Chrome / Edge on macOS / Windows, or build a custom version of Chromium / Electron that supports hardware &amp; software HEVC decoding.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;enable-chromium-hevc-hardware-decoding&lt;/h1&gt; &#xA;&lt;p&gt;A guide that teach you enable hardware HEVC decoding for Chrome / Edge on macOS / Windows, or build a custom version of Chromium / Electron that supports hardware &amp;amp; software HEVC decoding.&lt;/p&gt; &#xA;&lt;h5&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/StaZhu/enable-chromium-hevc-hardware-decoding/main/README.zh_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h2&gt;Download Link&lt;/h2&gt; &#xA;&lt;h3&gt;Release Version&lt;/h3&gt; &#xA;&lt;h4&gt;Chrome&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Click to Download&lt;/a&gt; (version &amp;gt;= 104.0.5084.0).&lt;/p&gt; &#xA;&lt;h4&gt;Edge (Mac)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/edge&#34;&gt;Click to Download&lt;/a&gt; (version &amp;gt;= 104.0.1293.0).&lt;/p&gt; &#xA;&lt;h3&gt;Software Decoding Compatible Version&lt;/h3&gt; &#xA;&lt;h4&gt;Chromium&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding/releases&#34;&gt;Click to Download&lt;/a&gt; (Support HW + SW decoding, no platform requirement).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Release Version&lt;/h3&gt; &#xA;&lt;h4&gt;Chrome (Windows)&lt;/h4&gt; &#xA;&lt;p&gt;Append switch &lt;code&gt;--enable-features=PlatformHEVCDecoderSupport&lt;/code&gt; to desktop shortcut and open directly.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/StaZhu/enable-chromium-hevc-hardware-decoding/main/resources/chrome_switch_en.jpg&#34; style=&#34;width: 450px;&#34;&gt; &#xA;&lt;h4&gt;Chrome (Mac)&lt;/h4&gt; &#xA;&lt;p&gt;Unzip the file &lt;a href=&#34;https://raw.githubusercontent.com/StaZhu/enable-chromium-hevc-hardware-decoding/main/resources/Google%20Chrome%20with%20HEVC.app.zip&#34;&gt;Google Chrome with HEVC.app.zip&lt;/a&gt;, then drag &lt;code&gt;Google Chrome with HEVC.app&lt;/code&gt; to &lt;code&gt;Applications&lt;/code&gt; directory and open directly.&lt;/p&gt; &#xA;&lt;h4&gt;Edge (Mac)&lt;/h4&gt; &#xA;&lt;p&gt;Unzip the file &lt;a href=&#34;https://raw.githubusercontent.com/StaZhu/enable-chromium-hevc-hardware-decoding/main/resources/Microsoft%20Edge%20with%20HEVC.app.zip&#34;&gt;Microsoft Edge with HEVC.app.zip&lt;/a&gt;, then drag &lt;code&gt;Microsoft Edge with HEVC.app&lt;/code&gt; to &lt;code&gt;Applications&lt;/code&gt; directory and open directly.&lt;/p&gt; &#xA;&lt;h3&gt;Software Decoding Compatible Version&lt;/h3&gt; &#xA;&lt;h4&gt;Chromium&lt;/h4&gt; &#xA;&lt;p&gt;Open directly.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s the hardware supported HEVC profile?&lt;/h2&gt; &#xA;&lt;p&gt;HEVC Main (Up to 8192x8192 pixels)&lt;/p&gt; &#xA;&lt;p&gt;HEVC Main 10 (Up to 8192x8192 pixels)&lt;/p&gt; &#xA;&lt;p&gt;HEVC Main Still Picture (macOS only, up to 8192x8192 pixels)&lt;/p&gt; &#xA;&lt;p&gt;HEVC Rext (Partial support, see the table below for details, up to 8192x8192 pixels)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;GPU&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;8b 420&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;8b 422&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;8b 444&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;10b 420&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;10b 422&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;10b 444&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;12b 420&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;12b 422&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;12b 444&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apple Silicon (macOS)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Intel ICL ~ TGLx (Win)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⭕&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⭕&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Intel TGLx+ (Win)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⭕&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⭕&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⭕&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⭕&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;✅：GPU + software support ⭕：GPU support, software not support ❌：GPU not support&lt;/p&gt; &#xA;&lt;h4&gt;Note 1：Intel CPU Mac supports HEVC Rext software decoding of 8 ~ 12b non-444 contents via VideoToolbox, 444 is decodable but has a green stripe issue.&lt;/h4&gt; &#xA;&lt;h4&gt;Note 2：Specific Intel GPU supports HEVC Rext hardware decoding on Windows, so if you want to use these profiles then Chromium version must be &amp;gt;= 106.0.5210.0. Some profiles are not common so we only implement part of them, if you need those unsupported profile that GPU do supports, then you can submit a issue to &lt;code&gt;crbug.com&lt;/code&gt;.&lt;/h4&gt; &#xA;&lt;h4&gt;Note 3：Although NVIDIA GPU supports HEVC Rext hardware decoding of 8 ~ 12b non-422 contents via CUVIA or NVDEC, but because they did not provide a D3D11 interface, thus Chromium will not support it in the future.&lt;/h4&gt; &#xA;&lt;h2&gt;What&#39;s the OS requirement?&lt;/h2&gt; &#xA;&lt;p&gt;macOS Big Sur (11.0) and above&lt;/p&gt; &#xA;&lt;p&gt;Windows 8 and above&lt;/p&gt; &#xA;&lt;p&gt;Android (already support, not tested)&lt;/p&gt; &#xA;&lt;p&gt;ChromeOS (already support, not tested)&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s API supported?&lt;/h2&gt; &#xA;&lt;p&gt;Currently supports HTML Video Element, Media Source Extension, Clearkey Encrypted Media Extensions, WebCodec (8bit only, version &amp;gt;= 107.0.5272.0), no support for WebRTC and video encode.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s the GPU requirement?&lt;/h2&gt; &#xA;&lt;h4&gt;Independent GPU&lt;/h4&gt; &#xA;&lt;p&gt;NVIDIA GTX950 and above&lt;/p&gt; &#xA;&lt;p&gt;AMD RX460 and above&lt;/p&gt; &#xA;&lt;h4&gt;Integrated GPU&lt;/h4&gt; &#xA;&lt;p&gt;Intel HD4400, HD515 and above&lt;/p&gt; &#xA;&lt;p&gt;AMD Radeon R7, Vega M and above&lt;/p&gt; &#xA;&lt;p&gt;Apple M1, M1 Pro, M1 Max, M1 Ultra and above&lt;/p&gt; &#xA;&lt;h4&gt;Detail Table&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bluesky-soft.com/en/dxvac/deviceInfo/decoder/intel.html&#34;&gt;Intel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bluesky-soft.com/en/dxvac/deviceInfo/decoder/amd.html&#34;&gt;AMD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bluesky-soft.com/en/dxvac/deviceInfo/decoder/nvidia.html&#34;&gt;NVIDIA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;HDR Supports? (Compared with Edge / Safari)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;PQ (SDR Screen)&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;PQ (HDR Screen)&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;HLG (SDR Screen)&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;HLG (HDR Screen)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chromium 105 macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ (EDR)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ (EDR)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chromium 105 Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Edge 102 Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Partial&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Partial&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Safari 15.3 macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ (EDR)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ (EDR)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Dolby Vision Supports?&lt;/h2&gt; &#xA;&lt;p&gt;Support HLG、PQ backward compatibility single layer dolby vision (Profile 8.1, 8.2, 8.4), not support IPTPQc2 single layer dolby vision (Profile 5), not support multi layer dolby vision, not support dolby atmos audio (E-AC3).&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s the tech diff? (Compared with Edge / Safari)&lt;/h2&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Edge uses &lt;code&gt;VDAVideoDecoder&lt;/code&gt; to call &lt;code&gt;MediaFoundation&lt;/code&gt; (need to install &lt;code&gt;HEVC Video Extension&lt;/code&gt;) to finish the HEVC HW decoding which is the same tech behind &lt;code&gt;Movies and TV&lt;/code&gt; builtin system app.&lt;/p&gt; &#xA;&lt;p&gt;Chromium uses &lt;code&gt;D3D11VideoDecoder&lt;/code&gt; to call &lt;code&gt;D3D11VA&lt;/code&gt; (no need to install anything) to finish the HEVC HW decoding which is the same tech behind video players like &lt;code&gt;VLC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;Safari and Chromium use the same &lt;code&gt;VideoToolbox&lt;/code&gt; to finish the HEVC HW decoding.&lt;/p&gt; &#xA;&lt;h2&gt;How to verify HEVC hardware support is enabled?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;chrome://gpu&lt;/code&gt;, and search &lt;code&gt;Video Acceleration Information&lt;/code&gt;, you should see &lt;strong&gt;Decode hevc main&lt;/strong&gt; field and &lt;strong&gt;Decode hevc main 10&lt;/strong&gt; field (macOS will show &lt;strong&gt;Decode hevc main still-picture&lt;/strong&gt; and &lt;strong&gt;Decode hevc range extensions&lt;/strong&gt; as well) present if hardware decoding is supported (macOS is an exception here, you see this field doesn&#39;t means the decode will use hardware, it actually depends on your GPU).&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;chrome://media-internals&lt;/code&gt; and play some HEVC video (&lt;a href=&#34;https://lf-tk-sg.ibytedtos.com/obj/tcs-client-sg/resources/video_demo_hevc.html&#34;&gt;Test Page&lt;/a&gt;) if the decoder is &lt;code&gt;VDAVideoDecoder&lt;/code&gt; or &lt;code&gt;D3D11VideoDecoder&lt;/code&gt; or &lt;code&gt;VaapiVideoDecoder&lt;/code&gt; that means the video is using hardware decoding (macOS is an exception here, if the OS &amp;gt;= Big Sur, and the GPU doesn&#39;t support HEVC, VideoToolbox will fallback to software decode which has a better performance compared with FFMPEG, the decoder is &lt;code&gt;VDAVideoDecoder&lt;/code&gt; in this case indeed), and if the decoder is &lt;code&gt;FFMpegVideoDecoder&lt;/code&gt; that means the video is using software decoding.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Activity Monitor&lt;/code&gt; on Mac and search &lt;code&gt;VTDecoderXPCService&lt;/code&gt;, if the cpu usage larger than 0 when playing video, that means hardware (or software) decoding is being used.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Windows Task Manager&lt;/code&gt; on Windows and switch to &lt;code&gt;Performance&lt;/code&gt; - &lt;code&gt;GPU&lt;/code&gt;, if &lt;code&gt;Video Decoding&lt;/code&gt; usage larger than 0 when playing video, that means hardware decoding is being used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why my GPU support HEVC, but still not able to hardware decode?&lt;/h2&gt; &#xA;&lt;h4&gt;OS version is too low&lt;/h4&gt; &#xA;&lt;h5&gt;Windows&lt;/h5&gt; &#xA;&lt;p&gt;Please make sure you are using Windows 8 and above, this is because the &lt;code&gt;D3D11VideoDecoder&lt;/code&gt; doesn&#39;t support Windows 7, and will use &lt;code&gt;VDAVideoDecoder&lt;/code&gt; to hardware decoding. while &lt;code&gt;VDAVideoDecoder&lt;/code&gt; based on &lt;code&gt;Media Foundation&lt;/code&gt; , and &lt;code&gt;Media Foundation&lt;/code&gt; start to support HEVC since Windows 10 1709 (which need you to install the &lt;code&gt;HEVC Video Extension&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h5&gt;macOS&lt;/h5&gt; &#xA;&lt;p&gt;Please make sure you are using macOS Big Sur and above, this is because &lt;code&gt;CMVideoFormatDescriptionCreateFromHEVCParameterSets&lt;/code&gt; API has compatibility issue on lower macOS.&lt;/p&gt; &#xA;&lt;h4&gt;GPU driver has bug&lt;/h4&gt; &#xA;&lt;p&gt;Some GPU driver may has bug which will cause &lt;code&gt;D3D11VideoDecoder&lt;/code&gt; forbidden to use. in this case, you need to upgrade your GPU driver and try again. &lt;a href=&#34;https://source.chromium.org/chromium/chromium/src/+/main:gpu/config/gpu_driver_bug_list.json?q=disable_d3d11_video_decoder&#34;&gt;See reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GPU hardware has bug&lt;/h4&gt; &#xA;&lt;p&gt;Some GPU hardware may has bug which will cause &lt;code&gt;D3D11VideoDecoder&lt;/code&gt; forbidden to use. in this case, we can&#39;t do anything else but to use the FFMPEG software decode. &lt;a href=&#34;https://source.chromium.org/chromium/chromium/src/+/main:gpu/config/gpu_driver_bug_list.json?q=disable_d3d11_video_decoder&#34;&gt;See reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Will HEVC decoding be enabled in Chrome by default in the future?&lt;/h2&gt; &#xA;&lt;p&gt;Chrome 104 and above version will integrate HEVC hw support for ChromeOS, Mac, Windows and Android, disabled by default, and you can enable it by passing &lt;code&gt;--enable-features=PlatformHEVCDecoderSupport&lt;/code&gt; when opening. it should be enabled by default in the future version when stable. (only platform decoder that provided by the OS will be supported in chrome, thus this will be optional depends on the GPU and OS support)&lt;/p&gt; &#xA;&lt;h2&gt;How to Build?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://www.chromium.org/developers/how-tos/get-the-code/&#34;&gt;the official build doc&lt;/a&gt; to prepare the build environment then fetch the source code from &lt;code&gt;main&lt;/code&gt; branch (HEVC HW codes has been merged).&lt;/li&gt; &#xA; &lt;li&gt;(Optional) To enable HEVC software decoding: switch to &lt;code&gt;src/third_party/ffmpeg&lt;/code&gt; dir, then execute &lt;code&gt;git am /path/to/add-hevc-ffmpeg-decoder-parser.patch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) To enable other HEVC profiles (non main / main 10 profiles): switch to &lt;code&gt;src&lt;/code&gt; dir, then execute &lt;code&gt;git am /path/to/remove-main-main10-profile-limit.patch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) To default enable hardware decode: switch to &lt;code&gt;src&lt;/code&gt; dir, then execute &lt;code&gt;git am /path/to/enable-hevc-hardware-decoding-by-default.patch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) To integrate Widevine CDM to support EME API (like Netflix): switch to &lt;code&gt;src&lt;/code&gt; dir, then execute &lt;code&gt;cp -R /path/to/widevine/* third_party/widevine/cdm&lt;/code&gt; (Windows: &lt;code&gt;xcopy /path/to/widevine third_party\widevine\cdm /E/H&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you are using &lt;code&gt;Mac&lt;/code&gt; + want to build &lt;code&gt;x64&lt;/code&gt; arch (target_cpu to &lt;code&gt;x86&lt;/code&gt; , &lt;code&gt;arm64&lt;/code&gt; , &lt;code&gt;arm&lt;/code&gt; also available) + want to add CDM support, then run &lt;code&gt;gn gen out/Release64 --args=&#34;is_component_build = false is_official_build = true is_debug = false ffmpeg_branding = \&#34;Chrome\&#34; target_cpu = \&#34;x64\&#34; proprietary_codecs = true media_use_ffmpeg = true enable_widevine = true bundle_widevine_cdm = true enable_platform_hevc = true enable_hevc_parser_and_hw_decoder = true&#34;&lt;/code&gt;, if you are using &lt;code&gt;Windows&lt;/code&gt;, you need to add &lt;code&gt;enable_media_foundation_widevine_cdm = true&lt;/code&gt; as well, if you are using &lt;code&gt;Windows&lt;/code&gt; and want to build &lt;code&gt;arm64&lt;/code&gt; arch, then need to change &lt;code&gt;bundle_widevine_cdm&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;autoninja -C out/Release64 chrome&lt;/code&gt; to start the build.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./out/Release64/Chromium.app/Contents/MacOS/Chromium --args --enable-features=PlatformHEVCDecoderSupport&lt;/code&gt; to open chromium if you are using macOS.&lt;/li&gt; &#xA; &lt;li&gt;Create a desktop shortcut and passing the args like &lt;code&gt;C:\Users\Admin\Desktop\Chromium\chrome.exe --enable-features=PlatformHEVCDecoderSupport&lt;/code&gt; then double click the desktop shortcut to open chromium if you are using Windows.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to integrate this into Chromium based project like Electron?&lt;/h2&gt; &#xA;&lt;p&gt;If Electron &amp;gt;= v20.0.0 (Chromium &amp;gt;= v104.0.5084.0), the HEVC hw decoding feature for Mac and Windows should have already been integrated, and you can use &lt;code&gt;app.commandLine.appendSwitch(&#39;enable-features&#39;, &#39;PlatformHEVCDecoderSupport&#39;)&lt;/code&gt; to enable HEVC hw decoding. To add HEVC ffmpeg sw decoding, the method should be the same with Chromium guide above.&lt;/p&gt; &#xA;&lt;p&gt;If Electron &amp;lt; v20.0.0, please follow the CL in &lt;code&gt;Trace Crbug&lt;/code&gt; to manually integrate HEVC features. Pull request of Patches for different version of Electron are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-08-31&lt;/code&gt; Add WebCodec API (8bit only) support, and HEVC with alpha layer support (macOS only)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-08-06&lt;/code&gt; Update usage to Edge (Mac) 104 release version&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-08-02&lt;/code&gt; Update usage to Chrome 104 release version&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-08-01&lt;/code&gt; Add Chrome / Edge Usage&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-07-31&lt;/code&gt; Intel GPU support HEVC Rext Profile hw decoding on Windows, Update Patch to &lt;code&gt;106.0.5211.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-07-15&lt;/code&gt; Update Electron v20.0.0-beta.9 and above version support status&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-06-21&lt;/code&gt; Update Microsoft Edge (Mac) feature test guide&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-06-18&lt;/code&gt; Fix HLG/PQ tone mapping, and update Patch to &lt;code&gt;105.0.5127.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-06-17&lt;/code&gt; Remove Linux support, Update Other Platform and HDR support status&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-26&lt;/code&gt; Update Chrome Canary HEVC feature test guide&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-25&lt;/code&gt; Update Chrome 104 support status, and Electron 20 enable method&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-24&lt;/code&gt; Update Patch to &lt;code&gt;104.0.5080.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-23&lt;/code&gt; Add CDM compile guide, and update Patch to &lt;code&gt;104.0.5077.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-17&lt;/code&gt; Update detail of tech implement and guide to integrate into electron&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-14&lt;/code&gt; Update Patch to &lt;code&gt;104.0.5061.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-13&lt;/code&gt; Add HEVC Test page&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-10&lt;/code&gt; Update README, add more special detail of the hardware support and GPU models&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-05-05&lt;/code&gt; Add support for MSP &amp;amp; Rext on macOS, and fix the issue that some HDR &amp;amp; Rec.709 Main10 video can&#39;t be hw decoded on Windows&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-04-27&lt;/code&gt; Replace to &lt;code&gt;git am&lt;/code&gt; patch&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-04-24&lt;/code&gt; Support chinese README&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-04-21&lt;/code&gt; Add Crbug trace&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-04-20&lt;/code&gt; Modify README&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;2022-04-19&lt;/code&gt; Initial commit&lt;/p&gt; &#xA;&lt;h2&gt;Trace Crbug&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://crbug.com/1286132&#34;&gt;Windows&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://crbug.com/1300444&#34;&gt;macOS&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Palakis/obs-ndi</title>
    <updated>2022-09-03T01:34:04Z</updated>
    <id>tag:github.com,2022-09-03:/Palakis/obs-ndi</id>
    <link href="https://github.com/Palakis/obs-ndi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NewTek NDI integration for OBS Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;obs-ndi&lt;/h1&gt; &#xA;&lt;p&gt;Network A/V in OBS Studio with NewTek&#39;s NDI technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Palakis/obs-ndi/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Palakis/obs-ndi/_apis/build/status/Palakis.obs-ndi?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/LePalakis&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&amp;amp;label=Follow%20%40LePalakis&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/obs-websocket&#34;&gt;&lt;img src=&#34;https://opencollective.com/obs-websocket/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NDI Source&lt;/strong&gt; : receive NDI video and audio in OBS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NDI Output&lt;/strong&gt; : transmit video and audio from OBS to NDI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NDI Filter&lt;/strong&gt; (a.k.a NDI Dedicated Output) : transmit a single source or scene to NDI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Binaries for Windows, macOS and Linux are available in the &lt;a href=&#34;https://github.com/Palakis/obs-ndi/releases&#34;&gt;Releases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need CMake and a working development environment for OBS Studio installed on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;In cmake-gui, you&#39;ll have to set these CMake variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;QTDIR&lt;/strong&gt; (path) : location of the Qt environment suited for your compiler and architecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LIBOBS_INCLUDE_DIR&lt;/strong&gt; (path) : location of the &lt;code&gt;libobs&lt;/code&gt; subfolder in the source code of OBS Studio&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LIBOBS_LIB&lt;/strong&gt; (filepath) : location of the obs.lib file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OBS_FRONTEND_LIB&lt;/strong&gt; (filepath) : location of the obs-frontend-api.lib file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Debian/Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start by installing the latest libndi deb available [here](https://github.com/Palakis/obs-ndi/releases).&#xA;git clone https://github.com/Palakis/obs-ndi.git&#xA;cd obs-ndi&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;# If you are on Ubuntu, add the `-DUSE_UBUNTU_FIX=true` flag to your cmake command&#xA;cmake -DLIBOBS_INCLUDE_DIR=&#34;&amp;lt;path to the libobs sub-folder in obs-studio&#39;s source code&amp;gt;&#34; -DCMAKE_INSTALL_PREFIX=/usr ..&#xA;make -j4&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OS X&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Palakis/obs-ndi.git&#xA;cd obs-ndi&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake -DLIBOBS_INCLUDE_DIR=&amp;lt;path to the libobs sub-folder in obs-studio&#39;s source code&amp;gt; -DLIBOBS_LIB=&amp;lt;path to libobs.0.dylib&amp;gt; -DOBS_FRONTEND_LIB=&amp;lt;path to libobs-frontend-api.dylib&amp;gt; -DQt5Core_DIR=/usr/local/opt/qt5/lib/cmake/Qt5Core -DQt5Widgets_DIR=/usr/local/opt/qt5/lib/cmake/Qt5Widgets ../&#xA;make -j4&#xA;# Copy libobs-ndi.so to the obs-plugins folder&#xA;# Copy libndi.dylib from the NDI SDK to the obs-plugins folder too&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>TrungNguyen1909/qemu-t8030</title>
    <updated>2022-09-03T01:34:04Z</updated>
    <id>tag:github.com,2022-09-03:/TrungNguyen1909/qemu-t8030</id>
    <link href="https://github.com/TrungNguyen1909/qemu-t8030" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iPhone 11 emulated on QEMU&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;=========== QEMU README&lt;/h1&gt; &#xA;&lt;p&gt;QEMU is a generic and open source machine &amp;amp; userspace emulator and virtualizer.&lt;/p&gt; &#xA;&lt;p&gt;QEMU is capable of emulating a complete machine in software without any need for hardware virtualization support. By using dynamic translation, it achieves very good performance. QEMU can also integrate with the Xen and KVM hypervisors to provide emulated hardware while allowing the hypervisor to manage the CPU. With hypervisor support, QEMU can achieve near native performance for CPUs. When QEMU emulates CPUs directly it is capable of running operating systems made for one machine (e.g. an ARMv7 board) on a different machine (e.g. an x86_64 PC board).&lt;/p&gt; &#xA;&lt;p&gt;QEMU is also capable of providing userspace API virtualization for Linux and BSD kernel interfaces. This allows binaries compiled against one architecture ABI (e.g. the Linux PPC64 ABI) to be run on a host using a different architecture ABI (e.g. the Linux x86_64 ABI). This does not involve any hardware emulation, simply CPU and syscall emulation.&lt;/p&gt; &#xA;&lt;p&gt;QEMU aims to fit into a variety of use cases. It can be invoked directly by users wishing to have full control over its behaviour and settings. It also aims to facilitate integration into higher level management layers, by providing a stable command line interface and monitor API. It is commonly invoked indirectly via the libvirt library when using open source applications such as oVirt, OpenStack and virt-manager.&lt;/p&gt; &#xA;&lt;p&gt;QEMU as a whole is released under the GNU General Public License, version 2. For full licensing details, consult the LICENSE file.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Documentation can be found hosted online at &lt;code&gt;&amp;lt;https://www.qemu.org/documentation/&amp;gt;&lt;/code&gt;&lt;em&gt;. The documentation for the current development version that is available at &lt;code&gt;&amp;lt;https://www.qemu.org/docs/master/&amp;gt;&lt;/code&gt;&lt;/em&gt; is generated from the &lt;code&gt;docs/&lt;/code&gt; folder in the source tree, and is built by &lt;code&gt;Sphinx &amp;lt;https://www.sphinx-doc.org/en/master/&amp;gt;_&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;QEMU is multi-platform software intended to be buildable on all modern Linux platforms, OS-X, Win32 (via the Mingw64 toolchain) and a variety of other UNIX targets. The simple steps to build QEMU are:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;mkdir build cd build ../configure make&lt;/p&gt; &#xA;&lt;p&gt;Additional information can also be found online via the QEMU website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Hosts/Linux&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Hosts/Mac&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Hosts/W32&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Submitting patches&lt;/h1&gt; &#xA;&lt;p&gt;The QEMU source code is maintained under the GIT version control system.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://gitlab.com/qemu-project/qemu.git&#34;&gt;https://gitlab.com/qemu-project/qemu.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When submitting patches, one common approach is to use &#39;git format-patch&#39; and/or &#39;git send-email&#39; to format &amp;amp; send the mail to the &lt;a href=&#34;mailto:qemu-devel@nongnu.org&#34;&gt;qemu-devel@nongnu.org&lt;/a&gt; mailing list. All patches submitted must contain a &#39;Signed-off-by&#39; line from the author. Patches should follow the guidelines set out in the &lt;code&gt;style section &amp;lt;https://www.qemu.org/docs/master/devel/style.html&amp;gt;&lt;/code&gt; of the Developers Guide.&lt;/p&gt; &#xA;&lt;p&gt;Additional information on submitting patches can be found online via the QEMU website&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/SubmitAPatch&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/TrivialPatches&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The QEMU website is also maintained under source control.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://gitlab.com/qemu-project/qemu-web.git&#34;&gt;https://gitlab.com/qemu-project/qemu-web.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://www.qemu.org/2017/02/04/the-new-qemu-website-is-up/&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &#39;git-publish&#39; utility was created to make above process less cumbersome, and is highly recommended for making regular contributions, or even just for sending consecutive patch series revisions. It also requires a working &#39;git send-email&#39; setup, and by default doesn&#39;t automate everything, so you may want to go through the above steps manually for once.&lt;/p&gt; &#xA;&lt;p&gt;For installation instructions, please go to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://github.com/stefanha/git-publish&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The workflow with &#39;git-publish&#39; is:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;$ git checkout master -b my-feature $ # work on new commits, add your &#39;Signed-off-by&#39; lines to each $ git publish&lt;/p&gt; &#xA;&lt;p&gt;Your patch series will be sent and tagged as my-feature-v1 if you need to refer back to it in the future.&lt;/p&gt; &#xA;&lt;p&gt;Sending v2:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: shell&lt;/p&gt; &#xA;&lt;p&gt;$ git checkout my-feature # same topic branch $ # making changes to the commits (using &#39;git rebase&#39;, for example) $ git publish&lt;/p&gt; &#xA;&lt;p&gt;Your patch series will be sent with &#39;v2&#39; tag in the subject and the git tip will be tagged as my-feature-v2.&lt;/p&gt; &#xA;&lt;h1&gt;Bug reporting&lt;/h1&gt; &#xA;&lt;p&gt;The QEMU project uses GitLab issues to track bugs. Bugs found when running code built from QEMU git or upstream released sources should be reported via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://gitlab.com/qemu-project/qemu/-/issues&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If using QEMU via an operating system vendor pre-built binary package, it is preferable to report bugs to the vendor&#39;s own bug tracker first. If the bug is also known to affect latest upstream code, it can also be reported via GitLab.&lt;/p&gt; &#xA;&lt;p&gt;For additional information on bug reporting consult:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/ReportABug&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ChangeLog&lt;/h1&gt; &#xA;&lt;p&gt;For version history and release notes, please visit &lt;code&gt;&amp;lt;https://wiki.qemu.org/ChangeLog/&amp;gt;&lt;/code&gt;_ or look at the git history for more detailed information.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;The QEMU community can be contacted in a number of ways, with the two main methods being email and IRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;mailto:qemu-devel@nongnu.org&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://lists.nongnu.org/mailman/listinfo/qemu-devel&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;#qemu on irc.oftc.net&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Information on additional methods of contacting the community can be found online via the QEMU website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;https://wiki.qemu.org/Contribute/StartHere&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>