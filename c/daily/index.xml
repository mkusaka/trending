<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-04T01:26:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IchigoJam/ichigojam-firm</title>
    <updated>2024-04-04T01:26:22Z</updated>
    <id>tag:github.com,2024-04-04:/IchigoJam/ichigojam-firm</id>
    <link href="https://github.com/IchigoJam/ichigojam-firm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IchigoJam firm&lt;/h1&gt; &#xA;&lt;h2&gt;ÊßãÊàê&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IchigoJam_BASIC/&lt;/code&gt; IchigoJam BASIC „ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRESENSE&lt;/code&gt; IchigoJam BASIC for SPRESENSE (beta)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;console&lt;/code&gt; IchigoJam BASIC for console (beta)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;„É©„Ç§„Çª„É≥„Çπ / license&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014-2024 the IchigoJam authors. All rights reserved. MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;ÂïÜÊ®ô / trademark&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IchigoJam„ÅØ„ÄÅÊ†™Âºè‰ºöÁ§æjig.jp„ÅÆÁôªÈå≤ÂïÜÊ®ô„Åß„Åô (IchigoJam is a registered trademark of jig.jp co., ltd.)&lt;/li&gt; &#xA; &lt;li&gt;SPRESENSE„ÅØ„ÄÅ„ÇΩ„Éã„Éº„Ç∞„É´„Éº„ÉóÔºàÊ†™Ôºâ„Åæ„Åü„ÅØ„Åù„ÅÆÈñ¢ÈÄ£‰ºöÁ§æ„ÅÆÁôªÈå≤ÂïÜÊ®ô„Åæ„Åü„ÅØÂïÜÊ®ô„Åß„Åô (SPRESENSE is a registered trademark of SONY Group Corporation)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Cipher7/ChaiLdr</title>
    <updated>2024-04-04T01:26:22Z</updated>
    <id>tag:github.com,2024-04-04:/Cipher7/ChaiLdr</id>
    <link href="https://github.com/Cipher7/ChaiLdr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AV bypass while you sip your Chai!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChaiLdr - AV Evasive Payload Loader&lt;/h1&gt; &#xA;&lt;p&gt;A simple shellcode loader built with the concepts of Malware development I have learnt till now.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indirect syscalls with SysWhispers3 - jumper_randomized&lt;/li&gt; &#xA; &lt;li&gt;QueueUserAPC Injection&lt;/li&gt; &#xA; &lt;li&gt;HTTP/S shellcode staging&lt;/li&gt; &#xA; &lt;li&gt;Execution delay using API Hammering&lt;/li&gt; &#xA; &lt;li&gt;IAT Camouflage&lt;/li&gt; &#xA; &lt;li&gt;API Hashing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing with Havoc and the Latest Windows Defender&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Cipher7/ChaiLdr/main/images/win10.png&#34; alt=&#34;windows-defender&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Cipher7/ChaiLdr/main/images/shell.png&#34; alt=&#34;havoc-shell&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;CRT Library Removal :&lt;/strong&gt; I tried a lot to get the payload working with CRT Library removed and make it independent with custom intrinsic functions for - memcpy, memset, rand, stand, etc, but ended up with a lot of crashes and after hours of debugging couldn&#39;t get it working, I&#39;ll incorporate it into a dev branch soon enough. I have used minicrt, MiniCRT, etc for references but still couldn&#39;t get it to work.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Shellcode Encryption :&lt;/strong&gt; The shellcode is fetched from a remote server, providing SSL support. I haven&#39;t incorporated any shellcode encryption, when used with Havoc, Havoc provides Sleep encryption.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Why not HellsGate? :&lt;/strong&gt; HellGate incorporated only direct syscalls, HellsHall uses indirect syscalls, but I&#39;m still learning that and will build my custom implementation of it in the future&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;EDR Evasion? :&lt;/strong&gt; This is a simple shellcode payload loader, it can bypass a lot of antivirus software and some EDRs but the techniques it incorporates aren&#39;t the best, so as I keep learning I&#39;ll make better loaders!&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>kyxiaxiang/Beacon_Source</title>
    <updated>2024-04-04T01:26:22Z</updated>
    <id>tag:github.com,2024-04-04:/kyxiaxiang/Beacon_Source</id>
    <link href="https://github.com/kyxiaxiang/Beacon_Source" rel="alternate"></link>
    <summary type="html">&lt;p&gt;not a reverse-engineered version of the Cobalt Strike Beacon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cobalt Strike Beacon&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;I should add that this is a code that is still in its infancy and cannot be used out of the box. More people are welcome to make corrections and additions to it. Technology shouldn‚Äôt be closed, right?&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a project I have saved on my computer, I just didn&#39;t think I should keep it private since I can no longer find it anywhere on the internet. This project aims to provide a fully functional, from-scratch alternative to the Cobalt Strike Beacon, providing transparency and flexibility to security professionals and enthusiasts.&lt;/p&gt; &#xA;&lt;p&gt;This project is not a reverse-engineered version of the Cobalt Strike Beacon, but a complete open source implementation. The &#34;settings.h&#34; file contains macros for the C2 configuration file and the user should complete it to their liking. Once you have your &#34;settings.h&#34; template ready, feel free to share and contribute.&lt;/p&gt; &#xA;&lt;p&gt;PS. explain something.I don‚Äôt remember who deleted it after it was made public, but I read this project and I think it can help many people who are trying to reconstruct Beacon.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio: The project is built using Visual Studio, not Visual Studio Code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libtom/libtommath&#34;&gt;libtommath&lt;/a&gt;: A fast, portable number-theoretic multiple-precision integer library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libtom/libtomcrypt&#34;&gt;libtomcrypt&lt;/a&gt;: A modular and portable cryptographic toolkit.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the project in Visual Studio.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure that the required dependencies (libtommath, libtomcrypt) are properly configured and linked with the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your &lt;code&gt;settings.h&lt;/code&gt; file based on the provided template. Make sure to include your C2 Profile macros and configurations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project again to apply your custom settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the compiled binary.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;You need to build your own settings.h, which contains these ~ ü•≤lovelorn day&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;S_C2_VERB_POST&#xA;S_PROXY_USER&#xA;S_PROXY_CONFIG&#xA;S_MAX_RETRY_STRATEGY_INCREASE&#xA;S_TCP_FRAME_HEADER&#xA;S_HOST_HEADER&#xA;S_PROCINJ_TRANSFORM_X86&#xA;S_SMB_FRAME_HEADER&#xA;S_C2_RECOVER&#xA;S_SPAWNTO_X64&#xA;S_PROXY_BEHAVIOR&#xA;S_PROCINJ_PERMS_I&#xA;S_HEADERS_REMOVE&#xA;S_PROXY_PASSWORD&#xA;S_PROCINJ_MINALLOC&#xA;S_PROCINJ_ALLOCATOR&#xA;S_MAX_RETRY_STRATEGY_ATTEMPTS&#xA;S_KILLDATE&#xA;S_C2_REQUEST&#xA;S_C2_POSTREQ&#xA;S_PROCINJ_PERMS&#xA;S_PROTOCOL&#xA;S_PUBKEY&#xA;S_PROCINJ_TRANSFORM_X64&#xA;S_DOMAIN_STRATEGY&#xA;S_SPAWNTO_X86&#xA;S_EXIT_FUNK&#xA;S_PROCINJ_EXECUTE&#xA;S_CFG_CAUTION&#xA;S_MAX_RETRY_STRATEGY_DURATION&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>