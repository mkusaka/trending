<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:37:14Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mpv-player/mpv</title>
    <updated>2022-06-21T01:37:14Z</updated>
    <id>tag:github.com,2022-06-21:/mpv-player/mpv</id>
    <link href="https://github.com/mpv-player/mpv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŽ¥ Command line video player&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpv-player/mpv.io/master/source/images/mpv-logo-128.png&#34; alt=&#34;mpv logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mpv&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#external-links&#34;&gt;External links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#release-cycle&#34;&gt;Release cycle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mpv.io/manual/master/&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;mpv&lt;/strong&gt; is a free (as in freedom) media player for the command line. It supports a wide variety of media file formats, audio and video codecs, and subtitle types.&lt;/p&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Releases can be found on the &lt;a href=&#34;https://github.com/mpv-player/mpv/releases&#34;&gt;release list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A not too ancient Linux, Windows 7 or later, or OSX 10.8 or later.&lt;/li&gt; &#xA; &lt;li&gt;A somewhat capable CPU. Hardware decoding might help if the CPU is too slow to decode video in realtime, but must be explicitly enabled with the &lt;code&gt;--hwdec&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;A not too crappy GPU. mpv&#39;s focus is not on power-efficient playback on embedded or integrated GPUs (for example, hardware decoding is not even enabled by default). Low power GPUs may cause issues like tearing, stutter, etc. The main video output uses shaders for video rendering and scaling, rather than GPU fixed function hardware. On Windows, you might want to make sure the graphics drivers are current. In some cases, ancient fallback video output methods can help (such as &lt;code&gt;--vo=xv&lt;/code&gt; on Linux), but this use is not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;For semi-official builds and third-party packages please see &lt;a href=&#34;https://mpv.io/installation/&#34;&gt;mpv.io/installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;There is no complete changelog; however, changes to the player core interface are listed in the &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/interface-changes.rst&#34;&gt;interface changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Changes to the C API are documented in the &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/client-api-changes.rst&#34;&gt;client API changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/mpv-player/mpv/releases&#34;&gt;release list&lt;/a&gt; has a summary of most of the important changes on every release.&lt;/p&gt; &#xA;&lt;p&gt;Changes to the default key bindings are indicated in &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/etc/restore-old-bindings.conf&#34;&gt;restore-old-bindings.conf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Compiling with full features requires development files for several external libraries. One of the two build systems supported by mpv is required: &lt;a href=&#34;https://mesonbuild.com/index.html&#34;&gt;meson&lt;/a&gt; or &lt;a href=&#34;https://waf.io/&#34;&gt;waf&lt;/a&gt;. Meson can be obtained from your distro or PyPI. Waf can be downloaded by using the &lt;code&gt;./bootstrap.py&lt;/code&gt; script. It will get the latest version of waf that was tested with mpv. Some documentation about the differences between the build systems are located in &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/build-system-differences.md&#34;&gt;build-system-differences&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;p&gt;After creating your build directory (e.g. &lt;code&gt;meson build&lt;/code&gt;), you can view a list of all the build options via &lt;code&gt;meson configure build&lt;/code&gt;. You could also just simply look at the &lt;code&gt;meson_options.txt&lt;/code&gt; file. Logs are stored in &lt;code&gt;meson-logs&lt;/code&gt; within your build directory.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson build&#xA;meson compile -C build&#xA;meson install -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Waf&lt;/h3&gt; &#xA;&lt;p&gt;For a list of the available build options use &lt;code&gt;./waf configure --help&lt;/code&gt;. If you think you have support for some feature installed but configure fails to detect it, the file &lt;code&gt;build/config.log&lt;/code&gt; may contain information about the reasons for the failure.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: To avoid cluttering the output with unreadable spam, &lt;code&gt;--help&lt;/code&gt; only shows one of the two switches for each option. If the option is autodetected or enabled by default, the &lt;code&gt;--disable-***&lt;/code&gt; switch is printed; if the option is disabled by default, the &lt;code&gt;--enable-***&lt;/code&gt; switch is printed. Either way, you can use &lt;code&gt;--enable-***&lt;/code&gt; or &lt;code&gt;--disable-**&lt;/code&gt; regardless of what is printed by &lt;code&gt;--help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the software you can use &lt;code&gt;./waf build&lt;/code&gt;: the result of the compilation will be located in &lt;code&gt;build/mpv&lt;/code&gt;. You can use &lt;code&gt;./waf install&lt;/code&gt; to install mpv to the &lt;em&gt;prefix&lt;/em&gt; after it is compiled.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bootstrap.py&#xA;./waf configure&#xA;./waf&#xA;./waf install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Essential dependencies (incomplete list):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc or clang&lt;/li&gt; &#xA; &lt;li&gt;X development headers (xlib, xrandr, xext, xscrnsaver, xinerama, libvdpau, libGL, GLX, EGL, xv, ...)&lt;/li&gt; &#xA; &lt;li&gt;Audio output development headers (libasound/ALSA, pulseaudio)&lt;/li&gt; &#xA; &lt;li&gt;FFmpeg libraries (libavutil libavcodec libavformat libswscale libavfilter and either libswresample or libavresample)&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;iconv (normally provided by the system libc)&lt;/li&gt; &#xA; &lt;li&gt;libass (OSD, OSC, text subtitles)&lt;/li&gt; &#xA; &lt;li&gt;Lua (optional, required for the OSC pseudo-GUI and youtube-dl integration)&lt;/li&gt; &#xA; &lt;li&gt;libjpeg (optional, used for screenshots only)&lt;/li&gt; &#xA; &lt;li&gt;uchardet (optional, for subtitle charset detection)&lt;/li&gt; &#xA; &lt;li&gt;nvdec and vaapi libraries for hardware decoding on Linux (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libass dependencies (when building libass):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc or clang, yasm on x86 and x86_64&lt;/li&gt; &#xA; &lt;li&gt;fribidi, freetype, fontconfig development headers (for libass)&lt;/li&gt; &#xA; &lt;li&gt;harfbuzz (required for correct rendering of combining characters, particularly for correct rendering of non-English text on OSX, and Arabic/Indic scripts on any platform)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FFmpeg dependencies (when building FFmpeg):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc or clang, yasm on x86 and x86_64&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL or GnuTLS (have to be explicitly enabled when compiling FFmpeg)&lt;/li&gt; &#xA; &lt;li&gt;libx264/libmp3lame/libfdk-aac if you want to use encoding (have to be explicitly enabled when compiling FFmpeg)&lt;/li&gt; &#xA; &lt;li&gt;For native DASH playback, FFmpeg needs to be built with --enable-libxml2 (although there are security implications, and DASH support has lots of bugs).&lt;/li&gt; &#xA; &lt;li&gt;AV1 decoding support requires dav1d.&lt;/li&gt; &#xA; &lt;li&gt;For good nvidia support on Linux, make sure nv-codec-headers is installed and can be found by configure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of the above libraries are available in suitable versions on normal Linux distributions. For ease of compiling the latest git master of everything, you may wish to use the separately available build wrapper (&lt;a href=&#34;https://github.com/mpv-player/mpv-build&#34;&gt;mpv-build&lt;/a&gt;) which first compiles FFmpeg libraries and libass, and then compiles the player statically linked against those.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build a Windows binary, you either have to use MSYS2 and MinGW, or cross-compile from Linux with MinGW. See &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/compile-windows.md&#34;&gt;Windows compilation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release cycle&lt;/h2&gt; &#xA;&lt;p&gt;Every other month, an arbitrary git snapshot is made, and is assigned a 0.X.0 version number. No further maintenance is done.&lt;/p&gt; &#xA;&lt;p&gt;The goal of releases is to make Linux distributions happy. Linux distributions are also expected to apply their own patches in case of bugs and security issues.&lt;/p&gt; &#xA;&lt;p&gt;Releases other than the latest release are unsupported and unmaintained.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/release-policy.md&#34;&gt;release policy document&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Bug reports&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/mpv-player/mpv/issues&#34;&gt;issue tracker&lt;/a&gt; provided by GitHub to send us bug reports or feature requests. Follow the template&#39;s instructions or the issue will likely be ignored or closed as invalid.&lt;/p&gt; &#xA;&lt;p&gt;Using the bug tracker as place for simple questions is fine but IRC is recommended (see &lt;a href=&#34;https://raw.githubusercontent.com/mpv-player/mpv/master/#Contact&#34;&gt;Contact&lt;/a&gt; below).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/DOCS/contribute.md&#34;&gt;contribute.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For small changes you can just send us pull requests through GitHub. For bigger changes come and talk to us on IRC before you start working on them. It will make code review easier for both parties later on.&lt;/p&gt; &#xA;&lt;p&gt;You can check &lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/Stuff-to-do&#34;&gt;the wiki&lt;/a&gt; or the &lt;a href=&#34;https://github.com/mpv-player/mpv/issues?q=is%3Aopen+is%3Aissue+label%3Ameta%3Afeature-request&#34;&gt;issue tracker&lt;/a&gt; for ideas on what you could contribute with.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv2 &#34;or later&#34; by default, LGPLv2.1 &#34;or later&#34; with &lt;code&gt;--enable-lgpl&lt;/code&gt;. See &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/Copyright&#34;&gt;details.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This software is based on the MPlayer project. Before mpv existed as a project, the code base was briefly developed under the mplayer2 project. For details, see the &lt;a href=&#34;https://github.com/mpv-player/mpv/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Most activity happens on the IRC channel and the github issue tracker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub issue tracker&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mpv-player/mpv/issues&#34;&gt;issue tracker&lt;/a&gt; (report bugs here)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User IRC Channel&lt;/strong&gt;: &lt;code&gt;#mpv&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer IRC Channel&lt;/strong&gt;: &lt;code&gt;#mpv-devel&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TelegramMessenger/Telegram-iOS</title>
    <updated>2022-06-21T01:37:14Z</updated>
    <id>tag:github.com,2022-06-21:/TelegramMessenger/Telegram-iOS</id>
    <link href="https://github.com/TelegramMessenger/Telegram-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram-iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram iOS Source Code Compilation Guide&lt;/h1&gt; &#xA;&lt;p&gt;We welcome all developers to use our API and source code to create applications on our platform. There are several things we require from &lt;strong&gt;all developers&lt;/strong&gt; for the moment.&lt;/p&gt; &#xA;&lt;h1&gt;Creating your Telegram Application&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;&lt;strong&gt;Obtain your own api_id&lt;/strong&gt;&lt;/a&gt; for your application.&lt;/li&gt; &#xA; &lt;li&gt;Please &lt;strong&gt;do not&lt;/strong&gt; use the name Telegram for your app â€” or make sure your users understand that it is unofficial.&lt;/li&gt; &#xA; &lt;li&gt;Kindly &lt;strong&gt;do not&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) as your app&#39;s logo.&lt;/li&gt; &#xA; &lt;li&gt;Please study our &lt;a href=&#34;https://core.telegram.org/mtproto/security_guidelines&#34;&gt;&lt;strong&gt;security guidelines&lt;/strong&gt;&lt;/a&gt; and take good care of your users&#39; data and privacy.&lt;/li&gt; &#xA; &lt;li&gt;Please remember to publish &lt;strong&gt;your&lt;/strong&gt; code too in order to comply with the licences.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Compilation Guide&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Xcode (directly from &lt;a href=&#34;https://developer.apple.com/download/more&#34;&gt;https://developer.apple.com/download/more&lt;/a&gt; or using the App Store).&lt;/li&gt; &#xA; &lt;li&gt;Clone the project from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive -j8 https://github.com/TelegramMessenger/Telegram-iOS.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Adjust configuration parameters&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p $HOME/telegram-configuration&#xA;cp -R build-system/example-configuration/* $HOME/telegram-configuration/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify the values in &lt;code&gt;variables.bzl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace the provisioning profiles in &lt;code&gt;provisioning&lt;/code&gt; with valid files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Optional) Create a build cache directory to speed up rebuilds&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p &#34;$HOME/telegram-bazel-cache&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Build the app&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    build \&#xA;    --configurationPath=&#34;$HOME/telegram-configuration&#34; \&#xA;    --buildNumber=100001 \&#xA;    --configuration=release_universal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;(Optional) Generate an Xcode project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=&#34;$HOME/telegram-configuration&#34; \&#xA;    --disableExtensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to generate a project that does not require any codesigning certificates to be installed: add &lt;code&gt;--disableProvisioningProfiles&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=&#34;$HOME/telegram-configuration&#34; \&#xA;    --disableExtensions \&#xA;    --disableProvisioningProfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tip: use &lt;code&gt;--disableExtensions&lt;/code&gt; when developing to speed up development by not building application extensions and the WatchOS app.&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;p&gt;Bazel is used to build the app. To simplify the development setup a helper script is provided (&lt;code&gt;build-system/Make/Make.py&lt;/code&gt;). See help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py --help&#xA;python3 build-system/Make/Make.py build --help&#xA;python3 build-system/Make/Make.py generateProject --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bazel is automatically downloaded when running Make.py for the first time. If you wish to use your own build of Bazel, pass &lt;code&gt;--bazel=path-to-bazel&lt;/code&gt;. If your Bazel version differs from that in &lt;code&gt;versions.json&lt;/code&gt;, you may use &lt;code&gt;--overrideBazelVersion&lt;/code&gt; to skip the version check.&lt;/p&gt; &#xA;&lt;p&gt;Each release is built using specific Xcode and Bazel versions (see &lt;code&gt;versions.json&lt;/code&gt;). The helper script checks the versions of installed software and reports an error if they don&#39;t match the ones specified in &lt;code&gt;versions.json&lt;/code&gt;. There are flags that allow to bypass these checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py --overrideBazelVersion build ... # Don&#39;t check the version of Bazel&#xA;python3 build-system/Make/Make.py --overrideXcodeVersion build ... # Don&#39;t check the version of Xcode&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>s-matyukevich/raspberry-pi-os</title>
    <updated>2022-06-21T01:37:14Z</updated>
    <id>tag:github.com,2022-06-21:/s-matyukevich/raspberry-pi-os</id>
    <link href="https://github.com/s-matyukevich/raspberry-pi-os" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning operating system development using Linux kernel and Raspberry Pi&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learning operating system development using Linux kernel and Raspberry Pi&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a step-by-step guide that teaches how to create a simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS or just RPi OS. The RPi OS source code is largely based on &lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;Linux kernel&lt;/a&gt;, but the OS has very limited functionality and supports only &lt;a href=&#34;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&#34;&gt;Raspberry PI 3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each lesson is designed in such a way that it first explains how some kernel feature is implemented in the RPi OS, and then it tries to demonstrate how the same functionality works in the Linux kernel. Each lesson has a corresponding folder in the &lt;a href=&#34;https://github.com/s-matyukevich/raspberry-pi-os/tree/master/src&#34;&gt;src&lt;/a&gt; directory, which contains a snapshot of the OS source code at the time when the lesson had just been completed. This allows the introduction of new concepts gracefully and helps readers to follow the evolution of the RPi OS. Understanding this guide doesn&#39;t require any specific OS development skills.&lt;/p&gt; &#xA;&lt;p&gt;For more information about project goals and history, please read the &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/Introduction.md&#34;&gt;Introduction&lt;/a&gt;. The project is still under active development, if you are willing to participate - please read the &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/Contributions.md&#34;&gt;Contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://twitter.com/RPi_OS&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/twitter.png&#34; alt=&#34;Follow @RPi_OS on twitter&#34; height=&#34;34&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/groups/251043708976964/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/facebook.png&#34; alt=&#34;Follow Raspberry Pi OS on facebook&#34; height=&#34;34&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/rpi-os/shared_invite/enQtNDQ1NTg2ODc1MDEwLWVjMTZlZmMyZDE4OGEyYmMzNTY1YjljZjU5YWI1NDllOWEwMjI5YzVkM2RiMzliYjEzN2RlYmUzNzBiYmQyMjY&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/slack.png&#34; alt=&#34;Join Raspberry Pi OS in slack&#34; height=&#34;34&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.producthunt.com/upcoming/raspberry-pi-os&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/subscribe.png&#34; alt=&#34;Subscribe for updates&#34; height=&#34;34&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/Introduction.md&#34;&gt;Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/Contributions.md&#34;&gt;Contribution guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/Prerequisites.md&#34;&gt;Prerequisites&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 1: Kernel Initialization&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1.1 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson01/rpi-os.md&#34;&gt;Introducing RPi OS, or bare metal &#34;Hello, world!&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;1.2 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson01/linux/project-structure.md&#34;&gt;Project structure&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;1.3 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson01/linux/build-system.md&#34;&gt;Kernel build system&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;1.4 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson01/linux/kernel-startup.md&#34;&gt;Startup sequence&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;1.5 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson01/exercises.md&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 2: Processor initialization&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2.1 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson02/rpi-os.md&#34;&gt;RPi OS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;2.2 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson02/linux.md&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;2.3 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson02/exercises.md&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 3: Interrupt handling&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.1 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson03/rpi-os.md&#34;&gt;RPi OS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;3.2 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson03/linux/low_level-exception_handling.md&#34;&gt;Low level exception handling&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;3.3 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson03/linux/interrupt_controllers.md&#34;&gt;Interrupt controllers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;3.4 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson03/linux/timer.md&#34;&gt;Timers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;3.5 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson03/exercises.md&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 4: Process scheduler&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4.1 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson04/rpi-os.md&#34;&gt;RPi OS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;4.2 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson04/linux/basic_structures.md&#34;&gt;Scheduler basic structures&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;4.3 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson04/linux/fork.md&#34;&gt;Forking a task&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;4.4 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson04/linux/scheduler.md&#34;&gt;Scheduler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;4.5 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson04/exercises.md&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 5: User processes and system calls&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;5.1 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson05/rpi-os.md&#34;&gt;RPi OS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;5.2 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson05/linux.md&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;5.3 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson05/exercises.md&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 6: Virtual memory management&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;6.1 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson06/rpi-os.md&#34;&gt;RPi OS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;6.2 Linux (In progress)&lt;/li&gt; &#xA;   &lt;li&gt;6.3 &lt;a href=&#34;https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/docs/lesson06/exercises.md&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 7: Signals and interrupt waiting&lt;/strong&gt; (To be done)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 8: File systems&lt;/strong&gt; (To be done)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 9: Executable files (ELF)&lt;/strong&gt; (To be done)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 10: Drivers&lt;/strong&gt; (To be done)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lesson 11: Networking&lt;/strong&gt; (To be done)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>