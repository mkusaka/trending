<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:31:14Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RfidResearchGroup/proxmark3</title>
    <updated>2022-10-06T01:31:14Z</updated>
    <id>tag:github.com,2022-10-06:/RfidResearchGroup/proxmark3</id>
    <link href="https://github.com/RfidResearchGroup/proxmark3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Iceman fork of Proxmark3 / RFID / NFC reader, writer, sniffer and emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Iceman Fork - Proxmark3 a RFID / NFC project.&lt;/h1&gt; &#xA;&lt;p&gt;The Proxmark3 is the swiss-army tool of RFID, allowing for interactions with the vast majority of RFID tags on a global scale. Originally built by Jonathan Westhues, the device is now the goto tool for RFID Analysis for the enthusiast. Iceman repository is considered to be the pinnacle of features and functionality, enabling a huge range of extremely useful and convenient commands and LUA scripts to automate chip identification, penetration testing, and programming&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Latest Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coverity&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Contributors&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/RfidResearchGroup/proxmark3/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/rfidresearchgroup/proxmark3&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/proxmark3-rrg-iceman-repo&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/19334/badge.svg?sanitize=true&#34; alt=&#34;Coverity Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/rfidresearchgroup/proxmark3&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Actions OSX CI&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Actions Ubuntu CI&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Actions Windows CI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/RfidResearchGroup/proxmark3/workflows/MacOS%20Build%20and%20Test/badge.svg?branch=master&#34; alt=&#34;MacOS Build and Test&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/RfidResearchGroup/proxmark3/workflows/Ubuntu%20Build%20and%20Test/badge.svg?branch=master&#34; alt=&#34;Ubuntu Build and Test&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/RfidResearchGroup/proxmark3/actions/workflows/windows.yml/badge.svg?branch=master&#34; alt=&#34;Windows Build and Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#proxmark3-installation-and-overview&#34;&gt;PROXMARK3 INSTALLATION AND OVERVIEW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#notes--helpful-documents&#34;&gt;Notes / helpful documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#how-to-build&#34;&gt;How to build?&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#proxmark3-rdv4&#34;&gt;Proxmark3 RDV4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#generic-proxmark3-platforms&#34;&gt;Generic Proxmark3 platforms&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#what-has-changed&#34;&gt;What has changed?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#supported-operative-systems&#34;&gt;Supported operative systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#precompiled-binaries&#34;&gt;Precompiled binaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#proxmark3-gui&#34;&gt;Proxmark3 GUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#official-channels&#34;&gt;Official channels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/#copyright-and-licensing-terms&#34;&gt;Copyright and licensing terms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;PROXMARK3 INSTALLATION AND OVERVIEW&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Installation&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Use of the Proxmark3&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Linux-Installation-Instructions.md&#34;&gt;Linux - Setup and Build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/0_Compilation-Instructions.md&#34;&gt;Compilation Instructions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/ModemManager-Must-Be-Discarded.md&#34;&gt;Linux - Important notes on ModemManager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/1_Validation.md&#34;&gt;Validating Proxmark3 Client Functionality&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Mac-OS-X-Homebrew-Installation-Instructions.md&#34;&gt;Mac OS X - Homebrew &amp;amp; Upgrading HomeBrew Tap Formula&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/2_Configuration-and-Verification.md&#34;&gt;First Use and Verification&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Mac-OS-X-MacPorts-Installation-Instructions.md&#34;&gt;Mac OS X - MacPorts&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/3_Commands-and-Features.md&#34;&gt;Commands &amp;amp; Features&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Mac-OS-X-Compile-From-Source-Instructions.md&#34;&gt;Mac OS X - Setup and Build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Windows-Installation-Instructions.md&#34;&gt;Windows - Setup and Build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/termux_notes.md&#34;&gt;Termux / Android - Setup and Build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/bt_manual_v10.md&#34;&gt;Blue Shark Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cheatsheet.md&#34;&gt;Command Cheat Sheet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md&#34;&gt;Advanced Compilation Parameters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/RfidResearchGroup/proxmark3/wiki/More-cheat-sheets&#34;&gt;More Cheat Sheets&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Installation_Instructions/Troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/commands.md&#34;&gt;Complete Client Command Set&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/jtag_notes.md&#34;&gt;JTAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/T5577_Guide.md&#34;&gt;T5577 Introduction Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Notes / helpful documents&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/uart_notes.md&#34;&gt;Notes on UART&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/termux_notes.md&#34;&gt;Notes on Termux / Android&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/path_notes.md&#34;&gt;Notes on paths&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/new_frame_format.md&#34;&gt;Notes on frame format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/trace_notes.md&#34;&gt;Notes on tracelog / wireshark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/emv_notes.md&#34;&gt;Notes on EMV&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/ext_flash_notes.md&#34;&gt;Notes on external flash&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/loclass_notes.md&#34;&gt;Notes on loclass&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Development/Coverity-Scan-Config-and-Run.md&#34;&gt;Notes on Coverity Scan Config &amp;amp; Run&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/extensions_notes.md&#34;&gt;Notes on file formats used with Proxmark3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/mfu_binary_format_notes.md&#34;&gt;Notes on MFU binary format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/fpga_arm_notes.md&#34;&gt;Notes on FPGA &amp;amp; ARM&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/armsrc/Standalone/readme.md&#34;&gt;Developing standalone mode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/RfidResearchGroup/proxmark3/wiki/Standalone-mode&#34;&gt;Wiki about standalone mode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/magic_cards_notes.md&#34;&gt;Notes on Magic UID cards&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/colors_notes.md&#34;&gt;Notes on Color usage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Development/Makefile-vs-CMake.md&#34;&gt;Makefile vs CMake&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cloner_notes.md&#34;&gt;Notes on Cloner guns&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cliparser.md&#34;&gt;Notes on cliparser usage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/clocks.md&#34;&gt;Notes on clocks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/desfire.md&#34;&gt;Notes on MIFARE DESFire&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/cipurse.md&#34;&gt;Notes on CIPURSE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/ndef_type4a.md&#34;&gt;Notes on NDEF type4a&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;How to build?&lt;/h1&gt; &#xA;&lt;h2&gt;Proxmark3 RDV4&lt;/h2&gt; &#xA;&lt;p&gt;See the instruction links in the tables above to build, flash and run for your Proxmark3 RDV4 device.&lt;/p&gt; &#xA;&lt;h2&gt;Generic Proxmark3 platforms&lt;/h2&gt; &#xA;&lt;p&gt;In order to build this repo for generic Proxmark3 platforms we urge you to read &lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md&#34;&gt;Advanced compilation parameters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We define generic Proxmark3 platforms as following devices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RDV1, RDV2, RDV3 easy&lt;/li&gt; &#xA; &lt;li&gt;Ryscorp green PCB version&lt;/li&gt; &#xA; &lt;li&gt;Radiowar black PCB version&lt;/li&gt; &#xA; &lt;li&gt;numerous Chinese adapted versions of the RDV3 easy (kkmoon, PiSwords etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not supported&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚠ Proxmark Evolution (EVO) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown pin assignments.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⚠ Ryscorp Proxmark3 Pro &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: device has different fpga and unknown pin assignments.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Company have dissappared, leaving their customers in the dark.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⚠ iCopy-X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: experimental support, currently incompatible with iCopy-X GUI as Proxmark client commands are now using cliparser.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: see also &lt;a href=&#34;https://github.com/iCopy-X-Community/&#34;&gt;icopyx-community repos&lt;/a&gt; for upstream sources, reversed hw etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Uses DRM to lock down tags, ignores the open source licences. Use on your own risk.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unknown support status&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚠ VX &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown device hw&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⚠ Proxmark3 X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: unknown device hw.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;256kb flash memory size of generic Proxmark3 platforms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠ &lt;strong&gt;Note&lt;/strong&gt;: You need to keep a eye on how large your ARM chip built-in flash memory is. With 512kb you are fine but if its 256kb you need to compile this repo with even less functionality. When running the &lt;code&gt;./pm3-flash-all&lt;/code&gt; you can see which size your device have if you have the bootloader from this repo installed. Otherwise you will find the size reported in the start message when running the Proxmark3 client &lt;code&gt;./pm3&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md#256kb-versions&#34;&gt;OBS! Read the 256kb flash memory advisory&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;What has changed?&lt;/h1&gt; &#xA;&lt;p&gt;Proxmark3 RDV4 hardware modifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added flash memory 256kb&lt;/li&gt; &#xA; &lt;li&gt;added smart card module&lt;/li&gt; &#xA; &lt;li&gt;added FPC connector for peripherals such as Bluetooth+battery addon&lt;/li&gt; &#xA; &lt;li&gt;improved antennas &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;swappable&lt;/li&gt; &#xA;   &lt;li&gt;LF Q factor switch&lt;/li&gt; &#xA;   &lt;li&gt;LF 125/134 frequency switch&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;tiny PCB form factor&lt;/li&gt; &#xA; &lt;li&gt;ABS case&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo vs official Proxmark3 repo:&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/CHANGELOG.md&#34;&gt;Changelog file&lt;/a&gt; which we try to keep updated.&lt;/p&gt; &#xA;&lt;p&gt;In short this repo gives you a completely different user experience when it comes to Proxmark3.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports command tab complete&lt;/li&gt; &#xA; &lt;li&gt;Richer CLI with use of colors / emojis&lt;/li&gt; &#xA; &lt;li&gt;Help text system implemented everywhere&lt;/li&gt; &#xA; &lt;li&gt;Hints system&lt;/li&gt; &#xA; &lt;li&gt;User preference settings&lt;/li&gt; &#xA; &lt;li&gt;Extensive testing with continuous integration build systems on Linux, OSX and Windows, and regular usage of static analysis tools like &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://scan.coverity.com/projects/proxmark3-rrg-iceman-repo/&#34;&gt;Coverity Scan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Cppcheck (v2.6)&lt;/li&gt; &#xA;   &lt;li&gt;GCC and Clang aggressive enforcement of diagnostic flags&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Auto detection of serial ports and seamless integration with Bluetooth addon&lt;/li&gt; &#xA; &lt;li&gt;Reconnect to device from inside client&lt;/li&gt; &#xA; &lt;li&gt;Supports tearoff attacks&lt;/li&gt; &#xA; &lt;li&gt;Supports NFC NDEF type1, type2, type4a, type4b, mifare, barcode&lt;/li&gt; &#xA; &lt;li&gt;Supports pm3 client scripts, lua scripts, python scripts&lt;/li&gt; &#xA; &lt;li&gt;Most comprehensive collection of scripts available&lt;/li&gt; &#xA; &lt;li&gt;Wiegand encoding, decoding.&lt;/li&gt; &#xA; &lt;li&gt;Supports EMV&lt;/li&gt; &#xA; &lt;li&gt;Supports CIPURSE&lt;/li&gt; &#xA; &lt;li&gt;Most standalone modes available with easy compilation&lt;/li&gt; &#xA; &lt;li&gt;Extensive test script for client and external tools&lt;/li&gt; &#xA; &lt;li&gt;Most comprehensive compiled known keys dictionaries&lt;/li&gt; &#xA; &lt;li&gt;Slimed down usb communications with NG-frames&lt;/li&gt; &#xA; &lt;li&gt;The most compiled public known key recovery software&lt;/li&gt; &#xA; &lt;li&gt;The fastest implementations of said software&lt;/li&gt; &#xA; &lt;li&gt;Support multiple fileformats for dump files (BIN/EML/JSON)&lt;/li&gt; &#xA; &lt;li&gt;Interoperability of said fileformats with libnfc, MFC tool app etc&lt;/li&gt; &#xA; &lt;li&gt;Supports more RFID based protocols than ever&lt;/li&gt; &#xA; &lt;li&gt;Easy install for package maintainers, distro maintainers&lt;/li&gt; &#xA; &lt;li&gt;Supports cmake, make&lt;/li&gt; &#xA; &lt;li&gt;Builds without errors or warnings on more OS/platforms than ever&lt;/li&gt; &#xA; &lt;li&gt;Available as package on known distros like Gentoo, Kali, Termux, Macports, Homebrew&lt;/li&gt; &#xA; &lt;li&gt;Much more documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠ &lt;strong&gt;Note&lt;/strong&gt;: This is a bleeding edge repository. The maintainers actively is working out of this repository and will be periodically re-structuring the code to make it easier to comprehend, navigate, build, test, and contribute to, so &lt;strong&gt;DO expect significant changes to code layout on a regular basis&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👉 &lt;strong&gt;Remember!&lt;/strong&gt; If you intend to contribute to the code, please read the &lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/CONTRIBUTING.md&#34;&gt;coding style notes&lt;/a&gt; first. We usually merge your contributions fast since we do like the idea of getting a functionality in the Proxmark3 and weed out the bugs afterwards.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/RfidResearchGroup/proxmark3/wiki/Public-Roadmap&#34;&gt;public roadmap&lt;/a&gt; is an excellent start to read if you are interesting in contributing.&lt;/p&gt; &#xA;&lt;h2&gt;Supported operative systems&lt;/h2&gt; &#xA;&lt;p&gt;This repo compiles nicely on&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WSL1 on Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Proxspace environment &lt;a href=&#34;https://github.com/Gator96100/ProxSpace/releases&#34;&gt;release v3.10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows/MinGW environment&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu, ParrotOS, Gentoo, Pentoo, Kali, NetHunter, Arch Linux, Fedora, Debian, Raspbian&lt;/li&gt; &#xA; &lt;li&gt;Android / Termux&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X / Homebrew (or MacPorts, experimental) / Apple Silicon M1&lt;/li&gt; &#xA; &lt;li&gt;Docker container &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/secopsconsult/proxmark3&#34;&gt; Iceman repo based ubuntu 18.04 container &lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/iceman1001/proxmark3/&#34;&gt; Iceman fork based container v1.7 &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Precompiled binaries&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.proxmarkbuilds.org/&#34;&gt;Proxmark3 precompiled builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Proxmark3 GUI&lt;/h2&gt; &#xA;&lt;p&gt;The official PM3-GUI from Gaucho will not work. Not to mention is quite old and not maintained any longer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/burma69/PM3UniversalGUI&#34;&gt;Proxmark3 Universal GUI&lt;/a&gt; will work more or less.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wh201906/Proxmark3GUI/&#34;&gt;Proxmark3 GUI cross-compiled&lt;/a&gt; which is recently updated and claims to support latest source of this repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Phreak87/Proxmark3_GUI&#34;&gt;Proxmark3_GUI&lt;/a&gt; simple gui in vb.net&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official channels&lt;/h2&gt; &#xA;&lt;p&gt;Where do you find the community?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/iceman&#34;&gt;RFID Hacking community discord server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.libera.chat/?channels=#proxmark3&#34;&gt;Proxmark3 IRC channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/proxmark3/&#34;&gt;Proxmark3 sub reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.proxmark.org/forum/index.php&#34;&gt;Proxmark3 forum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;To all distro, package maintainers, we tried to make your life easier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; is now available and if you want to know more.&lt;/p&gt; &#xA;&lt;p&gt;This document will be helpful for you&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/doc/md/Development/Maintainers.md&#34;&gt;Notes for maintainers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Use this bibtex to cite this repository globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{proxmark3,&#xA;  author = {C. {Herrmann} and P. {Teuwen} and O. {Moiseenko} and M. {Walker} and others},&#xA;  title = {{Proxmark3 -- Iceman repo}},&#xA;  howpublished = {\url{https://github.com/RfidResearchGroup/proxmark3}},&#xA;  keywords = {rfid nfc iceman proxmark3 125khz 134khz 13.56mhz},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to refer to a specific state of the repository, use a commit number or a date of access, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  note = {Accessed: commit 12327f71a27da23831901847886aaf20e8ad3ca0}&#xA;  note = {Accessed: 2021-01-01}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright and licensing terms&lt;/h2&gt; &#xA;&lt;p&gt;Each contribution is under the copyright of its author. See &lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/AUTHORS.md&#34;&gt;AUTHORS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Proxmark3 source code is covered by the following licensing terms, usually referred as &lt;strong&gt;GPLv3 or later&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A copy of the GPLv3 is available in &lt;a href=&#34;https://raw.githubusercontent.com/RfidResearchGroup/proxmark3/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some dependencies may be under other free licensing terms compatible with the Proxmark3 licensing terms, see their respective description.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>enjoy-digital/litex</title>
    <updated>2022-10-06T01:31:14Z</updated>
    <id>tag:github.com,2022-10-06:/enjoy-digital/litex</id>
    <link href="https://github.com/enjoy-digital/litex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your hardware, easily!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/enjoy-digital/litex/master/doc/litex.png&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;             Copyright 2012-2022 / Enjoy-Digital &amp;amp; LiteX developers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litex/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litex/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/License-BSD%202--Clause-orange.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to LiteX!&lt;/h1&gt; &#xA;&lt;p&gt;The LiteX framework provides a convenient and efficient infrastructure to create FPGA Cores/SoCs, to explore various digital design architectures and create &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Projects&#34;&gt;full FPGA based systems&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LiteX SoC builder framework quick tour/overview: &lt;a href=&#34;https://docs.google.com/presentation/d/1mQOWqgmyQxpjLAzFwCulqgkp0TuxmaIDYp5iUfPqqIk/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to get started and/or looking for documentation? Make sure to visit the &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki&#34;&gt;Wiki&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A question or want to get in touch? Our IRC channel is [#litex at irc.libera.chat]&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;LiteX provides all the common components required to easily create an FPGA Core/SoC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Buses and Streams (Wishbone, AXI, Avalon-ST) and their interconnect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Simple cores: RAM, ROM, Timer, UART, JTAG, etc….&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Complex cores through the ecosystem of cores: &lt;a href=&#34;https://github.com/enjoy-digital/litedram&#34;&gt;LiteDRAM&lt;/a&gt;, &lt;a href=&#34;https://github.com/enjoy-digital/litepcie&#34;&gt;LitePCIe&lt;/a&gt;, &lt;a href=&#34;https://github.com/enjoy-digital/liteeth&#34;&gt;LiteEth&lt;/a&gt;, &lt;a href=&#34;https://github.com/enjoy-digital/litesata&#34;&gt;LiteSATA&lt;/a&gt;, etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Various CPUs &amp;amp; ISAs: RISC-V, OpenRISC, LM32, Zynq, X86 (through a PCIe), etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Mixed languages support with VHDL/Verilog/(n)Migen/Spinal-HDL/etc... integration capabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Powerful debug infrastructure through the various &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Use-Host-Bridge-to-control-debug-a-SoC&#34;&gt;bridges&lt;/a&gt; and &lt;a href=&#34;https://github.com/enjoy-digital/litescope&#34;&gt;Litescope&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Direct/Fast simulation through &lt;a href=&#34;https://www.veripool.org/verilator/&#34;&gt;Verilator&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Build backends for open-source and vendors toolchains.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; And a lot more... :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By combining LiteX with the ecosystem of cores, creating complex SoCs becomes a lot easier than with traditional approaches while providing better portability and flexibility: Here is for example a Multi-core Linux Capable SoC based on VexRiscv-SMP CPU, LiteDRAM, LiteSATA built and integrated with LiteX, running on a cheap repurposed &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Use-LiteX-on-the-Acorn-CLE-215&#34;&gt;Acorn CLE215+ Mining Board&lt;/a&gt;: &lt;img src=&#34;https://user-images.githubusercontent.com/1450143/103343266-f8cc9a00-4a8b-11eb-9444-f02e1522a490.png&#34; alt=&#34;&#34;&gt; For more info, have a look at &lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv&#34;&gt;Linux-on-LiteX-Vexriscv&lt;/a&gt; project and try running Linux on your FPGA board!&lt;/p&gt; &#xA;&lt;p&gt;LiteX&#39;s digital logic is currently described with &lt;a href=&#34;https://github.com/m-labs/migen&#34;&gt;Migen&lt;/a&gt; which does not prevent users to create mixed language projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s very common and easy to integrate VHDL/Verilog/SystemVerilog/nMigen/Spinal-HDL code in LiteX!&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s also very common to do the opposite and generate the LiteX design as a verilog file and integrate it in a traditional flow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;LiteX was initially developed by &lt;a href=&#34;http://enjoy-digital.fr/&#34;&gt;Enjoy-Digital&lt;/a&gt; to create projects for clients (and we are still using it for that :)) and trying to take the different clients&#39; requirements/needs consideration made, we think, the framework very flexible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some users only want to use it to easily interconnect their existing VHDL/Verilog/SV cores.&lt;/li&gt; &#xA; &lt;li&gt;Some users are only interested to reuse the PCIe/Ethernet/SATA/etc cores as regular core and just integrate them in their traditional flow.&lt;/li&gt; &#xA; &lt;li&gt;Some users with a hardware background start with the above approaches and then switch later to the full Python flow since find it more efficient.&lt;/li&gt; &#xA; &lt;li&gt;Some users with a software background and fluent with Python start playing with FPGAs while they would probably never touch FPGA otherwise :)&lt;/li&gt; &#xA; &lt;li&gt;Etc...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are well aware that everyone has a different background, so it&#39;s up to you to pick the right approach with LiteX that will be convenient for you!&lt;/p&gt; &#xA;&lt;p&gt;To get started we encourage you to read the &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You already have a FPGA board(s)? Visit &lt;a href=&#34;https://github.com/litex-hub/litex-boards&#34;&gt;LiteX-Boards&lt;/a&gt; to see if your board(s) is already supported!&lt;/p&gt; &#xA;&lt;p&gt;The framework is also far from perfect and we&#39;ll be happy to have your &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Feedback-Contribution-Support&#34;&gt;feedback or/and contributions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Have fun! &lt;span&gt;😉&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Typical LiteX design flow:&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                      +---------------+&#xA;                                      |FPGA toolchains|&#xA;                                      +----^-----+----+&#xA;                                           |     |&#xA;                                        +--+-----v--+&#xA;                       +-------+        |           |&#xA;                       | Migen +--------&amp;gt;           |&#xA;                       +-------+        |           |        Your design&#xA;                                        |   LiteX   +---&amp;gt; ready to be used!&#xA;                                        |           |&#xA;              +----------------------+  |           |&#xA;              |LiteX Cores Ecosystem +--&amp;gt;           |&#xA;              +----------------------+  +-^-------^-+&#xA;               (Eth, SATA, DRAM, USB,     |       |&#xA;                PCIe, Video, etc...)      +       +&#xA;                                         board   target&#xA;                                         file    file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LiteX already supports various softcores CPUs: VexRiscv, Rocket, LM32, Mor1kx, PicoRV32, BlackParrot and is compatible with the LiteX&#39;s Cores Ecosystem:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/litex-hub/litex-boards&#34;&gt;LiteX-Boards&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/litex-hub/litex-boards/actions&#34;&gt;&lt;img src=&#34;https://github.com/litex-hub/litex-boards/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boards support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/litedram&#34;&gt;LiteDRAM&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litedram/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litedram/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DRAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/liteeth&#34;&gt;LiteEth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/liteeth/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/liteeth/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ethernet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/litepcie&#34;&gt;LitePCIe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litepcie/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litepcie/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PCIe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/litesata&#34;&gt;LiteSATA&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litesata/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litesata/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SATA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/litesdcard&#34;&gt;LiteSDCard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litesdcard/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litesdcard/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SD card&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/liteiclink&#34;&gt;LiteICLink&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/liteiclink/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/liteiclink/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inter-Chip communication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/litejesd204b&#34;&gt;LiteJESD204B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litejesd204b/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litejesd204b/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JESD204B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/litex-hub/litespi&#34;&gt;LiteSPI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/litex-hub/litespi/actions&#34;&gt;&lt;img src=&#34;https://github.com/litex-hub/litespi/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SPI/SPI-Flash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/enjoy-digital/litescope&#34;&gt;LiteScope&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enjoy-digital/litescope/actions&#34;&gt;&lt;img src=&#34;https://github.com/enjoy-digital/litescope/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logic analyzer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Examples of designs built with LiteX:&lt;/h1&gt; &#xA;&lt;p&gt;Custom PCIe SDI Capture/Playback board built around LitePCIe and integrated with LiteX, allowing full control of the SDI flow and very low latency. &lt;img src=&#34;https://user-images.githubusercontent.com/1450143/103343791-282fd680-4a8d-11eb-82bd-c068ac1ad293.png&#34; alt=&#34;&#34;&gt; Alternative firmware/gateware for the SDS1104X-E Scope: &lt;img src=&#34;https://user-images.githubusercontent.com/1450143/124901562-6977e480-dfe2-11eb-9071-4344d1146968.png&#34; alt=&#34;enter image description here&#34;&gt; HBM2 test infrastructure on Forest Kitten 33: &lt;img src=&#34;https://user-images.githubusercontent.com/1450143/124902018-d4c1b680-dfe2-11eb-89c4-8b498605c34d.png&#34; alt=&#34;enter image description here&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To discover more products/projects built with LiteX, visit the &lt;a href=&#34;https://github.com/enjoy-digital/litex/wiki/Projects&#34;&gt;projects page&lt;/a&gt; on the Wiki.&lt;/p&gt; &#xA;&lt;h1&gt;Papers, Presentations, Tutorials, Links&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;FPGA lessons/tutorials:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/enjoy-digital/fpga_101&#34;&gt;https://github.com/enjoy-digital/fpga_101&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Migen tutorial:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m-labs.hk/migen/manual&#34;&gt;https://m-labs.hk/migen/manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OSDA 2019 paper/slides:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osda.gitlab.io/19/1.1.pdf&#34;&gt;https://osda.gitlab.io/19/1.1.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osda.gitlab.io/19/1.1-slides.pdf&#34;&gt;https://osda.gitlab.io/19/1.1-slides.pdf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux on LiteX-Vexriscv:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv&#34;&gt;https://github.com/litex-hub/linux-on-litex-vexriscv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;RISC-V Getting Started Guide:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://risc-v-getting-started-guide.readthedocs.io/en/latest/&#34;&gt;https://risc-v-getting-started-guide.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;LiteX vs. Vivado First Impressions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bunniestudios.com/blog/?p=5018&#34;&gt;https://www.bunniestudios.com/blog/?p=5018&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;35C3 - Snakes and Rabbits - How CCC shaped an open hardware success:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AlmVxR0417c&#34;&gt;https://www.youtube.com/watch?v=AlmVxR0417c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tim has to many projects - LatchUp Edition:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=v7WrTmexod0&#34;&gt;https://www.youtube.com/watch?v=v7WrTmexod0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Sub-packages&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;litex.gen&lt;/strong&gt; Provides specific or experimental modules to generate HDL that are not integrated in Migen.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;litex.build:&lt;/strong&gt; Provides tools to build FPGA bitstreams (interface to vendor toolchains) and to simulate HDL code or full SoCs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;litex.soc:&lt;/strong&gt; Provides definitions/modules to build cores (bus, bank, flow), cores and tools to build a SoC from such cores.&lt;/p&gt; &#xA;&lt;h1&gt;Quick start guide&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python 3.6+ and FPGA vendor&#39;s development tools and/or &lt;a href=&#34;http://www.veripool.org/&#34;&gt;Verilator&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Migen/LiteX and the LiteX&#39;s cores:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py&#xA;$ chmod +x litex_setup.py&#xA;$ ./litex_setup.py --init --install --user (--user to install to user directory) --config=(minimal, standard, full)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Later, if you need to update all repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./litex_setup.py --update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On MacOS, make sure you have &lt;a href=&#34;https://brew.sh&#34;&gt;HomeBrew&lt;/a&gt; installed. Then do, &lt;code&gt;brew install wget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On Windows, it&#39;s possible you&#39;ll have to set &lt;code&gt;SHELL&lt;/code&gt; environment variable to &lt;code&gt;SHELL=cmd.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install a RISC-V toolchain (Only if you want to test/create a SoC with a CPU):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip3 install meson ninja&#xA;$ ./litex_setup.py --gcc=riscv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Build the target of your board...:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Go to litex-boards/litex_boards/targets and execute the target you want to build.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;... and/or install &lt;a href=&#34;http://www.veripool.org/&#34;&gt;Verilator&lt;/a&gt; and test LiteX directly on your computer without any FPGA board:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;On Linux (Ubuntu):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt install libevent-dev libjson-c-dev verilator&#xA;$ litex_sim --cpu-type=vexriscv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install json-c verilator libevent&#xA;$ brew cask install tuntap&#xA;$ litex_sim --cpu-type=vexriscv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run a terminal program on the board&#39;s serial port at 115200 8-N-1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should get the BIOS prompt like the one below.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/enjoy-digital/litex/master/doc/bios_screenshot.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/enjoy-digital/litex/master/doc/litex-hub.png&#34; width=&#34;400&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Over the years a friendly community has grown around LiteX and the ecosystem of cores. Feedbacks and contributions have already greatly improved the project, EnjoyDigital still leads the development but it is now a community project and collaborative projects created around/with LiteX can be found at &lt;a href=&#34;https://github.com/litex-hub&#34;&gt;https://github.com/litex-hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;E-mail: &lt;a href=&#34;mailto:florent@enjoy-digital.fr&#34;&gt;florent@enjoy-digital.fr&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sparklemotion/nokogiri</title>
    <updated>2022-10-06T01:31:14Z</updated>
    <id>tag:github.com,2022-10-06:/sparklemotion/nokogiri</id>
    <link href="https://github.com/sparklemotion/nokogiri" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nokogiri (鋸) makes it easy and painless to work with XML and HTML from Ruby.&lt;/p&gt;&lt;hr&gt;&lt;div&gt;&#xA; &lt;img src=&#34;https://nokogiri.org/images/nokogiri-serif-black.png&#34; align=&#34;right&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Nokogiri&lt;/h1&gt; &#xA;&lt;p&gt;Nokogiri (鋸) makes it easy and painless to work with XML and HTML from Ruby. It provides a sensible, easy-to-understand API for &lt;a href=&#34;https://nokogiri.org/tutorials/parsing_an_html_xml_document.html&#34;&gt;reading&lt;/a&gt;, writing, &lt;a href=&#34;https://nokogiri.org/tutorials/modifying_an_html_xml_document.html&#34;&gt;modifying&lt;/a&gt;, and &lt;a href=&#34;https://nokogiri.org/tutorials/searching_a_xml_html_document.html&#34;&gt;querying&lt;/a&gt; documents. It is fast and standards-compliant by relying on native parsers like libxml2 (CRuby) and xerces (JRuby).&lt;/p&gt; &#xA;&lt;h2&gt;Guiding Principles&lt;/h2&gt; &#xA;&lt;p&gt;Some guiding principles Nokogiri tries to follow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;be secure-by-default by treating all documents as &lt;strong&gt;untrusted&lt;/strong&gt; by default&lt;/li&gt; &#xA; &lt;li&gt;be a &lt;strong&gt;thin-as-reasonable layer&lt;/strong&gt; on top of the underlying parsers, and don&#39;t attempt to fix behavioral differences between the parsers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DOM Parser for XML, HTML4, and HTML5&lt;/li&gt; &#xA; &lt;li&gt;SAX Parser for XML and HTML4&lt;/li&gt; &#xA; &lt;li&gt;Push Parser for XML and HTML4&lt;/li&gt; &#xA; &lt;li&gt;Document search via XPath 1.0&lt;/li&gt; &#xA; &lt;li&gt;Document search via CSS3 selectors, with some jquery-like extensions&lt;/li&gt; &#xA; &lt;li&gt;XSD Schema validation&lt;/li&gt; &#xA; &lt;li&gt;XSLT transformation&lt;/li&gt; &#xA; &lt;li&gt;&#34;Builder&#34; DSL for XML and HTML documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sparklemotion/nokogiri/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/sparklemotion/nokogiri/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Github Actions CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/flavorjones/nokogiri/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/xj2pqwvlxwuwgr06/branch/main?svg=true&#34; alt=&#34;Appveyor CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/nokogiri&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/nokogiri.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-dependabot-security-updates#about-compatibility-scores&#34;&gt;&lt;img src=&#34;https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=nokogiri&amp;amp;package-manager=bundler&amp;amp;previous-version=1.11.7&amp;amp;new-version=1.12.5&#34; alt=&#34;SemVer compatibility&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5344&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5344/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-nokogiri?utm_source=rubygems-nokogiri&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/package/rubygems/nokogiri&#34; alt=&#34;Tidelift dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support, Getting Help, and Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;All official documentation is posted at &lt;a href=&#34;https://nokogiri.org&#34;&gt;https://nokogiri.org&lt;/a&gt; (the source for which is at &lt;a href=&#34;https://github.com/sparklemotion/nokogiri.org/&#34;&gt;https://github.com/sparklemotion/nokogiri.org/&lt;/a&gt;, and we welcome contributions).&lt;/p&gt; &#xA;&lt;p&gt;Consider subscribing to &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-nokogiri?utm_source=rubygems-nokogiri&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Tidelift&lt;/a&gt; which provides license assurances and timely security notifications for your open source dependencies, including Nokogiri. &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-nokogiri?utm_source=rubygems-nokogiri&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Tidelift&lt;/a&gt; subscriptions also help the Nokogiri maintainers fund our &lt;a href=&#34;https://ci.nokogiri.org&#34;&gt;automated testing&lt;/a&gt; which in turn allows us to ship releases, bugfixes, and security updates more often.&lt;/p&gt; &#xA;&lt;h3&gt;Reading&lt;/h3&gt; &#xA;&lt;p&gt;Your first stops for learning more about Nokogiri should be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nokogiri.org/rdoc/index.html&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nokogiri.org/tutorials/toc.html&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An excellent community-maintained &lt;a href=&#34;https://github.com/sparklemotion/nokogiri/wiki/Cheat-sheet&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ask For Help&lt;/h3&gt; &#xA;&lt;p&gt;There are a few ways to ask exploratory questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Nokogiri mailing list is active at &lt;a href=&#34;https://groups.google.com/group/nokogiri-talk&#34;&gt;https://groups.google.com/group/nokogiri-talk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open an issue using the &#34;Help Request&#34; template at &lt;a href=&#34;https://github.com/sparklemotion/nokogiri/issues&#34;&gt;https://github.com/sparklemotion/nokogiri/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do not mail the maintainers at their personal addresses.&lt;/p&gt; &#xA;&lt;h3&gt;Report A Bug&lt;/h3&gt; &#xA;&lt;p&gt;The Nokogiri bug tracker is at &lt;a href=&#34;https://github.com/sparklemotion/nokogiri/issues&#34;&gt;https://github.com/sparklemotion/nokogiri/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please use the &#34;Bug Report&#34; or &#34;Installation Difficulties&#34; templates.&lt;/p&gt; &#xA;&lt;h3&gt;Security and Vulnerability Reporting&lt;/h3&gt; &#xA;&lt;p&gt;Please report vulnerabilities at &lt;a href=&#34;https://hackerone.com/nokogiri&#34;&gt;https://hackerone.com/nokogiri&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full information and description of our security policy is in &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Semantic Versioning Policy&lt;/h3&gt; &#xA;&lt;p&gt;Nokogiri follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; (since 2017 or so). &lt;a href=&#34;https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-dependabot-security-updates#about-compatibility-scores&#34;&gt;&lt;img src=&#34;https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=nokogiri&amp;amp;package-manager=bundler&amp;amp;previous-version=1.11.7&amp;amp;new-version=1.12.5&#34; alt=&#34;Dependabot&#39;s SemVer compatibility score for Nokogiri&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We bump &lt;code&gt;Major.Minor.Patch&lt;/code&gt; versions following this guidance:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Major&lt;/code&gt;: (we&#39;ve never done this)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significant backwards-incompatible changes to the public API that would require rewriting existing application code.&lt;/li&gt; &#xA; &lt;li&gt;Some examples of backwards-incompatible changes we might someday consider for a Major release are at &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/ROADMAP.md&#34;&gt;&lt;code&gt;ROADMAP.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Minor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features and bugfixes.&lt;/li&gt; &#xA; &lt;li&gt;Updating packaged libraries for non-security-related reasons.&lt;/li&gt; &#xA; &lt;li&gt;Dropping support for EOLed Ruby versions. &lt;a href=&#34;https://github.com/sparklemotion/nokogiri/issues/1568&#34;&gt;Some folks find this objectionable&lt;/a&gt;, but &lt;a href=&#34;https://semver.org/#what-should-i-do-if-i-update-my-own-dependencies-without-changing-the-public-api&#34;&gt;SemVer says this is OK if the public API hasn&#39;t changed&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Backwards-incompatible changes to internal or private methods and constants. These are detailed in the &#34;Changes&#34; section of each changelog entry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Patch&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugfixes.&lt;/li&gt; &#xA; &lt;li&gt;Security updates.&lt;/li&gt; &#xA; &lt;li&gt;Updating packaged libraries for security-related reasons.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby &amp;gt;= 2.6&lt;/li&gt; &#xA; &lt;li&gt;JRuby &amp;gt;= 9.3.0.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Native Gems: Faster, more reliable installation&lt;/h3&gt; &#xA;&lt;p&gt;&#34;Native gems&#34; contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or for system dependencies to exist. This results in &lt;strong&gt;much faster installation&lt;/strong&gt; and &lt;strong&gt;more reliable installation&lt;/strong&gt;, which as you probably know are the biggest headaches for Nokogiri users.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;p&gt;Nokogiri ships pre-compiled, &#34;native&#34; gems for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;x86-linux&lt;/code&gt; and &lt;code&gt;x86_64-linux&lt;/code&gt; (req: &lt;code&gt;glibc &amp;gt;= 2.17&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aarch64-linux&lt;/code&gt; and &lt;code&gt;arm-linux&lt;/code&gt; (req: &lt;code&gt;glibc &amp;gt;= 2.29&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Note that musl platforms like Alpine &lt;strong&gt;are&lt;/strong&gt; supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Darwin/MacOS: &lt;code&gt;x86_64-darwin&lt;/code&gt; and &lt;code&gt;arm64-darwin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;x86-mingw32&lt;/code&gt;, &lt;code&gt;x64-mingw32&lt;/code&gt;, and &lt;code&gt;x64-mingw-ucrt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java: any platform running JRuby 9.3 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To determine whether your system supports one of these gems, look at the output of &lt;code&gt;bundle platform&lt;/code&gt; or &lt;code&gt;ruby -e &#39;puts Gem::Platform.local.to_s&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re on a supported platform, either &lt;code&gt;gem install&lt;/code&gt; or &lt;code&gt;bundle install&lt;/code&gt; should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install nokogiri&#xA;Fetching nokogiri-1.11.0-x86_64-linux.gem&#xA;Successfully installed nokogiri-1.11.0-x86_64-linux&#xA;1 gem installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Installation Options&lt;/h3&gt; &#xA;&lt;p&gt;Because Nokogiri is a C extension, it requires that you have a C compiler toolchain, Ruby development header files, and some system dependencies installed.&lt;/p&gt; &#xA;&lt;p&gt;The following may work for you if you have an appropriately-configured system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install nokogiri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues, please visit &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html&#34;&gt;Installing Nokogiri&lt;/a&gt; for more complete instructions and troubleshooting.&lt;/p&gt; &#xA;&lt;h2&gt;How To Use Nokogiri&lt;/h2&gt; &#xA;&lt;p&gt;Nokogiri is a large library, and so it&#39;s challenging to briefly summarize it. We&#39;ve tried to provide long, real-world examples at &lt;a href=&#34;https://nokogiri.org/tutorials/toc.html&#34;&gt;Tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing and Querying&lt;/h3&gt; &#xA;&lt;p&gt;Here is example usage for parsing and querying a document:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#! /usr/bin/env ruby&#xA;&#xA;require &#39;nokogiri&#39;&#xA;require &#39;open-uri&#39;&#xA;&#xA;# Fetch and parse HTML document&#xA;doc = Nokogiri::HTML(URI.open(&#39;https://nokogiri.org/tutorials/installing_nokogiri.html&#39;))&#xA;&#xA;# Search for nodes by css&#xA;doc.css(&#39;nav ul.menu li a&#39;, &#39;article h2&#39;).each do |link|&#xA;  puts link.content&#xA;end&#xA;&#xA;# Search for nodes by xpath&#xA;doc.xpath(&#39;//nav//ul//li/a&#39;, &#39;//article//h2&#39;).each do |link|&#xA;  puts link.content&#xA;end&#xA;&#xA;# Or mix and match&#xA;doc.search(&#39;nav ul.menu li a&#39;, &#39;//article//h2&#39;).each do |link|&#xA;  puts link.content&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;p&gt;Strings are always stored as UTF-8 internally. Methods that return text values will always return UTF-8 encoded strings. Methods that return a string containing markup (like &lt;code&gt;to_xml&lt;/code&gt;, &lt;code&gt;to_html&lt;/code&gt; and &lt;code&gt;inner_html&lt;/code&gt;) will return a string encoded like the source document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some documents declare one encoding, but actually use a different one. In these cases, which encoding should the parser choose?&lt;/p&gt; &#xA;&lt;p&gt;Data is just a stream of bytes. Humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. &lt;code&gt;libxml2&lt;/code&gt; does its best, but it can&#39;t be right all the time.&lt;/p&gt; &#xA;&lt;p&gt;If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding. Here is an example of explicitly setting the encoding to EUC-JP on the parser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  doc = Nokogiri.XML(&#39;&amp;lt;foo&amp;gt;&amp;lt;bar /&amp;gt;&amp;lt;/foo&amp;gt;&#39;, nil, &#39;EUC-JP&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Technical Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Guiding Principles&lt;/h3&gt; &#xA;&lt;p&gt;As noted above, two guiding principles of the software are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;be secure-by-default by treating all documents as &lt;strong&gt;untrusted&lt;/strong&gt; by default&lt;/li&gt; &#xA; &lt;li&gt;be a &lt;strong&gt;thin-as-reasonable layer&lt;/strong&gt; on top of the underlying parsers, and don&#39;t attempt to fix behavioral differences between the parsers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example).&lt;/p&gt; &#xA;&lt;h3&gt;CRuby&lt;/h3&gt; &#xA;&lt;p&gt;The Ruby (a.k.a., CRuby, MRI, YARV) implementation is a C extension that depends on libxml2 and libxslt (which in turn depend on zlib and possibly libiconv).&lt;/p&gt; &#xA;&lt;p&gt;These dependencies are met by default by Nokogiri&#39;s packaged versions of the libxml2 and libxslt source code, but a configuration option &lt;code&gt;--use-system-libraries&lt;/code&gt; is provided to allow specification of alternative library locations. See &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html&#34;&gt;Installing Nokogiri&lt;/a&gt; for full documentation.&lt;/p&gt; &#xA;&lt;p&gt;We provide native gems by pre-compiling libxml2 and libxslt (and potentially zlib and libiconv) and packaging them into the gem file. In this case, no compilation is necessary at installation time, which leads to faster and more reliable installation.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/LICENSE-DEPENDENCIES.md&#34;&gt;&lt;code&gt;LICENSE-DEPENDENCIES.md&lt;/code&gt;&lt;/a&gt; for more information on which dependencies are provided in which native and source gems.&lt;/p&gt; &#xA;&lt;h3&gt;JRuby&lt;/h3&gt; &#xA;&lt;p&gt;The Java (a.k.a. JRuby) implementation is a Java extension that depends primarily on Xerces and NekoHTML for parsing, though additional dependencies are on &lt;code&gt;isorelax&lt;/code&gt;, &lt;code&gt;nekodtd&lt;/code&gt;, &lt;code&gt;jing&lt;/code&gt;, &lt;code&gt;serializer&lt;/code&gt;, &lt;code&gt;xalan-j&lt;/code&gt;, and &lt;code&gt;xml-apis&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These dependencies are provided by pre-compiled jar files packaged in the &lt;code&gt;java&lt;/code&gt; platform gem.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/LICENSE-DEPENDENCIES.md&#34;&gt;&lt;code&gt;LICENSE-DEPENDENCIES.md&lt;/code&gt;&lt;/a&gt; for more information on which dependencies are provided in which native and source gems.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for an intro guide to developing Nokogiri.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve adopted the Contributor Covenant code of conduct, which you can read in full in &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;See this license at &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/LICENSE.md&#34;&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Some additional libraries may be distributed with your version of Nokogiri. Please see &lt;a href=&#34;https://raw.githubusercontent.com/sparklemotion/nokogiri/main/LICENSE-DEPENDENCIES.md&#34;&gt;&lt;code&gt;LICENSE-DEPENDENCIES.md&lt;/code&gt;&lt;/a&gt; for a discussion of the variations as well as the licenses thereof.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mike Dalessio&lt;/li&gt; &#xA; &lt;li&gt;Aaron Patterson&lt;/li&gt; &#xA; &lt;li&gt;Yoko Harada&lt;/li&gt; &#xA; &lt;li&gt;Akinori MUSHA&lt;/li&gt; &#xA; &lt;li&gt;John Shahid&lt;/li&gt; &#xA; &lt;li&gt;Karol Bucek&lt;/li&gt; &#xA; &lt;li&gt;Sam Ruby&lt;/li&gt; &#xA; &lt;li&gt;Craig Barnes&lt;/li&gt; &#xA; &lt;li&gt;Stephen Checkoway&lt;/li&gt; &#xA; &lt;li&gt;Lars Kanis&lt;/li&gt; &#xA; &lt;li&gt;Sergio Arbeo&lt;/li&gt; &#xA; &lt;li&gt;Timothy Elliott&lt;/li&gt; &#xA; &lt;li&gt;Nobuyoshi Nakada&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>