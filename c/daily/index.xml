<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:26:20Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jasonporritt/rg351_m8c</title>
    <updated>2024-02-18T01:26:20Z</updated>
    <id>tag:github.com,2024-02-18:/jasonporritt/rg351_m8c</id>
    <link href="https://github.com/jasonporritt/rg351_m8c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;m8 headless for rg351 devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;m8 Headless for RG351 devices&lt;/h1&gt; &#xA;&lt;h4&gt;Requires M8 headless on Teensy 4.1. See: &lt;a href=&#34;https://github.com/DirtyWave/M8Docs/raw/main/docs/M8HeadlessSetup.md&#34;&gt;https://github.com/DirtyWave/M8Docs/blob/main/docs/M8HeadlessSetup.md&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This setup should work for a variety of rg351 devices, including the rg351m, rg351mp, and rg351v. It requires a custom firmware install. Instructions will focus on ArkOS but it may also work with 351Elec or TheRA with a few tweaks.&lt;/p&gt; &#xA;&lt;p&gt;Source files are included in the releases, so it may be possible to compile on desktop systems, consoles, and other devices.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to lamaa for the m8c code that makes this thing work&lt;/h2&gt; &#xA;&lt;p&gt;lamaa&#39;s repo is here: &lt;a href=&#34;https://github.com/laamaa/m8c/&#34;&gt;https://github.com/laamaa/m8c/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download a release here&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jasonporritt/rg351_m8c/releases&#34;&gt;https://github.com/jasonporritt/rg351_m8c/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download one of the rg351_m8c releases from the link above if you don&#39;t want to compile m8c yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install ArkOS following their directions. &lt;a href=&#34;https://github.com/christianhaitian/arkos/wiki&#34;&gt;https://github.com/christianhaitian/arkos/wiki&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See also &lt;a href=&#34;https://github.com/jasonporritt/rg351_m8c/raw/master/ArkOS_cheatsheet.md&#34;&gt;ArkOS cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Copy the M8 folder into /roms/ports/ directory (or /roms2/ports if you&#39;re using the second SD card on an rg351mp)&lt;/li&gt; &#xA; &lt;li&gt;Put the SD card in your device and boot it up&lt;/li&gt; &#xA; &lt;li&gt;Under Ports you should now see an m8 item with a few scripts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SETUP folder &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GAMEPAD-CONFIG - see Features below&lt;/li&gt; &#xA;     &lt;li&gt;SETUP - will install libserialport and add your user to the proper group to interact with serial devices.&lt;/li&gt; &#xA;     &lt;li&gt;SETUP_PULSE - installs pulseaudio if you prefer that audio subsystem&lt;/li&gt; &#xA;     &lt;li&gt;_setup_build_tools.sh - install headers and build tools for compiling m8c&lt;/li&gt; &#xA;     &lt;li&gt;_build_m8c.sh - build the binary&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;M8 - launches m8c with cpu locked to powersave (uses alsaloop for audio)&lt;/li&gt; &#xA;   &lt;li&gt;M8_PERFORMANCE - launches m8c with cpu locked to &#34;performance&#34; (uses alsaloop for audio)&lt;/li&gt; &#xA;   &lt;li&gt;M8_PULSE - run m8c using pulseaudio with cpu locked to powersave&lt;/li&gt; &#xA;   &lt;li&gt;M8_PULSE_PERFORMANCE - run m8c using pulseaudio with cpu locked to &#34;performance&#34;&lt;/li&gt; &#xA;   &lt;li&gt;MIDI_CONNECT - automatically map every MIDI device onto every other MIDI device.&lt;/li&gt; &#xA;   &lt;li&gt;MIDI_DISCONNECT - disconnects all mappings on all midi devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Connect your device to the internet (Wifi dongle or built-in wifi). It&#39;s required for SETUP so that packages can be installed, but not for running m8c itself.&lt;/li&gt; &#xA; &lt;li&gt;Run the SETUP or SETUP_PULSE task and then reboot the device to ensure the user group changes take effect&lt;/li&gt; &#xA; &lt;li&gt;Now try running M8 or M8_PULSE. If you&#39;re lucky it&#39;ll all work!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building m8c on the device&lt;/h2&gt; &#xA;&lt;p&gt;You can run the provided scripts to rebuild m8c on the device.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;_setup_build_tools.sh&lt;/code&gt; - MUST BE ONLINE to install build tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_build_m8c.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I recommend running them in a terminal session so you can see the output, but you&#39;re welcome to try your luck from the menu.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Emulation Station friendly shell scripts&lt;/h3&gt; &#xA;&lt;p&gt;Includes scripts to run it directly from EmulationStation. Currently tested in ArkOS, but should work with 351ELEC or TheRA and possibly other rpi-based distributions, desktop systems, consoles, and other devices.&lt;/p&gt; &#xA;&lt;h3&gt;setup/gamepad_config&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gamepad_config&lt;/code&gt; is a console based program that lets you see what joysticks and game controllers are detected by SDL and configure SDL mappings. In most cases, once running, the program can be controlled exclusively by the connected joystick/gamepad.&lt;/p&gt; &#xA;&lt;p&gt;Includes a config helper for m8c that will translate m8c button inputs to the proper values and output a snippet that can be dropped in to the m8c config.ini file found in &lt;code&gt;/home/&amp;lt;user&amp;gt;/.local/share/m8c/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;midi_connect&lt;/h3&gt; &#xA;&lt;p&gt;Automatically connect midi usb devices using ALSA (aconnect)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;midi_connect.sh - automatically map every MIDI device onto every other MIDI device.&lt;/li&gt; &#xA; &lt;li&gt;midi_disconnect.sh - disconnects all mappings on all midi devices.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;h3&gt;No audio&lt;/h3&gt; &#xA;&lt;p&gt;The pulseaudio setup uses device numbers to avoid needing to look up device names. It has worked consistently for me but you may need to use different device numbers or names depending on your setup. You can see device names and numbers using these commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sudo pulseaudio --start &amp;amp;&lt;/li&gt; &#xA; &lt;li&gt;sudo pacmd list-sources | grep -e &#39;name:&#39; -e &#39;index:&#39; -e device.string&lt;/li&gt; &#xA; &lt;li&gt;sudo pacmd list-sinks | grep -e &#39;name:&#39; -e &#39;index:&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also check alsamixer settings. You may have a device muted or set to low volume.&lt;/p&gt; &#xA;&lt;h3&gt;Audio glitches&lt;/h3&gt; &#xA;&lt;p&gt;Update to latest OS. In ArkOS you can do Options &amp;gt; Update while connected to the internet.&lt;/p&gt; &#xA;&lt;p&gt;If wifi is enabled you can sometimes hear audible wifi noise on the bus. Try disabling wifi before running m8c.&lt;/p&gt; &#xA;&lt;p&gt;Try running M8_PERFORMANCE to lock the cpu to performance mode.&lt;/p&gt; &#xA;&lt;p&gt;If the alsaloop setup (default) has audio glitches or crashes, you can use the pulseaudio variant of the commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect your device to the internet&lt;/li&gt; &#xA; &lt;li&gt;Run the setup_pulse script&lt;/li&gt; &#xA; &lt;li&gt;Then you can run the M8_pulse script to run M8 using the pulseaudio subsystem&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jasonporritt/rg351_m8c/raw/master/advanced_audio.md&#34;&gt;Advanced Audio notes&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>