<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-20T01:17:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sabrogden/Ditto</title>
    <updated>2023-12-20T01:17:47Z</updated>
    <id>tag:github.com,2023-12-20:/sabrogden/Ditto</id>
    <link href="https://github.com/sabrogden/Ditto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ditto is an extension to the Windows Clipboard. You copy something to the Clipboard and Ditto takes what you copied and stores it in a database to retrieve at a later time.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;What is Ditto?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ditto is an extension to the Windows Clipboard. You copy something to the Clipboard and Ditto takes what you copied and stores it in a database to retrieve at a later time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Basic Usage&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Ditto&lt;/li&gt; &#xA; &lt;li&gt;Copy things to the clipboard, e.g. using Ctrl-C with text selected in a text editor.&lt;/li&gt; &#xA; &lt;li&gt;Open Ditto by clicking its icon in the system tray or by pressing its Hot Key which defaults to Ctrl + ` – i.e. hold down Ctrl and press the back-quote (tilde ~) key.&lt;/li&gt; &#xA; &lt;li&gt;Double click or press enter on the item to paste it to the previous window.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cbwang505/unicorn-whpx</title>
    <updated>2023-12-20T01:17:47Z</updated>
    <id>tag:github.com,2023-12-20:/cbwang505/unicorn-whpx</id>
    <link href="https://github.com/cbwang505/unicorn-whpx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;跨平台模拟执行unicorn框架基于Qemu的TCG模式(Tiny Code Generator),以无硬件虚拟化支持方式实现全系统的虚拟化,支持跨平台和架构的CPU指令模拟,本文讨论是一款笔者的实验性项目采用Windows Hypervisor Platform虚拟机模式提供了另一种CPU指令的模拟方式,在保持原有unicorn导出接口不变的情况下,采用Hyper-v支持带硬件虚拟化支持的Windows Hypervisor Platform API接口扩展了底层CPU模拟环境实现,支持X86指令集二进制程序模拟平台和调试器.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;引用&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这篇文章的目的是介绍基于Windows Hyper-V虚拟机平台Hypervisor Platform API实现的魔改版Unicorn Engine模拟器和调试引擎开发心得&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;[toc]&lt;/p&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;跨平台模拟器unicorn框架基于Qemu的TCG模式(Tiny Code Generator),以无硬件虚拟化支持方式实现全系统的虚拟化,支持跨平台和架构的CPU指令模拟,本文讨论是一款笔者的实验性项目采用Windows Hypervisor Platform虚拟机模式提供了另一种CPU指令的模拟方式,在保持原有unicorn导出接口不变的情况下,采用Hyper-V支持带硬件虚拟化支持的Windows Hypervisor Platform API接口扩展了底层CPU模拟环境实现,支持X86指令集的二进制程序模拟平台和调试器.&lt;/p&gt; &#xA;&lt;h2&gt;unicorn框架qemu之Hyper-v模式比较&lt;/h2&gt; &#xA;&lt;p&gt;Windows Hypervisor Platform是微软在Hyper-V平台提供一种新的API库,用于允许第三方开发者创建和管理EXO分区.EXO分区是一种与Hyper-V兼容并可以同时运行的虚拟机分区,用于支持第三方开发者的虚拟化解决方案，如VirtualBox、Qemu、VMware等,采用虚拟机容器的方式模拟客户机整个操作系统虚拟环境. 跨平台模拟执行unicorn框架和上层qiling框架都是基于qemu的TCG模式(Tiny Code Generator),支持无硬件虚拟化支持方式在源ISA(处理器架构)和目标ISA不同的情况下CPU指令模拟,类似一个jit解释器,一个循环中不断的读入源ISA程序指令,QEMU先转换成源ISA的IR,反汇编并用代码在目标ISA编译后的IR在模拟TranslationBlock指令中执行,当然这些指令也是转换后的汇编模式比起直接调用c函数模拟可以优化效率,qemu对TranslationBlock在分支执行返回后切换到Qemu上下文保存虚拟环境状态继续下个分支执行,转换过程采用内联汇编的方式支持hook断点与内存监视trace等功能.如果切换成Windows Hypervisor Platform(以下简称Hyper-v虚拟机)模式就省去了模拟cpu指令的环节,真实的物理cpu被虚拟化成vcpu,这个逻辑封装成由Hypervisor API创建虚拟机的调度者调度和物理机共享cpu资源,API底层实现又由Hyper-v自己的调度器(Hypervisor)的Hvix64.exe模块实现,源ISA的指令运行在vcpu上,看起来就像在物理cpu一样.每个hyper-v分区实例是一个相对于其他分区隔离的虚拟环境,由WHvCreatePartition函数创建分区,这个分区通过VID.sys(Virtualization Infrastructure Driver)驱动向管理者也就是是被创建分区的父分区hv(Hypervisor)模块通信抽象成上层api交给调用者调度,hv模块同样也有自己的分区与其他分区隔离,如果要调试hv模块可以通过bcdedit /set hypervisordebug on方式(具体见引用节)启用2个windbg实例调试内核和hv.如果是在物理机上,物理机的操作系统运行在由根分区hv管理创建的虚拟机容器中,嵌套的子分区由它的父分区hv模块管理,所有的虚拟机陷入陷出都首先交给根分区的hv处理,再分发给父分区hv处理完成后回到子分区继续执行,即使被调度的是一段shellcode,整个虚拟环境也具备一个完整的操作系统拥有x86体系虚拟化资源.一个分区允许创建多个可以同时执行调度的vcpu通过WHvCreateVirtualProcessor,每个vcpu都可以设置自己的寄存器上下文,而内存对象被整个分区共享,进入WHvRunVirtualProcessor开始调度,整个调度过程中对外面的Hypervisor是不透明的,直到遇到一个退出条件比如说断点,内存违规访问,vmcall指令等函数会返回,可以从vmexit的上下文中获取退出原因,Hypervisor可以执行对应的操作继续vcpu运行.qemu无硬件虚拟化采用纯模拟的方式实现缺点是速度较慢.Hyper-v模式主要是陷入陷出调度器需要处理时间,源ISA指令执行速度与真实cpu相当,这种方式速度较快.&lt;/p&gt; &#xA;&lt;h2&gt;内存管理分析&lt;/h2&gt; &#xA;&lt;p&gt;qemu采用MemoryRegion结构体管理所有分配的gva(客户机虚拟内存地址)到hva(宿主机虚拟内存地址)的映射,内部是一个双向链表结构包含了起始,结束gva和映射hva地址,支持先指定gva再分配hva模式,查询链表通过二叉树方式实现,如果新分配的地址位于已分配区域返回UC_ERR_MAP错误需要重新指定gva,对于读取和写入内存则是先通过gva找到hva,直接操作hva相对偏移量数据,这种方式一般仅限于模拟应用层程序的内存管理,对于所有内存操作只是处理所有已经映射的gva,遇到了未被映射的内存直接抛出UC_ERR_WRITE_UNMAPPED错误结束程序.由于对于内核态程序存在虚拟机地址和物理地址映射关系,这种直接的转换映射处理并不适用于这种情况.而Hyper-v模式多出了一个gpa(客户机物理内存地址)的概念,映射宿主机虚拟内存并不能直接通过hva -&amp;gt; gva的方式映射,而是通过WHvMapGpaRange函数先映射gpa再根据当前vcpu的cr3寄存器pde,pte转换到gva,这种模式也就是我们真实x86体系操作系统的内存映射模式,同时适用于用户态和内核态程序.至于cr3寄存器如映何射gva虚拟内存可以参考看雪其他相关文章这里不在赘述,笔者项目沿用了qemu内存管理框架结构体,实现参考WinHvShellcodeEmulator项目,下面这段代码展示了在虚拟机映射gva和方式.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HRESULT WhSeMapHostToGuestVirtualMemory(whpx_state *Partition, uintptr_t HostVa,&#xA;                                        uintptr_t *GuestVa, size_t Size,&#xA;                                        WHSE_MEMORY_ACCESS_FLAGS Flags)&#xA;{&#xA;    auto size = ALIGN_UP(Size);&#xA;    PWHSE_ALLOCATION_NODE existingNode = nullptr;&#xA;    auto hresult =&#xA;        WhSeFindAllocationNodeByGva(Partition, *GuestVa, &amp;amp;existingNode);&#xA;    uintptr_t suggestedGva = 0;&#xA;    if (*GuestVa == 0 || existingNode != nullptr) {&#xA;        auto hresult = WhSiSuggestVirtualAddress(&#xA;            Partition, size, &amp;amp;suggestedGva, Partition-&amp;gt;VirtualProcessor.Mode);     &#xA;    } else&#xA;        suggestedGva = ALIGN(*GuestVa);&#xA;    existingNode = nullptr;&#xA;    hresult = WhSeFindAllocationNodeByGva(Partition, suggestedGva, &amp;amp;existingNode);&#xA;    auto startingGva = ALIGN(suggestedGva);&#xA;    auto endingGva = ALIGN_UP(startingGva + size);&#xA;    uintptr_t suggestedGpa = 0;&#xA;    hresult = WhSiSuggestPhysicalAddress(Partition, size, &amp;amp;suggestedGpa);&#xA;    WHSE_ALLOCATION_NODE node{.BlockType =&#xA;                                  MEMORY_BLOCK_TYPE::MemoryBlockVirtual,&#xA;                              .HostVirtualAddress = HostVa,&#xA;                              .GuestPhysicalAddress = suggestedGpa,&#xA;                              .GuestVirtualAddress = startingGva,&#xA;                              .Size = size};&#xA;    hresult = WhSeInsertAllocationTrackingNode(Partition, node);&#xA;     // Setup matching PTEs&#xA;    for (auto gva = startingGva, page = suggestedGpa; gva &amp;lt; endingGva;&#xA;         gva += PAGE_SIZE, page += PAGE_SIZE) {&#xA;        hresult = WhSiInsertPageTableEntry(Partition, gva, page);     &#xA;    hresult = ::WHvMapGpaRange(&#xA;        Partition-&amp;gt;partition, reinterpret_cast&amp;lt;PVOID&amp;gt;(HostVa),&#xA;        static_cast&amp;lt;WHV_GUEST_PHYSICAL_ADDRESS&amp;gt;(suggestedGpa), size, Flags);    &#xA;    *GuestVa = startingGva;&#xA;    return hresult;&#xA;}&#xA;HRESULT WhSiInsertPageTableEntry(whpx_state *Partition,&#xA;                                 uintptr_t VirtualAddress,&#xA;                                 uintptr_t PhysicalAddress)&#xA;{&#xA;    // &#34;Explode&#34; the VA into translation indexes&#xA;    uint16_t pml4Idx;&#xA;    uint16_t pdpIdx;&#xA;    uint16_t pdIdx;&#xA;    uint16_t ptIdx;&#xA;    uint16_t phyOffset;&#xA;    auto hresult = WhSiDecomposeVirtualAddress(&#xA;        VirtualAddress, &amp;amp;pml4Idx, &amp;amp;pdpIdx, &amp;amp;pdIdx, &amp;amp;ptIdx, &amp;amp;phyOffset);&#xA;    // Search entry in PML4&#xA;    auto pml4e = reinterpret_cast&amp;lt;PMMPTE_HARDWARE&amp;gt;(&#xA;        Partition-&amp;gt;MemoryLayout.Pml4HostVa)[pml4Idx];&#xA;    if (pml4e.Valid == FALSE) {&#xA;        // Shouldn&#39;t happen as we initialized all PLM4 entries upfront&#xA;          return HRESULT_FROM_WIN32(ERROR_INTERNAL_ERROR);&#xA;    }&#xA;    // Search entry in Page Directory Pointers&#xA;    uintptr_t pdpHva = 0;&#xA;    hresult = WhSpLookupHVAFromPFN(Partition, pml4e.PageFrameNumber, &amp;amp;pdpHva);&#xA;    auto pdp = reinterpret_cast&amp;lt;PMMPTE_HARDWARE&amp;gt;(pdpHva);&#xA;    auto pdpe = pdp[pdpIdx];&#xA;    if (pdpe.Valid == FALSE) {&#xA;        // Allocate a Page Directory page&#xA;        //&#xA;        hresult = WhSpInsertPageTableEntry(Partition, pdp, pdpIdx);&#xA;        pdpe = pdp[pdpIdx];&#xA;    }&#xA;    // Search entry in Page Directories&#xA;    uintptr_t pdHva = 0;&#xA;    hresult = WhSpLookupHVAFromPFN(Partition, pdpe.PageFrameNumber, &amp;amp;pdHva);&#xA;    if (FAILED(hresult))&#xA;        return hresult;&#xA;    auto pd = reinterpret_cast&amp;lt;PMMPTE_HARDWARE&amp;gt;(pdHva);&#xA;    auto pde = pd[pdIdx];&#xA;    if (pde.Valid == FALSE) {&#xA;        // Allocate a Page Table page&#xA;         hresult = WhSpInsertPageTableEntry(Partition, pd, pdIdx);&#xA;        pde = pd[pdIdx];&#xA;    }&#xA;    // Add entry in Page Tables&#xA;    uintptr_t ptHva = 0;&#xA;    hresult = WhSpLookupHVAFromPFN(Partition, pde.PageFrameNumber, &amp;amp;ptHva);&#xA;    if (FAILED(hresult))&#xA;        return hresult;&#xA;    auto pt = reinterpret_cast&amp;lt;PMMPTE_HARDWARE&amp;gt;(ptHva);&#xA;    auto ppte = &amp;amp;pt[ptIdx];&#xA;    if (ppte-&amp;gt;Valid == FALSE) {&#xA;        /*PWHSE_ALLOCATION_NODE found = nullptr;&#xA;        hresult = WhSeFindAllocationNodeByGpa( Partition, PhysicalAddress,&#xA;        &amp;amp;found ); if ( hresult != HRESULT_FROM_WIN32( ERROR_NOT_FOUND ) &amp;amp;&amp;amp;&#xA;        FAILED( hresult ) ) return hresult;&#xA;        // Create a valid PTE &#xA;        MMPTE_HARDWARE pte{};&#xA;        pte.AsUlonglong = 0; // Ensure zeroed&#xA;        pte.Valid = 1;       // Intel&#39;s Present bit&#xA;        pte.Write = 1;       // Intel&#39;s Read/Write bit&#xA;        pte.Owner = 1; // Intel&#39;s User/Supervisor bit, let&#39;s say it is a user&#xA;                       // accessible frame&#xA;        pte.PageFrameNumber =&#xA;            (PhysicalAddress / PAGE_SIZE); // Physical address of PDP page&#xA;        *ppte = pte;&#xA;        WHSE_ALLOCATION_NODE node{.BlockType =&#xA;                                      MEMORY_BLOCK_TYPE::MemoryBlockPte,&#xA;                                  .HostVirtualAddress = 0,&#xA;                                  .GuestPhysicalAddress = PhysicalAddress,&#xA;                                  .GuestVirtualAddress = 0,&#xA;                                  .Size = PAGE_SIZE};&#xA;        hresult = WhSeInsertAllocationTrackingNode(Partition, node);&#xA;      }&#xA;    return S_OK;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;由于Hyper-v模式模拟的是整个虚拟机环境,在初始化分区时构建512个pde项,对需要映射的gva需要先对齐到一个页大小,对每个要申请的gva,使用其中一个可用的pde,计算出索引PageFrameNumber分对应的pte项,插入这些页的gpa,最后把vcpu初始化的cr3基址指向pde的物理地址.除了初始化内存分配,还要加载进内存要执行之前都会初始化段寄存器的值,包括全局描述符表(GDT)，局部描述符表(LDT)和中断描述符表(IDT),这里只需要根据当前模拟的是用户态还是内核态选择对应的段选择子和DescriptorPrivilegeLevel,还有根据否是64位和32位模式设置段寄存器cs的Long位就可以了.虚拟机本身对32位和64位模式没有限制,这些都通过x86平台自身的段属性配置,这里还存在一种特殊情况,类似在模拟器中执行VirtualAlloc由于实际申请到的gva是未知的,如果传入一个随机的内存地址,传给模拟器可能返回一个已映射地址错误,导致分配失败,解决方法是先申请宿主机hva,然后找到一个已释放的页或者计算一个新的页索引PageFrameNumber分配页得到一个可以用的gva和gpa地址映射hva的pte项,把计算出的gva返回给调用者.这种方式可以模拟任何虚拟内存申请函数. 原WinHvShellcodeEmulator项目默认配置不支持xmm寄存器指令,解决方法是需要开启cr4的OSXSAVE位和xcr的XSTATE相关位,开启后就可以正常执行sse指令集了.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;先设置cr4的这些位&#xA;#define CR4_OSXSAVE_MASK (1U &amp;lt;&amp;lt; 18)&#xA;#define CR4_OSFXSR_SHIFT 9&#xA;#define CR4_OSFXSR_MASK (1U &amp;lt;&amp;lt; CR4_OSFXSR_SHIFT)&#xA;#define CR4_OSXMMEXCPT_MASK (1U &amp;lt;&amp;lt; 10)&#xA; RegisterName = WHvX64RegisterCr4;&#xA;    uint64_t cr4val = 0;&#xA;    whpx_get_reg(RegisterName, &amp;amp;cr4val);&#xA;    cr4val = (cr4val | (1ULL &amp;lt;&amp;lt; 5)) &amp;amp; ~(1 &amp;lt;&amp;lt; 24);&#xA;    cr4val |= CR4_OSXSAVE_MASK;&#xA;    cr4val |= CR4_OSFXSR_MASK;&#xA;    cr4val |= CR4_OSXMMEXCPT_MASK;&#xA;    whpx_set_reg(RegisterName, cr4val);&#xA;    //再设置WHvX64RegisterXCr0的这些位&#xA;    #define XSTATE_FP_BIT                   0&#xA;#define XSTATE_SSE_BIT                  1&#xA;#define XSTATE_FP_MASK                  (1ULL &amp;lt;&amp;lt; XSTATE_FP_BIT)&#xA;#define XSTATE_SSE_MASK                 (1ULL &amp;lt;&amp;lt; XSTATE_SSE_BIT)&#xA;WHV_REGISTER_VALUE xcr0;&#xA;    WHV_REGISTER_NAME xcr0_name = WHvX64RegisterXCr0;&#xA;    if (!whpx_has_xsave()) {&#xA;        return;&#xA;    }&#xA;    env-&amp;gt;xcr0 |= XSTATE_FP_MASK;&#xA;    env-&amp;gt;xcr0 |= XSTATE_SSE_MASK;&#xA;    /* Only xcr0 is supported by the hypervisor currently */&#xA;    xcr0.Reg64 = env-&amp;gt;xcr0;&#xA;    hr = WHvSetVirtualProcessorRegisters(whpx-&amp;gt;partition, whpx-&amp;gt;cpu_index,&#xA;                                         &amp;amp;xcr0_name, 1, &amp;amp;xcr0);                                     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;笔者为项目添加了一个支持导入windbg的dump文件模拟应用程序的功能,支持在加载dump文件后自动映射入口点所有寄存器的值,对已经dump的相关内存自动映射相关gva,包括所有已加载模块镜像的内存,并且设置退出条件ExceptionExitBitmap包含WHvX64ExceptionTypePageFault位,这样模拟shellcode时即使未完成全部内存映射,设置为内核模式,如果模拟运行遇到了未映射的内存Hypervisor会去idt中查找缺页异常的handler,实际上的这个异常所在的handler的内存是个已释放的页面,导致最终产生了一个WHvX64ExceptionTypePageFault类型的退出错误在,在vcpu-&amp;gt;exit_ctx.VpException.ExceptionParameter这个字段中包含的就是未映射的内存地址,这样只要从dump文件中把那片内存读出来,恢复模拟器运行就能修复常见的违规内存访问错误.Windows Hypervisor Platform 还提供了一种机制用于修复WHvRunVpExitReasonMemoryAccess错误,称为WHvEmulatorTryMmioEmulation函数,会模拟当前指令的汇编代码在传给WHvEmulatorCreateEmulator回调函数中返回的Emulator句柄,如果通过模拟汇编代码找到一个映射关系在WHvEmulatorTranslateGvaPage回调函数中得到得到解析出来的gva和WHvTranslateGva的gpa,这种方式也提供了类似的逻辑修复违规内存访问错误.其他类型退出异常比如说cpuid,apic等可以参考qemu的Windows Hypervisor Platform实现具体见引用节.&lt;/p&gt; &#xA;&lt;h2&gt;调试器功能开发&lt;/h2&gt; &#xA;&lt;p&gt;qiling框架实现了一套基于gdb远程调试协议的ida调试插件支持,gdb远程调试协议文档详见引用节,调试插件在一个循环中读取ida发过来是请求包,初始化调试环境在入口处停下来,ida读取当前状态的寄存器和内存数据,用户可以在这个时候设置断点,直到用户执行continue,把所有的断点请求包发送调试器完成后.到了continue发送handle_c包调用uc_emu_start,这个时候模拟器开始执行并设置当前启用的断点,直到遇到一个退出条件,模拟器遍历符合条件的导致退出执行的断点,上报至调试插件,调试插件再根据不同的断点类型确定是要跳过的中断还是暂停调试中断到调试器,如果要中断到调试器,在断点回调中调用uc_emu_stop终止模拟循环,这里需要注意的一点是uc_emu_start是主线程,断点回调只是在线程的执行过程中向上层回调,回调完成后handle_c函数才会返回{SIGTRAP:02x},在ida中看到的现象是调试运行位置切换到断点位置中断,用户可以选择读取数据,设置断点或者继续运行.对于普通断点的实现采用的方法是把断点位置的第一个字节替换成INT1=0xf1,这样运行得到断点处就会抛出一个WHvX64ExceptionTypeDebugTrapOrFault,如果vcpu-&amp;gt;exit_ctx.VpException.InstructionBytes[0]=0xf1就可以确定是触发INT1断点中断到调试器,但是如果直接继续运行会发现这个断点会无限触发导致死循环,解决方法是先恢复断点处指令为原始数据字节,然后设置单步执行修复方法解决.,等单步指令执行完触发单步异常时,再来重启断点,这个步骤在内部执行对上层调试器没有影响,再根据当前调试器是继续执行还是单步模式继续处理,笔者参考了其它调试器的文章也是这样实现的.笔者还为调试器新加入了硬件断点的功能,在gdb远程调试协议中如果收到一个Z1-Z3的包,表示是一个硬件断点,可以采用x86架构的DR0-7调试寄存器的方式实现.启用断点,调试寄存器DR7的0&lt;del&gt;7位的L位和G位分别表示对应的断点是否启用局部还是全局,第8位和第9位是L位和G位的大开关,16&lt;/del&gt;31位表示断点类型和长度.DR0&lt;del&gt;3寄存器保存的是断点的地址,断点触发后DR6寄存器的B0&lt;/del&gt;3置位表示断点的索引.硬件断点同样也存在死循环问题可以单步执行修复方法解决,具体方法如下:.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define RT_BIT_64(bit) (UINT64_C(1) &amp;lt;&amp;lt; (bit))&#xA;#define RT_BIT_64_FIND(val, bit) (val &amp;amp; (UINT64_C(1) &amp;lt;&amp;lt; (bit)))&#xA;#define RT_BIT_64_SLOT(bit) (UINT64_C(1) &amp;lt;&amp;lt; (bit &amp;lt;&amp;lt; 1))&#xA;#define RT_BIT_64_FIND_SLOT(val, bit) (val &amp;amp; (UINT64_C(1) &amp;lt;&amp;lt; (bit &amp;lt;&amp;lt; 1)))&#xA;static void&#xA;whpx_apply_hardware_breakpoint(struct whpx_breakpoint_collection *breakpoints,&#xA;                               CPUState *cpu, uintptr_t addrskip)&#xA;{&#xA;  uint8_t hwbpslot = 0;&#xA;   uint64_t dr7val=0;&#xA;    uint64_t dr7valrw = 0;&#xA;  for (int i = 0; i &amp;lt; breakpoints-&amp;gt;used; i++) {&#xA;        struct whpx_breakpoint *breakpoint = &amp;amp;breakpoints-&amp;gt;data[i];&#xA;        WhpxBreakpointState state = breakpoint-&amp;gt;state;&#xA;        if (breakpoint-&amp;gt;bptype &amp;amp; 0xff0000) {&#xA;            if (state == WHPX_BP_SET_PENDING) {                &#xA;                for (uint8_t j = 0; j &amp;lt; 4; j++) {&#xA;                    //如果有使用槽置位详见源码&#xA;                    if (!RT_BIT_64_FIND_SLOT(dr7val, j)) {                      &#xA;                        breakpoint-&amp;gt;original_instruction = j;&#xA;                        hwbpslot |= RT_BIT_64(breakpoint-&amp;gt;original_instruction);                          &#xA;                        whpx_set_reg(WHvX64RegisterDr0+j, breakpoint-&amp;gt;address);&#xA;                       &#xA;                    }&#xA;                }&#xA;                if (breakpoint-&amp;gt;bptype == UC_HOOK_HARDWARE_READ) {&#xA;                    dr7valrw |=&#xA;                        RT_BIT_64(breakpoint-&amp;gt;original_instruction &amp;lt;&amp;lt; 2);&#xA;                    dr7valrw |=&#xA;                        RT_BIT_64((breakpoint-&amp;gt;original_instruction &amp;lt;&amp;lt; 2) + 1);&#xA;                }&#xA;                if (breakpoint-&amp;gt;bptype == UC_HOOK_HARDWARE_WRITE) {&#xA;                    dr7valrw |=&#xA;                        RT_BIT_64(breakpoint-&amp;gt;original_instruction &amp;lt;&amp;lt; 2);&#xA;                }&#xA;                breakpoint-&amp;gt;state = WHPX_BP_SET;&#xA;               &#xA;            }&#xA;        }&#xA;    }&#xA;     dr7val = 0;&#xA;    if (hwbpslot) {&#xA;        for (uint8_t j = 0; j &amp;lt; 4; j++) {&#xA;            if (hwbpslot &amp;amp; RT_BIT_64(j)) {&#xA;                dr7val |= (RT_BIT_64_SLOT(j));&#xA;            }&#xA;        }&#xA;        dr7val |= dr7valrw &amp;lt;&amp;lt; 16;&#xA;        //启用大标志&#xA;        dr7val |= RT_BIT_64(8);&#xA;    }&#xA;    whpx_set_reg(WHvX64RegisterDr7, dr7val);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;笔者项目目前只支持单线程(1个vcpu)模拟,有兴趣的读者可以自行开发多线程功能实现.原qiling框架有自己的pe加载器设置的gdtr和idt寄存器和笔者项目有冲突暂时未使用,模拟了常用的winapi函数,这种模拟方式同样在笔者项目使用用于api模拟,留给读者自行尝试.&lt;/p&gt; &#xA;&lt;h2&gt;编译方式&lt;/h2&gt; &#xA;&lt;p&gt;添加工程文件至Unicorn Engine在修改CMakeLists.txt新建unicorn-whpx静态库,添加&#34;Winhvplatform.lib&#34;和 &#34;WinHvEmulation.lib&#34;库依赖,使用如下方式创建模拟器实例,导出api形式和原工程相同:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; uc_err err = uc_open(UC_ARCH_X86_WHPX, UC_MODE_64, &amp;amp;uc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;运行效果&lt;/h2&gt; &#xA;&lt;p&gt;以下是笔者模拟器运行的效果,如图:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cbwang505/unicorn-whpx/main/img/unifix.gif&#34; alt=&#34;查看大图&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;相关引用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unicorn-engine/unicorn&#34;&gt;Unicorn Engine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/virtualization/api/&#34;&gt;Windows Hypervisor Platform API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gamozolabs/applepie&#34;&gt;hypervisor implementation for Bochs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kata-containers/qemu/raw/cdcb7dcb401757b5853ca99c1967a6d66e1deea5/target/i386/whpx/whpx-all.c&#34;&gt;参考qemu实现&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Midi12/whse/tree/master&#34;&gt;WinHvShellcodeEmulator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bbs.kanxue.com/thread-277163.htm&#34;&gt;看雪Qemu的tcg分析&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bbs.kanxue.com/thread-278784.htm&#34;&gt;看雪hyper-v分析&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bbs.kanxue.com/thread-270476.htm&#34;&gt;gdt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bbs.kanxue.com/thread-279127.htm&#34;&gt;段模式&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bbs.kanxue.com/thread-276162.htm&#34;&gt;看雪调试器&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourceware.org/gdb/current/onlinedocs/gdb.html/index.html&#34;&gt;gdb远程调试协议&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/X86_debug_register&#34;&gt;硬件断点文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/bcdedit--hypervisorsettings&#34;&gt;hv模块调试&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cbwang505/unicorn-whpx&#34;&gt;笔者模拟器项目&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;参与贡献&lt;/h2&gt; &#xA;&lt;p&gt;作者来自ZheJiang Guoli Security Technology,邮箱&lt;a href=&#34;mailto:cbwang505@hotmail.com&#34;&gt;cbwang505@hotmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>