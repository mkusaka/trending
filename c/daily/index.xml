<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:33:50Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Idov31/Cronos</title>
    <updated>2022-09-28T01:33:50Z</updated>
    <id>tag:github.com,2022-09-28:/Idov31/Cronos</id>
    <link href="https://github.com/Idov31/Cronos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PoC for a new sleep obfuscation technique leveraging waitable timers to evade memory scanners.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cronos&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/C-00599C?style=for-the-badge&amp;amp;logo=c&amp;amp;logoColor=white&#34; alt=&#34;c&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/ASSEMBLY-ED8B00?style=for-the-badge&amp;amp;logo=Assembly&amp;amp;logoColor=white&#34; alt=&#34;assembly&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&amp;amp;logo=windows&amp;amp;logoColor=white&#34; alt=&#34;windows&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;This project was co-authored by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/idov31&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Idov31-FF1B2D?style=for-the-badge&amp;amp;logo=Idov31&amp;amp;logoColor=white&#34; alt=&#34;idov31&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/janoglezcampos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YXEL-7D4698?style=for-the-badge&amp;amp;logo=YXEL&amp;amp;logoColor=white&#34; alt=&#34;YXEL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;PoC for a new sleep obfuscation technique (based on &lt;a href=&#34;https://github.com/Cracked5pider/Ekko&#34;&gt;Ekko&lt;/a&gt;) leveraging waitable timers to RC4 encrypt the current process and change the permissions from RW to RX to evade memory scanners.&lt;/p&gt; &#xA;&lt;p&gt;A more detailed explanation will be available in the blog post (COMING SOON).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Idov31/Cronos/master/img/poc.png&#34; alt=&#34;POC&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use it, all you have to do is to include Cronos in your project and use it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;Cronos.h&#34;&#xA;&#xA;int main() {&#xA;    int timesToExecute = 1337;&#xA;    int seconds = 10;&#xA;&#xA;    for (int i = 0; i &amp;lt; timesToExecute; i++) {&#xA;        CronosSleep(seconds);&#xA;&#xA;        // YOUR CODE HERE!&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To compile it you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nasm.us/&#34;&gt;NASM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32127524/how-to-install-and-use-make-in-windows&#34;&gt;make&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-US/windows/downloads/windows-sdk/&#34;&gt;VisualStudio Compiler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After you have all of the above, navigate to the project&#39;s directory and build it with the makefile, the EXE will be in the bin directory.&lt;/p&gt; &#xA;&lt;h2&gt;Visual Studio Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ShiftMediaProject/VSNASM&#34;&gt;VSNASM&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run install_script.bat&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add NASMPATH environment variable&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NASMPATH=C:\Users&amp;lt;user&amp;gt;\AppData\Local\bin\NASM\&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Visual Studio &amp;amp; Configure Settings&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tools &amp;gt; Options &amp;gt; Projects and Solutions &amp;gt; VC++ Project Settings &amp;gt; Build Customization Search Path&lt;/li&gt; &#xA;   &lt;li&gt;Set to %NASMPATH%;0&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also install &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Henk-JanLebbink.AsmDude&#34;&gt;AsmDude&lt;/a&gt; extension for syntax highlighting into .asm files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks a lot to those people that contributed to this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ORCx41&#34;&gt;Orca&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Xenov-X&#34;&gt;Xenov-X&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cracked5pider/Ekko&#34;&gt;Ekko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janoglezcampos/DeathSleep&#34;&gt;DeathSleep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/sync/using-a-waitable-timer-with-an-asynchronous-procedure-call&#34;&gt;Waitable Timers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>OpenEtherCATsociety/SOEM</title>
    <updated>2022-09-28T01:33:50Z</updated>
    <id>tag:github.com,2022-09-28:/OpenEtherCATsociety/SOEM</id>
    <link href="https://github.com/OpenEtherCATsociety/SOEM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Open Source EtherCAT Master&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple Open EtherCAT Master Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenEtherCATsociety/SOEM/actions?workflow=build&#34;&gt;&lt;img src=&#34;https://github.com/OpenEtherCATsociety/SOEM/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BUILDING&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites for all platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake 3.9 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Windows (Visual Studio)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a Visual Studio command prompt then: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmake .. -G &#34;NMake Makefiles&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nmake&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux &amp;amp; macOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ERIKA Enterprise RTOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to &lt;a href=&#34;http://www.erika-enterprise.com/wiki/index.php?title=EtherCAT_Master&#34;&gt;http://www.erika-enterprise.com/wiki/index.php?title=EtherCAT_Master&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://openethercatsociety.github.io/doc/soem/&#34;&gt;https://openethercatsociety.github.io/doc/soem/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Want to contribute to SOEM or SOES?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to SOEM or SOES you will need to sign a Contributor License Agreement and send it to us either by e-mail or by physical mail. More information is available in the &lt;a href=&#34;http://openethercatsociety.github.io/cla/cla_soem_soes.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jiangdongguo/AndroidUSBCamera</title>
    <updated>2022-09-28T01:33:50Z</updated>
    <id>tag:github.com,2022-09-28:/jiangdongguo/AndroidUSBCamera</id>
    <link href="https://github.com/jiangdongguo/AndroidUSBCamera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üî•üî•üî•Flexible and useful UVC camera engine on Android platform, supporting multi-road cameras!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/906db02b1dbc49669c38f870b6df2e96~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;logo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AUSBC‚ÄÇ&lt;a href=&#34;https://jitpack.io/#jiangdongguo/AndroidUSBCamera&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/jiangdongguo/AndroidUSBCamera.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=19&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-19%2B-brightgreen.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;‚ÄÉFlexible and useful UVC camera engine on Android platform, you can use it to simply open your uvc camera (supporting multi-road cameras) without any system permissions . The only thing you should do is that confirming your Android device must support OTG function. So, welcom to use &lt;strong&gt;AUSBC3.0&lt;/strong&gt; and welcom to &lt;strong&gt;star&lt;/strong&gt; &amp;amp; &lt;strong&gt;fork&lt;/strong&gt; &amp;amp; &lt;strong&gt;issues&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75a8f700d97c4de4979c9d0927764af9~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;multi-road camera&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ÄÉ&lt;a href=&#34;https://live.csdn.net/v/226993&#34;&gt;@ Example showing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support opening multi-road camera;&lt;/li&gt; &#xA; &lt;li&gt;Support opening camera1„ÄÅcamera2 and uvc camera on Android 4.4+;&lt;/li&gt; &#xA; &lt;li&gt;Support previewing 480p„ÄÅ720p„ÄÅ1080pÔºåetc;&lt;/li&gt; &#xA; &lt;li&gt;Support adding effects with OpenGL ES 2.0;&lt;/li&gt; &#xA; &lt;li&gt;Support capture photo(&lt;code&gt;.jpg&lt;/code&gt;)„ÄÅviedo(&lt;code&gt;.mp4&lt;/code&gt;/&lt;code&gt;.h264&lt;/code&gt;/&lt;code&gt;yuv&lt;/code&gt;) and audio(&lt;code&gt;pcm&lt;/code&gt;/&lt;code&gt;mp3&lt;/code&gt;/&lt;code&gt;aac&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Support rotating camera view;&lt;/li&gt; &#xA; &lt;li&gt;Support showing camera offscreen;&lt;/li&gt; &#xA; &lt;li&gt;Support recording media along with acquring h264/aac stream, you can push it to your media server;&lt;/li&gt; &#xA; &lt;li&gt;Support acquring all resolutions and usb devices, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usages&lt;/h2&gt; &#xA;&lt;p&gt;‚ÄÉ&lt;code&gt;AUSBC 3.0&lt;/code&gt; was refactored by kotlin and It is simpler to use and more feature-rich. So, I highly recommend you to use the current version and let&#39;s build it together.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Get AUSBC&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ÄÉFirst, add it in your root &lt;strong&gt;build.gradle&lt;/strong&gt; or &lt;strong&gt;settings.gradle&lt;/strong&gt; at the end of repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {&#xA;    repositories {&#xA;        google()&#xA;        jcenter()&#xA;        maven { url &#34;https://jitpack.io&#34; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄÉSecond, add the dependency in your &lt;strong&gt;app.gradle&lt;/strong&gt; , latest tag is &lt;a href=&#34;https://jitpack.io/#jiangdongguo/AndroidUSBCamera&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/jiangdongguo/AndroidUSBCamera.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation &#39;com.github.jiangdongguo.AndroidUSBCamera:libausbc:latest_tag&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simply usage&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ÄÉ As for how to use this module correctly, just making your Fragment or Activity implement &lt;strong&gt;CameraFragment&lt;/strong&gt; or &lt;strong&gt;CameraActivity&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class DemoFragment : CameraFragment() {&#xA;    private lateinit var mViewBinding: FragmentDemoBinding&#xA;    &#xA;    override fun initView() {&#xA;        super.initView()&#xA;    }&#xA;    &#xA;    override fun getCameraView(): IAspectRatio {&#xA;        return AspectRatioTextureView(requireContext())&#xA;    }&#xA;    &#xA;    override fun initData() {&#xA;        super.initData()&#xA;    }&#xA;&#xA;    override fun getCameraViewContainer(): ViewGroup {&#xA;        return mViewBinding.cameraViewContainer&#xA;    }&#xA;&#xA;    override fun getRootView(inflater: LayoutInflater, container: ViewGroup?): View {&#xA;        mViewBinding = FragmentDemoBinding.inflate(inflater, container, false)&#xA;        return mViewBinding.root&#xA;    }&#xA;&#xA;    override fun getGravity(): Int = Gravity.TOP&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄÉThe most important is that you should override &lt;code&gt;getRootView()&lt;/code&gt;/&lt;code&gt;getCameraViewContainer()&lt;/code&gt;/ &lt;code&gt;getCameraView()&lt;/code&gt; at least which means fragment&#39;s root view „ÄÅtexture or surface view and it&#39;s container„ÄÇOf course, the same as &lt;strong&gt;CameraActivity&lt;/strong&gt; and now you can see the uvc camera preview„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced usage&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ÄÉIf you want some custom configurations, you can do like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class DemoFragment : CameraFragment() {&#xA;    ...&#xA;    override fun getCameraClient(): CameraClient? {&#xA;        return CameraClient.newBuilder(requireContext())&#xA;            .setEnableGLES(true)   // use opengl render &#xA;            .setRawImage(true)     // capture raw or filter image&#xA;            .setDefaultEffect(EffectBlackWhite(requireContext())) // default effect&#xA;            .setCameraStrategy(CameraUvcStrategy(requireContext())) // camera type&#xA;            .setCameraRequest(getCameraRequest()) // camera configurations&#xA;            .setDefaultRotateType(RotateType.ANGLE_0) // default camera rotate angle&#xA;            .openDebug(true) // is debug mode&#xA;            .build()&#xA;    }&#xA;    &#xA;    private fun getCameraRequest(): CameraRequest {&#xA;        return CameraRequest.CameraRequestBuilder()&#xA;            .setFrontCamera(false) // only for camera1/camera2&#xA;            .setPreviewWidth(640)  // initial camera preview width&#xA;            .setPreviewHeight(480) // initial camera preview height&#xA;            .create()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄÉThere is no doubt that &lt;strong&gt;CameraClient&lt;/strong&gt; is the core class in this library, you can use the default CameraClient object to preview your camera or custom it. By using &lt;strong&gt;CameraClient&lt;/strong&gt;, you can capture a &lt;strong&gt;jpg&lt;/strong&gt; image or a &lt;strong&gt;mp4&lt;/strong&gt; video or a &lt;strong&gt;mp3&lt;/strong&gt; audio file and update resolution or different uvc camera. You can even acquring the stream of &lt;strong&gt;H264/AAC/YUV&lt;/strong&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// capture jpg image&#xA;mCameraClient?.captureImage(callBack, savePath)&#xA;&#xA;// capture mp4 video&#xA;mCameraClient?.captureVideoStart(callBack, path, durationInSec)&#xA;mCameraClient?.captureVideoStop()&#xA;&#xA;// capture mp3 audio&#xA;mCameraClient?.captureAudioStart(callBack, path)&#xA;mCameraClient?.captureAudioStop()&#xA;&#xA;// play mic in real time&#xA;mCameraClient?.startPlayMic(callBack)&#xA;mCameraClient?.stopPlayMic()&#xA;&#xA;// rotate camera&#xA;// base on opening opengl es&#xA;mCameraClient?.setRotateType(type)&#xA;&#xA;// switch different camera&#xA;mCameraClient?.switchCamera(cameraId)&#xA;&#xA;// update resolution&#xA;mCameraClient?.updateResolution(width, height)&#xA;&#xA;// get all preview sizes&#xA;mCameraClient?.getAllPreviewSizes(aspectRatio)&#xA;&#xA;// acquire encode data(h264 or aac)&#xA;mCameraClient?.addEncodeDataCallBack(callBack)&#xA;&#xA;// acquire raw data(yuv)&#xA;mCameraClient?.addPreviewDataCallBack(callBack)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄÉOr,camera configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;mCamera?.setZoom(0)&#xA;mCamera?.setSharpness(0)&#xA;mCamera?.setHue(0)&#xA;mCamera?.setSaturation(0)&#xA;mCamera?.setContrast(0)&#xA;mCamera?.setGamma(0)&#xA;mCamera?.setGain(0)&#xA;mCamera?.setAutoWhiteBalance(true)&#xA;mCamera?.setAutoFocus(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄÉFor more advanced features, you can even add some &lt;strong&gt;filters&lt;/strong&gt; to your camera.This library providers some default filters, sush as &lt;strong&gt;EffectBlackWhite&lt;/strong&gt;„ÄÅ&lt;strong&gt;EffectSoul&lt;/strong&gt; and &lt;strong&gt;EffectZoom&lt;/strong&gt;, and more filters will be added in the future.Of coure, you can also relize your own filters by extending &lt;strong&gt;AbstractEffect&lt;/strong&gt;. For exampleÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// First, extending AbstractEffect&#xA;class EffectBlackWhite(ctx: Context) : AbstractEffect(ctx) {&#xA;&#xA;    override fun getId(): Int = ID&#xA;&#xA;    override fun getClassifyId(): Int = CameraEffect.CLASSIFY_ID_FILTER&#xA;&#xA;    override fun getVertexSourceId(): Int = R.raw.base_vertex&#xA;&#xA;    override fun getFragmentSourceId(): Int = R.raw.effect_blackw_fragment&#xA;&#xA;    companion object {&#xA;        const val ID = 100&#xA;    }&#xA;}&#xA;&#xA;// Second, adding or updating or removing filter&#xA;mCameraClient?.addRenderEffect(effect)&#xA;mCameraClient?.removeRenderEffect(effect)&#xA;mCameraClient?.updateRenderEffect(classifyId, effect)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open multi-road camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ÄÉIf you want to open multi-road camera, you can make your Fragment or Activity extend &lt;strong&gt;MultiCameraFragment&lt;/strong&gt; or &lt;strong&gt;MultiCameraActivity&lt;/strong&gt;.Just do like this and more details please look up &lt;strong&gt;DemoMultiCameraFragment&lt;/strong&gt;Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class DemoMultiCameraFragment : MultiCameraFragment(), ICameraStateCallBack {&#xA;&#xA;    override fun onCameraAttached(camera: MultiCameraClient.Camera) {&#xA; &#x9;&#x9;// a camera be attached&#xA;    }&#xA;&#xA;    override fun onCameraDetached(camera: MultiCameraClient.Camera) {&#xA;&#x9;&#x9;// a camera be detached&#xA;    }&#xA;&#xA;    override fun onCameraConnected(camera: MultiCameraClient.Camera) {&#xA;        // a camera be connected&#xA;  &#x9;&#x9;camera.openCamera(textureView, getCameraRequest())&#xA;        camera.setCameraStateCallBack(this)&#xA;    }&#xA;&#xA;    override fun onCameraDisConnected(camera: MultiCameraClient.Camera) {&#xA;     // a camera be disconnected&#xA;    }&#xA;&#xA;&#xA;    override fun onCameraState(&#xA;        self: MultiCameraClient.Camera,&#xA;        code: ICameraStateCallBack.State,&#xA;        msg: String?&#xA;    ) {&#xA;&#x9;&#x9;// a camera be opened or closed or error&#xA;    }&#xA;&#xA;    override fun getRootView(inflater: LayoutInflater, container: ViewGroup?): View {&#xA;        return rootView&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debug online&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ÄÉIf you want to debug the project online or modify something, those steps you should do:&lt;/p&gt; &#xA;&lt;p&gt;‚ÄÉ&lt;strong&gt;First&lt;/strong&gt;, modifying the &lt;strong&gt;Settings.gradle&lt;/strong&gt; file and making those to module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;include &#39;:app&#39;&#xA;&#xA;// For debug online&#xA;include &#39;:libausbc&#39;&#xA;include &#39;:libuvc&#39;&#xA;include &#39;:libpush&#39;&#xA;include &#39;:libnative&#39;&#xA;include &#39;:libuvccommon&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄÉ&lt;strong&gt;Second&lt;/strong&gt;, let &lt;strong&gt;app.gradle&lt;/strong&gt; dependenced on &lt;code&gt;&#39;:libausbc&#39;&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;&#xA;    // For debug online&#xA;    implementation project(&#39;:libausbc&#39;)&#xA;&#xA;    // demo&#xA;    //implementation &#39;com.github.jiangdongguo.AndroidUSBCamera:libausbc:latest_tag&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7115229806844706847/&#34;&gt;@ ‰∏≠ÊñáÊñáÊ°£&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.pgyer.com/app/qrcode/fVo5&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ÄÉ&lt;a href=&#34;https://github.com/jiangdongguo/AndroidUSBCamera/raw/master/app/release/app-release.apk&#34;&gt;AUSBC.apk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jiangdongguo/AndroidUSBCamera/raw/master/VERSION.md&#34;&gt;Update details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jiangdongguo/AndroidUSBCamera/raw/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Homepage &amp;amp; Help&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/user/1311062343296222&#34;&gt;1. JUEJIN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/andrexpert&#34;&gt;2. CSDNÔºàUpdate stoppedÔºâ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ÄÉIf you have any question or fun ideas, please issues to me.&lt;br&gt; ‚ÄÉOf course, you can also send me a &lt;strong&gt;WeiXin&lt;/strong&gt; &#34;&lt;code&gt;laojiang299&lt;/code&gt;&#34; or a &lt;strong&gt;EMAIL&lt;/strong&gt; &#34;&lt;code&gt;765067602@qq.com&lt;/code&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;‚ÄÉSo, do not forget to send logs from location &lt;strong&gt;Android/data/com.jiangdg.ausbc/files&lt;/strong&gt; and collect logcat information by executing command &lt;code&gt;adb shell logcat -v threadtime &amp;gt; usbcamera.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/saki4510t/UVCCamera&#34;&gt;saki4510t/UVCCamera&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;Copyright 2017-2022 Jiangdongguo&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>