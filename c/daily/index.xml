<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:33:39Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ravynsoft/ravynos</title>
    <updated>2022-11-06T01:33:39Z</updated>
    <id>tag:github.com,2022-11-06:/ravynsoft/ravynos</id>
    <link href="https://github.com/ravynsoft/ravynos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A BSD-based OS project that aims to provide an experience like and some compatibility with macOS (formerly known as airyxOS)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is ravynOS? &lt;a href=&#34;https://cirrus-ci.com/github/ravynsoft/ravynos&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/ravynsoft/ravynos.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;Don&#39;t speak English? Read this in: &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/README.IT.md&#34;&gt;Italiano&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/README.TR.md&#34;&gt;Türkçe&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/README.DE.md&#34;&gt;Deutsch&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/README.ID.md&#34;&gt;Indonesia&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/README.zh_CN.md&#34;&gt;简体中文&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/README.zh_TW.md&#34;&gt;繁體中文&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;ravynOS is a new open source OS project that aims to provide a similar experience and some compatibility with macOS on x86-64 (and eventually ARM) systems. It builds on the solid foundations of FreeBSD, existing open source packages in the same space, and new code to fill the gaps.&lt;/p&gt; &#xA;&lt;p&gt;The main design goals are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Source compatibility with macOS applications (i.e. you could compile a Mac application on ravynOS and run it)&lt;/li&gt; &#xA; &lt;li&gt;Similar GUI metaphors and familiar UX (file manager, application launcher, top menu bar that reflects the open application, etc)&lt;/li&gt; &#xA; &lt;li&gt;Compatible with macOS folder layouts (/Library, /System, /Users, /Volumes, etc) and perhaps filesystems (HFS+, APFS) as well as fully supporting ZFS&lt;/li&gt; &#xA; &lt;li&gt;Self-contained applications in &lt;a href=&#34;https://developer.apple.com/documentation/foundation/bundle&#34;&gt;App Bundles&lt;/a&gt;, &lt;a href=&#34;https://github.com/AppImage/AppImageKit/wiki/AppDir&#34;&gt;AppDirs&lt;/a&gt;, and &lt;a href=&#34;https://github.com/AppImage&#34;&gt;AppImage&lt;/a&gt; files - an installer-less experience for /Applications&lt;/li&gt; &#xA; &lt;li&gt;Mostly maintain compatibility with the FreeBSD base system and X11 - a standard Unix environment under the hood&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Linux binaries via FreeBSD&#39;s Linux support&lt;/li&gt; &#xA; &lt;li&gt;Eventual compatibility with x86-64/arm64 macOS binaries (Mach-O) and libraries&lt;/li&gt; &#xA; &lt;li&gt;Pleasant to use, secure, stable, and performant&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please visit &lt;a href=&#34;https://ravynos.com/&#34;&gt;ravynos.com&lt;/a&gt; for more info: &lt;a href=&#34;https://ravynos.com/releases.html&#34;&gt;Release Notes&lt;/a&gt; | &lt;a href=&#34;https://ravynos.com/screenshots.html&#34;&gt;Screenshots&lt;/a&gt; | &lt;a href=&#34;https://ravynos.com/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Join us!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can you help build the dream? See the current projects/needs in &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://discord.com/invite/8caJbAGNwY&#34;&gt;Discord&lt;/a&gt; server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#ravynOS-general:matrix.org&lt;/code&gt; - join via &lt;a href=&#34;https://app.element.io/#/room/%23ravynOS-general:matrix.org&#34;&gt;Element.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#airyx&lt;/code&gt; on &lt;a href=&#34;https://web.libera.chat/?channel=#airyx&#34;&gt;Libera IRC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloudsmith.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith&amp;amp;style=flat-square&#34; alt=&#34;Packages hosted by: Cloudsmith&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FreeBSD Source:&lt;/h2&gt; &#xA;&lt;p&gt;This is the top level of the FreeBSD source directory.&lt;/p&gt; &#xA;&lt;p&gt;FreeBSD is an operating system used to power modern servers, desktops, and embedded platforms. A large community has continually developed it for more than thirty years. Its advanced networking, security, and storage features have made FreeBSD the platform of choice for many of the busiest web sites and most pervasive embedded networking and storage devices.&lt;/p&gt; &#xA;&lt;p&gt;For copyright information, please see &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/COPYRIGHT&#34;&gt;the file COPYRIGHT&lt;/a&gt; in this directory. Additional copyright information also exists for some sources in this tree - please see the specific source directories for more information.&lt;/p&gt; &#xA;&lt;p&gt;The Makefile in this directory supports a number of targets for building components (or all) of the FreeBSD source tree. See build(7), config(8), &lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/cutting-edge/#makeworld&#34;&gt;FreeBSD handbook on building userland&lt;/a&gt;, and &lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/kernelconfig/&#34;&gt;Handbook for kernels&lt;/a&gt; for more information, including setting make(1) variables.&lt;/p&gt; &#xA;&lt;h2&gt;Source Roadmap:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Directory&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;System/user commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cddl&lt;/td&gt; &#xA;   &lt;td&gt;Various commands and libraries under the Common Development and Distribution License.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contrib&lt;/td&gt; &#xA;   &lt;td&gt;Packages contributed by 3rd parties.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;crypto&lt;/td&gt; &#xA;   &lt;td&gt;Cryptography stuff (see &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/crypto/README&#34;&gt;crypto/README&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;etc&lt;/td&gt; &#xA;   &lt;td&gt;Template files for /etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gnu&lt;/td&gt; &#xA;   &lt;td&gt;Commands and libraries under the GNU General Public License (GPL) or Lesser General Public License (LGPL). Please see &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/gnu/COPYING&#34;&gt;gnu/COPYING&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/gnu/COPYING.LIB&#34;&gt;gnu/COPYING.LIB&lt;/a&gt; for more information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;include&lt;/td&gt; &#xA;   &lt;td&gt;System include files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kerberos5&lt;/td&gt; &#xA;   &lt;td&gt;Kerberos5 (Heimdal) package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lib&lt;/td&gt; &#xA;   &lt;td&gt;System libraries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;libexec&lt;/td&gt; &#xA;   &lt;td&gt;System daemons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;release&lt;/td&gt; &#xA;   &lt;td&gt;Release building Makefile &amp;amp; associated tools.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rescue&lt;/td&gt; &#xA;   &lt;td&gt;Build system for statically linked /rescue utilities.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sbin&lt;/td&gt; &#xA;   &lt;td&gt;System commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;secure&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic libraries and commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;share&lt;/td&gt; &#xA;   &lt;td&gt;Shared resources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stand&lt;/td&gt; &#xA;   &lt;td&gt;Boot loader sources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sys&lt;/td&gt; &#xA;   &lt;td&gt;Kernel sources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sys/&lt;code&gt;arch&lt;/code&gt;/conf&lt;/td&gt; &#xA;   &lt;td&gt;Kernel configuration files. GENERIC is the configuration used in release builds. NOTES contains documentation of all possible entries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests&lt;/td&gt; &#xA;   &lt;td&gt;Regression tests which can be run by Kyua. See &lt;a href=&#34;https://raw.githubusercontent.com/ravynsoft/ravynos/main/tests/README&#34;&gt;tests/README&lt;/a&gt; for additional information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tools&lt;/td&gt; &#xA;   &lt;td&gt;Utilities for regression testing and miscellaneous tasks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usr.bin&lt;/td&gt; &#xA;   &lt;td&gt;User commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usr.sbin&lt;/td&gt; &#xA;   &lt;td&gt;System administration commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For information on synchronizing your source tree with one or more of the FreeBSD Project&#39;s development branches, please see &lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/cutting-edge/#current-stable&#34;&gt;FreeBSD Handbook&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>melonDS-emu/melonDS</title>
    <updated>2022-11-06T01:33:39Z</updated>
    <id>tag:github.com,2022-11-06:/melonDS-emu/melonDS</id>
    <link href="https://github.com/melonDS-emu/melonDS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DS emulator, sorta&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/melonDS-emu/melonDS/master/res/icon/melon_128x128.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;b&gt;melonDS&lt;/b&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://melonds.kuribo64.net/&#34; alt=&#34;melonDS website&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-melonds.kuribo64.net-%2331352e.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melonds.kuribo64.net/downloads.php&#34; alt=&#34;Release: 0.9.5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-0.9.5-%235c913b.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34; alt=&#34;License: GPLv3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-%23ff554d.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kiwiirc.com/client/irc.badnik.net/?nick=IRC-Source_?#melonds&#34; alt=&#34;IRC channel: #melonds&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC%20chat-%23melonds-%23dd2e44.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions?query=workflow%3A%22CMake+Build+%28Windows+x86-64%29%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/melonDS-emu/melonDS/CMake%20Build%20(Windows%20x86-64)?label=Windows%20x86-64&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions?query=workflow%3A%22CMake+Build+%28Ubuntu+x86-64%29%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/melonDS-emu/melonDS/CMake%20Build%20(Ubuntu%20x86-64)?label=Linux%20x86-64&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/melonDS-emu/melonDS/actions?query=workflow%3A%22CMake+Build+%28Ubuntu+aarch64%29%22+event%3Apush&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/melonDS-emu/melonDS/CMake%20Build%20(Ubuntu%20aarch64)?label=Linux%20ARM64&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/melonDS/melonDS/_build?definitionId=1&amp;amp;repositoryFilter=1&amp;amp;branchFilter=2%2C2%2C2%2C2%2C2%2C2%2C2%2C2%2C2%2C2%2C2%2C2%2C2&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/melonDS/7c9c08a1-669f-42a4-bef4-a6c74eadf723/1/master?label=macOS%20x86-64&amp;amp;logo=Azure%20Pipelines&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/melonDS/melonDS/_build?definitionId=2&amp;amp;_a=summary&amp;amp;repositoryFilter=1&amp;amp;branchFilter=2%2C2%2C2%2C2%2C2&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/melonDS/7c9c08a1-669f-42a4-bef4-a6c74eadf723/2/master?label=macOS%20ARM64&amp;amp;logo=Azure%20Pipelines&#34;&gt;&lt;/a&gt; &lt;/p&gt; DS emulator, sorta &#xA;&lt;p&gt;The goal is to do things right and fast, akin to blargSNES (but hopefully better). But also to, you know, have a fun challenge :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Firmware boot (not direct boot) requires a BIOS/firmware dump from an original DS or DS Lite. DS firmwares dumped from a DSi or 3DS aren&#39;t bootable and only contain configuration data, thus they are only suitable when booting games directly.&lt;/p&gt; &#xA;&lt;h3&gt;Possible firmware sizes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;128KB: DSi/3DS DS-mode firmware (reduced size due to lacking bootcode)&lt;/li&gt; &#xA; &lt;li&gt;256KB: regular DS firmware&lt;/li&gt; &#xA; &lt;li&gt;512KB: iQue DS firmware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DS BIOS dumps from a DSi or 3DS can be used with no compatibility issues. DSi BIOS dumps (in DSi mode) are not compatible. Or maybe they are. I don&#39;t know.&lt;/p&gt; &#xA;&lt;p&gt;As for the rest, the interface should be pretty straightforward. If you have a question, don&#39;t hesitate to ask, though!&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu 22.04: &lt;code&gt;sudo apt install cmake extra-cmake-modules libcurl4-gnutls-dev libpcap0.8-dev libsdl2-dev qtbase5-dev qtbase5-private-dev qtmultimedia5-dev libslirp-dev libarchive-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Older Ubuntu: &lt;code&gt;sudo apt install cmake extra-cmake-modules libcurl4-gnutls-dev libpcap0.8-dev libsdl2-dev qt5-default qtbase5-private-dev qtmultimedia5-dev libslirp-dev libarchive-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch Linux: &lt;code&gt;sudo pacman -S base-devel cmake extra-cmake-modules git libpcap sdl2 qt5-base qt5-multimedia libslirp libarchive&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the melonDS repository and prepare:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/melonDS-emu/melonDS&#xA;cd melonDS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build&#xA;cmake --build build -j$(nproc --all)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.msys2.org/&#34;&gt;MSYS2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;strong&gt;MSYS2 MinGW 64-bit&lt;/strong&gt; terminal&lt;/li&gt; &#xA; &lt;li&gt;Update the packages using &lt;code&gt;pacman -Syu&lt;/code&gt; and reopen the terminal if it asks you to&lt;/li&gt; &#xA; &lt;li&gt;Install git to clone the repository &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the melonDS repository and prepare: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/melonDS-emu/melonDS&#xA;cd melonDS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dynamic builds (with DLLs)&lt;/h4&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;pacman -S make mingw-w64-x86_64-{cmake,mesa,SDL2,toolchain,qt5-base,qt5-svg,qt5-multimedia,libslirp,libarchive}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build -G &#34;MSYS Makefiles&#34;&#xA;cmake --build build -j$(nproc --all)&#xA;cd build&#xA;../tools/msys-dist.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If everything went well, melonDS and the libraries it needs should now be in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Static builds (without DLLs, standalone executable)&lt;/h4&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;pacman -S make mingw-w64-x86_64-{cmake,mesa,SDL2,toolchain,qt5-static,libslirp,libarchive}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build -G &#39;MSYS Makefiles&#39; -DBUILD_STATIC=ON -DCMAKE_PREFIX_PATH=/mingw64/qt5-static&#xA;cmake --build build -j$(nproc --all)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If everything went well, melonDS should now be in the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew Package Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;brew install git pkg-config cmake sdl2 qt@6 libslirp libarchive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the melonDS repository and prepare: &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone https://github.com/melonDS-emu/melonDS&#xA;cd melonDS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;cmake -B build -DCMAKE_PREFIX_PATH=&#34;$(brew --prefix qt@6);$(brew --prefix libarchive)&#34; -DUSE_QT6=ON&#xA;cmake --build build -j$(sysctl -n hw.logicalcpu)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If everything went well, melonDS.app should now be in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Self-contained app bundle&lt;/h4&gt; &#xA;&lt;p&gt;If you want an app bundle that can be distributed to other computers without needing to install dependencies through Homebrew, you can additionally run &lt;code&gt; ../tools/mac-bundle.rb melonDS.app&lt;/code&gt; after the build is completed, or add &lt;code&gt;-DMACOS_BUNDLE_LIBS=ON&lt;/code&gt; to the first CMake command.&lt;/p&gt; &#xA;&lt;h2&gt;TODO LIST&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;better DSi emulation&lt;/li&gt; &#xA; &lt;li&gt;better OpenGL rendering&lt;/li&gt; &#xA; &lt;li&gt;netplay&lt;/li&gt; &#xA; &lt;li&gt;the impossible quest of pixel-perfect 3D graphics&lt;/li&gt; &#xA; &lt;li&gt;support for rendering screens to separate windows&lt;/li&gt; &#xA; &lt;li&gt;emulating some fancy addons&lt;/li&gt; &#xA; &lt;li&gt;other non-core shit (debugger, graphics viewers, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO LIST FOR LATER (low priority)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;big-endian compatibility (Wii, etc)&lt;/li&gt; &#xA; &lt;li&gt;LCD refresh time (used by some games for blending effects)&lt;/li&gt; &#xA; &lt;li&gt;any feature you can eventually ask for that isn&#39;t outright stupid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Martin for GBAtek, a good piece of documentation&lt;/li&gt; &#xA; &lt;li&gt;Cydrak for the extra 3D GPU research&lt;/li&gt; &#xA; &lt;li&gt;limittox for the icon&lt;/li&gt; &#xA; &lt;li&gt;All of you comrades who have been testing melonDS, reporting issues, suggesting shit, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://www.gnu.org/graphics/gplv3-127x51.png&#34; alt=&#34;GNU GPLv3 Image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;melonDS is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;h3&gt;External&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Images used in the Input Config Dialog - see &lt;code&gt;src/frontend/qt_sdl/InputConfig/resources/LICENSE.md&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>naver/lispe</title>
    <updated>2022-11-06T01:33:39Z</updated>
    <id>tag:github.com,2022-11-06:/naver/lispe</id>
    <link href="https://github.com/naver/lispe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of a full fledged Lisp interpreter with Data Structure, Pattern Programming and High level Functions with Lazy Evaluation à la Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LispE: Lisp Elémentaire&lt;/h1&gt; &#xA;&lt;p&gt;Hello,&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;strong&gt;Lisp Elémentaire&lt;/strong&gt;, a version of Lisp that is ultra-minimal but contains all the basic instructions of the language. The code also comes with a small internal editor from another NAVER&#39;s project: &lt;a href=&#34;https://github.com/naver/tamgu&#34;&gt;TAMGU&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LispE&lt;/strong&gt; has different goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To show how to easily implement a powerful and extensible &lt;em&gt;Lisp&lt;/em&gt; interpreter in &lt;em&gt;C++&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To provide a real Lisp language that will allow you to discover a really fascinating language ...&lt;/li&gt; &#xA; &lt;li&gt;To provide a code that can be compiled on any Windows, Linux or Mac OS machine, without any fuss&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I based a large part of this work on the following article: &lt;a href=&#34;http://www.paulgraham.com/rootsoflisp.html&#34;&gt;The Root of Lisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The description of the language is available here: &lt;a href=&#34;https://github.com/naver/lispe/wiki/1.-Introduction&#34;&gt;Introduction to LispE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A help to the available functions is here: &lt;a href=&#34;https://github.com/naver/lispe/wiki/5.-Description-of-Functions,-Operators-and-Libraries&#34;&gt;LispE Language Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The wiki index is here: &lt;a href=&#34;https://github.com/naver/lispe/wiki&#34;&gt;HOME&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;CHECK binaries&lt;/h1&gt; &#xA;&lt;p&gt;We have stashed &lt;a href=&#34;https://github.com/naver/lispe/tree/master/binaries&#34;&gt;here&lt;/a&gt; precompiled versions for Window and Mac OS (including M1)...&lt;/p&gt; &#xA;&lt;h1&gt;Modern Functional Properties&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;LispE&lt;/strong&gt; provides also some interesting properties such as: &lt;a href=&#34;https://github.com/naver/lispe/wiki/6.7-Data-Structures&#34;&gt;Data Structures&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;strong&gt;LispE&lt;/strong&gt; can also be used as a &lt;em&gt;Shell&lt;/em&gt;: &lt;a href=&#34;https://github.com/naver/lispe/wiki/7.-Shell&#34;&gt;Shell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Come and discover &lt;strong&gt;LispE&lt;/strong&gt;: the &lt;strong&gt;Lisp Elémentaire&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Play with it&lt;/h2&gt; &#xA;&lt;p&gt;We provide a fun little program to discover some of the most interesting aspects of LispE: &lt;a href=&#34;https://github.com/naver/lispe/raw/master/examples/patterns/minizork_en.lisp&#34;&gt;minzork&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Have a look and try it&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD 3-Clause License&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LispE&#xA;Copyright (c) 2020-present NAVER Corp.&#xA;&#xA;Redistribution and use in source and binary forms, with or without &#xA;modification, are permitted provided that the following conditions &#xA;are met:&#xA;&#xA;1. Redistributions of source code must retain the above copyright &#xA;notice, this list of conditions and the following disclaimer.&#xA;&#xA;2. Redistributions in binary form must reproduce the above copyright &#xA;notice, this list of conditions and the following disclaimer in the &#xA;documentation and/or other materials provided with the distribution.&#xA;&#xA;3. Neither the name of the copyright holder nor the names of its &#xA;contributors may be used to endorse or promote products derived from &#xA;this software without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; &#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE &#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE &#xA;ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE &#xA;LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR &#xA;CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF &#xA;SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS &#xA;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN &#xA;CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) &#xA;ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE &#xA;POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>