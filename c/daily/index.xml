<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:32:34Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PurpleVsGreen/beacown</title>
    <updated>2022-10-17T01:32:34Z</updated>
    <id>tag:github.com,2022-10-17:/PurpleVsGreen/beacown</id>
    <link href="https://github.com/PurpleVsGreen/beacown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Hi everyone,&lt;/p&gt; &#xA;&lt;p&gt;In the following, I quickly introduce the PoC and briefly describe each CVE.&lt;/p&gt; &#xA;&lt;p&gt;Please see attached:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The PCAP files containing the Wifi frames triggering the vulnerabilities and&lt;/li&gt; &#xA; &lt;li&gt;inject-pcap.c to inject the Wifi frames into the 802.11 stack&lt;/li&gt; &#xA; &lt;li&gt;A complete log for each CVE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to Johannes Berg, who provided the inject-pcap.c script, quickly worked on all the patches and resolved the issues!&lt;/p&gt; &#xA;&lt;p&gt;The PoC uses mac80211_hwsim to inject the frames, but the vulnerabilities are - to my knowledge - driver-independent, and we assume that they are exploitable over the air. All the malformed frames are Beacon frames.&lt;/p&gt; &#xA;&lt;h1&gt;PoC Execution&lt;/h1&gt; &#xA;&lt;p&gt;Boot a kernel with mac80211_hwsim included or load the module. Install libnl-3.0 libnl-genl-3.0 libpcap, which is required by the PoC, and compile it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cc -o inject-pcap inject-pcap.c $(pkg-config --cflags --libs  libnl-3.0 libnl-genl-3.0 libpcap)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterward, trigger a scan so that the device can receive the frame(s):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;iw wlan0 scan trigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, run inject-pcap with the PCAP file as argument.&lt;/p&gt; &#xA;&lt;h1&gt;CVE-2022-41674&lt;/h1&gt; &#xA;&lt;p&gt;This vulnerability was introduced in v5.1-rc1 and leads to a heap overflow. Compiled with CONFIG_SLUB_DEBUG_ON the kernel emits the following among other errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=============================================================================&#xA;BUG kmalloc-64 (Tainted: G    B             ): Left Redzone overwritten&#xA;-----------------------------------------------------------------------------&#xA;&#xA;0xffff8880112b1e00-0xffff8880112b1e3f @offset=3584. First byte 0x10 instead of 0xbb&#xA;Slab 0xffffea000044ac40 objects=16 used=16 fp=0x0000000000000000 flags=0x100000000000200(slab|node=0|zone=1)&#xA;Object 0xffff8880112b1e40 @offset=3648 fp=0xffff8880112b1f40&#xA;&#xA;Redzone  ffff8880112b1e00: 10 04 04 00 10 00 04 00 10 00 04 00 10 00 04 00  ................&#xA;Redzone  ffff8880112b1e10: 10 00 04 00 10 00 04 00 10 00 04 00 10 00 04 00  ................&#xA;Redzone  ffff8880112b1e20: 10 00 04 00 10 00 04 00 10 00 04 00 10 00 04 00  ................&#xA;Redzone  ffff8880112b1e30: 10 00 04 00 f0 00 04 00 10 00 04 00 10 00 04 00  ................&#xA;Object   ffff8880112b1e40: 80 00 04 00 04 00 dd 00 ff 00 60 00 ff 00 61 00  ..........`...a.&#xA;Object   ffff8880112b1e50: 85 00 e4 00 ff 0a 05 ff ff 05 c3 00 52 00 ff 00  ............R...&#xA;Object   ffff8880112b1e60: 61 04 85 00 ff 00 04 00 dd 00 e3 00 52 00 ff 00  a...........R...&#xA;Object   ffff8880112b1e70: 61 00 85 00 e4 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b a5  a....kkkkkkkkkk.&#xA;Redzone  ffff8880112b1e80: bb bb bb bb bb bb bb bb                          ........&#xA;Padding  ffff8880112b1ee0: 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a  ZZZZZZZZZZZZZZZZ&#xA;Padding  ffff8880112b1ef0: 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a  ZZZZZZZZZZZZZZZZ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the fix applied, the payload triggers slab-out-of-bounds. As that specific one is not considered harmful, no additional CVE is assigned, but it is fixed in &#34;wifi: cfg80211: ensure length byte is present before access&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;CVE-2022-42719&lt;/h1&gt; &#xA;&lt;p&gt;This vulnerability was introduced in v5.2-rc1. With the patch for CVE-2022-41674 and the one mentioned prior applied, the same payload triggers use-after-frees, such as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;==================================================================&#xA;BUG: KASAN: use-after-free in ieee80211_update_bss_from_elems (net/mac80211/scan.c:104)&#xA;Read of size 1 at addr ffff88800befa00a by task ksoftirqd/1/20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;CVE-2022-42720&lt;/h1&gt; &#xA;&lt;p&gt;This vulnerability was introduced in v5.1-rc1. After receiving the attached frames, the kernel log looks like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;==================================================================&#xA;BUG: KASAN: use-after-free in cfg80211_inform_bss_frame_data (net/wireless/scan.c:2536)&#xA;Read of size 8 at addr ffff888008d04478 by task ksoftirqd/1/20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its patch fixes a root cause for at least four UAFs and other different memory issues, including:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BUG: KASAN: use-after-free in cmp_bss+0x856/0x920&#xA;Read of size 8 at addr ffff88801459a068 by task ksoftirqd/0/14&#xA;&#xA;BUG: KASAN: use-after-free in cfg80211_inform_single_bss_data+0xe08/0xea0&#xA;Read of size 8 at addr ffff888016272c40 by task ksoftirqd/0/14&#xA;&#xA;BUG: KASAN: use-after-free in cfg80211_put_bss+0x261/0x270&#xA;Read of size 8 at addr ffff8880162b4248 by task ksoftirqd/0/14&#xA;&#xA;general protection fault, probably for non-canonical address 0xdffffc0200000005: 0000 [#1] PREEMPT SMP KASAN PTI&#xA;KASAN: probably user-memory-access in range [0x0000001000000028-0x000000100000002f]&#xA;&#xA;general protection fault, probably for non-canonical address 0xdffffc0000000001: 0000 [#1] PREEMPT SMP KASAN PTI&#xA;KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]&#xA;&#xA;general protection fault, probably for non-canonical address 0xf99995999999999a: 0000 [#1] PREEMPT SMP KASAN PTI&#xA;KASAN: maybe wild-memory-access in range [0xccccccccccccccd0-0xccccccccccccccd7]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;CVE-2022-42721&lt;/h1&gt; &#xA;&lt;p&gt;This vulnerability was introduced in v5.1-rc1 and leads to an endless loop, leading to a DoS. This is the related kernel log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;watchdog: BUG: soft lockup - CPU#0 stuck for 52s! [ksoftirqd/0:14]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;CVE-2022-42722&lt;/h1&gt; &#xA;&lt;p&gt;For this, a P2P device is required. This is e.g. default behavior when running NetworkManager to the best of my knowledge. If there is no P2P device yet, it must be created for the reproduction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ip l set wlan0 up&#xA;iw wlan0 interface add p2p0 type __p2pdev addr 02:00:00:00:00:00&#xA;iw wdev 0x2 p2p start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the PoC leads to a null-ptr-dereference and thus to a DoS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;general protection fault, probably for non-canonical address 0xdffffc0000000064: 0000 [#1] PREEMPT SMP KASAN PTI&#xA;KASAN: null-ptr-deref in range [0x0000000000000320-0x0000000000000327]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details, please see the full logs for each CVE attached.&lt;/p&gt; &#xA;&lt;p&gt;Best SÃ¶nke from SEEMOO @ TU Darmstadt&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AOMediaCodec/libavif</title>
    <updated>2022-10-17T01:32:34Z</updated>
    <id>tag:github.com,2022-10-17:/AOMediaCodec/libavif</id>
    <link href="https://github.com/AOMediaCodec/libavif" rel="alternate"></link>
    <summary type="html">&lt;p&gt;libavif - Library for encoding and decoding .avif files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libavif &lt;a href=&#34;https://ci.appveyor.com/project/louquillio/libavif&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/louquillio/libavif?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/AOMediaCodec/libavif&#34;&gt;&lt;img src=&#34;https://travis-ci.com/AOMediaCodec/libavif.svg?branch=master&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This library aims to be a friendly, portable C implementation of the AV1 Image File Format, as described here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aomediacodec.github.io/av1-avif/&#34;&gt;https://aomediacodec.github.io/av1-avif/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a work-in-progress, but can already encode and decode all AOM supported YUV formats and bit depths (with alpha).&lt;/p&gt; &#xA;&lt;p&gt;For now, it is recommended that you check out/use &lt;a href=&#34;https://github.com/AOMediaCodec/libavif/releases&#34;&gt;tagged releases&lt;/a&gt; instead of just using the master branch. I will regularly create new versions as bugfixes and features are added.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please see the examples in the &#34;examples&#34; directory. If you&#39;re already building &lt;code&gt;libavif&lt;/code&gt;, enable the CMake option &lt;code&gt;AVIF_BUILD_EXAMPLES&lt;/code&gt; in order to build and run the examples too.&lt;/p&gt; &#xA;&lt;h2&gt;Build Notes&lt;/h2&gt; &#xA;&lt;p&gt;Building libavif requires &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;No AV1 codecs are enabled by default. Enable them by enabling any of the following CMake options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_AOM&lt;/code&gt; - requires CMake, NASM&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_DAV1D&lt;/code&gt; - requires Meson, Ninja, NASM&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_LIBGAV1&lt;/code&gt; - requires CMake, Ninja&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AVIF_CODEC_RAV1E&lt;/code&gt; - requires cargo (Rust), NASM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These libraries (in their C API form) must be externally available (discoverable via CMake&#39;s &lt;code&gt;FIND_LIBRARY&lt;/code&gt;) to use them, or if libavif is a child CMake project, the appropriate CMake target must already exist by the time libavif&#39;s CMake scripts are executed.&lt;/p&gt; &#xA;&lt;h3&gt;Local / Static Builds&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ext/&lt;/code&gt; subdirectory contains a handful of basic scripts which each pull down a known-good copy of an AV1 codec and make a local static library build. If you want to statically link any codec into your local (static) build of libavif, building using one of these scripts and then enabling the associated &lt;code&gt;AVIF_LOCAL_*&lt;/code&gt; is a convenient method, but you must make sure to disable &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; in CMake to instruct it to make a static libavif library.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build/install shared libraries for AV1 codecs, you can still peek inside of each script to see where the current known-good SHA is for each codec.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;A few tests written in C can be built by enabling the &lt;code&gt;AVIF_BUILD_TESTS&lt;/code&gt; CMake option.&lt;/p&gt; &#xA;&lt;p&gt;The remaining tests can be built by enabling the &lt;code&gt;AVIF_BUILD_TESTS&lt;/code&gt; and &lt;code&gt;AVIF_ENABLE_GTEST&lt;/code&gt; CMake options. They require GoogleTest to be built locally with ext/googletest.cmd or installed on the system.&lt;/p&gt; &#xA;&lt;h2&gt;Prebuilt Library (Windows)&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re building on Windows with Visual Studio 2022 and want to try out libavif without going through the build process, static library builds for both Debug and Release are available on &lt;a href=&#34;https://ci.appveyor.com/project/louquillio/libavif&#34;&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Notes&lt;/h2&gt; &#xA;&lt;p&gt;libavif is written in C99.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;clang-format&lt;/a&gt; to format the C sources from the top-level folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;clang-format -style=file -i \&#xA;  apps/*.c apps/shared/avifjpeg.* apps/shared/avifpng.* \&#xA;  apps/shared/avifutil.* apps/shared/y4m.* examples/*.c \&#xA;  include/avif/*.h src/*.c tests/*.c \&#xA;  tests/gtest/*.h tests/gtest/*.cc tests/oss-fuzz/*.cc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/cheshirekow/cmake_format&#34;&gt;cmake-format&lt;/a&gt; to format the CMakeLists.txt files from the top-level folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake-format -i \&#xA;  CMakeLists.txt \&#xA;  tests/CMakeLists.txt \&#xA;  cmake/Modules/Find*.cmake \&#xA;  contrib/CMakeLists.txt \&#xA;  contrib/gdk-pixbuf/CMakeLists.txt \&#xA;  android_jni/avifandroidjni/src/main/jni/CMakeLists.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the BSD License.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Copyright 2019 Joe Drago. All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without&#xA;modification, are permitted provided that the following conditions are met:&#xA;&#xA;1. Redistributions of source code must retain the above copyright notice, this&#xA;list of conditions and the following disclaimer.&#xA;&#xA;2. Redistributions in binary form must reproduce the above copyright notice,&#xA;this list of conditions and the following disclaimer in the documentation&#xA;and/or other materials provided with the distribution.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34;&#xA;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&#xA;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE&#xA;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&#xA;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#xA;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER&#xA;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xA;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>aircrack-ng/aircrack-ng</title>
    <updated>2022-10-17T01:32:34Z</updated>
    <id>tag:github.com,2022-10-17:/aircrack-ng/aircrack-ng</id>
    <link href="https://github.com/aircrack-ng/aircrack-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WiFi security auditing tools suite&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aircrack-ng&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-alpine.svg?left_text=Alpine%20Linux%20Build&#34; alt=&#34;Alpine Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-kali.svg?left_text=Kali%20Linux%20Build&#34; alt=&#34;Kali Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-armel.svg?left_text=Armel%20Kali%20Linux%20Build&#34; alt=&#34;Armel Kali Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-armhf.svg?left_text=Armhf%20Kali%20Linux%20Build&#34; alt=&#34;Armhf Kali Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-dfly.svg?left_text=DragonFly%20Build&#34; alt=&#34;DragonFly BSD Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-fbsd-11.svg?left_text=FreeBSD%2011%20Build&#34; alt=&#34;FreeBSD 11 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-fbsd-12.svg?left_text=FreeBSD%2012%20Build&#34; alt=&#34;FreeBSD 12 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-obsd.svg?left_text=OpenBSD%20Build&#34; alt=&#34;OpenBSD 6 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;&lt;img src=&#34;https://buildbot.aircrack-ng.org/badges/aircrack-ng-netbsd81.svg?left_text=NetBSD%20Build&#34; alt=&#34;NetBSD 8.1 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/aircrack-ng&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/aircrack-ng/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagecloud.io/aircrack-ng/git/install#bash-deb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/deb-packagecloud.io-844fec.svg?sanitize=true&#34; alt=&#34;PackageCloud DEB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagecloud.io/aircrack-ng/git/install#bash-rpm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rpm-packagecloud.io-844fec.svg?sanitize=true&#34; alt=&#34;PackageCloud RPM&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aircrack-ng is a complete suite of tools to assess WiFi network security.&lt;/p&gt; &#xA;&lt;p&gt;It focuses on different areas of WiFi security:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monitoring: Packet capture and export of data to text files for further processing by third party tools.&lt;/li&gt; &#xA; &lt;li&gt;Attacking: Replay attacks, deauthentication, fake access points and others via packet injection.&lt;/li&gt; &#xA; &lt;li&gt;Testing: Checking WiFi cards and driver capabilities (capture and injection).&lt;/li&gt; &#xA; &lt;li&gt;Cracking: WEP and WPA PSK (WPA 1 and 2).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All tools are command line which allows for heavy scripting. A lot of GUIs have taken advantage of this feature. It works primarily on Linux but also Windows, macOS, FreeBSD, OpenBSD, NetBSD, as well as Solaris and even eComStation 2.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Autoconf&lt;/li&gt; &#xA; &lt;li&gt;Automake&lt;/li&gt; &#xA; &lt;li&gt;Libtool&lt;/li&gt; &#xA; &lt;li&gt;shtool&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL development package or libgcrypt development package.&lt;/li&gt; &#xA; &lt;li&gt;Airmon-ng (Linux) requires ethtool, usbutils, and often pciutils.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, cygwin has to be used and it also requires w32api package.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, if using clang, libiconv and libiconv-devel&lt;/li&gt; &#xA; &lt;li&gt;Linux: LibNetlink 1 or 3. It can be disabled by passing --disable-libnl to configure.&lt;/li&gt; &#xA; &lt;li&gt;pkg-config (pkgconf on FreeBSD)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD, OpenBSD, NetBSD, Solaris and OS X with Macports: gmake&lt;/li&gt; &#xA; &lt;li&gt;Linux/Cygwin: make and Standard C++ Library development package (Debian: libstdc++-dev)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Airmon-ng only requires pciutils if the system has a PCI/PCIe bus and it is populated. Such bus can be present even if not physically visible. For example, it is present, and populated on the Raspberry Pi 4, therefore pciutils is required on that device.&lt;/p&gt; &#xA;&lt;h2&gt;Optional stuff&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want SSID filtering with regular expression in airodump-ng (-essid-regex) PCRE development package is required.&lt;/li&gt; &#xA; &lt;li&gt;If you want to use airolib-ng and &#39;-r&#39; option in aircrack-ng, SQLite development package &amp;gt;= 3.3.17 (3.6.X version or better is recommended)&lt;/li&gt; &#xA; &lt;li&gt;If you want to use Airpcap, the &#39;developer&#39; directory from the CD/ISO/SDK is required.&lt;/li&gt; &#xA; &lt;li&gt;In order to build &lt;code&gt;besside-ng&lt;/code&gt;, &lt;code&gt;besside-ng-crawler&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;tkiptun-ng&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt;, libpcap development package is required (on Cygwin, use the Airpcap SDK instead; see above)&lt;/li&gt; &#xA; &lt;li&gt;rfkill&lt;/li&gt; &#xA; &lt;li&gt;If you want Airodump-ng to log GPS coordinates, gpsd is needed&lt;/li&gt; &#xA; &lt;li&gt;For best performance on SMP machines, ensure the hwloc library and headers are installed. It is strongly recommended on high core count systems, it may give a serious speed boost&lt;/li&gt; &#xA; &lt;li&gt;CMocka and expect for testing&lt;/li&gt; &#xA; &lt;li&gt;For integration testing on Linux only: tcpdump, HostAPd, WPA Supplicant and screen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing required and optional dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Below are instructions for installing the basic requirements to build &lt;code&gt;aircrack-ng&lt;/code&gt; for a number of operating systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: CMocka, tcpdump, screen, HostAPd and WPA Supplicant should not be dependencies when packaging Aircrack-ng.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -Sy base-devel libnl openssl ethtool util-linux zlib libpcap sqlite pcre hwloc cmocka hostapd wpa_supplicant tcpdump screen iw usbutils pciutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian/Ubuntu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential autoconf automake libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev libpcre3-dev libhwloc-dev libcmocka-dev hostapd wpasupplicant tcpdump screen iw usbutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CentOS/RHEL 7&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install epel-release&#xA;sudo ./centos_autotools.sh&#xA;# Remove older installation of automake/autoconf&#xA;sudo yum remove autoconf automake&#xA;sudo yum install sqlite-devel openssl-devel libpcap-devel pcre-devel rfkill libnl3-devel ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: autoconf, automake, libtool, and pkgconfig in the repositories are too old. The script centos_autotools.sh automatically installs dependencies to compile then install the tools.&lt;/p&gt; &#xA;&lt;h4&gt;CentOS/RHEL 8&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum config-manager --set-enabled powertools&#xA;sudo yum install epel-release&#xA;sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper install autoconf automake libtool pkg-config libnl3-devel libopenssl-1_1-devel zlib-devel libpcap-devel sqlite3-devel pcre-devel hwloc-devel libcmocka-devel hostapd wpa_supplicant tcpdump screen iw gcc-c++ gcc ethtool pciutils usbutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mageia&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo urpmi autoconf automake libtool pkgconfig libnl3-devel libopenssl-devel zlib-devel libpcap-devel sqlite3-devel pcre-devel hwloc-devel libcmocka-devel hostapd wpa_supplicant tcpdump screen iw gcc-c++ gcc make expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alpine&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apk add gcc g++ make autoconf automake libtool libnl3-dev openssl-dev ethtool libpcap-dev cmocka-dev hostapd wpa_supplicant tcpdump screen iw pkgconf util-linux sqlite-dev pcre-dev linux-headers zlib-dev pciutils usbutils expect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Community repository needs to be enabled for iw&lt;/p&gt; &#xA;&lt;h4&gt;Clear Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo swupd bundle-add c-basic devpkg-openssl devpkg-libgcrypt devpkg-libnl devpkg-hwloc devpkg-libpcap devpkg-pcre devpkg-sqlite-autoconf ethtool wget network-basic software-testing sysadmin-basic wpa_supplicant os-testsuite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: hostapd must be compiled manually, it is not present in the repository&lt;/p&gt; &#xA;&lt;h3&gt;BSD&lt;/h3&gt; &#xA;&lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install pkgconf shtool libtool gcc9 automake autoconf pcre sqlite3 openssl gmake hwloc cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DragonflyBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install pkgconf shtool libtool gcc8 automake autoconf pcre sqlite3 libgcrypt gmake cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add pkgconf shtool libtool gcc automake autoconf pcre sqlite3 openssl gmake cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;XCode, Xcode command line tools and HomeBrew are required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install autoconf automake libtool openssl shtool pkg-config hwloc pcre sqlite3 libpcap cmocka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Cygwin&lt;/h4&gt; &#xA;&lt;p&gt;Cygwin requires the full path to the &lt;code&gt;setup.exe&lt;/code&gt; utility, in order to automate the installation of the necessary packages. In addition, it requires the location of your installation, a path to the cached packages download location, and a mirror URL.&lt;/p&gt; &#xA;&lt;p&gt;An example of automatically installing all the dependencies is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;c:\cygwin\setup-x86.exe -qnNdO -R C:/cygwin -s http://cygwin.mirror.constant.com -l C:/cygwin/var/cache/setup -P autoconf -P automake -P bison -P gcc-core -P gcc-g++ -P mingw-runtime -P mingw-binutils -P mingw-gcc-core -P mingw-gcc-g++ -P mingw-pthreads -P mingw-w32api -P libtool -P make -P python -P gettext-devel -P gettext -P intltool -P libiconv -P pkg-config -P git -P wget -P curl -P libpcre-devel -P libssl-devel -P libsqlite3-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MSYS2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -Sy autoconf automake-wrapper libtool msys2-w32api-headers msys2-w32api-runtime gcc pkg-config git python openssl-devel openssl libopenssl msys2-runtime-devel gcc binutils make pcre-devel libsqlite-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;To build &lt;code&gt;aircrack-ng&lt;/code&gt;, the Autotools build system is utilized. Autotools replaces the older method of compilation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If utilizing a developer version, eg: one checked out from source control, you will need to run a pre-&lt;code&gt;configure&lt;/code&gt; script. The script to use is one of the following: &lt;code&gt;autoreconf -i&lt;/code&gt; or &lt;code&gt;env NOCONFIGURE=1 ./autogen.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, &lt;code&gt;./configure&lt;/code&gt; the project for building with the appropriate options specified for your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure &amp;lt;options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: If the above fails, please see above about developer source control versions.&lt;/p&gt; &#xA;&lt;p&gt;Next, compile the project (respecting if &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;gmake&lt;/code&gt; is needed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Compilation:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compilation on *BSD or Solaris:&lt;/p&gt; &lt;p&gt;&lt;code&gt;gmake&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, the additional targets listed below may be of use in your environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute all unit testing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make check&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute all integration testing (requires root):&lt;/p&gt; &lt;p&gt;&lt;code&gt;make integration&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uninstall:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make uninstall&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;./configure&lt;/code&gt; flags&lt;/h3&gt; &#xA;&lt;p&gt;When configuring, the following flags can be used and combined to adjust the suite to your choosing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-airpcap=DIR&lt;/strong&gt;: needed for supporting airpcap devices on windows (cygwin or msys2 only) Replace DIR above with the absolute location to the root of the extracted source code from the Airpcap CD or downloaded SDK available online. Required on Windows to build &lt;code&gt;besside-ng&lt;/code&gt;, &lt;code&gt;besside-ng-crawler&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;tkiptun-ng&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt; when building experimental tools. The developer pack (Compatible with version 4.1.1 and 4.1.3) can be downloaded at &lt;a href=&#34;https://support.riverbed.com/content/support/software/steelcentral-npm/airpcap.html&#34;&gt;https://support.riverbed.com/content/support/software/steelcentral-npm/airpcap.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-experimental&lt;/strong&gt;: needed to compile &lt;code&gt;tkiptun-ng&lt;/code&gt;, &lt;code&gt;easside-ng&lt;/code&gt;, &lt;code&gt;buddy-ng&lt;/code&gt;, &lt;code&gt;buddy-ng-crawler&lt;/code&gt;, &lt;code&gt;airventriloquist&lt;/code&gt; and &lt;code&gt;wesside-ng&lt;/code&gt;. libpcap development package is also required to compile most of the tools. If not present, not all experimental tools will be built. On Cygwin, libpcap is not present and the Airpcap SDK replaces it. See --with-airpcap option above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-ext-scripts&lt;/strong&gt;: needed to build &lt;code&gt;airoscript-ng&lt;/code&gt;, &lt;code&gt;versuck-ng&lt;/code&gt;, &lt;code&gt;airgraph-ng&lt;/code&gt; and &lt;code&gt;airdrop-ng&lt;/code&gt;. Note: Each script has its own dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-gcrypt&lt;/strong&gt;: Use libgcrypt crypto library instead of the default OpenSSL. And also use internal fast sha1 implementation (borrowed from GIT) Dependency (Debian): libgcrypt20-dev&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-duma&lt;/strong&gt;: Compile with DUMA support. DUMA is a library to detect buffer overruns and under-runs. Dependencies (debian): duma&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;disable-libnl&lt;/strong&gt;: Set-up the project to be compiled without libnl (1 or 3). Linux option only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;without-opt&lt;/strong&gt;: Do not enable stack protector (on GCC 4.9 and above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;enable-shared&lt;/strong&gt;: Make OSdep a shared library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;disable-shared&lt;/strong&gt;: When combined with &lt;strong&gt;enable-static&lt;/strong&gt;, it will statically compile Aircrack-ng.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-avx512&lt;/strong&gt;: On x86, add support for AVX512 instructions in aircrack-ng. Only use it when the current CPU supports AVX512.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;with-static-simd=&#xA;    &lt;simd&gt;&lt;/simd&gt;&lt;/strong&gt;: Compile a single optimization in aircrack-ng binary. Useful when compiling statically and/or for space-constrained devices. Valid SIMD options: x86-sse2, x86-avx, x86-avx2, x86-avx512, ppc-altivec, ppc-power8, arm-neon, arm-asimd. Must be used with --enable-static --disable-shared. When using those 2 options, the default is to compile the generic optimization in the binary. --with-static-simd merely allows to choose another one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;enable-maintainer-mode&lt;/strong&gt;: It is important to enable this flag when developing with Aircrack-ng. This flag enables additional compile warnings and safety features.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure and compiling:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling with gcrypt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-gcrypt&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing:&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing (strip binaries):&lt;/p&gt; &lt;p&gt;&lt;code&gt;make install-strip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing, with external scripts:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental --with-ext-scripts&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Testing (with sqlite, experimental and pcre)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on OS X with macports (and all options):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-experimental&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on macOS running on M1/AARCH64 and Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;autoreconf -vif&#xA;env CPPFLAGS=&#34;-Wno-deprecated-declarations&#34; ./configure --with-experimental&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on OS X 10.10 with XCode 7.1 and Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc-4.9 CXX=g++-4.9 ./configure&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Older XCode ships with a version of LLVM that does not support CPU feature detection; which causes the &lt;code&gt;./configure&lt;/code&gt; to fail. To work around this older LLVM, it is required that a different compile suite is used, such as GCC or a newer LLVM from Homebrew.&lt;/p&gt; &lt;p&gt;If you wish to use OpenSSL from Homebrew, you may need to specify the location to its&#39; installation. To figure out where OpenSSL lives, run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew --prefix openssl&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the output above as the DIR for &lt;code&gt;--with-openssl=DIR&lt;/code&gt; in the &lt;code&gt;./configure&lt;/code&gt; line:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc-4.9 CXX=g++-4.9 ./configure --with-openssl=DIR&#xA;make&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on FreeBSD with gcc9&lt;/p&gt; &lt;pre&gt;&lt;code&gt;env CC=gcc9 CXX=g++9 MAKE=gmake ./configure&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on Cygwin with Airpcap (assuming Airpcap devpack is unpacked in Aircrack-ng directory)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src&#xA;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-osdep&#xA;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-crypto&#xA;cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll src/aircrack-util&#xA;dlltool -D Airpcap_Devpack/bin/x86/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x86/libairpcap.dll.a&#xA;autoreconf -i&#xA;./configure --with-experimental --with-airpcap=$(pwd)&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on DragonflyBSD with gcrypt using GCC 8&lt;/p&gt; &lt;pre&gt;&lt;code&gt;autoreconf -i&#xA;env CC=gcc8 CXX=g++8 MAKE=gmake ./configure --with-experimental --with-gcrypt&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling on OpenBSD (with autoconf 2.69 and automake 1.16)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export AUTOCONF_VERSION=2.69&#xA;export AUTOMAKE_VERSION=1.16&#xA;autoreconf -i&#xA;env MAKE=gmake CC=cc CXX=c++ ./configure&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiling and debugging aircrack-ng&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CFLAGS=&#39;-O0 -g&#39;&#xA;export CXXFLAGS=&#39;-O0 -g&#39;&#xA;./configure --with-experimental --enable-maintainer-mode --without-opt&#xA;make&#xA;LD_LIBRARY_PATH=.libs gdb --args ./aircrack-ng [PARAMETERS]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;IDE development&lt;/h1&gt; &#xA;&lt;h2&gt;VS Code - devcontainers&lt;/h2&gt; &#xA;&lt;p&gt;A VS Code development environment is provided, as is, for rapid setup of a development environment. This additionally adds support for GitHub Codespaces.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The first requirement is a working &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker Engine&lt;/a&gt; environment.&lt;/p&gt; &#xA;&lt;p&gt;Next, an installation of &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; with the following extension(s):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;&lt;code&gt;Remote - Containers&lt;/code&gt;&lt;/a&gt; by Microsoft.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &#34;Remote - Containers&#34; extension will refuse to work with OSS Code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to your working folder:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/aircrack-ng/aircrack-ng.git&#xA;$ cd aircrack-ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After cloning this repository, open the folder inside VS Code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ code .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;IMPORTANT: You should answer &#34;Yes&#34;, if it asks if the folder should be opened inside a remote container. If it does not ask, then press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and type &lt;code&gt;open in container&lt;/code&gt;. This should bring up the correct command, for which pressing enter will run said command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;A number of warnings might appear about a missing &lt;code&gt;compile_commands.json&lt;/code&gt; file. These are safe to ignore for a moment, as this file is automatically generated after the initial compilation.&lt;/li&gt; &#xA; &lt;li&gt;Now build the entire project by pressing &lt;code&gt;Ctrl+R&lt;/code&gt; and selecting &lt;code&gt;Build Full&lt;/code&gt; from the pop-up menu that appears.&lt;/li&gt; &#xA; &lt;li&gt;VS Code should detect the &lt;code&gt;compile_commands.json&lt;/code&gt; file and ask if it should be used; selecting &#34;Yes, always&#34; will complete the initial setup of a fully working IDE.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;IMPORTANT: If it doesn&#39;t detect the file, pressing &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and typing &lt;code&gt;reload window&lt;/code&gt; will bring up the selection to fully reload the environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;At this point, nearly all features of VS Code will function; from Intellisense, auto-completion, live documentation, to code formatting. Additionally, there are pre-configured tasks for builds and tests, as well as an example GDB/LLDB configuration for debugging &lt;code&gt;aircrack-ng&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Packaging&lt;/h1&gt; &#xA;&lt;p&gt;Automatic detection of CPU optimization is done at run time. This behavior &lt;strong&gt;is&lt;/strong&gt; desirable when packaging Aircrack-ng (for a Linux or other distribution.)&lt;/p&gt; &#xA;&lt;p&gt;Also, in some cases it may be desired to provide your own flags completely and not having the suite auto-detect a number of optimizations. To do this, add the additional flag &lt;code&gt;--without-opt&lt;/code&gt; to the &lt;code&gt;./configure&lt;/code&gt; line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./configure --without-opt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Using pre-compiled binaries&lt;/h1&gt; &#xA;&lt;h2&gt;Linux/BSD&lt;/h2&gt; &#xA;&lt;p&gt;Aircrack-ng is available in most distributions repositories. However, it is not always up to date.&lt;/p&gt; &#xA;&lt;p&gt;We provide up to date versions via PackageCloud for a number of Linux distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;development (each commit in this repo): &lt;a href=&#34;https://packagecloud.io/aircrack-ng/git&#34;&gt;https://packagecloud.io/aircrack-ng/git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;stable releases: &lt;a href=&#34;https://packagecloud.io/aircrack-ng/release&#34;&gt;https://packagecloud.io/aircrack-ng/release&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the appropriate &#34;monitor&#34; driver for your card; standard drivers don&#39;t work for capturing data.&lt;/li&gt; &#xA; &lt;li&gt;Aircrack-ng suite is command line tools. So, you have to open a command-line &lt;code&gt;Start menu -&amp;gt; Run... -&amp;gt; cmd.exe&lt;/code&gt; then use them&lt;/li&gt; &#xA; &lt;li&gt;Run the executables without any parameters to have help&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Continuous integration&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux CI (GitHub actions): &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux.yml&#34;&gt;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/linux.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows CI (Github actions): &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/windows.yml&#34;&gt;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/windows.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS CI (GitHub actions): &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/macos.yml&#34;&gt;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/macos.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code style and consistency (GitHub actions): &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/style.yml&#34;&gt;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/style.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PVS-Studio static analysis (GitHub actions): &lt;a href=&#34;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/pvs-studio.yml&#34;&gt;https://github.com/aircrack-ng/aircrack-ng/actions/workflows/pvs-studio.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Coverity Scan static analysis: &lt;a href=&#34;https://scan.coverity.com/projects/aircrack-ng&#34;&gt;https://scan.coverity.com/projects/aircrack-ng&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Buildbots&lt;/h2&gt; &#xA;&lt;p&gt;URL: &lt;a href=&#34;https://buildbot.aircrack-ng.org/&#34;&gt;https://buildbot.aircrack-ng.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux buildbots:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CentOS&lt;/li&gt; &#xA; &lt;li&gt;AArch64&lt;/li&gt; &#xA; &lt;li&gt;Kali Linux&lt;/li&gt; &#xA; &lt;li&gt;Armel Kali Linux&lt;/li&gt; &#xA; &lt;li&gt;Armhf Kali Linux&lt;/li&gt; &#xA; &lt;li&gt;Alpine Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BSD buildbots:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenBSD&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;NetBSD&lt;/li&gt; &#xA; &lt;li&gt;DragonflyBSD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Some more information is present in the &lt;a href=&#34;https://raw.githubusercontent.com/aircrack-ng/aircrack-ng/master/README&#34;&gt;README&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Documentation, tutorials, ... can be found on &lt;a href=&#34;https://aircrack-ng.org&#34;&gt;https://aircrack-ng.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support is available in the &lt;a href=&#34;https://forum.aircrack-ng.org&#34;&gt;forum&lt;/a&gt; and on IRC (in #aircrack-ng on Libera Chat).&lt;/p&gt; &#xA;&lt;p&gt;Every tool has its own manpage. For aircrack-ng, &lt;code&gt;man aircrack-ng&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Infrastructure sponsors&lt;/h1&gt;</summary>
  </entry>
</feed>