<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-03T01:24:18Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>buserror/libmui</title>
    <updated>2024-04-03T01:24:18Z</updated>
    <id>tag:github.com,2024-04-03:/buserror/libmui</id>
    <link href="https://github.com/buserror/libmui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classic MacOS &amp; GS/OS widget library for linux (and other?)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What the hell is this?&lt;/h1&gt; &#xA;&lt;p&gt;This is a contender for the World Record for Feature Creep Side Project. It is pretty high in the contender list as it&#39;s a bolt on to &lt;em&gt;another&lt;/em&gt; contender for the World Record for Feature Creep Side Project (the &lt;a href=&#34;http://github.com/buserror/mii_emu&#34;&gt;MII Apple //e emulator&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;It is a library that duplicate a lot of a Macintosh Classic &#34;Toolbox&#34; APIs. It is not a complete implementation, but it is enough to make a few simple applications, also, all the bits I needed for the MII emulator.&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/buserror/libmui/master/doc/widgets.gif&#34; alt=&#34;10 seconds demo&#34;&gt; &#xA; &lt;i&gt;10 seconds demo&lt;/i&gt; &#xA;&lt;/center&gt; &#xA;&lt;h1&gt;Why?&lt;/h1&gt; &#xA;&lt;p&gt;Well I wanted a UI library for MII -- something without tons of dependencies, and I didn&#39;t want the typical &#39;game like&#39; style with &#34;Arrow Keys + Return + Escape&#34; sort of menus.&lt;/p&gt; &#xA;&lt;p&gt;I started with Nuklear immediate mode UI, but it both look super ugly, AND is very limited as soon as you want to do something &#39;custom&#39;, and I didn&#39;t see myself hacking into that codebase. One thing I particularly dislike is the &#39;layout&#39; engine that decide to put stuff where it wants, and it&#39;s &lt;em&gt;never&lt;/em&gt; in the &#39;right&#39; place, like a hard case of &#39;computer say so&#39; -- typicaly result into something like Programmer&#39;s Art, just worse. That&#39;s why Linux On The Deskop is famous for it&#39;s Pixel Perfection polished UIs. &lt;em&gt;Cough&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The other things I don&#39;t like with the trendy IM UIs is that they promise you that you don&#39;t have to keep a separate state around blah blah, however they forget to mention that there IS a state kept for you, based on hash values, and if you are unlucky enough to have a hash clash, you are screwed. I&#39;ve seen that happen in real life, and it&#39;s not pretty to debug.&lt;/p&gt; &#xA;&lt;p&gt;I miss the days were UIs were /crafted/ not just decided for you bad a bad &#39;layouting&#39; engine with huge rectangular flat buttons and no sense whatsoever of &#39;design&#39; or usability.&lt;/p&gt; &#xA;&lt;p&gt;Also, I realized I had quite a few bits that I could use to make my own library anyway, so I started to do that.&lt;/p&gt; &#xA;&lt;p&gt;Also, I like making my own toys. There, happy now?&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/buserror/libmui/master/doc/control_demo.png&#34; alt=&#34;Basic Controls&#34;&gt; &#xA; &lt;i&gt;Control Demo&lt;/i&gt; &#xA;&lt;/center&gt; &#xA;&lt;h1&gt;What can it do?&lt;/h1&gt; &#xA;&lt;p&gt;Well, it has a few of the classic &#39;managers&#39; that the Macintosh Toolbox had. Or the later GS/OS. However it behaves more like a modern system, it&#39;s not &#39;synchronous&#39; like the old toolbox. Stuff gets redrawn even if you are clicking/dragging etc without having to &#39;do it yourself&#39;.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to draw into a &#39;screen&#39; that is an ARGB buffer. You can then copy that to wherever you fancy.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the case of MII, it&#39;s an OpenGL texture that gets overlayed;&lt;/li&gt; &#xA; &lt;li&gt;In the &#39;example&#39; folder, the playground demo copies it to an X11 window via a XCB &#39;shared&#39; pixmap, so works great even via remote X11. The library is &#39;smart&#39;, like the old OSes, it keeps track of &#39;invalid&#39; regions, and only redraws what is needed, so theres very very little overdraw.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One small drawback is that the output &lt;em&gt;has&lt;/em&gt; to be ARGB -- so if you want to render say on a 16 bit framebuffer, you&#39;ll have to do the conversion yourself, luckily, you only have to draw/convert the &#39;dirty&#39; regions, so it&#39;s not too bad.&lt;/p&gt; &#xA;&lt;p&gt;It could be possible to &#39;vectorize&#39; the rendering to vertice buffers and stuff, but really, it&#39;s not needed, it&#39;s fast enough as it is and it would fall back the &#39;lets redraw everything&#39; behaviour of the IMmediate UI libraries.&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/buserror/libmui/master/doc/static_text.png&#34; alt=&#34;Basic text boxes&#34;&gt; &#xA; &lt;i&gt;Some basic text boxes&lt;/i&gt; &#xA;&lt;/center&gt; &#xA;&lt;h1&gt;How does it differ from the original?&lt;/h1&gt; &#xA;&lt;p&gt;Well, in terms of looks, it&#39;s kinda like I started with MacOS8/9, but removed all the grayscale bits. Bizarelly, I think System 7 &#39;flat&#39; looks has aged better than the &#39;grayscale&#39; look of 8/9, so I went with that. Most of the &#39;visible&#39; difference are really related to the dialog&#39;s popup menus, which are a lot more &#39;OS8&#39; than &#39;OS7&#39;. The Scrollbar is definitely more GS/OS though, never understood why it took so long for MacOS to adopt that.&lt;/p&gt; &#xA;&lt;p&gt;In terms of of the API, one massive change is that it is fully asynchronous, and you &lt;em&gt;can&#39;t&lt;/em&gt; just spinloop and draw things in a window or GrafPort whenever you feel like it, like on the original. Instead, you change the state of the UI, and it will redraw itself when it needs to. This is a lot more like modern UI libraries in that respect.&lt;/p&gt; &#xA;&lt;p&gt;Many things will look familiar, if like me you were a developer back then, I tried to use most of the names of things as is; and I even have all the elements drawn by WDEF, CDEF, LDEF functions, which is fun. Also pretty easy to customize. by adding your own, like in the old days.&lt;/p&gt; &#xA;&lt;p&gt;Also, for the API, it&#39;s all &#39;callback&#39; based. No more polling. You don&#39;t have to &#39;ask&#39; the UI if something happened, it will tell you when it does. This is also a lot more like modern UI libraries.&lt;/p&gt; &#xA;&lt;p&gt;It is also a lot simpler than the original in concept; everything is either a &lt;em&gt;mui_window&lt;/em&gt; (Well, windows, menubars and menus) OR a &lt;em&gt;mui_control&lt;/em&gt; (Menu titles, menu items, everything in windows, even separator lines).&lt;/p&gt; &#xA;&lt;h2&gt;Window Manager&lt;/h2&gt; &#xA;&lt;p&gt;It can create windows, and it can draw into them. Has up to 15 &#39;layers&#39;, and can do clipping and stuff. Got the typical &#39;BringToFront&#39; behaviour, and you can drag windows around.&lt;/p&gt; &#xA;&lt;p&gt;I deliberately limited the number of coordinate systems to 2 -- like the old one; so you get the &#39;screen coordinates&#39; and the &#39;window content coordinates&#39;. I was half tempted to create a fully hierarchical system, but realized it was really not neeeded, and would just make things more complicated.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a &#39;smart&#39; window manager, it keeps track of an &#39;invalid&#39; list of rectangles, and clips to that when redrawing, so it doesn&#39;t redraw the whole window every time, yeah, like the original. None of that &#39;lets redraw absolutely everything every frame&#39; stuff like Immediate Mode UIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s missing bits like &#39;zooming&#39; (TODO), and &#39;resizing&#39; (TODO).&lt;/li&gt; &#xA; &lt;li&gt;It doesn&#39;t do transparent windows. It is by design, it draws windows &#39;top down&#39; to optimize clipping -- adding transparency wouldn&#39;t be hard, but I&#39;d have to draw the windows &#39;bottom up&#39; to handle blending, and we&#39;d revert back to drawing a lot of stuff for very little return.&lt;/li&gt; &#xA; &lt;li&gt;Also, you can always alpha blend the whole &lt;em&gt;ui&lt;/em&gt; &#39;screen&#39; to wherever you want, so it&#39;s not like you can&#39;t have transparency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Menu Manager&lt;/h2&gt; &#xA;&lt;p&gt;Menubar, menus, checkmarks, keyboard shortcuts, all that stuff. Made to looks like System 7/8, or GS/OS. This was the most complicated bit to do, and it&#39;s still not perfect -- turns out the original had quite a few features that are not obvious at first glance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It has hierarchical menus, they don&#39;t behave &lt;em&gt;perfectly&lt;/em&gt; like the original yet, I&#39;ll have to revisit that for a better match.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s missing displaying and scrolling super large popups (TODO).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It will call your &#39;action&#39; callback when you click on a menu item, or when you press the key of a keyboard shortcut. Easy, peasy.&lt;/li&gt; &#xA; &lt;li&gt;There is half baked support for sticky menus, but it&#39;s disabled for now as it&#39;s not quite right yet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Control Manager&lt;/h2&gt; &#xA;&lt;p&gt;Buttons, checkboxes, radio buttons, scrollbars (vertical), wrapping textboxes, all that stuff.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s missing bits like Edit Field (Work in Progress), and a Slider.&lt;/li&gt; &#xA; &lt;li&gt;There IS a prototype version of a text edit control, but it&#39;s not quite right yet -- works fine for a one liner etc, but not for a multi line text box. Not far off tho.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;List Manager&lt;/h2&gt; &#xA;&lt;p&gt;More or less hard coded to display filenames so far, but plain lists are actually easier than this so. Handle arrow keys/page up/down, scroll wheel, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s missing a way to &#39;compress&#39; the font and/or use ellipsis abreviations (TODO) when the item text is too long.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You CAN use &#39;typeahead&#39; to find the item you want, like the original.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alerts&lt;/h2&gt; &#xA;&lt;p&gt;It has the typical &#39;Cancel&#39;+&#39;OK&#39; alert.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Could do with more types of alerts (TODO).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/buserror/libmui/master/doc/alert.png&#34; alt=&#34;Basic Alert&#34;&gt; &#xA; &lt;i&gt;Basic Alert Dialog&lt;/i&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Standard File&lt;/h2&gt; &#xA;&lt;p&gt;It has the classic &#39;Open&#39; a file dialog. Haven&#39;t needed the other one. yet. This one one of the primary goal of the UI library to start with, so I spent quite a bit of time getting it &#39;right&#39;, quite happy about how it turned out.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Could do with a &#39;Save&#39; dialog (TODO).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It has an extra popup with the last few used directories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use arrow keys, page/up down, and you can even typehead to the file you want, like in the old MacOS!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/buserror/libmui/master/doc/standard_get_file.png&#34; alt=&#34;Standard Get File&#34;&gt; &#xA; &lt;i&gt;Standard Get File&lt;/i&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Resource Manager&lt;/h2&gt; &#xA;&lt;p&gt;Nope! Not there; I&#39;d need some sort of ResEdit and stuff -- and now that is &lt;em&gt;ONE&lt;/em&gt; Feature Creep Too Far thank you very much. I have a vague idea of making some sort of MessagePack format for resources, but that&#39;s for another day.&lt;/p&gt; &#xA;&lt;h1&gt;So, what &lt;em&gt;are&lt;/em&gt; the dependencies?&lt;/h1&gt; &#xA;&lt;p&gt;Well, &lt;em&gt;external&lt;/em&gt; dependencies are just &lt;em&gt;libpixman&lt;/em&gt; -- that&#39;s it. It&#39;s a library that does pixel pushing, it&#39;s used everywhere, it&#39;s massively optimized, and it has &#39;regions&#39; which are super useful for clipping -- they aren&#39;t &lt;em&gt;as good&lt;/em&gt; as the regions in QuickDraw, but they are good enough.&lt;/p&gt; &#xA;&lt;p&gt;Other bits I used to make it are rolled into the source code anyway, so it&#39;s not like you need to install them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libpixman: as mentioned, you&#39;ll need libpixman-dev installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xboot/libcg&#34;&gt;libcg&lt;/a&gt;: a small antialiased renderer that looks vaguely like &lt;em&gt;cairo&lt;/em&gt; but comes in just 2 files, with a nice licence. It&#39;s likely far from being the most optimized, but it&#39;s largely good enough.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb_truetype.h&lt;/a&gt;: a small library to load truetype fonts, it&#39;s used to load the system fonts.&lt;/li&gt; &#xA; &lt;li&gt;stb_ttc.h: my own extension to stb_truetype.h, makes up a font/glyph dictionary with hash tables, font textures etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it, all the other bits I already had &#39;in stock&#39; -- the 2D geometry bits I made 25+ years ago, they were rolled in &lt;a href=&#34;https://github.com/buserror/simreprap&#34;&gt;libc3&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h1&gt;How do I build it?&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s a simple Makefile, so you just need to do a &#39;make&#39; in the root directory. It will build the library, and the tests/demos/samples. To build the tests/demos/samples, you&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xcb xcb-shm xcb-randr xkbcommon-x11 -- this is just to run the &#39;mui_shell&#39; demo, which is a simple window with a few buttons and stuff.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nvidia Driver gotcha&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Note&lt;/em&gt; that if you use the nvidia binary driver (I do), you will need to add a flag to your config, otherwise the mui_shell won&#39;t work. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add: &#39;Option &#34;AllowSHMPixmaps&#34; &#34;1&#34;&#39; to the &#34;Device&#34; In your /etc/X11/xorg.conf file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How do I use it?&lt;/h1&gt; &#xA;&lt;p&gt;Well the best way is to hack around &lt;em&gt;mui_shell.c&lt;/em&gt; and &lt;em&gt;mui_widgets_demo.c&lt;/em&gt;. It&#39;s a simple window with a few buttons and stuff, and it&#39;s a good place to start.&lt;/p&gt; &#xA;&lt;p&gt;The cool thing about ui_mui_shell is that it loads mui_widgets_demo.so as a &lt;em&gt;plugin&lt;/em&gt; and auto-reload it if it detects a change. So you can hack around mui_widgets_demo.c, and it will reload it and run it again! You can code a new dialog insanely fast with that, pretty must as fast as you would with a resource editor.&lt;/p&gt; &#xA;&lt;p&gt;A good trick is to use &#39;make watch&#39; on the &lt;em&gt;libmui&lt;/em&gt; directory in a terminal tab, and it will rebuild the library and the mui_shell automatically when you change something, that with the &#39;auto save&#39; of your editor, and you will have a constantly building/running mui_shell as you hack around.&lt;/p&gt; &#xA;&lt;p&gt;Have fun!&lt;/p&gt; &#xA;&lt;h1&gt;FAQ!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ok so, is there a dark mode? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fine, but at least it is themable, right? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tranparent Windows and a Cube Effect ?!@?! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What, menu aren&#39;t sticky? They don&#39;t stay up when you release the mouse button? Common throw us a bone here man, it&#39;s 2023! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;But, is it at least using the super trendy tools? cmake? meson? ninja? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What about autotools, seriously? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Are there any bindings for any of the fancy new languages? Rust? Go? Python? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Is it using any of the super trendy framerworks? GTK? QT? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What about SDL? It&#39;s cross Platform, it is Ugly Everywhere Equally! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And Wayland then? Wayland is The Future after all! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;center&gt;&#xA; &lt;h1&gt;Now, GET OFF MY LAWN!&lt;/h1&gt;&#xA;&lt;/center&gt;</summary>
  </entry>
  <entry>
    <title>xz-mirror/xz</title>
    <updated>2024-04-03T01:24:18Z</updated>
    <id>tag:github.com,2024-04-03:/xz-mirror/xz</id>
    <link href="https://github.com/xz-mirror/xz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;See https://github.com/tukaani-project/xz for the official repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XZ Utils&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;0. Overview&#xA;1. Documentation&#xA;   1.1. Overall documentation&#xA;   1.2. Documentation for command-line tools&#xA;   1.3. Documentation for liblzma&#xA;2. Version numbering&#xA;3. Reporting bugs&#xA;4. Translations&#xA;5. Other implementations of the .xz format&#xA;6. Contact information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Overview&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;XZ Utils provide a general-purpose data-compression library plus&#xA;command-line tools. The native file format is the .xz format, but&#xA;also the legacy .lzma format is supported. The .xz format supports&#xA;multiple compression algorithms, which are called &#34;filters&#34; in the&#xA;context of XZ Utils. The primary filter is currently LZMA2. With&#xA;typical files, XZ Utils create about 30 % smaller files than gzip.&#xA;&#xA;To ease adapting support for the .xz format into existing applications&#xA;and scripts, the API of liblzma is somewhat similar to the API of the&#xA;popular zlib library. For the same reason, the command-line tool xz&#xA;has a command-line syntax similar to that of gzip.&#xA;&#xA;When aiming for the highest compression ratio, the LZMA2 encoder uses&#xA;a lot of CPU time and may use, depending on the settings, even&#xA;hundreds of megabytes of RAM. However, in fast modes, the LZMA2 encoder&#xA;competes with bzip2 in compression speed, RAM usage, and compression&#xA;ratio.&#xA;&#xA;LZMA2 is reasonably fast to decompress. It is a little slower than&#xA;gzip, but a lot faster than bzip2. Being fast to decompress means&#xA;that the .xz format is especially nice when the same file will be&#xA;decompressed very many times (usually on different computers), which&#xA;is the case e.g. when distributing software packages. In such&#xA;situations, it&#39;s not too bad if the compression takes some time,&#xA;since that needs to be done only once to benefit many people.&#xA;&#xA;With some file types, combining (or &#34;chaining&#34;) LZMA2 with an&#xA;additional filter can improve the compression ratio. A filter chain may&#xA;contain up to four filters, although usually only one or two are used.&#xA;For example, putting a BCJ (Branch/Call/Jump) filter before LZMA2&#xA;in the filter chain can improve compression ratio of executable files.&#xA;&#xA;Since the .xz format allows adding new filter IDs, it is possible that&#xA;some day there will be a filter that is, for example, much faster to&#xA;compress than LZMA2 (but probably with worse compression ratio).&#xA;Similarly, it is possible that some day there is a filter that will&#xA;compress better than LZMA2.&#xA;&#xA;XZ Utils supports multithreaded compression. XZ Utils doesn&#39;t support&#xA;multithreaded decompression yet. It has been planned though and taken&#xA;into account when designing the .xz file format. In the future, files&#xA;that were created in threaded mode can be decompressed in threaded&#xA;mode too.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;1.1. Overall documentation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;README              This file&#xA;&#xA;INSTALL.generic     Generic install instructions for those not familiar&#xA;                    with packages using GNU Autotools&#xA;INSTALL             Installation instructions specific to XZ Utils&#xA;PACKAGERS           Information to packagers of XZ Utils&#xA;&#xA;COPYING             XZ Utils copyright and license information&#xA;COPYING.GPLv2       GNU General Public License version 2&#xA;COPYING.GPLv3       GNU General Public License version 3&#xA;COPYING.LGPLv2.1    GNU Lesser General Public License version 2.1&#xA;&#xA;AUTHORS             The main authors of XZ Utils&#xA;THANKS              Incomplete list of people who have helped making&#xA;                    this software&#xA;NEWS                User-visible changes between XZ Utils releases&#xA;ChangeLog           Detailed list of changes (commit log)&#xA;TODO                Known bugs and some sort of to-do list&#xA;&#xA;Note that only some of the above files are included in binary&#xA;packages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.2. Documentation for command-line tools&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The command-line tools are documented as man pages. In source code&#xA;releases (and possibly also in some binary packages), the man pages&#xA;are also provided in plain text (ASCII only) and PDF formats in the&#xA;directory &#34;doc/man&#34; to make the man pages more accessible to those&#xA;whose operating system doesn&#39;t provide an easy way to view man pages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.3. Documentation for liblzma&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The liblzma API headers include short docs about each function&#xA;and data type as Doxygen tags. These docs should be quite OK as&#xA;a quick reference.&#xA;&#xA;There are a few example/tutorial programs that should help in&#xA;getting started with liblzma. In the source package the examples&#xA;are in &#34;doc/examples&#34; and in binary packages they may be under&#xA;&#34;examples&#34; in the same directory as this README.&#xA;&#xA;Since the liblzma API has similarities to the zlib API, some people&#xA;may find it useful to read the zlib docs and tutorial too:&#xA;&#xA;    https://zlib.net/manual.html&#xA;    https://zlib.net/zlib_how.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Version numbering&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;The version number format of XZ Utils is X.Y.ZS:&#xA;&#xA;  - X is the major version. When this is incremented, the library&#xA;    API and ABI break.&#xA;&#xA;  - Y is the minor version. It is incremented when new features&#xA;    are added without breaking the existing API or ABI. An even Y&#xA;    indicates a stable release and an odd Y indicates unstable&#xA;    (alpha or beta version).&#xA;&#xA;  - Z is the revision. This has a different meaning for stable and&#xA;    unstable releases:&#xA;&#xA;      * Stable: Z is incremented when bugs get fixed without adding&#xA;        any new features. This is intended to be convenient for&#xA;        downstream distributors that want bug fixes but don&#39;t want&#xA;        any new features to minimize the risk of introducing new bugs.&#xA;&#xA;      * Unstable: Z is just a counter. API or ABI of features added&#xA;        in earlier unstable releases having the same X.Y may break.&#xA;&#xA;  - S indicates stability of the release. It is missing from the&#xA;    stable releases, where Y is an even number. When Y is odd, S&#xA;    is either &#34;alpha&#34; or &#34;beta&#34; to make it very clear that such&#xA;    versions are not stable releases. The same X.Y.Z combination is&#xA;    not used for more than one stability level, i.e. after X.Y.Zalpha,&#xA;    the next version can be X.Y.(Z+1)beta but not X.Y.Zbeta.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Reporting bugs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;Naturally it is easiest for me if you already know what causes the&#xA;unexpected behavior. Even better if you have a patch to propose.&#xA;However, quite often the reason for unexpected behavior is unknown,&#xA;so here are a few things to do before sending a bug report:&#xA;&#xA;  1. Try to create a small example how to reproduce the issue.&#xA;&#xA;  2. Compile XZ Utils with debugging code using configure switches&#xA;     --enable-debug and, if possible, --disable-shared. If you are&#xA;     using GCC, use CFLAGS=&#39;-O0 -ggdb3&#39;. Don&#39;t strip the resulting&#xA;     binaries.&#xA;&#xA;  3. Turn on core dumps. The exact command depends on your shell;&#xA;     for example in GNU bash it is done with &#34;ulimit -c unlimited&#34;,&#xA;     and in tcsh with &#34;limit coredumpsize unlimited&#34;.&#xA;&#xA;  4. Try to reproduce the suspected bug. If you get &#34;assertion failed&#34;&#xA;     message, be sure to include the complete message in your bug&#xA;     report. If the application leaves a coredump, get a backtrace&#xA;     using gdb:&#xA;       $ gdb /path/to/app-binary   # Load the app to the debugger.&#xA;       (gdb) core core   # Open the coredump.&#xA;       (gdb) bt   # Print the backtrace. Copy &amp;amp; paste to bug report.&#xA;       (gdb) quit   # Quit gdb.&#xA;&#xA;Report your bug via email or IRC (see Contact information below).&#xA;Don&#39;t send core dump files or any executables. If you have a small&#xA;example file(s) (total size less than 256 KiB), please include&#xA;it/them as an attachment. If you have bigger test files, put them&#xA;online somewhere and include a URL to the file(s) in the bug report.&#xA;&#xA;Always include the exact version number of XZ Utils in the bug report.&#xA;If you are using a snapshot from the git repository, use &#34;git describe&#34;&#xA;to get the exact snapshot version. If you are using XZ Utils shipped&#xA;in an operating system distribution, mention the distribution name,&#xA;distribution version, and exact xz package version; if you cannot&#xA;repeat the bug with the code compiled from unpatched source code,&#xA;you probably need to report a bug to your distribution&#39;s bug tracking&#xA;system.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Translations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;The xz command line tool and all man pages can be translated.&#xA;The translations are handled via the Translation Project. If you&#xA;wish to help translating xz, please join the Translation Project:&#xA;&#xA;    https://translationproject.org/html/translators.html&#xA;&#xA;Below are notes and testing instructions specific to xz&#xA;translations.&#xA;&#xA;Testing can be done by installing xz into a temporary directory:&#xA;&#xA;    ./configure --disable-shared --prefix=/tmp/xz-test&#xA;    # &amp;lt;Edit the .po file in the po directory.&amp;gt;&#xA;    make -C po update-po&#xA;    make install&#xA;    bash debug/translation.bash | less&#xA;    bash debug/translation.bash | less -S  # For --list outputs&#xA;&#xA;Repeat the above as needed (no need to re-run configure though).&#xA;&#xA;Note especially the following:&#xA;&#xA;  - The output of --help and --long-help must look nice on&#xA;    an 80-column terminal. It&#39;s OK to add extra lines if needed.&#xA;&#xA;  - In contrast, don&#39;t add extra lines to error messages and such.&#xA;    They are often preceded with e.g. a filename on the same line,&#xA;    so you have no way to predict where to put a \n. Let the terminal&#xA;    do the wrapping even if it looks ugly. Adding new lines will be&#xA;    even uglier in the generic case even if it looks nice in a few&#xA;    limited examples.&#xA;&#xA;  - Be careful with column alignment in tables and table-like output&#xA;    (--list, --list --verbose --verbose, --info-memory, --help, and&#xA;    --long-help):&#xA;&#xA;      * All descriptions of options in --help should start in the&#xA;        same column (but it doesn&#39;t need to be the same column as&#xA;        in the English messages; just be consistent if you change it).&#xA;        Check that both --help and --long-help look OK, since they&#xA;        share several strings.&#xA;&#xA;      * --list --verbose and --info-memory print lines that have&#xA;        the format &#34;Description:   %s&#34;. If you need a longer&#xA;        description, you can put extra space between the colon&#xA;        and %s. Then you may need to add extra space to other&#xA;        strings too so that the result as a whole looks good (all&#xA;        values start at the same column).&#xA;&#xA;      * The columns of the actual tables in --list --verbose --verbose&#xA;        should be aligned properly. Abbreviate if necessary. It might&#xA;        be good to keep at least 2 or 3 spaces between column headings&#xA;        and avoid spaces in the headings so that the columns stand out&#xA;        better, but this is a matter of opinion. Do what you think&#xA;        looks best.&#xA;&#xA;  - Be careful to put a period at the end of a sentence when the&#xA;    original version has it, and don&#39;t put it when the original&#xA;    doesn&#39;t have it. Similarly, be careful with \n characters&#xA;    at the beginning and end of the strings.&#xA;&#xA;  - Read the TRANSLATORS comments that have been extracted from the&#xA;    source code and included in xz.pot. Some comments suggest&#xA;    testing with a specific command which needs an .xz file. You&#xA;    may use e.g. any tests/files/good-*.xz. However, these test&#xA;    commands are included in translations.bash output, so reading&#xA;    translations.bash output carefully can be enough.&#xA;&#xA;  - If you find language problems in the original English strings,&#xA;    feel free to suggest improvements. Ask if something is unclear.&#xA;&#xA;  - The translated messages should be understandable (sometimes this&#xA;    may be a problem with the original English messages too). Don&#39;t&#xA;    make a direct word-by-word translation from English especially if&#xA;    the result doesn&#39;t sound good in your language.&#xA;&#xA;Thanks for your help!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Other implementations of the .xz format&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;7-Zip and the p7zip port of 7-Zip support the .xz format starting&#xA;from the version 9.00alpha.&#xA;&#xA;    https://7-zip.org/&#xA;    https://p7zip.sourceforge.net/&#xA;&#xA;XZ Embedded is a limited implementation written for use in the Linux&#xA;kernel, but it is also suitable for other embedded use.&#xA;&#xA;    https://tukaani.org/xz/embedded.html&#xA;&#xA;XZ for Java is a complete implementation written in pure Java.&#xA;&#xA;    https://tukaani.org/xz/java.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Contact information&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you have questions, bug reports, patches etc. related to XZ Utils,&#xA;the project maintainers Lasse Collin and Jia Tan can be reached via&#xA;&amp;lt;xz@tukaani.org&amp;gt;.&#xA;&#xA;You might find Lasse also from #tukaani on Libera Chat (IRC).&#xA;The nick is Larhzu. The channel tends to be pretty quiet,&#xA;so just ask your question and someone might wake up.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>