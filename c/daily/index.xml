<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-28T01:28:41Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RamonUnch/AltSnap</title>
    <updated>2024-12-28T01:28:41Z</updated>
    <id>tag:github.com,2024-12-28:/RamonUnch/AltSnap</id>
    <link href="https://github.com/RamonUnch/AltSnap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Maintained continuation of Stefan Sundin&#39;s AltDrag&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/RamonUnch/AltSnap/main/README_zh-CN.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RamonUnch/AltSnap/main/README_ko-KR.md&#34;&gt;한국어&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AltSnap&lt;/h1&gt; &#xA;&lt;p&gt;Fork from Stefan Sundin&#39;s AltDrag.&lt;/p&gt; &#xA;&lt;p&gt;Check the Wiki: &lt;a href=&#34;https://github.com/RamonUnch/AltSnap/wiki&#34;&gt;https://github.com/RamonUnch/AltSnap/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Original documentation: &lt;a href=&#34;https://stefansundin.github.io/altdrag/doc/&#34;&gt;https://stefansundin.github.io/altdrag/doc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the documentation is not 100% accurate because it is a fork. Read the changelog for more details.&lt;/p&gt; &#xA;&lt;p&gt;It allows you to move and resize windows by using the Alt key and clicking wherever on the window instead of relying on very precise clicking. This behavior is very common on Linux distributions and is not actually hard to implement on Windows.&lt;/p&gt; &#xA;&lt;p&gt;This fork tries to keep a version up to date with minimal amount of bugs while keeping it feature-rich.&lt;/p&gt; &#xA;&lt;p&gt;It is oriented towards all Windows users from Windows NT 4 to Windows 11, even though it is mostly tested on Windows XP and Windows 10.&lt;/p&gt; &#xA;&lt;p&gt;Main differences: To simplify the code greatly the Hooks windows feature was removed, it allowed you have windows snapping while dragging them normally. It required however to inject a dll in every application and induced thus an obvious security risk. The amount of mess added to the code just for this feature was substantial and in addition forced to have both a 32bits and a 64bits version of the program running at the same time.&lt;/p&gt; &#xA;&lt;p&gt;This version injects nothing into other applications. This means you do not have to worry whether you have a 32 or a 64bit operating system.&lt;/p&gt; &#xA;&lt;p&gt;Another feature that was disabled is focus on typing, that was too much unusable for me to even start testing, so I removed it.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise this has a much simpler source code, added a few extra options, such as transparent windows dragging, Maximize action, pause process options, more blacklists for finer control of AltSnap etc.&lt;/p&gt; &#xA;&lt;p&gt;Finally it fixed a ton of undesired behavior and bugs from the original AltDrag.&lt;/p&gt; &#xA;&lt;p&gt;WHAT&#39;S NEW&lt;/p&gt; &#xA;&lt;p&gt;Many new features can be seen in the option dialog box, however some of them are only available through editing the AltSnap.ini file (middle click on tyhe tray icon for this).&lt;/p&gt; &#xA;&lt;h1&gt;VirusTotal false positive&lt;/h1&gt; &#xA;&lt;p&gt;You will see with the latest builds that there are some allerts, usually from SecureAge APEX sometime also from another vendor. Those are false positive and I stopped to contact the APEX team for every release becase it is a loss of time I would rather spend on improving the program. I already redued a lot the numberof false positive, simply by changing build flags and by switching to an older version of NSIS installer system. This is an indication of the impertinance of some modern antivirus solutions. Chocolatey considers that up to 5 positives on VirusTotal is not even suspicious.&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;AltSnap builds with gcc, I use Mingw-w64 (for i686). Just install the latest version (I use TDM-gcc 10.3, MinGW64 based) and use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; make&lt;/code&gt; for i386 Win32 GCC build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; make -fMakefiledb&lt;/code&gt; for i386 GCC debug build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; make -fMakefileX64&lt;/code&gt; for x86_64 GCC build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; make -fMakefileX64db&lt;/code&gt; for x86_64 GCC debug build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; make -fMakefileClang&lt;/code&gt; for i386 build using LLVM Clang.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; make -fMakefileTCC&lt;/code&gt; for i386 build using tcc, &lt;a href=&#34;https://bellard.org/tcc/&#34;&gt;Bellard&#39;s thiny c compiler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use mk.bat and mk64.bat files. For Clang, I use LLVM5.0.1 with the headers and libs from Mingw-w64. Be sure to adjust your include and lib directorries on the command line with &lt;code&gt;-IPath\to\mingw\include&lt;/code&gt; and &lt;code&gt;-LPath\to\mingw\lib&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rusefi/rusefi</title>
    <updated>2024-12-28T01:28:41Z</updated>
    <id>tag:github.com,2024-12-28:/rusefi/rusefi</id>
    <link href="https://github.com/rusefi/rusefi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;rusefi - GPL internal combustion engine control unit&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/wiki/rusefi/rusefi/Images/logo_new.png&#34; alt=&#34;rusEFI&#34; width=&#34;600&#34;&gt; &#xA; &lt;p&gt;&lt;b&gt;GPL open-source ECU&lt;/b&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/rusefi/rusefi/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/rusefi/rusefi?style=flat&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/rusefi/rusefi?style=flat&#34; alt=&#34;Last Commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commits-since/rusefi/rusefi/latest?color=blueviolet&amp;amp;label=Commits%20Since%20Release&#34; alt=&#34;GitHub commits since latest release (by date)&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;rusEFI&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rusefi/rusefi/raw/master/firmware/gcc_version_check.c&#34;&gt;gcc_version_check.c&lt;/a&gt; for recommended version of GCC.&lt;/p&gt; &#xA;&lt;p&gt;Current binaries are always available on our &lt;a href=&#34;http://rusefi.com/build_server/&#34;&gt;build server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=6YSSN35GWYS3A&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E2%99%A5%EF%B8%8Fdonate-orange&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shop.rusefi.com/&#34;&gt;shop.rusEFI.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cloning the repository&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone https://github.com/rusefi/rusefi.git&lt;/code&gt; Important note - we now use submodules:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git submodule update --init&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What do we have here?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/firmware&#34;&gt;Firmware&lt;/a&gt; Source code for open source engine control unit for stm32 chips incuding &lt;a href=&#34;https://github.com/rusefi/rusefi/raw/master/firmware/readme.md&#34;&gt;implementation overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/hardware&#34;&gt;Hardware&lt;/a&gt; KiCAD files for our older PCBs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/java_console&#34;&gt;rusEFI console&lt;/a&gt; rusEFI own native tuning software&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/simulator&#34;&gt;Simulator&lt;/a&gt; win32 or posix version of firmware allows to explore without any hardware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/unit_tests&#34;&gt;Unit Tests&lt;/a&gt; Unit tests of firmware pieces&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/java_tools&#34;&gt;Misc tools&lt;/a&gt; Misc development utilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/misc/SoftwareDevelopmentProcess.md&#34;&gt;Software Development process&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;External Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rusefi.com/forum&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rusefi/rusefi/wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rusefi.com/docs/html&#34;&gt;Doxygen documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rusefi.com/forum/viewtopic.php?f=5&amp;amp;t=10&#34;&gt;General source code Q&amp;amp;A&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/rusEfiECU&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/rusefi&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/rusefi&#34;&gt;Patreon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building the Code&lt;/h1&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://rusefi.com/forum/viewtopic.php?f=5&amp;amp;t=9&#34;&gt;https://rusefi.com/forum/viewtopic.php?f=5&amp;amp;t=9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Release Notes&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rusefi/rusefi/master/firmware/CHANGELOG.md&#34;&gt;the changelog&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>