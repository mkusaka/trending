<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-11T01:30:43Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Legrandin/pycryptodome</title>
    <updated>2023-05-11T01:30:43Z</updated>
    <id>tag:github.com,2023-05-11:/Legrandin/pycryptodome</id>
    <link href="https://github.com/Legrandin/pycryptodome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A self-contained cryptographic library for Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/Legrandin/pycryptodome/workflows/Integration%20test/badge.svg?branch=master&#34;&gt;https://github.com/Legrandin/pycryptodome/workflows/Integration%20test/badge.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/Legrandin/pycryptodome/actions&#34;&gt;https://github.com/Legrandin/pycryptodome/actions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://badge.fury.io/py/pycryptodome.svg&#34;&gt;https://badge.fury.io/py/pycryptodome.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/pycryptodome&#34;&gt;https://pypi.org/project/pycryptodome&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://badge.fury.io/py/pycryptodomex.svg&#34;&gt;https://badge.fury.io/py/pycryptodomex.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/pycryptodomex&#34;&gt;https://pypi.org/project/pycryptodomex&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PyCryptodome&lt;/h1&gt; &#xA;&lt;p&gt;PyCryptodome is a self-contained Python package of low-level cryptographic primitives.&lt;/p&gt; &#xA;&lt;p&gt;It supports Python 2.7, Python 3.5 and newer, and PyPy.&lt;/p&gt; &#xA;&lt;p&gt;The installation procedure depends on the package you want the library to be in. PyCryptodome can be used as:&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;an almost drop-in replacement for the old PyCrypto library&lt;/strong&gt;. You install it with::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   pip install pycryptodome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, all modules are installed under the &lt;code&gt;Crypto&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;One must avoid having both PyCrypto and PyCryptodome installed at the same time, as they will interfere with each other.&lt;/p&gt; &#xA;&lt;p&gt;This option is therefore recommended only when you are sure that the whole application is deployed in a &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;a library independent of the old PyCrypto&lt;/strong&gt;. You install it with::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   pip install pycryptodomex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, all modules are installed under the &lt;code&gt;Cryptodome&lt;/code&gt; package. PyCrypto and PyCryptodome can coexist.&lt;/p&gt; &#xA;&lt;p&gt;For faster public key operations in Unix, you should install &lt;code&gt;GMP&lt;/code&gt;_ in your system.&lt;/p&gt; &#xA;&lt;p&gt;PyCryptodome is a fork of PyCrypto. It brings the following enhancements with respect to the last official version of PyCrypto (2.6.1):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Authenticated encryption modes (GCM, CCM, EAX, SIV, OCB)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Accelerated AES on Intel platforms via AES-NI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;First class support for PyPy&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Elliptic curves cryptography (NIST P-curves; Ed25519, Ed448)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Better and more compact API (&lt;code&gt;nonce&lt;/code&gt; and &lt;code&gt;iv&lt;/code&gt; attributes for ciphers, automatic generation of random nonces and IVs, simplified CTR cipher mode, and more)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SHA-3 hash algorithms (FIPS 202) and derived functions (NIST SP-800 185):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SHAKE128 and SHA256 XOFs&lt;/li&gt; &#xA;   &lt;li&gt;cSHAKE128 and cSHAKE256 XOFs&lt;/li&gt; &#xA;   &lt;li&gt;KMAC128 and KMAC256&lt;/li&gt; &#xA;   &lt;li&gt;TupleHash128 and TupleHash256&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;KangarooTwelve XOF (derived from Keccak)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Truncated hash algorithms SHA-512/224 and SHA-512/256 (FIPS 180-4)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BLAKE2b and BLAKE2s hash algorithms&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Salsa20 and ChaCha20/XChaCha20 stream ciphers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Poly1305 MAC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ChaCha20-Poly1305 and XChaCha20-Poly1305 authenticated ciphers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;scrypt, bcrypt, HKDF, and NIST SP 800 108r1 Counter Mode key derivation functions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deterministic (EC)DSA and EdDSA&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Password-protected PKCS#8 key containers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shamir&#39;s Secret Sharing scheme&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Random numbers get sourced directly from the OS (and not from a CSPRNG in userspace)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simplified install process, including better support for Windows&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cleaner RSA and DSA key generation (largely based on FIPS 186-4)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Major clean ups and simplification of the code base&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PyCryptodome is not a wrapper to a separate C library like &lt;em&gt;OpenSSL&lt;/em&gt;. To the largest possible extent, algorithms are implemented in pure Python. Only the pieces that are extremely critical to performance (e.g. block ciphers) are implemented as C extensions.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the &lt;code&gt;homepage&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;For security issues, please send an email to &lt;a href=&#34;mailto:security@pycryptodome.org&#34;&gt;security@pycryptodome.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the code can be downloaded from &lt;code&gt;GitHub&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;homepage&lt;/code&gt;: &lt;a href=&#34;https://www.pycryptodome.org&#34;&gt;https://www.pycryptodome.org&lt;/a&gt; .. _&lt;code&gt;GMP&lt;/code&gt;: &lt;a href=&#34;https://gmplib.org&#34;&gt;https://gmplib.org&lt;/a&gt; .. _GitHub: &lt;a href=&#34;https://github.com/Legrandin/pycryptodome&#34;&gt;https://github.com/Legrandin/pycryptodome&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libexpat/libexpat</title>
    <updated>2023-05-11T01:30:43Z</updated>
    <id>tag:github.com,2023-05-11:/libexpat/libexpat</id>
    <link href="https://github.com/libexpat/libexpat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒ¿ Fast streaming XML parser written in C99; migrated from SourceForge to GitHub&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/libexpat/libexpat/actions/workflows/linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/libexpat/libexpat/actions/workflows/linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Run Linux Travis CI tasks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/libexpat/libexpat&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/libexpat/libexpat?svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/expat/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/expat.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourceforge.net/projects/expat/files/&#34;&gt;&lt;img src=&#34;https://img.shields.io/sourceforge/dt/expat?label=Downloads%20SourceForge&#34; alt=&#34;Downloads SourceForge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/libexpat/libexpat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/libexpat/libexpat/total?label=Downloads%20GitHub&#34; alt=&#34;Downloads GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Expat, Release 2.5.0&lt;/h1&gt; &#xA;&lt;p&gt;This is Expat, a C99 library for parsing &lt;a href=&#34;https://www.w3.org/TR/2006/REC-xml-20060816/&#34;&gt;XML 1.0 Fourth Edition&lt;/a&gt;, started by &lt;a href=&#34;https://en.wikipedia.org/wiki/James_Clark_%28programmer%29&#34;&gt;James Clark&lt;/a&gt; in 1997. Expat is a stream-oriented XML parser. This means that you register handlers with the parser before starting the parse. These handlers are called when the parser discovers the associated structures in the document being parsed. A start tag is an example of the kind of structures for which you may register handlers.&lt;/p&gt; &#xA;&lt;p&gt;Expat supports the following compilers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU GCC &amp;gt;=4.5&lt;/li&gt; &#xA; &lt;li&gt;LLVM Clang &amp;gt;=3.5&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio &amp;gt;=15.0/2017 (rolling &lt;code&gt;${today} minus 5 years&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows users can use the &lt;a href=&#34;https://github.com/libexpat/libexpat/releases&#34;&gt;&lt;code&gt;expat-win32bin-*.*.*.{exe,zip}&lt;/code&gt; download&lt;/a&gt;, which includes both pre-compiled libraries and executables, and source code for developers.&lt;/p&gt; &#xA;&lt;p&gt;Expat is &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.en.html&#34;&gt;free software&lt;/a&gt;. You may copy, distribute, and modify it under the terms of the License contained in the file &lt;a href=&#34;https://github.com/libexpat/libexpat/raw/master/expat/COPYING&#34;&gt;&lt;code&gt;COPYING&lt;/code&gt;&lt;/a&gt; distributed with this package. This license is the same as the MIT/X Consortium license.&lt;/p&gt; &#xA;&lt;h2&gt;Using libexpat in your CMake-Based Project&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways of using libexpat with CMake:&lt;/p&gt; &#xA;&lt;h3&gt;a) Module Mode&lt;/h3&gt; &#xA;&lt;p&gt;This approach leverages CMake&#39;s own &lt;a href=&#34;https://cmake.org/cmake/help/latest/module/FindEXPAT.html&#34;&gt;module &lt;code&gt;FindEXPAT&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice the &lt;em&gt;uppercase&lt;/em&gt; &lt;code&gt;EXPAT&lt;/code&gt; in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.0)  # or 3.10, see below&#xA;&#xA;project(hello VERSION 1.0.0)&#xA;&#xA;find_package(EXPAT 2.2.8 MODULE REQUIRED)&#xA;&#xA;add_executable(hello&#xA;    hello.c&#xA;)&#xA;&#xA;# a) for CMake &amp;gt;=3.10 (see CMake&#39;s FindEXPAT docs)&#xA;target_link_libraries(hello PUBLIC EXPAT::EXPAT)&#xA;&#xA;# b) for CMake &amp;gt;=3.0&#xA;target_include_directories(hello PRIVATE ${EXPAT_INCLUDE_DIRS})&#xA;target_link_libraries(hello PUBLIC ${EXPAT_LIBRARIES})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;b) Config Mode&lt;/h3&gt; &#xA;&lt;p&gt;This approach requires files fromâ€¦&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libexpat &amp;gt;=2.2.8 where packaging uses the CMake build system or&lt;/li&gt; &#xA; &lt;li&gt;libexpat &amp;gt;=2.3.0 where packaging uses the GNU Autotools build system on Linux or&lt;/li&gt; &#xA; &lt;li&gt;libexpat &amp;gt;=2.4.0 where packaging uses the GNU Autotools build system on macOS or MinGW.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notice the &lt;em&gt;lowercase&lt;/em&gt; &lt;code&gt;expat&lt;/code&gt; in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.0)&#xA;&#xA;project(hello VERSION 1.0.0)&#xA;&#xA;find_package(expat 2.2.8 CONFIG REQUIRED char dtd ns)&#xA;&#xA;add_executable(hello&#xA;    hello.c&#xA;)&#xA;&#xA;target_link_libraries(hello PUBLIC expat::expat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from a Git Clone&lt;/h2&gt; &#xA;&lt;p&gt;If you are building Expat from a check-out from the &lt;a href=&#34;https://github.com/libexpat/libexpat/&#34;&gt;Git repository&lt;/a&gt;, you need to run a script that generates the configure script using the GNU autoconf and libtool tools. To do this, you need to have autoconf 2.58 or newer. Run the script like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./buildconf.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this has been done, follow the same instructions as for building from a source distribution.&lt;/p&gt; &#xA;&lt;h2&gt;Building from a Source Distribution&lt;/h2&gt; &#xA;&lt;h3&gt;a) Building with the configure script (i.e. GNU Autotools)&lt;/h3&gt; &#xA;&lt;p&gt;To build Expat from a source distribution, you first run the configuration shell script in the top level distribution directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many options which you may provide to configure (which you can discover by running configure with the &lt;code&gt;--help&lt;/code&gt; option). But the one of most interest is the one that sets the installation directory. By default, the configure script will set things up to install libexpat into &lt;code&gt;/usr/local/lib&lt;/code&gt;, &lt;code&gt;expat.h&lt;/code&gt; into &lt;code&gt;/usr/local/include&lt;/code&gt;, and &lt;code&gt;xmlwf&lt;/code&gt; into &lt;code&gt;/usr/local/bin&lt;/code&gt;. If, for example, you&#39;d prefer to install into &lt;code&gt;/home/me/mystuff/lib&lt;/code&gt;, &lt;code&gt;/home/me/mystuff/include&lt;/code&gt;, and &lt;code&gt;/home/me/mystuff/bin&lt;/code&gt;, you can tell &lt;code&gt;configure&lt;/code&gt; about that with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./configure --prefix=/home/me/mystuff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another interesting option is to enable 64-bit integer support for line and column numbers and the over-all byte index:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./configure CPPFLAGS=-DXML_LARGE_SIZE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, such a modification would be a breaking change to the ABI and is therefore not recommended for general use â€” e.g. as part of a Linux distribution â€” but rather for builds with special requirements.&lt;/p&gt; &#xA;&lt;p&gt;After running the configure script, the &lt;code&gt;make&lt;/code&gt; command will build things and &lt;code&gt;make install&lt;/code&gt; will install things into their proper location. Have a look at the &lt;code&gt;Makefile&lt;/code&gt; to learn about additional &lt;code&gt;make&lt;/code&gt; options. Note that you need to have write permission into the directories into which things will be installed.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in building Expat to provide document information in UTF-16 encoding rather than the default UTF-8, follow these instructions (after having run &lt;code&gt;make distclean&lt;/code&gt;). Please note that we configure with &lt;code&gt;--without-xmlwf&lt;/code&gt; as xmlwf does not support this mode of compilation (yet):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Mass-patch &lt;code&gt;Makefile.am&lt;/code&gt; files to use &lt;code&gt;libexpatw.la&lt;/code&gt; for a library name: &lt;br&gt; &lt;code&gt;find -name Makefile.am -exec sed -e &#39;s,libexpat\.la,libexpatw.la,&#39; -e &#39;s,libexpat_la,libexpatw_la,&#39; -i {} +&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;automake&lt;/code&gt; to re-write &lt;code&gt;Makefile.in&lt;/code&gt; files:&lt;br&gt; &lt;code&gt;automake&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For UTF-16 output as unsigned short (and version/error strings as char), run:&lt;br&gt; &lt;code&gt;./configure CPPFLAGS=-DXML_UNICODE --without-xmlwf&lt;/code&gt;&lt;br&gt; For UTF-16 output as &lt;code&gt;wchar_t&lt;/code&gt; (incl. version/error strings), run:&lt;br&gt; &lt;code&gt;./configure CFLAGS=&#34;-g -O2 -fshort-wchar&#34; CPPFLAGS=-DXML_UNICODE_WCHAR_T --without-xmlwf&lt;/code&gt; &lt;br&gt;Note: The latter requires libc compiled with &lt;code&gt;-fshort-wchar&lt;/code&gt;, as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; (which excludes xmlwf).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;make install&lt;/code&gt; (again, excludes xmlwf).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Using &lt;code&gt;DESTDIR&lt;/code&gt; is supported. It works as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make install DESTDIR=/path/to/image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;overrides the in-makefile set &lt;code&gt;DESTDIR&lt;/code&gt;, because variable-setting priority is&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;commandline&lt;/li&gt; &#xA; &lt;li&gt;in-makefile&lt;/li&gt; &#xA; &lt;li&gt;environment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: This only applies to the Expat library itself, building UTF-16 versions of xmlwf and the tests is currently not supported.&lt;/p&gt; &#xA;&lt;p&gt;When using Expat with a project using autoconf for configuration, you can use the probing macro in &lt;code&gt;conftools/expat.m4&lt;/code&gt; to determine how to include Expat. See the comments at the top of that file for more information.&lt;/p&gt; &#xA;&lt;p&gt;A reference manual is available in the file &lt;code&gt;doc/reference.html&lt;/code&gt; in this distribution.&lt;/p&gt; &#xA;&lt;h3&gt;b) Building with CMake&lt;/h3&gt; &#xA;&lt;p&gt;The CMake build system is still &lt;em&gt;experimental&lt;/em&gt; and may replace the primary build system based on GNU Autotools at some point when it is ready.&lt;/p&gt; &#xA;&lt;h4&gt;Available Options&lt;/h4&gt; &#xA;&lt;p&gt;For an idea of the available (non-advanced) options for building with CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# rm -f CMakeCache.txt ; cmake -D_EXPAT_HELP=ON -LH . | grep -B1 &#39;:.*=&#39; | sed &#39;s,^--$,,&#39;&#xA;// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...&#xA;CMAKE_BUILD_TYPE:STRING=&#xA;&#xA;// Install path prefix, prepended onto install directories.&#xA;CMAKE_INSTALL_PREFIX:PATH=/usr/local&#xA;&#xA;// Path to a program.&#xA;DOCBOOK_TO_MAN:FILEPATH=/usr/bin/docbook2x-man&#xA;&#xA;// Build man page for xmlwf&#xA;EXPAT_BUILD_DOCS:BOOL=ON&#xA;&#xA;// Build the examples for expat library&#xA;EXPAT_BUILD_EXAMPLES:BOOL=ON&#xA;&#xA;// Build fuzzers for the expat library&#xA;EXPAT_BUILD_FUZZERS:BOOL=OFF&#xA;&#xA;// Build pkg-config file&#xA;EXPAT_BUILD_PKGCONFIG:BOOL=ON&#xA;&#xA;// Build the tests for expat library&#xA;EXPAT_BUILD_TESTS:BOOL=ON&#xA;&#xA;// Build the xmlwf tool for expat library&#xA;EXPAT_BUILD_TOOLS:BOOL=ON&#xA;&#xA;// Character type to use (char|ushort|wchar_t) [default=char]&#xA;EXPAT_CHAR_TYPE:STRING=char&#xA;&#xA;// Install expat files in cmake install target&#xA;EXPAT_ENABLE_INSTALL:BOOL=ON&#xA;&#xA;// Use /MT flag (static CRT) when compiling in MSVC&#xA;EXPAT_MSVC_STATIC_CRT:BOOL=OFF&#xA;&#xA;// Build fuzzers via ossfuzz for the expat library&#xA;EXPAT_OSSFUZZ_BUILD:BOOL=OFF&#xA;&#xA;// Build a shared expat library&#xA;EXPAT_SHARED_LIBS:BOOL=ON&#xA;&#xA;// Treat all compiler warnings as errors&#xA;EXPAT_WARNINGS_AS_ERRORS:BOOL=OFF&#xA;&#xA;// Make use of getrandom function (ON|OFF|AUTO) [default=AUTO]&#xA;EXPAT_WITH_GETRANDOM:STRING=AUTO&#xA;&#xA;// Utilize libbsd (for arc4random_buf)&#xA;EXPAT_WITH_LIBBSD:BOOL=OFF&#xA;&#xA;// Make use of syscall SYS_getrandom (ON|OFF|AUTO) [default=AUTO]&#xA;EXPAT_WITH_SYS_GETRANDOM:STRING=AUTO&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>