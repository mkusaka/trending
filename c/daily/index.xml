<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:27:31Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jinxinyang/litechain</title>
    <updated>2023-10-15T01:27:31Z</updated>
    <id>tag:github.com,2023-10-15:/jinxinyang/litechain</id>
    <link href="https://github.com/jinxinyang/litechain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;litechain&lt;/h1&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/litechain.png&#34; alt=&#34;litechain&#34; width=&#34;256&#34; height=&#34;256&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jinxinyang/litechain/master/README_cn.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Introduction&lt;/h4&gt; &#xA;&lt;p&gt;Enabling embedded devices to be empowered by LLMS&lt;br&gt; The basic communication is used to connect and construct a LangChain-like framework&lt;br&gt; The underlying IO is invoked to implement the corresponding operation&lt;/p&gt; &#xA;&lt;h4&gt;Software Architecture&lt;/h4&gt; &#xA;&lt;p&gt;Three-tier architecture&lt;br&gt; MCAL: Etherent(network port) CAN UART Flash RAM EEPROM Core(including interrupt and clock), etc., using the IC underlying library for standardized packaging&lt;br&gt; MCAL: Etherent CAN UART Flash RAM EEPROM Core(including interrupt and clock), etc&lt;br&gt; MODULE:Model_IO Retrieval Chains Memory Agents Callbacks&lt;br&gt; APP: An application is composed of an application chain and its corresponding modules&lt;/p&gt; &#xA;&lt;p&gt;There are Plugins in each layer of the architecture, which can be third-party libraries or custom modules&lt;/p&gt; &#xA;&lt;h4&gt;Development plan&lt;/h4&gt; &#xA;&lt;p&gt;Implementation of chain:&lt;/p&gt; &#xA;&lt;p&gt;Context memory management:&lt;/p&gt; &#xA;&lt;p&gt;LAN LLM access:&lt;br&gt; Local large model supporting the server program&lt;/p&gt; &#xA;&lt;p&gt;Implementation of cloud multi-model protocol:&lt;br&gt; chatgpt&lt;br&gt; &lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/chatgpt.png&#34; alt=&#34;chatgpt&#34; width=&#34;256&#34; height=&#34;128&#34;&gt;&lt;br&gt; chatgml&lt;br&gt; &lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/chatgml.png&#34; alt=&#34;chatgpt&#34; width=&#34;256&#34; height=&#34;128&#34;&gt;&lt;br&gt; 文心一言&lt;br&gt; &lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/wenxinyiyan.png&#34; alt=&#34;chatgpt&#34; width=&#34;256&#34; height=&#34;128&#34;&gt;&lt;br&gt; 通义千问&lt;br&gt; &lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/tongyiqianwan.png&#34; alt=&#34;chatgpt&#34; width=&#34;256&#34; height=&#34;128&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hardware support:&lt;br&gt; stm32f103+air742UG-&amp;gt;4G&lt;br&gt; esp32-c3-&amp;gt;wifi&lt;br&gt; &lt;a href=&#34;https://github.com/jinxinyang/litechain-esp32_c3&#34;&gt;Test Project&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/esp32.png&#34; alt=&#34;esp32 c3&#34; width=&#34;256&#34; height=&#34;256&#34;&gt;&lt;br&gt; Raspberry RP2040 -&amp;gt;RJ45&lt;br&gt; &lt;img src=&#34;https://github.com/jinxinyang/litechain/raw/master/images/RP2040.png&#34; alt=&#34;RP2040&#34; width=&#34;256&#34; height=&#34;256&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vector databases support:&lt;br&gt; Milvus(remote storage matching)&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;/&lt;em&gt;TODO&lt;/em&gt;/&lt;/p&gt; &#xA;&lt;h4&gt;Instructions&lt;/h4&gt; &#xA;&lt;p&gt;/&lt;em&gt;TODO&lt;/em&gt;/&lt;/p&gt; &#xA;&lt;h4&gt;Contribution&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create Feat_xxx branch&lt;/li&gt; &#xA; &lt;li&gt;Commit your code&lt;/li&gt; &#xA; &lt;li&gt;Create Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>mydumper/mydumper</title>
    <updated>2023-10-15T01:27:31Z</updated>
    <id>tag:github.com,2023-10-15:/mydumper/mydumper</id>
    <link href="https://github.com/mydumper/mydumper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official MyDumper Project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/mydumper/mydumper/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/mydumper/mydumper/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is MyDumper?&lt;/h1&gt; &#xA;&lt;p&gt;MyDumper is a MySQL Logical Backup Tool. It has 2 tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mydumper&lt;/code&gt; which is responsible to export a consistent backup of MySQL databases&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;myloader&lt;/code&gt; reads the backup from mydumper, connects the to destination database and imports the backup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both tools use multithreading capabilities. &lt;br&gt;MyDumper is Open Source and maintained by the community, it is not a Percona, MariaDB or MySQL product.&lt;/p&gt; &#xA;&lt;h1&gt;Why do we need MyDumper?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parallelism (hence, speed) and performance (avoids expensive character set conversion routines, efficient code overall)&lt;/li&gt; &#xA; &lt;li&gt;Easier to manage output (separate files for tables, dump metadata, etc, easy to view/parse data)&lt;/li&gt; &#xA; &lt;li&gt;Consistency - maintains snapshot across all threads, provides accurate master and slave log positions, etc&lt;/li&gt; &#xA; &lt;li&gt;Manageability - supports PCRE for specifying database and tables inclusions and exclusions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install mydumper/myloader?&lt;/h2&gt; &#xA;&lt;p&gt;First get the correct url from the &lt;a href=&#34;https://github.com/maxbube/mydumper/releases&#34;&gt;releases section&lt;/a&gt; then:&lt;/p&gt; &#xA;&lt;h3&gt;RedHat / Centos&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;release=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/mydumper/mydumper/releases/latest | cut -d&#39;/&#39; -f8)&#xA;yum install https://github.com/mydumper/mydumper/releases/download/${release}/mydumper-${release:1}.el7.x86_64.rpm&#xA;yum install https://github.com/mydumper/mydumper/releases/download/${release}/mydumper-${release:1}.el8.x86_64.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu / Debian&lt;/h3&gt; &#xA;&lt;p&gt;For ubuntu, you need to install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install libatomic1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can download and install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;release=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/mydumper/mydumper/releases/latest | cut -d&#39;/&#39; -f8)&#xA;wget https://github.com/mydumper/mydumper/releases/download/${release}/mydumper_${release:1}.$(lsb_release -cs)_amd64.deb&#xA;dpkg -i mydumper_${release:1}.$(lsb_release -cs)_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;By using pkg&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg install mydumper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or from ports&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /usr/ports/databases/mydumper &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;By using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mydumper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies for building MyDumper&lt;/h2&gt; &#xA;&lt;h3&gt;Install development tools:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu or Debian:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install cmake g++ git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora, RedHat and CentOS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install -y cmake gcc gcc-c++ git make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS &amp;lt;= 10.13 (High Sierra) &amp;lt; 13 (Ventura) with MacPorts package manager:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install cmake pkgconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install development versions of GLib, ZLib, PCRE and ZSTD:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu or Debian:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install libglib2.0-dev zlib1g-dev libpcre3-dev libssl-dev libzstd-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora, RedHat and CentOS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install -y glib2-devel openssl-devel pcre-devel zlib-devel libzstd-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openSUSE:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zypper install glib2-devel libmysqlclient-devel pcre-devel zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS &amp;lt;= 10.13 (High Sierra) &amp;lt; 13 (Ventura) with MacPorts package manager:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install glib2 pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install MySQL/Percona/MariaDB development versions:&lt;/h3&gt; &#xA;&lt;p&gt;You need to select one vendor development library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu or Debian:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install libmysqlclient-dev&#xA;apt-get install libperconaserverclient20-dev&#xA;apt-get install libmariadbclient-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora, RedHat and CentOS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install -y mysql-devel&#xA;yum install -y Percona-Server-devel-57&#xA;yum install -y mariadb-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CentOS 7 comes by default with MariaDB 5.5 libraries which are very old. It might be better to download a newer version of these libraries (MariaDB, MySQL, Percona etc).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openSUSE:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zypper install libmysqlclient-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS &amp;lt;= 10.13 (High Sierra) &amp;lt; 13 (Ventura) with MacPorts package manager&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install mariadb-10.11&#xA;sudo port select mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake .&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One has to make sure, that pkg-config, mysql_config, pcre-config are all in $PATH&lt;/p&gt; &#xA;&lt;p&gt;Binlog dump is disabled by default to compile with it you need to add -DWITH_BINLOG=ON to cmake options&lt;/p&gt; &#xA;&lt;p&gt;To build against mysql libs &amp;lt; 5.7 you need to disable SSL adding -DWITH_SSL=OFF&lt;/p&gt; &#xA;&lt;h3&gt;Build Docker image&lt;/h3&gt; &#xA;&lt;p&gt;You can download the &lt;a href=&#34;https://hub.docker.com/r/mydumper/mydumper&#34;&gt;official docker image&lt;/a&gt; or you can build the Docker image either from local sources or directly from Github sources with &lt;a href=&#34;https://raw.githubusercontent.com/mydumper/mydumper/master/Dockerfile&#34;&gt;the provided Dockerfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build --build-arg CMAKE_ARGS=&#39;-DWITH_ZSTD=ON&#39; -t mydumper github.com/mydumper/mydumper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that the main purpose the Dockerfile addresses is development and build from source locally. It might not be optimal for distribution purposes, but can also work as a quick build and run solution with the above one-liner, though.&lt;/p&gt; &#xA;&lt;h1&gt;How to use MyDumper&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mydumper/mydumper/master/docs/mydumper_usage.rst&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How does consistent snapshot work?&lt;/h2&gt; &#xA;&lt;p&gt;This is all done following best MySQL practices and traditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a precaution, slow running queries on the server either abort the dump, or get killed&lt;/li&gt; &#xA; &lt;li&gt;Global read lock is acquired (&#34;FLUSH TABLES WITH READ LOCK&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Various metadata is read (&#34;SHOW SLAVE STATUS&#34;,&#34;SHOW MASTER STATUS&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Other threads connect and establish snapshots (&#34;START TRANSACTION WITH CONSISTENT SNAPSHOT&#34;) ** On pre-4.1.8 it creates dummy InnoDB table, and reads from it.&lt;/li&gt; &#xA; &lt;li&gt;Once all worker threads announce the snapshot establishment, master executes &#34;UNLOCK TABLES&#34; and starts queueing jobs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This for now does not provide consistent snapshots for non-transactional engines - support for that is expected in 0.2 :)&lt;/p&gt; &#xA;&lt;h2&gt;How to exclude (or include) databases?&lt;/h2&gt; &#xA;&lt;p&gt;Once can use --regex functionality, for example not to dump mysql and test databases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; mydumper --regex &#39;^(?!(mysql\.|test\.))&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To dump only mysql and test databases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; mydumper --regex &#39;^(mysql\.|test\.)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To not dump all databases starting with test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; mydumper --regex &#39;^(?!(test))&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To dump specify tables in different databases (Note: The name of tables should end with $. &lt;a href=&#34;https://github.com/maxbube/mydumper/issues/407&#34;&gt;related issue&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; mydumper --regex &#39;^(db1\.table1$|db2\.table2$)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to dump a couple of databases but discard some tables, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; mydumper --regex &#39;^(?=(?:(db1\.|db2\.)))(?!(?:(db1\.table1$|db2\.table2$)))&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will dump all the tables in db1 and db2 but it will exclude db1.table1 and db2.table2&lt;/p&gt; &#xA;&lt;p&gt;Of course, regex functionality can be used to describe pretty much any list of tables.&lt;/p&gt; &#xA;&lt;h2&gt;How to use --exec?&lt;/h2&gt; &#xA;&lt;p&gt;You can execute external commands with --exec like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; mydumper --exec &#34;/usr/bin/gzip FILENAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;--exec is single threaded, similar implementation than Stream. The exec program must be an absolute path. FILENAME will be replaced by the filename that you want to be processed. You can set FILENAME in any place as argument.&lt;/p&gt; &#xA;&lt;h2&gt;Defaults file&lt;/h2&gt; &#xA;&lt;p&gt;The default file (aka: --defaults-file parameter) is starting to be more important in MyDumper&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mydumper and myloader sections:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[mydumper]&#xA;host = 127.0.0.1&#xA;user = root&#xA;password = p455w0rd&#xA;database = db&#xA;rows = 10000&#xA;&#xA;[myloader]&#xA;host = 127.0.0.1&#xA;user = root&#xA;password = p455w0rd&#xA;database = new_db&#xA;innodb-optimize-keys = AFTER_IMPORT_PER_TABLE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Variables for mydumper and myloader executions:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Prior to v0.14.0-1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[mydumper_variables]&#xA;wait_timeout = 300&#xA;sql_mode = ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#xA;&#xA;[myloader_variables]&#xA;long_query_time = 300&#xA;innodb_flush_log_at_trx_commit = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From to v0.14.0-1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[mydumper_session_variables]&#xA;wait_timeout = 300&#xA;sql_mode = ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#xA;&#xA;[mydumper_global_variables]&#xA;sync_binlog = 0&#xA;slow_query_log = OFF&#xA;&#xA;[myloader_session_variables]&#xA;long_query_time = 300&#xA;&#xA;[myloader_global_variables]&#xA;sync_binlog = 0&#xA;innodb_flush_log_at_trx_commit = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Per table sections:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[`db`.`table`]&#xA;where = column &amp;gt; 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IMPORTANT: when using options that doesn&#39;t required an argument like: --no-data or --events, you need to set any value to those variables which will always indicate: TRUE/ON/ENABLE. It is a MISCONCEPTION if you think that adding &lt;code&gt;--no-data=0&lt;/code&gt; will export data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[mydumper]&#xA;no-data=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will NOT export the data as no-data is being specified.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paranoidninja/Cobaltstrike-Detection</title>
    <updated>2023-10-15T01:27:31Z</updated>
    <id>tag:github.com,2023-10-15:/paranoidninja/Cobaltstrike-Detection</id>
    <link href="https://github.com/paranoidninja/Cobaltstrike-Detection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo will contain the core detection, only for Cobaltstrike&#39;s leaked versions. Non-leaked version detections wont be shared&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cobaltstrike-Detection&lt;/h1&gt; &#xA;&lt;p&gt;This repo will contain the core detection, only for Cobaltstrike&#39;s leaked versions. Non-leaked version detections wont be shared&lt;/p&gt;</summary>
  </entry>
</feed>