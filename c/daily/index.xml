<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-21T01:31:17Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BrightDaniel/alx-low_level_programming</title>
    <updated>2022-10-21T01:31:17Z</updated>
    <id>tag:github.com,2022-10-21:/BrightDaniel/alx-low_level_programming</id>
    <link href="https://github.com/BrightDaniel/alx-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;General Why C programming is awesome (donâ€™t forget to tweet today, with the hashtag #cisfun :)) Who invented C Who are Dennis Ritchie, Brian Kernighan and Linus Torvalds What happens when you type gcc main.c What is an entry point What is main How to print text using printf, puts and putchar How to get the size of a specific type using the unary operator sizeof How to compile using gcc What is the default program name when compiling with gcc What is the official Holberton C coding style and how to check your code with betty-style How to find the right header to include in your source code when using a standard library function How does the main function influence the return value of the program Requirements C Allowed editors: vi, vim, emacs All your files will be compiled on Ubuntu 14.04 LTS using gcc 4.8.4 Your code should use the Betty style. It will be checked using betty-style.pl and betty-doc.pl&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eclipse/paho.mqtt.c</title>
    <updated>2022-10-21T01:31:17Z</updated>
    <id>tag:github.com,2022-10-21:/eclipse/paho.mqtt.c</id>
    <link href="https://github.com/eclipse/paho.mqtt.c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Eclipse Paho C client library for MQTT for Windows, Linux and MacOS. API documentation: https://eclipse.github.io/paho.mqtt.c/&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/eclipse/paho.mqtt.c&#34;&gt;&lt;img src=&#34;https://travis-ci.org/eclipse/paho.mqtt.c.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/eclipse/paho.mqtt.c/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/eclipse/paho.mqtt.c.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/paho-c&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/2339/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Eclipse Paho C Client Library for the MQTT Protocol&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for the &lt;a href=&#34;http://eclipse.org/paho&#34;&gt;Eclipse Paho&lt;/a&gt; MQTT C client library.&lt;/p&gt; &#xA;&lt;p&gt;This code builds libraries which enable applications to connect to an &lt;a href=&#34;http://mqtt.org&#34;&gt;MQTT&lt;/a&gt; broker to publish messages, and to subscribe to topics and receive published messages.&lt;/p&gt; &#xA;&lt;p&gt;Synchronous and various asynchronous programming models are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Information About MQTT&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mqtt.org&#34;&gt;MQTT website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&#34;&gt;The MQTT 3.1.1 standard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&#34;&gt;The MQTT 5.0 standard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hivemq.com/mqtt/&#34;&gt;HiveMQ introduction to MQTT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oasis-open.org/committees/download.php/49205/MQTT-OASIS-Webinar.pdf&#34;&gt;OASIS Introduction to MQTT presentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;p&gt;The Paho C client comprises four variant libraries, shared or static:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;paho-mqtt3a - asynchronous (MQTTAsync)&lt;/li&gt; &#xA; &lt;li&gt;paho-mqtt3as - asynchronous with SSL/TLS (MQTTAsync)&lt;/li&gt; &#xA; &lt;li&gt;paho-mqtt3c - &#34;classic&#34; / synchronous (MQTTClient)&lt;/li&gt; &#xA; &lt;li&gt;paho-mqtt3cs - &#34;classic&#34; / synchronous with SSL/TLS (MQTTClient)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelbasedtesting.co.uk/2013/10/13/which-paho-mqtt-c-api-to-use-and-some-history/&#34;&gt;Which Paho C API to use, with some history, for context&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage and API&lt;/h2&gt; &#xA;&lt;p&gt;Detailed API documentation &lt;a href=&#34;https://eclipse.github.io/paho.mqtt.c/MQTTClient/html/&#34;&gt;is available online&lt;/a&gt;. It is also available by building the Doxygen docs in the &lt;code&gt;doc&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Samples are available in the Doxygen docs and also in &lt;code&gt;src/samples&lt;/code&gt; for reference. These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;paho_c_pub.c&lt;/em&gt; and &lt;em&gt;paho_c_sub.c:&lt;/em&gt; command line utilities to publish and subscribe, -h will give help&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;paho_cs_pub.c&lt;/em&gt; and &lt;em&gt;paho_cs_sub.c:&lt;/em&gt; command line utilities using MQTTClient to publish and subscribe&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;MQTTClient_publish.c, MQTTClient_subscribe.c&lt;/em&gt; and &lt;em&gt;MQTTClient_publish_async.c:&lt;/em&gt; MQTTClient simple code examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;MQTTAsync_publish.c&lt;/em&gt; and &lt;em&gt;MQTTAsync_subscribe.c:&lt;/em&gt; MQTTAsync simple code examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some potentially useful blog posts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelbasedtesting.co.uk/2018/08/08/paho-c-client-mqtt-5-0-and-command-line-utilities/&#34;&gt;Paho client MQTT 5.0 support and command line utilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelbasedtesting.co.uk/2013/11/24/mqtt-qos-and-persistence/&#34;&gt;MQTT, QoS and persistence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelbasedtesting.co.uk/2018/04/09/a-story-of-mqtt-5-0/&#34;&gt;A story of MQTT 5.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelbasedtesting.co.uk/talks-ive-given/&#34;&gt;Various MQTT and MQTT-SN talks I&#39;ve given.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Runtime tracing&lt;/h2&gt; &#xA;&lt;p&gt;A number of environment variables control runtime tracing of the C library.&lt;/p&gt; &#xA;&lt;p&gt;Tracing is switched on using &lt;code&gt;MQTT_C_CLIENT_TRACE&lt;/code&gt; (a value of ON traces to stdout, any other value should specify a file to trace to).&lt;/p&gt; &#xA;&lt;p&gt;The verbosity of the output is controlled using the &lt;code&gt;MQTT_C_CLIENT_TRACE_LEVEL&lt;/code&gt; environment variable - valid values are ERROR, PROTOCOL, MINIMUM, MEDIUM and MAXIMUM (from least to most verbose).&lt;/p&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;MQTT_C_CLIENT_TRACE_MAX_LINES&lt;/code&gt; limits the number of lines of trace that are output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export MQTT_C_CLIENT_TRACE=ON&#xA;export MQTT_C_CLIENT_TRACE_LEVEL=PROTOCOL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please open issues in the Github project: &lt;a href=&#34;https://github.com/eclipse/paho.mqtt.c/issues&#34;&gt;https://github.com/eclipse/paho.mqtt.c/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;Discussion of the Paho clients takes place on the &lt;a href=&#34;https://dev.eclipse.org/mailman/listinfo/paho-dev&#34;&gt;Eclipse paho-dev mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Follow Eclipse Paho on Twitter: &lt;a href=&#34;https://twitter.com/eclipsepaho&#34;&gt;@eclipsepaho&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;General questions about the MQTT protocol are discussed in the &lt;a href=&#34;https://groups.google.com/forum/?hl=en-US&amp;amp;fromgroups#!forum/mqtt&#34;&gt;MQTT Google Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is more information available via the &lt;a href=&#34;http://mqtt.org&#34;&gt;MQTT community site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building with CMake&lt;/h2&gt; &#xA;&lt;p&gt;The build process currently supports a number of Linux &#34;flavors&#34; including ARM and s390, OS X, AIX and Solaris as well as the Windows operating system. The build process requires the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cmake.org&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt; or &lt;a href=&#34;https://martine.github.io/ninja/&#34;&gt;Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A conforming C compiler, such as &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt;, &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt;, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Debian based systems this would mean that the following packages have to be installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install build-essential gcc make cmake cmake-gui cmake-curses-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, in order to build a debian package from the source code, the following packages have to be installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install fakeroot devscripts dh-make lsb-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ninja can be downloaded from its github project page in the &#34;releases&#34; section. Optionally it is possible to build binaries with SSL/TLS support. This requires the OpenSSL libraries and includes to be available. E. g. on Debian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The documentation requires doxygen and optionally graphviz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install doxygen graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building your application with CMake&lt;/h3&gt; &#xA;&lt;p&gt;If the Paho C library was built with CMake and is already installed on the system, it is relatively easy to set up a CMake build for your application. (If it&#39;s not already built and installed read the next section).&lt;/p&gt; &#xA;&lt;p&gt;The library can be built with several options which create variations of the library for asynchronous or synchronous use; encryption (SSL/TLS) support or not; and whether the library is shared or static. CMake exports all of the libraries that were built as targets, and the user can chose which is best suited for an application.&lt;/p&gt; &#xA;&lt;p&gt;The package is named: &lt;strong&gt;eclipse-paho-mqtt-c&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The namespace for all the targets is also: &lt;strong&gt;eclipse-paho-mqtt-c&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The target names are the same as the library names. The static libraries append &lt;em&gt;-static&lt;/em&gt; to the target name even for platforms that use the same base name for shared and static libraries. So:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Target&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3a&lt;/td&gt; &#xA;   &lt;td&gt;asynchronous, no encryption&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3as&lt;/td&gt; &#xA;   &lt;td&gt;asynchronous with SSL/TLS support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3c&lt;/td&gt; &#xA;   &lt;td&gt;synchronous, no encryption&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3cs&lt;/td&gt; &#xA;   &lt;td&gt;synchronous with SSL/TLS support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3a-static&lt;/td&gt; &#xA;   &lt;td&gt;asynchronous, no encryption, static linkage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3as-static&lt;/td&gt; &#xA;   &lt;td&gt;asynchronous with SSL/TLS support, static linkage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3c-static&lt;/td&gt; &#xA;   &lt;td&gt;synchronous, no encryption, static linkage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paho-mqtt3cs-static&lt;/td&gt; &#xA;   &lt;td&gt;synchronous with SSL/TLS support, static linkage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Remember, though, that not all of these targets may be available. It depends on how the library was built.&lt;/p&gt; &#xA;&lt;p&gt;A sample &lt;em&gt;CMakeLists.txt&lt;/em&gt; for an application that uses the asynchronous library with encryption support &lt;em&gt;(paho-mqtt3as)&lt;/em&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.5)&#xA;project(MyMQTTApp VERSION 1.0.0 LANGUAGES C)&#xA;&#xA;find_package(eclipse-paho-mqtt-c REQUIRED)&#xA;&#xA;add_executable(MyMQTTApp MyMQTTApp.c)&#xA;target_link_libraries(MQTTVersion eclipse-paho-mqtt-c::paho-mqtt3as) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the library was installed to a non-traditional location, you may need to tell CMake where to find it using &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt;. For example, if you installed it in &lt;em&gt;/opt/mqtt/paho.mqtt.c&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake -DCMAKE_PREFIX_PATH=/opt/mqtt/paho.mqtt.c ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the Paho C library with CMake&lt;/h3&gt; &#xA;&lt;p&gt;Before compiling, determine the value of some variables in order to configure features, library locations, and other options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_BUILD_SHARED&lt;/td&gt; &#xA;   &lt;td&gt;TRUE&lt;/td&gt; &#xA;   &lt;td&gt;Build a shared version of the libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_BUILD_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;Build a static version of the libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_HIGH_PERFORMANCE&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;When set to true, the debugging aids internal tracing and heap tracking are not included.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_WITH_SSL&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;Flag that defines whether to build ssl-enabled binaries too.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENSSL_ROOT_DIR&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&#34; (system default)&lt;/td&gt; &#xA;   &lt;td&gt;Directory containing your OpenSSL installation (i.e. &lt;code&gt;/usr/local&lt;/code&gt; when headers are in &lt;code&gt;/usr/local/include&lt;/code&gt; and libraries are in &lt;code&gt;/usr/local/lib&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_BUILD_DOCUMENTATION&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;Create and install the HTML based API documentation (requires Doxygen)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_BUILD_SAMPLES&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;Build sample programs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_ENABLE_TESTING&lt;/td&gt; &#xA;   &lt;td&gt;TRUE&lt;/td&gt; &#xA;   &lt;td&gt;Build test and run&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MQTT_TEST_BROKER&lt;/td&gt; &#xA;   &lt;td&gt;tcp://localhost:1883&lt;/td&gt; &#xA;   &lt;td&gt;MQTT connection URL for a broker to use during test execution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MQTT_TEST_PROXY&lt;/td&gt; &#xA;   &lt;td&gt;tcp://localhost:1883&lt;/td&gt; &#xA;   &lt;td&gt;Hostname of the test proxy to use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MQTT_SSL_HOSTNAME&lt;/td&gt; &#xA;   &lt;td&gt;localhost&lt;/td&gt; &#xA;   &lt;td&gt;Hostname of a test SSL MQTT broker to use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAHO_BUILD_DEB_PACKAGE&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;Build debian package&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Using these variables CMake can be used to generate your Ninja or Make files. Using CMake, building out-of-source is the default. Therefore it is recommended to invoke all build commands inside your chosen build directory but outside of the source tree.&lt;/p&gt; &#xA;&lt;p&gt;An example build session targeting the build platform could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir /tmp/build.paho ; cd /tmp/build.paho&#xA;$ cmake -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=TRUE \&#xA;    -DPAHO_BUILD_SAMPLES=TRUE ~/paho.mqtt.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoking cmake and specifying build options can also be performed using cmake-gui or ccmake (see &lt;a href=&#34;https://cmake.org/runningcmake/&#34;&gt;https://cmake.org/runningcmake/&lt;/a&gt;). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ccmake ~/paho.mqtt.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile/link the binaries, to install, or to generate packages, use these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake --build .&#xA;&#xA;$ cmake --build . --target install&#xA;&#xA;$ cmake --build . --target package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build, install, or generate packages, you can also use the generated builder like &lt;em&gt;ninja&lt;/em&gt; or &lt;em&gt;make&lt;/em&gt; directly after invoking the initial CMake configuration step, such as &lt;code&gt;ninja package&lt;/code&gt; or &lt;code&gt;make -j &amp;lt;number-of-jpbs&amp;gt; package&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Debug builds&lt;/h3&gt; &#xA;&lt;p&gt;Debug builds can be performed by defining the value of the &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; option to &lt;code&gt;Debug&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake -DCMAKE_BUILD_TYPE=Debug ~/paho.mqtt.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the tests&lt;/h3&gt; &#xA;&lt;p&gt;Test code is available in the &lt;code&gt;test&lt;/code&gt; directory. The tests can be built and executed with the CMake build system. The test execution requires a MQTT broker running. By default, the build system uses &lt;code&gt;localhost&lt;/code&gt;, however it is possible to configure the build to use an external broker. These parameters are documented in the Build Requirements section above.&lt;/p&gt; &#xA;&lt;p&gt;After ensuring a MQTT broker is available, it is possible to execute the tests by starting the proxy and running &lt;code&gt;ctest&lt;/code&gt; as described below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python ../test/mqttsas2.py &amp;amp;&#xA;$ ctest -VV&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross compilation&lt;/h3&gt; &#xA;&lt;p&gt;Cross compilation using CMake is performed by using so called &#34;toolchain files&#34; (see: &lt;a href=&#34;http://www.vtk.org/Wiki/CMake_Cross_Compiling&#34;&gt;http://www.vtk.org/Wiki/CMake_Cross_Compiling&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The path to the toolchain file can be specified by using CMake&#39;s &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE&lt;/code&gt; option. In case no toolchain file is specified, the build is performed for the native build platform.&lt;/p&gt; &#xA;&lt;p&gt;For your convenience toolchain files for the following platforms can be found in the &lt;code&gt;cmake&lt;/code&gt; directory of Eclipse Paho:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux x86&lt;/li&gt; &#xA; &lt;li&gt;Linux ARM11 (a.k.a. the Raspberry Pi)&lt;/li&gt; &#xA; &lt;li&gt;Windows x86_64&lt;/li&gt; &#xA; &lt;li&gt;Windows x86&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The provided toolchain files assume that required compilers/linkers are to be found in the environment, i. e. the PATH-Variable of your user or system. If you prefer, you can also specify the absolute location of your compilers in the toolchain files.&lt;/p&gt; &#xA;&lt;p&gt;Example invocation for the Raspberry Pi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake -GNinja -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_SAMPLES=TRUE \&#xA;    -DPAHO_BUILD_DOCUMENTATION=TRUE \&#xA;    -DOPENSSL_LIB_SEARCH_PATH=/tmp/libssl-dev/usr/lib/arm-linux-gnueabihf \&#xA;    -DOPENSSL_INC_SEARCH_PATH=&#34;/tmp/libssl-dev/usr/include/openssl;/tmp/libssl-dev/usr/include/arm-linux-gnueabihf&#34; \&#xA;    -DCMAKE_TOOLCHAIN_FILE=~/paho.mqtt.c/cmake/toolchain.linux-arm11.cmake \&#xA;    ~/paho.mqtt.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compilers for the Raspberry Pi and other ARM targets can be obtained from ARM (&lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/downloads&#34;&gt;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/downloads&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This example assumes that OpenSSL-libraries and includes have been installed in the &lt;code&gt;/tmp/libssl-dev&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Example invocation for Windows 64 bit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake -DPAHO_BUILD_SAMPLES=TRUE \&#xA;    -DCMAKE_TOOLCHAIN_FILE=~/paho.mqtt.c/cmake/toolchain.win64.cmake \&#xA;    ~/paho.mqtt.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case the libraries and executable are not linked against OpenSSL Libraries. Cross compilers for the Windows platform can be installed on Debian like systems like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install gcc-mingw-w64-x86-64 gcc-mingw-w64-i686&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build instructions for GNU Make&lt;/h2&gt; &#xA;&lt;p&gt;Ensure the OpenSSL development package is installed. Then from the client library base directory run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build and install the libraries. To uninstall:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the documentation requires doxygen and optionally graphviz.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The provided GNU Makefile is intended to perform all build steps in the &lt;code&gt;build&lt;/code&gt; directory within the source-tree of Eclipse Paho. Generated binares, libraries, and the documentation can be found in the &lt;code&gt;build/output&lt;/code&gt; directory after completion.&lt;/p&gt; &#xA;&lt;p&gt;Options that are passed to the compiler/linker can be specified by typical Unix build variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CC&lt;/td&gt; &#xA;   &lt;td&gt;Path to the C compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CFLAGS&lt;/td&gt; &#xA;   &lt;td&gt;Flags passed to compiler calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LDFLAGS&lt;/td&gt; &#xA;   &lt;td&gt;Flags passed to linker calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Building paho-mqtt - Using vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install paho-mqtt using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install paho-mqtt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The paho-mqtt port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Fully static builds with musl libc&lt;/h2&gt; &#xA;&lt;p&gt;(By Frank Pagliughi)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl libc&lt;/a&gt; is is an implementation of the C standard library built on top of the Linux system call API, including interfaces defined in the base language standard, POSIX, and widely agreed-upon extensions.&lt;/p&gt; &#xA;&lt;p&gt;Users of the Rust library, which wraps this one, had been complaining that they could not compile using the musl build tools. Musl is a small std C lib that can be statically linked. With the latest Paho C library (and a very minor tweak to the build), we&#39;re now able to build Rust apps using musl and Paho C that are fully static; no runtime dependencies on the platform; not even on the standard C lib.&lt;/p&gt; &#xA;&lt;p&gt;$ ./async_publish Publishing a message on the &#39;test&#39; topic&lt;/p&gt; &#xA;&lt;p&gt;$ ldd async_publish not a dynamic executable&lt;/p&gt; &#xA;&lt;p&gt;So, for example, if maintaining a suite of apps for some newer and older embedded Linux boards, the same executables could be deployed without worry about the C ABI on the particular boards.&lt;/p&gt; &#xA;&lt;p&gt;Certainly C apps using the Paho library could do this also.&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Windows&lt;/h2&gt; &#xA;&lt;h3&gt;Calling convention&lt;/h3&gt; &#xA;&lt;p&gt;As is normal for C programs on Windows, the calling convention is __cdecl. See the Microsoft documentation here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/cpp/cdecl?view=vs-2019&#34;&gt;https://docs.microsoft.com/en-us/cpp/cpp/cdecl?view=vs-2019&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you call this library from another language, you may need to take this into account.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>warmcat/libwebsockets</title>
    <updated>2022-10-21T01:31:17Z</updated>
    <id>tag:github.com,2022-10-21:/warmcat/libwebsockets</id>
    <link href="https://github.com/warmcat/libwebsockets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;canonical libwebsockets.org networking library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org/git/libwebsockets&#34;&gt;&lt;img src=&#34;https://libwebsockets.org/sai/status/libwebsockets&#34; alt=&#34;CI status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/3576&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/3576/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/2266&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/2266/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/lws-team/libwebsockets?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=warmcat/libwebsockets&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/144fb195a83046e484a75c8b4c6cfc99&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/warmcat/libwebsockets/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/warmcat/libwebsockets.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/warmcat/libwebsockets/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/warmcat/libwebsockets.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/warmcat/libwebsockets/context:javascript&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/javascript/g/warmcat/libwebsockets.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: JavaScript&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Libwebsockets&lt;/h1&gt; &#xA;&lt;p&gt;Libwebsockets is a simple-to-use, MIT-license, pure C library providing client and server for &lt;strong&gt;http/1&lt;/strong&gt;, &lt;strong&gt;http/2&lt;/strong&gt;, &lt;strong&gt;websockets&lt;/strong&gt;, &lt;strong&gt;MQTT&lt;/strong&gt; and other protocols in a security-minded, lightweight, configurable, scalable and flexible way. It&#39;s easy to build and cross-build via cmake and is suitable for tasks from embedded RTOS through mass cloud serving.&lt;/p&gt; &#xA;&lt;p&gt;It supports a lot of lightweight ancilliary implementations for things like JSON, CBOR, JOSE, COSE, and supports OpenSSL and MbedTLS v2 and v3 out of the box for everything. It&#39;s very gregarious when it comes to event loop sharing, supporting libuv, libevent, libev, sdevent, glib and uloop, as well as custom event libs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org/git/libwebsockets/tree/minimal-examples&#34;&gt;100+ independent minimal examples&lt;/a&gt; for various scenarios, CC0-licensed (public domain) for cut-and-paste, allow you to get started quickly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org/git/libwebsockets/tree/READMEs&#34;&gt;There are a lot of READMEs&lt;/a&gt; on a variety of topics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org/sai/&#34;&gt;We do a huge amount of CI testing per push&lt;/a&gt;, currently 582 builds on 30 platforms. &lt;a href=&#34;https://warmcat.com/2021/08/21/Sai-CI.html&#34;&gt;You can see the lws CI rack and read about how lws-based Sai is used to coordinate all the testing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/doc-assets/lws-overview.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h2&gt;HTML + CSS + JPEG + PNG display stack in lws&lt;/h2&gt; &#xA;&lt;p&gt;Want to drive your EPD or TFT / OLED display using HTML + CSS? Only got an ESP32?&lt;/p&gt; &#xA;&lt;p&gt;Want remote JPEGs, PNGs, HTML, RGBA composition, gamma, error diffusion if needed?&lt;/p&gt; &#xA;&lt;p&gt;Realtime render into a line buffer because you don&#39;t have enough heap for a framebuffer?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org/git/libwebsockets/tree/READMEs/README.html-parser.md&#34;&gt;Take a look here...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Perl binding for lws available&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Felipe Gasper, there&#39;s now a &lt;a href=&#34;https://metacpan.org/pod/Net::Libwebsockets&#34;&gt;perl binding for lws available at metacpan&lt;/a&gt;, this uses the recent generic event loop support in lws to have lws as a guest on an existing perl event loop.&lt;/p&gt; &#xA;&lt;h2&gt;Lws examples switching to Secure Streams&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/doc-assets/ss-api1.png&#34; alt=&#34;Secure Streams direct&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Secure Streams&lt;/strong&gt; support in lws was introduced a couple of years ago, it&#39;s a higher-level interface to lws &lt;code&gt;wsi&lt;/code&gt;-level apis that simplifies connectivity by segregating connection policy like protocol and endpoint information into a separate &lt;a href=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/minimal-examples/client/hello_world/example-policy.json&#34;&gt;JSON policy file&lt;/a&gt;, and just having the &lt;a href=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/minimal-examples/clients/hello_world/hello_world-ss.c&#34;&gt;code deal with payloads&lt;/a&gt;; as many details of the wire protocol as possible are hidden or moved to the policy, so user code is almost identical even if the wire protocol changes.&lt;/p&gt; &#xA;&lt;p&gt;The user code just asks to create a SS by &#34;streamtype name&#34;, it is created according to the details (protocol, endpoint, etc) under the same name in the policy.&lt;/p&gt; &#xA;&lt;p&gt;Key policy entries like endpoint can contain &lt;code&gt;${metadata-name}&lt;/code&gt; string substitutions to handle runtime adaptations via metadata. h1, h2, ws and mqtt are supported.&lt;/p&gt; &#xA;&lt;p&gt;As a layer on top of the &lt;code&gt;wsi&lt;/code&gt; apis, SS provides a higher-level way to access the existing wsi-level capabilities, both kinds of API will remain supported. Secure Streams are longer-lived than a single wsi, so an SS can coordinate retries by itself. SS-based user code is typically significantly smaller and more maintainable than wsi layer.&lt;/p&gt; &#xA;&lt;p&gt;In main branch I have moved the older examples into &lt;code&gt;./minimal-examples-lowlevel&lt;/code&gt; and am starting to port more cases from there into SS-based examples.&lt;/p&gt; &#xA;&lt;h3&gt;Comparison between wsi and SS level lws usage&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;&#34;low-level&#34; wsi way&lt;/th&gt; &#xA;   &lt;th&gt;Secure Streams way&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Create context&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;same&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Loop support, sul scheduler&lt;/td&gt; &#xA;   &lt;td&gt;default, event libs&lt;/td&gt; &#xA;   &lt;td&gt;same&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Supports comms mode&lt;/td&gt; &#xA;   &lt;td&gt;Client, Server, Raw&lt;/td&gt; &#xA;   &lt;td&gt;same&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Supports protocols&lt;/td&gt; &#xA;   &lt;td&gt;h1, h2, ws, mqtt (client)&lt;/td&gt; &#xA;   &lt;td&gt;same&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TLS support&lt;/td&gt; &#xA;   &lt;td&gt;mbedtls (including v3), openssl (including v3), wolfssl, boringssl, libressl&lt;/td&gt; &#xA;   &lt;td&gt;same&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Serializable, proxiable, muxable, transportable&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auto-allocated per-connection user object&lt;/td&gt; &#xA;   &lt;td&gt;pss specified in lws_protocols&lt;/td&gt; &#xA;   &lt;td&gt;Specified in ss info struct&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Connection User API&lt;/td&gt; &#xA;   &lt;td&gt;Protocol-specific lws_protocols cbs (&amp;gt; 100)&lt;/td&gt; &#xA;   &lt;td&gt;SS API (rx, tx, state callbacks only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sending adaptation&lt;/td&gt; &#xA;   &lt;td&gt;lws_callback_on_writeable() + WRITEABLE&lt;/td&gt; &#xA;   &lt;td&gt;lws_ss_request_write() + tx() cb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sending buffer&lt;/td&gt; &#xA;   &lt;td&gt;User-chosen + malloc&#39;d partial handling&lt;/td&gt; &#xA;   &lt;td&gt;SS-provided, no partials&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Create vhosts&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TLS validation&lt;/td&gt; &#xA;   &lt;td&gt;cert bundle or code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;, or cert bundle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Connection retry / backoff&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;, Auto&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nailing up&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;, Auto&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Endpoint and protocol details&lt;/td&gt; &#xA;   &lt;td&gt;spread around the code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Protocol selection, pipeline / stream sharing&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ws subprotocol selection&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ws binary / text&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Protocol-specific metadata&lt;/td&gt; &#xA;   &lt;td&gt;Protocol-specific apis in code (eg, lws_hdr)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;, generic metadata apis in code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Connection validity rules&lt;/td&gt; &#xA;   &lt;td&gt;struct&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;, Auto&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stream as Long Poll&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auth&lt;/td&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON policy&lt;/strong&gt; + automatic rotation if provider supported, else code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Serialized Secure Streams&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/doc-assets/ss-api2.png&#34; alt=&#34;Secure Streams direct&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Secure Streams APIs are also &lt;strong&gt;serializable&lt;/strong&gt;, the exact same client code can fulfil the connection directly in the same process as you would expect, or forward the actions, metadata and payloads to an &lt;a href=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/minimal-examples/ssproxy/ssproxy-socket&#34;&gt;SS Proxy&lt;/a&gt; that owns the policy over a Unix Domain or TCP socket connection to be fulfilled centrally. This allows, eg, h2 streams from different processes sharing a single connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/doc-assets/ss-api3.png&#34; alt=&#34;Secure Streams direct&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The serialized SS can also travel over generic transports like UART, an &lt;a href=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/minimal-examples/embedded/pico/pico-sspc-binance&#34;&gt;example is provided implementing the Binance example on an RPi Pico&lt;/a&gt; with a UART transport to a &lt;a href=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/minimal-examples/ssproxy/ssproxy-custom-transport-uart&#34;&gt;UART transport SS proxy&lt;/a&gt;, where the pico itself has no network stack, tls, compression or wss stack, but can send and receive to and from the endpoint as if it did.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;lws_trasport_mux&lt;/code&gt; is used to interpose between the UART transport and the SSPC layer, allowing a single pipe to carry many separate SS connections.&lt;/p&gt; &#xA;&lt;p&gt;The user SS code is identical however it is transported, muxed and fulfilled.&lt;/p&gt; &#xA;&lt;h2&gt;v4.3 is released&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://libwebsockets.org/git/libwebsockets/tree/changelog&#34;&gt;changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lws work retrospective&lt;/h2&gt; &#xA;&lt;p&gt;The initial commit for lws will have been 11 years ago come Oct 28 2021, it&#39;s been a lot of work. There are a total of 4.3K patches, touching 800KLOC cumulatively (this is not the size in the repo, but over the years, how many source lines were changed by patches).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/warmcat/libwebsockets/main/doc-assets/work.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gratifyingly, it turns out over the years, ~15% of that was contributed by 404 contributors: that&#39;s not so bad. Thanks a lot to everyone who has provided patches.&lt;/p&gt; &#xA;&lt;p&gt;Today at least tens of millions of devices and product features rely on lws to handle their communications including several from FAANG; Google now include lws as part of Android sources.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This is the libwebsockets C library for lightweight websocket clients and servers. For support, visit&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org&#34;&gt;https://libwebsockets.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;and consider joining the project mailing list at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://libwebsockets.org/mailman/listinfo/libwebsockets&#34;&gt;https://libwebsockets.org/mailman/listinfo/libwebsockets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can get the latest version of the library from git:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libwebsockets.org/git&#34;&gt;https://libwebsockets.org/git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doxygen API docs for development: &lt;a href=&#34;https://libwebsockets.org/lws-api-doc-main/html/index.html&#34;&gt;https://libwebsockets.org/lws-api-doc-main/html/index.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>