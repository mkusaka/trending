<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-23T01:30:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RalfHacker/Kerbeus-BOF</title>
    <updated>2023-11-23T01:30:47Z</updated>
    <id>tag:github.com,2023-11-23:/RalfHacker/Kerbeus-BOF</id>
    <link href="https://github.com/RalfHacker/Kerbeus-BOF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BOF for Kerberos abuse (an implementation of some important features of the Rubeus).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kerbeus-BOF&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Beacon Object Files for Kerberos abuse. This is an implementation of some important features of the &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;Rubeus&lt;/a&gt; project, written in C. The project features integration with the C2 frameworks &lt;a href=&#34;https://www.cobaltstrike.com/&#34;&gt;Cobalt Strike&lt;/a&gt; and &lt;a href=&#34;https://github.com/HavocFramework/Havoc&#34;&gt;Havoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ticket requests and renewals&lt;/h2&gt; &#xA;&lt;h3&gt;asktgt&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;asktgt&lt;/strong&gt; action will build raw AS-REQ (TGT request) traffic for the specified user and encryption key (&lt;code&gt;/rc4&lt;/code&gt; or &lt;code&gt;/aes256&lt;/code&gt;). A &lt;code&gt;/password&lt;/code&gt; flag can also be used instead of a hash - in this case &lt;code&gt;/enctype:X&lt;/code&gt; will default to RC4. If no &lt;code&gt;/domain&lt;/code&gt; is specified, the computer&#39;s current domain is extracted, and if no &lt;code&gt;/dc&lt;/code&gt; is specified the same is done for the system&#39;s current domain controller. If authentication is successful, the resulting AS-REP is parsed and the KRB-CRED (a .kirbi, which includes the user&#39;s TGT) is output as a base64 blob. The &lt;code&gt;/ptt&lt;/code&gt; flag will &#34;pass-the-ticket&#34; and apply the resulting Kerberos credential to the current logon session. &lt;strong&gt;Also, another opsec note:&lt;/strong&gt; only one TGT can be applied at a time to the current logon session, so the previous TGT is wiped when the new ticket is applied when using the &lt;code&gt;/ptt&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;To form AS-REQ&#39;s more inline with genuine requests, the &lt;code&gt;/opsec&lt;/code&gt; flag can be used, this will send an initial AS-REQ without pre-authentication first, if this succeeds, the resulting AS-REP is decrypted and TGT return, otherwise an AS-REQ with pre-authentication is then sent.&lt;/p&gt; &#xA;&lt;p&gt;Requesting a TGT without a PAC can be done using the &lt;code&gt;/nopac&lt;/code&gt; switch. The &lt;code&gt;/nopreauth&lt;/code&gt; flag can be used to send an AS-REQ without pre-authentication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_asktgt /user:USER /password:PASSWORD [/domain:DOMAIN] [/dc:DC] [/enctype:{rc4|aes256}] [/ptt] [/nopac] [/opsec]&#xA;krb_asktgt /user:USER /aes256:HASH [/domain:DOMAIN] [/dc:DC] [/ptt] [/nopac] [/opsec]&#xA;krb_asktgt /user:USER /rc4:HASH [/domain:DOMAIN] [/dc:DC] [/ptt] [/nopac]&#xA;krb_asktgt /user:USER /nopreauth [/domain:DOMAIN] [/dc:DC] [/ptt]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;asktgs&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;asktgs&lt;/strong&gt; action will build/parse a raw TGS-REQ/TGS-REP service ticket request using the specified TGT &lt;code&gt;/ticket:X&lt;/code&gt; supplied. This value &lt;strong&gt;must&lt;/strong&gt; be a base64 encoding of a .kirbi file. If a &lt;code&gt;/dc&lt;/code&gt; is not specified, the computer&#39;s current domain controller is extracted and used as the destination for the request traffic. The &lt;code&gt;/ptt&lt;/code&gt; flag will &#34;pass-the-ticket&#34; and apply the resulting service ticket to the current logon session. One or more &lt;code&gt;/service:X&lt;/code&gt; SPNs &lt;strong&gt;must&lt;/strong&gt; be specified, comma separated.&lt;/p&gt; &#xA;&lt;p&gt;The supported encryption types in the constructed TGS-REQ will be RC4_HMAC and AES256_CTS_HMAC_SHA1. In this case, the highest mutually supported encryption will be used by the KDC to build the returned service ticket. If you want to force RC4 or AES256 keys, use &lt;code&gt;/enctype:[rc4 or aes256]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To form TGS-REQ&#39;s more inline with genuine requests, the &lt;code&gt;/opsec&lt;/code&gt; flag can be used, this will also cause an additional TGS-REQ to be sent automatically when a service ticket is requested for an account configured for unconstrained delegation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;/u2u&lt;/code&gt; flag was implemented to request User-to-User tickets. Together with the &lt;code&gt;/tgs:X&lt;/code&gt; argument (used to supply the target accounts TGT), the &lt;code&gt;/service:X&lt;/code&gt; argument can be the username of the account the supplied TGT is for (with the &lt;code&gt;/tgs:X&lt;/code&gt; argument). The &lt;code&gt;/targetuser:X&lt;/code&gt; argument will request a PAC of any other account by inserting a PA-FOR-USER PA data section with the &lt;code&gt;target user&#39;s&lt;/code&gt; username.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;/keyList&lt;/code&gt; flag was implemented for Kerberos &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/732211ae-4891-40d3-b2b6-85ebd6f5ffff&#34;&gt;Key List Requests&lt;/a&gt;. These requests must utilise a forged partial TGT from a read-only domain controller in the &lt;code&gt;/ticket:BASE64&lt;/code&gt; parameter. Furthermore, the &lt;code&gt;/spn:x&lt;/code&gt; field must be set to the KRBTGT SPN within the domain, eg. &lt;code&gt;KRBTBT/domain.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_asktgs /ticket:BASE64 /service:SPN1,SPN2,... [/domain:DOMAIN] [/dc:DC] [/tgs:BASE64] [/targetdomain:DOMAIN] [/targetuser:USER] [/enctype:{rc4|aes256}] [/ptt] [/keylist] [/u2u] [/opsec]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;renew&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;renew&lt;/strong&gt; action will build/parse a raw TGS-REQ/TGS-REP TGT renewal exchange using the specified &lt;code&gt;/ticket:X&lt;/code&gt; supplied. This value must be a base64 encoding of a .kirbi file. If a &lt;code&gt;/dc&lt;/code&gt; is not specified, the computer&#39;s current domain controller is extracted and used as the destination for the renewal traffic. The &lt;code&gt;/ptt&lt;/code&gt; flag will &#34;pass-the-ticket&#34; and apply the resulting Kerberos credential to the current logon session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_renew /ticket:BASE64 [/dc:DC] [/ptt]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Constrained delegation abuse&lt;/h2&gt; &#xA;&lt;p&gt;If a user (or computer) account is configured for constrained delegation (i.e. has a SPN value in its msds-allowedtodelegateto field) this action can be used to abuse access to the target SPN/server.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;TL;DR&lt;/strong&gt; explanation is that an account with constrained delegation enabled is allowed to request tickets &lt;em&gt;to itself&lt;/em&gt; as any user, in a process known as S4U2self. In order for an account to be allowed to do this, it has to have &lt;strong&gt;TrustedToAuthForDelegation&lt;/strong&gt; enabled in it&#39;s useraccountcontrol property, something that only elevated users can modify by default. This ticket has the &lt;strong&gt;FORWARDABLE&lt;/strong&gt; flag set by default. The service can then use this specially requested ticket to request a service ticket to any service principal name (SPN) specified in the account&#39;s &lt;strong&gt;msds-allowedtodelegateto&lt;/strong&gt; field. So long story short, if you have control of an account with &lt;strong&gt;TrustedToAuthForDelegation&lt;/strong&gt; set and a value in &lt;strong&gt;msds-allowedtodelegateto&lt;/strong&gt;, you can pretend to be any user in the domain to the SPNs set in the account&#39;s &lt;strong&gt;msds-allowedtodelegateto&lt;/strong&gt; field.&lt;/p&gt; &#xA;&lt;p&gt;S4U2self ticket can then be used as a &lt;code&gt;/tgs:Y&lt;/code&gt; parameter (base64 blob) to execute the S4U2proxy process. A valid &lt;strong&gt;msds-allowedtodelegateto&lt;/strong&gt; value for the account must be supplied (&lt;code&gt;/service:X&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;/altservice&lt;/code&gt; parameter allows us to substitute in any service name we want in the resulting KRB-CRED file. One or more alternate service names can be supplied, comma separated (&lt;code&gt;/altservice:cifs,HOST,...&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To form the TGS-REQ&#39;s more inline with genuine requests, the &lt;code&gt;/opsec&lt;/code&gt; flag can be used.&lt;/p&gt; &#xA;&lt;p&gt;It is possible, in certain cirsumstances, to use an S4U2Self ticket to impersonate protected users in order to escalate privileges on the requesting system, as discussed &lt;a href=&#34;https://exploit.ph/revisiting-delegate-2-thyself.html&#34;&gt;here&lt;/a&gt;. For this purpose, the &lt;code&gt;/self&lt;/code&gt; flag and &lt;code&gt;/altservice:X&lt;/code&gt; argument can be used to generate a usable service ticket.&lt;/p&gt; &#xA;&lt;p&gt;To forge an S4U2Self referral, only the trust key is required. By using the &lt;code&gt;/targetdomain:X&lt;/code&gt; argument with the &lt;code&gt;/self&lt;/code&gt; flag and without the &lt;code&gt;/targetdc&lt;/code&gt; argument, it will treat the ticket supplied with &lt;code&gt;/ticket:X&lt;/code&gt; as an S4U2Self referral and only request the final S4U2Self service ticket. The &lt;code&gt;/altservice:X&lt;/code&gt; can also be used to rewrite the sname in the resulting ticket.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_s4u /ticket:BASE64 /service:SPN {/impersonateuser:USER | /tgs:BASE64} [/domain:DOMAIN] [/dc:DC] [/altservice:SERVICE] [/ptt] [/nopac] [/opsec] [/self]&#xA;krb_cross_s4u /ticket:BASE64 /service:SPN /targetdomain:DOMAIN /targetdc:DC {/impersonateuser:USER | /tgs:BASE64} [/domain:DOMAIN] [/dc:DC] [/altservice:SERVICE] [/nopac] [/self]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ticket Management&lt;/h2&gt; &#xA;&lt;h3&gt;ptt&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;ptt&lt;/strong&gt; action will submit a &lt;code&gt;/ticket:X&lt;/code&gt; (TGT or service ticket) for the current logon session through the LsaCallAuthenticationPackage() API with a KERB_SUBMIT_TKT_REQUEST message, or (&lt;strong&gt;if elevated&lt;/strong&gt;) to the logon session specified by &lt;code&gt;/luid:ea4..&lt;/code&gt;. Like other &lt;code&gt;/ticket:X&lt;/code&gt; parameters, the value can be a base64 encoding of a .kirbi file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_ptt /ticket:BASE64 [/luid:LOGONID]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;purge&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;purge&lt;/strong&gt; action will purge all Kerberos tickets from the current logon session, or (if elevated) to the logon session specified by &lt;code&gt;/luid:0xA..&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_purge [/luid:LOGONID]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;describe&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;describe&lt;/strong&gt; action takes a &lt;code&gt;/ticket:X&lt;/code&gt; value (TGT or service ticket), parses it, and describes the values of the ticket. Like other &lt;code&gt;/ticket:X&lt;/code&gt; parameters, the value can be a base64 encoding of a .kirbi file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_describe /ticket:BASE64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/05.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;klist&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;klist&lt;/strong&gt; will list detailed information on the current user&#39;s logon session and Kerberos tickets, if not elevated. If run from an elevated context (&lt;strong&gt;SYSTEM&lt;/strong&gt;), information on all logon sessions and associated Kerberos tickets is displayed. Logon and ticket information can be displayed for a specific LogonID with &lt;code&gt;/luid:3ea..&lt;/code&gt; (if elevated).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_klist [/luid:LOGINID] [/user:USER] [/service:SERVICE] [/client:CLIENT]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/06.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;dump&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;dump&lt;/strong&gt; action will extract current TGTs and service tickets if in an elevated context (&lt;strong&gt;SYSTEM&lt;/strong&gt;). If not elevated, service tickets for the current user are extracted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_dump [/luid:LOGINID] [/user:USER] [/service:SERVICE] [/client:CLIENT]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/07.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;triage&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;triage&lt;/strong&gt; action will output a table of the current user&#39;s Kerberos tickets, if not elevated. If run from an elevated context (&lt;strong&gt;SYSTEM&lt;/strong&gt;), a table describing all Kerberos tickets on the system is displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_triage [/luid:LOGINID] [/user:USER] [/service:SERVICE] [/client:CLIENT]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/08.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;filters&lt;/h4&gt; &#xA;&lt;p&gt;For the &lt;code&gt;klist&lt;/code&gt;, &lt;code&gt;triage&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt;, tickets can be filtered by &lt;code&gt;/luid&lt;/code&gt;, &lt;code&gt;/service&lt;/code&gt; and &lt;code&gt;/client&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Need SYSTEM context&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/09.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;tgtdeleg&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;tgtdeleg&lt;/strong&gt; abuses the Kerberos GSS-API to retrieve a usable TGT for the current user without needing elevation on the host. AcquireCredentialsHandle() is used to get a handle to the current user&#39;s Kerberos security credentials, and InitializeSecurityContext() with the ISC_REQ_DELEGATE flag and a target SPN of CIFS/DC.domain.com to prepare a fake delegate context to send to the DC. This results in an AP-REQ in the GSS-API output that contains a KRB_CRED in the authenticator checksum. The service ticket session key is extracted from the local Kerberos cache and is used to decrypt the KRB_CRED in the authenticator, resulting in a usable TGT .kirbi.&lt;/p&gt; &#xA;&lt;p&gt;If automatic target/domain extraction is failing, a known SPN of a service configured with unconstrained delegation can be specified with &lt;code&gt;/target:SPN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_tgtdeleg [/target:SPN]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roasting&lt;/h2&gt; &#xA;&lt;h3&gt;kerberoasting&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;kerberoasting&lt;/strong&gt; is used to request the appropriate service ticket. The &lt;code&gt;/ticket:X&lt;/code&gt; argument specifies the domain user&#39;s TGT ticket. The &lt;code&gt;/spn:X&lt;/code&gt; argument specifies the target SPN. The &lt;code&gt;/domain&lt;/code&gt; and &lt;code&gt;/dc&lt;/code&gt; arguments are optional and retrieve system defaults just like the other actions.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;/nopreauth:USER&lt;/code&gt; argument will attempt to send an AS-REQ with the service passed to &lt;code&gt;/spn:Y&lt;/code&gt; to request service tickets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_kerberoasting /spn:SPN [/nopreauth:USER] [/dc:DC] [/domain:DOMAIN]&#xA;krb_kerberoasting /spn:SPN /ticket:BASE64 [/dc:DC]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;asreproasting&lt;/h3&gt; &#xA;&lt;p&gt;If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting. The &lt;code&gt;/user:X&lt;/code&gt; argument specifies the target user. The &lt;code&gt;/domain&lt;/code&gt; and &lt;code&gt;/dc&lt;/code&gt; arguments are optional, pulling system defaults as other actions do.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_asreproasting /user:USER [/dc:DC] [/domain:DOMAIN]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;hash&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;hash&lt;/strong&gt; action will take a &lt;code&gt;/password:X&lt;/code&gt; and optional &lt;code&gt;/user:USER&lt;/code&gt; and/or &lt;code&gt;/domain:DOMAIN&lt;/code&gt;. It will generate the rc4_hmac (NTLM) representation of the password. If user and domain names are specified, the aes128_cts_hmac_sha1 and aes256_cts_hmac_sha1 hash forms are generated. The user and domain names are used as salts for the AES implementations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_hash /password:PASSWORD [/user:USER] [/domain:DOMAIN]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;changepw&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;changepw&lt;/strong&gt; action will take a user&#39;s TGT .kirbi blob and execute a MS kpasswd password change with the specified &lt;code&gt;/new:PASSWORD&lt;/code&gt; value. If a &lt;code&gt;/dc&lt;/code&gt; is not specified, the computer&#39;s current domain controller is extracted and used as the destination for the password reset traffic.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;/targetuser&lt;/code&gt; and &lt;code&gt;/targetdomain&lt;/code&gt; arguments can be used to change the password of other users, given the user whose TGT it is has enough privileges.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that either a users TGT or a service ticket for kadmin/changepw can be used to change the password&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;krb_changepw /ticket:BASE64 /new:PASSWORD [/dc:DC] [/targetuser:USER] [/targetdomain:DOMAIN]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RalfHacker/Kerbeus-BOF/main/_img/14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement &lt;code&gt;asktgt /cert:...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Refactoring code to reduce BOFs size&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expand the output of the &lt;code&gt;describe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Integration with C2 Sliver and Brute Ratel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you need anything, PM me to X or TG :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rubeus - &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;https://github.com/GhostPack/Rubeus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CS-Situational-Awareness-BOF - &lt;a href=&#34;https://github.com/trustedsec/CS-Situational-Awareness-BOF&#34;&gt;https://github.com/trustedsec/CS-Situational-Awareness-BOF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;nanorobeus - &lt;a href=&#34;https://github.com/wavvs/nanorobeus&#34;&gt;https://github.com/wavvs/nanorobeus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>