<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:32:03Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sqlite/sqlite</title>
    <updated>2022-10-28T01:32:03Z</updated>
    <id>tag:github.com,2022-10-28:/sqlite/sqlite</id>
    <link href="https://github.com/sqlite/sqlite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Git mirror of the SQLite source tree&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;SQLite Source Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the complete source code for the &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite database engine&lt;/a&gt;. Some test scripts are also included. However, many other test scripts and most of the documentation are managed separately.&lt;/p&gt; &#xA;&lt;h2&gt;Version Control&lt;/h2&gt; &#xA;&lt;p&gt;SQLite sources are managed using the &lt;a href=&#34;https://www.fossil-scm.org/&#34;&gt;Fossil&lt;/a&gt;, a distributed version control system that was specifically designed and written to support SQLite development. The &lt;a href=&#34;https://sqlite.org/src/timeline&#34;&gt;Fossil repository&lt;/a&gt; contains the urtext.&lt;/p&gt; &#xA;&lt;p&gt;If you are reading this on GitHub or some other Git repository or service, then you are looking at a mirror. The names of check-ins and other artifacts in a Git mirror are different from the official names for those objects. The official names for check-ins are found in a footer on the check-in comment for authorized mirrors. The official check-in name can also be seen in the &lt;code&gt;manifest.uuid&lt;/code&gt; file in the root of the tree. Always use the official name, not the Git-name, when communicating about an SQLite check-in.&lt;/p&gt; &#xA;&lt;p&gt;If you pulled your SQLite source code from a secondary source and want to verify its integrity, there are hints on how to do that in the &lt;a href=&#34;https://raw.githubusercontent.com/sqlite/sqlite/master/#vauth&#34;&gt;Verifying Code Authenticity&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining The Code&lt;/h2&gt; &#xA;&lt;p&gt;If you do not want to use Fossil, you can download tarballs or ZIP archives or &lt;a href=&#34;https://sqlite.org/cli.html#sqlar&#34;&gt;SQLite archives&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest trunk check-in as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest release as &lt;a href=&#34;https://www.sqlite.org/src/tarball/sqlite.tar.gz?r=release&#34;&gt;Tarball&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/src/zip/sqlite.zip?r=release&#34;&gt;ZIP-archive&lt;/a&gt;, or &lt;a href=&#34;https://www.sqlite.org/src/sqlar/sqlite.sqlar?r=release&#34;&gt;SQLite-archive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For other check-ins, substitute an appropriate branch name or tag or hash prefix in place of &#34;release&#34; in the URLs of the previous bullet. Or browse the &lt;a href=&#34;https://www.sqlite.org/src/timeline&#34;&gt;timeline&lt;/a&gt; to locate the check-in desired, click on its information page link, then click on the &#34;Tarball&#34; or &#34;ZIP Archive&#34; links on the information page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do want to use Fossil to check out the source tree, first install Fossil version 2.0 or later. (Source tarballs and precompiled binaries available &lt;a href=&#34;https://www.fossil-scm.org/fossil/uv/download.html&#34;&gt;here&lt;/a&gt;. Fossil is a stand-alone program. To install, simply download or build the single executable file and put that file someplace on your $PATH.) Then run commands like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mkdir -p ~/sqlite ~/Fossils&#xA;    cd ~/sqlite&#xA;    fossil clone https://www.sqlite.org/src ~/Fossils/sqlite.fossil&#xA;    fossil open ~/Fossils/sqlite.fossil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After setting up a repository using the steps above, you can always update to the latest version using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    fossil update trunk   ;# latest trunk check-in&#xA;    fossil update release ;# latest official release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or type &#34;fossil ui&#34; to get a web-based user interface.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling for Unix-like systems&lt;/h2&gt; &#xA;&lt;p&gt;First create a directory in which to place the build products. It is recommended, but not required, that the build directory be separate from the source directory. Cd into the build directory and then from the build directory run the configure script found at the root of the source tree. Then run &#34;make&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    tar xzf sqlite.tar.gz    ;#  Unpack the source tree into &#34;sqlite&#34;&#xA;    mkdir bld                ;#  Build will occur in a sibling directory&#xA;    cd bld                   ;#  Change to the build directory&#xA;    ../sqlite/configure      ;#  Run the configure script&#xA;    make                     ;#  Run the makefile.&#xA;    make sqlite3.c           ;#  Build the &#34;amalgamation&#34; source file&#xA;    make test                ;#  Run some tests (requires Tcl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the makefile for additional targets.&lt;/p&gt; &#xA;&lt;p&gt;The configure script uses autoconf 2.61 and libtool. If the configure script does not work out for you, there is a generic makefile named &#34;Makefile.linux-gcc&#34; in the top directory of the source tree that you can copy and edit to suit your needs. Comments on the generic makefile show what changes are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Using MSVC for Windows systems&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, all applicable build products can be compiled with MSVC. First open the command prompt window associated with the desired compiler version (e.g. &#34;Developer Command Prompt for VS2013&#34;). Next, use NMAKE with the provided &#34;Makefile.msc&#34; to build one of the supported targets.&lt;/p&gt; &#xA;&lt;p&gt;For example, from the parent directory of the source subtree named &#34;sqlite&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mkdir bld&#xA;    cd bld&#xA;    nmake /f ..\sqlite\Makefile.msc TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc sqlite3.c TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc sqlite3.dll TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc sqlite3.exe TOP=..\sqlite&#xA;    nmake /f ..\sqlite\Makefile.msc test TOP=..\sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are several build options that can be set via the NMAKE command line. For example, to build for WinRT, simply add &#34;FOR_WINRT=1&#34; argument to the &#34;sqlite3.dll&#34; command line above. When debugging into the SQLite code, adding the &#34;DEBUG=1&#34; argument to one of the above command lines is recommended.&lt;/p&gt; &#xA;&lt;p&gt;SQLite does not require &lt;a href=&#34;http://www.tcl.tk/&#34;&gt;Tcl&lt;/a&gt; to run, but a Tcl installation is required by the makefiles (including those for MSVC). SQLite contains a lot of generated code and Tcl is used to do much of that code generation.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code Tour&lt;/h2&gt; &#xA;&lt;p&gt;Most of the core source files are in the &lt;strong&gt;src/&lt;/strong&gt; subdirectory. The &lt;strong&gt;src/&lt;/strong&gt; folder also contains files used to build the &#34;testfixture&#34; test harness. The names of the source files used by &#34;testfixture&#34; all begin with &#34;test&#34;. The &lt;strong&gt;src/&lt;/strong&gt; also contains the &#34;shell.c&#34; file which is the main program for the &#34;sqlite3.exe&#34; &lt;a href=&#34;https://sqlite.org/cli.html&#34;&gt;command-line shell&lt;/a&gt; and the &#34;tclsqlite.c&#34; file which implements the &lt;a href=&#34;https://sqlite.org/tclsqlite.html&#34;&gt;Tcl bindings&lt;/a&gt; for SQLite. (Historical note: SQLite began as a Tcl extension and only later escaped to the wild as an independent library.)&lt;/p&gt; &#xA;&lt;p&gt;Test scripts and programs are found in the &lt;strong&gt;test/&lt;/strong&gt; subdirectory. Additional test code is found in other source repositories. See &lt;a href=&#34;http://www.sqlite.org/testing.html&#34;&gt;How SQLite Is Tested&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;ext/&lt;/strong&gt; subdirectory contains code for extensions. The Full-text search engine is in &lt;strong&gt;ext/fts3&lt;/strong&gt;. The R-Tree engine is in &lt;strong&gt;ext/rtree&lt;/strong&gt;. The &lt;strong&gt;ext/misc&lt;/strong&gt; subdirectory contains a number of smaller, single-file extensions, such as a REGEXP operator.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;tool/&lt;/strong&gt; subdirectory contains various scripts and programs used for building generated source code files or for testing or for generating accessory programs such as &#34;sqlite3_analyzer(.exe)&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Generated Source Code Files&lt;/h3&gt; &#xA;&lt;p&gt;Several of the C-language source files used by SQLite are generated from other sources rather than being typed in manually by a programmer. This section will summarize those automatically-generated files. To create all of the automatically-generated files, simply run &#34;make target_source&#34;. The &#34;target_source&#34; make target will create a subdirectory &#34;tsrc/&#34; and fill it with all the source files needed to build SQLite, both manually-edited files and automatically-generated files.&lt;/p&gt; &#xA;&lt;p&gt;The SQLite interface is defined by the &lt;strong&gt;sqlite3.h&lt;/strong&gt; header file, which is generated from src/sqlite.h.in, ./manifest.uuid, and ./VERSION. The &lt;a href=&#34;http://www.tcl.tk&#34;&gt;Tcl script&lt;/a&gt; at tool/mksqlite3h.tcl does the conversion. The manifest.uuid file contains the SHA3 hash of the particular check-in and is used to generate the SQLITE_SOURCE_ID macro. The VERSION file contains the current SQLite version number. The sqlite3.h header is really just a copy of src/sqlite.h.in with the source-id and version number inserted at just the right spots. Note that comment text in the sqlite3.h file is used to generate much of the SQLite API documentation. The Tcl scripts used to generate that documentation are in a separate source repository.&lt;/p&gt; &#xA;&lt;p&gt;The SQL language parser is &lt;strong&gt;parse.c&lt;/strong&gt; which is generated from a grammar in the src/parse.y file. The conversion of &#34;parse.y&#34; into &#34;parse.c&#34; is done by the &lt;a href=&#34;https://raw.githubusercontent.com/sqlite/sqlite/master/doc/lemon.html&#34;&gt;lemon&lt;/a&gt; LALR(1) parser generator. The source code for lemon is at tool/lemon.c. Lemon uses the tool/lempar.c file as a template for generating its parser. Lemon also generates the &lt;strong&gt;parse.h&lt;/strong&gt; header file, at the same time it generates parse.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;opcodes.h&lt;/strong&gt; header file contains macros that define the numbers corresponding to opcodes in the &#34;VDBE&#34; virtual machine. The opcodes.h file is generated by scanning the src/vdbe.c source file. The Tcl script at ./mkopcodeh.tcl does this scan and generates opcodes.h. A second Tcl script, ./mkopcodec.tcl, then scans opcodes.h to generate the &lt;strong&gt;opcodes.c&lt;/strong&gt; source file, which contains a reverse mapping from opcode-number to opcode-name that is used for EXPLAIN output.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;keywordhash.h&lt;/strong&gt; header file contains the definition of a hash table that maps SQL language keywords (ex: &#34;CREATE&#34;, &#34;SELECT&#34;, &#34;INDEX&#34;, etc.) into the numeric codes used by the parse.c parser. The keywordhash.h file is generated by a C-language program at tool mkkeywordhash.c.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;pragma.h&lt;/strong&gt; header file contains various definitions used to parse and implement the PRAGMA statements. The header is generated by a script &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt;. If you want to add a new PRAGMA, edit the &lt;strong&gt;tool/mkpragmatab.tcl&lt;/strong&gt; file to insert the information needed by the parser for your new PRAGMA, then run the script to regenerate the &lt;strong&gt;pragma.h&lt;/strong&gt; header file.&lt;/p&gt; &#xA;&lt;h3&gt;The Amalgamation&lt;/h3&gt; &#xA;&lt;p&gt;All of the individual C source code and header files (both manually-edited and automatically-generated) can be combined into a single big source file &lt;strong&gt;sqlite3.c&lt;/strong&gt; called &#34;the amalgamation&#34;. The amalgamation is the recommended way of using SQLite in a larger application. Combining all individual source code files into a single big source code file allows the C compiler to perform more cross-procedure analysis and generate better code. SQLite runs about 5% faster when compiled from the amalgamation versus when compiled from individual source files.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation is generated from the tool/mksqlite3c.tcl Tcl script. First, all of the individual source files must be gathered into the tsrc/ subdirectory (using the equivalent of &#34;make target_source&#34;) then the tool/mksqlite3c.tcl script is run to copy them all together in just the right order while resolving internal &#34;#include&#34; references.&lt;/p&gt; &#xA;&lt;p&gt;The amalgamation source file is more than 200K lines long. Some symbolic debuggers (most notably MSVC) are unable to deal with files longer than 64K lines. To work around this, a separate Tcl script, tool/split-sqlite3c.tcl, can be run on the amalgamation to break it up into a single small C file called &lt;strong&gt;sqlite3-all.c&lt;/strong&gt; that does #include on about seven other files named &lt;strong&gt;sqlite3-1.c&lt;/strong&gt;, &lt;strong&gt;sqlite3-2.c&lt;/strong&gt;, ..., &lt;strong&gt;sqlite3-7.c&lt;/strong&gt;. In this way, all of the source code is contained within a single translation unit so that the compiler can do extra cross-procedure optimization, but no individual source file exceeds 32K lines in length.&lt;/p&gt; &#xA;&lt;h2&gt;How It All Fits Together&lt;/h2&gt; &#xA;&lt;p&gt;SQLite is modular in design. See the &lt;a href=&#34;http://www.sqlite.org/arch.html&#34;&gt;architectural description&lt;/a&gt; for details. Other documents that are useful in (helping to understand how SQLite works include the &lt;a href=&#34;http://www.sqlite.org/fileformat2.html&#34;&gt;file format&lt;/a&gt; description, the &lt;a href=&#34;http://www.sqlite.org/opcode.html&#34;&gt;virtual machine&lt;/a&gt; that runs prepared statements, the description of &lt;a href=&#34;http://www.sqlite.org/atomiccommit.html&#34;&gt;how transactions work&lt;/a&gt;, and the &lt;a href=&#34;http://www.sqlite.org/optoverview.html&#34;&gt;overview of the query planner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Years of effort have gone into optimizing SQLite, both for small size and high performance. And optimizations tend to result in complex code. So there is a lot of complexity in the current SQLite implementation. It will not be the easiest library in the world to hack.&lt;/p&gt; &#xA;&lt;p&gt;Key files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqlite.h.in&lt;/strong&gt; - This file defines the public interface to the SQLite library. Readers will need to be familiar with this interface before trying to understand how the library works internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqliteInt.h&lt;/strong&gt; - this header file defines many of the data objects used internally by SQLite. In addition to &#34;sqliteInt.h&#34;, some subsystems have their own header files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;parse.y&lt;/strong&gt; - This file describes the LALR(1) grammar that SQLite uses to parse SQL statements, and the actions that are taken at each step in the parsing process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;vdbe.c&lt;/strong&gt; - This file implements the virtual machine that runs prepared statements. There are various helper files whose names begin with &#34;vdbe&#34;. The VDBE has access to the vdbeInt.h header file which defines internal data objects. The rest of SQLite interacts with the VDBE through an interface defined by vdbe.h.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;where.c&lt;/strong&gt; - This file (together with its helper files named by &#34;where*.c&#34;) analyzes the WHERE clause and generates virtual machine code to run queries efficiently. This file is sometimes called the &#34;query optimizer&#34;. It has its own private header file, whereInt.h, that defines data objects used internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;btree.c&lt;/strong&gt; - This file contains the implementation of the B-Tree storage engine used by SQLite. The interface to the rest of the system is defined by &#34;btree.h&#34;. The &#34;btreeInt.h&#34; header defines objects used internally by btree.c and not published to the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pager.c&lt;/strong&gt; - This file contains the &#34;pager&#34; implementation, the module that implements transactions. The &#34;pager.h&#34; header file defines the interface between pager.c and the rest of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;os_unix.c&lt;/strong&gt; and &lt;strong&gt;os_win.c&lt;/strong&gt; - These two files implement the interface between SQLite and the underlying operating system using the run-time pluggable VFS interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;shell.c.in&lt;/strong&gt; - This file is not part of the core SQLite library. This is the file that, when linked against sqlite3.a, generates the &#34;sqlite3.exe&#34; command-line shell. The &#34;shell.c.in&#34; file is transformed into &#34;shell.c&#34; as part of the build process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tclsqlite.c&lt;/strong&gt; - This file implements the Tcl bindings for SQLite. It is not part of the core SQLite library. But as most of the tests in this repository are written in Tcl, the Tcl language bindings are important.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;em&gt;test&lt;/em&gt;.c&lt;/em&gt;* - Files in the src/ folder that begin with &#34;test&#34; go into building the &#34;testfixture.exe&#34; program. The testfixture.exe program is an enhanced Tcl shell. The testfixture.exe program runs scripts in the test/ folder to validate the core SQLite code. The testfixture program (and some other test programs too) is built and run when you type &#34;make test&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ext/misc/json1.c&lt;/strong&gt; - This file implements the various JSON functions that are built into SQLite.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many other source files. Each has a succinct header comment that describes its purpose and role within the larger system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;vauth&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying Code Authenticity&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;manifest&lt;/code&gt; file at the root directory of the source tree contains either a SHA3-256 hash (for newer files) or a SHA1 hash (for older files) for every source file in the repository. The name of the version of the entire source tree is just the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file itself, possibly with the last line of that file omitted if the last line begins with &#34;&lt;code&gt;# Remove this line&lt;/code&gt;&#34;. The &lt;code&gt;manifest.uuid&lt;/code&gt; file should contain the SHA3-256 hash of the &lt;code&gt;manifest&lt;/code&gt; file. If all of the above hash comparisons are correct, then you can be confident that your source tree is authentic and unadulterated.&lt;/p&gt; &#xA;&lt;p&gt;The format of the &lt;code&gt;manifest&lt;/code&gt; file should be mostly self-explanatory, but if you want details, they are available &lt;a href=&#34;https://fossil-scm.org/fossil/doc/trunk/www/fileformat.wiki#manifest&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;p&gt;The main SQLite website is &lt;a href=&#34;http://www.sqlite.org/&#34;&gt;http://www.sqlite.org/&lt;/a&gt; with geographically distributed backups at &lt;a href=&#34;http://www2.sqlite.org&#34;&gt;http://www2.sqlite.org/&lt;/a&gt; and &lt;a href=&#34;http://www3.sqlite.org&#34;&gt;http://www3.sqlite.org/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mackstann/tinywm</title>
    <updated>2022-10-28T01:32:03Z</updated>
    <id>tag:github.com,2022-10-28:/mackstann/tinywm</id>
    <link href="https://github.com/mackstann/tinywm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The tiniest window manager.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;TinyWM is written by Nick Welch &lt;a href=&#34;mailto:nick@incise.org&#34;&gt;nick@incise.org&lt;/a&gt; in 2005 &amp;amp; 2011.&lt;/p&gt; &#xA;&lt;p&gt;This software is in the public domain and is provided AS IS, with NO WARRANTY.&lt;/p&gt; &#xA;&lt;p&gt;TinyWM is a ridiculously tiny window manager implemented in nearly as few lines of C as possible, without being obfuscated or entirely useless. It allows you to move, resize, focus (sloppy), and raise windows -- that&#39;s it! TinyWM&#39;s main purpose is to serve as a quick example of some window manager programming basics.&lt;/p&gt; &#xA;&lt;p&gt;Files:&lt;/p&gt; &#xA;&lt;p&gt;Makefile: highly advanced build system tinywm.c: the code annotated.c: same, but with tons of rambling comments about everything tinywm.py: a python version (requires CVS python-xlib due to a bug)&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;p&gt;Focus follows pointer. Alt+Button1, drag: interactive window move Alt+Button3, drag: interactive window resize Alt+F1: raise focused window&lt;/p&gt; &#xA;&lt;p&gt;Misc:&lt;/p&gt; &#xA;&lt;p&gt;Another very small window manager is failsafewm. Originally I started hacking on it, as there was quite a bit of stuff in it that I thought was unneeded. I wound up rewriting it from scratch, with just the bare necessities, and that became TinyWM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://freshmeat.net/projects/failsafewm/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet another small -- but in comparison to TinyWM, big -- window manager is aewm. It&#39;s a good example for learning about writing a window manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  http://www.red-bean.com/~decklin/aewm/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>