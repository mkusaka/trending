<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-30T01:28:25Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>c3lang/c3c</title>
    <updated>2024-07-30T01:28:25Z</updated>
    <id>tag:github.com,2024-07-30:/c3lang/c3c</id>
    <link href="https://github.com/c3lang/c3c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for the C3 language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C3 Language&lt;/h1&gt; &#xA;&lt;p&gt;C3 is a programming language that builds on the syntax and semantics of the C language, with the goal of evolving it while still retaining familiarity for C programmers.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s an evolution, not a revolution: the C-like for programmers who like C.&lt;/p&gt; &#xA;&lt;p&gt;Precompiled binaries for the following operating systems are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows x64 &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/c3lang/c3c/master/#installing-on-windows-with-precompiled-binaries&#34;&gt;install instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Debian x64 &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/c3lang/c3c/master/#installing-on-debian-with-precompiled-binaries&#34;&gt;install instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;MacOS x64 &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/c3lang/c3c/master/#installing-on-mac-with-precompiled-binaries&#34;&gt;install instructions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The manual for C3 can be found at &lt;a href=&#34;http://www.c3-lang.org&#34;&gt;www.c3-lang.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/c3lang/c3c/raw/master/resources/images/vkQuake.png?raw=true&#34; alt=&#34;vkQuake&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to full ABI compatibility with C, it&#39;s possible to mix C and C3 in the same project with no effort. As a demonstration, vkQuake was compiled with a small portion of the code converted to C3 and compiled with the c3c compiler. (The fork can be found at &lt;a href=&#34;https://github.com/c3lang/vkQuake&#34;&gt;https://github.com/c3lang/vkQuake&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Design Principles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Procedural &#34;get things done&#34;-type of language.&lt;/li&gt; &#xA; &lt;li&gt;Try to stay close to C - only change what&#39;s really necessary.&lt;/li&gt; &#xA; &lt;li&gt;C ABI compatibility and excellent C integration.&lt;/li&gt; &#xA; &lt;li&gt;Learning C3 should be easy for a C programmer.&lt;/li&gt; &#xA; &lt;li&gt;Data is inert.&lt;/li&gt; &#xA; &lt;li&gt;Avoid &#34;big ideas&#34; &amp;amp; the &#34;more is better&#34; fallacy.&lt;/li&gt; &#xA; &lt;li&gt;Introduce some higher level conveniences where the value is great.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;C3 owes its inspiration to the &lt;a href=&#34;http://c2lang.org&#34;&gt;C2 language&lt;/a&gt;: to iterate on top of C without trying to be a whole new language.&lt;/p&gt; &#xA;&lt;h3&gt;Example code&lt;/h3&gt; &#xA;&lt;p&gt;The following code shows &lt;a href=&#34;https://c3-lang.org/references/docs/generics/&#34;&gt;generic modules&lt;/a&gt; (more examples can be found at &lt;a href=&#34;https://c3-lang.org/references/docs/examples/&#34;&gt;https://c3-lang.org/references/docs/examples/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;module stack (&amp;lt;Type&amp;gt;);&#xA;// Above: the parameterized type is applied to the entire module.&#xA;&#xA;struct Stack&#xA;{&#xA;    usz capacity;&#xA;    usz size;&#xA;    Type* elems;&#xA;}&#xA;&#xA;// The type methods offers dot syntax calls,&#xA;// so this function can either be called &#xA;// Stack.push(&amp;amp;my_stack, ...) or&#xA;// my_stack.push(...)&#xA;fn void Stack.push(Stack* this, Type element)&#xA;{&#xA;    if (this.capacity == this.size)&#xA;    {&#xA;        this.capacity *= 2;&#xA;&#x9;&#x9;if (this.capacity &amp;lt; 16) this.capacity = 16;&#xA;        this.elems = realloc(this.elems, Type.sizeof * this.capacity);&#xA;    }&#xA;    this.elems[this.size++] = element;&#xA;}&#xA;&#xA;fn Type Stack.pop(Stack* this)&#xA;{&#xA;    assert(this.size &amp;gt; 0);&#xA;    return this.elems[--this.size];&#xA;}&#xA;&#xA;fn bool Stack.empty(Stack* this)&#xA;{&#xA;    return !this.size;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;import stack;&#xA;&#xA;// Define our new types, the first will implicitly create &#xA;// a complete copy of the entire Stack module with &#34;Type&#34; set to &#34;int&#34;&#xA;def IntStack = Stack(&amp;lt;int&amp;gt;);&#xA;// The second creates another copy with &#34;Type&#34; set to &#34;double&#34;&#xA;def DoubleStack = Stack(&amp;lt;double&amp;gt;);&#xA;&#xA;// If we had added &#34;define IntStack2 = Stack(&amp;lt;int&amp;gt;)&#34;&#xA;// no additional copy would have been made (since we already&#xA;// have an parameterization of Stack(&amp;lt;int&amp;gt;)) so it would&#xA;// be same as declaring IntStack2 an alias of IntStack&#xA;&#xA;// Importing an external C function is straightforward&#xA;// here is an example of importing libc&#39;s printf:&#xA;extern fn int printf(char* format, ...);&#xA;&#xA;fn void main()&#xA;{&#xA;    IntStack stack;&#xA;    // Note that C3 uses zero initialization by default&#xA;    // so the above is equivalent to IntStack stack = {};&#xA;    &#xA;    stack.push(1);&#xA;    // The above can also be written IntStack.push(&amp;amp;stack, 1); &#xA;    &#xA;    stack.push(2);&#xA;    &#xA;    // Prints pop: 2&#xA;    printf(&#34;pop: %d\n&#34;, stack.pop());&#xA;    // Prints pop: 1&#xA;    printf(&#34;pop: %d\n&#34;, stack.pop());&#xA;    &#xA;    DoubleStack dstack;&#xA;    dstack.push(2.3);&#xA;    dstack.push(3.141);&#xA;    dstack.push(1.1235);&#xA;    // Prints pop: 1.123500&#xA;    printf(&#34;pop: %f\n&#34;, dstack.pop());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In what ways does C3 differ from C?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No mandatory header files&lt;/li&gt; &#xA; &lt;li&gt;New semantic macro system&lt;/li&gt; &#xA; &lt;li&gt;Module based name spacing&lt;/li&gt; &#xA; &lt;li&gt;Slices&lt;/li&gt; &#xA; &lt;li&gt;Compile time reflection&lt;/li&gt; &#xA; &lt;li&gt;Enhanced compile time execution&lt;/li&gt; &#xA; &lt;li&gt;Generics based on generic modules&lt;/li&gt; &#xA; &lt;li&gt;&#34;Result&#34;-based zero overhead error handling&lt;/li&gt; &#xA; &lt;li&gt;Defer&lt;/li&gt; &#xA; &lt;li&gt;Value methods&lt;/li&gt; &#xA; &lt;li&gt;Associated enum data&lt;/li&gt; &#xA; &lt;li&gt;No preprocessor&lt;/li&gt; &#xA; &lt;li&gt;Less undefined behaviour and added runtime checks in &#34;safe&#34; mode&lt;/li&gt; &#xA; &lt;li&gt;Limited operator overloading to enable userland dynamic arrays&lt;/li&gt; &#xA; &lt;li&gt;Optional pre and post conditions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current status&lt;/h3&gt; &#xA;&lt;p&gt;The current stable version of the compiler is &lt;strong&gt;version 0.5&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The upcoming 0.6 release will focus on expanding the standard library. Follow the issues &lt;a href=&#34;https://github.com/c3lang/c3c/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have suggestions on how to improve the language, either &lt;a href=&#34;https://github.com/c3lang/c3c/issues&#34;&gt;file an issue&lt;/a&gt; or discuss C3 on its dedicated Discord: &lt;a href=&#34;https://discord.gg/qN76R87&#34;&gt;https://discord.gg/qN76R87&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The compiler is currently verified to compile on Linux, Windows and MacOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Support matrix&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Native C3 compiler available?&lt;/th&gt; &#xA;   &lt;th&gt;Target supported&lt;/th&gt; &#xA;   &lt;th&gt;Stack trace&lt;/th&gt; &#xA;   &lt;th&gt;Threads&lt;/th&gt; &#xA;   &lt;th&gt;Sockets&lt;/th&gt; &#xA;   &lt;th&gt;Inline asm&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Win32 x64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes + cross compilation&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Win32 Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS x64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes + cross compilation&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes + cross compilation&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux x86&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux x64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Riscv32&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Riscv64&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding x86&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding x64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding Aarch64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding Riscv64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ELF freestanding Riscv32&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD x86&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NetBSD x86&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NetBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD x86&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD x64&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCU x86&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wasm32&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wasm64&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Untested&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;* Inline asm is still a work in progress&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;More platforms will be supported in the future.&lt;/p&gt; &#xA;&lt;h4&gt;What can you help with?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you wish to contribute with ideas, please file issues or discuss on Discord.&lt;/li&gt; &#xA; &lt;li&gt;Interested in contributing to the stdlib? Please get in touch on Discord.&lt;/li&gt; &#xA; &lt;li&gt;Compilation instructions for other Linux and Unix variants are appreciated.&lt;/li&gt; &#xA; &lt;li&gt;Would you like to contribute bindings to some library? It would be nice to have support for SDL, Raylib and more.&lt;/li&gt; &#xA; &lt;li&gt;Build something with C3 and show it off and give feedback. The language is still open for significant tweaks.&lt;/li&gt; &#xA; &lt;li&gt;Start work on the C -&amp;gt; C3 converter which takes C code and does a &#34;best effort&#34; to translate it to C3. The first version only needs to work on C headers.&lt;/li&gt; &#xA; &lt;li&gt;Do you have some specific area you have deep knowledge of and could help make C3 even better at doing? File or comment on issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;h4&gt;Installing on Windows with precompiled binaries&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the zip file: &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip&#34;&gt;https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip&lt;/a&gt; (debug version &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-windows-debug.zip&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unzip exe and standard lib.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t have Visual Studio 17 installed you can either do so, or run the &lt;code&gt;msvc_build_libraries.py&lt;/code&gt; Python script which will download the necessary files to compile on Windows.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;c3c.exe&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Installing on Debian with precompiled binaries&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download tar file: &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz&#34;&gt;https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz&lt;/a&gt; (debug version &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-linux-debug.tar.gz&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unpack executable and standard lib.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./c3c&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Installing on Mac with precompiled binaries&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have XCode with command line tools installed.&lt;/li&gt; &#xA; &lt;li&gt;Download the zip file: &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip&#34;&gt;https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip&lt;/a&gt; (debug version &lt;a href=&#34;https://github.com/c3lang/c3c/releases/download/latest/c3-macos-debug.zip&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unzip executable and standard lib.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./c3c&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(*Note that there is a known issue with debug symbol generation on MacOS 13, see issue #1086)&lt;/p&gt; &#xA;&lt;h4&gt;Installing on Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;There is an AUR package for the c3c compiler : &lt;a href=&#34;https://aur.archlinux.org/packages/c3c-git&#34;&gt;c3c-git&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Due to some issues with the LLVM packaged for Arch Linux, the AUR package will download and use LLVM 16 for Ubuntu-23.04 to compile the c3c compiler.&lt;/p&gt; &#xA;&lt;p&gt;You can use your AUR package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S c3c-git&#xA;# or yay -S c3c-git&#xA;# or aura -A c3c-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or clone it manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://aur.archlinux.org/c3c-git.git&#xA;cd c3c-git&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building via Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can build &lt;code&gt;c3c&lt;/code&gt; using either an Ubuntu 18.04 or 20.04 container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build-with-docker.sh 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;18&lt;/code&gt; with &lt;code&gt;20&lt;/code&gt; to build through Ubuntu 20.04.&lt;/p&gt; &#xA;&lt;p&gt;For a release build specify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build-with-docker.sh 20 Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;c3c&lt;/code&gt; executable will be found under &lt;code&gt;bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Installing on OS X using Homebrew&lt;/h4&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install CMake: &lt;code&gt;brew install cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install LLVM 15: &lt;code&gt;brew install llvm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the build directory &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up CMake build for debug: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Getting started with a &#34;hello world&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;main.c3&lt;/code&gt; file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;module hello_world;&#xA;import std::io;&#xA;&#xA;fn void main()&#xA;{&#xA;   io::printn(&#34;Hello, world!&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have the standard libraries at either &lt;code&gt;../lib/std/&lt;/code&gt; or &lt;code&gt;/lib/std/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;c3c compile main.c3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated binary will by default be named after the module that contains the main function. In our case that is &lt;code&gt;hello_world&lt;/code&gt;, so the resulting binary will be called &lt;code&gt;hello_world&lt;/code&gt; or &lt;code&gt;hello_world.exe&lt;/code&gt;depending on platform.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;h4&gt;Compiling on Windows&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have Visual Studio 17 2022 installed or alternatively install the &#34;Buildtools for Visual Studio&#34; (&lt;a href=&#34;https://aka.ms/vs/17/release/vs_BuildTools.exe&#34;&gt;https://aka.ms/vs/17/release/vs_BuildTools.exe&lt;/a&gt;) and then select &#34;Desktop development with C++&#34; (there is also &lt;code&gt;c3c/resources/install_win_reqs.bat&lt;/code&gt; to automate this)&lt;/li&gt; &#xA; &lt;li&gt;Install CMake&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set up the CMake build &lt;code&gt;cmake -B build -G &#34;Visual Studio 17 2022&#34; -A x64 -DCMAKE_BUILD_TYPE=Release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build build --config Release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should now have the c3c.exe&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should now have a &lt;code&gt;c3c&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;You can try it out by running some sample code: &lt;code&gt;c3c.exe compile ../resources/examples/hash.c3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that if you run into linking issues when building, make sure that you are using the latest version of VS17.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compiling on Ubuntu 20.10&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have a C compiler that handles C11 and a C++ compiler, such as GCC or Clang. Git also needs to be installed.&lt;/li&gt; &#xA; &lt;li&gt;Install CMake: &lt;code&gt;sudo apt install cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install LLVM 15 (or greater: C3C supports LLVM 15-17): &lt;code&gt;sudo apt-get install clang-15 zlib1g zlib1g-dev libllvm15 llvm-15 llvm-15-dev llvm-15-runtime liblld-15-dev liblld-15&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the build directory &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up CMake build: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should now have a &lt;code&gt;c3c&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;You can try it out by running some sample code: &lt;code&gt;./c3c compile ../resources/examples/hash.c3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compiling on Void Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;As root, ensure that all project dependencies are installed: &lt;code&gt;xbps-install git cmake llvm15 lld-devel libcurl-devel ncurses-devel zlib-devel libzstd-devel libxml2-devel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you only need the latest commit, you may want to make a shallow clone instead: &lt;code&gt;git clone https://github.com/c3lang/c3c.git --depth=1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enter the directory: &lt;code&gt;cd c3c&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory: &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the build directory: &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create the CMake build cache: &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Your c3c executable should have compiled properly. You may want to test it: &lt;code&gt;./c3c compile ../resources/examples/hash.c3&lt;/code&gt;&lt;br&gt; For a sytem-wide installation, run the following as root: &lt;code&gt;cmake --install .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compiling on other Linux / Unix variants&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install CMake.&lt;/li&gt; &#xA; &lt;li&gt;Install or compile LLVM and LLD &lt;em&gt;libraries&lt;/em&gt; (version 15+ or higher)&lt;/li&gt; &#xA; &lt;li&gt;Clone the C3C github repository: &lt;code&gt;git clone https://github.com/c3lang/c3c.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the C3C directory &lt;code&gt;cd c3c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory &lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the build directory &lt;code&gt;cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up CMake build for debug: &lt;code&gt;cmake ..&lt;/code&gt;. At this point you may need to manually provide the link path to the LLVM CMake directories, e.g. &lt;code&gt;cmake -DLLVM_DIR=/usr/local/opt/llvm/lib/cmake/llvm/ ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;cmake --build .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;A note on compiling for Linux/Unix/MacOS: to be able to fetch vendor libraries libcurl is needed. The CMake script should detect it if it is available. Note that this functionality is non-essential and it is perfectly fine to user the compiler without it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Licensing&lt;/h4&gt; &#xA;&lt;p&gt;The C3 compiler is licensed under LGPL 3.0, the standard library itself is MIT licensed.&lt;/p&gt; &#xA;&lt;h4&gt;Editor plugins&lt;/h4&gt; &#xA;&lt;p&gt;Editor plugins can be found at &lt;a href=&#34;https://github.com/c3lang/editor-plugins&#34;&gt;https://github.com/c3lang/editor-plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Contributing unit tests&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write the test, either adding to existing test files in &lt;code&gt;/test/unit/&lt;/code&gt; or add a new file. (If testing the standard library, put it in the &lt;code&gt;/test/unit/stdlib/&lt;/code&gt; subdirectory).&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the test functions have the &lt;code&gt;@test&lt;/code&gt; attribute.&lt;/li&gt; &#xA; &lt;li&gt;Run tests and see that they pass. (Recommended settings: &lt;code&gt;c3c compile-test -O0 test/unit&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;in this example &lt;code&gt;test/unit/&lt;/code&gt; is the relative path to the test directory, so adjust as required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make a pull request for the new tests.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>