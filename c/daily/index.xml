<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:34:38Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jemalloc/jemalloc</title>
    <updated>2022-07-20T01:34:38Z</updated>
    <id>tag:github.com,2022-07-20:/jemalloc/jemalloc</id>
    <link href="https://github.com/jemalloc/jemalloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;jemalloc is a general purpose malloc(3) implementation that emphasizes fragmentation avoidance and scalable concurrency support. jemalloc first came into use as the FreeBSD libc allocator in 2005, and since then it has found its way into numerous applications that rely on its predictable behavior. In 2010 jemalloc development efforts broadened to include developer support features such as heap profiling and extensive monitoring/tuning hooks. Modern jemalloc releases continue to be integrated back into FreeBSD, and therefore versatility remains critical. Ongoing development efforts trend toward making jemalloc among the best allocators for a broad range of demanding applications, and eliminating/mitigating weaknesses that have practical repercussions for real world applications.&lt;/p&gt; &#xA;&lt;p&gt;The COPYING file contains copyright and licensing information.&lt;/p&gt; &#xA;&lt;p&gt;The INSTALL file contains information on how to configure, build, and install jemalloc.&lt;/p&gt; &#xA;&lt;p&gt;The ChangeLog file contains a brief summary of changes for each release.&lt;/p&gt; &#xA;&lt;p&gt;URL: &lt;a href=&#34;http://jemalloc.net/&#34;&gt;http://jemalloc.net/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cyan4973/xxHash</title>
    <updated>2022-07-20T01:34:38Z</updated>
    <id>tag:github.com,2022-07-20:/Cyan4973/xxHash</id>
    <link href="https://github.com/Cyan4973/xxHash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extremely fast non-cryptographic hash algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xxHash - Extremely fast hash algorithm&lt;/h1&gt; &#xA;&lt;p&gt;xxHash is an Extremely fast Hash algorithm, running at RAM speed limits. It successfully completes the &lt;a href=&#34;https://code.google.com/p/smhasher/wiki/SMHasher&#34;&gt;SMHasher&lt;/a&gt; test suite which evaluates collision, dispersion and randomness qualities of hash functions. Code is highly portable, and hashes are identical across all platforms (little / big endian).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Cyan4973/xxHash/actions?query=branch%3Arelease+&#34;&gt;&lt;img src=&#34;https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=release&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dev&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Cyan4973/xxHash/actions?query=branch%3Adev+&#34;&gt;&lt;img src=&#34;https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The reference system uses an Intel i7-9700K cpu, and runs Ubuntu x64 20.04. The &lt;a href=&#34;https://github.com/Cyan4973/xxHash/tree/release/tests/bench&#34;&gt;open source benchmark program&lt;/a&gt; is compiled with &lt;code&gt;clang&lt;/code&gt; v10.0 using &lt;code&gt;-O3&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hash Name&lt;/th&gt; &#xA;   &lt;th&gt;Width&lt;/th&gt; &#xA;   &lt;th&gt;Bandwidth (GB/s)&lt;/th&gt; &#xA;   &lt;th&gt;Small Data Velocity&lt;/th&gt; &#xA;   &lt;th&gt;Quality&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH3&lt;/strong&gt; (SSE2)&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;31.5 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;133.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH128&lt;/strong&gt; (SSE2)&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;29.6 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;118.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;RAM sequential read&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;28.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;for reference&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;City64&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;22.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;76.6&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T1ha2&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;22.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;99.0&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Slightly worse &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study&#34;&gt;collisions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;City128&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;21.7 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;57.7&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH64&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;19.4 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;71.0&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SpookyHash&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;19.3 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;53.2&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mum&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;18.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;67.0&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Slightly worse &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study&#34;&gt;collisions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH32&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;9.7 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;71.9&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;City32&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;9.1 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;66.0&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Murmur3&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;3.9 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;56.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SipHash&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;3.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;43.2&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FNV64&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;1.2 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;62.7&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Poor avalanche properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blake2&lt;/td&gt; &#xA;   &lt;td&gt;256&lt;/td&gt; &#xA;   &lt;td&gt;1.1 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;5.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SHA1&lt;/td&gt; &#xA;   &lt;td&gt;160&lt;/td&gt; &#xA;   &lt;td&gt;0.8 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;5.6&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic but broken&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MD5&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;0.6 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;7.8&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic but broken&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;note 1: Small data velocity is a &lt;em&gt;rough&lt;/em&gt; evaluation of algorithm&#39;s efficiency on small data. For more detailed analysis, please refer to next paragraph.&lt;/p&gt; &#xA;&lt;p&gt;note 2: some algorithms feature &lt;em&gt;faster than RAM&lt;/em&gt; speed. In which case, they can only reach their full speed when input data is already in CPU cache (L3 or better). Otherwise, they max out on RAM speed limit.&lt;/p&gt; &#xA;&lt;h3&gt;Small data&lt;/h3&gt; &#xA;&lt;p&gt;Performance on large data is only one part of the picture. Hashing is also very useful in constructions like hash tables and bloom filters. In these use cases, it&#39;s frequent to hash a lot of small data (starting at a few bytes). Algorithm&#39;s performance can be very different for such scenarios, since parts of the algorithm, such as initialization or finalization, become fixed cost. The impact of branch mis-prediction also becomes much more present.&lt;/p&gt; &#xA;&lt;p&gt;XXH3 has been designed for excellent performance on both long and small inputs, which can be observed in the following graph:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/750081/61976089-aedeab00-af9f-11e9-9239-e5375d6c080f.png&#34; alt=&#34;XXH3, latency, random size&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more detailed analysis, visit the wiki : &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-&#34;&gt;https://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quality&lt;/h2&gt; &#xA;&lt;p&gt;Speed is not the only property that matters. Produced hash values must respect excellent dispersion and randomness properties, so that any sub-section of it can be used to maximally spread out a table or index, as well as reduce the amount of collisions to the minimal theoretical level, following the &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_problem&#34;&gt;birthday paradox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xxHash&lt;/code&gt; has been tested with Austin Appleby&#39;s excellent SMHasher test suite, and passes all tests, ensuring reasonable quality levels. It also passes extended tests from &lt;a href=&#34;https://github.com/rurban/smhasher&#34;&gt;newer forks of SMHasher&lt;/a&gt;, featuring additional scenarios and conditions.&lt;/p&gt; &#xA;&lt;p&gt;Finally, xxHash provides its own &lt;a href=&#34;https://github.com/Cyan4973/xxHash/tree/dev/tests/collisions&#34;&gt;massive collision tester&lt;/a&gt;, able to generate and compare billions of hashes to test the limits of 64-bit hash algorithms. On this front too, xxHash features good results, in line with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_problem&#34;&gt;birthday paradox&lt;/a&gt;. A more detailed analysis is documented &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison&#34;&gt;in the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build modifiers&lt;/h3&gt; &#xA;&lt;p&gt;The following macros can be set at compilation time to modify libxxhash&#39;s behavior. They are generally disabled by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_INLINE_ALL&lt;/code&gt;: Make all functions &lt;code&gt;inline&lt;/code&gt;, with implementations being directly included within &lt;code&gt;xxhash.h&lt;/code&gt;. Inlining functions is beneficial for speed on small keys. It&#39;s &lt;em&gt;extremely effective&lt;/em&gt; when key length is expressed as &lt;em&gt;a compile time constant&lt;/em&gt;, with performance improvements observed in the +200% range . See &lt;a href=&#34;https://fastcompression.blogspot.com/2018/03/xxhash-for-small-keys-impressive-power.html&#34;&gt;this article&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_PRIVATE_API&lt;/code&gt;: same outcome as &lt;code&gt;XXH_INLINE_ALL&lt;/code&gt;. Still available for legacy support. The name underlines that &lt;code&gt;XXH_*&lt;/code&gt; symbols will not be exported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NAMESPACE&lt;/code&gt;: Prefixes all symbols with the value of &lt;code&gt;XXH_NAMESPACE&lt;/code&gt;. This macro can only use compilable character set. Useful to evade symbol naming collisions, in case of multiple inclusions of xxHash&#39;s source code. Client applications still use the regular function names, as symbols are automatically translated through &lt;code&gt;xxhash.h&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_FORCE_MEMORY_ACCESS&lt;/code&gt;: The default method &lt;code&gt;0&lt;/code&gt; uses a portable &lt;code&gt;memcpy()&lt;/code&gt; notation. Method &lt;code&gt;1&lt;/code&gt; uses a gcc-specific &lt;code&gt;packed&lt;/code&gt; attribute, which can provide better performance for some targets. Method &lt;code&gt;2&lt;/code&gt; forces unaligned reads, which is not standards compliant, but might sometimes be the only way to extract better read performance. Method &lt;code&gt;3&lt;/code&gt; uses a byteshift operation, which is best for old compilers which don&#39;t inline &lt;code&gt;memcpy()&lt;/code&gt; or big-endian systems without a byteswap instruction&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_FORCE_ALIGN_CHECK&lt;/code&gt;: Use a faster direct read path when input is aligned. This option can result in dramatic performance improvement when input to hash is aligned on 32 or 64-bit boundaries, when running on architectures unable to load memory from unaligned addresses, or suffering a performance penalty from it. It is (slightly) detrimental on platform with good unaligned memory access performance (same instruction for both aligned and unaligned accesses). This option is automatically disabled on &lt;code&gt;x86&lt;/code&gt;, &lt;code&gt;x64&lt;/code&gt; and &lt;code&gt;aarch64&lt;/code&gt;, and enabled on all other platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_VECTOR&lt;/code&gt; : manually select a vector instruction set (default: auto-selected at compilation time). Available instruction sets are &lt;code&gt;XXH_SCALAR&lt;/code&gt;, &lt;code&gt;XXH_SSE2&lt;/code&gt;, &lt;code&gt;XXH_AVX2&lt;/code&gt;, &lt;code&gt;XXH_AVX512&lt;/code&gt;, &lt;code&gt;XXH_NEON&lt;/code&gt; and &lt;code&gt;XXH_VSX&lt;/code&gt;. Compiler may require additional flags to ensure proper support (for example, &lt;code&gt;gcc&lt;/code&gt; on linux will require &lt;code&gt;-mavx2&lt;/code&gt; for AVX2, and &lt;code&gt;-mavx512f&lt;/code&gt; for AVX512).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_PREFETCH&lt;/code&gt; : disable prefetching. Some platforms or situations may perform better without prefetching. XXH3 only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_PREFETCH_DIST&lt;/code&gt; : select prefetching distance. For close-to-metal adaptation to specific hardware platforms. XXH3 only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_STREAM&lt;/code&gt;: Disables the streaming API, limiting it to single shot variants only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_SIZE_OPT&lt;/code&gt;: &lt;code&gt;0&lt;/code&gt;: default, optimize for speed &lt;code&gt;1&lt;/code&gt;: default for &lt;code&gt;-Os&lt;/code&gt; and &lt;code&gt;-Oz&lt;/code&gt;: disables some speed hacks for size optimization &lt;code&gt;2&lt;/code&gt;: makes code as small as possible, performance may cry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_INLINE_HINTS&lt;/code&gt;: By default, xxHash uses &lt;code&gt;__attribute__((always_inline))&lt;/code&gt; and &lt;code&gt;__forceinline&lt;/code&gt; to improve performance at the cost of code size. Defining this macro to 1 will mark all internal functions as &lt;code&gt;static&lt;/code&gt;, allowing the compiler to decide whether to inline a function or not. This is very useful when optimizing for smallest binary size, and is automatically defined when compiling with &lt;code&gt;-O0&lt;/code&gt;, &lt;code&gt;-Os&lt;/code&gt;, &lt;code&gt;-Oz&lt;/code&gt;, or &lt;code&gt;-fno-inline&lt;/code&gt; on GCC and Clang. This may also increase performance depending on compiler and architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH32_ENDJMP&lt;/code&gt;: Switch multi-branch finalization stage of XXH32 by a single jump. This is generally undesirable for performance, especially when hashing inputs of random sizes. But depending on exact architecture and compiler, a jump might provide slightly better performance on small inputs. Disabled by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_STDLIB&lt;/code&gt;: Disable invocation of &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; functions, notably &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt;. &lt;code&gt;libxxhash&lt;/code&gt;&#39;s &lt;code&gt;XXH*_createState()&lt;/code&gt; will always fail and return &lt;code&gt;NULL&lt;/code&gt;. But one-shot hashing (like &lt;code&gt;XXH32()&lt;/code&gt;) or streaming using statically allocated states still work as expected. This build flag is useful for embedded environments without dynamic allocation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_STATIC_LINKING_ONLY&lt;/code&gt;: gives access to internal state declaration, required for static allocation. Incompatible with dynamic linking, due to risks of ABI changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_XXH3&lt;/code&gt; : removes symbols related to &lt;code&gt;XXH3&lt;/code&gt; (both 64 &amp;amp; 128 bits) from generated binary. Useful to reduce binary size, notably for applications which do not use &lt;code&gt;XXH3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_LONG_LONG&lt;/code&gt;: removes compilation of algorithms relying on 64-bit types (XXH3 and XXH64). Only XXH32 will be compiled. Useful for targets (architectures and compilers) without 64-bit support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_IMPORT&lt;/code&gt;: MSVC specific: should only be defined for dynamic linking, as it prevents linkage errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_CPU_LITTLE_ENDIAN&lt;/code&gt;: By default, endianness is determined by a runtime test resolved at compile time. If, for some reason, the compiler cannot simplify the runtime test, it can cost performance. It&#39;s possible to skip auto-detection and simply state that the architecture is little-endian by setting this macro to 1. Setting it to 0 states big-endian.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_DEBUGLEVEL&lt;/code&gt; : When set to any value &amp;gt;= 1, enables &lt;code&gt;assert()&lt;/code&gt; statements. This (slightly) slows down execution, but may help finding bugs during debugging sessions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When compiling the Command Line Interface &lt;code&gt;xxhsum&lt;/code&gt; with &lt;code&gt;make&lt;/code&gt;, the following environment variables can also be set :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DISPATCH=1&lt;/code&gt; : use &lt;code&gt;xxh_x86dispatch.c&lt;/code&gt;, to automatically select between &lt;code&gt;scalar&lt;/code&gt;, &lt;code&gt;sse2&lt;/code&gt;, &lt;code&gt;avx2&lt;/code&gt; or &lt;code&gt;avx512&lt;/code&gt; instruction set at runtime, depending on local host. This option is only valid for &lt;code&gt;x86&lt;/code&gt;/&lt;code&gt;x64&lt;/code&gt; systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building xxHash - Using vcpkg&lt;/h3&gt; &#xA;&lt;p&gt;You can download and install xxHash using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install xxhash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The xxHash port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Building and Using xxHash - tipi.build&lt;/h3&gt; &#xA;&lt;p&gt;You can work on xxHash and depend on it in your &lt;a href=&#34;https://tipi.build&#34;&gt;tipi.build&lt;/a&gt; projects by adding the following entry to your &lt;code&gt;.tipi/deps&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;Cyan4973/xxHash&#34;: { &#34;@&#34;: &#34;v0.8.1&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example of such usage can be found in the &lt;code&gt;/cli&lt;/code&gt; folder of this project which, if built as root project will depend on the release &lt;code&gt;v0.8.1&lt;/code&gt; of xxHash&lt;/p&gt; &#xA;&lt;p&gt;To contribute to xxHash itself use tipi.build on this repository (change the target name appropriately to &lt;code&gt;linux&lt;/code&gt; or &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;windows&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tipi . -t &amp;lt;target&amp;gt; --test all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;The simplest example calls xxhash 64-bit variant as a one-shot function generating a hash value from a single buffer, and invoked from a C/C++ program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &#34;xxhash.h&#34;&#xA;&#xA;    (...)&#xA;    XXH64_hash_t hash = XXH64(buffer, size, seed);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Streaming variant is more involved, but makes it possible to provide data incrementally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &#34;stdlib.h&#34;   /* abort() */&#xA;#include &#34;xxhash.h&#34;&#xA;&#xA;&#xA;XXH64_hash_t calcul_hash_streaming(FileHandler fh)&#xA;{&#xA;    /* create a hash state */&#xA;    XXH64_state_t* const state = XXH64_createState();&#xA;    if (state==NULL) abort();&#xA;&#xA;    size_t const bufferSize = SOME_SIZE;&#xA;    void* const buffer = malloc(bufferSize);&#xA;    if (buffer==NULL) abort();&#xA;&#xA;    /* Initialize state with selected seed */&#xA;    XXH64_hash_t const seed = 0;   /* or any other value */&#xA;    if (XXH64_reset(state, seed) == XXH_ERROR) abort();&#xA;&#xA;    /* Feed the state with input data, any size, any number of times */&#xA;    (...)&#xA;    while ( /* some data left */ ) {&#xA;        size_t const length = get_more_data(buffer, bufferSize, fh);&#xA;        if (XXH64_update(state, buffer, length) == XXH_ERROR) abort();&#xA;        (...)&#xA;    }&#xA;    (...)&#xA;&#xA;    /* Produce the final hash value */&#xA;    XXH64_hash_t const hash = XXH64_digest(state);&#xA;&#xA;    /* State could be re-used; but in this example, it is simply freed  */&#xA;    free(buffer);&#xA;    XXH64_freeState(state);&#xA;&#xA;    return hash;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;The library files &lt;code&gt;xxhash.c&lt;/code&gt; and &lt;code&gt;xxhash.h&lt;/code&gt; are BSD licensed. The utility &lt;code&gt;xxhsum&lt;/code&gt; is GPL licensed.&lt;/p&gt; &#xA;&lt;h3&gt;Other programming languages&lt;/h3&gt; &#xA;&lt;p&gt;Beyond the C reference version, xxHash is also available from many different programming languages, thanks to great contributors. They are &lt;a href=&#34;http://www.xxhash.com/#other-languages&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Packaging status&lt;/h3&gt; &#xA;&lt;p&gt;Many distributions bundle a package manager which allows easy xxhash installation as both a &lt;code&gt;libxxhash&lt;/code&gt; library and &lt;code&gt;xxhsum&lt;/code&gt; command line interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/xxhash/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/xxhash.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Takayuki Matsuoka, aka @t-mat, for creating &lt;code&gt;xxhsum -c&lt;/code&gt; and great support during early xxh releases&lt;/li&gt; &#xA; &lt;li&gt;Mathias Westerdahl, aka @JCash, for introducing the first version of &lt;code&gt;XXH64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Devin Hussey, aka @easyaspi314, for incredible low-level optimizations on &lt;code&gt;XXH3&lt;/code&gt; and &lt;code&gt;XXH128&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>48d31kh413k/1337-Piscine-42</title>
    <updated>2022-07-20T01:34:38Z</updated>
    <id>tag:github.com,2022-07-20:/48d31kh413k/1337-Piscine-42</id>
    <link href="https://github.com/48d31kh413k/1337-Piscine-42" rel="alternate"></link>
    <summary type="html">&lt;p&gt;June Piscine 2021 from 1337 Benguerir 42 Network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;1337&lt;/h1&gt; &#xA;&lt;p&gt;My solutions for the June Piscine 2021. &lt;br&gt; Please open an issue on github if you find anything incorrect.&lt;br&gt; If you have any tips I would like to hear, any feedback is appreciated. Thank you. &lt;br&gt; &lt;code&gt;Don&#39;t Copy, Learn.&lt;/code&gt; &lt;br&gt; &lt;img src=&#34;https://komarev.com/ghpvc/?username=your-github-username&amp;amp;label=Repository+views&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;READ THIS BEFORE YOU PASS THE EXAM &lt;br&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Logging into and setting up an exam&lt;/strong&gt; &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;1-Login with exam / exam at the login screen &lt;br&gt; 2-Open a terminal and type kinit username and your password after the prompt &lt;br&gt; 3-Type examshell in a terminal to begin &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;During the exam&lt;/strong&gt; &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;1-Don&#39;t forget to clean up, comment, remove your testing code execs, and libraries prior to submission &lt;br&gt; 2-Don&#39;t forget to push your code regularly in the rendu/&#xA; &lt;test question&gt;&#xA;   directory to vogsphere before typing grademe and y in the examshell terminal &#xA;  &lt;br&gt; 3-Read through all of the subjects and examples again before final submission &#xA;  &lt;br&gt;&#xA; &lt;/test&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Before Exams&lt;/strong&gt; &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;1- You should Learn Functions Loops Condition Arrays Strings before exam 00 &lt;br&gt; 2- You should Learn argc &amp;amp; argv &amp;amp; malloc and free before exam01/exam02 &lt;br&gt; 3- You Should Learn Makefile Library Header Pointers-Functions before final exam &lt;br&gt; &lt;strong&gt;You need 25 points to validate any exam&lt;/strong&gt; &lt;br&gt; &lt;strong&gt;You need 50 points to validate the days except rushes and bsq and C09 and C10 which it need 100%&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Piscine tips &lt;br&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week1:&lt;/strong&gt; Shell00, Shell01, C00, C01 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-don&#39;t waste your time on shell01 project, you must learn language C and work on C00 and C01, because the exam is on c Language. &lt;br&gt; -validate Shell01 on weekend and work on this rush because is so easy. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week2:&lt;/strong&gt; C02, C03, C04, C06 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-it&#39;s better to validate C06 before C05, because the exam01 is on argc &amp;amp; argv. &lt;br&gt; -Dont waste your time on rush01, it&#39;s better to work on your days and prepare for exam on weekends and know your mistakes that you made on the previous exams. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week3:&lt;/strong&gt; C05, C07, C08, C09 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-try to improve your code skills and your algorithms. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Week4:&lt;/strong&gt; C11 &lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;-don&#39;t waste your time on rush02 and BSQ and C10, it&#39;s better to validate the previous days with 100% and prepare for the final exam. &lt;br&gt; for more tips: &lt;a href=&#34;https://www.42.us.org/top-21-tips-surviving-42-piscine-basic-training/&#34;&gt;https://www.42.us.org/top-21-tips-surviving-42-piscine-basic-training/&lt;/a&gt; &lt;br&gt; &lt;code&gt;SLEEP WELL + EAT WELL = LIVE WELL + SUCCESS&lt;/code&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Content&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Projects&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Solutions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shell00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/Shell00&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shell01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/Shell01&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C00&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C01&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C02&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C03&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C04&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C05&#34;&gt;80%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C06&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C07&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C08&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C09&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C10&#34;&gt;not rated&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C11&#34;&gt;100%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C12&#34;&gt;not rated&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/C13&#34;&gt;not rated&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM01&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM00&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM02&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exam03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/EXAM03&#34;&gt;solution&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rush01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rush00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/48d31kh413k/1337-Piscine-42/main/Rush00&#34;&gt;120%&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rush02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BSQ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;Enjoy coding and GOOD LUCK in your piscine.&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>