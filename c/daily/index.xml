<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:30:30Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>webmproject/libvpx</title>
    <updated>2023-10-01T01:30:30Z</updated>
    <id>tag:github.com,2023-10-01:/webmproject/libvpx</id>
    <link href="https://github.com/webmproject/libvpx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror only. Please do not send pull requests.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;v1.13.0 Ugly Duckling&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the WebM VP8/VP9 Codec SDK!&lt;/p&gt; &#xA;&lt;p&gt;COMPILING THE APPLICATIONS/LIBRARIES: The build system used is similar to autotools. Building generally consists of &#34;configuring&#34; with your desired build options, then using GNU make to build the application.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prerequisites&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;* All x86 targets require the Yasm[1] assembler be installed[2].&#xA;* All Windows builds require that Cygwin[3] or MSYS2[4] be installed.&#xA;* Building the documentation requires Doxygen[5]. If you do not&#xA;  have this package, the install-docs option will be disabled.&#xA;* Downloading the data for the unit tests requires curl[6] and sha1sum.&#xA;  sha1sum is provided via the GNU coreutils, installed by default on&#xA;  many *nix platforms, as well as MinGW and Cygwin. If coreutils is not&#xA;  available, a compatible version of sha1sum can be built from&#xA;  source[7]. These requirements are optional if not running the unit&#xA;  tests.&#xA;&#xA;[1]: http://www.tortall.net/projects/yasm&#xA;[2]: For Visual Studio the base yasm binary (not vsyasm) should be in the&#xA;     PATH for Visual Studio. For VS2017 it is sufficient to rename&#xA;     yasm-&amp;lt;version&amp;gt;-&amp;lt;arch&amp;gt;.exe to yasm.exe and place it in:&#xA;     Program Files (x86)/Microsoft Visual Studio/2017/&amp;lt;level&amp;gt;/Common7/Tools/&#xA;[3]: http://www.cygwin.com&#xA;[4]: http://www.msys2.org/&#xA;[5]: http://www.doxygen.org&#xA;[6]: http://curl.haxx.se&#xA;[7]: http://www.microbrew.org/tools/md5sha1sum/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Out-of-tree builds Out of tree builds are a supported method of building the application. For an out of tree build, the source tree is kept separate from the object files produced during compilation. For instance:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build&#xA;$ cd build&#xA;$ ../libvpx/configure &amp;lt;options&amp;gt;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration options The &#39;configure&#39; script supports a number of options. The --help option can be used to get a list of supported options: $ ../libvpx/configure --help&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compiler analyzers Compilers have added sanitizers which instrument binaries with information about address calculation, memory usage, threading, undefined behavior, and other common errors. To simplify building libvpx with some of these features use tools/set_analyzer_env.sh before running configure. It will set the compiler and necessary flags for building as well as environment variables read by the analyzer when testing the binaries. $ source ../libvpx/tools/set_analyzer_env.sh address&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross development For cross development, the most notable option is the --target option. The most up-to-date list of supported targets can be found at the bottom of the --help output of the configure script. As of this writing, the list of available targets is:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;arm64-android-gcc&#xA;arm64-darwin-gcc&#xA;arm64-darwin20-gcc&#xA;arm64-darwin21-gcc&#xA;arm64-darwin22-gcc&#xA;arm64-linux-gcc&#xA;arm64-win64-gcc&#xA;arm64-win64-vs15&#xA;arm64-win64-vs16&#xA;arm64-win64-vs16-clangcl&#xA;arm64-win64-vs17&#xA;arm64-win64-vs17-clangcl&#xA;armv7-android-gcc&#xA;armv7-darwin-gcc&#xA;armv7-linux-rvct&#xA;armv7-linux-gcc&#xA;armv7-none-rvct&#xA;armv7-win32-gcc&#xA;armv7-win32-vs14&#xA;armv7-win32-vs15&#xA;armv7s-darwin-gcc&#xA;armv8-linux-gcc&#xA;loongarch32-linux-gcc&#xA;loongarch64-linux-gcc&#xA;mips32-linux-gcc&#xA;mips64-linux-gcc&#xA;ppc64le-linux-gcc&#xA;sparc-solaris-gcc&#xA;x86-android-gcc&#xA;x86-darwin8-gcc&#xA;x86-darwin8-icc&#xA;x86-darwin9-gcc&#xA;x86-darwin9-icc&#xA;x86-darwin10-gcc&#xA;x86-darwin11-gcc&#xA;x86-darwin12-gcc&#xA;x86-darwin13-gcc&#xA;x86-darwin14-gcc&#xA;x86-darwin15-gcc&#xA;x86-darwin16-gcc&#xA;x86-darwin17-gcc&#xA;x86-iphonesimulator-gcc&#xA;x86-linux-gcc&#xA;x86-linux-icc&#xA;x86-os2-gcc&#xA;x86-solaris-gcc&#xA;x86-win32-gcc&#xA;x86-win32-vs14&#xA;x86-win32-vs15&#xA;x86-win32-vs16&#xA;x86-win32-vs17&#xA;x86_64-android-gcc&#xA;x86_64-darwin9-gcc&#xA;x86_64-darwin10-gcc&#xA;x86_64-darwin11-gcc&#xA;x86_64-darwin12-gcc&#xA;x86_64-darwin13-gcc&#xA;x86_64-darwin14-gcc&#xA;x86_64-darwin15-gcc&#xA;x86_64-darwin16-gcc&#xA;x86_64-darwin17-gcc&#xA;x86_64-darwin18-gcc&#xA;x86_64-darwin19-gcc&#xA;x86_64-darwin20-gcc&#xA;x86_64-darwin21-gcc&#xA;x86_64-darwin22-gcc&#xA;x86_64-iphonesimulator-gcc&#xA;x86_64-linux-gcc&#xA;x86_64-linux-icc&#xA;x86_64-solaris-gcc&#xA;x86_64-win64-gcc&#xA;x86_64-win64-vs14&#xA;x86_64-win64-vs15&#xA;x86_64-win64-vs16&#xA;x86_64-win64-vs17&#xA;generic-gnu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generic-gnu target, in conjunction with the CROSS environment variable, can be used to cross compile architectures that aren&#39;t explicitly listed, if the toolchain is a cross GNU (gcc/binutils) toolchain. Other POSIX toolchains will likely work as well. For instance, to build using the mipsel-linux-uclibc toolchain, the following command could be used (note, POSIX SH syntax, adapt to your shell as necessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ CROSS=mipsel-linux-uclibc- ../libvpx/configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, the executables to be invoked can be overridden by specifying the environment variables: CC, AR, LD, AS, STRIP, NM. Additional flags can be passed to these executables with CFLAGS, LDFLAGS, and ASFLAGS.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Configuration errors If the configuration step fails, the first step is to look in the error log. This defaults to config.log. This should give a good indication of what went wrong. If not, contact us for support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;VP8/VP9 TEST VECTORS: The test vectors can be downloaded and verified using the build system after running configure. To specify an alternate directory the LIBVPX_TEST_DATA_PATH environment variable can be used.&lt;/p&gt; &#xA;&lt;p&gt;$ ./configure --enable-unit-tests $ LIBVPX_TEST_DATA_PATH=../libvpx-test-data make testdata&lt;/p&gt; &#xA;&lt;p&gt;CODE STYLE: The coding style used by this project is enforced with clang-format using the configuration contained in the .clang-format file in the root of the repository.&lt;/p&gt; &#xA;&lt;p&gt;Before pushing changes for review you can format your code with:&lt;/p&gt; &#xA;&lt;h1&gt;Apply clang-format to modified .c, .h and .cc files&lt;/h1&gt; &#xA;&lt;p&gt;$ clang-format -i --style=file &lt;br&gt; $(git diff --name-only --diff-filter=ACMR &#39;&lt;em&gt;.[hc]&#39; &#39;&lt;/em&gt;.cc&#39;)&lt;/p&gt; &#xA;&lt;p&gt;Check the .clang-format file for the version used to generate it if there is any difference between your local formatting and the review system.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;http://clang.llvm.org/docs/ClangFormat.html&#34;&gt;http://clang.llvm.org/docs/ClangFormat.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SUPPORT This library is an open source project supported by its community. Please email &lt;a href=&#34;mailto:webm-discuss@webmproject.org&#34;&gt;webm-discuss@webmproject.org&lt;/a&gt; for help.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alx-se/Resources</title>
    <updated>2023-10-01T01:30:30Z</updated>
    <id>tag:github.com,2023-10-01:/alx-se/Resources</id>
    <link href="https://github.com/alx-se/Resources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the slides presentations used in C18 Live Learning sessions by mentor Firdaus&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/alx-se/Resources/master/Slides&amp;amp;LLS-table_of_contents.md&#34;&gt;Slides&amp;amp;LLS-table_of_contents.md&lt;/a&gt; for structural access of the contained resources&lt;/p&gt;</summary>
  </entry>
</feed>