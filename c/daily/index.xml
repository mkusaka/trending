<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:20:48Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eduard-permyakov/permafrost-engine</title>
    <updated>2023-04-12T02:20:48Z</updated>
    <id>tag:github.com,2023-04-12:/eduard-permyakov/permafrost-engine</id>
    <link href="https://github.com/eduard-permyakov/permafrost-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An OpenGL RTS game engine written in C&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Permafrost Engine is an OpenGL 3.3 Real Time Strategy game engine written in C. It is made in the image of old classics, but incorporating some modern ideas.&lt;/p&gt; &#xA;&lt;h2&gt;Engine Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/everglory-banner.png&#34; alt=&#34;everglory-banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;EVERGLORY is the flagship game developed using Permafrost Engine.&lt;/p&gt; &#xA;&lt;p&gt;Download the free (or donate what-you-want) demo on &lt;a href=&#34;https://spb.itch.io/everglory&#34;&gt;itch.io&lt;/a&gt; or on &lt;a href=&#34;https://store.steampowered.com/app/1309720/EVERGLORY/&#34;&gt;Steam&lt;/a&gt;. With the demo you also get access to all the scripts and assets powering the gameplay to learn from and modify as you wish.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/screenshot-01.png&#34; alt=&#34;screenshot-01&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/screenshot-02.png&#34; alt=&#34;screenshot-02&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/screenshot-03.png&#34; alt=&#34;screenshot-03&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/screenshot-04.png&#34; alt=&#34;screenshot-04&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/screenshot-05.png&#34; alt=&#34;screenshot-05&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/eduard-permyakov/permafrost-engine/master/docs/images/screenshot-06.png&#34; alt=&#34;screenshot-06&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Engine Summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL 3.3 programmable pipeline (more modern extensions used where available)&lt;/li&gt; &#xA; &lt;li&gt;Custom ASCII model format with Blender export script&lt;/li&gt; &#xA; &lt;li&gt;Skeletal animation with GPU skinning&lt;/li&gt; &#xA; &lt;li&gt;Phong reflection model with materials&lt;/li&gt; &#xA; &lt;li&gt;Directional light shadow mapping&lt;/li&gt; &#xA; &lt;li&gt;Batched rendering with dynamic batches&lt;/li&gt; &#xA; &lt;li&gt;Ringbuffer-based streaming of data to GPU&lt;/li&gt; &#xA; &lt;li&gt;RTS camera, FPS camera&lt;/li&gt; &#xA; &lt;li&gt;Rendering of tile-based map parsed from ASCII file&lt;/li&gt; &#xA; &lt;li&gt;Water rendering (including reflection, refraction, soft edge effects)&lt;/li&gt; &#xA; &lt;li&gt;Export/Import of game entites to/from ASCII files&lt;/li&gt; &#xA; &lt;li&gt;Engine internals exposed to Python 2.7 for scripting&lt;/li&gt; &#xA; &lt;li&gt;Event system&lt;/li&gt; &#xA; &lt;li&gt;UI framework (Nuklear-based)&lt;/li&gt; &#xA; &lt;li&gt;Efficient raycasting&lt;/li&gt; &#xA; &lt;li&gt;Map/Scene editor&lt;/li&gt; &#xA; &lt;li&gt;Pause/Resume system&lt;/li&gt; &#xA; &lt;li&gt;Fast rendering of huge maps&lt;/li&gt; &#xA; &lt;li&gt;Map navigation graph/grid generation&lt;/li&gt; &#xA; &lt;li&gt;Implementation of &#39;boids&#39; steering/flocking behaviours&lt;/li&gt; &#xA; &lt;li&gt;Hierarchial flow field pathfinding&lt;/li&gt; &#xA; &lt;li&gt;Handling of dynamic obstacles in pathfinding&lt;/li&gt; &#xA; &lt;li&gt;Dynamic collision avoidance of multiple entities using Hybrid Reciprocal Velocity Obstacles and the ClearPath algorithm&lt;/li&gt; &#xA; &lt;li&gt;Pathfinding of different kinds/sizes of units (using &#34;navigation layers&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Efficient spatial indexing using a quadtree&lt;/li&gt; &#xA; &lt;li&gt;Efficient real-time tracking of entity membership to dynamic spatial regions&lt;/li&gt; &#xA; &lt;li&gt;Audio system supporting positional effects and multiple channels of global effects&lt;/li&gt; &#xA; &lt;li&gt;RTS minimap&lt;/li&gt; &#xA; &lt;li&gt;RTS-style unit selection&lt;/li&gt; &#xA; &lt;li&gt;RTS unit combat system&lt;/li&gt; &#xA; &lt;li&gt;RTS fog-of-war system&lt;/li&gt; &#xA; &lt;li&gt;RTS base-building mechanics&lt;/li&gt; &#xA; &lt;li&gt;RTS resource gathering (and transporting) mechanics&lt;/li&gt; &#xA; &lt;li&gt;Ranged combat using an efficient projectile physics simulation&lt;/li&gt; &#xA; &lt;li&gt;Support for different resolutions and aspect ratios&lt;/li&gt; &#xA; &lt;li&gt;Configurable graphics settings&lt;/li&gt; &#xA; &lt;li&gt;Serialization and deserialization of the entire Python interpreter state&lt;/li&gt; &#xA; &lt;li&gt;Saving and restoring of any engine session, including all Python-defined state&lt;/li&gt; &#xA; &lt;li&gt;Multithreaded: simulation and rendering in a 2-stage pipeline&lt;/li&gt; &#xA; &lt;li&gt;Advanced debug visualizations and profiling instrumentatation&lt;/li&gt; &#xA; &lt;li&gt;Fiber system for putting work in lightweight tasks that are scheduled in userspace&lt;/li&gt; &#xA; &lt;li&gt;Fiber-backed Python tasks, allowing cooperative multitasking logic in Python&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform (Linux and Windows)&lt;/li&gt; &#xA; &lt;li&gt;Windows launcher to automatically capture a minidump and stdout, stderr logs on application error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SDL2 2.0.10&lt;/li&gt; &#xA; &lt;li&gt;GLEW 2.1.0&lt;/li&gt; &#xA; &lt;li&gt;python 2.7.17&lt;/li&gt; &#xA; &lt;li&gt;openal-soft 1.21.1&lt;/li&gt; &#xA; &lt;li&gt;stb_image.h, stb_image_resize.h&lt;/li&gt; &#xA; &lt;li&gt;khash.h&lt;/li&gt; &#xA; &lt;li&gt;nuklear.h&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All dependencies can be built from source and distributed along with the game binary if desired. Python is built with a subset of the default modules and packaged with a trimmed-down stdlib.&lt;/p&gt; &#xA;&lt;h2&gt;Building Permafrost Engine&lt;/h2&gt; &#xA;&lt;h4&gt;For Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/eduard-permyakov/permafrost-engine.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd permafrost-engine&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make deps&lt;/code&gt; (to build the shared library dependencies to &lt;code&gt;./lib&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make pf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now you can invoke &lt;code&gt;make run&lt;/code&gt; to launch the demo or &lt;code&gt;make run_editor&lt;/code&gt; to launch the map editor. Optionally, invoke &lt;code&gt;make launchers&lt;/code&gt; to create the &lt;code&gt;./demo&lt;/code&gt; and &lt;code&gt;./editor&lt;/code&gt; binaries which don&#39;t require any arguments.&lt;/p&gt; &#xA;&lt;h4&gt;For Windows&lt;/h4&gt; &#xA;&lt;p&gt;The source code can be built using the mingw-w64 cross-compilation toolchain (&lt;a href=&#34;http://mingw-w64.org/doku.php&#34;&gt;http://mingw-w64.org/doku.php&lt;/a&gt;) using largely the same steps as for Linux. Passing &lt;code&gt;PLAT=WINDOWS&lt;/code&gt; to the make environment is the only required change.&lt;/p&gt; &#xA;&lt;p&gt;The compliation can either be done on a Linux host, or natively on Windows using MSYS2 (&lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/eduard-permyakov/permafrost-engine.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd permafrost-engine&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make deps PLAT=WINDOWS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make pf PLAT=WINDOWS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make launchers PLAT=WINDOWS&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Permafrost Engine is licensed under the GPLv3, with a special linking exception.&lt;/p&gt; &#xA;&lt;h2&gt;Devlog&lt;/h2&gt; &#xA;&lt;p&gt;Follow the development of Permafrost Engine and EVERGLORY on &lt;a href=&#34;https://www.youtube.com/channel/UCNklkpsPnNpRhC9oVkpIpLA&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0dEttWferm8&#34;&gt;Indie RTS Devlog #1: Introducing Permafrost Engine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ch-zjn05gxQ&#34;&gt;Indie RTS Devlog #2: Saving The Python Interpreter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ALL7AQ1MRas&#34;&gt;Indie RTS Devlog #3: Group Pathfinding&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/yTJ7wTJy7jc&#34;&gt;EVERGLORY: Teaser Trailer #1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2rXElWzAGrY&#34;&gt;Indie RTS Devlog #4: Fog of War&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HV_CLHkpXpY&#34;&gt;Indie RTS Devlog #5: Performance Optimization&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eCJg4ljHhD8&#34;&gt;Indie RTS Devlog #6: Fibers, Async Jobs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V9unCfZheJ4&#34;&gt;Indie RTS Devlog #7: Main Menu UI, Loading Missions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wl0jh-17uTA&#34;&gt;Indie RTS Devlog #8: Python Tasks + Making Pong!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=U3lvwZfXss0&#34;&gt;Indie RTS Devlog #9: Base Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Nh8FBpvbKUc&#34;&gt;Indie RTS Devlog #10: Demo Gameplay&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=e3jsymx97LE&#34;&gt;Indie RTS Devlog #11: Resource Gathering, Game Design&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/JqGh_XJstk8&#34;&gt;Indie RTS Devlog #12: Crafting Units&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/UorUpScWLvo&#34;&gt;Indie RTS Devlog #13: Large Unit Pathfinding&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IUolIJX6zpk&#34;&gt;Indie RTS Devlog #14: Projectiles, Big Battles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/xleJeiOHHh4&#34;&gt;EVERGLORY - Official Trailer (2021 Indie RTS)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comments/Questions&lt;/h2&gt; &#xA;&lt;p&gt;Comments or questions regarding the project or the source code? E-mail: &lt;a href=&#34;mailto:edward.permyakov@gmail.com&#34;&gt;edward.permyakov@gmail.com&lt;/a&gt;. Discuss EVERGLORY and its&#39; development on &lt;a href=&#34;https://discord.gg/jSQ8M6C&#34;&gt;Discord&lt;/a&gt;. If you have a &lt;em&gt;useful&lt;/em&gt; fix for a &lt;em&gt;non-trivial&lt;/em&gt; engine issue, feel free to make a PR. Be warned that I will scrutinize every patch to make sure it meets my personal quality standards for the engine code. It you wish to evelove the engine in some way and want the changes to be upstreamed, then do get in touch to discuss it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CryptoCoderz/Espers</title>
    <updated>2023-04-12T02:20:48Z</updated>
    <id>tag:github.com,2023-04-12:/CryptoCoderz/Espers</id>
    <link href="https://github.com/CryptoCoderz/Espers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Experimental Blockchain Project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espers [ESP] 2016-2023 integration/staging tree&lt;/h1&gt; &#xA;&lt;h2&gt;Project Website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://espers.io/&#34;&gt;https://espers.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Navigation of these documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General Readme (You are here)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CryptoCoderz/Espers/releases&#34;&gt;Latest Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/doc/README.md&#34;&gt;Features/Specifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/INSTALL.md&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/doc/assets-attribution.md&#34;&gt;Asset Attributions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Espers [ESP] is released under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/COPYING&#34;&gt;COPYING&lt;/a&gt; for more information or see &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Assistance and Contact&lt;/h2&gt; &#xA;&lt;p&gt;We strive to be an open and friendly community that is eager to help each other through the journey of the Espers [ESP] project development. If at any time someone needs assistance or just a community member to talk to, please feel free to join our Discord at &lt;a href=&#34;https://discord.gg/cn3AfPS&#34;&gt;https://discord.gg/cn3AfPS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Process&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is regularly built and tested, but is not guaranteed to be completely stable. &lt;a href=&#34;https://github.com/CryptoCoderz/Espers/tags&#34;&gt;Tags&lt;/a&gt; are created regularly to indicate new official, stable release versions of Espers [ESP].&lt;/p&gt; &#xA;&lt;p&gt;The contribution workflow is described in &lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The developer Discord should be used to discuss complicated or controversial changes before working on a patch set.&lt;/p&gt; &#xA;&lt;p&gt;Developer Discord can be found at &lt;a href=&#34;https://discord.gg/cn3AfPS&#34;&gt;https://discord.gg/cn3AfPS&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing and code review is the bottleneck for development; we get more pull requests than we can review and test on short notice. Please be patient and help out by testing other people&#39;s pull requests, and remember this is a security-critical project where any mistake might cost people lots of money.&lt;/p&gt; &#xA;&lt;h3&gt;Automated Testing&lt;/h3&gt; &#xA;&lt;p&gt;Developers are strongly encouraged to write &lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/doc/unit-tests.md&#34;&gt;unit tests&lt;/a&gt; for new code, and to submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren&#39;t disabled in configure) with: &lt;code&gt;make check&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;a href=&#34;https://raw.githubusercontent.com/CryptoCoderz/Espers/master/qa&#34;&gt;regression and integration tests&lt;/a&gt; of the RPC interface, written in Python, that are run automatically on the build server.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Quality Assurance (QA) Testing&lt;/h3&gt; &#xA;&lt;p&gt;Changes should be tested by somebody other than the developer who wrote the code. This is especially important for large or high-risk changes. It is useful to add a test plan to the pull request description if testing the changes is not straightforward.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NateChoe1/tcp-over-http</title>
    <updated>2023-04-12T02:20:48Z</updated>
    <id>tag:github.com,2023-04-12:/NateChoe1/tcp-over-http</id>
    <link href="https://github.com/NateChoe1/tcp-over-http" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TCP over HTTP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TCP over HTTP&lt;/h1&gt; &#xA;&lt;p&gt;This is TCP over HTTP&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;My school filters the internet quite a bit, but they&#39;re weird about it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTPS is completely filtered. The network has a custom signing authority that allows them to view and filter any TLS data they see.&lt;/li&gt; &#xA; &lt;li&gt;Many other ports are completely banned, most notably port 22 (SSH).&lt;/li&gt; &#xA; &lt;li&gt;The school can detect if you&#39;re using a VPN, and will disable your WiFi for 5 minutes if you do. Tor does work with bridges, although it&#39;s quite slow and probably not very good for the network.&lt;/li&gt; &#xA; &lt;li&gt;The school will also block protocols, not just ports, so moving SSH to some other port won&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;Despite this, however, many protocols remain unblocked. Most notably, VNC, which would allow you to connect directly to a home desktop as long as you&#39;re fine with the school district being able to see your screen and monitor your keystrokes at all times.&lt;/li&gt; &#xA; &lt;li&gt;In addition, many other ports are completely unfiltered. Port 25 (can be used for email spam) is allowed, as is port 70 (Gopher), port 1965 (Gemini), and most importantly, port 80 (HTTP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that if we can encode a VPN into one of these unblocked protocols, we can bypass all the filters with a fast internet connection. This repo obviously encodes TCP into HTTP.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re not really trying to write a decent web server that follows all of the HTTP paradigms, we&#39;re trying to encode data. That&#39;s why this program sends two requests simultaneously and nothing else. One request sends data, the other receives.&lt;/p&gt; &#xA;&lt;p&gt;The sending socket sends a POST request that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1&#xA;Host: [CONFIG_HTTP_HOST]&#xA;Content-Length: 9223372036854775807&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the receiving socket sends a GET request that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1&#xA;Host: [CONFIG_HTTP_HOST]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server responds to that request with this response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK&#xA;Content-Length: 9223372036854775807&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, the client can send data through the POST request and the server can send data back through the GET request. We&#39;ve created a TCP connection with the server that can send any data including SSH connections.&lt;/p&gt; &#xA;&lt;p&gt;We can then use port forwarding to allow a program on the client to communicate with a program on the server.&lt;/p&gt; &#xA;&lt;p&gt;My Dad (quite reasonably) got confused after hearing me explain this, so here&#39;s a diagram I made.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NateChoe1/tcp-over-http/master/diagram.png&#34; alt=&#34;Diagram explaining this cursed configuration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I configure this&lt;/h2&gt; &#xA;&lt;p&gt;Change &lt;code&gt;config.h&lt;/code&gt;. I blame &lt;a href=&#34;https://suckless.org&#34;&gt;suckless&lt;/a&gt; for this.&lt;/p&gt;</summary>
  </entry>
</feed>