<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-06T01:32:04Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opa334/TrollStore</title>
    <updated>2022-09-06T01:32:04Z</updated>
    <id>tag:github.com,2022-09-06:/opa334/TrollStore</id>
    <link href="https://github.com/opa334/TrollStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jailed iOS app that can install IPAs permanently with arbitary entitlements and root helpers because it trolls Apple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollStore&lt;/h1&gt; &#xA;&lt;p&gt;TrollStore in a permasigned jailed app that can permanently install any IPA you open in it.&lt;/p&gt; &#xA;&lt;p&gt;A proper readme will be added shortly, for now see the release post on reddit.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>koute/bytehound</title>
    <updated>2022-09-06T01:32:04Z</updated>
    <id>tag:github.com,2022-09-06:/koute/bytehound</id>
    <link href="https://github.com/koute/bytehound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A memory profiler for Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bytehound - a memory profiler for Linux&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can be used to analyze memory leaks, see where exactly the memory is being consumed, identify temporary allocations and investigate excessive memory fragmentation&lt;/li&gt; &#xA; &lt;li&gt;Gathers every allocation and deallocation, along with full stack traces&lt;/li&gt; &#xA; &lt;li&gt;Can dynamically cull temporary allocations allowing you to profile over a long period of time&lt;/li&gt; &#xA; &lt;li&gt;Uses a custom, tailor-made stack unwinding implementation which makes it a lot cheaper than other similar tools, potentially up to orders of magnitude faster in some cases&lt;/li&gt; &#xA; &lt;li&gt;Can export the data it gathered into various different formats; it can export the data as JSON (so you can analyze it yourself if you want), as Heaptrack (so you can use the excellent &lt;a href=&#34;https://github.com/KDE/heaptrack&#34;&gt;Heaptrack GUI&lt;/a&gt; for analysis) and as a flamegraph&lt;/li&gt; &#xA; &lt;li&gt;Has its own Web-based GUI which can be used for analysis&lt;/li&gt; &#xA; &lt;li&gt;Can dynamically stream the profiling data to another machine instead of saving it locally, which is useful for profiling on memory-constrained systems&lt;/li&gt; &#xA; &lt;li&gt;Supports AMD64, ARM, AArch64 and MIPS64 architectures (where MIPS64 requires a tiny out-of-tree kernel patch for &lt;code&gt;perf_event_open&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Supports profiling of applications which use jemalloc as their allocator (only works on AMD64 with the &lt;code&gt;jemallocator&lt;/code&gt; crate)&lt;/li&gt; &#xA; &lt;li&gt;Supports an embedded DSL based on &lt;a href=&#34;https://rhai.rs&#34;&gt;Rhai&lt;/a&gt; to allow for programmatic and/or automated data analysis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/koute/bytehound/master/screenshot_gui_memory_usage_graph.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/koute/bytehound/master/screenshot_gui_group_by_backtrace.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/koute/bytehound/master/screenshot_gui_scripting_console.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/koute/bytehound/master/screenshot_graph.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install GCC, Rust nightly (&lt;strong&gt;only 1.62 or newer is supported&lt;/strong&gt;) and the Yarn package manager (for building the GUI)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cargo build --release -p bytehound-preload&#xA; $ cargo build --release -p bytehound-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grab the binaries from &lt;code&gt;target/release/libbytehound.so&lt;/code&gt; and &lt;code&gt;target/release/bytehound&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export MEMORY_PROFILER_LOG=warn&#xA;$ LD_PRELOAD=./libbytehound.so ./your_application&#xA;$ ./bytehound server memory-profiling_*.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open your Web browser and point it at &lt;code&gt;http://localhost:8080&lt;/code&gt; to access the GUI.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full documentation for the profiler in our &lt;a href=&#34;https://koute.github.io/bytehound/&#34;&gt;Memory profiling for fun and profit&lt;/a&gt; book.&lt;/p&gt; &#xA;&lt;h2&gt;Enabling full debug logs&lt;/h2&gt; &#xA;&lt;p&gt;By default the profiler is compiled with most of its debug logs disabled for performance reasons. To reenable them be sure to recompile it with the &lt;code&gt;debug-logs&lt;/code&gt; feature, e.g. like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd preload&#xA;$ cargo build --release --features debug-logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/koute/bytehound/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/koute/bytehound/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jdah/minecraft-weekend</title>
    <updated>2022-09-06T01:32:04Z</updated>
    <id>tag:github.com,2022-09-06:/jdah/minecraft-weekend</id>
    <link href="https://github.com/jdah/minecraft-weekend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minecraft, but I made it in 48 hours.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Minecraft, but I made it in 48 hours*&lt;/h1&gt; &#xA;&lt;p&gt;* I&#39;ve actually updated it since - &lt;a href=&#34;https://github.com/jdah/minecraft-weekend/tree/cb19738305804b5734faa7118c1c784f26ff9463&#34;&gt;see this commit for the 48 hour version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdah/minecraft-weekend/master/screenshots/1.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Features:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Infinite, procedurally generated world&lt;/li&gt; &#xA; &lt;li&gt;Infinite height/depth&lt;/li&gt; &#xA; &lt;li&gt;Day/night cycle&lt;/li&gt; &#xA; &lt;li&gt;Biomes&lt;/li&gt; &#xA; &lt;li&gt;ECS-driven player and entities with full collision and movement&lt;/li&gt; &#xA; &lt;li&gt;Full RGB lighting&lt;/li&gt; &#xA; &lt;li&gt;Full transparency + translucency support&lt;/li&gt; &#xA; &lt;li&gt;Sprite blocks (flowers)&lt;/li&gt; &#xA; &lt;li&gt;Animated blocks (water + lava)&lt;/li&gt; &#xA; &lt;li&gt;Distance fog&lt;/li&gt; &#xA; &lt;li&gt;A whole lot of different block types&lt;/li&gt; &#xA; &lt;li&gt;More&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;h5&gt;Unix-like&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;$ git clone --recurse-submodules https://github.com/jdah/minecraft-weekend.git&lt;/code&gt;&lt;br&gt; &lt;code&gt;$ make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following static libraries under &lt;code&gt;lib/&lt;/code&gt; must be built before the main project can be built:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GLAD &lt;code&gt;lib/glad/src/glad.o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CGLM &lt;code&gt;lib/cglm/.libs/libcglm.a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GLFW &lt;code&gt;lib/glfw/src/libglfw3.a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;libnoise &lt;code&gt;lib/noise/libnoise.a&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the above have their own Makefile under their respective subdirectory and can be built with &lt;code&gt;$ make libs&lt;/code&gt;. If libraries are not found, ensure that submodules have been cloned.&lt;/p&gt; &#xA;&lt;p&gt;The game binary, once built with &lt;code&gt;$ make&lt;/code&gt;, can be found in &lt;code&gt;./bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Be sure&lt;/em&gt; to run with &lt;code&gt;$ ./bin/game&lt;/code&gt; out of the root directory of the repository. If you are getting &#34;cannot open file&#34; errors (such as &#34;cannot find ./res/shaders/*.vs&#34;), this is the issue.&lt;/p&gt; &#xA;&lt;h5&gt;Windows&lt;/h5&gt; &#xA;&lt;p&gt;good luck ü§∑‚Äç‚ôÇÔ∏è probably try building under WSL and using an X environment to pass graphics through.&lt;/p&gt;</summary>
  </entry>
</feed>