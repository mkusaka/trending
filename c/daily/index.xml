<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-27T01:24:11Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>janmojzis/tinyssh</title>
    <updated>2024-03-27T01:24:11Z</updated>
    <id>tag:github.com,2024-03-27:/janmojzis/tinyssh</id>
    <link href="https://github.com/janmojzis/tinyssh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TinySSH is small server (less than 100000 words of code)&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tinysshd is a minimalistic SSH server which implements only a subset of SSHv2 features.&lt;/li&gt; &#xA; &lt;li&gt;tinysshd supports only secure cryptography (minimum 128-bit security, protected against cache-timing attacks)&lt;/li&gt; &#xA; &lt;li&gt;tinysshd doesn&#39;t implement older crypto (such as RSA, DSA, HMAC-MD5, HMAC-SHA1, 3DES, RC4, ...)&lt;/li&gt; &#xA; &lt;li&gt;tinysshd doesn&#39;t implement unsafe features (such as password or hostbased authentication)&lt;/li&gt; &#xA; &lt;li&gt;tinysshd doesn&#39;t have features such: SSH1 protocol, compression, port forwarding, agent forwarding, X11 forwarding ...&lt;/li&gt; &#xA; &lt;li&gt;tinysshd doesn&#39;t use dynamic memory allocation (no allocation failures, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Crypto primitives&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;State-of-the-art crypto: ssh-ed25519, curve25519-sha256, &lt;a href=&#34;mailto:chacha20-poly1305@openssh.com&#34;&gt;chacha20-poly1305@openssh.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Older standard: &#xA;  &lt;strike&gt;&#xA;   ecdsa-sha2-nistp256, ecdh-sha2-nistp256, aes256-ctr, hmac-sha2-256&#xA;  &lt;/strike&gt; removed in version 20190101&lt;/li&gt; &#xA; &lt;li&gt;Postquantum crypto: &lt;a href=&#34;mailto:sntrup761x25519-sha512@openssh.com&#34;&gt;sntrup761x25519-sha512@openssh.com&lt;/a&gt;, &lt;a href=&#34;mailto:chacha20-poly1305@openssh.com&#34;&gt;chacha20-poly1305@openssh.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Project timelime&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#xA;  &lt;strike&gt;&#xA;   experimental: 2014.01.01 - 2014.12.31 (experimentation)&#xA;  &lt;/strike&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#xA;  &lt;strike&gt;&#xA;   alpha(updated): 2015.01.01 - 2017.12.31 (not ready for production use, ready for testing)&#xA;  &lt;/strike&gt;&lt;/li&gt; &#xA; &lt;li&gt;beta(updated): 2018.01.01 - ????.??.?? (ready for production use)&lt;/li&gt; &#xA; &lt;li&gt;stable: expected ????.??.?? - (ready for production use - including post-quantum crypto)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current release (20240101)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;has 63899 words of code&lt;/li&gt; &#xA; &lt;li&gt;beta release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How-to run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;       TCPSERVER&#xA;              tcpserver -HRDl0 0.0.0.0 22 /usr/sbin/tinysshd -v /etc/tinyssh/sshkeydir &amp;amp;&#xA;&#xA;       BUSYBOX&#xA;              busybox tcpsvd 0 22 tinysshd -v /etc/tinyssh/sshkeydir &amp;amp;&#xA;&#xA;       INETD&#xA;           /etc/inetd.conf:&#xA;               ssh stream tcp nowait root /usr/sbin/tinysshd tinysshd -l -v /etc/tinyssh/sshkeydir&#xA;&#xA;       SYSTEMD&#xA;           tinysshd.socket:&#xA;               [Unit]&#xA;               Description=TinySSH server socket&#xA;               ConditionPathExists=!/etc/tinyssh/disable_tinysshd&#xA;&#xA;               [Socket]&#xA;               ListenStream=22&#xA;               Accept=yes&#xA;&#xA;               [Install]&#xA;               WantedBy=sockets.target&#xA;&#xA;           tinysshd@.service:&#xA;               [Unit]&#xA;               Description=Tiny SSH server&#xA;               After=network.target auditd.service&#xA;&#xA;               [Service]&#xA;               ExecStartPre=-/usr/sbin/tinysshd-makekey -q /etc/tinyssh/sshkeydir&#xA;               EnvironmentFile=-/etc/default/tinysshd&#xA;               ExecStart=/usr/sbin/tinysshd ${TINYSSHDOPTS} -- /etc/tinyssh/sshkeydir&#xA;               KillMode=process&#xA;               SuccessExitStatus=111&#xA;               StandardInput=socket&#xA;               StandardError=journal&#xA;&#xA;               [Install]&#xA;               WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>let-def/texpresso</title>
    <updated>2024-03-27T01:24:11Z</updated>
    <id>tag:github.com,2024-03-27:/let-def/texpresso</id>
    <link href="https://github.com/let-def/texpresso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TeXpresso: live rendering and error reporting for LaTeX&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TeXpresso: live rendering and error reporting for LaTeX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: TeXpresso is still in an early development phase.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important: this repository uses submodules. Clone using &lt;code&gt;git clone --recurse-submodules&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;TeXpresso provides a &#34;live rendering&#34; experience when editing LaTeX documents in a supported editor: change something in the .tex file, the render window will update almost immediately with your change. Write something invalid, you get an error message immediately.&lt;/p&gt; &#xA;&lt;p&gt;This can radically improve the LaTeX editing experience compared to the usual rebuild-and-wait-for-viewer-to-update experience, especially for large documents.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/let-def/texpresso/main/#Screencasts&#34;&gt;screencasts&lt;/a&gt; at the end of this file for a visual demo of TeXpresso capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;TeXpresso has been tested on Linux and macOS and should work with both AMD64 and Apple Silicon architectures. See &lt;a href=&#34;https://raw.githubusercontent.com/let-def/texpresso/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; for dependency and build instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Design&lt;/h3&gt; &#xA;&lt;p&gt;The TeXpresso system is built of the following parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;A TeX engine that renders LaTeX documents into PDF; we use a modified version of the &lt;a href=&#34;https://tectonic-typesetting.github.io/en-US/&#34;&gt;Tectonic&lt;/a&gt; engine, modified to interact with the TeXpresso driver.&lt;/p&gt; &lt;p&gt;This is in the &lt;a href=&#34;https://raw.githubusercontent.com/let-def/texpresso/main/tectonic/&#34;&gt;tectonic/&lt;/a&gt; git-submodule, and it produces the &lt;code&gt;texpresso-tonic&lt;/code&gt; helper binary&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A PDF renderer that renders PDF documents into images. We use &lt;a href=&#34;https://mupdf.com/&#34;&gt;MuPDF&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A viewer that shows the rendered images and allows simple user commands (see &lt;a href=&#34;https://raw.githubusercontent.com/let-def/texpresso/main/#Viewer_controls&#34;&gt;Viewer controls&lt;/a&gt; below), built with &lt;a href=&#34;https://www.libsdl.org/&#34;&gt;libSDL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A driver program that talks to the editor to be notified of changes to the LaTeX document, maintains an incremental view of the document and the rendering process (supporting incrementality, rollback, error recovery, etc.), talks to the LaTeX engine to re-render the modified portions of the document, and synchronizes with the viewer.&lt;/p&gt; &lt;p&gt;The driver is where the &#34;live&#34; magic lives. It is the &lt;code&gt;texpresso&lt;/code&gt; binary, whose sources are in this repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The driver sends information between the editor and the renderer in both directions. In particular, it is possible to ask the editor to jump to a specific place in the LaTeX document by clicking on the viewer window or, conversely, to refresh the viewer window to display the document at the editor position.&lt;/p&gt; &#xA;&lt;h2&gt;Viewer controls&lt;/h2&gt; &#xA;&lt;p&gt;Keyboard controls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;←&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;: change page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p&lt;/code&gt; (for &#34;page&#34;): switch between &#34;fit-to-page&#34; and &#34;fit-to-width&#34; zoom modes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; (&#34;crop&#34;): crop borders&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; (&#34;quit&#34;): quit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i&lt;/code&gt; (&#34;invert&#34;): dark mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;I&lt;/code&gt; : toggle theming&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt; (&#34;top&#34;): toggle stay-on-top (keeping TeXpresso above the editor window)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; (&#34;border&#34;): toggle window borders&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;F5&lt;/code&gt;: start fullscreen presentation (leave with &lt;code&gt;ESC&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mouse controls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;click: select text in window (TODO: move Emacs buffer with SyncTeX)&lt;/li&gt; &#xA; &lt;li&gt;control+click: pan page&lt;/li&gt; &#xA; &lt;li&gt;wheel: scroll page&lt;/li&gt; &#xA; &lt;li&gt;control+wheel: zoom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported editors&lt;/h2&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;p&gt;TeXpresso comes with an Emacs mode. The source can be found in &lt;a href=&#34;https://raw.githubusercontent.com/let-def/texpresso/main/emacs/texpresso.el&#34;&gt;emacs/texpresso.el&lt;/a&gt;. Load this file in Emacs (using &lt;code&gt;M-X load-file&lt;/code&gt;; it is also compatible with &lt;code&gt;require&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Start TeXpresso with &lt;code&gt;M-x texpresso&lt;/code&gt;. The prompt will let you select the master/root TeX file. It will try to start the &lt;code&gt;texpresso&lt;/code&gt; command. If it is not possible, it will open &lt;code&gt;(customize-variable &#39;texpresso-binary)&lt;/code&gt; to let you set the path to texpresso binary (&lt;code&gt;&amp;lt;where you cloned the repository&amp;gt;/build/texpresso&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To work correctly, &lt;code&gt;texpresso&lt;/code&gt; needs &lt;code&gt;texpresso-tonic&lt;/code&gt; helper; when copying them, make sure they are both in the same directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x texpresso-display-output&lt;/code&gt; will open a small window listing TeX warnings and errors on the current page. Use &lt;code&gt;M-x texpresso-next-page&lt;/code&gt; and &lt;code&gt;M-x texpresso-previous-page&lt;/code&gt; to move between pages without leaving Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Neovim&lt;/h3&gt; &#xA;&lt;p&gt;A Neovim mode is provided in a separate repository &lt;a href=&#34;https://github.com/let-def/texpresso.vim&#34;&gt;texpresso.vim&lt;/a&gt;. It is not yet compatible with vanilla Vim, patches are welcome &lt;span&gt;🙇&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screencasts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Neovim integration.&lt;/strong&gt; Launching TeXpresso in vim:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/let-def/texpresso.vim/assets/1048096/b6a1966a-52ca-4e2e-bf33-e83b6af851d8&#34;&gt;https://github.com/let-def/texpresso.vim/assets/1048096/b6a1966a-52ca-4e2e-bf33-e83b6af851d8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Live update during edition:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/let-def/texpresso.vim/assets/1048096/cfdff380-992f-4732-a1fa-f05584930610&#34;&gt;https://github.com/let-def/texpresso.vim/assets/1048096/cfdff380-992f-4732-a1fa-f05584930610&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using Quickfix window to fix errors and warnings interactively:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/let-def/texpresso.vim/assets/1048096/e07221a9-85b1-44f3-a904-b4f7d6bcdb9b&#34;&gt;https://github.com/let-def/texpresso.vim/assets/1048096/e07221a9-85b1-44f3-a904-b4f7d6bcdb9b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Synchronization from Document to Editor (SyncTeX backward):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/let-def/texpresso.vim/assets/1048096/f69b1508-a069-4003-9578-662d9e790ff9&#34;&gt;https://github.com/let-def/texpresso.vim/assets/1048096/f69b1508-a069-4003-9578-662d9e790ff9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Synchronization from Editor to Document (SyncTeX forward):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/let-def/texpresso.vim/assets/1048096/78560d20-391e-490e-ad76-c8cce1004ce5&#34;&gt;https://github.com/let-def/texpresso.vim/assets/1048096/78560d20-391e-490e-ad76-c8cce1004ce5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Theming, Light/Dark modes: 😎&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/let-def/texpresso.vim/assets/1048096/a072181b-82d3-42df-9683-7285ed1b32fc&#34;&gt;https://github.com/let-def/texpresso.vim/assets/1048096/a072181b-82d3-42df-9683-7285ed1b32fc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Emacs integration.&lt;/strong&gt; Here is a sample recording of me editing and browsing @fabiensanglard &lt;a href=&#34;https://github.com/fabiensanglard/gebbdoom&#34;&gt;Game Engine Black Book: Doom&lt;/a&gt; in TeXpresso (using my emacs theme):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1048096/235424858-a5a2900b-fb48-40b7-a167-d0b71af39034.mp4&#34;&gt;https://user-images.githubusercontent.com/1048096/235424858-a5a2900b-fb48-40b7-a167-d0b71af39034.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>web3ToolBoxDev/toolBoxClient</title>
    <updated>2024-03-27T01:24:11Z</updated>
    <id>tag:github.com,2024-03-27:/web3ToolBoxDev/toolBoxClient</id>
    <link href="https://github.com/web3ToolBoxDev/toolBoxClient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一步一步编写web3工具——Step-by-Step Development of Web3 Tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;toolBoxClient&lt;/h1&gt; &#xA;&lt;p&gt;一步一步编写web3工具——Step-by-Step Development of Web3 Tools&lt;/p&gt; &#xA;&lt;h2&gt;编译安装&lt;/h2&gt; &#xA;&lt;p&gt;安装之前,请确认安装好了node.js,npm和yarn&lt;/p&gt; &#xA;&lt;p&gt;第一步安装node相关依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:web3ToolBoxDev/toolBoxClient.git&#xA;cd toolBoxClient&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第二步打包react前端项目&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第三步进入assets/node_for_mac或assets/node_for_win，安装相应的node依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;//mac系统&#xA;cd assets/node_for_mac&#xA;//win系统&#xA;cd assets/node_for_win&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第三步打包electron,打包前请确认根目录下config.js的IS_BUILD参数为true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;即可在dist目录中找到可执行安装文件&lt;/p&gt; &#xA;&lt;h2&gt;脚本接入&lt;/h2&gt; &#xA;&lt;h3&gt;概述&lt;/h3&gt; &#xA;&lt;p&gt;该文档旨在指导开发人员接入 WebSocket 服务，实现与工具箱的实时通信。目前暂时支持JavaScript脚本,接入示例代码请见&lt;a href=&#34;https://github.com/web3ToolBoxDev/toolBoxClient/raw/main/example/example.js&#34;&gt;example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;前提条件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js 环境&lt;/li&gt; &#xA; &lt;li&gt;熟悉 JavaScript 编程语言&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;步骤&lt;/h3&gt; &#xA;&lt;h4&gt;1. 安装依赖&lt;/h4&gt; &#xA;&lt;p&gt;确保安装了 &lt;code&gt;ws&lt;/code&gt; 模块，该模块提供了 WebSocket 的实现。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install ws&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. 接入工具箱&lt;/h4&gt; &#xA;&lt;p&gt;工具箱采用了WebSocket协议进行通讯，工具箱通过调用子进程启动三方脚本，web socket的链接地址将通过进程参数传递给脚本。示例代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const webSocket = require(&#39;ws&#39;);&#xA;const url = process.argv[2];&#xA;let ws = new webSocket(url);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. 消息格式&lt;/h4&gt; &#xA;&lt;p&gt;工具箱采用json定义了以下消息格式&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;心跳消息，工具箱用于确认进程是否正常运行，定时发送心跳消息至工具箱，如超过60秒未收到相应消息，工具箱将关闭脚本进程&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    {&#xA;        &#34;type&#34;: &#34;heart_beat&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//定时发送心跳消息&#xA;setInterval(() =&amp;gt; {&#xA;    ws.send(JSON.stringify({type: &#39;heart_beat&#39;}));&#xA;}, 5000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请求任务数据信息，在WebSocket连接成功后即可请求数据，0.1.0版本可获取工具箱回传消息格式如下&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;//请求消息格式&#xA;{&#xA;    &#34;type&#34;: &#34;request_task_data&#34;,&#xA;    &#34;data&#34;:&#34;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;//回传消息格式&#xA;{&#xA;  &#34;type&#34;: &#34;request_task_data&#34;,&#xA;  &#34;data&#34;: {&#xA;    &#34;name&#34;:&#34;钱包名称&#34;,&#xA;    &#34;address&#34;:&#34;钱包地址&#34;,&#xA;    &#34;mnemonic&#34;:&#34;钱包助记词&#34;,&#xA;    &#34;privateKey&#34;:&#34;钱包私钥&#34;,&#xA;    &#34;initialized&#34;:false, //是否完成初始化，初始化以后可以获取浏览器文件路径&#xA;    &#34;chromeUserDataPath&#34;:&#34;浏览器用户文件储存路径&#34;,&#xA;    &#34;ip&#34;:&#34;用户配置的代理ip&#34;,&#xA;    &#34;userAgent&#34;:&#34;用户配置的浏览器userAgent信息&#34;,&#xA;    &#34;language&#34;:&#34;用户配置的浏览器language信息&#34;,&#xA;    &#34;webglVendor&#34;:&#34;用户配置的浏览器webglVendor信息&#34;,&#xA;    &#34;webglRenderer&#34;:&#34;用户配置的浏览器webglRenderer信息&#34;,&#xA;    &#34;config&#34;:&#34;脚本自定义的config信息（将在后续文档中解释）&#34;&#xA;  },&#xA;  &#34;time&#34;: &#34;2024/3/15 17:56:11&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;任务日志消息，用于显示任务进度的消息，工具箱收到消息后会展示在用户前端&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;task_log&#34;,&#xA;  &#34;message&#34;: &#34;任务日志信息&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;任务终止信息，由用户在工具箱客户端发出，进程接收到消息后需要主动结束任务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;task_terminate&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;任务完成信息，任务结束后需要发送任务结束消息，工具箱收到消息后会关闭进程&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;task_completed&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;任务报错信息，任务执行出错后将出错信息回传客户前端&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;task_error&#34;,&#xA;  &#34;message&#34;: &#34;错误信息&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. 发送消息&lt;/h4&gt; &#xA;&lt;p&gt;通过调用 &lt;code&gt;ws.send&lt;/code&gt; 方法向工具箱发送消息。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ws.send(JSON.stringify({type: &#39;task_completed&#39;}));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. 接收消息&lt;/h4&gt; &#xA;&lt;p&gt;通过监听 &lt;code&gt;message&lt;/code&gt; 事件接收工具箱发送的消息。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ws.on(&#39;message&#39;, function incoming(data) {&#xA;    console.log(data);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. 脚本配置&lt;/h4&gt; &#xA;&lt;p&gt;工具箱支持导入json文件，用户可配置脚本所需信息，以example中的&lt;a href=&#34;https://github.com/web3ToolBoxDev/toolBoxClient/raw/main/example/binance.js&#34;&gt;币安提币脚本&lt;/a&gt;为例，用户导入&lt;a href=&#34;https://github.com/web3ToolBoxDev/toolBoxClient/raw/main/example/config.json&#34;&gt;json配置文件&lt;/a&gt;后，可以用户自行编辑，目前格式统一为键值对的形式，用户配置后可以在请求数据时，通过config获取&lt;/p&gt; &#xA;&lt;h2&gt;问题反馈&lt;/h2&gt; &#xA;&lt;p&gt;如果在使用中遇到问题，进入discord @Aming &lt;a href=&#34;https://discord.gg/mf5Crp4fH2&#34;&gt;点击进入社区&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>