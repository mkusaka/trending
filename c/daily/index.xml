<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-01T01:30:08Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Johannes4Linux/Linux_Driver_Tutorial_legacy</title>
    <updated>2025-04-01T01:30:08Z</updated>
    <id>tag:github.com,2025-04-01:/Johannes4Linux/Linux_Driver_Tutorial_legacy</id>
    <link href="https://github.com/Johannes4Linux/Linux_Driver_Tutorial_legacy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Tutorial how to get started with Linux Kernel Modules and Linux Drivers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux Driver Tutorial&lt;/h1&gt; &#xA;&lt;p&gt;Here you can find examples for simple Linux Kernel Modules and Linux Drivers.&lt;/p&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;p&gt;I used a Raspberry Pi 3 to develop and test my modules and drivers. To compile them, you need to install the Kernel headers on your Pi. On Raspbian you can do this with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install raspberrypi-kernel-headers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raspberry Pi OS is only installs the latest kernel headers. So, make sure, you are running the latest kernel. You can do this by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need the build utils (make, gcc, ...) but they come preinstalled on Raspbian.&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;p&gt;In this repo you can find examples for:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simple Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Device Numbers and Device Files&lt;/li&gt; &#xA; &lt;li&gt;Create device file in driver and callbacks&lt;/li&gt; &#xA; &lt;li&gt;GPIO Driver&lt;/li&gt; &#xA; &lt;li&gt;Text LCD Driver&lt;/li&gt; &#xA; &lt;li&gt;PWM Module&lt;/li&gt; &#xA; &lt;li&gt;Temperature Sensor (I2C)&lt;/li&gt; &#xA; &lt;li&gt;Timer in Linux Kernel Modules&lt;/li&gt; &#xA; &lt;li&gt;High Resolution Timer in Linux Kernel Modules&lt;/li&gt; &#xA; &lt;li&gt;Accessing SPI with a Linux Kernel Module (BMP280 sensor again)&lt;/li&gt; &#xA; &lt;li&gt;Using a GPIO Interrupt in a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Using Parameters in a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;IOCTL in a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Threads in a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Sending a signal from a Linux Kernel Module to an userspace application&lt;/li&gt; &#xA; &lt;li&gt;The poll callback&lt;/li&gt; &#xA; &lt;li&gt;Waitqueues in a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Create procfs entries from a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Create sysfs entries from a Linux Kernel Module&lt;/li&gt; &#xA; &lt;li&gt;Parse the device tree from a Linux Kernel Module to get the deivce properties of a specific device&lt;/li&gt; &#xA; &lt;li&gt;Device Tree GPIO Driver&lt;/li&gt; &#xA; &lt;li&gt;Device Tree Driver for I2C Device&lt;/li&gt; &#xA; &lt;li&gt;Dynamical memory management in a Linux Kernel module&lt;/li&gt; &#xA; &lt;li&gt;Serial (UART) Driver&lt;/li&gt; &#xA; &lt;li&gt;Industrial IO compatible driver for an ATMEGA I2C ADC&lt;/li&gt; &#xA; &lt;li&gt;Device Tree SPI Driver (IIO compatible driver for Atmega SPI ADC)&lt;/li&gt; &#xA; &lt;li&gt;Misc Device&lt;/li&gt; &#xA; &lt;li&gt;Mutex for exclusive access to shared resource&lt;/li&gt; &#xA; &lt;li&gt;Completions for synchronisation&lt;/li&gt; &#xA; &lt;li&gt;Direct Memory Access (DMA) memcopy example&lt;/li&gt; &#xA; &lt;li&gt;Accessing files form a Linux Driver&lt;/li&gt; &#xA; &lt;li&gt;The mmap callback&lt;/li&gt; &#xA; &lt;li&gt;Linked Lists&lt;/li&gt; &#xA; &lt;li&gt;Registering device numbers, read and write callback in character devices Take 2&lt;/li&gt; &#xA; &lt;li&gt;Private Data in struct file&lt;/li&gt; &#xA; &lt;li&gt;I2C Device Driver without Device Tree&lt;/li&gt; &#xA; &lt;li&gt;Sysfs Class&lt;/li&gt; &#xA; &lt;li&gt;Kernel Log levels&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;p&gt;For more information about my Linux Driver examples check out my &lt;a href=&#34;https://www.youtube.com/watch?v=x1Y203vH-Dc&amp;amp;list=PLCGpd0Do5-I3b5TtyqeF1UdyD4C-S-dMa&#34;&gt;videos and my playlist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support me&lt;/h2&gt; &#xA;&lt;p&gt;If you want to support me, you can buy me a coffee &lt;a href=&#34;https://www.buymeacoffee.com/johannes4linux&#34;&gt;buymeacoffee.com/johannes4linux&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>