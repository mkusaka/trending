<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-28T01:35:03Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>df308/x9</title>
    <updated>2023-06-28T01:35:03Z</updated>
    <id>tag:github.com,2023-06-28:/df308/x9</id>
    <link href="https://github.com/df308/x9" rel="alternate"></link>
    <summary type="html">&lt;p&gt;high performance message passing library&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;X9&lt;/h2&gt; &#xA;&lt;p&gt;X9 is a low level high performance message passing library, based on a lock-free ring buffer implemented with atomic variables, for low latency multithreading work.&lt;br&gt; It allows for multiple producers/consumers to concurrently access the same underlying ring buffer and provides both spinning (busy loop) and non-blocking read and write functions.&lt;/p&gt; &#xA;&lt;p&gt;The library is based on three concepts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A message, which is a user defined struct.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;x9_inbox&lt;/code&gt;, which is where messages are both written to and read from.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;x9_node&lt;/code&gt;, which is an abstraction that unifies x9_inbox(es).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library provides multiple functions to both read from and write to a &lt;code&gt;x9_inbox&lt;/code&gt;, as the right choice depends on the user needs.&lt;br&gt; Refer to &lt;em&gt;x9.h&lt;/em&gt;, where all public functions are properly documented and their use cases explained, and the examples folder for comprehensive examples of different architectures.&lt;/p&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;X9_DEBUG&lt;/code&gt; at compile time will print to stdout the reason why the functions &lt;code&gt;x9_inbox_is_valid&lt;/code&gt; and &lt;code&gt;x9_node_is_valid&lt;/code&gt; returned &#39;false&#39; (if they indeed returned &#39;false&#39;), or why &lt;code&gt;x9_select_inbox_from_node&lt;/code&gt; did not return a valid &lt;code&gt;x9_inbox&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the library just link with x9.c and include x9.h where necessary.&lt;/p&gt; &#xA;&lt;p&gt;X9 is as generic, performant and intuitive as C allows, without forcing the user to any sort of build system preprocessor hell, pseudo-C macro based library, or worse.&lt;br&gt; It was originally written in the context of an high-frequency-trading system that this author developed, and was made public in June of 2023.&lt;br&gt; It is released under the BSD-2-Clause license, with the purpose of serving others and other programs.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Single producer and single consumer transmitting 100M messages via a single &lt;code&gt;x9_inbox&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run on Intel 11900k (cpu and ram untuned).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Msg size&lt;/em&gt; expressed in bytes, and &lt;em&gt;Inbox size&lt;/em&gt; in number of slots in the ring buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(See /profiling for how to run your own tests)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Inbox size | Msg size | Time (secs) | Msgs/second&#xA;-------------------------------------------------&#xA;      1024 |       16 |        6.07 |      16.46M&#xA;      1024 |       32 |        5.99 |      16.70M&#xA;      1024 |       64 |        6.02 |      16.62M&#xA;-------------------------------------------------&#xA;      2048 |       16 |        6.08 |      16.45M&#xA;      2048 |       32 |        5.99 |      16.70M&#xA;      2048 |       64 |        6.04 |      16.55M&#xA;-------------------------------------------------&#xA;      4096 |       16 |        6.08 |      16.45M&#xA;      4096 |       32 |        5.96 |      16.79M&#xA;      4096 |       64 |        6.02 |      16.61M&#xA;-------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MichaelFinance/CTP_DEV_NOTE</title>
    <updated>2023-06-28T01:35:03Z</updated>
    <id>tag:github.com,2023-06-28:/MichaelFinance/CTP_DEV_NOTE</id>
    <link href="https://github.com/MichaelFinance/CTP_DEV_NOTE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CTP_DEV_NOTE&lt;/h1&gt; &#xA;&lt;p&gt;CTP是目前国内高频量化交易重要的接口，通过期货公司开通CTP接口，可以连接国内四大期货交易所，进行期货和期权等金融衍生品的交易。&lt;/p&gt; &#xA;&lt;h2&gt;为什么要自己开发交易系统？&lt;/h2&gt; &#xA;&lt;p&gt;目前市场中，有很多的基于CTP二次开发的客户端，这些客户端大多数都是将CTP原始的接口封装成Python供大家使用，然而作为一名量化高频的开发人员，深知这其中的弊端，一是交易不能有黑盒子，大多数的国际投行，比如高盛，摩根，美林等，都有自己的交易系统，原因是实际交易过程中，如果遇到问题，那么交易员还是量化开发人员都需要知道整个交易决策的过程，这就需要对原始的交易逻辑和代码进行分析，如果是使用第三方的封装的软件，除非有源码提供，否则是无法实现的，其次，第三方的交易软件更新迭代比较慢，尤其是当交易需要有自己的个性化的功能时，很难达到自己的预期的效果。最后，实际的交易还是开发，知其然必知其所以然，如果只是用但不知道其中的原理，个人觉得并不是一种高明的思维，因此我坚持自己基于CTP原始的接口开发自己的高频量化交易系统。&lt;/p&gt; &#xA;&lt;h2&gt;开发交易系统难吗？&lt;/h2&gt; &#xA;&lt;p&gt;也许有一些人会觉得开发一个高频交易系统很难，这个问题也不能有一个明确的结论，我觉得量化交易系统可以分为几个部分：交易系统的架构，系统的实现以及交易的策略。首先架构上个人觉得大同小异，看了很多的交易系统的架构，比如火币，币安，QunantConnect等等，无论交易什么金融产品类型是什么，但是可以发现底层的架构大多的类似，比如分为：订单管理模块，策略引擎模块，持仓管理模块，行情模块，风控模块等，不用自己过多的设计，参考加优化即可。其次交易的实现，CTP原始的接口使用的C++，使用C++是顶尖投行交易的传统了，一直延续至今，毫无疑问C++确实是一门博大精深的语音，要想完全掌握成为一名C++的大神，并非一朝一夕的事情，但是如果开发一个金融类的高频交易系统可能并不需要成为一名顶级的C++的编程人员，学以致用也许才是准确的道路，从现有的交易系统来看，学会基本的编程知识加上面向对象编程，智能指针，多线程以及常见的几种程序设计模式的知识，我个人觉得是可以应付的过来的，这里可以参考一下quantnet上面的两门C++课程《C++ Programming for Financial Engineering》和《Advanced C++ and Modern Design》，学完这两门课程，应对编程应该问题不大。最后就是交易策略，这个是最重要的部分，就是将自己的交易思路转换为实际的代码，并且运用于实盘交易，这个因人而异，有好的策略也许就能从市场中获利，这也是交易我们做交易系统的目的。&lt;/p&gt; &#xA;&lt;h2&gt;如何建立自己的交易系统&lt;/h2&gt; &#xA;&lt;p&gt;有了架构图，C++编程基础加上自己还有策略时，便可以开始的CTP交易开发了，前期我每日每夜写了三个月代码，终于完成了自己的高频交易系统，目前还算稳定，因为之前自己摘CTP的开发过程中，走了不少的弯路，包括模拟环境，接口的调用，缺失行情的处理，回报信息字段的处理，因此我建立了这个代码库，并且开始自我归纳总结如何开发和开发过程中遇到的问题，一方面可以积累自己内在的储备，另外一方面，给后来开发者一些思路。&lt;/p&gt; &#xA;&lt;h2&gt;代码库哪些内容&lt;/h2&gt; &#xA;&lt;p&gt;主要包含如何使用CTP开发，包括行情和交易接口的连接，行情的订阅，订单回报和成交回报推送，不同订单类型的发送以及回报消息对象的解析；也许很多人认为交易策略是核心，个人也许并不认同这个观点，因为好的策略运用到实盘交易之间有着巨大的鸿沟，想法能真正实盘进行交易，并且避开各种坑，需要花费很大的很大的精力。因此这个代码库目前我想并不包含策略相关的内容。就如同战士上战场，这里只提供武器和弹药，但是具体的如何打战，运用的战术，需要大家自己思考。&lt;/p&gt; &#xA;&lt;p&gt;更多的内容，大家可以关注我的微信公众账号：量化金融初学者&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jfedor2/flatbox</title>
    <updated>2023-06-28T01:35:03Z</updated>
    <id>tag:github.com,2023-06-28:/jfedor2/flatbox</id>
    <link href="https://github.com/jfedor2/flatbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low profile hitbox-layout fightstick&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flatbox: Low profile hitbox-layout fightstick&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains 3D-printable models, PCB design files and code needed to make an arcade controller that looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/hardware-rev2/images/Flatbox-rev2b-finished-product.jpg&#34; alt=&#34;Assembled Flatbox&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are five major versions of the Flatbox. They all use Kailh low profile (choc v1) mechanical keyboard switches. The table below lists their main features. See the README for each version for details on how to make them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;version&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/hardware-rev1.1&#34;&gt;rev1.1&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/hardware-rev2&#34;&gt;rev2&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/hardware-rev3&#34;&gt;rev3&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/hardware-rev4&#34;&gt;rev4&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/hardware-rev5&#34;&gt;rev5&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;case dimensions&lt;/td&gt; &#xA;   &lt;td&gt;218x128x10mm&lt;/td&gt; &#xA;   &lt;td&gt;218x130x10mm&lt;/td&gt; &#xA;   &lt;td&gt;218x130x10mm&lt;/td&gt; &#xA;   &lt;td&gt;218x130x10mm&lt;/td&gt; &#xA;   &lt;td&gt;218x126x10mm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compatibility (using provided firmware)&lt;/td&gt; &#xA;   &lt;td&gt;PC, PS3&lt;/td&gt; &#xA;   &lt;td&gt;PC, PS3&lt;/td&gt; &#xA;   &lt;td&gt;PC, PS3, PS4&lt;/td&gt; &#xA;   &lt;td&gt;PC, PS3&lt;/td&gt; &#xA;   &lt;td&gt;PC, PS3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;add-on board&lt;/td&gt; &#xA;   &lt;td&gt;Arduino Pro Micro&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.brookaccessory.com/detail/58690501/&#34;&gt;Brook PS3/PS4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.waveshare.com/rp2040-zero.htm&#34;&gt;RP2040-Zero&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onboard chip&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;ATmega32U4&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;RP2040&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;port&lt;/td&gt; &#xA;   &lt;td&gt;micro USB&lt;/td&gt; &#xA;   &lt;td&gt;USB-C&lt;/td&gt; &#xA;   &lt;td&gt;USB-C&lt;/td&gt; &#xA;   &lt;td&gt;USB-C&lt;/td&gt; &#xA;   &lt;td&gt;USB-C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SMT assembly required&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;firmware&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/firmware-atmega32u4&#34;&gt;ATmega32U4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/firmware-atmega32u4&#34;&gt;ATmega32U4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.brookaccessory.com/download/PS3/&#34;&gt;Brook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/firmware-rp2040&#34;&gt;RP2040&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/flatbox/master/firmware-rp2040&#34;&gt;RP2040&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>