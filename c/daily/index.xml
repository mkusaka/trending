<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-15T01:35:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ORCx41/AtomPePacker</title>
    <updated>2022-10-15T01:35:22Z</updated>
    <id>tag:github.com,2022-10-15:/ORCx41/AtomPePacker</id>
    <link href="https://github.com/ORCx41/AtomPePacker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Highly capable Pe Packer&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;AtomPePacker : A Highly Capable Pe Packer&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Features :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the packer only support x64 exe&#39;s (altho planning to make x32 version but idk when it&#39;ll be done)&lt;/li&gt; &#xA; &lt;li&gt;no crt imports&lt;/li&gt; &#xA; &lt;li&gt;api hashing library ( custom getmodulehandle and getprocaddress )&lt;/li&gt; &#xA; &lt;li&gt;direct syscalls ( for the part that i do the ntdll unhooking )&lt;/li&gt; &#xA; &lt;li&gt;ntdll unhooking from \KnownDlls\&lt;/li&gt; &#xA; &lt;li&gt;support tls callbacks&lt;/li&gt; &#xA; &lt;li&gt;support reallocation in case of needed ( the image is mapped to the preferable address first )&lt;/li&gt; &#xA; &lt;li&gt;no rwx section allocation&lt;/li&gt; &#xA; &lt;li&gt;support exception handling&lt;/li&gt; &#xA; &lt;li&gt;uses elzma compression algorithm to do the compression (reducing the final file size)&lt;/li&gt; &#xA; &lt;li&gt;its local run pe, so it support arguments&lt;/li&gt; &#xA; &lt;li&gt;fake imported functions to add more friendly look to the iat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Builder :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can download from &lt;a href=&#34;https://github.com/ORCx41/AtomPePacker/releases/tag/1&#34;&gt;here&lt;/a&gt; or compile the code manually&lt;/li&gt; &#xA; &lt;li&gt;supports only 1 input: &lt;code&gt;x64 native exe files.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;supports 3 outputs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dll : &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Example &#34;rundll32.exe DllPP64.dll Atom&#34; (Using &#34;Atom&#34; is a must to run your payload - this is the name if the exported function in the dll)&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;can be hijacked / injected into other process&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;exe : &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;this output is the default (with console - for binaries like mimikatz)&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;no console exe &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;for binaries like a c2 agent&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Usage :&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;[#] Usage  : PePacker.exe &amp;lt;Input x64 exe&amp;gt; &amp;lt;*Output*&amp;gt; &amp;lt;*Optional Features*&amp;gt;&#xA;[#] Output :&#xA;              -d : Output The Packed Pe As A x64 Dll File&#xA;              -e : Output The Packed Pe As A x64 Exe File (Default)&#xA;[#] Features :&#xA;              -h : Hide The Console - /SUBSYSTEM:WINDOWS&#xA;&#xA;&#xA;&#xA;Example:&#xA;&#xA;&#xA;PePacker.exe mimikatz.exe&#x9;&#x9;&#x9;: generate exe packed file&#xA;PePacker.exe mimikatz.exe -e&#x9;&#x9;&#x9;: generate exe packed file&#xA;PePacker.exe mimikatz.exe -e&#x9;-h&#x9;&#x9;: generate hidden exe packed file&#xA;PePacker.exe mimikatz.exe -d&#x9;&#x9;&#x9;: generate dll output&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Demo - Builder :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/195252422-8e950ea8-be59-406d-ab6e-42bf273ae314.png&#34; alt=&#34;Screenshot 2022-10-12 073947&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/111295429/195252144-1c32c279-2e22-4ccd-8b06-6b2aac901324.png&#34; alt=&#34;Screenshot 2022-10-12 074128&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Demo - Profit :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/195249176-9c021c71-5c1c-42f7-b1fa-7937259e6e39.png&#34; alt=&#34;photo_2022-10-12_07-08-33&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/111295429/195249100-1fe2a944-c67f-4495-b20f-8062afe6a429.jpg&#34; alt=&#34;photo_2022-10-12_07-08-38&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Thanks for :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lloyd/easylzma&#34;&gt;https://github.com/lloyd/easylzma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vxunderground/VX-API&#34;&gt;https://github.com/vxunderground/VX-API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x32 support&lt;/li&gt; &#xA; &lt;li&gt;reduce the entropy&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lambertjamesd/portal64</title>
    <updated>2022-10-15T01:35:22Z</updated>
    <id>tag:github.com,2022-10-15:/lambertjamesd/portal64</id>
    <link href="https://github.com/lambertjamesd/portal64" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A demake of Portal for the Nintendo 64&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Portal64&lt;/h1&gt; &#xA;&lt;p&gt;A demake of portal for the Nintendo 64&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;First, you will need to setup &lt;a href=&#34;https://crashoveride95.github.io/n64hbrew/modernsdk/startoff.html&#34;&gt;modern sdk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you will need to download blender 3.0 or higher. Then set the environment variable &lt;code&gt;BLENDER_3_0&lt;/code&gt; to be the absolute path where the blender executable is located on your system.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;You will need to install python &lt;code&gt;vpk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install vpk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Install &lt;code&gt;vtf2png&lt;/code&gt;, &lt;code&gt;sfz2n64&lt;/code&gt; and &lt;code&gt;skeletool64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#34;deb [trusted=yes] https://lambertjamesd.github.io/apt/ ./&#34; \&#xA;    | tee /etc/apt/sources.list.d/lambertjamesd.list&#xA;&#xA;sudo apt install vtf2png sfz2n64 skeletool64 mpg123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Install image magic&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install imagemagick&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;You then need to add the following files from where portal is installed to the folder &lt;code&gt;vpk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;portal_pak_000.vpk  &#xA;portal_pak_001.vpk  &#xA;portal_pak_002.vpk  &#xA;portal_pak_003.vpk  &#xA;portal_pak_004.vpk  &#xA;portal_pak_005.vpk  &#xA;portal_pak_dir.vpk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally run &lt;code&gt;make&lt;/code&gt; to build the project.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Build with Docker&lt;/h2&gt; &#xA;&lt;p&gt;Build the docker image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build . -t portal64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Then build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set the environment variable&#xA;BLENDER_3_0=/blender/blender&#xA;&#xA;# Build using docker&#xA;docker run \&#xA;    -v /home/james/Blender/blender-2.93.1-linux-x64:/blender \&#xA;    -e BLENDER_3_0 -v /home/james/portal/portal64/vpk:/usr/src/app/vpk \&#xA;    -t -v /home/james/portal/portal64/docker-output:/usr/src/app/build portal64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Where &lt;code&gt;/home/james/Blender/blender-2.93.1-linux-x64&lt;/code&gt; is the folder where Blender is located.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/home/james/portal/portal64/vpk&lt;/code&gt; is the folder where the portal &lt;code&gt;*.vpk&lt;/code&gt; files are located.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/home/james/portal/portal64/docker-output&lt;/code&gt; is where you want the output of the build to locate &lt;code&gt;portal.z64&lt;/code&gt; will be put into this folder.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Current TODO list&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; stop looping sounds betwen levels&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; calculateBarycentricCoords when two points are the same&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Z buffer allocation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release grabbed objects when line of sight is cut&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Correct elevator timing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Elevator and door sounds&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Presort portal gun polygon order&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cube dispenser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Signage should not always be on&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Camera shake&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; level transition jump&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; collide player with dynamic objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Render objects intersecting portals differently&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sliding against walls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; It is too easy to fall through portals&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Change the way player standing logic works&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; crash on level transition&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prevent Glados from talking over herself&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NAN in overlap&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Turn level indicator board into a game object&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; kill plane&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Portal gun pedistal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix portal overlapping bug&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix bug where opening a portal can trigger a teleportation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement level transitions&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>libbpf/libbpf</title>
    <updated>2022-10-15T01:35:22Z</updated>
    <id>tag:github.com,2022-10-15:/libbpf/libbpf</id>
    <link href="https://github.com/libbpf/libbpf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated upstream mirror for libbpf stand-alone build.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;assets/libbpf-logo-sideways-darkbg.png&#34; width=&#34;40%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/libbpf/libbpf/master/assets/libbpf-logo-sideways.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1&gt;libbpf &lt;a href=&#34;https://github.com/libbpf/libbpf/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/libbpf/libbpf/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Builds &amp;amp; Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/libbpf/libbpf/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/libbpf/libbpf.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/libbpf&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/18195.svg?sanitize=true&#34; alt=&#34;Coverity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#libbpf&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/libbpf.svg?sanitize=true&#34; alt=&#34;OSS-Fuzz Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is the official home of the libbpf library.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please use this Github repository for building and packaging libbpf and when using it in your projects through Git submodule.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libbpf &lt;em&gt;authoritative source code&lt;/em&gt; is developed as part of &lt;a href=&#34;https://kernel.googlesource.com/pub/scm/linux/kernel/git/bpf/bpf-next&#34;&gt;bpf-next Linux source tree&lt;/a&gt; under &lt;code&gt;tools/lib/bpf&lt;/code&gt; subdirectory and is periodically synced to Github. As such, all the libbpf changes should be sent to &lt;a href=&#34;http://vger.kernel.org/vger-lists.html#bpf&#34;&gt;BPF mailing list&lt;/a&gt;, please don&#39;t open PRs here unless you are changing Github-specific parts of libbpf (e.g., Github-specific Makefile).&lt;/p&gt; &#xA;&lt;h1&gt;Libbpf and general BPF usage questions&lt;/h1&gt; &#xA;&lt;p&gt;Libbpf documentation can be found &lt;a href=&#34;https://libbpf.readthedocs.io/en/latest/api.html&#34;&gt;here&lt;/a&gt;. It&#39;s an ongoing effort and has ways to go, but please take a look and consider contributing as well.&lt;/p&gt; &#xA;&lt;p&gt;Please check out &lt;a href=&#34;https://github.com/libbpf/libbpf-bootstrap&#34;&gt;libbpf-bootstrap&lt;/a&gt; and &lt;a href=&#34;https://nakryiko.com/posts/libbpf-bootstrap/&#34;&gt;the companion blog post&lt;/a&gt; for the examples of building BPF applications with libbpf. &lt;a href=&#34;https://github.com/iovisor/bcc/tree/master/libbpf-tools&#34;&gt;libbpf-tools&lt;/a&gt; are also a good source of the real-world libbpf-based tracing tools.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://nakryiko.com/posts/bpf-core-reference-guide/&#34;&gt;&#34;BPF CO-RE reference guide&#34;&lt;/a&gt; for the coverage of practical aspects of building BPF CO-RE applications and &lt;a href=&#34;https://nakryiko.com/posts/bpf-portability-and-co-re/&#34;&gt;&#34;BPF CO-RE&#34;&lt;/a&gt; for general introduction into BPF portability issues and BPF CO-RE origins.&lt;/p&gt; &#xA;&lt;p&gt;All general BPF questions, including kernel functionality, libbpf APIs and their application, should be sent to &lt;a href=&#34;mailto:bpf@vger.kernel.org&#34;&gt;bpf@vger.kernel.org&lt;/a&gt; mailing list. You can subscribe to it &lt;a href=&#34;http://vger.kernel.org/vger-lists.html#bpf&#34;&gt;here&lt;/a&gt; and search its archive &lt;a href=&#34;https://lore.kernel.org/bpf/&#34;&gt;here&lt;/a&gt;. Please search the archive before asking new questions. It very well might be that this was already addressed or answered before.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:bpf@vger.kernel.org&#34;&gt;bpf@vger.kernel.org&lt;/a&gt; is monitored by many more people and they will happily try to help you with whatever issue you have. This repository&#39;s PRs and issues should be opened only for dealing with issues pertaining to specific way this libbpf mirror repo is set up and organized.&lt;/p&gt; &#xA;&lt;h1&gt;Building libbpf&lt;/h1&gt; &#xA;&lt;p&gt;libelf is an internal dependency of libbpf and thus it is required to link against and must be installed on the system for applications to work. pkg-config is used by default to find libelf, and the program called can be overridden with &lt;code&gt;PKG_CONFIG&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If using &lt;code&gt;pkg-config&lt;/code&gt; at build time is not desired, it can be disabled by setting &lt;code&gt;NO_PKG_CONFIG=1&lt;/code&gt; when calling make.&lt;/p&gt; &#xA;&lt;p&gt;To build both static libbpf.a and shared libbpf.so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd src&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build only static libbpf.a library in directory build/ and install them together with libbpf headers in a staging directory root/:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd src&#xA;$ mkdir build root&#xA;$ BUILD_STATIC_ONLY=y OBJDIR=build DESTDIR=root make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build both static libbpf.a and shared libbpf.so against a custom libelf dependency installed in /build/root/ and install them together with libbpf headers in a build directory /build/root/:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd src&#xA;$ PKG_CONFIG_PATH=/build/root/lib64/pkgconfig DESTDIR=/build/root make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;BPF CO-RE (Compile Once – Run Everywhere)&lt;/h1&gt; &#xA;&lt;p&gt;Libbpf supports building BPF CO-RE-enabled applications, which, in contrast to &lt;a href=&#34;https://github.com/iovisor/bcc/&#34;&gt;BCC&lt;/a&gt;, do not require Clang/LLVM runtime being deployed to target servers and doesn&#39;t rely on kernel-devel headers being available.&lt;/p&gt; &#xA;&lt;p&gt;It does rely on kernel to be built with &lt;a href=&#34;https://www.kernel.org/doc/html/latest/bpf/btf.html&#34;&gt;BTF type information&lt;/a&gt;, though. Some major Linux distributions come with kernel BTF already built in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora 31+&lt;/li&gt; &#xA; &lt;li&gt;RHEL 8.2+&lt;/li&gt; &#xA; &lt;li&gt;OpenSUSE Tumbleweed (in the next release, as of 2020-06-04)&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux (from kernel 5.7.1.arch1-1)&lt;/li&gt; &#xA; &lt;li&gt;Manjaro (from kernel 5.4 if compiled after 2021-06-18)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20.10&lt;/li&gt; &#xA; &lt;li&gt;Debian 11 (amd64/arm64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your kernel doesn&#39;t come with BTF built-in, you&#39;ll need to build custom kernel. You&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pahole&lt;/code&gt; 1.16+ tool (part of &lt;code&gt;dwarves&lt;/code&gt; package), which performs DWARF to BTF conversion;&lt;/li&gt; &#xA; &lt;li&gt;kernel built with &lt;code&gt;CONFIG_DEBUG_INFO_BTF=y&lt;/code&gt; option;&lt;/li&gt; &#xA; &lt;li&gt;you can check if your kernel has BTF built-in by looking for &lt;code&gt;/sys/kernel/btf/vmlinux&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ls -la /sys/kernel/btf/vmlinux&#xA;-r--r--r--. 1 root root 3541561 Jun  2 18:16 /sys/kernel/btf/vmlinux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To develop and build BPF programs, you&#39;ll need Clang/LLVM 10+. The following distributions have Clang/LLVM 10+ packaged by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora 32+&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20.04+&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20.10 (LLVM 11)&lt;/li&gt; &#xA; &lt;li&gt;Debian 11 (LLVM 11)&lt;/li&gt; &#xA; &lt;li&gt;Alpine 3.13+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Otherwise, please make sure to update it on your system.&lt;/p&gt; &#xA;&lt;p&gt;The following resources are useful to understand what BPF CO-RE is and how to use it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nakryiko.com/posts/bpf-core-reference-guide/&#34;&gt;BPF CO-RE reference guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nakryiko.com/posts/bpf-portability-and-co-re/&#34;&gt;BPF Portability and CO-RE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/&#34;&gt;HOWTO: BCC to libbpf conversion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iovisor/bcc/tree/master/libbpf-tools&#34;&gt;libbpf-tools in BCC repo&lt;/a&gt; contain lots of real-world tools converted from BCC to BPF CO-RE. Consider converting some more to both contribute to the BPF community and gain some more experience with it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Distributions&lt;/h1&gt; &#xA;&lt;p&gt;Distributions packaging libbpf from this mirror:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://src.fedoraproject.org/rpms/libbpf&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packages.gentoo.org/packages/dev-libs/libbpf&#34;&gt;Gentoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packages.debian.org/source/sid/libbpf&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.archlinux.org/packages/extra/x86_64/libbpf/&#34;&gt;Arch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packages.ubuntu.com/source/impish/libbpf&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=libbpf&#34;&gt;Alpine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Benefits of packaging from the mirror over packaging from kernel sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consistent versioning across distributions.&lt;/li&gt; &#xA; &lt;li&gt;No ties to any specific kernel, transparent handling of older kernels. Libbpf is designed to be kernel-agnostic and work across multitude of kernel versions. It has built-in mechanisms to gracefully handle older kernels, that are missing some of the features, by working around or gracefully degrading functionality. Thus libbpf is not tied to a specific kernel version and can/should be packaged and versioned independently.&lt;/li&gt; &#xA; &lt;li&gt;Continuous integration testing via &lt;a href=&#34;https://github.com/libbpf/libbpf/actions&#34;&gt;GitHub Actions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Static code analysis via &lt;a href=&#34;https://lgtm.com/projects/g/libbpf/libbpf&#34;&gt;LGTM&lt;/a&gt; and &lt;a href=&#34;https://scan.coverity.com/projects/libbpf&#34;&gt;Coverity&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Package dependencies of libbpf, package names may vary across distros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;libelf&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/libbpf/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/libbpf.svg?sanitize=true&#34; alt=&#34;libbpf distro packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;bpf-next to Github sync&lt;/h1&gt; &#xA;&lt;p&gt;All the gory details of syncing can be found in &lt;code&gt;scripts/sync-kernel.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;Some header files in this repo (&lt;code&gt;include/linux/*.h&lt;/code&gt;) are reduced versions of their counterpart files at &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git/&#34;&gt;bpf-next&lt;/a&gt;&#39;s &lt;code&gt;tools/include/linux/*.h&lt;/code&gt; to make compilation successful.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This work is dual-licensed under BSD 2-clause license and GNU LGPL v2.1 license. You can choose between one of them if you use this work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SPDX-License-Identifier: BSD-2-Clause OR LGPL-2.1&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>