<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:26:08Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nihui/ruapu</title>
    <updated>2024-02-25T01:26:08Z</updated>
    <id>tag:github.com,2024-02-25:/nihui/ruapu</id>
    <link href="https://github.com/nihui/ruapu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Detect CPU features with single-file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ruapu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/nihui/ruapu?style=for-the-badge&#34; alt=&#34;GitHub License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/nihui/ruapu/ci.yml?style=for-the-badge&#34; alt=&#34;GitHub Actions Workflow Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect CPU ISA features with single-file&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;CPU&lt;/td&gt;&#xA;   &lt;td&gt;✅ x86, x86-64&lt;br&gt;✅ arm, aarch64&lt;br&gt;✅ mips&lt;br&gt;✅ powerpc&lt;br&gt;✅ s390x&lt;br&gt;✅ loongarch&lt;br&gt;✅ risc-v&lt;/td&gt;&#xA;   &lt;td rowspan=&#34;3&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define RUAPU_IMPLEMENTATION&#xA;#include &#34;ruapu.h&#34;&#xA;&#xA;int main()&#xA;{&#xA;    // initialize ruapu once&#xA;    ruapu_init();&#xA;&#xA;    // now, tell me if this cpu has avx2&#xA;    int has_avx2 = ruapu_supports(&#34;avx2&#34;);&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;OS&lt;/td&gt;&#xA;   &lt;td&gt;✅ Windows&lt;br&gt;✅ Linux&lt;br&gt;✅ macOS&lt;br&gt;✅ Android&lt;br&gt;✅ iOS&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Compiler&lt;/td&gt;&#xA;   &lt;td&gt;✅ GCC&lt;br&gt;✅ Clang&lt;br&gt;✅ MSVC&lt;br&gt;✅ MinGW&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Let&#39;s ruapu&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;p&gt;Compile ruapu test program&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# GCC / MinGW&#xA;gcc main.c -o ruapu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Clang&#xA;clang main.c -o ruapu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# MSVC&#xA;cl.exe /Fe: ruapu.exe main.c&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;Run ruapu in command line&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ruapu &#xA;mmx = 1&#xA;sse = 1&#xA;sse2 = 1&#xA;sse3 = 1&#xA;ssse3 = 1&#xA;sse41 = 1&#xA;sse42 = 1&#xA;sse4a = 1&#xA;xop = 0&#xA;... more lines omitted ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Github-hosted runner result (Linux)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;mmx = 1&#xA;sse = 1&#xA;sse2 = 1&#xA;sse3 = 1&#xA;ssse3 = 1&#xA;sse41 = 1&#xA;sse42 = 1&#xA;sse4a = 1&#xA;xop = 0&#xA;avx = 1&#xA;f16c = 1&#xA;fma = 1&#xA;avx2 = 1&#xA;avx512f = 0&#xA;avx512bw = 0&#xA;avx512cd = 0&#xA;avx512dq = 0&#xA;avx512vl = 0&#xA;avx512vnni = 0&#xA;avx512bf16 = 0&#xA;avx512ifma = 0&#xA;avx512vbmi = 0&#xA;avx512vbmi2 = 0&#xA;avx512fp16 = 0&#xA;avxvnni = 0&#xA;avxvnniint8 = 0&#xA;avxifma = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Github-hosted runner result (macOS)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;mmx = 1&#xA;sse = 1&#xA;sse2 = 1&#xA;sse3 = 1&#xA;ssse3 = 1&#xA;sse41 = 1&#xA;sse42 = 1&#xA;sse4a = 0&#xA;xop = 0&#xA;avx = 1&#xA;f16c = 1&#xA;fma = 1&#xA;avx2 = 1&#xA;avx512f = 0&#xA;avx512bw = 0&#xA;avx512cd = 0&#xA;avx512dq = 0&#xA;avx512vl = 0&#xA;avx512vnni = 0&#xA;avx512bf16 = 0&#xA;avx512ifma = 0&#xA;avx512vbmi = 0&#xA;avx512vbmi2 = 0&#xA;avx512fp16 = 0&#xA;avxvnni = 0&#xA;avxvnniint8 = 0&#xA;avxifma = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Github-hosted runner result (macOS M1)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;neon = 1&#xA;vfpv4 = 1&#xA;cpuid = 0&#xA;asimdhp = 1&#xA;asimddp = 1&#xA;asimdfhm = 1&#xA;bf16 = 0&#xA;i8mm = 0&#xA;sve = 0&#xA;sve2 = 0&#xA;svebf16 = 0&#xA;svei8mm = 0&#xA;svef32mm = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Github-hosted runner result (Windows)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;mmx = 1&#xA;sse = 1&#xA;sse2 = 1&#xA;sse3 = 1&#xA;ssse3 = 1&#xA;sse41 = 1&#xA;sse42 = 1&#xA;sse4a = 1&#xA;xop = 0&#xA;avx = 1&#xA;f16c = 1&#xA;fma = 1&#xA;avx2 = 1&#xA;avx512f = 0&#xA;avx512bw = 0&#xA;avx512cd = 0&#xA;avx512dq = 0&#xA;avx512vl = 0&#xA;avx512vnni = 0&#xA;avx512bf16 = 0&#xA;avx512ifma = 0&#xA;avx512vbmi = 0&#xA;avx512vbmi2 = 0&#xA;avx512fp16 = 0&#xA;avxvnni = 0&#xA;avxvnniint8 = 0&#xA;avxifma = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detect &lt;strong&gt;CPU ISA with single-file&lt;/strong&gt;    &lt;em&gt;&lt;code&gt;sse2&lt;/code&gt;, &lt;code&gt;avx&lt;/code&gt;, &lt;code&gt;avx512f&lt;/code&gt;, &lt;code&gt;neon&lt;/code&gt;, etc.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Detect &lt;strong&gt;vendor extended ISA&lt;/strong&gt;     &lt;em&gt;apple &lt;code&gt;amx&lt;/code&gt;, risc-v vendor ISA, etc.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Detect &lt;strong&gt;richer ISA on Windows ARM&lt;/strong&gt;   &lt;em&gt;&lt;code&gt;IsProcessorFeaturePresent()&lt;/code&gt; returns little ISA information&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Detect &lt;strong&gt;&lt;code&gt;x86-avx512&lt;/code&gt; on macOS correctly&lt;/strong&gt;  &lt;em&gt;macOS hides it in &lt;code&gt;cpuid&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Detect &lt;strong&gt;new CPU&#39;s ISA on old systems&lt;/strong&gt;  &lt;em&gt;they are usually not exposed in &lt;code&gt;auxv&lt;/code&gt; or &lt;code&gt;MISA&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Detect &lt;strong&gt;CPU hidden ISA&lt;/strong&gt;        &lt;em&gt;&lt;code&gt;fma4&lt;/code&gt; on zen1, ISA in hypervisor, etc.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported ISA &lt;em&gt; (more is comming ... :)&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CPU&lt;/th&gt; &#xA;   &lt;th&gt;ISA&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mmx&lt;/code&gt; &lt;code&gt;sse&lt;/code&gt; &lt;code&gt;sse2&lt;/code&gt; &lt;code&gt;sse3&lt;/code&gt; &lt;code&gt;ssse3&lt;/code&gt; &lt;code&gt;sse41&lt;/code&gt; &lt;code&gt;sse42&lt;/code&gt; &lt;code&gt;sse4a&lt;/code&gt; &lt;code&gt;xop&lt;/code&gt; &lt;code&gt;avx&lt;/code&gt; &lt;code&gt;f16c&lt;/code&gt; &lt;code&gt;fma&lt;/code&gt; &lt;code&gt;fma4&lt;/code&gt; &lt;code&gt;avx2&lt;/code&gt; &lt;code&gt;avx512f&lt;/code&gt; &lt;code&gt;avx512bw&lt;/code&gt; &lt;code&gt;avx512cd&lt;/code&gt; &lt;code&gt;avx512dq&lt;/code&gt; &lt;code&gt;avx512vl&lt;/code&gt; &lt;code&gt;avx512vnni&lt;/code&gt; &lt;code&gt;avx512bf16&lt;/code&gt; &lt;code&gt;avx512ifma&lt;/code&gt; &lt;code&gt;avx512vbmi&lt;/code&gt; &lt;code&gt;avx512vbmi2&lt;/code&gt; &lt;code&gt;avx512fp16&lt;/code&gt; &lt;code&gt;avxvnni&lt;/code&gt; &lt;code&gt;avxvnniint8&lt;/code&gt; &lt;code&gt;avxifma&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;edsp&lt;/code&gt; &lt;code&gt;neon&lt;/code&gt; &lt;code&gt;vfpv4&lt;/code&gt; &lt;code&gt;idiv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;aarch64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;neon&lt;/code&gt; &lt;code&gt;vfpv4&lt;/code&gt; &lt;code&gt;cpuid&lt;/code&gt; &lt;code&gt;asimdrdm&lt;/code&gt; &lt;code&gt;asimdhp&lt;/code&gt; &lt;code&gt;asimddp&lt;/code&gt; &lt;code&gt;asimdfhm&lt;/code&gt; &lt;code&gt;bf16&lt;/code&gt; &lt;code&gt;i8mm&lt;/code&gt; &lt;code&gt;mte&lt;/code&gt; &lt;code&gt;sve&lt;/code&gt; &lt;code&gt;sve2&lt;/code&gt; &lt;code&gt;svebf16&lt;/code&gt; &lt;code&gt;svei8mm&lt;/code&gt; &lt;code&gt;svef32mm&lt;/code&gt; &lt;code&gt;sha3&lt;/code&gt; &lt;code&gt;sha512&lt;/code&gt; &lt;code&gt;sm3&lt;/code&gt; &lt;code&gt;sm4&lt;/code&gt; &lt;code&gt;amx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;mips&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;msa&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;powerpc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vsx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zvector&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;loongarch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsx&lt;/code&gt; &lt;code&gt;lasx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;risc-v&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i&lt;/code&gt; &lt;code&gt;m&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; &lt;code&gt;d&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; &lt;code&gt;zfa&lt;/code&gt; &lt;code&gt;zfh&lt;/code&gt; &lt;code&gt;zfhmin&lt;/code&gt; &lt;code&gt;zicsr&lt;/code&gt; &lt;code&gt;zifencei&lt;/code&gt; &lt;code&gt;zmmul&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Techniques inside ruapu&lt;/h2&gt; &#xA;&lt;p&gt;ruapu is implemented in C language to ensure the widest possible portability.&lt;/p&gt; &#xA;&lt;p&gt;ruapu determines whether the CPU supports certain instruction sets by trying to execute instructions and detecting whether an &lt;code&gt;Illegal Instruction&lt;/code&gt; exception occurs. ruapu does not rely on the cpuid instructions and registers related to the CPU architecture, nor does it rely on the &lt;code&gt;MISA&lt;/code&gt; information and system calls of the operating system. This can help us get more detailed CPU ISA information.&lt;/p&gt; &#xA;&lt;h2&gt;Repos that use ruapu&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/ncnn&#34;&gt;ncnn&lt;/a&gt;  &lt;em&gt;High-performance neural network inference framework&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ling0322/libllm&#34;&gt;libllm&lt;/a&gt;  &lt;em&gt;Efficient inference of large language models&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nihui&#34;&gt;@nihui&lt;/a&gt;  &lt;em&gt;Write the initial POC code and ruapu maintainer&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kernelbin&#34;&gt;@kernelbin&lt;/a&gt;  &lt;em&gt;Implement exception handling for Windows&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zchrissirhcz&#34;&gt;@zchrissirhcz&lt;/a&gt;  &lt;em&gt;Detect x86 FMA4&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MollySophia&#34;&gt;@MollySophia&lt;/a&gt;  &lt;em&gt;Fix C++ export symbol&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/strongtz&#34;&gt;@strongtz&lt;/a&gt;  &lt;em&gt;Detect more aarch64 ISA&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monkeyking&#34;&gt;@monkeyking&lt;/a&gt;  &lt;em&gt;Detect apple arm64 AMX&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junchao-loongson&#34;&gt;@junchao-loongson&lt;/a&gt;  &lt;em&gt;Add loongarch support&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ziyao233&#34;&gt;@ziyao233&lt;/a&gt;  &lt;em&gt;Detect more risc-v ISA&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt;</summary>
  </entry>
</feed>