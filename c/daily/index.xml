<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:37:20Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>floooh/sokol</title>
    <updated>2022-06-05T01:37:20Z</updated>
    <id>tag:github.com,2022-06-05:/floooh/sokol</id>
    <link href="https://github.com/floooh/sokol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;minimal cross-platform standalone C headers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sokol&lt;/h1&gt; &#xA;&lt;p&gt;Simple &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/stb_howto.txt&#34;&gt;STB-style&lt;/a&gt; cross-platform libraries for C and C++, written in C.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/CHANGELOG.md&#34;&gt;&lt;strong&gt;See what&#39;s new&lt;/strong&gt;&lt;/a&gt; (&lt;strong&gt;08-Feb-2022&lt;/strong&gt; sokol_imgui.h has been updated for Dear ImGui v1.87 (support the new evented IO system, and remove the self-rolled input buffering in sokol_imgui.h)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/gen_bindings.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/gen_bindings.yml/badge.svg?sanitize=true&#34; alt=&#34;Bindings&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-zig/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-zig/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/sokol-html5/index.html&#34;&gt;Live Samples&lt;/a&gt; via WASM (&lt;a href=&#34;https://github.com/floooh/sokol-samples&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/doom-sokol/&#34;&gt;Doom Shareware&lt;/a&gt; ported to the Sokol headers (&lt;a href=&#34;https://github.com/floooh/doom-sokol&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/edubart/sokol_gp&#34;&gt;sokol_gp.h&lt;/a&gt; a 2D shape drawing library on top of sokol_gfx.h&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.geertarien.com/learnopengl-examples-html5/&#34;&gt;LearnOpenGL examples ported to sokol-gfx&lt;/a&gt; by @geertarien (cool stuff!)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/cimgui-sokol-starterkit&#34;&gt;Dear ImGui starterkit&lt;/a&gt; a self-contained starterkit for writing Dear ImGui apps in C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/qoiview&#34;&gt;qoiview&lt;/a&gt; a basic viewer for the new QOI image file format&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/tiny8bit/&#34;&gt;Tiny 8-bit emulators&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &#39;single-file&#39; &lt;a href=&#34;https://github.com/floooh/pacman.c/&#34;&gt;Pacman clone in C99&lt;/a&gt;, also available in &lt;a href=&#34;https://github.com/floooh/pacman.zig/&#34;&gt;Zig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://mgerdes.github.io/minigolf.html&#34;&gt;Minigolf game&lt;/a&gt; (&lt;a href=&#34;https://github.com/mgerdes/minigolf&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dealers-dungeon.com/demo/&#34;&gt;&#39;Dealer&#39;s Dungeon&#39;&lt;/a&gt; (&lt;a href=&#34;https://dealers-dungeon.com/demo/?q=3&#34;&gt;lower graphics quality&lt;/a&gt;, &lt;a href=&#34;https://github.com/bqqbarbhg/spear&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol-tools&#34;&gt;Command line tools&lt;/a&gt; (shader compiler)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol-samples#how-to-build-without-a-build-system&#34;&gt;How to build without a build system&lt;/a&gt;: useful details for integrating the Sokol headers into your own project with your favourite C/C++ build system&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_gfx.h&#34;&gt;&lt;strong&gt;sokol_gfx.h&lt;/strong&gt;&lt;/a&gt;: 3D-API wrapper (GL + Metal + D3D11)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_app.h&#34;&gt;&lt;strong&gt;sokol_app.h&lt;/strong&gt;&lt;/a&gt;: app framework wrapper (entry + window + 3D-context + input)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_time.h&#34;&gt;&lt;strong&gt;sokol_time.h&lt;/strong&gt;&lt;/a&gt;: time measurement&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_audio.h&#34;&gt;&lt;strong&gt;sokol_audio.h&lt;/strong&gt;&lt;/a&gt;: minimal buffer-streaming audio playback&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_fetch.h&#34;&gt;&lt;strong&gt;sokol_fetch.h&lt;/strong&gt;&lt;/a&gt;: asynchronous data streaming from HTTP and local filesystem&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_args.h&#34;&gt;&lt;strong&gt;sokol_args.h&lt;/strong&gt;&lt;/a&gt;: unified cmdline/URL arg parser for web and native apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Utility libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_imgui.h&#34;&gt;&lt;strong&gt;sokol_imgui.h&lt;/strong&gt;&lt;/a&gt;: sokol_gfx.h rendering backend for &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_nuklear.h&#34;&gt;&lt;strong&gt;sokol_nuklear.h&lt;/strong&gt;&lt;/a&gt;: sokol_gfx.h rendering backend for &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear&#34;&gt;Nuklear&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_gl.h&#34;&gt;&lt;strong&gt;sokol_gl.h&lt;/strong&gt;&lt;/a&gt;: OpenGL 1.x style immediate-mode rendering API on top of sokol_gfx.h&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_fontstash.h&#34;&gt;&lt;strong&gt;sokol_fontstash.h&lt;/strong&gt;&lt;/a&gt;: sokol_gl.h rendering backend for &lt;a href=&#34;https://github.com/memononen/fontstash&#34;&gt;fontstash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_gfx_imgui.h&#34;&gt;&lt;strong&gt;sokol_gfx_imgui.h&lt;/strong&gt;&lt;/a&gt;: debug-inspection UI for sokol_gfx.h (implemented with Dear ImGui)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_debugtext.h&#34;&gt;&lt;strong&gt;sokol_debugtext.h&lt;/strong&gt;&lt;/a&gt;: a simple text renderer using vintage home computer fonts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_memtrack.h&#34;&gt;&lt;strong&gt;sokol_memtrack.h&lt;/strong&gt;&lt;/a&gt;: easily track memory allocations in sokol headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_shape.h&#34;&gt;&lt;strong&gt;sokol_shape.h&lt;/strong&gt;&lt;/a&gt;: generate simple shapes and plug them into sokol-gfx resource creation structs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_color.h&#34;&gt;&lt;strong&gt;sokol_color.h&lt;/strong&gt;&lt;/a&gt;: X11 style color constants and functions for creating sg_color objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;WebAssembly is a &#39;first-class citizen&#39;, one important motivation for the Sokol headers is to provide a collection of cross-platform APIs with a minimal footprint on the web platform while still being useful.&lt;/p&gt; &#xA;&lt;p&gt;The core headers are standalone and can be used independently from each other.&lt;/p&gt; &#xA;&lt;h3&gt;Why C:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;easier integration with other languages&lt;/li&gt; &#xA; &lt;li&gt;easier integration into other projects&lt;/li&gt; &#xA; &lt;li&gt;adds only minimal size overhead to executables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A blog post with more background info: &lt;a href=&#34;http://floooh.github.io/2017/07/29/sokol-gfx-tour.html&#34;&gt;A Tour of sokol_gfx.h&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;sokol_gfx.h:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple, modern wrapper around GLES2/WebGL, GLES3/WebGL2, GL3.3, D3D11 and Metal&lt;/li&gt; &#xA; &lt;li&gt;buffers, images, shaders, pipeline-state-objects and render-passes&lt;/li&gt; &#xA; &lt;li&gt;does &lt;em&gt;not&lt;/em&gt; handle window creation or 3D API context initialization&lt;/li&gt; &#xA; &lt;li&gt;does &lt;em&gt;not&lt;/em&gt; provide shader dialect cross-translation (&lt;strong&gt;BUT&lt;/strong&gt; there&#39;s now an &#39;official&#39; shader-cross-compiler solution which seamlessly integrates with sokol_gfx.h and IDEs: &lt;a href=&#34;https://github.com/floooh/sokol-tools/raw/master/docs/sokol-shdc.md&#34;&gt;see here for details&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A triangle in C99 with GLFW:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define SOKOL_IMPL&#xA;#define SOKOL_GLCORE33&#xA;#include &#34;sokol_gfx.h&#34;&#xA;#define GLFW_INCLUDE_NONE&#xA;#include &#34;GLFW/glfw3.h&#34;&#xA;&#xA;int main() {&#xA;&#xA;    /* create window and GL context via GLFW */&#xA;    glfwInit();&#xA;    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);&#xA;    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);&#xA;    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);&#xA;    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);&#xA;    GLFWwindow* w = glfwCreateWindow(640, 480, &#34;Sokol Triangle GLFW&#34;, 0, 0);&#xA;    glfwMakeContextCurrent(w);&#xA;    glfwSwapInterval(1);&#xA;&#xA;    /* setup sokol_gfx */&#xA;    sg_setup(&amp;amp;(sg_desc){0});&#xA;&#xA;    /* a vertex buffer */&#xA;    const float vertices[] = {&#xA;        // positions            // colors&#xA;         0.0f,  0.5f, 0.5f,     1.0f, 0.0f, 0.0f, 1.0f,&#xA;         0.5f, -0.5f, 0.5f,     0.0f, 1.0f, 0.0f, 1.0f,&#xA;        -0.5f, -0.5f, 0.5f,     0.0f, 0.0f, 1.0f, 1.0f&#xA;    };&#xA;    sg_buffer vbuf = sg_make_buffer(&amp;amp;(sg_buffer_desc){&#xA;        .data = SG_RANGE(vertices)&#xA;    });&#xA;&#xA;    /* a shader */&#xA;    sg_shader shd = sg_make_shader(&amp;amp;(sg_shader_desc){&#xA;        .vs.source =&#xA;            &#34;#version 330\n&#34;&#xA;            &#34;layout(location=0) in vec4 position;\n&#34;&#xA;            &#34;layout(location=1) in vec4 color0;\n&#34;&#xA;            &#34;out vec4 color;\n&#34;&#xA;            &#34;void main() {\n&#34;&#xA;            &#34;  gl_Position = position;\n&#34;&#xA;            &#34;  color = color0;\n&#34;&#xA;            &#34;}\n&#34;,&#xA;        .fs.source =&#xA;            &#34;#version 330\n&#34;&#xA;            &#34;in vec4 color;\n&#34;&#xA;            &#34;out vec4 frag_color;\n&#34;&#xA;            &#34;void main() {\n&#34;&#xA;            &#34;  frag_color = color;\n&#34;&#xA;            &#34;}\n&#34;&#xA;    });&#xA;&#xA;    /* a pipeline state object (default render states are fine for triangle) */&#xA;    sg_pipeline pip = sg_make_pipeline(&amp;amp;(sg_pipeline_desc){&#xA;        .shader = shd,&#xA;        .layout = {&#xA;            .attrs = {&#xA;                [0].format=SG_VERTEXFORMAT_FLOAT3,&#xA;                [1].format=SG_VERTEXFORMAT_FLOAT4&#xA;            }&#xA;        }&#xA;    });&#xA;&#xA;    /* resource bindings */&#xA;    sg_bindings bind = {&#xA;        .vertex_buffers[0] = vbuf&#xA;    };&#xA;&#xA;    /* default pass action (clear to grey) */&#xA;    sg_pass_action pass_action = {0};&#xA;&#xA;    /* draw loop */&#xA;    while (!glfwWindowShouldClose(w)) {&#xA;        int cur_width, cur_height;&#xA;        glfwGetFramebufferSize(w, &amp;amp;cur_width, &amp;amp;cur_height);&#xA;        sg_begin_default_pass(&amp;amp;pass_action, cur_width, cur_height);&#xA;        sg_apply_pipeline(pip);&#xA;        sg_apply_bindings(&amp;amp;bind);&#xA;        sg_draw(0, 3, 1);&#xA;        sg_end_pass();&#xA;        sg_commit();&#xA;        glfwSwapBuffers(w);&#xA;        glfwPollEvents();&#xA;    }&#xA;&#xA;    /* cleanup */&#xA;    sg_shutdown();&#xA;    glfwTerminate();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_app.h&lt;/h1&gt; &#xA;&lt;p&gt;A minimal cross-platform application-wrapper library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;unified application entry&lt;/li&gt; &#xA; &lt;li&gt;single window or canvas for 3D rendering&lt;/li&gt; &#xA; &lt;li&gt;3D context initialization&lt;/li&gt; &#xA; &lt;li&gt;event-based keyboard, mouse and touch input&lt;/li&gt; &#xA; &lt;li&gt;supported platforms: Win32, MacOS, Linux (X11), iOS, WASM, Android, UWP&lt;/li&gt; &#xA; &lt;li&gt;supported 3D-APIs: GL3.3 (GLX/WGL), Metal, D3D11, GLES2/WebGL, GLES3/WebGL2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple clear-loop sample using sokol_app.h and sokol_gfx.h (does not include separate sokol.c/.m implementation file which is necessary to split the Objective-C code from the C code of the sample):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_gfx.h&#34;&#xA;#include &#34;sokol_app.h&#34;&#xA;#include &#34;sokol_glue.h&#34;&#xA;&#xA;sg_pass_action pass_action;&#xA;&#xA;void init(void) {&#xA;    sg_setup(&amp;amp;(sg_desc){&#xA;        .context = sapp_sgcontext()&#xA;    });&#xA;    pass_action = (sg_pass_action) {&#xA;        .colors[0] = { .action=SG_ACTION_CLEAR, .value={1.0f, 0.0f, 0.0f, 1.0f} }&#xA;    };&#xA;}&#xA;&#xA;void frame(void) {&#xA;    float g = pass_action.colors[0].value.g + 0.01f;&#xA;    pass_action.colors[0].value.g = (g &amp;gt; 1.0f) ? 0.0f : g;&#xA;    sg_begin_default_pass(&amp;amp;pass_action, sapp_width(), sapp_height());&#xA;    sg_end_pass();&#xA;    sg_commit();&#xA;}&#xA;&#xA;void cleanup(void) {&#xA;    sg_shutdown();&#xA;}&#xA;&#xA;sapp_desc sokol_main(int argc, char* argv[]) {&#xA;    return (sapp_desc){&#xA;        .init_cb = init,&#xA;        .frame_cb = frame,&#xA;        .cleanup_cb = cleanup,&#xA;        .width = 400,&#xA;        .height = 300,&#xA;        .window_title = &#34;Clear Sample&#34;,&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_audio.h&lt;/h1&gt; &#xA;&lt;p&gt;A minimal audio-streaming API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you provide a mono- or stereo-stream of 32-bit float samples which sokol_audio.h forwards into platform-specific backends&lt;/li&gt; &#xA; &lt;li&gt;two ways to provide the data: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;directly fill backend audio buffer from your callback function running in the audio thread&lt;/li&gt; &#xA;   &lt;li&gt;alternatively push small packets of audio data from your main loop, or a separate thread created by you&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;platform backends: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: WASAPI&lt;/li&gt; &#xA;   &lt;li&gt;macOS/iOS: CoreAudio&lt;/li&gt; &#xA;   &lt;li&gt;Linux: ALSA&lt;/li&gt; &#xA;   &lt;li&gt;emscripten: WebAudio + ScriptProcessorNode (doesn&#39;t use the emscripten-provided OpenAL or SDL Audio wrappers)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple mono square-wave generator using the callback model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// the sample callback, running in audio thread&#xA;static void stream_cb(float* buffer, int num_frames, int num_channels) {&#xA;    assert(1 == num_channels);&#xA;    static uint32_t count = 0;&#xA;    for (int i = 0; i &amp;lt; num_frames; i++) {&#xA;        buffer[i] = (count++ &amp;amp; (1&amp;lt;&amp;lt;3)) ? 0.5f : -0.5f;&#xA;    }&#xA;}&#xA;&#xA;int main() {&#xA;    // init sokol-audio with default params&#xA;    saudio_setup(&amp;amp;(saudio_desc){&#xA;        .stream_cb = stream_cb&#xA;    });&#xA;&#xA;    // run main loop&#xA;    ...&#xA;&#xA;    // shutdown sokol-audio&#xA;    saudio_shutdown();&#xA;    return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same code using the push-model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define BUF_SIZE (32)&#xA;int main() {&#xA;    // init sokol-audio with default params, no callback&#xA;    saudio_setup(&amp;amp;(saudio_desc){0});&#xA;    assert(saudio_channels() == 1);&#xA;&#xA;    // a small intermediate buffer so we don&#39;t need to push&#xA;    // individual samples, which would be quite inefficient&#xA;    float buf[BUF_SIZE];&#xA;    int buf_pos = 0;&#xA;    uint32_t count = 0;&#xA;&#xA;    // push samples from main loop&#xA;    bool done = false;&#xA;    while (!done) {&#xA;        // generate and push audio samples...&#xA;        int num_frames = saudio_expect();&#xA;        for (int i = 0; i &amp;lt; num_frames; i++) {&#xA;            // simple square wave generator&#xA;            buf[buf_pos++] = (count++ &amp;amp; (1&amp;lt;&amp;lt;3)) ? 0.5f : -0.5f;&#xA;            if (buf_pos == BUF_SIZE) {&#xA;                buf_pos = 0;&#xA;                saudio_push(buf, BUF_SIZE);&#xA;            }&#xA;        }&#xA;        // handle other per-frame stuff...&#xA;        ...&#xA;    }&#xA;&#xA;    // shutdown sokol-audio&#xA;    saudio_shutdown();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_fetch.h&lt;/h1&gt; &#xA;&lt;p&gt;Load entire files, or stream data asynchronously over HTTP (emscripten/wasm) or the local filesystem (all native platforms).&lt;/p&gt; &#xA;&lt;p&gt;Simple C99 example loading a file into a static buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_fetch.h&#34;&#xA;&#xA;static void response_callback(const sfetch_response*);&#xA;&#xA;#define MAX_FILE_SIZE (1024*1024)&#xA;static uint8_t buffer[MAX_FILE_SIZE];&#xA;&#xA;// application init&#xA;static void init(void) {&#xA;    ...&#xA;    // setup sokol-fetch with default config:&#xA;    sfetch_setup(&amp;amp;(sfetch_desc_t){0});&#xA;&#xA;    // start loading a file into a statically allocated buffer:&#xA;    sfetch_send(&amp;amp;(sfetch_request_t){&#xA;        .path = &#34;hello_world.txt&#34;,&#xA;        .callback = response_callback&#xA;        .buffer_ptr = buffer,&#xA;        .buffer_size = sizeof(buffer)&#xA;    });&#xA;}&#xA;&#xA;// per frame...&#xA;static void frame(void) {&#xA;    ...&#xA;    // need to call sfetch_dowork() once per frame to &#39;turn the gears&#39;:&#xA;    sfetch_dowork();&#xA;    ...&#xA;}&#xA;&#xA;// the response callback is where the interesting stuff happens:&#xA;static void response_callback(const sfetch_response_t* response) {&#xA;    if (response-&amp;gt;fetched) {&#xA;        // data has been loaded into the provided buffer, do something&#xA;        // with the data...&#xA;        const void* data = response-&amp;gt;buffer_ptr;&#xA;        uint64_t data_size = response-&amp;gt;fetched_size;&#xA;    }&#xA;    // the finished flag is set both on success and failure&#xA;    if (response-&amp;gt;failed) {&#xA;        // oops, something went wrong&#xA;        switch (response-&amp;gt;error_code) {&#xA;            SFETCH_ERROR_FILE_NOT_FOUND: ...&#xA;            SFETCH_ERROR_BUFFER_TOO_SMALL: ...&#xA;            ...&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// application shutdown&#xA;static void shutdown(void) {&#xA;    ...&#xA;    sfetch_shutdown();&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_time.h:&lt;/h1&gt; &#xA;&lt;p&gt;Simple cross-platform time measurement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_time.h&#34;&#xA;...&#xA;/* initialize sokol_time */&#xA;stm_setup();&#xA;&#xA;/* take start timestamp */&#xA;uint64_t start = stm_now();&#xA;&#xA;...some code to measure...&#xA;&#xA;/* compute elapsed time */&#xA;uint64_t elapsed = stm_since(start);&#xA;&#xA;/* convert to time units */&#xA;double seconds = stm_sec(elapsed);&#xA;double milliseconds = stm_ms(elapsed);&#xA;double microseconds = stm_us(elapsed);&#xA;double nanoseconds = stm_ns(elapsed);&#xA;&#xA;/* difference between 2 time stamps */&#xA;uint64_t start = stm_now();&#xA;...&#xA;uint64_t end = stm_now();&#xA;uint64_t elapsed = stm_diff(end, start);&#xA;&#xA;/* compute a &#39;lap time&#39; (e.g. for fps) */&#xA;uint64_t last_time = 0;&#xA;while (!done) {&#xA;    ...render something...&#xA;    double frame_time_ms = stm_ms(stm_laptime(&amp;amp;last_time));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_args.h&lt;/h1&gt; &#xA;&lt;p&gt;Unified argument parsing for web and native apps. Uses argc/argv on native platforms and the URL query string on the web.&lt;/p&gt; &#xA;&lt;p&gt;Example URL with one arg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4&#34;&gt;https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The same as command line app:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;kc85 type=kc85_4&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Parsed like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_args.h&#34;&#xA;&#xA;int main(int argc, char* argv[]) {&#xA;    sargs_setup(&amp;amp;(sargs_desc){ .argc=argc, .argv=argv });&#xA;    if (sargs_exists(&#34;type&#34;)) {&#xA;        if (sargs_equals(&#34;type&#34;, &#34;kc85_4&#34;)) {&#xA;            // start as KC85/4&#xA;        }&#xA;        else if (sargs_equals(&#34;type&#34;, &#34;kc85_3&#34;)) {&#xA;            // start as KC85/3&#xA;        }&#xA;        else {&#xA;            // start as KC85/2&#xA;        }&#xA;    }&#xA;    sargs_shutdown();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the sokol_args.h header for a more complete documentation, and the &lt;a href=&#34;https://floooh.github.io/tiny8bit/&#34;&gt;Tiny Emulators&lt;/a&gt; for more interesting usage examples.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arendst/Tasmota</title>
    <updated>2022-06-05T01:37:20Z</updated>
    <id>tag:github.com,2022-06-05:/arendst/Tasmota</id>
    <link href="https://github.com/arendst/Tasmota" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alternative firmware for ESP8266 with easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX. Full documentation at&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arendst/Tasmota/development/tools/logo/TASMOTA_FullLogo_Vector.svg?sanitize=true&#34; alt=&#34;Tasmota logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternative firmware for &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP8266&#34;&gt;ESP8266&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP32&#34;&gt;ESP32&lt;/a&gt; based devices with &lt;strong&gt;easy configuration using webUI, OTA updates, automation using timers or rules, expandability and entirely local control over MQTT, HTTP, Serial or KNX&lt;/strong&gt;. &lt;em&gt;Written for PlatformIO.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ota.tasmota.com/tasmota/release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/arendst/Tasmota.svg?sanitize=true&#34; alt=&#34;GitHub version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/arendst/Tasmota/total.svg?sanitize=true&#34; alt=&#34;GitHub download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/arendst/Tasmota/development/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/arendst/Tasmota.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Ks2Kzd4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/479389167382691863.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/arendst/Tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;In light of current events we like to support the people behind &lt;em&gt;PlatformIO Project&lt;/em&gt;, especially Ivan Kravets, and wish them the strength to help stop the war. See &lt;a href=&#34;https://community.platformio.org/t/platformio-is-ukrainian-project-please-help-us-stop-the-war/26330&#34;&gt;platformio-is-ukrainian-project-please-help-us-stop-the-war&lt;/a&gt; for what you can do.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Easy install&lt;/h2&gt; &#xA;&lt;p&gt;Easy initial installation of Tasmota can be performed using the &lt;a href=&#34;https://arendst.github.io/Tasmota-firmware/&#34;&gt;Tasmota WebInstaller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you like &lt;strong&gt;Tasmota&lt;/strong&gt;, give it a star, or fork it and contribute!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/arendst/Tasmota.svg?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/arendst/Tasmota.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/arendst/Tasmota/raw/master/RELEASENOTES.md&#34;&gt;RELEASENOTES.md&lt;/a&gt; for release information.&lt;/p&gt; &#xA;&lt;p&gt;Firmware binaries can be downloaded from &lt;a href=&#34;http://ota.tasmota.com/tasmota/release/&#34;&gt;http://ota.tasmota.com/tasmota/release/&lt;/a&gt; or &lt;a href=&#34;http://ota.tasmota.com/tasmota32/release/&#34;&gt;http://ota.tasmota.com/tasmota32/release/&lt;/a&gt; for ESP32 binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/development%20version-v11.1.x.x-blue.svg?sanitize=true&#34; alt=&#34;Dev Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://ota.tasmota.com/tasmota/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/download-development-yellow.svg?sanitize=true&#34; alt=&#34;Download Dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/actions/workflows/build_all_the_things.yml&#34;&gt;&lt;img src=&#34;https://github.com/arendst/Tasmota/actions/workflows/build_all_the_things.yml/badge.svg?sanitize=true&#34; alt=&#34;Tasmota CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arendst/Tasmota/actions/workflows/Tasmota_build_devel.yml&#34;&gt;&lt;img src=&#34;https://github.com/arendst/Tasmota/actions/workflows/Tasmota_build_devel.yml/badge.svg?sanitize=true&#34; alt=&#34;Build_development&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/arendst/Tasmota/development/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for detailed change information.&lt;/p&gt; &#xA;&lt;p&gt;Unless your Tasmota powered device exhibits a problem or you need to make use of a feature that is not available in the Tasmota version currently installed on your device, leave your device alone - it works so don&#39;t make unnecessary changes! If the release version (i.e., the master branch) exhibits unexpected behaviour for your device and configuration, you should upgrade to the latest development version instead to see if your problem is resolved as some bugs in previous releases or development builds may already have been resolved.&lt;/p&gt; &#xA;&lt;p&gt;Every commit made to the development branch, which is compiling successfuly, will post new binary files at &lt;a href=&#34;http://ota.tasmota.com/tasmota/&#34;&gt;http://ota.tasmota.com/tasmota/&lt;/a&gt; (this web address can be used for OTA updates too). It is important to note that these binaries are based on the current development codebase. These commits are tested as much as is possible and are typically quite stable. However, it is infeasible to test on the hundreds of different types of devices with all the available configuration options permitted.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is a chance, as with any upgrade, that the device may not function as expected. You must always account for the possibility that you may need to flash the device via the serial programming interface if the OTA upgrade fails. Even with the master release, you should always attempt to test the device or a similar prototype before upgrading a device which is in production or is hard to reach. And, as always, make a backup of the device configuration before beginning any firmware update.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;st&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;DANGER OF ELECTROCUTION&lt;/strong&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your device connects to mains electricity (AC power) there is danger of electrocution if not installed properly. If you don&#39;t know how to install it, please call an electrician (&lt;em&gt;&lt;strong&gt;Beware:&lt;/strong&gt;&lt;/em&gt; certain countries prohibit installation without a licensed electrician present). Remember: &lt;em&gt;&lt;strong&gt;SAFETY FIRST&lt;/strong&gt;&lt;/em&gt;. It is not worth the risk to yourself, your family and your home if you don&#39;t know exactly what you are doing. Never tinker or try to flash a device using the serial programming interface while it is connected to MAINS ELECTRICITY (AC power).&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t take any responsibility nor liability for using this software nor for the installation or any tips, advice, videos, etc. given by any member of this site or any related site.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;Please do not ask to add new devices unless it requires additional code for new features. If the device is not listed as a module, try using &lt;a href=&#34;https://tasmota.github.io/docs/Templates&#34;&gt;Templates&lt;/a&gt; first. If it is not listed in the &lt;a href=&#34;http://templates.blakadder.com&#34;&gt;Tasmota Device Templates Repository&lt;/a&gt; create your own &lt;a href=&#34;https://tasmota.github.io/docs/Templates#creating-your-template&#34;&gt;Template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;Download one of the released binaries from &lt;a href=&#34;http://ota.tasmota.com/tasmota/release/&#34;&gt;http://ota.tasmota.com/tasmota/release/&lt;/a&gt; or &lt;a href=&#34;http://ota.tasmota.com/tasmota32/release/&#34;&gt;http://ota.tasmota.com/tasmota32/release/&lt;/a&gt; and flash it to your hardware &lt;a href=&#34;https://tasmota.github.io/docs/Getting-Started&#34;&gt;using our installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Important User Compilation Information&lt;/h2&gt; &#xA;&lt;p&gt;If you want to compile Tasmota yourself keep in mind the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For ESP8285 based devices only Flash Mode &lt;strong&gt;DOUT&lt;/strong&gt; is supported. Do not use Flash Mode DIO / QIO / QOUT as it might seem to brick your device.&lt;/li&gt; &#xA; &lt;li&gt;For ESP8285 based devices Tasmota uses a 1M linker script WITHOUT spiffs &lt;strong&gt;1M (no SPIFFS)&lt;/strong&gt; for optimal code space.&lt;/li&gt; &#xA; &lt;li&gt;To make compile time changes to Tasmota use the &lt;code&gt;user_config_override.h&lt;/code&gt; file. It assures keeping your custom settings when you download and compile a new version. You have to make a copy from the provided &lt;code&gt;user_config_override_sample.h&lt;/code&gt; file and add your setting overrides.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration Information&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the installation and configuration articles in our &lt;a href=&#34;https://tasmota.github.io/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Information&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://tasmota.github.io/docs/Upgrading#migration-path&#34;&gt;migration path&lt;/a&gt; for instructions how to migrate to a major version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not upgrade from minimal to minimal version. It will most likely fail at some point and will require flashing via serial.&lt;/strong&gt; If you do have to use minimal versions, always OTA to a full version of the same release before applying next minimal version.&lt;/p&gt; &#xA;&lt;p&gt;Pay attention to the following version breaks due to dynamic settings updates:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 3.9.x&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 4.x&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 5.14&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Sonoff-Tasmota 6.7.1&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release_6.7.1/sonoff.bin&#34;&gt;http://ota.tasmota.com/tasmota/release_6.7.1/sonoff.bin&lt;/a&gt;) - NOTICE underscore as a dash is not supported in older versions&lt;/li&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 7.2.0&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release-7.2.0/tasmota.bin&#34;&gt;http://ota.tasmota.com/tasmota/release-7.2.0/tasmota.bin&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;--- Major change in parameter storage layout ---&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 8.5.1&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release-8.5.1/tasmota.bin&#34;&gt;http://ota.tasmota.com/tasmota/release-8.5.1/tasmota.bin&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;--- Major change in internal GPIO function representation ---&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Migrate to &lt;strong&gt;Tasmota 9.1&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release-9.1.0/tasmota.bin.gz&#34;&gt;http://ota.tasmota.com/tasmota/release-9.1.0/tasmota.bin.gz&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Upgrade to &lt;strong&gt;latest release&lt;/strong&gt; (&lt;a href=&#34;http://ota.tasmota.com/tasmota/release/tasmota.bin.gz&#34;&gt;http://ota.tasmota.com/tasmota/release/tasmota.bin.gz&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;While fallback or downgrading is common practice it was never supported due to Settings additions or changes in newer releases. Starting with release &lt;strong&gt;v9.1.0 Imogen&lt;/strong&gt; the internal GPIO function representation has changed in such a way that fallback is only possible to the latest GPIO configuration before installing &lt;strong&gt;v9.1.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/5904370/68332933-e6e5a600-00d7-11ea-885d-50395f7239a1.png&#34; width=&#34;150&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;For a database of supported devices see &lt;a href=&#34;https://templates.blakadder.com&#34;&gt;Tasmota Device Templates Repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for support on &lt;strong&gt;Tasmota&lt;/strong&gt; there are some options available:&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tasmota.github.io/docs&#34;&gt;Documentation Site&lt;/a&gt;: For information on how to flash Tasmota, configure, use and expand it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tasmota.github.io/docs/FAQ/&#34;&gt;FAQ and Troubleshooting&lt;/a&gt;: For information on common problems and solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tasmota.github.io/docs/Commands&#34;&gt;Commands Information&lt;/a&gt;: For information on all the commands supported by Tasmota.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support&#39;s Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/discussions&#34;&gt;Tasmota Discussions&lt;/a&gt;: For Tasmota usage questions, Feature Requests and Projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/Ks2Kzd4&#34;&gt;Tasmota Users Chat&lt;/a&gt;: For support, troubleshooting and general questions. You have better chances to get fast answers from members of the Tasmota Community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/issues&#34;&gt;Search in Issues&lt;/a&gt;: You might find an answer to your question by searching current or closed issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arendst/Tasmota/issues/new?template=Bug_report.md&#34;&gt;Software Problem Report&lt;/a&gt;: For reporting problems of Tasmota Software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to Tasmota by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Providing Pull Requests (Features, Proof of Concepts, Language files or Fixes)&lt;/li&gt; &#xA; &lt;li&gt;Testing new released features and report issues&lt;/li&gt; &#xA; &lt;li&gt;Donating to acquire hardware for testing and implementing or out of gratitude&lt;/li&gt; &#xA; &lt;li&gt;Contributing missing &lt;a href=&#34;https://tasmota.github.io/docs&#34;&gt;documentation&lt;/a&gt; for features and devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/tasmota&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;People helping to keep the show on the road:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;David Lang providing initial issue resolution and code optimizations&lt;/li&gt; &#xA; &lt;li&gt;Heiko Krupp for his IRSend, HTU21, SI70xx and Wemo/Hue emulation drivers&lt;/li&gt; &#xA; &lt;li&gt;Wiktor Schmidt for Travis CI implementation&lt;/li&gt; &#xA; &lt;li&gt;Thom Dietrich for PlatformIO optimizations&lt;/li&gt; &#xA; &lt;li&gt;Marinus van den Broek for his EspEasy groundwork&lt;/li&gt; &#xA; &lt;li&gt;Pete Ba for more user friendly energy monitor calibration&lt;/li&gt; &#xA; &lt;li&gt;Lobradov providing compile optimization tips&lt;/li&gt; &#xA; &lt;li&gt;Flexiti for his initial timer implementation&lt;/li&gt; &#xA; &lt;li&gt;reloxx13 for his &lt;a href=&#34;https://github.com/reloxx13/TasmoAdmin&#34;&gt;TasmoAdmin&lt;/a&gt; management tool&lt;/li&gt; &#xA; &lt;li&gt;Joachim Banzhaf for his TSL2561 library and driver&lt;/li&gt; &#xA; &lt;li&gt;Andre Thomas for providing many drivers&lt;/li&gt; &#xA; &lt;li&gt;Gijs Noorlander for his MHZ19, SenseAir and updated PubSubClient drivers&lt;/li&gt; &#xA; &lt;li&gt;Erik Montnemery for his HomeAssistant Discovery concept and many code tuning tips&lt;/li&gt; &#xA; &lt;li&gt;Federico Leoni for continued HomeAssistant Discovery support&lt;/li&gt; &#xA; &lt;li&gt;Aidan Mountford for his HSB support&lt;/li&gt; &#xA; &lt;li&gt;Daniel Ztolnai for his Serial Bridge implementation&lt;/li&gt; &#xA; &lt;li&gt;Gerhard Mutz for multiple sensor &amp;amp; display drivers, Sunrise/Sunset, and scripting&lt;/li&gt; &#xA; &lt;li&gt;Nuno Ferreira for his HC-SR04 driver&lt;/li&gt; &#xA; &lt;li&gt;Adrian Scillato for his (security)fixes and implementing and maintaining KNX&lt;/li&gt; &#xA; &lt;li&gt;Gennaro Tortone for implementing and maintaining Eastron drivers&lt;/li&gt; &#xA; &lt;li&gt;Raymond Mouthaan for managing Wemos Wiki information&lt;/li&gt; &#xA; &lt;li&gt;Norbert Richter for his &lt;a href=&#34;https://github.com/tasmota/decode-config&#34;&gt;decode-config.py&lt;/a&gt; tool&lt;/li&gt; &#xA; &lt;li&gt;Joel Stein, digiblur and Shantur Rathore for their Tuya research and driver&lt;/li&gt; &#xA; &lt;li&gt;Frogmore42 for providing many issue answers&lt;/li&gt; &#xA; &lt;li&gt;Jason2866 for platformio support and providing many issue answers&lt;/li&gt; &#xA; &lt;li&gt;Blakadder for managing the new document site and providing template management&lt;/li&gt; &#xA; &lt;li&gt;Stephan Hadinger for refactoring light driver, enhancing HueEmulation, LVGL, Zigbee and Berry support&lt;/li&gt; &#xA; &lt;li&gt;tmo for designing the official Tasmota logo&lt;/li&gt; &#xA; &lt;li&gt;Stefan Bode for his Shutter and Deep sleep drivers&lt;/li&gt; &#xA; &lt;li&gt;Jacek Ziółkowski for his &lt;a href=&#34;https://github.com/jziolkowski/tdm&#34;&gt;TDM&lt;/a&gt; management tool and &lt;a href=&#34;https://github.com/tasmota/tasmotizer&#34;&gt;Tasmotizer&lt;/a&gt; flashing tool&lt;/li&gt; &#xA; &lt;li&gt;Christian Staars for NRF24L01 and HM-10 Bluetooth sensor support&lt;/li&gt; &#xA; &lt;li&gt;Paul Diem for UDP Group communication support&lt;/li&gt; &#xA; &lt;li&gt;Jörg Schüler-Maroldt for his initial ESP32 port&lt;/li&gt; &#xA; &lt;li&gt;Javier Arigita for his thermostat driver&lt;/li&gt; &#xA; &lt;li&gt;Simon Hailes for ESP32 Bluetooth extensions&lt;/li&gt; &#xA; &lt;li&gt;Many more providing Tips, Wips, Pocs, PRs and Donations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is licensed under GPL-3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AFLplusplus/AFLplusplus</title>
    <updated>2022-06-05T01:37:20Z</updated>
    <id>tag:github.com,2022-06-05:/AFLplusplus/AFLplusplus</id>
    <link href="https://github.com/AFLplusplus/AFLplusplus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced laf-intel &amp; redqueen, AFLfast++ power schedules, MOpt mutators, unicorn_mode, and a lot more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;American Fuzzy Lop plus plus (AFL++)&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/AFLplusplus/Website/master/static/aflpp_bg.svg?sanitize=true&#34; alt=&#34;AFL++ logo&#34; width=&#34;250&#34; heigh=&#34;250&#34;&gt; &#xA;&lt;p&gt;Release version: &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/releases&#34;&gt;4.00c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub version: 4.01a&lt;/p&gt; &#xA;&lt;p&gt;Repository: &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus&#34;&gt;https://github.com/AFLplusplus/AFLplusplus&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AFL++ is maintained by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marc &#34;van Hauser&#34; Heuse &lt;a href=&#34;mailto:mh@mh-sec.de&#34;&gt;mh@mh-sec.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Heiko &#34;hexcoder-&#34; Eißfeldt &lt;a href=&#34;mailto:heiko.eissfeldt@hexco.de&#34;&gt;heiko.eissfeldt@hexco.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrea Fioraldi &lt;a href=&#34;mailto:andreafioraldi@gmail.com&#34;&gt;andreafioraldi@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dominik Maier &lt;a href=&#34;mailto:mail@dmnk.co&#34;&gt;mail@dmnk.co&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: Jana Aydinbas &lt;a href=&#34;mailto:jana.aydinbas@gmail.com&#34;&gt;jana.aydinbas@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Originally developed by Michał &#34;lcamtuf&#34; Zalewski.&lt;/p&gt; &#xA;&lt;p&gt;AFL++ is a superior fork to Google&#39;s AFL - more speed, more and better mutations, more and better instrumentation, custom module support, etc.&lt;/p&gt; &#xA;&lt;p&gt;You are free to copy, modify, and distribute AFL++ with attribution under the terms of the Apache-2.0 License. See the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Here is some information to get you started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For an overview of the AFL++ documentation and a very helpful graphical guide, please visit &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/README.md&#34;&gt;docs/README.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To get you started with tutorials, go to &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/tutorials.md&#34;&gt;docs/tutorials.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For releases, see the &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/releases&#34;&gt;Releases tab&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#branches&#34;&gt;branches&lt;/a&gt;. The best branches to use are, however, &lt;code&gt;stable&lt;/code&gt; or &lt;code&gt;dev&lt;/code&gt; - depending on your risk appetite. Also take a look at the list of &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/important_changes.md&#34;&gt;important changes in AFL++&lt;/a&gt; and the list of &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/features.md&#34;&gt;features&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you want to use AFL++ for your academic work, check the &lt;a href=&#34;https://aflplus.plus/papers/&#34;&gt;papers page&lt;/a&gt; on the website.&lt;/li&gt; &#xA; &lt;li&gt;To cite our work, look at the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#cite&#34;&gt;Cite&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;For comparisons, use the fuzzbench &lt;code&gt;aflplusplus&lt;/code&gt; setup, or use &lt;code&gt;afl-clang-fast&lt;/code&gt; with &lt;code&gt;AFL_LLVM_CMPLOG=1&lt;/code&gt;. You can find the &lt;code&gt;aflplusplus&lt;/code&gt; default configuration on Google&#39;s &lt;a href=&#34;https://github.com/google/fuzzbench/tree/master/fuzzers/aflplusplus&#34;&gt;fuzzbench&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and installing AFL++&lt;/h2&gt; &#xA;&lt;p&gt;To have AFL++ easily available with everything compiled, pull the image directly from the Docker Hub (available for x86_64 and arm64):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull aflplusplus/aflplusplus&#xA;docker run -ti -v /location/of/your/target:/src aflplusplus/aflplusplus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This image is automatically generated when a push to the stable repo happens (see &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#branches&#34;&gt;branches&lt;/a&gt;). If you use the command above, you will find your target source code in &lt;code&gt;/src&lt;/code&gt; in the container.&lt;/p&gt; &#xA;&lt;p&gt;To build AFL++ yourself - &lt;em&gt;which we recommend&lt;/em&gt; - continue at &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/INSTALL.md&#34;&gt;docs/INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start: Fuzzing with AFL++&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Before you start, please read about the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md#0-common-sense-risks&#34;&gt;common sense risks of fuzzing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a quick start for fuzzing targets with the source code available. To read about the process in detail, see &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md&#34;&gt;docs/fuzzing_in_depth.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn about fuzzing other targets, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary-only targets: &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_binary-only_targets.md&#34;&gt;docs/fuzzing_binary-only_targets.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Network services: &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/best_practices.md#fuzzing-a-network-service&#34;&gt;docs/best_practices.md#fuzzing-a-network-service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GUI programs: &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/best_practices.md#fuzzing-a-gui-program&#34;&gt;docs/best_practices.md#fuzzing-a-gui-program&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Step-by-step quick start:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the program or library to be fuzzed using &lt;code&gt;afl-cc&lt;/code&gt;. A common way to do this would be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CC=/path/to/afl-cc CXX=/path/to/afl-c++ ./configure --disable-shared&#xA;make clean all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get a small but valid input file that makes sense to the program. When fuzzing verbose syntax (SQL, HTTP, etc.), create a dictionary as described in &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/dictionaries/README.md&#34;&gt;dictionaries/README.md&lt;/a&gt;, too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the program reads from stdin, run &lt;code&gt;afl-fuzz&lt;/code&gt; like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./afl-fuzz -i seeds_dir -o output_dir -- \&#xA;/path/to/tested/program [...program&#39;s cmdline...]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To add a dictionary, add &lt;code&gt;-x /path/to/dictionary.txt&lt;/code&gt; to afl-fuzz.&lt;/p&gt; &lt;p&gt;If the program takes input from a file, you can put &lt;code&gt;@@&lt;/code&gt; in the program&#39;s command line; AFL++ will put an auto-generated file name in there for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Investigate anything shown in red in the fuzzer UI by promptly consulting &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/afl-fuzz_approach.md#understanding-the-status-screen&#34;&gt;docs/afl-fuzz_approach.md#understanding-the-status-screen&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will find found crashes and hangs in the subdirectories &lt;code&gt;crashes/&lt;/code&gt; and &lt;code&gt;hangs/&lt;/code&gt; in the &lt;code&gt;-o output_dir&lt;/code&gt; directory. You can replay the crashes by feeding them to the target, e.g. if your target is using stdin:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat output_dir/crashes/id:000000,* | /path/to/tested/program [...program&#39;s cmdline...]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can generate cores or use gdb directly to follow up the crashes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We cannot stress this enough - if you want to fuzz effectively, read the &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md&#34;&gt;docs/fuzzing_in_depth.md&lt;/a&gt; document!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Questions? Concerns? Bug reports?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The contributors can be reached via (e.g., by creating an issue): &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus&#34;&gt;https://github.com/AFLplusplus/AFLplusplus&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;. If you find an interesting or important question missing, submit it via &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/discussions&#34;&gt;https://github.com/AFLplusplus/AFLplusplus/discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Best: join the &lt;a href=&#34;https://discord.gg/gCraWct&#34;&gt;Awesome Fuzzing&lt;/a&gt; Discord server.&lt;/li&gt; &#xA; &lt;li&gt;There is a (not really used) mailing list for the AFL/AFL++ project (&lt;a href=&#34;https://groups.google.com/group/afl-users&#34;&gt;browse archive&lt;/a&gt;). To compare notes with other users or to get notified about major new features, send an email to &lt;a href=&#34;mailto:afl-users+subscribe@googlegroups.com&#34;&gt;afl-users+subscribe@googlegroups.com&lt;/a&gt;, but note that this is not managed by us.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The following branches exist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/tree/release&#34;&gt;release&lt;/a&gt;: the latest release&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/&#34;&gt;stable/trunk&lt;/a&gt;: stable state of AFL++ - it is synced from dev from time to time when we are satisfied with its stability&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus/tree/dev&#34;&gt;dev&lt;/a&gt;: development state of AFL++ - bleeding edge and you might catch a checkout which does not compile or has a bug. &lt;strong&gt;We only accept PRs (pull requests) for the &#39;dev&#39; branch!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;(any other): experimental branches to work on specific features or testing new functionality or changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help wanted&lt;/h2&gt; &#xA;&lt;p&gt;We have several &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/ideas.md&#34;&gt;ideas&lt;/a&gt; we would like to see in AFL++ to make it even better. However, we already work on so many things that we do not have the time for all the big ideas.&lt;/p&gt; &#xA;&lt;p&gt;This can be your way to support and contribute to AFL++ - extend it to do something cool.&lt;/p&gt; &#xA;&lt;p&gt;For everyone who wants to contribute (and send pull requests), please read our &lt;a href=&#34;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; before you submit.&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;Many of the improvements to the original AFL and AFL++ wouldn&#39;t be possible without feedback, bug reports, or patches from our contributors.&lt;/p&gt; &#xA;&lt;p&gt;Thank you! (For people sending pull requests - please add yourself to this list :-)&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of contributors&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;  Jann Horn                             Hanno Boeck&#xA;  Felix Groebert                        Jakub Wilk&#xA;  Richard W. M. Jones                   Alexander Cherepanov&#xA;  Tom Ritter                            Hovik Manucharyan&#xA;  Sebastian Roschke                     Eberhard Mattes&#xA;  Padraig Brady                         Ben Laurie&#xA;  @dronesec                             Luca Barbato&#xA;  Tobias Ospelt                         Thomas Jarosch&#xA;  Martin Carpenter                      Mudge Zatko&#xA;  Joe Zbiciak                           Ryan Govostes&#xA;  Michael Rash                          William Robinet&#xA;  Jonathan Gray                         Filipe Cabecinhas&#xA;  Nico Weber                            Jodie Cunningham&#xA;  Andrew Griffiths                      Parker Thompson&#xA;  Jonathan Neuschaefer                  Tyler Nighswander&#xA;  Ben Nagy                              Samir Aguiar&#xA;  Aidan Thornton                        Aleksandar Nikolich&#xA;  Sam Hakim                             Laszlo Szekeres&#xA;  David A. Wheeler                      Turo Lamminen&#xA;  Andreas Stieger                       Richard Godbee&#xA;  Louis Dassy                           teor2345&#xA;  Alex Moneger                          Dmitry Vyukov&#xA;  Keegan McAllister                     Kostya Serebryany&#xA;  Richo Healey                          Martijn Bogaard&#xA;  rc0r                                  Jonathan Foote&#xA;  Christian Holler                      Dominique Pelle&#xA;  Jacek Wielemborek                     Leo Barnes&#xA;  Jeremy Barnes                         Jeff Trull&#xA;  Guillaume Endignoux                   ilovezfs&#xA;  Daniel Godas-Lopez                    Franjo Ivancic&#xA;  Austin Seipp                          Daniel Komaromy&#xA;  Daniel Binderman                      Jonathan Metzman&#xA;  Vegard Nossum                         Jan Kneschke&#xA;  Kurt Roeckx                           Marcel Boehme&#xA;  Van-Thuan Pham                        Abhik Roychoudhury&#xA;  Joshua J. Drake                       Toby Hutton&#xA;  Rene Freingruber                      Sergey Davidoff&#xA;  Sami Liedes                           Craig Young&#xA;  Andrzej Jackowski                     Daniel Hodson&#xA;  Nathan Voss                           Dominik Maier&#xA;  Andrea Biondo                         Vincent Le Garrec&#xA;  Khaled Yakdan                         Kuang-che Wu&#xA;  Josephine Calliotte                   Konrad Welc&#xA;  Thomas Rooijakkers                    David Carlier&#xA;  Ruben ten Hove                        Joey Jiao&#xA;  fuzzah                                @intrigus-lgtm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Cite&lt;/h2&gt; &#xA;&lt;p&gt;If you use AFL++ in scientific work, consider citing &lt;a href=&#34;https://www.usenix.org/conference/woot20/presentation/fioraldi&#34;&gt;our paper&lt;/a&gt; presented at WOOT&#39;20:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. “AFL++: Combining incremental steps of fuzzing research”. In 14th USENIX Workshop on Offensive Technologies (WOOT 20). USENIX Association, Aug. 2020.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;BibTeX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings {AFLplusplus-Woot20,&#xA;author = {Andrea Fioraldi and Dominik Maier and Heiko Ei{\ss}feldt and Marc Heuse},&#xA;title = {{AFL++}: Combining Incremental Steps of Fuzzing Research},&#xA;booktitle = {14th {USENIX} Workshop on Offensive Technologies ({WOOT} 20)},&#xA;year = {2020},&#xA;publisher = {{USENIX} Association},&#xA;month = aug,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>