<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-12T01:23:21Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nginx/unit</title>
    <updated>2023-09-12T01:23:21Z</updated>
    <id>tag:github.com,2023-09-12:/nginx/unit</id>
    <link href="https://github.com/nginx/unit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NGINX Unit - universal web app server - a lightweight and versatile open source server that simplifies the application stack by natively executing application code across eight different programming language runtimes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NGINX Unit&lt;/h1&gt; &#xA;&lt;h2&gt;Universal Web App Server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nginx/unit/master/docs/unitlogo.svg?sanitize=true&#34; alt=&#34;NGINX Unit Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;NGINX Unit is a lightweight and versatile open-source server that has two primary capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;serves static media assets,&lt;/li&gt; &#xA; &lt;li&gt;runs application code in seven languages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unit compresses several layers of the modern application stack into a potent, coherent solution with a focus on performance, low latency, and scalability. It is intended as a universal building block for any web architecture regardless of its complexity, from enterprise-scale deployments to your pet&#39;s homepage.&lt;/p&gt; &#xA;&lt;p&gt;Its native &lt;a href=&#34;https://raw.githubusercontent.com/nginx/unit/master/#openapi-specification&#34;&gt;RESTful JSON API&lt;/a&gt; enables dynamic updates with zero interruptions and flexible configuration, while its out-of-the-box productivity reliably scales to production-grade workloads. We achieve that with a complex, asynchronous, multithreading architecture comprising multiple processes to ensure security and robustness while getting the most out of today&#39;s computing platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install nginx/unit/unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details and available language packages, see the &lt;a href=&#34;https://unit.nginx.org/installation/#homebrew&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker pull unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a description of image tags, see the &lt;a href=&#34;https://unit.nginx.org/installation/#docker-images&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Amazon Linux, Fedora, RedHat&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ wget https://raw.githubusercontent.com/nginx/unit/master/tools/setup-unit &amp;amp;&amp;amp; chmod +x setup-unit&#xA;# ./setup-unit repo-config &amp;amp;&amp;amp; yum install unit&#xA;# ./setup-unit welcome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details and available language packages, see the &lt;a href=&#34;https://unit.nginx.org/installation/#official-packages&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Debian, Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ wget https://raw.githubusercontent.com/nginx/unit/master/tools/setup-unit &amp;amp;&amp;amp; chmod +x setup-unit&#xA;# ./setup-unit repo-config &amp;amp;&amp;amp; apt install unit&#xA;# ./setup-unit welcome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details and available language packages, see the &lt;a href=&#34;https://unit.nginx.org/installation/#official-packages&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running a Hello World App&lt;/h2&gt; &#xA;&lt;p&gt;Unit runs apps in a &lt;a href=&#34;https://unit.nginx.org/howto/samples/&#34;&gt;variety of languages&lt;/a&gt;. Let&#39;s consider a basic example, choosing PHP for no particular reason.&lt;/p&gt; &#xA;&lt;p&gt;Suppose you saved a PHP script as &lt;code&gt;/www/helloworld/index.php&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php echo &#34;Hello, PHP on Unit!&#34;; ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run it on Unit with the &lt;code&gt;unit-php&lt;/code&gt; module installed, first set up an application object. Let&#39;s store our first config snippet in a file called &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;helloworld&#34;: {&#xA;        &#34;type&#34;: &#34;php&#34;,&#xA;        &#34;root&#34;: &#34;/www/helloworld/&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Saving it as a file isn&#39;t necessary, but can come in handy with larger objects.&lt;/p&gt; &#xA;&lt;p&gt;Now, &lt;code&gt;PUT&lt;/code&gt; it into the &lt;code&gt;/config/applications&lt;/code&gt; section of Unit&#39;s control API, usually available by default via a Unix domain socket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# curl -X PUT --data-binary @config.json --unix-socket  \&#xA;       /path/to/control.unit.sock http://localhost/config/applications&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#xA;{&#xA;&#x9;&#34;success&#34;: &#34;Reconfiguration done.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, reference the app from a listener object in the &lt;code&gt;/config/listeners&lt;/code&gt; section of the API. This time, we pass the config snippet straight from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# curl -X PUT -d &#39;{&#34;127.0.0.1:8000&#34;: {&#34;pass&#34;: &#34;applications/helloworld&#34;}}&#39;  \&#xA;       --unix-socket /path/to/control.unit.sock http://localhost/config/listeners&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;success&#34;: &#34;Reconfiguration done.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now Unit accepts requests at the specified IP and port, passing them to the application process. Your app works!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl 127.0.0.1:8080&#xA;&#xA;      Hello, PHP on Unit!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, query the entire &lt;code&gt;/config&lt;/code&gt; section of the control API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# curl --unix-socket /path/to/control.unit.sock http://localhost/config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unit&#39;s output should contain both snippets, neatly organized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;listeners&#34;: {&#xA;        &#34;127.0.0.1:8080&#34;: {&#xA;            &#34;pass&#34;: &#34;applications/helloworld&#34;&#xA;        }&#xA;    },&#xA;&#xA;    &#34;applications&#34;: {&#xA;        &#34;helloworld&#34;: {&#xA;            &#34;type&#34;: &#34;php&#34;,&#xA;            &#34;root&#34;: &#34;/www/helloworld/&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For full details of configuration management, see the &lt;a href=&#34;https://unit.nginx.org/configuration/#configuration-management&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;OpenAPI Specification&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/nginx/unit/master/docs/unit-openapi.yaml&#34;&gt;OpenAPI specification&lt;/a&gt; aims to simplify configuring and integrating NGINX Unit deployments and provide an authoritative source of knowledge about the control API.&lt;/p&gt; &#xA;&lt;p&gt;Although the specification is still in the early beta stage, it is a promising step forward for the NGINX Unit community. While working on it, we kindly ask you to experiment and provide feedback to help improve its functionality and usability.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The go-to place to start asking questions and share your thoughts is our &lt;a href=&#34;https://community.nginx.org/joinslack&#34;&gt;Slack channel&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our &lt;a href=&#34;https://github.com/nginx/unit/issues&#34;&gt;GitHub issues page&lt;/a&gt; offers space for a more technical discussion at your own pace.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/orgs/nginx/projects/1&#34;&gt;project map&lt;/a&gt; on GitHub sheds some light on our current work and plans for the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our &lt;a href=&#34;https://unit.nginx.org/&#34;&gt;official website&lt;/a&gt; may provide answers not easily found otherwise.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get involved with the project by contributing! See the &lt;a href=&#34;https://raw.githubusercontent.com/nginx/unit/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To reach the team directly, subscribe to the &lt;a href=&#34;https://mailman.nginx.org/mailman/listinfo/unit&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For security issues, &lt;a href=&#34;https://raw.githubusercontent.com/nginx/unit/master/security-alert@nginx.org&#34;&gt;email us&lt;/a&gt;, mentioning NGINX Unit in the subject and following the &lt;a href=&#34;https://www.first.org/cvss/v3.1/specification-document&#34;&gt;CVSS v3.1&lt;/a&gt; spec.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raygui</title>
    <updated>2023-09-12T01:23:21Z</updated>
    <id>tag:github.com,2023-09-12:/raysan5/raygui</id>
    <link href="https://github.com/raysan5/raygui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use immediate-mode gui library&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/logo/raygui_256x256.png&#34; width=&#34;256&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raygui is a simple and easy-to-use immediate-mode-gui library.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;raygui&lt;/code&gt; was originally inspired by &lt;a href=&#34;https://docs.unity3d.com/Manual/GUIScriptingGuide.html&#34;&gt;Unity IMGUI&lt;/a&gt; (immediate mode GUI API).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;raygui&lt;/code&gt; was designed as an auxiliar module for &lt;a href=&#34;https://github.com/raysan5/raylib&#34;&gt;raylib&lt;/a&gt; to create simple GUI interfaces using raylib graphic style (simple colors, plain rectangular shapes, wide borders...) but it can be adapted to other engines/frameworks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;raygui&lt;/code&gt; is intended for &lt;strong&gt;tools development&lt;/strong&gt;; it has already been used to develop &lt;a href=&#34;https://raylibtech.itch.io&#34;&gt;multiple published tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: Latest &lt;code&gt;raygui&lt;/code&gt; from master branch is always aligned with latest &lt;code&gt;raylib&lt;/code&gt; from master branch. Make sure to use the appropiate versions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: Master branch now contains raygui 4.0-dev, it is an API-BREAKING redesign from previous versions (3.x), now all functions are more consistent and coherent, you can read the details about this breaking change in issue &lt;a href=&#34;https://github.com/raysan5/raygui/issues/283&#34;&gt;283&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: raygui is a single-file header-only library (despite its internal dependency on raylib), so, functions definition AND implementation reside in the same file &lt;code&gt;raygui.h&lt;/code&gt;, when including &lt;code&gt;raygui.h&lt;/code&gt; in a module, &lt;code&gt;RAYGUI_IMPLEMENTATION&lt;/code&gt; must be previously defined to include the implementation part of &lt;code&gt;raygui.h&lt;/code&gt; BUT only in one compilation unit, other modules could also include &lt;code&gt;raygui.h&lt;/code&gt; but &lt;code&gt;RAYGUI_IMPLEMENTATION&lt;/code&gt; must not be defined again.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Immediate-mode gui, no retained data&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;+25&lt;/strong&gt; controls provided (basic and advanced)&lt;/li&gt; &#xA; &lt;li&gt;Powerful &lt;strong&gt;styling system&lt;/strong&gt; for colors, font and metrics&lt;/li&gt; &#xA; &lt;li&gt;Standalone usage mode supported (for other graphic libs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Icons support&lt;/strong&gt;, embedding a complete 1-bit icons pack&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;tools&lt;/strong&gt; provided for raygui development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;raygui controls&lt;/h2&gt; &#xA;&lt;h3&gt;basic controls&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Label       |  Button      |  LabelButton |  Toggle      |  ToggleGroup  |  ToggleSlider&#xA;CheckBox    | ComboBox     |  DropdownBox |  TextBox     |  ValueBox     |  Spinner&#xA;Slider      |  SliderBar   |  ProgressBar |  StatusBar   |  DummyRec     |  Grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;container/separator controls&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;WindowBox   |  GroupBox    |  Line        |  Panel       |  ScrollPanel  | TabBar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;advanced controls&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ListView    |  ColorPicker |  MessageBox  |  TextInputBox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;raygui styles&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;raygui&lt;/code&gt; comes with a &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/styles/default&#34;&gt;default&lt;/a&gt; style automatically loaded at runtime:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/styles/default/style_default.png&#34; alt=&#34;raygui default style&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some additional styles are also provided for convenience, just check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/styles&#34;&gt;styles directory&lt;/a&gt; for details:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/images/raygui_style_table_multi.png&#34; alt=&#34;raygui additional styles&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom styles can also be created very easily using &lt;a href=&#34;https://raylibtech.itch.io/rguistyler&#34;&gt;rGuiStyler&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;p&gt;Styles can be loaded at runtime using raygui &lt;code&gt;GuiLoadStyle()&lt;/code&gt; function. Simple and easy-to-use.&lt;/p&gt; &#xA;&lt;h2&gt;raygui icons&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;raygui&lt;/code&gt; supports custom icons, by default, a predefined set of icons is provided inside &lt;code&gt;raygui&lt;/code&gt; as an array of binary data; it contains &lt;strong&gt;256 possible icons&lt;/strong&gt; defined as &lt;strong&gt;16x16 pixels&lt;/strong&gt; each; each pixel is codified using &lt;strong&gt;1-bit&lt;/strong&gt;. The total size of the array is &lt;code&gt;2048 bytes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/images/raygui_ricons.png&#34;&gt; &#xA;&lt;p&gt;To use any of those icons just prefix the &lt;em&gt;#iconId#&lt;/em&gt; number to &lt;strong&gt;any text&lt;/strong&gt; written within &lt;code&gt;raygui&lt;/code&gt; controls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (GuiButton(rec, &#34;#05#Open Image&#34;)) { /* ACTION */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to use the provided &lt;code&gt;GuiIconText()&lt;/code&gt; function to prefix it automatically, using a clearer identifier (defined in &lt;code&gt;raygui.h&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (GuiButton(rec, GuiIconText(RICON_FILE_OPEN, &#34;Open Image&#34;))) { /* ACTION */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Provided set of icons can be reviewed and customized using &lt;a href=&#34;https://raylibtech.itch.io/rguiicons&#34;&gt;rGuiIcons&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;h2&gt;raygui support tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raylibtech.itch.io/rguistyler&#34;&gt;&lt;strong&gt;rGuiStyler&lt;/strong&gt;&lt;/a&gt; - A simple and easy-to-use raygui styles editor.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/images/rguistyler_v300.png&#34; alt=&#34;rGuiStyler v3.1&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raylibtech.itch.io/rguiicons&#34;&gt;&lt;strong&gt;rGuiIcons&lt;/strong&gt;&lt;/a&gt; - A simple and easy-to-use raygui icons editor.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/images/rguiicons_v100.png&#34; alt=&#34;rGuiIcons v1.0&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raylibtech.itch.io/rguilayout&#34;&gt;&lt;strong&gt;rGuiLayout&lt;/strong&gt;&lt;/a&gt; - A simple and easy-to-use raygui layouts editor.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/images/rguilayout_v220.png&#34; alt=&#34;rGuiLayout v2.2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;raygui&lt;/code&gt; is intended to be used as a portable single-file header-only library, to be directly integrated into any C/C++ codebase but some users could require a shared/dynamic version of the library, for example, to create bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows (MinGW, GCC)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;copy src/raygui.h src/raygui.c&#xA;gcc -o src/raygui.dll src/raygui.c -shared -DRAYGUI_IMPLEMENTATION -DBUILD_LIBTYPE_SHARED -static-libgcc -lopengl32 -lgdi32 -lwinmm -Wl,--out-implib,src/librayguidll.a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows (MSVC)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;copy src\raylib.h src\raylib.c&#xA;cl /O2 /I../raylib/src/ /D_USRDLL /D_WINDLL /DRAYGUI_IMPLEMENTATION /DBUILD_LIBTYPE_SHARED src/raygui.c /LD /Feraygui.dll /link /LIBPATH ../raylib/build/raylib/Release/raylib.lib /subsystem:windows /machine:x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux (GCC)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv src/raygui.h src/raygui.c&#xA;gcc -o raygui.so src/raygui.c -shared -fpic -DRAYGUI_IMPLEMENTATION -lraylib -lGL -lm -lpthread -ldl -lrt -lX11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac (clang, homebrew installed raylib)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp src/raygui.h src/raygui.c&#xA;brew install raylib&#xA;gcc -o raygui.dynlib src/raygui.c -shared -fpic -DRAYGUI_IMPLEMENTATION -framework OpenGL -lm -lpthread -ldl $(pkg-config --libs --cflags raylib)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raygui is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raygui/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
</feed>