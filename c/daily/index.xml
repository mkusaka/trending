<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-13T01:25:18Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marcoslucianops/DeepStream-Yolo-Pose</title>
    <updated>2023-09-13T01:25:18Z</updated>
    <id>tag:github.com,2023-09-13:/marcoslucianops/DeepStream-Yolo-Pose</id>
    <link href="https://github.com/marcoslucianops/DeepStream-Yolo-Pose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NVIDIA DeepStream SDK 6.3 / 6.2 / 6.1.1 / 6.1 / 6.0.1 / 6.0 application for YOLO-Pose models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DeepStream-Yolo-Pose&lt;/h1&gt; &#xA;&lt;p&gt;NVIDIA DeepStream SDK application for YOLO-Pose models&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;YOLO objetct detection models and other infos: &lt;a href=&#34;https://github.com/marcoslucianops/DeepStream-Yolo&#34;&gt;https://github.com/marcoslucianops/DeepStream-Yolo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoslucianops/DeepStream-Yolo-Pose/master/#supported-models&#34;&gt;Supported models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoslucianops/DeepStream-Yolo-Pose/master/#basic-usage&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoslucianops/DeepStream-Yolo-Pose/master/docs/YOLOv7_Pose.md&#34;&gt;YOLOv7-Pose usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoslucianops/DeepStream-Yolo-Pose/master/docs/YOLOv8_Pose.md&#34;&gt;YOLOv8-Pose usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoslucianops/DeepStream-Yolo-Pose/master/#nms-configuration&#34;&gt;NMS configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoslucianops/DeepStream-Yolo-Pose/master/#detection-threshold-configuration&#34;&gt;Detection threshold configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Supported models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ultralytics/ultralytics&#34;&gt;YOLOv8-Pose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7&#34;&gt;YOLOv7-Pose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;h4&gt;1. Download the DeepStream-Yolo-Pose repo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/marcoslucianops/DeepStream-Yolo-Pose.git&#xA;cd DeepStream-Yolo-Pose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Compile the libs&lt;/h4&gt; &#xA;&lt;p&gt;Export the CUDA_VER env according to your DeepStream version and platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.3 on x86 platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=12.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.2 on x86 platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=11.8&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.1.1 on x86 platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=11.7&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.1 on x86 platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=11.6&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.0.1 / 6.0 on x86 platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=11.4&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.3 / 6.2 / 6.1.1 / 6.1 on Jetson platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=11.4&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DeepStream 6.0.1 / 6.0 on Jetson platform&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export CUDA_VER=10.2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Compile the libs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -C nvdsinfer_custom_impl_Yolo_pose&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To use the Python code, you need to install the DeepStream Python bindings.&lt;/p&gt; &#xA;&lt;p&gt;Reference: &lt;a href=&#34;https://github.com/NVIDIA-AI-IOT/deepstream_python_apps&#34;&gt;https://github.com/NVIDIA-AI-IOT/deepstream_python_apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;x86 platform:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;wget https://github.com/NVIDIA-AI-IOT/deepstream_python_apps/releases/download/v1.1.8/pyds-1.1.8-py3-none-linux_x86_64.whl&#xA;pip3 install pyds-1.1.8-py3-none-linux_x86_64.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jetson platform:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;wget https://github.com/NVIDIA-AI-IOT/deepstream_python_apps/releases/download/v1.1.8/pyds-1.1.8-py3-none-linux_aarch64.whl&#xA;pip3 install pyds-1.1.8-py3-none-linux_aarch64.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It is recommended to use Python virtualenv.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The steps above only work on &lt;strong&gt;DeepStream 6.3&lt;/strong&gt;. For previous versions, please check the files on the &lt;code&gt;NVIDIA-AI-IOT/deepstream_python_apps&lt;/code&gt; repo.&lt;/p&gt; &#xA;&lt;h4&gt;3. Run&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;C code&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./deepstream -s file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 -c config_infer_primary_yoloV8_pose.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python code&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python3 deepstream.py -s file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 -c config_infer_primary_yoloV8_pose.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The TensorRT engine file may take a very long time to generate (sometimes more than 10 minutes).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-s file:// or rtsp:// or http://&#xA;--source file:// or rtsp:// or http://&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the config infer file (example for config_infer.txt file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-c config_infer.txt&#xA;--config-infer config_infer.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the nvstreammux batch-size (example for 2; default: 1)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-b 2&#xA;--streammux-batch-size 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the nvstreammux width (example for 1280; default: 1920)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-w 1280&#xA;--streammux-width 1280&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the nvstreammux height (example for 720; default: 1080)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-e 720&#xA;--streammux-height 720&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the GPU id (example for 1; default: 0)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-g 1&#xA;--gpu-id 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To change the FPS measurement interval (example for 10; default: 5)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-f 10&#xA;--fps-interval 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;NMS configuration&lt;/h3&gt; &#xA;&lt;p&gt;For now, the &lt;code&gt;nms-iou-threshold&lt;/code&gt; is fixed to &lt;code&gt;0.45&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Make sure to set &lt;code&gt;cluster-mode=4&lt;/code&gt; in the config_infer file.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Detection threshold configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;[class-attrs-all]&#xA;pre-cluster-threshold=0.25&#xA;topk=300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;p&gt;My projects: &lt;a href=&#34;https://www.youtube.com/MarcosLucianoTV&#34;&gt;https://www.youtube.com/MarcosLucianoTV&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joshr120/open-deck</title>
    <updated>2023-09-13T01:25:18Z</updated>
    <id>tag:github.com,2023-09-13:/joshr120/open-deck</id>
    <link href="https://github.com/joshr120/open-deck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Logo.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h1&gt;Open Deck&lt;/h1&gt; &#xA;&lt;h2&gt;Parts and fully assembled units can be purchased Here: &lt;a href=&#34;https://www.tindie.com/products/27756/&#34;&gt;https://www.tindie.com/products/27756/&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Image_1.jpg&#34; width=&#34;400&#34;&gt;⠀⠀⠀⠀⠀⠀⠀&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Image_2.jpg&#34; width=&#34;400&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open Deck is a low cost open source macro keyboard with a customizable image behind every key.&lt;/p&gt; &#xA;&lt;p&gt;Open Deck is an open source macro keyboard designed to be a cheaper alternative to the stream deck. It has software to easily change the images as well as the macros assigned to each button. The folder Structure allows 6 different apps to be configured with 3 macro keys each. The software allows the open deck to update with whatever app is open as well as open an app when buttons are pressed.&lt;/p&gt; &#xA;&lt;p&gt;An easy to use interface allows you to easily upload and set macros.&lt;/p&gt; &#xA;&lt;p&gt;Full Video and build guide here: &lt;a href=&#34;https://youtu.be/SCIMHQAToSw&#34;&gt;https://youtu.be/SCIMHQAToSw&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Software:&lt;/h1&gt; &#xA;&lt;h2&gt;GUI Interface&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/gui.jpg&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Provided is a compiled .exe program as well as all the source code (written in python). Extract the zipped folder and run the .exe, no python libary installs required.&lt;/p&gt; &#xA;&lt;p&gt;The Open Deck communicates with a PC over a serial USB connection. The software can automatically detect and connect to the Open Deck when it is plugged in.&lt;/p&gt; &#xA;&lt;p&gt;The program is first used to upload images and set the macro&#39;s. After that it runs in the background to send keystrokes when the buttons are pressed.&lt;/p&gt; &#xA;&lt;p&gt;Note: the automatic window switching only works on windows currently&lt;/p&gt; &#xA;&lt;p&gt;The sofware is still evolving and I am by no means a software engineer but I have been using it everyday for over 6 months without an major issues.&lt;/p&gt; &#xA;&lt;h2&gt;Uploading Images&lt;/h2&gt; &#xA;&lt;p&gt;The PC application makes it super easy to upload images. The files can be any size and the program does all of the conversion for you. At the moment each image can only be a single colour when uploaded through the GUI. When uploading an image the black part of the image will be shown in the chosen colour and the rest will be black. See Additional Features section for how to do images with multiple colours.&lt;/p&gt; &#xA;&lt;p&gt;The select &amp;amp; upload button will prompt the user to select an image from the file system as well as choose a colour from a colour picker.&lt;/p&gt; &#xA;&lt;h2&gt;Setting Macros&lt;/h2&gt; &#xA;&lt;p&gt;The macros are sent using the python keyboard library.&lt;/p&gt; &#xA;&lt;p&gt;If more complex macros are required I recommend setting it to some unused combination and then remapping this combination using something like auto hot key. (Not going to try re-invent the wheel here). To send multiple key strokes one after another seperate them with a comma. The record keystroke feature is still a work in progress but should be able to get you started and give you names of keys.&lt;/p&gt; &#xA;&lt;h2&gt;Window Switching/application setup&lt;/h2&gt; &#xA;&lt;p&gt;One usefull feature on the open deck has is the ability to have the buttons change depending on which application is currently open as well. It can also open an app when a button on the open deck is pressed.&lt;/p&gt; &#xA;&lt;p&gt;By inputting the application name for each menu of the open deck, the program will look for a window containing this name to either control the open deck or have the open deck control/activate this window.&lt;/p&gt; &#xA;&lt;p&gt;On windows there are 3 settings for automatically switching windows and/or current open deck state.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first option will open the application on the computer when the corresponding folder is opened on the keypad.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second option will open the corresponding computer application when a shortcut is sent. This is usefull if you have multiple applciations open at once as it will make the correct application active before sending the keystrokes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The third option will change which set of macros are shown on the keypad depending on which computer application is currently active.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Arduino&lt;/h2&gt; &#xA;&lt;p&gt;All of the code running on the ESP8266 on the Open Deck itself is using arduino. The images are stored as a bitmap in SPIFFS so that they remain after a power cycle and are not relient on a computer connection.&lt;/p&gt; &#xA;&lt;p&gt;When a key is pressed it sends a correlated number (1-16) over serial to the program running on the computer.&lt;/p&gt; &#xA;&lt;p&gt;If you purchase a pre-made Open Deck it will come flashed with the default firmware and you will not need to touch any arduino code or install any libraries.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more info on the software see the README in the Code folder&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Hardware&lt;/h1&gt; &#xA;&lt;p&gt;See the BOM for a full list of all of the required components. Visit my tindie store to support the project by buying parts or a full unit: &lt;strong&gt;&lt;a href=&#34;https://www.tindie.com/products/27756/&#34;&gt;https://www.tindie.com/products/27756/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If there is a particular item or set of items you would like to buy feel free to send me a message on Tindie.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Things of Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The display is a 128x160 tft display. The exact display is quite important as the hole patten and pinout needs to fit the custom PCB&#39;s. (See BOM for Link)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An ESP8266 is being used as the micro-controller as it is small, low cost, has enough flash memory to store all of the images as well as having WiFi to allow for additional features. Importantly for everything to fit this needs to be a WEMOS D1 Mini V4 with a USB-C Connector&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Low Profile M2 Screws used for clearance (Length is critical)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3D Printed Parts&lt;/h2&gt; &#xA;&lt;p&gt;All parts can be printed with no supports. Print in the orientation shown below:&lt;/p&gt; &#xA;&lt;p&gt;Body:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Body.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;Bottom Cover:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Bottom_Cover.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;Window Holder:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Window_Holder.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;Spacer:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/joshr120/open-deck/main/Images/Spacer.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;h2&gt;CNC Machined Parts&lt;/h2&gt; &#xA;&lt;h3&gt;Carbon Fibre Top Plate&lt;/h3&gt; &#xA;&lt;p&gt;The carbon top plate is made out of 1mm thick carbon fibre.&lt;/p&gt; &#xA;&lt;h3&gt;Acrylic Key Caps&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;Key Caps&#39; are machined out of 4.5mm thick acrylic. They are all the same design.&lt;/p&gt; &#xA;&lt;p&gt;These can also be made out of 1.5mm and 3mm laser cut acrylic glued together if you do not have access to a CNC. I have found the best glue for this is UV curable glue used for some phone screen protectors.&lt;/p&gt; &#xA;&lt;p&gt;These could also potentially be 3D printed from clear resin and polished to get a transparent finish.&lt;/p&gt; &#xA;&lt;p&gt;As with all the custom parts these are availale for purchase from the tindie store.&lt;/p&gt; &#xA;&lt;h2&gt;PCB&lt;/h2&gt; &#xA;&lt;p&gt;The PCB folder contains a zipped folder of the GERBER files required to have the PCB manufactured.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want images with multiple colours these currently need to be manually entered into the arduino code. See the README in the Code folder for more info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Another use case for the open deck is to control smart home devices. The ESP8266 is a common WiFi chip and could be setup for controlling without needing to be physically connected to a host computer.&lt;/p&gt; &lt;p&gt;Currently no example code for this but simply change the serial write commands in the arduino program to send a comand with your favourite service such as MQTT. This can then be integrated with something like home assistant. Images can still be uploaded with the GUI interface and are stored locally on the device in non-volatile memory so will remain even after a power cycle.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>SeeFlowerX/stackplz</title>
    <updated>2023-09-13T01:25:18Z</updated>
    <id>tag:github.com,2023-09-13:/SeeFlowerX/stackplz</id>
    <link href="https://github.com/SeeFlowerX/stackplz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于eBPF的堆栈追踪工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stackplz&lt;/h1&gt; &#xA;&lt;p&gt;stackplz是一款基于eBPF的堆栈追踪工具，仅适用于Android平台（开发板+Docker也支持）&lt;/p&gt; &#xA;&lt;p&gt;特性：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持arm64 syscall trace，可以打印参数、调用栈、寄存器 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;参数结果包括详细的结构体信息，类似于strace&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;支持对64位用户态动态库进行uprobe hook，可以打印参数、调用栈、寄存器&lt;/li&gt; &#xA; &lt;li&gt;支持硬件断点功能，可以打印调用栈、寄存器&lt;/li&gt; &#xA; &lt;li&gt;支持按线程名黑名单、白名单过滤&lt;/li&gt; &#xA; &lt;li&gt;支持pid和tid的黑名单、白名单过滤&lt;/li&gt; &#xA; &lt;li&gt;支持追踪fork产生的进程&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;要求：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;root权限，系统内核版本5.10+（可在设置中查看或执行&lt;code&gt;uname -r&lt;/code&gt;查看）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;使用&lt;/h1&gt; &#xA;&lt;p&gt;从Releases或者Github Action下载最新预编译好的二进制文件即可&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;推送到手机的&lt;code&gt;/data/local/tmp&lt;/code&gt;目录下，添加可执行权限即可&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb push stackplz /data/local/tmp&#xA;adb shell&#xA;su&#xA;chmod +x /data/local/tmp/stackplz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;每次使用新版本时需要释放库文件，请使用下面的命令&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /data/local/tmp &amp;amp;&amp;amp; ./stackplz --prepare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;命令示意&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;3.1 &lt;strong&gt;追踪syscall&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.starbucks.cn --syscall connect,sendto,recvfrom -o tmp.log --dumphex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/images/Snipaste_2023-07-22_21-17-17.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;3.2 &lt;strong&gt;追踪libc的open&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;注：默认设定的库是&lt;code&gt;/apex/com.android.runtime/lib64/bionic/libc.so&lt;/code&gt;，要自定义请使用&lt;code&gt;--lib&lt;/code&gt;指定&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.starbucks.cn --point strstr[str,str] --point open[str,int] -o tmp.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/images/Snipaste_2023-07-22_21-21-33.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;3.3 通过&lt;strong&gt;指定包名&lt;/strong&gt;，对&lt;code&gt;libnative-lib.so&lt;/code&gt;的&lt;code&gt;_Z5func1v&lt;/code&gt;符号进行hook，并打印堆栈&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -p 37919 --brk 0xf3a4:x --brk-lib libnative-lib.so --stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/images/Snipaste_2023-09-08_17-08-42.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;3.4 在命中uprobe hook时发送信号&lt;/p&gt; &#xA;&lt;p&gt;有时候希望在经过特定点位的时候停止进程，以便于dump内存，那么可以使用&lt;code&gt;--kill&lt;/code&gt;来发送信号，示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.sfx.ebpf --lib libnative-lib.so -w _Z5func1v --stack --kill SIGSTOP&#xA;./stackplz -n com.starbucks.cn --syscall exit --kill SIGSTOP --stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果要恢复进程运行，可以用下面这样的命令（另起一个shell，root下执行）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kill -SIGCONT 4326&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.5 &lt;strong&gt;硬件断点&lt;/strong&gt;示例如下，支持的断点类型：&lt;code&gt;r,w,rw,x&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;pid + 绝对地址&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -p 9613 --brk 0x70ddfd63f0:x --stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pid + 偏移 + 库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -p 3102 --brk 0xf3a4:x --brk-lib libnative-lib.so --stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.6 以寄存器的值作为大小读取数据、或者指定大小&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz --name com.sfx.ebpf -w write[int,buf:x2,int]&#xA;./stackplz --name com.sfx.ebpf -w write[int,buf:32,int]&#xA;./stackplz --name com.sfx.ebpf -w write[int,buf:0x10,int]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;进阶用法：&lt;/p&gt; &#xA;&lt;p&gt;在&lt;code&gt;libc.so+0xA94E8&lt;/code&gt;处下断，读取&lt;code&gt;x1&lt;/code&gt;为&lt;code&gt;int&lt;/code&gt;，读取&lt;code&gt;sp+0x30-0x2c&lt;/code&gt;为&lt;code&gt;ptr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz --name com.sfx.ebpf -w 0xA94E8[int:x1,ptr:sp+0x30-0x2c]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在&lt;code&gt;libc.so+0xA94E8&lt;/code&gt;处下断，读取&lt;code&gt;x1&lt;/code&gt;为&lt;code&gt;int&lt;/code&gt;，读取&lt;code&gt;sp+0x30-0x2c&lt;/code&gt;为&lt;code&gt;buf&lt;/code&gt;，长度为&lt;code&gt;8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz --name com.sfx.ebpf -w 0xA94E8[int:x1,buf:8:sp+0x30-0x2c]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.text:00000000000A94E4                 LDR             W1, [SP,#0x30+var_2C]&#xA;.text:00000000000A94E8                 MOV             W20, W0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;按默认顺序读取，以及按指定寄存器读取，下面的示例中两个方式输出结果相反：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz --name com.sfx.ebpf -w 0xA94E8[int,int]&#xA;./stackplz --name com.sfx.ebpf -w 0xA94E8[int:x1,int:x0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.8 按分组批量追踪进程&lt;/p&gt; &#xA;&lt;p&gt;追踪全部APP类型的进程，但是排除一个特定的uid：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n app --no-uid 10084 --point open[str,int] -o tmp.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;同时追踪一个APP和（所有）isolated进程：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.starbucks.cn,iso --syscall openat -o tmp.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可选的进程分组如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;root&lt;/li&gt; &#xA; &lt;li&gt;system&lt;/li&gt; &#xA; &lt;li&gt;shell&lt;/li&gt; &#xA; &lt;li&gt;app&lt;/li&gt; &#xA; &lt;li&gt;iso&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3.9 按分组批量追踪syscall&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.xingin.xhs -s %file,%net --no-syscall openat,recvfrom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可选的syscall分组如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;trace all syscall&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%attr &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;setxattr,lsetxattr,fsetxattr&lt;/li&gt; &#xA;   &lt;li&gt;getxattr,lgetxattr,fgetxattr&lt;/li&gt; &#xA;   &lt;li&gt;listxattr,llistxattr,flistxattr&lt;/li&gt; &#xA;   &lt;li&gt;removexattr,lremovexattr,fremovexattr&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;openat,openat2,faccessat,faccessat2,mknodat,mkdirat&lt;/li&gt; &#xA;   &lt;li&gt;unlinkat,symlinkat,linkat,renameat,renameat2,readlinkat&lt;/li&gt; &#xA;   &lt;li&gt;chdir,fchdir,chroot,fchmod,fchmodat,fchownat,fchown&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%exec &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;execve,execveat&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%clone &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clone,clone3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%process &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clone,clone3&lt;/li&gt; &#xA;   &lt;li&gt;execve,execveat&lt;/li&gt; &#xA;   &lt;li&gt;wait4,waitid&lt;/li&gt; &#xA;   &lt;li&gt;exit,exit_group,rt_sigqueueinfo&lt;/li&gt; &#xA;   &lt;li&gt;pidfd_send_signal,pidfd_open,pidfd_getfd&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%net &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;socket,socketpair&lt;/li&gt; &#xA;   &lt;li&gt;bind,listen,accept,connect&lt;/li&gt; &#xA;   &lt;li&gt;getsockname,getpeername,setsockopt,getsockopt&lt;/li&gt; &#xA;   &lt;li&gt;sendto,recvfrom,sendmsg,recvmsg&lt;/li&gt; &#xA;   &lt;li&gt;shutdown,recvmmsg,sendmmsg,accept4&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%signal &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sigaltstack&lt;/li&gt; &#xA;   &lt;li&gt;rt_sigsuspend,rt_sigaction,rt_sigprocmask,rt_sigpending&lt;/li&gt; &#xA;   &lt;li&gt;rt_sigtimedwait,rt_sigqueueinfo,rt_sigreturn,rt_tgsigqueueinfo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%kill &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;kill,tkill,tgkill&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;%stat &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;statfs,fstatfs,newfstatat,fstat,statx&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3.10 应用过滤规则&lt;/p&gt; &#xA;&lt;p&gt;黑白名单：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.starbucks.cn -s openat:f0.f1.f2 -f w:/system -f w:/dev -f b:/system/lib64 -o tmp.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;替换规则（下面的测试命令开两个shell执行）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.starbucks.cn,iso -s execve,openat:f0 -f r:/system/bin/su:::/system/bin/zz -o tmp_s.log&#xA;./stackplz -n com.starbucks.cn,iso -w popen[str.f0.f1] -f r:mount:::mounx -f &#34;r:which su:::which zz&#34; -o tmp_w.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ebpf中&lt;code&gt;bpf_probe_write_user&lt;/code&gt;需要预先指定写入数据大小，本项目暂且覆盖256字节，可能有潜在的问题&lt;/p&gt; &#xA;&lt;p&gt;替换功能仅做演示，用于展示ebpf操作数据的能力，如果要改为较为灵活的方式，会涉及常量编辑等功能，暂不实现&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;使用提示：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以用&lt;code&gt;--name&lt;/code&gt;指定包名，用&lt;code&gt;--uid&lt;/code&gt;指定进程所属uid，用&lt;code&gt;--pid&lt;/code&gt;指定进程&lt;/li&gt; &#xA; &lt;li&gt;默认hook的库是&lt;code&gt;/apex/com.android.runtime/lib64/bionic/libc.so&lt;/code&gt;，可以只提供符号进行hook&lt;/li&gt; &#xA; &lt;li&gt;hook目标加载的库时，默认在对应的库目录搜索，所以可以直接指定库名而不需要完整路径 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例如 &lt;code&gt;/data/app/~~t-iSPdaqQLZBOa9bm4keLA==/com.sfx.ebpf-C_ceI-EXetM4Ma7GVPORow==/lib/arm64&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;如果要hook的库无法被自动检索到，请提供在内存中加载的完整路径 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;最准确的做法是当程序运行时，查看程序的&lt;code&gt;/proc/{pid}/maps&lt;/code&gt;内容，这里的路径是啥就是啥&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;hook动态库请使用&lt;code&gt;--point/-w&lt;/code&gt;，可设置多个，语法是{符号/基址偏移}{+符号偏移}{[参数类型,参数类型...]} &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;--point _Z5func1v&lt;/li&gt; &#xA;   &lt;li&gt;--point strstr[str,str] --point open[str,int]&lt;/li&gt; &#xA;   &lt;li&gt;--point write[int,buf:64]&lt;/li&gt; &#xA;   &lt;li&gt;--point 0x9542c[str,str]&lt;/li&gt; &#xA;   &lt;li&gt;--point strstr+0x4[str,str]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;hook syscall需要指定&lt;code&gt;--syscall/-s&lt;/code&gt;选项，多个syscall请使用&lt;code&gt;,&lt;/code&gt;隔开 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;--syscall openat&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;特别的，指定为&lt;code&gt;all&lt;/code&gt;表示追踪全部syscall &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;--syscall all&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;特别说明&lt;/strong&gt;，很多结果是&lt;code&gt;0xffffff9c&lt;/code&gt;这样的结果，其实是&lt;code&gt;int&lt;/code&gt;，但是目前没有专门转换&lt;/li&gt; &#xA; &lt;li&gt;注意，本项目中syscall的返回值通常是&lt;strong&gt;errno&lt;/strong&gt;，与libc的函数返回结果不一定一致&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dumphex&lt;/code&gt;表示将数据打印为hexdump，否则将记录为&lt;code&gt;ascii + hex&lt;/code&gt;的形式&lt;/li&gt; &#xA; &lt;li&gt;输出到日志文件添加&lt;code&gt;-o/--out tmp.log&lt;/code&gt;，只输出到日志，不输出到终端再加一个&lt;code&gt;--quiet&lt;/code&gt;即可&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，默认屏蔽下列线程，原因是它们属于渲染相关的线程，会触发大量的syscall调用&lt;/p&gt; &#xA;&lt;p&gt;如果有需求追踪下列线程，请手动修改源码去除限制，重新编译使用&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RenderThread&lt;/li&gt; &#xA; &lt;li&gt;FinalizerDaemon&lt;/li&gt; &#xA; &lt;li&gt;RxCachedThreadS&lt;/li&gt; &#xA; &lt;li&gt;mali-cmar-backe&lt;/li&gt; &#xA; &lt;li&gt;mali-utility-wo&lt;/li&gt; &#xA; &lt;li&gt;mali-mem-purge&lt;/li&gt; &#xA; &lt;li&gt;mali-hist-dump&lt;/li&gt; &#xA; &lt;li&gt;mali-event-hand&lt;/li&gt; &#xA; &lt;li&gt;hwuiTask0&lt;/li&gt; &#xA; &lt;li&gt;hwuiTask1&lt;/li&gt; &#xA; &lt;li&gt;NDK MediaCodec_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多用法，请通过&lt;code&gt;-h/--help&lt;/code&gt;查看：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/data/local/tmp/stackplz -h&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;编译&lt;/h1&gt; &#xA;&lt;p&gt;可参考&lt;a href=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/.github/workflows/build.yml&#34;&gt;workflow&lt;/a&gt;或查看&lt;a href=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/BUILD.md&#34;&gt;编译文档&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;h1&gt;Q &amp;amp; A&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;preload_libs&lt;/code&gt;里面的库怎么编译的？&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;参见：&lt;a href=&#34;https://github.com/SeeFlowerX/unwinddaemon&#34;&gt;unwinddaemon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;perf event ring buffer full, dropped 9 samples&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;使用&lt;code&gt;-b/-buffer&lt;/code&gt;设置每个CPU的缓冲区大小，默认为&lt;code&gt;8M&lt;/code&gt;，如果出现数据丢失的情况，请适当增加这个值，直到不再出现数据丢失的情况&lt;/p&gt; &#xA;&lt;p&gt;命令示意如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./stackplz -n com.starbucks.cn -b 32 --syscall all -o tmp.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;一味增大缓冲区大小也可能带来新的问题，比如分配失败，这个时候建议尽可能清理正在运行的进程&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;failed to create perf ring for CPU 0: can&#39;t mmap: cannot allocate memory&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;通过符号hook确定调用了但是不输出信息？&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;某些符号存在多种实现（或者重定位？），这个时候需要指定具体使用的符号或者偏移&lt;/p&gt; &#xA;&lt;p&gt;例如&lt;code&gt;strchr&lt;/code&gt;可能实际使用的是&lt;code&gt;__strchr_aarch64&lt;/code&gt;，这个时候应该指定&lt;code&gt;__strchr_aarch64&lt;/code&gt;而不是&lt;code&gt;strchr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;coral:/data/local/tmp # readelf -s /apex/com.android.runtime/lib64/bionic/libc.so | grep strchr&#xA;   868: 00000000000b9f00    32 GNU_IFUNC GLOBAL DEFAULT   14 strchrnul&#xA;   869: 00000000000b9ee0    32 GNU_IFUNC GLOBAL DEFAULT   14 strchr&#xA;  1349: 000000000007bcf8    68 FUNC    GLOBAL DEFAULT   14 __strchr_chk&#xA;   689: 000000000004a8c0   132 FUNC    LOCAL  HIDDEN    14 __strchrnul_aarch64_mte&#xA;   692: 000000000004a980   172 FUNC    LOCAL  HIDDEN    14 __strchrnul_aarch64&#xA;   695: 000000000004aa40   160 FUNC    LOCAL  HIDDEN    14 __strchr_aarch64_mte&#xA;   698: 000000000004ab00   204 FUNC    LOCAL  HIDDEN    14 __strchr_aarch64&#xA;  5143: 00000000000b9ee0    32 FUNC    LOCAL  HIDDEN    14 strchr_resolver&#xA;  5144: 00000000000b9f00    32 FUNC    LOCAL  HIDDEN    14 strchrnul_resolver&#xA;  5550: 00000000000b9ee0    32 GNU_IFUNC GLOBAL DEFAULT   14 strchr&#xA;  6253: 000000000007bcf8    68 FUNC    GLOBAL DEFAULT   14 __strchr_chk&#xA;  6853: 00000000000b9f00    32 GNU_IFUNC GLOBAL DEFAULT   14 strchrnul&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如图，可以看到直接调用了&lt;code&gt;__strchr_aarch64&lt;/code&gt;而不是经过&lt;code&gt;strchr&lt;/code&gt;再去调用&lt;code&gt;__strchr_aarch64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/images/Snipaste_2022-11-13_14-19-38.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;交流&lt;/h1&gt; &#xA;&lt;p&gt;有关eBPF on Android系列可以加群交流&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SeeFlowerX/stackplz/dev/images/Snipaste_2023-09-08_21-19-26.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;个人碎碎念太多，有关stackplz文章就不同步到本项目了，请移步博客查看：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.seeflower.dev/archives/176/&#34;&gt;eBPF on Android之stackplz从0到1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.seeflower.dev/archives/177/&#34;&gt;eBPF on Android之stackplz从0到1（补充）手机为何重启&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.seeflower.dev/archives/269/&#34;&gt;基于eBPF的安卓逆向辅助工具——stackplz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;之前针对syscall追踪并获取参数单独开了一个项目，整体结构更简单，没有interface，有兴趣请移步&lt;a href=&#34;https://github.com/SeeFlowerX/estrace&#34;&gt;estrace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;不过目前&lt;code&gt;estrace&lt;/code&gt;的全部功能已经在stackplz中实现，不日将存档&lt;/p&gt; &#xA;&lt;h1&gt;Ref&lt;/h1&gt; &#xA;&lt;p&gt;本项目参考了以下项目和文章：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ehids/ecapture&#34;&gt;eCapture(旁观者)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bbs.pediy.com/thread-274546.htm&#34;&gt;定制bcc/ebpf在android平台上实现基于dwarf的用户态栈回溯&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://android.googlesource.com/platform/system/extras/+/master/simpleperf/doc/README.md&#34;&gt;Simpleperf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aquasecurity/tracee&#34;&gt;Tracee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iovisor/bpftrace&#34;&gt;bpftrace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>