<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:30:28Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vanhauser-thc/thc-hydra</title>
    <updated>2022-12-06T01:30:28Z</updated>
    <id>tag:github.com,2022-12-06:/vanhauser-thc/thc-hydra</id>
    <link href="https://github.com/vanhauser-thc/thc-hydra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;hydra&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;&#x9;  H Y D R A&#xA;&#xA;                  (c) 2001-2022 by van Hauser / THC&#xA;         &amp;lt;vh@thc.org&amp;gt; https://github.com/vanhauser-thc/thc-hydra&#xA;   many modules were written by David (dot) Maciejak @ gmail (dot) com&#xA;             BFG code by Jan Dlabal &amp;lt;dlabaljan@gmail.com&amp;gt;&#xA;&#xA;&#x9;    Licensed under AGPLv3 (see LICENSE file)&#xA;&#xA;       Please do not use in military or secret service organizations,&#xA;                      or for illegal purposes.&#xA;  (This is the wish of the author and non-binding. Many people working&#xA;   in these organizations do not care for laws and ethics anyways.&#xA;        You are not one of the &#34;good&#34; ones if you ignore this.)&#xA;&#xA;       NOTE: no this is not meant to be a markdown doc! old school!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hydra in the most current github state can be directly downloaded via docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull vanhauser/hydra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;INTRODUCTION&lt;/h2&gt; &#xA;&lt;p&gt;Number one of the biggest security holes are passwords, as every password security study shows. This tool is a proof of concept code, to give researchers and security consultants the possibility to show how easy it would be to gain unauthorized access from remote to a system.&lt;/p&gt; &#xA;&lt;p&gt;THIS TOOL IS FOR LEGAL PURPOSES ONLY!&lt;/p&gt; &#xA;&lt;p&gt;There are already several login hacker tools available, however, none does either support more than one protocol to attack or support parallelized connects.&lt;/p&gt; &#xA;&lt;p&gt;It was tested to compile cleanly on Linux, Windows/Cygwin, Solaris, FreeBSD/OpenBSD, QNX (Blackberry 10) and MacOS.&lt;/p&gt; &#xA;&lt;p&gt;Currently this tool supports the following protocols: Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-POST, HTTP-PROXY, HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST, HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MEMCACHED, MONGODB, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener, Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, Radmin, RDP, Rexec, Rlogin, Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5, SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth, VNC and XMPP.&lt;/p&gt; &#xA;&lt;p&gt;However the module engine for new services is very easy so it won&#39;t take a long time until even more services are supported. Your help in writing, enhancing or fixing modules is highly appreciated!! :-)&lt;/p&gt; &#xA;&lt;h2&gt;WHERE TO GET&lt;/h2&gt; &#xA;&lt;p&gt;You can always find the newest release/production version of hydra at its project page at &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra/releases&#34;&gt;https://github.com/vanhauser-thc/thc-hydra/releases&lt;/a&gt; If you are interested in the current development state, the public development repository is at Github: svn co &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt; or git clone &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt; Use the development version at your own risk. It contains new features and new bugs. Things might not work!&lt;/p&gt; &#xA;&lt;p&gt;Alternatively (and easier) to can pull it as a docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull vanhauser/hydra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HOW TO COMPILE&lt;/h2&gt; &#xA;&lt;p&gt;To configure, compile and install hydra, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the ssh module, you have to setup libssh (not libssh2!) on your system, get it from &lt;a href=&#34;https://www.libssh.org&#34;&gt;https://www.libssh.org&lt;/a&gt;, for ssh v1 support you also need to add &#34;-DWITH_SSH1=On&#34; option in the cmake command line. IMPORTANT: If you compile on MacOS then you must do this - do not install libssh via brew!&lt;/p&gt; &#xA;&lt;p&gt;If you use Ubuntu/Debian, this will install supplementary libraries needed for a few optional modules (note that some might not be available on your distribution):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install libssl-dev libssh-dev libidn11-dev libpcre3-dev \&#xA;                 libgtk2.0-dev libmysqlclient-dev libpq-dev libsvn-dev \&#xA;                 firebird-dev libmemcached-dev libgpg-error-dev \&#xA;                 libgcrypt11-dev libgcrypt20-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables all optional modules and features with the exception of Oracle, SAP R/3, NCP and the apple filing protocol - which you will need to download and install from the vendor&#39;s web sites.&lt;/p&gt; &#xA;&lt;p&gt;For all other Linux derivates and BSD based systems, use the system software installer and look for similarly named libraries like in the command above. In all other cases, you have to download all source libraries and compile them manually.&lt;/p&gt; &#xA;&lt;h2&gt;SUPPORTED PLATFORMS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All UNIX platforms (Linux, *BSD, Solaris, etc.)&lt;/li&gt; &#xA; &lt;li&gt;MacOS (basically a BSD clone)&lt;/li&gt; &#xA; &lt;li&gt;Windows with Cygwin (both IPv4 and IPv6)&lt;/li&gt; &#xA; &lt;li&gt;Mobile systems based on Linux, MacOS or QNX (e.g. Android, iPhone, Blackberry 10, Zaurus, iPaq)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HOW TO USE&lt;/h2&gt; &#xA;&lt;p&gt;If you just enter &lt;code&gt;hydra&lt;/code&gt;, you will see a short summary of the important options available. Type &lt;code&gt;./hydra -h&lt;/code&gt; to see all available command line options.&lt;/p&gt; &#xA;&lt;p&gt;Note that NO login/password file is included. Generate them yourself. A default password list is however present, use &#34;dpl4hydra.sh&#34; to generate a list.&lt;/p&gt; &#xA;&lt;p&gt;For Linux users, a GTK GUI is available, try &lt;code&gt;./xhydra&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the command line usage, the syntax is as follows: For attacking one target or a network, you can use the new &#34;://&#34; style: hydra [some command line options] PROTOCOL://TARGET:PORT/MODULE-OPTIONS The old mode can be used for these too, and additionally if you want to specify your targets from a text file, you &lt;em&gt;must&lt;/em&gt; use this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra [some command line options] [-s PORT] TARGET PROTOCOL [MODULE-OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Via the command line options you specify which logins to try, which passwords, if SSL should be used, how many parallel tasks to use for attacking, etc.&lt;/p&gt; &#xA;&lt;p&gt;PROTOCOL is the protocol you want to use for attacking, e.g. ftp, smtp, http-get or many others are available TARGET is the target you want to attack MODULE-OPTIONS are optional values which are special per PROTOCOL module&lt;/p&gt; &#xA;&lt;p&gt;FIRST - select your target you have three options on how to specify the target you want to attack:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a single target on the command line: just put the IP or DNS address in&lt;/li&gt; &#xA; &lt;li&gt;a network range on the command line: CIDR specification like &#34;192.168.0.0/24&#34;&lt;/li&gt; &#xA; &lt;li&gt;a list of hosts in a text file: one line per entry (see below)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;SECOND - select your protocol Try to avoid telnet, as it is unreliable to detect a correct or false login attempt. Use a port scanner to see which protocols are enabled on the target.&lt;/p&gt; &#xA;&lt;p&gt;THIRD - check if the module has optional parameters hydra -U PROTOCOL e.g. hydra -U smtp&lt;/p&gt; &#xA;&lt;p&gt;FOURTH - the destination port this is optional, if no port is supplied the default common port for the PROTOCOL is used. If you specify SSL to use (&#34;-S&#34; option), the SSL common port is used by default.&lt;/p&gt; &#xA;&lt;p&gt;If you use &#34;://&#34; notation, you must use &#34;[&#34; &#34;]&#34; brackets if you want to supply IPv6 addresses or CIDR (&#34;192.168.0.0/24&#34;) notations to attack: hydra [some command line options] ftp://[192.168.0.0/24]/ hydra [some command line options] -6 smtps://[2001:db8::1]/NTLM&lt;/p&gt; &#xA;&lt;p&gt;Note that everything hydra does is IPv4 only! If you want to attack IPv6 addresses, you must add the &#34;-6&#34; command line option. All attacks are then IPv6 only!&lt;/p&gt; &#xA;&lt;p&gt;If you want to supply your targets via a text file, you can not use the :// notation but use the old style and just supply the protocol (and module options): hydra [some command line options] -M targets.txt ftp You can also supply the port for each target entry by adding &#34;:&#xA; &lt;port&gt;&#xA;  &#34; after a target entry in the file, e.g.:&#xA; &lt;/port&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo.bar.com&#xA;target.com:21&#xA;unusual.port.com:2121&#xA;default.used.here.com&#xA;127.0.0.1&#xA;127.0.0.1:2121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you want to attach IPv6 targets, you must supply the -6 option and &lt;em&gt;must&lt;/em&gt; put IPv6 addresses in brackets in the file(!) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo.bar.com&#xA;target.com:21&#xA;[fe80::1%eth0]&#xA;[2001::1]&#xA;[2002::2]:8080&#xA;[2a01:24a:133:0:00:123:ff:1a]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LOGINS AND PASSWORDS&lt;/h2&gt; &#xA;&lt;p&gt;You have many options on how to attack with logins and passwords With -l for login and -p for password you tell hydra that this is the only login and/or password to try. With -L for logins and -P for passwords you supply text files with entries. e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra -l admin -p password ftp://localhost/&#xA;hydra -L default_logins.txt -p test ftp://localhost/&#xA;hydra -l admin -P common_passwords.txt ftp://localhost/&#xA;hydra -L logins.txt -P passwords.txt ftp://localhost/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can try passwords based on the login via the &#34;-e&#34; option. The &#34;-e&#34; option has three parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;s - try the login as password&#xA;n - try an empty password&#xA;r - reverse the login and try it as password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to, e.g. try &#34;try login as password and &#34;empty password&#34;, you specify &#34;-e sn&#34; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;But there are two more modes for trying passwords than -p/-P: You can use text file which where a login and password pair is separated by a colon, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;admin:password&#xA;test:test&#xA;foo:bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a common default account style listing, that is also generated by the dpl4hydra.sh default account file generator supplied with hydra. You use such a text file with the -C option - note that in this mode you can not use -l/-L/-p/-P options (-e nsr however you can). Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra -C default_accounts.txt ftp://localhost/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, there is a bruteforce mode with the -x option (which you can not use with -p/-P/-C):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-x minimum_length:maximum_length:charset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the charset definition is &lt;code&gt;a&lt;/code&gt; for lowercase letters, &lt;code&gt;A&lt;/code&gt; for uppercase letters, &lt;code&gt;1&lt;/code&gt; for numbers and for anything else you supply it is their real representation. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-x 1:3:a generate passwords from length 1 to 3 with all lowercase letters&#xA;-x 2:5:/ generate passwords from length 2 to 5 containing only slashes&#xA;-x 5:8:A1 generate passwords from length 5 to 8 with uppercase and numbers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hydra -l ftp -x 3:3:a ftp://localhost/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SPECIAL OPTIONS FOR MODULES&lt;/h2&gt; &#xA;&lt;p&gt;Via the third command line parameter (TARGET SERVICE OPTIONAL) or the -m command line option, you can pass one option to a module. Many modules use this, a few require it!&lt;/p&gt; &#xA;&lt;p&gt;To see the special option of a module, type:&lt;/p&gt; &#xA;&lt;p&gt;hydra -U &#xA; &lt;module&gt;&lt;/module&gt;&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;p&gt;./hydra -U http-post-form&lt;/p&gt; &#xA;&lt;p&gt;The special options can be passed via the -m parameter, as 3rd command line option or in the service://target/option format.&lt;/p&gt; &#xA;&lt;p&gt;Examples (they are all equal):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./hydra -l test -p test -m PLAIN 127.0.0.1 imap&#xA;./hydra -l test -p test 127.0.0.1 imap PLAIN&#xA;./hydra -l test -p test imap://127.0.0.1/PLAIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RESTORING AN ABORTED/CRASHED SESSION&lt;/h2&gt; &#xA;&lt;p&gt;When hydra is aborted with Control-C, killed or crashes, it leaves a &#34;hydra.restore&#34; file behind which contains all necessary information to restore the session. This session file is written every 5 minutes. NOTE: the hydra.restore file can NOT be copied to a different platform (e.g. from little endian to big endian, or from Solaris to AIX)&lt;/p&gt; &#xA;&lt;h2&gt;HOW TO SCAN/CRACK OVER A PROXY&lt;/h2&gt; &#xA;&lt;p&gt;The environment variable HYDRA_PROXY_HTTP defines the web proxy (this works just for the http services!). The following syntax is valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HYDRA_PROXY_HTTP=&#34;http://123.45.67.89:8080/&#34;&#xA;HYDRA_PROXY_HTTP=&#34;http://login:password@123.45.67.89:8080/&#34;&#xA;HYDRA_PROXY_HTTP=&#34;proxylist.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last example is a text file containing up to 64 proxies (in the same format definition as the other examples).&lt;/p&gt; &#xA;&lt;p&gt;For all other services, use the HYDRA_PROXY variable to scan/crack. It uses the same syntax. eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HYDRA_PROXY=[connect|socks4|socks5]://[login:password@]proxy_addr:proxy_port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HYDRA_PROXY=connect://proxy.anonymizer.com:8000&#xA;HYDRA_PROXY=socks4://auth:pw@127.0.0.1:1080&#xA;HYDRA_PROXY=socksproxylist.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ADDITIONAL HINTS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sort your password files by likelihood and use the -u option to find passwords much faster!&lt;/li&gt; &#xA; &lt;li&gt;uniq your dictionary files! this can save you a lot of time :-) cat words.txt | sort | uniq &amp;gt; dictionary.txt&lt;/li&gt; &#xA; &lt;li&gt;if you know that the target is using a password policy (allowing users only to choose a password with a minimum length of 6, containing a least one letter and one number, etc. use the tool pw-inspector which comes along with the hydra package to reduce the password list: cat dictionary.txt | pw-inspector -m 6 -c 2 -n &amp;gt; passlist.txt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RESULTS OUTPUT&lt;/h2&gt; &#xA;&lt;p&gt;The results are output to stdio along with the other information. Via the -o command line option, the results can also be written to a file. Using -b, the format of the output can be specified. Currently, these are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; - plain text format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jsonv1&lt;/code&gt; - JSON data using version 1.x of the schema (defined below).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json&lt;/code&gt; - JSON data using the latest version of the schema, currently there is only version 1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If using JSON output, the results file may not be valid JSON if there are serious errors in booting Hydra.&lt;/p&gt; &#xA;&lt;h2&gt;JSON Schema&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example of the JSON output. Notes on some of the fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;errormessages&lt;/code&gt; - an array of zero or more strings that are normally printed to stderr at the end of the Hydra&#39;s run. The text is very free form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;success&lt;/code&gt; - indication if Hydra ran correctly without error (&lt;strong&gt;NOT&lt;/strong&gt; if passwords were detected). This parameter is either the JSON value &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on completion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quantityfound&lt;/code&gt; - How many username+password combinations discovered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jsonoutputversion&lt;/code&gt; - Version of the schema, 1.00, 1.01, 1.11, 2.00, 2.03, etc. Hydra will make second tuple of the version to always be two digits to make it easier for downstream processors (as opposed to v1.1 vs v1.10). The minor-level versions are additive, so 1.02 will contain more fields than version 1.00 and will be backward compatible. Version 2.x will break something from version 1.x output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 1.00 example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;errormessages&#34;: [&#xA;        &#34;[ERROR] Error Message of Something&#34;,&#xA;        &#34;[ERROR] Another Message&#34;,&#xA;        &#34;These are very free form&#34;&#xA;    ],&#xA;    &#34;generator&#34;: {&#xA;        &#34;built&#34;: &#34;2021-03-01 14:44:22&#34;,&#xA;        &#34;commandline&#34;: &#34;hydra -b jsonv1 -o results.json ... ...&#34;,&#xA;        &#34;jsonoutputversion&#34;: &#34;1.00&#34;,&#xA;        &#34;server&#34;: &#34;127.0.0.1&#34;,&#xA;        &#34;service&#34;: &#34;http-post-form&#34;,&#xA;        &#34;software&#34;: &#34;Hydra&#34;,&#xA;        &#34;version&#34;: &#34;v8.5&#34;&#xA;    },&#xA;    &#34;quantityfound&#34;: 2,&#xA;    &#34;results&#34;: [&#xA;        {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;login&#34;: &#34;bill@example.com&#34;,&#xA;            &#34;password&#34;: &#34;bill&#34;,&#xA;            &#34;port&#34;: 9999,&#xA;            &#34;service&#34;: &#34;http-post-form&#34;&#xA;        },&#xA;        {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;login&#34;: &#34;joe@example.com&#34;,&#xA;            &#34;password&#34;: &#34;joe&#34;,&#xA;            &#34;port&#34;: 9999,&#xA;            &#34;service&#34;: &#34;http-post-form&#34;&#xA;        }&#xA;    ],&#xA;    &#34;success&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SPEED&lt;/h2&gt; &#xA;&lt;p&gt;through the parallelizing feature, this password cracker tool can be very fast, however it depends on the protocol. The fastest are generally POP3 and FTP. Experiment with the task option (-t) to speed things up! The higher - the faster ;-) (but too high - and it disables the service)&lt;/p&gt; &#xA;&lt;h2&gt;STATISTICS&lt;/h2&gt; &#xA;&lt;p&gt;Run against a SuSE Linux 7.2 on localhost with a &#34;-C FILE&#34; containing 295 entries (294 tries invalid logins, 1 valid). Every test was run three times (only for &#34;1 task&#34; just once), and the average noted down.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;&#x9;P A R A L L E L    T A S K S&#xA;SERVICE&#x9;1&#x9;4&#x9;8&#x9;16&#x9;32&#x9;50&#x9;64&#x9;100&#x9;128&#xA;------- --------------------------------------------------------------------&#xA;telnet&#x9;23:20&#x9;5:58&#x9;2:58&#x9;1:34&#x9;1:05&#x9;0:33&#x9;0:45*&#x9;0:25*&#x9;0:55*&#xA;ftp&#x9;45:54&#x9;11:51&#x9;5:54&#x9;3:06&#x9;1:25&#x9;0:58&#x9;0:46&#x9;0:29&#x9;0:32&#xA;pop3&#x9;92:10&#x9;27:16&#x9;13:56&#x9;6:42&#x9;2:55&#x9;1:57&#x9;1:24&#x9;1:14&#x9;0:50&#xA;imap&#x9;31:05&#x9;7:41&#x9;3:51&#x9;1:58&#x9;1:01&#x9;0:39&#x9;0:32&#x9;0:25&#x9;0:21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(*) Note: telnet timings can be VERY different for 64 to 128 tasks! e.g. with 128 tasks, running four times resulted in timings between 28 and 97 seconds! The reason for this is unknown...&lt;/p&gt; &#xA;&lt;p&gt;guesses per task (rounded up):&lt;/p&gt; &#xA;&lt;p&gt;295 74 38 19 10 6 5 3 3&lt;/p&gt; &#xA;&lt;p&gt;guesses possible per connect (depends on the server software and config):&lt;/p&gt; &#xA;&lt;p&gt;telnet 4 ftp 6 pop3 1 imap 3&lt;/p&gt; &#xA;&lt;h2&gt;BUGS &amp;amp; FEATURES&lt;/h2&gt; &#xA;&lt;p&gt;Hydra: Email me or David if you find bugs or if you have written a new module. &lt;a href=&#34;mailto:vh@thc.org&#34;&gt;vh@thc.org&lt;/a&gt; (and put &#34;antispam&#34; in the subject line)&lt;/p&gt; &#xA;&lt;p&gt;You should use PGP to encrypt emails to &lt;a href=&#34;mailto:vh@thc.org&#34;&gt;vh@thc.org&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----&#xA;Version: GnuPG v3.3.3 (vh@thc.org)&#xA;&#xA;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&#xA;zB3yrr+vYBT0uDWmxwPjiJs=&#xA;=ytEf&#xA;-----END PGP PUBLIC KEY BLOCK-----&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>samyk/magspoof</title>
    <updated>2022-12-06T01:30:28Z</updated>
    <id>tag:github.com,2022-12-06:/samyk/magspoof</id>
    <link href="https://github.com/samyk/magspoof" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A portable device that can spoof/emulate any magnetic stripe, credit card or hotel card &#34;wirelessly&#34;, even on standard magstripe (non-NFC/RFID) readers. It can disable Chip&amp;PIN and predict AMEX card numbers with 100% accuracy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;http://samy.pl/magspoof/&#34;&gt;MagSpoof&lt;/a&gt; - credit card/magstripe spoofer&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows you to store all of your credit cards and magstripes in one device&lt;/li&gt; &#xA; &lt;li&gt;Works on traditional magstripe readers &lt;strong&gt;wirelessly&lt;/strong&gt; (no NFC/RFID required)&lt;/li&gt; &#xA; &lt;li&gt;Can &lt;strong&gt;disable&lt;/strong&gt; Chip-and-PIN (code not included)&lt;/li&gt; &#xA; &lt;li&gt;Correctly &lt;strong&gt;predicts&lt;/strong&gt; Amex credit card numbers + expirations from previous card number (code not included)&lt;/li&gt; &#xA; &lt;li&gt;Supports all three magnetic stripe tracks, and even supports Track 1+2 simultaneously&lt;/li&gt; &#xA; &lt;li&gt;Easy to build using Arduino or other common parts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://samy.pl/magspoof&#34;&gt;MagSpoof&lt;/a&gt;&lt;/strong&gt; is a device that can spoof/emulate any magnetic stripe or credit card. It can work &#34;wirelessly&#34;, even on &lt;strong&gt;standard magstripe/credit card readers&lt;/strong&gt;, by generating a strong electromagnetic field that emulates a traditional magnetic stripe card.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MagSpoof does &lt;strong&gt;not&lt;/strong&gt; enable you to use credit cards that you are not legally authorized to use. The Chip-and-PIN and Amex information is &lt;strong&gt;not&lt;/strong&gt; implemented and using MagSpoof requires you to have/own the magstripes that you wish to emulate. Simply having a credit card number and expiration is not enough to perform transactions. MagSpoof &lt;strong&gt;does&lt;/strong&gt; allow you to perform research in other areas of magstripes, microcontrollers, and electromagnetism, as well as learn about and create your own devices similar to other existing, commercial technologies such as &lt;a href=&#34;http://www.samsung.com/us/support/answer/ANS00043865/997410383/&#34;&gt;Samsung MST&lt;/a&gt; and &lt;a href=&#34;https://onlycoin.com/&#34;&gt;Coin&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/meter-small2.gif&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/meter-small2.gif&#34; alt=&#34;Visualizing magstripe data&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MagSpoof can be used as a traditional credit card and simply store all of your credit cards (and with modification, can technically disable chip requirements) in various impressive and exciting form factors, or can be used for security research in any area that would traditionally require a magstripe, such as readers for credit cards, drivers licenses, hotel room keys, automated parking lot tickets, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Live demonstration&lt;/strong&gt; and more details available in the video: &lt;a href=&#34;https://www.youtube.com/watch?v=UHSFf0Lz1qc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/UHSFf0Lz1qc/0.jpg&#34; alt=&#34;MagSpoof&#34; width=&#34;640&#34; height=&#34;480&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Point of Contact:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/samykamkar&#34;&gt;@SamyKamkar&lt;/a&gt; // &lt;a href=&#34;mailto:code@samy.pl&#34;&gt;code@samy.pl&lt;/a&gt; // &lt;a href=&#34;http://samy.pl&#34;&gt;http://samy.pl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Released:&lt;/strong&gt; November 24, 2015&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source code / schematic:&lt;/strong&gt; &lt;a href=&#34;https://github.com/samyk/magspoof&#34;&gt;https://github.com/samyk/magspoof&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How magnetic stripes work&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/iron-oxide-short-low.gif&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/iron-oxide-short-low.gif&#34; alt=&#34;Visualizing magstripe data&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Magnetic stripes (magstripes) are in fact magnetic. What&#39;s so cool about magstripes is that while the magnetic strips inside are weak, they&#39;re still strong enough to attract small ferrous particles and wide enough that we can &lt;strong&gt;fully extract all data from a magstripe or credit card with the naked eye&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the video, I actually dip my credit card into a bag of iron oxide. The magnetic elements in the magstripe attract the iron oxide and after pulling it out, you can actually see each bit in the tracks. &lt;a href=&#34;https://en.wikipedia.org/wiki/Magnetic_stripe_card#Financial_cards&#34;&gt;Financial cards&lt;/a&gt; with magnetic strips can have up to three tracks, however credit cards only have two tracks (Tracks 1 and 2). Track 2 stores fewer bits than Track 1, so it has a lower linear density (bits per inch). This makes Track 2 much easier to see. Let&#39;s take a look:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/mag1.png&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/mag1.png&#34; alt=&#34;Credit card magnetic stripe&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Front of card:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/cc-front.jpg&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/cc-front.jpg&#34; alt=&#34;Credit card magnetic stripe&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see on my card, I&#39;ve written out the bits above the strips. Two solid stripes is a 1 and a stripe followed by a space is a 0. First, let&#39;s flip the card 180 degrees (looking at it upside down), and read it as least significant bit first. We ignore all the initial 0&#39;s until the very first 1.&lt;/p&gt; &#xA;&lt;p&gt;Track 2 is 5 bits per character, least significant bit first, and the 5th bit is an odd parity bit. By taking each 5 bits and reading the first 4 bits, we can now begin extracting the credit card number (and other data, such as expiration date, discretionary data, CVV/CVC/CSC/CID/CAV depending on card type).&lt;/p&gt; &#xA;&lt;p&gt;Note that the CVV is different than the CVV2. The CVV is stored on the magstripe, while the CVV2 is printed on a card. (CVV is specific to Visa, and each issuer has their own name such as CSC, CVC, etc.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/cciron.jpg&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/cciron.jpg&#34; alt=&#34;Credit card magnetic stripe&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How MagSpoof Works&lt;/h1&gt; &#xA;&lt;p&gt;MagSpoof emulates a magnetic stripe by quickly changing the polarization of an electromagnet, producing a magnetic field similar to that of a normal magnetic stripe as if it&#39;s being swiped. What&#39;s incredible is that the magstripe reader requires no form of wireless receiver, NFC, or RFID -- MagSpoof works wirelessly, even with &lt;strong&gt;standard magstripe readers.&lt;/strong&gt; The stronger the electromagnet, the further away you can use it (a few inches in its current iteration).&lt;/p&gt; &#xA;&lt;p&gt;MagSpoof also uses inexpensive, off the shelf parts (described in the Hardware section), and can be built with almost nothing more than an Arduino, wire and a battery! I use a motor driver to provide a reasonable amount of power.&lt;/p&gt; &#xA;&lt;p&gt;Normally electromagnets have an iron core, however we lose the core for the sake of space and portability. Also, while the iron core does make the electromagnet more efficient, we still produce more than enough power to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MagSpoof improves on new cards such as Coin.&lt;/strong&gt; I&#39;m a customer of Coin, and while I love their app and the card, the card actually works a very small percentage of the time. After looking over Coin&#39;s FCC docs, I noticed they use two coils to produce a (very small) electromagnetic field, however it&#39;s severely deficient and the card works less than 50% of the time for me, sadly.&lt;/p&gt; &#xA;&lt;p&gt;I found that by emulating a card with MagSpoof, if I send Track 1 one way, and then send Track 2 reversed, every card reader will assume I simply swiped a card back and forth, use the data from both tracks and my strong electromagnet, and properly read all of the data. This is extremely effective, uses only a single coil, and works for both tracks simultaneously. This also allows MagSpoof to work on Track 3.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you&#39;re using a Chip card with Coin, you &lt;strong&gt;still&lt;/strong&gt; need to bring your actual credit card to dip, however because MagSpoof can disable Chip-and-PIN (see below), it does &lt;strong&gt;not&lt;/strong&gt; require you to bring your card with you.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve removed the Chip-and-PIN disabling functionality from MagSpoof.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Security Issues&lt;/h1&gt; &#xA;&lt;p&gt;One of the primary issues I&#39;ve found is that some of the new forms of security (well, new in the US) are set in the &#34;service code&#34; portion of the magstripe, most specifically &lt;strong&gt;Chip-and-PIN.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The service code within a credit card magstripe defines several attributes of the card, including whether the card can dispense cash, where it can work (nationally, internationally), and most interestingly, whether the card has a built in IC (Chip) and if it has a pin (Chip-and-PIN / EMV).&lt;/p&gt; &#xA;&lt;p&gt;If your card has a chip inside and you go to a retailer that supports Chip but swipe just your magstripe, the point of sale (PoS) system will ask you to dip your card/chip for additional security if it supports it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;However, the bits stating the card has Chip-and-PIN can be turned off from the magstripe.&lt;/strong&gt; This means if you take a card to a retailer that would normally request you to dip, you can actually get away with not dipping your chip at all while performing a successful transaction, &lt;strong&gt;evading the security measures altogether&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/servicecodes.jpg&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/servicecodes.jpg&#34; alt=&#34;Credit Card Service Codes&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;American Express Card Number Prediction&lt;/h1&gt; &#xA;&lt;p&gt;What initially led me to investigate magnetic stripes was my Amex card. After losing a card and Amex quickly sending me a replacement, I noticed many of the digits were similar. I pulled up the numbers to several other Amex cards I had, and then compared against more than 20 other Amex cards and replacements and found &lt;strong&gt;a global pattern that allows me to accurately predict American Express card numbers by knowing a full card number, even if already reported lost or stolen.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This means if I were to obtain your Amex card and you called it in as lost or stolen, the moment you get a new card, I know your new credit card number.&lt;/p&gt; &#xA;&lt;p&gt;I also know the new expiration date as the expiration date is fixed based on when the new card was requested, and you can determine if the new card has been requested by performing an auth on the existing card.&lt;/p&gt; &#xA;&lt;p&gt;The CID (aka CVV2 on Visa) printed on the card is protected by a secret 3DES key that encrypts the PAN (Primary Account Number, aka credit card number), service code (see above), and expiration. The service code can be easily determined as most cards will contain the same service code.&lt;/p&gt; &#xA;&lt;p&gt;I also determined that the CSC (essentially behaves like a CID or CVV2 on the magstripe) for a lost or stolen card &lt;strong&gt;continues to work&lt;/strong&gt; for a newer, predicted card. An attacker would be able to use a stolen card&#39;s CSC with the predicted card number and expiration to make actual purchases.&lt;/p&gt; &#xA;&lt;p&gt;To actually perform the transaction without arousing suspicion, an attacker would be able to use a magstripe writer (e.g., the well known MSR605), or a device like MagSpoof, to &#34;load&#34; the newly devised card information onto a card like Coin. Coin itself does not actually verify the CID (CVV2), thus allowing an attacker to load data, and then use the Coin card in person without knowing the CID and exploiting these various issues, as well as disabling Chip-and-PIN.&lt;/p&gt; &#xA;&lt;p&gt;I notified American Express of the issue and I will not be releasing their algorithm.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Hardware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://samy.pl/magspoof/magspoof.jpg&#34;&gt;&lt;img src=&#34;http://samy.pl/magspoof/magspoof.jpg&#34; alt=&#34;MagSpoof&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://amzn.to/1S3ha9s&#34;&gt;Atmel ATtiny85&lt;/a&gt; (microcontroller)&lt;/h3&gt; &#xA;&lt;p&gt;An Atmel ATtiny85 is the microcontroller to drive the entire system. It stores all of the magnetic stripe / credit card data. In a thinner, credit-card sized (0.8mm thick!) version, I use an [ATtiny10].&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://amzn.to/1S3h9Ck&#34;&gt;L293D H-Bridge&lt;/a&gt; (motor driver)&lt;/h3&gt; &#xA;&lt;p&gt;I use an L293D H-bridge to drive the electromagnet. The L293D is a motor driver, but motors are actually driven by the electromagnet(s) and magnets inside of them. Any standard driver should work here. Technically the L293D doesn&#39;t work down at 3.7V (voltage of the LiPo battery), but it works surprisingly well. In the credit-card size version, I suggest using a the TI DRV8835 or &lt;a href=&#34;http://amzn.to/1lu0bTd&#34;&gt;TI DRV8833&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://amzn.to/1lu0ihK&#34;&gt;24AWG Magnet Wire&lt;/a&gt; (coil)&lt;/h3&gt; &#xA;&lt;p&gt;I use somewhere around ~24AWG magnet wire to act as the coil to produce the electromagnetic field. This piece of wire incredibly produces an electromagnetic field that makes the card reader believe a card is being swiped. Incredible. By rapidly controlling the polarization of this field, the magstripe reader believes the flipped bits of a real card are being swiped through the reader.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://amzn.to/1S3h69E&#34;&gt;100mAh 3.7V LiPo battery&lt;/a&gt; (the powah)&lt;/h3&gt; &#xA;&lt;p&gt;A small 100mAh 3.7V lipo battery powers our contraption. For the credit card size version (not shown here), I use a battery from &lt;a href=&#34;http://www.powerstream.com/thin-lithium-ion.htm&#34;&gt;PowerStream&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://amzn.to/1MAONOc&#34;&gt;100µF Capacitor&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Keep enough energy in this capacitor to provide the electromagnet with power when we need it, otherwise it will pull too much current and reset the microcontroller. This is the capacitor kit I use as it has all the standard values I&#39;d need.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://amzn.to/1Hl3y8Z&#34;&gt;LED&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To signal to us when we transmit information. I use this LED kit as it has a nice variety of LEDs.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://amzn.to/1IeCMtP&#34;&gt;100Ω Resistor&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Don&#39;t burn out the LED.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://amzn.to/1Hl3R3T&#34;&gt;Momentary Switch&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initiate the electromagnet.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://amzn.to/1Hl3VQV&#34;&gt;Mini-Protoboard&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For soldering everything together.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/samyk/magspoof/master/magspoof-schematic-dip.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samyk/magspoof/master/magspoof-schematic-dip.png&#34; alt=&#34;MagSpoof Schematic (DIP version)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Firmware&lt;/h1&gt; &#xA;&lt;h3&gt;MagSpoof&lt;/h3&gt; &#xA;&lt;p&gt;MagSpoof&#39;s source code and schematic can be obtained in entirety from my github: &lt;a href=&#34;https://github.com/samyk/magspoof&#34;&gt;https://github.com/samyk/magspoof&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MagSpoof is compatible with the Arduino framework and can work on traditional Arduinos as well as ATtiny chips.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;You can learn about magnetic stripes and credit cards from a few places, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UHSFf0Lz1qc&#34;&gt;My video on MagSpoof&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_7810&#34;&gt;ISO/IEC 7810&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_7811&#34;&gt;ISO/IEC 7811&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_7812&#34;&gt;ISO/IEC 7812&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_7813&#34;&gt;ISO/IEC 7813&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_8583&#34;&gt;ISO 8583&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_4909&#34;&gt;ISO/IEC 4909&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.magtek.com/documentation/public/99800004-1.08.pdf&#34;&gt;MagTek Magnetic Stripe Standards&lt;/a&gt; (pdf)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Magnetic_stripe_card&#34;&gt;Magnetic Stripe Card on Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://secure.cmax.americanexpress.com/Internet/MSWS/English/PIP-XML_Oct2010.pdf&#34;&gt;Amex&#39;s Web Services Plural Interface&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Point of Contact:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/samykamkar&#34;&gt;@SamyKamkar&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can see more of my projects at &lt;a href=&#34;http://samy.pl&#34;&gt;http://samy.pl&lt;/a&gt; or contact me at &lt;a href=&#34;mailto:code@samy.pl&#34;&gt;code@samy.pl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>bvschaik/julius</title>
    <updated>2022-12-06T01:30:28Z</updated>
    <id>tag:github.com,2022-12-06:/bvschaik/julius</id>
    <link href="https://github.com/bvschaik/julius" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source re-implementation of Caesar III&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Julius &lt;img src=&#34;https://raw.githubusercontent.com/bvschaik/julius/master/res/julius_48.png&#34; alt=&#34;&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bvschaik/julius/actions&#34;&gt;&lt;img src=&#34;https://github.com/bvschaik/julius/workflows/Build%20Julius/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download: &lt;a href=&#34;https://github.com/bvschaik/julius/wiki/Julius-release&#34;&gt;&lt;img src=&#34;https://julius.biancavanschaik.nl/badge/release.svg?sanitize=true&#34; alt=&#34;Download release version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://julius.biancavanschaik.nl/&#34;&gt;&lt;img src=&#34;https://julius.biancavanschaik.nl/badge/development.svg?sanitize=true&#34; alt=&#34;Download development version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android version on Google Play: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.bvschaik.julius&#34;&gt;install release&lt;/a&gt; or &lt;a href=&#34;https://play.google.com/apps/testing/com.github.bvschaik.julius&#34;&gt;sign up for test builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chat: &lt;a href=&#34;http://www.discord.gg/GamerZakh&#34;&gt;Discord&lt;/a&gt; (kindly hosted by GamerZakh)&lt;/p&gt; &#xA;&lt;h2&gt;Julius: an open source re-implementation of Caesar III&lt;/h2&gt; &#xA;&lt;p&gt;Julius is a fully working open-source version of Caesar 3, with the same logic as the original, but with some UI enhancements, that can be played on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;Julius will not run without the original Caesar 3 files. You can buy a digital copy from &lt;a href=&#34;https://www.gog.com/game/caesar_3&#34;&gt;GOG&lt;/a&gt; or &lt;a href=&#34;https://store.steampowered.com/app/517790/Caesar_3/&#34;&gt;Steam&lt;/a&gt;, or you can use an original CD-ROM version.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the project is to have exactly the same game logic as Caesar 3, with the same look and feel. This means that the saved games are 100% compatible with Caesar 3, and any gameplay bugs present in the original Caesar 3 game will also be present in Julius.&lt;/p&gt; &#xA;&lt;p&gt;Enhancements for Julius include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for widescreen resolutions&lt;/li&gt; &#xA; &lt;li&gt;Windowed mode support for 32-bit desktops&lt;/li&gt; &#xA; &lt;li&gt;A lot of small in-game &lt;a href=&#34;https://github.com/bvschaik/julius/wiki/Improvements-from-Caesar-3&#34;&gt;quality of life improvements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for the &lt;a href=&#34;https://github.com/bvschaik/julius/wiki/MP3-Support&#34;&gt;high-quality MP3 files&lt;/a&gt; once provided on the Sierra website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;Linux AppImage&lt;/li&gt; &#xA; &lt;li&gt;MacOS&lt;/li&gt; &#xA; &lt;li&gt;PS Vita&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Switch&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;Any compatible browser (Emscripten)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While Julius does not implement any gameplay changes, a fork of Julius named &lt;a href=&#34;https://github.com/Keriew/augustus&#34;&gt;Augustus&lt;/a&gt; is implementing many long-wanted gameplay changes, such as roadblocks. Beware: Augustus does not support the original Caesar 3 save files, while Julius does. So use Julius for a more vanilla experience with some visual improvements, or Augustus for a different gameplay experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bvschaik/julius/master/res/vita/bg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running the game&lt;/h2&gt; &#xA;&lt;p&gt;First, download the game for your platform from the list above. Alternatively, you can &lt;a href=&#34;https://raw.githubusercontent.com/bvschaik/julius/master/doc/BUILDING.md&#34;&gt;build Julius&lt;/a&gt; yourself.&lt;/p&gt; &#xA;&lt;p&gt;Then you can either copy the game to the Caesar 3 folder, or run the game from an independent folder, in which case the game will ask you to point to the Caesar 3 folder.&lt;/p&gt; &#xA;&lt;p&gt;Note that you must have permission to write in the game data directory as the saves will be stored there. Also, your game must be patched to 1.0.1.0 to use Julius. If Julius tells you that you are missing it, you can &lt;a href=&#34;https://github.com/bvschaik/julius/wiki/Patches&#34;&gt;download the update here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/bvschaik/julius/wiki/Running-Julius&#34;&gt;Running Julius&lt;/a&gt; for further instructions and startup options.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Julius recreates many bugs that you can find in original Caesar 3 game, to preserve 100% saves compatibility. See the list of &lt;a href=&#34;https://github.com/bvschaik/julius/wiki/Caesar-3-bugs&#34;&gt;Bugs &amp;amp; idiosyncrasies&lt;/a&gt; to find out more.&lt;/p&gt;</summary>
  </entry>
</feed>