<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-16T01:22:54Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>codazoda/hub-ctrl.c</title>
    <updated>2023-09-16T01:22:54Z</updated>
    <id>tag:github.com,2023-09-16:/codazoda/hub-ctrl.c</id>
    <link href="https://github.com/codazoda/hub-ctrl.c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Control USB power on a port by port basis on some USB hubs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hub-ctrl.c&lt;/h1&gt; &#xA;&lt;p&gt;Control USB power on a port by port basis on some USB hubs.&lt;/p&gt; &#xA;&lt;p&gt;Originally created by NIIBE Yutaka and published to Github by Joel Dare on January 31st, 2013.&lt;/p&gt; &#xA;&lt;p&gt;This only works on USB hubs that have the hardware necessary to allow software controlled power switching. Most hubs DO NOT include the hardware.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Before compiling it, you&#39;ll need to install libusb-dev (under Ubuntu). I installed that with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libusb-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need the GCC tool chain.&lt;/p&gt; &#xA;&lt;h1&gt;Compiling&lt;/h1&gt; &#xA;&lt;p&gt;To compile the hub-ctrl.c program run the following compile command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc -o hub-ctrl hub-ctrl.c -lusb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That results in an executable binary called hub-ctrl.&lt;/p&gt; &#xA;&lt;h1&gt;Controlling Power&lt;/h1&gt; &#xA;&lt;p&gt;You can control the power on a port using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ./hub-ctrl -h 3 -P 1 -p 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That says to control hub 3 (-h 3) port 1 (-P 1) and to turn the power off (-p 0). You can also use ”-p 1” to turn the power back on.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify the USB device based on the BUS and DEV numbers. Use the following command the list the currently connected devices. It&#39;s useful to run this with the device disconnected and then again with the device connected so that you can tell which device is the one you are trying to target (the Targus in my case).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lsusb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that we know the BUS and DEV numbers, we can control the power using those numbers as well. Here&#39;s the command for that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ./hub-ctrl -b 001 -d 005 -P 1 -p 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This time we are controlling the device on BUS 001 (-b 001) device 005 (-d 005) port 1 (-P 1) and turning the power off (-p 0).&lt;/p&gt; &#xA;&lt;h1&gt;Hubs Known to Work&lt;/h1&gt; &#xA;&lt;p&gt;The following is a list of Hubs that are known to have the hardware necessary to allow power switching.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;D-Link-DUB-H7-High-Speed-7-Port (Tested with old Silver versions (A3, A4 &amp;amp; A5). Also tested with newer Black version C1 although there is one issue reporting that the C1 didn&#39;t work).&lt;/li&gt; &#xA; &lt;li&gt;Elecom: U2H-G4S&lt;/li&gt; &#xA; &lt;li&gt;Sanwa Supply: USB-HUB14GPH&lt;/li&gt; &#xA; &lt;li&gt;Targus, Inc.: PAUH212&lt;/li&gt; &#xA; &lt;li&gt;Hawking Technology: UH214&lt;/li&gt; &#xA; &lt;li&gt;B+B SmartWorx (B&amp;amp;B Electronics): UHR204&lt;/li&gt; &#xA; &lt;li&gt;B+B SmartWorx (B&amp;amp;B Electronics): USH304&lt;/li&gt; &#xA; &lt;li&gt;Belkin: F5U701&lt;/li&gt; &#xA; &lt;li&gt;Linksys: USB2HUB4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Original Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2006 Free Software Initiative of Japan&lt;/p&gt; &#xA;&lt;p&gt;Author: NIIBE Yutaka &#xA; &lt;gniibe at fsij.org&gt;&lt;/gniibe&gt;&lt;/p&gt; &#xA;&lt;p&gt;This file can be distributed under the terms and conditions of the GNU General Public License version 2 (or later).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PokerFacowaty/isfri</title>
    <updated>2023-09-16T01:22:54Z</updated>
    <id>tag:github.com,2023-09-16:/PokerFacowaty/isfri</id>
    <link href="https://github.com/PokerFacowaty/isfri" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Linux kernel module that spawns a char device which tells the user whether it&#39;s Friday&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Why and how&lt;/h1&gt; &#xA;&lt;p&gt;While taking a course called &#34;Advanced Linux: The Linux Kernel&#34; on LinkedIn Learning I wanted to play around with making modules after finishing the sample module for the course. And here is what I came up with in a couple hours. I was honestly surprised I managed to get it working pretty smoothly. I used this &lt;a href=&#34;https://sysprog21.github.io/lkmpg/&#34;&gt;great book&lt;/a&gt;, borrowed setting permissions from the TTY driver &lt;a href=&#34;https://stackoverflow.com/questions/11846594&#34;&gt;as explained here&lt;/a&gt; and modified it slightly when the kernel complained about NULL pointer dereference using &lt;a href=&#34;https://www.ccsl.carleton.ca/~falaca/comp3000/a4.html&#34;&gt;this resource&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;You need to have the Linux kernel development package installed. If you see a &#34;build&#34; directory under /lib/modules/&amp;lt;YOUR KERNEL VERSION&amp;gt;/ then you&#39;re good to go. If not, consult your distro-specific instruction on how to obtain the package.&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;Clone the repo, enter it and use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make -C /lib/modules/$(uname -r)/build M=$PWD modules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;After succesful compilation, add the module using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo insmod isfri.ko&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the module has been added, you can use it by simply using &lt;code&gt;cat&lt;/code&gt; on the new device&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /dev/isfri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The module will then &#34;respond&#34; with a proper message according to the current day of the week:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Friday: &#34;IT IS!&#34;&lt;/li&gt; &#xA; &lt;li&gt;Saturday: &#34;You just missed it!&#34;&lt;/li&gt; &#xA; &lt;li&gt;Sunday: &#34;No, but it&#39;s still the weekend!&#34;&lt;/li&gt; &#xA; &lt;li&gt;Any other day: &#34;Nope.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to remove the module from the kernel, simply use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rmmod isfri&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>