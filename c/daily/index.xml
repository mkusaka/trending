<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-10T01:32:16Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>winscp/winscp</title>
    <updated>2022-10-10T01:32:16Z</updated>
    <id>tag:github.com,2022-10-10:/winscp/winscp</id>
    <link href="https://github.com/winscp/winscp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WinSCP is a popular free SFTP and FTP client for Windows, a powerful file manager that will improve your productivity. It supports also Amazon S3, FTPS, SCP and WebDAV protocols. Power users can automate WinSCP using .NET assembly.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://winscp.net/&#34;&gt;WinSCP&lt;/a&gt; is a popular free SFTP and FTP client for Windows, a powerful file manager that will improve your productivity. It offers an easy to use GUI to copy files between a local and remote computer using multiple protocols: Amazon S3, FTP, FTPS, SCP, SFTP or WebDAV. Power users can automate WinSCP using .NET assembly. WinSCP is available in English and many other languages.&lt;/p&gt; &#xA;&lt;p&gt;To build WinSCP you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.embarcadero.com/products/cbuilder&#34;&gt;Embarcadero C++ Builder XE6 Professional&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;Build Tools and Agents for Visual Studio 2019&lt;/a&gt; (for C# 9.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nasm.us/&#34;&gt;nasm&lt;/a&gt; (store it to &lt;code&gt;buildtools/tools/nasm.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.agner.org/optimize/#objconv&#34;&gt;Object file converter&lt;/a&gt; (store it to &lt;code&gt;buildtools/tools/objconv.exe&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build WinSCP from source by yourself, modify and use &lt;a href=&#34;https://raw.githubusercontent.com/winscp/winscp/master/build.bat&#34;&gt;&lt;code&gt;build.bat&lt;/code&gt;&lt;/a&gt; in root folder.&lt;/p&gt; &#xA;&lt;p&gt;Directory structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/source             project files of all native libraries and executables&#xA;/source/components  native WinSCP visual components&#xA;/source/console     console interface&#xA;/source/core        core (non-visual) part of WinSCP&#xA;                    (SSH, SFTP, FTP, WebDAV, S3 and SCP code)&#xA;/source/dragext     drag&amp;amp;drop shell extension&#xA;/source/filezilla   source code of FileZilla FTP client&#xA;/source/forms       visual part of WinSCP (dialogs and windows)&#xA;/source/packages    general visual components (both mine and 3rd party)&#xA;/source/putty       source code of PuTTY SSH client&#xA;/source/resource    resources strings&#xA;/source/windows     other sources&#xA;/deployment         Inno Setup script to create setup package&#xA;                    (see /deployment/readme)&#xA;/dotnet             source code of WinSCP .NET assembly&#xA;/libs               3rd party libraries&#xA;/translations       translations of WinSCP strings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the file &lt;a href=&#34;https://raw.githubusercontent.com/winscp/winscp/master/license.txt&#34;&gt;&lt;code&gt;license.txt&lt;/code&gt;&lt;/a&gt; for the license conditions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/WinSCP/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/WinSCP.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wireshark/wireshark</title>
    <updated>2022-10-10T01:32:16Z</updated>
    <id>tag:github.com,2022-10-10:/wireshark/wireshark</id>
    <link href="https://github.com/wireshark/wireshark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Read-only mirror of Wireshark&#39;s Git repository at https://gitlab.com/wireshark/wireshark. GitHub won&#39;t let us disable pull requests. ☞ THEY WILL BE IGNORED HERE ☜ Please upload them at GitLab.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Information&lt;/h2&gt; &#xA;&lt;p&gt;Wireshark is a network traffic analyzer, or &#34;sniffer&#34;, for Linux, macOS, *BSD and other Unix and Unix-like operating systems and for Windows. It uses Qt, a graphical user interface library, and libpcap and npcap as packet capture and filtering libraries.&lt;/p&gt; &#xA;&lt;p&gt;The Wireshark distribution also comes with TShark, which is a line-oriented sniffer (similar to Sun&#39;s snoop or tcpdump) that uses the same dissection, capture-file reading and writing, and packet filtering code as Wireshark, and with editcap, which is a program to read capture files and write the packets from that capture file, possibly in a different capture file format, and with some packets possibly removed from the capture.&lt;/p&gt; &#xA;&lt;p&gt;The official home of Wireshark is &lt;a href=&#34;https://www.wireshark.org&#34;&gt;https://www.wireshark.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latest distribution can be found in the subdirectory &lt;a href=&#34;https://www.wireshark.org/download&#34;&gt;https://www.wireshark.org/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The Wireshark project builds and tests regularly on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (Ubuntu)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Windows&lt;/li&gt; &#xA; &lt;li&gt;macOS / {Mac} OS X&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Official installation packages are available for Microsoft Windows and macOS.&lt;/p&gt; &#xA;&lt;p&gt;It is available as either a standard or add-on package for many popular operating systems and Linux distributions including Debian, Ubuntu, Fedora, CentOS, RHEL, Arch, Gentoo, openSUSE, FreeBSD, DragonFly BSD, NetBSD, and OpenBSD.&lt;/p&gt; &#xA;&lt;p&gt;Additionally it is available through many third-party packaging systems such as pkgsrc, OpenCSW, Homebrew, and MacPorts.&lt;/p&gt; &#xA;&lt;p&gt;It should run on other Unix-ish systems without too much trouble.&lt;/p&gt; &#xA;&lt;p&gt;In some cases the current version of Wireshark might not support your operating system. This is the case for Windows XP, which is supported by Wireshark 1.10 and earlier. In other cases the standard package for Wireshark might simply be old. This is the case for Solaris and HP-UX.&lt;/p&gt; &#xA;&lt;p&gt;Python 3 is needed to build Wireshark. AsciiDoctor is required to build the documentation, including the man pages. Perl and flex are required to generate some of the source code.&lt;/p&gt; &#xA;&lt;p&gt;You must therefore install Python 3, AsciiDoctor, and GNU &#34;flex&#34; (vanilla &#34;lex&#34; won&#39;t work) on systems that lack them. You might need to install Perl as well.&lt;/p&gt; &#xA;&lt;p&gt;Full installation instructions can be found in the INSTALL file and in the Developer&#39;s Guide at &lt;a href=&#34;https://www.wireshark.org/docs/wsdg_html_chunked/&#34;&gt;https://www.wireshark.org/docs/wsdg_html_chunked/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also the appropriate README.&lt;em&gt;OS&lt;/em&gt; files for OS-specific installation instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to capture packets from the network, you need to make the dumpcap program set-UID to root or you need to have access to the appropriate entry under &lt;code&gt;/dev&lt;/code&gt; if your system is so inclined (BSD-derived systems, and systems such as Solaris and HP-UX that support DLPI, typically fall into this category). Although it might be tempting to make the Wireshark and TShark executables setuid root, or to run them as root please don&#39;t. The capture process has been isolated in dumpcap; this simple program is less likely to contain security holes and is thus safer to run as root.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the man page for a description of each command-line option and interface feature.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple File Types&lt;/h2&gt; &#xA;&lt;p&gt;Wireshark can read packets from a number of different file types. See the Wireshark man page or the Wireshark User&#39;s Guide for a list of supported file formats.&lt;/p&gt; &#xA;&lt;p&gt;Wireshark can transparently read compressed versions of any of those files if the required compression library was available when Wireshark was compiled. Currently supported compression formats are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GZIP&lt;/li&gt; &#xA; &lt;li&gt;ZSTD&lt;/li&gt; &#xA; &lt;li&gt;LZ4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can disable zlib support by running &lt;code&gt;cmake -DENABLE_ZLIB=OFF&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Although Wireshark can read AIX iptrace files, the documentation on AIX&#39;s iptrace packet-trace command is sparse. The &lt;code&gt;iptrace&lt;/code&gt; command starts a daemon which you must kill in order to stop the trace. Through experimentation it appears that sending a HUP signal to that iptrace daemon causes a graceful shutdown and a complete packet is written to the trace file. If a partial packet is saved at the end, Wireshark will complain when reading that file, but you will be able to read all other packets. If this occurs, please let the Wireshark developers know at &lt;a href=&#34;mailto:wireshark-dev@wireshark.org&#34;&gt;wireshark-dev@wireshark.org&lt;/a&gt;; be sure to send us a copy of that trace file if it&#39;s small and contains non-sensitive data.&lt;/p&gt; &#xA;&lt;p&gt;Support for Lucent/Ascend products is limited to the debug trace output generated by the MAX and Pipline series of products. Wireshark can read the output of the &lt;code&gt;wandsession&lt;/code&gt;, &lt;code&gt;wandisplay&lt;/code&gt;, &lt;code&gt;wannext&lt;/code&gt;, and &lt;code&gt;wdd&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;Wireshark can also read dump trace output from the Toshiba &#34;Compact Router&#34; line of ISDN routers (TR-600 and TR-650). You can telnet to the router and start a dump session with &lt;code&gt;snoop dump&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CoSine L2 debug output can also be read by Wireshark. To get the L2 debug output first enter the diags mode and then use &lt;code&gt;create-pkt-log-profile&lt;/code&gt; and &lt;code&gt;apply-pkt-lozg-profile&lt;/code&gt; commands under layer-2 category. For more detail how to use these commands, you should examine the help command by &lt;code&gt;layer-2 create ?&lt;/code&gt; or &lt;code&gt;layer-2 apply ?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the Lucent/Ascend, Toshiba and CoSine traces with Wireshark, you must capture the trace output to a file on disk. The trace is happening inside the router and the router has no way of saving the trace to a file for you. An easy way of doing this under Unix is to run &lt;code&gt;telnet &amp;lt;ascend&amp;gt; | tee &amp;lt;outfile&amp;gt;&lt;/code&gt;. Or, if your system has the &#34;script&#34; command installed, you can save a shell session, including telnet, to a file. For example to log to a file named tracefile.out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ script tracefile.out&#xA;Script started on &amp;lt;date/time&amp;gt;&#xA;$ telnet router&#xA;..... do your trace, then exit from the router&#39;s telnet session.&#xA;$ exit&#xA;Script done on &amp;lt;date/time&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Name Resolution&lt;/h2&gt; &#xA;&lt;p&gt;Wireshark will attempt to use reverse name resolution capabilities when decoding IPv4 and IPv6 packets.&lt;/p&gt; &#xA;&lt;p&gt;If you want to turn off name resolution while using Wireshark, start Wireshark with the &lt;code&gt;-n&lt;/code&gt; option to turn off all name resolution (including resolution of MAC addresses and TCP/UDP/SMTP port numbers to names) or with the &lt;code&gt;-N mt&lt;/code&gt; option to turn off name resolution for all network-layer addresses (IPv4, IPv6, IPX).&lt;/p&gt; &#xA;&lt;p&gt;You can make that the default setting by opening the Preferences dialog using the Preferences item in the Edit menu, selecting &#34;Name resolution&#34;, turning off the appropriate name resolution options, and clicking &#34;OK&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;SNMP&lt;/h2&gt; &#xA;&lt;p&gt;Wireshark can do some basic decoding of SNMP packets; it can also use the libsmi library to do more sophisticated decoding by reading MIB files and using the information in those files to display OIDs and variable binding values in a friendlier fashion. CMake will automatically determine whether you have the libsmi library on your system. If you have the libsmi library but &lt;em&gt;do not&lt;/em&gt; want Wireshark to use it, you can run cmake with the &lt;code&gt;-DENABLE_SMI=OFF&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;How to Report a Bug&lt;/h2&gt; &#xA;&lt;p&gt;Wireshark is under constant development, so it is possible that you will encounter a bug while using it. Please report bugs at &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/issues&#34;&gt;https://gitlab.com/wireshark/wireshark/-/issues&lt;/a&gt;. Be sure you enter into the bug:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The complete build information from the &#34;About Wireshark&#34; item in the Help menu or the output of &lt;code&gt;wireshark -v&lt;/code&gt; for Wireshark bugs and the output of &lt;code&gt;tshark -v&lt;/code&gt; for TShark bugs;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the bug happened on Linux, the Linux distribution you were using, and the version of that distribution;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The command you used to invoke Wireshark, if you ran Wireshark from the command line, or TShark, if you ran TShark, and the sequence of operations you performed that caused the bug to appear.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the bug is produced by a particular trace file, please be sure to attach to the bug a trace file along with your bug description. If the trace file contains sensitive information (e.g., passwords), then please do not send it.&lt;/p&gt; &#xA;&lt;p&gt;If Wireshark died on you with a &#39;segmentation violation&#39;, &#39;bus error&#39;, &#39;abort&#39;, or other error that produces a UNIX core dump file, you can help the developers a lot if you have a debugger installed. A stack trace can be obtained by using your debugger (&#39;gdb&#39; in this example), the wireshark binary, and the resulting core file. Here&#39;s an example of how to use the gdb command &#39;backtrace&#39; to do so.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gdb wireshark core&#xA;(gdb) backtrace&#xA;..... prints the stack trace&#xA;(gdb) quit&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core dump file may be named &#34;wireshark.core&#34; rather than &#34;core&#34; on some platforms (e.g., BSD systems). If you got a core dump with TShark rather than Wireshark, use &#34;tshark&#34; as the first argument to the debugger; the core dump may be named &#34;tshark.core&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Wireshark is distributed under the GNU GPLv2. See the file COPYING for the full text of the license. When in doubt the full text is the legally binding part. These notes are just to make it easier for people that are not familiar with the GPLv2.&lt;/p&gt; &#xA;&lt;p&gt;There are no restrictions on its use. There are restrictions on its distribution in source or binary form.&lt;/p&gt; &#xA;&lt;p&gt;Most parts of Wireshark are covered by a &#34;GPL version 2 or later&#34; license. Some files are covered by different licenses that are compatible with the GPLv2.&lt;/p&gt; &#xA;&lt;p&gt;As a notable exception, some utilities distributed with the Wireshark source are covered by other licenses that are not themselves directly compatible with the GPLv2. This is OK, as only the tools themselves are licensed this way, the output of the tools is not considered a derived work, and so can be safely licensed for Wireshark&#39;s use. An incomplete selection of these tools includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the pidl utility (tools/pidl) is licensed under the GPLv3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Parts of Wireshark can be built and distributed as libraries. These parts are still covered by the GPL, and NOT by the Lesser General Public License or any other license.&lt;/p&gt; &#xA;&lt;p&gt;If you integrate all or part of Wireshark into your own application, then that application must be released under a license compatible with the GPL.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;There is no warranty, expressed or implied, associated with this product. Use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;Gerald Combs &lt;a href=&#34;mailto:gerald@wireshark.org&#34;&gt;gerald@wireshark.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gilbert Ramirez &lt;a href=&#34;mailto:gram@alumni.rice.edu&#34;&gt;gram@alumni.rice.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guy Harris &lt;a href=&#34;mailto:gharris@sonic.net&#34;&gt;gharris@sonic.net&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>