<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-14T01:33:10Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hpjansson/chafa</title>
    <updated>2022-09-14T01:33:10Z</updated>
    <id>tag:github.com,2022-09-14:/hpjansson/chafa</id>
    <link href="https://github.com/hpjansson/chafa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“ºðŸ—¿ Terminal graphics for the 21st century.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hpjansson.org/chafa/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpjansson/chafa/master/docs/chafa-logo.gif&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://travis-ci.com/hpjansson/chafa/branches&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://img.shields.io/travis/com/hpjansson/chafa/master.svg?label=master&amp;amp;style=for-the-badge&#34; alt=&#34;Master Build Status&#34;&gt; â€ƒ &lt;img src=&#34;https://img.shields.io/travis/com/hpjansson/chafa/1.12.svg?label=1.12&amp;amp;style=for-the-badge&#34; alt=&#34;1.12 Build Status&#34;&gt; &lt;/a&gt; â€ƒ &lt;a href=&#34;https://hpjansson.org/chafa/download/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/hpjansson/chafa.svg?style=for-the-badge&#34; alt=&#34;Latest Release&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://hpjansson.org/chafa/&#34;&gt;About&lt;/a&gt; â€¢ &lt;a href=&#34;https://hpjansson.org/chafa/gallery/&#34;&gt;Gallery&lt;/a&gt; â€¢ &lt;a href=&#34;https://hpjansson.org/chafa/download/&#34;&gt;Packages&lt;/a&gt; â€¢ &lt;a href=&#34;https://hpjansson.org/chafa/development/&#34;&gt;Development&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chafa is a command-line utility that converts image data, including animated GIFs, into graphics formats or ANSI/Unicode character art suitable for display in a terminal. It has broad feature support, allowing it to be used on devices ranging from historical teleprinters to modern terminal emulators and everything in between.&lt;/p&gt; &#xA;&lt;p&gt;The core functionality is provided by a C library with a public, well-documented API.&lt;/p&gt; &#xA;&lt;p&gt;Both library and frontend tools are covered by the Lesser GPL license, version 3 or later (LGPLv3+).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://hpjansson.org/chafa/&#34;&gt;official web pages&lt;/a&gt; and &lt;a href=&#34;https://hpjansson.org/chafa/ref/&#34;&gt;C API documentation&lt;/a&gt; can be found online. Check out the &lt;a href=&#34;https://hpjansson.org/chafa/gallery/&#34;&gt;gallery&lt;/a&gt; for screenshots.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Chafa is most likely packaged for your distribution, so if you&#39;re not going to hack on it, you&#39;re better off using &lt;a href=&#34;https://hpjansson.org/chafa/download/&#34;&gt;official packages&lt;/a&gt;. If you want to build the latest and greatest yourself, read on.&lt;/p&gt; &#xA;&lt;p&gt;You will need GCC, make, Autoconf, Automake, Libtool and the GLib development package installed to compile Chafa from its git repository. If you want to build the command-line tool &lt;code&gt;chafa&lt;/code&gt; and not just the library, you will additionally need development packages for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeType2. Often packaged as &lt;code&gt;libfreetype6-dev&lt;/code&gt; or &lt;code&gt;freetype2-devel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;libjpeg (optional). Look for &lt;code&gt;libjpeg-dev&lt;/code&gt;, &lt;code&gt;libjpeg62-devel&lt;/code&gt; or &lt;code&gt;libjpeg8-devel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;librsvg (optional). Look for &lt;code&gt;librsvg2-dev&lt;/code&gt; or &lt;code&gt;librsvg-devel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;libtiff (optional). Look for &lt;code&gt;libtiff5-dev&lt;/code&gt; or &lt;code&gt;libtiff-devel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;libwebp (optional). Look for &lt;code&gt;libwebp-dev&lt;/code&gt; or &lt;code&gt;libwebp-devel&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to build documentation, you will also need gtk-doc.&lt;/p&gt; &#xA;&lt;p&gt;Start by cloning the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/hpjansson/chafa.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then cd to the toplevel directory and issue the following shell commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./autogen.sh&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should do it!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Seneca-144100/IPC-Workshops</title>
    <updated>2022-09-14T01:33:10Z</updated>
    <id>tag:github.com,2022-09-14:/Seneca-144100/IPC-Workshops</id>
    <link href="https://github.com/Seneca-144100/IPC-Workshops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPC-Workshops&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Grade Breakdown:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Workshop&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Term Value(%)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.75%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.75%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.75%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.50%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.50%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.25%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.00%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.50%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;15.00%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>lh3/miniprot</title>
    <updated>2022-09-14T01:33:10Z</updated>
    <id>tag:github.com,2022-09-14:/lh3/miniprot</id>
    <link href="https://github.com/lh3/miniprot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Aligning proteins to genomes with splicing and frameshift&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;a name=&#34;started&#34;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# download and compile&#xA;git clone https://github.com/lh3/miniprot&#xA;cd miniprot &amp;amp;&amp;amp; make&#xA;&#xA;# test file&#xA;./miniprot test/DPP3-hs.gen.fa.gz test/DPP3-mm.pep.fa.gz &amp;gt; aln.paf        # PAF output&#xA;./miniprot --gff test/DPP3-hs.gen.fa.gz test/DPP3-mm.pep.fa.gz &amp;gt; aln.gff  # GFF3+PAF output&#xA;&#xA;# general command line&#xA;./miniprot -t16 -d genome.mpi genome.fna                 # indexing optional but recommended&#xA;./miniprot -ut16 --gff genome.mpi protein.faa &amp;gt; aln.gff  # alignment&#xA;&#xA;# output format&#xA;man ./miniprot.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#uguide&#34;&gt;Users&#39; Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#install&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#eval&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#algo&#34;&gt;Algorithm overview&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lh3/miniprot/master/#limit&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;intro&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Miniprot aligns a protein sequence against a genome with affine gap penalty, splicing and frameshift. It is primarily intended for annotating protein-coding genes in a new species using known genes from other species. Miniprot is similar to &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/15123596/&#34;&gt;GeneWise&lt;/a&gt; and &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/15713233/&#34;&gt;Exonerate&lt;/a&gt; in functionality but it can map proteins to whole genomes and is much faster at the residue alignment step.&lt;/p&gt; &#xA;&lt;p&gt;Miniprot is not optimized for mapping distant homologs because distant homologs are less informative to gene annotations. Nonetheless, it is still possible to tune seeding parameters to achieve higher sensitivity at the cost of performance.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;uguide&#34;&gt;&lt;/a&gt;Users&#39; Guide&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;install&#34;&gt;&lt;/a&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Miniprot requires SSE2 or NEON instructions and only works on x86_64 or ARM CPUs. It depends on &lt;a href=&#34;https://zlib.net&#34;&gt;zlib&lt;/a&gt; for parsing gzip&#39;d input files. To compile miniprot, type &lt;code&gt;make&lt;/code&gt; in the source code directory. This will produce a standalone executable &lt;code&gt;miniprot&lt;/code&gt;. This executable is all you need to invoke miniprot.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;usage&#34;&gt;&lt;/a&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To run miniprot, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;miniprot -t8 ref-file protein.faa &amp;gt; output.paf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;ref-file&lt;/code&gt; can either be a genome in the FASTA format or a pre-built index generated by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;miniprot -t8 -d ref.mpi ref.fna&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because miniprot indexing is slow and memory intensive, it is recommended to pre-build the index. FASTA input files can be optionally compressed with gzip.&lt;/p&gt; &#xA;&lt;p&gt;Miniprot outputs alignment in the protein PAF format. Different from the more common nucleotide PAF format, miniprot uses more CIGAR operators to encode introns and frameshifts. Please refer to the manpage for detailed explanation.&lt;/p&gt; &#xA;&lt;p&gt;The PAF format gives full alignment information. For convenience, miniprot can also output GFF3 with option &lt;code&gt;--gff&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;miniprot -t8 --gff -d ref.mpi ref.fna &amp;gt; out.gff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The detailed alignment is embedded in &lt;code&gt;##PAF&lt;/code&gt; lines in the GFF3 output.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;eval&#34;&gt;&lt;/a&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;We collected Ensembl canonical mouse proteins from Gencode vM30 and longest proteins per gene for chicken and zebrafish. We then aligned these proteins to the human reference genome GRCh38. We say a junction is confirmed if it can be found in the human Gencode annotation v41; a junction is non-overlapping if the intron in the junction does not overlap with any introns in the Gencode annotation.&lt;/p&gt; &#xA;&lt;p&gt;We only evaluated miniprot and &lt;a href=&#34;https://github.com/ogotoh/spaln&#34;&gt;spaln&lt;/a&gt; as these are the only tools practical for whole genomes. In addition, &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/22848105/&#34;&gt;Iwata and Gotoh (2012)&lt;/a&gt; suggest that spaln2 consistently outperforms exonerate, GeneWise, ProSplign and genBlastG.&lt;/p&gt; &#xA;&lt;p&gt;In the evaluation, both miniprot and spaln were set to use 16 CPU threads. We used option &lt;code&gt;-Q7 -O0 -Thomosapi&lt;/code&gt; with spaln. This does global alignment with the human-specific splice model.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Metric&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;mouse/mp&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;mouse/sp&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;chicken/mp&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;zebrafish/mp&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elapsed time (s)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;347&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3,714&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;294&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;464&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;# proteins&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21,844&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21,844&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17,007&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;30,313&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;# mapped&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19,253&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18,847&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13,284&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19,797&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;# single-exon&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2,878&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,110&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,857&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;# predicted junc&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;164,718&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;173,475&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;131,346&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;176,044&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;# non-ovlp junc&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;402&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,490&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;482&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;960&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;# confirmed junc&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;157,400&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;162,303&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;117,416&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;151,912&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;% confirmed&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;95.6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;93.6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;89.4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;On the human-mouse dataset, miniprot finds fewer novel splice junctions, implying higher specificity, but spaln finds more confirmed junctions, implying higher sensitivity. This is partly because spaln forces global alignment. I have tried a few other options of spaln such as &lt;code&gt;-yS&lt;/code&gt;, &lt;code&gt;-M&lt;/code&gt; (more than one hits per query) and &lt;code&gt;-LS&lt;/code&gt; (local mode), but spaln-2.4.12 crashed. Not using a species-specific splice model (&lt;code&gt;-T&lt;/code&gt;) would lead to lower accuracy.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;algo&#34;&gt;&lt;/a&gt;Algorithm overview&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Translate the reference genome to amino acids in six phases and filter out ORFs shorter than 45bp. Reduce 20 amino acids to 13 distinct integers and extract random open syncmers of 6aa in length. By default, miniprot selects 20% of 6-mers in average. For a reduced 6-mer at reference position &lt;code&gt;x&lt;/code&gt;, keep the 6-mer and &lt;code&gt;floor(x/256)&lt;/code&gt; in a dense hash table. This concludes the indexing step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Given a protein sequence as query, extract 6-mer syncmers on the protein, look up the index for seed matches and apply minimap2-like chaining. This first round of chaining is approximate as the reference positions have been binned during indexing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For each chain in step 2, redo seeding and chaining with sliding 5-mers from both the reference and the protein in the original chain. Miniprot uses all reduced 5-mers for this second round of chaining.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose top 100 (see &lt;code&gt;-N&lt;/code&gt;) chains. Filter out anchors around potential introns or long gaps. Perform striped dynamic programming between remaining anchors and also extend from the first or last anchors. This gives the final alignment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;limit&#34;&gt;&lt;/a&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The initial conditions of dynamic programming are not technically correct, which may result in suboptimal residue alignment in rare cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for non-splicing alignment needs to be improved.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;More manual inspection required for improved accuracy. For example, tandem copies in segmental duplications could be handled more carefully.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>