<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-08T01:34:33Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>koekeishiya/yabai</title>
    <updated>2022-08-08T01:34:33Z</updated>
    <id>tag:github.com,2022-08-08:/koekeishiya/yabai</id>
    <link href="https://github.com/koekeishiya/yabai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiling window manager for macOS based on binary space partitioning&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;75%&#34; src=&#34;https://raw.githubusercontent.com/koekeishiya/yabai/master/assets/banner/banner.svg?sanitize=true&#34; alt=&#34;Banner&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Tiling window management for the Mac.&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/koekeishiya/yabai&#34;&gt; &lt;img src=&#34;https://travis-ci.org/koekeishiya/yabai.svg?branch=master&#34; alt=&#34;CI Status Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/LICENSE.txt&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/koekeishiya/yabai.svg?color=green&#34; alt=&#34;License Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/CHANGELOG.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/view-changelog-green.svg?sanitize=true&#34; alt=&#34;Changelog Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commits-since/koekeishiya/yabai/latest.svg?color=green&#34; alt=&#34;Version Badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;40%&#34; src=&#34;https://raw.githubusercontent.com/koekeishiya/yabai/master/assets/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;p&gt;yabai is a window management utility that is designed to work as an extension to the built-in window manager of macOS. yabai allows you to control your windows, spaces and displays freely using an intuitive command line interface and optionally set user-defined keyboard shortcuts using &lt;a href=&#34;https://github.com/koekeishiya/skhd&#34;&gt;↗&amp;nbsp;skhd&lt;/a&gt; and other third-party software.&lt;/p&gt; &#xA;&lt;p&gt;The primary function of yabai is tiling window management; automatically modifying your window layout using a binary space partitioning algorithm to allow you to focus on the content of your windows without distractions. Additional features of yabai include focus-follows-mouse, disabling animations for switching spaces, creating spaces past the limit of 16 spaces, and much more.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/koekeishiya/yabai/wiki&#34;&gt;↗&amp;nbsp;yabai&amp;nbsp;wiki&lt;/a&gt; has both brief and detailed installation instructions for multiple installation methods, and also explains how to uninstall yabai completely.&lt;/li&gt; &#xA; &lt;li&gt;Sample configuration files can be found in the &lt;a href=&#34;https://github.com/koekeishiya/yabai/tree/master/examples&#34;&gt;↗&amp;nbsp;examples&lt;/a&gt; directory. Refer to the &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/doc/yabai.asciidoc&#34;&gt;↗&amp;nbsp;documentation&lt;/a&gt; or the wiki for further information.&lt;/li&gt; &#xA; &lt;li&gt;Keyboard shortcuts can be defined with &lt;a href=&#34;https://github.com/koekeishiya/skhd&#34;&gt;↗&amp;nbsp;skhd&lt;/a&gt; or any other suitable software you may prefer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements and Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Please read the below requirements carefully. Make sure you fulfil all of them before filing an issue.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Requirement&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Operating&amp;nbsp;System&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;macOS&amp;nbsp;High&amp;nbsp;Sierra&amp;nbsp;10.13.6, Mojave&amp;nbsp;10.14.4+, Catalina 10.15.0+, Big Sur 11.0.1+ and Monterey 12.0.0+ is supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Accessibility&amp;nbsp;API&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yabai must be given permission to utilize the Accessibility API and will request access upon launch. The application must be restarted after access has been granted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Mission&amp;nbsp;Control&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Mission Control preferences pane in System Preferences, the setting &#34;Displays have separate Spaces&#34; must be enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please also take note of the following caveats.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Caveat&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Integrity&amp;nbsp;Protection&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;System Integrity Protection needs to be (partially) disabled for yabai to inject a scripting addition into Dock.app for controlling windows with functions that require elevated privileges. This enables control of the window server, which is the sole owner of all window connections, and enables additional features of yabai. If you are running on macOS High Sierra 10.13.6, you can reenable SIP after the scripting addition has been installed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Code&amp;nbsp;Signing&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When building from source (or installing from HEAD), it is recommended to codesign the binary so it retains its accessibility and automation privileges when updated or rebuilt.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Mission&amp;nbsp;Control&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Mission Control preferences pane in System Preferences, the setting &#34;Automatically rearrange Spaces based on most recent use&#34; should be disabled for commands that rely on the ordering of spaces to work reliably.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License and Attribution&lt;/h2&gt; &#xA;&lt;p&gt;yabai is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/koekeishiya/yabai/master/LICENSE.txt&#34;&gt;↗&amp;nbsp;MIT&amp;nbsp;License&lt;/a&gt;, a short and simple permissive license with conditions only requiring preservation of copyright and license notices. Licensed works, modifications, and larger works may be distributed under different terms and without source code.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/fools-mate&#34;&gt;@fools-mate&lt;/a&gt; for creating a logo and banner for this project and making them available for free.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/dominiklohmann&#34;&gt;@dominiklohmann&lt;/a&gt; for contributing great documentation, support, and more, for free.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Use at your own discretion. I take no responsibility if anything should happen to your machine while trying to install, test or otherwise use this software in any form. You acknowledge that you understand the potential risk that may come from disabling &lt;a href=&#34;https://support.apple.com/en-us/HT204899&#34;&gt;↗&amp;nbsp;System&amp;nbsp;Integrity&amp;nbsp;Protection&lt;/a&gt; on your system, and I make no recommendation as to whether you should or should not disable System Integrity Protection.&lt;/p&gt; &#xA;&lt;!-- Project internal links --&gt; &#xA;&lt;!-- Links to other GitHub projects/users --&gt; &#xA;&lt;!-- External links --&gt;</summary>
  </entry>
  <entry>
    <title>CTCaer/hekate</title>
    <updated>2022-08-08T01:34:33Z</updated>
    <id>tag:github.com,2022-08-08:/CTCaer/hekate</id>
    <link href="https://github.com/CTCaer/hekate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;hekate - A GUI based Nintendo Switch Bootloader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hekate - Nyx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3665130/60391760-bc1e8c00-9afe-11e9-8b7a-b065873081b2.png&#34; alt=&#34;Image of Hekate&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom Graphical Nintendo Switch bootloader, firmware patcher, tools, and many more.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#bootloader-folders-and-files&#34;&gt;Bootloader folders and files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#bootloader-configuration&#34;&gt;Bootloader configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#hekate-global-configuration-keysvalues-when-entry-is-config&#34;&gt;hekate global Configuration keys/values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#boot-entry-keyvalue-combinations&#34;&gt;Boot entry key/value combinations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#boot-entry-keyvalue-combinations-for-exosph%C3%A8re&#34;&gt;Boot entry key/value combinations for Exosphère&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#payload-storage&#34;&gt;Payload storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/#nyx-configuration-keysvalues-nyxini&#34;&gt;Nyx Configuration keys/values&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully Configurable and Graphical&lt;/strong&gt; with Touchscreen and Joycon input support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Launcher Style, Background and Color Themes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HOS (Switch OS) Bootloader&lt;/strong&gt; -- For CFW Sys/Emu, OFW Sys and Stock Sys&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android &amp;amp; Linux Bootloader&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payload Launcher&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;eMMC/emuMMC Backup/Restore Tools&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SD Card Partition Manager&lt;/strong&gt; -- Prepares and formats SD Card for any combo of HOS (Sys/emuMMC), Android and Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;emuMMC Creation &amp;amp; Manager&lt;/strong&gt; -- Can also migrate and fix existing emuMMC&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Switch Android &amp;amp; Linux flasher&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;USB Mass Storage (UMS) for SD/eMMC/emuMMC&lt;/strong&gt; -- Converts Switch into a SD Card Reader&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;USB Gamepad&lt;/strong&gt; -- Converts Switch with Joycon into a USB HID Gamepad&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hardware and Peripherals info&lt;/strong&gt; (SoC, Fuses, RAM, Display, Touch, eMMC, SD, Battery, PSU, Charger)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Many other tools&lt;/strong&gt; like Archive Bit Fixer, Touch Calibration, SD/eMMC Benchmark, AutoRCM enabler and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bootloader folders and files&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Folder/File&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader&lt;/td&gt; &#xA;   &lt;td&gt;Main folder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ bootlogo.bmp&lt;/td&gt; &#xA;   &lt;td&gt;It is used if no &lt;code&gt;logopath&lt;/code&gt; key is found. User provided. Can be skipped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ hekate_ipl.ini&lt;/td&gt; &#xA;   &lt;td&gt;Main bootloader configuration and boot entries in &lt;code&gt;Launch&lt;/code&gt; menu.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ nyx.ini&lt;/td&gt; &#xA;   &lt;td&gt;Nyx GUI configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ patches.ini&lt;/td&gt; &#xA;   &lt;td&gt;Add external patches. Can be skipped. A template can be found &lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/res/patches_template.ini&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ update.bin&lt;/td&gt; &#xA;   &lt;td&gt;If newer, it is loaded at boot. Normally for modchips. Auto updated and created at first boot.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader/ini/&lt;/td&gt; &#xA;   &lt;td&gt;For individual inis. &lt;code&gt;More configs&lt;/code&gt; menu. Autoboot is supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader/res/&lt;/td&gt; &#xA;   &lt;td&gt;Nyx user resources. Icons and more.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ background.bmp&lt;/td&gt; &#xA;   &lt;td&gt;Nyx - Custom background. User provided.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ icon_switch.bmp&lt;/td&gt; &#xA;   &lt;td&gt;Nyx - Default icon for CFWs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ icon_payload.bmp&lt;/td&gt; &#xA;   &lt;td&gt;Nyx - Default icon for Payloads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader/sys/&lt;/td&gt; &#xA;   &lt;td&gt;hekate and Nyx system modules folder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ emummc.kipm&lt;/td&gt; &#xA;   &lt;td&gt;emuMMC KIP1 module. !Important!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ libsys_lp0.bso&lt;/td&gt; &#xA;   &lt;td&gt;LP0 (sleep mode) module. Important!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ libsys_minerva.bso&lt;/td&gt; &#xA;   &lt;td&gt;Minerva Training Cell. Used for DRAM Frequency training. !Important!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ nyx.bin&lt;/td&gt; &#xA;   &lt;td&gt;Nyx - hekate&#39;s GUI. !Important!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ res.pak&lt;/td&gt; &#xA;   &lt;td&gt;Nyx resources package. !Important!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;|__ thk.bin&lt;/td&gt; &#xA;   &lt;td&gt;Atmosphère Tsec Hovi Keygen. !Important!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader/screenshots/&lt;/td&gt; &#xA;   &lt;td&gt;Folder where Nyx screenshots are saved&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader/payloads/&lt;/td&gt; &#xA;   &lt;td&gt;For the &lt;code&gt;Payloads&lt;/code&gt; menu. All CFW bootloaders, tools, Linux payloads are supported. Autoboot only supported by including them into an ini.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootloader/libtools/&lt;/td&gt; &#xA;   &lt;td&gt;Reserved&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Bootloader configuration&lt;/h2&gt; &#xA;&lt;p&gt;The bootloader can be configured via &#39;bootloader/hekate_ipl.ini&#39; (if it is present on the SD card). Each ini section represents a boot entry, except for the special section &#39;config&#39; that controls the global configuration.&lt;/p&gt; &#xA;&lt;p&gt;There are four possible type of entries. &#34;&lt;strong&gt;[ ]&lt;/strong&gt;&#34;: Boot entry, &#34;&lt;strong&gt;{ }&lt;/strong&gt;&#34;: Caption, &#34;&lt;strong&gt;#&lt;/strong&gt;&#34;: Comment, &#34;&lt;em&gt;newline&lt;/em&gt;&#34;: .ini cosmetic newline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can find a template &lt;a href=&#34;https://raw.githubusercontent.com/CTCaer/hekate/master/res/hekate_ipl_template.ini&#34;&gt;Here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;hekate Global Configuration keys/values (when entry is &lt;em&gt;[config]&lt;/em&gt;):&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Config option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoboot=0&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable, #: Boot entry number to auto boot.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoboot_list=0&lt;/td&gt; &#xA;   &lt;td&gt;0: Read &lt;code&gt;autoboot&lt;/code&gt; boot entry from hekate_ipl.ini, 1: Read from ini folder (ini files are ASCII ordered).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootwait=3&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable (It also disables bootlogo. Having &lt;strong&gt;VOL-&lt;/strong&gt; pressed since injection goes to menu.), #: Time to wait for &lt;strong&gt;VOL-&lt;/strong&gt; to enter menu. Max: 20s.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autohosoff=1&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable, 1: If woke up from HOS via an RTC alarm, shows logo, then powers off completely, 2: No logo, immediately powers off.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autonogc=1&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable, 1: Automatically applies nogc patch if unburnt fuses found and a &amp;gt;= 4.0.0 HOS is booted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bootprotect=0&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable, 1: Protect bootloader folder from being corrupted by disallowing reading or editing in HOS.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;updater2p=0&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable, 1: Force updates (if needed) the reboot2payload binary to be hekate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backlight=100&lt;/td&gt; &#xA;   &lt;td&gt;Screen backlight level. 0-255.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Boot entry key/value combinations:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Config option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;warmboot={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Replaces the warmboot binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;secmon={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Replaces the security monitor binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kernel={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Replaces the kernel binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kip1={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Replaces/Adds kernel initial process. Multiple can be set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kip1={FOLDER path}/*&lt;/td&gt; &#xA;   &lt;td&gt;Loads every .kip/.kip1 inside a folder. Compatible with single kip1 keys.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fss0={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Takes an Atmosphere &lt;code&gt;package3&lt;/code&gt; binary (formerly fusee-secondary.bin) and &lt;code&gt;extracts&lt;/code&gt; all needed parts from it. kips, exosphere, warmboot and mesophere if enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fss0experimental=1&lt;/td&gt; &#xA;   &lt;td&gt;Enables loading of experimental content from a FSS0 storage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exofatal={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Replaces the exosphere fatal binary for Mariko&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;----------------------&lt;/td&gt; &#xA;   &lt;td&gt;----------------------------------------------------------&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kip1patch=patchname&lt;/td&gt; &#xA;   &lt;td&gt;Enables a kip1 patch. Specify with multiple lines and/or in one line with &lt;code&gt;,&lt;/code&gt; as separator. If actual patch is not found, a warning will show up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;emupath={FOLDER path}&lt;/td&gt; &#xA;   &lt;td&gt;Forces emuMMC to use the selected one. (=emuMMC/RAW1, =emuMMC/SD00, etc). emuMMC must be created by hekate because it uses the raw_based/file_based files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;emummcforce=1&lt;/td&gt; &#xA;   &lt;td&gt;Forces the use of emuMMC. If emummc.ini is disabled or not found, then it causes an error.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;emummc_force_disable=1&lt;/td&gt; &#xA;   &lt;td&gt;Disables emuMMC, if it&#39;s enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stock=1&lt;/td&gt; &#xA;   &lt;td&gt;Disables unneeded kernel patching and CFW kips when running stock or semi-stock. &lt;code&gt;If emuMMC is enabled, emummc_force_disable=1&lt;/code&gt; is required. emuMMC is not supported on stock. If additional KIPs are needed other than OFW&#39;s, you can define them with &lt;code&gt;kip1&lt;/code&gt; key. No kip should be used that relies on Atmosphère patching, because it will hang. If &lt;code&gt;NOGC&lt;/code&gt; is needed, use &lt;code&gt;kip1patch=nogc&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fullsvcperm=1&lt;/td&gt; &#xA;   &lt;td&gt;Disables SVC verification (full services permission). Doesn&#39;t work with Mesosphere as kernel.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debugmode=1&lt;/td&gt; &#xA;   &lt;td&gt;Enables Debug mode. Obsolete when used with exosphere as secmon.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;atmosphere=1&lt;/td&gt; &#xA;   &lt;td&gt;Enables Atmosphère patching. Not needed when &lt;code&gt;fss0&lt;/code&gt; is used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;----------------------&lt;/td&gt; &#xA;   &lt;td&gt;----------------------------------------------------------&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;payload={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Payload launching. Tools, Android/Linux, CFW bootloaders, etc. Any key above when used with that, doesn&#39;t get into account.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;----------------------&lt;/td&gt; &#xA;   &lt;td&gt;----------------------------------------------------------&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id=IDNAME&lt;/td&gt; &#xA;   &lt;td&gt;Identifies boot entry for forced boot via id. Max 7 chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logopath={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;If it exists, it will load the specified bitmap. Otherwise &lt;code&gt;bootloader/bootlogo.bmp&lt;/code&gt; will be used if exists&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;icon={FILE path}&lt;/td&gt; &#xA;   &lt;td&gt;Force Nyx to use the icon defined here. If this is not found, it will check for a bmp named as the boot entry ([Test 2] -&amp;gt; &lt;code&gt;bootloader/res/Test 2.bmp&lt;/code&gt;). Otherwise defaults will be used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note1&lt;/strong&gt;: When using the wildcard (&lt;code&gt;/*&lt;/code&gt;) with &lt;code&gt;kip1&lt;/code&gt; you can still use the normal &lt;code&gt;kip1&lt;/code&gt; after that to load extra single kips.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note2&lt;/strong&gt;: When using FSS0 it parses exosphere, warmboot and all core kips. You can override the first 2 by using &lt;code&gt;secmon&lt;/code&gt;/&lt;code&gt;warmboot&lt;/code&gt; after defining &lt;code&gt;fss0&lt;/code&gt;. You can define &lt;code&gt;kip1&lt;/code&gt; to load an extra kip or many via the wildcard (&lt;code&gt;/*&lt;/code&gt;) usage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Careful when you define &lt;em&gt;fss0 core&lt;/em&gt; kips when using &lt;code&gt;fss0&lt;/code&gt; or the folder (when using &lt;code&gt;/*&lt;/code&gt;) includes them. This is in case the kips are incompatible between them. If compatible, you can override &lt;code&gt;fss0&lt;/code&gt; kips with no issues (useful for testing with intermediate kip changes). In such cases, the &lt;code&gt;kip1&lt;/code&gt; line must be under &lt;code&gt;fss0&lt;/code&gt; line.&lt;/p&gt; &#xA;&lt;h3&gt;Boot entry key/value combinations for Exosphère:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Config option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nouserexceptions=1&lt;/td&gt; &#xA;   &lt;td&gt;Disables usermode exception handlers when paired with Exosphère.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;userpmu=1&lt;/td&gt; &#xA;   &lt;td&gt;Enables user access to PMU when paired with Exosphère.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cal0blank=1&lt;/td&gt; &#xA;   &lt;td&gt;Overrides Exosphère config &lt;code&gt;blank_prodinfo_{sys/emu}mmc&lt;/code&gt;. If that key doesn&#39;t exist, &lt;code&gt;exosphere.ini&lt;/code&gt; will be used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cal0writesys=1&lt;/td&gt; &#xA;   &lt;td&gt;Overrides Exosphère config &lt;code&gt;allow_writing_to_cal_sysmmc&lt;/code&gt;. If that key doesn&#39;t exist, &lt;code&gt;exosphere.ini&lt;/code&gt; will be used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usb3force=1&lt;/td&gt; &#xA;   &lt;td&gt;Overrides system settings mitm config &lt;code&gt;usb30_force_enabled&lt;/code&gt;. If that key doesn&#39;t exist, &lt;code&gt;system_settings.ini&lt;/code&gt; will be used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;cal0blank&lt;/code&gt;, &lt;code&gt;cal0writesys&lt;/code&gt;, &lt;code&gt;usb3force&lt;/code&gt;, as stated override the &lt;code&gt;exosphere.ini&lt;/code&gt; or &lt;code&gt;system_settings.ini&lt;/code&gt;. 0: Disable, 1: Enable, Key Missing: Use original value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note2&lt;/strong&gt;: &lt;code&gt;blank_prodinfo_{sys/emu}mmc&lt;/code&gt;, &lt;code&gt;allow_writing_to_cal_sysmmc&lt;/code&gt; and &lt;code&gt;usb30_force_enabled&lt;/code&gt; in &lt;code&gt;exosphere.ini&lt;/code&gt; and &lt;code&gt;system_settings.ini&lt;/code&gt; respectively, are the only atmosphere config keys that can affect hekate booting configuration externally, &lt;strong&gt;if&lt;/strong&gt; the equivalent keys in hekate config are missing.&lt;/p&gt; &#xA;&lt;h3&gt;Payload storage:&lt;/h3&gt; &#xA;&lt;p&gt;hekate has a boot storage in the binary that helps it configure it outside of BPMP enviroment:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Offset / Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x94&#39; boot_cfg&lt;/td&gt; &#xA;   &lt;td&gt;bit0: &lt;code&gt;Force AutoBoot&lt;/code&gt;, bit1: &lt;code&gt;Show launch log&lt;/code&gt;, bit2: &lt;code&gt;Boot from ID&lt;/code&gt;, bit3: &lt;code&gt;Boot to emuMMC&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x95&#39; autoboot&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;Force AutoBoot&lt;/code&gt;, 0: Force go to menu, else boot that entry.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x96&#39; autoboot_list&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;Force AutoBoot&lt;/code&gt; and &lt;code&gt;autoboot&lt;/code&gt; then it boots from ini folder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x97&#39; extra_cfg&lt;/td&gt; &#xA;   &lt;td&gt;When menu is forced: bit5: &lt;code&gt;Run UMS&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x98&#39; xt_str[128]&lt;/td&gt; &#xA;   &lt;td&gt;Depends on the set cfg bits.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x98&#39; ums[1]&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;Run UMS&lt;/code&gt; is set, it will launch the selected UMS. 0: SD, 1: eMMC BOOT0, 2: eMMC BOOT1, 3: eMMC GPP, 4: emuMMC BOOT0, 5: emuMMC BOOT1, 6: emuMMC GPP,&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0x98&#39; id[8]&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;Boot from ID&lt;/code&gt; is set, it will search all inis automatically and find the boot entry with that id and boot it. Must be NULL terminated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;0xA0&#39; emummc_path[120]&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;Boot to emuMMC&lt;/code&gt; is set, it will override the current emuMMC (boot entry or emummc.ini). Must be NULL terminated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If the main .ini is not found, it is created on the first hekate boot and only has the &lt;code&gt;[config]&lt;/code&gt; entry.&lt;/p&gt; &#xA;&lt;h3&gt;Nyx Configuration keys/values (nyx.ini):&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Config option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;themecolor=167&lt;/td&gt; &#xA;   &lt;td&gt;Sets Nyx color of text highlights.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;entries5col=0&lt;/td&gt; &#xA;   &lt;td&gt;1: Sets Launch entry columns from 4 to 5 per line. For a total of 10 entries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timeoff=100&lt;/td&gt; &#xA;   &lt;td&gt;Sets time offset in HEX. Must be in HOS epoch format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;homescreen=0&lt;/td&gt; &#xA;   &lt;td&gt;Sets home screen. 0: Home menu, 1: All configs (merges Launch and More configs), 2: Launch, 3: More Configs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;verification=1&lt;/td&gt; &#xA;   &lt;td&gt;0: Disable Backup/Restore verification, 1: Sparse (block based, fast and mostly reliable), 2: Full (sha256 based, slow and 100% reliable).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;------------------&lt;/td&gt; &#xA;   &lt;td&gt;------- The following options can only be edited in nyx.ini -------&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;umsemmcrw=0&lt;/td&gt; &#xA;   &lt;td&gt;1: eMMC/emuMMC UMS will be mounted as writable by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jcdisable=0&lt;/td&gt; &#xA;   &lt;td&gt;1: Disables Joycon driver completely.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jcforceright=0&lt;/td&gt; &#xA;   &lt;td&gt;1: Forces right joycon to be used as main mouse control.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bpmpclock=1&lt;/td&gt; &#xA;   &lt;td&gt;0: Auto, 1: Faster, 2: Fast. Use 2 if Nyx hangs or some functions like UMS/Backup Verification fail.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code&gt;hekate  (c) 2018,      naehrwert, st4rk.&#xA;        (c) 2018-2022, CTCaer.&#xA;&#xA;Nyx GUI (c) 2019-2022, CTCaer.&#xA;&#xA;Thanks to: derrek, nedwill, plutoo, shuffle2, smea, thexyz, yellows8.&#xA;Greetings to: fincs, hexkyz, SciresM, Shiny Quagsire, WinterMute.&#xA;&#xA;Open source and free packages used:&#xA; - FatFs R0.13a, Copyright (c) 2017, ChaN&#xA; - bcl-1.2.0, Copyright (c) 2003-2006, Marcus Geelnard&#xA; - Atmosphère (Exosphere types/panic, prc id kernel patches),&#xA;   Copyright (c) 2018-2019, Atmosphère-NX&#xA; - elfload, Copyright (c) 2014 Owen Shepherd, Copyright (c) 2018 M4xw&#xA; - Littlev Graphics Library, Copyright (c) 2016 Gabor Kiss-Vamosi&#xA;&#xA;                         ___&#xA;                      .-&#39;   `&#39;.&#xA;                     /         \&#xA;                     |         ;&#xA;                     |         |           ___.--,&#xA;            _.._     |0) = (0) |    _.---&#39;`__.-( (_.&#xA;     __.--&#39;`_.. &#39;.__.\    &#39;--. \_.-&#39; ,.--&#39;`     `&#34;&#34;`&#xA;    ( ,.--&#39;`   &#39;,__ /./;   ;, &#39;.__.&#39;`    __&#xA;    _`) )  .---.__.&#39; / |   |\   \__..--&#34;&#34;  &#34;&#34;&#34;--.,_&#xA;   `---&#39; .&#39;.&#39;&#39;-._.-&#39;`_./  /\ &#39;.  \ _.--&#39;&#39;````&#39;&#39;&#39;--._`-.__.&#39;&#xA;         | |  .&#39; _.-&#39; |  |  \  \  &#39;.               `----`&#xA;          \ \/ .&#39;     \  \   &#39;. &#39;-._)&#xA;           \/ /        \  \    `=.__`&#39;-.&#xA;           / /\         `) )    / / `&#34;&#34;.`\&#xA;     , _.-&#39;.&#39;\ \        / /    ( (     / /&#xA;      `--&#39;`   ) )    .-&#39;.&#39;      &#39;.&#39;.  | (&#xA;             (/`    ( (`          ) )  &#39;-;   [switchbrew]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hepingood/mpu6050</title>
    <updated>2022-08-08T01:34:33Z</updated>
    <id>tag:github.com,2022-08-08:/hepingood/mpu6050</id>
    <link href="https://github.com/hepingood/mpu6050" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mpu6050 full function driver&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/README_zh-Hans.md&#34;&gt; 简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/README_zh-Hant.md&#34;&gt;繁體中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/README_ja.md&#34;&gt;日本語&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/README_de.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/README_ko.md&#34;&gt;한국어&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/doc/image/logo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;LibDriver MPU6050&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/misra/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/misra-compliant-brightgreen.svg?sanitize=true&#34; alt=&#34;MISRA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.libdriver.com/docs/mpu6050/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-reference-blue.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The MPU6050 is the world’s first integrated 6-axis MotionTracking device that combines a 3-axis gyroscope, 3-axis accelerometer, and a Digital Motion Processor™ (DMP) all in a small 4x4x0.9mm package. With its dedicated I2C sensor bus, it directly accepts inputs from an external 3-axis compass to provide a complete 9-axis MotionFusion™ output. The MPU6050 MotionTracking device, with its 6-axis integration, on-board MotionFusion™, and run-time calibration firmware, enables manufacturers to eliminate the costly and complex selection, qualification, and system level integration of discrete devices, guaranteeing optimal motion performance for consumers. The MPU6050 is also designed to interface with multiple non-inertial digital sensors, such as pressure sensors, on its auxiliary I2C port. The MPU6050 is footprint compatible with the MPU30X0 family.The MPU6050 features three 16-bit analog-to-digital converters (ADCs) for digitizing the gyroscope outputs and three 16-bit ADCs for digitizing the accelerometer outputs. For precision tracking of both fast and slow motions, the parts feature a user-programmable gyroscope full-scale range of ±250, ±500, ±1000, and ±2000°/sec (dps) and a user-programmable accelerometer full-scale range of ±2g, ±4g, ±8g, and ±16g.&lt;/p&gt; &#xA;&lt;p&gt;LibDriver MPU6050 is the full function driver of mpu6050 launched by LibDriver. It provides acceleration reading, angular velocity reading, attitude angle reading, dmp reading, tap detection and other functions. LibDriver is MISRA compliant.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#Instruction&#34;&gt;Instruction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#Install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#Usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#example-basic&#34;&gt;example basic&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#example-fifo&#34;&gt;example fifo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#example-dmp&#34;&gt;example dmp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#Document&#34;&gt;Document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#License&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hepingood/mpu6050/master/#Contact-Us&#34;&gt;Contact Us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instruction&lt;/h3&gt; &#xA;&lt;p&gt;/src includes LibDriver MPU6050 source files.&lt;/p&gt; &#xA;&lt;p&gt;/interface includes LibDriver MPU6050 IIC platform independent template。&lt;/p&gt; &#xA;&lt;p&gt;/test includes LibDriver MPU6050 driver test code and this code can test the chip necessary function simply。&lt;/p&gt; &#xA;&lt;p&gt;/example includes LibDriver MPU6050 sample code.&lt;/p&gt; &#xA;&lt;p&gt;/doc includes LibDriver MPU6050 offline document.&lt;/p&gt; &#xA;&lt;p&gt;/datasheet includes MPU6050 datasheet。&lt;/p&gt; &#xA;&lt;p&gt;/project includes the common Linux and MCU development board sample code. All projects use the shell script to debug the driver and the detail instruction can be found in each project&#39;s README.md.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Reference /interface IIC platform independent template and finish your platform IIC driver.&lt;/p&gt; &#xA;&lt;p&gt;Add /src, /interface and /example to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;example basic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;uint8_t res;&#xA;uint32_t i;&#xA;uint32_t times;&#xA;float g[3];&#xA;float dps[3];&#xA;float degrees;&#xA;mpu6050_address_t addr;&#xA;&#xA;/* init */&#xA;addr = MPU6050_ADDRESS_AD0_LOW;&#xA;res = mpu6050_basic_init(addr);&#xA;if (res != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* read all */&#xA;times = 3;&#xA;for (i = 0; i &amp;lt; times; i++)&#xA;{&#xA;    /* read */&#xA;    if (mpu6050_basic_read(g, dps) != 0)&#xA;    {&#xA;        (void)mpu6050_basic_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;&#xA;    ...&#xA;        &#xA;    if (mpu6050_basic_read_temperature(&amp;amp;degrees) != 0)&#xA;    {&#xA;        (void)mpu6050_basic_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;&#xA;    ...&#xA;        &#xA;    /* output */&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: %d/%d.\n&#34;, i + 1, times);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc x is %0.2fg.\n&#34;, g[0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc y is %0.2fg.\n&#34;, g[1]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc z is %0.2fg.\n&#34;, g[2]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro x is %0.2fdps.\n&#34;, dps[0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro y is %0.2fdps.\n&#34;, dps[1]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro z is %0.2fdps.\n&#34;, dps[2]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: temperature %0.2fC.\n&#34;, degrees);&#xA;&#xA;    ...&#xA;        &#xA;    /* delay 1000 ms */&#xA;    mpu6050_interface_delay_ms(1000);&#xA;&#xA;    ...&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* deinit */&#xA;(void)mpu6050_basic_deinit();&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;example fifo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;uint32_t i;&#xA;uint32_t times;&#xA;uint16_t len;&#xA;uint8_t (*g_gpio_irq)(void) = NULL;&#xA;static int16_t gs_accel_raw[128][3];&#xA;static float gs_accel_g[128][3];&#xA;static int16_t gs_gyro_raw[128][3];&#xA;static float gs_gyro_dps[128][3];&#xA;mpu6050_address_t addr;&#xA;&#xA;/* gpio init */&#xA;if (gpio_interrupt_init() != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;g_gpio_irq = mpu6050_fifo_irq_handler;&#xA;&#xA;/* init */&#xA;addr = MPU6050_ADDRESS_AD0_LOW;&#xA;if (mpu6050_fifo_init(addr) != 0)&#xA;{&#xA;    g_gpio_irq = NULL;&#xA;    (void)gpio_interrupt_deinit();&#xA;&#xA;    return 1;&#xA;}&#xA;&#xA;/* delay 100 ms */&#xA;mpu6050_interface_delay_ms(100);&#xA;&#xA;...&#xA;&#xA;times = 3;&#xA;for (i = 0; i &amp;lt; times; i++)&#xA;{&#xA;    len = 128;&#xA;&#xA;    /* read */&#xA;    if (mpu6050_fifo_read(gs_accel_raw, gs_accel_g,&#xA;                          gs_gyro_raw, gs_gyro_dps, &amp;amp;len) != 0)&#xA;    {&#xA;        (void)mpu6050_fifo_deinit();&#xA;        g_gpio_irq = NULL;&#xA;        (void)gpio_interrupt_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;    &#xA;    ...&#xA;        &#xA;    /* output */&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: %d/%d.\n&#34;, i + 1, times);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: fifo %d.\n&#34;, len);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc x[0] is %0.2fg.\n&#34;, gs_accel_g[0][0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc y[0] is %0.2fg.\n&#34;, gs_accel_g[0][1]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc z[0] is %0.2fg.\n&#34;, gs_accel_g[0][2]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro x[0] is %0.2fdps.\n&#34;, gs_gyro_dps[0][0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro y[0] is %0.2fdps.\n&#34;, gs_gyro_dps[0][1]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro z[0] is %0.2fdps.\n&#34;, gs_gyro_dps[0][2]);&#xA;    &#xA;    ...&#xA;        &#xA;    /* delay 100 ms */&#xA;    mpu6050_interface_delay_ms(100);&#xA;    &#xA;    ...&#xA;}&#xA;&#xA;...&#xA;    &#xA;/* deinit */&#xA;(void)mpu6050_fifo_deinit();&#xA;g_gpio_irq = NULL;&#xA;(void)gpio_interrupt_deinit();&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;example dmp&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;uint32_t i;&#xA;uint32_t times;&#xA;uint32_t cnt;&#xA;uint16_t len;&#xA;uint8_t (*g_gpio_irq)(void) = NULL;&#xA;static int16_t gs_accel_raw[128][3];&#xA;static float gs_accel_g[128][3];&#xA;static int16_t gs_gyro_raw[128][3];      &#xA;static float gs_gyro_dps[128][3];        &#xA;static int32_t gs_quat[128][4];          &#xA;static float gs_pitch[128];              &#xA;static float gs_roll[128];                &#xA;static float gs_yaw[128];                  &#xA;static int32_t gs_quat[128][4];         &#xA;static float gs_pitch[128];             &#xA;static float gs_roll[128];             &#xA;static float gs_yaw[128];     &#xA;mpu6050_address_t addr;&#xA;&#xA;static void a_receive_callback(uint8_t type)&#xA;{&#xA;    switch (type)&#xA;    {&#xA;        case MPU6050_INTERRUPT_MOTION :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: irq motion.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_INTERRUPT_FIFO_OVERFLOW :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: irq fifo overflow.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_INTERRUPT_I2C_MAST :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: irq i2c master.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_INTERRUPT_DMP :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: irq dmp\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_INTERRUPT_DATA_READY :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: irq data ready\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        default :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: irq unknown code.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;static void a_dmp_tap_callback(uint8_t count, uint8_t direction)&#xA;{&#xA;    switch (direction)&#xA;    {&#xA;        case MPU6050_DMP_TAP_X_UP :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq x up with %d.\n&#34;, count);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_TAP_X_DOWN :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq x down with %d.\n&#34;, count);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_TAP_Y_UP :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq y up with %d.\n&#34;, count);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_TAP_Y_DOWN :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq y down with %d.\n&#34;, count);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_TAP_Z_UP :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq z up with %d.\n&#34;, count);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_TAP_Z_DOWN :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq z down with %d.\n&#34;, count);&#xA;            &#xA;            break;&#xA;        }&#xA;        default :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: tap irq unknown code.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;static void a_dmp_orient_callback(uint8_t orientation)&#xA;{&#xA;    switch (orientation)&#xA;    {&#xA;        case MPU6050_DMP_ORIENT_PORTRAIT :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: orient irq portrait.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_ORIENT_LANDSCAPE :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: orient irq landscape.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_ORIENT_REVERSE_PORTRAIT :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: orient irq reverse portrait.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        case MPU6050_DMP_ORIENT_REVERSE_LANDSCAPE :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: orient irq reverse landscape.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;        default :&#xA;        {&#xA;            mpu6050_interface_debug_print(&#34;mpu6050: orient irq unknown code.\n&#34;);&#xA;            &#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;/* init */&#xA;if (gpio_interrupt_init() != 0)&#xA;{&#xA;    return 1;&#xA;}&#xA;g_gpio_irq = mpu6050_dmp_irq_handler;&#xA;&#xA;/* run dmp function */&#xA;if (mpu6050_dmp_init(addr, a_receive_callback, &#xA;                     a_dmp_tap_callback, a_dmp_orient_callback) != 0)&#xA;{&#xA;    g_gpio_irq = NULL;&#xA;    (void)gpio_interrupt_deinit();&#xA;&#xA;    return 1;&#xA;}&#xA;&#xA;/* delay 500 ms */&#xA;mpu6050_interface_delay_ms(500);&#xA;&#xA;...&#xA;    &#xA;times = 3;&#xA;for (i = 0; i &amp;lt; times; i++)&#xA;{&#xA;    len = 128;&#xA;&#xA;    /* read */&#xA;    if (mpu6050_dmp_read_all(gs_accel_raw, gs_accel_g,&#xA;                             gs_gyro_raw, gs_gyro_dps, &#xA;                             gs_quat,&#xA;                             gs_pitch, gs_roll, gs_yaw,&#xA;                             &amp;amp;len) != 0)&#xA;    {&#xA;        (void)mpu6050_dmp_deinit();&#xA;        g_gpio_irq = NULL;&#xA;        (void)gpio_interrupt_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;&#xA;    /* output */&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: %d/%d.\n&#34;, i + 1, times);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: fifo %d.\n&#34;, len);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: pitch[0] is %0.2fdps.\n&#34;, gs_pitch[0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: roll[0] is %0.2fdps.\n&#34;, gs_roll[0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: yaw[0] is %0.2fdps.\n&#34;, gs_yaw[0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc x[0] is %0.2fg.\n&#34;, gs_accel_g[0][0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc y[0] is %0.2fg.\n&#34;, gs_accel_g[0][1]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: acc z[0] is %0.2fg.\n&#34;, gs_accel_g[0][2]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro x[0] is %0.2fdps.\n&#34;, gs_gyro_dps[0][0]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro y[0] is %0.2fdps.\n&#34;, gs_gyro_dps[0][1]);&#xA;    mpu6050_interface_debug_print(&#34;mpu6050: gyro z[0] is %0.2fdps.\n&#34;, gs_gyro_dps[0][2]);&#xA;&#xA;    /* delay 500 ms */&#xA;    mpu6050_interface_delay_ms(500);&#xA;    &#xA;    ....&#xA;        &#xA;    /* get the pedometer step count */&#xA;    res = mpu6050_dmp_get_pedometer_counter(&amp;amp;cnt);&#xA;    if (res != 0)&#xA;    {&#xA;        (void)mpu6050_dmp_deinit();&#xA;        g_gpio_irq = NULL;&#xA;        (void)gpio_interrupt_deinit();&#xA;&#xA;        return 1;&#xA;    }&#xA;    &#xA;    ...&#xA;}&#xA;&#xA;...&#xA;&#xA;/* deinit */&#xA;(void)mpu6050_dmp_deinit();&#xA;g_gpio_irq = NULL;&#xA;(void)gpio_interrupt_deinit();&#xA;&#xA;return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Document&lt;/h3&gt; &#xA;&lt;p&gt;Online documents: &lt;a href=&#34;https://www.libdriver.com/docs/mpu6050/index.html&#34;&gt;https://www.libdriver.com/docs/mpu6050/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Offline documents: /doc/html/index.html&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please sent an e-mail to &lt;a href=&#34;mailto:lishifenging@outlook.com&#34;&gt;lishifenging@outlook.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (c) 2015 - present LibDriver All rights reserved&lt;/p&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy&lt;/p&gt; &#xA;&lt;p&gt;of this software and associated documentation files (the &#34;Software&#34;), to deal&lt;/p&gt; &#xA;&lt;p&gt;in the Software without restriction, including without limitation the rights&lt;/p&gt; &#xA;&lt;p&gt;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&lt;/p&gt; &#xA;&lt;p&gt;copies of the Software, and to permit persons to whom the Software is&lt;/p&gt; &#xA;&lt;p&gt;furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all&lt;/p&gt; &#xA;&lt;p&gt;copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&lt;/p&gt; &#xA;&lt;p&gt;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&lt;/p&gt; &#xA;&lt;p&gt;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&lt;/p&gt; &#xA;&lt;p&gt;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&lt;/p&gt; &#xA;&lt;p&gt;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&lt;/p&gt; &#xA;&lt;p&gt;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/p&gt; &#xA;&lt;p&gt;SOFTWARE.&lt;/p&gt; &#xA;&lt;h3&gt;Contact Us&lt;/h3&gt; &#xA;&lt;p&gt;Please sent an e-mail to &lt;a href=&#34;mailto:lishifenging@outlook.com&#34;&gt;lishifenging@outlook.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>