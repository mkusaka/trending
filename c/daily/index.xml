<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-21T01:31:52Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>allinurl/goaccess</title>
    <updated>2023-02-21T01:31:52Z</updated>
    <id>tag:github.com,2023-02-21:/allinurl/goaccess</id>
    <link href="https://github.com/allinurl/goaccess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoAccess is a real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems or through your browser.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GoAccess &lt;a href=&#34;https://github.com/allinurl/goaccess/actions/workflows/build-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/allinurl/goaccess/actions/workflows/build-test.yml/badge.svg?sanitize=true&#34; alt=&#34;C build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goaccess.io&#34;&gt;&lt;img src=&#34;https://goaccess.io/badge&#34; alt=&#34;GoAccess&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;GoAccess is an open source &lt;strong&gt;real-time web log analyzer&lt;/strong&gt; and interactive viewer that runs in a &lt;strong&gt;terminal&lt;/strong&gt; on *nix systems or through your &lt;strong&gt;browser&lt;/strong&gt;. It provides &lt;strong&gt;fast&lt;/strong&gt; and valuable HTTP statistics for system administrators that require a visual server report on the fly. More info at: &lt;a href=&#34;https://goaccess.io/?src=gh&#34;&gt;https://goaccess.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goaccess.io/&#34;&gt;&lt;img src=&#34;https://goaccess.io/images/goaccess-real-time-term-gh.png?2022011901&#34; alt=&#34;GoAccess Terminal Dashboard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rt.goaccess.io/?src=gh&#34;&gt;&lt;img src=&#34;https://goaccess.io/images/goaccess-real-time-html-gh.png?202201190&#34; alt=&#34;GoAccess HTML Dashboard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;GoAccess parses the specified web log file and outputs the data to the X terminal. Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Completely Real Time&lt;/strong&gt;&lt;br&gt; All panels and metrics are timed to be updated every 200 ms on the terminal output and every second on the HTML output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Minimal Configuration needed&lt;/strong&gt;&lt;br&gt; You can just run it against your access log file, pick the log format and let GoAccess parse the access log and show you the stats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Track Application Response Time&lt;/strong&gt;&lt;br&gt; Track the time taken to serve the request. Extremely useful if you want to track pages that are slowing down your site.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nearly All Web Log Formats&lt;/strong&gt;&lt;br&gt; GoAccess allows any custom log format string. Predefined options include, Apache, Nginx, Amazon S3, Elastic Load Balancing, CloudFront, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Incremental Log Processing&lt;/strong&gt;&lt;br&gt; Need data persistence? GoAccess has the ability to process logs incrementally through the on-disk persistence options.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Only one dependency&lt;/strong&gt;&lt;br&gt; GoAccess is written in C. To run it, you only need ncurses as a dependency. That&#39;s it. It even features its own Web Socket server â€” &lt;a href=&#34;http://gwsocket.io/&#34;&gt;http://gwsocket.io/&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visitors&lt;/strong&gt;&lt;br&gt; Determine the amount of hits, visitors, bandwidth, and metrics for slowest running requests by the hour, or date.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metrics per Virtual Host&lt;/strong&gt;&lt;br&gt; Have multiple Virtual Hosts (Server Blocks)? It features a panel that displays which virtual host is consuming most of the web server resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ASN (Autonomous System Number mapping)&lt;/strong&gt;&lt;br&gt; Great for detecting malicious traffic patterns and block them accordingly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Color Scheme Customizable&lt;/strong&gt;&lt;br&gt; Tailor GoAccess to suit your own color taste/schemes. Either through the terminal, or by simply applying the stylesheet on the HTML output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Support for Large Datasets&lt;/strong&gt;&lt;br&gt; GoAccess features the ability to parse large logs due to its optimized in-memory hash tables. It has very good memory usage and pretty good performance. This storage has support for on-disk persistence as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Docker Support&lt;/strong&gt;&lt;br&gt; Ability to build GoAccess&#39; Docker image from upstream. You can still fully configure it, by using Volume mapping and editing &lt;code&gt;goaccess.conf&lt;/code&gt;. See &lt;a href=&#34;https://github.com/allinurl/goaccess#docker&#34;&gt;Docker&lt;/a&gt; section below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nearly all web log formats...&lt;/h3&gt; &#xA;&lt;p&gt;GoAccess allows any custom log format string. Predefined options include, but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Amazon CloudFront (Download Distribution).&lt;/li&gt; &#xA; &lt;li&gt;Amazon Simple Storage Service (S3)&lt;/li&gt; &#xA; &lt;li&gt;AWS Elastic Load Balancing&lt;/li&gt; &#xA; &lt;li&gt;Combined Log Format (XLF/ELF) Apache | Nginx&lt;/li&gt; &#xA; &lt;li&gt;Common Log Format (CLF) Apache&lt;/li&gt; &#xA; &lt;li&gt;Google Cloud Storage.&lt;/li&gt; &#xA; &lt;li&gt;Apache virtual hosts&lt;/li&gt; &#xA; &lt;li&gt;Squid Native Format.&lt;/li&gt; &#xA; &lt;li&gt;W3C format (IIS).&lt;/li&gt; &#xA; &lt;li&gt;Caddy&#39;s JSON Structured format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why GoAccess?&lt;/h2&gt; &#xA;&lt;p&gt;GoAccess was designed to be a fast, terminal-based log analyzer. Its core idea is to quickly analyze and view web server statistics in real time without needing to use your browser (&lt;em&gt;great if you want to do a quick analysis of your access log via SSH, or if you simply love working in the terminal&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;While the terminal output is the default output, it has the capability to generate a complete, self-contained, real-time &lt;a href=&#34;https://rt.goaccess.io/?src=gh&#34;&gt;&lt;strong&gt;&lt;code&gt;HTML&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; report, as well as a &lt;a href=&#34;https://goaccess.io/json?src=gh&#34;&gt;&lt;strong&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://goaccess.io/goaccess_csv_report.csv?src=gh&#34;&gt;&lt;strong&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; report.&lt;/p&gt; &#xA;&lt;p&gt;You can see it more of a monitor command tool than anything else.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Build from release&lt;/h3&gt; &#xA;&lt;p&gt;GoAccess can be compiled and used on *nix systems.&lt;/p&gt; &#xA;&lt;p&gt;Download, extract and compile GoAccess with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget https://tar.goaccess.io/goaccess-1.7.tar.gz&#xA;$ tar -xzvf goaccess-1.7.tar.gz&#xA;$ cd goaccess-1.7/&#xA;$ ./configure --enable-utf8 --enable-geoip=mmdb&#xA;$ make&#xA;# make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from GitHub (Development)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/allinurl/goaccess.git&#xA;$ cd goaccess&#xA;$ autoreconf -fiv&#xA;$ ./configure --enable-utf8 --enable-geoip=mmdb&#xA;$ make&#xA;# make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build in isolated container&lt;/h4&gt; &#xA;&lt;p&gt;You can also build the binary for Debian based systems in an isolated container environment to prevent cluttering your local system with the development libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -L &#34;https://github.com/allinurl/goaccess/archive/refs/heads/master.tar.gz&#34; | tar -xz &amp;amp;&amp;amp; cd goaccess-master&#xA;$ docker build -t goaccess/build.debian-10 -f Dockerfile.debian-10 .&#xA;$ docker run -i --rm -v $PWD:/goaccess goaccess/build.debian-10 &amp;gt; goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Distributions&lt;/h3&gt; &#xA;&lt;p&gt;It is easiest to install GoAccess on GNU+Linux using the preferred package manager of your GNU+Linux distribution. Please note that not all distributions will have the latest version of GoAccess available.&lt;/p&gt; &#xA;&lt;h4&gt;Debian/Ubuntu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# apt-get install goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is likely this will install an outdated version of GoAccess. To make sure that you&#39;re running the latest stable version of GoAccess see alternative option below.&lt;/p&gt; &#xA;&lt;h4&gt;Official GoAccess Debian &amp;amp; Ubuntu repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget -O - https://deb.goaccess.io/gnugpg.key | gpg --dearmor \&#xA;    | sudo tee /usr/share/keyrings/goaccess.gpg &amp;gt;/dev/null&#xA;$ echo &#34;deb [signed-by=/usr/share/keyrings/goaccess.gpg arch=$(dpkg --print-architecture)] https://deb.goaccess.io/ $(lsb_release -cs) main&#34; \&#xA;    | sudo tee /etc/apt/sources.list.d/goaccess.list&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.deb&lt;/code&gt; packages in the official repo are available through HTTPS as well. You may need to install &lt;code&gt;apt-transport-https&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# yum install goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pacman -S goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gentoo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# emerge net-analyzer/goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OS X / Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# brew install goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# cd /usr/ports/sysutils/goaccess/ &amp;amp;&amp;amp; make install clean&#xA;# pkg install sysutils/goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# cd /usr/ports/www/goaccess &amp;amp;&amp;amp; make install clean&#xA;# pkg_add goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# zypper ar -f obs://server:http http&#xA;# zypper in goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenIndiana&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pkg install goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;pkgsrc (NetBSD, Solaris, SmartOS, ...)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pkgin install goaccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;GoAccess can be used in Windows through Cygwin. See Cygwin&#39;s &lt;a href=&#34;https://goaccess.io/faq#installation&#34;&gt;packages&lt;/a&gt;. Or through the GNU+Linux Subsystem on Windows 10.&lt;/p&gt; &#xA;&lt;h4&gt;Distribution Packages&lt;/h4&gt; &#xA;&lt;p&gt;GoAccess has minimal requirements, it&#39;s written in C and requires only ncurses. However, below is a table of some optional dependencies in some distros to build GoAccess from source.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Distro&lt;/th&gt; &#xA;   &lt;th&gt;NCurses&lt;/th&gt; &#xA;   &lt;th&gt;GeoIP (opt)&lt;/th&gt; &#xA;   &lt;th&gt;GeoIP2 (opt)&lt;/th&gt; &#xA;   &lt;th&gt;OpenSSL (opt)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu/Debian&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;libncursesw6-dev&lt;/td&gt; &#xA;   &lt;td&gt;libgeoip-dev&lt;/td&gt; &#xA;   &lt;td&gt;libmaxminddb-dev&lt;/td&gt; &#xA;   &lt;td&gt;libssl-dev&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;RHEL/CentOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ncurses-devel&lt;/td&gt; &#xA;   &lt;td&gt;geoip-devel&lt;/td&gt; &#xA;   &lt;td&gt;libmaxminddb-devel&lt;/td&gt; &#xA;   &lt;td&gt;openssl-devel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Arch&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ncurses&lt;/td&gt; &#xA;   &lt;td&gt;geoip&lt;/td&gt; &#xA;   &lt;td&gt;libmaxminddb&lt;/td&gt; &#xA;   &lt;td&gt;openssl&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Gentoo&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sys-libs/ncurses&lt;/td&gt; &#xA;   &lt;td&gt;dev-libs/geoip&lt;/td&gt; &#xA;   &lt;td&gt;dev-libs/libmaxminddb&lt;/td&gt; &#xA;   &lt;td&gt;dev-libs/openssl&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Slackware&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ncurses&lt;/td&gt; &#xA;   &lt;td&gt;GeoIP&lt;/td&gt; &#xA;   &lt;td&gt;libmaxminddb&lt;/td&gt; &#xA;   &lt;td&gt;openssl&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You may need to install build tools like &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;autoconf&lt;/code&gt;, &lt;code&gt;gettext&lt;/code&gt;, &lt;code&gt;autopoint&lt;/code&gt; etc for compiling/building software from source. e.g., &lt;code&gt;base-devel&lt;/code&gt;, &lt;code&gt;build-essential&lt;/code&gt;, &lt;code&gt;&#34;Development Tools&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;A Docker image has been updated, capable of directing output from an access log. If you only want to output a report, you can pipe a log from the external environment to a Docker-based process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat access.log | docker run --rm -i -e LANG=$LANG allinurl/goaccess -a -o html --log-format COMBINED - &amp;gt; report.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR real-time&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tail -F access.log | docker run -p 7890:7890 --rm -i -e LANG=$LANG allinurl/goaccess -a -o html --log-format COMBINED --real-time-html - &amp;gt; report.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about using the docker image in &lt;a href=&#34;https://github.com/allinurl/goaccess/raw/master/DOCKER.md&#34;&gt;DOCKER.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Storage&lt;/h2&gt; &#xA;&lt;h4&gt;Default Hash Tables&lt;/h4&gt; &#xA;&lt;p&gt;In-memory storage provides better performance at the cost of limiting the dataset size to the amount of available physical memory. GoAccess uses in-memory hash tables. It has very good memory usage and pretty good performance. This storage has support for on-disk persistence as well.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line / Config Options&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://goaccess.io/man#options&#34;&gt;&lt;strong&gt;options&lt;/strong&gt;&lt;/a&gt; that can be supplied to the command or specified in the configuration file. If specified in the configuration file, long options need to be used without prepending &lt;code&gt;--&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage / Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Piping data into GoAccess won&#39;t prompt a log/date/time configuration dialog, you will need to previously define it in your configuration file or in the command line.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;To output to a terminal and generate an interactive report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate an HTML report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log -a &amp;gt; report.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a JSON report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log -a -d -o json &amp;gt; report.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a CSV file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log --no-csv-summary -o csv &amp;gt; report.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GoAccess also allows great flexibility for real-time filtering and parsing. For instance, to quickly diagnose issues by monitoring logs since goaccess was started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# tail -f access.log | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And even better, to filter while maintaining opened a pipe to preserve real-time analysis, we can make use of &lt;code&gt;tail -f&lt;/code&gt; and a matching pattern tool such as &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, etc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# tail -f access.log | grep -i --line-buffered &#39;firefox&#39; | goaccess --log-format=COMBINED -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to parse from the beginning of the file while maintaining the pipe opened and applying a filter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# tail -f -n +0 access.log | grep -i --line-buffered &#39;firefox&#39; | goaccess -o report.html --real-time-html -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Log files&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways to parse multiple logs with GoAccess. The simplest is to pass multiple log files to the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log access.log.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s even possible to parse files from a pipe while reading regular files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# cat access.log.2 | goaccess access.log access.log.1 -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the single dash is appended to the command line to let GoAccess know that it should read from the pipe.&lt;/p&gt; &#xA;&lt;p&gt;Now if we want to add more flexibility to GoAccess, we can use &lt;code&gt;zcat --force&lt;/code&gt; to read compressed and uncompressed files. For instance, if we would like to process all log files &lt;code&gt;access.log*&lt;/code&gt;, we can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# zcat --force access.log* | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: On Mac OS X, use &lt;code&gt;gunzip -c&lt;/code&gt; instead of &lt;code&gt;zcat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Real-time HTML outputs&lt;/h3&gt; &#xA;&lt;p&gt;GoAccess has the ability the output real-time data in the HTML report. You can even email the HTML file since it is composed of a single file with no external file dependencies, how neat is that!&lt;/p&gt; &#xA;&lt;p&gt;The process of generating a real-time HTML report is very similar to the process of creating a static report. Only &lt;code&gt;--real-time-html&lt;/code&gt; is needed to make it real-time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log -o /usr/share/nginx/html/your_site/report.html --real-time-html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the report you can navigate to &lt;code&gt;http://your_site/report.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, GoAccess will use the host name of the generated report. Optionally, you can specify the URL to which the client&#39;s browser will connect to. See &lt;a href=&#34;https://goaccess.io/faq&#34;&gt;FAQ&lt;/a&gt; for a more detailed example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log -o report.html --real-time-html --ws-url=goaccess.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, GoAccess listens on port 7890, to use a different port other than 7890, you can specify it as (make sure the port is opened):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log -o report.html --real-time-html --port=9870&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to bind the WebSocket server to a different address other than 0.0.0.0, you can specify it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log -o report.html --real-time-html --addr=127.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To output real time data over a TLS/SSL connection, you need to use &lt;code&gt;--ssl-cert=&amp;lt;cert.crt&amp;gt;&lt;/code&gt; and &lt;code&gt;--ssl-key=&amp;lt;priv.key&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Filtering&lt;/h3&gt; &#xA;&lt;h4&gt;Working with dates&lt;/h4&gt; &#xA;&lt;p&gt;Another useful pipe would be filtering dates out of the web log&lt;/p&gt; &#xA;&lt;p&gt;The following will get all HTTP requests starting on &lt;code&gt;05/Dec/2010&lt;/code&gt; until the end of the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sed -n &#39;/05\/Dec\/2010/,$ p&#39; access.log | goaccess -a -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using relative dates such as yesterdays or tomorrows day:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sed -n &#39;/&#39;$(date &#39;+%d\/%b\/%Y&#39; -d &#39;1 week ago&#39;)&#39;/,$ p&#39; access.log | goaccess -a -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we want to parse only a certain time-frame from DATE a to DATE b, we can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sed -n &#39;/5\/Nov\/2010/,/5\/Dec\/2010/ p&#39; access.log | goaccess -a -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we want to preserve only certain amount of data and recycle storage, we can keep only a certain number of days. For instance to keep &amp;amp; show the last 5 days:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess access.log --keep-last=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Virtual hosts&lt;/h4&gt; &#xA;&lt;p&gt;Assuming your log contains the virtual host field. For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vhost.io:80 8.8.4.4 - - [02/Mar/2016:08:14:04 -0600] &#34;GET /shop HTTP/1.1&#34; 200 615 &#34;-&#34; &#34;Googlebot-Image/1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you would like to append the virtual host to the request in order to see which virtual host the top urls belong to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;awk &#39;$8=$1$8&#39; access.log | goaccess -a -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To do the same, but also use real-time filtering and parsing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tail -f  access.log | unbuffer -p awk &#39;$8=$1$8&#39; | goaccess -a -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To exclude a list of virtual hosts you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# grep -v &#34;`cat exclude_vhost_list_file`&#34; vhost_access.log | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Files, status codes and bots&lt;/h4&gt; &#xA;&lt;p&gt;To parse specific pages, e.g., page views, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;htm&lt;/code&gt;, &lt;code&gt;php&lt;/code&gt;, etc. within a request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# awk &#39;$7~/\.html|\.htm|\.php/&#39; access.log | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, &lt;code&gt;$7&lt;/code&gt; is the request field for the common and combined log format, (without Virtual Host), if your log includes Virtual Host, then you probably want to use &lt;code&gt;$8&lt;/code&gt; instead. It&#39;s best to check which field you are shooting for, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# tail -10 access.log | awk &#39;{print $8}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to parse a specific status code, e.g., 500 (Internal Server Error):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# awk &#39;$9~/500/&#39; access.log | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or multiple status codes, e.g., all 3xx and 5xx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# tail -f -n +0 access.log | awk &#39;$9~/3[0-9]{2}|5[0-9]{2}/&#39; | goaccess -o out.html -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to get an estimated overview of how many bots (crawlers) are hitting your server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# tail -F -n +0 access.log | grep -i --line-buffered &#39;bot&#39; | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;p&gt;Also, it is worth pointing out that if we want to run GoAccess at lower priority, we can run it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# nice -n 19 goaccess -f access.log -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and if you don&#39;t want to install it on your server, you can still run it from your local machine!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ssh -n root@server &#39;tail -f /var/log/apache2/access.log&#39; | goaccess -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SSH requires &lt;code&gt;-n&lt;/code&gt; so GoAccess can read from stdin. Also, make sure to use SSH keys for authentication as it won&#39;t work if a passphrase is required.&lt;/p&gt; &#xA;&lt;h4&gt;Troubleshooting&lt;/h4&gt; &#xA;&lt;p&gt;We receive many questions and issues that have been answered previously.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Date/time matching problems? Check that your log format and the system locale in which you run GoAccess match. See &lt;a href=&#34;https://github.com/allinurl/goaccess/issues/1571#issuecomment-543186858&#34;&gt;#1571&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Problems with pattern matching? Spaces are often a problem, see for instance &lt;a href=&#34;https://github.com/allinurl/goaccess/issues/136&#34;&gt;#136&lt;/a&gt;, &lt;a href=&#34;https://github.com/allinurl/goaccess/issues/1579&#34;&gt;#1579&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other issues matching log entries: See &lt;a href=&#34;https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3A%22log%2Fdate%2Ftime+format%22&#34;&gt;&amp;gt;200 closed issues regarding log/date/time formats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Problems with log processing? See &lt;a href=&#34;https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3Alog-processing&#34;&gt;&amp;gt;111 issues regarding log processing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Incremental log processing&lt;/h4&gt; &#xA;&lt;p&gt;GoAccess has the ability to process logs incrementally through its internal storage and dump its data to disk. It works in the following way:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A dataset must be persisted first with &lt;code&gt;--persist&lt;/code&gt;, then the same dataset can be loaded with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--restore&lt;/code&gt;. If new data is passed (piped or through a log file), it will append it to the original dataset.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;NOTES&lt;/h5&gt; &#xA;&lt;p&gt;GoAccess keeps track of inodes of all the files processed (assuming files will stay on the same partition), in addition, it extracts a snippet of data from the log along with the last line parsed of each file and the timestamp of the last line parsed. e.g., inode:29627417|line:20012|ts:20171231235059&lt;/p&gt; &#xA;&lt;p&gt;First, it compares if the snippet matches the log being parsed, if it does, it assumes the log hasn&#39;t changed drastically, e.g., hasn&#39;t been truncated. If the inode does not match the current file, it parses all lines. If the current file matches the inode, it then reads the remaining lines and updates the count of lines parsed and the timestamp. As an extra precaution, it won&#39;t parse log lines with a timestamp â‰¤ than the one stored.&lt;/p&gt; &#xA;&lt;p&gt;Piped data works based off the timestamp of the last line read. For instance, it will parse and discard all incoming entries until it finds a timestamp &amp;gt;= than the one stored.&lt;/p&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;// last month access log&#xA;# goaccess access.log.1 --persist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then, load it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// append this month access log, and preserve new data&#xA;# goaccess access.log --restore --persist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To read persisted data only (without parsing new data)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# goaccess --restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any help on GoAccess is welcome. The most helpful way is to try it out and give feedback. Feel free to use the Github issue tracker and pull requests to discuss and submit code changes.&lt;/p&gt; &#xA;&lt;p&gt;You can contribute to our translations by editing the .po files direct on Github or using the visual interface &lt;a href=&#34;https://inlang.com/editor/github.com/allinurl/goaccess&#34;&gt;inlang.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt;</summary>
  </entry>
</feed>