<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-05T01:26:07Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fmyyss/XNU_KERNEL_RESEARCH</title>
    <updated>2024-02-05T01:26:07Z</updated>
    <id>tag:github.com,2024-02-05:/fmyyss/XNU_KERNEL_RESEARCH</id>
    <link href="https://github.com/fmyyss/XNU_KERNEL_RESEARCH" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XNU_KERNEL_RESEARCH&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;CVE-2024-23208&lt;/code&gt;: macOS 14.0 ~ 14.2.1, iOS 17.0 ~ 17.2.1&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dankamongmen/notcurses</title>
    <updated>2024-02-05T01:26:07Z</updated>
    <id>tag:github.com,2024-02-05:/dankamongmen/notcurses</id>
    <link href="https://github.com/dankamongmen/notcurses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;blingful character graphics/TUI library. definitely not curses.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Notcurses: blingful TUIs and character graphics&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;What it is&lt;/strong&gt;: a library facilitating complex TUIs on modern terminal emulators, supporting vivid colors, multimedia, threads, and Unicode to the maximum degree possible. &lt;a href=&#34;https://www.youtube.com/watch?v=dcjkezf1ARY&#34;&gt;Things&lt;/a&gt; can be done with Notcurses that simply can&#39;t be done with NCURSES. It is furthermore fast as shit. &lt;strong&gt;What it is not&lt;/strong&gt;: a source-compatible X/Open Curses implementation, nor a replacement for NCURSES on existing systems.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=dcjkezf1ARY&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/gh-pages/notcurses-logo.png&#34; alt=&#34;setting the standard (hype video)&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;for more information, see &lt;a href=&#34;https://nick-black.com/dankwiki/index.php/Notcurses&#34;&gt;dankwiki&lt;/a&gt; and the &lt;a href=&#34;https://notcurses.com&#34;&gt;man pages&lt;/a&gt;. in addition, there is &lt;a href=&#34;https://notcurses.com/html/&#34;&gt;Doxygen&lt;/a&gt; output. To subscribe to the &lt;a href=&#34;https://groups.google.com/forum/#!forum/notcurses&#34;&gt;mailing list&lt;/a&gt;, send an email to &lt;a href=&#34;mailto:notcurses+subscribe@googlegroups.com&#34;&gt;notcurses+subscribe@googlegroups.com&lt;/a&gt; (the email contents don&#39;t matter). i wrote a coherent &lt;a href=&#34;https://nick-black.com/htp-notcurses.pdf&#34;&gt;guidebook&lt;/a&gt;, which is available for free download (or &lt;a href=&#34;https://amazon.com/dp/B086PNVNC9&#34;&gt;paperback purchase&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;i&#39;ve not yet added many documented examples, but &lt;a href=&#34;https://github.com/dankamongmen/notcurses/tree/master/src/poc&#34;&gt;src/poc/&lt;/a&gt; and &lt;a href=&#34;https://github.com/dankamongmen/notcurses/tree/master/src/pocpp&#34;&gt;src/pocpp/&lt;/a&gt; contain many small C and C++ programs respectively. &lt;code&gt;notcurses-demo&lt;/code&gt; covers most of the functionality of Notcurses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re running Notcurses applications in a Docker, please consult &#34;&lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/#environment-notes&#34;&gt;Environment notes&lt;/a&gt;&#34; below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://repology.org/project/notcurses/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/notcurses.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/-Linux-grey?logo=linux&#34; alt=&#34;Linux&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-FreeBSD-grey?logo=freebsd&#34; alt=&#34;FreeBSD&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Windows-grey?logo=windows&#34; alt=&#34;Windows&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-macOS-grey?logo=macos&#34; alt=&#34;macOS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dankamongmen/notcurses/actions/workflows/ubuntu_test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/dankamongmen/notcurses/actions/workflows/ubuntu_test.yml/badge.svg?branch=master&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dankamongmen/notcurses/actions/workflows/macos_test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/dankamongmen/notcurses/actions/workflows/macos_test.yml/badge.svg?branch=master&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dankamongmen/notcurses/actions/workflows/windows_test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/dankamongmen/notcurses/actions/workflows/windows_test.yml/badge.svg?branch=master&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/notcurses&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/notcurses?label=pypi&#34; alt=&#34;pypi_version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/libnotcurses-sys&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/libnotcurses-sys.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.element.io/#/room/#notcursesdev:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/notcursesdev:matrix.org?label=matrixchat&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/dankamongmen&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Sponsor-red?logo=github&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Notcurses abandons the X/Open Curses API bundled as part of the Single UNIX Specification. For some necessary background, consult Thomas E. Dickey&#39;s superb and authoritative &lt;a href=&#34;https://invisible-island.net/ncurses/ncurses.faq.html#xterm_16MegaColors&#34;&gt;NCURSES FAQ&lt;/a&gt;. As such, Notcurses is not a drop-in Curses replacement.&lt;/p&gt; &#xA;&lt;p&gt;Wherever possible, Notcurses makes use of the Terminfo library shipped with NCURSES, benefiting greatly from its portability and thoroughness.&lt;/p&gt; &#xA;&lt;p&gt;Notcurses opens up advanced functionality for the interactive user on workstations, phones, laptops, and tablets, possibly at the expense of e.g. some industrial and retail terminals. Fundamentally, Curses assumes the minimum and allows you (with effort) to step up, whereas Notcurses assumes the maximum and steps down (by itself) when necessary. The latter approach probably breaks on some older hardware, but the former approach results in new software looking like old hardware.&lt;/p&gt; &#xA;&lt;p&gt;Why use this non-standard library?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread safety, and efficient use in parallel programs, has been a design consideration from the beginning.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A more orderly surface than that codified by X/Open: Exported identifiers are prefixed to avoid common namespace collisions. Where reasonable, &lt;code&gt;static inline&lt;/code&gt; header-only code is used. This facilitates compiler optimizations, and reduces loader time. Notcurses can be built without its multimedia functionality, requiring a significantly lesser set of dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All APIs natively support the Universal Character Set (Unicode). The &lt;code&gt;nccell&lt;/code&gt; API is based around Unicode&#39;s &lt;a href=&#34;https://unicode.org/reports/tr29/&#34;&gt;Extended Grapheme Cluster&lt;/a&gt; concept.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visual features including images, fonts, video, high-contrast text, sprites, and transparent regions. All APIs natively support 24-bit color, quantized down as necessary for the terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Portable support for bitmapped graphics, using Sixel, Kitty, and even the Linux framebuffer console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for unambiguous &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/keyboard-protocol/&#34;&gt;keyboard protocols&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;TUI mode&#34; facilitates high-performance, non-scrolling, full-screen applications. &#34;CLI mode&#34; supports scrolling output for shell utilities, but with the full power of Notcurses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s Apache2-licensed in its entirety, as opposed to the &lt;a href=&#34;https://invisible-island.net/ncurses/ncurses-license.html&#34;&gt;drama in several acts&lt;/a&gt; that is the NCURSES license (the latter is &lt;a href=&#34;https://invisible-island.net/ncurses/ncurses-license.html#issues_freer&#34;&gt;summarized&lt;/a&gt; as &#34;a restatement of MIT-X11&#34;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Much of the above can be had with NCURSES, but they&#39;re not what NCURSES was &lt;em&gt;designed&lt;/em&gt; for. On the other hand, if you&#39;re targeting industrial or critical applications, or wish to benefit from time-tested reliability and portability, you should by all means use that fine library.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Minimum versions generally indicate the oldest version I&#39;ve tested with; it may well be possible to use still older versions. Let me know of any successes!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(build) CMake 3.14.0+ and a C11 compiler&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (OpenImageIO, testing, C++ bindings): A C++17 compiler&lt;/li&gt; &#xA; &lt;li&gt;(build+runtime) From &lt;a href=&#34;https://invisible-island.net/ncurses/announce.html&#34;&gt;NCURSES&lt;/a&gt;: terminfo 6.1+&lt;/li&gt; &#xA; &lt;li&gt;(build+runtime) GNU &lt;a href=&#34;https://www.gnu.org/software/libunistring/&#34;&gt;libunistring&lt;/a&gt; 0.9.10+&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (build+runtime) &lt;a href=&#34;https://www.nico.schottelius.org/software/gpm/&#34;&gt;libgpm&lt;/a&gt; 1.20+&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (build+runtime) From QR-Code-generator: &lt;a href=&#34;https://github.com/nayuki/QR-Code-generator&#34;&gt;libqrcodegen&lt;/a&gt; 1.5.0+&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (build+runtime) From &lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;: libswscale 5.0+, libavformat 57.0+, libavutil 56.0+, libavdevice 57.0+&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (build+runtime) &lt;a href=&#34;https://github.com/OpenImageIO/oiio&#34;&gt;OpenImageIO&lt;/a&gt; 2.15.0+, requires C++&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (testing) &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;Doctest&lt;/a&gt; 2.3.5+&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (documentation) &lt;a href=&#34;https://pandoc.org/index.html&#34;&gt;pandoc&lt;/a&gt; 1.19.2+&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) (python bindings): Python 3.7+, &lt;a href=&#34;https://pypi.org/project/cffi/&#34;&gt;CFFI&lt;/a&gt; 1.13.2+, &lt;a href=&#34;https://pypi.org/project/pypandoc/&#34;&gt;pypandoc&lt;/a&gt; 1.5+&lt;/li&gt; &#xA; &lt;li&gt;(runtime) Linux 2.6+, FreeBSD 11+, DragonFly BSD 5.9+, Windows 10 v1093+, or macOS 11.4+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information on building and installation is available in &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Wrappers&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use a language other than C to work with Notcurses, numerous wrappers are available. Several are included in this repository, while others are external.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Lead(s)&lt;/th&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ada&lt;/td&gt; &#xA;   &lt;td&gt;Jeremy Grosser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JeremyGrosser/notcursesada&#34;&gt;JeremyGrosser/notcursesada&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;Marek Habersack, nick black&lt;/td&gt; &#xA;   &lt;td&gt;internal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;Nelson Fernandez&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kascote/dart_notcurses&#34;&gt;kascote/dart_notcurses&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;Dheepak Krishnamurthy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kdheepak/Notcurses.jl&#34;&gt;kdheepak/Notcurses.jl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;Michael S. Bradley, Jr.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/michaelsbradleyjr/nim-notcurses&#34;&gt;michaelsbradleyjr/nim-notcurses&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;nick black&lt;/td&gt; &#xA;   &lt;td&gt;internal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;igo95862&lt;/td&gt; &#xA;   &lt;td&gt;internal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;José Luis Cruz&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dankamongmen/libnotcurses-sys&#34;&gt;dankamongmen/libnotcurses-sys&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;Jakub Dundalek&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dundalek/notcurses-zig-example&#34;&gt;dundalek/notcurses-zig-example&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Included tools&lt;/h2&gt; &#xA;&lt;p&gt;Nine executables are installed as part of Notcurses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ncls&lt;/code&gt;: an &lt;code&gt;ls&lt;/code&gt; that displays multimedia in the terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ncneofetch&lt;/code&gt;: a &lt;a href=&#34;https://github.com/dylanaraps/neofetch&#34;&gt;neofetch&lt;/a&gt; ripoff&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ncplayer&lt;/code&gt;: renders visual media (images/videos)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nctetris&lt;/code&gt;: a tetris clone&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notcurses-demo&lt;/code&gt;: some demonstration code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notcurses-info&lt;/code&gt;: detect and print terminal capabilities/diagnostics&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notcurses-input&lt;/code&gt;: decode and print keypresses&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notcurses-tester&lt;/code&gt;: unit testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tfman&lt;/code&gt;: a swank manual browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run &lt;code&gt;notcurses-demo&lt;/code&gt; from a checkout, provide the &lt;code&gt;data&lt;/code&gt; directory via the &lt;code&gt;-p&lt;/code&gt; argument. Demos requiring data files will otherwise abort. The base delay used in &lt;code&gt;notcurses-demo&lt;/code&gt; can be changed with &lt;code&gt;-d&lt;/code&gt;, accepting a floating-point multiplier. Values less than 1 will speed up the demo, while values greater than 1 will slow it down.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;notcurses-tester&lt;/code&gt; likewise requires that &lt;code&gt;data&lt;/code&gt;, populated with the necessary data files, be specified with &lt;code&gt;-p&lt;/code&gt;. It can be run by itself, or via &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;code&gt;-DUSE_PANDOC=on&lt;/code&gt; (the default), a full set of man pages and XHTML will be built from &lt;code&gt;doc/man&lt;/code&gt;. The following Markdown documentation is included directly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Per-release &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/NEWS.md&#34;&gt;News&lt;/a&gt; for packagers, developers, and users.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;TERM&lt;/code&gt; environment variable and &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/TERMINALS.md&#34;&gt;various terminal emulators&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Notes on &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/doc/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/doc/HACKING.md&#34;&gt;hacking&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s a semi-complete &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/USAGE.md&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A list of &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/doc/OTHERS.md&#34;&gt;other TUI libraries&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Abbreviated &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/doc/HISTORY.md&#34;&gt;history&lt;/a&gt; and thanks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/doc/CURSES.md&#34;&gt;Differences from&lt;/a&gt; Curses and adapting Curses programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you (understandably) want to avoid the large Pandoc stack, but still enjoy manual pages, I publish a tarball with generated man/XHTML along with each release. Download it, and install the contents as you deem fit.&lt;/p&gt; &#xA;&lt;h2&gt;Environment notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If your &lt;code&gt;TERM&lt;/code&gt; variable is wrong, or that terminfo definition is out-of-date, you&#39;re going to have a very bad time. Use &lt;em&gt;only&lt;/em&gt; &lt;code&gt;TERM&lt;/code&gt; values appropriate for your terminal. If this variable is undefined, or Notcurses can&#39;t load the specified Terminfo entry, it will refuse to start, and you will &lt;a href=&#34;https://xkcd.com/1133/&#34;&gt;not be going to space today&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Notcurses queries the terminal on startup, enabling some advanced features based on the determined terminal (and even version). Basic capabilities, however, are taken from Terminfo. So if you have, say, Kitty, but &lt;code&gt;TERM=vt100&lt;/code&gt;, you&#39;re going to be able to draw RGBA bitmap graphics (despite such things being but a dream for a VT100), but &lt;em&gt;unable&lt;/em&gt; to use the alternate screen (despite it being supported by every Kitty version). So &lt;code&gt;TERM&lt;/code&gt; and an up-to-date Terminfo database remain important.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your &lt;code&gt;LANG&lt;/code&gt; environment variable is set to a UTF8-encoded locale, and that this locale has been generated. This usually means &lt;code&gt;&#34;[language]_[Countrycode].UTF-8&#34;&lt;/code&gt;, i.e. &lt;code&gt;en_US.UTF-8&lt;/code&gt;. The first part (&lt;code&gt;en_US&lt;/code&gt;) ought exist as a directory or symlink in &lt;code&gt;/usr/share/locales&lt;/code&gt;. This usually requires editing &lt;code&gt;/etc/locale.gen&lt;/code&gt; and running &lt;code&gt;locale-gen&lt;/code&gt;. On Debian systems, this can be accomplished with &lt;code&gt;dpkg-reconfigure locales&lt;/code&gt;, and enabling the desired locale. The default locale is stored somewhere like &lt;code&gt;/etc/default/locale&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your terminal has an option about default interpretation of &#34;ambiguous-width characters&#34; (this is actually a technical term from Unicode), ensure it is set to &lt;strong&gt;Wide&lt;/strong&gt;, not narrow (if that doesn&#39;t work, ensure it is set to &lt;strong&gt;Narrow&lt;/strong&gt;, heh).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your terminal supports 3x8bit RGB color via &lt;code&gt;setaf&lt;/code&gt; and &lt;code&gt;setbf&lt;/code&gt; (most modern terminals), but exports neither the &lt;code&gt;RGB&lt;/code&gt; nor &lt;code&gt;Tc&lt;/code&gt; terminfo capability, you can export the &lt;code&gt;COLORTERM&lt;/code&gt; environment variable as &lt;code&gt;truecolor&lt;/code&gt; or &lt;code&gt;24bit&lt;/code&gt;. Note that some terminals accept a 24-bit specification, but map it down to fewer colors. RGB is unconditionally enabled whenever &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/TERMINALS.md&#34;&gt;most modern terminals&lt;/a&gt; are identified.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fonts&lt;/h3&gt; &#xA;&lt;p&gt;Glyph width, and indeed whether a glyph can be displayed at all, is dependent in part on the font configuration. Ideally, your font configuration has a glyph for every Unicode EGC, and each glyph&#39;s width matches up with the POSIX function&#39;s &lt;code&gt;wcswidth()&lt;/code&gt; result for the EGC. If this is not the case, you&#39;ll likely get blanks or � (U+FFFD, REPLACEMENT CHARACTER) for missing characters, and subsequent characters on the line may be misplaced.&lt;/p&gt; &#xA;&lt;p&gt;It is worth knowing that several terminals draw the block characters directly, rather than loading them from a font. This is generally desirable. Quadrants and sextants are not the place to demonstrate your design virtuosity. To inspect your environment&#39;s rendering of drawing characters, run &lt;code&gt;notcurses-info&lt;/code&gt;. The desired output ought look something like this:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/gh-pages/notcurses-info.png&#34; alt=&#34;notcurses-info can be used to check Unicode drawing&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;If things break or seem otherwise lackluster, &lt;strong&gt;please&lt;/strong&gt; consult the &lt;a href=&#34;https://raw.githubusercontent.com/dankamongmen/notcurses/master/#environment-notes&#34;&gt;Environment Notes&lt;/a&gt; section! You &lt;strong&gt;need&lt;/strong&gt; correct &lt;code&gt;TERM&lt;/code&gt; and &lt;code&gt;LANG&lt;/code&gt; definitions, and might want &lt;code&gt;COLORTERM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I use Notcurses in my closed-source program?&lt;/summary&gt; Notcurses is licensed under &#xA; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache2&lt;/a&gt;, a demonstration that I have transcended your petty world of material goods, fiat currencies, and closed sources. Implement Microsoft Bob in it. Charge rubes for it. Put it in your ballistic missiles so that you have a nice LED display of said missile&#39;s speed and projected yield; right before impact, scroll &#34;FUCK YOU&#34; in all the world&#39;s languages, and close it out with a smart palette fade. Carve the compiled objects onto bricks and mail them to Richard Stallman, taunting him through a bullhorn as you do so. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I write a CLI program (scrolling, fits in with the shell, etc.) with Notcurses?&lt;/summary&gt; Yes! Use the &#xA; &lt;code&gt;NCOPTION_CLI_MODE&lt;/code&gt; flag (an alias for several real flags; see &#xA; &lt;a href=&#34;https://notcurses.com/notcurses_init.3.html&#34;&gt;&lt;code&gt;notcurses_init(1)&lt;/code&gt;&lt;/a&gt; for more information). You still must explicitly render. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I have Notcurses without this huge multimedia stack?&lt;/summary&gt; Again yes! Build with &#xA; &lt;code&gt;-DUSE_MULTIMEDIA=none&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I build this individual Notcurses program without aforementioned multimedia stack?&lt;/summary&gt; Almost unbelievably, yes! Use &#xA; &lt;code&gt;notcurses_core_init()&lt;/code&gt; or &#xA; &lt;code&gt;ncdirect_core_init()&lt;/code&gt; in place of &#xA; &lt;code&gt;notcurses_init()&lt;/code&gt;/ &#xA; &lt;code&gt;ncdirect_init()&lt;/code&gt;, and link with &#xA; &lt;code&gt;-lnotcurses-core&lt;/code&gt;. Your application will likely start a few milliseconds faster; more importantly, it will link against minimal Notcurses installations. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;We&#39;re paying by the electron, and have no C++ compiler. Can we still enjoy Notcurses goodness?&lt;/summary&gt; Some of it! You won&#39;t be able to build several executables, nor the NCPP C++ wrappers, nor can you build with the OpenImageIO multimedia backend (OIIO ships C++ headers). You&#39;ll be able to build the main library, though, as well as &#xA; &lt;code&gt;notcurses-demo&lt;/code&gt; (and maybe a few other programs). Use &#xA; &lt;code&gt;-DUSE_CXX=off&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Do I want ffmpeg or OpenImageIO?&lt;/summary&gt; While OpenImageIO is a superb library for dealing with single-frame images, its video support is less than perfect (blame me; I&#39;ve been promising Larry I&#39;d rewrite it for several months), and in any case implemented atop...ffmpeg. ffmpeg is the preferred multimedia backend. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Does it work with hardware terminals?&lt;/summary&gt; With the correct &#xA; &lt;code&gt;TERM&lt;/code&gt; value, many hardware terminals are supported. In general, if the terminfo database entry indicates mandatory delays, Notcurses will not currently support that terminal properly. It&#39;s known that Notcurses can drive the VT320 and VT340, including Sixel graphics on the latter. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What happens if I try blitting bitmap graphics on a terminal which doesn&#39;t support them?&lt;/summary&gt; Notcurses will not make use of bitmap protocols unless the terminal positively indicates support for them, even if &#xA; &lt;code&gt;NCBLIT_PIXEL&lt;/code&gt; has been requested. Likewise, sextants (&#xA; &lt;code&gt;NCBLIT_3x2&lt;/code&gt;) won&#39;t be used without Unicode 13 support, etc. &#xA; &lt;code&gt;ncvisual_blit()&lt;/code&gt; will use the best blitter available, unless &#xA; &lt;code&gt;NCVISUAL_OPTION_NODEGRADE&lt;/code&gt; is provided (in which case it will fail). &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Notcurses looks like absolute crap in &lt;code&gt;screen&lt;/code&gt;.&lt;/summary&gt; &#xA; &lt;code&gt;screen&lt;/code&gt; doesn&#39;t support RGB colors (at least as of 4.08.00); if you have &#xA; &lt;code&gt;COLORTERM&lt;/code&gt; defined, you&#39;ll have a bad time. If you have a &#xA; &lt;code&gt;screen&lt;/code&gt; that was compiled with &#xA; &lt;code&gt;--enable-colors256&lt;/code&gt;, try exporting &#xA; &lt;code&gt;TERM=screen-256color&lt;/code&gt; as opposed to &#xA; &lt;code&gt;TERM=screen&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Notcurses looks like absolute crap in &lt;code&gt;mosh&lt;/code&gt;.&lt;/summary&gt; Yeah it sure does. I&#39;m not yet sure what&#39;s up. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Notcurses looks like absolute crap in Windows Terminal.&lt;/summary&gt; Go to &#xA; &lt;a href=&#34;ms-settings:regionlanguage&#34;&gt;Language Setting&lt;/a&gt;, click &#34;Administrative language settings&#34;, click &#34;Change system locale&#34;, and check the &#34;Beta: Use Unicode UTF-8 for worldwide language support&#34; option. Restart the computer. That ought help a little bit. Try playing with fonts—Cascadia Code and Cascadia Mono both seem to work well (quadrants and Braille both work), whereas Consolas and Courier New both have definite problems. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I&#39;m getting strange and/or duplicate inputs in Kitty/foot.&lt;/summary&gt; Notcurses supports Kitty&#39;s powerful &#xA; &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/keyboard-protocol/&#34;&gt;keyboard protocol&lt;/a&gt;, which includes things like key release events and modifier keypresses by themselves. This means, among other things, that a program in these terminals will usually immediately get an &#xA; &lt;code&gt;NC_ENTER&lt;/code&gt; &#xA; &lt;code&gt;NCTYPE_RELEASE&lt;/code&gt; event, and each keypress will typically result in at least two inputs. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why didn&#39;t you just render everything to bitmaps?&lt;/summary&gt; That&#39;s not a TUI; it&#39;s a slow and inflexible GUI. Many terminal emulators don&#39;t support bitmaps. They doesn&#39;t work well with mouse selection. Sixels have a limited color palette. With that said, both Sixel and the Kitty bitmap protocol are well-supported. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;My multithreaded program doesn&#39;t see &lt;code&gt;NCKEY_RESIZE&lt;/code&gt; until I press some other key.&lt;/summary&gt; You&#39;ve almost certainly failed to mask &#xA; &lt;code&gt;SIGWINCH&lt;/code&gt; in some thread, and that thread is receiving the signal instead of the thread which called &#xA; &lt;code&gt;notcurses_getc_blocking()&lt;/code&gt;. As a result, the &#xA; &lt;code&gt;poll()&lt;/code&gt; is not interrupted. Call &#xA; &lt;code&gt;pthread_sigmask()&lt;/code&gt; before spawning any threads. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using the C++ wrapper, how can I ensure that the &lt;code&gt;NotCurses&lt;/code&gt; destructor is run when I return from &lt;code&gt;main()&lt;/code&gt;?&lt;/summary&gt; As noted in the &#xA; &lt;a href=&#34;https://isocpp.org/wiki/faq/dtors#artificial-block-to-control-lifetimes&#34;&gt; C++ FAQ&lt;/a&gt;, wrap it in an artificial scope (this assumes your &#xA; &lt;code&gt;NotCurses&lt;/code&gt; is scoped to &#xA; &lt;code&gt;main()&lt;/code&gt;). &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How do I hide a plane I want to make visible later?&lt;/summary&gt; In order of least to most performant: move it offscreen using &#xA; &lt;code&gt;ncplane_move_yx()&lt;/code&gt;, move it underneath an opaque plane with &#xA; &lt;code&gt;ncplane_move_below()&lt;/code&gt;, or move it off-pile with &#xA; &lt;code&gt;ncplane_reparent()&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why isn&#39;t there an &lt;code&gt;ncplane_box_yx()&lt;/code&gt;? Do you hate orthogonality, you dullard?&lt;/summary&gt; &#xA; &lt;code&gt;ncplane_box()&lt;/code&gt; and friends already have far too many arguments, you monster. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why doesn&#39;t Notcurses support 10- or 16-bit color?&lt;/summary&gt; Notcurses supports 24 bits of color, spread across three eight-bit channels. You presumably mean 10-bit-per-channel color. I needed those six bits for other things. When terminals support it, Notcurses might support it. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;The name is dumb.&lt;/summary&gt; That&#39;s not a question? &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I&#39;m not finding qrcodegen on BSD, despite having installed &lt;code&gt;graphics/qr-code-generator&lt;/code&gt;.&lt;/summary&gt; Try &#xA; &lt;code&gt;cmake -DCMAKE_REQUIRED_INCLUDES=/usr/local/include&lt;/code&gt;. This is passed by &#xA; &lt;code&gt;bsd.port.mk&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Do you support &lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl&lt;/a&gt;?&lt;/summary&gt; I try to! You&#39;ll need at least 1.20. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I only seem to blit in ASCII, and/or can&#39;t emit Unicode beyond ASCII in general.&lt;/summary&gt; Your &#xA; &lt;code&gt;LANG&lt;/code&gt; environment variable is underdefined or incorrectly defined, or the necessary locale is not present on your machine (it is also possible that you explicitly supplied &#xA; &lt;code&gt;NCOPTION_INHIBIT_SETLOCALE&lt;/code&gt;, but never called &#xA; &lt;code&gt;setlocale(3)&lt;/code&gt;, in which case don&#39;t do that). &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I pretty much always need an &lt;code&gt;ncplane&lt;/code&gt; when using a &lt;code&gt;nccell&lt;/code&gt;. Why doesn&#39;t the latter hold a pointer to the former? &lt;/summary&gt; Besides the massive redundancy this would entail, &#xA; &lt;code&gt;nccell&lt;/code&gt; needs to remain as small as possible, and you almost always have the &#xA; &lt;code&gt;ncplane&lt;/code&gt; handy if you&#39;ve got a reference to a valid &#xA; &lt;code&gt;nccell&lt;/code&gt; anyway. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I ran my Notcurses program under &lt;code&gt;valgrind&lt;/code&gt;/ASAN, and it shows memory leaks from &lt;code&gt;libtinfo.so&lt;/code&gt;, what&#39;s up with that?&lt;/summary&gt; Yeah, the NCURSES Terminfo leaks memory unless compiled a special, non-standard way (see the NCURSES FAQ). It shouldn&#39;t be a substantial amount; you&#39;re advised not to worry overmuch about it. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I ran &lt;code&gt;notcurses-demo&lt;/code&gt;, but my table numbers don&#39;t match the Notcurses banner numbers, you charlatan.&lt;/summary&gt; &#xA; &lt;code&gt;notcurses-demo&lt;/code&gt; renders several frames beyond the actual demos. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;When my program exits, I don&#39;t have a cursor, or text is invisible, or colors are weird, &lt;i&gt;ad nauseam&lt;/i&gt;.&lt;/summary&gt; Ensure you&#39;re calling &#xA; &lt;code&gt;notcurses_stop()&lt;/code&gt;/&#xA; &lt;code&gt;ncdirect_stop()&lt;/code&gt; on all exit paths, including fatal signals (note that, by default, Notcurses installs handlers for most fatal signals to do exactly this). &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How can I use Direct Mode in conjunction with libreadline?&lt;/summary&gt; You can&#39;t anymore (you could up until 2.4.1, but the new input system is fundamentally incompatible with it). &#xA; &lt;code&gt;ncdirect_readline()&lt;/code&gt; still exists, though, and now actually works even without libreadline, though it is of course not exactly libreadline. In any case, you&#39;d probably be better off using CLI mode with a &#xA; &lt;code&gt;ncreader&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;So is Direct Mode deprecated or what?&lt;/summary&gt; It is not currently deprecated, and definitely receives bugfixes. You are probably better served using CLI mode (see above), which came about somewhat late in Notcurses development (the 2.3.x series), but is superior to Direct Mode in pretty much every way. The only reason to use Direct Mode is if you&#39;re going to have other programs junking up your display. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Direct Mode sounds fast! Since it&#39;s, like, direct.&lt;/summary&gt; Direct mode is &#xA; &lt;i&gt;substantially slower&lt;/i&gt; than rendered mode. Rendered mode assumes it knows what&#39;s on the screen, and uses this information to generate optimized sequences of escapes and glyphs. Direct mode writes everything it&#39;s told to write. It is furthermore far less capable—all widgets etc. are available only to rendered mode, and will definitely not be extended to Direct Mode. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Will there ever be Java wrappers?&lt;/summary&gt; I should hope not. If you want a Java solution, try @klamonte&#39;s &#xA; &lt;a href=&#34;https://jexer.sourceforge.io/&#34;&gt;Jexer&lt;/a&gt;. Autumn&#39;s a good woman, and thorough. We seem to have neatly partitioned the language space. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Given that the glyph channel is initialized as transparent for a plane, shouldn&#39;t the foreground and background be initialized as transparent, also?&lt;/summary&gt; Probably (they are instead by default initialized to opaque). This would change some of the most longstanding behavior of Notcurses, though, so it isn&#39;t happening. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I get linker errors when statically linking.&lt;/summary&gt; Are you linking all necessary libraries? Use &#xA; &lt;code&gt;pkg-config --static --libs notcurses&lt;/code&gt; (or &#xA; &lt;code&gt;--libs notcurses-core&lt;/code&gt;) to discover them. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Notcurses exits immediately in MSYS2/Cygwin.&lt;/summary&gt; Notcurses requires the &#xA; &lt;a href=&#34;https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/&#34;&gt;Windows ConPTY&lt;/a&gt; layer. This is available in Cygwin by default since 3.2.0, but is disabled by default in MSYS. Launch &#xA; &lt;code&gt;mintty&lt;/code&gt; with &#xA; &lt;code&gt;-P on&lt;/code&gt; arguments, or export &#xA; &lt;code&gt;MSYS=enable_pcon&lt;/code&gt; before launching it. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I avoid manually exporting &lt;code&gt;COLORTERM=24bit&lt;/code&gt; everywhere?&lt;/summary&gt; Sure. Add &#xA; &lt;code&gt;SendEnv COLORTERM&lt;/code&gt; to &#xA; &lt;code&gt;.ssh/config&lt;/code&gt;, and &#xA; &lt;code&gt;AcceptEnv COLORTERM&lt;/code&gt; to &#xA; &lt;code&gt;sshd_config&lt;/code&gt; on the remote server. Yes, this will probably require root on the remote server. Don&#39;t blame me, man; I didn&#39;t do it. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How about &lt;i&gt;arbitrary image manipulation here&lt;/i&gt; functionality?&lt;/summary&gt; I&#39;m not going to beat ImageMagick et al. on image manipulation, but you can load an &#xA; &lt;code&gt;ncvisual&lt;/code&gt; from RGBA memory using &#xA; &lt;code&gt;ncvisual_from_rgba()&lt;/code&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;My program locks up during initialization. &lt;/summary&gt; Notcurses interrogates the terminal. If the terminal doesn&#39;t reply to standard interrogations, file a Notcurses bug, send upstream a patch, or use a different terminal. No known terminal emulators exhibit this behavior. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How can I draw a large plane, and only make a portion of it visible?&lt;/summary&gt; The simplest way is probably to create a plane of the same dimensions immediately above the plane, and keep a region of it transparent, and the rest opaque. If you want the visible area to stay in the same place on the display, but the portion being seen to change, try making a plane twice as large in each dimension as the original plane. Make the desired area transparent, and the rest opaque. Now move the original plane behind this plane so that the desired area lines up with the “hole”. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why no &lt;code&gt;NCSTYLE_REVERSE&lt;/code&gt;?&lt;/summary&gt; It would consume a precious bit. You can use &#xA; &lt;code&gt;ncchannels_reverse()&lt;/code&gt; to correctly invert fore- and background colors. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How do I mix Rendered and Direct mode?&lt;/summary&gt; You really don&#39;t want to. You can stream a subprocess to a plane with the &#xA; &lt;code&gt;ncsubproc&lt;/code&gt; widget. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How can I clear the screen on startup in Rendered mode when not using the alternate screen?&lt;/summary&gt; Call &#xA; &lt;code&gt;notcurses_refresh()&lt;/code&gt; after &#xA; &lt;code&gt;notcurses_init()&lt;/code&gt; returns successfully. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why do the stats show more Linux framebuffer bitmap bytes written than total bytes written to the terminal? And why don&#39;t Linux console graphics work when I ssh?&lt;/summary&gt; Linux framebuffer graphics aren&#39;t implemented via terminal writes, but rather writes directly into a memory map. This memory map isn&#39;t available on remote machines, and these writes aren&#39;t tracked by the standard statistics. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What is the possessive form of Notcurses?&lt;/summary&gt; &#xA; &lt;b&gt;Notcurses&#39;.&lt;/b&gt; I cite &#xA; &lt;a href=&#34;https://en.wikipedia.org/wiki/Garner%27s_Modern_English_Usage&#34;&gt; Garner&#39;s Modern English Usage&lt;/a&gt; in its third edition: &#34;&#xA; &lt;b&gt;POSSESSIVES. A. Singular Possessives.&lt;/b&gt;…Biblical and Classical names that end with a /zəs/ or /eez/ sound take only the apostrophe.&#34; Some ask: is Notcurses then Biblical, or is it Classical? Truly, it is both. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I just want to display a bitmap on my terminal. Your library is complex and stupid. You are simple and stupid.&lt;/summary&gt; If you&#39;re willing to call a binary, use &#xA; &lt;tt&gt;ncplayer&lt;/tt&gt; to put an image, with desired scaling, anywhere on the screen and call it a day. Otherwise, call &#xA; &lt;tt&gt;notcurses_init()&lt;/tt&gt;, &#xA; &lt;tt&gt;ncvisual_from_file()&lt;/tt&gt;, &#xA; &lt;tt&gt;ncvisual_blit()&lt;/tt&gt;, &#xA; &lt;tt&gt;notcurses_render()&lt;/tt&gt;, and &#xA; &lt;tt&gt;notcurses_stop()&lt;/tt&gt;. It&#39;s not too tough. And thanks—your thoughtful comments and appreciative tone are why I work on Free Software. &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terminal-wg.pages.freedesktop.org/bidi/&#34;&gt;BiDi in Terminal Emulators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invisible-island.net/xterm/xterm.faq.html&#34;&gt;The Xterm FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://invisible-island.net/xterm/ctlseqs/ctlseqs.pdf&#34;&gt;XTerm Control Sequences&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invisible-island.net/ncurses/ncurses.faq.html&#34;&gt;The NCURSES FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/publications/standards/Ecma-035.htm&#34;&gt;ECMA-35 Character Code Structure and Extension Techniques&lt;/a&gt; (ISO/IEC 2022)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/publications/standards/Ecma-043.htm&#34;&gt;ECMA-43 8-bit Coded Character Set Structure and Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/publications/standards/Ecma-048.htm&#34;&gt;ECMA-48 Control Functions for Coded Character Sets&lt;/a&gt; (ISO/IEC 6429)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unicode.org/emoji/charts/full-emoji-list.html&#34;&gt;Unicode 14.0 Full Emoji List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.unicode.org/reports/tr29&#34;&gt;Unicode Standard Annex #29 Text Segmentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unicode.org/reports/tr15/&#34;&gt;Unicode Standard Annex #15 Normalization Forms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mintty/mintty/wiki/Tips&#34;&gt;mintty tips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.linusakesson.net/programming/tty/&#34;&gt;The TTY demystified&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/&#34;&gt;Dark Corners of Unicode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt&#34;&gt;UTF-8 Decoder Capability and Stress Test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://meowni.ca/posts/emoji-emoji-emoji/&#34;&gt;Emoji: how do you get from U+1F355 to 🍕?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://chanae.walon.org/pub/ttf/ttf_glyphs.htm&#34;&gt;Glyph Hell: An introduction to glyphs, as used and defined in the FreeType engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gankra.github.io/blah/text-hates-you/&#34;&gt;Text Rendering Hates You&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page&#34;&gt;Use the UTF-8 code page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;My wiki&#39;s &lt;a href=&#34;https://nick-black.com/dankwiki/index.php?title=Sixel&#34;&gt;Sixel page&lt;/a&gt; and Kitty&#39;s &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/protocol-extensions.html&#34;&gt;extensions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Linux man pages: &lt;a href=&#34;http://man7.org/linux/man-pages/man4/console_codes.4.html&#34;&gt;console_codes(4)&lt;/a&gt;, &lt;a href=&#34;http://man7.org/linux/man-pages/man3/termios.3.html&#34;&gt;termios(3)&lt;/a&gt;, &lt;a href=&#34;http://man7.org/linux/man-pages/man2/ioctl_tty.2.html&#34;&gt;ioctl_tty(2)&lt;/a&gt;, &lt;a href=&#34;http://man7.org/linux/man-pages/man2/ioctl_console.2.html&#34;&gt;ioctl_console(2)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Microsoft Windows &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/console/console-reference&#34;&gt;Console Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NCURSES man pages: &lt;a href=&#34;http://man7.org/linux/man-pages/man5/terminfo.5.html&#34;&gt;terminfo(5)&lt;/a&gt;, &lt;a href=&#34;http://man7.org/linux/man-pages/man5/user_caps.5.html&#34;&gt;user_caps(5)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“Our fine arts were developed, their types and uses were established, in times very different from the present, by men whose power of action upon things was insignificant in comparison with ours. But the amazing growth of our techniques, the adaptability and precision they have attained, the ideas and habits they are creating, make it a certainty that &lt;em&gt;profound changes are impending in the ancient craft of the Beautiful&lt;/em&gt;.” —Paul Valéry&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>karlstav/cava</title>
    <updated>2024-02-05T01:26:07Z</updated>
    <id>tag:github.com,2024-02-05:/karlstav/cava</id>
    <link href="https://github.com/karlstav/cava" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform Audio Visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CAVA &lt;a href=&#34;https://github.com/karlstav/cava/actions&#34;&gt;&lt;img src=&#34;https://github.com/karlstav/cava/workflows/build-and-test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ross-platform &lt;strong&gt;A&lt;/strong&gt;udio &lt;strong&gt;V&lt;/strong&gt;isu&lt;strong&gt;a&lt;/strong&gt;lizer&lt;/p&gt; &#xA;&lt;p&gt;by &lt;a href=&#34;mailto:karl@stavestrand.no&#34;&gt;Karl Stavestrand&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.karlstav.cava&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/karlstav/cava/raw/master/example_files/cava.gif&#34; alt=&#34;spectrum&#34; title=&#34;spectrum&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/9PSp8VA6yjU&#34;&gt;Demo video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#what-it-is&#34;&gt;What it is&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#installing&#34;&gt;Installing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#from-source&#34;&gt;From Source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#package-managers&#34;&gt;Package managers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#capturing-audio&#34;&gt;Capturing audio&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#pulseaudio&#34;&gt;Pulseaudio&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#pipewire&#34;&gt;Pipewire&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#alsa&#34;&gt;ALSA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#mpd&#34;&gt;MPD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#sndio&#34;&gt;Sndio&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#oss&#34;&gt;OSS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#jack&#34;&gt;JACK&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#squeezelite&#34;&gt;squeezelite&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#macos-1&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#running-via-ssh&#34;&gt;Running via ssh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#controls&#34;&gt;Controls&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#using-cava-in-other-applications&#34;&gt;Using cava in other applications&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#cavacore-library&#34;&gt;cavacore&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#raw-output&#34;&gt;Raw Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What it is&lt;/h2&gt; &#xA;&lt;p&gt;Cava is a bar spectrum audio visualizer for terminal (ncurses) or desktop (SDL).&lt;/p&gt; &#xA;&lt;p&gt;works on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This program is not intended for scientific use. It&#39;s written to look responsive and aesthetic when used to visualize music.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;h4&gt;Installing Build Requirements&lt;/h4&gt; &#xA;&lt;p&gt;Required components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.fftw.org/&#34;&gt;FFTW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libtool&lt;/li&gt; &#xA; &lt;li&gt;automake&lt;/li&gt; &#xA; &lt;li&gt;autoconf-archive (needed for setting up OpenGL)&lt;/li&gt; &#xA; &lt;li&gt;pkgconf&lt;/li&gt; &#xA; &lt;li&gt;build-essentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ndevilla/iniparser&#34;&gt;iniparser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recomended components:&lt;/p&gt; &#xA;&lt;p&gt;The development lib of one of these audio frameworks, depending on your distro:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ALSA&lt;/li&gt; &#xA; &lt;li&gt;Pulseaudio&lt;/li&gt; &#xA; &lt;li&gt;Pipewire&lt;/li&gt; &#xA; &lt;li&gt;Portaudio&lt;/li&gt; &#xA; &lt;li&gt;Sndio&lt;/li&gt; &#xA; &lt;li&gt;JACK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SDL2 dev files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/ncurses/&#34;&gt;ncursesw dev files&lt;/a&gt; (bundled in ncurses in arch)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only FFTW, iniparser and the build tools are actually required for CAVA to compile, but this will only give you the ability to read from fifo files. To capture audio directlty from your system pipewire, pulseaudio, alsa, sndio, jack or portaudio dev files are required (depending on what audio system you are using).&lt;/p&gt; &#xA;&lt;p&gt;Ncurses can be used as an alternative output method if you have issues with the default one. But it is not required.&lt;/p&gt; &#xA;&lt;p&gt;All the requirements can be installed easily in all major distros:&lt;/p&gt; &#xA;&lt;p&gt;FreeBSD&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install autoconf autoconf-archive automake fftw3 iniparser jackit libglvnd libtool pkgconf psftools sdl2 sndio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, run these commands on FreeBSD before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CFLAGS=&#34;-I/usr/local/include&#34;&#xA;export LDFLAGS=&#34;-L/usr/local/lib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debian/Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install build-essential libfftw3-dev libasound2-dev libncursesw5-dev libpulse-dev libtool automake autoconf-archive libiniparser-dev libsdl2-2.0-0 libsdl2-dev libpipewire-0.3-dev libjack-jackd2-dev pkgconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ArchLinux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S base-devel fftw ncurses alsa-lib iniparser pulseaudio autoconf-archive pkgconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;openSUSE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper install alsa-devel ncurses-devel fftw3-devel libpulse-devel libtool autoconf-archive pkgconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install alsa-lib-devel ncurses-devel fftw3-devel pulseaudio-libs-devel libtool autoconf-archive iniparser-devel pkgconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macOS:&lt;/p&gt; &#xA;&lt;p&gt;First install homebrew if you have&#39;t already:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install prerequisites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install fftw ncurses libtool automake autoconf-archive pkgconf portaudio iniparser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The installation location for Homebrew packages is different between Intel Macs and Apple Silicon Macs. As such, the commands will be a little bit different. You can find out which type you have &lt;a href=&#34;https://support.apple.com/en-us/HT211814#:~:text=To%20open%20About%20This%20Mac,as%20an%20Intel%2Dbased%20Mac.&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For both machines, run these commands to fix macOS not finding libtool and ncursesw:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export LIBTOOL=`which glibtool`&#xA;export LIBTOOLIZE=`which glibtoolize`&#xA;ln -s `which glibtoolize` /usr/local/bin/libtoolize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On an Intel Mac, run the following command as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s /usr/lib/libncurses.dylib /usr/local/lib/libncursesw.dylib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On an Apple Silicon Mac, run this command instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s /opt/homebrew/lib/lib/libncursesw.6.dylib /usr/local/lib/libncursesw.dylib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the file name may be a little bit different depending on the versions, but the directory should be the same.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, run these commands on Apple Silicon Macs so that ./configure can find the Homebrew packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export LDFLAGS=&#34;-L/opt/homebrew/lib&#34;&#xA;export CPPFLAGS=&#34;-I/opt/homebrew/include&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Intel Mac instructions tested on macOS Big Sur.&lt;/p&gt; &#xA;&lt;p&gt;Apple Silicon instructions tested on macOS Ventura.&lt;/p&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;p&gt;see separate readme in &lt;code&gt;cava_win&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;First of all clone this repo and cd in to it, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./autogen.sh&#xA;./configure&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a recommended component installed, but do not wish to use it (perhaps if building a binary on one machine to be used on another), then the corresponding feature can be disabled during configuration (see configure --help for details).&lt;/p&gt; &#xA;&lt;p&gt;For windows there is a VS solution file in the &lt;code&gt;cava_win&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Installing&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;code&gt;cava&lt;/code&gt; to default &lt;code&gt;/usr/local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can change &lt;code&gt;PREFIX&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;p&gt;./configure --prefix=PREFIX&lt;/p&gt; &#xA;&lt;h4&gt;Uninstalling&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Package managers&lt;/h3&gt; &#xA;&lt;p&gt;All distro specific instalation sources might be out of date. Please check version before reporting any issues here.&lt;/p&gt; &#xA;&lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;p&gt;Tumbleweed users have cava in their repo. They can just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leap users need to add the multimedia:apps repository first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper ar -f obs://multimedia:apps/openSUSE_Leap_42.2 multimedia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use another version just replace &lt;em&gt;openSUSE_Leap_42.2&lt;/em&gt; with &lt;em&gt;openSUSE_13.2&lt;/em&gt;, adjust it to your version.&lt;/p&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;p&gt;Cava is available in Fedora 26 and later. You can install Cava by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;p&gt;Cava is in &lt;a href=&#34;https://aur.archlinux.org/packages/cava/&#34;&gt;AUR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacaur -S cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ubuntu/Debian&lt;/h4&gt; &#xA;&lt;h5&gt;Ubuntu 20.10 or more recent / Debian (unstable)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Older Ubuntu&lt;/h5&gt; &#xA;&lt;p&gt;Harshal Sheth has added CAVA to his PPA, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;add-apt-repository ppa:hsheth2/ppa&#xA;apt update&#xA;apt install cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;cava is in homebrew.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Capturing audio&lt;/h2&gt; &#xA;&lt;h3&gt;Pulseaudio&lt;/h3&gt; &#xA;&lt;p&gt;Just make sure you have installed pulseaudio dev files and that cava has been built with pulseaudio support (it should be automatically if the dev files are found).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re lucky all you have to do is to run cava.&lt;/p&gt; &#xA;&lt;p&gt;If nothing happens you might have to use a different source than the default. The default might also be your microphone. Look at the &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;config&lt;/a&gt; file for help.&lt;/p&gt; &#xA;&lt;h3&gt;Pipewire&lt;/h3&gt; &#xA;&lt;p&gt;Set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = pipewire&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default source is &lt;code&gt;auto&lt;/code&gt; and will most likely be your currently selected output. If you run wireplumber you can use &lt;code&gt;wpctl&lt;/code&gt; to get the &lt;code&gt;object.path&lt;/code&gt; or &lt;code&gt;object.serial&lt;/code&gt; of the desired device to visualize.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source = alsa:pcm:3:front:3:playback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ALSA&lt;/h3&gt; &#xA;&lt;p&gt;Set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = alsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;config&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;ALSA can be difficult because there is no native way to grab audio from an output. If you want to capture audio straight fom the output (not just mic or line-in), you must create an ALSA loopback interface, then output the audio simultaneously to both the loopback and your normal interface.&lt;/p&gt; &#xA;&lt;p&gt;To create a loopback interface simply run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo modprobe snd_aloop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hopefully your &lt;code&gt;aplay -l&lt;/code&gt; should now contain a loopback interface.&lt;/p&gt; &#xA;&lt;p&gt;To make it persistent across boot add the line &lt;code&gt;snd-aloop&lt;/code&gt; to &#34;/etc/modules&#34;. To keep it from being loaded as the first soundcard add the line &lt;code&gt;options snd-aloop index=1&lt;/code&gt; to &#34;/etc/modprobe.d/alsa-base.conf&#34;, this will load it at &#39;1&#39;. You can replace &#39;1&#39; with whatever makes most sense in your audio setup.&lt;/p&gt; &#xA;&lt;p&gt;Playing the audio through your Loopback interface makes it possible for cava to capture it, but there will be no sound in your speakers. In order to play audio on the loopback interface and your actual interface you must make use of the ALSA multi channel.&lt;/p&gt; &#xA;&lt;p&gt;Look at the included example file &lt;code&gt;example_files/etc/asound.conf&lt;/code&gt; on how to use the multi channel. I was able to make this work with a HDA Intel PCH sound card, but I had no luck with the an USB DAC.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the ALSA method &lt;a href=&#34;http://stackoverflow.com/questions/12984089/capture-playback-on-play-only-sound-card-with-alsa&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are having problems with the alsa method on Rasberry PI, try enabling &lt;code&gt;mmap&lt;/code&gt; by adding the following line to &lt;code&gt;/boot/config.txt&lt;/code&gt; and reboot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dtoverlay=i2s-mmap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;dmix&lt;/h4&gt; &#xA;&lt;p&gt;@reluekiss, was able to make cava work with dmix. Check out the example config in &lt;code&gt;example_files/etc/asound_dmix.conf&lt;/code&gt; and issue &lt;a href=&#34;https://github.com/karlstav/cava/issues/534&#34;&gt;534&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;mpd&lt;/h3&gt; &#xA;&lt;p&gt;Add these lines in mpd:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;audio_output {&#xA;    type                    &#34;fifo&#34;&#xA;    name                    &#34;my_fifo&#34;&#xA;    path                    &#34;/tmp/mpd.fifo&#34;&#xA;    format                  &#34;44100:16:2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uncomment and change input method to &lt;code&gt;fifo&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;config&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The path of the fifo can be specified with the &lt;code&gt;source&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;I had some trouble with sync (the visualizer was ahead of the sound). Reducing the ALSA buffer in mpd fixed it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;audio_output {&#xA;        type            &#34;alsa&#34;&#xA;        name            &#34;My ALSA&#34;&#xA;        buffer_time     &#34;50000&#34;   # (50ms); default is 500000 microseconds (0.5s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sndio&lt;/h3&gt; &#xA;&lt;p&gt;Set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = sndio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sndio is the audio framework used on OpenBSD, but it&#39;s also available on FreeBSD, NetBSD and Linux. So far this is only tested on FreeBSD, but it&#39;s probably very similar on other operating systems. The following example demonstrates how to setup CAVA for sndio on FreeBSD (please consult the &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#oss&#34;&gt;OSS&lt;/a&gt; section for a deeper explanation of the various &lt;code&gt;pcmX&lt;/code&gt; sound devices and the corresponding &lt;code&gt;/dev/dspX&lt;/code&gt; audio devices in this example).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /dev/sndstat&#xA;Installed devices:&#xA;pcm0: &amp;lt;Realtek ALC1220 (Rear Analog)&amp;gt; (play/rec) default&#xA;pcm1: &amp;lt;Realtek ALC1220 (Front Analog Mic)&amp;gt; (rec)&#xA;pcm2: &amp;lt;USB audio&amp;gt; (play/rec)&#xA;No devices installed from userspace.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sndio operates on device descriptors. In general for every &lt;code&gt;/dev/dspX&lt;/code&gt; audio device there is a corresponding &lt;code&gt;rsnd/X&lt;/code&gt; sndio raw device descriptor. In this example there are &lt;code&gt;rsnd/0&lt;/code&gt;, &lt;code&gt;rsnd/1&lt;/code&gt; and &lt;code&gt;rsnd/2&lt;/code&gt; (they are not listed in &lt;code&gt;/dev&lt;/code&gt;, sndio uses these descriptors to access the corresponding audio devices internally). Sndio also handles the implicit &lt;code&gt;default&lt;/code&gt; device descriptor, which acts like a symlink to the raw device descriptor corresponding to the default audio device &lt;code&gt;/dev/dsp&lt;/code&gt;. In this example it acts like a symlink to &lt;code&gt;rsnd/0&lt;/code&gt; because the default audio device &lt;code&gt;/dev/dsp&lt;/code&gt; symlinks to &lt;code&gt;/dev/dsp0&lt;/code&gt;. Sndio also evaluates the environment variables &lt;code&gt;AUDIODEVICE&lt;/code&gt; and &lt;code&gt;AUDIORECDEVICE&lt;/code&gt;. If one of these is set (&lt;code&gt;AUDIORECDEVICE&lt;/code&gt; overrides &lt;code&gt;AUDIODEVICE&lt;/code&gt; if both are set) and a sndio-aware program tries to open the &lt;code&gt;default&lt;/code&gt; device descriptor or an unspecified device descriptor, then the program will use the device descriptor specified in the environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Now in order to visualize the mic input in CAVA, the &lt;code&gt;source&lt;/code&gt; value in the configuration file must be set to the corresponding audio descriptor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source = default    # default; symlink to rsnd/0 in this example; AUDIORECDEVICE and AUDIODEVICE evaluation&#xA;source =            # unspecified device descriptor; same as default above&#xA;source = rsnd/0     # for the pcm0 mic on the rear&#xA;source = rsnd/1     # for the pcm1 mic on the front&#xA;source = rsnd/2     # for the pcm2 mic on the USB headset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;source = default&lt;/code&gt; one can switch the visualization on the commandline without changing the configuration file again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ AUDIODEVICE=rsnd/0 cava&#xA;$ AUDIODEVICE=rsnd/1 cava&#xA;$ AUDIODEVICE=rsnd/2 cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sndio can&#39;t record the played back audio with just the raw device descriptors, i.e. the sounds from a music player or a browser which play on the external stereo speakers through &lt;code&gt;rsnd/0&lt;/code&gt; are not visualized in CAVA. For this to work the sndio server has to be started and a monitoring sub-device has to be created. The following example shows how to start the server and create a monitoring sub-device &lt;code&gt;snd/0&lt;/code&gt; from &lt;code&gt;rsnd/0&lt;/code&gt; and then start CAVA with &lt;code&gt;AUDIODEVICE&lt;/code&gt; pointing to the new monitoring sub-device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sndiod -f rsnd/0 -m play,mon&#xA;$ AUDIODEVICE=snd/0 cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch between the speakers and the USB headset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sndiod -f rsnd/2 -m play,mon -s usb -f rsnd/0 -m play,mon -s speakers&#xA;$ AUDIODEVICE=snd/usb cava&#xA;$ AUDIODEVICE=snd/speakers cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult the manpage &lt;code&gt;sndiod(8)&lt;/code&gt; for further information regarding configuration and startup of a sndio server.&lt;/p&gt; &#xA;&lt;h3&gt;OSS&lt;/h3&gt; &#xA;&lt;p&gt;Set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = oss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The audio system used on FreeBSD is the Open Sound System (OSS). The following example demonstrates how to setup CAVA for OSS on FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /dev/sndstat&#xA;Installed devices:&#xA;pcm0: &amp;lt;Realtek ALC1220 (Rear Analog)&amp;gt; (play/rec) default&#xA;pcm1: &amp;lt;Realtek ALC1220 (Front Analog Mic)&amp;gt; (rec)&#xA;pcm2: &amp;lt;USB audio&amp;gt; (play/rec)&#xA;No devices installed from userspace.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The system has three &lt;code&gt;pcm&lt;/code&gt; sound devices, &lt;code&gt;pcm0&lt;/code&gt;, &lt;code&gt;pcm1&lt;/code&gt; and &lt;code&gt;pcm2&lt;/code&gt;. &lt;code&gt;pcm0&lt;/code&gt; corresponds to the analog output jack on the rear, in which external stereo speakers are plugged in, and the analog input jack, in which one could plug in a microphone. Because it encapsulates both, output and input, it is marked as &lt;code&gt;play/rec&lt;/code&gt;. It is also set as the &lt;code&gt;default&lt;/code&gt; sound device. &lt;code&gt;pcm1&lt;/code&gt; corresponds to another analog input jack for a mic on the front side and is marked &lt;code&gt;rec&lt;/code&gt;. A USB headset with an integrated mic is plugged in an USB port and the system has created the &lt;code&gt;pcm2&lt;/code&gt; sound device with &lt;code&gt;play/rec&lt;/code&gt; capabilities for it.&lt;/p&gt; &#xA;&lt;p&gt;In general for every &lt;code&gt;pcmX&lt;/code&gt; device there is a corresponding &lt;code&gt;/dev/dspX&lt;/code&gt; audio device. In this example there are &lt;code&gt;/dev/dsp0&lt;/code&gt;, &lt;code&gt;/dev/dsp1&lt;/code&gt; and &lt;code&gt;/dev/dsp2&lt;/code&gt; (the system creates them when needed, they are not listed via &lt;code&gt;ls /dev&lt;/code&gt; if they are currently not in use). The system also creates an implicit &lt;code&gt;/dev/dsp&lt;/code&gt;, which acts like a symlink to the &lt;code&gt;default&lt;/code&gt; audio device, in this example to &lt;code&gt;/dev/dsp0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now in order to visualize the mic input in CAVA, the &lt;code&gt;source&lt;/code&gt; value in the configuration file must be set to the corresponding audio device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source = /dev/dsp     # default; symlink to /dev/dsp0 in this example&#xA;source = /dev/dsp0    # for the pcm0 mic on the rear&#xA;source = /dev/dsp1    # for the pcm1 mic on the front&#xA;source = /dev/dsp2    # for the pcm2 mic on the USB headset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OSS can&#39;t record the outgoing audio on its own, i.e. the sounds from a music player or a browser which play on the external stereo speakers through &lt;code&gt;/dev/dsp0&lt;/code&gt; are not visualized in CAVA. A solution is to use Virtual OSS. It can create virtual audio devices from existing audio devices, in particular it can create a loopback audio device from &lt;code&gt;/dev/dsp0&lt;/code&gt; and from which the played back audio can be fed into CAVA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ doas pkg install virtual_oss&#xA;$ doas virtual_oss -r44100 -b16 -c2 -s4ms -O /dev/dsp0 -R /dev/null -T /dev/sndstat -l dsp.cava&#xA;&#xA;$ cat /dev/sndstat&#xA;Installed devices:&#xA;pcm0: &amp;lt;Realtek ALC1220 (Rear Analog)&amp;gt; (play/rec) default&#xA;pcm1: &amp;lt;Realtek ALC1220 (Front Analog Mic)&amp;gt; (rec)&#xA;pcm2: &amp;lt;USB audio&amp;gt; (play/rec)&#xA;Installed devices from userspace:&#xA;dsp.cava: &amp;lt;Virtual OSS&amp;gt; (play/rec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It created a virtual loopback device &lt;code&gt;/dev/dsp.cava&lt;/code&gt; from &lt;code&gt;/dev/dsp0&lt;/code&gt;. Now the audio is visualized in CAVA with &lt;code&gt;source = /dev/dsp.cava&lt;/code&gt; in the configuration file. The playback program must have a configuration to use the &lt;code&gt;/dev/dsp.cava&lt;/code&gt; device. For programs where this is not possible, e.g. which always use &lt;code&gt;/dev/dsp&lt;/code&gt;, replace &lt;code&gt;-l dsp.cava&lt;/code&gt; with &lt;code&gt;-l dsp&lt;/code&gt;. Virtual OSS can be configured and started as a service on FreeBSD.&lt;/p&gt; &#xA;&lt;h3&gt;JACK&lt;/h3&gt; &#xA;&lt;p&gt;Set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = jack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JACK Audio Connection Kit (JACK) is a professional sound server API which is available on several operating systems, e.g. FreeBSD and Linux.&lt;/p&gt; &#xA;&lt;p&gt;CAVA is a JACK client with the base client name &lt;code&gt;cava&lt;/code&gt; and adheres to the standard server start and stop behaviour, i.e. CAVA starts a JACK server if none is already running and the environment variable &lt;code&gt;JACK_START_SERVER&lt;/code&gt; is defined, in which case the server also stops when all clients have exited. The &lt;code&gt;source&lt;/code&gt; in the CAVA configuration file specifies the name of the JACK server to which CAVA tries to connect to. The default value is &lt;code&gt;default&lt;/code&gt;, which is also the default JACK server name. The value can be empty, in which case it implies &lt;code&gt;default&lt;/code&gt;. Therefore the following three entries are equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;; source = default&#xA;source = default&#xA;source =&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One exception is the combination of an empty &lt;code&gt;source&lt;/code&gt; entry and the environment variable &lt;code&gt;JACK_DEFAULT_SERVER&lt;/code&gt;. If the environment variable is defined, e.g. &lt;code&gt;export JACK_DEFAULT_SERVER=foo&lt;/code&gt;, then the following entries are equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source = foo&#xA;source =&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult the manpage &lt;code&gt;jackd(1)&lt;/code&gt; for further information regarding configuration and startup of a JACK server.&lt;/p&gt; &#xA;&lt;p&gt;CAVA creates terminal audio-typed (so no MIDI support) input ports. These ports can connect to output ports of other JACK clients, e.g. connect to the output ports of a music player and CAVA will visualize the music. Currently CAVA supports up to two input ports, i.e. it supports mono and stereo. The number of input ports can be controlled via the &lt;code&gt;channels&lt;/code&gt; option in the input section of the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;channels = 1    # one input port, mono&#xA;channels = 2    # two input ports, stereo (default)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The port&#39;s short name is simply &lt;code&gt;M&lt;/code&gt; for mono, and &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; for stereo. The full name of the input port according to the base client name is &lt;code&gt;cava:M&lt;/code&gt; for mono, and &lt;code&gt;cava:L&lt;/code&gt; and &lt;code&gt;cava:R&lt;/code&gt; for stereo.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;autoconnect&lt;/code&gt; controls the connection strategy for CAVA&#39;s ports to other client&#39;s ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;autoconnect = 0    # don&#39;t connect to other ports automatically&#xA;autoconnect = 1    # only connect to other ports during startup&#xA;autoconnect = 2    # reconnect to new ports regularly (default)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The automatic connection strategies scan the physical terminal input-ports, i.e. the real audio device which actually outputs the sound, and applies the same connections to CAVA&#39;s ports. In this way CAVA visualizes the played back audio from JACK clients by default.&lt;/p&gt; &#xA;&lt;p&gt;In order to control and manage the connection between CAVA&#39;s ports and ports of other client programs, there are connection management programs for JACK. Some well known connection managers with a graphical user interface are QjackCtl and Cadence. The JACK package itself often comes with CLI tools. Depending on the operating system it could be necessary to install them separately, e.g. on FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ doas pkg install jack-example-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Among the tools are the programs &lt;code&gt;jack_lsp&lt;/code&gt; and &lt;code&gt;jack_connect&lt;/code&gt;. These two tools are enough to list and connect ports on the commandline. The following example demonstrates how to setup connections with these tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ jack_lsp&#xA;system:capture_1&#xA;system:capture_2&#xA;system:playback_1&#xA;system:playback_2&#xA;cava:L&#xA;moc:output0&#xA;moc:output1&#xA;cava:R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This listing shows all full port names that are currently available. These correspond to two external JACK clients, &lt;code&gt;cava&lt;/code&gt; and &lt;code&gt;moc&lt;/code&gt;, and one internal JACK client &lt;code&gt;system&lt;/code&gt;. The types and current active connections between the ports can be listed with the &lt;code&gt;-p&lt;/code&gt; and &lt;code&gt;-c&lt;/code&gt; switches for &lt;code&gt;jack_lsp&lt;/code&gt;. In order to connect the ports of CAVA and MOC, &lt;code&gt;jack_connect&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ jack_connect cava:L moc:output0&#xA;$ jack_connect cava:R moc:output1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now CAVA visualizes the outgoing audio from MOC.&lt;/p&gt; &#xA;&lt;h3&gt;squeezelite&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Squeezelite&#34;&gt;squeezelite&lt;/a&gt; is one of several software clients available for the Logitech Media Server. Squeezelite can export its audio data as shared memory, which is what this input module uses. Just adapt your &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;config&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = shmem&#xA;source = /squeezelite-AA:BB:CC:DD:EE:FF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;AA:BB:CC:DD:EE:FF&lt;/code&gt; is squeezelite&#39;s MAC address (check the LMS Web GUI (Settings&amp;gt;Information) if unsure). Note: squeezelite must be started with the &lt;code&gt;-v&lt;/code&gt; flag to enable visualizer support.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Note: Cava doesn&#39;t render correctly within the default macOS terminal. In order to achieve an optimal display, install &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/index.html&#34;&gt;Kitty&lt;/a&gt;. Beware that you may run in to the issue presented in #109; however, it can be resolved with &lt;a href=&#34;https://stackoverflow.com/questions/7165108/in-os-x-lion-lang-is-not-set-to-utf-8-how-to-fix-it&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Background Music&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/kyleneideck/BackgroundMusic&#34;&gt;Background Music&lt;/a&gt; which provides a loopback interface automatically. Once installed and running just edit your &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;config&lt;/a&gt; to use this interface with portaudio:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = portaudio&#xA;source = &#34;Background Music&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sound Flower&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattingalls/Soundflower&#34;&gt;Soundflower&lt;/a&gt; also works to create a loopback interface. Use Audio MIDI Setup to configure a virtual interface that outputs audio to both your speakers and the loopback interface, following &lt;a href=&#34;https://github.com/RogueAmoeba/Soundflower-Original/issues/44#issuecomment-151586106&#34;&gt;this&lt;/a&gt; recipe. By creating a multi-output device you lose the ability to control the volume on your keyboard. Because of this, we recommend the Background Music app which still gives you keyboard controls.&lt;/p&gt; &#xA;&lt;p&gt;Then edit your &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/#configuration&#34;&gt;config&lt;/a&gt; to use this interface with portaudio:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method = portaudio&#xA;source = &#34;Soundflower (2ch)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Should capture the audio from the default output device automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Running via ssh&lt;/h2&gt; &#xA;&lt;p&gt;To run via ssh to an external monitor, redirect output to &lt;code&gt;/dev/console&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ~# ./cava  &amp;lt;&amp;gt; /dev/console &amp;gt;&amp;amp;0 2&amp;gt;&amp;amp;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;exit with ctrl+z then run &#39;bg&#39; to keep it running after you log out.&lt;/p&gt; &#xA;&lt;p&gt;(You must be root to redirect to console. Simple sudo is not enough: Run &lt;code&gt;sudo su&lt;/code&gt; first.)&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;No bars in terminal&lt;/h3&gt; &#xA;&lt;p&gt;Most likley issue &lt;a href=&#34;https://github.com/karlstav/cava/issues/399&#34;&gt;#399&lt;/a&gt;. Locale settings need to be set correctly in order for cava to work.&lt;/p&gt; &#xA;&lt;h3&gt;Visualizer reacts to microphone instead of output&lt;/h3&gt; &#xA;&lt;p&gt;This is a known issue with pipewire. Try the workaround described &lt;a href=&#34;https://github.com/karlstav/cava/issues/422#issuecomment-994270910&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vertical lines in bars&lt;/h3&gt; &#xA;&lt;p&gt;This is either an issue with the font, or line spacing being enabled in the terminal emulator. Try to change font or disable line spacing.&lt;/p&gt; &#xA;&lt;h3&gt;Low resolution&lt;/h3&gt; &#xA;&lt;p&gt;Since the graphics are simply based on characters, try decreasing the font size.&lt;/p&gt; &#xA;&lt;h3&gt;Low frame rate&lt;/h3&gt; &#xA;&lt;p&gt;Some terminal emulators are just slow. Cava will look best in a GPU based terminal like kitty or alacritty. You can also try to increase the font size&lt;/p&gt; &#xA;&lt;h3&gt;Font is changed in ttys after exit&lt;/h3&gt; &#xA;&lt;p&gt;If you run cava in a TTY (like ctrl+alt+F2) the program will change the font to the included &lt;code&gt;cava.psf&lt;/code&gt; (actually a slightly modified &#34;unifont&#34;).&lt;/p&gt; &#xA;&lt;p&gt;In console fonts it seems that only 256 Unicode characters are supported, probably because they are bitmap fonts. I could not find a font with Unicode characters 2581-2587 (the 1/8 - 7/8 blocks used on the top of each bar to increase resolution).&lt;/p&gt; &#xA;&lt;p&gt;So in &lt;code&gt;cava.psf&lt;/code&gt;, the characters 1-7 are actually replaced by Unicode characters 2581-2587. When cava exits, it changes the font back. If cava exits abnormally and you notice that 1-7 are replaced by partial blocks, just change the font with &lt;code&gt;setfont&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Actually, &lt;code&gt;setfont&lt;/code&gt; is supposed to return the default font, but this usually isn&#39;t set. I haven&#39;t found another way to get the current font. So cava sets the font to &#34;Lat2-Fixed16&#34; when interrupted. All major distros should have it. It will revert to your default font at reboot.&lt;/p&gt; &#xA;&lt;h3&gt;Gradient not working in Konsole&lt;/h3&gt; &#xA;&lt;p&gt;Konsole simply does not support this. #194&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage : cava [options]&#xA;Visualize audio input in terminal. &#xA;&#xA;Options:&#xA;&#x9;    -p          path to config file&#xA;&#x9;    -v          print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exit with ctrl+c or q.&lt;/p&gt; &#xA;&lt;p&gt;If cava quits unexpectedly or is force killed, echo must be turned on manually with &lt;code&gt;stty -echo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;p&gt;NOTE: only works in ncurses output mode.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;up&lt;/kbd&gt; / &lt;kbd&gt;down&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;increase/decrease sensitivity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;left&lt;/kbd&gt; / &lt;kbd&gt;right&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;increase/decrease bar width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;f&lt;/kbd&gt; / &lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change foreground/background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reload configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reload colors only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;q&lt;/kbd&gt; or &lt;kbd&gt;CTRL-C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quit C.A.V.A.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;As of version 0.4.0 all options are done in the config file, no more command-line arguments!&lt;/p&gt; &#xA;&lt;p&gt;By default a configuration file is created upon first launch in &lt;code&gt;$XDG_CONFIG_HOME/cava/config&lt;/code&gt; or &lt;code&gt;$HOME/.config/cava/config&lt;/code&gt;, but cava can also be made to use a different file with the &lt;code&gt;-p&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Sending cava a SIGUSR1 signal, will force cava to reload its configuration file. Thus, it behaves as if the user pressed &lt;kbd&gt;r&lt;/kbd&gt; in the terminal. One might send a SIGUSR1 signal using &lt;code&gt;pkill&lt;/code&gt; or &lt;code&gt;killall&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pkill -USR1 cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, sending cava a SIGUSR2 signal will only reload the colors from the configuration file, which is the same as pressing &lt;kbd&gt;c&lt;/kbd&gt; in the terminal. This is slightly faster than reloading the entire config as the audio processing does not need to reinitialize.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pkill -USR2 cava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples on how the equalizer works:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[eq]&#xA;1=0&#xA;2=1&#xA;3=0&#xA;4=1&#xA;5=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/6376571/8670183/a54a851e-29e8-11e5-9eff-346bf6ed91e0.png&#34; alt=&#34;3_138&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[eq]&#xA;1=2&#xA;2=2&#xA;3=1&#xA;4=1&#xA;5=0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/6376571/8670181/9db0ef50-29e8-11e5-81bc-3e2bb9892da0.png&#34; alt=&#34;3_139&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using cava in other applications&lt;/h2&gt; &#xA;&lt;h3&gt;cavacore library&lt;/h3&gt; &#xA;&lt;p&gt;The core processing engine in cava has been split into a separate library &lt;code&gt;cavacore&lt;/code&gt;. See CAVACORE.md for details.&lt;/p&gt; &#xA;&lt;h3&gt;Raw Output&lt;/h3&gt; &#xA;&lt;p&gt;You can also use Cava&#39;s output for other programs by using raw output mode, which will write bar data to &lt;code&gt;STDOUT&lt;/code&gt; that can be piped into other processes. More information on this option is documented in &lt;a href=&#34;https://raw.githubusercontent.com/karlstav/cava/master/example_files/config&#34;&gt;the example config file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A useful starting point example script written in python that consumes raw data can be found &lt;a href=&#34;https://github.com/karlstav/cava/issues/123#issuecomment-307891020&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Please read CONTRIBUTING.md before opening a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CelestialWalrus&#34;&gt;CelestialWalrus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anko&#34;&gt;anko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livibetter&#34;&gt;livibetter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;for major contributions in the early development of this project.&lt;/p&gt; &#xA;&lt;p&gt;Also thanks to &lt;a href=&#34;https://github.com/dpayne/&#34;&gt;dpayne&lt;/a&gt; for figuring out how to find the pulseaudio default sink name.&lt;/p&gt;</summary>
  </entry>
</feed>