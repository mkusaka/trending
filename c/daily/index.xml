<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-05T01:35:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openwall/john</title>
    <updated>2022-07-05T01:35:22Z</updated>
    <id>tag:github.com,2022-07-05:/openwall/john</id>
    <link href="https://github.com/openwall/john" rel="alternate"></link>
    <summary type="html">&lt;p&gt;John the Ripper jumbo - advanced offline password cracker, which supports hundreds of hash and cipher types, and runs on many operating systems, CPUs, GPUs, and even some FPGAs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/openwall/john/tree/bleeding-jumbo&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/openwall/john/tree/bleeding-jumbo.svg?style=shield&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openwall/john-packages/releases/tag/jumbo-dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Download-Windows%20Build-blue.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openwall/john/raw/bleeding-jumbo/doc/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v2%2B-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=john%20the%20ripper&amp;amp;type=&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/openwall/john/goto.svg?label=GitHub%20Hits&#34; alt=&#34;Search hit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;John the Ripper&lt;/h1&gt; &#xA;&lt;p&gt;This is the community-enhanced, &#34;jumbo&#34; version of John the Ripper. It has a lot of code, documentation, and data contributed by jumbo developers and the user community. It is easy for new code to be added to jumbo, and the quality requirements are low, although lately we&#39;ve started subjecting all contributions to quite some automated testing. This means that you get a lot of functionality that is not necessarily &#34;mature&#34;, which in turn means that bugs in this code are to be expected.&lt;/p&gt; &#xA;&lt;p&gt;John the Ripper homepage is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openwall.com/john/&#34;&gt;https://www.openwall.com/john/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have any comments on this release or on JtR in general, please join the john-users mailing list and post in there:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openwall.com/lists/john-users/&#34;&gt;https://www.openwall.com/lists/john-users/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For contributions to John the Ripper jumbo, please use pull requests on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openwall/john/raw/bleeding-jumbo/CONTRIBUTING.md&#34;&gt;https://github.com/openwall/john/blob/bleeding-jumbo/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Included below is basic John the Ripper core documentation.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;John the Ripper password cracker.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;John the Ripper is a fast password cracker, currently available for many flavors of Unix, macOS, Windows, DOS, BeOS, and OpenVMS (the latter requires a contributed patch). Its primary purpose is to detect weak Unix passwords. Besides several crypt(3) password hash types most commonly found on various Unix flavors, supported out of the box are Kerberos/AFS and Windows LM hashes, as well as DES-based tripcodes, plus hundreds of additional hashes and ciphers in &#34;-jumbo&#34; versions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;How to install.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See INSTALL for information on installing John on your system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;How to use.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run John, you need to supply it with some password files and optionally specify a cracking mode, like this, using the default order of modes and assuming that &#34;passwd&#34; is a copy of your password file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, to restrict it to the wordlist mode only, but permitting the use of word mangling rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john --wordlist=password.lst --rules passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cracked passwords will be printed to the terminal and saved in the file called $JOHN/john.pot (in the documentation and in the configuration file for John, &#34;$JOHN&#34; refers to John&#39;s &#34;home directory&#34;; which directory it really is depends on how you installed John). The $JOHN/john.pot file is also used to not load password hashes that you already cracked when you run John the next time.&lt;/p&gt; &#xA;&lt;p&gt;To retrieve the cracked passwords, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john --show passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While cracking, you can press any key for status, or &#39;q&#39; or Ctrl-C to abort the session saving its state to a file ($JOHN/john.rec by default). If you press Ctrl-C for a second time before John had a chance to complete handling of your first Ctrl-C, John will abort immediately without saving. By default, the state is also saved every 10 minutes to permit for recovery in case of a crash.&lt;/p&gt; &#xA;&lt;p&gt;To continue an interrupted session, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;john --restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are just the most essential things you can do with John. For a complete list of command line options and for more complicated usage examples you should refer to OPTIONS and EXAMPLES, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &#34;binary&#34; (pre-compiled) distributions of John may include alternate executables instead of just &#34;john&#34;. You may need to choose the executable that fits your system best, e.g. &#34;john-omp&#34; to take advantage of multiple CPUs and/or CPU cores.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Features.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;John the Ripper is designed to be both feature-rich and fast. It combines several cracking modes in one program and is fully configurable for your particular needs (you can even define a custom cracking mode using the built-in compiler supporting a subset of C). Also, John is available for several different platforms which enables you to use the same cracker everywhere (you can even continue a cracking session which you started on another platform).&lt;/p&gt; &#xA;&lt;p&gt;Out of the box, John supports (and autodetects) the following Unix crypt(3) hash types: traditional DES-based, &#34;bigcrypt&#34;, BSDI extended DES-based, FreeBSD MD5-based (also used on Linux and in Cisco IOS), and OpenBSD Blowfish-based (now also used on some Linux distributions and supported by recent versions of Solaris). Also supported out of the box are Kerberos/AFS and Windows LM (DES-based) hashes, as well as DES-based tripcodes.&lt;/p&gt; &#xA;&lt;p&gt;When running on Linux distributions with glibc 2.7+, John 1.7.6+ additionally supports (and autodetects) SHA-crypt hashes (which are actually used by recent versions of Fedora and Ubuntu), with optional OpenMP parallelization (requires GCC 4.2+, needs to be explicitly enabled at compile-time by uncommenting the proper OMPFLAGS line near the beginning of the Makefile).&lt;/p&gt; &#xA;&lt;p&gt;Similarly, when running on recent versions of Solaris, John 1.7.6+ supports and autodetects SHA-crypt and SunMD5 hashes, also with optional OpenMP parallelization (requires GCC 4.2+ or recent Sun Studio, needs to be explicitly enabled at compile-time by uncommenting the proper OMPFLAGS line near the beginning of the Makefile and at runtime by setting the OMP_NUM_THREADS environment variable to the desired number of threads).&lt;/p&gt; &#xA;&lt;p&gt;&#34;-jumbo&#34; versions add support for hundreds of additional hash and cipher types, including fast built-in implementations of SHA-crypt and SunMD5, Windows NTLM (MD4-based) password hashes, various macOS and Mac OS X user password hashes, fast hashes such as raw MD5, SHA-1, SHA-256, and SHA-512 (which many &#34;web applications&#34; historically misuse for passwords), various other &#34;web application&#34; password hashes, various SQL and LDAP server password hashes, and lots of other hash types, as well as many non-hashes such as SSH private keys, S/Key skeykeys files, Kerberos TGTs, encrypted filesystems such as macOS .dmg files and &#34;sparse bundles&#34;, encrypted archives such as ZIP (classic PKZIP and WinZip/AES), RAR, and 7z, encrypted document files such as PDF and Microsoft Office&#39;s - and these are just some examples. To load some of these larger files for cracking, a corresponding bundled *2john program should be used first, and then its output fed into JtR -jumbo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Graphical User Interface (GUI).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an official GUI for John the Ripper: Johnny.&lt;/p&gt; &#xA;&lt;p&gt;Despite the fact that Johnny is oriented onto JtR core, all basic functionality is supposed to work in all versions, including jumbo.&lt;/p&gt; &#xA;&lt;p&gt;Johnny is a separate program, therefore you need to have John the Ripper installed in order to use it.&lt;/p&gt; &#xA;&lt;p&gt;More information about Johnny and its releases is on the wiki:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openwall.info/wiki/john/johnny&#34;&gt;https://openwall.info/wiki/john/johnny&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Documentation.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest of documentation is located in separate files, listed here in the recommended order of reading:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;INSTALL - installation instructions&lt;/li&gt; &#xA; &lt;li&gt;OPTIONS - command line options and additional utilities&lt;/li&gt; &#xA; &lt;li&gt;MODES - cracking modes: what they are&lt;/li&gt; &#xA; &lt;li&gt;CONFIG (*) - how to customize&lt;/li&gt; &#xA; &lt;li&gt;RULES (*) - wordlist rules syntax&lt;/li&gt; &#xA; &lt;li&gt;EXTERNAL (*) - defining an external mode&lt;/li&gt; &#xA; &lt;li&gt;EXAMPLES - usage examples - strongly recommended&lt;/li&gt; &#xA; &lt;li&gt;FAQ - guess&lt;/li&gt; &#xA; &lt;li&gt;CHANGES (*) - history of changes&lt;/li&gt; &#xA; &lt;li&gt;CONTACT (*) - how to contact the author or otherwise obtain support&lt;/li&gt; &#xA; &lt;li&gt;CREDITS (*) - credits&lt;/li&gt; &#xA; &lt;li&gt;LICENSE - copyrights and licensing terms&lt;/li&gt; &#xA; &lt;li&gt;COPYING - GNU GPL version 2, as referenced by LICENSE above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*) most users can safely skip these.&lt;/p&gt; &#xA;&lt;p&gt;There are a lot of additional documentation files in jumbo&#39;s &#34;doc&#34; directory, which you&#39;ll also want to explore.&lt;/p&gt; &#xA;&lt;p&gt;Happy reading!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fairyglade/ly</title>
    <updated>2022-07-05T01:35:22Z</updated>
    <id>tag:github.com,2022-07-05:/fairyglade/ly</id>
    <link href="https://github.com/fairyglade/ly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;display manager with console UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ly - a TUI display manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5473047/88958888-65efbf80-d2a1-11ea-8ae5-3f263bce9cce.png&#34; alt=&#34;Ly screenshot&#34; title=&#34;Ly screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ly is a lightweight TUI (ncurses-like) display manager for Linux and BSD.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a C99 compiler (tested with tcc and gcc)&lt;/li&gt; &#xA; &lt;li&gt;a C standard library&lt;/li&gt; &#xA; &lt;li&gt;GNU make&lt;/li&gt; &#xA; &lt;li&gt;pam&lt;/li&gt; &#xA; &lt;li&gt;xcb&lt;/li&gt; &#xA; &lt;li&gt;xorg&lt;/li&gt; &#xA; &lt;li&gt;xorg-xauth&lt;/li&gt; &#xA; &lt;li&gt;mcookie&lt;/li&gt; &#xA; &lt;li&gt;tput&lt;/li&gt; &#xA; &lt;li&gt;shutdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Debian-based distros running &lt;code&gt;apt install build-essential libpam0g-dev libxcb-xkb-dev&lt;/code&gt; as root should install all the dependencies for you.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The following desktop environments were tested with success&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bspwm&lt;/li&gt; &#xA; &lt;li&gt;budgie&lt;/li&gt; &#xA; &lt;li&gt;cinnamon&lt;/li&gt; &#xA; &lt;li&gt;deepin&lt;/li&gt; &#xA; &lt;li&gt;dwm&lt;/li&gt; &#xA; &lt;li&gt;enlightenment&lt;/li&gt; &#xA; &lt;li&gt;gnome&lt;/li&gt; &#xA; &lt;li&gt;i3&lt;/li&gt; &#xA; &lt;li&gt;kde&lt;/li&gt; &#xA; &lt;li&gt;lxde&lt;/li&gt; &#xA; &lt;li&gt;lxqt&lt;/li&gt; &#xA; &lt;li&gt;mate&lt;/li&gt; &#xA; &lt;li&gt;qtile&lt;/li&gt; &#xA; &lt;li&gt;sway&lt;/li&gt; &#xA; &lt;li&gt;xfce&lt;/li&gt; &#xA; &lt;li&gt;xmonad&lt;/li&gt; &#xA; &lt;li&gt;pantheon&lt;/li&gt; &#xA; &lt;li&gt;maxx&lt;/li&gt; &#xA; &lt;li&gt;windowmaker&lt;/li&gt; &#xA; &lt;li&gt;spectrwm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ly should work with any X desktop environment, and provides basic wayland support (sway works very well, for example).&lt;/p&gt; &#xA;&lt;h2&gt;systemd?&lt;/h2&gt; &#xA;&lt;p&gt;Unlike what you may have heard, Ly does not require &lt;code&gt;systemd&lt;/code&gt;, and was even specifically designed not to depend on &lt;code&gt;logind&lt;/code&gt;. You should be able to make it work easily with a better init, changing the source code won&#39;t be necessary :)&lt;/p&gt; &#xA;&lt;h2&gt;Cloning and Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/nullgemm/ly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the directory to ly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test in the configured tty (tty2 by default) or a terminal emulator (but desktop environments won&#39;t start)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Ly and the provided systemd service file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable the service&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo systemctl enable ly.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to switch between ttys after Ly&#39;s start you also have to disable getty on Ly&#39;s tty to prevent &#34;login&#34; from spawning on top of it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo systemctl disable getty@tty2.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arch Linux Installation&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://aur.archlinux.org/packages/ly&#34;&gt;AUR&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yay -S ly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can find all the configuration in &lt;code&gt;/etc/ly/config.ini&lt;/code&gt;. The file is commented, and includes the default values.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;p&gt;Use the up and down arrow keys to change the current field, and the left and right arrow keys to change the target desktop environment while on the desktop field (above the login field).&lt;/p&gt; &#xA;&lt;h2&gt;.xinitrc&lt;/h2&gt; &#xA;&lt;p&gt;If your .xinitrc doesn&#39;t work make sure it is executable and includes a shebang. This file is supposed to be a shell script! Quoting from xinit&#39;s man page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If no specific client program is given on the command line, xinit will look for&#xA;a file in the user&#39;s home directory called .xinitrc to run as a shell script to&#xA;start up client programs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On ArchLinux, the example .xinitrc (/etc/X11/xinit/xinitrc) starts like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;The numlock and capslock state is printed in the top-right corner. Use the F1 and F2 keys to respectively shutdown and reboot. Take a look at your .xsession if X doesn&#39;t start, as it can interfere (this file is launched with X to configure the display properly).&lt;/p&gt; &#xA;&lt;h2&gt;PSX DOOM fire animation&lt;/h2&gt; &#xA;&lt;p&gt;To enable the famous PSX DOOM fire described by &lt;a href=&#34;http://fabiensanglard.net/doom_fire_psx/index.html&#34;&gt;Fabien Sanglard&lt;/a&gt;, just uncomment &lt;code&gt;animate = true&lt;/code&gt; in &lt;code&gt;/etc/ly/config.ini&lt;/code&gt;. You may also disable the main box borders with &lt;code&gt;hide_borders = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Information&lt;/h2&gt; &#xA;&lt;p&gt;The name &#34;Ly&#34; is a tribute to the fairy from the game Rayman. Ly was tested by oxodao, who is some seriously awesome dude.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zhuowei/CoreTrustDemo</title>
    <updated>2022-07-05T01:35:22Z</updated>
    <id>tag:github.com,2022-07-05:/zhuowei/CoreTrustDemo</id>
    <link href="https://github.com/zhuowei/CoreTrustDemo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof-of-concept for CVE-2022-26766 on macOS 12.3.1&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Demo for Linus Henze&#39;s CoreTrust bug (CVE-2022-26766, CoreTrust allows any root certificate)&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://worthdoingbadly.com/coretrust/&#34;&gt;https://worthdoingbadly.com/coretrust/&lt;/a&gt; for usage.&lt;/p&gt;</summary>
  </entry>
</feed>