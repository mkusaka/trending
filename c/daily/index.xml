<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:36:18Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>barimehdi77/42-piscine-exam</title>
    <updated>2022-07-01T01:36:18Z</updated>
    <id>tag:github.com,2022-07-01:/barimehdi77/42-piscine-exam</id>
    <link href="https://github.com/barimehdi77/42-piscine-exam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo has all exercises of &#34;C Exam Alone In The Dark - Beginner&#34; sorted from level_00 to Level_05&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C Exam Alone In The Dark - Beginner&lt;/h1&gt; &#xA;&lt;p&gt;The solutions to 42&#39;s exam exercises&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 0&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_00&#34;&gt;Level_00&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 1&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_01&#34;&gt;Level_01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 2&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_02&#34;&gt;Level_02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 3&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_03&#34;&gt;Level_03&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 4&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_04&#34;&gt;Level_04&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The exercises of &lt;strong&gt;Level 5&lt;/strong&gt;: &lt;a href=&#34;https://github.com/barimehdi77/42-piscine-exam/tree/master/Level_05&#34;&gt;Level_05&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Good luck in The exams :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/barimehdi77&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/K3K45UOA7&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/barimehdi77&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Celtoys/Remotery</title>
    <updated>2022-07-01T01:36:18Z</updated>
    <id>tag:github.com,2022-07-01:/Celtoys/Remotery</id>
    <link href="https://github.com/Celtoys/Remotery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Single C file, Realtime CPU/GPU Profiler with Remote Web Viewer&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Remotery&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Celtoys/Remotery/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Celtoys/Remotery/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A realtime CPU/GPU profiler hosted in a single C file with a viewer that runs in a web browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Celtoys/Remotery/main/screenshot.png?raw=true&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight instrumentation of multiple threads running on the CPU.&lt;/li&gt; &#xA; &lt;li&gt;Web viewer that runs in Chrome, Firefox and Safari; on Desktops, Mobiles or Tablets.&lt;/li&gt; &#xA; &lt;li&gt;GPU UI rendering, bypassing the DOM completely, for real-time 60hz viewer updates at 10,000x the performance.&lt;/li&gt; &#xA; &lt;li&gt;Automatic thread sampler that tells you what processor cores your threads are running on without requiring Administrator privileges.&lt;/li&gt; &#xA; &lt;li&gt;Drop saved traces onto the Remotery window to load historical runs for inspection.&lt;/li&gt; &#xA; &lt;li&gt;Console output for logging text.&lt;/li&gt; &#xA; &lt;li&gt;Console input for sending commands to your game.&lt;/li&gt; &#xA; &lt;li&gt;A Property API for recording named/typed values over time, alongside samples.&lt;/li&gt; &#xA; &lt;li&gt;Profiles itself and shows how it&#39;s performing in the viewer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported Profiling Platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 7/8/10/11/UWP (Hololens), Linux, OSX, iOS, Android, Xbox One/Series, Free BSD.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported GPU Profiling APIS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;D3D 11/12, OpenGL, CUDA, Metal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows (MSVC) - add lib/Remotery.c and lib/Remotery.h to your program. Set include directories to add Remotery/lib path. The required library ws2_32.lib should be picked up through the use of the #pragma comment(lib, &#34;ws2_32.lib&#34;) directive in Remotery.c.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac OS X (XCode) - simply add lib/Remotery.c, lib/Remotery.h and lib/Remotery.mm to your program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux (GCC) - add the source in lib folder. Compilation of the code requires -pthreads for library linkage. For example to compile the same run: cc lib/Remotery.c sample/sample.c -I lib -pthread -lm&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FreeBSD - the easiest way is to take a look at the official port (&lt;a href=&#34;https://www.freshports.org/devel/remotery/&#34;&gt;devel/remotery&lt;/a&gt;) and modify the port&#39;s Makefile if needed. There is also a package available via &lt;code&gt;pkg install remotery&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can define some extra macros to modify what features are compiled into Remotery:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Macro               Default     Description&#xA;&#xA;RMT_ENABLED         1           Disable this to not include any bits of Remotery in your build&#xA;RMT_USE_TINYCRT     0           Used by the Celtoys TinyCRT library (not released yet)&#xA;RMT_USE_CUDA        0           Assuming CUDA headers/libs are setup, allow CUDA profiling&#xA;RMT_USE_D3D11       0           Assuming Direct3D 11 headers/libs are setup, allow D3D11 GPU profiling&#xA;RMT_USE_D3D12       0           Allow D3D12 GPU profiling&#xA;RMT_USE_OPENGL      0           Allow OpenGL GPU profiling (dynamically links OpenGL libraries on available platforms)&#xA;RMT_USE_METAL       0           Allow Metal profiling of command buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Use&lt;/h2&gt; &#xA;&lt;p&gt;See the sample directory for further examples. A quick example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;int main()&#xA;{&#xA;    // Create the main instance of Remotery.&#xA;    // You need only do this once per program.&#xA;    Remotery* rmt;&#xA;    rmt_CreateGlobalInstance(&amp;amp;rmt);&#xA;&#xA;    // Explicit begin/end for C&#xA;    {&#xA;        rmt_BeginCPUSample(LogText, 0);&#xA;        rmt_LogText(&#34;Time me, please!&#34;);&#xA;        rmt_EndCPUSample();&#xA;    }&#xA;&#xA;    // Scoped begin/end for C++&#xA;    {&#xA;        rmt_ScopedCPUSample(LogText, 0);&#xA;        rmt_LogText(&#34;Time me, too!&#34;);&#xA;    }&#xA;&#xA;    // Destroy the main instance of Remotery.&#xA;    rmt_DestroyGlobalInstance(rmt);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Viewer&lt;/h2&gt; &#xA;&lt;p&gt;Double-click or launch &lt;code&gt;vis/index.html&lt;/code&gt; from the browser.&lt;/p&gt; &#xA;&lt;h2&gt;Sampling CUDA GPU activity&lt;/h2&gt; &#xA;&lt;p&gt;Remotery allows for profiling multiple threads of CUDA execution using different asynchronous streams that must all share the same context. After initialising both Remotery and CUDA you need to bind the two together using the call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmtCUDABind bind;&#xA;bind.context = m_Context;&#xA;bind.CtxSetCurrent = &amp;amp;cuCtxSetCurrent;&#xA;bind.CtxGetCurrent = &amp;amp;cuCtxGetCurrent;&#xA;bind.EventCreate = &amp;amp;cuEventCreate;&#xA;bind.EventDestroy = &amp;amp;cuEventDestroy;&#xA;bind.EventRecord = &amp;amp;cuEventRecord;&#xA;bind.EventQuery = &amp;amp;cuEventQuery;&#xA;bind.EventElapsedTime = &amp;amp;cuEventElapsedTime;&#xA;rmt_BindCUDA(&amp;amp;bind);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Explicitly pointing to the CUDA interface allows Remotery to be included anywhere in your project without need for you to link with the required CUDA libraries. After the bind completes you can safely sample any CUDA activity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUstream stream;&#xA;&#xA;// Explicit begin/end for C&#xA;{&#xA;    rmt_BeginCUDASample(UnscopedSample, stream);&#xA;    // ... CUDA code ...&#xA;    rmt_EndCUDASample(stream);&#xA;}&#xA;&#xA;// Scoped begin/end for C++&#xA;{&#xA;    rmt_ScopedCUDASample(ScopedSample, stream);&#xA;    // ... CUDA code ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remotery supports only one context for all threads and will use cuCtxGetCurrent and cuCtxSetCurrent to ensure the current thread has the context you specify in rmtCUDABind.context.&lt;/p&gt; &#xA;&lt;h2&gt;Sampling Direct3D 11 GPU activity&lt;/h2&gt; &#xA;&lt;p&gt;Remotery allows sampling of D3D11 GPU activity on multiple devices on multiple threads. After initialising Remotery, you need to bind it to D3D11 with a single call from the thread that owns the device context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Parameters are ID3D11Device* and ID3D11DeviceContext*&#xA;rmt_BindD3D11(d3d11_device, d3d11_context);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sampling is then a simple case of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Explicit begin/end for C&#xA;{&#xA;    rmt_BeginD3D11Sample(UnscopedSample);&#xA;    // ... D3D code ...&#xA;    rmt_EndD3D11Sample();&#xA;}&#xA;&#xA;// Scoped begin/end for C++&#xA;{&#xA;    rmt_ScopedD3D11Sample(ScopedSample);&#xA;    // ... D3D code ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subsequent sampling calls from the same thread will use that device/context combination. When you shutdown your D3D11 device and context, ensure you notify Remotery before shutting down Remotery itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmt_UnbindD3D11();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sampling OpenGL GPU activity&lt;/h2&gt; &#xA;&lt;p&gt;Remotery allows sampling of GPU activity on your main OpenGL context. After initialising Remotery, you need to bind it to OpenGL with the single call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmt_BindOpenGL();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sampling is then a simple case of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Explicit begin/end for C&#xA;{&#xA;    rmt_BeginOpenGLSample(UnscopedSample);&#xA;    // ... OpenGL code ...&#xA;    rmt_EndOpenGLSample();&#xA;}&#xA;&#xA;// Scoped begin/end for C++&#xA;{&#xA;    rmt_ScopedOpenGLSample(ScopedSample);&#xA;    // ... OpenGL code ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Support for multiple contexts can be added pretty easily if there is demand for the feature. When you shutdown your OpenGL device and context, ensure you notify Remotery before shutting down Remotery itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmt_UnbindOpenGL();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sampling Metal GPU activity&lt;/h2&gt; &#xA;&lt;p&gt;Remotery can sample Metal command buffers issued to the GPU from multiple threads. As the Metal API does not support finer grained profiling, samples will return only the timing of the bound command buffer, irrespective of how many you issue. As such, make sure you bind and sample the command buffer for each call site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmt_BindMetal(mtl_command_buffer);&#xA;rmt_ScopedMetalSample(command_buffer_name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The C API supports begin/end also:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmt_BindMetal(mtl_command_buffer);&#xA;rmt_BeginMetalSample(command_buffer_name);&#xA;...&#xA;rmt_EndMetalSample();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Applying Configuration Settings&lt;/h2&gt; &#xA;&lt;p&gt;Before creating your Remotery instance, you can configure its behaviour by retrieving its settings object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rmtSettings* settings = rmt_Settings();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some important settings are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Redirect any Remotery allocations to your own malloc/free, with an additional context pointer&#xA;// that gets passed to your callbacks.&#xA;settings-&amp;gt;malloc;&#xA;settings-&amp;gt;free;&#xA;settings-&amp;gt;mm_context;&#xA;&#xA;// Specify an input handler that receives text input from the Remotery console, with an additional&#xA;// context pointer that gets passed to your callback.&#xA;// The handler will be called from the Remotery thread so synchronization with a mutex or atomics&#xA;// might be needed to avoid race conditions with your threads.&#xA;settings-&amp;gt;input_handler;&#xA;settings-&amp;gt;input_handler_context;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jerryscript-project/jerryscript</title>
    <updated>2022-07-01T01:36:18Z</updated>
    <id>tag:github.com,2022-07-01:/jerryscript-project/jerryscript</id>
    <link href="https://github.com/jerryscript-project/jerryscript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ultra-lightweight JavaScript engine for the Internet of Things.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/jerryscript-project/jerryscript/raw/master/LOGO.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;JerryScript: JavaScript engine for the Internet of Things&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/licence-Apache%202.0-brightgreen.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jerryscript-project/jerryscript/actions&#34;&gt;&lt;img src=&#34;https://github.com/jerryscript-project/jerryscript/workflows/JerryScript%20CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/jerryscript-project/jerryscript/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/ct8reap35u2vooa5/branch/master?svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fjerryscript-project%2Fjerryscript?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fjerryscript-project%2Fjerryscript.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kiwiirc.com/client/irc.freenode.net/#jerryscript&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20freenode-brightgreen.svg?sanitize=true&#34; alt=&#34;IRC Channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JerryScript is a lightweight JavaScript engine for resource-constrained devices such as microcontrollers. It can run on devices with less than 64 KB of RAM and less than 200 KB of flash memory.&lt;/p&gt; &#xA;&lt;p&gt;Key characteristics of JerryScript:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full ECMAScript 5.1 standard compliance&lt;/li&gt; &#xA; &lt;li&gt;160K binary size when compiled for ARM Thumb-2&lt;/li&gt; &#xA; &lt;li&gt;Heavily optimized for low memory consumption&lt;/li&gt; &#xA; &lt;li&gt;Written in C99 for maximum portability&lt;/li&gt; &#xA; &lt;li&gt;Snapshot support for precompiling JavaScript source code to byte code&lt;/li&gt; &#xA; &lt;li&gt;Mature C API, easy to embed in applications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional information can be found on our &lt;a href=&#34;http://jerryscript.net&#34;&gt;project page&lt;/a&gt; and &lt;a href=&#34;https://github.com/jerryscript-project/jerryscript/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Memory usage and Binary footprint are measured at &lt;a href=&#34;https://jerryscript-project.github.io/jerryscript-test-results&#34;&gt;here&lt;/a&gt; with real target daily.&lt;/p&gt; &#xA;&lt;p&gt;The latest results on &lt;strong&gt;Raspberry Pi 2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jerryscript-project.github.io/jerryscript-test-results/?view=rpi2&#34;&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/jsremote-testrunner.appspot.com/o/status%2Fjerryscript%2Frpi2.svg?alt=media&amp;amp;token=1&#34; alt=&#34;Remote Testrunner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IRC channel: #jerryscript on &lt;a href=&#34;https://freenode.net&#34;&gt;freenode&lt;/a&gt; Mailing list: &lt;a href=&#34;mailto:jerryscript-dev@groups.io&#34;&gt;jerryscript-dev@groups.io&lt;/a&gt;, you can subscribe &lt;a href=&#34;https://groups.io/g/jerryscript-dev&#34;&gt;here&lt;/a&gt; and access the mailing list archive &lt;a href=&#34;https://groups.io/g/jerryscript-dev/topics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Getting the sources&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jerryscript-project/jerryscript.git&#xA;cd jerryscript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building JerryScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python tools/build.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional information see &lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/00.GETTING-STARTED.md&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/00.GETTING-STARTED.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/01.CONFIGURATION.md&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/02.API-REFERENCE.md&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/03.API-EXAMPLE.md&#34;&gt;API Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/04.INTERNALS.md&#34;&gt;Internals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/docs/16.MIGRATION-GUIDE.md&#34;&gt;Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The project can only accept contributions which are licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt; and are signed according to the JerryScript &lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/DCO.md&#34;&gt;Developer&#39;s Certificate of Origin&lt;/a&gt;. For further information please see our &lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;JerryScript is open source software under the &lt;a href=&#34;https://raw.githubusercontent.com/jerryscript-project/jerryscript/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;. Complete license and copyright information can be found in the source code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fjerryscript-project%2Fjerryscript?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fjerryscript-project%2Fjerryscript.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright JS Foundation and other contributors, &lt;a href=&#34;http://js.foundation&#34;&gt;http://js.foundation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt; Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>