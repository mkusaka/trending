<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-16T01:34:31Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tanersener/ffmpeg-kit</title>
    <updated>2022-09-16T01:34:31Z</updated>
    <id>tag:github.com,2022-09-16:/tanersener/ffmpeg-kit</id>
    <link href="https://github.com/tanersener/ffmpeg-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FFmpeg Kit for applications. Supports Android, Flutter, iOS, macOS, React Native and tvOS. Supersedes MobileFFmpeg, flutter_ffmpeg and react-native-ffmpeg.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FFmpegKit &lt;img src=&#34;https://img.shields.io/badge/release-v4.5.1-blue.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.arthenica/ffmpeg-kit-min&#34; alt=&#34;Maven Central&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/ffmpeg-kit-ios-min&#34; alt=&#34;CocoaPods&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/ffmpeg_kit_flutter.svg?sanitize=true&#34; alt=&#34;pub&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/ffmpeg-kit-react-native.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/tanersener/ffmpeg-kit/raw/main/docs/assets/ffmpeg-kit-icon-v9.png&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; is a collection of tools to use &lt;code&gt;FFmpeg&lt;/code&gt; in &lt;code&gt;Android&lt;/code&gt;, &lt;code&gt;iOS&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;, &lt;code&gt;Flutter&lt;/code&gt; and &lt;code&gt;React Native&lt;/code&gt; applications.&lt;/p&gt; &#xA;&lt;p&gt;It includes scripts to build &lt;code&gt;FFmpeg&lt;/code&gt; native libraries, a wrapper library to run &lt;code&gt;FFmpeg&lt;/code&gt;/&lt;code&gt;FFprobe&lt;/code&gt; commands in applications and 8 prebuilt binary packages available at &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://search.maven.org&#34;&gt;Maven Central&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://pub.dev&#34;&gt;pub&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scripts to build FFmpeg native libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; wrapper library to run &lt;code&gt;FFmpeg&lt;/code&gt;/&lt;code&gt;FFprobe&lt;/code&gt; commands in applications&lt;/li&gt; &#xA; &lt;li&gt;Supports native platforms: Android, iOS, macOS and tvOS&lt;/li&gt; &#xA; &lt;li&gt;Supports hybrid platforms: Flutter, React Native&lt;/li&gt; &#xA; &lt;li&gt;Based on FFmpeg &lt;code&gt;v4.5-dev&lt;/code&gt; with optional system and external libraries&lt;/li&gt; &#xA; &lt;li&gt;8 prebuilt binary packages available at &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://search.maven.org&#34;&gt;Maven Central&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://pub.dev&#34;&gt;pub&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Licensed under &lt;code&gt;LGPL 3.0&lt;/code&gt;, or &lt;code&gt;GPL v3.0&lt;/code&gt; if GPL licensed libraries are enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Android&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tanersener/ffmpeg-kit/main/android&#34;&gt;Android&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;Android&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. iOS, macOS, tvOS&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tanersener/ffmpeg-kit/main/apple&#34;&gt;Apple&lt;/a&gt; to use &lt;code&gt;FFmpegKit&lt;/code&gt; on &lt;code&gt;Apple&lt;/code&gt; platforms (&lt;code&gt;iOS&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;4. Flutter&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tanersener/ffmpeg-kit/main/flutter/flutter&#34;&gt;Flutter&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;Flutter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;5. React Native&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tanersener/ffmpeg-kit/main/react-native&#34;&gt;React Native&lt;/a&gt; to learn more about &lt;code&gt;FFmpegKit&lt;/code&gt; for &lt;code&gt;React Native&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;6. Build Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;android.sh&lt;/code&gt;, &lt;code&gt;ios.sh&lt;/code&gt;, &lt;code&gt;macos.sh&lt;/code&gt; and &lt;code&gt;tvos.sh&lt;/code&gt; to build &lt;code&gt;FFmpegKit&lt;/code&gt; for each native platform.&lt;/p&gt; &#xA;&lt;p&gt;All scripts support additional options to enable optional libraries and disable platform architectures. See &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/wiki/Building&#34;&gt;Building&lt;/a&gt; wiki page for the details.&lt;/p&gt; &#xA;&lt;h3&gt;7. FFmpegKit Library&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; is a wrapper library that allows you to easily run &lt;code&gt;FFmpeg&lt;/code&gt;/&lt;code&gt;FFprobe&lt;/code&gt; commands in applications. It provides additional features on top of &lt;code&gt;FFmpeg&lt;/code&gt; to enable platform specific resources, control how commands are executed and how the results are handled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Android&lt;/code&gt; library of &lt;code&gt;FFmpegKit&lt;/code&gt; has a &lt;code&gt;Java&lt;/code&gt; API, &lt;code&gt;Apple&lt;/code&gt; libraries (&lt;code&gt;iOS&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;) have an &lt;code&gt;Objective-C&lt;/code&gt; API, &lt;code&gt;Flutter&lt;/code&gt;library comes with a &lt;code&gt;Dart&lt;/code&gt; API and &lt;code&gt;React Native&lt;/code&gt; library provides a &lt;code&gt;JavaScript&lt;/code&gt; API, which are identical in terms of features and capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;8. Packages&lt;/h3&gt; &#xA;&lt;p&gt;There are eight different &lt;code&gt;ffmpeg-kit&lt;/code&gt; packages distributed on &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://search.maven.org&#34;&gt;Maven Central&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://pub.dev&#34;&gt;pub&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;. Below you can see which system libraries and external libraries are enabled in each one of them.&lt;/p&gt; &#xA;&lt;p&gt;Please remember that some parts of &lt;code&gt;FFmpeg&lt;/code&gt; are licensed under the &lt;code&gt;GPL&lt;/code&gt; and only &lt;code&gt;GPL&lt;/code&gt; licensed &lt;code&gt;ffmpeg-kit&lt;/code&gt; packages include them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;min&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;min-gpl&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;https&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;https-gpl&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;audio&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;video&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;full&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;sup&gt;full-gpl&lt;/sup&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;external libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;vid.stab&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x264&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x265&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;xvidcore&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vid.stab&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x264&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x265&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;xvidcore&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;lame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libilbc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvorbis&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opencore-amr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opus&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;shine&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;soxr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;speex&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;twolame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vo-amrwbenc&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;dav1d&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fontconfig&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;freetype&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fribidi&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;kvazaar&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libass&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libiconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libtheora&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvpx&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libwebp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;snappy&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zimg&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;dav1d&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fontconfig&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;freetype&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fribidi&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;kvazaar&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;lame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libass&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libiconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libilbc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libtheora&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvorbis&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvpx&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libwebp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libxml2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opencore-amr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opus&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;shine&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;snappy&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;soxr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;speex&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;twolame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vo-amrwbenc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zimg&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;dav1d&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fontconfig&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;freetype&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;fribidi&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gmp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;gnutls&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;kvazaar&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;lame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libass&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libiconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libilbc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libtheora&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvorbis&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libvpx&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libwebp&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;libxml2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opencore-amr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;opus&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;shine&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;snappy&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;soxr&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;speex&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;twolame&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vid.stab&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;vo-amrwbenc&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x264&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;x265&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;xvidcore&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zimg&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;android system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;MediaCodec&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;ios system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;bzip2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AudioToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AVFoundation&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;iconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;VideoToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;macos system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;bzip2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AudioToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AVFoundation&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;Core Image&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;iconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;OpenCL&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;OpenGL&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;VideoToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sup&gt;tvos system libraries&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; colspan=&#34;8&#34;&gt;&lt;sup&gt;bzip2&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;AudioToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;iconv&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;VideoToolbox&lt;/sup&gt;&lt;br&gt;&lt;sup&gt;zlib&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AVFoundation&lt;/code&gt; is not available on &lt;code&gt;tvOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VideoToolbox&lt;/code&gt; is not available on LTS releases of &lt;code&gt;iOS&lt;/code&gt; and &lt;code&gt;tvOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zimg&lt;/code&gt; is supported since &lt;code&gt;v4.5.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;9. Versions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; binaries generated use the same major and minor version numbers as the upstream &lt;code&gt;FFmpeg&lt;/code&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;The exact version number of &lt;code&gt;FFmpeg&lt;/code&gt; is obtained using &lt;code&gt;git describe --tags&lt;/code&gt;. &lt;code&gt;dev&lt;/code&gt; part in the version string indicates that &lt;code&gt;FFmpeg&lt;/code&gt; source code is cloned from the &lt;code&gt;FFmpeg&lt;/code&gt; &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Platforms&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FFmpegKit Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FFmpeg Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Release Date&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/react.native.v4.5.2&#34;&gt;4.5.2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;May 25, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flutter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/flutter.v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan 02, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/react.native.v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan 02, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan 01, 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/v4.5.1&#34;&gt;4.5.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-3393&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dec 30, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Flutter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/flutter.v4.5.0&#34;&gt;4.5.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-2008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Oct 05, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;React Native&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/react.native.v4.5.0&#34;&gt;4.5.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-2008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Oct 01, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;br&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/v4.5&#34;&gt;4.5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.5-dev-2008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sep 18, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;br&gt;Apple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/releases/tag/v4.4&#34;&gt;4.4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.4-dev-3015&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mar 03, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;10. LTS Releases&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; binaries are published in two release variants: &lt;code&gt;Main Release&lt;/code&gt; and &lt;code&gt;LTS Release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Main releases include complete functionality of the library and support the latest SDK/API features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LTS releases are customized to support a wider range of devices. They are built using older API/SDK versions, so some features are not available on them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This table shows the differences between two variants.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Main Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;LTS Release&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android API Level&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android Camera Access&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm-v7a-neon&lt;br&gt;arm64-v8a&lt;br&gt;x86&lt;br&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm-v7a&lt;br&gt;arm-v7a-neon&lt;br&gt;arm64-v8a&lt;br&gt;x86&lt;br&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS Min SDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS VideoToolbox&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS AVFoundation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;arm64-simulator&lt;br&gt;arm64-mac-catalyst&lt;br&gt;x86-64&lt;br&gt;x86-64-mac-catalyst&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armv7&lt;br&gt;arm64&lt;br&gt;i386&lt;br&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS Bundle Format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XCFrameworks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Frameworks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mac Catalyst Min Version&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS Min SDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS AVFoundation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;macOS Bundle Format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XCFrameworks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Frameworks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS Min SDK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS VideoToolbox&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS Architectures&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;x86-64&lt;br&gt;arm64-simulator&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;br&gt;x86-64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tvOS Bundle Format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;XCFrameworks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Frameworks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;11. Documentation&lt;/h3&gt; &#xA;&lt;p&gt;A more detailed documentation is available under &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;12. Test Applications&lt;/h3&gt; &#xA;&lt;p&gt;You can see how &lt;code&gt;FFmpegKit&lt;/code&gt; is used inside an application by running test applications created under &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit-test&#34;&gt;FFmpegKit Test&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;All applications are identical and supports command execution, video encoding, accessing https urls, encoding audio, burning subtitles, video stabilisation, pipe operations and concurrent command execution.&lt;/p&gt; &#xA;&lt;h3&gt;13. License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FFmpegKit&lt;/code&gt; is licensed under the &lt;code&gt;LGPL v3.0&lt;/code&gt;. However, if source code is built using the optional &lt;code&gt;--enable-gpl&lt;/code&gt; flag or prebuilt binaries with &lt;code&gt;-gpl&lt;/code&gt; postfix are used, then &lt;code&gt;FFmpegKit&lt;/code&gt; is subject to the &lt;code&gt;GPL v3.0&lt;/code&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/tanersener/ffmpeg-kit/wiki/License&#34;&gt;License&lt;/a&gt; wiki page for the details.&lt;/p&gt; &#xA;&lt;h3&gt;14. Patents&lt;/h3&gt; &#xA;&lt;p&gt;It is not clearly explained in their documentation, but it is believed that &lt;code&gt;FFmpeg&lt;/code&gt;, &lt;code&gt;kvazaar&lt;/code&gt;, &lt;code&gt;x264&lt;/code&gt; and &lt;code&gt;x265&lt;/code&gt; include algorithms which are subject to software patents. If you live in a country where software algorithms are patentable then you&#39;ll probably need to pay royalty fees to patent holders. We are not lawyers though, so we recommend that you seek legal advice first. See &lt;a href=&#34;https://ffmpeg.org/legal.html&#34;&gt;FFmpeg Patent Mini-FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;openh264&lt;/code&gt; clearly states that it uses patented algorithms. Therefore, if you build &lt;code&gt;ffmpeg-kit&lt;/code&gt; with &lt;code&gt;openh264&lt;/code&gt; and distribute that library, then you are subject to pay MPEG LA licensing fees. Refer to &lt;a href=&#34;https://www.openh264.org/faq.html&#34;&gt;OpenH264 FAQ&lt;/a&gt; page for the details.&lt;/p&gt; &#xA;&lt;h3&gt;15. Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to submit issues or pull requests.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;main&lt;/code&gt; includes only the latest released source code. Changes planned for the next release are developed under the &lt;code&gt;development&lt;/code&gt; branches (&lt;code&gt;development&lt;/code&gt; for native platforms, &lt;code&gt;development-react-native&lt;/code&gt; for &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;development-flutter&lt;/code&gt; for &lt;code&gt;flutter&lt;/code&gt;). Therefore, if you want to create a pull request, please open it against them.&lt;/p&gt; &#xA;&lt;h3&gt;16. See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/doxygen/4.0/index.html&#34;&gt;FFmpeg API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trac.ffmpeg.org/wiki/WikiStart&#34;&gt;FFmpeg Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/doxygen/4.0/md_LICENSE.html&#34;&gt;FFmpeg External Library Licenses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>riscv-software-src/riscv-isa-sim</title>
    <updated>2022-09-16T01:34:31Z</updated>
    <id>tag:github.com,2022-09-16:/riscv-software-src/riscv-isa-sim</id>
    <link href="https://github.com/riscv-software-src/riscv-isa-sim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spike, a RISC-V ISA Simulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spike RISC-V ISA Simulator&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Spike, the RISC-V ISA Simulator, implements a functional model of one or more RISC-V harts. It is named after the golden spike used to celebrate the completion of the US transcontinental railway.&lt;/p&gt; &#xA;&lt;p&gt;Spike supports the following RISC-V ISA features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RV32I and RV64I base ISAs, v2.1&lt;/li&gt; &#xA; &lt;li&gt;RV32E and RV64E base ISAs, v1.9&lt;/li&gt; &#xA; &lt;li&gt;Zifencei extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;Zicsr extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;M extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;A extension, v2.1&lt;/li&gt; &#xA; &lt;li&gt;F extension, v2.2&lt;/li&gt; &#xA; &lt;li&gt;D extension, v2.2&lt;/li&gt; &#xA; &lt;li&gt;Q extension, v2.2&lt;/li&gt; &#xA; &lt;li&gt;C extension, v2.0&lt;/li&gt; &#xA; &lt;li&gt;Zbkb, Zbkc, Zbkx, Zknd, Zkne, Zknh, Zksed, Zksh scalar cryptography extensions (Zk, Zkn, and Zks groups), v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zkr virtual entropy source emulation, v1.0&lt;/li&gt; &#xA; &lt;li&gt;V extension, v1.0 (&lt;em&gt;requires a 64-bit host&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;P extension, v0.9.2&lt;/li&gt; &#xA; &lt;li&gt;Zba extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zbb extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zbc extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zbs extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zfh and Zfhmin half-precision floating-point extensions, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zfinx extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zmmul integer multiplication extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Zicbom, Zicbop, Zicboz cache-block maintenance extensions, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Conformance to both RVWMO and RVTSO (Spike is sequentially consistent)&lt;/li&gt; &#xA; &lt;li&gt;Machine, Supervisor, and User modes, v1.11&lt;/li&gt; &#xA; &lt;li&gt;Hypervisor extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Svnapot extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Svpbmt extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Svinval extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;CMO extension, v1.0&lt;/li&gt; &#xA; &lt;li&gt;Debug v0.14&lt;/li&gt; &#xA; &lt;li&gt;Smepmp extension v1.0&lt;/li&gt; &#xA; &lt;li&gt;Smstateen extension, v1.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a Spike extension, the remainder of the proposed &lt;a href=&#34;https://github.com/riscv/riscv-bitmanip&#34;&gt;Bit-Manipulation Extensions&lt;/a&gt; is provided under the Spike-custom extension name &lt;em&gt;Xbitmanip&lt;/em&gt;. These instructions (and, of course, the extension name) are not RISC-V standards.&lt;/p&gt; &#xA;&lt;p&gt;These proposed bit-manipulation extensions can be split into further groups: Zbp, Zbs, Zbe, Zbf, Zbc, Zbm, Zbr, Zbt. Note that Zbc is ratified, but the original proposal contained some extra instructions (64-bit carryless multiplies) which are captured here.&lt;/p&gt; &#xA;&lt;p&gt;To enable these extensions individually, use the Spike-custom extension names &lt;em&gt;XZbp&lt;/em&gt;, &lt;em&gt;XZbs&lt;/em&gt;, &lt;em&gt;XZbc&lt;/em&gt;, and so on.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning and APIs&lt;/h2&gt; &#xA;&lt;p&gt;Projects are versioned primarily to indicate when the API has been extended or rendered incompatible. In that spirit, Spike aims to follow the &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; versioning scheme, in which major version numbers are incremented when backwards-incompatible API changes are made; minor version numbers are incremented when new APIs are added; and patch version numbers are incremented when bugs are fixed in a backwards-compatible manner.&lt;/p&gt; &#xA;&lt;p&gt;Spike&#39;s principal public API is the RISC-V ISA. &lt;em&gt;The C++ interface to Spike&#39;s internals is &lt;strong&gt;not&lt;/strong&gt; considered a public API at this time&lt;/em&gt;, and backwards-incompatible changes to this interface &lt;em&gt;will&lt;/em&gt; be made without incrementing the major version number.&lt;/p&gt; &#xA;&lt;h2&gt;Build Steps&lt;/h2&gt; &#xA;&lt;p&gt;We assume that the RISCV environment variable is set to the RISC-V tools install path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install device-tree-compiler&#xA;$ mkdir build&#xA;$ cd build&#xA;$ ../configure --prefix=$RISCV&#xA;$ make&#xA;$ [sudo] make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system uses the &lt;code&gt;yum&lt;/code&gt; package manager, you can substitute &lt;code&gt;yum install dtc&lt;/code&gt; for the first step.&lt;/p&gt; &#xA;&lt;h2&gt;Build Steps on OpenBSD&lt;/h2&gt; &#xA;&lt;p&gt;Install bash, gmake, dtc, and use clang.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pkg_add bash gmake dtc&#xA;$ exec bash&#xA;$ export CC=cc; export CXX=c++&#xA;$ mkdir build&#xA;$ cd build&#xA;$ ../configure --prefix=$RISCV&#xA;$ gmake&#xA;$ [doas] make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling and Running a Simple C Program&lt;/h2&gt; &#xA;&lt;p&gt;Install spike (see Build Steps), riscv-gnu-toolchain, and riscv-pk.&lt;/p&gt; &#xA;&lt;p&gt;Write a short C program and name it hello.c. Then, compile it into a RISC-V ELF binary named hello:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ riscv64-unknown-elf-gcc -o hello hello.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can simulate the program atop the proxy kernel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spike pk hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simulating a New Instruction&lt;/h2&gt; &#xA;&lt;p&gt;Adding an instruction to the simulator requires two steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Describe the instruction&#39;s functional behavior in the file riscv/insns/&amp;lt;new_instruction_name&amp;gt;.h. Examine other instructions in that directory as a starting point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the opcode and opcode mask to riscv/opcodes.h. Alternatively, add it to the riscv-opcodes package, and it will do so for you:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd ../riscv-opcodes&#xA; $ vi opcodes       // add a line for the new instruction&#xA; $ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rebuild the simulator.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Interactive Debug Mode&lt;/h2&gt; &#xA;&lt;p&gt;To invoke interactive debug mode, launch spike with -d:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spike -d pk hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the contents of an integer register (0 is for core 0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: reg 0 a0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the contents of a floating point register:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: fregs 0 ft0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: fregd 0 ft0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;depending upon whether you wish to print the register as single- or double-precision.&lt;/p&gt; &#xA;&lt;p&gt;To see the contents of a memory location (physical address in hex):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: mem 2020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the contents of memory with a virtual address (0 for core 0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: mem 0 2020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can advance by one instruction by pressing the enter key. You can also execute until a desired equality is reached:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: until pc 0 2020                   (stop when pc=2020)&#xA;: until reg 0 mie a                 (stop when register mie=0xa)&#xA;: until mem 2020 50a9907311096993   (stop when mem[2020]=50a9907311096993)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can execute as long as an equality is true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: while mem 2020 50a9907311096993&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can continue execution indefinitely by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At any point during execution (even without -d), you can enter the interactive debug mode with &lt;code&gt;&amp;lt;control&amp;gt;-&amp;lt;c&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To end the simulation from the debug prompt, press &lt;code&gt;&amp;lt;control&amp;gt;-&amp;lt;c&amp;gt;&lt;/code&gt; or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;: q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging With Gdb&lt;/h2&gt; &#xA;&lt;p&gt;An alternative to interactive debug mode is to attach using gdb. Because spike tries to be like real hardware, you also need OpenOCD to do that. OpenOCD doesn&#39;t currently know about address translation, so it&#39;s not possible to easily debug programs that are run under &lt;code&gt;pk&lt;/code&gt;. We&#39;ll use the following test program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat rot13.c &#xA;char text[] = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;;&#xA;&#xA;// Don&#39;t use the stack, because sp isn&#39;t set up.&#xA;volatile int wait = 1;&#xA;&#xA;int main()&#xA;{&#xA;    while (wait)&#xA;        ;&#xA;&#xA;    // Doesn&#39;t actually go on the stack, because there are lots of GPRs.&#xA;    int i = 0;&#xA;    while (text[i]) {&#xA;        char lower = text[i] | 32;&#xA;        if (lower &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;m&#39;)&#xA;            text[i] += 13;&#xA;        else if (lower &amp;gt; &#39;m&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;z&#39;)&#xA;            text[i] -= 13;&#xA;        i++;&#xA;    }&#xA;&#xA;done:&#xA;    while (!wait)&#xA;        ;&#xA;}&#xA;$ cat spike.lds &#xA;OUTPUT_ARCH( &#34;riscv&#34; )&#xA;&#xA;SECTIONS&#xA;{&#xA;  . = 0x10010000;&#xA;  .text : { *(.text) }&#xA;  .data : { *(.data) }&#xA;}&#xA;$ riscv64-unknown-elf-gcc -g -Og -o rot13-64.o -c rot13.c&#xA;$ riscv64-unknown-elf-gcc -g -Og -T spike.lds -nostartfiles -o rot13-64 rot13-64.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug this program, first run spike telling it to listen for OpenOCD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spike --rbb-port=9824 -m0x10000000:0x20000 rot13-64&#xA;Listening for remote bitbang connection on port 9824.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a separate shell run OpenOCD with the appropriate configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat spike.cfg &#xA;interface remote_bitbang&#xA;remote_bitbang_host localhost&#xA;remote_bitbang_port 9824&#xA;&#xA;set _CHIPNAME riscv&#xA;jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x10e31913&#xA;&#xA;set _TARGETNAME $_CHIPNAME.cpu&#xA;target create $_TARGETNAME riscv -chain-position $_TARGETNAME&#xA;&#xA;gdb_report_data_abort enable&#xA;&#xA;init&#xA;halt&#xA;$ openocd -f spike.cfg&#xA;Open On-Chip Debugger 0.10.0-dev-00002-gc3b344d (2017-06-08-12:14)&#xA;...&#xA;riscv.cpu: target state: halted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In yet another shell, start your gdb debug session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tnewsome@compy-vm:~/SiFive/spike-test$ riscv64-unknown-elf-gdb rot13-64&#xA;GNU gdb (GDB) 8.0.50.20170724-git&#xA;Copyright (C) 2017 Free Software Foundation, Inc.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.  Type &#34;show copying&#34;&#xA;and &#34;show warranty&#34; for details.&#xA;This GDB was configured as &#34;--host=x86_64-pc-linux-gnu --target=riscv64-unknown-elf&#34;.&#xA;Type &#34;show configuration&#34; for configuration details.&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.&#xA;Find the GDB manual and other documentation resources online at:&#xA;&amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.&#xA;For help, type &#34;help&#34;.&#xA;Type &#34;apropos word&#34; to search for commands related to &#34;word&#34;...&#xA;Reading symbols from rot13-64...done.&#xA;(gdb) target remote localhost:3333&#xA;Remote debugging using localhost:3333&#xA;0x0000000010010004 in main () at rot13.c:8&#xA;8&#x9;    while (wait)&#xA;(gdb) print wait&#xA;$1 = 1&#xA;(gdb) print wait=0&#xA;$2 = 0&#xA;(gdb) print text&#xA;$3 = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;&#xA;(gdb) b done &#xA;Breakpoint 1 at 0x10010064: file rot13.c, line 22.&#xA;(gdb) c&#xA;Continuing.&#xA;Disabling abstract command writes to CSRs.&#xA;&#xA;Breakpoint 1, main () at rot13.c:23&#xA;23&#x9;    while (!wait)&#xA;(gdb) print wait&#xA;$4 = 0&#xA;(gdb) print text&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>thradams/cake</title>
    <updated>2022-09-16T01:34:31Z</updated>
    <id>tag:github.com,2022-09-16:/thradams/cake</id>
    <link href="https://github.com/thradams/cake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cake a C23 front end and transpiler written in C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Cake is a C23 compiler front end written from scratch in C.&lt;/p&gt; &#xA;&lt;p&gt;The compiler can be used to translate new versions of C (like C23) to C99.&lt;/p&gt; &#xA;&lt;p&gt;It also can be used to try out new features for the C language.&lt;/p&gt; &#xA;&lt;p&gt;Extensions like lambdas, defer and more were implemented.&lt;/p&gt; &#xA;&lt;h1&gt;Web Playground&lt;/h1&gt; &#xA;&lt;p&gt;This is the best way to try.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://thradams.com/web3/playground.html&#34;&gt;http://thradams.com/web3/playground.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C23 preprocessor&lt;/li&gt; &#xA; &lt;li&gt;Syntax analysis&lt;/li&gt; &#xA; &lt;li&gt;Semantic analysis&lt;/li&gt; &#xA; &lt;li&gt;C backend&lt;/li&gt; &#xA; &lt;li&gt;Builds AST&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Open the Developer Command Prompt of visual studio. Go to the &lt;em&gt;src&lt;/em&gt; directory and type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cl build.c &amp;amp;&amp;amp; build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build &lt;em&gt;cake.exe&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;Got to the &lt;em&gt;src&lt;/em&gt; directory and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc build.c -o build &amp;amp;&amp;amp; ./build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run unit tests windows/linux add &lt;em&gt;-DTEST&lt;/em&gt; for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc -DTEST build.c -o build &amp;amp;&amp;amp; ./build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build web&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten &lt;a href=&#34;https://emscripten.org/&#34;&gt;https://emscripten.org/&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;p&gt;First do the normal build.&lt;/p&gt; &#xA;&lt;p&gt;The normal build also generates a file &lt;em&gt;lib.c&lt;/em&gt; that is the amalgameted version of the &#34;core lib&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Then at &lt;em&gt;./src&lt;/em&gt; dir type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;call emcc -DMOCKFILES &#34;lib.c&#34; -o &#34;Web\cake.js&#34; -s WASM=0 -s EXPORTED_FUNCTIONS=&#34;[&#39;_CompileText&#39;]&#34; -s EXTRA_EXPORTED_RUNTIME_METHODS=&#34;[&#39;ccall&#39;, &#39;cwrap&#39;]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate the &lt;em&gt;\src\Web\cake.js&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Command line&lt;/h1&gt; &#xA;&lt;p&gt;Make sure cake is on your system path.&lt;/p&gt; &#xA;&lt;p&gt;Samples&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cake source.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will ouput &lt;em&gt;./out/source.c&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/thradams/cake/main/manual.html&#34;&gt;Manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Road map&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete semantic analisys&lt;/li&gt; &#xA; &lt;li&gt;Static analysis&lt;/li&gt; &#xA; &lt;li&gt;Backend, maybe qbe &lt;a href=&#34;https://c9x.me/compile/&#34;&gt;QBE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;p&gt;A copy of each C standard draft in included in &lt;em&gt;docs&lt;/em&gt; folder. The parser is based on C23.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_C#C89&#34;&gt;https://en.wikipedia.org/wiki/ANSI_C#C89&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.cppreference.com/w/c&#34;&gt;https://en.cppreference.com/w/c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Influenced by&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Typescript&lt;/li&gt; &#xA; &lt;li&gt;Small C compilers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status?&lt;/h1&gt; &#xA;&lt;p&gt;Even if not necessary for most features, I want Cake to make a full semantic analysis.&lt;/p&gt; &#xA;&lt;p&gt;It is necessary more work it is not complete yet.&lt;/p&gt; &#xA;&lt;p&gt;One thing that is missing is check for type compatibility for instance when calling a function void F(int i) with F(1.2);&lt;/p&gt; &#xA;&lt;h1&gt;How cake is tested?&lt;/h1&gt; &#xA;&lt;p&gt;I am using Visual Studio 2022 IDE to write/debug cake source. Cake is parsing itself using the includes of MSVC and it generates the &lt;em&gt;out&lt;/em&gt; dir after build.&lt;/p&gt; &#xA;&lt;p&gt;Cake source code is not using any extension so the output is the same of input. This compilation is usefull for tracking errors.&lt;/p&gt; &#xA;&lt;p&gt;Cake uses unit tests that are called automatically.&lt;/p&gt;</summary>
  </entry>
</feed>