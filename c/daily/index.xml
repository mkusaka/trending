<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-17T01:32:03Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kimmobrunfeldt/eink-weather-display</title>
    <updated>2022-11-17T01:32:03Z</updated>
    <id>tag:github.com,2022-11-17:/kimmobrunfeldt/eink-weather-display</id>
    <link href="https://github.com/kimmobrunfeldt/eink-weather-display" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Battery-powered E-Ink weather display for our home.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eink-weather-display&lt;/h1&gt; &#xA;&lt;p&gt;Battery-powered E-Ink weather display for our home. The device wakes up early in the morning, fetches latest weather forecast information, updates the info to the E-Ink display, and goes back to deep sleep until tomorrow.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about the build in my &lt;a href=&#34;https://kimmo.blog/posts/7-building-eink-weather-display-for-our-home/&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kimmobrunfeldt/eink-weather-display/main/docs/scene.jpg&#34; alt=&#34;Picture of the display&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kimmobrunfeldt/eink-weather-display/main/docs/sunset-product.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kimmobrunfeldt/eink-weather-display/main/docs/closeup.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily glanceable weather forecast at the heart of our home. Ideally eliminates one more reason to pick up the phone.&lt;/li&gt; &#xA; &lt;li&gt;Looks like a &#34;real product&#34;. The housing should look professional.&lt;/li&gt; &#xA; &lt;li&gt;Fully battery-powered. We didn&#39;t want a visible cable, and drilling the cable inside wall wasn&#39;t an option.&lt;/li&gt; &#xA; &lt;li&gt;Always visible and doesn&#39;t light up the hallway during evening / night -&amp;gt; e-Ink display.&lt;/li&gt; &#xA; &lt;li&gt;Primarily for our use case, but with reusability in mind. For example custom location and timezone (some &lt;a href=&#34;https://raw.githubusercontent.com/kimmobrunfeldt/eink-weather-display/main/render/src/utils/utils.test.ts&#34;&gt;tests&lt;/a&gt; too).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Challenges:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Battery life. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PiJuice &lt;a href=&#34;https://github.com/PiSupply/PiJuice/issues/815&#34;&gt;GitHub isses mention&lt;/a&gt; that the deep sleep consumtion should be ~1mA, which theoretically means 12000 hours of idle time with the &lt;a href=&#34;https://uk.pi-supply.com/products/pijuice-12000mah-battery&#34;&gt;12000mAh battery&lt;/a&gt;. It remains to be seen how long it will actually last.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And due to battery constraints: low refresh speed. 1-2x per day is an interesting design challenge. How do you indicate that this data is not real time? What should we show as the day&#39;s temperature, average or maximum for the day?&lt;/li&gt; &#xA; &lt;li&gt;Physical constraints by the frame. Ideally it would be flush to the wall behind.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry PI Zero W&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uk.pi-supply.com/products/pijuice-zero&#34;&gt;PiJuice Zero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uk.pi-supply.com/products/pijuice-12000mah-battery&#34;&gt;PiJuice 12000mAh battery&lt;/a&gt;. As large as possible to avoid having to charge the device often.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.waveshare.com/10.3inch-e-paper-hat.htm&#34;&gt;Waveshare 10.3&#34; 1872x1404 e-Ink display with Raspberry PI HAT&lt;/a&gt;. Supports 16 shades of black and white.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.de/-/en/gp/product/B07MN2GY6Y/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Geekworm Raspberry Pi Installation Tool 132 Pcs&lt;/a&gt;. For a set of spacers and screws that fit Raspberry PI projects nicely.&lt;/li&gt; &#xA; &lt;li&gt;Micro-usb to USB adapter&lt;/li&gt; &#xA; &lt;li&gt;USB to micro-usb cable&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ikea.com/fi/fi/p/hovsta-kehys-ja-kehyskartonki-koivukuvio-40365762/&#34;&gt;IKEA Hovsta Frame&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Misc building items: hot glue, hair band to hold the battery, wall mounting hooks, small plastic box cut to pieces to support the battery from below, and of course duct tape.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hardware bought but not needed in the end:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.de/-/en/gp/product/B08C4S8NPH/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;GeeekPi Micro Connectors Raspberry Pi 40-pin GPIO 1 to 2 Expansion Board&lt;/a&gt;. To connect PiJuice and e-Ink display nicely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.de/-/en/gp/product/B08VRJ51T4/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;GPIO Cable for Raspberry Pi 40 Pin&lt;/a&gt;. To allow a bit more flexibility inside the build.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The project has two separate parts: render and rasp.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;render&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Generates HTML that will be eventually rendered as PNG. The image contains the weather forecast. &lt;code&gt;render&lt;/code&gt; is exposed via Google Cloud Function. It&#39;s the perfect tool for this type of task. The endpoint is quite rarely called and latencies don&#39;t matter that much.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Weather data is fetched from APIs by &lt;a href=&#34;https://en.ilmatieteenlaitos.fi/open-data-manual-api-access-csw&#34;&gt;Finnish Meteorological Institute&lt;/a&gt; and &lt;a href=&#34;https://open-meteo.com/en/docs&#34;&gt;Open Meteo&lt;/a&gt;. FMI&#39;s API had some limitations, which were covered by additional data from Meteo. For example daily weather symbols for the next 5 days.&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSS, and Headless Chrome are utilised to generate the PNG file. This part could be done with a lower-level approach, but using CSS for layouting is super convenient.&lt;/li&gt; &#xA; &lt;li&gt;The view is a purposely dumb single HTML file, which has mock data to make development easy. The mock data will be replaced with real data using DOM ids. Not having a build tool removes a lot of unnecessary complexity.&lt;/li&gt; &#xA; &lt;li&gt;All dates within the system are UTC, they are converted to local times on render. &#34;Start of day&#34; and &#34;End of day&#34; concepts are tricky.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;rasp&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs on Raspberry Pi Zero.&lt;/p&gt; &#xA;&lt;p&gt;All code related to the hardware that will display the weather image. This part doesn&#39;t know anything about weather, it just downloads a PNG from given URL and renders it on e-Ink display.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch PNG from given URL, render it to e-Ink display, and go back to idle. goes back to idle.&lt;/li&gt; &#xA; &lt;li&gt;Consumes as little power as possible&lt;/li&gt; &#xA; &lt;li&gt;Microcontroller could&#39;ve been enough, but I also wanted to finish the project in a lifetime.&lt;/li&gt; &#xA; &lt;li&gt;IT8951-ePaper code copied from &lt;a href=&#34;https://github.com/waveshare/IT8951-ePaper/&#34;&gt;https://github.com/waveshare/IT8951-ePaper/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: this is a rough guide written from memory.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most of the software lives in Google Cloud. This off-loads a lot of processing away from the Raspberry Pi device, mostly to optimize battery-life. Deployment is done via GH actions, but the initial setup was roughly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create new GCP Project&lt;/li&gt; &#xA; &lt;li&gt;Create deployment service account with Cloud Function deployment role. Set the JSON key as &lt;code&gt;GCP_SERVICE_ACCOUNT_KEY&lt;/code&gt; secret.&lt;/li&gt; &#xA; &lt;li&gt;Create another service account for Raspberry PI device. Add Cloud Logging write rights. This way the logs can be sent to GCP for debugging, because the Raspberry PI doesn&#39;t have power while sleeping.&lt;/li&gt; &#xA; &lt;li&gt;Create the Google Cloud Function, with initial hello world code. To the environvment variables, add &lt;code&gt;NODE_ENV=production&lt;/code&gt; and &lt;code&gt;API_KEY=&amp;lt;new random key&amp;gt;&lt;/code&gt;. The API key is just there to prevent random http calls to consume GCP quota. Headless Chrome rendering seems to work well with 1GB of memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Raspberry PI setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download correct image from here: &lt;a href=&#34;https://www.raspberrypi.com/software/operating-systems/b&#34;&gt;https://www.raspberrypi.com/software/operating-systems/b&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flash it to an SD card with balenaEtcher &lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;https://www.balena.io/etcher/&lt;/a&gt; (or use RPIs own flasher)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boot the raspberry, and do initial setup&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sudo raspi-config&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Setup Wifi SSID and password (System options)&lt;/li&gt; &#xA;   &lt;li&gt;Update locales, timezones, etc (Localisation options)&lt;/li&gt; &#xA;   &lt;li&gt;Enable SSH server (Interface options)&lt;/li&gt; &#xA;   &lt;li&gt;Enable overlayfs (Performance options) to make the FS read-only.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your router, make sure to assign a static local IP address for the device&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install display updating code&lt;/p&gt; &lt;p&gt;Download zip&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -H &#34;Authorization: token &amp;lt;token&amp;gt;&#34; -L https://api.github.com/repos/kimmobrunfeldt/eink-weather-display/zipball/main &amp;gt; main.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;code&gt;sudo apt install git&lt;/code&gt; and&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://&amp;lt;user&amp;gt;:&amp;lt;personal_access_token&amp;gt;@github.com/kimmobrunfeldt/eink-weather-display.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can create a limited Github personal access token, which only can clone that repo. I found git to be the easiest, it was easy to just &lt;code&gt;git pull&lt;/code&gt; any new changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sudo apt install python3-pip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;&lt;code&gt;pip install pipenv&lt;/code&gt;&lt;/del&gt; Edit: I wasn&#39;t able to get pipenv working due to pijuice being system-wide package. Ended up going with all-system-wide packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd eink-weather-display &amp;amp;&amp;amp; pip install Pillow==9.3.0 google-cloud-logging requests python-dotenv&lt;/code&gt; Install Python deps&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup env variables: &lt;code&gt;cp .env.example .env&lt;/code&gt; and fill in the details&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow installation guide from &lt;a href=&#34;https://www.waveshare.com/wiki/10.3inch_e-Paper_HAT&#34;&gt;https://www.waveshare.com/wiki/10.3inch_e-Paper_HAT&lt;/a&gt; to get the E-Ink display working&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After install, test that the demo software (in C) works&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sudo apt install pijuice-base&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable I2C interface&lt;/p&gt; &lt;p&gt;More debugging info:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PiSupply/PiJuice/issues/175&#34;&gt;https://github.com/PiSupply/PiJuice/issues/175&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PiSupply/PiJuice/issues/268&#34;&gt;https://github.com/PiSupply/PiJuice/issues/268&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To allow PIJuice to turn on without a battery, go to general settings and enable &#34;Turn on without battery&#34; or similar option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure to use correct PIJuice battery profile (PJLIPO_12000 for me)&lt;/p&gt; &lt;p&gt;If using &lt;code&gt;pijuice_cli&lt;/code&gt;, &lt;strong&gt;remember to apply changes!&lt;/strong&gt; It was quite hidden down below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test that the PIJuice works with battery too&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd rasp/IT8951&lt;/code&gt; and follow install instructions (inside virtualenv if using one)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pijuice setup using &lt;code&gt;pijuice_cli&lt;/code&gt;. Remember to save the changes inside each setup screen!&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;System events &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;del&gt;Low charge, Low battery voltage and No power: SYS_FUNC_HALT_POW_OFF (docs: &lt;a href=&#34;https://github.com/PiSupply/PiJuice/raw/master/Software/README.md#user-functions&#34;&gt;https://github.com/PiSupply/PiJuice/blob/master/Software/README.md#user-functions&lt;/a&gt;)&lt;/del&gt;. Edit: these seemed to shutdown the device every once in a while. Everything worked more stable without setting any of these.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Wake-up alarm: every day at 04:00 UTC (6AM Helsinki time in the winter, 7AM in the summer)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After that&#39;s done, you can test the PiJuice + E-Ink display together.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup crontab. Run refresh on boot, and shutdown device if on battery.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@reboot cd /home/pi/eink-weather-display/rasp &amp;amp;&amp;amp; python main.py&#xA;&#xA;# Every minute&#xA;* * * * * cd /home/pi/eink-weather-display/rasp &amp;amp;&amp;amp; python shutdown_if_on_battery.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Side note: I did all the steps until here using Raspberry PI GPIO headers. However they ended up being too tall for the frame. Instead of soldering GPIO pins to make everything fit, I checked if the IT8951 controller was possible to use via its USB interface.&lt;/p&gt; &#xA;&lt;p&gt;And fortunately, it was!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://git.sr.ht/~martijnbraam/it8951&#34;&gt;https://git.sr.ht/~martijnbraam/it8951&lt;/a&gt; at &lt;code&gt;/home/pi/usb-it8591&lt;/code&gt; directory and build it in Raspberry &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find which /dev/sdX your usb device is, and change all commands from &lt;code&gt;main.py&lt;/code&gt; accordingly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Finally, edit main.py to have correct paddings. Due to the physical installation, not all pixels of the E-Ink display are visible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refresh icon: Created by andriwidodo from The Noun Project&lt;/li&gt; &#xA; &lt;li&gt;Error by Mello from &lt;a href=&#34;https://thenounproject.com/browse/icons/term/error/&#34; target=&#34;_blank&#34; title=&#34;Error Icons&#34;&gt;Noun Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Severi Salminen for inspiration and assets &lt;a href=&#34;https://github.com/sevesalm/eInk-weather-display&#34;&gt;https://github.com/sevesalm/eInk-weather-display&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;The following files are under Apache 2.0 license:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;render/**/*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rasp/*.py&lt;/code&gt; (just top level python code, not IT8961 subdirs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Note! Since the display updates only once or twice a day, everything has been designed that in mind. The forecast always starts 9AM, and doesn&#39;t show any real observations during the day.&lt;/p&gt; &#xA;&lt;h3&gt;Developing with placeholder data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt; to tune visuals with placeholder values hardcoded within &lt;a href=&#34;https://raw.githubusercontent.com/kimmobrunfeldt/eink-weather-display/main/src/templates/index.html&#34;&gt;src/templates/index.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rendering real values&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://127.0.0.1:8080/render.html&#34;&gt;http://127.0.0.1:8080/render.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run render&lt;/code&gt; to run the CLI tool that renders HTML to &lt;code&gt;src/templates/render.html&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Calling cloud function&lt;/h3&gt; &#xA;&lt;p&gt;The cloud function and CLI support basic image operations to offload that work from Raspberry: &lt;code&gt;rotate&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;padding(Top|Right|Bottom|Left)&lt;/code&gt;, &lt;code&gt;resizeToWidth&lt;/code&gt;, &lt;code&gt;resizeToHeight&lt;/code&gt;. See &lt;a href=&#34;https://sharp.pixelplumbing.com/&#34;&gt;sharp&lt;/a&gt; for their docs. For example &lt;code&gt;--flip&lt;/code&gt; with CLI or &lt;code&gt;?flip=true&lt;/code&gt; with CF.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LAT=&#34;60.222&#34;&#xA;LON=&#34;24.83&#34;&#xA;LOCATION=&#34;Espoo&#34;&#xA;BATTERY=&#34;100&#34;&#xA;TIMEZONE=&#34;Europe/Helsinki&#34;&#xA;&#xA;curl -vv -o weather.png \&#xA;  -H &#34;x-api-key: $API_KEY&#34; \&#xA;  &#34;https://europe-west3-weather-display-367406.cloudfunctions.net/weather-display?lat=$LAT&amp;amp;lon=$LON&amp;amp;locationName=$LOCATION&amp;amp;batteryLevel=$BATTERY&amp;amp;timezone=$TIMEZONE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Random notes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open-meteo.com/en/docs/air-quality-api&#34;&gt;https://open-meteo.com/en/docs/air-quality-api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ilmatieteenlaitos.fi/latauspalvelun-pikaohje&#34;&gt;https://www.ilmatieteenlaitos.fi/latauspalvelun-pikaohje&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ilmatieteenlaitos.fi/tallennetut-kyselyt&#34;&gt;https://www.ilmatieteenlaitos.fi/tallennetut-kyselyt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.waveshare.com/wiki/10.3inch_e-Paper_HAT&#34;&gt;https://www.waveshare.com/wiki/10.3inch_e-Paper_HAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/waveshare/IT8951-ePaper&#34;&gt;https://github.com/waveshare/IT8951-ePaper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raspberrypi-guide.github.io/other/boot-automation-pijuice&#34;&gt;https://raspberrypi-guide.github.io/other/boot-automation-pijuice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ropengov.github.io/fmi2/articles/weather_observation_data.html&#34;&gt;https://ropengov.github.io/fmi2/articles/weather_observation_data.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;All fields for &lt;code&gt;fmi::forecast::harmonie::surface::point::simple&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The model can return data up to 50h from now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Pressure&#34;: 1015.7,&#xA;  &#34;GeopHeight&#34;: 26.3,&#xA;  &#34;Temperature&#34;: 6.4,&#xA;  &#34;DewPoint&#34;: 4.9,&#xA;  &#34;Humidity&#34;: 92.8,&#xA;  &#34;WindDirection&#34;: 127,&#xA;  &#34;WindSpeedMS&#34;: 1.97,&#xA;  &#34;WindUMS&#34;: -1.37,&#xA;  &#34;WindVMS&#34;: 1.37,&#xA;  &#34;PrecipitationAmount&#34;: 0.38,&#xA;  &#34;TotalCloudCover&#34;: 100,&#xA;  &#34;LowCloudCover&#34;: 100,&#xA;  &#34;MediumCloudCover&#34;: 0,&#xA;  &#34;HighCloudCover&#34;: 58.9,&#xA;  &#34;RadiationGlobal&#34;: 4.4,&#xA;  &#34;RadiationGlobalAccumulation&#34;: 682913.3,&#xA;  &#34;RadiationNetSurfaceLWAccumulation&#34;: -1537350,&#xA;  &#34;RadiationNetSurfaceSWAccumulation&#34;: 613723.9,&#xA;  &#34;RadiationSWAccumulation&#34;: 14.2,&#xA;  &#34;Visibility&#34;: 7441.7,&#xA;  &#34;WindGust&#34;: 3.6,&#xA;  &#34;time&#34;: &#34;2022-11-02T07:00:00.000Z&#34;,&#xA;  &#34;location&#34;: {&#xA;    &#34;lat&#34;: 60.222,&#xA;    &#34;lon&#34;: 24.83&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All fields for &lt;code&gt;ecmwf::forecast::surface::point::simple&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The model can return data up to 10 days from now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;GeopHeight&#34;: 37.6,&#xA;  &#34;Temperature&#34;: 5.8,&#xA;  &#34;Pressure&#34;: 1016,&#xA;  &#34;Humidity&#34;: 95.7,&#xA;  &#34;WindDirection&#34;: null,&#xA;  &#34;WindSpeedMS&#34;: null,&#xA;  &#34;WindUMS&#34;: -1.8,&#xA;  &#34;WindVMS&#34;: -0.1,&#xA;  &#34;MaximumWind&#34;: null,&#xA;  &#34;WindGust&#34;: null,&#xA;  &#34;DewPoint&#34;: null,&#xA;  &#34;TotalCloudCover&#34;: null,&#xA;  &#34;WeatherSymbol3&#34;: null,&#xA;  &#34;LowCloudCover&#34;: null,&#xA;  &#34;MediumCloudCover&#34;: null,&#xA;  &#34;HighCloudCover&#34;: null,&#xA;  &#34;Precipitation1h&#34;: 0,&#xA;  &#34;PrecipitationAmount&#34;: null,&#xA;  &#34;RadiationGlobalAccumulation&#34;: null,&#xA;  &#34;RadiationLWAccumulation&#34;: null,&#xA;  &#34;RadiationNetSurfaceLWAccumulation&#34;: null,&#xA;  &#34;RadiationNetSurfaceSWAccumulation&#34;: null,&#xA;  &#34;RadiationDiffuseAccumulation&#34;: null,&#xA;  &#34;LandSeaMask&#34;: null,&#xA;  &#34;time&#34;: &#34;2022-11-02T07:00:00.000Z&#34;,&#xA;  &#34;location&#34;: {&#xA;    &#34;lat&#34;: 2764063,&#xA;    &#34;lon&#34;: 8449330.5&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All fields for &lt;code&gt;fmi::observations::weather::hourly::simple&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opendata.fmi.fi/wfs?service=WFS&amp;amp;version=2.0.0&amp;amp;request=getFeature&amp;amp;storedquery_id=fmi::observations::weather::hourly::simple&amp;amp;place=helsinki&amp;amp;&#34;&gt;https://opendata.fmi.fi/wfs?service=WFS&amp;amp;version=2.0.0&amp;amp;request=getFeature&amp;amp;storedquery_id=fmi::observations::weather::hourly::simple&amp;amp;place=helsinki&amp;amp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Observations are returned 24 hours in past.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;TA_PT1H_AVG&#34;: 1.9,&#xA;  &#34;WS_PT1H_AVG&#34;: 1.5,&#xA;  &#34;WD_PT1H_AVG&#34;: 205,&#xA;  &#34;PRA_PT1H_ACC&#34;: 0,&#xA;  &#34;time&#34;: &#34;2022-11-14T08:00:00.000Z&#34;,&#xA;  &#34;location&#34;: {&#xA;    &#34;lat&#34;: 60.17797,&#xA;    &#34;lon&#34;: 24.78743&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ParameterName descriptions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;variable&lt;/th&gt; &#xA;   &lt;th&gt;label&lt;/th&gt; &#xA;   &lt;th&gt;base_phenomenon&lt;/th&gt; &#xA;   &lt;th&gt;unit&lt;/th&gt; &#xA;   &lt;th&gt;stat_function&lt;/th&gt; &#xA;   &lt;th&gt;agg_period&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;TA_PT1H_AVG&lt;/td&gt; &#xA;   &lt;td&gt;Air temperature&lt;/td&gt; &#xA;   &lt;td&gt;Temperature&lt;/td&gt; &#xA;   &lt;td&gt;degC&lt;/td&gt; &#xA;   &lt;td&gt;avg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;TA_PT1H_MAX&lt;/td&gt; &#xA;   &lt;td&gt;Highest temperature&lt;/td&gt; &#xA;   &lt;td&gt;Temperature&lt;/td&gt; &#xA;   &lt;td&gt;degC&lt;/td&gt; &#xA;   &lt;td&gt;max&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;TA_PT1H_MIN&lt;/td&gt; &#xA;   &lt;td&gt;Lowest temperature&lt;/td&gt; &#xA;   &lt;td&gt;Temperature&lt;/td&gt; &#xA;   &lt;td&gt;degC&lt;/td&gt; &#xA;   &lt;td&gt;min&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;RH_PT1H_AVG&lt;/td&gt; &#xA;   &lt;td&gt;Relative humidity&lt;/td&gt; &#xA;   &lt;td&gt;Humidity&lt;/td&gt; &#xA;   &lt;td&gt;%&lt;/td&gt; &#xA;   &lt;td&gt;avg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;WS_PT1H_AVG&lt;/td&gt; &#xA;   &lt;td&gt;Wind speed&lt;/td&gt; &#xA;   &lt;td&gt;Wind&lt;/td&gt; &#xA;   &lt;td&gt;m/s&lt;/td&gt; &#xA;   &lt;td&gt;avg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;WS_PT1H_MAX&lt;/td&gt; &#xA;   &lt;td&gt;Maximum wind speed&lt;/td&gt; &#xA;   &lt;td&gt;Wind&lt;/td&gt; &#xA;   &lt;td&gt;m/s&lt;/td&gt; &#xA;   &lt;td&gt;max&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;WS_PT1H_MIN&lt;/td&gt; &#xA;   &lt;td&gt;Minimum wind speed&lt;/td&gt; &#xA;   &lt;td&gt;Wind&lt;/td&gt; &#xA;   &lt;td&gt;m/s&lt;/td&gt; &#xA;   &lt;td&gt;min&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;WD_PT1H_AVG&lt;/td&gt; &#xA;   &lt;td&gt;Wind direction&lt;/td&gt; &#xA;   &lt;td&gt;Wind&lt;/td&gt; &#xA;   &lt;td&gt;deg&lt;/td&gt; &#xA;   &lt;td&gt;avg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;PRA_PT1H_ACC&lt;/td&gt; &#xA;   &lt;td&gt;Precipitation amount&lt;/td&gt; &#xA;   &lt;td&gt;Amount of precipitation&lt;/td&gt; &#xA;   &lt;td&gt;mm&lt;/td&gt; &#xA;   &lt;td&gt;acc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;PRI_PT1H_MAX&lt;/td&gt; &#xA;   &lt;td&gt;Maximum precipitation intensity&lt;/td&gt; &#xA;   &lt;td&gt;Amount of precipitation&lt;/td&gt; &#xA;   &lt;td&gt;mm/h&lt;/td&gt; &#xA;   &lt;td&gt;max&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;PA_PT1H_AVG&lt;/td&gt; &#xA;   &lt;td&gt;Air pressure&lt;/td&gt; &#xA;   &lt;td&gt;Air pressure&lt;/td&gt; &#xA;   &lt;td&gt;hPa&lt;/td&gt; &#xA;   &lt;td&gt;avg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;WAWA_PT1H_RANK&lt;/td&gt; &#xA;   &lt;td&gt;Present weather (auto)&lt;/td&gt; &#xA;   &lt;td&gt;Weather&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rank&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>rxi/log.c</title>
    <updated>2022-11-17T01:32:03Z</updated>
    <id>tag:github.com,2022-11-17:/rxi/log.c</id>
    <link href="https://github.com/rxi/log.c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple logging library implemented in C99&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;log.c&lt;/h1&gt; &#xA;&lt;p&gt;A simple logging library implemented in C99&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3920290/23831970/a2415e96-0723-11e7-9886-f8f5d2de60fe.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxi/log.c/master/src/log.c?raw=1&#34;&gt;log.c&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxi/log.c/master/src/log.h?raw=1&#34;&gt;log.h&lt;/a&gt;&lt;/strong&gt; should be dropped into an existing project and compiled along with it. The library provides 6 function-like macros for logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;log_trace(const char *fmt, ...);&#xA;log_debug(const char *fmt, ...);&#xA;log_info(const char *fmt, ...);&#xA;log_warn(const char *fmt, ...);&#xA;log_error(const char *fmt, ...);&#xA;log_fatal(const char *fmt, ...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each function takes a printf format string followed by additional arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;log_trace(&#34;Hello %s&#34;, &#34;world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resulting in a line with the given format printed to stderr:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;20:18:26 TRACE src/main.c:11: Hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;log_set_quiet(bool enable)&lt;/h4&gt; &#xA;&lt;p&gt;Quiet-mode can be enabled by passing &lt;code&gt;true&lt;/code&gt; to the &lt;code&gt;log_set_quiet()&lt;/code&gt; function. While this mode is enabled the library will not output anything to &lt;code&gt;stderr&lt;/code&gt;, but will continue to write to files and callbacks if any are set.&lt;/p&gt; &#xA;&lt;h4&gt;log_set_level(int level)&lt;/h4&gt; &#xA;&lt;p&gt;The current logging level can be set by using the &lt;code&gt;log_set_level()&lt;/code&gt; function. All logs below the given level will not be written to &lt;code&gt;stderr&lt;/code&gt;. By default the level is &lt;code&gt;LOG_TRACE&lt;/code&gt;, such that nothing is ignored.&lt;/p&gt; &#xA;&lt;h4&gt;log_add_fp(FILE *fp, int level)&lt;/h4&gt; &#xA;&lt;p&gt;One or more file pointers where the log will be written can be provided to the library by using the &lt;code&gt;log_add_fp()&lt;/code&gt; function. The data written to the file output is of the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2047-03-11 20:18:26 TRACE src/main.c:11: Hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any messages below the given &lt;code&gt;level&lt;/code&gt; are ignored. If the library failed to add a file pointer a value less-than-zero is returned.&lt;/p&gt; &#xA;&lt;h4&gt;log_add_callback(log_LogFn fn, void *udata, int level)&lt;/h4&gt; &#xA;&lt;p&gt;One or more callback functions which are called with the log data can be provided to the library by using the &lt;code&gt;log_add_callback()&lt;/code&gt; function. A callback function is passed a &lt;code&gt;log_Event&lt;/code&gt; structure containing the &lt;code&gt;line&lt;/code&gt; number, &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;fmt&lt;/code&gt; string, &lt;code&gt;va&lt;/code&gt; printf va_list, &lt;code&gt;level&lt;/code&gt; and the given &lt;code&gt;udata&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;log_set_lock(log_LockFn fn, void *udata)&lt;/h4&gt; &#xA;&lt;p&gt;If the log will be written to from multiple threads a lock function can be set. The function is passed the boolean &lt;code&gt;true&lt;/code&gt; if the lock should be acquired or &lt;code&gt;false&lt;/code&gt; if the lock should be released and the given &lt;code&gt;udata&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;h4&gt;const char* log_level_string(int level)&lt;/h4&gt; &#xA;&lt;p&gt;Returns the name of the given log level as a string.&lt;/p&gt; &#xA;&lt;h4&gt;LOG_USE_COLOR&lt;/h4&gt; &#xA;&lt;p&gt;If the library is compiled with &lt;code&gt;-DLOG_USE_COLOR&lt;/code&gt; ANSI color escape codes will be used when printing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the terms of the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/rxi/log.c/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>