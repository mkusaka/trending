<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-19T01:29:47Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tpunix/SAROO</title>
    <updated>2024-05-19T01:29:47Z</updated>
    <id>tag:github.com,2024-05-19:/tpunix/SAROO</id>
    <link href="https://github.com/tpunix/SAROO" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SAROO is a SEGA Saturn HDloader&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;SAROO is a HDLoader for SEGA Saturn.&lt;/h3&gt; &#xA;&lt;p&gt;SAROO是一个土星光驱模拟器。SAROO插在卡槽上，实现原主板的CDBLOCK的功能，从SD卡装载游戏并运行。 SAROO同时还提供1MB/4MB加速卡功能。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;一些图片&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/saroo_v12_top.jpg&#34; width=&#34;48%/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/saroo_v12_bot.jpg&#34; width=&#34;48%/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/saroo_scr1.png&#34; width=&#34;48%/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/saroo_scr2.png&#34; width=&#34;48%/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/saroo_dev1.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/saroo_devhw.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;开发历史&lt;/h3&gt; &#xA;&lt;h4&gt;V1.0&lt;/h4&gt; &#xA;&lt;p&gt;最初的SAROO仅仅是在常见的usbdevcart上增加了一个usbhost接口。需要对游戏主程序进行破解，将对CDBLOCK的操作转化为对U盘的操作。 这种方式需要针对每一个游戏做修改，不具备通用性。性能与稳定性也有很大问题。只有很少的几个游戏通过这种方式跑起来了。 (V1.0相关的文件未包括在本项目中)&lt;/p&gt; &#xA;&lt;h4&gt;V1.1&lt;/h4&gt; &#xA;&lt;p&gt;新版本做了全新的设计。采用FPGA+MCU的方式。FPGA(EP4CE6)用来实现CDBLOCK的硬件接口，MCU(STM32F103)运行固件来处理各种CDBLOCK命令。 这个版本基本达到了预期的目的，也有游戏几乎能运行了。但也有一个致命的问题: 随机的数据错误。在播放片头动画时会出现各种马赛克， 并最终死掉。这个问题很难调试定位。这导致了本项目停滞了很长时间。&lt;/p&gt; &#xA;&lt;h4&gt;V1.2&lt;/h4&gt; &#xA;&lt;p&gt;1.2版本是1.1版本的bugfix与性能提升，使用了更高性能的MCU:STM32H750。它频率足够高(400MHz)，内部有足够大的SRAM，可以容纳完整的CDC缓存。 FPGA内部也经过重构，抛弃了qsys系统，使用自己实现的SDRAM与总线结构。这个版本不负众望，已经是接近完美的状态了。 同时，通过把FPGA与MCU固件逆移植到V1.1硬件之上，V1.1也基本达到了V1.2的性能了。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;当前状态&lt;/h3&gt; &#xA;&lt;p&gt;测试的几十个游戏可以完美运行。&lt;br&gt; 1MB/4MB加速卡功能可以正常使用。&lt;br&gt; SD卡支持FAT32/ExFAT文件系统。&lt;br&gt; 支持cue/bin格式的镜像文件。单bin或多bin。&lt;br&gt; 部分游戏会卡在加载/片头动画界面。&lt;br&gt; 部分游戏会卡在进行游戏时。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;硬件与固件&lt;/h3&gt; &#xA;&lt;p&gt;原理图与PCB使用AltiumDesign14制作。&lt;br&gt; V1.1版本需要飞线才能正常工作。不应该再使用这个版本了。&lt;br&gt; V1.2版本仍然需要额外的一个上拉电阻以使用FPGA的AS配置方式。&lt;/p&gt; &#xA;&lt;p&gt;FPGA使用Quartus14.0开发。&lt;/p&gt; &#xA;&lt;p&gt;Firm_Saturn使用SaturnOrbit自带的SH-ELF编译器编译。&lt;br&gt; Firm_v11使用MDK4编译。&lt;br&gt; Firm_V12使用MDK5编译。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;SD卡文件放置&lt;/h3&gt; &#xA;&lt;pre&gt;&#xA;/ramimage.bin      ;Saturn的固件程序.&#xA;/SAROO/ISO/        ;存放游戏镜像. 每个目录放一个游戏. 目录名将显示在菜单中.&#xA;/SAROO/update/     ;存放用于升级的固件.&#xA;                   ;  FPGA: SSMaster.rbf&#xA;                   ;  MCU : ssmaster.bin&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;一些开发中的记录: &lt;a href=&#34;https://raw.githubusercontent.com/tpunix/SAROO/master/doc/SAROO%E6%8A%80%E6%9C%AF%E7%82%B9%E6%BB%B4.txt&#34;&gt;SAROO技术点滴&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0xNinjaCyclone/hellMaker</title>
    <updated>2024-05-19T01:29:47Z</updated>
    <id>tag:github.com,2024-05-19:/0xNinjaCyclone/hellMaker</id>
    <link href="https://github.com/0xNinjaCyclone/hellMaker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate FUD backdoors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hellMaker&lt;/h1&gt; &#xA;&lt;p&gt;hellMaker is a tool for generating fully undetectable malwares for any C&amp;amp;C tool you want, it uses several evasion techniques.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shellcode encryption using xor method&lt;/li&gt; &#xA; &lt;li&gt;shellcode UUID Obfuscation&lt;/li&gt; &#xA; &lt;li&gt;IAT Hiding &amp;amp; Obfuscation&lt;/li&gt; &#xA; &lt;li&gt;Bypass memory monitoring&lt;/li&gt; &#xA; &lt;li&gt;Evade behavior analysis and sandbox using several techniques&lt;/li&gt; &#xA; &lt;li&gt;Obfuscate all static stuff using random key&lt;/li&gt; &#xA; &lt;li&gt;Anti Debugging&lt;/li&gt; &#xA; &lt;li&gt;Process UnHooking&lt;/li&gt; &#xA; &lt;li&gt;Get ntdll base address without using GetModuleHandle/LoadLibrary&lt;/li&gt; &#xA; &lt;li&gt;No new thread execution&lt;/li&gt; &#xA; &lt;li&gt;Both x64\x86 are supported&lt;/li&gt; &#xA; &lt;li&gt;Support stageless payloads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;You must run payloads from cmd.exe or powershell.exe.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git clone this repo&lt;/li&gt; &#xA; &lt;li&gt;Change dir into the folder&lt;/li&gt; &#xA; &lt;li&gt;The tool doesn&#39;t require any dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;python3 hellMaker.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, you need to create a raw shellcode using the C2 tool you prefer,&lt;br&gt; then run the tool and enter the shellcode and Encryption key and the output filename.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌──(user㉿hostname)-[~/path/to/hellMaker]&#xA;└─$ python3 hellMaker.py&#xA;&#xA;         _          _ _ __  __       _             &#xA;        | |__   ___| | |  \/  | __ _| | _____ _ __ &#xA;        | &#39;_ \ / _ \ | | |\/| |/ _` | |/ / _ \ &#39;__|&#xA;        | | | |  __/ | | |  | | (_| |   &amp;lt;  __/ |   &#xA;        |_| |_|\___|_|_|_|  |_|\__,_|_|\_\___|_|   &#xA;                Author -&amp;gt; Abdallah Mohamed                                        &#xA;&#xA;    &#xA;        Usage:&#xA;                ./hellMaker.py &amp;lt;path/to/shellcode.bin&amp;gt; &amp;lt;EncryptionKey&amp;gt; &amp;lt;Output.c&amp;gt;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xNinjaCyclone/hellMaker/main/imgs/Run.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xNinjaCyclone/hellMaker/main/imgs/FUD.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cl &amp;lt;payload&amp;gt;.c&lt;/code&gt; using visual studio&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;I am not responsible for any of your actions, this tool for educational purposes only.&lt;/p&gt;</summary>
  </entry>
</feed>