<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-15T01:29:17Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator</title>
    <updated>2024-01-15T01:29:17Z</updated>
    <id>tag:github.com,2024-01-15:/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator</id>
    <link href="https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to integrate Vulkan memory allocation library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vulkan Memory Allocator&lt;/h1&gt; &#xA;&lt;p&gt;Easy to integrate Vulkan memory allocation library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; Browse online: &lt;a href=&#34;https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/&#34;&gt;Vulkan Memory Allocator&lt;/a&gt; (generated from Doxygen-style comments in &lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/master/include/vk_mem_alloc.h&#34;&gt;include/vk_mem_alloc.h&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;License:&lt;/strong&gt; MIT. See &lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Changelog:&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Product page:&lt;/strong&gt; &lt;a href=&#34;https://gpuopen.com/gaming-product/vulkan-memory-allocator/&#34;&gt;Vulkan Memory Allocator on GPUOpen&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build status:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://ci.appveyor.com/project/adam-sawicki-amd/vulkanmemoryallocator/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/4vlcrb0emkaio2pn/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;a href=&#34;https://app.travis-ci.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://isitmaintained.com/project/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Problem&lt;/h1&gt; &#xA;&lt;p&gt;Memory allocation and resource (buffer and image) creation in Vulkan is difficult (comparing to older graphics APIs, like D3D11 or OpenGL) for several reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It requires a lot of boilerplate code, just like everything else in Vulkan, because it is a low-level and high-performance API.&lt;/li&gt; &#xA; &lt;li&gt;There is additional level of indirection: &lt;code&gt;VkDeviceMemory&lt;/code&gt; is allocated separately from creating &lt;code&gt;VkBuffer&lt;/code&gt;/&lt;code&gt;VkImage&lt;/code&gt; and they must be bound together.&lt;/li&gt; &#xA; &lt;li&gt;Driver must be queried for supported memory heaps and memory types. Different GPU vendors provide different types of it.&lt;/li&gt; &#xA; &lt;li&gt;It is recommended to allocate bigger chunks of memory and assign parts of them to particular resources, as there is a limit on maximum number of memory blocks that can be allocated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;This library can help game developers to manage memory allocations and resource creation by offering some higher-level functions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Functions that help to choose correct and optimal memory type based on intended usage of the memory. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required or preferred traits of the memory are expressed using higher-level description comparing to Vulkan flags.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Functions that allocate memory blocks, reserve and return parts of them (&lt;code&gt;VkDeviceMemory&lt;/code&gt; + offset + size) to the user. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Library keeps track of allocated memory blocks, used and unused ranges inside them, finds best matching unused ranges for new allocations, respects all the rules of alignment and buffer/image granularity.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Functions that can create an image/buffer, allocate memory for it and bind them together - all in one call.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Well-documented - description of all functions and structures provided, along with chapters that contain general description and example code.&lt;/li&gt; &#xA; &lt;li&gt;Thread-safety: Library is designed to be used in multithreaded code. Access to a single device memory block referred by different buffers and textures (binding, mapping) is synchronized internally. Memory mapping is reference-counted.&lt;/li&gt; &#xA; &lt;li&gt;Configuration: Fill optional members of &lt;code&gt;VmaAllocatorCreateInfo&lt;/code&gt; structure to provide custom CPU memory allocator, pointers to Vulkan functions and other parameters.&lt;/li&gt; &#xA; &lt;li&gt;Customization and integration with custom engines: Predefine appropriate macros to provide your own implementation of all external facilities used by the library like assert, mutex, atomic.&lt;/li&gt; &#xA; &lt;li&gt;Support for memory mapping, reference-counted internally. Support for persistently mapped memory: Just allocate with appropriate flag and access the pointer to already mapped memory.&lt;/li&gt; &#xA; &lt;li&gt;Support for non-coherent memory. Functions that flush/invalidate memory. &lt;code&gt;nonCoherentAtomSize&lt;/code&gt; is respected automatically.&lt;/li&gt; &#xA; &lt;li&gt;Support for resource aliasing (overlap).&lt;/li&gt; &#xA; &lt;li&gt;Support for sparse binding and sparse residency: Convenience functions that allocate or free multiple memory pages at once.&lt;/li&gt; &#xA; &lt;li&gt;Custom memory pools: Create a pool with desired parameters (e.g. fixed or limited maximum size) and allocate memory out of it.&lt;/li&gt; &#xA; &lt;li&gt;Linear allocator: Create a pool with linear algorithm and use it for much faster allocations and deallocations in free-at-once, stack, double stack, or ring buffer fashion.&lt;/li&gt; &#xA; &lt;li&gt;Support for Vulkan 1.0, 1.1, 1.2, 1.3.&lt;/li&gt; &#xA; &lt;li&gt;Support for extensions (and equivalent functionality included in new Vulkan versions): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VK_KHR_dedicated_allocation: Just enable it and it will be used automatically by the library.&lt;/li&gt; &#xA;   &lt;li&gt;VK_KHR_buffer_device_address: Flag &lt;code&gt;VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR&lt;/code&gt; is automatically added to memory allocations where needed.&lt;/li&gt; &#xA;   &lt;li&gt;VK_EXT_memory_budget: Used internally if available to query for current usage and budget. If not available, it falls back to an estimation based on memory heap sizes.&lt;/li&gt; &#xA;   &lt;li&gt;VK_EXT_memory_priority: Set &lt;code&gt;priority&lt;/code&gt; of allocations or custom pools and it will be set automatically using this extension.&lt;/li&gt; &#xA;   &lt;li&gt;VK_AMD_device_coherent_memory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Defragmentation of GPU and CPU memory: Let the library move data around to free some memory blocks and make your allocations better compacted.&lt;/li&gt; &#xA; &lt;li&gt;Statistics: Obtain brief or detailed statistics about the amount of memory used, unused, number of allocated blocks, number of allocations etc. - globally, per memory heap, and per memory type.&lt;/li&gt; &#xA; &lt;li&gt;Debug annotations: Associate custom &lt;code&gt;void* pUserData&lt;/code&gt; and debug &lt;code&gt;char* pName&lt;/code&gt; with each allocation.&lt;/li&gt; &#xA; &lt;li&gt;JSON dump: Obtain a string in JSON format with detailed map of internal state, including list of allocations, their string names, and gaps between them.&lt;/li&gt; &#xA; &lt;li&gt;Convert this JSON dump into a picture to visualize your memory. See &lt;a href=&#34;https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/master/tools/GpuMemDumpVis/README.md&#34;&gt;tools/GpuMemDumpVis&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Debugging incorrect memory usage: Enable initialization of all allocated memory with a bit pattern to detect usage of uninitialized or freed memory. Enable validation of a magic number after every allocation to detect out-of-bounds memory corruption.&lt;/li&gt; &#xA; &lt;li&gt;Support for interoperability with OpenGL.&lt;/li&gt; &#xA; &lt;li&gt;Virtual allocator: Interface for using core allocation algorithm to allocate any custom data, e.g. pieces of one large buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Self-contained C++ library in single header file. No external dependencies other than standard C and C++ library and of course Vulkan. Some features of C++14 used. STL containers, RTTI, or C++ exceptions are not used.&lt;/li&gt; &#xA; &lt;li&gt;Public interface in C, in same convention as Vulkan API. Implementation in C++.&lt;/li&gt; &#xA; &lt;li&gt;Error handling implemented by returning &lt;code&gt;VkResult&lt;/code&gt; error codes - same way as in Vulkan.&lt;/li&gt; &#xA; &lt;li&gt;Interface documented using Doxygen-style comments.&lt;/li&gt; &#xA; &lt;li&gt;Platform-independent, but developed and tested on Windows using Visual Studio. Continuous integration setup for Windows and Linux. Used also on Android, MacOS, and other platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;Basic usage of this library is very simple. Advanced features are optional. After you created global &lt;code&gt;VmaAllocator&lt;/code&gt; object, a complete code needed to create a buffer may look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;VkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };&#xA;bufferInfo.size = 65536;&#xA;bufferInfo.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;&#xA;&#xA;VmaAllocationCreateInfo allocInfo = {};&#xA;allocInfo.usage = VMA_MEMORY_USAGE_AUTO;&#xA;&#xA;VkBuffer buffer;&#xA;VmaAllocation allocation;&#xA;vmaCreateBuffer(allocator, &amp;amp;bufferInfo, &amp;amp;allocInfo, &amp;amp;buffer, &amp;amp;allocation, nullptr);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this one function call:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;VkBuffer&lt;/code&gt; is created.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VkDeviceMemory&lt;/code&gt; block is allocated if needed.&lt;/li&gt; &#xA; &lt;li&gt;An unused region of the memory block is bound to this buffer.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;VmaAllocation&lt;/code&gt; is an object that represents memory assigned to this buffer. It can be queried for parameters like &lt;code&gt;VkDeviceMemory&lt;/code&gt; handle and offset.&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;On Windows it is recommended to use &lt;a href=&#34;https://cmake.org/runningcmake/&#34;&gt;CMake GUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can generate/open a Visual Studio from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# By default CMake picks the newest version of Visual Studio it can use&#xA;cmake -S .  -B build -D VMA_BUILD_SAMPLES=ON&#xA;cmake --open build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -S . -B build&#xA;# Since VMA has no source files, you can skip to installation immediately&#xA;cmake --install build --prefix build/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;After calling either &lt;code&gt;find_package&lt;/code&gt; or &lt;code&gt;add_subdirectory&lt;/code&gt; simply link the library. This automatically handles configuring the include directory. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(VulkanMemoryAllocator CONFIG REQUIRED)&#xA;target_link_libraries(YourGameEngine PRIVATE GPUOpen::VulkanMemoryAllocator)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more info on using CMake visit the official &lt;a href=&#34;https://cmake.org/cmake/help/latest/index.html&#34;&gt;CMake documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building using vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install VulkanMemoryAllocator using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install vulkan-memory-allocator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The VulkanMemoryAllocator port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h1&gt;Binaries&lt;/h1&gt; &#xA;&lt;p&gt;The release comes with precompiled binary executable for &#34;VulkanSample&#34; application which contains test suite. It is compiled using Visual Studio 2019, so it requires appropriate libraries to work, including &#34;MSVCP140.dll&#34;, &#34;VCRUNTIME140.dll&#34;, &#34;VCRUNTIME140_1.dll&#34;. If the launch fails with error message telling about those files missing, please download and install &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019&lt;/a&gt;, &#34;x64&#34; version.&lt;/p&gt; &#xA;&lt;h1&gt;Read more&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;strong&gt;&lt;a href=&#34;https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Software using this library&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.blender.org&#34;&gt;Blender&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://x-plane.com/&#34;&gt;X-Plane&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gpuopen.com/learn/porting-detroit-3/&#34;&gt;Detroit: Become Human&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/LunarG/VulkanSamples&#34;&gt;Vulkan Samples&lt;/a&gt;&lt;/strong&gt; - official Khronos Vulkan samples. License: Apache-style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/GPUOpen-LibrariesAndSDKs/Anvil&#34;&gt;Anvil&lt;/a&gt;&lt;/strong&gt; - cross-platform framework for Vulkan. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/google/filament&#34;&gt;Filament&lt;/a&gt;&lt;/strong&gt; - physically based rendering engine for Android, Windows, Linux and macOS, from Google. Apache License 2.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.samsung.com/galaxy-gamedev/gamedev-blog/infinitejet.html&#34;&gt;Atypical Games - proprietary game engine&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://flaxengine.com/&#34;&gt;Flax Engine&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/godotengine/godot/&#34;&gt;Godot Engine&lt;/a&gt;&lt;/strong&gt; - multi-platform 2D and 3D game engine. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.lwjgl.org/&#34;&gt;Lightweight Java Game Library (LWJGL)&lt;/a&gt;&lt;/strong&gt; - includes binding of the library for Java. License: BSD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/corporateshark/lightweightvk&#34;&gt;LightweightVK&lt;/a&gt;&lt;/strong&gt; - lightweight C++ bindless Vulkan 1.3 wrapper. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/powervr-graphics/Native_SDK&#34;&gt;PowerVR SDK&lt;/a&gt;&lt;/strong&gt; - C++ cross-platform 3D graphics SDK, from Imagination. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/google/skia&#34;&gt;Skia&lt;/a&gt;&lt;/strong&gt; - complete 2D graphic library for drawing Text, Geometries, and Images, from Google.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ConfettiFX/The-Forge&#34;&gt;The Forge&lt;/a&gt;&lt;/strong&gt; - cross-platform rendering framework. Apache License 2.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/disks86/VK9&#34;&gt;VK9&lt;/a&gt;&lt;/strong&gt; - Direct3D 9 compatibility layer using Vulkan. Zlib lincese.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/DustinHLand/vkDOOM3&#34;&gt;vkDOOM3&lt;/a&gt;&lt;/strong&gt; - Vulkan port of GPL DOOM 3 BFG Edition. License: GNU GPL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/kondrak/vkQuake2&#34;&gt;vkQuake2&lt;/a&gt;&lt;/strong&gt; - vanilla Quake 2 with Vulkan support. License: GNU GPL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers&#34;&gt;Vulkan Best Practice for Mobile Developers&lt;/a&gt;&lt;/strong&gt; from ARM. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/RPCS3/rpcs3&#34;&gt;RPCS3&lt;/a&gt;&lt;/strong&gt; - PlayStation 3 emulator/debugger. License: GNU GPLv2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/hrydgard/ppsspp&#34;&gt;PPSSPP&lt;/a&gt;&lt;/strong&gt; - Playstation Portable emulator/debugger. License: GNU GPLv2+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/turanszkij/WickedEngine&#34;&gt;Wicked Engine&lt;img src=&#34;https://github.com/turanszkij/WickedEngine/raw/master/Content/logo_small.png&#34; width=&#34;28px&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/strong&gt; - 3D engine with modern graphics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=AMD_VULKAN_MEMORY_ALLOCATOR_H&amp;amp;type=Code&#34;&gt;Many other projects on GitHub&lt;/a&gt; and some game development studios that use Vulkan in their games.&lt;/p&gt; &#xA;&lt;h1&gt;See also&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/GPUOpen-LibrariesAndSDKs/D3D12MemoryAllocator&#34;&gt;D3D12 Memory Allocator&lt;/a&gt;&lt;/strong&gt; - equivalent library for Direct3D 12. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/vinjn/awesome-vulkan&#34;&gt;Awesome Vulkan&lt;/a&gt;&lt;/strong&gt; - a curated list of awesome Vulkan libraries, debuggers and resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;&lt;/strong&gt; dependency manager from Microsoft also offers a port of this library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/YaaZ/VulkanMemoryAllocator-Hpp&#34;&gt;VulkanMemoryAllocator-Hpp&lt;/a&gt;&lt;/strong&gt; - C++ binding for this library. License: CC0-1.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/realitix/pyvma&#34;&gt;PyVMA&lt;/a&gt;&lt;/strong&gt; - Python wrapper for this library. Author: Jean-Sébastien B. (@realitix). License: Apache 2.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gwihlidal/vk-mem-rs&#34;&gt;vk-mem&lt;/a&gt;&lt;/strong&gt; - Rust binding for this library. Author: Graham Wihlidal. License: Apache 2.0 or MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://hackage.haskell.org/package/VulkanMemoryAllocator&#34;&gt;Haskell bindings&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://github.com/expipiplus1/vulkan/tree/master/VulkanMemoryAllocator&#34;&gt;github&lt;/a&gt;&lt;/strong&gt; - Haskell bindings for this library. Author: Ellie Hermaszewska (@expipiplus1). License BSD-3-Clause.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rextimmy/vma_sample_sdl&#34;&gt;vma_sample_sdl&lt;/a&gt;&lt;/strong&gt; - SDL port of the sample app of this library (with the goal of running it on multiple platforms, including MacOS). Author: @rextimmy. License: MIT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dylanede/vulkan-malloc&#34;&gt;vulkan-malloc&lt;/a&gt;&lt;/strong&gt; - Vulkan memory allocation library for Rust. Based on version 1 of this library. Author: Dylan Ede (@dylanede). License: MIT / Apache 2.0.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>