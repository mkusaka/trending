<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-07T01:35:57Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jart/cosmopolitan</title>
    <updated>2022-07-07T01:35:57Z</updated>
    <id>tag:github.com,2022-07-07:/jart/cosmopolitan</id>
    <link href="https://github.com/jart/cosmopolitan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;build-once run-anywhere c library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jart/cosmopolitan/master/usr/share/img/honeybadger.png&#34; alt=&#34;Cosmopolitan Honeybadger&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jart/cosmopolitan/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/jart/cosmopolitan/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cosmopolitan&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://justine.lol/cosmopolitan/index.html&#34;&gt;Cosmopolitan Libc&lt;/a&gt; makes C a build-once run-anywhere language, like Java, except it doesn&#39;t need an interpreter or virtual machine. Instead, it reconfigures stock GCC and Clang to output a POSIX-approved polyglot format that runs natively on Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS with the best possible performance and the tiniest footprint imaginable.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;For an introduction to this project, please read the &lt;a href=&#34;https://justine.lol/ape.html&#34;&gt;αcτµαlly pδrταblε εxεcµταblε&lt;/a&gt; blog post and &lt;a href=&#34;https://justine.lol/cosmopolitan/index.html&#34;&gt;cosmopolitan libc&lt;/a&gt; website. We also have &lt;a href=&#34;https://justine.lol/cosmopolitan/documentation.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re doing your development work on Linux or BSD then you need just five files to get started. Here&#39;s what you do on Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://justine.lol/cosmopolitan/cosmopolitan.zip&#xA;unzip cosmopolitan.zip&#xA;printf &#39;main() { printf(&#34;hello world\\n&#34;); }\n&#39; &amp;gt;hello.c&#xA;gcc -g -Os -static -nostdlib -nostdinc -fno-pie -no-pie -mno-red-zone \&#xA;  -fno-omit-frame-pointer -pg -mnop-mcount \&#xA;  -o hello.com.dbg hello.c -fuse-ld=bfd -Wl,-T,ape.lds \&#xA;  -include cosmopolitan.h crt.o ape-no-modify-self.o cosmopolitan.a&#xA;objcopy -S -O binary hello.com.dbg hello.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You now have a portable program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hello.com&#xA;bash -c &#39;./hello.com&#39;  # zsh/fish workaround (we patched them in 2021)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since we used the &lt;code&gt;ape-no-modify-self.o&lt;/code&gt; bootloader (rather than &lt;code&gt;ape.o&lt;/code&gt;) your executable will not modify itself when it&#39;s run. What it&#39;ll instead do, is extract a 4kb program to &lt;code&gt;${TMPDIR:-${HOME:-.}}&lt;/code&gt; that maps your program into memory without needing to copy it. It&#39;s possible to install the APE loader systemwide as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# (1) linux systems that want binfmt_misc&#xA;ape/apeinstall.sh&#xA;&#xA;# (2) for linux/freebsd/netbsd/openbsd systems&#xA;cp build/bootstrap/ape.elf /usr/bin/ape&#xA;&#xA;# (3) for mac os x systems&#xA;cp build/bootstrap/ape.macho /usr/bin/ape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you followed steps (2) and (3) then there&#39;s going to be a slight constant-time startup latency each time you run an APE binary. Your system might also prevent your APE program from being installed to a system directory as a setuid binary or a script interpreter. To solve that, you can use the following flag to turn your binary into the platform local format (ELF or Mach-O):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ file hello.com&#xA;hello.com: DOS/MBR boot sector&#xA;./hello.com --assimilate&#xA;$ file hello.com&#xA;hello.com: ELF 64-bit LSB executable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also some other useful flags that get baked into your binary by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hello.com --strace   # log system calls to stderr&#xA;./hello.com --ftrace   # log function calls to stderr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want your &lt;code&gt;hello.com&lt;/code&gt; program to be much tinier, more on the order of 16kb rather than 60kb, then all you have to do is use &lt;a href=&#34;https://justine.lol/cosmopolitan/cosmopolitan-tiny.zip&#34;&gt;https://justine.lol/cosmopolitan/cosmopolitan-tiny.zip&lt;/a&gt; instead. See &lt;a href=&#34;https://justine.lol/cosmopolitan/download.html&#34;&gt;https://justine.lol/cosmopolitan/download.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on MacOS you can install the GNU compiler collection for x86_64-elf via homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install x86_64-elf-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in the above scripts just replace &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;objcopy&lt;/code&gt; with &lt;code&gt;x86_64-elf-gcc&lt;/code&gt; and &lt;code&gt;x86_64-elf-objcopy&lt;/code&gt; to compile your APE binary.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on Windows then you need to download an x86_64-pc-linux-gnu toolchain beforehand. See the &lt;a href=&#34;https://justine.lol/cosmopolitan/windows-compiling.html&#34;&gt;Compiling on Windows&lt;/a&gt; tutorial. It&#39;s needed because the ELF object format is what makes universal binaries possible.&lt;/p&gt; &#xA;&lt;p&gt;Cosmopolitan officially only builds on Linux. However, one highly experimental (and currently broken) thing you could try, is building the entire cosmo repository from source using the cross9 toolchain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p o/third_party&#xA;rm -rf o/third_party/gcc&#xA;wget https://justine.lol/linux-compiler-on-windows/cross9.zip&#xA;unzip cross9.zip&#xA;mv cross9 o/third_party/gcc&#xA;build/bootstrap/make.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source Builds&lt;/h2&gt; &#xA;&lt;p&gt;Cosmopolitan can be compiled from source on any Linux distro. First, you need to download or clone the repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://justine.lol/cosmopolitan/cosmopolitan.tar.gz&#xA;tar xf cosmopolitan.tar.gz  # see releases page&#xA;cd cosmopolitan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the entire repository and run all the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16&#xA;o//examples/hello.com&#xA;find o -name \*.com | xargs ls -rShal | less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an error running make.com then it&#39;s probably because you have WINE installed to &lt;code&gt;binfmt_misc&lt;/code&gt;. You can fix that by installing the the APE loader as an interpreter. It&#39;ll improve build performance too!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ape/apeinstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the Cosmopolitan repository is very large, you might only want to build a particular thing. Cosmopolitan&#39;s build config does a good job at having minimal deterministic builds. For example, if you wanted to build only hello.com then you could do that as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 o//examples/hello.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes it&#39;s desirable to build a subset of targets, without having to list out each individual one. You can do that by asking make to build a directory name. For example, if you wanted to build only the targets and subtargets of the chibicc package including its tests, you would say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 o//third_party/chibicc&#xA;o//third_party/chibicc/chibicc.com --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cosmopolitan provides a variety of build modes. For example, if you want really tiny binaries (as small as 12kb in size) then you&#39;d say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 MODE=tiny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s some other build modes you can try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 MODE=dbg       # asan + ubsan + debug&#xA;build/bootstrap/make.com -j16 MODE=asan      # production memory safety&#xA;build/bootstrap/make.com -j16 MODE=opt       # -march=native optimizations&#xA;build/bootstrap/make.com -j16 MODE=rel       # traditional release binaries&#xA;build/bootstrap/make.com -j16 MODE=optlinux  # optimal linux-only performance&#xA;build/bootstrap/make.com -j16 MODE=tinylinux # tiniest linux-only 4kb binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further details, see &lt;a href=&#34;https://raw.githubusercontent.com/jart/cosmopolitan/master/build/config.mk&#34;&gt;//build/config.mk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GDB&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s the recommended &lt;code&gt;~/.gdbinit&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set host-charset UTF-8&#xA;set target-charset UTF-8&#xA;set target-wide-charset UTF-8&#xA;set osabi none&#xA;set complaints 0&#xA;set confirm off&#xA;set history save on&#xA;set history filename ~/.gdb_history&#xA;define asm&#xA;  layout asm&#xA;  layout reg&#xA;end&#xA;define src&#xA;  layout src&#xA;  layout reg&#xA;end&#xA;src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You normally run the &lt;code&gt;.com.dbg&lt;/code&gt; file under gdb. If you need to debug the &lt;code&gt;.com&lt;/code&gt; file itself, then you can load the debug symbols independently as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gdb foo.com -ex &#39;add-symbol-file foo.com.dbg 0x401000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support Vector&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Min Version&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Circa&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AMD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;K8 Venus&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2005&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Intel&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Core&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;New Technology&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Vista&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GNU/Systemd&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.6.18&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2007&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;XNU&#39;s Not UNIX!&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15.6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Funding for this project is crowdsourced using &lt;a href=&#34;https://github.com/sponsors/jart&#34;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&#34;https://www.patreon.com/jart&#34;&gt;Patreon&lt;/a&gt;. Your support is what makes this project possible. Thank you! We&#39;d also like to give special thanks to the following individuals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdrumgoole&#34;&gt;Joe Drumgoole&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For publicly sponsoring our work at the highest tier.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>9bie/sshdHooker</title>
    <updated>2022-07-07T01:35:57Z</updated>
    <id>tag:github.com,2022-07-07:/9bie/sshdHooker</id>
    <link href="https://github.com/9bie/sshdHooker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;注入SSHD进程并记录ssh登录的密码&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;what&#39;s this?&lt;/h1&gt; &#xA;&lt;p&gt;注入SSHD之后就能记录下密码或者做其他操作。&lt;/p&gt; &#xA;&lt;h1&gt;how to use&lt;/h1&gt; &#xA;&lt;p&gt;指行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc -shared inject_got.c -ldl -fPIC -o test2.so&#xA;&#xA;mv test2.so /tmp/hello.so&#xA;&#xA;gcc sshdHooker.c utils.c -no-pie -g -o inject -ldl -lpthread&#xA;&#xA;sudo ./inject sshd_pid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后等待用户连接SSH并且登录成功，密码保存于/tmp/set_data.txt&lt;/p&gt; &#xA;&lt;h1&gt;todo&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;增加x86/arm支持&lt;/li&gt; &#xA; &lt;li&gt;自定义so路径&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>eclipse/mosquitto</title>
    <updated>2022-07-07T01:35:57Z</updated>
    <id>tag:github.com,2022-07-07:/eclipse/mosquitto</id>
    <link href="https://github.com/eclipse/mosquitto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eclipse Mosquitto - An open source MQTT broker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eclipse Mosquitto&lt;/h1&gt; &#xA;&lt;p&gt;Mosquitto is an open source implementation of a server for version 5.0, 3.1.1, and 3.1 of the MQTT protocol. It also includes a C and C++ client library, and the &lt;code&gt;mosquitto_pub&lt;/code&gt; and &lt;code&gt;mosquitto_sub&lt;/code&gt; utilities for publishing and subscribing.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;See the following links for more information on MQTT:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community page: &lt;a href=&#34;http://mqtt.org/&#34;&gt;http://mqtt.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MQTT v3.1.1 standard: &lt;a href=&#34;https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html&#34;&gt;https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MQTT v5.0 standard: &lt;a href=&#34;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&#34;&gt;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mosquitto project information is available at the following locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main homepage: &lt;a href=&#34;https://mosquitto.org/&#34;&gt;https://mosquitto.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find existing bugs or submit a new bug: &lt;a href=&#34;https://github.com/eclipse/mosquitto/issues&#34;&gt;https://github.com/eclipse/mosquitto/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source code repository: &lt;a href=&#34;https://github.com/eclipse/mosquitto&#34;&gt;https://github.com/eclipse/mosquitto&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a public test server available at &lt;a href=&#34;https://test.mosquitto.org/&#34;&gt;https://test.mosquitto.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mosquitto.org/download/&#34;&gt;https://mosquitto.org/download/&lt;/a&gt; for details on installing binaries for various platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;If you have installed a binary package the broker should have been started automatically. If not, it can be started with a basic configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mosquitto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use &lt;code&gt;mosquitto_sub&lt;/code&gt; to subscribe to a topic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mosquitto_sub -t &#39;test/topic&#39; -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to publish a message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mosquitto_pub -t &#39;test/topic&#39; -m &#39;hello world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for the broker, clients and client library API can be found in the man pages, which are available online at &lt;a href=&#34;https://mosquitto.org/man/&#34;&gt;https://mosquitto.org/man/&lt;/a&gt;. There are also pages with an introduction to the features of MQTT, the &lt;code&gt;mosquitto_passwd&lt;/code&gt; utility for dealing with username/passwords, and a description of the configuration file options available for the broker.&lt;/p&gt; &#xA;&lt;p&gt;Detailed client library API documentation can be found at &lt;a href=&#34;https://mosquitto.org/api/&#34;&gt;https://mosquitto.org/api/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;To build from source the recommended route for end users is to download the archive from &lt;a href=&#34;https://mosquitto.org/download/&#34;&gt;https://mosquitto.org/download/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Windows and Mac, use &lt;code&gt;cmake&lt;/code&gt; to build. On other platforms, just run &lt;code&gt;make&lt;/code&gt; to build. For Windows, see also &lt;code&gt;README-windows.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are building from the git repository then the documentation will not already be built. Use &lt;code&gt;make binary&lt;/code&gt; to skip building the man pages, or install &lt;code&gt;docbook-xsl&lt;/code&gt; on Debian/Ubuntu systems.&lt;/p&gt; &#xA;&lt;h3&gt;Build Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;c-ares (libc-ares-dev on Debian based systems) - only when compiled with &lt;code&gt;make WITH_SRV=yes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cJSON - for client JSON output support. Disable with &lt;code&gt;make WITH_CJSON=no&lt;/code&gt; Auto detected with CMake.&lt;/li&gt; &#xA; &lt;li&gt;libwebsockets (libwebsockets-dev) - enable with &lt;code&gt;make WITH_WEBSOCKETS=yes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;openssl (libssl-dev on Debian based systems) - disable with &lt;code&gt;make WITH_TLS=no&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;pthreads - for client library thread support. This is required to support the &lt;code&gt;mosquitto_loop_start()&lt;/code&gt; and &lt;code&gt;mosquitto_loop_stop()&lt;/code&gt; functions. If compiled without pthread support, the library isn&#39;t guaranteed to be thread safe.&lt;/li&gt; &#xA; &lt;li&gt;uthash / utlist - bundled versions of these headers are provided, disable their use with &lt;code&gt;make WITH_BUNDLED_DEPS=no&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;xsltproc (xsltproc and docbook-xsl on Debian based systems) - only needed when building from git sources - disable with &lt;code&gt;make WITH_DOCS=no&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Equivalent options for enabling/disabling features are available when using the CMake build.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Mosquitto was written by Roger Light &lt;a href=&#34;mailto:roger@atchoo.org&#34;&gt;roger@atchoo.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Master: &lt;a href=&#34;https://travis-ci.org/eclipse/mosquitto&#34;&gt;&lt;img src=&#34;https://travis-ci.org/eclipse/mosquitto.svg?branch=master&#34; alt=&#34;Travis Build Status (master)&#34;&gt;&lt;/a&gt; Develop: &lt;a href=&#34;https://travis-ci.org/eclipse/mosquitto&#34;&gt;&lt;img src=&#34;https://travis-ci.org/eclipse/mosquitto.svg?branch=develop&#34; alt=&#34;Travis Build Status (develop)&#34;&gt;&lt;/a&gt; Fixes: &lt;a href=&#34;https://travis-ci.org/eclipse/mosquitto&#34;&gt;&lt;img src=&#34;https://travis-ci.org/eclipse/mosquitto.svg?branch=fixes&#34; alt=&#34;Travis Build Status (fixes)&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>