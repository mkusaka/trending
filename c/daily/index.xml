<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-21T01:30:23Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AnonymousAAArdvark/qi</title>
    <updated>2024-01-21T01:30:23Z</updated>
    <id>tag:github.com,2024-01-21:/AnonymousAAArdvark/qi</id>
    <link href="https://github.com/AnonymousAAArdvark/qi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight and fast programming language designed to be written in Chinese.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/anonymousaaardvark/qi&#34;&gt;&lt;img src=&#34;https://img.shields.io/tokei/lines/github/anonymousaaardvark/qi?style=for-the-badge&#34; alt=&#34;Lines of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/anonymousaaardvark/qi&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/anonymousaaardvark/qi?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://qilang.tk&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?down_color=lightgrey&amp;amp;down_message=offline&amp;amp;style=for-the-badge&amp;amp;up_color=blue&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Fqilang.tk&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/anonymousaaardvark/qi&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/anonymousaaardvark/qi?style=for-the-badge&#34; alt=&#34;Size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- PROJECT LOGO --&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/anonymousaaardvark/qi&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AnonymousAAArdvark/qi/master/docs/assets/images/logo.png&#34; alt=&#34;Logo&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &#xA; &lt;h2 align=&#34;center&#34;&gt;气 (Qi) lang&lt;/h2&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Qi is a lightweight, fast, and open source Chinese programming language. &lt;br&gt; &lt;a href=&#34;https://qilang.tk&#34;&gt;&lt;strong&gt;qilang.tk »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; English | &lt;a href=&#34;https://github.com/AnonymousAAArdvark/qi/raw/master/README.zh.md&#34;&gt;中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnonymousAAArdvark/qi/master/docs/assets/images/background.jpeg&#34; alt=&#34;Background&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;After reading an article on how programming languages are created, I was inspired to create an interpreter myself. I took a look at how several languages were implemented, and realized that all of them were based on english. I wanted to make a programming language based on a &#34;foreign&#34; natural language, such as Chinese, and see what drawbacks it might lead to. I started simple by referencing various resources posted online (most notably &lt;a href=&#34;https://github.com/munificent/craftinginterpreters/&#34;&gt;Crafting Interpreters&lt;/a&gt;), and then slowly began implementing concepts mostly on my own. Turns out that creating an entire programming language from scratch is pretty tough, but that was what made it fun.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why name it Qi?&lt;/strong&gt; Qi was derived from the pinyin of the Chinese character &#34;气&#34;, which means &#34;air&#34; in English. I wanted this language to be quick and lightweight, as well as fully transparent, just like air!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;打印行（&#34;你好，世界&#34;）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Qi is &lt;ins&gt;Chinese-based&lt;/ins&gt;. Us English-speaking people don&#39;t often take for granted the fact that the programming languages we learn are all based on native tongues we&#39;re already fluent in. A native English speaker can reasonably infer what a piece of Python code does just from reading the keywords (&#34;if&#34;, &#34;int&#34;, &#34;while&#34;, etc.). Making this language foreign-based allows programming to be more accessible to more people around the globe.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Qi is &lt;ins&gt;fast&lt;/ins&gt;. Qi utilizes a single-pass compiler that compiles to efficient bytecode that runs exceptionally down to the metal. Along with various optimizations such as &lt;a href=&#34;https://sean.cm/a/nan-boxing&#34;&gt;Nan Boxing&lt;/a&gt; and hash table probing, Qi&#39;s speed squares up to competing dynamic languages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Qi is &lt;ins&gt;light&lt;/ins&gt;. With less than 5000 lines of code, the entire project could be read in a day. Although the code is short, everything is well-formatted and easy to understand. The final executable is only about 140 kb in size, allowing you to run it on nearly any device imaginable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Qi is &lt;ins&gt;object-oriented&lt;/ins&gt;. Placing classes front and center, &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming&#34;&gt;object-oriented programming&lt;/a&gt; provides a clear modular structure that is significantly better at handling complexity than functional programming though concepts such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstraction_principle_(computer_programming)&#34;&gt;abstraction&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&#34;&gt;encapsulation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Although a couple of benchmarks aren&#39;t &lt;strong&gt;that&lt;/strong&gt; good at judging performance, they&#39;re pretty cool to look at... so here&#39;s a couple.&lt;/p&gt; &#xA;&lt;p&gt;Each benchmark was run 5 times, and the average time was taken for each language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnonymousAAArdvark/qi/master/docs/assets/images/performance.png&#34; alt=&#34;Performance Graph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These tests were run on my Macbook Air 2017 with a Dual-Core i5 CPU and 8 GB RAM.&lt;/p&gt; &#xA;&lt;p&gt;The code for the benchmarks can be found &lt;a href=&#34;https://github.com/AnonymousAAArdvark/qi/tree/master/test/benchmark&#34;&gt;in the test folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- Quick Start --&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Windows &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Linux &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Should be built into the system&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone or download zip of git repo.&lt;/li&gt; &#xA; &lt;li&gt;Open terminal, and &lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;/src/cmake-build-release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;All done!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;Unit testing is so important (especially for a programming language) that I have included a full Qi test suite to make sure that every aspect of the interpreter does what it&#39;s supposed to do. The test programs can be found in the &lt;code&gt;/test&lt;/code&gt; directory &lt;a href=&#34;https://github.com/AnonymousAAArdvark/qi/tree/master/test&#34;&gt;here&lt;/a&gt;. To automate the testing procedure, the Go program &lt;code&gt;/utils/test.go&lt;/code&gt; provided &lt;a href=&#34;https://github.com/AnonymousAAArdvark/qi/raw/master/utils/test.go&#34;&gt;here&lt;/a&gt; runs each test program with the inputted interpreter, captures the output, and validates the result.&lt;/p&gt; &#xA;&lt;h3&gt;Running the Testing Program&lt;/h3&gt; &#xA;&lt;p&gt;To run the tests, you&#39;ll need to have Go installed onto your system. Download and install it from &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Executing the Go program is fairly easy. Simply run &lt;code&gt;go run test.go&lt;/code&gt; and pass the path to the desired interpreter into the &lt;code&gt;-interpreter=&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go run test.go -interpreter=PATH_TO_INTERPRETER_HERE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the output of the testing program if you forget to implement the negate operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run test.go -interpreter=PATH&#xA;FAIL ../test/array/indexing.qi&#xA;     Expected output &#39;假&#39; on line 7 and got &#39;b&#39;.&#xA;FAIL ../test/array/methods.qi&#xA;     Expected output &#39;【零，1，2，3】&#39; on line 9 and got &#39;【零，2，3，4】&#39;.&#xA;FAIL ../test/for/scope.qi&#xA;     Expected output &#39;-1&#39; on line 10 and got &#39;1&#39;.&#xA;FAIL ../test/number/literals.qi&#xA;     Expected output &#39;-0&#39; on line 4 and got &#39;0&#39;.&#xA;     Expected output &#39;-0.001&#39; on line 7 and got &#39;0.001&#39;.&#xA;FAIL ../test/operator/negate.qi&#xA;     Expected output &#39;-3&#39; on line 1 and got &#39;3&#39;.&#xA;FAIL ../test/string/indexing.qi&#xA;     Expected output &#39;g&#39; on line 7 and got &#39;t&#39;.&#xA;268 tests passed. 6 tests failed.&#xA;exit status 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is the output if all tests pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run test.go -interpreter=PATH&#xA;All 274 tests passed (641 expectations).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;&#34;&gt;Quick Start&lt;/a&gt; page is a great guide to install and set up the language.&lt;/p&gt; &#xA;&lt;p&gt;For code examples, please refer to the &lt;a href=&#34;https://github.com/AnonymousAAArdvark/qi/tree/master/test/&#34;&gt;Tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a more extensive look into Qi, go to the &lt;a href=&#34;&#34;&gt;Language Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- ROADMAP --&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inheritance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Increment/decrement operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Switch/Case statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Translate everything to Chinese&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make a logo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Finish Readme&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Translate Readme to Chinese&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Website &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Front Page&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Quick Start&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Language Guide&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Escape Sequences&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bitwise operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove semicolons&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support scientific notation, binary, etc. numbers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More string methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More list methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modules system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag &#34;enhancement&#34;. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE.txt&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;!-- CONTACT --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Andrew Yang - &lt;a href=&#34;https://twitter.com/anonymousaaardvark&#34;&gt;@anonymousaaardvark&lt;/a&gt; - &lt;a href=&#34;mailto:andrewhuiyang0830@gmail.com&#34;&gt;andrewhuiyang0830@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/anonymousaaardvark/qi&#34;&gt;https://github.com/anonymousaaardvark/qi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGMENTS --&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://craftinginterpreters.com/&#34;&gt;Crafting Interpreters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcobambini/gravity&#34;&gt;Gravity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ceronman/loxido&#34;&gt;Loxido&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt; &#xA;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;</summary>
  </entry>
  <entry>
    <title>mitre-cyber-academy/2024-ectf-insecure-example</title>
    <updated>2024-01-21T01:30:23Z</updated>
    <id>tag:github.com,2024-01-21:/mitre-cyber-academy/2024-ectf-insecure-example</id>
    <link href="https://github.com/mitre-cyber-academy/2024-ectf-insecure-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Insecure reference example for the 2024 Collegiate eCTF&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eCTF Insecure Example&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds the insecure example design for an eCTF MISC system.&lt;/p&gt; &#xA;&lt;h2&gt;Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;application_processor&lt;/code&gt; - Code for the application processor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;project.mk&lt;/code&gt; - This file defines project specific variables included in the Makefile&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt; - This makefile is invoked by the eCTF tools when creating a application processor&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;inc&lt;/code&gt; - Directory with c header files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src&lt;/code&gt; - Directory with c source files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;wolfssl&lt;/code&gt; - Location to place wolfssl library for included Crypto Example&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deployment&lt;/code&gt; - Code for deployment secret generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt; - This makefile is invoked by the eCTF tools when creating a deployment&lt;/li&gt; &#xA;   &lt;li&gt;You may put other scripts here to invoke from the Makefile&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ectf_tools&lt;/code&gt; - Host tools and build tools - DO NOT MODIFY ANYTHING IN THIS DIRECTORY &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;attestation_tool.py&lt;/code&gt; - Runs attestation command on application processor&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;boot_tool.py&lt;/code&gt; - Boots the application processor and sensors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;list_tool.py&lt;/code&gt; - Lists what sensors are currently online&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;replace_tool.py&lt;/code&gt; - Replaces a sensor id on the application processor&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build tools&lt;/code&gt; - Tools to build&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;component&lt;/code&gt; - Code for the components &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;project.mk&lt;/code&gt; - This file defines project specific variables included in the Makefile&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt; - This makefile is invoked by the eCTF tools when creating a component&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;inc&lt;/code&gt; - Directory with c header files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src&lt;/code&gt; - Directory with c source files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;wolfssl&lt;/code&gt; - Location to place wolfssl library for included Crypto Example&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shell.nix&lt;/code&gt; - Nix configuration file for Nix environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;custom_nix_pkgs&lt;/code&gt; - Custom derived nix packages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;analog-openocd.nix&lt;/code&gt; - Custom nix package to build Analog Devices fork of OpenOCD&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage and Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains two main elements: firmware source code and tooling.&lt;/p&gt; &#xA;&lt;p&gt;Firmware is built through the included eCTF Tools. These tools invoke the Makefiles in specific ways in the provided Nix environment. Firmware compiling should be executed through these included tools.&lt;/p&gt; &#xA;&lt;p&gt;Source code and tooling is provided that runs directly on the host. All of these tools are created in Python. The tools can be easily installed with the use of Poetry. Once inside of the activated Nix environment, run &lt;code&gt;poetry install&lt;/code&gt; to initialize the Poetry environment. These tools can be invoked either through &lt;code&gt;poetry run {toolname}&lt;/code&gt; or by activating the poetry environment with &lt;code&gt;poetry shell&lt;/code&gt; and then running as standard python programs.&lt;/p&gt; &#xA;&lt;h3&gt;Environment Build&lt;/h3&gt; &#xA;&lt;p&gt;The environment is built with a Nix, which should install all packages necessary for running the design in a reproducible fashion. The environment is automatically built when an eCTF Build Tool is run. If building &lt;code&gt;analog_openocd.nix&lt;/code&gt; this step may take some time to complete.&lt;/p&gt; &#xA;&lt;p&gt;Development can be prototyped by launching into the Nix environment through &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Host Tools&lt;/h3&gt; &#xA;&lt;p&gt;Host Tools for the 2024 competition do not need to be modified by teams at any point. Your design should work with the standardized interface between host and MISC system. The host tools will pass any required arguments to the MISC system and receive all relevant output.&lt;/p&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;When creating a deployment, the Makefile within the &lt;code&gt;deployment&lt;/code&gt; folder of the design repo will be executed. This is the only stage in which information can be shared between separate portions of the build (e.g. components and application processors). A clean target should be implemented in this Makefile to allow for elimination of all generated secrets.&lt;/p&gt; &#xA;&lt;h3&gt;Application Processor and Component&lt;/h3&gt; &#xA;&lt;p&gt;When building the application processor and components, the &lt;code&gt;Makefile&lt;/code&gt; with the respective directories will be invoked. The eCTF Tools will populate parameters into a C header file &lt;code&gt;ectf_params.h&lt;/code&gt; within the design directory. Examples of these header files can be found in the respective main source files for the application processor and component.&lt;/p&gt; &#xA;&lt;h2&gt;Using the eCTF Tools&lt;/h2&gt; &#xA;&lt;h3&gt;Building the deployment&lt;/h3&gt; &#xA;&lt;p&gt;This will run the &lt;code&gt;Makefile&lt;/code&gt; found in the deployment folder using the following inputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_build_depl --help&#xA;usage: eCTF Build Deployment Tool [-h] -d DESIGN&#xA;&#xA;Build a deployment using Nix&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -d DESIGN, --design DESIGN&#xA;                        Path to the root directory of the included design&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_build_depl -d ../ectf-2024-example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the Application Processor&lt;/h3&gt; &#xA;&lt;p&gt;This will run the &lt;code&gt;Makefile&lt;/code&gt; found in the application processor folder using the following inputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_build_ap --help&#xA;usage: eCTF Build Application Processor Tool [-h] -d DESIGN -on OUTPUT_NAME [-od OUTPUT_DIR] -p P&#xA;                                             -b BOOT_MESSAGE&#xA;&#xA;Build an Application Processor using Nix&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -d DESIGN, --design DESIGN&#xA;                        Path to the root directory of the included design&#xA;  -on OUTPUT_NAME, --output-name OUTPUT_NAME&#xA;                        Output prefix of the built application processor binary Example &#39;ap&#39; -&amp;gt; a&#xA;  -od OUTPUT_DIR, --output-dir OUTPUT_DIR&#xA;                        Output name of the directory to store the result: default: .&#xA;  -p PIN, --pin PIN     PIN for built application processor&#xA;  -t TOKEN, --token TOKEN&#xA;                        Token for built application processor&#xA;  -c COMPONENT_CNT, --component-cnt COMPONENT_CNT&#xA;                        Number of components to provision Application Processor for&#xA;  -ids COMPONENT_IDS, --component-ids COMPONENT_IDS&#xA;                        Component IDs to provision the Application Processor for&#xA;  -b BOOT_MESSAGE, --boot-message BOOT_MESSAGE&#xA;                        Application Processor boot message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_build_ap -d ../ectf-2024-example -on ap --p 123456 -c 2 -ids &#34;0x11111124, 0x11111125&#34; -b &#34;Test boot message&#34; -t 0123456789abcdef -od build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the Component&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_build_comp --help&#xA;usage: eCTF Build Application Processor Tool [-h] -d DESIGN -on OUTPUT_NAME [-od OUTPUT_DIR] -id COMPONENT_ID -b BOOT_MESSAGE -al&#xA;                                             ATTESTATION_LOCATION -ad ATTESTATION_DATE -ac ATTESTATION_CUSTOMER&#xA;&#xA;Build an Application Processor using Nix&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -d DESIGN, --design DESIGN&#xA;                        Path to the root directory of the included design&#xA;  -on OUTPUT_NAME, --output-name OUTPUT_NAME&#xA;                        Output prefix of the built application processor binary Example &#39;ap&#39; -&amp;gt; ap.bin, ap.elf, ap.img&#xA;  -od OUTPUT_DIR, --output-dir OUTPUT_DIR&#xA;                        Output name of the directory to store the result: default: .&#xA;  -id COMPONENT_ID, --component-id COMPONENT_ID&#xA;                        Component ID for the provisioned component&#xA;  -b BOOT_MESSAGE, --boot-message BOOT_MESSAGE&#xA;                        Component boot message&#xA;  -al ATTESTATION_LOCATION, --attestation-location ATTESTATION_LOCATION&#xA;                        Attestation data location field&#xA;  -ad ATTESTATION_DATE, --attestation-date ATTESTATION_DATE&#xA;                        Attestation data date field&#xA;  -ac ATTESTATION_CUSTOMER, --attestation-customer ATTESTATION_CUSTOMER&#xA;                        Attestation data customer field&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_build_comp -d ../ectf-2024-example -on comp -od build -id 0x11111125 -b &#34;Component boot&#34; -al &#34;McLean&#34; -ad &#34;08/08/08&#34; -ac &#34;Fritz&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flashing&lt;/h2&gt; &#xA;&lt;p&gt;Flashing the MAX78000 is done through the eCTF Bootloader. You will need to initially flash the eCTF Bootloader onto the provided hardware. This can be done easily by dragging and dropping the &lt;a href=&#34;https://ectfmitre.gitlab.io/ectf-website/2024/components/bootloader.html&#34;&gt;provided bootloader&lt;/a&gt; (for design phase:&lt;code&gt;insecure.bin&lt;/code&gt;) to the DAPLink interface. DAPLink will show up as an external drive when connected to your system. Succesfull installation would make a blue LED flash on the board.&lt;/p&gt; &#xA;&lt;p&gt;To flash a specific bootloader image on the board (AP or Components), use &lt;code&gt;ectf_update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_update [-h] --infile INFILE --port PORT&#xA;&#xA;optional arguments:&#xA;  -h, --help       show this help message and exit&#xA;  --infile INFILE  Path to the input binary&#xA;  --port PORT      Serial port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_update --infile example_fw/build/firmware.img --port /dev/ttyUSB0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Host Tools&lt;/h2&gt; &#xA;&lt;h3&gt;List Tool&lt;/h3&gt; &#xA;&lt;p&gt;The list tool applies the required list components functionality from the MISC system. This is availble on the PATH within the Poetry environment as &lt;code&gt;ectf_list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_list -h&#xA;usage: eCTF List Host Tool [-h] -a APPLICATION_PROCESSOR&#xA;&#xA;List the components connected to the medical device&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -a APPLICATION_PROCESSOR, --application-processor APPLICATION_PROCESSOR&#xA;                        Serial device of the AP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_list -a /dev/ttyUSB0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Boot Tool&lt;/h3&gt; &#xA;&lt;p&gt;The boot tool boots the full system. This is available on the PATH within the Poetry environment as &lt;code&gt;ectf_boot&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_boot --help&#xA;usage: eCTF Boot Host Tool [-h] -a APPLICATION_PROCESSOR&#xA;&#xA;Boot the medical device&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -a APPLICATION_PROCESSOR, --application-processor APPLICATION_PROCESSOR&#xA;                        Serial device of the AP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_boot -a /dev/ttyUSB0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Replace Tool&lt;/h3&gt; &#xA;&lt;p&gt;The replace tool replaces a provisioned component on the system with a new component. This is available on the PATH within the Poetry environment as &lt;code&gt;ectf_replace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_replace --help&#xA;usage: eCTF Replace Host Tool [-h] -a APPLICATION_PROCESSOR -t TOKEN -i COMPONENT_IN -o COMPONENT_OUT&#xA;&#xA;Replace a component on the medical device&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -a APPLICATION_PROCESSOR, --application-processor APPLICATION_PROCESSOR&#xA;                        Serial device of the AP&#xA;  -t TOKEN, --token TOKEN&#xA;                        Replacement token for the AP&#xA;  -i COMPONENT_IN, --component-in COMPONENT_IN&#xA;                        Component ID of the new component&#xA;  -o COMPONENT_OUT, --component-out COMPONENT_OUT&#xA;                        Component ID of the component being replaced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ectf_replace -a /dev/ttyUSB0 -t 0123456789abcdef -i 0x11111126 -o 0x11111125&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attestation Tool&lt;/h3&gt; &#xA;&lt;p&gt;The attestation tool returns the confidential attestation data provisioned on a component. This is available on the PATH within the Poetry environment as &lt;code&gt;ectf_attestation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_attestation --help&#xA;usage: eCTF Attestation Host Tool [-h] -a APPLICATION_PROCESSOR -p PIN -c COMPONENT&#xA;&#xA;Return the attestation data from a component&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -a APPLICATION_PROCESSOR, --application-processor APPLICATION_PROCESSOR&#xA;                        Serial device of the AP&#xA;  -p PIN, --pin PIN     PIN for the AP&#xA;  -c COMPONENT, --component COMPONENT&#xA;                        Component ID of the target component&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Utilization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ectf_attestation -a /dev/ttyUSB0 -p 123456 -c 0x11111124&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pnggroup/libpng</title>
    <updated>2024-01-21T01:30:23Z</updated>
    <id>tag:github.com,2024-01-21:/pnggroup/libpng</id>
    <link href="https://github.com/pnggroup/libpng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LIBPNG: Portable Network Graphics support, official libpng repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for libpng version 1.6.41.git&lt;/h1&gt; &#xA;&lt;p&gt;See the note about version numbers near the top of &lt;code&gt;png.h&lt;/code&gt;. See &lt;code&gt;INSTALL&lt;/code&gt; for instructions on how to install libpng.&lt;/p&gt; &#xA;&lt;p&gt;Libpng comes in several distribution formats. Get &lt;code&gt;libpng-*.tar.gz&lt;/code&gt; or &lt;code&gt;libpng-*.tar.xz&lt;/code&gt; if you want UNIX-style line endings in the text files, or &lt;code&gt;lpng*.7z&lt;/code&gt; or &lt;code&gt;lpng*.zip&lt;/code&gt; if you want DOS-style line endings.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed description on using libpng, read &lt;code&gt;libpng-manual.txt&lt;/code&gt;. For examples of libpng in a program, see &lt;code&gt;example.c&lt;/code&gt; and &lt;code&gt;pngtest.c&lt;/code&gt;. For usage information and restrictions (what little they are) on libpng, see &lt;code&gt;png.h&lt;/code&gt;. For a description on using zlib (the compression library used by libpng) and zlib&#39;s restrictions, see &lt;code&gt;zlib.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should use zlib 1.0.4 or later to run this, but it &lt;em&gt;may&lt;/em&gt; work with versions as old as zlib 0.95. Even so, there are bugs in older zlib versions which can cause the output of invalid compression streams for some images.&lt;/p&gt; &#xA;&lt;p&gt;You should also note that zlib is a compression library that is useful for more things than just PNG files. You can use zlib as a drop-in replacement for &lt;code&gt;fread()&lt;/code&gt; and &lt;code&gt;fwrite()&lt;/code&gt;, if you are so inclined.&lt;/p&gt; &#xA;&lt;p&gt;zlib should be available at the same place that libpng is, or at &lt;a href=&#34;https://zlib.net&#34;&gt;https://zlib.net&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;You may also want a copy of the PNG specification. It is available as an RFC, a W3C Recommendation, and an ISO/IEC Standard. You can find these at &lt;a href=&#34;http://www.libpng.org/pub/png/pngdocs.html&#34;&gt;http://www.libpng.org/pub/png/pngdocs.html&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;This code is currently being archived at &lt;a href=&#34;https://libpng.sourceforge.io&#34;&gt;https://libpng.sourceforge.io&lt;/a&gt; in the download area, and at &lt;a href=&#34;http://libpng.download/src&#34;&gt;http://libpng.download/src&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;This release, based in a large way on Glenn&#39;s, Guy&#39;s and Andreas&#39; earlier work, was created and will be supported by myself and the PNG development group.&lt;/p&gt; &#xA;&lt;p&gt;Send comments, corrections and commendations to &lt;code&gt;png-mng-implement&lt;/code&gt; at &lt;code&gt;lists.sourceforge.net&lt;/code&gt;. (Subscription is required; visit &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/png-mng-implement&#34;&gt;https://lists.sourceforge.net/lists/listinfo/png-mng-implement&lt;/a&gt; to subscribe.)&lt;/p&gt; &#xA;&lt;p&gt;Send general questions about the PNG specification to &lt;code&gt;png-mng-misc&lt;/code&gt; at &lt;code&gt;lists.sourceforge.net&lt;/code&gt;. (Subscription is required; visit &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/png-mng-misc&#34;&gt;https://lists.sourceforge.net/lists/listinfo/png-mng-misc&lt;/a&gt; to subscribe.)&lt;/p&gt; &#xA;&lt;h2&gt;Historical notes&lt;/h2&gt; &#xA;&lt;p&gt;The libpng library has been in extensive use and testing since mid-1995. Version 0.89, published a year later, was the first official release. By late 1997, it had finally gotten to the stage where there hadn&#39;t been significant changes to the API in some time, and people have a bad feeling about libraries with versions below 1.0. Version 1.0.0 was released in March 1998.&lt;/p&gt; &#xA;&lt;p&gt;Note that some of the changes to the &lt;code&gt;png_info&lt;/code&gt; structure render this version of the library binary incompatible with libpng-0.89 or earlier versions if you are using a shared library. The type of the &lt;code&gt;filler&lt;/code&gt; parameter for &lt;code&gt;png_set_filler()&lt;/code&gt; has changed from &lt;code&gt;png_byte&lt;/code&gt; to &lt;code&gt;png_uint_32&lt;/code&gt;, which will affect shared-library applications that use this function.&lt;/p&gt; &#xA;&lt;p&gt;To avoid problems with changes to the internals of the &lt;code&gt;info_struct&lt;/code&gt;, new APIs have been made available in 0.95 to avoid direct application access to &lt;code&gt;info_ptr&lt;/code&gt;. These functions are the &lt;code&gt;png_set_&amp;lt;chunk&amp;gt;&lt;/code&gt; and &lt;code&gt;png_get_&amp;lt;chunk&amp;gt;&lt;/code&gt; functions. These functions should be used when accessing/storing the &lt;code&gt;info_struct&lt;/code&gt; data, rather than manipulating it directly, to avoid such problems in the future.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that the APIs did not make current programs that access the info struct directly incompatible with the new library, through libpng-1.2.x. In libpng-1.4.x, which was meant to be a transitional release, members of the &lt;code&gt;png_struct&lt;/code&gt; and the &lt;code&gt;info_struct&lt;/code&gt; can still be accessed, but the compiler will issue a warning about deprecated usage. Since libpng-1.5.0, direct access to these structs is not allowed, and the definitions of the structs reside in private &lt;code&gt;pngstruct.h&lt;/code&gt; and &lt;code&gt;pnginfo.h&lt;/code&gt; header files that are not accessible to applications. It is strongly suggested that new programs use the new APIs (as shown in &lt;code&gt;example.c&lt;/code&gt; and &lt;code&gt;pngtest.c&lt;/code&gt;), and older programs be converted to the new format, to facilitate upgrades in the future.&lt;/p&gt; &#xA;&lt;p&gt;The additions since 0.89 include the ability to read from a PNG stream which has had some (or all) of the signature bytes read by the calling application. This also allows the reading of embedded PNG streams that do not have the PNG file signature. As well, it is now possible to set the library action on the detection of chunk CRC errors. It is possible to set different actions based on whether the CRC error occurred in a critical or an ancillary chunk.&lt;/p&gt; &#xA;&lt;p&gt;The additions since 0.90 include the ability to compile libpng as a Windows DLL, and new APIs for accessing data in the &lt;code&gt;info_struct&lt;/code&gt;. Experimental functions included the ability to set weighting and cost factors for row filter selection, direct reads of integers from buffers on big-endian processors that support misaligned data access, faster methods of doing alpha composition, and more accurate 16-to-8 bit color conversion. Some of these experimental functions, such as the weighted filter heuristics, have since been removed.&lt;/p&gt; &#xA;&lt;h2&gt;Files included in this distribution&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;ANNOUNCE      =&amp;gt;  Announcement of this version, with recent changes&#xA;AUTHORS       =&amp;gt;  List of contributing authors&#xA;CHANGES       =&amp;gt;  Description of changes between libpng versions&#xA;INSTALL       =&amp;gt;  Instructions to install libpng&#xA;LICENSE       =&amp;gt;  License to use and redistribute libpng&#xA;README        =&amp;gt;  This file&#xA;TODO          =&amp;gt;  Things not implemented in the current library&#xA;TRADEMARK     =&amp;gt;  Trademark information&#xA;example.c     =&amp;gt;  Example code for using libpng functions&#xA;libpng.3      =&amp;gt;  Manual page for libpng (includes libpng-manual.txt)&#xA;libpng-manual.txt  =&amp;gt;  Description of libpng and its functions&#xA;libpngpf.3    =&amp;gt;  Manual page for libpng&#39;s private functions (deprecated)&#xA;png.5         =&amp;gt;  Manual page for the PNG format&#xA;png.c         =&amp;gt;  Basic interface functions common to library&#xA;png.h         =&amp;gt;  Library function and interface declarations (public)&#xA;pngpriv.h     =&amp;gt;  Library function and interface declarations (private)&#xA;pngconf.h     =&amp;gt;  System specific library configuration (public)&#xA;pngstruct.h   =&amp;gt;  png_struct declaration (private)&#xA;pnginfo.h     =&amp;gt;  png_info struct declaration (private)&#xA;pngdebug.h    =&amp;gt;  debugging macros (private)&#xA;pngerror.c    =&amp;gt;  Error/warning message I/O functions&#xA;pngget.c      =&amp;gt;  Functions for retrieving info from struct&#xA;pngmem.c      =&amp;gt;  Memory handling functions&#xA;pngbar.png    =&amp;gt;  PNG logo, 88x31&#xA;pngnow.png    =&amp;gt;  PNG logo, 98x31&#xA;pngpread.c    =&amp;gt;  Progressive reading functions&#xA;pngread.c     =&amp;gt;  Read data/helper high-level functions&#xA;pngrio.c      =&amp;gt;  Lowest-level data read I/O functions&#xA;pngrtran.c    =&amp;gt;  Read data transformation functions&#xA;pngrutil.c    =&amp;gt;  Read data utility functions&#xA;pngset.c      =&amp;gt;  Functions for storing data into the info_struct&#xA;pngtest.c     =&amp;gt;  Library test program&#xA;pngtest.png   =&amp;gt;  Library test sample image&#xA;pngtrans.c    =&amp;gt;  Common data transformation functions&#xA;pngwio.c      =&amp;gt;  Lowest-level write I/O functions&#xA;pngwrite.c    =&amp;gt;  High-level write functions&#xA;pngwtran.c    =&amp;gt;  Write data transformations&#xA;pngwutil.c    =&amp;gt;  Write utility functions&#xA;arm/          =&amp;gt;  Optimized code for the ARM platform&#xA;intel/        =&amp;gt;  Optimized code for the INTEL-SSE2 platform&#xA;mips/         =&amp;gt;  Optimized code for the MIPS platform&#xA;powerpc/      =&amp;gt;  Optimized code for the PowerPC platform&#xA;ci/           =&amp;gt;  Scripts for continuous integration&#xA;contrib/      =&amp;gt;  External contributions&#xA;    arm-neon/     =&amp;gt;  Optimized code for the ARM-NEON platform&#xA;    mips-msa/     =&amp;gt;  Optimized code for the MIPS-MSA platform&#xA;    powerpc-vsx/  =&amp;gt;  Optimized code for the POWERPC-VSX platform&#xA;    examples/     =&amp;gt;  Examples of libpng usage&#xA;    gregbook/     =&amp;gt;  Source code for PNG reading and writing, from&#xA;                      &#34;PNG: The Definitive Guide&#34; by Greg Roelofs,&#xA;                      O&#39;Reilly, 1999&#xA;    libtests/     =&amp;gt;  Test programs&#xA;    oss-fuzz/     =&amp;gt;  Files used by the OSS-Fuzz project for fuzz-testing&#xA;                      libpng&#xA;    pngminim/     =&amp;gt;  Minimal decoder, encoder, and progressive decoder&#xA;                      programs demonstrating the use of pngusr.dfa&#xA;    pngminus/     =&amp;gt;  Simple pnm2png and png2pnm programs&#xA;    pngsuite/     =&amp;gt;  Test images&#xA;    testpngs/     =&amp;gt;  Test images&#xA;    tools/        =&amp;gt;  Various tools&#xA;    visupng/      =&amp;gt;  VisualPng, a Windows viewer for PNG images&#xA;projects/     =&amp;gt;  Project files and workspaces for various IDEs&#xA;    owatcom/      =&amp;gt;  OpenWatcom project&#xA;    visualc71/    =&amp;gt;  Microsoft Visual C++ 7.1 workspace&#xA;    vstudio/      =&amp;gt;  Microsoft Visual Studio workspace&#xA;scripts/      =&amp;gt;  Scripts and makefiles for building libpng&#xA;                  (see scripts/README.txt for the complete list)&#xA;tests/        =&amp;gt;  Test scripts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good luck, and happy coding!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cosmin Truta (current maintainer, since 2018)&lt;/li&gt; &#xA; &lt;li&gt;Glenn Randers-Pehrson (former maintainer, 1998-2018)&lt;/li&gt; &#xA; &lt;li&gt;Andreas Eric Dilger (former maintainer, 1996-1997)&lt;/li&gt; &#xA; &lt;li&gt;Guy Eric Schalnat (original author and former maintainer, 1995-1996) (formerly of Group 42, Inc.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>