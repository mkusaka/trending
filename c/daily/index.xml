<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-18T01:29:57Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cosmos72/twin</title>
    <updated>2025-06-18T01:29:57Z</updated>
    <id>tag:github.com,2025-06-18:/cosmos72/twin</id>
    <link href="https://github.com/cosmos72/twin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Text mode window environment. A &#34;retro&#34; program for embedded or remote systems, that doubles as X11 terminal and text-mode equivalent of VNC server&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;Twin - a Textmode WINdow environment&lt;/h2&gt; &#xA;&lt;p&gt;Version 0.9.0&lt;/p&gt; &#xA;&lt;p&gt;Twin is text-based windowing environment with mouse support, window manager, terminal emulator, networked clients and the ability to attach/detach mode displays on-the-fly.&lt;/p&gt; &#xA;&lt;p&gt;It supports a variety of displays:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;plain text terminals: Linux console, twin&#39;s own terminal emulator, and any termcap/ncurses compatible terminal;&lt;/li&gt; &#xA; &lt;li&gt;X11, where it can be used as a multi-window xterm;&lt;/li&gt; &#xA; &lt;li&gt;itself (you can display a twin on another twin);&lt;/li&gt; &#xA; &lt;li&gt;twdisplay, a general network-transparent display client, used to attach/detach more displays on-the-fly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, twin is tested on Linux (i386, x86_64, ARM, ARM64, PowerPC, Alpha, Sparc), on Mac OS X (x86_64) and on FreeBSD (i386, x86_64). I had yet no chance to seriously test it on other systems.&lt;/p&gt; &#xA;&lt;p&gt;The following screenshot shows an example of twin with various clients: &lt;img src=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/screenshot_x11.png&#34; alt=&#34;screenshot_x11.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/Tutorial&#34;&gt;Tutorial&lt;/a&gt; A quite complete tour of twin features: the user interface, how to use twin clients, compression, attaching/detaching displays, fonts. It also contains installation instructions and some caveats for system administrators.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/COPYING&#34;&gt;COPYING&lt;/a&gt; License: twin server and clients are GPL&#39;ed software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/COPYING.LIB&#34;&gt;COPYING.LIB&lt;/a&gt; Library license: the libraries libtutf, libtw are LGPL&#39;ed software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/INSTALL&#34;&gt;INSTALL&lt;/a&gt; Quick compile/install guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/twinrc&#34;&gt;twinrc&lt;/a&gt; A detailed example of ~/.config/twin/twinrc look-n-feel configuration file.&lt;/p&gt; &#xA;&lt;p&gt;The following documentation is useful mostly to developers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/Configure&#34;&gt;Configure&lt;/a&gt; Description of twin configuration options with the meaning of every single one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/README.git&#34;&gt;README.git&lt;/a&gt; Hints to build twin from GIT repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/README.porting&#34;&gt;README.porting&lt;/a&gt; Tips and warnings to compile twin on unsupported OSes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/libtw.txt&#34;&gt;libtw.txt&lt;/a&gt; reference API for programmers who want to write twin clients (INCOMPLETE).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/libtw++.txt&#34;&gt;libtw++.txt&lt;/a&gt; reference API for programmers who want to write twin C++ clients (INCOMPLETE).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Getting twin&lt;/p&gt; &#xA;&lt;p&gt;Since you are reading this README, you probably already have it, anyway twin can be downloaded from&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cosmos72/twin&#34;&gt;https://github.com/cosmos72/twin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Building and installing twin&lt;/p&gt; &#xA;&lt;p&gt;For detailed instructions about compiling and installing twin, see sections 3 and 4 of the file &lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/Tutorial&#34;&gt;docs/Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the impatient, it basically reduces to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ./configure&#xA;  make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run as root&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on Linux, also remember to run as root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on FreeBSD instead, remember to run as root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ldconfig -R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile twin you need the following programs installed on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;a Bourne-shell or compatible (for example bash, dash, ash...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;make (most variants are supported: GNU make, BSD make...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;an ANSI C compiler (for example gcc or clang)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: it is STRONGLY recommended to install at least the following packages before compiling twin (the exact names depend on the operating system or Linux distribution):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x11-dev - may be named x11-devel, libx11-dev ...&lt;/li&gt; &#xA; &lt;li&gt;xft-dev - may be named xft-devel, libxft-dev ...&lt;/li&gt; &#xA; &lt;li&gt;ncurses-dev - may be named ncurses-devel, libncurses-dev ...&lt;/li&gt; &#xA; &lt;li&gt;zlib-dev - may be named zlib1g-dev, zlib-devel, libzlib-dev ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Linux, it is STRONGLY recommended to also install the following package before compiling twin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gpm-dev - may be named gpm-devel, libgpm-dev ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a discussion about MANUALLY configuring twin (almost never necessary), see the file &lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/Configure&#34;&gt;docs/Configure&lt;/a&gt;. -- WARNING: if you manually enable options that were disabled by `./configure&#39;, build will almost certainly fail! --&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Other topics:&lt;/p&gt; &#xA;&lt;p&gt;See the rest of the documentation, starting from the &lt;a href=&#34;https://raw.githubusercontent.com/cosmos72/twin/master/docs/Tutorial&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Greetings,&lt;/p&gt; &#xA;&lt;p&gt;Massimiliano Ghilardi&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>espressif/esp-brookesia</title>
    <updated>2025-06-18T01:29:57Z</updated>
    <id>tag:github.com,2025-06-18:/espressif/esp-brookesia</id>
    <link href="https://github.com/espressif/esp-brookesia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESP-Brookesia is a human-machine interaction development framework designed for AIoT devices.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/espressif/esp-brookesia/master/docs/_static/readme/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://components.espressif.com/components/espressif/esp-brookesia&#34;&gt;&lt;img src=&#34;https://components.espressif.com/components/espressif/esp-brookesia/badge.svg?sanitize=true&#34; alt=&#34;Espressif Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ESP-Brookesia&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-brookesia/master/README_CN.md&#34;&gt;中文版本&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ESP-Brookesia is a human-machine interaction development framework designed for AIoT devices. It aims to simplify the processes of user UI design and application development by supporting efficient development tools and platforms, thereby accelerating the development and market release of customers&#39; HMI application products.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Brookesia&#34;&gt;Brookesia&lt;/a&gt;&#34; is a genus of chameleons known for their ability to camouflage and adapt to their surroundings, which closely aligns with the goals of the ESP-Brookesia. This framework aims to provide a flexible and scalable UI solution that can adapt to various devices, screen sizes, and application requirements, much like the Brookesia chameleon with its high degree of adaptability and flexibility.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The key features of ESP-Brookesia include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developed based on C/C++, natively supporting the ESP-IDF development system and fully leveraging the Espressif open-source component ecosystem&lt;/li&gt; &#xA; &lt;li&gt;Offers a rich set of standardized system UIs with support for dynamic UI style adjustments.&lt;/li&gt; &#xA; &lt;li&gt;Implements an app-based application management approach, ensuring UI isolation and coexistence across multiple apps, enabling users to focus on UI implementation within their target app.&lt;/li&gt; &#xA; &lt;li&gt;Application UIs are compatible with &#34;&lt;a href=&#34;https://squareline.io/&#34;&gt;Squareline&lt;/a&gt; exported code&#34; development methods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The system UI functionality demonstration is as follows:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://dl.espressif.com/AE/esp-dev-kits/esp_ui_phone_p4_function_ev_board_1024_600_2.gif&#34; alt=&#34;esp_ui_phone_p4_function_ev_board&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://docs.espressif.com/projects/esp-dev-kits/en/latest/esp32p4/esp32-p4-function-ev-board/index.html&#34;&gt;ESP32-P4-Function-EV-Board&lt;/a&gt; running system UI - &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-brookesia/master/docs/system_ui_phone_CN.md&#34;&gt;Phone&lt;/a&gt; &#xA; &lt;br&gt; (&#xA; &lt;a href=&#34;https://dl.espressif.com/AE/esp-dev-kits/esp_ui_phone_demo_1024_600_compress.mp4&#34;&gt;Click to view the video&lt;/a&gt;) &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The functional block diagram of ESP-Brookesia is as follows, mainly consisting of the following components:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/espressif/esp-brookesia/master/docs/_static/readme/block_diagram.png&#34; alt=&#34;block_diagram&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HAL&lt;/strong&gt;: Uses the hardware abstraction layer provided by ESP-IDF to provide access and control of underlying hardware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Middle&lt;/strong&gt;: Acts as a bridge connecting applications with underlying hardware, interfacing with the hardware abstraction layer through &lt;code&gt;Function Components&lt;/code&gt; while providing standardized interfaces to applications through &lt;code&gt;System Services&lt;/code&gt;, achieving decoupling and isolation of system resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;: Provides AI application scenario support through &lt;code&gt;AI Framework&lt;/code&gt;, including &lt;code&gt;HMI&lt;/code&gt; (humanized interaction design for single and dual screens), &lt;code&gt;Agent&lt;/code&gt; (compatible with mainstream LLM models like Doubao and Xiaozhi), and &lt;code&gt;Protocol&lt;/code&gt; (MCP protocol for unified communication between LLM and system services). Provides various product-oriented (mobile devices, speakers, robots, etc.) system and application (settings, AI assistant, app store, etc.) support through &lt;code&gt;System Framework&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built-in Systems&lt;/h2&gt; &#xA;&lt;p&gt;Currently, ESP-Brookesia includes the following built-in systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-brookesia/master/docs/system_ui_phone.md&#34;&gt;Phone&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the documentation - &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-brookesia/master/docs/how_to_use.md&#34;&gt;How to Use&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>