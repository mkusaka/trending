<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-11T01:29:11Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>riscv-software-src/opensbi</title>
    <updated>2025-01-11T01:29:11Z</updated>
    <id>tag:github.com,2025-01-11:/riscv-software-src/opensbi</id>
    <link href="https://github.com/riscv-software-src/opensbi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RISC-V Open Source Supervisor Binary Interface&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V Open Source Supervisor Binary Interface (OpenSBI)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/riscv_opensbi_logo_final_color.png&#34; alt=&#34;RISC-V OpenSBI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;The OpenSBI project is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright (c) 2019 Western Digital Corporation or its affiliates&lt;/li&gt; &#xA; &lt;li&gt;Copyright (c) 2023 RISC-V International&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is distributed under the terms of the BSD 2-clause license (&#34;Simplified BSD License&#34; or &#34;FreeBSD License&#34;, SPDX: &lt;em&gt;BSD-2-Clause&lt;/em&gt;). A copy of this license with OpenSBI copyright can be found in the file &lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/COPYING.BSD&#34;&gt;COPYING.BSD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All source files in OpenSBI contain the 2-Clause BSD license SPDX short identifier in place of the full license text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SPDX-License-Identifier:    BSD-2-Clause&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables machine processing of license information based on the SPDX License Identifiers that are available on the &lt;a href=&#34;http://spdx.org/licenses/&#34;&gt;SPDX&lt;/a&gt; web site.&lt;/p&gt; &#xA;&lt;p&gt;OpenSBI source code also contains code reused from other projects as listed below. The original license text of these projects is included in the source files where the reused code is present.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The libfdt source code is disjunctively dual licensed (GPL-2.0+ OR BSD-2-Clause). Some of this project code is used in OpenSBI under the terms of the BSD 2-Clause license. Any contributions to this code must be made under the terms of both licenses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/ThirdPartyNotices.md&#34;&gt;third party notices&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;RISC-V Supervisor Binary Interface (SBI)&lt;/strong&gt; is the recommended interface between:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A platform-specific firmware running in M-mode and a bootloader, a hypervisor or a general-purpose OS executing in S-mode or HS-mode.&lt;/li&gt; &#xA; &lt;li&gt;A hypervisor running in HS-mode and a bootloader or a general-purpose OS executing in VS-mode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;em&gt;RISC-V SBI specification&lt;/em&gt; is maintained as an independent project by the RISC-V Foundation on &lt;a href=&#34;https://github.com/riscv/riscv-sbi-doc&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the OpenSBI project is to provide an open-source reference implementation of the RISC-V SBI specifications for platform-specific firmwares executing in M-mode (case 1 mentioned above). An OpenSBI implementation can be easily extended by RISC-V platform and system-on-chip vendors to fit a particular hardware configuration.&lt;/p&gt; &#xA;&lt;p&gt;The main component of OpenSBI is provided in the form of a platform-independent static library &lt;strong&gt;libsbi.a&lt;/strong&gt; implementing the SBI interface. A firmware or bootloader implementation can link against this library to ensure conformance with the SBI interface specifications. &lt;em&gt;libsbi.a&lt;/em&gt; also defines an interface for integrating with platform-specific operations provided by the platform firmware implementation (e.g. console access functions, inter-processor interrupt control, etc).&lt;/p&gt; &#xA;&lt;p&gt;To illustrate the use of the &lt;em&gt;libsbi.a&lt;/em&gt; library, OpenSBI also provides a set of platform-specific support examples. For each example, a platform-specific static library &lt;em&gt;libplatsbi.a&lt;/em&gt; can be compiled. This library implements SBI call processing by integrating &lt;em&gt;libsbi.a&lt;/em&gt; with the necessary platform-dependent hardware manipulation functions. For all supported platforms, OpenSBI also provides several runtime firmware examples built using the platform &lt;em&gt;libplatsbi.a&lt;/em&gt;. These example firmwares can be used to replace the legacy &lt;em&gt;riscv-pk&lt;/em&gt; bootloader (aka BBL) and enable the use of well-known bootloaders such as &lt;a href=&#34;https://www.denx.de/wiki/U-Boot/SourceCode&#34;&gt;U-Boot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported SBI version&lt;/h2&gt; &#xA;&lt;p&gt;Currently, OpenSBI fully supports SBI specification &lt;em&gt;v0.2&lt;/em&gt;. OpenSBI also supports Hart State Management (HSM) SBI extension starting from OpenSBI v0.7. HSM extension allows S-mode software to boot all the harts a defined order rather than legacy method of random booting of harts. As a result, many required features such as CPU hotplug, kexec/kdump can also be supported easily in S-mode. HSM extension in OpenSBI is implemented in a non-backward compatible manner to reduce the maintenance burden and avoid confusion. That&#39;s why, any S-mode software using OpenSBI will not be able to boot more than 1 hart if HSM extension is not supported in S-mode.&lt;/p&gt; &#xA;&lt;p&gt;Linux kernel already supports SBI v0.2 and HSM SBI extension starting from &lt;strong&gt;v5.7-rc1&lt;/strong&gt;. If you are using an Linux kernel older than &lt;strong&gt;5.7-rc1&lt;/strong&gt; or any other S-mode software without HSM SBI extension, you should stick to OpenSBI v0.6 to boot all the harts. For a UMP systems, it doesn&#39;t matter.&lt;/p&gt; &#xA;&lt;p&gt;N.B. Any S-mode boot loader (i.e. U-Boot) doesn&#39;t need to support HSM extension, as it doesn&#39;t need to boot all the harts. The operating system should be capable enough to bring up all other non-booting harts using HSM extension.&lt;/p&gt; &#xA;&lt;h2&gt;Required Toolchain and Packages&lt;/h2&gt; &#xA;&lt;p&gt;OpenSBI can be compiled natively or cross-compiled on a x86 host. For cross-compilation, you can build your own toolchain, download a prebuilt one from the &lt;a href=&#34;https://toolchains.bootlin.com/&#34;&gt;Bootlin toolchain repository&lt;/a&gt; or install a distribution-provided toolchain; if you opt to use LLVM/Clang, most distribution toolchains will support cross-compiling for RISC-V using the same toolchain as your native LLVM/Clang toolchain due to LLVM&#39;s ability to support multiple backends in the same binary, so is often an easy way to obtain a working cross-compilation toolchain.&lt;/p&gt; &#xA;&lt;p&gt;Basically, we prefer toolchains with Position Independent Executable (PIE) support like &lt;em&gt;riscv64-linux-gnu-gcc&lt;/em&gt;, &lt;em&gt;riscv64-unknown-freebsd-gcc&lt;/em&gt;, or &lt;em&gt;Clang/LLVM&lt;/em&gt; as they generate PIE firmware images that can run at arbitrary address with appropriate alignment. If a bare-metal GNU toolchain (e.g. &lt;em&gt;riscv64-unknown-elf-gcc&lt;/em&gt;) is used, static linked firmware images are generated instead. &lt;em&gt;Clang/LLVM&lt;/em&gt; can still generate PIE images if a bare-metal triple is used (e.g. &lt;em&gt;-target riscv64-unknown-elf&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Please note that only a 64-bit version of the toolchain is available in the Bootlin toolchain repository for now.&lt;/p&gt; &#xA;&lt;p&gt;In addition to a toolchain, OpenSBI also requires the following packages on the host:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;device-tree-compiler: The device tree compiler for compiling device tree sources (DTS files).&lt;/li&gt; &#xA; &lt;li&gt;python3: The python 3.0 (or compatible) language support for various scripts.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building and Installing the OpenSBI Platform-Independent Library&lt;/h2&gt; &#xA;&lt;p&gt;The OpenSBI platform-independent static library &lt;em&gt;libsbi.a&lt;/em&gt; can be compiled natively or it can be cross-compiled on a host with a different base architecture than RISC-V.&lt;/p&gt; &#xA;&lt;p&gt;For cross-compiling, the environment variable &lt;em&gt;CROSS_COMPILE&lt;/em&gt; must be defined to specify the name prefix of the RISC-V compiler toolchain executables, e.g. &lt;em&gt;riscv64-linux-gnu-&lt;/em&gt; if the gcc executable used is &lt;em&gt;riscv64-linux-gnu-gcc&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build &lt;em&gt;libsbi.a&lt;/em&gt; simply execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All compiled binaries as well as the resulting &lt;em&gt;libsbi.a&lt;/em&gt; static library file will be placed in the &lt;em&gt;build/lib&lt;/em&gt; directory. To specify an alternate build root directory path, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make O=&amp;lt;build_directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate files to be installed for using &lt;em&gt;libsbi.a&lt;/em&gt; in other projects, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the &lt;em&gt;install&lt;/em&gt; directory with all necessary include files copied under the &lt;em&gt;install/include&lt;/em&gt; directory and the library file copied into the &lt;em&gt;install/lib&lt;/em&gt; directory. To specify an alternate installation root directory path, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make I=&amp;lt;install_directory&amp;gt; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building and Installing a Reference Platform Static Library and Firmware&lt;/h2&gt; &#xA;&lt;p&gt;When the &lt;em&gt;PLATFORM=&amp;lt;platform_subdir&amp;gt;&lt;/em&gt; argument is specified on the make command line, the platform-specific static library &lt;em&gt;libplatsbi.a&lt;/em&gt; and firmware examples are built for the platform &lt;em&gt;&amp;lt;platform_subdir&amp;gt;&lt;/em&gt; present in the directory &lt;em&gt;platform&lt;/em&gt; in the OpenSBI top directory. For example, to compile the platform library and the firmware examples for the QEMU RISC-V &lt;em&gt;virt&lt;/em&gt; machine, &lt;em&gt;&amp;lt;platform_subdir&amp;gt;&lt;/em&gt; should be &lt;em&gt;generic&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build &lt;em&gt;libsbi.a&lt;/em&gt;, &lt;em&gt;libplatsbi.a&lt;/em&gt; and the firmware for one of the supported platforms, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make PLATFORM=&amp;lt;platform_subdir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An alternate build directory path can also be specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make PLATFORM=&amp;lt;platform_subdir&amp;gt; O=&amp;lt;build_directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The platform-specific library &lt;em&gt;libplatsbi.a&lt;/em&gt; will be generated in the &lt;em&gt;build/platform/&amp;lt;platform_subdir&amp;gt;/lib&lt;/em&gt; directory. The platform firmware files will be under the &lt;em&gt;build/platform/&amp;lt;platform_subdir&amp;gt;/firmware&lt;/em&gt; directory. The compiled firmwares will be available in two different formats: an ELF file and an expanded image file.&lt;/p&gt; &#xA;&lt;p&gt;To install &lt;em&gt;libsbi.a&lt;/em&gt;, &lt;em&gt;libplatsbi.a&lt;/em&gt;, and the compiled firmwares, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make PLATFORM=&amp;lt;platform_subdir&amp;gt; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the compiled platform-specific libraries and firmware files under the &lt;em&gt;install/platform/&amp;lt;platform_subdir&amp;gt;/&lt;/em&gt; directory. An alternate install root directory path can be specified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make PLATFORM=&amp;lt;platform_subdir&amp;gt; I=&amp;lt;install_directory&amp;gt; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, platform-specific configuration options can be specified with the top-level make command line. These options, such as &lt;em&gt;PLATFORM_&#xA;  &lt;xyz&gt;&lt;/xyz&gt;&lt;/em&gt; or &lt;em&gt;FW_&#xA;  &lt;abc&gt;&lt;/abc&gt;&lt;/em&gt;, are platform-specific and described in more details in the &lt;em&gt;docs/platform/&amp;lt;platform_name&amp;gt;.md&lt;/em&gt; files and &lt;em&gt;docs/firmware/&amp;lt;firmware_name&amp;gt;.md&lt;/em&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;All OpenSBI platforms support Kconfig style build-time configuration. Users can change the build-time configuration of a platform using a graphical interface as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make PLATFORM=&amp;lt;platform_subdir&amp;gt; menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, an OpenSBI platform can have multiple default configurations and users can select a custom default configuration as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make PLATFORM=&amp;lt;platform_subdir&amp;gt; PLATFORM_DEFCONFIG=&amp;lt;platform_custom_defconfig&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building 32-bit / 64-bit OpenSBI Images&lt;/h2&gt; &#xA;&lt;p&gt;By default, building OpenSBI generates 32-bit or 64-bit images based on the supplied RISC-V cross-compile toolchain. For example if &lt;em&gt;CROSS_COMPILE&lt;/em&gt; is set to &lt;em&gt;riscv64-linux-gnu-&lt;/em&gt;, 64-bit OpenSBI images will be generated. If building 32-bit OpenSBI images, &lt;em&gt;CROSS_COMPILE&lt;/em&gt; should be set to a toolchain that is pre-configured to generate 32-bit RISC-V codes, like &lt;em&gt;riscv32-linux-gnu-&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However it&#39;s possible to explicitly specify the image bits we want to build with a given RISC-V toolchain. This can be done by setting the environment variable &lt;em&gt;PLATFORM_RISCV_XLEN&lt;/em&gt; to the desired width, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CROSS_COMPILE=riscv64-linux-gnu-&#xA;export PLATFORM_RISCV_XLEN=32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will generate 32-bit OpenSBI images. And vice vesa.&lt;/p&gt; &#xA;&lt;h2&gt;Building with Clang/LLVM&lt;/h2&gt; &#xA;&lt;p&gt;OpenSBI can also be built with Clang/LLVM. To build with just Clang but keep the default binutils (which will still use the &lt;em&gt;CROSS_COMPILE&lt;/em&gt; prefix if defined), override the &lt;em&gt;CC&lt;/em&gt; make variable with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CC=clang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with a full LLVM-based toolchain, not just Clang, enable the &lt;em&gt;LLVM&lt;/em&gt; option with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make LLVM=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Clang, &lt;em&gt;CROSS_COMPILE&lt;/em&gt; often does not need to be defined unless using GNU binutils with prefixed binary names. &lt;em&gt;PLATFORM_RISCV_XLEN&lt;/em&gt; will be used to infer a default triple to pass to Clang, so if &lt;em&gt;PLATFORM_RISCV_XLEN&lt;/em&gt; itself defaults to an undesired value then prefer setting that rather than the full triple via &lt;em&gt;CROSS_COMPILE&lt;/em&gt;. If &lt;em&gt;CROSS_COMPILE&lt;/em&gt; is nonetheless defined, rather than being used as a prefix for the executable name, it will instead be passed via the &lt;code&gt;--target&lt;/code&gt; option with the trailing &lt;code&gt;-&lt;/code&gt; removed, so must be a valid triple.&lt;/p&gt; &#xA;&lt;p&gt;These can also be mixed; for example using a GCC cross-compiler but LLVM binutils would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make CC=riscv64-linux-gnu-gcc LLVM=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These variables must be passed for all the make invocations described in this document.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Using Clang with a &lt;code&gt;riscv*-linux-gnu&lt;/code&gt; GNU binutils linker has been seen to produce broken binaries with missing relocations; it is therefore currently recommended that this combination be avoided.&lt;/p&gt; &#xA;&lt;h2&gt;Building with timestamp and compiler info&lt;/h2&gt; &#xA;&lt;p&gt;When doing development, we may want to know the build time and compiler info for debug purpose. OpenSBI can also be built with timestamp and compiler info. To build with those info and print it out at boot time, we can just simply add &lt;code&gt;BUILD_INFO=y&lt;/code&gt;, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make BUILD_INFO=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But if you have used &lt;code&gt;BUILD_INFO=y&lt;/code&gt;, and want to switch back to &lt;code&gt;BUILD_INFO=n&lt;/code&gt;, you must do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;before the next build.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Using &lt;code&gt;BUILD_INFO=y&lt;/code&gt; without specifying SOURCE_DATE_EPOCH will violate &lt;a href=&#34;https://reproducible-builds.org&#34;&gt;reproducible builds&lt;/a&gt;. This definition is ONLY for development and debug purpose, and should NOT be used in a product which follows &#34;reproducible builds&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Building with optimization off for debugging&lt;/h2&gt; &#xA;&lt;p&gt;When debugging OpenSBI, we may want to turn off the compiler optimization and make debugging produce the expected results for a better debugging experience. To build with optimization off we can just simply add &lt;code&gt;DEBUG=1&lt;/code&gt;, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make DEBUG=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This definition is ONLY for development and debug purpose, and should NOT be used in a product build.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to OpenSBI&lt;/h2&gt; &#xA;&lt;p&gt;The OpenSBI project encourages and welcomes contributions. Contributions should follow the rules described in the OpenSBI &lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/contributing.md&#34;&gt;Contribution Guideline&lt;/a&gt; document. In particular, all patches sent should contain a Signed-off-by tag.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/CONTRIBUTORS.md&#34;&gt;Contributors List&lt;/a&gt; document provides a list of individuals and organizations actively contributing to the OpenSBI project.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation of various aspects of OpenSBI can be found under the &lt;em&gt;docs&lt;/em&gt; directory. The documentation covers the following topics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/contributing.md&#34;&gt;Contribution Guideline&lt;/a&gt;: Guideline for contributing code to OpenSBI project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/library_usage.md&#34;&gt;Library Usage&lt;/a&gt;: API documentation of OpenSBI static library &lt;em&gt;libsbi.a&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/platform_requirements.md&#34;&gt;Platform Requirements&lt;/a&gt;: Requirements for using OpenSBI on a platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/platform_guide.md&#34;&gt;Platform Support Guide&lt;/a&gt;: Guideline for implementing support for new platforms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/platform/platform.md&#34;&gt;Platform Documentation&lt;/a&gt;: Documentation of the platforms currently supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/firmware/fw.md&#34;&gt;Firmware Documentation&lt;/a&gt;: Documentation for the different types of firmware examples build supported by OpenSBI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/riscv-software-src/opensbi/master/docs/domain_support.md&#34;&gt;Domain Support&lt;/a&gt;: Documentation for the OpenSBI domain support which helps users achieve system-level partitioning using OpenSBI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OpenSBI source code is also well documented. For source level documentation, doxygen style is used. Please refer to the &lt;a href=&#34;http://www.doxygen.nl/manual/index.html&#34;&gt;Doxygen manual&lt;/a&gt; for details on this format.&lt;/p&gt; &#xA;&lt;p&gt;Doxygen can be installed on Linux distributions using &lt;em&gt;.deb&lt;/em&gt; packages using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install doxygen doxygen-latex doxygen-doc doxygen-gui graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;em&gt;.rpm&lt;/em&gt; based Linux distributions, the following commands can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install doxygen doxygen-latex doxywizard graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install doxygen doxygen-latex doxywizard graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a consolidated &lt;em&gt;refman.pdf&lt;/em&gt; of all documentation, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make O=&amp;lt;build_directory&amp;gt; docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the resulting &lt;em&gt;refman.pdf&lt;/em&gt; will be available under the directory &lt;em&gt;&amp;lt;build_directory&amp;gt;/docs/latex&lt;/em&gt;. To install this file, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install_docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make I=&amp;lt;install_directory&amp;gt; install_docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;refman.pdf&lt;/em&gt; will be installed under &lt;em&gt;&amp;lt;install_directory&amp;gt;/docs&lt;/em&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>