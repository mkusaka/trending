<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-10T01:27:50Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>n0xa/m5stick-nemo</title>
    <updated>2024-01-10T01:27:50Z</updated>
    <id>tag:github.com,2024-01-10:/n0xa/m5stick-nemo</id>
    <link href="https://github.com/n0xa/m5stick-nemo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;M5 Stick C firmware for high-tech pranks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;M5Stick-NEMO&lt;/h1&gt; &#xA;&lt;p&gt;Firmware for high-tech pranks on M5Stack ESP32 Devices&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/n0xa/m5stick-nemo/raw/main/NEMOMatrix.png&#34; alt=&#34;M5-Nemo Matrix Logo&#34;&gt; Logo by @unagironin&lt;/p&gt; &#xA;&lt;h2&gt;Name and Background&lt;/h2&gt; &#xA;&lt;p&gt;NEMO started a personal project to help me learn more about ESP32 development with the Arduino IDE. I decided to replicate a few common, trending pranks that were getting a lot of attention in the tech community, as a challenge to myself, and to also better understand these attacks.&lt;br&gt; NEMO is named after the small, clever and stubborn fish in Finding Nemo. This project stands in contrast to another high-tech gadget that&#39;s associated with certain sea-dwelling creatures. I did want to prove that there are a lot of things you can do with a small development kit and some curiosity. I have no delusions of superseding the capabilities of any similar device with this project. It&#39;s just for fun, and my own education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/n0xa/m5stick-nemo/raw/main/M5-Nemo.jpg&#34; alt=&#34;M5-Nemo on M5StickC family and M5Cardputer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.righto.com/2010/11/improved-arduino-tv-b-gone.html&#34;&gt;TV B-Gone&lt;/a&gt; port (thanks to MrArm&#39;s &lt;a href=&#34;https://github.com/MrARM/hakrwatch&#34;&gt;HAKRWATCH&lt;/a&gt;) to shut off many infrared-controlled TVs, projectors and other devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ECTO-1A/AppleJuice&#34;&gt;AppleJuice&lt;/a&gt; iOS Bluetooth device pairing spam&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth device notification spamming for SwiftPair (Windows) and Android&lt;/li&gt; &#xA; &lt;li&gt;WiFi Spam - Funny SSIDs, WiFi Rickrolling, and a Random mode that creates hundreds of randomly-named SSIDs per minute&lt;/li&gt; &#xA; &lt;li&gt;WiFi NEMO Portal - A captive portal that tries to social engineer email credentials - saves usernames and passwords to SD Card (if inserted into a supported reader)&lt;/li&gt; &#xA; &lt;li&gt;WiFi SSID Scanner - Display 2.4 GHz SSIDs nearby, get information about them, and even clone the SSIDs in NEMO Portal&lt;/li&gt; &#xA; &lt;li&gt;User-adjustable 24 Hour digital clock backed by the M5 Stick RTC so it holds relatively stable time even in deep sleep and low battery mode&lt;/li&gt; &#xA; &lt;li&gt;EEPROM-backed Settings for rotation, brightness, automatic dimming and NEMO Portal SSID&lt;/li&gt; &#xA; &lt;li&gt;Battery level and credits in settings menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Interface&lt;/h2&gt; &#xA;&lt;p&gt;There are three main controls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Home - Stops the current process and returns you to the menu from almost anywhere in NEMO&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next - Moves the cursor to the next menu option. In function modes, this usually stops the process and returns you to the previous menu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select - Activates the currently-selected menu option, and wakes up the dimmed screen in function modes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;StickC and StickC-Plus&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Power: Long-press the power button for 6 seconds to turn off the unit&lt;/li&gt; &#xA;   &lt;li&gt;Home: Tap the power button (closest to the USB port)&lt;/li&gt; &#xA;   &lt;li&gt;Next: Tap the side button&lt;/li&gt; &#xA;   &lt;li&gt;Select: Tap the M5 button on the front of the unit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cardputer&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Home: Tap the Esc/~/` key or the Left-Arrow/, key&lt;/li&gt; &#xA;   &lt;li&gt;Next/Prev: Tap the Down-Arrow/. key and Up-Arrow/; keys to navigate&lt;/li&gt; &#xA;   &lt;li&gt;Select: Tap the OK/Enter key or Right-Arrow/? key&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NEMO Portal&lt;/h2&gt; &#xA;&lt;p&gt;In NEMO Portal mode, NEMO activates an open WiFi Hotspot named &#34;Nemo Free WiFi&#34; (configurable in portal.h) with DNS, DHCP and Web servers activated.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NEMO Portal serves a fake login page that claims to provide internet access if you log in.&lt;/li&gt; &#xA; &lt;li&gt;This is a social engineering attack, and will log the username and passwords entered on the page.&lt;/li&gt; &#xA; &lt;li&gt;From the Wifi Scan details, you can clone an existing SSID from the scan list. Exiting NEMO Portal will clear the Evil Twin SSID&lt;/li&gt; &#xA; &lt;li&gt;You can view captured credentials by connecting to the portal from your own device and browsing to &lt;a href=&#34;http://172.0.0.1/creds&#34;&gt;http://172.0.0.1/creds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can set a custom SSID by connecting to the portal from your own device and browsing to &lt;a href=&#34;http://172.0.0.1/ssid&#34;&gt;http://172.0.0.1/ssid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If your device supports EEPROM for settings, the custom SSID you enter will be saved as the default, even if powered off.&lt;/li&gt; &#xA; &lt;li&gt;If your device has an SD Card reader with a FAT filesystem formatted card inserted, the usernames and passwords will be logged to nemo-portal-creds.txt on the SD Card for you to peruse later.&lt;/li&gt; &#xA; &lt;li&gt;SD Card support is only enabled by default on the M5Stack Cardputer platform. It can be enabled on M5Stick devices but an SD Card reader must be built and attached to the front panel pin header.&lt;/li&gt; &#xA; &lt;li&gt;NEMO Portal is only for use on professional engagements with a valid scope of work, educational or demonstration purposes. Storage, sale, or use of personal information without consent is against the law. ðŸ¤“&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install from M5Burner&lt;/h2&gt; &#xA;&lt;p&gt;This is the absolute easiest way to get NEMO&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.m5stack.com/en/quick_start/m5stickc_plus/uiflow&#34;&gt;M5Stick C Plus Quick Start&lt;/a&gt; has links to the M5Burner app for Linux, MacOS and Windows. This is the official tool to install UIFlow and other official firmware. I provide up-to-date binaries for NEMO there.&lt;/li&gt; &#xA; &lt;li&gt;Launch M5Burner&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;StickC&#34; from the menu on the left (or StampS3 for Cardputer)&lt;/li&gt; &#xA; &lt;li&gt;Use the search at the top of the app to look for &#34;NEMO&#34;. My official builds will be uploaded by &#34;4x0nn&#34; and have photos.&lt;/li&gt; &#xA; &lt;li&gt;Click Download&lt;/li&gt; &#xA; &lt;li&gt;Click Burn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install .bin files manually with esptool.py&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install ESP-IDF tools per the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/&#34;&gt;Espressif Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the esp-idf CMD tool (on Windows) - on Mac or Linux, esp-idf.py and esptool.py should be in the system path.&lt;/li&gt; &#xA; &lt;li&gt;esptool.py --port COMPORT -b 115200 write_flash -z 0x0 M5Nemo-VERSION.bin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;port may be a COM port e.g. COM4, COM11 on Windows. On Mac and Linux it will usually be in /dev such as /dev/ttyUSB0, /dev/ttyACM0 or /dev/cu.usbserial-3&lt;/li&gt; &#xA;   &lt;li&gt;M5Nemo-VERSION.bin should be a version you downloaded from a GitHub Release -- preferably the latest available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;If you want to customize NEMO or contribute to the project, you should be familiar with building NEMO from source.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Arduino IDE. I&#39;ve used Arduino 1.8 on Linux and Windows, and Arduino 2.2 on Windows successfully.&lt;/li&gt; &#xA; &lt;li&gt;Install the M5Stack boards for Arduino IDE: In File -&amp;gt; Preferences, paste this URL into the &#34;Boards Manager URLs&#34; text box. Use commas between URLs if there are already URLs present. &lt;a href=&#34;https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/arduino/package_m5stack_index.json&#34;&gt;https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/arduino/package_m5stack_index.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If M5Stack -&amp;gt; M5Stick-C-Plus doesn&#39;t show up under Tools -&amp;gt; Boards, then use Tools -&amp;gt; Boards -&amp;gt; Boards Manager and search for M5Stack. This will install support for most of the M5Stack boards including the Stick C Plus.&lt;/li&gt; &#xA; &lt;li&gt;Ensure the correct device model (e.g. M5Stick-C, M5Stick-C-Plus or M5Cardputer) is selected in the boards menu.&lt;/li&gt; &#xA; &lt;li&gt;Install necessary libraries. In Sketch -&amp;gt; Include Library -&amp;gt; Library Manager, search for and install the following libraries and any dependencies they require: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;M5StickCPlus, M5StickC or M5Cardputer&lt;/li&gt; &#xA;   &lt;li&gt;IRRemoteESP8266&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Un-comment the appropriate &lt;code&gt;#define&lt;/code&gt; line near the top for your platform (STICK_C, STICK_C_PLUS or CARDPUTER)&lt;/li&gt; &#xA; &lt;li&gt;Switch partition schemes. &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Partition Scheme&lt;/code&gt; -&amp;gt; &lt;code&gt;No OTA (Large APP)&lt;/code&gt; - sometimes this option is labeled &lt;code&gt;Huge APP&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configuration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The code should compile cleanly and work on an M5Stick C Plus out of the box from the master branch or a release tag.&lt;/li&gt; &#xA;   &lt;li&gt;Uncomment only the one appropriate &lt;code&gt;#define&lt;/code&gt; option or compiler errors will occur.&lt;/li&gt; &#xA;   &lt;li&gt;If for some reason the screen jumps from very dim at level 0 to almost fully bright at level 1 and further brightness levels don&#39;t affect anything, set the pct_brightness variable to false.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compile and upload the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Several features output debugging information to the serial monitor. Use the Serial Monitor feature in Arduino IDE or M5Burner to gather this information. It may have useful hints. When filing a bug report, it often helps to include serial monitor output.&lt;/li&gt; &#xA; &lt;li&gt;Reset the EEPROM. On models with EEPROM settings support, use &#34;Clear Settings&#34; from the settings menu, or hold the &#34;Next&#34; button (Side key on StickC models, Tab or Down Arrow on Cardputer) while powering on.&lt;/li&gt; &#xA; &lt;li&gt;TV-B-Gone&#39;s IR LED can be observed through a smart phone camera, emitting a pale purple beam of light. If it seems to be on constantly, or if it never flashes at all during TV-B-Gone operations, something is wrong. Report a bug. There&#39;s a known issue with TVBG not working after using Bluetooth spam or random wifi spam.&lt;/li&gt; &#xA; &lt;li&gt;Try viewing wifi lists from several different devices if you suspect wifi spam isn&#39;t working. Sometimes, Linux network manager can see networks that smart phones cannot. Please include the results of this testing if reporting wifi spam problems.&lt;/li&gt; &#xA; &lt;li&gt;Apple has patched a lot of Bluetooth stuff since summer 2023. If testing AppleJuice, try some of the AppleTV device types, as they tend to be more reliable due to apple not filtering out weaker bluetooth signals for that platform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please report bugs via GitHub Issues. These are easier to track than comments on social media posts, M5Burner entries, etc. If something isn&#39;t working, please include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firmware version&lt;/li&gt; &#xA; &lt;li&gt;How you installed it (M5Burner, compiled yourself, esptool.py)&lt;/li&gt; &#xA; &lt;li&gt;Hardware&lt;/li&gt; &#xA; &lt;li&gt;Specifically what feature and options are not working&lt;/li&gt; &#xA; &lt;li&gt;How you determined that it is not working and what testing you did. Include device models and operating systems of what you tested with, and any errors or relevant output from Serial Monitor, if applicable.&lt;/li&gt; &#xA; &lt;li&gt;If you figure out how to fix a bug you identified, PRs are welcome!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pliease look at the GitHub Issues for the project. There are feature suggestions and bugs reported there, and I&#39;d appreciate PRs that address those.&lt;/li&gt; &#xA; &lt;li&gt;When submitting a Pull Request, please target the develop branch. The easiest way to do this is to fork ALL branches, or to simply create a &#34;develop&#34; branch in your own fork, then use GitHub to Sync your develop branch.&lt;/li&gt; &#xA; &lt;li&gt;Take note of how certain hardware (like the LED and RTC) are defined and gated in the code and try to stick to those patterns. Also, use the definitions for FGCOLOR, BGCOLOR, TEXT_SIZE* and the DISP alias when outputting things to the built-in display.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Things I&#39;d like help on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved localization/translations of the menu, not just NEMO Portal HTML. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Probably needs a new .h file&lt;/li&gt; &#xA;   &lt;li&gt;Be configurable in settings and use an eeprom byte to save the setting&lt;/li&gt; &#xA;   &lt;li&gt;Make gratuitous use of &lt;code&gt;const&lt;/code&gt; in the implementation so that localization strings are stored only in, and referenced directly from, the flash storage as opposed to using lots of SRAM.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Infrared &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A new &#34;Region&#34; of TV-B-Gone that&#39;s full of additional IR codes that can turn RGB LED strips, air conditioners, fans, sound bars and the like on and off&lt;/li&gt; &#xA;   &lt;li&gt;A way to convert or use flipper zero IR codes from within NEMO&#39;s code-base&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Figure out a way to read and display battery level on the Cardputer and StickC-Plus2 models that lack an AXP192 PMU. The &lt;a href=&#34;https://github.com/m5stack/M5Cardputer-UserDemo/tree/main/main/hal/bat&#34;&gt;battery code in the Cardputer factory demo&lt;/a&gt; might be a good place to start.&lt;/li&gt; &#xA; &lt;li&gt;TARGETED Deauthentication against a specific access point only. Deauth spamming PRs will be rejected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Things I probably won&#39;t merge in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bulk wifi deauthentication spamming&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth spam that potentially disrupts health and fitness trackers, smart watches, etc.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</title>
    <updated>2024-01-10T01:27:50Z</updated>
    <id>tag:github.com,2024-01-10:/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</id>
    <link href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Amazon Kinesis Video Streams Webrtc SDK is for developers to install and customize realtime communication between devices and enable secure streaming of video, audio to Kinesis Video Streams.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Amazon Kinesis Video Streams C WebRTC SDK &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Pure C WebRTC Client for Amazon Kinesis Video Streams &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/actions/workflows/ci.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#key-features&#34;&gt;Key Features&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#build&#34;&gt;Build&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#run&#34;&gt;Run&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#documentation&#34;&gt;Documentation&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#setup-iot&#34;&gt;Setup IoT&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#use-pre-generated-certificates&#34;&gt;Use Pre-generated Certificates&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#related&#34;&gt;Related&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;New feature announcements&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the release notes in &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/releases&#34;&gt;Releases&lt;/a&gt; page&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio/Video Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VP8&lt;/li&gt; &#xA;   &lt;li&gt;H264&lt;/li&gt; &#xA;   &lt;li&gt;Opus&lt;/li&gt; &#xA;   &lt;li&gt;G.711 PCM (A-law)&lt;/li&gt; &#xA;   &lt;li&gt;G.711 PCM (Âµ-law)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Developer Controlled Media Pipeline &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Raw Media for Input/Output&lt;/li&gt; &#xA;   &lt;li&gt;Callbacks for &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/pull/201&#34;&gt;Congestion Control&lt;/a&gt;, FIR and PLI (set on RtcRtpTransceiver)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DataChannels&lt;/li&gt; &#xA; &lt;li&gt;NACKs&lt;/li&gt; &#xA; &lt;li&gt;STUN/TURN Support&lt;/li&gt; &#xA; &lt;li&gt;IPv4/IPv6&lt;/li&gt; &#xA; &lt;li&gt;Signaling Client Included &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;KVS Provides STUN/TURN and Signaling Backend&lt;/li&gt; &#xA;   &lt;li&gt;Connect with &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-android&#34;&gt;Android&lt;/a&gt;/&lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-ios&#34;&gt;iOS&lt;/a&gt;/&lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js&#34;&gt;Web&lt;/a&gt; using pre-made samples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Storage for WebRTC [NEW] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ingest media into a Kinesis Video Stream.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Portable &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tested on Linux/MacOS&lt;/li&gt; &#xA;   &lt;li&gt;Tested on x64, ARMv5&lt;/li&gt; &#xA;   &lt;li&gt;Build system designed for pleasant cross-compilation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Small Install Size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sub 200k library size&lt;/li&gt; &#xA;   &lt;li&gt;OpenSSL, libsrtp, libjsmn, libusrsctp and libwebsockets dependencies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;To download run the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will also need to install &lt;code&gt;pkg-config&lt;/code&gt; and &lt;code&gt;CMake&lt;/code&gt; and a build environment&lt;/p&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;Create a build directory in the newly checked out repository, and execute CMake from it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mkdir -p amazon-kinesis-video-streams-webrtc-sdk-c/build; cd amazon-kinesis-video-streams-webrtc-sdk-c/build; cmake .. &lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have provided an example of using GStreamer to capture/encode video, and then send via this library. This is only build if &lt;code&gt;pkg-config&lt;/code&gt; finds GStreamer is installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu and Raspberry Pi OS you can get the libraries by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libssl-dev libcurl4-openssl-dev liblog4cplus-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-bad gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-tools &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default we download all the libraries from GitHub and build them locally, so should require nothing to be installed ahead of time. If you do wish to link to existing libraries you can use the following flags to customize your build.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency requirements&lt;/h3&gt; &#xA;&lt;p&gt;These would be applicable if the SDK is being linked with system dependencies instead of building from source by the SDK. &lt;code&gt;libmbedtls&lt;/code&gt;: &lt;code&gt;&amp;gt;= 2.25.0 &amp;amp; &amp;lt; 3.x.x&lt;/code&gt; &lt;code&gt;libopenssl&lt;/code&gt;: &lt;code&gt;= 1.1.1x&lt;/code&gt; &lt;code&gt;libsrtp2&lt;/code&gt; : &lt;code&gt;&amp;lt;= 2.5.0&lt;/code&gt; &lt;code&gt;libusrsctp&lt;/code&gt; : &lt;code&gt;&amp;lt;= 0.9.5.0&lt;/code&gt; &lt;code&gt;libwebsockets&lt;/code&gt; : &lt;code&gt;&amp;gt;= 4.2.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cross-Compilation&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to cross-compile &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt; are respected when building the library and all its dependencies. You will also need to set &lt;code&gt;BUILD_OPENSSL_PLATFORM&lt;/code&gt;, &lt;code&gt;BUILD_LIBSRTP_HOST_PLATFORM&lt;/code&gt; and &lt;code&gt;BUILD_LIBSRTP_DESTINATION_PLATFORM&lt;/code&gt;. See our codecov.io for an example of this. Every commit is cross compiled to ensure that it continues to work.&lt;/p&gt; &#xA;&lt;h4&gt;Static Builds&lt;/h4&gt; &#xA;&lt;p&gt;If &lt;code&gt;-DBUILD_STATIC_LIBS=TRUE&lt;/code&gt; then all dependencies and KVS WebRTC libraries will be built as static libraries.&lt;/p&gt; &#xA;&lt;h4&gt;CMake Arguments&lt;/h4&gt; &#xA;&lt;p&gt;You can pass the following options to &lt;code&gt;cmake ..&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_STATIC_LIBS&lt;/code&gt; -- Build all KVS WebRTC and third-party libraries as static libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DADD_MUCLIBC&lt;/code&gt; -- Add -muclibc c flag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_DEPENDENCIES&lt;/code&gt; -- Whether or not to build depending libraries from source&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_OPENSSL_PLATFORM&lt;/code&gt; -- If building OpenSSL what is the target platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_LIBSRTP_HOST_PLATFORM&lt;/code&gt; -- If building LibSRTP what is the current platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_LIBSRTP_DESTINATION_PLATFORM&lt;/code&gt; -- If building LibSRTP what is the destination platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_TEST=TRUE&lt;/code&gt; -- Build unit/integration tests, may be useful for confirm support for your device. &lt;code&gt;./tst/webrtc_client_test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCODE_COVERAGE&lt;/code&gt; -- Enable coverage reporting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCOMPILER_WARNINGS&lt;/code&gt; -- Enable all compiler warnings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DADDRESS_SANITIZER&lt;/code&gt; -- Build with AddressSanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DMEMORY_SANITIZER&lt;/code&gt; -- Build with MemorySanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DTHREAD_SANITIZER&lt;/code&gt; -- Build with ThreadSanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DUNDEFINED_BEHAVIOR_SANITIZER&lt;/code&gt; -- Build with UndefinedBehaviorSanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DLINK_PROFILER&lt;/code&gt; -- Link with gperftools (available profiler options are listed &lt;a href=&#34;https://github.com/gperftools/gperftools&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To clean up the &lt;code&gt;open-source&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; folders from previous build, use &lt;code&gt;cmake --build . --target clean&lt;/code&gt; from the &lt;code&gt;build&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;p&gt;For windows builds, you will have to include additional flags for libwebsockets CMake. Add the following flags to your cmake command, or edit the CMake file in ./CMake/Dependencies/libwebsockets-CMakeLists.txt with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DLWS_HAVE_PTHREAD_H=1 -DLWS_EXT_PTHREAD_INCLUDE_DIR=&#34;C:\Program Files (x86)\pthreads\include&#34; -DLWS_EXT_PTHREAD_LIBRARIES=&#34;C:\Program Files (x86)\pthreads\lib\x64\libpthreadGC2.a&#34; -DLWS_WITH_MINIMAL_EXAMPLES=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to edit the path to whatever pthread library you are using, and the proper path for your environment.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;To build the library and the provided samples run make in the build directory you executed CMake.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building with dependencies off&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the dependencies already installed, install the dependencies using the appropriate package manager.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu: &lt;code&gt;sudo apt-get install libsrtp2-dev libusrsctp-dev libwebsockets-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On MacOS: &lt;code&gt;brew install srtp libusrsctp libwebsockets &lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use OpenSSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DBUILD_DEPENDENCIES=OFF -DUSE_OPENSSL=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use MBedTLS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DBUILD_DEPENDENCIES=OFF -DUSE_OPENSSL=OFF -DUSE_MBEDTLS=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Please follow the dependency requirements to confirm the version requirements are satisfied to use the SDK with system installed dependencies. If the versions are not satisfied, this option would not work and enabling the SDK to build dependencies for you would be the best option to go ahead with.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;h3&gt;Setup your environment with your AWS account credentials and AWS region:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First set the appropriate environment variables so you can connect to KVS. If you want to use IoT certificate instead, check &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#setup-iot&#34;&gt;Setup IoT&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_ACCESS_KEY_ID= &amp;lt;AWS account access key&amp;gt;&#xA;export AWS_SECRET_ACCESS_KEY= &amp;lt;AWS account secret key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optionally, set AWS_SESSION_TOKEN if integrating with temporary token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_SESSION_TOKEN=&amp;lt;session token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Region is optional, if not being set, then us-west-2 will be used as default region.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_DEFAULT_REGION= &amp;lt;AWS region&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup logging:&lt;/h3&gt; &#xA;&lt;p&gt;Set up the desired log level. The log levels and corresponding values currently available are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_VERBOSE&lt;/code&gt; ---- 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_DEBUG&lt;/code&gt; ---- 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_INFO&lt;/code&gt; ---- 3&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_WARN&lt;/code&gt; ---- 4&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_ERROR&lt;/code&gt; ---- 5&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_FATAL&lt;/code&gt; ---- 6&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_SILENT&lt;/code&gt; ---- 7&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_LEVEL_PROFILE&lt;/code&gt; ---- 8&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To set a log level, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_KVS_LOG_LEVEL = &amp;lt;LOG_LEVEL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_KVS_LOG_LEVEL = 2 switches on DEBUG level logs while runnning the samples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The default log level is &lt;code&gt;LOG_LEVEL_WARN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Starting v1.8.0, by default, the SDK creates a log file that would have execution timing details of certain steps in connection establishment. It would be stored in the &lt;code&gt;build&lt;/code&gt; directory as &lt;code&gt;kvsFileLogFilter.x&lt;/code&gt;. In case you do not want to use defaults, you can modify certain parameters such as log file directory, log file size and file rotation index in the &lt;code&gt;createFileLoggerWithLevelFiltering&lt;/code&gt; function in the samples. In addition to these logs, if you would like to have other level logs in a file as well, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_ENABLE_FILE_LOGGING=TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set path to SSL CA certificate (&lt;strong&gt;Optional&lt;/strong&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If you have a custom CA certificate path to set, you can set it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_KVS_CACERT_PATH=../certs/cert.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By defaut, the SSL CA certificate is set to &lt;code&gt;../certs/cert.pem&lt;/code&gt; which points to the file in this repository:&lt;/p&gt; &#xA;&lt;h3&gt;Running the Samples&lt;/h3&gt; &#xA;&lt;p&gt;After executing &lt;code&gt;make&lt;/code&gt; you will have sample applications in your &lt;code&gt;build/samples&lt;/code&gt; directory. From the &lt;code&gt;build/&lt;/code&gt; directory, run any of the sample applications by passing to it the name of your signaling channel. If a signaling channel does not exist with the name you provide, the application creates one.&lt;/p&gt; &#xA;&lt;h4&gt;Sample: kvsWebrtcClientMaster&lt;/h4&gt; &#xA;&lt;p&gt;This application sends sample H264/Opus frames (path: &lt;code&gt;/samples/h264SampleFrames&lt;/code&gt; and &lt;code&gt;/samples/opusSampleFrames&lt;/code&gt;) via WebRTC. It also accepts incoming audio, if enabled in the browser. When checked in the browser, it prints the metadata of the received audio packets in your terminal. To run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./samples/kvsWebrtcClientMaster &amp;lt;channelName&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the &lt;strong&gt;Storage for WebRTC&lt;/strong&gt; feature, run the same command as above but with an additional command line arg to enable the feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./samples/kvsWebrtcClientMaster &amp;lt;channelName&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample: kvsWebrtcClientMasterGstSample&lt;/h4&gt; &#xA;&lt;p&gt;This application can send media from a GStreamer pipeline using test H264/Opus frames, device &lt;code&gt;autovideosrc&lt;/code&gt; and &lt;code&gt;autoaudiosrc&lt;/code&gt; input, or a received RTSP stream. It also will playback incoming audio via an &lt;code&gt;autoaudiosink&lt;/code&gt;. To run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./samples/kvsWebrtcClientMasterGstSample &amp;lt;channelName&amp;gt; &amp;lt;mediaType&amp;gt; &amp;lt;sourceType&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass the desired media and source type when running the sample. The mediaType can be &lt;code&gt;audio-video&lt;/code&gt; or &lt;code&gt;video-only&lt;/code&gt;. To use the &lt;strong&gt;Storage For WebRTC&lt;/strong&gt; feature, use &lt;code&gt;audio-video-storage&lt;/code&gt; as the mediaType. The source type can be &lt;code&gt;testsrc&lt;/code&gt;, &lt;code&gt;devicesrc&lt;/code&gt;, or &lt;code&gt;rtspsrc&lt;/code&gt;. Specify the RTSP URI if using &lt;code&gt;rtspsrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./samples/kvsWebrtcClientMasterGstSample &amp;lt;channelName&amp;gt; &amp;lt;mediaType&amp;gt; rtspsrc rtsp://&amp;lt;rtspUri&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample: kvsWebrtcClientViewer&lt;/h4&gt; &#xA;&lt;p&gt;This application accepts sample H264/Opus frames and prints them out. To run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./samples/kvsWebrtcClientViewer &amp;lt;channelName&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Viewing Master Samples&lt;/h3&gt; &#xA;&lt;p&gt;After running one of the master samples, when the command line application prints &#34;Signaling client connection to socket established&#34;, indicating that your signaling channel is created and the connected master is streaming media to it, you can view the stream. To do so, check the media playback viewer on the KVS Signaling Channels console or open the &lt;a href=&#34;https://awslabs.github.io/amazon-kinesis-video-streams-webrtc-sdk-js/examples/index.html&#34;&gt;WebRTC SDK Test Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If using the WebRTC SDK Test Page, set the following values using the same AWS credentials and the same signaling channel that you specified for the master above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access key ID&lt;/li&gt; &#xA; &lt;li&gt;Secret access key&lt;/li&gt; &#xA; &lt;li&gt;Signaling channel name&lt;/li&gt; &#xA; &lt;li&gt;Client ID (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then choose Start Viewer to start live video streaming of the sample H264/Opus frames.&lt;/p&gt; &#xA;&lt;h2&gt;Setup IoT&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use IoT certificate to authenticate with KVS signaling, please refer to &lt;a href=&#34;https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/how-iot.html&#34;&gt;Controlling Access to Kinesis Video Streams Resources Using AWS IoT&lt;/a&gt; for provisioning details.&lt;/li&gt; &#xA; &lt;li&gt;A sample IAM policy for the IoT role looks like below, policy can be modified based on your permission requirement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;   &#34;Version&#34;:&#34;2012-10-17&#34;,&#xA;   &#34;Statement&#34;:[&#xA;      {&#xA;          &#34;Effect&#34;:&#34;Allow&#34;,&#xA;          &#34;Action&#34;:[&#xA;            &#34;kinesisvideo:DescribeSignalingChannel&#34;,&#xA;            &#34;kinesisvideo:CreateSignalingChannel&#34;,&#xA;            &#34;kinesisvideo:GetSignalingChannelEndpoint&#34;,&#xA;            &#34;kinesisvideo:GetIceServerConfig&#34;,&#xA;            &#34;kinesisvideo:ConnectAsMaster&#34;&#xA;          ],&#xA;          &#34;Resource&#34;:&#34;arn:aws:kinesisvideo:*:*:channel/${credentials-iot:ThingName}/*&#34;&#xA;      }&#xA;   ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &#34;kinesisvideo:CreateSignalingChannel&#34; can be removed if you are running with existing KVS signaling channels. Viewer sample requires &#34;kinesisvideo:ConnectAsViewer&#34; permission. Integration test requires both &#34;kinesisvideo:ConnectAsViewer&#34; and &#34;kinesisvideo:DeleteSignalingChannel&#34; permission.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With the IoT certificate, IoT credentials provider endpoint (Note: it is not the endpoint on IoT AWS Console!), public key and private key ready, you can replace the static credentials provider createStaticCredentialProvider() and freeStaticCredentialProvider() with IoT credentials provider like below, the credentials provider for &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/raw/master/samples/Common.c&#34;&gt;samples&lt;/a&gt; is in createSampleConfiguration():&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;createLwsIotCredentialProvider(&#xA;            &#34;coxxxxxxxx168.credentials.iot.us-west-2.amazonaws.com&#34;,  // IoT credentials endpoint&#xA;            &#34;/Users/username/Downloads/iot-signaling/certificate.pem&#34;,  // path to iot certificate&#xA;            &#34;/Users/username/Downloads/iot-signaling/private.pem.key&#34;, // path to iot private key&#xA;            &#34;/Users/username/Downloads/iot-signaling/cacert.pem&#34;, // path to CA cert&#xA;            &#34;KinesisVideoSignalingCameraIoTRoleAlias&#34;, // IoT role alias&#xA;            channelName, // iot thing name, recommended to be same as your channel name&#xA;            &amp;amp;pSampleConfiguration-&amp;gt;pCredentialProvider));&#xA;&#xA;freeIotCredentialProvider(&amp;amp;pSampleConfiguration-&amp;gt;pCredentialProvider);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use Pre-generated Certificates&lt;/h2&gt; &#xA;&lt;p&gt;The certificate generating function (createCertificateAndKey) in createDtlsSession() can take between 5 - 15 seconds in low performance embedded devices, it is called for every peer connection creation when KVS WebRTC receives an offer. To avoid this extra start-up latency, certificate can be pre-generated and passed in when offer comes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important Note: It is recommended to rotate the certificates often - preferably for every peer connection to avoid a compromised client weakening the security of the new connections.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Take kvsWebRTCClientMaster as sample, add RtcCertificate certificates[CERT_COUNT]; to &lt;strong&gt;SampleConfiguration&lt;/strong&gt; in Samples.h. Then pass in the pre-generated certificate in initializePeerConnection() in Common.c.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;configuration.certificates[0].pCertificate = pSampleConfiguration-&amp;gt;certificates[0].pCertificate;&#xA;configuration.certificates[0].pPrivateKey = pSampleConfiguration-&amp;gt;certificates[0].pPrivateKey;&#xA;&#xA;where, `configuration` is of type `RtcConfiguration` in the function that calls `initializePeerConnection()`.&#xA;&#xA;Doing this will make sure that `createCertificateAndKey() would not execute since a certificate is already available.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Provide Hardware Entropy Source&lt;/h2&gt; &#xA;&lt;p&gt;In the mbedTLS version, the SDK uses /dev/urandom on Unix and CryptGenRandom API on Windows to get a strong entropy source. On some systems, these APIs might not be available. So, it&#39;s &lt;strong&gt;strongly suggested&lt;/strong&gt; that you bring your own hardware entropy source. To do this, you need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Uncomment &lt;code&gt;MBEDTLS_ENTROPY_HARDWARE_ALT&lt;/code&gt; in configs/config_mbedtls.h&lt;/li&gt; &#xA; &lt;li&gt;Write your own entropy source implementation by following this function signature: &lt;a href=&#34;https://github.com/ARMmbed/mbedtls/raw/v2.25.0/include/mbedtls/entropy_poll.h#L81-L92&#34;&gt;https://github.com/ARMmbed/mbedtls/blob/v2.25.0/include/mbedtls/entropy_poll.h#L81-L92&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Include your implementation source code in the linking process&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;DEBUG&lt;/h2&gt; &#xA;&lt;h3&gt;Getting the SDPs&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to print out the SDPs, run this command: &lt;code&gt;export DEBUG_LOG_SDP=TRUE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Adjust MTU&lt;/h3&gt; &#xA;&lt;p&gt;If ICE connection can be established successfully but media can not be transferred, make sure the actual MTU is higher than the MTU setting here: &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/raw/master/src/source/PeerConnection/Rtp.h#L12&#34;&gt;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/blob/master/src/source/PeerConnection/Rtp.h#L12&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also change settings such as buffer size, number of log files for rotation and log file path in the samples&lt;/p&gt; &#xA;&lt;h2&gt;Clang Checks&lt;/h2&gt; &#xA;&lt;p&gt;This SDK has clang format checks enforced in builds. In order to avoid re-iterating and make sure your code complies, use the &lt;code&gt;scripts/check-clang.sh&lt;/code&gt; to check for compliance and &lt;code&gt;scripts/clang-format.sh&lt;/code&gt; to ensure compliance.&lt;/p&gt; &#xA;&lt;h2&gt;Tracing high memory and/or cpu usage&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to specifically find the code path that causes high memory and/or cpu usage, you need to recompile the SDK with this command: &lt;code&gt;cmake .. -DLINK_PROFILER=ON&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The flag will link the SDK with &lt;a href=&#34;https://github.com/gperftools/gperftools&#34;&gt;gperftools&lt;/a&gt; profiler.&lt;/p&gt; &#xA;&lt;h3&gt;Heap Profile&lt;/h3&gt; &#xA;&lt;p&gt;You can run your program as you normally would. You only need to specify the following environment variable to get the heap profile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HEAPPROFILE=/tmp/heap.prof /path/to/your/binary&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information about what environment variables you can configure can be found &lt;a href=&#34;https://gperftools.github.io/gperftools/heapprofile.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CPU Profile&lt;/h3&gt; &#xA;&lt;p&gt;Similar to the heap profile, you only need to specify the following environment variable to get the CPU profile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CPUPROFILE=/tmp/cpu.prof /path/to/your/binary&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information about what environment variables you can configure can be found &lt;a href=&#34;https://gperftools.github.io/gperftools/cpuprofile.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Filtering network interfaces&lt;/h3&gt; &#xA;&lt;p&gt;This is useful to reduce candidate gathering time when it is known for certain network interfaces to not work well. A sample callback is available in &lt;code&gt;Common.c&lt;/code&gt;. The &lt;code&gt;iceSetInterfaceFilterFunc&lt;/code&gt; in &lt;code&gt;KvsRtcConfiguration&lt;/code&gt; must be set to the required callback. In the sample, it can be done this way in &lt;code&gt;initializePeerConnection()&lt;/code&gt;: &lt;code&gt;configuration.kvsRtcConfiguration.iceSetInterfaceFilterFunc = sampleFilterNetworkInterfaces&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building on MacOS M1&lt;/h3&gt; &#xA;&lt;p&gt;When building on MacOS M1, if the build fails while trying to build OpenSSL or Websockets, run the following command: &lt;code&gt;cmake .. -DBUILD_OPENSSL_PLATFORM=darwin64-arm64-cc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building on 32 bit Raspbian GNU/Linux 11&lt;/h3&gt; &#xA;&lt;p&gt;To build on a 32-bit Raspbian GNU/Linux 11 on 64-bit hardware, the OpenSSL library must be manually configured. This is due to the OpenSSL autoconfiguration script detecting 64-bit hardware and emitting 64-bit ARM assembly instructions which are not allowed in 32-bit executables. A 32-bit ARM version of OpenSSL can be configured by setting 32-bit ARM platform: &lt;code&gt;cmake .. -DBUILD_OPENSSL_PLATFORM=linux-armv4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Threadpool for Signaling Channel messages&lt;/h3&gt; &#xA;&lt;p&gt;The threadpool is enabled by default, and starts with 3 threads that it can increase up to 5 if all 3 are actively in use. To change these values to better match the resources of your use case please edit samples/Samples.h defines &lt;code&gt;KVS_SIGNALING_THREADPOOL_MIN&lt;/code&gt; and &lt;code&gt;KVS_SIGNALING_THREADPOOL_MAX&lt;/code&gt;. You can also disable the threadpool to instead create and detach each thread to handle signaling messages by commenting out &lt;code&gt;KVS_USE_SIGNALING_CHANNEL_THREADPOOL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All Public APIs are documented in our &lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/raw/master/src/include/com/amazonaws/kinesis/video/webrtcclient/Include.h&#34;&gt;Include.h&lt;/a&gt;, we also generate a &lt;a href=&#34;https://awslabs.github.io/amazon-kinesis-video-streams-webrtc-sdk-c/&#34;&gt;Doxygen&lt;/a&gt; each commit for easier navigation.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/master/#related&#34;&gt;related&lt;/a&gt; for more about WebRTC and KVS.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute to the development of this project, please base your pull requests off of the &lt;code&gt;origin/develop&lt;/code&gt; branch, and to the &lt;code&gt;origin/develop&lt;/code&gt; branch. Commits from &lt;code&gt;develop&lt;/code&gt; will be merged into master periodically as a part of each release cycle.&lt;/p&gt; &#xA;&lt;h2&gt;Outbound hostname and port requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KVS endpoint : TCP 443 (ex: kinesisvideo.us-west-2.amazonaws.com)&lt;/li&gt; &#xA; &lt;li&gt;HTTPS channel endpoint : TCP 443 (ex: r-2c136a55.kinesisvideo.us-west-2.amazonaws.com)&lt;/li&gt; &#xA; &lt;li&gt;WSS channel endpoint : TCP 443 (ex: m-26d02974.kinesisvideo.us-west-2.amazonaws.com)&lt;/li&gt; &#xA; &lt;li&gt;STUN endpoint : UDP 443 (ex: stun.kinesisvideo.us-west-2.amazonaws.com)&lt;/li&gt; &#xA; &lt;li&gt;TURN endpoint : UDP/TCP 443 (ex: 34-219-91-62.t-1cd92f6b.kinesisvideo.us-west-2.amazonaws.com:443)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The least common denominator for hostname is &lt;code&gt;*.kinesisvideo.&amp;lt;region&amp;gt;.amazonaws.com&lt;/code&gt; and port is 443.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/what-is-kvswebrtc.html&#34;&gt;What Is Amazon Kinesis Video Streams with WebRTC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js/&#34;&gt;JS SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-ios/&#34;&gt;iOS SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-android/&#34;&gt;Android SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the Apache 2.0 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cc65/cc65</title>
    <updated>2024-01-10T01:27:50Z</updated>
    <id>tag:github.com,2024-01-10:/cc65/cc65</id>
    <link href="https://github.com/cc65/cc65" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cc65 - a freeware C compiler for 6502 based systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About cc65&lt;/h1&gt; &#xA;&lt;p&gt;cc65 is a complete cross development package for 65(C)02 systems, including a powerful macro assembler, a C compiler, linker, archiver and several other tools. cc65 has C and runtime library support for many of the old 6502 machines. For details look at the &lt;a href=&#34;https://cc65.github.io&#34;&gt;Website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;People&lt;/h2&gt; &#xA;&lt;p&gt;Project founder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ullrich von Bassewitz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Core team members:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groessler&#34;&gt;Christian Groessler&lt;/a&gt;: Atari, Atari5200, and CreatiVision library Maintainer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dqh-au&#34;&gt;dqh&lt;/a&gt;: GHA help&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greg-king5&#34;&gt;Greg King&lt;/a&gt;: all around hackery&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrdudz&#34;&gt;groepaz&lt;/a&gt;: CBM library, Project Maintainer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oliverschmidt&#34;&gt;Oliver Schmidt&lt;/a&gt;: Apple II library Maintainer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;External contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acqn&#34;&gt;acqn&lt;/a&gt;: various compiler fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jedeoric&#34;&gt;jedeoric&lt;/a&gt;: Telestrat target&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmr&#34;&gt;jmr&lt;/a&gt;: compiler fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karrika&#34;&gt;karrika&lt;/a&gt;: Atari 7800 target&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smuehlst&#34;&gt;Stephan MÃ¼hlstrasser&lt;/a&gt;: osic1p target&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WayneParham&#34;&gt;Wayne Parham&lt;/a&gt;: Sym-1 target&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davepl&#34;&gt;Dave Plummer&lt;/a&gt;: KIM-1 target&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rumbledethumps&#34;&gt;rumbledethumps&lt;/a&gt;: Picocomputer target&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;(The above list is incomplete, if you feel left out - please speak up or add yourself in a PR)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a complete list look at the &lt;a href=&#34;https://github.com/orgs/cc65/teams&#34;&gt;full team list&lt;/a&gt; or the list of &lt;a href=&#34;https://github.com/cc65/cc65/graphs/contributors&#34;&gt;all contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;For general discussion, questions, etc subscribe to the &lt;a href=&#34;https://cc65.github.io/mailing-lists.html&#34;&gt;mailing list&lt;/a&gt; or use the &lt;a href=&#34;https://github.com/cc65/cc65/discussions&#34;&gt;github discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of us may also be around on IRC &lt;a href=&#34;https://web.libera.chat/#cc65&#34;&gt;#cc65&lt;/a&gt; on libera.chat&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The main &lt;a href=&#34;https://cc65.github.io/doc&#34;&gt;Documentation&lt;/a&gt; for users and developers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Info on &lt;a href=&#34;https://raw.githubusercontent.com/cc65/cc65/master/Contributing.md&#34;&gt;Contributing&lt;/a&gt; to the CC65 project. Please read this before working on something you want to contribute, and before reporting bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/cc65/wiki/wiki&#34;&gt;Wiki&lt;/a&gt; contains some extra info that does not fit into the regular documentation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://sourceforge.net/projects/cc65/files/cc65-snapshot-win64.zip&#34;&gt;Windows 64bit Snapshot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://sourceforge.net/projects/cc65/files/cc65-snapshot-win32.zip&#34;&gt;Windows 32bit Snapshot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://software.opensuse.org/download.html?project=home%3Astrik&amp;amp;package=cc65&#34;&gt;Linux Snapshot DEB and RPM&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cc65/cc65/actions/workflows/snapshot-on-push-master.yml&#34;&gt;&lt;img src=&#34;https://github.com/cc65/cc65/actions/workflows/snapshot-on-push-master.yml/badge.svg?branch=master&#34; alt=&#34;Snapshot Build&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>