<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-12T01:24:30Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lico-n/ZygiskFrida</title>
    <updated>2023-08-12T01:24:30Z</updated>
    <id>tag:github.com,2023-08-12:/lico-n/ZygiskFrida</id>
    <link href="https://github.com/lico-n/ZygiskFrida" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Injects frida gadget using zygisk to bypass anti-tamper checks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZygiskFrida&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://frida.re&#34;&gt;Frida&lt;/a&gt; is a dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/topjohnwu/Magisk&#34;&gt;Zygisk&lt;/a&gt; part of Magisk allows you to run code in every Android application&#39;s Process.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lico-n/ZygiskFrida/main/README.md&#34;&gt;ZygiskFrida&lt;/a&gt; is a zygisk module allowing you to inject frida gadget in Android applications in a more stealthy way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The gadget is not embedded into the APK itself. So APK Integrity/Signature checks will still pass.&lt;/li&gt; &#xA; &lt;li&gt;The process is not being ptraced like it is with frida-server. Avoiding ptrace based detection.&lt;/li&gt; &#xA; &lt;li&gt;Control about the injection time of the gadget.&lt;/li&gt; &#xA; &lt;li&gt;Allows you to load multiple arbitrary libraries into the process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo also provides a &lt;a href=&#34;https://github.com/RikkaApps/Riru&#34;&gt;Riru&lt;/a&gt; flavor in case you are still using riru with an older magisk version rather than zygisk.&lt;/p&gt; &#xA;&lt;h2&gt;How to use the module&lt;/h2&gt; &#xA;&lt;h3&gt;General Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest release from the &lt;a href=&#34;https://github.com/lico-n/ZygiskFrida/releases&#34;&gt;Release Page&lt;/a&gt;&lt;br&gt; If you are using riru instead of zygisk choose the riru-release. Otherwise choose the normal version.&lt;/li&gt; &#xA; &lt;li&gt;Transfer the ZygiskFrida zip file to your device and install it via Magisk.&lt;/li&gt; &#xA; &lt;li&gt;Reboot after install&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;/data/local/tmp/re.zyg.fri/target_packages&lt;/code&gt; on your device with the target package names.&lt;br&gt; Apps with matching package names will be injected with the gadget. One package name per line.&lt;br&gt; f.e. &lt;code&gt;adb shell &#39;su -c &#34;echo com.example.package &amp;gt; /data/local/tmp/re.zyg.fri/target_packages&#34;&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch your app. It will pause at startup allowing you to attach f.e. &lt;code&gt;frida -U -N com.example.package&lt;/code&gt; or &lt;code&gt;frida -U -n Gadget&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Further configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Start up delay&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are times that you might want to delay the injection of the gadget. Some applications might run checks at start up and delaying the injection can help avoid these.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/data/local/tmp/re.zyg.fri/target_packages&lt;/code&gt; accepts a start up delay in milliseconds. You can provide it separated by a comma from the package_name.&lt;/p&gt; &#xA;&lt;p&gt;f.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb shell &#39;su -c &#34;echo com.example.package,20000 &amp;gt; /data/local/tmp/re.zyg.fri/target_packages&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;would inject the gadget after a delay of 20 seconds.&lt;/p&gt; &#xA;&lt;p&gt;You get a 10 seconds countdown to injection in the ZygiskFrida logs &lt;code&gt;adb logcat -S ZygiskFrida&lt;/code&gt;. This can help if you want to time the injection with app interactions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gadget version and config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The bundled gadget is located at &lt;code&gt;/data/local/tmp/re.zyg.fri/libgadget.so&lt;/code&gt;.&lt;br&gt; You can follow the &lt;a href=&#34;https://frida.re/docs/gadget/&#34;&gt;Gadget Docs&lt;/a&gt; and add additional gadget config and scripts in that location.&lt;/p&gt; &#xA;&lt;p&gt;In case you want to use a different gadget version than the one bundled, you can simply replace the &lt;code&gt;libgadget.so&lt;/code&gt; with your own frida gadget.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Loading arbitrary libraries&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This module also allows you to load arbitrary .so libraries into the process.&lt;br&gt; This can allow you to load additional helper libraries for the gadget or enable any other use case that might need libraries loaded into the app process.&lt;/p&gt; &#xA;&lt;p&gt;For this you can add the file &lt;code&gt;/data/local/tmp/re.zyg.fri/injected_libraries&lt;/code&gt;.&lt;br&gt; The file should consist of file paths to libraries. The libraries are loaded in the order they are specified in the file.&lt;/p&gt; &#xA;&lt;p&gt;Example file content that would first load libhelperexample.so and then the bundled frida-gadget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/data/local/tmp/re.zyg.fri/libhelperexample.so&#xA;/data/local/tmp/re.zyg.fri/libgadget.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the libraries are located somewhere accessible by the app and that file permissions are properly set.&lt;/p&gt; &#xA;&lt;p&gt;If you want the frida gadget to start, you need to explicitly specify the bundled frida-gadget at &lt;code&gt;/data/local/tmp/re.zyg.fri/libgadget.so&lt;/code&gt;.&lt;br&gt; You can also choose to specify your own gadget this way or omit the gadget altogether.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout the project&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew :module:assembleRelease&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The build magisk module should then be in the &lt;code&gt;out&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also build and install the module to your device directly with &lt;code&gt;./gradlew :module:flashAndRebootZygiskRelease&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For emulators this will start the gadget in native realm. This means that you will be able to hook Java but not native functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspired by &lt;a href=&#34;https://github.com/Perfare/Zygisk-Il2CppDumper&#34;&gt;https://github.com/Perfare/Zygisk-Il2CppDumper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hexhacking/xDL&#34;&gt;https://github.com/hexhacking/xDL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jadijadi/Practical-Programming-Practices</title>
    <updated>2023-08-12T01:24:30Z</updated>
    <id>tag:github.com,2023-08-12:/jadijadi/Practical-Programming-Practices</id>
    <link href="https://github.com/jadijadi/Practical-Programming-Practices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of programming exercises to help you practice your new language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Practical-Programming-Practices&lt;/h1&gt; &#xA;&lt;p&gt;A collection of programming exercises to help you practice your new language&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to any of the solutions, please read the &lt;a href=&#34;https://raw.githubusercontent.com/jadijadi/Practical-Programming-Practices/main/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt; first.&lt;/p&gt;</summary>
  </entry>
</feed>