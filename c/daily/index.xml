<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-18T01:38:21Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>libimobiledevice/libimobiledevice</title>
    <updated>2022-07-18T01:38:21Z</updated>
    <id>tag:github.com,2022-07-18:/libimobiledevice/libimobiledevice</id>
    <link href="https://github.com/libimobiledevice/libimobiledevice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform protocol library to communicate with iOS devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libimobiledevice&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;A library to communicate with services on iOS devices using native protocols.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/libimobiledevice/libimobiledevice/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;libimobiledevice is a cross-platform software library that talks the protocols to interact with iOS devices.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other projects, it does not depend on using any existing proprietary libraries and does not require jailbreaking.&lt;/p&gt; &#xA;&lt;p&gt;Some key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt;: Implements many high-level interfaces for device services&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: Object oriented architecture and service abstraction layer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-Platform:&lt;/strong&gt; Tested on Linux, macOS, Windows and Android platforms&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Utilities&lt;/strong&gt;: Provides various command-line utilities for device services&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SSL&lt;/strong&gt;: Allows choosing between OpenSSL or GnuTLS to handle SSL communication&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Supports network connections with &#34;WiFi sync&#34; enabled devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; Provides Cython based bindings for Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The implemented interfaces of many device service protocols allow applications to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access filesystem of a device&lt;/li&gt; &#xA; &lt;li&gt;Access documents of file sharing apps&lt;/li&gt; &#xA; &lt;li&gt;Retrieve information about a device and modify various settings&lt;/li&gt; &#xA; &lt;li&gt;Backup and restore the device in a native way compatible with iTunes&lt;/li&gt; &#xA; &lt;li&gt;Manage app icons arrangement on the device&lt;/li&gt; &#xA; &lt;li&gt;Install, remove, list and basically manage apps&lt;/li&gt; &#xA; &lt;li&gt;Activate a device using official servers&lt;/li&gt; &#xA; &lt;li&gt;Manage contacts, calendars, notes and bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Retrieve and remove crashreports&lt;/li&gt; &#xA; &lt;li&gt;Retrieve various diagnostics information&lt;/li&gt; &#xA; &lt;li&gt;Establish a debug connection for app debugging&lt;/li&gt; &#xA; &lt;li&gt;Mount filesystem images&lt;/li&gt; &#xA; &lt;li&gt;Forward device notifications&lt;/li&gt; &#xA; &lt;li&gt;Manage device provisioning&lt;/li&gt; &#xA; &lt;li&gt;Take screenshots from the device screen (requires mounted developer image)&lt;/li&gt; &#xA; &lt;li&gt;Simulate changed geolocation of the device (requires mounted developer image)&lt;/li&gt; &#xA; &lt;li&gt;Relay the syslog of the device&lt;/li&gt; &#xA; &lt;li&gt;Expose a connection for WebKit remote debugging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and much more.&lt;/p&gt; &#xA;&lt;p&gt;The library is in development since August 2007 with the goal to bring support for these devices to the Linux Desktop.&lt;/p&gt; &#xA;&lt;h2&gt;Installation / Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Debian / Ubuntu Linux&lt;/h3&gt; &#xA;&lt;p&gt;First install all required dependencies and build tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install \&#xA;&#x9;build-essential \&#xA;&#x9;pkg-config \&#xA;&#x9;checkinstall \&#xA;&#x9;git \&#xA;&#x9;autoconf \&#xA;&#x9;automake \&#xA;&#x9;libtool-bin \&#xA;&#x9;libplist-dev \&#xA;&#x9;libusbmuxd-dev \&#xA;&#x9;libimobiledevice-glue-dev \&#xA;&#x9;libssl-dev \&#xA;&#x9;usbmuxd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to optionally build the documentation or Python bindings use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install \&#xA;&#x9;doxygen \&#xA;&#x9;cython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then clone the actual project repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/libimobiledevice/libimobiledevice.git&#xA;cd libimobiledevice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can build and install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./autogen.sh&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you require a custom prefix or other option being passed to &lt;code&gt;./configure&lt;/code&gt; you can pass them directly to &lt;code&gt;./autogen.sh&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh --prefix=/opt/local --enable-debug&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, OpenSSL will be used as TLS/SSL library. If you prefer GnuTLS, configure with &lt;code&gt;--with-gnutls&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh --with-gnutls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MbedTLS is also supported and can be enabled by passing &lt;code&gt;--with-mbedtls&lt;/code&gt; to configure. If mbedTLS is not installed in a default location, you need to set the environment variables &lt;code&gt;mbedtls_INCLUDES&lt;/code&gt; to the path that contains the MbedTLS headers and &lt;code&gt;mbedtls_LIBDIR&lt;/code&gt; to set the library path. Optionally, &lt;code&gt;mbedtls_LIBS&lt;/code&gt; can be used to set the library names directly. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh --with-mbedtls mbedtls_INCLUDES=/opt/local/include mbedtls_LIBDIR=/opt/local/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Documentation about using the library in your application is not available yet. The &#34;hacker way&#34; for now is to look at the implementation of the included utilities.&lt;/p&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;p&gt;The library bundles the following command-line utilities in the tools directory:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Utility&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevice_id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List attached devices or print device name of given device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicebackup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create or restore backup for devices (legacy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicebackup2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create or restore backups for devices running iOS 4 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicebtlogger&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Capture Bluetooth HCI traffic from a device (requires log profile)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicecrashreport&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Retrieve crash reports from a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicedate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the current date or set it on a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicedebug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interact with the debugserver service of a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicedebugserverproxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Proxy a debugserver connection from a device for remote debugging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicediagnostics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interact with the diagnostics interface of a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceenterrecovery&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make a device enter recovery mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceimagemounter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mount disk images on the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceinfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show information about a connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicename&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display or set the device name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicenotificationproxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Post or observe notifications on a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicepair&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Manage host pairings with devices and usbmuxd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ideviceprovision&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Manage provisioning profiles on a device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicescreenshot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gets a screenshot from the connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicesetlocation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simulate location on device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idevicesyslog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Relay syslog of a connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please consult the usage information or manual pages of each utility for a documentation of available command line options and usage examples like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ideviceinfo --help&#xA;man ideviceinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from anyone and are grateful for every pull request!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute, please fork the &lt;code&gt;master&lt;/code&gt; branch, change, commit and send a pull request for review. Once approved it can be merged into the main code base.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to contribute larger changes or a major refactoring, please create a ticket first to discuss the idea upfront to ensure less effort for everyone.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure your contribution adheres to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try to follow the code style of the project&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should describe the change well without being too short&lt;/li&gt; &#xA; &lt;li&gt;Try to split larger changes into individual commits of a common domain&lt;/li&gt; &#xA; &lt;li&gt;Use your real name and a valid email address for your commits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are still working on the guidelines so bear with us!&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://libimobiledevice.org/&#34;&gt;https://libimobiledevice.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repository: &lt;a href=&#34;https://git.libimobiledevice.org/libimobiledevice.git&#34;&gt;https://git.libimobiledevice.org/libimobiledevice.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repository (Mirror): &lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice.git&#34;&gt;https://github.com/libimobiledevice/libimobiledevice.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue Tracker: &lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice/issues&#34;&gt;https://github.com/libimobiledevice/libimobiledevice/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing List: &lt;a href=&#34;https://lists.libimobiledevice.org/mailman/listinfo/libimobiledevice-devel&#34;&gt;https://lists.libimobiledevice.org/mailman/listinfo/libimobiledevice-devel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/libimobiledev&#34;&gt;https://twitter.com/libimobiledev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library and utilities are licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-2.1.en.html&#34;&gt;GNU Lesser General Public License v2.1&lt;/a&gt;, also included in the repository in the &lt;code&gt;COPYING&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Apple, iPhone, iPad, iPod, iPod Touch, Apple TV, Apple Watch, Mac, iOS, iPadOS, tvOS, watchOS, and macOS are trademarks of Apple Inc.&lt;/p&gt; &#xA;&lt;p&gt;This project is an independent software and has not been authorized, sponsored, or otherwise approved by Apple Inc.&lt;/p&gt; &#xA;&lt;p&gt;README Updated on: 2022-04-04&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openzfs/zfs</title>
    <updated>2022-07-18T01:38:21Z</updated>
    <id>tag:github.com,2022-07-18:/openzfs/zfs</id>
    <link href="https://github.com/openzfs/zfs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenZFS on Linux and FreeBSD&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://openzfs.github.io/openzfs-docs/_static/img/logo/480px-Open-ZFS-Secondary-Logo-Colour-halfsize.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenZFS is an advanced file system and volume manager which was originally developed for Solaris and is now maintained by the OpenZFS community. This repository contains the code for running OpenZFS on Linux and FreeBSD.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/openzfs/zfs&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/openzfs/zfs/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/openzfs-zfs&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/1973/badge.svg?sanitize=true&#34; alt=&#34;coverity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Official Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openzfs.github.io/openzfs-docs/&#34;&gt;Documentation&lt;/a&gt; - for using and developing this repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zfsonlinux.org&#34;&gt;ZoL Site&lt;/a&gt; - Linux release info &amp;amp; links&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openzfs.github.io/openzfs-docs/Project%20and%20Community/Mailing%20Lists.html&#34;&gt;Mailing lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openzfs.org/&#34;&gt;OpenZFS site&lt;/a&gt; - for conference videos and info on other platforms (illumos, OSX, Windows, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Full documentation for installing OpenZFS on your favorite operating system can be found at the &lt;a href=&#34;https://openzfs.github.io/openzfs-docs/Getting%20Started/index.html&#34;&gt;Getting Started Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contribute &amp;amp; Develop&lt;/h1&gt; &#xA;&lt;p&gt;We have a separate document with &lt;a href=&#34;https://raw.githubusercontent.com/openzfs/zfs/master/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://raw.githubusercontent.com/openzfs/zfs/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Release&lt;/h1&gt; &#xA;&lt;p&gt;OpenZFS is released under a CDDL license. For more details see the NOTICE, LICENSE and COPYRIGHT files; &lt;code&gt;UCRL-CODE-235197&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supported Kernels&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;META&lt;/code&gt; file contains the officially recognized supported Linux kernel versions.&lt;/li&gt; &#xA; &lt;li&gt;Supported FreeBSD versions are any supported branches and releases starting from 12.2-RELEASE.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>flipperdevices/flipperzero-firmware</title>
    <updated>2022-07-18T01:38:21Z</updated>
    <id>tag:github.com,2022-07-18:/flipperdevices/flipperzero-firmware</id>
    <link href="https://github.com/flipperdevices/flipperzero-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flipper Zero firmware source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flipper Zero Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://flipperzero.one/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740930220399525928.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://habrastorage.org/webt/eo/m0/e4/eom0e4btudte7nrhnyic-laiog0.png&#34; alt=&#34;Show me the code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://flipperzero.one/&#34;&gt;Flipper Zero&lt;/a&gt;&#39;s Firmware repo! Our goal is to create nice and clean code with good documentation, to make it a pleasure for everyone to work with.&lt;/p&gt; &#xA;&lt;h1&gt;Clone the Repository&lt;/h1&gt; &#xA;&lt;p&gt;You should clone with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone --recursive https://github.com/flipperdevices/flipperzero-firmware.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Update firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://update.flipperzero.one/&#34;&gt;Get Latest Firmware from Update Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flipper Zero&#39;s firmware consists of two components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core2 firmware set - proprietary components by ST: FUS + radio stack. FUS is flashed at factory and you should never update it.&lt;/li&gt; &#xA; &lt;li&gt;Core1 Firmware - HAL + OS + Drivers + Applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They both must be flashed in the order described.&lt;/p&gt; &#xA;&lt;h2&gt;With offline update package&lt;/h2&gt; &#xA;&lt;p&gt;With Flipper attached over USB:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./fbt --with-updater flash_usb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just building the package:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./fbt --with-updater updater_package&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To update, copy the resulting directory to Flipper&#39;s SD card and navigate to &lt;code&gt;update.fuf&lt;/code&gt; file in Archive app.&lt;/p&gt; &#xA;&lt;h2&gt;With STLink&lt;/h2&gt; &#xA;&lt;h3&gt;Core1 Firmware&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / macOS&lt;/li&gt; &#xA; &lt;li&gt;Terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&#34;&gt;arm-gcc-none-eabi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openocd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One liner: &lt;code&gt;./fbt firmware_flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;With USB DFU&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download latest &lt;a href=&#34;https://update.flipperzero.one&#34;&gt;Firmware&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reboot Flipper to Bootloader&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press and hold &lt;code&gt;← Left&lt;/code&gt; + &lt;code&gt;↩ Back&lt;/code&gt; for reset&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;↩ Back&lt;/code&gt; and keep holding &lt;code&gt;← Left&lt;/code&gt; until blue LED lights up&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;← Left&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dfu-util -D full.dfu -a 0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Build with Docker&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker Engine and Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prepare the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose exec dev ./fbt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;p&gt;If compilation fails, make sure all submodules are all initialized. Either clone with &lt;code&gt;--recursive&lt;/code&gt; or use &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build on Linux/macOS&lt;/h1&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;documentation/fbt.md&lt;/code&gt; for details on building and flashing firmware.&lt;/p&gt; &#xA;&lt;h2&gt;macOS Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt; and install all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew bundle --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;gcc-arm-none-eabi&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;toolchain=&#34;gcc-arm-none-eabi-10.3-2021.10&#34;&#xA;toolchain_package=&#34;$toolchain-$(uname -m)-linux&#34;&#xA;&#xA;wget -P /opt &#34;https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/$toolchain_package.tar.bz2&#34;&#xA;&#xA;tar xjf /opt/$toolchain_package.tar.bz2 -C /opt&#xA;rm /opt/$toolchain_package.tar.bz2&#xA;&#xA;for file in /opt/$toolchain/bin/* ; do ln -s &#34;${file}&#34; &#34;/usr/bin/$(basename ${file})&#34; ; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openocd (debugging/flashing over SWD)&lt;/li&gt; &#xA; &lt;li&gt;heatshrink (compiling image assets)&lt;/li&gt; &#xA; &lt;li&gt;clang-format (code formatting)&lt;/li&gt; &#xA; &lt;li&gt;dfu-util (flashing over USB DFU)&lt;/li&gt; &#xA; &lt;li&gt;protobuf (compiling proto sources)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to install them on Debian, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt update&#xA;apt install openocd clang-format-13 dfu-util protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;heatshrink has to be compiled &lt;a href=&#34;https://github.com/atomicobject/heatshrink&#34;&gt;from sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./fbt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;h2&gt;Flash everything&lt;/h2&gt; &#xA;&lt;p&gt;Connect your device via ST-Link and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./fbt firmware_flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://flipp.dev/discord&#34;&gt;flipp.dev/discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://flipperzero.one&#34;&gt;flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kickstarter page: &lt;a href=&#34;https://www.kickstarter.com/projects/flipper-devices/flipper-zero-tamagochi-for-hackers&#34;&gt;kickstarter.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.flipperzero.one/&#34;&gt;forum.flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Project structure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;applications&lt;/code&gt; - Applications and services used in firmware&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt; - Assets used by applications and services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;core&lt;/code&gt; - Furi Core: os level primitives and helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; - Debug tool: GDB-plugins, SVD-file and etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt; - Docker image sources (used for firmware build automation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;documentation&lt;/code&gt; - Documentation generation system configs and input files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firmware&lt;/code&gt; - Firmware source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; - Our and 3rd party libraries, drivers and etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt; - Supplementary scripts and python libraries home&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also pay attention to &lt;code&gt;ReadMe.md&lt;/code&gt; files inside of those directories.&lt;/p&gt;</summary>
  </entry>
</feed>