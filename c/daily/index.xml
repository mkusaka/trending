<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-22T01:34:59Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cracked5pider/Ekko</title>
    <updated>2022-06-22T01:34:59Z</updated>
    <id>tag:github.com,2022-06-22:/Cracked5pider/Ekko</id>
    <link href="https://github.com/Cracked5pider/Ekko" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sleep Obfuscation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ekko&lt;/h1&gt; &#xA;&lt;p&gt;A small sleep obfuscation technique that uses &lt;code&gt;CreateTimerQueueTimer&lt;/code&gt; to queue up the ROP chain that performs Sleep obfuscation&lt;/p&gt; &#xA;&lt;h3&gt;Credit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ilove2pwn_&#34;&gt;Austin Hudson (@SecIdiot)&lt;/a&gt; &lt;a href=&#34;https://suspicious.actor/2022/05/05/mdsec-nighthawk-study.html&#34;&gt;https://suspicious.actor/2022/05/05/mdsec-nighthawk-study.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>robertdavidgraham/masscan</title>
    <updated>2022-06-22T01:34:59Z</updated>
    <id>tag:github.com,2022-06-22:/robertdavidgraham/masscan</id>
    <link href="https://github.com/robertdavidgraham/masscan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TCP port scanner, spews SYN packets asynchronously, scanning entire Internet in under 5 minutes.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/robertdavidgraham/masscan.svg&#34;&gt;&lt;img src=&#34;https://travis-ci.org/robertdavidgraham/masscan.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MASSCAN: Mass IP port scanner&lt;/h1&gt; &#xA;&lt;p&gt;This is an Internet-scale port scanner. It can scan the entire Internet in under 5 minutes, transmitting 10 million packets per second, from a single machine.&lt;/p&gt; &#xA;&lt;p&gt;Its usage (parameters, output) is similar to &lt;code&gt;nmap&lt;/code&gt;, the most famous port scanner. When in doubt, try one of those features -- features that support widespread scanning of many machines are supported, while in-depth scanning of single machines aren&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;Internally, it uses asynchronous transmission, similar to port scanners like &lt;code&gt;scanrand&lt;/code&gt;, &lt;code&gt;unicornscan&lt;/code&gt;, and &lt;code&gt;ZMap&lt;/code&gt;. It&#39;s more flexible, allowing arbitrary port and address ranges.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: masscan uses its own &lt;strong&gt;ad hoc TCP/IP stack&lt;/strong&gt;. Anything other than simple port scans may cause conflict with the local TCP/IP stack. This means you need to use either the &lt;code&gt;--src-ip&lt;/code&gt; option to run from a different IP address, or use &lt;code&gt;--src-port&lt;/code&gt; to configure which source ports masscan uses, then also configure the internal firewall (like &lt;code&gt;pf&lt;/code&gt; or &lt;code&gt;iptables&lt;/code&gt;) to firewall those ports from the rest of the operating system.&lt;/p&gt; &#xA;&lt;p&gt;This tool is free, but consider contributing money to its development: Bitcoin wallet address: 1MASSCANaHUiyTtR3bJ2sLGuMw5kDBaj4T&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;On Debian/Ubuntu, it goes something like the following. It doesn&#39;t really have any dependencies other than a C compiler (such as &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get --assume-yes install git make gcc&#xA;git clone https://github.com/robertdavidgraham/masscan&#xA;cd masscan&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This puts the program in the &lt;code&gt;masscan/bin&lt;/code&gt; subdirectory. To install it (on Linux) run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The source consists of a lot of small files, so building goes a lot faster by using the multi-threaded build. This requires more than 2gigs on a Raspberry Pi (and breaks), so you might use a smaller number, like &lt;code&gt;-j4&lt;/code&gt; rather than all possible threads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Linux is the primary target platform, the code runs well on many other systems (Windows, macOS, etc.). Here&#39;s some additional build info:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows w/ Visual Studio: use the VS10 project&lt;/li&gt; &#xA; &lt;li&gt;Windows w/ MinGW: just type &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows w/ cygwin: won&#39;t work&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X /w XCode: use the XCode4 project&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X /w cmdline: just type &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD: type &lt;code&gt;gmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;other: try just compiling all the files together, &lt;code&gt;cc src/*.c -o bin/masscan&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On macOS, the x86 binaries seem to work just as fast under ARM emulation.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Usage is similar to &lt;code&gt;nmap&lt;/code&gt;. To scan a network segment for some ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan -p80,8000-8100 10.0.0.0/8 2603:3001:2d00:da00::/112&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;scan the &lt;code&gt;10.x.x.x&lt;/code&gt; subnet, and &lt;code&gt;2603:3001:2d00:da00::x&lt;/code&gt; subnets&lt;/li&gt; &#xA; &lt;li&gt;scans port 80 and the range 8000 to 8100, or 102 ports total, on both subnets&lt;/li&gt; &#xA; &lt;li&gt;print output to &lt;code&gt;&amp;lt;stdout&amp;gt;&lt;/code&gt; that can be redirected to a file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To see the complete list of options, use the &lt;code&gt;--echo&lt;/code&gt; feature. This dumps the current configuration and exits. This output can be used as input back into the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan -p80,8000-8100 10.0.0.0/8 2603:3001:2d00:da00::/112 --echo &amp;gt; xxx.conf&#xA;# masscan -c xxx.conf --rate 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Banner checking&lt;/h2&gt; &#xA;&lt;p&gt;Masscan can do more than just detect whether ports are open. It can also complete the TCP connection and interaction with the application at that port in order to grab simple &#34;banner&#34; information.&lt;/p&gt; &#xA;&lt;p&gt;Masscan supports banner checking on the following protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FTP&lt;/li&gt; &#xA; &lt;li&gt;HTTP&lt;/li&gt; &#xA; &lt;li&gt;IMAP4&lt;/li&gt; &#xA; &lt;li&gt;memcached&lt;/li&gt; &#xA; &lt;li&gt;POP3&lt;/li&gt; &#xA; &lt;li&gt;SMTP&lt;/li&gt; &#xA; &lt;li&gt;SSH&lt;/li&gt; &#xA; &lt;li&gt;SSL&lt;/li&gt; &#xA; &lt;li&gt;SMBv1&lt;/li&gt; &#xA; &lt;li&gt;SMBv2&lt;/li&gt; &#xA; &lt;li&gt;Telnet&lt;/li&gt; &#xA; &lt;li&gt;RDP&lt;/li&gt; &#xA; &lt;li&gt;VNC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The problem with this is that masscan contains its own TCP/IP stack separate from the system you run it on. When the local system receives a SYN-ACK from the probed target, it responds with a RST packet that kills the connection before masscan can grab the banner.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to prevent this is to assign masscan a separate IP address. This would look like one of the following examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan 10.0.0.0/8 -p80 --banners --source-ip 192.168.1.200&#xA;  # masscan 2a00:1450:4007:810::/112 -p80 --banners --source-ip 2603:3001:2d00:da00:91d7:b54:b498:859d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The address you choose has to be on the local subnet and not otherwise be used by another system. Masscan will warn you that you&#39;ve made a mistake, but you might&#39;ve messed up the other machine&#39;s communications for several minutes, so be careful.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, such as WiFi, this isn&#39;t possible. In those cases, you can firewall the port that masscan uses. This prevents the local TCP/IP stack from seeing the packet, but masscan still sees it since it bypasses the local stack. For Linux, this would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# iptables -A INPUT -p tcp --dport 61000 -j DROP&#xA;# masscan 10.0.0.0/8 -p80 --banners --source-port 61000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You probably want to pick ports that don&#39;t conflict with ports Linux might otherwise choose for source-ports. You can see the range Linux uses, and reconfigure that range, by looking in the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/proc/sys/net/ipv4/ip_local_port_range&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the latest version of Kali Linux (2018-August), that range is 32768 to 60999, so you should choose ports either below 32768 or 61000 and above.&lt;/p&gt; &#xA;&lt;p&gt;Setting an &lt;code&gt;iptables&lt;/code&gt; rule only lasts until the next reboot. You need to lookup how to save the configuration depending upon your distro, such as using &lt;code&gt;iptables-save&lt;/code&gt; and/or &lt;code&gt;iptables-persistent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Mac OS X and BSD, there are similar steps. To find out the ranges to avoid, use a command like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD and older MacOS, use an &lt;code&gt;ipfw&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sudo ipfw add 1 deny tcp from any to any 40000 in&#xA;# masscan 10.0.0.0/8 -p80 --banners --source-port 40000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On newer MacOS and OpenBSD, use the &lt;code&gt;pf&lt;/code&gt; packet-filter utility. Edit the file &lt;code&gt;/etc/pf.conf&lt;/code&gt; to add a line like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;block in proto tcp from any to any port 40000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to enable the firewall, run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pfctrl -E    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the firewall is already running, then either reboot or reload the rules with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pfctl -f /etc/pf.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows doesn&#39;t respond with RST packets, so neither of these techniques are necessary. However, masscan is still designed to work best using its own IP address, so you should run that way when possible, even when it is not strictly necessary.&lt;/p&gt; &#xA;&lt;p&gt;The same thing is needed for other checks, such as the &lt;code&gt;--heartbleed&lt;/code&gt; check, which is just a form of banner checking.&lt;/p&gt; &#xA;&lt;h2&gt;How to scan the entire Internet&lt;/h2&gt; &#xA;&lt;p&gt;While useful for smaller, internal networks, the program is really designed with the entire Internet in mind. It might look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan 0.0.0.0/0 -p0-65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scanning the entire Internet is bad. For one thing, parts of the Internet react badly to being scanned. For another thing, some sites track scans and add you to a ban list, which will get you firewalled from useful parts of the Internet. Therefore, you want to exclude a lot of ranges. To blacklist or exclude ranges, you want to use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan 0.0.0.0/0 -p0-65535 --excludefile exclude.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This just prints the results to the command-line. You probably want them saved to a file instead. Therefore, you want something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan 0.0.0.0/0 -p0-65535 -oX scan.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saves the results in an XML file, allowing you to easily dump the results in a database or something.&lt;/p&gt; &#xA;&lt;p&gt;But, this only goes at the default rate of 100 packets/second, which will take forever to scan the Internet. You need to speed it up as so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan 0.0.0.0/0 -p0-65535 --max-rate 100000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This increases the rate to 100,000 packets/second, which will scan the entire Internet (minus excludes) in about 10 hours per port (or 655,360 hours if scanning all ports).&lt;/p&gt; &#xA;&lt;p&gt;The thing to notice about this command-line is that these are all &lt;code&gt;nmap&lt;/code&gt; compatible options. In addition, &#34;invisible&#34; options compatible with &lt;code&gt;nmap&lt;/code&gt; are also set for you: &lt;code&gt;-sS -Pn -n --randomize-hosts --send-eth&lt;/code&gt;. Likewise, the format of the XML file is inspired by &lt;code&gt;nmap&lt;/code&gt;. There are, of course, a lot of differences, because the &lt;em&gt;asynchronous&lt;/em&gt; nature of the program leads to a fundamentally different approach to the problem.&lt;/p&gt; &#xA;&lt;p&gt;The above command-line is a bit cumbersome. Instead of putting everything on the command-line, it can be stored in a file instead. The above settings would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# My Scan&#xA;rate =  100000.00&#xA;output-format = xml&#xA;output-status = all&#xA;output-filename = scan.xml&#xA;ports = 0-65535&#xA;range = 0.0.0.0-255.255.255.255&#xA;excludefile = exclude.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this configuration file, use the &lt;code&gt;-c&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan -c myscan.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also makes things easier when you repeat a scan.&lt;/p&gt; &#xA;&lt;p&gt;By default, masscan first loads the configuration file &lt;code&gt;/etc/masscan/masscan.conf&lt;/code&gt;. Any later configuration parameters override what&#39;s in this default configuration file. That&#39;s where I put my &#34;excludefile&#34; parameter so that I don&#39;t ever forget it. It just works automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Getting output&lt;/h2&gt; &#xA;&lt;p&gt;By default, masscan produces fairly large text files, but it&#39;s easy to convert them into any other format. There are five supported output formats:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;xml: Just use the parameter &lt;code&gt;-oX &amp;lt;filename&amp;gt;&lt;/code&gt;. Or, use the parameters &lt;code&gt;--output-format xml&lt;/code&gt; and &lt;code&gt;--output-filename &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;binary: This is the masscan builtin format. It produces much smaller files so that when I scan the Internet my disk doesn&#39;t fill up. They need to be parsed, though. The command-line option &lt;code&gt;--readscan&lt;/code&gt; will read binary scan files. Using &lt;code&gt;--readscan&lt;/code&gt; with the &lt;code&gt;-oX&lt;/code&gt; option will produce an XML version of the results file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;grepable: This is an implementation of the Nmap -oG output that can be easily parsed by command-line tools. Just use the parameter &lt;code&gt;-oG &amp;lt;filename&amp;gt;&lt;/code&gt;. Or, use the parameters &lt;code&gt;--output-format grepable&lt;/code&gt; and &lt;code&gt;--output-filename &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;json: This saves the results in JSON format. Just use the parameter &lt;code&gt;-oJ &amp;lt;filename&amp;gt;&lt;/code&gt;. Or, use the parameters &lt;code&gt;--output-format json&lt;/code&gt; and &lt;code&gt;--output-filename &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;list: This is a simple list with one host and port pair per line. Just use the parameter &lt;code&gt;-oL &amp;lt;filename&amp;gt;&lt;/code&gt;. Or, use the parameters &lt;code&gt;--output-format list&lt;/code&gt; and &lt;code&gt;--output-filename &amp;lt;filename&amp;gt;&lt;/code&gt;. The format is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;port state&amp;gt; &amp;lt;protocol&amp;gt; &amp;lt;port number&amp;gt; &amp;lt;IP address&amp;gt; &amp;lt;POSIX timestamp&amp;gt;  &#xA;open tcp 80 XXX.XXX.XXX.XXX 1390380064&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Comparison with Nmap&lt;/h2&gt; &#xA;&lt;p&gt;Where reasonable, every effort has been taken to make the program familiar to &lt;code&gt;nmap&lt;/code&gt; users, even though it&#39;s fundamentally different. Masscan is tuned for wide range scanning of a lot of machines, whereas nmap is designed for intensive scanning of a single machine or a small range.&lt;/p&gt; &#xA;&lt;p&gt;Two important differences are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no default ports to scan, you must specify &lt;code&gt;-p &amp;lt;ports&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;target hosts are IP addresses or simple ranges, not DNS names, nor the funky subnet ranges &lt;code&gt;nmap&lt;/code&gt; can use (like &lt;code&gt;10.0.0-255.0-255&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can think of &lt;code&gt;masscan&lt;/code&gt; as having the following settings permanently enabled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-sS&lt;/code&gt;: this does SYN scan only (currently, will change in the future)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Pn&lt;/code&gt;: doesn&#39;t ping hosts first, which is fundamental to the async operation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: no DNS resolution happens&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--randomize-hosts&lt;/code&gt;: scan completely randomized, always, you can&#39;t change this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--send-eth&lt;/code&gt;: sends using raw &lt;code&gt;libpcap&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want a list of additional &lt;code&gt;nmap&lt;/code&gt; compatible settings, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# masscan --nmap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transmit rate (IMPORTANT!!)&lt;/h2&gt; &#xA;&lt;p&gt;This program spews out packets very fast. On Windows, or from VMs, it can do 300,000 packets/second. On Linux (no virtualization) it&#39;ll do 1.6 million packets-per-second. That&#39;s fast enough to melt most networks.&lt;/p&gt; &#xA;&lt;p&gt;Note that it&#39;ll only melt your own network. It randomizes the target IP addresses so that it shouldn&#39;t overwhelm any distant network.&lt;/p&gt; &#xA;&lt;p&gt;By default, the rate is set to 100 packets/second. To increase the rate to a million use something like &lt;code&gt;--rate 1000000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When scanning the IPv4 Internet, you&#39;ll be scanning lots of subnets, so even though there&#39;s a high rate of packets going out, each target subnet will receive a small rate of incoming packets.&lt;/p&gt; &#xA;&lt;p&gt;However, with IPv6 scanning, you&#39;ll tend to focus on a single target subnet with billions of addresses. Thus, your default behavior will overwhelm the target network. Networks often crash under the load that masscan can generate.&lt;/p&gt; &#xA;&lt;h1&gt;Design&lt;/h1&gt; &#xA;&lt;p&gt;This section describes the major design issues of the program.&lt;/p&gt; &#xA;&lt;h2&gt;Code Layout&lt;/h2&gt; &#xA;&lt;p&gt;The file &lt;code&gt;main.c&lt;/code&gt; contains the &lt;code&gt;main()&lt;/code&gt; function, as you&#39;d expect. It also contains the &lt;code&gt;transmit_thread()&lt;/code&gt; and &lt;code&gt;receive_thread()&lt;/code&gt; functions. These functions have been deliberately flattened and heavily commented so that you can read the design of the program simply by stepping line-by-line through each of these.&lt;/p&gt; &#xA;&lt;h2&gt;Asynchronous&lt;/h2&gt; &#xA;&lt;p&gt;This is an &lt;em&gt;asynchronous&lt;/em&gt; design. In other words, it is to &lt;code&gt;nmap&lt;/code&gt; what the &lt;code&gt;nginx&lt;/code&gt; web-server is to &lt;code&gt;Apache&lt;/code&gt;. It has separate transmit and receive threads that are largely independent from each other. It&#39;s the same sort of design found in &lt;code&gt;scanrand&lt;/code&gt;, &lt;code&gt;unicornscan&lt;/code&gt;, and &lt;code&gt;ZMap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because it&#39;s asynchronous, it runs as fast as the underlying packet transmit allows.&lt;/p&gt; &#xA;&lt;h2&gt;Randomization&lt;/h2&gt; &#xA;&lt;p&gt;A key difference between Masscan and other scanners is the way it randomizes targets.&lt;/p&gt; &#xA;&lt;p&gt;The fundamental principle is to have a single index variable that starts at zero and is incremented by one for every probe. In C code, this is expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for (i = 0; i &amp;lt; range; i++) {&#xA;    scan(i);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have to translate the index into an IP address. Let&#39;s say that you want to scan all &#34;private&#34; IP addresses. That would be the table of ranges like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;192.168.0.0/16&#xA;10.0.0.0/8&#xA;172.16.0.0/12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the first 64k indexes are appended to 192.168.x.x to form the target address. Then, the next 16-million are appended to 10.x.x.x. The remaining indexes in the range are applied to 172.16.x.x.&lt;/p&gt; &#xA;&lt;p&gt;In this example, we only have three ranges. When scanning the entire Internet, we have in practice more than 100 ranges. That&#39;s because you have to blacklist or exclude a lot of sub-ranges. This chops up the desired range into hundreds of smaller ranges.&lt;/p&gt; &#xA;&lt;p&gt;This leads to one of the slowest parts of the code. We transmit 10 million packets per second and have to convert an index variable to an IP address for each and every probe. We solve this by doing a &#34;binary search&#34; in a small amount of memory. At this packet rate, cache efficiencies start to dominate over algorithm efficiencies. There are a lot of more efficient techniques in theory, but they all require so much memory as to be slower in practice.&lt;/p&gt; &#xA;&lt;p&gt;We call the function that translates from an index into an IP address the &lt;code&gt;pick()&lt;/code&gt; function. In use, it looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for (i = 0; i &amp;lt; range; i++) {&#xA;    ip = pick(addresses, i);&#xA;    scan(ip);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Masscan supports not only IP address ranges, but also port ranges. This means we need to pick from the index variable both an IP address and a port. This is fairly straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;range = ip_count * port_count;&#xA;for (i = 0; i &amp;lt; range; i++) {&#xA;    ip   = pick(addresses, i / port_count);&#xA;    port = pick(ports,     i % port_count);&#xA;    scan(ip, port);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This leads to another expensive part of the code. The division/modulus instructions are around 90 clock cycles, or 30 nanoseconds, on x86 CPUs. When transmitting at a rate of 10 million packets/second, we have only 100 nanoseconds per packet. I see no way to optimize this any better. Luckily, though, two such operations can be executed simultaneously, so doing two of these, as shown above, is no more expensive than doing one.&lt;/p&gt; &#xA;&lt;p&gt;There are actually some easy optimizations for the above performance problems, but they all rely upon &lt;code&gt;i++&lt;/code&gt;, the fact that the index variable increases one by one through the scan. Actually, we need to randomize this variable. We need to randomize the order of IP addresses that we scan or we&#39;ll blast the heck out of target networks that aren&#39;t built for this level of speed. We need to spread our traffic evenly over the target.&lt;/p&gt; &#xA;&lt;p&gt;The way we randomize is simply by encrypting the index variable. By definition, encryption is random and creates a 1-to-1 mapping between the original index variable and the output. This means that while we linearly go through the range, the output IP addresses are completely random. In code, this looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;range = ip_count * port_count;&#xA;for (i = 0; i &amp;lt; range; i++) {&#xA;    x = encrypt(i);&#xA;    ip   = pick(addresses, x / port_count);&#xA;    port = pick(ports,     x % port_count);&#xA;    scan(ip, port);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also has a major cost. Since the range is an unpredictable size instead of a nice even power of 2, we can&#39;t use cheap binary techniques like AND (&amp;amp;) and XOR (^). Instead, we have to use expensive operations like MODULUS (%). In my current benchmarks, it&#39;s taking 40 nanoseconds to encrypt the variable.&lt;/p&gt; &#xA;&lt;p&gt;This architecture allows for lots of cool features. For example, it supports &#34;shards&#34;. You can set up 5 machines each doing a fifth of the scan or &lt;code&gt;range / shard_count&lt;/code&gt;. Shards can be multiple machines, or simply multiple network adapters on the same machine, or even (if you want) multiple IP source addresses on the same network adapter.&lt;/p&gt; &#xA;&lt;p&gt;Or, you can use a &#39;seed&#39; or &#39;key&#39; to the encryption function, so that you get a different order each time you scan, like &lt;code&gt;x = encrypt(seed, i)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can also pause the scan by exiting out of the program, and simply remembering the current value of &lt;code&gt;i&lt;/code&gt;, and restart it later. I do that a lot during development. I see something going wrong with my Internet scan, so I hit &#xA; &lt;ctrl-c&gt;&#xA;   to stop the scan, then restart it after I&#39;ve fixed the bug.&#xA; &lt;/ctrl-c&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another feature is retransmits/retries. Packets sometimes get dropped on the Internet, so you can send two packets back-to-back. However, something that drops one packet may drop the immediately following packet. Therefore, you want to send the copy about 1 second apart. This is simple. We already have a &#39;rate&#39; variable, which is the number of packets-per-second rate we are transmitting at, so the retransmit function is simply to use &lt;code&gt;i + rate&lt;/code&gt; as the index. One of these days I&#39;m going to do a study of the Internet, and differentiate &#34;back-to-back&#34;, &#34;1 second&#34;, &#34;10 second&#34;, and &#34;1 minute&#34; retransmits this way in order to see if there is any difference in what gets dropped.&lt;/p&gt; &#xA;&lt;h2&gt;C10 Scalability&lt;/h2&gt; &#xA;&lt;p&gt;The asynchronous technique is known as a solution to the &#34;c10k problem&#34;. Masscan is designed for the next level of scalability, the &#34;C10M problem&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The C10M solution is to bypass the kernel. There are three primary kernel bypasses in Masscan:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;custom network driver&lt;/li&gt; &#xA; &lt;li&gt;user-mode TCP stack&lt;/li&gt; &#xA; &lt;li&gt;user-mode synchronization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Masscan can use the PF_RING DNA driver. This driver DMAs packets directly from user-mode memory to the network driver with zero kernel involvement. That allows software, even with a slow CPU, to transmit packets at the maximum rate the hardware allows. If you put 8 10-gbps network cards in a computer, this means it could transmit at 100-million packets/second.&lt;/p&gt; &#xA;&lt;p&gt;Masscan has its own built-in TCP stack for grabbing banners from TCP connections. This means it can easily support 10 million concurrent TCP connections, assuming of course that the computer has enough memory.&lt;/p&gt; &#xA;&lt;p&gt;Masscan has no &#34;mutex&#34;. Modern mutexes (aka. futexes) are mostly user-mode, but they have two problems. The first problem is that they cause cache-lines to bounce quickly back-and-forth between CPUs. The second is that when there is contention, they&#39;ll do a system call into the kernel, which kills performance. A mutex on the fast path of a program severely limits scalability. Instead, Masscan uses &#34;rings&#34; to synchronize things, such as when the user-mode TCP stack in the receive thread needs to transmit a packet without interfering with the transmit thread.&lt;/p&gt; &#xA;&lt;h2&gt;Portability&lt;/h2&gt; &#xA;&lt;p&gt;The code runs well on Linux, Windows, and Mac OS X. All the important bits are in standard C (C90). Therefore, it compiles on Visual Studio with Microsoft&#39;s compiler, the Clang/LLVM compiler on Mac OS X, and GCC on Linux.&lt;/p&gt; &#xA;&lt;p&gt;Windows and Macs aren&#39;t tuned for packet transmit, and get only about 300,000 packets-per-second, whereas Linux can do 1,500,000 packets/second. That&#39;s probably faster than you want anyway.&lt;/p&gt; &#xA;&lt;h2&gt;Safe code&lt;/h2&gt; &#xA;&lt;p&gt;A bounty is offered for vulnerabilities, see the VULNINFO.md file for more information.&lt;/p&gt; &#xA;&lt;p&gt;This project uses safe functions like &lt;code&gt;strcpy_s()&lt;/code&gt; instead of unsafe functions like &lt;code&gt;strcpy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project has automated unit regression tests (&lt;code&gt;make regress&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;A lot of effort has gone into making the input/output look like &lt;code&gt;nmap&lt;/code&gt;, which everyone who does port scans is (or should be) familiar with.&lt;/p&gt; &#xA;&lt;h2&gt;IPv6 and IPv4 coexistence&lt;/h2&gt; &#xA;&lt;p&gt;Masscan supports IPv6, but there is no special mode, both are supported at the same time. (There is no &lt;code&gt;-6&lt;/code&gt; option -- it&#39;s always available).&lt;/p&gt; &#xA;&lt;p&gt;In any example you see of masscan usage, simply put an IPv6 address where you see an IPv4 address. You can include IPv4 and IPv6 addresses simultaneously in the same scan. Output includes the appropriate address at the same location, with no special marking.&lt;/p&gt; &#xA;&lt;p&gt;Just remember that IPv6 address space is really big. You probably don&#39;t want to scan for big ranges, except maybe the first 64k addresses of a subnet that were assigned via DHCPv6.&lt;/p&gt; &#xA;&lt;p&gt;Instead, you&#39;ll probably want to scan large lists of addresses stored in a file (&lt;code&gt;--include-file filename.txt&lt;/code&gt;) that you got from other sources. Like everywhere else, this file can contain lists of both IPv4 and IPv6 addresses. The test file I use contains 8 million addresses. Files of that size need a couple extra seconds to be read on startup (masscan sorts the addresses and removes duplicates before scanning).&lt;/p&gt; &#xA;&lt;p&gt;Remember that masscan contains its own network stack. Thus, the local machine you run masscan from does not need to be IPv6 enabled -- though the local network needs to be able to route IPv6 packets.&lt;/p&gt; &#xA;&lt;h2&gt;PF_RING&lt;/h2&gt; &#xA;&lt;p&gt;To get beyond 2 million packets/second, you need an Intel 10-gbps Ethernet adapter and a special driver known as &lt;a href=&#34;http://www.ntop.org/products/packet-capture/pf_ring/pf_ring-zc-zero-copy/&#34;&gt;&#34;PF_RING ZC&#34; from ntop&lt;/a&gt;. Masscan doesn&#39;t need to be rebuilt in order to use PF_RING. To use PF_RING, you need to build the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libpfring.so&lt;/code&gt; (installed in /usr/lib/libpfring.so)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pf_ring.ko&lt;/code&gt; (their kernel driver)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ixgbe.ko&lt;/code&gt; (their version of the Intel 10-gbps Ethernet driver)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You don&#39;t need to build their version of &lt;code&gt;libpcap.so&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When Masscan detects that an adapter is named something like &lt;code&gt;zc:enp1s0&lt;/code&gt; instead of something like &lt;code&gt;enp1s0&lt;/code&gt;, it&#39;ll automatically switch to PF_RING ZC mode.&lt;/p&gt; &#xA;&lt;p&gt;A more detail discussion can be found in &lt;strong&gt;PoC||GTFO 0x15&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Regression testing&lt;/h2&gt; &#xA;&lt;p&gt;The project contains a built-in unit test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;bin/masscan --selftest&#xA;selftest: success!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tests a lot of tricky bits of the code. You should do this after building.&lt;/p&gt; &#xA;&lt;h2&gt;Performance testing&lt;/h2&gt; &#xA;&lt;p&gt;To test performance, run something like the following to a throw-away address, to avoid overloading your local router:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/masscan 0.0.0.0/4 -p80 --rate 100000000 --router-mac 66-55-44-33-22-11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The bogus &lt;code&gt;--router-mac&lt;/code&gt; keeps packets on the local network segments so that they won&#39;t go out to the Internet.&lt;/p&gt; &#xA;&lt;p&gt;You can also test in &#34;offline&#34; mode, which is how fast the program runs without the transmit overhead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/masscan 0.0.0.0/4 -p80 --rate 100000000 --offline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This second benchmark shows roughly how fast the program would run if it were using PF_RING, which has near zero overhead.&lt;/p&gt; &#xA;&lt;p&gt;By the way, the randomization algorithm makes heavy use of &#34;integer arithmetic&#34;, a chronically slow operation on CPUs. Modern CPUs have doubled the speed at which they perform this calculation, making &lt;code&gt;masscan&lt;/code&gt; much faster.&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;This tool created by Robert Graham: email: &lt;a href=&#34;mailto:robert_david_graham@yahoo.com&#34;&gt;robert_david_graham@yahoo.com&lt;/a&gt; twitter: @ErrataRob&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Destroyer716/FFmpegVideoRange2</title>
    <updated>2022-06-22T01:34:59Z</updated>
    <id>tag:github.com,2022-06-22:/Destroyer716/FFmpegVideoRange2</id>
    <link href="https://github.com/Destroyer716/FFmpegVideoRange2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;android ffmpeg 仿剪映 视频剪辑 预览条 快速抽帧&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FFmpegVideoRange2&lt;/h1&gt; &#xA;&lt;h2&gt;此项目是android 仿照剪映一些功能，暂时只有预览条的精准快速抽帧显示，以及滑动过程中与播放逐帧显示，我观察了下，基本只有大厂的剪辑软件中会有这样的功能。&lt;/h2&gt; &#xA;&lt;h2&gt;网上的一些开源项目中，都仅仅是非精准抽帧或者只是关键帧，有些速度很慢。&lt;/h2&gt; &#xA;&lt;h2&gt;本项目抽帧速度已经和快手的快影差不多了，但是比剪映还是要慢一些，大家可以实际对比一下。&lt;/h2&gt; &#xA;&lt;h3&gt;demo 需要在内部存储根目录创建一个testVideo目录，将测试视频放到这里&lt;/h3&gt; &#xA;&lt;h3&gt;开局一张效果图&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://r.photo.store.qq.com/psc?/V53pYzs02rfsLh2OxXMT3ceYVs0kkY5m/ruAMsa53pVQWN7FLK88i5qoK1N7IVupmc5HnLP5pO6e036nwYkRdROZtREZhpAknqAIOvtltESQl5HleCjT.NfrR4F5CgkdUH411uS1K268!/mnull&amp;amp;bo=HAJ0BBwCdAQBCS4!&amp;amp;rf=photolist&amp;amp;t=5/r/_yake_qzoneimgout.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;这是剪映的预览条加载显示的速度效果&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Destroyer716/tuchuang/raw/master/image/MyVideo_1_small.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;这是本项目的效果展示&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Destroyer716/tuchuang/raw/master/image/MyVideo_2.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Destroyer716/tuchuang/raw/master/image/MyVideo_3_small%20(1).gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;其中预览条的UI 用的是&lt;a href=&#34;https://github.com/meitu/VideoTimeLine&#34;&gt;https://github.com/meitu/VideoTimeLine&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;项目本身是自己学习音视频的demo,从基本的解码播放器开始一边学习一边写出来的，只支持h264的视频，此项目一点不能直接用于实际项目开发中&lt;/h3&gt; &#xA;&lt;h3&gt;仅作为类似功能的参考，后续还会添加功能，只是会有些慢，欢迎star,如果乐意交流学习讨论音视频，可以加wx:Eli_kuangshao&lt;/h3&gt;</summary>
  </entry>
</feed>