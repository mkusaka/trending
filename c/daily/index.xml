<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-29T01:29:18Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenPrinting/cups</title>
    <updated>2024-09-29T01:29:18Z</updated>
    <id>tag:github.com,2024-09-29:/OpenPrinting/cups</id>
    <link href="https://github.com/OpenPrinting/cups" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenPrinting CUPS Sources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenPrinting CUPS v2.5b1&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/openprinting/cups?include_prereleases&#34; alt=&#34;Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/openprinting/cups&#34; alt=&#34;Apache 2.0&#34;&gt; &lt;a href=&#34;https://github.com/OpenPrinting/cups/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/OpenPrinting/cups/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/openprinting-cups&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/23806&#34; alt=&#34;Coverity Scan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This branch is tracking a future CUPS 2.5.x feature release. Check out the &#34;2.4.x&#34; branch for CUPS 2.4.x.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OpenPrinting CUPS is the most current version of CUPS, a standards-based, open source printing system for Linux® and other Unix®-like operating systems. CUPS supports printing to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.apple.com/en-us/HT201311&#34;&gt;AirPrint™&lt;/a&gt; and &lt;a href=&#34;https://www.pwg.org/printers&#34;&gt;IPP Everywhere™&lt;/a&gt; printers,&lt;/li&gt; &#xA; &lt;li&gt;Network and local (USB) printers with Printer Applications, and&lt;/li&gt; &#xA; &lt;li&gt;Network and local (USB) printers with (legacy) PPD-based printer drivers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CUPS provides the System V (&#34;lp&#34;) and Berkeley (&#34;lpr&#34;) command-line interfaces, a configurable web interface, a C API, and common print filters, drivers, and backends for printing. The &lt;a href=&#34;https://github.com/openprinting/cups-filters&#34;&gt;cups-filters&lt;/a&gt; project provides additional filters and drivers.&lt;/p&gt; &#xA;&lt;p&gt;CUPS is licensed under the Apache License Version 2.0 with an exception to allow linking against GNU GPL2-only software. See the files &lt;code&gt;LICENSE&lt;/code&gt; and &lt;code&gt;NOTICE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Apple maintains a separate repository for the CUPS that ships with macOS and iOS at &lt;a href=&#34;https://github.com/apple/cups&#34;&gt;https://github.com/apple/cups&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Reading the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Initial documentation to get you started is provided in the root directory of the CUPS sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CHANGES.md&lt;/code&gt;: A list of changes in the current major release of CUPS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;: Guidelines for contributing to the CUPS project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CREDITS.md&lt;/code&gt;: A list of past contributors to the CUPS project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DEVELOPING.md&lt;/code&gt;: Guidelines for developing code for the CUPS project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INSTALL.md&lt;/code&gt;: Instructions for building and installing CUPS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LICENSE&lt;/code&gt;: The CUPS license agreement (Apache 2.0).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NOTICE&lt;/code&gt;: Copyright notices and exceptions to the CUPS license agreement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;: This file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;REPORTING_ISSUES.md&lt;/code&gt;: Instructions what information to provide when reporting an issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have installed the software you can access the documentation (and a bunch of other stuff) online at &lt;a href=&#34;http://localhost:631/&#34;&gt;http://localhost:631/&lt;/a&gt; and using the &lt;code&gt;man&lt;/code&gt; command, for example &lt;code&gt;man cups&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re having trouble getting that far, the documentation is located under the &lt;code&gt;doc/help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please read the documentation before asking questions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting Up Printers&lt;/h2&gt; &#xA;&lt;p&gt;CUPS includes a web-based administration tool that allows you to manage printers, classes, and jobs on your server. Open &lt;a href=&#34;http://localhost:631/admin/&#34;&gt;http://localhost:631/admin/&lt;/a&gt; in your browser to access the printer administration tools. You will be asked for the administration password (root or any other user in the &#34;sys&#34;, &#34;system&#34;, &#34;root&#34;, &#34;admin&#34;, or &#34;lpadmin&#34; group on your system) when performing any administrative function.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;lpadmin&lt;/code&gt; command is used to manage printers from the command-line. For example, the following command creates a print queue called &#34;myprinter&#34; for an IPP Everywhere printer at address &#34;11.22.33.44&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lpadmin -p myprinter -E -v &#34;ipp://11.22.33.44/ipp/print&#34; -m everywhere&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option specifies the printer name. The &lt;code&gt;-E&lt;/code&gt; option enables the printer and accepts new print jobs immediately. The &lt;code&gt;-v&lt;/code&gt; option specifies the &lt;em&gt;device URI&lt;/em&gt; for the printer, which tells CUPS how to communicate with the printer. And the &lt;code&gt;-m&lt;/code&gt; option specifies the model (driver) to use, in this case the IPP Everywhere (&#34;everywhere&#34;) driver that is used for AirPrint and IPP Everywhere printers as well as shared printers and printers supported through Printer Applications.&lt;/p&gt; &#xA;&lt;p&gt;Legacy printers are supported using PPD (PostScript Printer Description) files that describe printer capabilities and driver programs needed for each printer. CUPS includes several sample PPD files for common legacy printers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Driver&lt;/th&gt; &#xA;   &lt;th&gt;PPD Name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dymo Label Printers&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/dymo.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intellitech Intellibar&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/intelbar.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EPSON 9-pin Series&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/epson9.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EPSON 24-pin Series&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/epson24.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generic PCL Laser Printer&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/generpcl.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generic PostScript Printer&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/generic.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HP DeskJet Series&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/deskjet.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HP LaserJet Series&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/laserjet.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OKIDATA 9-Pin Series&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/okidata9.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OKIDATA 24-Pin Series&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/okidat24.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zebra CPCL Label Printer&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/zebracpl.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zebra EPL1 Label Printer&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/zebraep1.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zebra EPL2 Label Printer&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/zebraep2.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zebra ZPL Label Printer&lt;/td&gt; &#xA;   &lt;td&gt;drv:///sample.drv/zebra.ppd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The sample drivers provide basic printing capabilities, but generally do not exercise the full potential of the printers or CUPS. Other drivers provide greater printing capabilities.&lt;/p&gt; &#xA;&lt;p&gt;You can run the &lt;code&gt;lpinfo -m&lt;/code&gt; command to list all of the available drivers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lpinfo -m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, the &lt;code&gt;lpinfo -v&lt;/code&gt; command lists the available printers and their device URIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lpinfo -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you know the device URI and driver name, add the printer using the &lt;code&gt;lpadmin&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lpadmin -p PRINTER-NAME -E -v &#34;DEVICE-URI&#34; -m DRIVER-NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Printing Files&lt;/h2&gt; &#xA;&lt;p&gt;CUPS provides both the System V &lt;code&gt;lp&lt;/code&gt; and Berkeley &lt;code&gt;lpr&lt;/code&gt; commands for printing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lp FILENAME&#xA;lpr FILENAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the &lt;code&gt;lp&lt;/code&gt; and &lt;code&gt;lpr&lt;/code&gt; commands support printing options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lp -o media=A4 -o resolution=600dpi FILENAME&#xA;lpr -o media=A4 -o resolution=600dpi FILENAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CUPS recognizes many types of images files as well as PDF, PostScript, and text files, so you can print those files directly rather than through an application.&lt;/p&gt; &#xA;&lt;p&gt;If you have an application that generates output specifically for your printer then you need to use the &lt;code&gt;-oraw&lt;/code&gt; or &lt;code&gt;-l&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lp -o raw FILENAME&#xA;lpr -l FILENAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will prevent the filters from misinterpreting your print file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Code and Translations&lt;/h2&gt; &#xA;&lt;p&gt;Code contributions should be submitted as pull requests on the Github site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://github.com/OpenPrinting/cups/pulls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the file &#34;CONTRIBUTING.md&#34; for more details.&lt;/p&gt; &#xA;&lt;p&gt;CUPS uses &lt;a href=&#34;https://hosted.weblate.org&#34;&gt;Weblate&lt;/a&gt; to manage the localization of the web interface, command-line programs, and common IPP attributes and values, and those likewise end up as pull requests on Github.&lt;/p&gt; &#xA;&lt;h2&gt;Legal Stuff&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2020-2023 by OpenPrinting&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2007-2020 by Apple Inc.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 1997-2007 by Easy Software Products.&lt;/p&gt; &#xA;&lt;p&gt;CUPS is provided under the terms of the Apache License, Version 2.0 with exceptions for GPL2/LGPL2 software. A copy of this license can be found in the file &lt;code&gt;LICENSE&lt;/code&gt;. Additional legal information is provided in the file &lt;code&gt;NOTICE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>orangeduck/Cello</title>
    <updated>2024-09-29T01:29:18Z</updated>
    <id>tag:github.com,2024-09-29:/orangeduck/Cello</id>
    <link href="https://github.com/orangeduck/Cello" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Higher level programming in C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cello&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cello&lt;/strong&gt; is a &lt;em&gt;library&lt;/em&gt; that brings higher level programming to C.&lt;/p&gt; &#xA;&lt;p&gt;By acting as a &lt;em&gt;modern&lt;/em&gt;, &lt;em&gt;powerful&lt;/em&gt; runtime system Cello makes many things easy that were previously impractical or awkward in C such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generic Data Structures&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polymorphic Functions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interfaces / Type Classes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Constructors / Destructors&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optional Garbage Collection&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exceptions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reflection&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And because Cello works seamlessly alongside standard C you get all the other benefits such as great performance, powerful tooling, and extensive libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;Cello.h&#34;&#xA;&#xA;int main(int argc, char** argv) {&#xA;&#xA;  /* Stack objects are created using &#34;$&#34; */&#xA;  var i0 = $(Int, 5);&#xA;  var i1 = $(Int, 3);&#xA;  var i2 = $(Int, 4);&#xA;&#xA;  /* Heap objects are created using &#34;new&#34; */&#xA;  var items = new(Array, Int, i0, i1, i2);&#xA;  &#xA;  /* Collections can be looped over */&#xA;  foreach (item in items) {&#xA;    print(&#34;Object %$ is of type %$\n&#34;,&#xA;      item, type_of(item));&#xA;  }&#xA;  &#xA;  /* Heap objects destructed via Garbage Collection */&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;Cello.h&#34;&#xA;&#xA;int main(int argc, char** argv) {&#xA;  &#xA;  /* Shorthand $ can be used for basic types */&#xA;  var prices = new(Table, String, Int);&#xA;  set(prices, $S(&#34;Apple&#34;),  $I(12)); &#xA;  set(prices, $S(&#34;Banana&#34;), $I( 6)); &#xA;  set(prices, $S(&#34;Pear&#34;),   $I(55)); &#xA;&#xA;  /* Tables also support iteration */&#xA;  foreach (key in prices) {&#xA;    var val = get(prices, key);&#xA;    print(&#34;Price of %$ is %$\n&#34;, key, val);&#xA;  }&#xA;  &#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;p&gt;Learning Resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/cello-world&#34;&gt;Cello World&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/queries-and-pitfalls&#34;&gt;Common Queries / Pitfalls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Articles about its creation and internal workings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/best-improvements-of-cello-2.0&#34;&gt;Best Improvements of Cello 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/a-fat-pointer-library&#34;&gt;A Fat Pointer Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/cello-vs-cpp-vs-objc&#34;&gt;Cello vs C++ vs ObjC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://libcello.org/learn/garbage-collection&#34;&gt;Garbage Collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;Cello.h&#34;&#xA;&#xA;int main(int argc, char** argv) {&#xA;&#xA;  var items = new(Array, Int, &#xA;    $I( 8), $I( 5), $I(20), &#xA;    $I(15), $I(16), $I(98));&#xA;&#xA;  /* Iterate over indices using &#34;range&#34; */&#xA;  foreach (i in range($I(len(items)))) {&#xA;    print(&#34;Item Range %i is %i\n&#34;, i, get(items, i));&#xA;  }&#xA;&#xA;  /* Iterate over every other item with &#34;slice&#34; */ &#xA;  foreach (item in slice(items, _, _, $I(2))) {&#xA;    print(&#34;Item Slice %i\n&#34;, item);&#xA;  }&#xA;  &#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;Cello.h&#34;&#xA;&#xA;/* Define a normal C structure */&#xA;struct Point {&#xA;  float x, y;&#xA;};&#xA;&#xA;/* Make it compatible with Cello */&#xA;var Point = Cello(Point);&#xA;&#xA;int main(int argc, char** argv) {&#xA;  &#xA;  /* Create on Stack or Heap */&#xA;  var p0 = $(Point, 0.0, 1.0);&#xA;  var p1 = new(Point, $(Point, 0.0, 2.0));&#xA;  &#xA;  /* It can be shown, compared, hashed, etc...&#xA;  **&#xA;  ** p0: &amp;lt;&#39;Point&#39; At 0x000000000022FC58&amp;gt;&#xA;  ** p1: &amp;lt;&#39;Point&#39; At 0x00000000004C7CC8&amp;gt;&#xA;  ** cmp: 1&#xA;  ** hash: 2849275892l&#xA;  */ &#xA;  print(&#34;p0: %$\np1: %$\ncmp: %i\nhash: %ul\n&#34;,&#xA;    p0, p1, $I(cmp(p0, p1)), $I(hash(p0)));&#xA;  &#xA;  /* And collected by the GC when out of scope */&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;F.A.Q&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Why does this exist?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I made Cello as a fun experiment to see what C looks like hacked to its limits. As well as being a powerful library and toolkit, it should be interesting to those who want to explore what is possible in C.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I recommend reading &lt;a href=&#34;http://libcello.org/learn/a-fat-pointer-library&#34;&gt;A Fat Pointer Library&lt;/a&gt; to get an overview of how Cello works. You can also peek at the source code, which I&#39;m told is fairly readable, or ask me any questions you like via e-mail.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Can it be used in Production?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It might be better to try Cello out on a hobby project first. Cello does aim to be &lt;em&gt;production ready&lt;/em&gt;, but because it is a hack it has its fair share of oddities and pitfalls, and if you are working in a team, or to a deadline, there is much better tooling, support and community for languages such as C++.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Is anyone using Cello?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;People have experimented with it, but there is no high profile project I know of that uses it. Cello is too big and scary a dependency for new C projects if they want to be portable and easy to maintain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Can I get involved?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Yes! That would be great. If you do anything with Cello I&#39;d love to know, you can e-mail me at &lt;code&gt;contact@theorangeduck.com&lt;/code&gt;, or help with the development at the &lt;a href=&#34;https://github.com/orangeduck/libCello&#34;&gt;Cello github repo&lt;/a&gt;. Contributions are very welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Who are you?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hello! I&#39;m Daniel Holden. You many know me from a &lt;a href=&#34;http://www.buildyourownlisp.com/&#34;&gt;book I wrote&lt;/a&gt; or my &lt;a href=&#34;http://theorangeduck.com/&#34;&gt;personal website&lt;/a&gt;. I also have a rarely updated &lt;a href=&#34;https://twitter.com/anorangeduck&#34;&gt;twitter account&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>