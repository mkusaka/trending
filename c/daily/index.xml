<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:33:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GStreamer/gstreamer</title>
    <updated>2023-07-06T01:33:15Z</updated>
    <id>tag:github.com,2023-07-06:/GStreamer/gstreamer</id>
    <link href="https://github.com/GStreamer/gstreamer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GStreamer open-source multimedia framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GStreamer&lt;/h1&gt; &#xA;&lt;p&gt;This is GStreamer, a framework for streaming media.&lt;/p&gt; &#xA;&lt;h2&gt;Where to start&lt;/h2&gt; &#xA;&lt;p&gt;We have a website at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org&#34;&gt;https://gstreamer.freedesktop.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our documentation, including tutorials, API reference and FAQ can be found at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/documentation/&#34;&gt;https://gstreamer.freedesktop.org/documentation/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can subscribe to our mailing lists:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lists.freedesktop.org/mailman/listinfo/gstreamer-announce&#34;&gt;https://lists.freedesktop.org/mailman/listinfo/gstreamer-announce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lists.freedesktop.org/mailman/listinfo/gstreamer-devel&#34;&gt;https://lists.freedesktop.org/mailman/listinfo/gstreamer-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We track bugs, feature requests and merge requests (patches) in GitLab at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/gstreamer/&#34;&gt;https://gitlab.freedesktop.org/gstreamer/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can join us on IRC - #gstreamer on irc.oftc.net&lt;/p&gt; &#xA;&lt;p&gt;This repository contains all official modules supported by the GStreamer community which can be found in the &lt;code&gt;subprojects/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Install git and python 3.8+&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on Linux, you probably already have these. On macOS, new versions of Xcode ship Python 3 already. If you&#39;re on an older Xcode, you can use the &lt;a href=&#34;https://www.python.org/downloads/mac-osx/&#34;&gt;official Python installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://raw.githubusercontent.com/GStreamer/gstreamer/main/#windows-prerequisites-setup&#34;&gt;instructions for Windows below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install meson and ninja&lt;/h3&gt; &#xA;&lt;p&gt;Meson 0.62 or newer is required.&lt;/p&gt; &#xA;&lt;p&gt;On Linux and macOS you can get meson through your package manager or using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip3 install --user meson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install meson into &lt;code&gt;~/.local/bin&lt;/code&gt; which may or may not be included automatically in your PATH by default.&lt;/p&gt; &#xA;&lt;p&gt;You should get &lt;code&gt;ninja&lt;/code&gt; using your package manager or download the &lt;a href=&#34;https://github.com/ninja-build/ninja/releases&#34;&gt;official release&lt;/a&gt; and put the &lt;code&gt;ninja&lt;/code&gt; binary in your PATH.&lt;/p&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://raw.githubusercontent.com/GStreamer/gstreamer/main/#windows-prerequisites-setup&#34;&gt;instructions for Windows below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you used the official Python installer on macOS instead of the Python 3 shipped with Xcode, you might need to execute &#34;Install Certificates.command&#34; from the Python folder in the user Applications folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ /Applications/Python\ 3.*/Install\ Certificates.command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise you will get this error when downloading meson wraps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;urllib.error.URLError: urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build GStreamer and its modules&lt;/h3&gt; &#xA;&lt;p&gt;You can get all GStreamer built running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir&#xA;meson compile -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically create the &lt;code&gt;builddir&lt;/code&gt; directory and build everything inside it.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: On Windows, meson will automatically detect and use the latest Visual Studio if GCC, clang, etc are not available in &lt;code&gt;PATH&lt;/code&gt;. Use the &lt;code&gt;--vsenv&lt;/code&gt; argument to force the use of Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Meson will not update subprojects automatically once a subproject has been fetched. Remember to update subprojects if wrap files are updated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson subprojects update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;External dependencies&lt;/h3&gt; &#xA;&lt;p&gt;All mandatory dependencies of GStreamer are included as &lt;a href=&#34;https://mesonbuild.com/Subprojects.html&#34;&gt;meson subprojects&lt;/a&gt;: libintl, zlib, libffi, glib. Some optional dependencies are also included as subprojects, such as ffmpeg, x264, json-glib, graphene, openh264, orc, etc.&lt;/p&gt; &#xA;&lt;p&gt;Mandatory dependencies will be automatically built if meson cannot find them on your system using pkg-config. The same is true for optional dependencies that are included as subprojects. You can find a full list by looking at the &lt;code&gt;subprojects&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Plugins that need optional dependencies that aren&#39;t included can only be built if they are provided by the system. Instructions on how to build some common ones such as Qt5/QML are listed below. If you do not know how to provide an optional dependency needed by a plugin, you should use &lt;a href=&#34;https://gitlab.freedesktop.org/gstreamer/cerbero/#description&#34;&gt;Cerbero&lt;/a&gt; which handles this for you automatically.&lt;/p&gt; &#xA;&lt;p&gt;Plugins will be automatically enabled if possible, but you can ensure that a particular plugin (especially if it has external dependencies) is built by enabling the gstreamer repository that ships it and the plugin inside it. For example, to enable the Qt5 plugin in the gst-plugins-good repository, you need to run meson as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson -Dgood=enabled -Dgst-plugins-good:qt5=enabled builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will cause Meson to error out if the plugin could not be enabled. You can also flip the default and disable all plugins except those explicitly enabled like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson -Dauto_features=disabled -Dgstreamer:tools=enabled -Dbad=enabled -Dgst-plugins-bad:openh264=enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will disable all optional features and then enable the &lt;code&gt;openh264&lt;/code&gt; plugin and the tools that ship with the core gstreamer repository: &lt;code&gt;gst-inspect-1.0&lt;/code&gt;, &lt;code&gt;gst-launch-1.0&lt;/code&gt;, etc. As usual, you can change these values on a builddir that has already been setup with &lt;code&gt;meson configure -Doption=value&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Qt5 QML plugin&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;qmake&lt;/code&gt; is not in &lt;code&gt;PATH&lt;/code&gt; and pkgconfig files are not available, you can point the &lt;code&gt;QMAKE&lt;/code&gt; env var to the Qt5 installation of your choosing before running &lt;code&gt;meson&lt;/code&gt; as shown above.&lt;/p&gt; &#xA;&lt;p&gt;The plugin will be automatically enabled if possible, but you can ensure that it is built by passing &lt;code&gt;-Dgood=enabled -Dgst-plugins-good:qt5=enabled&lt;/code&gt; to &lt;code&gt;meson&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Intel MSDK plugin&lt;/h3&gt; &#xA;&lt;p&gt;On Linux, you need to have development files for &lt;code&gt;libmfx&lt;/code&gt; installed. On Windows, if you have the &lt;a href=&#34;https://software.intel.com/en-us/media-sdk&#34;&gt;Intel Media SDK&lt;/a&gt;, it will set the &lt;code&gt;INTELMEDIASDKROOT&lt;/code&gt; environment variable, which will be used by the build files to find &lt;code&gt;libmfx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The plugin will be automatically enabled if possible, but you can ensure it by passing &lt;code&gt;-Dbad=enabled -Dgst-plugins-bad:msdk=enabled&lt;/code&gt; to &lt;code&gt;meson&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building plugins with (A)GPL-licensed dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Some plugins have GPL- or AGPL-licensed dependencies and will only be built if you have explicitly opted in to allow (A)GPL-licensed dependencies by passing &lt;code&gt;-Dgpl=enabled&lt;/code&gt; to Meson.&lt;/p&gt; &#xA;&lt;p&gt;List of plugins with (A)GPL-licensed dependencies (non-exhaustive) in gst-plugins-bad:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dts (DTS audio decoder plugin)&lt;/li&gt; &#xA; &lt;li&gt;faad (Free AAC audio decoder plugin)&lt;/li&gt; &#xA; &lt;li&gt;iqa (Image quality assessment plugin based on dssim-c)&lt;/li&gt; &#xA; &lt;li&gt;mpeg2enc (MPEG-2 video encoder plugin)&lt;/li&gt; &#xA; &lt;li&gt;mplex (audio/video multiplexer plugin)&lt;/li&gt; &#xA; &lt;li&gt;ofa (Open Fingerprint Architecture library plugin)&lt;/li&gt; &#xA; &lt;li&gt;resindvd (Resin DVD playback plugin)&lt;/li&gt; &#xA; &lt;li&gt;x265 (HEVC/H.265 video encoder plugin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;List of plugins with (A)GPL-licensed dependencies (non-exhaustive) in gst-plugins-ugly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a52dec (Dolby Digital (AC-3) audio decoder plugin)&lt;/li&gt; &#xA; &lt;li&gt;cdio (CD audio source plugin based on libcdio)&lt;/li&gt; &#xA; &lt;li&gt;dvdread (DVD video source plugin based on libdvdread)&lt;/li&gt; &#xA; &lt;li&gt;mpeg2dec (MPEG-2 video decoder plugin based on libmpeg2)&lt;/li&gt; &#xA; &lt;li&gt;sidplay (Commodore 64 audio decoder plugin based on libsidplay)&lt;/li&gt; &#xA; &lt;li&gt;x264 (H.264 video encoder plugin based on libx264)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Static build&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;em&gt;1.18.0&lt;/em&gt; when doing a static build using &lt;code&gt;--default-library=static&lt;/code&gt;, a shared library &lt;code&gt;gstreamer-full-1.0&lt;/code&gt; will be produced and includes all enabled GStreamer plugins and libraries. A list of libraries that needs to be exposed in &lt;code&gt;gstreamer-full-1.0&lt;/code&gt; ABI can be set using &lt;code&gt;gst-full-libraries&lt;/code&gt; option. glib-2.0, gobject-2.0 and gstreamer-1.0 are always included.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson --default-library=static -Dgst-full-libraries=app,video builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GStreamer &lt;em&gt;1.18&lt;/em&gt; requires applications using gstreamer-full-1.0 to initialize static plugins by calling &lt;code&gt;gst_init_static_plugins()&lt;/code&gt; after &lt;code&gt;gst_init()&lt;/code&gt;. That function is defined in &lt;code&gt;gst/gstinitstaticplugins.h&lt;/code&gt; header file.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;em&gt;1.20.0&lt;/em&gt; &lt;code&gt;gst_init_static_plugins()&lt;/code&gt; is called automatically by &lt;code&gt;gst_init()&lt;/code&gt; and applications must not call it manually any more. The header file has been removed from public API.&lt;/p&gt; &#xA;&lt;p&gt;One can use the &lt;code&gt;gst-full-version-script&lt;/code&gt; option to pass a &lt;a href=&#34;https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html&#34;&gt;version script&lt;/a&gt; to the linker. This can be used to control the exact symbols that are exported by the gstreamer-full library, allowing the linker to garbage collect unused code and so reduce the total library size. A default script &lt;code&gt;gstreamer-full-default.map&lt;/code&gt; declares only glib/gstreamer symbols as public.&lt;/p&gt; &#xA;&lt;p&gt;One can use the &lt;code&gt;gst-full-plugins&lt;/code&gt; option to pass a list of plugins to be registered in the gstreamer-full library. The default value is &#39;*&#39; which means that all the plugins selected during the build process will be registered statically. An empty value will prevent any plugins to be registered.&lt;/p&gt; &#xA;&lt;p&gt;One can select a specific set of features with &lt;code&gt;gst-full-elements&lt;/code&gt;, &lt;code&gt;gst-full-typefind-functions&lt;/code&gt;, &lt;code&gt;gst-full-device-providers&lt;/code&gt; or &lt;code&gt;gst-full-dynamic-types&lt;/code&gt; to select specific feature from a plugin. When a feature has been listed in one of those options, the other features from its plugin will no longer be automatically included, even if the plugin is listed in &lt;code&gt;gst-full-plugins&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The user must insure that all selected plugins and features (element, typefind, etc.) have been enabled during the build configuration.&lt;/p&gt; &#xA;&lt;p&gt;To register features, the syntax is the following: plugins are separated by &#39;;&#39; and features from a plugin starts after &#39;:&#39; and are &#39;,&#39; separated.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dgst-full-plugins=coreelements;playback;typefindfunctions;alsa;pbtypes&lt;/code&gt;: enable only &lt;code&gt;coreelements&lt;/code&gt;, &lt;code&gt;playback&lt;/code&gt;, &lt;code&gt;typefindfunctions&lt;/code&gt;, &lt;code&gt;alsa&lt;/code&gt;, &lt;code&gt;pbtypes&lt;/code&gt; plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dgst-full-elements=coreelements:filesrc,fakesink,identity;alsa:alsasrc&lt;/code&gt;: enable only &lt;code&gt;filesrc&lt;/code&gt;, &lt;code&gt;identity&lt;/code&gt; and &lt;code&gt;fakesink&lt;/code&gt; elements from &lt;code&gt;coreelements&lt;/code&gt; and &lt;code&gt;alsasrc&lt;/code&gt; element from &lt;code&gt;alsa&lt;/code&gt; plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dgst-full-typefind-functions=typefindfunctions:wav,flv&lt;/code&gt;: enable only typefind func &lt;code&gt;wav&lt;/code&gt; and &lt;code&gt;flv&lt;/code&gt; from &lt;code&gt;typefindfunctions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dgst-full-device-providers=alsa:alsadeviceprovider&lt;/code&gt;: enable &lt;code&gt;alsadeviceprovider&lt;/code&gt; from &lt;code&gt;alsa&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Dgst-full-dynamic-types=pbtypes:video_multiview_flagset&lt;/code&gt;: enable &lt;code&gt;video_multiview_flagset&lt;/code&gt; from `pbtypes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All features from the &lt;code&gt;playback&lt;/code&gt; plugin will be enabled and the other plugins will be restricted to the specific features requested.&lt;/p&gt; &#xA;&lt;p&gt;All the selected features will be registered into a dedicated &lt;code&gt;NULL&lt;/code&gt; plugin name.&lt;/p&gt; &#xA;&lt;p&gt;This will cause the features/plugins that are not registered to not be included in the final gstreamer-full library.&lt;/p&gt; &#xA;&lt;p&gt;This is an experimental feature, backward incompatible changes could still be made in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Building documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation is not built by default because it is slow to generate. To build the documentation, first ensure that &lt;code&gt;hotdoc&lt;/code&gt; is installed and &lt;code&gt;doc&lt;/code&gt; option is enabled. For API documentation, gobject introspection must also be enabled. The special target &lt;code&gt;gst-doc&lt;/code&gt; can then be used to (re)generate the documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install hotdoc&#xA;$ meson setup -Ddoc=enabled -Dintrospection=enabled builddir&#xA;$ meson compile -C builddir gst-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: To visualize the documentation, &lt;code&gt;devhelp&lt;/code&gt; can be run inside the development environment (see below).&lt;/p&gt; &#xA;&lt;h1&gt;Development environment&lt;/h1&gt; &#xA;&lt;h2&gt;Development environment target&lt;/h2&gt; &#xA;&lt;p&gt;GStreamer ships a script that drops you into a development environment where all the plugins, libraries, and tools you just built are available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gst-env.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a custom builddir (i.e., not &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;_build&lt;/code&gt; or &lt;code&gt;builddir&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gst-env.py --builddir &amp;lt;BUILDDIR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;ninja devenv&lt;/code&gt; inside your build directory to achieve the same effect. However, this may not work on Windows if meson has auto-detected the visual studio environment.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;d rather not start a shell in your workflow, you can mutate the current environment into a suitable state like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gst-env.py --only-environment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will print output suitable for an sh-compatible &lt;code&gt;eval&lt;/code&gt; function, just like &lt;code&gt;ssh-agent -s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An external script can be run in development environment with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gst-env.py external_script.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: In the development environment, a fully usable prefix is also configured in &lt;code&gt;gstreamer/prefix&lt;/code&gt; where you can install any extra dependency/project.&lt;/p&gt; &#xA;&lt;p&gt;For more extensive documentation about the development environment go to &lt;a href=&#34;https://gstreamer.freedesktop.org/documentation/installing/building-from-source-using-meson.html&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom subprojects&lt;/h2&gt; &#xA;&lt;p&gt;We also added a meson option, &lt;code&gt;custom_subprojects&lt;/code&gt;, that allows the user to provide a comma-separated list of meson subprojects that should be built alongside the default ones.&lt;/p&gt; &#xA;&lt;p&gt;To use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clone into the subprojects directory&#xA;$ git -C subprojects clone my_subproject&#xA;# Wipe dependency detection state, in case you have an existing build dir&#xA;$ meson setup --wipe builddir -Dcustom_subprojects=my_subproject&#xA;$ meson compile -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run tests&lt;/h2&gt; &#xA;&lt;p&gt;You can easily run the test of all the components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson test -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list all available tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson test -C builddir --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all the tests of a specific component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson test -C builddir --suite gst-plugins-base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to run a specific test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson test -C builddir --suite gstreamer gst_gstbuffer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a specific test from a specific test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GST_CHECKS=test_subbuffer meson test -C builddir --suite gstreamer gst_gstbuffer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Optional Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can also install everything that is built into a predetermined prefix like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup --prefix=/path/to/install/prefix builddir&#xA;meson compile -C builddir&#xA;meson install -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the installed files have &lt;code&gt;RPATH&lt;/code&gt; stripped, so you will need to set &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt;, or &lt;code&gt;PATH&lt;/code&gt; as appropriate for your platform for things to work.&lt;/p&gt; &#xA;&lt;h2&gt;Add information about GStreamer development environment in your prompt line&lt;/h2&gt; &#xA;&lt;h3&gt;Bash prompt&lt;/h3&gt; &#xA;&lt;p&gt;We automatically handle &lt;code&gt;bash&lt;/code&gt; and set &lt;code&gt;$PS1&lt;/code&gt; accordingly.&lt;/p&gt; &#xA;&lt;p&gt;If the automatic &lt;code&gt;$PS1&lt;/code&gt; override is not desired (maybe you have a fancy custom prompt), set the &lt;code&gt;$GST_BUILD_DISABLE_PS1_OVERRIDE&lt;/code&gt; environment variable to &lt;code&gt;TRUE&lt;/code&gt; and use &lt;code&gt;$GST_ENV&lt;/code&gt; when setting the custom prompt, for example with a snippet like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...&#xA;if [[ -n &#34;${GST_ENV-}&#34; ]];&#xA;then&#xA;  PS1+=&#34;[ ${GST_ENV} ]&#34;&#xA;fi&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using powerline&lt;/h3&gt; &#xA;&lt;p&gt;In your powerline theme configuration file (by default in &lt;code&gt;{POWERLINE INSTALLATION DIR}/config_files/themes/shell/default.json&lt;/code&gt;) you should add a new environment segment as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;function&#34;: &#34;powerline.segments.common.env.environment&#34;,&#xA;  &#34;args&#34;: { &#34;variable&#34;: &#34;GST_ENV&#34; },&#xA;  &#34;priority&#34;: 50&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows Prerequisites Setup&lt;/h2&gt; &#xA;&lt;p&gt;On Windows, some of the components may require special care.&lt;/p&gt; &#xA;&lt;h3&gt;Git for Windows&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; installer. It will install a &lt;code&gt;bash&lt;/code&gt; prompt with basic shell utils and up-to-date git binaries.&lt;/p&gt; &#xA;&lt;p&gt;During installation, when prompted about &lt;code&gt;PATH&lt;/code&gt;, you should select the following option:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GStreamer/gstreamer/main/data/images/git-installer-PATH.png&#34; alt=&#34;Select &amp;quot;Git from the command line and also from 3rd-party software&amp;quot;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python 3.8+ on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;official Python installer&lt;/a&gt;. You must ensure that Python is installed into &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GStreamer/gstreamer/main/data/images/py-installer-page1.png&#34; alt=&#34;Enable Add Python to PATH, then click Customize Installation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may also want to customize the installation and install it into a system-wide location such as &lt;code&gt;C:\PythonXY&lt;/code&gt;, but this is not required.&lt;/p&gt; &#xA;&lt;h3&gt;Ninja on Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Visual Studio 2019 or newer, Ninja is already provided.&lt;/p&gt; &#xA;&lt;p&gt;In other cases, the easiest way to install Ninja on Windows is with &lt;code&gt;pip3&lt;/code&gt;, which will download the compiled binary and place it into the &lt;code&gt;Scripts&lt;/code&gt; directory inside your Python installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download the &lt;a href=&#34;https://github.com/ninja-build/ninja/releases&#34;&gt;official release&lt;/a&gt; and place it into &lt;code&gt;PATH&lt;/code&gt;, or use MSYS2.&lt;/p&gt; &#xA;&lt;h3&gt;Meson on Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Do not use the Meson MSI installer since it is experimental and known to not work with &lt;code&gt;GStreamer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;pip3&lt;/code&gt; to install Meson, same as Ninja above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install meson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Meson is written entirely in Python, so you can also run it as-is from the &lt;a href=&#34;https://github.com/mesonbuild/meson/&#34;&gt;git repository&lt;/a&gt; if you want to use the latest master branch for some reason.&lt;/p&gt; &#xA;&lt;h3&gt;Running Meson on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Since version 0.59.0, Meson automatically activates the Visual Studio environment on Windows if no other compilers (gcc, clang, etc) are found. To force the use of Visual Studio in such cases, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup --vsenv builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup a mingw/wine based development environment on linux&lt;/h3&gt; &#xA;&lt;h4&gt;Install wine and mingw&lt;/h4&gt; &#xA;&lt;h5&gt;On fedora x64&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install mingw64-gcc mingw64-gcc-c++ mingw64-pkg-config mingw64-winpthreads wine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FIXME: Figure out what needs to be installed on other distros&lt;/p&gt; &#xA;&lt;h4&gt;Get meson from git&lt;/h4&gt; &#xA;&lt;p&gt;This simplifies the process and allows us to use the cross files defined in meson itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/mesonbuild/meson.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build and install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;BUILDDIR=$PWD/winebuild/&#xA;export WINEPREFIX=$BUILDDIR/wine-prefix/ &amp;amp;&amp;amp; mkdir -p $WINEPREFIX&#xA;# Setting the prefix is mandatory as it is used to setup symlinks within the development environment&#xA;meson/meson.py $BUILDDIR --cross-file meson/cross/linux-mingw-w64-64bit.txt -Dgst-plugins-bad:vulkan=disabled -Dorc:gtk_doc=disabled --prefix=$BUILDDIR/wininstall/ -Djson-glib:gtk_doc=disabled&#xA;meson/meson.py install -C $BUILDDIR/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You should use &lt;code&gt;meson install -C $BUILDDIR&lt;/code&gt; each time you make a change instead of the usual &lt;code&gt;meson compile -C $BUILDDIR&lt;/code&gt; as this is not in the development environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alternatively, you can also use &lt;code&gt;mingw64-meson&lt;/code&gt; on Fedora, which is a wrapper script that sets things up to use Fedora&#39;s cross files and settings. However, the wrapper script can be buggy in some cases.&lt;/p&gt; &#xA;&lt;h4&gt;cross-mingw development environment&lt;/h4&gt; &#xA;&lt;p&gt;You can get into the development environment as usual with the gst-env.py script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gst-env.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/GStreamer/gstreamer/main/#development-environment&#34;&gt;above&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;After setting up &lt;a href=&#34;http://man7.org/linux/man-pages/man5/binfmt.d.5.html&#34;&gt;binfmt&lt;/a&gt; to use wine for windows binaries, you can run GStreamer tools under wine by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gst-launch-1.0.exe videotestsrc ! glimagesink&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>klonyyy/STMViewer</title>
    <updated>2023-07-06T01:33:15Z</updated>
    <id>tag:github.com,2023-07-06:/klonyyy/STMViewer</id>
    <link href="https://github.com/klonyyy/STMViewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time STM32 variable viewer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/klonyyy/STMViewer/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;example workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;STMViewer&lt;/h1&gt; &#xA;&lt;p&gt;An open-source GUI tool for viewing and manipulating variables data using debug interface and st-link programmer on STM32 microcontrollers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/klonyyy/STMViewer/main/docs/STMViewer.gif&#34; alt=&#34;_&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;STMViewer can be used to visualize your embedded application data in real-time with no overhead in a non-intrusive way. The software works by reading variables&#39; values directly from RAM using the ST-link programmer debug interface. Addresses are read from the *.elf file which is created when you build your embedded project. This approach&#39;s main downside is that the object&#39;s address must stay constant throughout the whole program&#39;s lifetime, which means the object has to be global. Even though it seems to be a small price to pay in comparison to running some debug protocol over for example UART which is also not free in terms of intrusiveness.&lt;/p&gt; &#xA;&lt;p&gt;STMViewer is a great tool for debugging, but might be of little use with highly optimized release builds (which usually lack debug info).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the *.deb package and install it using: &lt;code&gt;sudo apt install ./STMViewer-x.y.z-Linux.deb&lt;/code&gt; All dependencies should be installed and you should be ready to go.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you&#39;ve got GDB installed and added to your PATH (the easiest way is to install using &lt;a href=&#34;https://www.mingw-w64.org&#34;&gt;MinGW&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Download and run the STMViewer installer. Make sure the ST-link is in &#34;STM32 Debug + Mass Storage + VCP&#34; mode as for some reason &#34;STM32 Debug + VCP&#34; throws libusb errors on Windows. This needs further investigation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can assing the external GPU to STMViewer for improved performance.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Options-&amp;gt;Acqusition Settings window in the top menu.&lt;/li&gt; &#xA; &lt;li&gt;Select your project&#39;s elf file. Make sure the project is compiled in debug mode. Click done.&lt;/li&gt; &#xA; &lt;li&gt;Click &#39;add variable&#39; button to add new variable. Double-click to change its name to one of your global variables. If you&#39;re using structs or classes in C++ make sure to add its name before the variable, exactly like you&#39;d refer to it in the code (example myClass.var, or namespace::myClass.var).&lt;/li&gt; &#xA; &lt;li&gt;After adding all variables click &#39;update variable addresses&#39;. The type and address of the variables you&#39;ve added should change from &#34;NOT FOUND!&#34; to a valid address based on the *.elf file you&#39;ve provided.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop the variable to the plot area.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the ST-Link is connected. Download your executable to the microcontroller and press the &#34;STOPPED&#34; button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In case of any problems, please try the test/STMViewer_test CubeIDE project and the corresponding STMViewer_test.cfg project file. Please remember to build the project and update the elf file path in the Options -&amp;gt; Acqusition Settings.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m working in the motor control industry where it is crucial to visualize some of the process data in real-time. Since The beginning, I was working with &lt;a href=&#34;https://www.st.com/en/development-tools/stm-studio-stm32.html&#34;&gt;STMStudio&lt;/a&gt;, which is, or rather was, a great tool. Unfortunately, ST stopped supporting it which means there are some annoying bugs, and it doesn&#39;t work well with mangled c++ object names. Also, it works only on Windows which is a big downside. If you&#39;ve ever used it you probably see how big of an inspiration it was for creating STMViewer :) ST&#39;s other project in this area - &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubemonitor.html&#34;&gt;Cube Monitor&lt;/a&gt; - is simply underdeveloped, and seems to be abandoned as well so it is simply useless.&lt;/p&gt; &#xA;&lt;h2&gt;3rd party projects used in STMViewer&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stlink-org/stlink&#34;&gt;stlink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;imgui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/epezent/implot&#34;&gt;implot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pulzed/mINI&#34;&gt;mINI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btzy/nativefiledialog-extended&#34;&gt;nfd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>arduino/ArduinoCore-renesas</title>
    <updated>2023-07-06T01:33:15Z</updated>
    <id>tag:github.com,2023-07-06:/arduino/ArduinoCore-renesas</id>
    <link href="https://github.com/arduino/ArduinoCore-renesas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino Renesas fsp Boards&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/arduino/ArduinoCore-renesas/actions/workflows/sync-labels.yml&#34;&gt;&lt;img src=&#34;https://github.com/arduino/ArduinoCore-renesas/actions/workflows/sync-labels.yml/badge.svg?sanitize=true&#34; alt=&#34;Sync Labels status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Recompile libfsp.a&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;extras/e2studioProjects/$projectName&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the project in e2studio and build it&lt;/li&gt; &#xA; &lt;li&gt;Launch &lt;code&gt;fsp_to_arduino.sh&lt;/code&gt; script; this will &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rebuild the library without .c files in ra_gen&lt;/li&gt; &#xA;   &lt;li&gt;rename the library and copy in &lt;code&gt;variant/$boardName/libs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;copy the include files (both generated and from fsp) in &lt;code&gt;variant/$boardName/libs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;copy the .c files in ra_gen to &lt;code&gt;variants/$boardName/tmp_gen_c_files/&lt;/code&gt; -&amp;gt; &lt;strong&gt;ONLY TEMPORARILY, these files will eventually go away&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>