<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-11T01:32:02Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mzzopublic/C</title>
    <updated>2023-01-11T01:32:02Z</updated>
    <id>tag:github.com,2023-01-11:/Mzzopublic/C</id>
    <link href="https://github.com/Mzzopublic/C" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cè¯­è¨€&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>nomi-san/league-loader</title>
    <updated>2023-01-11T01:32:02Z</updated>
    <id>tag:github.com,2023-01-11:/nomi-san/league-loader</id>
    <link href="https://github.com/nomi-san/league-loader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒˆ Customize your League Client with JavaScript plugins &amp; explore Hextech UI with DevTools!&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://i.imgur.com/ZhWCav3.png&#34; width=&#34;140px&#34;&gt; &#xA;&lt;h1&gt;League Loader&lt;/h1&gt; &#xA;&lt;p&gt;A small &lt;strong&gt;JavaScript plugin loader&lt;/strong&gt; for League Client, supports &lt;strong&gt;CommonJS&lt;/strong&gt; modules.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customize League Client&lt;/li&gt; &#xA; &lt;li&gt;Unlock insecure options&lt;/li&gt; &#xA; &lt;li&gt;Support built-in and remote DevTools&lt;/li&gt; &#xA; &lt;li&gt;Support custom plugins&lt;/li&gt; &#xA; &lt;li&gt;Support CommonJS modules&lt;/li&gt; &#xA; &lt;li&gt;Interacting LCU APIs be easier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/nomi-san/league-loader/releases&#34;&gt;latest release&lt;/a&gt; and extract it.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;strong&gt;League Loader.exe&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select League Client path&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;strong&gt;Install&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch League Client&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/mDihNl7.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;After the client is ready, just press &lt;strong&gt;Ctrl Shift I&lt;/strong&gt; or click &#34;&lt;strong&gt;Show DevTools&lt;/strong&gt;&#34; in settings panel to open &lt;strong&gt;League Client DevTools&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/38210249/196092793-54e6e16b-7f02-41b3-84fe-42181acc1c96.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;// We also support &lt;strong&gt;insecure options&lt;/strong&gt; for plugins, touching them may get banned (&lt;code&gt;&amp;lt;= 3%&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;JavaScript plugins&lt;/h2&gt; &#xA;&lt;p&gt;To add a plugin, just create a &lt;code&gt;.js&lt;/code&gt; file in the plugins folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// hello.js&#xA;console.log(&#39;Hello, League Client!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All .js files in root of plugins folder will be executed after League ready, except file name starts with underscore.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plugins/&#xA;  _util.js      &#xA;  demo.js       ; will be executed after League starts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CommonJS modules&lt;/h3&gt; &#xA;&lt;p&gt;We provided a simple implementation to support CommonJS modules. Each plugin file is a module, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; are available variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// _util.js&#xA;module.exports = {&#xA;    greet: () =&amp;gt; console.log(&#39;Hello, world&#39;)&#xA;}&#xA;&#xA;// demo.js&#xA;const util = require(&#39;./_util&#39;)&#xA;util.greet()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also support to require JSON and text files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;data.json&#39;) // -&amp;gt; parsed JSON&#xA;require(&#39;data.raw&#39;)  // -&amp;gt; string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To store data globally, you can use &lt;code&gt;window&lt;/code&gt; object or &lt;code&gt;global&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;window.my_str = &#39;ABC&#39;&#xA;global.my_num = 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To open &lt;strong&gt;DevTools&lt;/strong&gt;, just call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;window.openDevTools()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reload plugins, just reload the Client (or Ctrl + R in DevTools):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;window.location.reload()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have an example which modifies the settings panel to add some controls, see &lt;a href=&#34;https://raw.githubusercontent.com/nomi-san/league-loader/main/bin/plugins/league-loader.js&#34;&gt;league-loader.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Theme the League Client&lt;/h3&gt; &#xA;&lt;p&gt;To change the default style, just add your CSS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function addCss(filename) {&#xA;  const style = document.createElement(&#39;link&#39;)&#xA;  style.href = filename&#xA;  style.type = &#39;text/css&#39;&#xA;  style.rel = &#39;stylesheet&#39;&#xA;  document.body.append(style)&#xA;}&#xA;&#xA;window.addEventListener(&#39;DOMContentLoaded&#39;, () =&amp;gt; {&#xA;  addCss(&#39;https://webdevtestbutch.000webhostapp.com/assets/Noxius.css&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a local CSS file, just require it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function insertCss(css) {&#xA;    const style = document.createElement(&#39;style&#39;)&#xA;    style.textContent = css&#xA;    document.body.append(style)&#xA;}&#xA;&#xA;window.addEventListener(&#39;DOMContentLoaded&#39;, () =&amp;gt; {&#xA;  insertCss(require(&#39;my.theme.css&#39;))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LCU API requests&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;fetch&lt;/code&gt; to make a LCU request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function acceptMatchFound() {&#xA;  fetch(&#39;/lol-matchmaking/v1/ready-check/accept&#39;, {&#xA;    method: &#39;POST&#39;  &#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LCU Websocket&lt;/h3&gt; &#xA;&lt;p&gt;When the websocket ready, this link tag will appear:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;riot:plugins:websocket&#34; href=&#34;wss://riot:hq5DDz5c8uLLc-dMRC1HGQ@127.0.0.1:50302/&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call this function to subscribe API event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function subscribe() {&#xA;  const uri = document.querySelector(&#39;link[rel=&#34;riot:plugins:websocket&#34;]&#39;).href&#xA;  const ws = new WebSocket(uri, &#39;wamp&#39;)&#xA;  &#xA;  ws.onopen = () =&amp;gt; ws.send(JSON.stringify([5, &#39;JsonApiEvent&#39;]))&#xA;  ws.onmessage = async message =&amp;gt; {&#xA;    const data = JSON.parse(message.data)&#xA;    console.log(data)&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should use &lt;strong&gt;Visual Studio Code&lt;/strong&gt; to develop your plugins, it supports intellisense, linter and autocomplete for modules.&lt;/li&gt; &#xA; &lt;li&gt;League Client runs on &lt;strong&gt;Chromium 91&lt;/strong&gt;, so you&#39;re writing JS for the web browser like &lt;strong&gt;Chrome&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When interacting with the DOM, you should put the entry to &lt;code&gt;onload&lt;/code&gt; or &lt;code&gt;DOMContentLoaded&lt;/code&gt; event of &lt;code&gt;window&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Native ESM supports&lt;/h3&gt; &#xA;&lt;p&gt;Plugin scripts are loaded as classic module, so you cannot use top-level &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s wrap your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(() =&amp;gt; import(&#39;https://your-cdn.com/plugin.js&#39;))();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use ESM in your plugin module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// https://your-cdn.com/plugin.js&#xA;import axios from &#39;https://cdn.skypack.dev/axios&#39;&#xA;axios.get(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To import Axios locally, just use &lt;code&gt;import&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;async function test() {&#xA;  const { default: axios } = await import(&#39;https://cdn.skypack.dev/axios&#39;)&#xA;  const { data } = await axios.get(&#39;/performance/v1/memory&#39;)&#xA;  console.log(data)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recommended CDNs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.skypack.dev/&#34;&gt;https://www.skypack.dev/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esm.sh/&#34;&gt;https://esm.sh/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jsdelivr.com/esm&#34;&gt;https://www.jsdelivr.com/esm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unpkg.com/&#34;&gt;https://unpkg.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;This project requires Visual Studio 2017 with these components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Desktop development with C++&lt;/li&gt; &#xA; &lt;li&gt;.NET desktop development&lt;/li&gt; &#xA; &lt;li&gt;Windows 8.1 SDK &amp;amp; .NET Framework 4.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use VS2015+ and different SDK version.&lt;/p&gt; &#xA;&lt;p&gt;Build steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;strong&gt;league-loader.sln&lt;/strong&gt; in VS&lt;/li&gt; &#xA; &lt;li&gt;Right click on the solution -&amp;gt; &lt;strong&gt;Restore Nuget Packages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set arch to &lt;strong&gt;Any CPU&lt;/strong&gt; or &lt;strong&gt;x86&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Right click on each project -&amp;gt; &lt;strong&gt;Build&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nomi-san/league-loader/main/HOW_IT_WORKS.md&#34;&gt;HOW_IT_WORKS&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;CEF notes&lt;/h3&gt; &#xA;&lt;p&gt;Current CEF version: &lt;strong&gt;v91.1.22&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project use CEF CAPI in C++. If you need sweet C++ OOP, just use libcef wrapper.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s download our &lt;a href=&#34;https://github.com/nomi-san/league-loader/releases/tag/0.1a&#34;&gt;pre-built here&lt;/a&gt;, then add the following code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#pragma comment(lib, &#34;libcef.lib&#34;)&#xA;#pragma comment(lib, &#34;libcef_dll_wrapper.lib&#34;)&#xA;#define WRAPPING_CEF_SHARED&#xA;#include &#34;libcef_dll/ctocpp/browser_ctocpp.h&#34;&#xA;&#xA;void callback(cef_browser_t *cbrowser) {&#xA;  auto browser = CefBrowserCToCpp::Wrap(cbowser);&#xA;  aut host = browser-&amp;gt;GetHost();&#xA;  host-&amp;gt;GetMainFrame();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wiidev/usbloadergx</title>
    <updated>2023-01-11T01:32:02Z</updated>
    <id>tag:github.com,2023-01-11:/wiidev/usbloadergx</id>
    <link href="https://github.com/wiidev/usbloadergx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This version of USB Loader GX supersedes the SourceForge version, which was last updated in 2019.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/wiidev/usbloadergx/&#34; title=&#34;USB Loader GX&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiidev/usbloadergx/enhanced/data/web/logo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wiidev/usbloadergx/releases&#34; title=&#34;Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/wiidev/usbloadergx?logo=github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wiidev/usbloadergx/actions&#34; title=&#34;Actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/wiidev/usbloadergx/main.yml?branch=enhanced&amp;amp;logo=github&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;USB Loader GX allows you to play Wii and GameCube games from a USB storage device or an SD card, launch other homebrew apps, create backups, use cheats in games and a whole lot more.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Extract the apps folder to the root of your SD card and replace any existing files.&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://github.com/wiidev/d2x-cios/releases&#34;&gt;d2x v11 cIOS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Optional: Download wiitdb.xml by selecting the update option within the loaders settings menu.&lt;/li&gt; &#xA; &lt;li&gt;Optional: Install the loaders forwarder channel (&lt;a href=&#34;https://github.com/wiidev/usbloadergx/raw/updates/USBLoaderGX_forwarder%5BUNEO%5D_Wii.wad&#34;&gt;Wii&lt;/a&gt; or &lt;a href=&#34;https://github.com/wiidev/usbloadergx/raw/updates/USBLoaderGX_forwarder%5BUNEO%5D_vWii.wad&#34;&gt;vWii&lt;/a&gt;) and then set the return to setting to &lt;code&gt;UNEO&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;cIOS guide&lt;/h2&gt; &#xA;&lt;p&gt;The first configuration is the optimal one for the Wii, but the second configuration should improve compatibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Wii&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Slot 249 base 56&#xA;Slot 250 base 57&#xA;Slot 251 base 38&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For vWii and Wii&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Slot 248 base 38 (Wii only)&#xA;Slot 249 base 56&#xA;Slot 250 base 57&#xA;Slot 251 base 58&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>