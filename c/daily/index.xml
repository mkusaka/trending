<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:36:07Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>free-audio/clap</title>
    <updated>2022-06-17T01:36:07Z</updated>
    <id>tag:github.com,2022-06-17:/free-audio/clap</id>
    <link href="https://github.com/free-audio/clap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio Plugin API&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/free-audio/clap/main/artwork/clap-full-logo-white.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/free-audio/clap/main/artwork/clap-full-logo-black.png&#34;&gt; &#xA;  &lt;img alt=&#34;CLAP&#34; title=&#34;Clever Audio Plugin&#34; src=&#34;https://raw.githubusercontent.com/free-audio/clap/main/artwork/clap-full-logo-black.png&#34; width=&#34;200&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#learn-about-clap&#34;&gt;Learn about CLAP&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#entry-point&#34;&gt;Entry point&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#fundamental-extensions&#34;&gt;Fundamental extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#support-extensions&#34;&gt;Support extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#extra-extensions&#34;&gt;Extra extensions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#resources&#34;&gt;Resources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#hosts&#34;&gt;Hosts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#community-related-projects&#34;&gt;Community related projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#programming-language-bindings&#34;&gt;Programming Language Bindings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/#artwork&#34;&gt;Artwork&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Learn about CLAP&lt;/h1&gt; &#xA;&lt;p&gt;CLAP stands for &lt;strong&gt;CL&lt;/strong&gt;ever &lt;strong&gt;A&lt;/strong&gt;udio &lt;strong&gt;P&lt;/strong&gt;lugin. It is an audio plugin ABI which defines a standard for &lt;em&gt;Digital Audio Workstations&lt;/em&gt; and audio plugins (synthesizers, audio effects, ...) to work together.&lt;/p&gt; &#xA;&lt;p&gt;To work with CLAP, include &lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/clap.h&#34;&gt;clap/clap.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The two most important objects are &lt;code&gt;clap_host&lt;/code&gt; and &lt;code&gt;clap_plugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/src/plugin-template.c&#34;&gt;src/plugin-template.c&lt;/a&gt; is a very minimal example which demonstrates how to wire a CLAP plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Entry point&lt;/h2&gt; &#xA;&lt;p&gt;The entry point is declared in &lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/entry.h&#34;&gt;entry.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Most features comes from extensions, which are in fact C interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// host extension&#xA;const clap_host_log *log = host-&amp;gt;extension(host, CLAP_EXT_LOG);&#xA;if (log)&#xA;   log-&amp;gt;log(host, CLAP_LOG_INFO, &#34;Hello World! ;^)&#34;);&#xA;&#xA;// plugin extension&#xA;const clap_plugin_params *params = plugin-&amp;gt;extension(plugin, CLAP_EXT_PARAMS);&#xA;if (params)&#xA;{&#xA;   uint32_t paramsCount = params-&amp;gt;count(plugin);&#xA;   // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The extensions are defined in &lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext&#34;&gt;ext&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Some extensions are still in the progress of being designed and they are in the &lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft&#34;&gt;draft&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;An extension comes with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an header &lt;code&gt;#include &amp;lt;clap/ext/xxx.h&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;an extension identifier: &lt;code&gt;#define CLAP_EXT_XXX &#34;clap/XXX&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;host interfaces are named like: &lt;code&gt;struct clap_host_xxx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;plugin interfaces are named like: &lt;code&gt;struct clap_plugin_xxx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;each methods must have a clear thread specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can create your own extensions and share them, make sure that the extension identifier&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;includes versioning in case the ABI breaks&lt;/li&gt; &#xA; &lt;li&gt;a unique identifier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All strings are valid UTF-8&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fundamental extensions&lt;/h2&gt; &#xA;&lt;p&gt;This is a list of the extensions that you most likely want to implement and use to get a basic plugin experience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/log.h&#34;&gt;log&lt;/a&gt;, lets the host aggregate plugin logs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/thread-check.h&#34;&gt;thread-check&lt;/a&gt;, check which thread you are currently on, useful for correctness validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/audio-ports.h&#34;&gt;audio-ports&lt;/a&gt;, define the audio ports&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/note-ports.h&#34;&gt;note-ports&lt;/a&gt;, define the note ports&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/params.h&#34;&gt;params&lt;/a&gt;, parameters management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/latency.h&#34;&gt;latency&lt;/a&gt;, report the plugin latency&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/render.h&#34;&gt;render&lt;/a&gt;, renders realtime or offline&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/tail.h&#34;&gt;tail&lt;/a&gt;, processing tail length&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/state.h&#34;&gt;state&lt;/a&gt;, save and load the plugin state&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/gui.h&#34;&gt;gui&lt;/a&gt;, generic gui controller&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/thread-pool.h&#34;&gt;thread-pool&lt;/a&gt;, use the host thread pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/timer-support.h&#34;&gt;timer-support&lt;/a&gt;, lets the plugin register timer handlers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/posix-fd-support.h&#34;&gt;posix-fd-support&lt;/a&gt;, lets the plugin register I/O handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extra extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/note-name.h&#34;&gt;note-name&lt;/a&gt;, give a name to notes, useful for drum machines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/tuning.h&#34;&gt;tuning&lt;/a&gt;, host provided microtuning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/track-info.h&#34;&gt;track-info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/quick-controls.h&#34;&gt;quick-controls&lt;/a&gt;, bank of controls that can be mapped on a controlles with 8 knobs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/file-reference.h&#34;&gt;file-reference&lt;/a&gt;, let the host know about the plugin&#39;s file reference, and perform &#34;Collect &amp;amp; Save&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/check-for-update.h&#34;&gt;check-for-update&lt;/a&gt;, check if there is a new version of a plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/audio-ports-config.h&#34;&gt;audio-ports-config&lt;/a&gt;, simple list of possible configurations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/surround.h&#34;&gt;surround&lt;/a&gt;, inspect surround channel mapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/free-audio/clap/main/include/clap/ext/draft/ambisonic.h&#34;&gt;ambisonic&lt;/a&gt;, inspect ambisonic channel mapping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://u-he.com/fwd/clap/&#34;&gt;u-he&lt;/a&gt;, synthesizers and effects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://surge-synthesizer.github.io/&#34;&gt;Surge&lt;/a&gt;, open source synthesizer and effect &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CLAP is enabled in &lt;a href=&#34;https://github.com/surge-synthesizer/releases-xt/releases/tag/Nightly&#34;&gt;nightly builds&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hosts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitwig.com&#34;&gt;Bitwig&lt;/a&gt;, you need at least &lt;em&gt;Bitwig Studio 4.3 Beta 5&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/free-audio/clap-host&#34;&gt;clap-host&lt;/a&gt;, very simple host&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/free-audio/clap-plugins&#34;&gt;clap-plugins&lt;/a&gt;, very simple plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schwaaa/clap-plugin&#34;&gt;schwaaa&#39;s plugin&lt;/a&gt;, basic example for prototyping CLAP audio plugins using Dear ImGui as the user interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/free-audio/clap-juce-extension&#34;&gt;clap-juce-extension&lt;/a&gt;, juce add-on&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skei/MIP2&#34;&gt;MIP2&lt;/a&gt;, host and plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/celtera/avendish&#34;&gt;Avendish&lt;/a&gt;, a reflection-based API for media plug-ins in C++ which supports Clap&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbert-vdh/nih-plug&#34;&gt;nih-plug&lt;/a&gt;, an API-agnostic, Rust-based plugin framework aiming to reduce boilerplate without getting in your way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programming Language Bindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glowcoil/clap-sys&#34;&gt;clap-sys&lt;/a&gt;, rust binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bremmers/CLAP-for-Delphi&#34;&gt;CLAP-for-Delphi&lt;/a&gt;, Delphi binding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Artwork&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/free-audio/clap/files/8805281/CLAP.Logo.Pack.zip&#34;&gt;CLAP Logo Pack.zip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>circuitvalley/USB_C_Industrial_Camera_FPGA_USB3</title>
    <updated>2022-06-17T01:36:07Z</updated>
    <id>tag:github.com,2022-06-17:/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3</id>
    <link href="https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source and Documentation files for USB C Industrial Camera Project, This repo contains source for PCB boards, FPGA , Camera and USB along with FPGA Firmware and USB Controller Firmware source.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Opensource USB C industrial camera with Interchangeable C mount Lens, Interchangeable MIPI Sensor with Lattice Crosslink NX FPGA Cypress FX3 USB 3.0 controller&lt;/h3&gt; &#xA;&lt;h4&gt;Project Blog post&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.circuitvalley.com/2022/06/pensource-usb-c-industrial-camera-c-mount-fpga-imx-mipi-usb-3-crosslinknx.html&#34;&gt;https://www.circuitvalley.com/2022/06/pensource-usb-c-industrial-camera-c-mount-fpga-imx-mipi-usb-3-crosslinknx.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shield: &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC BY 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This work is licensed under a &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by/4.0/88x31.png&#34; alt=&#34;CC BY 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3/raw/master/Hardware/Images/usb_c_fpga_mipi_camera_c_mount_industrial_lattice_crosslink_fpga_xilinx_zynq%20(4).JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3/raw/master/Hardware/Images/usb_c_fpga_mipi_camera_c_mount_industrial_lattice_crosslink_fpga_xilinx_zynq%20(3).JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3/raw/master/Hardware/Images/usb_c_fpga_mipi_camera_c_mount_industrial_lattice_crosslink_fpga_xilinx_zynq%20(33).JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3/raw/master/Hardware/Images/usb_c_fpga_mipi_camera_c_mount_industrial_lattice_crosslink_fpga_xilinx_zynq%20(31).JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3/raw/master/Hardware/Images/usb_c_fpga_mipi_camera_c_mount_industrial_lattice_crosslink_fpga_xilinx_zynq%20(19).JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/circuitvalley/USB_C_Industrial_Camera_FPGA_USB3/raw/master/Hardware/Images/usb_c_fpga_mipi_camera_c_mount_industrial_lattice_crosslink_fpga_xilinx_zynq%20(12)24.JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redis/redis</title>
    <updated>2022-06-17T01:36:07Z</updated>
    <id>tag:github.com,2022-06-17:/redis/redis</id>
    <link href="https://github.com/redis/redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. You can find more detailed documentation at &lt;a href=&#34;https://redis.io&#34;&gt;redis.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Redis?&lt;/h2&gt; &#xA;&lt;p&gt;Redis is often referred to as a &lt;em&gt;data structures&lt;/em&gt; server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a &lt;em&gt;server-client&lt;/em&gt; model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way.&lt;/p&gt; &#xA;&lt;p&gt;Data structures implemented into Redis have a few special properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that it is also non-volatile.&lt;/li&gt; &#xA; &lt;li&gt;The implementation of data structures emphasizes memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modelled using a high-level programming language.&lt;/li&gt; &#xA; &lt;li&gt;Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, clustering, and high availability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations that work with complex data types like Lists, Sets, ordered data structures, and so forth.&lt;/p&gt; &#xA;&lt;p&gt;If you want to know more, this is a list of selected starting points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to Redis data types. &lt;a href=&#34;https://redis.io/topics/data-types-intro&#34;&gt;https://redis.io/topics/data-types-intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try Redis directly inside your browser. &lt;a href=&#34;https://try.redis.io&#34;&gt;https://try.redis.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The full list of Redis commands. &lt;a href=&#34;https://redis.io/commands&#34;&gt;https://redis.io/commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;There is much more inside the official Redis documentation. &lt;a href=&#34;https://redis.io/documentation&#34;&gt;https://redis.io/documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Redis&lt;/h2&gt; &#xA;&lt;p&gt;Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; &#xA;&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Redis is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; &#xA;&lt;p&gt;It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To append a suffix to Redis program names, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&#34;-alt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build a 32 bit Redis binary using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make 32bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building Redis, it is a good idea to test it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TLS is built, running the tests with TLS enabled (you will need &lt;code&gt;tcl-tls&lt;/code&gt; installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./utils/gen-test-certs.sh&#xA;% ./runtest --tls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; &#xA;&lt;p&gt;Redis has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; &#xA;&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise.&lt;/p&gt; &#xA;&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; &#xA;&lt;p&gt;If after building Redis with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Redis distribution.&lt;/p&gt; &#xA;&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Redis, try the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; &#xA; &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&#34;-m32 -march=native&#34; LDFLAGS=&#34;-m32&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Allocator&lt;/h2&gt; &#xA;&lt;p&gt;Selecting a non-default memory allocator when building Redis is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Redis is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; &#xA;&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=libc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monotonic clock&lt;/h2&gt; &#xA;&lt;p&gt;By default, Redis will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&#34;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&#34;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make CFLAGS=&#34;-DUSE_PROCESSOR_CLOCK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verbose build&lt;/h2&gt; &#xA;&lt;p&gt;Redis will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make V=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Redis&lt;/h2&gt; &#xA;&lt;p&gt;To run Redis with the default configuration, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./redis-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to provide your redis.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./redis-server /path/to/redis.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./redis-server --port 9999 --replicaof 127.0.0.1 6379&#xA;% ./redis-server /etc/redis/6379.conf --loglevel debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the options in redis.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; &#xA;&lt;h2&gt;Running Redis with TLS:&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/redis/redis/unstable/TLS.md&#34;&gt;TLS.md&lt;/a&gt; file for more information on how to use Redis with TLS.&lt;/p&gt; &#xA;&lt;h2&gt;Playing with Redis&lt;/h2&gt; &#xA;&lt;p&gt;You can use redis-cli to play with Redis. Start a redis-server instance, then in another terminal try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./redis-cli&#xA;redis&amp;gt; ping&#xA;PONG&#xA;redis&amp;gt; set foo bar&#xA;OK&#xA;redis&amp;gt; get foo&#xA;&#34;bar&#34;&#xA;redis&amp;gt; incr mycounter&#xA;(integer) 1&#xA;redis&amp;gt; incr mycounter&#xA;(integer) 2&#xA;redis&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the list of all the available commands at &lt;a href=&#34;https://redis.io/commands&#34;&gt;https://redis.io/commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Redis&lt;/h2&gt; &#xA;&lt;p&gt;In order to install Redis binaries into /usr/local/bin, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; &#xA;&lt;p&gt;Make install will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Redis, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd utils&#xA;% ./install_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; &#xA;&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Redis properly as a background daemon that will start again on system reboots.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be able to stop and start Redis using the script named &lt;code&gt;/etc/init.d/redis_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/redis_6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;Note: By contributing code to the Redis project in any form, including sending a pull request via Github, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the BSD license that you can find in the &lt;a href=&#34;https://github.com/redis/redis/raw/unstable/COPYING&#34;&gt;COPYING&lt;/a&gt; file included in the Redis source distribution.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/redis/redis/raw/unstable/CONTRIBUTING&#34;&gt;CONTRIBUTING&lt;/a&gt; file in this source distribution for more information. For security bugs and vulnerabilities, please see &lt;a href=&#34;https://github.com/redis/redis/raw/unstable/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Redis internals&lt;/h1&gt; &#xA;&lt;p&gt;If you are reading this README you are likely in front of a Github page or you just untarred the Redis distribution tar ball. In both the cases you are basically one step away from the source code, so here we explain the Redis source code layout, what is in each file as a general idea, the most important functions and structures inside the Redis server and so forth. We keep all the discussion at a high level without digging into the details since this document would be huge otherwise and our code base changes continuously, but a general idea should be a good starting point to understand more. Moreover most of the code is heavily commented and easy to follow.&lt;/p&gt; &#xA;&lt;h2&gt;Source code layout&lt;/h2&gt; &#xA;&lt;p&gt;The Redis root directory just contains this README, the Makefile which calls the real Makefile inside the &lt;code&gt;src&lt;/code&gt; directory and an example configuration for Redis and Sentinel. You can find a few shell scripts that are used in order to execute the Redis, Redis Cluster and Redis Sentinel unit tests, which are implemented inside the &lt;code&gt;tests&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Inside the root are the following important directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: contains the Redis implementation, written in C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: contains the unit tests, implemented in Tcl.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deps&lt;/code&gt;: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide &lt;code&gt;libc&lt;/code&gt;, a POSIX compatible interface and a C compiler. Notably &lt;code&gt;deps&lt;/code&gt; contains a copy of &lt;code&gt;jemalloc&lt;/code&gt;, which is the default allocator of Redis under Linux. Note that under &lt;code&gt;deps&lt;/code&gt; there are also things which started with the Redis project, but for which the main repository is not &lt;code&gt;redis/redis&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few more directories but they are not very important for our goals here. We&#39;ll focus mostly on &lt;code&gt;src&lt;/code&gt;, where the Redis implementation is contained, exploring what there is inside each file. The order in which files are exposed is the logical one to follow in order to disclose different layers of complexity incrementally.&lt;/p&gt; &#xA;&lt;p&gt;Note: lately Redis was refactored quite a bit. Function names and file names have been changed, so you may find that this documentation reflects the &lt;code&gt;unstable&lt;/code&gt; branch more closely. For instance, in Redis 3.0 the &lt;code&gt;server.c&lt;/code&gt; and &lt;code&gt;server.h&lt;/code&gt; files were named &lt;code&gt;redis.c&lt;/code&gt; and &lt;code&gt;redis.h&lt;/code&gt;. However the overall structure is the same. Keep in mind that all the new developments and pull requests should be performed against the &lt;code&gt;unstable&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;server.h&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to understand how a program works is to understand the data structures it uses. So we&#39;ll start from the main header file of Redis, which is &lt;code&gt;server.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the server configuration and in general all the shared state is defined in a global structure called &lt;code&gt;server&lt;/code&gt;, of type &lt;code&gt;struct redisServer&lt;/code&gt;. A few important fields in this structure are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;server.db&lt;/code&gt; is an array of Redis databases, where data is stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.commands&lt;/code&gt; is the command table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.clients&lt;/code&gt; is a linked list of clients connected to the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.master&lt;/code&gt; is a special client, the master, if the instance is a replica.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are tons of other fields. Most fields are commented directly inside the structure definition.&lt;/p&gt; &#xA;&lt;p&gt;Another important Redis data structure is the one defining a client. In the past it was called &lt;code&gt;redisClient&lt;/code&gt;, now just &lt;code&gt;client&lt;/code&gt;. The structure has many fields, here we&#39;ll just show the main ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct client {&#xA;    int fd;&#xA;    sds querybuf;&#xA;    int argc;&#xA;    robj **argv;&#xA;    redisDb *db;&#xA;    int flags;&#xA;    list *reply;&#xA;    // ... many other fields ...&#xA;    char buf[PROTO_REPLY_CHUNK_BYTES];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client structure defines a &lt;em&gt;connected client&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;fd&lt;/code&gt; field is the client socket file descriptor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;querybuf&lt;/code&gt; accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reply&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writeable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see in the client structure above, arguments in a command are described as &lt;code&gt;robj&lt;/code&gt; structures. The following is the full &lt;code&gt;robj&lt;/code&gt; structure, which defines a &lt;em&gt;Redis object&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;typedef struct redisObject {&#xA;    unsigned type:4;&#xA;    unsigned encoding:4;&#xA;    unsigned lru:LRU_BITS; /* lru time (relative to server.lruclock) */&#xA;    int refcount;&#xA;    void *ptr;&#xA;} robj;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically this structure can represent all the basic Redis data types like strings, lists, sets, sorted sets and so forth. The interesting thing is that it has a &lt;code&gt;type&lt;/code&gt; field, so that it is possible to know what type a given object has, and a &lt;code&gt;refcount&lt;/code&gt;, so that the same object can be referenced in multiple places without allocating it multiple times. Finally the &lt;code&gt;ptr&lt;/code&gt; field points to the actual representation of the object, which might vary even for the same type, depending on the &lt;code&gt;encoding&lt;/code&gt; used.&lt;/p&gt; &#xA;&lt;p&gt;Redis objects are used extensively in the Redis internals, however in order to avoid the overhead of indirect accesses, recently in many places we just use plain dynamic strings not wrapped inside a Redis object.&lt;/p&gt; &#xA;&lt;h2&gt;server.c&lt;/h2&gt; &#xA;&lt;p&gt;This is the entry point of the Redis server, where the &lt;code&gt;main()&lt;/code&gt; function is defined. The following are the most important steps in order to startup the Redis server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;initServerConfig()&lt;/code&gt; sets up the default values of the &lt;code&gt;server&lt;/code&gt; structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;initServer()&lt;/code&gt; allocates the data structures needed to operate, setup the listening socket, and so forth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aeMain()&lt;/code&gt; starts the event loop which listens for new connections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two special functions called periodically by the event loop:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;serverCron()&lt;/code&gt; is called periodically (according to &lt;code&gt;server.hz&lt;/code&gt; frequency), and performs tasks that must be performed from time to time, like checking for timed out clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeSleep()&lt;/code&gt; is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Inside server.c you can find code that handles other vital things of the Redis server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;call()&lt;/code&gt; is used in order to call a given command in the context of a given client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;activeExpireCycle()&lt;/code&gt; handles eviction of keys with a time to live set via the &lt;code&gt;EXPIRE&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;performEvictions()&lt;/code&gt; is called when a new write command should be performed but Redis is out of memory according to the &lt;code&gt;maxmemory&lt;/code&gt; directive.&lt;/li&gt; &#xA; &lt;li&gt;The global variable &lt;code&gt;redisCommandTable&lt;/code&gt; defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;commands.c&lt;/h2&gt; &#xA;&lt;p&gt;This file is auto generated by utils/generate-command-code.py, the content is based on the JSON files in the src/commands folder. These are meant to be the single source of truth about the Redis commands, and all the metadata about them. These JSON files are not meant to be used directly by anyone directly, instead that metadata can be obtained via the COMMAND command.&lt;/p&gt; &#xA;&lt;h2&gt;networking.c&lt;/h2&gt; &#xA;&lt;p&gt;This file defines all the I/O functions with clients, masters and replicas (which in Redis are just special clients):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;createClient()&lt;/code&gt; allocates and initializes a new client.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;addReply*()&lt;/code&gt; family of functions are used by command implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;writeToClient()&lt;/code&gt; transmits the data pending in the output buffers to the client and is called by the &lt;em&gt;writable event handler&lt;/em&gt; &lt;code&gt;sendReplyToClient()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;readQueryFromClient()&lt;/code&gt; is the &lt;em&gt;readable event handler&lt;/em&gt; and accumulates data read from the client into the query buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;processInputBuffer()&lt;/code&gt; is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls &lt;code&gt;processCommand()&lt;/code&gt; which is defined inside &lt;code&gt;server.c&lt;/code&gt; in order to actually execute the command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;freeClient()&lt;/code&gt; deallocates, disconnects and removes a client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;aof.c and rdb.c&lt;/h2&gt; &#xA;&lt;p&gt;As you can guess from the names, these files implement the RDB and AOF persistence for Redis. Redis uses a persistence model based on the &lt;code&gt;fork()&lt;/code&gt; system call in order to create a process with the same (shared) memory content of the main Redis process. This secondary process dumps the content of the memory on disk. This is used by &lt;code&gt;rdb.c&lt;/code&gt; to create the snapshots on disk and by &lt;code&gt;aof.c&lt;/code&gt; in order to perform the AOF rewrite when the append only file gets too big.&lt;/p&gt; &#xA;&lt;p&gt;The implementation inside &lt;code&gt;aof.c&lt;/code&gt; has additional functions in order to implement an API that allows commands to append new commands into the AOF file as clients execute them.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;call()&lt;/code&gt; function defined inside &lt;code&gt;server.c&lt;/code&gt; is responsible for calling the functions that in turn will write the commands into the AOF.&lt;/p&gt; &#xA;&lt;h2&gt;db.c&lt;/h2&gt; &#xA;&lt;p&gt;Certain Redis commands operate on specific data types; others are general. Examples of generic commands are &lt;code&gt;DEL&lt;/code&gt; and &lt;code&gt;EXPIRE&lt;/code&gt;. They operate on keys and not on their values specifically. All those generic commands are defined inside &lt;code&gt;db.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moreover &lt;code&gt;db.c&lt;/code&gt; implements an API in order to perform certain operations on the Redis dataset without directly accessing the internal data structures.&lt;/p&gt; &#xA;&lt;p&gt;The most important functions inside &lt;code&gt;db.c&lt;/code&gt; which are used in many command implementations are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lookupKeyRead()&lt;/code&gt; and &lt;code&gt;lookupKeyWrite()&lt;/code&gt; are used in order to get a pointer to the value associated to a given key, or &lt;code&gt;NULL&lt;/code&gt; if the key does not exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dbAdd()&lt;/code&gt; and its higher level counterpart &lt;code&gt;setKey()&lt;/code&gt; create a new key in a Redis database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dbDelete()&lt;/code&gt; removes a key and its associated value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;emptyDb()&lt;/code&gt; removes an entire single database or all the databases defined.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rest of the file implements the generic commands exposed to the client.&lt;/p&gt; &#xA;&lt;h2&gt;object.c&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;robj&lt;/code&gt; structure defining Redis objects was already described. Inside &lt;code&gt;object.c&lt;/code&gt; there are all the functions that operate with Redis objects at a basic level, like functions to allocate new objects, handle the reference counting and so forth. Notable functions inside this file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;incrRefCount()&lt;/code&gt; and &lt;code&gt;decrRefCount()&lt;/code&gt; are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createObject()&lt;/code&gt; allocates a new object. There are also specialized functions to allocate string objects having a specific content, like &lt;code&gt;createStringObjectFromLongLong()&lt;/code&gt; and similar functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This file also implements the &lt;code&gt;OBJECT&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;replication.c&lt;/h2&gt; &#xA;&lt;p&gt;This is one of the most complex files inside Redis, it is recommended to approach it only after getting a bit familiar with the rest of the code base. In this file there is the implementation of both the master and replica role of Redis.&lt;/p&gt; &#xA;&lt;p&gt;One of the most important functions inside this file is &lt;code&gt;replicationFeedSlaves()&lt;/code&gt; that writes commands to the clients representing replica instances connected to our master, so that the replicas can get the writes performed by the clients: this way their data set will remain synchronized with the one in the master.&lt;/p&gt; &#xA;&lt;p&gt;This file also implements both the &lt;code&gt;SYNC&lt;/code&gt; and &lt;code&gt;PSYNC&lt;/code&gt; commands that are used in order to perform the first synchronization between masters and replicas, or to continue the replication after a disconnection.&lt;/p&gt; &#xA;&lt;h2&gt;Script&lt;/h2&gt; &#xA;&lt;p&gt;The script unit is compose of 3 units&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;script.c&lt;/code&gt; - integration of scripts with Redis (commands execution, set replication/resp, ..)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script_lua.c&lt;/code&gt; - responsible to execute Lua code, uses script.c to interact with Redis from within the Lua code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function_lua.c&lt;/code&gt; - contains the Lua engine implementation, uses script_lua.c to execute the Lua code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;functions.c&lt;/code&gt; - Contains Redis Functions implementation (FUNCTION command), uses functions_lua.c if the function it wants to invoke needs the Lua engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eval.c&lt;/code&gt; - Contains the &lt;code&gt;eval&lt;/code&gt; implementation using &lt;code&gt;script_lua.c&lt;/code&gt; to invoke the Lua code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other C files&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;t_hash.c&lt;/code&gt;, &lt;code&gt;t_list.c&lt;/code&gt;, &lt;code&gt;t_set.c&lt;/code&gt;, &lt;code&gt;t_string.c&lt;/code&gt;, &lt;code&gt;t_zset.c&lt;/code&gt; and &lt;code&gt;t_stream.c&lt;/code&gt; contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client command implementations for these data types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ae.c&lt;/code&gt; implements the Redis event loop, it&#39;s a self contained library which is simple to read and understand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sds.c&lt;/code&gt; is the Redis string library, check &lt;a href=&#34;https://github.com/antirez/sds&#34;&gt;https://github.com/antirez/sds&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;anet.c&lt;/code&gt; is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dict.c&lt;/code&gt; is an implementation of a non-blocking hash table which rehashes incrementally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cluster.c&lt;/code&gt; implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read &lt;code&gt;cluster.c&lt;/code&gt; make sure to read the &lt;a href=&#34;https://redis.io/topics/cluster-spec&#34;&gt;Redis Cluster specification&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Anatomy of a Redis command&lt;/h2&gt; &#xA;&lt;p&gt;All the Redis commands are defined in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;void foobarCommand(client *c) {&#xA;    printf(&#34;%s&#34;,c-&amp;gt;argv[1]-&amp;gt;ptr); /* Do something with the argument. */&#xA;    addReply(c,shared.ok); /* Reply something to the client. */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command is then referenced inside &lt;code&gt;server.c&lt;/code&gt; in the command table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;foobar&#34;,foobarCommand,2,&#34;rtF&#34;,0,NULL,0,0,0,0,0},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example &lt;code&gt;2&lt;/code&gt; is the number of arguments the command takes, while &lt;code&gt;&#34;rtF&#34;&lt;/code&gt; are the command flags, as documented in the command table top comment inside &lt;code&gt;server.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the command operates in some way, it returns a reply to the client, usually using &lt;code&gt;addReply()&lt;/code&gt; or a similar function defined inside &lt;code&gt;networking.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are tons of command implementations inside the Redis source code that can serve as examples of actual commands implementations. Writing a few toy commands can be a good exercise to get familiar with the code base.&lt;/p&gt; &#xA;&lt;p&gt;There are also many other files not described here, but it is useless to cover everything. We just want to help you with the first steps. Eventually you&#39;ll find your way inside the Redis code base :-)&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt;</summary>
  </entry>
</feed>