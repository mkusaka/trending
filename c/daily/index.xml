<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-01T01:29:43Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wolfi-dev/os</title>
    <updated>2024-06-01T01:29:43Z</updated>
    <id>tag:github.com,2024-06-01:/wolfi-dev/os</id>
    <link href="https://github.com/wolfi-dev/os" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main package repository for production Wolfi images&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/wolfi-dev/.github/raw/main/profile/wolfi-logo-dark-mode.svg#gh-dark-mode-only&#34; alt=&#34;wolfi logo&#34;&gt; &lt;img src=&#34;https://github.com/wolfi-dev/.github/raw/main/profile/wolfi-logo-light-mode.svg#gh-light-mode-only&#34; alt=&#34;wolfi logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Wolfi&lt;/h1&gt; &#xA;&lt;p&gt;This is the main package repository for the Wolfi project.&lt;/p&gt; &#xA;&lt;p&gt;Named after the &lt;a href=&#34;https://en.wikipedia.org/wiki/Octopus_wolfi&#34;&gt;smallest octopus&lt;/a&gt;, &lt;a href=&#34;https://wolfi.dev&#34;&gt;Wolfi&lt;/a&gt; is a lightweight GNU software distribution which is designed around minimalism, making it well-suited for containerized environments built with &lt;a href=&#34;https://github.com/chainguard-dev/apko&#34;&gt;apko&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is built using &lt;a href=&#34;https://github.com/chainguard-dev/melange&#34;&gt;melange&lt;/a&gt;, and is sponsored by &lt;a href=&#34;https://chainguard.dev/&#34;&gt;Chainguard&lt;/a&gt;, which uses it to provide &lt;a href=&#34;https://chainguard.dev/chainguard-images&#34;&gt;lightweight GNU/Linux runtime images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Wolfi APK package repository is located at &lt;a href=&#34;https://packages.wolfi.dev/os&#34;&gt;https://packages.wolfi.dev/os&lt;/a&gt; and the signing public key is at &lt;a href=&#34;https://packages.wolfi.dev/os/wolfi-signing.rsa.pub&#34;&gt;https://packages.wolfi.dev/os/wolfi-signing.rsa.pub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;A full guide is available on the &lt;a href=&#34;https://github.com/wolfi-dev&#34;&gt;org page&lt;/a&gt;, but the quickest way to try out Wolfi is with the &lt;a href=&#34;https://github.com/chainguard-images/images/tree/main/images/wolfi-base&#34;&gt;wolfi-base image&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it cgr.dev/chainguard/wolfi-base&#xA;52aace776b20:/# uname -a&#xA;Linux 52aace776b20 5.15.49-linuxkit-pr #1 SMP PREEMPT Thu May 25 07:27:39 UTC 2023 aarch64 Linux&#xA;52aace776b20:/# cat /etc/os-release&#xA;ID=wolfi&#xA;NAME=&#34;Wolfi&#34;&#xA;PRETTY_NAME=&#34;Wolfi&#34;&#xA;VERSION_ID=&#34;20230201&#34;&#xA;HOME_URL=&#34;https://wolfi.dev&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mixing packages with other distributions&lt;/h2&gt; &#xA;&lt;p&gt;Mixing packages with other distributions is not supported and can create security problems. Although both Wolfi and Alpine use the apk package manager, packages are not compatible with each other.&lt;/p&gt; &#xA;&lt;h2&gt;If Wolfi is missing a package you require&lt;/h2&gt; &#xA;&lt;p&gt;Wolfi is not currently intended to be a general purpose desktop operating system. Our priority is to provide packages that enable containerized and embedded system workflows. Please keep this in mind when proposing adding packages to Wolfi. Also note that some packages may not be appropriately licensed for inclusion. FSF or OSI approved &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;licenses&lt;/a&gt; are ideal.&lt;/p&gt; &#xA;&lt;p&gt;Wolfi also aims to keep its package set as up-to-date with security patches as possible. It is a requirement that any package/version contributed to Wolfi has an actively maintained upstream.&lt;/p&gt; &#xA;&lt;p&gt;To request inclusion of a package into Wolfi please use our &lt;a href=&#34;https://wolfi.dev/os/issues/new/choose&#34;&gt;New Package Request Template&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>greenplum-db/gpdb-archive</title>
    <updated>2024-06-01T01:29:43Z</updated>
    <id>tag:github.com,2024-06-01:/greenplum-db/gpdb-archive</id>
    <link href="https://github.com/greenplum-db/gpdb-archive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Greenplum Database - Massively Parallel PostgreSQL for Analytics. An open-source massively parallel data platform for analytics, machine learning and AI.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Concourse Pipeline&lt;/strong&gt; &lt;a href=&#34;https://prod.ci.gpdb.pivotal.io/teams/main/pipelines/gpdb_main&#34;&gt;&lt;img src=&#34;https://prod.ci.gpdb.pivotal.io/api/v1/teams/main/pipelines/gpdb_main/badge&#34; alt=&#34;Concourse Build Status&#34;&gt;&lt;/a&gt; | &lt;strong&gt;Travis Build&lt;/strong&gt; &lt;a href=&#34;https://travis-ci.org/greenplum-db/gpdb&#34;&gt;&lt;img src=&#34;https://travis-ci.org/greenplum-db/gpdb.svg?branch=main&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/logo-greenplum.svg?sanitize=true&#34; alt=&#34;Greenplum&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Greenplum Database (GPDB) is an advanced, fully featured, open source data warehouse, based on PostgreSQL. It provides powerful and rapid analytics on petabyte scale data volumes. Uniquely geared toward big data analytics, Greenplum Database is powered by the worldâ€™s most advanced cost-based query optimizer delivering high analytical query performance on large data volumes.&lt;/p&gt; &#xA;&lt;p&gt;The Greenplum project is released under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2 license&lt;/a&gt;. We want to thank all our past and present community contributors and are really interested in all new potential contributions. For the Greenplum Database community no contribution is too small, we encourage all types of contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;A Greenplum cluster consists of a &lt;strong&gt;coordinator&lt;/strong&gt; server, and multiple &lt;strong&gt;segment&lt;/strong&gt; servers. All user data resides in the segments, the coordinator contains only metadata. The coordinator server, and all the segments, share the same schema.&lt;/p&gt; &#xA;&lt;p&gt;Users always connect to the coordinator server, which divides up the query into fragments that are executed in the segments, and collects the results.&lt;/p&gt; &#xA;&lt;p&gt;More information can be found on the &lt;a href=&#34;https://greenplum.org/&#34;&gt;project website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building Greenplum Database with GPORCA&lt;/h2&gt; &#xA;&lt;p&gt;GPORCA is a cost-based optimizer which is used by Greenplum Database in conjunction with the PostgreSQL planner. It is also known as just ORCA, and Pivotal Optimizer. The code for GPORCA resides src/backend/gporca. It is built automatically by default.&lt;/p&gt; &#xA;&lt;h3&gt;Installing dependencies (for macOS developers)&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/README.macOS.md&#34;&gt;these macOS steps&lt;/a&gt; for getting your system ready for GPDB&lt;/p&gt; &#xA;&lt;h3&gt;Installing dependencies (for Linux developers)&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/README.Linux.md&#34;&gt;appropriate linux steps&lt;/a&gt; for getting your system ready for GPDB&lt;/p&gt; &#xA;&lt;h3&gt;Build the database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Initialize and update submodules in the repository&#xA;git submodule update --init&#xA;&#xA;# Configure build environment to install at /usr/local/gpdb&#xA;./configure --with-perl --with-python --with-libxml --with-gssapi --prefix=/usr/local/gpdb&#xA;&#xA;# Compile and install&#xA;make -j8&#xA;make -j8 install&#xA;&#xA;# Bring in greenplum environment into your running shell&#xA;source /usr/local/gpdb/greenplum_path.sh&#xA;&#xA;# Start demo cluster&#xA;make create-demo-cluster&#xA;# (gpdemo-env.sh contains __PGPORT__ and __COORDINATOR_DATA_DIRECTORY__ values)&#xA;source gpAux/gpdemo/gpdemo-env.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The directory, the TCP ports, the number of segments, and the existence of standbys for segments and coordinator for the demo cluster can be changed on the fly. Instead of &lt;code&gt;make create-demo-cluster&lt;/code&gt;, consider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DATADIRS=/tmp/gpdb-cluster PORT_BASE=5555 NUM_PRIMARY_MIRROR_PAIRS=1 WITH_MIRRORS=false make create-demo-cluster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The TCP port for the regression test can be changed on the fly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PGPORT=5555 make installcheck-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To turn GPORCA off and use Postgres planner for query optimization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set optimizer=off;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to clean all generated files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default regression tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;make installcheck-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The top-level target &lt;strong&gt;installcheck-world&lt;/strong&gt; will run all regression tests in GPDB against the running cluster. For testing individual parts, the respective targets can be run separately.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The PostgreSQL &lt;strong&gt;check&lt;/strong&gt; target does not work. Setting up a Greenplum cluster is more complicated than a single-node PostgreSQL installation, and no-one&#39;s done the work to have &lt;strong&gt;make check&lt;/strong&gt; create a cluster. Create a cluster manually or use gpAux/gpdemo/ (example below) and run the toplevel &lt;strong&gt;make installcheck-world&lt;/strong&gt; against that. Patches are welcome!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The PostgreSQL &lt;strong&gt;installcheck&lt;/strong&gt; target does not work either, because some tests are known to fail with Greenplum. The &lt;strong&gt;installcheck-good&lt;/strong&gt; schedule in &lt;strong&gt;src/test/regress&lt;/strong&gt; excludes those tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When adding a new test, please add it to one of the GPDB-specific tests, in greenplum_schedule, rather than the PostgreSQL tests inherited from the upstream. We try to keep the upstream tests identical to the upstream versions, to make merging with newer PostgreSQL releases easier.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternative Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Building GPDB without GPORCA&lt;/h3&gt; &#xA;&lt;p&gt;Currently, GPDB is built with GPORCA by default. If you want to build GPDB without GPORCA, configure requires &lt;code&gt;--disable-orca&lt;/code&gt; flag to be set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clean environment&#xA;make distclean&#xA;&#xA;# Configure build environment to install at /usr/local/gpdb&#xA;./configure --disable-orca --with-perl --with-python --with-libxml --prefix=/usr/local/gpdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building GPDB with Python3 enabled&lt;/h3&gt; &#xA;&lt;p&gt;GPDB supports Python3 with plpython3u UDF&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/src/pl/plpython/README.md&#34;&gt;how to enable Python3&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Building GPDB client tools on Windows&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/README.Windows.md&#34;&gt;Building GPDB client tools on Windows&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Development with Vagrant&lt;/h2&gt; &#xA;&lt;p&gt;There is a Vagrant-based &lt;a href=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/src/tools/vagrant/README.md&#34;&gt;quickstart guide for developers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code layout&lt;/h2&gt; &#xA;&lt;p&gt;The directory layout of the repository follows the same general layout as upstream PostgreSQL. There are changes compared to PostgreSQL throughout the codebase, but a few larger additions worth noting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gpMgmt/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains Greenplum-specific command-line tools for managing the cluster. Scripts like gpinit, gpstart, gpstop live here. They are mostly written in Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gpAux/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains Greenplum-specific release management scripts, and vendored dependencies. Some additional directories are submodules and will be made available over time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gpcontrib/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Much like the PostgreSQL contrib/ directory, this directory contains extensions such as gpfdist which are Greenplum-specific.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;doc/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In PostgreSQL, the user manual lives here. In Greenplum, the user manual is maintained separately and only the reference pages used to build man pages are here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gpdb-doc/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains the Greenplum documentation in DITA XML format. Refer to &lt;code&gt;gpdb-doc/README.md&lt;/code&gt; for information on how to build, and work with the documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ci/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains configuration files for the GPDB continuous integration system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;src/backend/cdb/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains larger Greenplum-specific backend modules. For example, communication between segments, turning plans into parallelizable plans, mirroring, distributed transaction and snapshot management, etc. &lt;strong&gt;cdb&lt;/strong&gt; stands for &lt;strong&gt;Cluster Database&lt;/strong&gt; - it was a workname used in the early days. That name is no longer used, but the &lt;strong&gt;cdb&lt;/strong&gt; prefix remains.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;src/backend/gpopt/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains the so-called &lt;strong&gt;translator&lt;/strong&gt; library, for using the GPORCA optimizer with Greenplum. The translator library is written in C++ code, and contains glue code for translating plans and queries between the DXL format used by GPORCA, and the PostgreSQL internal representation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;src/backend/gporca/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Contains the GPORCA optimizer code and tests. This is written in C++. See &lt;a href=&#34;https://raw.githubusercontent.com/greenplum-db/gpdb-archive/main/src/backend/gporca/README.md&#34;&gt;README.md&lt;/a&gt; for more information and how to unit-test GPORCA.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;src/backend/fts/&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;FTS is a process that runs in the coordinator node, and periodically polls the segments to maintain the status of each segment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Greenplum is maintained by a core team of developers with commit rights to the &lt;a href=&#34;https://github.com/greenplum-db/gpdb&#34;&gt;main gpdb repository&lt;/a&gt; on GitHub. At the same time, we are very eager to receive contributions from anybody in the wider Greenplum community. This section covers all you need to know if you want to see your code or documentation changes be added to Greenplum and appear in the future releases.&lt;/p&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;p&gt;Greenplum is developed on GitHub, and anybody wishing to contribute to it will have to &lt;a href=&#34;https://github.com/signup/free&#34;&gt;have a GitHub account&lt;/a&gt; and be familiar with &lt;a href=&#34;https://wiki.postgresql.org/wiki/Working_with_Git&#34;&gt;Git tools and workflow&lt;/a&gt;. It is also recommend that you follow the &lt;a href=&#34;https://greenplum.org/community/&#34;&gt;developer&#39;s mailing list&lt;/a&gt; since some of the contributions may generate more detailed discussions there.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your GitHub account, &lt;a href=&#34;https://github.com/greenplum-db/gpdb/fork&#34;&gt;fork&lt;/a&gt; this repository so that you can have your private copy to start hacking on and to use as source of pull requests.&lt;/p&gt; &#xA;&lt;p&gt;Anybody contributing to Greenplum has to be covered by either the Corporate or the Individual Contributor License Agreement. If you have not previously done so, please fill out and submit the &lt;a href=&#34;https://cla.pivotal.io/sign/greenplum&#34;&gt;Contributor License Agreement&lt;/a&gt;. Note that we do allow for really trivial changes to be contributed without a CLA if they fall under the rubric of &lt;a href=&#34;https://cla.pivotal.io/about#obvious-fixes&#34;&gt;obvious fixes&lt;/a&gt;. However, since our GitHub workflow checks for CLA by default you may find it easier to submit one instead of claiming an &#34;obvious fix&#34; exception.&lt;/p&gt; &#xA;&lt;h3&gt;Licensing of Greenplum contributions&lt;/h3&gt; &#xA;&lt;p&gt;If the contribution you&#39;re submitting is original work, you can assume that Pivotal will release it as part of an overall Greenplum release available to the downstream consumers under the Apache License, Version 2.0. However, in addition to that, Pivotal may also decide to release it under a different license (such as &lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;PostgreSQL License&lt;/a&gt; to the upstream consumers that require it. A typical example here would be Pivotal upstreaming your contribution back to PostgreSQL community (which can be done either verbatim or your contribution being upstreamed as part of the larger changeset).&lt;/p&gt; &#xA;&lt;p&gt;If the contribution you&#39;re submitting is NOT original work you have to indicate the name of the license and also make sure that it is similar in terms to the Apache License 2.0. Apache Software Foundation maintains a list of these licenses under &lt;a href=&#34;https://www.apache.org/legal/resolved.html#category-a&#34;&gt;Category A&lt;/a&gt;. In addition to that, you may be required to make proper attribution in the &lt;a href=&#34;https://github.com/greenplum-db/gpdb/raw/main/NOTICE&#34;&gt;NOTICE file&lt;/a&gt; similar to &lt;a href=&#34;https://github.com/greenplum-db/gpdb/raw/main/NOTICE#L278&#34;&gt;these examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, keep in mind that it is NEVER a good idea to remove licensing headers from the work that is not your original one. Even if you are using parts of the file that originally had a licensing header at the top you should err on the side of preserving it. As always, if you are not quite sure about the licensing implications of your contributions, feel free to reach out to us on the developer mailing list.&lt;/p&gt; &#xA;&lt;h3&gt;Coding guidelines&lt;/h3&gt; &#xA;&lt;p&gt;Your chances of getting feedback and seeing your code merged into the project greatly depend on how granular your changes are. If you happen to have a bigger change in mind, we highly recommend engaging on the developer&#39;s mailing list first and sharing your proposal with us before you spend a lot of time writing code. Even when your proposal gets validated by the community, we still recommend doing the actual work as a series of small, self-contained commits. This makes the reviewer&#39;s job much easier and increases the timeliness of feedback.&lt;/p&gt; &#xA;&lt;p&gt;When it comes to C and C++ parts of Greenplum, we try to follow &lt;a href=&#34;https://www.postgresql.org/docs/devel/source.html&#34;&gt;PostgreSQL Coding Conventions&lt;/a&gt;. In addition to that we require that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Python code passes &lt;a href=&#34;https://www.pylint.org/&#34;&gt;Pylint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All Go code is formatted according to &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend using &lt;code&gt;git diff --color&lt;/code&gt; when reviewing your changes so that you don&#39;t have any spurious whitespace issues in the code that you submit.&lt;/p&gt; &#xA;&lt;p&gt;All new functionality that is contributed to Greenplum should be covered by regression tests that are contributed alongside it. If you are uncertain on how to test or document your work, please raise the question on the gpdb-dev mailing list and the developer community will do its best to help you.&lt;/p&gt; &#xA;&lt;p&gt;At the very minimum you should always be running &lt;code&gt;make installcheck-world&lt;/code&gt; to make sure that you&#39;re not breaking anything.&lt;/p&gt; &#xA;&lt;h3&gt;Changes applicable to upstream PostgreSQL&lt;/h3&gt; &#xA;&lt;p&gt;If the change you&#39;re working on touches functionality that is common between PostgreSQL and Greenplum, you may be asked to forward-port it to PostgreSQL. This is not only so that we keep reducing the delta between the two projects, but also so that any change that is relevant to PostgreSQL can benefit from a much broader review of the upstream PostgreSQL community. In general, it is a good idea to keep both code bases handy so you can be sure whether your changes may need to be forward-ported.&lt;/p&gt; &#xA;&lt;h3&gt;Submission timing&lt;/h3&gt; &#xA;&lt;p&gt;To improve the odds of the right discussion of your patch or idea happening, pay attention to what the community work cycle is. For example, if you send in a brand new idea in the beta phase of a release, we may defer review or target its inclusion for a later version. Feel free to ask on the mailing list to learn more about the Greenplum release policy and timing.&lt;/p&gt; &#xA;&lt;h3&gt;Patch submission&lt;/h3&gt; &#xA;&lt;p&gt;Once you are ready to share your work with the Greenplum core team and the rest of the Greenplum community, you should push all the commits to a branch in your own repository forked from the official Greenplum and &lt;a href=&#34;https://help.github.com/articles/about-pull-requests/&#34;&gt;send us a pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome submissions which are work in-progress in order to get feedback early in the development process. When opening the pull request, select &#34;Draft&#34; in the dropdown menu when creating the PR to clearly mark the intent of the pull request. Prefixing the title with &#34;WIP:&#34; is also good practice.&lt;/p&gt; &#xA;&lt;p&gt;All new features should be submitted against the main branch. Bugfixes should too be submitted against main unless they only exist in a supported back-branch. If the bug exists in both main and back-branches, explain this in the PR description.&lt;/p&gt; &#xA;&lt;h3&gt;Validation checks and CI&lt;/h3&gt; &#xA;&lt;p&gt;Once you submit your pull request, you will immediately see a number of validation checks performed by our automated CI pipelines. There also will be a CLA check telling you whether your CLA was recognized. If any of these checks fails, you will need to update your pull request to take care of the issue. Pull requests with failed validation checks are very unlikely to receive any further peer review from the community members.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that the most common reason for a failed CLA check is a mismatch between an email on file and an email recorded in the commits submitted as part of the pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you cannot figure out why a certain validation check failed, feel free to ask on the developer&#39;s mailing list, but make sure to include a direct link to a pull request in your email.&lt;/p&gt; &#xA;&lt;h3&gt;Patch review&lt;/h3&gt; &#xA;&lt;p&gt;A submitted pull request with passing validation checks is assumed to be available for peer review. Peer review is the process that ensures that contributions to Greenplum are of high quality and align well with the road map and community expectations. Every member of the Greenplum community is encouraged to review pull requests and provide feedback. Since you don&#39;t have to be a core team member to be able to do that, we recommend following a stream of pull reviews to anybody who&#39;s interested in becoming a long-term contributor to Greenplum. As &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus&#39;s_Law&#34;&gt;Linus would say&lt;/a&gt; &#34;given enough eyeballs, all bugs are shallow&#34;.&lt;/p&gt; &#xA;&lt;p&gt;One outcome of the peer review could be a consensus that you need to modify your pull request in certain ways. GitHub allows you to push additional commits into a branch from which a pull request was sent. Those additional commits will be then visible to all of the reviewers.&lt;/p&gt; &#xA;&lt;p&gt;A peer review converges when it receives at least one +1 and no -1s votes from the participants. At that point you should expect one of the core team members to pull your changes into the project.&lt;/p&gt; &#xA;&lt;p&gt;Greenplum prides itself on being a collaborative, consensus-driven environment. We do not believe in vetoes and any -1 vote casted as part of the peer review has to have a detailed technical explanation of what&#39;s wrong with the change. Should a strong disagreement arise it may be advisable to take the matter onto the mailing list since it allows for a more natural flow of the conversation.&lt;/p&gt; &#xA;&lt;p&gt;At any time during the patch review, you may experience delays based on the availability of reviewers and core team members. Please be patient. That being said, don&#39;t get discouraged either. If you&#39;re not getting expected feedback for a few days add a comment asking for updates on the pull request itself or send an email to the mailing list.&lt;/p&gt; &#xA;&lt;h3&gt;Direct commits to the repository&lt;/h3&gt; &#xA;&lt;p&gt;On occasion you will see core team members committing directly to the repository without going through the pull request workflow. This is reserved for small changes only and the rule of thumb we use is this: if the change touches any functionality that may result in a test failure, then it has to go through a pull request workflow. If, on the other hand, the change is in the non-functional part of the code base (such as fixing a typo inside of a comment block) core team members can decide to just commit to the repository directly.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For Greenplum Database documentation, please check the &lt;a href=&#34;http://docs.greenplum.org/&#34;&gt;online documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For further information beyond the scope of this README, please see &lt;a href=&#34;https://github.com/greenplum-db/gpdb/wiki&#34;&gt;our wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>