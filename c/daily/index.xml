<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-22T01:31:19Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Yetiowner/Increasing-code-complexity</title>
    <updated>2022-10-22T01:31:19Z</updated>
    <id>tag:github.com,2022-10-22:/Yetiowner/Increasing-code-complexity</id>
    <link href="https://github.com/Yetiowner/Increasing-code-complexity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Every day, I commit a new and more complicated version of some simple code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Every day, I commit a new and more complicated version of some simple code.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/y6iuto/lets_do_it/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/y6iuto/lets_do_it/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Day 1: Created simple code that prints &#34;Hello world!&#34; 10 times. See &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/y6iuto/lets_do_it/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/y6iuto/lets_do_it/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Day 2: Replaced the for loop with &lt;code&gt;for i in (&#34;HelloWorld&#34;):&lt;/code&gt; See &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/y7ewre/see_comments_for_github_repo_that_includes_all/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/y7ewre/see_comments_for_github_repo_that_includes_all/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Day 3: Replaced the hard-coded &#34;Hello World!&#34; with the constant HW See &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/y8b170/see_comments_for_github_repo_that_includes_all/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/y8b170/see_comments_for_github_repo_that_includes_all/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Day 4: Converted part of code to C for faster runtime See &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/y97azd/see_comments_for_github_repo_that_includes_all/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/y97azd/see_comments_for_github_repo_that_includes_all/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Day 5: Created string builder class See &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/ya1o2w/see_comments_for_github_repo_that_includes_all/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/ya1o2w/see_comments_for_github_repo_that_includes_all/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure to go to &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/y97azd/see_comments_for_github_repo_that_includes_all/&#34;&gt;https://www.reddit.com/r/ProgrammerHumor/comments/y97azd/see_comments_for_github_repo_that_includes_all/&lt;/a&gt; to vote on the next change!&lt;/p&gt; &#xA;&lt;p&gt;DO NOT VOTE FOR CHANGES USING ISSUES OR PULL REQUESTS (Except for the rust and unit test pull request, you can stay)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kristinpaget/fivewords</title>
    <updated>2022-10-22T01:31:19Z</updated>
    <id>tag:github.com,2022-10-22:/kristinpaget/fivewords</id>
    <link href="https://github.com/kristinpaget/fivewords" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Search algorithm to find sets of 5x 5-letter words using 25 different letters&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fivewords&lt;/h1&gt; &#xA;&lt;p&gt;Before you go any further, watch &lt;a href=&#34;https://www.youtube.com/watch?v=_-AfhLQfb6w&#34;&gt;this excellent video&lt;/a&gt; from Matt Parker and (of course!) subscribe to his channel.&lt;/p&gt; &#xA;&lt;p&gt;This implementation builds on the work of &lt;a href=&#34;https://gitlab.com/bpaassen/five_clique&#34;&gt;Benjamin Paassen&lt;/a&gt; and &lt;a href=&#34;https://github.com/neilcoffey/FunStuff/tree/main/WordleFiveWordFinder&#34;&gt;Neil Coffey&lt;/a&gt; for (at the time of writing**) the fastest implementation of a 5-words-using-25-letters search. Its improvements include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in C using an optimized bruteforce algorithm (similar to Benjamin&#39;s work) with custom-written list comparison routines&lt;/li&gt; &#xA; &lt;li&gt;Aggressive pruning of branches during an O(N^5) search, using Neil&#39;s trick of recalculating the dictionary for every 2-word pair (to reduce the number of comparisons)&lt;/li&gt; &#xA; &lt;li&gt;Bitfield-based set comparisons (also used by Neil)&lt;/li&gt; &#xA; &lt;li&gt;Extremely wasteful of memory so as to avoid needing to convert between sets&lt;/li&gt; &#xA; &lt;li&gt;Multithreading during the search phase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/dwyl/english-words/blob/master/words_alpha.txt&#xA;gcc -O3 -Wall -Werror -o fivewords fivewords.c&#xA;time ./fivewords words_alpha.txt &amp;lt;number of threads you can run&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On my machine (i9-11900H) using 16 threads it finds all 538 solutions in 1.058 seconds - over 2.5 million times faster than Matt&#39;s code :)&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s still some room for improvement here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There&#39;s a lot of repeated pointer dereferences in the fast loops. Caching variables locally could trade off yet more stack space for compute time.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;ve had lots of fun with &lt;a href=&#34;https://gcc.gnu.org/projects/tree-ssa/vectorization.html&#34;&gt;auto-vectorization&lt;/a&gt; before, it could probably be applied here if you&#39;re careful.&lt;/li&gt; &#xA; &lt;li&gt;The initial search for neighbours isn&#39;t parallelized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**No longer the fastest by quite a wide margin. See &lt;a href=&#34;https://docs.google.com/spreadsheets/d/11sUBkPSEhbGx2K8ah6WbGV62P8ii5l5vVeMpkzk17PI/edit#gid=0&#34;&gt;this Google sheet&lt;/a&gt; from Benjamin Paassen for the list, and especially big respect to all those with faster code!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JuliaPoo/Artfuscator</title>
    <updated>2022-10-22T01:31:19Z</updated>
    <id>tag:github.com,2022-10-22:/JuliaPoo/Artfuscator</id>
    <link href="https://github.com/JuliaPoo/Artfuscator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C compiler targeting an artistically pleasing nightmare for reverse engineers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Artfuscator&lt;/h1&gt; &#xA;&lt;p&gt;A better approach towards psychological warfare against reverse engineers.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Artfuscator is a cursed C compiler built on the work of &lt;a href=&#34;https://github.com/shinh/elvm&#34;&gt;ELVM&lt;/a&gt;. It translates C code into a single controlflow graph that takes the form of any image of choice:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JuliaPoo/Artfuscator/main/rsrc/overview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wait a minute, didn&#39;t &lt;a href=&#34;https://github.com/xoreaxeaxeax/REpsych&#34;&gt;REPsych&lt;/a&gt; already do this?&lt;/h2&gt; &#xA;&lt;p&gt;Yes and no.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xoreaxeaxeax/REpsych&#34;&gt;REPsych&lt;/a&gt; generates a controlflow graph that looks like an image and personally I&#39;ve deemed such a sight traumatic to behold. However, there is a critical flaw in REPsych&#39;s approach: The controlflow graph has no functionality! This means that once an engineer takes a closer look, they&#39;ll realise that their fear was a bluff: They don&#39;t have to actually reverse it after all!&lt;/p&gt; &#xA;&lt;p&gt;Building on the ideas pioneered by REPsych, Artfuscator gives credence to such a fear: The artistic controlflow graph implements the functionality of the program. Not only that, the graph is THE ONLY GRAPH that implements the entire function of the program! The only way to reverse the program is to dive deep into the individual pixels making up the image, ensuring maximum trauma inflicted.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;So a fair bit of warning, I didn&#39;t bother to package this project properly. The MIT License does not hold me liable to any damage caused from using this project.&lt;/p&gt; &#xA;&lt;h3&gt;Setting up&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone this repo&#xA;git clone https://github.com/JuliaPoo/Artfuscator&#xA;# Clone all the submodules&#xA;cd Artfuscator&#xA;git submodule update --recursive --init --remote&#xA;&#xA;# Build elvm with my bespoke backend&#xA;cd elvm&#xA;make art&#xA;cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You would also need Python3 and nasm installed.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Create your C source file in the project&#39;s root directory (e.g. &lt;code&gt;hewwo.c&lt;/code&gt;), and in the same directory, run &lt;code&gt;make &amp;lt;target&amp;gt; IMG=&amp;lt;filename&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;make hewwo IMG=etc/niko-grey.png&lt;/code&gt;). The final binary is compiled in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;IMG&lt;/code&gt; must point to a single-channel greyscale image (mode L).&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;hewwo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JuliaPoo/Artfuscator/main/rsrc/niko.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;lisp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JuliaPoo/Artfuscator/main/rsrc/lisp-uwu.JPG&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JuliaPoo/Artfuscator/main/rsrc/lisp.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/xoreaxeaxeax&#34;&gt;Christopher Domas&lt;/a&gt; for the original idea and work on REPsych&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shinh/elvm&#34;&gt;Shinh&lt;/a&gt; for ELVM, which is an awesome project&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>