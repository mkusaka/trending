<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-09T01:30:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cracked5pider/LdrLibraryEx</title>
    <updated>2023-11-09T01:30:22Z</updated>
    <id>tag:github.com,2023-11-09:/Cracked5pider/LdrLibraryEx</id>
    <link href="https://github.com/Cracked5pider/LdrLibraryEx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small x64 library to load dll&#39;s into memory.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LdrLibraryEx&lt;/h1&gt; &#xA;&lt;p&gt;A small x64 library to load dll&#39;s into memory.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;low dependencies &amp;amp; function use (only ntdll.dll used)&lt;/li&gt; &#xA; &lt;li&gt;position independent code&lt;/li&gt; &#xA; &lt;li&gt;lightweight and minimal&lt;/li&gt; &#xA; &lt;li&gt;easy to use&lt;/li&gt; &#xA; &lt;li&gt;load modules from memory&lt;/li&gt; &#xA; &lt;li&gt;load modules from disk&lt;/li&gt; &#xA; &lt;li&gt;api sets support&lt;/li&gt; &#xA; &lt;li&gt;bypass image load callbacks (using private memory)&lt;/li&gt; &#xA; &lt;li&gt;support for images with delayed import, tls, seh, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;h4&gt;Library Flags&lt;/h4&gt; &#xA;&lt;p&gt;Flags can be combined&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LIBRARYEX_NONE&lt;/code&gt;: Map module from disk into memory and execute entrypoint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LIBRARYEX_BYPASS_LOAD_CALLBACK&lt;/code&gt;: Map module from disk into private memory (unbacked) which bypasses image load callbacks (&lt;code&gt;PsSetLoadImageNotifyRoutine&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LIBRARYEX_NO_ENTRY&lt;/code&gt;: Do not execute the entrypoint of the module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LIBRARYEX_BUFFER&lt;/code&gt;: Map the module from memory instead from disk.&lt;/p&gt; &#xA;&lt;h4&gt;Function: &lt;code&gt;LdrLibrary&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Easy to use function to load a library into memory. The first param, based on what flags has been specified, can be either a wide string module name to load or memory address where the PE is located at.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/*!&#xA; * @brief&#xA; *  load library into memory&#xA; *&#xA; * @param Buffer&#xA; *  buffer context to load library&#xA; *  either a wide string or a buffer pointer &#xA; *  the to PE file to map (LIBRARYEX_BUFFER)&#xA; *&#xA; * @param Library&#xA; *  loaded library pointer&#xA; *&#xA; * @param Flags&#xA; *  flags&#xA; *&#xA; * @return&#xA; *  status of function&#xA; */&#xA;NTSTATUS LdrLibrary(&#xA;    _In_  PVOID  Buffer,&#xA;    _Out_ PVOID* Library,&#xA;    _In_  ULONG  Flags&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows how to load a module from disk (from the System32 path):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;PVOID Module = { 0 };&#xA;ULONG Flags  = { 0 };&#xA;&#xA;//&#xA;// mapping flags to be used by the library&#xA;//&#xA;Flags = LIBRARYEX_NONE; &#xA;&#xA;//&#xA;// map file into memory&#xA;//&#xA;if ( ! NT_SUCCESS( Status = LdrLibrary( L&#34;advapi32.dll&#34;, &amp;amp;Module, Flags ) ) ) {&#xA;    printf( &#34;[-] LdrLibraryEx Failed: %p\n&#34;, Status );&#xA;    return; &#xA;}&#xA;&#xA;printf( &#34;[*] Module @ %p\n&#34;, Module );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This examples shows how to load a module from a memory buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;PVOID Module = { 0 };&#xA;ULONG Flags  = { 0 };&#xA;&#xA;//&#xA;// mapping flags to be used by the library&#xA;//&#xA;Flags = LIBRARYEX_NONE  | &#xA;        LIBRARYEX_BUFFER; &#xA;&#xA;//&#xA;// read file on disk into memory&#xA;//&#xA;if ( ! ( Image = ReadFileBuffer( L&#34;C:\\Windows\\System32\\advapi32.dll&#34;, NULL ) ) ) {&#xA;    puts( &#34;[-] ReadFileBuffer Failed&#34; );&#xA;    return;&#xA;}&#xA;&#xA;//&#xA;// map file into memory&#xA;//&#xA;if ( ! NT_SUCCESS( Status = LdrLibrary( Image, &amp;amp;Module, Flags ) ) ) {&#xA;    printf( &#34;[-] LdrLibraryEx Failed: %p\n&#34;, Status );&#xA;    return;&#xA;}&#xA;&#xA;printf( &#34;[*] Module @ %p\n&#34;, Module );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to load modules based on their api set (win10+ support only):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//&#xA;// map file into memory&#xA;//&#xA;if ( ! NT_SUCCESS( Status = LdrLibrary( L&#34;api-ms-win-base-util-l1-1-0.dll&#34;, &amp;amp;Module, Flags ) ) ) {&#xA;    printf( &#34;[-] LdrLibraryEx Failed: %p\n&#34;, Status );&#xA;    return;&#xA;}&#xA;&#xA;printf( &#34;[*] Module @ %p\n&#34;,  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Function: &lt;code&gt;LdrLibraryEx&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;LdrLibraryEx allows to hook certain functions to modify the behaviour of how a library should be mapped into memory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//&#xA;// mapping flags to be used by the library&#xA;// and insert the loaded module into Peb&#xA;//&#xA;Flags = LIBRARYEX_BYPASS_LOAD_CALLBACK |&#xA;        LIBRARYEX_NO_ENTRY;&#xA;&#xA;//&#xA;// init LibraryEx context&#xA;//&#xA;if ( ! NT_SUCCESS( Status = LdrLibraryCtx( &amp;amp;Ctx, Flags ) ) ) {&#xA;    printf( &#34;[-] LdrLibraryCtx Failed: %d\n&#34;, Status );&#xA;    goto END;&#xA;}&#xA;&#xA;//&#xA;// hook function&#xA;//&#xA;Ctx.LdrLoadDll = C_PTR( HookLdrLoadDll );&#xA;&#xA;//&#xA;// map file into memory&#xA;//&#xA;if ( ! NT_SUCCESS( Status = LdrLibraryEx( &amp;amp;Ctx, L&#34;cryptsp.dll&#34;, &amp;amp;Module, Flags ) ) ) {&#xA;    printf( &#34;[-] LdrLibraryEx Failed: %p\n&#34;, Status );&#xA;    return; &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;This codebase is written and optimized for x86_64-mingw and it most likely not going to work and or compile under Visual Studio.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Huge credit goes out to following resources and projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bats3c/DarkLoadLibrary&#34;&gt;DarkLoadLibrary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2021/06/bypassing-image-load-kernel-callbacks/&#34;&gt;MDSec: Bypassing Image loader kernel callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doxygen.reactos.org/d7/d55/ldrapi_8c.html#a7671bda932dbb5096570f431ff83474c&#34;&gt;ReactOS LdrLoadDll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vergiliusproject.com/&#34;&gt;Vergilius Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;this project shouldn&#39;t be used in a real world env or operation. I mainly wrote this to understand and learn more about how windows loader works. I wrote it as a library because I wanted to use this for other type of public and private projects. I achieved my goal. Cya.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ph1p/ikea-led-obegraensad</title>
    <updated>2023-11-09T01:30:22Z</updated>
    <id>tag:github.com,2023-11-09:/ph1p/ikea-led-obegraensad</id>
    <link href="https://github.com/ph1p/ikea-led-obegraensad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESP32/Arduino hack for the ikea OBEGRÃ„NSAD led wall lamp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IKEA OBEGRÃ„NSAD Hack/Mod&lt;/h1&gt; &#xA;&lt;p&gt;Turn your OBEGRÃ„NSAD LED Wall Lamp into a live drawing canvas&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ‘‰ This software is in an early stage and is my first of its kind. If you have anything to improve, I would be very happy about a PR or an issue :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;âš  Use this code and instructions at your own risk! The device could be damaged! âš &lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15351728/200184222-a590575d-983d-4ab8-a322-c6bcf433d364.gif&#34; alt=&#34;ezgif-3-2019fca7a4&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Persist your drawing&lt;/li&gt; &#xA; &lt;li&gt;Rotate image&lt;/li&gt; &#xA; &lt;li&gt;Live Drawing&lt;/li&gt; &#xA; &lt;li&gt;OTA Update&lt;/li&gt; &#xA; &lt;li&gt;Wifi Control&lt;/li&gt; &#xA; &lt;li&gt;Web-GUI&lt;/li&gt; &#xA; &lt;li&gt;Load an image&lt;/li&gt; &#xA; &lt;li&gt;Switch mode by pressing the button&lt;/li&gt; &#xA; &lt;li&gt;Modes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Game of life&lt;/li&gt; &#xA;   &lt;li&gt;Breakout&lt;/li&gt; &#xA;   &lt;li&gt;Snake&lt;/li&gt; &#xA;   &lt;li&gt;Stars&lt;/li&gt; &#xA;   &lt;li&gt;Lines&lt;/li&gt; &#xA;   &lt;li&gt;Circle&lt;/li&gt; &#xA;   &lt;li&gt;Clock&lt;/li&gt; &#xA;   &lt;li&gt;Weather&lt;/li&gt; &#xA;   &lt;li&gt;Rain&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom Animation with the &#34;Creator&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Control the board&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/15351728/202763445-3275e4e9-d976-4e35-b0cf-9550b8561b4c.mp4&#34;&gt;https://user-images.githubusercontent.com/15351728/202763445-3275e4e9-d976-4e35-b0cf-9550b8561b4c.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can control the lamp with a supplied web GUI. You can get the IP via serial output or you can search it in your router settings.&lt;/p&gt; &#xA;&lt;h1&gt;How to&lt;/h1&gt; &#xA;&lt;p&gt;First of all. This software was written for the ESP32 Dev Board, but it should work with any other Arduino board as well. You just need to remove the WiFi, OTA and web server related code.&lt;/p&gt; &#xA;&lt;p&gt;The ESP32 I used:&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/15351728/200148521-86d0f9e6-2c41-4707-b2d9-8aa24a0e440e.jpg&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;Verified to work with TTGO LoRa32 V2.1 (T3_V1.6.1). Note: On esp8266 per pixel brightness only works when storage and global brightness (analogWrite) are disabled.&lt;/p&gt; &#xA;&lt;h2&gt;Open the lamp&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m sorry to say this, but you&#39;ll have to pry open the back of your Lamp, as IKEA didn&#39;t install regular screws here. I lifted the back with a screwdriver between the screws and pried it open with a second object, but you can also drill out the rivets to avoid breaking the backpanel.&lt;/p&gt; &#xA;&lt;h2&gt;The panels&lt;/h2&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/15351728/200183585-39c1668d-665b-4c12-bcbb-387aec1d3874.JPG&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;After you open the back, you will see 4 identical plates. These are each equipped with 64 Leds in 4 fields. We are only interested in the lowest one. Here you will find 6 connectors at the bottom edge, to which we connect our board. Above is a microcontroller. You have to remove it, because it contains the standard programs.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/86414213/205998862-e9962695-1328-49ea-b546-be592cbad3c2.jpg&#34; width=&#34;90%&#34;&gt; &#xA;&lt;h2&gt;Clone repository and set variables&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open folder with VSCode&lt;/li&gt; &#xA; &lt;li&gt;Install platformIO (&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide&#34;&gt;https://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Set all variables &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Wifi&lt;/li&gt; &#xA;   &lt;li&gt;Upload&lt;/li&gt; &#xA;   &lt;li&gt;Your Pins&lt;/li&gt; &#xA;   &lt;li&gt;Latitude, Longitude, City etc. (&lt;a href=&#34;https://github.com/chubin/wttr.in&#34;&gt;https://github.com/chubin/wttr.in&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Variables can be found inside &lt;code&gt;include/constants.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create &lt;code&gt;include/secrets.h&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#pragma once&#xA;&#xA;#define WIFI_SSID &#34;&#34;&#xA;#define WIFI_PASSWORD &#34;&#34;&#xA;#define WIFI_HOSTNAME &#34;&#34;&#xA;&#xA;#define OTA_USERNAME &#34;&#34;&#xA;#define OTA_PASSWORD &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;also set username and password inside &lt;code&gt;upload.py&lt;/code&gt;, if you want to use OTA Updates.&lt;/p&gt; &#xA;&lt;h3&gt;PINS&lt;/h3&gt; &#xA;&lt;p&gt;Connect them like this and remember to set them in &lt;code&gt;include/constants.h&lt;/code&gt; according to your board.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LCD&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ESP32&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;TTGO LoRa32&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;NodeMCUv2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GND&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;VCC&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5V&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5V&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;VIN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EN (PIN_ENABLE)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;IO22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO16 D0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;IN (PIN_DATA)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;IO23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO13 D7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CLK (PIN_CLOCK)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;IO02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO14 D5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CLA (PIN_LATCH)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;IO15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO0 D3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUTTON one end&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;IO21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GPIO2 D4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BUTTON other end&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/86414213/205999001-6213fc4f-be2f-4305-a17a-44fdc9349069.jpg&#34; width=&#34;60%&#34;&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;src&lt;/code&gt; contains the arduino code.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run it with platform io&lt;/li&gt; &#xA;   &lt;li&gt;You can uncomment the OTA lines in &lt;code&gt;platform.ini&lt;/code&gt; if you want. Replace the IP with your device IP.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;frontend&lt;/code&gt; contains the web code.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;First run &lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set your device IP inside the &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt; &#xA;   &lt;li&gt;Start the server with &lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Build it with &lt;code&gt;npm run build&lt;/code&gt;. This command creates the &lt;code&gt;webgui.cpp&lt;/code&gt; for you.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build frontend using &lt;code&gt;Docker&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;From the root of the repo, run &lt;code&gt;docker compose run node&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Ideas&lt;/h1&gt; &#xA;&lt;p&gt;[] gifs [] animation upload [] use &lt;code&gt;&amp;lt;canvas /&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Breakout game &lt;a href=&#34;https://elektro.turanis.de/html/prj104/index.html&#34;&gt;https://elektro.turanis.de/html/prj104/index.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lone-lang/lone</title>
    <updated>2023-11-09T01:30:22Z</updated>
    <id>tag:github.com,2023-11-09:/lone-lang/lone</id>
    <link href="https://github.com/lone-lang/lone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The standalone Linux Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lone&lt;/h1&gt; &#xA;&lt;p&gt;The standalone Linux Lisp&lt;/p&gt; &#xA;&lt;p&gt;Lone is a freestanding Lisp interpreter designed to run directly on top of the Linux kernel with full support for Linux system calls. It has zero dependencies, not even the C standard library.&lt;/p&gt; &#xA;&lt;p&gt;Currently in the early stages of development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(import (lone) (linux system-call))&#xA;&#xA;(system-call &#39;write 1 &#34;Hello, world!&#34; 13)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Lone is built by a simple GNU Make file. Any of the following commands can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;make lone&#xA;make clean&#xA;make clean lone&#xA;make clean lone CFLAGS=-g&#xA;make clean lone UAPI=/alternative/linux/uapi/headers&#xA;make clean lone TARGET=x86_64 UAPI=/linux/uapi/headers/x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Lone has an automated test suite that exercises language features. Any of the following commands can be used to run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;make clean test&#xA;scripts/test.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;New tests are added by creating directories inside &lt;code&gt;test/&lt;/code&gt;, forming an arbitrary directory tree which determines the test name. Leaf directories contain the test files used to exercise lone.&lt;/p&gt; &#xA;&lt;p&gt;The following files may be present:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arguments&lt;/code&gt; Arguments to be passed, one per line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;environment&lt;/code&gt; Environment variables to be set, one per line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;input&lt;/code&gt; Standard input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;output&lt;/code&gt; Expected standard output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;error&lt;/code&gt; Expected standard error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;status&lt;/code&gt; Expected exit status code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tests are run in parallel by executing the lone interpreter with the specified arguments, environment and standard input. The status code and the data from standard output and error are collected and compared against the expected parameters. A successful test is one where actual outputs match expected outputs.&lt;/p&gt; &#xA;&lt;p&gt;Only the &lt;code&gt;input&lt;/code&gt; file is absolutely required. The actual output and error data are only compared if their respective &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; files are present. If the &lt;code&gt;status&lt;/code&gt; file is omitted, the successful status code &lt;code&gt;0&lt;/code&gt; is expected.&lt;/p&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;lone/                         # The lone repository&#xA;â”œâ”€â”€ arch/                     # Architecture-specific code, one file each&#xA;â”‚   â”œâ”€â”€ aarch64.c             # System calls and process start for aarch64&#xA;â”‚   â””â”€â”€ x86_64.c              # System calls and process start for x86_64&#xA;â”œâ”€â”€ scripts/                  # Small support programs for development&#xA;â”‚   â”œâ”€â”€ NR.filter             # Extracts system call definitions from compiler output&#xA;â”‚   â”œâ”€â”€ NR.generate           # Generates C structure initializers for system call names and numbers&#xA;â”‚   â”œâ”€â”€ test.bash             # The automated testing script&#xA;â”‚   â””â”€â”€ test.new              # The new test case creation script&#xA;â”œâ”€â”€ test/                     # The lone test suite&#xA;â”‚   â””â”€â”€ arbitrary/tree/       # Arbitrary tree, determines test name, leaves contain test files&#xA;â”‚       â”œâ”€â”€ arguments         # Arguments passed, one per line&#xA;â”‚       â”œâ”€â”€ environment       # Environment variables set, one per line&#xA;â”‚       â”œâ”€â”€ input             # Standard input&#xA;â”‚       â”œâ”€â”€ output            # Expected standard output&#xA;â”‚       â”œâ”€â”€ error             # Expected standard error&#xA;â”‚       â””â”€â”€ status            # Expected exit status&#xA;â”œâ”€â”€ GNUmakefile               # The GNU Make file&#xA;â”œâ”€â”€ LICENSE.AGPLv3            # GNU Affero General Public License version 3, full license text&#xA;â”œâ”€â”€ lone                      # The lone executable produced by make&#xA;â”œâ”€â”€ lone.c                    # The lone C source code&#xA;â”œâ”€â”€ README.md                 # This README file&#xA;â”œâ”€â”€ .gdbinit                  # GDB visualization functions for lone&#39;s data structures&#xA;â””â”€â”€ .github/                  # GitHub-specific data&#xA;    â””â”€â”€ workflows/            # GitHub Actions workflows&#xA;        â”œâ”€â”€ codeql.yml        # Automated code quality checker&#xA;        â””â”€â”€ lone.yml          # Automated building and testing&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>