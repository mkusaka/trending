<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-06T01:27:08Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rodarima/libwa</title>
    <updated>2024-01-06T01:27:08Z</updated>
    <id>tag:github.com,2024-01-06:/rodarima/libwa</id>
    <link href="https://github.com/rodarima/libwa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WhatsApp C library&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;WhatsApp C library&lt;/h2&gt; &#xA;&lt;p&gt;A fast and lightweight C library to connect to WhatsApp. Requires a phone with a working version and connected to the internet, similarly as the web version.&lt;/p&gt; &#xA;&lt;p&gt;The following libraries are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libwebsockets&lt;/li&gt; &#xA; &lt;li&gt;libqrencode&lt;/li&gt; &#xA; &lt;li&gt;libcrypto&lt;/li&gt; &#xA; &lt;li&gt;libjson-c&lt;/li&gt; &#xA; &lt;li&gt;libprotobuf-c&lt;/li&gt; &#xA; &lt;li&gt;libcrypto (OpenSSL)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Still under HEAVY development. Pull requests are appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Based on the great reverse engineering work of sigalor: &lt;a href=&#34;https://github.com/sigalor/whatsapp-web-reveng&#34;&gt;whatsapp-web-reveng&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Objective&lt;/h3&gt; &#xA;&lt;p&gt;The library will provide a simple way to build clients. For instance a bitlbee plugin to add WhatsApp as an available protocol to IRC.&lt;/p&gt; &#xA;&lt;h3&gt;Current status&lt;/h3&gt; &#xA;&lt;p&gt;The library provides the ability to send and receive private text messages, no photos or other media are supported yet, neither group messages.&lt;/p&gt; &#xA;&lt;p&gt;The built-in client &lt;code&gt;wac&lt;/code&gt; reads from the standard input, and sends the lines as messages to the specified recipient in the argument. The received messages are shown in the standard output. The phone should be specified in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;country code&amp;gt;&amp;lt;phone&amp;gt;@s.whatsapp.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, the number 666666666 in Spain, would be &lt;code&gt;34666666666@s.whatsapp.net&lt;/code&gt;. Some examples using the standard input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% PHONE=34666666666@s.whatsapp.net&#xA;% wac $PHONE&#xA;Hi, do you read me?&#xA;Yes!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also be piped, as any UNIX like program, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% echo Hi from the command line | wac $PHONE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to get a remote shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% mkfifo fifo&#xA;% wac $PHONE &amp;lt; fifo | bash &amp;gt; fifo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rodarima/libwa/master/doc/test.jpg&#34; alt=&#34;A screenshot of the test commands&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>XProger/OpenLara</title>
    <updated>2024-01-06T01:27:08Z</updated>
    <id>tag:github.com,2024-01-06:/XProger/OpenLara</id>
    <link href="https://github.com/XProger/OpenLara" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classic Tomb Raider open-source engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenLara&lt;/h1&gt; &#xA;&lt;p&gt;Classic Tomb Raider open-source engine&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://xproger.info/projects/OpenLara/&#34;&gt;WebGL build with demo level&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XProger/OpenLara/releases/tag/latest&#34;&gt;Standalone version&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XProger/OpenLara/issues/353&#34;&gt;Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-2-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD%202--Clause-orange.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/XProger_san&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/twitter?icon=twitter&amp;amp;label&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/EF8JaQB&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/openlara&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/telegram?icon=telegram&amp;amp;label&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/TimurGagiev&#34;&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.tombraiderforums.com/showthread.php?t=216618&#34;&gt;Tomb Raider Forums thread&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/waterfall.jpg&#34; alt=&#34;Waterfall&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/multi-aim.jpg&#34; alt=&#34;Double-aim&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/caustics.jpg&#34; alt=&#34;Caustics&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/cut1.jpg&#34; alt=&#34;Cutscene&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/flipmap.jpg&#34; alt=&#34;Cistern&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/tr2_opera.jpg&#34; alt=&#34;Opera&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/tr2_unwater1.jpg&#34; alt=&#34;Unwater&#34;&gt; &lt;img src=&#34;http://xproger.info/projects/OpenLara/shots/tr3_temple.jpg&#34; alt=&#34;Temple&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>attractivechaos/plb2</title>
    <updated>2024-01-06T01:27:08Z</updated>
    <id>tag:github.com,2024-01-06:/attractivechaos/plb2</id>
    <link href="https://github.com/attractivechaos/plb2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programming language benchmark&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: see the figure below. Note that nqueen and matmul are implemented in all languages but sudoku and bedcov are only implemented in some.&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://lh3.sourceforge.io/images/plb2-m1.png?v14&#34;&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#result&#34;&gt;Results&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#overall&#34;&gt;Overall impression&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#caveat&#34;&gt;Caveats&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#startup&#34;&gt;Startup time&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#cputime&#34;&gt;Elapsed time vs CPU time&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#opt&#34;&gt;Subtle optimizations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#matmul&#34;&gt;Optimizing inner loops&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#memlayout&#34;&gt;Controlling memory layout&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#conclusion&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#table&#34;&gt;Appendix: Timing on Apple M1 Macbook Pro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;intro&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Programming Language Benchmark v2 (plb2) evaluates the performance of 24 programming languages on four CPU-intensive tasks. It is a follow-up to &lt;a href=&#34;https://github.com/attractivechaos/plb&#34;&gt;plb&lt;/a&gt; conducted in 2011. In plb2, all implementations use the same algorithm for each task and their performance bottlenecks do not fall in library functions. We do not intend to compare different algorithms or the quality of the standard libraries in these languages. Plb2 aims to evaluate the performance of a language when you have to implement a new algorithm in the language - this may happen if you can&#39;t find the algorithm in existing libraries.&lt;/p&gt; &#xA;&lt;p&gt;The four tasks in plb2 all take a few seconds for a fast implementation to complete. The tasks are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;nqueen&lt;/strong&gt;: solving a &lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;&gt;15-queens problem&lt;/a&gt;. The algorithm was inspired by the second C implementation &lt;a href=&#34;https://rosettacode.org/wiki/N-queens_problem#C&#34;&gt;from Rosetta Code&lt;/a&gt;. It involves nested loops and integer bit operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;matmul&lt;/strong&gt;: multiplying two square matrices of 1500x1500 in size. The inner loop resembles BLAS&#39; &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_1&#34;&gt;axpy&lt;/a&gt; operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sudoku&lt;/strong&gt;: solving 4000 hard &lt;a href=&#34;https://en.wikipedia.org/wiki/Sudoku&#34;&gt;Sudokus&lt;/a&gt; (20 puzzles repeated for 200 times) using the &lt;a href=&#34;https://attractivechaos.github.io/plb/kudoku.html&#34;&gt;kudoku algorithm&lt;/a&gt;. This algorithm heavily uses small fixed-sized arrays with a bit complex logic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;bedcov&lt;/strong&gt;: finding the overlaps between two arrays of 1,000,000 intervals with &lt;a href=&#34;https://academic.oup.com/bioinformatics/article/37/9/1315/5910546&#34;&gt;implicit interval trees&lt;/a&gt;. The algorithm involves frequent array access in a pattern similar to binary searches.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every language has nqueen and matmul implementations. Some languages do not have sudoku or bedcov implementations. Most programs were initially implemented by me and a few were contributed by others. As I am mostly a C programmer, implementations in other languages may be suboptimal and there are no implementations in functional languages. &lt;strong&gt;Pull requests are welcomed!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;result&#34;&gt;&lt;/a&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;The figure at the top of the page summarizes the elapsed time of each implementation measured on an Apple M1 MacBook Pro. &lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;Hyperfine&lt;/a&gt; was used for timing except for a few slow implementations which were timed with the &#34;time&#34; bash command without repetition. A plus sign &#34;+&#34; indicates &lt;a href=&#34;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&#34;&gt;ahead-of-time compilation&lt;/a&gt; (AOT). Exact timing can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/#table&#34;&gt;table below&lt;/a&gt;. The figure was &lt;a href=&#34;https://raw.githubusercontent.com/attractivechaos/plb2/master/analysis&#34;&gt;programmatically generated&lt;/a&gt; from the table.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;overall&#34;&gt;&lt;/a&gt;Overall impression&lt;/h3&gt; &#xA;&lt;p&gt;Programming language implementations in plb2 can be classified into three groups depending on how and when compilation is done:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Purely interpreted (QuickJS, Perl and &lt;a href=&#34;https://en.wikipedia.org/wiki/CPython&#34;&gt;CPython&lt;/a&gt;, the official Python implementation). Not surprisingly, these are among the slowest language implementations in this benchmark.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JIT compiled (Dart, Bun/Node, Java, Julia, LuaJIT, PHP, PyPy and Ruby3 with &lt;a href=&#34;https://github.com/ruby/ruby/raw/master/doc/yjit/yjit.md&#34;&gt;YJIT&lt;/a&gt;). They are generally faster than pure interpretation. Nonetheless, there is a large variance in this group. While PHP and Ruby3 are faster than Perl and CPython, they are still an order of magnitude slower than PyPy. The two JavaScript engines (Bun and Node) and Julia perform well. They are about twice as fast as PyPy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AOT compiled (the rest). Optimizing binaries for specific hardware, these compilers tend to generate the fastest executables.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;caveat&#34;&gt;&lt;/a&gt;Caveats&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;startup&#34;&gt;&lt;/a&gt;Startup time&lt;/h4&gt; &#xA;&lt;p&gt;Some JIT-based language runtimes take up to ~0.3 second to compile and warm-up. We are not separating out this startup time. Nonetheless, because most benchmarks run for several seconds, including the startup time does not greatly affect the results.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;cputime&#34;&gt;&lt;/a&gt;Elapsed time vs CPU time&lt;/h4&gt; &#xA;&lt;p&gt;Although no implementations use multithreading, language runtimes may be doing extra work, such as garbage collection, in a separate thread. In this case, the CPU time (user plus system) may be longer than elapsed wall-clock time. Julia, in particular, takes noticeably more CPU time than wall-clock time even for the simplest nqueen benchmark. In plb2, we are measuring the elapsed wall-clock time because that is the number users often see. The ranking of CPU time may be slightly different.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;opt&#34;&gt;&lt;/a&gt;Subtle optimizations&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;memlayout&#34;&gt;&lt;/a&gt;Controlling memory layout&lt;/h4&gt; &#xA;&lt;p&gt;When implementing bedcov in Julia, C and many compiled languages, it is preferred to have an array of objects in a contiguous memory block such that adjacent objects are close in memory. This helps cache efficiency. In most scripting languages, unfortunately, we have to put references to objects in an array at the cost of cache locality. The issue can be alleviated by cloning objects to a new array. This doubles the speed of PyPy and Bun.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;matmul&#34;&gt;&lt;/a&gt;Optimizing inner loops&lt;/h4&gt; &#xA;&lt;p&gt;The bottleneck of matrix multiplication falls in the following nested loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for (int i = 0; i &amp;lt; n; ++i)&#xA;    for (int k = 0; k &amp;lt; n; ++k)&#xA;        for (int j = 0; j &amp;lt; n; ++j)&#xA;            c[i][j] += a[i][k] * b[k][j];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is obvious that &lt;code&gt;c[i]&lt;/code&gt;, &lt;code&gt;b[k]&lt;/code&gt; and &lt;code&gt;a[i][k]&lt;/code&gt; can be moved out of the inner loop to reduce the frequency of matrix access. The Clang compiler can apply this optimization. Manual optimization may actually hurt performance.&lt;/p&gt; &#xA;&lt;p&gt;However, &lt;strong&gt;many other languages cannot optimize this nested loop.&lt;/strong&gt; If we manually move &lt;code&gt;a[i][k]&lt;/code&gt; to the loop above it, we can often improve their performance. Some C/C++ programmers say compilers often optimize better than human, but this might not be the case in other languages.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;Discussions&lt;/h2&gt; &#xA;&lt;p&gt;The most well-known and the longest running language benchmark is the &lt;a href=&#34;https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html&#34;&gt;Computer Language Benchmark Games&lt;/a&gt;. Plb2 differs in that it includes different languages (e.g. Nim and Crystal), different language runtimes (e.g. PyPy and LuaJIT) and new tasks, and it comes with more uniform implementations and focuses more on the performance of the language itself without library functions. &lt;strong&gt;Plb2 complements the Computer Language Benchmark Games.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;One important area that plb2 does not evaluate is the performance of memory allocation and/or garbage collection. This may contribute more to practical performance than generating machine code. Nonetheless, it is challenging to design a realistic micro-benchmark to evaluate memory allocation. If the built-in allocator in a language implementation does not work well, we can implement customized memory allocator just for the specific task but this, in my view, would not represent typical use cases.&lt;/p&gt; &#xA;&lt;p&gt;When plb was conducted in 2011, half of the languages in the figure above were not mature or even did not exist. It is exciting to see many of them have reached the 1.0 milestone and are gaining popularity among modern programmers. On the other hand, Python remains one of the two most used scripting languages despite its poor performance. In my view, this is because PyPy would not be officially endorsed while other JIT-based languages are not general or good enough. Will there be a language to displace Python in the next decade? I am not optimistic.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;table&#34;&gt;&lt;/a&gt;Appendix: Timing on Apple M1 Macbook Pro&lt;/h2&gt; &#xA;&lt;p&gt;In the following table, star &#34;*&#34; indicates AOT compilation and plus &#34;+&#34; indicates JIT compilation.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Label&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Runtime&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;nqueen&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;matmul&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;sudoku&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;bedcov&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c:clang*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.54&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cl:sbcl*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lisp&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;SBCL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.4.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.19&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.84&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;crystal*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crystal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.10.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.28&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.45&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c#:.net*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C#&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8.0.100&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.82&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.38&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.12&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;d:ldc2*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;D&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LDC2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.105.2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.68&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.60&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart:jit+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;(JIT)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.2.4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.62&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.81&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.24&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.15.7&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26.17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;67.39&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;f90:gcc*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fortran90&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GCC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13.2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.67&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.51&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.84&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.21.5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.94&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.63&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.04&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenJDK&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20.0.1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.92&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:bun+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bun&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.0.20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.11&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.75&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.07&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.83&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:deno+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Deno&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.39.1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.06&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.04&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:k8+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;k8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.79&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.99&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.76&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.02&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:node+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Node&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21.5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.73&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.88&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.77&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.83&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:node&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Node-nojit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21.5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55.48&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;162.84&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;63.91&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21.61&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;js:qjs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;QuickJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;23-12-09&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;59.04&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;135.66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;67.55&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;julia+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Julia&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.10.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.02&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.76&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.35&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.96&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;luajit+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LuaJIT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.31&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.48&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10.59&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mojo*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mojo&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.6.1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.24&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.12&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nim*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Nim&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.0.2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.64&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OCaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.14.1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Perl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.34.1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;158.34&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;158.01&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;90.78&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;php+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8.3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;48.15&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;71.20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;py:pypy+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pypy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7.3.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.91&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.95&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8.82&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;py:cpy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CPython&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11.7&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;159.97&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;223.66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52.88&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;42.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;(YJIT)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.3.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;88.15&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;130.51&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52.26&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.75.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.49&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.65&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;swift*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.92&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.78&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;V&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.4.3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.55&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.57&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zig*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Zig&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.11.0&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.72&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>