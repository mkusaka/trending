<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-09T01:31:22Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EionRobb/purple-teams</title>
    <updated>2023-03-09T01:31:22Z</updated>
    <id>tag:github.com,2023-03-09:/EionRobb/purple-teams</id>
    <link href="https://github.com/EionRobb/purple-teams" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A MS Teams plugin for libpurple/Pidgin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MS Teams Plugin for Pidgin&lt;/h1&gt; &#xA;&lt;p&gt;Hey there, I&#39;m building a new plugin for Teams, based on the old skype4pidgin plugin. At the moment it&#39;s primarily focused at &#34;Teams for Work/School&#34;, but let me know in &lt;a href=&#34;https://github.com/EionRobb/purple-teams/issues/16&#34;&gt;this issue&lt;/a&gt; if you&#39;re interested in &#34;Teams for Personal&#34; Totally a work in progress, but it&#39;s sending and receiving messages, so good enough to ship!&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;ll need libjson-glib-dev, libpurple-dev and glib-2.0-dev packages from your distro, then simply&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/EionRobb/purple-teams&#xA;cd purple-teams&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install.&lt;/p&gt; &#xA;&lt;h1&gt;Windows Users&lt;/h1&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://eion.robbmob.com/libteams.dll&#34;&gt;here&lt;/a&gt;, copy to &lt;code&gt;C:\Program Files (x86)\Pidgin\plugins\&lt;/code&gt;. You may also need &lt;a href=&#34;https://eion.robbmob.com/libjson-glib-1.0.dll&#34;&gt;libjson-glib&lt;/a&gt; in your &lt;code&gt;C:\Program Files (x86)\Pidgin\&lt;/code&gt; folder (not the plugins folder)&lt;/p&gt; &#xA;&lt;h1&gt;General Login&lt;/h1&gt; &#xA;&lt;p&gt;Usernames in purple-teams don&#39;t mean too much, they just need to be unique if you plan on signing into multiple servers/tenants at the same time. Leave the &#39;tenant&#39; field on the Advanced tab blank, unless you&#39;re following the below&lt;/p&gt; &#xA;&lt;h1&gt;Logging in as a guest&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re like me and need to connect to multiple servers/tenants, then you&#39;ll need to set the &#39;Tenant&#39; on the Advanced tab of the connection. These are generally in the form of &#39;fancynamegoeshere.onmicrosoft.com&#39; you can leave off the &#39;.onmicrosoft.com&#39; bit and the plugin should add that on automatically. Hopefully in the future I come up with an easier way to work that out.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a GUID/ID, eg using &lt;a href=&#34;https://www.whatismytenantid.com&#34;&gt;https://www.whatismytenantid.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>snesrev/sm</title>
    <updated>2023-03-09T01:31:22Z</updated>
    <id>tag:github.com,2023-03-09:/snesrev/sm</id>
    <link href="https://github.com/snesrev/sm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;early version&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sm&lt;/h1&gt; &#xA;&lt;p&gt;Our discord server is: &lt;a href=&#34;https://discord.gg/AJJbJAzNNJ&#34;&gt;https://discord.gg/AJJbJAzNNJ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Early version. It has bugs and the code is messy.&lt;/p&gt; &#xA;&lt;p&gt;Put sm.smc (sha1 hash da957f0d63d14cb441d215462904c4fa8519c613) in the root folder. When running, it will run both versions and compare frame by frame. If it detects a mismatch, it saves a snapshot in saves/ and displays a counter on screen counting down from 300.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Maldev-Academy/EntropyReducer</title>
    <updated>2023-03-09T01:31:22Z</updated>
    <id>tag:github.com,2023-03-09:/Maldev-Academy/EntropyReducer</id>
    <link href="https://github.com/Maldev-Academy/EntropyReducer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reduce Entropy And Obfuscate Youre Payload With Serialized Linked Lists&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; EntropyReducer: Reduce The Entropy Of Youre Payload And Obfuscate It With Serialized Linked Lists &lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;How Does It Work&lt;/h3&gt; &#xA;&lt;!-- define entropy + it lower the entropy bcz 0x00 is repeated in an organized/ordered manner --&gt; &#xA;&lt;p&gt;&lt;strong&gt;EntropyReducer&lt;/strong&gt; algorithm is determined by &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/EntropyReducer/Common.h#L13&#34;&gt;BUFF_SIZE&lt;/a&gt; and &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/EntropyReducer/Common.h#L14&#34;&gt;NULL_BYTES&lt;/a&gt; values. The following is how would &lt;strong&gt;EntropyReducer&lt;/strong&gt; organize your payload if &lt;code&gt;BUFF_SIZE&lt;/code&gt; was set to &lt;strong&gt;4&lt;/strong&gt;, and &lt;code&gt;NULL_BYTES&lt;/code&gt; to &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222906172-800d8436-abb4-4c1a-96b6-19a8f0c846cf.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Obfuscation Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;EntropyReducer&lt;/strong&gt; first checks if the input raw payload is of a size that&#39;s multiple of &lt;code&gt;BUFF_SIZE&lt;/code&gt;, if not, it pads it to be as so.&lt;/li&gt; &#xA; &lt;li&gt;It then takes every &lt;code&gt;BUFF_SIZE&lt;/code&gt; chunk from the payload, and makes a linked list node for it, using the &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/EntropyReducer/EntropyReducer.c#L10&#34;&gt;InitializePayloadList&lt;/a&gt; function, initializing the payload as a linked list.&lt;/li&gt; &#xA; &lt;li&gt;The created node will have an empty buffer of size &lt;code&gt;NULL_BYTES&lt;/code&gt;, that will be used to lower the entropy&lt;/li&gt; &#xA; &lt;li&gt;At this point, although &lt;strong&gt;EntropyReducer&lt;/strong&gt; completed its task by lowering the entropy of the payload, it doesn&#39;t stop here. It then continues to randomize the order of each node in the linked list, breaking down the raw payload&#39;s order. This step is done via a &lt;a href=&#34;https://www.geeksforgeeks.org/merge-sort-for-linked-list/&#34;&gt;Merge Sort Algorithm&lt;/a&gt; that is implemented through the &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/EntropyReducer/EntropyReducer.c#L160&#34;&gt;MergeSort&lt;/a&gt; function.&lt;/li&gt; &#xA; &lt;li&gt;The sorted linked list is in random order because the value in which the linked list is &lt;em&gt;sorted&lt;/em&gt; is the &lt;strong&gt;XOR&lt;/strong&gt; value of the first three bytes of the raw payload, this value determines its position in the re-organized linked list, this step can be shown &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/EntropyReducer/EntropyReducer.c#L133&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Since saving a linked list to a file is &lt;a href=&#34;https://stackoverflow.com/a/9854707/15354012&#34;&gt;impossible&lt;/a&gt; due to the fact that it&#39;s linked together by pointers. We are forced to &lt;a href=&#34;https://qr.ae/prZ6Lx&#34;&gt;serialize&lt;/a&gt; it.&lt;/li&gt; &#xA; &lt;li&gt;Serialization of the generated linked list is done via the &lt;code&gt;Obfuscate&lt;/code&gt; function &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/EntropyReducer/main.c#L71&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After that, the serialized data is ready to be written to the output file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Deobfuscation Algorithm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since the last step in the &lt;code&gt;Obfuscation Algorithm&lt;/code&gt; was serializing the linked list, the first thing that must be done here is to deserialize the obfuscated payload, generating a linked list from it, this step is done &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.c#L210&#34;&gt;here&lt;/a&gt; in the &lt;code&gt;Deobfuscate&lt;/code&gt; function.&lt;/li&gt; &#xA; &lt;li&gt;Next step is to sort the linked list using the node&#39;s Id, which is done using the same &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.c#L216&#34;&gt;Merge Sort Algorithm&lt;/a&gt; used before.&lt;/li&gt; &#xA; &lt;li&gt;Now, the linked list is in the right order to re-construct the payload&#39;s bytes as they should. So we simply strip the payload&#39;s original bytes from each node, as done &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.c#L223&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Last step is to free the allocated nodes, which is done &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.c#L250&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;EntropyReducer&lt;/strong&gt; simply read the raw payload file from the command line, and writes the obfuscated version to the same file&#39;s name prefixed with &#34;.ER&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The size of the final obfuscated payload varies depending on the values of both &lt;code&gt;BUFF_SIZE&lt;/code&gt; and &lt;code&gt;NULL_BYTES&lt;/code&gt;. However, it can be determined using the following equation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;FinalSize = ((OriginalSize + BUFF_SIZE - OriginalSize % BUFF_SIZE ) / BUFF_SIZE) * (BUFF_SIZE + NULL_BYTES + sizeof(INT))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/tree/main/PoC&#34;&gt;PoC&lt;/a&gt; project in this repo is used to execute the &lt;code&gt;&#34;.ER&#34;&lt;/code&gt; file generated as an example of deserializing and deobfuscating it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Include In Your Projects&lt;/h3&gt; &#xA;&lt;p&gt;All you have to do is add &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.c&#34;&gt;EntropyReducer.c&lt;/a&gt; and &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.h&#34;&gt;EntropyReducer.h&lt;/a&gt; files to your project, and call the &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/EntropyReducer.h#L20&#34;&gt;Deobfuscate&lt;/a&gt; function. You can check &lt;a href=&#34;https://github.com/Maldev-Academy/EntropyReducer/raw/main/PoC/main.c#L54&#34;&gt;PoC/main.c&lt;/a&gt; for reference.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Output Example&lt;/h3&gt; &#xA;&lt;p&gt;In this example, &lt;code&gt;BUFF_SIZE&lt;/code&gt; was set to &lt;strong&gt;3&lt;/strong&gt;, and &lt;code&gt;NULL_BYTES&lt;/code&gt; to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The raw payload, first payload chunk (&lt;code&gt;FC 48 83&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222896340-b1d7fe55-6bb3-4614-be91-38c939f8ea77.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The same payload chunk, but at a different offset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222896883-8f98a4c0-2820-4af7-b8fb-817069e4cf31.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Profit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The x64 calc shellcode generated by metasploit is of entropy &lt;code&gt;5.883&lt;/code&gt;, view by &lt;a href=&#34;https://www.winitor.com/&#34;&gt;pestudio&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222897280-caa4f2dc-bacb-42eb-808f-fbc81094c1de.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The same file, AES encrypted, scores entropy of &lt;code&gt;7.110&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222897475-45705211-6d4d-41b5-9358-e9ea215f3bd2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nearly the same result with the RC4 algorithm as well; &lt;code&gt;7.210&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222897447-32958bb3-1db2-4056-b23a-1c4f53b1a67e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;EntropyReducer&lt;/strong&gt; however, scoring entropy even lower that that of the original raw payload; &lt;code&gt;4.093&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/222897491-f9217e51-3007-4f1c-a5e4-b8e4c89442c3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;The Merge Sort Algorithm Is Taken From &lt;a href=&#34;https://github.com/Leyxargon/c-linked-list&#34;&gt;c-linked-list&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;!-- add our names if u want hbb idk but delete all the comments --&gt;</summary>
  </entry>
</feed>