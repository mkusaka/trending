<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-24T01:29:33Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trzy/ChatARKit</title>
    <updated>2022-12-24T01:29:33Z</updated>
    <id>tag:github.com,2022-12-24:/trzy/ChatARKit</id>
    <link href="https://github.com/trzy/ChatARKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Using ChatGPT to create AR experiences with natural language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatARKit: Using ChatGPT to Create AR Experiences with Natural Language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Copyright 2022 Bart Trzynadlowski&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/bJFa5HOmhl4&#34;&gt;Click here for a demo video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trzy/ChatARKit/master/images/Screenshot1.png&#34; alt=&#34;A car placed using ChatARKit&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/trzy/ChatARKit/master/images/Screenshot2.png&#34; alt=&#34;A frog placed using ChatARKit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ChatARKit is an experiment to see whether &lt;a href=&#34;https://chat.openai.com/chat&#34;&gt;ChatGPT&lt;/a&gt; can be harnessed to write code using custom user-defined APIs. You can speak a prompt asking ChatARKit to place objects of a certain type on nearby planes and perform some basic manipulations of their position, scale, and orientation. More interactions could readily be added. Here are some sample prompts to try:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Place a cube on the nearest plane.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Place a spinning cube on the floor.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Place a sports car on the table and rotate it 90 degrees.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Place a school bus on the nearest plane and make it drive back and forth along the surface.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full disclosure: the demo video represents some of the best results I got. Performance is generally worse. ChatGPT produces highly variable results for identical prompts. It frequently injects JavaScript functions that are not present in my JavaScriptCore execution context and will misinterpret the relationship between the user, &lt;code&gt;cameraPosition&lt;/code&gt;, and planes. Sometimes it converts object descriptions into code-like identifiers (e.g., &#34;school bus&#34; becomes &#34;schoolBus&#34;), which breaks the Sketchfab querying logic. Much of this is fixable and it&#39;s a good idea to examine the generated code, which is printed to the console by both the iOS app and the ChatGPT server. If OpenAI changes the model or takes further action to block bots, this demo could cease to function altogether.&lt;/p&gt; &#xA;&lt;p&gt;I encourage interested developers to contact me and discuss ways this could be improved and turned into a more robust demo. And if you have any other fun ideas for AI projects, I&#39;m always up to chat :)&lt;/p&gt; &#xA;&lt;p&gt;ChatARKit consists of an iOS app and a Python server for interacting with ChatGPT. It makes use of the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; by Georgi Gerganov. Fast C++ implementation of OpenAI&#39;s Whisper speech-to-text model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magicien/GLTFSceneKit&#34;&gt;GLTFSceneKit&lt;/a&gt; by magicien. gLTF loader for SceneKit, used to import 3D assets from &lt;a href=&#34;https://sketchfab.com&#34;&gt;Sketchfab&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marmelroy/Zip&#34;&gt;Zip&lt;/a&gt; by Roy Marmelstein. Swift framework for unzipping files, used to unzip files downloaded from Sketchfab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/terry3041/pyChatGPT&#34;&gt;pyChatGPT&lt;/a&gt; by terry3041. A Python wrapper for accessing ChatGPT. My Python ChatGPT server app depends on this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;1. Obtain a Sketchfab API Token&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sketchfab.com&#34;&gt;Sketchfab&lt;/a&gt; is used to fetch 3D assets (except &#34;cube&#34; which is handled natively). Sign up for a free user account and then under your profile settings, find your API token. Open up &lt;code&gt;iOS/ChatARKit/ChatARKit/Engine/SketchfabEntity.swift&lt;/code&gt; and overwrite the dummy token in &lt;code&gt;_jsonPayloadHeader&lt;/code&gt; near the top of the &lt;code&gt;SketchfabEntity&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;The profile settings can be found by clicking on your user icon in the upper right. Then, click &lt;em&gt;Edit Profile&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trzy/ChatARKit/master/images/Sketchfab_EditProfile.png&#34; alt=&#34;Sketchfab Edit Profile location&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The API token is under &lt;em&gt;Passwords &amp;amp; API&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trzy/ChatARKit/master/images/Sketchfab_Token.png&#34; alt=&#34;Sketchfab Token&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Obtain a ChatGPT Session Token&lt;/h3&gt; &#xA;&lt;p&gt;Log into &lt;a href=&#34;https://chat.openai.com/chat&#34;&gt;ChatGPT&lt;/a&gt; and find your session token. In Chrome, open up &lt;em&gt;Developer Tools&lt;/em&gt; and look for &lt;code&gt;__Secure-next-auth.session-token&lt;/code&gt; under the &lt;em&gt;Application&lt;/em&gt; tab and &lt;em&gt;Cookies&lt;/em&gt;, which appears under &lt;em&gt;Storage&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trzy/ChatARKit/master/images/ChatGPT_Token.png&#34; alt=&#34;Location of the session token in Chrome Developer Tools&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Set Up Python Environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/terry3041/pyChatGPT&#34;&gt;pyChatGPT&lt;/a&gt; must be installed. I recommend using &lt;a href=&#34;https://conda.io/docs/user-guide/install/&#34;&gt;conda&lt;/a&gt; to manage your environment. In the ChatARKit repository directory, create a conda environment, clone pyChatGPT, and install it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n chatarkit python=3.10&#xA;conda activate chatarkit&#xA;git clone https://github.com/terry3041/pyChatGPT.git&#xA;cd pyChatGPT&#xA;pip install -U pyChatGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Run the ChatGPT Python Relay Server&lt;/h3&gt; &#xA;&lt;p&gt;If using conda, make sure your conda environment is activated, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda activate chatarkit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then simply run &lt;code&gt;chatgpt.py&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m chatgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, it will listen on port 6502. It will ask you for the session token obtained in step 2. Paste it and press enter. A Chromium window should appear and automatically log into ChatGPT.&lt;/p&gt; &#xA;&lt;h3&gt;5. Download the Whisper Model Weights&lt;/h3&gt; &#xA;&lt;p&gt;Before opening the iOS project, make sure to download the required Whisper model. From the root of the repository directory on MacOS, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L --output iOS/ChatARKit/ChatARKit/ggml-base.en.bin https://huggingface.co/datasets/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6. Launch ChatARKit on iPhone&lt;/h3&gt; &#xA;&lt;p&gt;Open &lt;code&gt;iOS/ChatARKit/ChatARKit.xcodeproj&lt;/code&gt; and deploy ChatARKit to your iPhone. Connect to the ChatGPT Python relay server by using your computer&#39;s local IP address. On Windows, this can be found using the &lt;code&gt;ipconfig&lt;/code&gt; command. On MacOS or Linux, use &lt;code&gt;ifconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;7. Try a Prompt!&lt;/h3&gt; &#xA;&lt;p&gt;Look around to ensure some planes are detected and then press the &lt;em&gt;Record&lt;/em&gt; button and speak a prompt. For example: &#34;Place a cube on the nearest plane.&#34; Press &lt;em&gt;Stop&lt;/em&gt; when finished to parse the result. You should see ChatGPT producing a response in the Chromium window. This can take a very long time. Be patient. Once ChatGPT is finished, the code is beamed back to your iPhone and should hopefully execute successfully.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;The ChatGPT relay server is pretty straightforward: it accepts connections, passes prompts received from them to ChatGPT, and then sends back the responses with prose and code neatly segregated.&lt;/p&gt; &#xA;&lt;p&gt;The ChatARKit iOS app is more complex. A JavaScript environment is set up allowing scripts that create entities (objects with a visual representation that can be manipulated) to be run. The important source files to understand are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ViewController.swift&lt;/code&gt;: This manages the UI and the connection to the relay server. When connected, a &lt;em&gt;Record&lt;/em&gt; button appears in the lower left. Pressing this button starts capturing audio from the microphone and pressing stop passes it to Whisper for transcription. Most of this logic is near the very top in &lt;code&gt;onToggleRecordButtonPressed()&lt;/code&gt;. The text is sent to ChatGPT and the response eventually arrives in &lt;code&gt;onMessageReceived()&lt;/code&gt;, where the JavaScript code contained inside is passed to the AR engine for execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Engine.swift&lt;/code&gt;: This is the AR experience engine. It is responsible for 1) running the ARKit session and 2) executing JavaScript code. JavaScriptCore is used to create a JavaScript execution context with a few custom functions and variables defined for scripts to use. The engine also constructs the final prompt sent to ChatGPT in &lt;code&gt;augmentPrompt()&lt;/code&gt;. Here, the custom JavaScript environment is described in a lengthy preamble, the user prompt is spliced in, and some additional constraints are added for good measure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Entity.swift&lt;/code&gt;: &lt;code&gt;Engine.createEntity()&lt;/code&gt; creates entities that are exposed to the JavaScript run-time. They contain only a few properties (&lt;code&gt;position&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;, and &lt;code&gt;euler&lt;/code&gt;, each a 3-element array of floats). I couldn&#39;t quite figure out how to expose these properties correctly. Using the &lt;code&gt;JSExport&lt;/code&gt; protocol produces fields that are read-only, so I employ a gross workaround.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following methods and properties are exported to JavaScript:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;print()&lt;/code&gt;: Prints to the console.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getPlanes()&lt;/code&gt;: Returns an array of all planes that have been found by ARKit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getNearestPlane()&lt;/code&gt;: Returns the nearest plane to the user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getGroundPlane()&lt;/code&gt;: Returns the lowest plane.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createEntity()&lt;/code&gt;: Takes a string describing the entity to create and instantiates it. If the description is &#34;cube&#34;, it will create a simple cube. Otherwise, the description is used to search Sketchfab for a model to import.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;distance()&lt;/code&gt;: Computes the distance between two 3D vectors represented as 3-element arrays. ChatGPT sometimes insists on using functions it thinks exists and &lt;code&gt;distance()&lt;/code&gt; is a common one. Instead of trying to fight it, I gave in and implemented it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cameraPosition&lt;/code&gt;: The current AR camera position as a 3-element array.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is interesting to note that ChatGPT is usually smart enough to implement the functionality of &lt;code&gt;getNearestPlane()&lt;/code&gt; and sometimes even &lt;code&gt;getGroundPlane()&lt;/code&gt; on its own. However, it occasionally gets spectacularly confused and will do something nonsensical. Luckily, it will usually end up using functions that are described to it in the prompt. ChatGPT also has a nasty habit of defining functions after it has used them, which produces code that fails to run.&lt;/p&gt; &#xA;&lt;p&gt;Common sources of problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT generates bad code that fails to run. Examine the output carefully when this happens.&lt;/li&gt; &#xA; &lt;li&gt;No suitable models are found by Sketchfab, the models fail to download, or an import error is experienced.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/yarp</title>
    <updated>2022-12-24T01:29:33Z</updated>
    <id>tag:github.com,2022-12-24:/Shopify/yarp</id>
    <link href="https://github.com/Shopify/yarp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet Another Ruby Parser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yet Another Ruby Parser&lt;/h1&gt; &#xA;&lt;p&gt;This is an early work-in-progress project geared at replacing the existing CRuby parser. Its aims are threefold:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portability - we want the ability to use this parser in other projects, implementations, and tools.&lt;/li&gt; &#xA; &lt;li&gt;Error tolerance - we want this parser to be able to recover from as many syntax errors as possible.&lt;/li&gt; &#xA; &lt;li&gt;Maintainability - we want this to be a long-standing projects with good hygiene. This means tutorials, examples, documentation, clean code, good test coverage, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1x74L_paTxS_h8_OtQjDoLVgxZP6Y96WOJ1LdLNb4BKM/edit#heading=h.6eyajfy04xhw&#34;&gt;This link&lt;/a&gt; is where you can find the design document for the project. It is also a work-in-progress, but should give you a good sense of the overall goals and motivations.&lt;/p&gt; &#xA;&lt;p&gt;There are many parsers that have been built before in various stages of upkeep. Below is a list of the ones I have read through and found useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jruby/jruby&#34;&gt;jruby/jruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lib-ruby-parser/lib-ruby-parser&#34;&gt;lib-ruby-parser/lib-ruby-parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/natalie-lang/natalie_parser&#34;&gt;natalie-lang/natalie_parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oracle/truffleruby&#34;&gt;oracle/truffleruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;ruby/ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seattlerb/ruby_parser&#34;&gt;seattlerb/ruby_parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sisshiki1969/ruruby&#34;&gt;sisshiki1969/ruruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sorbet/sorbet&#34;&gt;sorbet/sorbet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/whitequark/parser&#34;&gt;whitequark/parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also a couple of tools that define node shapes for every kind of node in the Ruby syntax tree. I&#39;ve taken inspiration from those tools as well. They include most of the parsers above, as well as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ruby-syntax-tree/syntax_tree&#34;&gt;ruby-syntax-tree/syntax_tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ruby/ruby/raw/master/node.h&#34;&gt;ruby/ruby/node.h&lt;/a&gt; (&lt;code&gt;RubyVM::AST&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The repository contains the infrastructure for both a shared library (librubyparser) and a native Ruby extension. The shared library has no bindings to Ruby itself, and so can be used by other C libraries. The native Ruby extension links against &lt;code&gt;ruby.h&lt;/code&gt;, and so is suitable in the context of Ruby.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── Makefile              configuration to compile the shared library and native tests&#xA;├── Rakefile              configuration to compile the native extension and run the Ruby tests&#xA;├── bin&#xA;│&amp;nbsp;&amp;nbsp; ├── template          generates code from the nodes and tokens configured by config.yml&#xA;│&amp;nbsp;&amp;nbsp; └── templates         directory containing all of the various templates&#xA;├── config.yml            specification for tokens and nodes in the tree&#xA;├── ext&#xA;│&amp;nbsp;&amp;nbsp; └── yarp&#xA;│&amp;nbsp;&amp;nbsp;     └── extension.c   the native extension that interacts with librubyparser&#xA;├── lib&#xA;│&amp;nbsp;&amp;nbsp; ├── yarp              support files for the Ruby library&#xA;│&amp;nbsp;&amp;nbsp; └── yarp.rb           main entrypoint into the Ruby library&#xA;├── src&#xA;│&amp;nbsp;&amp;nbsp; ├── yarp.c            main entrypoint into the shared library&#xA;│&amp;nbsp;&amp;nbsp; └── yarp.h            main header file for the shared library&#xA;├── test                  Ruby tests for the Ruby library&#xA;└── test-native           C tests for the shared library&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/yarp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more information. We additionally have documentation about the overall design of the project as well as various subtopics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/yarp/main/docs/design.md&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/yarp/main/docs/encoding.md&#34;&gt;Encoding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/yarp/main/docs/extension.md&#34;&gt;Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/yarp/main/docs/serialization.md&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/checkedc</title>
    <updated>2022-12-24T01:29:33Z</updated>
    <id>tag:github.com,2022-12-24:/microsoft/checkedc</id>
    <link href="https://github.com/microsoft/checkedc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Checked C is an extension to C that lets programmers write C code that is guaranteed by the compiler to be type-safe. The goal is to let people easily make their existing C code type-safe and eliminate entire classes of errors. Checked C does not address use-after-free errors. This repo has a wiki for Checked C, sample code, the specification, a…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Checked C&lt;/h1&gt; &#xA;&lt;p&gt;Checked C adds static and dynamic checking to C to detect or prevent common programming errors such as buffer overruns and out-of-bounds memory accesses. The goal of the project is to improve systems programming by making fundamental improvements to C. This repo contains sample code, the &lt;a href=&#34;https://github.com/Microsoft/checkedc/releases&#34;&gt;extension specification&lt;/a&gt;, and test code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a quick overview of Checked C, more information, and pointers to example code, see our &lt;a href=&#34;https://github.com/Microsoft/checkedc/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The PDF of the specification is available &lt;a href=&#34;https://github.com/Microsoft/checkedc/releases&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Compilers are available &lt;a href=&#34;https://github.com/Microsoft/checkedc-clang/releases&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The Checked C clang repo is &lt;a href=&#34;https://github.com/Microsoft/checkedc-clang&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The instructions to build and test the Checked C compiler are documented on the &lt;a href=&#34;https://github.com/Microsoft/checkedc-clang/wiki&#34;&gt;Checked C clang wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Publications and Presentations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We presented a &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/checkedc-making-c-safe-by-extension/&#34;&gt;research paper&lt;/a&gt; on Checked C at the &lt;a href=&#34;https://secdev.ieee.org/2018/home&#34;&gt;IEEE 2018 Cybersecurity Development Conference&lt;/a&gt;: &#34;Checked C: Making C Safe by Extension&#34;. The paper describes the key ideas of Checked C in 8 pages. Note that we have added features to Checked C for improving type safety (and reducing type confusion) since writing the paper. The &lt;a href=&#34;https://github.com/Microsoft/checkedc/wiki&#34;&gt;Wiki&lt;/a&gt; and &lt;a href=&#34;https://github.com/Microsoft/checkedc/releases&#34;&gt;specification&lt;/a&gt; provide up-to-date descriptions of Checked C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We presented another &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2019/05/checkedc-post2019.pdf&#34;&gt;paper&lt;/a&gt; on Checked C at the &lt;a href=&#34;http://www.etaps.org/2019/post&#34;&gt;2019 Principles of Security and Trust Conference&lt;/a&gt;: &#34;Achieving Safety Incrementally With Checked C&#34;. This paper describes a tool for converting existing C code to use Ptr types. It also proves a blame property about checked regions that shows that checked regions are blameless for any memory corruption. This proof is formalized for a core subset of the language extension.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We presented a &lt;a href=&#34;https://github.com/microsoft/checkedc/raw/master/papers/presentations/llvmdevmeet2019-checkedc_for_memory_safety.pdf&#34;&gt;poster&lt;/a&gt; at the &lt;a href=&#34;https://llvm.org/devmtg/2019-10/talk-abstracts.html#post6&#34;&gt;LLVM Dev Meeting 2019&lt;/a&gt;: &#34;Overflows Be Gone: Checked C for Memory Safety&#34;. The poster provides an introduction to Checked C, outlines the compiler implementation and presents an experimental evaluation of Checked C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We presented a &lt;a href=&#34;https://youtu.be/EuxAzvtX9CI&#34;&gt;talk&lt;/a&gt; (&lt;a href=&#34;https://github.com/microsoft/checkedc/raw/master/papers/presentations/llvmdevmeet2020-checkedc_adding_memory_safety_to_llvm.pdf&#34;&gt;slides&lt;/a&gt;) at the &lt;a href=&#34;https://llvm.org/devmtg/2020-09/program&#34;&gt;2020 LLVM Virtual Dev Meeting&lt;/a&gt;: &#34;Checked C: Adding memory safety support to LLVM&#34;. The talk describes the design of bounds annotations for checked pointers and array pointers as well as the framework for the static checking of the soundness of bounds. We also briefly describe novel algorithms to automatically widen bounds for null-terminated arrays and for comparison of expressions for equivalence.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Build Status&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;Testing&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debug X86 Windows&lt;/td&gt; &#xA;   &lt;td&gt;Checked C and clang regression tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://msresearch.visualstudio.com/_apis/public/build/definitions/f6454e27-a46c-49d9-8453-29d89d53d2f9/211/badge&#34; alt=&#34;Debug X86 Windows status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debug X64 Windows&lt;/td&gt; &#xA;   &lt;td&gt;Checked C and clang regression tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://msresearch.visualstudio.com/_apis/public/build/definitions/f6454e27-a46c-49d9-8453-29d89d53d2f9/205/badge&#34; alt=&#34;Debug X64 Windows status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debug X64 Linux&lt;/td&gt; &#xA;   &lt;td&gt;Checked C and clang regression tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://msresearch.visualstudio.com/_apis/public/build/definitions/f6454e27-a46c-49d9-8453-29d89d53d2f9/217/badge&#34; alt=&#34;Debug X64 Linux status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release X64 Linux&lt;/td&gt; &#xA;   &lt;td&gt;Checked C, clang, and LLVM nightly tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://msresearch.visualstudio.com/_apis/public/build/definitions/f6454e27-a46c-49d9-8453-29d89d53d2f9/238/badge&#34; alt=&#34;Release X64 Linux status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Participating&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re happy to have the help! You can contribute by trying out Checked C, reporting bugs, and giving us feedback. There are other ways to &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/checkedc/master/CONTRIBUTING.md&#34;&gt;contribute&lt;/a&gt; too. You can watch the &lt;a href=&#34;https://github.com/microsoft/checkedc/discussions/categories/announcements&#34;&gt;announcement page&lt;/a&gt; for announcements about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Licensing&lt;/h1&gt; &#xA;&lt;p&gt;The software in this repository is covered by the MIT license. See the file LICENSE.TXT for the license. The Checked C specification is made available by Microsoft under the &lt;a href=&#34;http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0&#34;&gt;OpenWeb Foundation Final Specification Agreement, version 1.0&lt;/a&gt;. Contributions of code to the Checked LLVM/clang repos are subject to the &lt;a href=&#34;https://github.com/Microsoft/checkedc-clang/raw/master/LICENSE.TXT&#34;&gt;CLANG/LLVM licensing terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Code of conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>