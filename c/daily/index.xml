<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:36:56Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hashcat/hashcat</title>
    <updated>2022-08-02T01:36:56Z</updated>
    <id>tag:github.com,2022-08-02:/hashcat/hashcat</id>
    <link href="https://github.com/hashcat/hashcat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;World&#39;s fastest and most advanced password recovery utility&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;em&gt;hashcat&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;hashcat&lt;/strong&gt; is the world&#39;s fastest and most advanced password recovery utility, supporting five unique modes of attack for over 300 highly-optimized hashing algorithms. hashcat currently supports CPUs, GPUs, and other hardware accelerators on Linux, Windows, and macOS, and has facilities to help enable distributed password cracking.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;hashcat&lt;/strong&gt; is licensed under the MIT license. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/hashcat/hashcat/master/docs/license.txt&#34;&gt;docs/license.txt&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;latest release&lt;/a&gt; and unpack it in the desired location. Please remember to use &lt;code&gt;7z x&lt;/code&gt; when unpacking the archive from the command line to ensure full file paths remain intact.&lt;/p&gt; &#xA;&lt;h3&gt;Usage/Help&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://hashcat.net/wiki/&#34;&gt;Hashcat Wiki&lt;/a&gt; and the output of &lt;code&gt;--help&lt;/code&gt; for usage information and general help. A list of frequently asked questions may also be found &lt;a href=&#34;https://hashcat.net/wiki/doku.php?id=frequently_asked_questions&#34;&gt;here&lt;/a&gt;. The &lt;a href=&#34;https://hashcat.net/forum/&#34;&gt;Hashcat Forum&lt;/a&gt; also contains a plethora of information. If you still think you need help by a real human come to &lt;a href=&#34;https://discord.gg/HFS523HGBT&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/hashcat/hashcat/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt; for instructions on how to build &lt;strong&gt;hashcat&lt;/strong&gt; from source.&lt;/p&gt; &#xA;&lt;p&gt;Tests:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Travis&lt;/th&gt; &#xA;   &lt;th&gt;Appveyor&lt;/th&gt; &#xA;   &lt;th&gt;Coverity&lt;/th&gt; &#xA;   &lt;th&gt;GitHub Actions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/hashcat/hashcat&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hashcat/hashcat.svg?branch=master&#34; alt=&#34;Hashcat Travis Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/jsteube/hashcat&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/hashcat/hashcat?branch=master&amp;amp;svg=true&#34; alt=&#34;Hashcat Appveyor Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://scan.coverity.com/projects/hashcat&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/11753/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hashcat/hashcat/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/hashcat/hashcat/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Hashcat GitHub Actions Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Contributions are welcome and encouraged, provided your code is of sufficient quality. Before submitting a pull request, please ensure your code adheres to the following requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Licensed under MIT license, or dedicated to the public domain (BSD, GPL, etc. code is incompatible)&lt;/li&gt; &#xA; &lt;li&gt;Adheres to gnu99 standard&lt;/li&gt; &#xA; &lt;li&gt;Compiles cleanly with no warnings when compiled with &lt;code&gt;-W -Wall -std=gnu99&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Indent_style#Allman_style&#34;&gt;Allman-style&lt;/a&gt; code blocks &amp;amp; indentation&lt;/li&gt; &#xA; &lt;li&gt;Uses 2-spaces as the indentation or a tab if it&#39;s required (for example: Makefiles)&lt;/li&gt; &#xA; &lt;li&gt;Uses lower-case function and variable names&lt;/li&gt; &#xA; &lt;li&gt;Avoids the use of &lt;code&gt;!&lt;/code&gt; and uses positive conditionals wherever possible (e.g., &lt;code&gt;if (foo == 0)&lt;/code&gt; instead of &lt;code&gt;if (!foo)&lt;/code&gt;, and &lt;code&gt;if (foo)&lt;/code&gt; instead of &lt;code&gt;if (foo != 0)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Use code like array[index + 0] if you also need to do array[index + 1], to keep it aligned&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can use GNU Indent to help assist you with the style requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;indent -st -bad -bap -sc -bl -bli0 -ncdw -nce -cli0 -cbi0 -pcs -cs -npsl -bs -nbc -bls -blf -lp -i2 -ts2 -nut -l1024 -nbbo -fca -lc1024 -fc1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your pull request should fully describe the functionality you are adding/removing or the problem you are solving. Regardless of whether your patch modifies one line or one thousand lines, you must describe what has prompted and/or motivated the change.&lt;/p&gt; &#xA;&lt;p&gt;Solve only one problem in each pull request. If you&#39;re fixing a bug and adding a new feature, you need to make two separate pull requests. If you&#39;re fixing three bugs, you need to make three separate pull requests. If you&#39;re adding four new features, you need to make four separate pull requests. So on, and so forth.&lt;/p&gt; &#xA;&lt;p&gt;If your patch fixes a bug, please be sure there is an &lt;a href=&#34;https://github.com/hashcat/hashcat/issues&#34;&gt;issue&lt;/a&gt; open for the bug before submitting a pull request. If your patch aims to improve performance or optimize an algorithm, be sure to quantify your optimizations and document the trade-offs, and back up your claims with benchmarks and metrics.&lt;/p&gt; &#xA;&lt;p&gt;In order to maintain the quality and integrity of the &lt;strong&gt;hashcat&lt;/strong&gt; source tree, all pull requests must be reviewed and signed off by at least two &lt;a href=&#34;https://github.com/orgs/hashcat/people&#34;&gt;board members&lt;/a&gt; before being merged. The &lt;a href=&#34;https://github.com/jsteube&#34;&gt;project lead&lt;/a&gt; has the ultimate authority in deciding whether to accept or reject a pull request. Do not be discouraged if your pull request is rejected!&lt;/p&gt; &#xA;&lt;h3&gt;Happy Cracking!&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>cfenollosa/os-tutorial</title>
    <updated>2022-08-02T01:36:56Z</updated>
    <id>tag:github.com,2022-08-02:/cfenollosa/os-tutorial</id>
    <link href="https://github.com/cfenollosa/os-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;How to create an OS from scratch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;os-tutorial&lt;/h1&gt; &#xA;&lt;p&gt;How to create an OS from scratch!&lt;/p&gt; &#xA;&lt;p&gt;I have always wanted to learn how to make an OS from scratch. In college I was taught how to implement advanced features (pagination, semaphores, memory management, etc) but:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I never got to start from my own boot sector&lt;/li&gt; &#xA; &lt;li&gt;College is hard so I don&#39;t remember most of it.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m fed up with people who think that reading an already existing kernel, even if small, is a good idea to learn operating systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf&#34;&gt;this document&lt;/a&gt; and the &lt;a href=&#34;http://wiki.osdev.org/&#34;&gt;OSDev wiki&lt;/a&gt;, I&#39;ll try to make short step-by-step READMEs and code samples for anybody to follow. Honestly, this tutorial is basically the first document but split into smaller pieces and without the theory.&lt;/p&gt; &#xA;&lt;p&gt;Updated: more sources: &lt;a href=&#34;https://littleosbook.github.io&#34;&gt;the little book about OS development&lt;/a&gt;, &lt;a href=&#34;https://web.archive.org/web/20160412174753/http://www.jamesmolloy.co.uk/tutorial_html/index.html&#34;&gt;JamesM&#39;s kernel development tutorials&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This course is a code tutorial aimed at people who are comfortable with low level computing. For example, programmers who have curiosity on how an OS works but don&#39;t have the time or willpower to start reading the Linux kernel top to bottom.&lt;/li&gt; &#xA; &lt;li&gt;There is little theory. Yes, this is a feature. Google is your theory lecturer. Once you pass college, excessive theory is worse than no theory because it makes things seem more difficult than they really are.&lt;/li&gt; &#xA; &lt;li&gt;The lessons are tiny and may take 5-15 minutes to complete. Trust me and trust yourself. You can do it!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use this tutorial&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start with the first folder and go down in order. They build on previous code, so if you jump right to folder 05 and don&#39;t know why there is a &lt;code&gt;mov ah, 0x0e&lt;/code&gt;, it&#39;s because you missed lecture 02. Really, just go in order. You can always skip stuff you already know.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the README and read the first line, which details the concepts you should be familiar with before reading the code. Google concepts you are not familiar with. The second line states the goals for each lesson. Read them, because they explain why we do what we do. The &#34;why&#34; is as important as the &#34;how&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Read the rest of the README. It is &lt;strong&gt;very concise&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Try to write the code files by yourself after reading the README.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Look at the code examples. They are extremely well commented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Experiment with them and try to break things. The only way to make sure you understood something is trying to break it or replicate it with different commands.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;TL;DR: First read the README on each folder, then the code files. If you&#39;re brave, try to code them yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Strategy&lt;/h2&gt; &#xA;&lt;p&gt;We will want to do many things with our OS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Boot from scratch, without GRUB - DONE!&lt;/li&gt; &#xA; &lt;li&gt;Enter 32-bit mode - DONE&lt;/li&gt; &#xA; &lt;li&gt;Jump from Assembly to C - DONE!&lt;/li&gt; &#xA; &lt;li&gt;Interrupt handling - DONE!&lt;/li&gt; &#xA; &lt;li&gt;Screen output and keyboard input - DONE!&lt;/li&gt; &#xA; &lt;li&gt;A tiny, basic &lt;code&gt;libc&lt;/code&gt; which grows to suit our needs - DONE!&lt;/li&gt; &#xA; &lt;li&gt;Memory management&lt;/li&gt; &#xA; &lt;li&gt;Write a filesystem to store files&lt;/li&gt; &#xA; &lt;li&gt;Create a very simple shell&lt;/li&gt; &#xA; &lt;li&gt;User mode&lt;/li&gt; &#xA; &lt;li&gt;Maybe we will write a simple text editor&lt;/li&gt; &#xA; &lt;li&gt;Multiple processes and scheduling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Probably we will go through them in that order, however it&#39;s soon to tell.&lt;/p&gt; &#xA;&lt;p&gt;If we feel brave enough:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A BASIC interpreter, like in the 70s!&lt;/li&gt; &#xA; &lt;li&gt;A GUI&lt;/li&gt; &#xA; &lt;li&gt;Networking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is a personal learning project, and even though it hasn&#39;t been updated for a long time, I still have hopes to get into it at some point.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m thankful to all those who have pointed out bugs and submitted pull requests. I will need some time to review everything and I cannot guarantee that at this moment.&lt;/p&gt; &#xA;&lt;p&gt;Please feel free to fork this repo. If many of you are interested in continuing the project, let me know and I&#39;ll link the &#34;main fork&#34; from here.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Ralim/IronOS</title>
    <updated>2022-08-02T01:36:56Z</updated>
    <id>tag:github.com,2022-08-02:/Ralim/IronOS</id>
    <link href="https://github.com/Ralim/IronOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Soldering Iron firmware for Miniware and Pinecil&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Ralim/ts100/workflows/CI%20Build%20all/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/ralim/IronOS/total&#34; alt=&#34;GitHub all&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/ralim/IronOS&#34; alt=&#34;Latest Release&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IronOS - Flexible Soldering iron control Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;This repository was formerly known as TS100, it&#39;s the same great code. Just with more supported devices.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Originally conceived as an alternative firmware for the TS100, this firmware has evolved into a complex soldering iron control firmware.&lt;/p&gt; &#xA;&lt;p&gt;The firmware implements all of the standard features of a &#34;smart&#34; soldering iron, with lots of little extras and tweaks. I highly recommend reading the installation guide fully when installing on your iron. And after install just explore the settings menu.&lt;/p&gt; &#xA;&lt;p&gt;For soldering irons that are designed to be powered by &#34;smart&#34; power sources (QC and PD), the firmware supports settings around the negotiated power and voltage. For soldering irons that are designed to be powered by batteries (TS100 &amp;amp; Pinecil), settings for a cutoff voltage for battery protection are supported.&lt;/p&gt; &#xA;&lt;p&gt;There are 30 languages currently supported as of present. When downloading the firmware for your soldering iron take note of the language code in the file name.&lt;/p&gt; &#xA;&lt;p&gt;This project is considered feature complete for use as a soldering iron, &lt;em&gt;so please suggest any feature improvements you would like!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This firmware does &lt;strong&gt;NOT&lt;/strong&gt; support the USB port while running for changing settings. This is done through the onscreen menu only. Logos are edited using the tool or python script and uploaded in DFU mode.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Device&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;DC Supported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;QC Supported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PD Supported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reccomended&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;MHP30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Pinecil&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TS100&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TS80&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TS80P&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please note that Miniware have started to ship TS100&#39;s using cloned STM32 Chips. While these do work with IronOS, their DFU bootloader works terribly and it is hard to get it to successfully flash larger firmware images like IronOS without timing out. THis is the main reason why the TS100 is &lt;em&gt;no longer reccomended&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with IronOS firmware, please jump to &lt;a href=&#34;https://raw.githubusercontent.com/Ralim/IronOS/dev/Documentation/GettingStarted.md&#34;&gt;Getting Started Guide&lt;/a&gt;. But the &lt;a href=&#34;https://www.merriam-webster.com/dictionary/TL%3BDR&#34;&gt;TL;DR&lt;/a&gt; is to press the button near the front of the iron to heat up. Use the button near the back of the iron to enter the settings menu. Long hold the rear button in soldering mode to exit back to the start screen.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For notes on installation for your device, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Ralim/IronOS/dev/Documentation/Flashing.md&#34;&gt;Flashing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PID style iron temperature control&lt;/li&gt; &#xA; &lt;li&gt;Automatic sleep with selectable sensitivity&lt;/li&gt; &#xA; &lt;li&gt;Motion wake support&lt;/li&gt; &#xA; &lt;li&gt;All settings exposed in the intuitive menu&lt;/li&gt; &#xA; &lt;li&gt;(TS100) Set a voltage lower limit for Lithium batteries so you don&#39;t kill your battery pack&lt;/li&gt; &#xA; &lt;li&gt;(TS80) Set 18 W or 24 W settings for your power bank&lt;/li&gt; &#xA; &lt;li&gt;(TS80P) Automatically negotiates appropriate PD and falls back to QC mode like TS80&lt;/li&gt; &#xA; &lt;li&gt;(Pinecil) Supports all 3 power modes (PD, QC, DC In).&lt;/li&gt; &#xA; &lt;li&gt;Improved readability Fonts, supporting multiple languages&lt;/li&gt; &#xA; &lt;li&gt;Use hardware features to improve reliability&lt;/li&gt; &#xA; &lt;li&gt;Can disable movement detection if desired&lt;/li&gt; &#xA; &lt;li&gt;Boost mode lets you temporarily change the temperature when soldering (i.e. raise the temperature for short periods)&lt;/li&gt; &#xA; &lt;li&gt;(TS100/Pinecil) Battery charge level indicator if power source set to a lipo cell count&lt;/li&gt; &#xA; &lt;li&gt;(TS80/TS80P/Pinecil) Power bank operating voltage is displayed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ralim/IronOS/dev/Documentation/Logo.md&#34;&gt;Custom boot up logo support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Automatic LCD rotation based on the orientation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Menu System&lt;/h2&gt; &#xA;&lt;p&gt;This new firmware uses a new menu system to allow access to the settings on the device. When on the main screen and having the tip plugged in, the unit shows a pair of prompts for the two most common operations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pressing the button near the tip enters the &lt;em&gt;soldering mode&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pressing the button near the USB end enters the &lt;em&gt;settings menu&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;When not in &lt;em&gt;soldering mode&lt;/em&gt;, holding down the button near the tip will enter &lt;em&gt;soldering temperature adjust mode&lt;/em&gt; (This is the same as the one in the &lt;em&gt;soldering mode&lt;/em&gt;, but allows to adjust the temperature before heating up), in &lt;em&gt;soldering mode&lt;/em&gt; however this will activate &lt;em&gt;boost mode&lt;/em&gt; as long as you hold down the button.&lt;/li&gt; &#xA; &lt;li&gt;Holding down the button near the USB end will show the &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ralim/IronOS/dev/Documentation/DebugMenu.md&#34;&gt;debug menu&lt;/a&gt;.&lt;/em&gt; In &lt;em&gt;soldering mode&lt;/em&gt; this ends the heating.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Operation details are over in the &lt;a href=&#34;https://raw.githubusercontent.com/Ralim/IronOS/dev/Documentation/Menu.md&#34;&gt;Menu information.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;If you love this firmware and want to continue my caffeine addiction, you can do so &lt;a href=&#34;https://paypal.me/RalimTek&#34;&gt;here&lt;/a&gt; (or email me for other options). I also want to give a shout out to all of the &lt;a href=&#34;https://github.com/Ralim/ts100/graphs/contributors&#34;&gt;Fantastic Contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Especially to the following users, who have helped in various ways that are massively appreciated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dhiltonp&#34;&gt;Dhiltonp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mrkvozrout&#34;&gt;Mrkvozrout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonnieZG&#34;&gt;JonnieZG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/federck&#34;&gt;Federck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jvitkauskas&#34;&gt;Jvitkauskas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doegox&#34;&gt;Doegox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/perillamint&#34;&gt;Perillamint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GeminiServer&#34;&gt;GeminiServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PixelPirate&#34;&gt;Patrick Horlebein&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Firebie&#34;&gt;Firebie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agatti&#34;&gt;Agatti&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/discip&#34;&gt;Discip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulfertser&#34;&gt;Paul Fertser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plus the huge number of people who have contributed translations, your effort is massively appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;The code created by the community is GNU GPLv3. Unless noted elsewhere. Other components such as FreeRTOS/USB-PD have their own licence.&lt;/p&gt; &#xA;&lt;h2&gt;Commercial Use&lt;/h2&gt; &#xA;&lt;p&gt;This software is provided as-is, so I cannot provide any commercial support for the firmware. However, you are more than welcome to distribute links to the firmware or provide irons with this software on them. Please do not re-host the files, but rather link to this page, so that there are no old versions of the firmware scattered around.&lt;/p&gt;</summary>
  </entry>
</feed>