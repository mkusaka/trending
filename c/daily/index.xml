<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-07T01:15:49Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient</title>
    <updated>2024-03-07T01:15:49Z</updated>
    <id>tag:github.com,2024-03-07:/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient</id>
    <link href="https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multi Threaded Proxy Server with and without Cache&lt;/h1&gt; &#xA;&lt;p&gt;This project is implemented using &lt;code&gt;C&lt;/code&gt; and Parsing of HTTP referred from &lt;a href=&#34;https://github.com/vaibhavnaagar/proxy-server&#34;&gt; Proxy Server &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient#project-theory&#34;&gt;Project Theory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient#How-to-Run&#34;&gt;How to Run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient#Demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Theory&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient#index&#34;&gt;[Back to top]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Introduction&lt;/h5&gt; &#xA;&lt;h5&gt;Basic Working Flow of the Proxy Server:&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient/raw/main/pics/UML.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;How did we implement Multi-threading?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Used Semaphore instead of Condition Variables and pthread_join() and pthread_exit() function.&lt;/li&gt; &#xA; &lt;li&gt;pthread_join() requires us to pass the thread id of the the thread to wait for.&lt;/li&gt; &#xA; &lt;li&gt;Semaphore’s sem_wait() and sem_post() doesn’t need any parameter. So it is a better option.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Motivation/Need of Project&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To Understand → &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The working of requests from our local computer to the server.&lt;/li&gt; &#xA;   &lt;li&gt;The handling of multiple client requests from various clients.&lt;/li&gt; &#xA;   &lt;li&gt;Locking procedure for concurrency.&lt;/li&gt; &#xA;   &lt;li&gt;The concept of cache and its different functions that might be used by browsers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Proxy Server do → &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It speeds up the process and reduces the traffic on the server side.&lt;/li&gt; &#xA;   &lt;li&gt;It can be used to restrict user from accessing specific websites.&lt;/li&gt; &#xA;   &lt;li&gt;A good proxy will change the IP such that the server wouldn’t know about the client who sent the request.&lt;/li&gt; &#xA;   &lt;li&gt;Changes can be made in Proxy to encrypt the requests, to stop anyone accessing the request illegally from your client.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;OS Component Used ​&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Threading&lt;/li&gt; &#xA; &lt;li&gt;Locks&lt;/li&gt; &#xA; &lt;li&gt;Semaphore&lt;/li&gt; &#xA; &lt;li&gt;Cache (LRU algorithm is used in it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Limitations ​&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a URL opens multiple clients itself, then our cache will store each client’s response as a separate element in the linked list. So, during retrieval from the cache, only a chunk of response will be send and the website will not open&lt;/li&gt; &#xA; &lt;li&gt;Fixed size of cache element, so big websites may not be stored in cache.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;How this project can be extended? ​&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This code can be implemented using multiprocessing that can speed up the process with parallelism.&lt;/li&gt; &#xA; &lt;li&gt;We can decide which type of websites should be allowed by extending the code.&lt;/li&gt; &#xA; &lt;li&gt;We can implement requests like POST with this code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Note :-&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code is well commented. For any doubt you can refer to the comments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Run&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient.git&#xA;$ cd MultiThreadedProxyServerClient&#xA;$ make all&#xA;$ ./proxy &amp;lt;port no.&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Open http://localhost:port/https://www.cs.princeton.edu/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Note:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This code can only be run in Linux Machine. Please disable your browser cache.&lt;/li&gt; &#xA; &lt;li&gt;To run the proxy without cache Change the name of the file (&lt;code&gt;proxy_server_with_cache.c to proxy_server_without_cache.c&lt;/code&gt;) MakeFile.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient/raw/main/pics/cache.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When website is opened for the first time (&lt;code&gt;url not found&lt;/code&gt;) then cache will be miss.&lt;/li&gt; &#xA; &lt;li&gt;Then if you again open that website again then &lt;code&gt;Data is retrieved from the cache&lt;/code&gt; will be printed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Lovepreet-Singh-LPSK/MultiThreadedProxyServerClient#index&#34;&gt;[Back to top]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to add some useful. You can see &lt;code&gt;How this code can be extended&lt;/code&gt;. Use ideas from there and feel free to fork and CHANGE.&lt;/p&gt; &#xA;&lt;h4&gt;Enjoy CODE and pull requests are highly appreciated.&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>s1204IT/Lockpick_RCM</title>
    <updated>2024-03-07T01:15:49Z</updated>
    <id>tag:github.com,2024-03-07:/s1204IT/Lockpick_RCM</id>
    <link href="https://github.com/s1204IT/Lockpick_RCM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DO NOT FORK !! : Import and redistribute this repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lockpick_RCM&lt;/h1&gt; &#xA;&lt;p&gt;Lockpick_RCM is a bare metal Nintendo Switch payload that derives encryption keys for use in Switch file handling software like hactool, hactoolnet/LibHac, ChoiDujour, etc. without booting Horizon OS.&lt;/p&gt; &#xA;&lt;p&gt;Due to changes imposed by firmware 7.0.0, Lockpick homebrew can no longer derive the latest keys. In the boot-time environment however, there is no such limitation.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is highly recommended, but not required, to place Minerva on SD from the latest &lt;a href=&#34;https://github.com/CTCaer/hekate/releases&#34;&gt;Hekate&lt;/a&gt; for best performance, especially while dumping titlekeys - the file and path is &lt;code&gt;/bootloader/sys/libsys_minerva.bso&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch Lockpick_RCM.bin using your favorite payload injector or chainloader&lt;/li&gt; &#xA; &lt;li&gt;Upon completion, keys will be saved to &lt;code&gt;/switch/prod.keys&lt;/code&gt; and titlekeys to &lt;code&gt;/switch/title.keys&lt;/code&gt; on SD&lt;/li&gt; &#xA; &lt;li&gt;This release bundles the Falcon keygen from &lt;a href=&#34;https://github.com/Atmosphere-NX/Atmosphere&#34;&gt;Atmosphère-NX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Mariko-Specific Keys&lt;/h1&gt; &#xA;&lt;p&gt;Mariko consoles have several unique keys and protected keyslots. To get your SBK or the Mariko specific keys, you will need to use the &lt;code&gt;/switch/partialaes.keys&lt;/code&gt; file along with a brute forcing tool such as &lt;a href=&#34;https://files.sshnuke.net/PartialAesKeyCrack.zip&#34;&gt;https://files.sshnuke.net/PartialAesKeyCrack.zip&lt;/a&gt;. The contents of this file are the keyslot number followed by the result of that keyslot encrypting 16 null bytes. With the tool linked above, enter them in sequence for a given keyslot you want the contents of, for example: &lt;code&gt;PartialAesKeyCrack.exe &amp;lt;num1&amp;gt; &amp;lt;num2&amp;gt; &amp;lt;num3&amp;gt; &amp;lt;num4&amp;gt;&lt;/code&gt; with the &lt;code&gt;--numthreads=N&lt;/code&gt; where N is the number of threads you can dedicate to the brute force.&lt;/p&gt; &#xA;&lt;p&gt;The keyslots are as follows, with names recognized by &lt;code&gt;hactool&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0-11 - &lt;code&gt;mariko_aes_class_key_xx&lt;/code&gt; (this is not used by the Switch but is set by the bootrom; hactoolnet recognizes it but it serves no purpose)&lt;/li&gt; &#xA; &lt;li&gt;12 - &lt;code&gt;mariko_kek&lt;/code&gt; (not unique - this is used for master key derivation)&lt;/li&gt; &#xA; &lt;li&gt;13 - &lt;code&gt;mariko_bek&lt;/code&gt; (not unique - this is used for BCT and package1 decryption)&lt;/li&gt; &#xA; &lt;li&gt;14 - &lt;code&gt;secure_boot_key&lt;/code&gt; (console unique - this isn&#39;t needed for further key derivation than what Lockpick_RCM does but might be nice to have for your records)&lt;/li&gt; &#xA; &lt;li&gt;15 - Secure storage key (console unique - this is not used on retail or dev consoles and not recognized by any tools)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So if you want to brute force the &lt;code&gt;mariko_kek&lt;/code&gt;, open your &lt;code&gt;partialaes.keys&lt;/code&gt; and observe the numbers beneath keyslot 12. Here&#39;s an example with fake numbers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12&#xA;11111111111111111111111111111111 22222222222222222222222222222222 33333333333333333333333333333333 44444444444444444444444444444444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then take those numbers and open a command prompt window at the location of the exe linked above and type: &lt;code&gt;PartialAesKeyCrack.exe 11111111111111111111111111111111 22222222222222222222222222222222 33333333333333333333333333333333 44444444444444444444444444444444&lt;/code&gt; and if you&#39;re on a powerful enough multicore system, add &lt;code&gt; --numthreads=[whatever number of threads]&lt;/code&gt;, ideally not your system&#39;s maximum if it&#39;s, for example, an older laptop with a low-end dual core CPU. On a Ryzen 3900x with 24 threads this generates a lot of heat but finishes in about 45 seconds.&lt;/p&gt; &#xA;&lt;p&gt;These keys never change so a brute force need only be conducted once.&lt;/p&gt; &#xA;&lt;p&gt;This works due to the security engine immediately flushing writes to keyslots which can be written one 32-bit chunk at a time. See: &lt;a href=&#34;https://switchbrew.org/wiki/Switch_System_Flaws#Hardware&#34;&gt;https://switchbrew.org/wiki/Switch_System_Flaws#Hardware&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://devkitpro.org/&#34;&gt;devkitARM&lt;/a&gt; and run &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Massive Thanks to CTCaer!&lt;/h1&gt; &#xA;&lt;p&gt;This software is heavily based on &lt;a href=&#34;https://github.com/CTCaer/hekate&#34;&gt;Hekate&lt;/a&gt;. Beyond that, CTCaer was exceptionally helpful in the development of this project, lending loads of advice, expertise, and humor.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is under the GPLv2 license. The Save processing module is adapted from &lt;a href=&#34;https://github.com/SciresM/hactool&#34;&gt;hactool&lt;/a&gt; code under ISC.&lt;/p&gt;</summary>
  </entry>
</feed>