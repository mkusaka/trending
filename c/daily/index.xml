<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-19T01:32:29Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ldcsaa/HP-Socket</title>
    <updated>2023-01-19T01:32:29Z</updated>
    <id>tag:github.com,2023-01-19:/ldcsaa/HP-Socket</id>
    <link href="https://github.com/ldcsaa/HP-Socket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High Performance TCP/UDP/HTTP Communication Component&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;img src=&#34;https://images.gitee.com/uploads/images/2019/0820/112616_5b8b37bf_81720.png&#34; alt=&#34;HP-Socket&#34; title=&#34;HP-Socket&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;High Performance Network Framework&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/em&gt; Based on IOCP/EPOLL communication model, combined with technology of memory pool, private heap etc., efficient memory management is implemented to support large scale and high concurrent communication scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Agent&lt;/strong&gt;&lt;/em&gt; The Agent component is essentially a Multi-Client component that uses the same technical architecture as the Server component. An Agent component object can create and efficiently handle large-scale Socket connections at the same time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/em&gt; Based on Event-Select/POLL communication model, each component object creates a communication thread and manages a Socket connection. Client components are suitable for small-scale client scenarios.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Document&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HP-Socket Development Guide &lt;a href=&#34;https://github.com/ldcsaa/HP-Socket/tree/master/Doc&#34;&gt;[pdf]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HP-Socket Class Diagram &lt;a href=&#34;https://github.com/ldcsaa/HP-Socket/tree/master/Doc&#34;&gt;[uml]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HP-Socket Class Diagram &lt;a href=&#34;https://github.com/ldcsaa/HP-Socket/tree/master/Doc&#34;&gt;[jpg]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HP-Socket SSL Class Diagram &lt;a href=&#34;https://github.com/ldcsaa/HP-Socket/tree/master/Doc&#34;&gt;[jpg]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HP-Socket HTTP Class Diagram &lt;a href=&#34;https://github.com/ldcsaa/HP-Socket/tree/master/Doc&#34;&gt;[jpg]&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create listener object&lt;/li&gt; &#xA; &lt;li&gt;Create component object (and binding with listener object)&lt;/li&gt; &#xA; &lt;li&gt;Start component object&lt;/li&gt; &#xA; &lt;li&gt;Connect to dest host (for &lt;em&gt;Agent&lt;/em&gt; Component only)&lt;/li&gt; &#xA; &lt;li&gt;process network events (&lt;em&gt;OnConnect/OnReceive/OnClose&lt;/em&gt; etc.)&lt;/li&gt; &#xA; &lt;li&gt;Stop component object (optional: component object will be stopped before destroy in step 7)&lt;/li&gt; &#xA; &lt;li&gt;Destroy component object&lt;/li&gt; &#xA; &lt;li&gt;Destroy listener object&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gitee.com/uploads/images/2017/1213/120601_c0d950fb_81720.jpeg&#34; alt=&#34;Agent Workflow&#34; title=&#34;HP-Socket Agent Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;C++ Example&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;hpsocket/HPSocket.h&amp;gt;&#xA;&#xA;/* Listener Class */&#xA;class CListenerImpl : public CTcpPullServerListener&#xA;{&#xA;&#xA;public:&#xA;&#x9;// 5. process network events&#xA;&#x9;virtual EnHandleResult OnPrepareListen(ITcpServer* pSender, SOCKET soListen);&#xA;&#x9;virtual EnHandleResult OnAccept(ITcpServer* pSender, CONNID dwConnID, UINT_PTR soClient);&#xA;&#x9;virtual EnHandleResult OnHandShake(ITcpServer* pSender, CONNID dwConnID);&#xA;&#x9;virtual EnHandleResult OnReceive(ITcpServer* pSender, CONNID dwConnID, int iLength);&#xA;&#x9;virtual EnHandleResult OnSend(ITcpServer* pSender, CONNID dwConnID, const BYTE* pData, int iLength);&#xA;&#x9;virtual EnHandleResult OnClose(ITcpServer* pSender, CONNID dwConnID, EnSocketOperation enOperation, int iErrorCode);&#xA;&#x9;virtual EnHandleResult OnShutdown(ITcpServer* pSender);&#xA;};&#xA;&#xA;int main(int argc, char* const argv[])&#xA;{&#xA;&#x9;// 1. Create listener object&#xA;&#x9;CListenerImpl s_listener;&#xA;&#x9;// 2. Create component object (and binding with listener object)&#xA;&#x9;CTcpPullServerPtr s_pserver(&amp;amp;s_listener);&#xA;&#x9;&#xA;&#x9;// 3. Start component object&#xA;&#x9;if(!s_pserver-&amp;gt;Start(&#34;0.0.0.0&#34;, 5555))&#xA;&#x9;&#x9;exit(1);&#xA;&#x9;&#xA;&#x9;/* wait for exit */&#xA;&#x9;// ... ... &#xA;&#x9;&#xA;&#x9;// 6. (optional) Stop component object&#xA;&#x9;s_pserver-&amp;gt;Stop();&#xA;&#xA;&#x9;return 0;&#xA;&#x9;&#xA;&#x9;// 7. Destroy component object automatically&#xA;&#x9;// 8. Destroy listener object automatically&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;C Example&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;hpsocket/HPSocket4C.h&amp;gt;&#xA;&#xA;// 5. process network events&#xA;EnHandleResult __HP_CALL OnConnect(HP_Agent pSender, HP_CONNID dwConnID);&#xA;EnHandleResult __HP_CALL OnReceive(HP_Agent pSender, HP_CONNID dwConnID, int iLength);&#xA;EnHandleResult __HP_CALL OnSend(HP_Agent pSender, HP_CONNID dwConnID, const BYTE* pData, int iLength);&#xA;EnHandleResult __HP_CALL OnClose(HP_Agent pSender, HP_CONNID dwConnID, En_HP_SocketOperation enOperation, int iErrorCode);&#xA;EnHandleResult __HP_CALL OnShutdown(HP_Agent pSender);&#xA;&#xA;int main(int argc, char* const argv[])&#xA;{&#xA;&#x9;HP_TcpPullAgentListener s_listener;&#xA;&#x9;HP_TcpPullAgent s_agent;&#xA;&#xA;&#x9;// 1. Create listener object&#xA;&#x9;s_listener = ::Create_HP_TcpPullAgentListener();&#xA;&#x9;// 2. Create component object (and binding with listener object)&#xA;&#x9;s_agent    = ::Create_HP_TcpPullAgent(s_listener);&#xA;&#x9;&#xA;&#x9;/* Set listener callbacks */&#xA;&#x9;::HP_Set_FN_Agent_OnConnect(s_listener, OnConnect);&#xA;&#x9;::HP_Set_FN_Agent_OnSend(s_listener, OnSend);&#xA;&#x9;::HP_Set_FN_Agent_OnPullReceive(s_listener, OnReceive);&#xA;&#x9;::HP_Set_FN_Agent_OnClose(s_listener, OnClose);&#xA;&#x9;::HP_Set_FN_Agent_OnShutdown(s_listener, OnShutdown);&#xA;&#x9;&#xA;&#x9;// 3. Start component object&#xA;&#x9;if(!::HP_Agent_Start(s_agent, &#34;0.0.0.0&#34;, TRUE))&#xA;&#x9;&#x9;exit(1);&#xA;&#x9;&#xA;&#x9;// 4. Connect to dest host&#xA;&#x9;::HP_Agent_Connect(s_agent, REMOTE_HOST_1, REMOTE_PORT_1, nullptr);&#xA;&#x9;::HP_Agent_Connect(s_agent, REMOTE_HOST_2, REMOTE_PORT_2, nullptr);&#xA;&#x9;::HP_Agent_Connect(s_agent, REMOTE_HOST_3, REMOTE_PORT_3, nullptr);&#xA;&#x9;&#xA;&#x9;/* wait for exit */&#xA;&#x9;// ... ... &#xA;&#x9;&#xA;&#x9;// 6. (optional) Stop component object&#xA;&#x9;::HP_Agent_Stop(s_agent);&#xA;&#xA;&#x9;// 7. Destroy component object&#xA;&#x9;::Destroy_HP_TcpPullAgent(s_agent);&#xA;&#x9;// 8. Destroy listener object&#xA;&#x9;::Destroy_HP_TcpPullAgentListener(s_listener);&#xA;&#x9;&#xA;&#x9;return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Component List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Basic Components&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-42bad6a83208cda6aaa264ed00e5c328326.JPEG&#34; alt=&#34;Basic Component&#34; title=&#34;Basic Component&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;SSL Components&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-481b7e4181c1e57dbe57cf0f4f328d7d227.JPEG&#34; alt=&#34;SSL Component&#34; title=&#34;SSL Component&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;HTTP Components&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oscimg.oschina.net/oscnet/up-83092ff97598f275e3ca6b7abed679d4f61.JPEG&#34; alt=&#34;HTTP COmponent&#34; title=&#34;HTTP Component&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reference Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/microsoft/mimalloc&#34;&gt;mimalloc&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/jemalloc/jemalloc&#34;&gt;jemalloc&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/openssl/openssl&#34;&gt;openssl&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/nodejs/llhttp&#34;&gt;llhttp&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/madler/zlib&#34;&gt;zlib&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/google/brotli&#34;&gt;brotli&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/skywind3000/kcp&#34;&gt;kcp&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extension Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://gitee.com/xin_chong/HP-Socket-for-macOS&#34;&gt;HP-Socket for MacOS&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://gitee.com/int2e/HPSocket.Net&#34;&gt;HP-Socket for .Net&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technical Exchange Groups&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=3UAbrhTG&#34;&gt;QQ Group - 1&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=uYBpc6bG&#34;&gt;QQ Group - 2&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jakkra/ZSWatch</title>
    <updated>2023-01-19T01:32:29Z</updated>
    <id>tag:github.com,2023-01-19:/jakkra/ZSWatch</id>
    <link href="https://github.com/jakkra/ZSWatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZSWatch - the Open Source Zephyr™ based Smartwatch, including both HW and FW.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;ZSWatch&lt;/h1&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/in_use.jpg&#34;&gt; &#xA; &lt;sub&gt; The ZSWatch v1 &lt;/sub&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Smartwatch built from scratch, both hardware and software. Built on the &lt;a href=&#34;https://www.zephyrproject.org/&#34;&gt;Zephyr™ Project&lt;/a&gt; RTOS, hence the name &lt;strong&gt;ZSWatch&lt;/strong&gt; - &lt;em&gt;Zephyr Smartwatch&lt;/em&gt;. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building or getting one&lt;/h2&gt; &#xA;&lt;p&gt;I have received quite some requests regarding building or getting the ZSWatch, I suggest to wait for the v2 version I&#39;m working on. If you want to get notified when I&#39;m done with v2 then simply press the &lt;code&gt;Watch&lt;/code&gt; button (next to Fork and Star) -&amp;gt; &lt;code&gt;Custom -&amp;gt; Releases&lt;/code&gt; and you will see in your feed when it&#39;s released. &lt;br&gt; &lt;br&gt; &lt;strong&gt;Or&lt;/strong&gt; you can fill in your &lt;strong&gt;&lt;a href=&#34;https://forms.gle/G48Sm5zDe9aCaYtT9&#34;&gt;mail here (Google form)&lt;/a&gt;&lt;/strong&gt; and I&#39;ll send a reminder when it&#39;s ready (or if I decide to make a few kits, who knows). &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Features in ZSWatch v1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nRF52833 BLE chip &lt;a href=&#34;https://content.u-blox.com/sites/default/files/ANNA-B402_DataSheet_UBX-20032372.pdf&#34;&gt;(u-blox ANNA-B402 module)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;1.28&#34; 240x240 IPS TFT Circular Display with &lt;a href=&#34;https://www.buydisplay.com/1-28-inch-tft-lcd-display-240x240-round-circle-screen-for-smart-watch&#34;&gt;GC9A01 driver&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Accelerometer for step counting etc. &lt;a href=&#34;https://www.st.com/content/ccc/resource/technical/document/datasheet/ce/32/55/ac/e1/87/46/84/DM00177048.pdf/files/DM00177048.pdf/jcr:content/translations/en.DM00177048.pdf&#34;&gt;(LIS2DS12TR)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Pulse oximetry and heartrate using &lt;a href=&#34;https://datasheets.maximintegrated.com/en/ds/MAX30101.pdf&#34;&gt;(MAX30101EFD)&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Vibration motor with haptics driver to give better vibration control &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/drv2603.pdf?HQS=dis-dk-null-digikeymode-dsf-pf-null-wwe&amp;amp;ts=1662847620221&#34;&gt;(DRV2603RUNT)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;External 8MB flash &lt;a href=&#34;https://static6.arrow.com/aropdfconversion/a35c4dff799e6b2e44732bd665796d74a8a3f62a/244684669660894mx25r6435f20wide20range2064mb20v1..pdf&#34;&gt;(MX25R6435FZNIL0)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Battery charger and battery supervisor (&lt;a href=&#34;https://datasheets.maximintegrated.com/en/ds/MAX1811.pdf&#34;&gt;MAX1811ESA+ datasheet&lt;/a&gt;, &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/tlv840-q1.pdf?ts=1662823963602&amp;amp;ref_url=https%253A%252F%252Fwww.ti.com%252Fpower-management%252Fsupervisor-reset-ic%252Fproducts.html&#34;&gt;TLV840MAPL3&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;3 buttons for navigation (prev/next/enter)&lt;/li&gt; &#xA; &lt;li&gt;220 mAh Li-Po battery.&lt;/li&gt; &#xA; &lt;li&gt;Sapphire Crystal Glass to protect the display.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BOM&lt;/h3&gt; &#xA;&lt;p&gt;Found &lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/ZSWatch-kicad/zswatch-bom.csv&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PCB Issues in v1&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not build the v1, wait for v2.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logic level converter pinout shifted, requires manual PCB rework.&lt;/li&gt; &#xA; &lt;li&gt;Possible current leakage on some pins.&lt;/li&gt; &#xA; &lt;li&gt;Max display brightness is 60% (however definitely bright enough).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upcoming Hardware features in ZSWatch v2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nRF5340 BLE chip (u-blox NORA-B10 module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Touch screen&lt;/strong&gt; with &lt;a href=&#34;https://www.buydisplay.com/240x240-round-ips-tft-lcd-display-1-28-inch-capactive-touch-circle-screen&#34;&gt;same size and features as v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;8MB external flash will &lt;em&gt;probably&lt;/em&gt; be removed due to larger size of u-blox NORA-B10 vs. ANNA-B402.&lt;/li&gt; &#xA; &lt;li&gt;Find another way to dock the clock for charging and programming, maybe can find some connector similar to what smartwatches normally have.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Charger/Dock&lt;/h2&gt; &#xA;&lt;p&gt;Basic pogo-pin dock that connects the power and SWD pins to the bottom of the watch.&lt;/p&gt; &#xA;&lt;h2&gt;Enclosure/Casing&lt;/h2&gt; &#xA;&lt;p&gt;3D printed casing with 3D printed buttons. Does it&#39;s job, but for revision v2 of the watch I&#39;ll probably do something CNC&#39;d for nicer looks.&lt;/p&gt; &#xA;&lt;h2&gt;Software Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bluetooth LE communications with &lt;a href=&#34;https://codeberg.org/Freeyourgadget/Gadgetbridge&#34;&gt;GadgetBridge&lt;/a&gt; Android app.&lt;/li&gt; &#xA; &lt;li&gt;Also support Bluetooth Direction Finding so the watch can act as a tag and is trackable using any &lt;a href=&#34;https://www.u-blox.com/en/product/ant-b10-antenna-board&#34;&gt;u-blox AoA antenna board&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Watchface that shows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Standard stuff as time, date, battery&lt;/li&gt; &#xA;   &lt;li&gt;Weather&lt;/li&gt; &#xA;   &lt;li&gt;Step count&lt;/li&gt; &#xA;   &lt;li&gt;Number unread notifications&lt;/li&gt; &#xA;   &lt;li&gt;Heart rate (not implemented yet however)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pop-up notifications&lt;/li&gt; &#xA; &lt;li&gt;Setting menu system, with easy extendability&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/#writing-apps-for-the-application-manager&#34;&gt;Application picker and app concept&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/music_control/&#34;&gt;Music control app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/settings/&#34;&gt;Settings app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Step counting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Larger not yet implemented SW Features and TODOs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Heart rate, right now only samples the raw data, but no heart rate is calculated from it.&lt;/li&gt; &#xA; &lt;li&gt;Proper BLE pairing, currently removed due to flash constraints (fixed by nRF5340 upgrade).&lt;/li&gt; &#xA; &lt;li&gt;Watchface should also be an application.&lt;/li&gt; &#xA; &lt;li&gt;Refactoring of &lt;code&gt;main.c&lt;/code&gt;, should have way less logic, utlize Zephyr architecture more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Android phone communication&lt;/h2&gt; &#xA;&lt;p&gt;Fortunately there is a great Android app called &lt;a href=&#34;https://codeberg.org/Freeyourgadget&#34;&gt;GadgetBridge&lt;/a&gt; which handles everything needed on the phone side, such as notifications management, music control and so much more... The ZSWatch right now pretends to be one of the supported Smart Watches in Gadgetbridge, following the same API as it does. In future there may be a point adding native support, we&#39;ll see.&lt;/p&gt; &#xA;&lt;h2&gt;PCB&lt;/h2&gt; &#xA;&lt;p&gt;A 4 layer board which measures 36mm in diameter designed in KiCad.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/pcb.jpg&#34; width=&#34;49%&#34; object-fit=&#34;cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/parts.jpg&#34; width=&#34;49%&#34; object-fit=&#34;cover&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/inside.jpg&#34; width=&#34;49%&#34; object-fit=&#34;cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/back.jpg&#34; width=&#34;49%&#34; object-fit=&#34;cover&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;ZSWatch in action&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Music control&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Accelerometer for step count and tap detection&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/music.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/accel.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Notifications from phone (Gmail here)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/notifications.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/settings.gif&#34; object-fit=&#34;cover&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Writing apps for the Application Manager&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/app/src/applications/template/&#34;&gt;the sample application&lt;/a&gt; for the general app design. The main idea is each app have an &lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; file which registers the app, chooses icon and drives the logic for the app. Then there should be one or more files named for example &lt;code&gt;&amp;lt;app_name&amp;gt;_ui.c&lt;/code&gt; containing pure LVGL code with no dependencies to Zephyr or the watch software. The idea is that this UI code should be runnable in a LVGL simulator to speed up development of UI, however right now that&#39;s not set up yet. The &lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; will do all logic and call functions in &lt;code&gt;&amp;lt;app_name&amp;gt;_ui.c&lt;/code&gt; to update the UI accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Each application needs to have a way to close itself, for example a button, and then through callback tell the &lt;code&gt;application_manager.c&lt;/code&gt; to close the app:&lt;/p&gt; &#xA;&lt;p&gt;When user clicks an app in the app picker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;application_manager.c&lt;/code&gt; deletes it&#39;s UI elements and calls the &lt;code&gt;application_start_fn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; will do necessary init and then call the &lt;code&gt;&amp;lt;app_name&amp;gt;_ui.c&lt;/code&gt; to draw the app UI.&lt;/li&gt; &#xA; &lt;li&gt;User can now navigate arund and the application and do whatever.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When user for example presses a close button in the application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Typically a callback from the UI code in &lt;code&gt;&amp;lt;app_name&amp;gt;_ui.c&lt;/code&gt; will call &lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; to tell that user requested to close the app. &lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; will notify &lt;code&gt;application_manager.c&lt;/code&gt; that it want to close itself. &lt;code&gt;application_manager.c&lt;/code&gt; will then call &lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; &lt;code&gt;application_stop_fn&lt;/code&gt; and &lt;code&gt;&amp;lt;app_name&amp;gt;_app.c&lt;/code&gt; will tell UI to close then do necessary de-init and return.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;application_manager.c&lt;/code&gt; will now draw the app picker again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The application manager can also at any time close a running application by calling it&#39;s &lt;code&gt;application_stop_fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dock&lt;/h2&gt; &#xA;&lt;p&gt;Very basic, will be re-worked for next watch revision v2.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jakkra/ZSWatch/main/.github/dock.jpg&#34; width=&#34;420&#34;&gt; &lt;/p&gt;</summary>
  </entry>
</feed>