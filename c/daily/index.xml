<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:22:04Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ofiwg/libfabric</title>
    <updated>2024-02-24T01:22:04Z</updated>
    <id>tag:github.com,2024-02-24:/ofiwg/libfabric</id>
    <link href="https://github.com/ofiwg/libfabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Fabric Interfaces&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ofiwg/libfabric/actions/workflows/pr-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ofiwg/libfabric/actions/workflows/pr-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Checks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/4274&#34;&gt;&lt;img alt=&#34;libfabric Coverity scan build status&#34; src=&#34;https://scan.coverity.com/projects/4274/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/api/projects/status/github/ofiwg/libfabric&#34;&gt;&lt;img alt=&#34;libfabric main branch AppVeyor CI status&#34; src=&#34;https://ci.appveyor.com/api/projects/status/github/ofiwg/libfabric?svg=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ofiwg/libfabric/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/ofiwg/libfabric.svg?sanitize=true&#34; alt=&#34;libfabric release version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/ofiwg/libfabric&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/ofiwg/libfabric/badge&#34; alt=&#34;openssf scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;libfabric&lt;/h1&gt; &#xA;&lt;p&gt;libfabric, also known as Open Fabrics Interfaces (OFI), is a framework focused on exporting high-performance networking services to applications. It specifically targets parallel and distributed applications and middleware.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://libfabric.org&#34;&gt;the OFI website&lt;/a&gt; for more details, including a description and overview of the project, and detailed documentation of the libfabric APIs.&lt;/p&gt; &#xA;&lt;p&gt;You can join the libfabric mailing lists from &lt;a href=&#34;http://www.openfabrics.org&#34;&gt;www.openfabrics.org&lt;/a&gt; (membership in the Open Fabrics Alliance is NOT required to join the mailing lists). libfabric discussions are also available on slack: libfabric.slack.com.&lt;/p&gt; &#xA;&lt;h2&gt;Installing pre-built libfabric packages&lt;/h2&gt; &#xA;&lt;p&gt;On OS X, the latest release of libfabric can be installed using the &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;Homebrew&lt;/a&gt; package manager using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install libfabric&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Libfabric pre-built binaries may be available from other sources, such as Linux distributions.&lt;/p&gt; &#xA;&lt;h2&gt;Building and installing libfabric from source&lt;/h2&gt; &#xA;&lt;p&gt;Distribution tarballs are available from the Github &lt;a href=&#34;https://github.com/ofiwg/libfabric/releases&#34;&gt;releases&lt;/a&gt; tab.&lt;/p&gt; &#xA;&lt;p&gt;If you are building libfabric from a developer git clone, you must first run the &lt;code&gt;autogen.sh&lt;/code&gt; script. This will invoke the GNU Autotools to bootstrap libfabric&#39;s configuration and build mechanisms. If you are building libfabric from an official distribution tarball, there is no need to run &lt;code&gt;autogen.sh&lt;/code&gt;; libfabric distribution tarballs are already bootstrapped for you.&lt;/p&gt; &#xA;&lt;p&gt;Libfabric currently supports GNU/Linux, Free BSD, and OS X.&lt;/p&gt; &#xA;&lt;h3&gt;Configure options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; script has many built-in options (see &lt;code&gt;./configure --help&lt;/code&gt;). Some useful options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--prefix=&amp;lt;directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;make install&lt;/code&gt; will place the files in the &lt;code&gt;/usr&lt;/code&gt; tree. The &lt;code&gt;--prefix&lt;/code&gt; option specifies that libfabric files should be installed into the tree specified by named &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt;. The executables will be located at &lt;code&gt;&amp;lt;directory&amp;gt;/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--with-valgrind=&amp;lt;directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directory where valgrind is installed. If valgrind is found, then valgrind annotations are enabled. This may incur a performance penalty.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--enable-debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable debug code paths. This enables various extra checks and allows for using the highest verbosity logging output that is normally compiled out in production builds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--enable-&amp;lt;provider&amp;gt;=[yes|no|auto|dl|&amp;lt;directory&amp;gt;]&#xA;--disable-&amp;lt;provider&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables or disables the provider named &lt;code&gt;&amp;lt;provider&amp;gt;&lt;/code&gt;. Valid options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;auto (This is the default if the &lt;code&gt;--enable-&amp;lt;provider&amp;gt;&lt;/code&gt; option isn&#39;t specified)&lt;/p&gt; &lt;p&gt;The provider will be enabled if all of its requirements are satisfied. If one of the requirements cannot be satisfied, then the provider is disabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;yes (This is the default if the &lt;code&gt;--enable-&amp;lt;provider&amp;gt;&lt;/code&gt; option is specified)&lt;/p&gt; &lt;p&gt;The configure script will abort if the provider cannot be enabled (e.g., due to some of its requirements not being available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;no&lt;/p&gt; &lt;p&gt;Disable the provider. This is synonymous with &lt;code&gt;--disable-&amp;lt;provider&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dl&lt;/p&gt; &lt;p&gt;Enable the provider and build it as a loadable library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&amp;lt;directory&amp;gt;&lt;/p&gt; &lt;p&gt;Enable the provider and use the installation given in &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Consider the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./configure --prefix=/opt/libfabric --disable-sockets &amp;amp;&amp;amp; make -j 32 &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will tell libfabric to disable the &lt;code&gt;sockets&lt;/code&gt; provider, and install libfabric in the &lt;code&gt;/opt/libfabric&lt;/code&gt; tree. All other providers will be enabled if possible and all debug features will be disabled.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./configure --prefix=/opt/libfabric --enable-debug --enable-psm3=dl &amp;amp;&amp;amp; make -j 32 &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will tell libfabric to enable the &lt;code&gt;psm3&lt;/code&gt; provider as a loadable library, enable all debug code paths, and install libfabric to the &lt;code&gt;/opt/libfabric&lt;/code&gt; tree. All other providers will be enabled if possible.&lt;/p&gt; &#xA;&lt;h2&gt;Validate installation&lt;/h2&gt; &#xA;&lt;p&gt;The fi_info utility can be used to validate the libfabric and provider installation and provide details about provider support and available interfaces. See &lt;code&gt;fi_info(1)&lt;/code&gt; man page for details on using the fi_info utility. fi_info is installed as part of the libfabric package.&lt;/p&gt; &#xA;&lt;p&gt;A more comprehensive test package is available via the fabtests package.&lt;/p&gt; &#xA;&lt;h2&gt;Providers&lt;/h2&gt; &#xA;&lt;h3&gt;gni&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;gni&lt;/code&gt; provider runs on Cray XC (TM) systems utilizing the user-space Generic Network Interface (&lt;code&gt;uGNI&lt;/code&gt;), which provides low-level access to the Aries interconnect. The Aries interconnect is designed for low-latency one-sided messaging and also includes direct hardware support for common atomic operations and optimized collectives.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_gni(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;gni&lt;/code&gt; provider requires &lt;code&gt;gcc&lt;/code&gt; version 4.9 or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;opx&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The OPX provider is an updated Libfabric provider for Omni-Path HPC fabrics. The other provider for Omni-Path is PSM2.&lt;/p&gt; &#xA;&lt;p&gt;The OPX provider began as a fork of the libfabric BGQ provider, with the hardware-specific parts re-written for the Omni-Path hfi1 fabric interface card. Therefore OPX inherits several desirable characteristics of the BGQ driver, and analysis of instruction counts and cache line footprints of most HPC operations show OPX being lighter weight than PSM2 on the host software stack, leading to better overall performance.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_opx(7)&lt;/code&gt; man page for more details. See &lt;a href=&#34;https://customercenter.cornelisnetworks.com/&#34;&gt;Cornelis Customer Center&lt;/a&gt; for support information.&lt;/p&gt; &#xA;&lt;h3&gt;psm2&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;psm2&lt;/code&gt; provider runs over the PSM 2.x interface that is supported by the Intel Omni-Path Fabric. PSM 2.x has all the PSM 1.x features plus a set of new functions with enhanced capabilities. Since PSM 1.x and PSM 2.x are not ABI compatible, the &lt;code&gt;psm2&lt;/code&gt; provider only works with PSM 2.x and doesn&#39;t support Intel TrueScale Fabric.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_psm2(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h3&gt;psm3&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;psm3&lt;/code&gt; provider provides optimized performance and scalability for most verbs UD and sockets devices. Additional features and optimizations can be enabled when running over Intel&#39;s E810 Ethernet NICs and/or using Intel&#39;s rendezvous kernel module (&lt;a href=&#34;https://github.com/intel/iefs-kernel-updates&#34;&gt;&lt;code&gt;rv&lt;/code&gt;&lt;/a&gt;). PSM 3.x fully integrates the OFI provider and the underlying PSM3 protocols/implementation and only exports the OFI APIs.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ofiwg.github.io/libfabric/main/man/fi_psm3.7.html&#34;&gt;&lt;code&gt;fi_psm3&lt;/code&gt;(7)&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;rxm&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;ofi_rxm&lt;/code&gt; provider is an utility provider that supports RDM endpoints emulated over MSG endpoints of a core provider.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ofiwg.github.io/libfabric/main/man/fi_rxm.7.html&#34;&gt;&lt;code&gt;fi_rxm&lt;/code&gt;(7)&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;sockets&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The sockets provider has been deprecated in favor of the tcp, udp, and utility providers, which provide improved performance and stability.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;sockets&lt;/code&gt; provider is a general-purpose provider that can be used on any system that supports TCP sockets. The provider is not intended to provide performance improvements over regular TCP sockets, but rather to allow developers to write, test, and debug application code even on platforms that do not have high-performance fabric hardware. The sockets provider supports all libfabric provider requirements and interfaces.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_sockets(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h3&gt;tcp&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The tcp provider is an optimized socket based provider that supports reliable connected endpoints. The current version is the redesigned one previously called the net provider. This version supports both MSG endpoints and RDM endpoints. It can also work in conjunction with the rxm provider for apps that need similar RDM behavior as the old tcp provider. The tcp provider targets replacing the sockets provider for applications using standard networking hardware.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_tcp(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h3&gt;udp&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;udp&lt;/code&gt; provider is a basic provider that can be used on any system that supports UDP sockets. The provider is not intended to provide performance improvements over regular UDP sockets, but rather allow applications and provider developers to write, test, and debug their code. The &lt;code&gt;udp&lt;/code&gt; provider forms the foundation of a utility provider that enables the implementation of libfabric features over any hardware.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_udp(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h3&gt;verbs&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The verbs provider enables applications using OFI to be run over any verbs hardware (Infiniband, iWarp, and RoCE). It uses the Linux Verbs API for network transport and translates OFI calls to appropriate verbs API calls. It uses librdmacm for communication management and libibverbs for other control and data transfer operations.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_verbs(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The verbs provider requires libibverbs (v1.1.8 or newer) and librdmacm (v1.0.16 or newer). If you are compiling libfabric from source and want to enable verbs support, you will also need the matching header files for the above two libraries. If the libraries and header files are not in default paths, specify them in CFLAGS, LDFLAGS and LD_LIBRARY_PATH environment variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Network Direct&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The Network Direct provider enables applications using OFI to be run over any verbs hardware (Infiniband, iWarp, and RoCE). It uses the Microsoft Network Direct SPI for network transport and provides a translation of OFI calls to appropriate Network Direct API calls. The Network Direct providers enables OFI-based applications to utilize zero-copy data transfers between applications, kernel-bypass I/O generation and one-sided data transfer operations on Microsoft Windows OS. An application can use OFI with the Network Direct provider enabled on Windows OS to expose the capabilities of the networking devices if the hardware vendors of the devices implemented the Network Direct service provider interface (SPI) for their hardware.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_netdir(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Network Direct provider requires Network Direct SPI. If you are compiling libfabric from source and want to enable Network Direct support, you will also need the matching header files for the Network Direct SPI. If the libraries and header files are not in default paths, specify them in the configuration properties of the VS project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;shm&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The shm provider enables applications using OFI to be run over shared memory.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;fi_shm(7)&lt;/code&gt; man page for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The shared memory provider only works on Linux platforms and makes use of kernel support for &#39;cross-memory attach&#39; (CMA) data copies for large transfers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;efa&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;efa&lt;/code&gt; provider enables the use of libfabric-enabled applications on &lt;a href=&#34;https://aws.amazon.com/hpc/efa/&#34;&gt;Amazon EC2 Elastic Fabric Adapter (EFA)&lt;/a&gt;, a custom-built OS bypass hardware interface for inter-instance communication on EC2.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ofiwg.github.io/libfabric/main/man/fi_efa.7.html&#34;&gt;&lt;code&gt;fi_efa&lt;/code&gt;(7)&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;WINDOWS Instructions&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to compile and link libfabric with windows applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;You need the NetDirect provider to use RDMA NICs: Network Direct SDK/DDK may be obtained as a NuGet package (preferred) from:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/NetworkDirect&#34;&gt;https://www.nuget.org/packages/NetworkDirect&lt;/a&gt;&lt;/p&gt; &lt;p&gt;or downloaded from:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=36043&#34;&gt;https://www.microsoft.com/en-us/download/details.aspx?id=36043&lt;/a&gt; on page press Download button and select NetworkDirect_DDK.zip.&lt;/p&gt; &lt;p&gt;Extract header files from downloaded NetworkDirect_DDK.zip:&lt;code&gt;\NetDirect\include\&lt;/code&gt; into &lt;code&gt;include\windows&lt;/code&gt;, or add the path to NetDirect headers into VS include paths&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt; &lt;p&gt;compiling: libfabric has 6 Visual Studio solution configurations:&lt;/p&gt; &lt;p&gt;1-2: Debug/Release ICC (restricted support for Intel Compiler XE 15.0 only) 3-4: Debug/Release v140 (VS 2015 tool set) 5-6: Debug/Release v141 (VS 2017 tool set) 7-8: Debug/Release v142 (VS 2019 tool set)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;Make sure you choose the correct target fitting your compiler. By default, the library will be compiled to &lt;code&gt;&amp;lt;libfabricroot&amp;gt;\x64\&amp;lt;yourconfigchoice&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;linking your library&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;right-click your project and select properties.&lt;/li&gt; &#xA;   &lt;li&gt;choose C/C++ &amp;gt; General and add &lt;code&gt;&amp;lt;libfabricroot&amp;gt;\include&lt;/code&gt; to &#34;Additional include Directories&#34;&lt;/li&gt; &#xA;   &lt;li&gt;choose Linker &amp;gt; Input and add &lt;code&gt;&amp;lt;libfabricroot&amp;gt;\x64\&amp;lt;yourconfigchoice&amp;gt;\libfabric.lib&lt;/code&gt; to &#34;Additional Dependencies&#34;&lt;/li&gt; &#xA;   &lt;li&gt;depending on what you are building you may also need to copy &lt;code&gt;libfabric.dll&lt;/code&gt; into the target folder of your own project.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>