<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-20T01:29:03Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>klonyyy/MCUViewer</title>
    <updated>2024-09-20T01:29:03Z</updated>
    <id>tag:github.com,2024-09-20:/klonyyy/MCUViewer</id>
    <link href="https://github.com/klonyyy/MCUViewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time embedded variable &amp; trace viewer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/klonyyy/MCUViewer/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;example workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;p&gt;To download MCUViewer installer please proceed to the &lt;a href=&#34;https://github.com/klonyyy/MCUViewer/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MCUViewer&lt;/h1&gt; &#xA;&lt;p&gt;MCUViewer (formerly STMViewer) is an open-source GUI debug tool for microcontrollers that consists of two modules.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Variable Viewer - used for viewing, logging, and manipulating variables data in realtime using debug interface (SWDIO / SWCLK / GND)&lt;/li&gt; &#xA; &lt;li&gt;Trace Viewer - used for graphically representing real-time SWO trace output (SWDIO / SWCLK / SWO / GND)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The only piece of hardware required is an STLink or JLink programmer.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;Variable Viewer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/klonyyy/MCUViewer/main/docs/VarViewer.gif&#34; alt=&#34;_&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Variable Viewer can be used to visualize your embedded application data in real time with no overhead in a non-intrusive way. The software works by reading variables&#39; values directly from RAM using probe&#39;s debug interface. Addresses are read from the *.elf file which is created when you build your embedded project. This approach&#39;s main downside is that the object&#39;s address must stay constant throughout the whole program&#39;s lifetime, which means the object has to be global. Even though it seems to be a small price to pay in comparison to running some debug protocol over for example UART which is also not free in terms of intrusiveness.&lt;/p&gt; &#xA;&lt;p&gt;Variable Viewer is a great tool for debugging, but might be not enough for some high frequency signals - in such cases check out the Trace Viewer below.&lt;/p&gt; &#xA;&lt;h3&gt;Trace Viewer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/klonyyy/MCUViewer/main/docs/TraceViewer.gif&#34; alt=&#34;_&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trace Viewer is a new module that lets you visualize SWO trace data. It can serve multiple purposes such as profiling a function execution time, confirming the timer&#39;s interrupt frequency, or displaying very high frequency signals. All this is possible thanks to hardware trace peripherals embedded into Cortex M3/M4/M7/M33 cores. For prerequisites and usage please see the Quick Start section.&lt;/p&gt; &#xA;&lt;p&gt;TraceViewer is not influenced by optimizations, which means it is a great tool to use for profiling on release builds. Moreover it has a very low influence on the program execution as each datapoint is a single register write.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First make sure you&#39;ve got GDB installed and that it&#39;s at least 12.1.&lt;/li&gt; &#xA; &lt;li&gt;Download the *.deb package and install it using: &lt;code&gt;sudo apt install ./MCUViewer-x.y.z-Linux.deb&lt;/code&gt; All dependencies should be installed and you should be ready to go.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Stlink users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in case your STLink is not detected, please copy the &lt;code&gt;/launch/udevrules/&lt;/code&gt; folder contents to your &lt;code&gt;/etc/udev/rules.d/&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and run the MCUViewer installer from the releases page (right hand side menu of the main repo page).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Stlink users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make sure the STLink is in &#34;STM32 Debug + Mass Storage + VCP&#34; mode as for some reason &#34;STM32 Debug + VCP&#34; throws libusb errors on Windows. This needs further investigation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can assign the external GPU to MCUViewer for improved performance.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Variable Viewer&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Options -&amp;gt; Acqusition&lt;/code&gt; Settings window in the top menu.&lt;/li&gt; &#xA; &lt;li&gt;Select your project&#39;s elf file. Make sure the project is compiled in debug mode. Click done.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;Import variables form *.elf&lt;/code&gt;. Select variables and click &lt;code&gt;Import&lt;/code&gt;. Note: the import feature is still in beta. If your variable is not automatically detected just click &lt;code&gt;Add variable&lt;/code&gt; and input the name yourself. Please let me know if that happens by opening a new issue with *.elf file attached.&lt;/li&gt; &#xA; &lt;li&gt;After adding all variables click &lt;code&gt;Update variable addresses&lt;/code&gt;. The type and address of the variables you&#39;ve added should change from &#34;NOT FOUND!&#34; to a valid address based on the *.elf file you&#39;ve provided. Note: 64-bit variables (such as uint64_t and double) are not yet supported #13.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop the variable to the plot area.``&lt;/li&gt; &#xA; &lt;li&gt;Make sure the debug probe is connected and a proper type is selected (STLink/JLink). Download your executable to the microcontroller and press the &lt;code&gt;STOPPED&lt;/code&gt; button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In case of any problems, please try the example/MCUViewer_test CubeIDE project and the corresponding MCUViewer_test.cfg project file. Please remember to build the project and update the elf file path in the &lt;code&gt;Options -&amp;gt; Acqusition&lt;/code&gt; Settings.&lt;/p&gt; &#xA;&lt;h3&gt;Trace Viewer&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Turn on the SWO pin functionality - in CubeMX System Core -&amp;gt; SYS Mode and Configuration -&amp;gt; choose Trace Asynchronous Sw&lt;/li&gt; &#xA; &lt;li&gt;Place enter and exit markers in the code you&#39;d like to profile. Example for digital data:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ITM-&amp;gt;PORT[x].u8 = 0xaa; //enter tag 0xaa - plot state high&#xA;foo();&#xA;ITM-&amp;gt;PORT[x].u8 = 0xbb; //exit tag 0xbb - plot state low&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for tracing &#34;analog&#34; signals you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;float a = sin(10.0f * i);          // some high frequency signal to trace&#xA;ITM-&amp;gt;PORT[x].u32 = *(uint32_t*)&amp;amp;a; // type-punn to desired size: sizeof(float) = sizeof(uint32_t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uint16_t a = getAdcSample();       // some high frequency signal to trace&#xA;ITM-&amp;gt;PORT[x].u16 = a;              &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ITM registers are defined in CMSIS headers (core_xxxx.h).&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Compile and download the program to your STM32 target.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;Settings&lt;/code&gt; window type in the correct System Core Clock value in kHz (very important as it affects the timebase)&lt;/li&gt; &#xA; &lt;li&gt;Try different trace prescallers that result in a trace speed lower than the max trace speed of your programmer (for example STLINK V2 can read trace up to 2Mhz, whereas ST-Link V3 is theoretically able to do 24Mhz). Example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System Core Clock is 160 000 kHz (160 Mhz)&lt;/li&gt; &#xA; &lt;li&gt;We&#39;re using ST-link V2 so the prescaler should be at least 160 Mhz / 2 Mhz = 80 It works similar with other probes such as JLink, so be sure to check the maximum SWO speed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;analog&lt;/code&gt; channels types according to the type used in your code.&lt;/li&gt; &#xA; &lt;li&gt;Press the &lt;code&gt;STOPPED&lt;/code&gt; button to start recording.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example project with MCUViewer config file is located in test/MCUViewer_test directory.&lt;/p&gt; &#xA;&lt;p&gt;FAQ and common issues:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Problem: My trace doesn&#39;t look like it&#39;s supposed to and I get a lot of error frames Answer: Try lowering the trace prescaller and check the SWO pin connection - the SWO pin output is high frequency and it shouldn&#39;t be too long.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Problem: My trace looks like it&#39;s supposed to but I get the &#34;delayed timestamp 3&#34; indicator Answer: Try logging fewer channels simultaneously. It could be that you&#39;ve saturated the SWO pin bandwidth.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Problem: My trace looks like it&#39;s supposed to but I get the &#34;delayed timestamp 1&#34; indicator Answer: This is not a critical error, however, you should be cautious as some of the trace frames may be delayed. To fix try logging fewer channels simultaneously.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;MCUViewer is build like any other CMake project:&lt;/p&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a Linux user be sure to install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;libusb-1.0-0-dev&lt;/li&gt; &#xA; &lt;li&gt;libglfw3-dev&lt;/li&gt; &#xA; &lt;li&gt;libgtk-3-dev&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After a successful build, copy the &lt;code&gt;./third_party/stlink/chips&lt;/code&gt; directory to where the binary is located. Otherwise the STlink will not detect your STM32 target.&lt;/p&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.msys2.org&#34;&gt;MSYS2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the MinGW console run &lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the following packages &lt;code&gt;pacman -S base-devel mingw-w64-ucrt-x86_64-toolchain mingw-w64-ucrt-x86_64-llvm mingw-w64-x86_64-lld&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you&#39;ve added minGW folder to the PATH (&lt;code&gt;C:\msys64\usr\bin&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In the main repo directory call &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd build &lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmake .. -G&#34;MinGW Makefiles&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mingw32-make.exe -j8&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After a successful build, copy the &lt;code&gt;./third_party/stlink/chips&lt;/code&gt; directory to where the binary is located. Otherwise the STlink will not detect your STM32 target.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m working in the motor control industry where it is crucial to visualize some of the process data in real-time. Since the beginning, I have been working with &lt;a href=&#34;https://www.st.com/en/development-tools/stm-studio-stm32.html&#34;&gt;STMStudio&lt;/a&gt;, which is, or rather was a great tool. Unfortunately, ST stopped supporting it which means there are some annoying bugs, and it doesn&#39;t work well with mangled c++ object names. Also, it works only on Windows and with STM32 microcontrollers which is a big downside. If you&#39;ve ever used it you probably see how big of an inspiration it was for creating MCUViewer :) ST&#39;s other project in this area - &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubemonitor.html&#34;&gt;Cube Monitor&lt;/a&gt; - has, in my opinion, too much overhead on adding variables, plots and writing values. I think it&#39;s designed for creating dashboards, and thus it serves a very different purpose. On top of that, I think the plot manipulation is much worse compared to STMStudio or MCUViewer.&lt;/p&gt; &#xA;&lt;p&gt;Since the Trace Viewer module was added MCUViewer has a unique property of displaying SWO trace data which both CubeMonitor and STMStudio currently lack. Moreover it now fully supports JLink programmer as well.&lt;/p&gt; &#xA;&lt;h2&gt;Support and sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Maintaining and improving MCUViewer takes a lot of time and effort. If you find MCUViewer useful in your project or work you can support the development by becoming a &lt;a href=&#34;https://github.com/sponsors/klonyyy&#34;&gt;Github sponsor&lt;/a&gt; or simply &lt;a href=&#34;https://buymeacoffee.com/klonyyy&#34;&gt;&#34;buying a coffe&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in special features, priority feature implementations, or support you can contact me directly.&lt;/p&gt; &#xA;&lt;h2&gt;3rd party projects used in MCUViewer&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stlink-org/stlink&#34;&gt;stlink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libusb/libusb&#34;&gt;libusb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;imgui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/epezent/implot&#34;&gt;implot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pulzed/mINI&#34;&gt;mINI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btzy/nativefiledialog-extended&#34;&gt;nfd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;spdlog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.segger.com/downloads/jlink/&#34;&gt;SEGGER JLink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIUtils/CLI11&#34;&gt;CLI11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>