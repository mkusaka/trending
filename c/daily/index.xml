<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-08T01:31:10Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xkaneiki/CVE-2023-0386</title>
    <updated>2023-05-08T01:31:10Z</updated>
    <id>tag:github.com,2023-05-08:/xkaneiki/CVE-2023-0386</id>
    <link href="https://github.com/xkaneiki/CVE-2023-0386" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CVE-2023-0386在ubuntu22.04上的提权&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;编译&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;使用&lt;/h1&gt; &#xA;&lt;p&gt;启动两个终端，在第一个终端中输入&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./fuse ./ovlcap/lower ./gc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在第二个终端输入&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;效果&lt;/h1&gt; &#xA;&lt;p&gt;提权效果 &lt;img src=&#34;https://raw.githubusercontent.com/xkaneiki/CVE-2023-0386/main/result.jpeg&#34; alt=&#34;展示效果&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shchmue/Lockpick</title>
    <updated>2023-05-08T01:31:10Z</updated>
    <id>tag:github.com,2023-05-08:/shchmue/Lockpick</id>
    <link href="https://github.com/shchmue/Lockpick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nintendo Switch encryption key derivation homebrew&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lockpick&lt;/h1&gt; &#xA;&lt;p&gt;Lockpick is a ground-up C++17 rewrite of homebrew key derivation software, namely &lt;a href=&#34;https://github.com/tesnos/kezplez-nx&#34;&gt;kezplez-nx&lt;/a&gt;. It also dumps titlekeys. This will dump all keys through &lt;code&gt;*_key_05&lt;/code&gt; on firmwares below &lt;code&gt;6.2.0&lt;/code&gt; and through &lt;code&gt;*_key_06&lt;/code&gt; on &lt;code&gt;6.2.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Due to key generation changes introduced in &lt;code&gt;7.0.0&lt;/code&gt;, Lockpick is not able to dump keys ending in 07 at all. Furthermore, unfortunately the public method to dump &lt;code&gt;tsec_root_key&lt;/code&gt; is only available on firmware &lt;code&gt;6.2.0&lt;/code&gt; so &lt;code&gt;7.x&lt;/code&gt; consoles can only dump through keys ending in 05.&lt;/p&gt; &#xA;&lt;h1&gt;What this software does differently&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dumps &lt;code&gt;titlekeys&lt;/code&gt; and SD seed&lt;/li&gt; &#xA; &lt;li&gt;Dumps all keys through &lt;code&gt;6.2.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uses the superfast &lt;code&gt;xxHash&lt;/code&gt; instead of &lt;code&gt;sha256&lt;/code&gt; when searching exefs for keys for a ~5x speed improvement&lt;/li&gt; &#xA; &lt;li&gt;Gets all possible keys from running process memory - this means no need to decrypt &lt;code&gt;Package2&lt;/code&gt; at all, let alone decompress &lt;code&gt;KIP&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;Gets bis keys and &lt;code&gt;header_key&lt;/code&gt; without &lt;code&gt;tsec&lt;/code&gt;, &lt;code&gt;sbk&lt;/code&gt;, &lt;code&gt;master_key_00&lt;/code&gt; or &lt;code&gt;aes&lt;/code&gt; sources. Shoutout to exelix11 for using this method in &lt;a href=&#34;https://github.com/exelix11/SwitchThemeInjector&#34;&gt;SwitchThemeInjector&lt;/a&gt;! Homebrew devs should be doing this instead of requiring users to provide key files!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/CTCaer/hekate/releases&#34;&gt;Hekate v4.5+&lt;/a&gt; to dump TSEC and fuses: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Push hekate payload bin using &lt;a href=&#34;https://github.com/rajkosto/TegraRcmSmash&#34;&gt;TegraRCMSmash&lt;/a&gt;/&lt;a href=&#34;https://github.com/eliboa/TegraRcmGUI&#34;&gt;TegraRCMGUI&lt;/a&gt;/modchip/injector&lt;/li&gt; &#xA;   &lt;li&gt;Using the &lt;code&gt;VOL&lt;/code&gt; and &lt;code&gt;Power&lt;/code&gt; buttons to navigate, select &lt;code&gt;Console info...&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select &lt;code&gt;Print fuse info&lt;/code&gt; (&lt;em&gt;not&lt;/em&gt; &lt;code&gt;kfuse info&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;Power&lt;/code&gt; to save fuse info to SD card&lt;/li&gt; &#xA;   &lt;li&gt;Select &lt;code&gt;Print TSEC keys&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;Power&lt;/code&gt; to save TSEC keys to SD card&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Launch CFW of choice&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Homebrew Menu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;Lockpick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the resulting &lt;code&gt;/switch/prod.keys&lt;/code&gt; file as needed and rename if required by any software you&#39;re using&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You may instead use &lt;a href=&#34;https://github.com/rajkosto/biskeydump&#34;&gt;biskeydump&lt;/a&gt; and dump to SD to get all keys prior to the 6.2.0 generation - all keys up to those ending in 05. Lockpick will dump all keys up to that point regardless which firmware it&#39;s run on.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get keys ending in 06, you must have firmware &lt;code&gt;6.2.0&lt;/code&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;No one knows &lt;code&gt;package1_key_06&lt;/code&gt;, it&#39;s derived and erased fully within the encrypted TSEC payload. While there&#39;s a way to extricate &lt;code&gt;tsec_root_key&lt;/code&gt; due to the way it&#39;s used, this is unfortunately not true of the &lt;code&gt;package1&lt;/code&gt; key&lt;/li&gt; &#xA; &lt;li&gt;If for some reason you dump TSEC keys on &lt;code&gt;6.2.0&lt;/code&gt; and not fuses (&lt;code&gt;secure_boot_key&lt;/code&gt;) you will still get everything except any of the &lt;code&gt;package1&lt;/code&gt; or keyblob keys (without &lt;code&gt;secure_boot_key&lt;/code&gt;, you can&#39;t decrypt keyblobs and that&#39;s where &lt;code&gt;package1&lt;/code&gt; keys live)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Release built with &lt;a href=&#34;https://github.com/switchbrew/libnx&#34;&gt;libnx release v2.4.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Uses &lt;code&gt;freetype&lt;/code&gt; which comes with &lt;code&gt;switch-portlibs&lt;/code&gt; via &lt;code&gt;devkitPro pacman&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S libnx switch-portlibs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to build.&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tèsnos! For making &lt;a href=&#34;https://github.com/tesnos/kezplez-nx&#34;&gt;kezplez-nx&lt;/a&gt;, being an all-around cool and helpful person and open to my contributions, not to mention patient with my &lt;em&gt;enthusiasm&lt;/em&gt;. kezplez taught me an absolute TON about homebrew.&lt;/li&gt; &#xA; &lt;li&gt;SciresM for &lt;a href=&#34;https://github.com/SciresM/hactool&#34;&gt;hactool&lt;/a&gt;, containing to my knowledge the first public key derivation &lt;em&gt;software&lt;/em&gt;, and for &lt;code&gt;get_titlekeys.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;roblabla for the original keys &lt;a href=&#34;https://gist.github.com/roblabla/d8358ab058bbe3b00614740dcba4f208&#34;&gt;gist&lt;/a&gt; and for believing in our habilities&lt;/li&gt; &#xA; &lt;li&gt;The folks in the &lt;a href=&#34;https://reswitched.team/&#34;&gt;ReSwitched&lt;/a&gt; Discord server for answering my innumerable questions while researching this (and having such a useful chat backlog!)&lt;/li&gt; &#xA; &lt;li&gt;The memory reading code from jakibaki&#39;s &lt;a href=&#34;https://github.com/jakibaki/sys-netcheat&#34;&gt;sys-netcheat&lt;/a&gt; was super useful for getting keys out of running process memory&lt;/li&gt; &#xA; &lt;li&gt;The System Save dumping methodology from Adubbz&#39; &lt;a href=&#34;https://github.com/Adubbz/Compelled-Disclosure&#34;&gt;Compelled Disclosure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shouts out to fellow key derivers: shadowninja108 for &lt;a href=&#34;https://github.com/shadowninja108/HACGUI&#34;&gt;HACGUI&lt;/a&gt;, Thealexbarney for &lt;a href=&#34;https://github.com/Thealexbarney/LibHac&#34;&gt;Libhac&lt;/a&gt;, and &lt;a href=&#34;https://github.com/rajkosto/&#34;&gt;rajkosto&lt;/a&gt; &lt;span&gt;👀&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/misson20000&#34;&gt;misson2000&lt;/a&gt; for help with &lt;code&gt;std::invoke&lt;/code&gt; to get the function timer working&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simontime&#34;&gt;Simon&lt;/a&gt; for the &lt;code&gt;eticket_rsa_kek&lt;/code&gt; derivation method and for suggesting invoking &lt;code&gt;spl&lt;/code&gt; for faster titlekey derivation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SciresM&#34;&gt;SciresM&lt;/a&gt; for the libnx aes library&lt;/li&gt; &#xA; &lt;li&gt;The constantly-improving docs on &lt;a href=&#34;https://switchbrew.org/wiki/&#34;&gt;Switchbrew wiki&lt;/a&gt; and &lt;a href=&#34;https://switchbrew.github.io/libnx/files.html&#34;&gt;libnx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Literally the friends I made along the way! I came to the scene late and I&#39;ve still managed to meet some wonderful people :) Thanks for all the help testing, making suggestions, and cheerleading!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Licenses&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;es&lt;/code&gt; ipc code is from &lt;a href=&#34;https://github.com/Adubbz/Tinfoil&#34;&gt;Tinfoil&lt;/a&gt; licensed under &lt;a href=&#34;https://github.com/Adubbz/Tinfoil/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FatFs R0.13c&lt;/code&gt; is located &lt;a href=&#34;http://elm-chan.org/fsw/ff/00index_e.html&#34;&gt;here&lt;/a&gt; and is licensed under its own &lt;a href=&#34;https://raw.githubusercontent.com/shchmue/Lockpick/master/source/fatfs/LICENSE.txt&#34;&gt;BSD-style license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simple &lt;code&gt;xxHash&lt;/code&gt; implementation is from &lt;a href=&#34;https://github.com/stbrumme/xxhash&#34;&gt;stbrumme&lt;/a&gt; licensed under &lt;a href=&#34;https://github.com/stbrumme/xxhash/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Padlock icon is from &lt;a href=&#34;https://icons8.com/&#34;&gt;Icons8&lt;/a&gt; licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nd/3.0/&#34;&gt;Creative Commons Attribution-NoDerivs 3.0 Unported&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>YeeZTech/YeeZ-Privacy-Computing</title>
    <updated>2023-05-08T01:31:10Z</updated>
    <id>tag:github.com,2023-05-08:/YeeZTech/YeeZ-Privacy-Computing</id>
    <link href="https://github.com/YeeZTech/YeeZ-Privacy-Computing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fidelius - YeeZ Privacy Computing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fidelius - 基于可信执行环境的熠智隐私计算中间件&lt;/h1&gt; &#xA;&lt;p&gt;English / &lt;a href=&#34;https://raw.githubusercontent.com/YeeZTech/YeeZ-Privacy-Computing/master/doc/README_ZH.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Fidelius - YeeZ Privacy Computing&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Fidelius has launched an all-in-one privacy protection solution for data collaboration based on the idea of &#34;data availability but not visible.&#34; This solution effectively ensures the consistency of original data, controllability of computing logic, correctness of computing results, and privacy protection.&lt;/p&gt; &#xA;&lt;p&gt;The following figure describes the abstract process of data collaboration based on Fidelius. The participants include the data provider and the data user. Fidelius middleware runs on both the data provider and the data user, and the two parties interact with Fidelius to achieve data collaboration. The original data will not leave the Fidelius middleware of the data provider, fundamentally avoiding the problem of privacy data leakage.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/YeeZTech/YeeZ-Privacy-Computing/master/doc/Fidelius-Infr.png&#34; alt=&#34;drawing&#34; width=&#34;61.8%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;In the figure, the trusted third party can choose to be a blockchain network. As the blockchain itself has characteristics such as a decentralized network and public verifiability, Fidelius can use it as a trusted transmission channel and data computing verification platform.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://download.yeez.tech/doc/Fidelius_Introduction.pdf&#34;&gt;Fidelius: YeeZ Privacy Protection for Data Collaboration - A Blockchain based Solution&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Fidelius runs on Intel SGX and requires confirmation that the hardware environment is equipped with a supported central processing unit (CPU), BIOS settings, and the installation of drivers and related software. Even without the required hardware environment, the debug version can still run after installing the Intel SGX SDK.&lt;/p&gt; &#xA;&lt;p&gt;If you have the relevant hardware, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/YeeZTech/YeeZ-Privacy-Computing/master/doc/Release_EN.md&#34;&gt;documentation&lt;/a&gt; and run the Fidelius release version.&lt;/p&gt; &#xA;&lt;p&gt;If you do not have the relevant hardware, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/YeeZTech/YeeZ-Privacy-Computing/master/doc/Debug_EN.md&#34;&gt;documentation&lt;/a&gt; and run the Fidelius debug version.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc-fidelius.yeez.tech/index.html&#34;&gt;doxygen documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc-dianshu.yeez.tech/index.php/Fidelius&#34;&gt;wiki documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;YeeZ-Privacy-Computing&lt;/code&gt; library (i.e. all code outside of the &lt;code&gt;toolkit&lt;/code&gt; directory) is licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt;, also included in our repository in the &lt;code&gt;COPYING.APACHE&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;YeeZ-Privacy-Computing&lt;/code&gt; binaries (i.e. all code inside of the &lt;code&gt;toolkit&lt;/code&gt; directory) is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GNU General Public License v3.0&lt;/a&gt;, also included in our repository in the &lt;code&gt;COPYING&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, feel free to create an issue at our Issue page (e.g., documentation, new idea and proposal).&lt;/p&gt; &#xA;&lt;p&gt;This is an active open source project for everyone, and we are open to everyone who want to use this system or contribute to it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/YeeZTech/YeeZ-Privacy-Computing/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=YeeZTech/YeeZ-Privacy-Computing&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wechat Official Account:&lt;/li&gt; &#xA; &lt;li&gt; &lt;img width=&#34;213&#34; alt=&#34;CleanShot 2023-02-02 at 14 21 19@2x&#34; src=&#34;https://user-images.githubusercontent.com/5715598/216247527-d60fbcc1-0de8-4a6c-88ba-9a1f51f903fc.png&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>