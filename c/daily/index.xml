<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-20T01:29:07Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KreitinnSoftware/MiceWine-Application</title>
    <updated>2024-12-20T01:29:07Z</updated>
    <id>tag:github.com,2024-12-20:/KreitinnSoftware/MiceWine-Application</id>
    <link href="https://github.com/KreitinnSoftware/MiceWine-Application" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MiceWine is a project that aims to run Windows applications and games on Android smartphones.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;MiceWine Emulator&lt;/h2&gt; &#xA;&lt;p&gt;MiceWine is a project that aims to run Windows applications and games on Android smartphones.&lt;/p&gt; &#xA;&lt;p&gt;It uses a customized build of Wine compiled for Android and Box64 to run in the best possible way.&lt;/p&gt; &#xA;&lt;p&gt;Actually in constant development.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s use a XServer based on Termux-X11&lt;/p&gt; &#xA;&lt;h3&gt;Compatible Android Versions&lt;/h3&gt; &#xA;&lt;p&gt;Support Android 10+&lt;/p&gt; &#xA;&lt;h3&gt;Compatible GPUs&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;GPU&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;   &lt;th&gt;Driver&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adreno 7xx&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;   &lt;td&gt;Turnip/Zink&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adreno 6xx&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;   &lt;td&gt;Turnip/Zink&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Others&lt;/td&gt; &#xA;   &lt;td&gt;Parcially Supported&lt;/td&gt; &#xA;   &lt;td&gt;Native/Zink (Experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;About Native Vulkan on Non-Adreno GPUs is Experimental, Require Some Testing&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Open Source Applications:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ptitSeb/box64&#34;&gt;Box64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.winehq.org/wine/wine&#34;&gt;WineHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-x11&#34;&gt;Termux-X11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/mesa/mesa&#34;&gt;Mesa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ClassiCube/ClassiCube</title>
    <updated>2024-12-20T01:29:07Z</updated>
    <id>tag:github.com,2024-12-20:/ClassiCube/ClassiCube</id>
    <link href="https://github.com/ClassiCube/ClassiCube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom Minecraft Classic / ClassiCube client written in C from scratch (formerly ClassicalSharp in C#)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ClassiCube is a custom Minecraft Classic compatible client written in C from scratch.&lt;br&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] &lt;strong&gt;ClassiCube is not affiliated with (or supported by) Mojang AB, Minecraft, or Microsoft in any way.&lt;/strong&gt; &lt;br&gt;&lt;br&gt; &lt;strong&gt;ClassiCube is not trying to replicate modern Minecraft.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;It will never support survival, Minecraft accounts, or modern Minecraft servers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;What ClassiCube is&lt;/h1&gt; &#xA;&lt;p&gt;ClassiCube aims to replicate the 2009 Minecraft Classic client while offering &lt;strong&gt;optional&lt;/strong&gt; enhancements to improve gameplay. ClassiCube can run on &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/#supported-systems&#34;&gt;many systems&lt;/a&gt;, including desktop, web, mobile, and even some consoles.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Features (click to expand)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Much better performance and minimal memory usage compared to original Minecraft Classic&lt;/li&gt; &#xA;  &lt;li&gt;Optional enhancements including custom blocks, models, and environment colors&lt;/li&gt; &#xA;  &lt;li&gt;Partially supports some features of Minecraft Classic versions before 0.30&lt;/li&gt; &#xA;  &lt;li&gt;Works with effectively all graphics cards that support OpenGL or Direct3D 9&lt;/li&gt; &#xA;  &lt;li&gt;Runs on Windows, macOS, Linux, Android, iOS, and in a web browser&lt;/li&gt; &#xA;  &lt;li&gt;Also runs on OpenBSD, FreeBSD, NetBSD, Solaris, Haiku, IRIX, SerenityOS&lt;/li&gt; &#xA;  &lt;li&gt;Although in various stages of early development, also runs on various consoles&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;download ClassiCube&lt;/strong&gt; &lt;a href=&#34;https://www.classicube.net/download/&#34;&gt;here&lt;/a&gt; and the very latest builds &lt;a href=&#34;https://www.classicube.net/nightlies/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ClassiCube/ClassiCube/assets/6509348/eedee53f-f53e-456f-b51c-92c62079eee0&#34; alt=&#34;classic&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ClassiCube/ClassiCube/assets/6509348/b2fe0e2b-5d76-41ab-909f-048d0ad15f37&#34; alt=&#34;enhanced&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;We need your help&lt;/h1&gt; &#xA;&lt;p&gt;ClassiCube strives to replicate the original Minecraft Classic experience by &lt;strong&gt;strictly adhering to &lt;a href=&#34;https://en.wikipedia.org/wiki/Clean_room_design&#34;&gt;clean room&lt;/a&gt; reverse engineering approach&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in documenting or verifying the behaviour of the original Minecraft Classic, please get in contact on the &lt;a href=&#34;https://classicube.net/discord&#34;&gt;ClassiCube Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to play&lt;/h1&gt; &#xA;&lt;p&gt;Initially, you will need to run ClassiCube.exe to download the required assets from minecraft.net and classicube.net.&lt;br&gt; Just click &#39;OK&#39; to the dialog menu that appears when you start the launcher.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When running from within VirtualBox, disable Mouse Integration, otherwise the in-game camera won&#39;t work properly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Singleplayer mode&lt;/strong&gt; Run ClassiCube.exe, then click Singleplayer at the main menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multiplayer mode&lt;/strong&gt; Run ClassiCube.exe. You can connect to LAN/locally hosted servers, and classicube.net servers if you have a &lt;a href=&#34;https://www.classicube.net/&#34;&gt;ClassiCube account&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;Stuck on OpenGL 1.1?&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The most common reason for being stuck on OpenGL 1.1 is non-working GPU drivers - so if possible, you should try either installing or updating the drivers for your GPU.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Windows, you can still run the OpenGL build of ClassiCube anyways. &lt;br&gt; (You can try downloading and using the MESA software renderer from &lt;a href=&#34;http://download.qt.io/development_releases/prebuilt/llvmpipe/windows/&#34;&gt;here&lt;/a&gt; for slightly better performance though)&lt;/li&gt; &#xA; &lt;li&gt;On other operating systems, you will have to &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/#Compiling&#34;&gt;compile the game yourself&lt;/a&gt;. &lt;br&gt; Don&#39;t forget to add &lt;code&gt;-DCC_BUILD_GL11&lt;/code&gt; to the compilation command line so that the compiled game supports OpenGL 1.1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported systems&lt;/h1&gt; &#xA;&lt;p&gt;ClassiCube runs on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows - 95 and later&lt;/li&gt; &#xA; &lt;li&gt;macOS - 10.5 or later (can be compiled for 10.3/10.4 though)&lt;/li&gt; &#xA; &lt;li&gt;Linux - needs &lt;code&gt;libcurl&lt;/code&gt; and &lt;code&gt;libopenal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android - 2.3 or later&lt;/li&gt; &#xA; &lt;li&gt;iOS - 8.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Most web browsers (even runs on IE11)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also runs on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry Pi - needs &lt;code&gt;libcurl&lt;/code&gt; and &lt;code&gt;libopenal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD - needs &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal-soft&lt;/code&gt; packages (can &lt;a href=&#34;https://www.classicube.net/download/#dl-fbsd&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NetBSD - needs &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal-soft&lt;/code&gt; packages (can &lt;a href=&#34;https://www.classicube.net/download/#dl-nbsd&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD - needs &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal&lt;/code&gt; packages&lt;/li&gt; &#xA; &lt;li&gt;Solaris - needs &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal&lt;/code&gt; packages&lt;/li&gt; &#xA; &lt;li&gt;Haiku - needs &lt;code&gt;openal&lt;/code&gt; package (if you have a GitHub account, can &lt;a href=&#34;https://github.com/ClassiCube/ClassiCube/actions/workflows/build_haiku.yml&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;BeOS - untested on actual hardware&lt;/li&gt; &#xA; &lt;li&gt;IRIX - needs &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal&lt;/code&gt; packages&lt;/li&gt; &#xA; &lt;li&gt;SerenityOS - needs &lt;code&gt;SDL2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Classic Mac OS (System 7 and later)&lt;/li&gt; &#xA; &lt;li&gt;Dreamcast - unfinished, but usable (can &lt;a href=&#34;https://www.classicube.net/download/dreamcast&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Saturn - unfinished, major rendering and &lt;strong&gt;stability issues&lt;/strong&gt; (can &lt;a href=&#34;https://www.classicube.net/download/saturn&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Switch - unfinished, but usable (can &lt;a href=&#34;https://www.classicube.net/download/switch&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Wii U - unfinished, major issues, &lt;strong&gt;broken on real hardware&lt;/strong&gt; (can &lt;a href=&#34;https://www.classicube.net/download/wiiu&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Wii - unfinished, but usable (can &lt;a href=&#34;https://www.classicube.net/download/wii&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GameCube - unfinished, but usable (can &lt;a href=&#34;https://www.classicube.net/download/gamecube&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 64 - unfinished, moderate rendering issues (can &lt;a href=&#34;https://www.classicube.net/download/n64&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;3DS - unfinished, but usable (can &lt;a href=&#34;https://www.classicube.net/download/3ds&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;DS/DSi - unfinished, rendering issues (can &lt;a href=&#34;https://www.classicube.net/download/nds&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PS Vita - unfinished, rendering issues (can &lt;a href=&#34;https://www.classicube.net/download/vita&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PSP - unfinished, rendering issues (can &lt;a href=&#34;https://www.classicube.net/download/psp&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PS3 - unfinished, rendering issues (can &lt;a href=&#34;https://www.classicube.net/download/ps3&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PS2 - unfinished, major rendering and &lt;strong&gt;stability issues&lt;/strong&gt; (can &lt;a href=&#34;https://www.classicube.net/download/ps2&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PS1 - unfinished, major rendering and &lt;strong&gt;stability issues&lt;/strong&gt; (can &lt;a href=&#34;https://www.classicube.net/download/ps1&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Xbox 360 - completely unfinished, &lt;strong&gt;broken on real hardware&lt;/strong&gt; (can &lt;a href=&#34;https://www.classicube.net/download/360&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Xbox - unfinished, major rendering issues (can &lt;a href=&#34;https://www.classicube.net/download/xbox&#34;&gt;download from here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compiling&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The instructions below automatically compile ClassiCube with the recommended defaults for the platform. &lt;br&gt; If you (not recommended) want to override the defaults (e.g. to compile OpenGL build on Windows), see &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/doc/overriding-defaults.md&#34;&gt;here&lt;/a&gt; for details.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling - Windows&lt;/h2&gt; &#xA;&lt;h5&gt;Using Visual Studio&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open ClassiCube.sln &lt;em&gt;(File -&amp;gt; Open -&amp;gt; Project/Solution)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile/Build it &lt;em&gt;(Build -&amp;gt; Build Solution)&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you get a &lt;code&gt;The Windows SDK version 5.1 was not found&lt;/code&gt; compilation error, &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/doc/compile-fixes.md#visual-studio-unsupported-platform-toolset&#34;&gt;see here for how to fix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Using Visual Studio (command line)&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &#39;Developer Tools for Visual Studio&#39; from Start Menu&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory with ClassiCube&#39;s source code&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cl.exe *.c /link user32.lib gdi32.lib winmm.lib dbghelp.lib shell32.lib comdlg32.lib /out:ClassiCube.exe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Using MinGW-w64&lt;/h5&gt; &#xA;&lt;p&gt;Assuming that you used the installer from &lt;a href=&#34;https://sourceforge.net/projects/mingw-w64/&#34;&gt;https://sourceforge.net/projects/mingw-w64/&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install MinGW-W64&lt;/li&gt; &#xA; &lt;li&gt;Use either &lt;em&gt;Run Terminal&lt;/em&gt; from Start Menu or run &lt;em&gt;mingw-w64.bat&lt;/em&gt; in the installation folder&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory with ClassiCube&#39;s source code&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;gcc -fno-math-errno *.c -o ClassiCube.exe -mwindows -lwinmm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Using MinGW&lt;/h5&gt; &#xA;&lt;p&gt;Assuming that you used the installer from &lt;a href=&#34;https://osdn.net/projects/mingw/&#34;&gt;https://osdn.net/projects/mingw/&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install MinGW. You need mingw32-base-bin and msys-base-bin packages.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;em&gt;msys.bat&lt;/em&gt; in the &lt;em&gt;C:\MinGW\msys\1.0&lt;/em&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory with ClassiCube&#39;s source code&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;gcc -fno-math-errno *.c -o ClassiCube.exe -mwindows -lwinmm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Using TCC (Tiny C Compiler)&lt;/h5&gt; &#xA;&lt;p&gt;Setting up TCC:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and extract &lt;code&gt;tcc-0.9.27-win64-bin.zip&lt;/code&gt; from &lt;a href=&#34;https://bellard.org/tcc/&#34;&gt;https://bellard.org/tcc/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;code&gt;winapi-full-for-0.9.27.zip&lt;/code&gt; from &lt;a href=&#34;https://bellard.org/tcc/&#34;&gt;https://bellard.org/tcc/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;winapi&lt;/code&gt; folder and &lt;code&gt;_mingw_dxhelper.h&lt;/code&gt; from &lt;code&gt;winapi-full-for-0.9.27.zip&lt;/code&gt; into TCC&#39;s &lt;code&gt;include&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Compiling with TCC:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the directory with ClassiCube&#39;s source code&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;ExtMath.c&lt;/code&gt;, change &lt;code&gt;fabsf&lt;/code&gt; to &lt;code&gt;fabs&lt;/code&gt; and &lt;code&gt;sqrtf&lt;/code&gt; to &lt;code&gt;sqrt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;tcc.exe -o ClassiCube.exe *.c -lwinmm -lgdi32 -luser32 -lcomdlg32 -lshell32&lt;/code&gt;&lt;br&gt; (Note: You may need to specify the full path to &lt;code&gt;tcc.exe&lt;/code&gt; instead of just &lt;code&gt;tcc.exe&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compiling - Linux&lt;/h2&gt; &#xA;&lt;h5&gt;Using gcc/clang&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install X11, XInput2, and OpenGL development libraries if necessary. &lt;br&gt; For Ubuntu, these are the &lt;code&gt;libx11-dev&lt;/code&gt;, &lt;code&gt;libxi-dev&lt;/code&gt; and &lt;code&gt;libgl1-mesa-dev&lt;/code&gt; packages&lt;/li&gt; &#xA; &lt;li&gt;Run either: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;make linux&lt;/code&gt; or&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cc -fno-math-errno src/*.c -o ClassiCube -rdynamic -lpthread -lX11 -lXi -lGL -ldl&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Cross compiling for Windows (32 bit):&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install MinGW-w64 if necessary. (Ubuntu: &lt;code&gt;gcc-mingw-w64&lt;/code&gt; package)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;i686-w64-mingw32-gcc -fno-math-errno src/*.c -o ClassiCube.exe -mwindows -lwinmm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Cross compiling for Windows (64 bit):&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install MinGW-w64 if necessary. (Ubuntu: &lt;code&gt;gcc-mingw-w64&lt;/code&gt; package)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;x86_64-w64-mingw32-gcc -fno-math-errno src/*.c -o ClassiCube.exe -mwindows -lwinmm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Raspberry Pi&lt;/h5&gt; &#xA;&lt;p&gt;Although the regular linux compiliation flags will work fine, to take full advantage of the hardware:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gcc -fno-math-errno src/*.c -o ClassiCube -DCC_BUILD_RPI -rdynamic -lpthread -lX11 -lXi -lEGL -lGLESv2 -ldl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling - macOS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install a C compiler if necessary. The easiest way of obtaining one is by installing &lt;strong&gt;Xcode&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run either: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;make darwin&lt;/code&gt; or&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cc -fno-math-errno src/*.c src/*.m -o ClassiCube -framework Cocoa -framework OpenGL -framework IOKit -lobjc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Using Xcode GUI&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;misc/macOS/CCMAC.xcodeproj&lt;/code&gt; project in Xcode&lt;/li&gt; &#xA; &lt;li&gt;Compile the project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compiling - for Android&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: If you are distributing a modified version, &lt;strong&gt;please change the package ID from &lt;code&gt;com.classicube.android.client&lt;/code&gt; to something else&lt;/strong&gt; - otherwise Android users won&#39;t be able to have both ClassiCube and your modified version installed at the same time on their Android device&lt;/p&gt; &#xA;&lt;h5&gt;Using Android Studio GUI&lt;/h5&gt; &#xA;&lt;p&gt;Open &lt;code&gt;android&lt;/code&gt; folder in Android Studio (TODO explain more detailed)&lt;/p&gt; &#xA;&lt;h5&gt;Using command line (gradle)&lt;/h5&gt; &#xA;&lt;p&gt;Run &lt;code&gt;gradlew&lt;/code&gt; in android folder (TODO explain more detailed)&lt;/p&gt; &#xA;&lt;h2&gt;Compiling - for iOS&lt;/h2&gt; &#xA;&lt;p&gt;iOS version will have issues as it&#39;s incomplete and only tested in iOS Simulator&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you are distributing a modified version, &lt;strong&gt;please change the bundle ID from &lt;code&gt;com.classicube.ios.client&lt;/code&gt; to something else&lt;/strong&gt; - otherwise iOS users won&#39;t be able to have both ClassiCube and your modified version installed at the same time on their iOS device&lt;/p&gt; &#xA;&lt;h5&gt;Using Xcode GUI&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;misc/ios/CCIOS.xcodeproj&lt;/code&gt; project in Xcode&lt;/li&gt; &#xA; &lt;li&gt;Compile the project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Using command line (Xcode)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;xcodebuild -sdk iphoneos -configuration Debug&lt;/code&gt; (TODO explain more detailed)&lt;/p&gt; &#xA;&lt;h2&gt;Compiling - webclient&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install emscripten if necessary.&lt;/li&gt; &#xA; &lt;li&gt;Run either: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;make web&lt;/code&gt; or&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;emcc src/*.c -s ALLOW_MEMORY_GROWTH=1 -s TOTAL_STACK=1Mb --js-library interop_web.js&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The generated javascript file has some issues. &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/doc/compile-fixes.md#webclient-patches&#34;&gt;See here for how to fix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details on how to integrate the webclient into a website, see &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/doc/hosting-webclient.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h2&gt;Compiling - consoles&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;p&gt;All console ports need assistance from someone experienced with homebrew development - if you&#39;re interested, please get in contact on the &lt;a href=&#34;https://classicube.net/discord&#34;&gt;ClassiCube Discord.&lt;/a&gt;&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;h3&gt;Nintendo consoles (click to expand)&lt;/h3&gt;&lt;/summary&gt; &#xA;  &lt;h4&gt;Switch&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make switch&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/switchbrew/libnx&#34;&gt;libnx&lt;/a&gt; and &lt;a href=&#34;https://github.com/devkitPro/mesa&#34;&gt;mesa&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE: It is highly recommended that you install the precompiled devkitpro packages from &lt;a href=&#34;https://devkitpro.org/wiki/Getting_Started&#34;&gt;here&lt;/a&gt; - you need the &lt;code&gt;switch-dev&lt;/code&gt; group and the &lt;code&gt;switch-mesa switch-glm&lt;/code&gt; packages)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;Wii U&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make wiiu&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/devkitPro/wut/&#34;&gt;wut&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE: It is highly recommended that you install the precompiled devkitpro packages from &lt;a href=&#34;https://devkitpro.org/wiki/Getting_Started&#34;&gt;here&lt;/a&gt; - you need the &lt;code&gt;wiiu-dev&lt;/code&gt; group)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;3DS&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make 3ds&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/devkitPro/libctru&#34;&gt;libctru&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE: It is highly recommended that you install the precompiled devkitpro packages from &lt;a href=&#34;https://devkitpro.org/wiki/Getting_Started&#34;&gt;here&lt;/a&gt; - you need the &lt;code&gt;3ds-dev&lt;/code&gt; group)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;Wii&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make wii&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/devkitPro/libogc&#34;&gt;libogc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE: It is highly recommended that you install the precompiled devkitpro packages from &lt;a href=&#34;https://devkitpro.org/wiki/Getting_Started&#34;&gt;here&lt;/a&gt; - you need the &lt;code&gt;wii-dev&lt;/code&gt; group)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;GameCube&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make gamecube&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/devkitPro/libogc&#34;&gt;libogc&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE: It is highly recommended that you install the precompiled devkitpro packages from &lt;a href=&#34;https://devkitpro.org/wiki/Getting_Started&#34;&gt;here&lt;/a&gt; - you need the &lt;code&gt;gamecube-dev&lt;/code&gt; group)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;Nintendo DS/DSi&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make ds&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/blocksds/sdk&#34;&gt;BlocksDS&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;Nintendo 64&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make n64&lt;/code&gt;. You&#39;ll need the opengl branch of &lt;a href=&#34;https://github.com/DragonMinded/libdragon/tree/opengl&#34;&gt;libdragon&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;h3&gt;Sony consoles (click to expand)&lt;/h3&gt;&lt;/summary&gt; &#xA;  &lt;h4&gt;PlayStation Vita&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make vita&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://vitasdk.org/&#34;&gt;vitasdk&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;PlayStation Portable&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make psp&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/pspdev/pspsdk&#34;&gt;pspsdk&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE: It is recommended that you install the precompiled pspsdk version from &lt;a href=&#34;https://github.com/pspdev/pspdev/releases&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;PlayStation 3&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make ps3&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/ps3dev/PSL1GHT&#34;&gt;PSL1GHT&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;PlayStation 2&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make ps2&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/ps2dev/ps2sdk&#34;&gt;ps2sdk&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;PlayStation 1&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make ps1&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/Lameguy64/PSn00bSDK/&#34;&gt;PSn00bSDK&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;h3&gt;Microsoft consoles (click to expand)&lt;/h3&gt;&lt;/summary&gt; &#xA;  &lt;h4&gt;Xbox 360&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make 360&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/Free60Project/libxenon&#34;&gt;libxenon&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;Xbox (original)&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make xbox&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/XboxDev/nxdk&#34;&gt;nxdk&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;h3&gt;SEGA consoles (click to expand)&lt;/h3&gt;&lt;/summary&gt; &#xA;  &lt;h3&gt;SEGA consoles&lt;/h3&gt; &#xA;  &lt;h4&gt;Dreamcast&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make dreamcast&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/KallistiOS/KallistiOS&#34;&gt;KallistiOS&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h4&gt;Saturn&lt;/h4&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;make saturn&lt;/code&gt;. You&#39;ll need &lt;a href=&#34;https://github.com/yaul-org/libyaul&#34;&gt;libyaul&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h2&gt;Compiling - other platforms (click to expand)&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;code&gt;libxi&lt;/code&gt;, &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal-soft&lt;/code&gt; packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make freebsd&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc src/*.c -o ClassiCube -I /usr/local/include -L /usr/local/lib -lm -lpthread -lX11 -lXi -lGL -lexecinfo&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;OpenBSD&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal&lt;/code&gt; packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make opensd&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc src/*.c -o ClassiCube -I /usr/X11R6/include -I /usr/local/include -L /usr/X11R6/lib -L /usr/local/lib -lm -lpthread -lX11 -lXi -lGL -lexecinfo&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;NetBSD&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal-soft&lt;/code&gt; packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make netbsd&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc src/*.c -o ClassiCube -I /usr/X11R7/include -I /usr/pkg/include -L /usr/X11R7/lib -L /usr/pkg/lib -lpthread -lX11 -lXi -lGL -lexecinfo&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;DragonflyBSD&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;code&gt;libxi&lt;/code&gt;, &lt;code&gt;libexecinfo&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;openal-soft&lt;/code&gt; packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make dragonfly&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc src/*.c -o ClassiCube -I /usr/local/include -L /usr/local/lib -lm -lpthread -lX11 -lXi -lGL -lexecinfo&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;Solaris&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install required packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make sunos&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;gcc -fno-math-errno src/*.c -o ClassiCube -lsocket -lX11 -lXi -lGL&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;Haiku&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;haiku_devel&lt;/code&gt;, &lt;code&gt;openal_devel&lt;/code&gt; packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make haiku&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc -fno-math-errno src/*.c src/*.cpp -o ClassiCube -lGL -lnetwork -lstdc++ -lbe -lgame -ltracker&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;BeOS&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install a C compiler&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make beos&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc -fno-math-errno src/*.c src/*.cpp -o ClassiCube -lGL -lbe -lgame -ltracker&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;IRIX&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install required packages if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make irix&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;gcc -fno-math-errno src/*.c -o ClassiCube -lGL -lX11 -lXi -lpthread -ldl`&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;SerenityOS&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install SDL2 port if needed&lt;/li&gt; &#xA;  &lt;li&gt;Run either: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make serenityos&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;cc src/*.c -o ClassiCube -lgl -lSDL2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;Classic Mac OS&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install Retro68&lt;/li&gt; &#xA;  &lt;li&gt;Run either &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;make macclassic_68k&lt;/code&gt; (For a M68k build)&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;make macclassic_ppc&lt;/code&gt; (For a PPC build)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;The PowerPC build will usually perform much better&lt;/p&gt; &#xA; &lt;h4&gt;Other systems&lt;/h4&gt; &#xA; &lt;p&gt;You&#39;ll have to write the necessary code. You should read &lt;code&gt;portability.md&lt;/code&gt; in doc folder.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Functions and variables in .h files are mostly documented.&lt;/p&gt; &#xA;&lt;p&gt;Further information (e.g. style) for ClassiCube&#39;s source code can be found in the doc and misc folders.&lt;/p&gt; &#xA;&lt;h4&gt;Known compilation errors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/doc/compile-fixes.md#common-compilation-errors&#34;&gt;Fixes for compilation errors when using musl or old glibc for C standard library&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Press escape (after joining a world) or pause to switch to the pause menu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pause menu -&amp;gt; Options -&amp;gt; Controls lists all of the key combinations used by the client.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note that toggling &#39;vsync&#39; to on will minimise CPU usage, while off will maximimise chunk loading speed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press F to cycle view distance. Lower view distances can improve performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the server has disabled hacks, key combinations such as fly and speed will not do anything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To see the list of built in commands, type &lt;code&gt;/client&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To see help for a given built in command, type &lt;code&gt;/client help &amp;lt;command name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h2&gt;Open source technologies (click to expand)&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://curl.se/&#34;&gt;curl&lt;/a&gt; - HTTP/HTTPS for linux and macOS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.freetype.org/&#34;&gt;FreeType&lt;/a&gt; - Font handling for all platforms&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;GCC&lt;/a&gt; - Compiles client for linux&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://mingw-w64.org/doku.php&#34;&gt;MinGW-w64&lt;/a&gt; - Compiles client for windows&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt; - Compiles client for macOS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://emscripten.org/&#34;&gt;Emscripten&lt;/a&gt; - Compiles client for web&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://renderdoc.org/&#34;&gt;RenderDoc&lt;/a&gt; - Graphics debugging&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.bearssl.org/&#34;&gt;BearSSL&lt;/a&gt; - SSL/TLS support on consoles&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/switchbrew/libnx&#34;&gt;libnx&lt;/a&gt; - Backend for Switch&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Ryujinx/Ryujinx&#34;&gt;Ryujinx&lt;/a&gt; - Emulator used to test Switch port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/devkitPro/wut/&#34;&gt;wut&lt;/a&gt; - Backend for Wii U&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/cemu-project/Cemu&#34;&gt;Cemu&lt;/a&gt; - Emulator used to test Wii U port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/devkitPro/libctru&#34;&gt;libctru&lt;/a&gt; - Backend for 3DS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/devkitPro/citro3d&#34;&gt;citro3D&lt;/a&gt; - Rendering backend for 3DS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/citra-emu/citra&#34;&gt;Citra&lt;/a&gt; - Emulator used to test 3DS port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/devkitPro/libogc&#34;&gt;libogc&lt;/a&gt; - Backend for Wii and GameCube&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/devkitPro/libfat&#34;&gt;libfat&lt;/a&gt; - Filesystem backend for Wii/GC&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/dolphin-emu/dolphin&#34;&gt;Dolphin&lt;/a&gt; - Emulator used to test Wii/GC port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/DragonMinded/libdragon&#34;&gt;libdragon&lt;/a&gt; - Backend for Nintendo 64&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ares-emulator/ares&#34;&gt;ares&lt;/a&gt; - Emulator used to test Nintendo 64 port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/blocksds/sdk&#34;&gt;BlocksDS&lt;/a&gt; - Backend for Nintendo DS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/melonDS-emu/melonDS&#34;&gt;melonDS&lt;/a&gt; - Emulator used to test Nintendo DS port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/vitasdk&#34;&gt;vitasdk&lt;/a&gt; - Backend for PS Vita&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Vita3K/Vita3K&#34;&gt;Vita3K&lt;/a&gt; - Emulator used to test Vita port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/pspdev/pspsdk&#34;&gt;pspsdk&lt;/a&gt; - Backend for PSP&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/hrydgard/ppsspp&#34;&gt;PPSSPP&lt;/a&gt; - Emulator used to test PSP port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ps3dev/PSL1GHT&#34;&gt;PSL1GHT&lt;/a&gt; - Backend for PS3&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/RPCS3/rpcs3&#34;&gt;RPCS3&lt;/a&gt; - Emulator used to test PS3 port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ps2dev/ps2sdk&#34;&gt;ps2sdk&lt;/a&gt; - Backend for PS2&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/PCSX2/pcsx2&#34;&gt;PCSX2&lt;/a&gt; - Emulator used to test PS2 port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Lameguy64/PSn00bSDK/&#34;&gt;PSn00bSDK&lt;/a&gt; - Backend for PS1&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/stenzek/duckstation&#34;&gt;duckstation&lt;/a&gt; - Emulator used to test PS1 port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Free60Project/libxenon&#34;&gt;libxenon&lt;/a&gt; - Backend for Xbox 360&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/XboxDev/nxdk&#34;&gt;nxdk&lt;/a&gt; - Backend for Xbox&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/xemu-project/xemu&#34;&gt;xemu&lt;/a&gt; - Emulator used to test Xbox port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Cxbx-Reloaded/Cxbx-Reloaded&#34;&gt;cxbx-reloaded&lt;/a&gt; - Emulator used to test Xbox port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/KallistiOS/KallistiOS&#34;&gt;KallistiOS&lt;/a&gt; - Backend for Dreamcast&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Kazade/GLdc&#34;&gt;GLdc&lt;/a&gt; - Basis of rendering backend for Dreamcast&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/flyinghead/flycast&#34;&gt;flycast&lt;/a&gt; - Emulator used to test Dreamcast port&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yaul-org/libyaul&#34;&gt;libyaul&lt;/a&gt; - Backend for Saturn&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://mednafen.github.io/&#34;&gt;mednafen&lt;/a&gt; - Emulator used to test Saturn port&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Sound Credits&lt;/h2&gt; &#xA;&lt;p&gt;ClassiCube uses sounds from &lt;a href=&#34;https://freesound.org&#34;&gt;Freesound.org&lt;/a&gt;&lt;br&gt; Full credits are listed in &lt;a href=&#34;https://raw.githubusercontent.com/ClassiCube/ClassiCube/master/doc/sound-credits.md&#34;&gt;doc/sound-credits.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>