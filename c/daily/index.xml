<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-21T01:32:37Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>palera1n/palera1n</title>
    <updated>2023-03-21T01:32:37Z</updated>
    <id>tag:github.com,2023-03-21:/palera1n/palera1n</id>
    <link href="https://github.com/palera1n/palera1n" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS 15.0-16.3.1 (semi-)tethered checkm8 jailbreak&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; height=&#34;120&#34; src=&#34;https://cdn.discordapp.com/attachments/1017854329887129611/1073858292159352862/thing.png&#34; alt=&#34;palera1n logo&#34; style=&#34;float: left;&#34;&gt; &#xA;&lt;h3 align=&#34;right&#34;&gt;An iOS 15.0-16.3.1 work-in-progress, &lt;br&gt;semi-tethered checkm8 jailbreak&lt;/h3&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://cdn.nickchan.lol/palera1n/c-rewrite/releases/v2.0.0-beta.4/palera1n.1.html&#34;&gt;Usage&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://github.com/palera1n/palera1n/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://dsc.gg/palera1n&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://twitter.com/palera1n&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;div class=&#34;clear&#34;&gt;&lt;/div&gt; &#xA;&lt;h3&gt;You can obtain v2.0.0 beta &lt;a href=&#34;https://github.com/palera1n/palera1n/releases&#34;&gt;here&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;If you need an older v2.0.0 beta, please get it &lt;a href=&#34;https://github.com/palera1n/palera1n-c/releases/tag/v2.0.0-beta.4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Warnings&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This palera1n rewrite has noticeably different arguments compared to the shell version of palera1n.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Highly recommended that you take a look at how to use palera1n-c &lt;a href=&#34;https://cdn.nickchan.lol/palera1n/c-rewrite/releases/v2.0.0-beta.1/palera1n.1.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This does &lt;strong&gt;NOT&lt;/strong&gt; support tethered creation or booting. You must use the older &lt;a href=&#34;https://github.com/palera1n/palera1n/tree/legacy&#34;&gt;shell version of palera1n&lt;/a&gt; (clone with &lt;code&gt;-b legacy&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We are &lt;strong&gt;NOT&lt;/strong&gt; responsible for any data loss, or the result of a device being bricked. The user of this program accepts responsibility should something happen to their device. While nothing should happen, jailbreaking has risks in itself.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If your device is stuck in recovery, please run futurerestore &lt;code&gt;--exit-recovery&lt;/code&gt;, or use &lt;code&gt;irecovery -n&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;palera1n will never work in VirtualBox, VMware or any virtual machine that doesn&#39;t support PCI passthrough.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A checkm8 vulnerable iOS device on iOS 15.x or 16.x (&lt;code&gt;A8&lt;/code&gt; - &lt;code&gt;A11&lt;/code&gt;)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using rootful, you will need &lt;strong&gt;5-10GB of space&lt;/strong&gt; for the fakefs. This means 16GB devices cannot use the full fakefs creation. However, you can change the arguments to &lt;code&gt;-Bf&lt;/code&gt; to create a fakefs with bind mounts, so it uses a smaller size, at the expense having unwritable parts in rarely-written paths, and then boot it&lt;/li&gt; &#xA;   &lt;li&gt;On &lt;code&gt;A11&lt;/code&gt;, &lt;strong&gt;you must disable your passcode while in the jailbroken state&lt;/strong&gt; (on iOS 16, you need to &lt;strong&gt;reset your device&lt;/strong&gt; before proceeding with palera1n).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;USB-A&lt;/strong&gt; cables are recommended to use, USB-C may have issues with palera1n and getting into DFU mode.&lt;/p&gt;&#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Technical explanation&lt;/summary&gt;The BootROM will only enter DFU if it detects USB voltage, which boils down to checking whether a certain pin is asserted from the Tristar chip. The Tristar does this based on the cable&#39;s accessory ID, and apparently USB-A and USB-C cables have different accessory IDs, and the one of the USB-C cables makes the Tristar not assert the USB voltage pin.&#xA;  &lt;/details&gt;&lt;p&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A Linux or macOS computer&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AMD CPUs (not AMD Mobile) have an issue [with (likely) their USB controllers] that causes them to have a very low success rate with checkm8. It is not recommended that you use them with palera1n. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If your device does not successfully jailbreak, try a computer with an Intel or other CPU&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Need help?&lt;/h1&gt; &#xA;&lt;p&gt;Make sure you provide full details on your device, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iDevice&lt;/li&gt; &#xA; &lt;li&gt;iOS Version&lt;/li&gt; &#xA; &lt;li&gt;Passcode enabled?&lt;/li&gt; &#xA; &lt;li&gt;Logs, if panicked then send latest &lt;code&gt;panic-full&lt;/code&gt; log from your iDevice.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using &lt;code&gt;-V&lt;/code&gt; and &lt;code&gt;-v&lt;/code&gt; would help with debugging.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://dsc.gg/palera1n&#34;&gt;Support Discord&lt;/a&gt;, and find the palera1n-c thread under #jailbreak &lt;a href=&#34;https://discord.com/channels/1028398973452570725/1074251283143344180&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;palera1n-c Contributors and Credits&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/asdfugil&#34;&gt;Nick Chan&lt;/a&gt; for the rewrite&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/itsnebulalol&#34;&gt;Nebula&lt;/a&gt; - palera1n owner and manager&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mineek&#34;&gt;Mineek&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/plooshi&#34;&gt;Tom&lt;/a&gt; for updated ploosh kpf and universal loader&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/llsc12&#34;&gt;Lakhan Lothiyi&lt;/a&gt; for palera1n loader app&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/checkra1n&#34;&gt;checkra1n&lt;/a&gt; for the base of the kpf&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ProcursusTeam&#34;&gt;the Procursus Team&lt;/a&gt; for the amazing &lt;a href=&#34;https://github.com/ProcursusTeam/Procursus&#34;&gt;bootstrap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/evelyneee&#34;&gt;Évelyne&lt;/a&gt; for &lt;a href=&#34;https://github.com/evelyneee/ellekit&#34;&gt;ElleKit&lt;/a&gt;, rootless tweak injection&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/sbingner&#34;&gt;Sam Bingner&lt;/a&gt; for &lt;a href=&#34;https://github.com/sbingner/substitute&#34;&gt;Substitute&lt;/a&gt;, rootful tweak injection&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Thank you so much to our Patreons that make the future development possible! You may sub &lt;a href=&#34;https://patreon.com/palera1n&#34;&gt;here&lt;/a&gt;, if you&#39;d like to.&lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/samh06&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://user-images.githubusercontent.com/18669106/206333607-881d7ca1-f3bf-4e18-b620-25de0c527315.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://havoc.app&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://docs.havoc.app/img/standard_icon.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/yyyyyy_public&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://cdn.discordapp.com/attachments/1054239098006683688/1072587455779328040/image.png?size=400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/0xSp00kyb0t&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://pbs.twimg.com/profile_images/1603601553226620935/1t4yD1bD_400x400.jpg&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chariz.com&#34;&gt;&lt;img width=&#34;64&#34; src=&#34;https://chariz.com/img/favicon.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/stars6220&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://pbs.twimg.com/profile_images/1621062976982728706/pWVZQ-NO_400x400.jpg&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheFunnyMan16&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://cdn.discordapp.com/attachments/1050068822473842778/1082867264807772281/IMG_3942.jpg&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/beast9265&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://avatars.githubusercontent.com/u/79794946?v=4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/0x7FF7&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://pbs.twimg.com/profile_images/1630818481191919618/8MWaJ1F7_400x400.jpg&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sideloadly.io/&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://sideloadly.io/icon.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blog.stevesec.com/&#34;&gt;&lt;img width=&#34;64&#34; style=&#34;border-radius: 25%;&#34; src=&#34;https://blog.stevesec.com/img/avatar.jpg&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GaryOderNichts/udpih</title>
    <updated>2023-03-21T01:32:37Z</updated>
    <id>tag:github.com,2023-03-21:/GaryOderNichts/udpih</id>
    <link href="https://github.com/GaryOderNichts/udpih" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploit for the Wii U&#39;s USB Host Stack&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;USB Descriptor Parsing Is Hard (UDPIH)&lt;/h1&gt; &#xA;&lt;p&gt;Exploits the Wii U&#39;s USB Host Stack descriptor parsing. Pronounced like &#34;mud pie&#34; without the M.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://garyodernichts.blogspot.com/2022/06/exploiting-wii-us-usb-descriptor-parsing.html&#34;&gt;The write-up can be found here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A Wii U&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;One of the devices listed below&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: Any other linux device capable of USB device emulation should work as well.&lt;br&gt; Prebuilt releases and instructions are only available for the Pico and Zero.&lt;br&gt; I will add more devices below which are confirmed to work.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported devices:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Raspberry Pi Pico or Zero&lt;/li&gt; &#xA; &lt;li&gt;A Nintendo Switch capable of running &lt;a href=&#34;https://github.com/GaryOderNichts/udpih_nxpayload&#34;&gt;udpih_nxpayload&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Pico&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest &lt;code&gt;udpih.uf2&lt;/code&gt; from the &lt;a href=&#34;https://github.com/GaryOderNichts/udpih/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Hold down the &lt;code&gt;BOOTSEL&lt;/code&gt; button on the board and connect the Pico to your PC.&lt;br&gt; Your PC will detect the Pi as a storage device.&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;.uf2&lt;/code&gt; file to the Pico. It will disconnect after a few seconds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Pico is now flashed and can be used for udpih. Continue with &lt;a href=&#34;https://raw.githubusercontent.com/GaryOderNichts/udpih/main/#booting-the-recoverymenu&#34;&gt;&#34;Booting the recovery_menu&#34;&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;Raspberry Pi Zero (Linux)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; To use USB gadgets on the Pi Zero you need to enable the &lt;code&gt;dwc2&lt;/code&gt; module by running the commands below:&lt;br&gt; &lt;code&gt;echo &#34;dtoverlay=dwc2&#34; | sudo tee -a /boot/config.txt&lt;/code&gt;&lt;br&gt; &lt;code&gt;echo &#34;dwc2&#34; | sudo tee -a /etc/modules&lt;/code&gt;&lt;br&gt; After running the commands reboot the system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the required dependencies: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential raspberrypi-kernel-headers&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the repo: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/GaryOderNichts/udpih.git&#xA;cd udpih&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the latest &lt;code&gt;arm_kernel.bin.h&lt;/code&gt; from the &lt;a href=&#34;https://github.com/GaryOderNichts/udpih/releases&#34;&gt;releases page&lt;/a&gt; and copy it to the &lt;code&gt;arm_kernel&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Now build the kernel module: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd linux&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can now run &lt;code&gt;sudo insmod udpih.ko&lt;/code&gt; to insert the kernel module into the kernel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Zero is now ready to be used for udpih.&lt;br&gt; Note that you&#39;ll need to insert the module again after rebooting the Zero. You will need 2 USB cables, one for powering the Zero and one which can be connected to the Wii U.&lt;/p&gt; &#xA;&lt;p&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/GaryOderNichts/udpih/main/#booting-the-recoverymenu&#34;&gt;&#34;Booting the recovery_menu&#34;&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;Booting the recovery_menu&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Important notes for this to work:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Make sure &lt;strong&gt;no&lt;/strong&gt; other USB Devices are attached to the console.&lt;/li&gt; &#xA;  &lt;li&gt;Only use USB ports on the front of the console, the back ports &lt;strong&gt;will not&lt;/strong&gt; work.&lt;/li&gt; &#xA;  &lt;li&gt;If your console has standby mode enabled, pull the power plug and turn it on from a full coldboot state.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy the latest release of the &lt;a href=&#34;https://github.com/GaryOderNichts/recovery_menu/releases&#34;&gt;recovery_menu&lt;/a&gt; to the root of your FAT32 formatted SD Card.&lt;/li&gt; &#xA; &lt;li&gt;Insert the SD Card into the console and power it on.&lt;/li&gt; &#xA; &lt;li&gt;As soon as you see the &#34;Wii U&#34; logo on the TV or Gamepad plug in your Zero/Pico.&lt;br&gt; This timing is important. If you&#39;re already in the menu, the exploit won&#39;t work..&lt;/li&gt; &#xA; &lt;li&gt;After a few seconds you should be in the recovery menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/GaryOderNichts/recovery_menu&#34;&gt;recovery_menu README&lt;/a&gt; for more information about this menu.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build the docker container&#xA;docker build -t udpihbuilder .&#xA;&#xA;# build the pico code&#xA;docker run -it --rm -v ${PWD}:/project udpihbuilder make pico&#xA;&#xA;# to only build the arm kernel code&#xA;docker run -it --rm -v ${PWD}:/project udpihbuilder make arm_kernel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Special thanks to Maschell, rw-r-r-0644, QuarkTheAwesome, vgmoose, exjam, dimok789, and everyone else who contributed to the Wii U scene!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shellphish/how2heap</title>
    <updated>2023-03-21T01:32:37Z</updated>
    <id>tag:github.com,2023-03-21:/shellphish/how2heap</id>
    <link href="https://github.com/shellphish/how2heap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repository for learning various heap exploitation techniques.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Educational Heap Exploitation&lt;/h1&gt; &#xA;&lt;p&gt;This repo is for learning various heap exploitation techniques. We use Ubuntu&#39;s Libc releases as the gold-standard. Each technique is verified to work on corresponding Ubuntu releases. You can run &lt;code&gt;apt source libc6&lt;/code&gt; to download the source code of the Libc your are using on Debian-based operating system. You can also click &lt;span&gt;▶&lt;/span&gt; to debug the technique in your browser using gdb.&lt;/p&gt; &#xA;&lt;p&gt;We came up with the idea during a hack meeting, and have implemented the following techniques:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Technique&lt;/th&gt; &#xA;   &lt;th&gt;Glibc-Version&lt;/th&gt; &#xA;   &lt;th&gt;Patch&lt;/th&gt; &#xA;   &lt;th&gt;Applicable CTF Challenges&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/first_fit.c&#34;&gt;first_fit.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrating glibc malloc&#39;s first-fit behavior.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/calc_tcache_idx.c&#34;&gt;calc_tcache_idx.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrating glibc&#39;s tcache index calculation.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/fastbin_dup.c&#34;&gt;fastbin_dup.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_fastbin_dup_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tricking malloc into returning an already-allocated heap pointer by abusing the fastbin freelist.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/fastbin_dup_into_stack.c&#34;&gt;fastbin_dup_into_stack.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_fastbin_dup_into_stack_2.23&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tricking malloc into returning a nearly-arbitrary pointer by abusing the fastbin freelist.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/exploitation/search-engine&#34;&gt;9447-search-engine&lt;/a&gt;, &lt;a href=&#34;http://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html&#34;&gt;0ctf 2017-babyheap&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/fastbin_dup_consolidate.c&#34;&gt;fastbin_dup_consolidate.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_fastbin_dup_consolidate_2.23&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tricking malloc into returning an already-allocated heap pointer by putting a pointer on both fastbin freelist and unsorted bin freelist.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mehQQ/public_writeup/tree/master/hitcon2016/SleepyHolder&#34;&gt;Hitcon 2016 SleepyHolder&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/unsafe_unlink.c&#34;&gt;unsafe_unlink.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_unsafe_unlink_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting free on a corrupted chunk to get arbitrary write.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/&#34;&gt;HITCON CTF 2014-stkof&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a&#34;&gt;Insomni&#39;hack 2017-Wheel of Robots&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/house_of_spirit.c&#34;&gt;house_of_spirit.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_spirit_2.23&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2014/tree/master/hack-lu-ctf-2014/oreo&#34;&gt;hack.lu CTF 2014-OREO&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/poison_null_byte.c&#34;&gt;poison_null_byte.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_poison_null_byte_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting a single null byte overflow.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/plaiddb&#34;&gt;PlaidCTF 2015-plaiddb&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/st424204/6b5c007cfa2b62ed3fd2ef30f6533e94?fbclid=IwAR3n0h1WeL21MY6cQ_C51wbXimdts53G3FklVIHw2iQSgtgGo0kR3Lt-1Ek&#34;&gt;BalsnCTF 2019-PlainNote&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/house_of_lore.c&#34;&gt;house_of_lore.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_lore_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tricking malloc into returning a nearly-arbitrary pointer by abusing the smallbin freelist.&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.27/overlapping_chunks.c&#34;&gt;overlapping_chunks.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_overlapping_chunks_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploit the overwrite of a freed chunk size in the unsorted bin in order to make a new allocation overlap with an existing chunk&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2015/tree/master/hack-lu-ctf-2015/exploiting/bookstore&#34;&gt;hack.lu CTF 2015-bookstore&lt;/a&gt;, &lt;a href=&#34;https://github.com/ctfs/write-ups-2016/tree/master/nuitduhack-quals-2016/exploit-me/night-deamonic-heap-400&#34;&gt;Nuit du Hack 2016-night-deamonic-heap&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.23/overlapping_chunks_2.c&#34;&gt;overlapping_chunks_2.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_overlapping_chunks_2_2.23&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploit the overwrite of an in use chunk size in order to make a new allocation overlap with an existing chunk&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/mmap_overlapping_chunks.c&#34;&gt;mmap_overlapping_chunks.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploit an in use mmap chunk in order to make a new allocation overlap with a current mmap chunk&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.27/house_of_force.c&#34;&gt;house_of_force.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_force_2.27&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the Top Chunk (Wilderness) header in order to get malloc to return a nearly-arbitrary pointer&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=30a17d8c95fbfb15c52d1115803b63aaa73a285c&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2016/tree/master/boston-key-party-2016/pwn/cookbook-6&#34;&gt;Boston Key Party 2016-cookbook&lt;/a&gt;, &lt;a href=&#34;https://github.com/ctfs/write-ups-2016/tree/master/bctf-2016/exploit/bcloud-200&#34;&gt;BCTF 2016-bcloud&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.27/unsorted_bin_into_stack.c&#34;&gt;unsorted_bin_into_stack.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_unsorted_bin_into_stack_2.27&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the overwrite of a freed chunk on unsorted bin freelist to return a nearly-arbitrary pointer.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.27/unsorted_bin_attack.c&#34;&gt;unsorted_bin_attack.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_unsorted_bin_attack_2.27&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the overwrite of a freed chunk on unsorted bin freelist to write a large value into arbitrary address&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2016/tree/master/0ctf-2016/exploit/zerostorage-6&#34;&gt;0ctf 2016-zerostorage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/large_bin_attack.c&#34;&gt;large_bin_attack.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_large_bin_attack_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the overwrite of a freed chunk on large bin freelist to write a large value into arbitrary address&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dangokyo.me/2018/04/07/0ctf-2018-pwn-heapstorm2-write-up/&#34;&gt;0ctf 2018-heapstorm2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/house_of_einherjar.c&#34;&gt;house_of_einherjar.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_einherjar_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting a single null byte overflow to trick malloc into returning a controlled pointer&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf&#34;&gt;Seccon 2016-tinypad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.23/house_of_orange.c&#34;&gt;house_of_orange.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_orange_2.23&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the Top Chunk (Wilderness) in order to gain arbitrary code execution&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=blobdiff;f=stdlib/abort.c;h=117a507ff88d862445551f2c07abb6e45a716b75;hp=19882f3e3dc1ab830431506329c94dcf1d7cc252;hb=91e7cf982d0104f0e71770f5ae8e3faf352dea9f;hpb=0c25125780083cbba22ed627756548efe282d1a0&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ctfs/write-ups-2016/tree/master/hitcon-ctf-2016/pwn/house-of-orange-500&#34;&gt;Hitcon 2016 houseoforange&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.23/house_of_roman.c&#34;&gt;house_of_roman.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_roman_2.23&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Leakless technique in order to gain remote code execution via fake fastbins, the unsorted_bin attack and relative overwrites.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/tcache_poisoning.c&#34;&gt;tcache_poisoning.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_tcache_poisoning_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tricking malloc into returning a completely arbitrary pointer by abusing the tcache freelist. (requires heap leak on and after 2.32)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 2.25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=a1a486d70ebcc47a686ff5846875eacad0940e41&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/tcache_house_of_spirit.c&#34;&gt;tcache_house_of_spirit.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_tcache_house_of_spirit_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Frees a fake chunk to get malloc to return a nearly-arbitrary pointer.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 2.25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/house_of_botcake.c&#34;&gt;house_of_botcake.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_botcake_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bypass double free restriction on tcache. Make &lt;code&gt;tcache_dup&lt;/code&gt; great again.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 2.25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/tcache_stashing_unlink_attack.c&#34;&gt;tcache_stashing_unlink_attack.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_tcache_stashing_unlink_attack_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the overwrite of a freed chunk on small bin freelist to trick malloc into returning an arbitrary pointer and write a large value into arbitraty address with the help of calloc.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 2.25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xmzyshypnc/xz_files/tree/master/hitcon2019_one_punch_man&#34;&gt;Hitcon 2019 one punch man&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/fastbin_reverse_into_tcache.c&#34;&gt;fastbin_reverse_into_tcache.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_fastbin_reverse_into_tcache_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting the overwrite of a freed chunk in the fastbin to write a large value into an arbitrary address.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt; 2.25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/house_of_mind_fastbin.c&#34;&gt;house_of_mind_fastbin.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_mind_fastbin_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting a single byte overwrite with arena handling to write a large value (heap pointer) to an arbitrary address&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.27/house_of_storm.c&#34;&gt;house_of_storm.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_storm_2.27&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploiting a use after free on both a large and unsorted bin chunk to return an arbitrary chunk from malloc&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.24/house_of_gods.c&#34;&gt;house_of_gods.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_house_of_gods_2.24&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A technique to hijack a thread&#39;s arena within 8 allocations&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2.27&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.35/decrypt_safe_linking.c&#34;&gt;decrypt_safe_linking.c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wargames.ret2.systems/level/how2heap_decrypt_safe_linking_2.34&#34; title=&#34;Debug Technique In Browser&#34;&gt;&lt;span&gt;▶&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrypt the poisoned value in linked list to recover the actual pointer&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.32&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shellphish/how2heap/master/obsolete/glibc_2.27/tcache_dup.c&#34;&gt;tcache_dup.c&lt;/a&gt;(obsolete)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tricking malloc into returning an already-allocated heap pointer by abusing the tcache freelist.&lt;/td&gt; &#xA;   &lt;td&gt;2.26 - 2.28&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d&#34;&gt;patch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The GnuLibc is under constant development and several of the techniques above have let to consistency checks introduced in the malloc/free logic. Consequently, these checks regularly break some of the techniques and require adjustments to bypass them (if possible). We address this issue by keeping multiple versions of the same technique for each Glibc-release that required an adjustment. The structure is &lt;code&gt;glibc_&amp;lt;version&amp;gt;/technique.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Have a good example? Add it here! Try to inline the whole technique in a single &lt;code&gt;.c&lt;/code&gt; -- it&#39;s a lot easier to learn that way.&lt;/p&gt; &#xA;&lt;h1&gt;Heap Exploitation Tools&lt;/h1&gt; &#xA;&lt;p&gt;There are some heap exploitation tools floating around.&lt;/p&gt; &#xA;&lt;h2&gt;shadow&lt;/h2&gt; &#xA;&lt;p&gt;jemalloc exploitation framework: &lt;a href=&#34;https://github.com/CENSUS/shadow&#34;&gt;https://github.com/CENSUS/shadow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;libheap&lt;/h2&gt; &#xA;&lt;p&gt;Examine the glibc heap in gdb: &lt;a href=&#34;https://github.com/cloudburst/libheap&#34;&gt;https://github.com/cloudburst/libheap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;heap-viewer&lt;/h2&gt; &#xA;&lt;p&gt;Examine the glibc heap in IDA Pro: &lt;a href=&#34;https://github.com/danigargu/heap-viewer&#34;&gt;https://github.com/danigargu/heap-viewer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;heapinspect&lt;/h2&gt; &#xA;&lt;p&gt;A Python based heap playground with good visualization for educational purposes: &lt;a href=&#34;https://github.com/matrix1001/heapinspect&#34;&gt;https://github.com/matrix1001/heapinspect&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Forkever&lt;/h2&gt; &#xA;&lt;p&gt;Debugger that lets you set &#34;checkpoints&#34; as well as view and edit the heap using a hexeditor: &lt;a href=&#34;https://github.com/haxkor/forkever&#34;&gt;https://github.com/haxkor/forkever&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Malloc Playground&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;malloc_playground.c&lt;/code&gt; file given is the source for a program that prompts the user for commands to allocate and free memory interactively.&lt;/p&gt; &#xA;&lt;h2&gt;Pwngdb&lt;/h2&gt; &#xA;&lt;p&gt;Examine the glibc heap in gdb: &lt;a href=&#34;https://github.com/scwuaptx/Pwngdb&#34;&gt;https://github.com/scwuaptx/Pwngdb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;heaptrace&lt;/h2&gt; &#xA;&lt;p&gt;Helps you visualize heap operations by replacing addresses with symbols: &lt;a href=&#34;https://github.com/Arinerron/heaptrace&#34;&gt;https://github.com/Arinerron/heaptrace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Heap Search&lt;/h2&gt; &#xA;&lt;p&gt;Search for applicable heap exploitation techniques based on primitive requirements: &lt;a href=&#34;https://kissprogramming.com/heap/heap-search&#34;&gt;https://kissprogramming.com/heap/heap-search&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Other resources&lt;/h1&gt; &#xA;&lt;p&gt;Some good heap exploitation resources, roughly in order of their publication, are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;glibc in-depth tutorial (&lt;a href=&#34;https://heap-exploitation.dhavalkapil.com/&#34;&gt;https://heap-exploitation.dhavalkapil.com/&lt;/a&gt;) - book and exploit samples&lt;/li&gt; &#xA; &lt;li&gt;ptmalloc fanzine, a set of resources and examples related to meta-data attacks on ptmalloc (&lt;a href=&#34;http://tukan.farm/2016/07/26/ptmalloc-fanzine/&#34;&gt;http://tukan.farm/2016/07/26/ptmalloc-fanzine/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A malloc diagram, from libheap (&lt;a href=&#34;https://raw.githubusercontent.com/cloudburst/libheap/master/heap.png&#34;&gt;https://raw.githubusercontent.com/cloudburst/libheap/master/heap.png&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Glibc Adventures: The Forgotten Chunk (&lt;a href=&#34;https://go.contextis.com/rs/140-OCV-459/images/Glibc_Adventures-The_Forgotten_Chunks.pdf&#34;&gt;https://go.contextis.com/rs/140-OCV-459/images/Glibc_Adventures-The_Forgotten_Chunks.pdf&lt;/a&gt;) - advanced heap exploitation&lt;/li&gt; &#xA; &lt;li&gt;Pseudomonarchia jemallocum (&lt;a href=&#34;http://www.phrack.org/issues/68/10.html&#34;&gt;http://www.phrack.org/issues/68/10.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The House Of Lore: Reloaded (&lt;a href=&#34;http://phrack.org/issues/67/8.html&#34;&gt;http://phrack.org/issues/67/8.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Malloc Des-Maleficarum (&lt;a href=&#34;http://phrack.org/issues/66/10.html&#34;&gt;http://phrack.org/issues/66/10.html&lt;/a&gt;) - some malloc exploitation techniques&lt;/li&gt; &#xA; &lt;li&gt;Yet another free() exploitation technique (&lt;a href=&#34;http://phrack.org/issues/66/6.html&#34;&gt;http://phrack.org/issues/66/6.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Understanding the heap by breaking it (&lt;a href=&#34;https://www.blackhat.com/presentations/bh-usa-07/Ferguson/Whitepaper/bh-usa-07-ferguson-WP.pdf&#34;&gt;https://www.blackhat.com/presentations/bh-usa-07/Ferguson/Whitepaper/bh-usa-07-ferguson-WP.pdf&lt;/a&gt;) - explains heap implementation and a couple exploits&lt;/li&gt; &#xA; &lt;li&gt;The use of set_head to defeat the wilderness (&lt;a href=&#34;http://phrack.org/issues/64/9.html&#34;&gt;http://phrack.org/issues/64/9.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The Malloc Maleficarum (&lt;a href=&#34;http://seclists.org/bugtraq/2005/Oct/118&#34;&gt;http://seclists.org/bugtraq/2005/Oct/118&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OS X heap exploitation techniques (&lt;a href=&#34;http://phrack.org/issues/63/5.html&#34;&gt;http://phrack.org/issues/63/5.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Exploiting The Wilderness (&lt;a href=&#34;http://seclists.org/vuln-dev/2004/Feb/25&#34;&gt;http://seclists.org/vuln-dev/2004/Feb/25&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Advanced Doug lea&#39;s malloc exploits (&lt;a href=&#34;http://phrack.org/issues/61/6.html&#34;&gt;http://phrack.org/issues/61/6.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GDB Enhanced Features (GEF) Heap Exploration Tools (&lt;a href=&#34;https://gef.readthedocs.io/en/master/commands/heap/&#34;&gt;https://gef.readthedocs.io/en/master/commands/heap/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Painless intro to the Linux userland heap (&lt;a href=&#34;https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/&#34;&gt;https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Heap exploitation techniques that work on glibc-2.31 (&lt;a href=&#34;https://github.com/StarCross-Tech/heap_exploit_2.31&#34;&gt;https://github.com/StarCross-Tech/heap_exploit_2.31&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Overview of GLIBC heap exploitation techniques (&lt;a href=&#34;https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/&#34;&gt;https://0x434b.dev/overview-of-glibc-heap-exploitation-techniques/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hardening&lt;/h1&gt; &#xA;&lt;p&gt;There are a couple of &#34;hardening&#34; measures embedded in glibc, like &lt;code&gt;export MALLOC_CHECK_=1&lt;/code&gt; (enables some checks), &lt;code&gt;export MALLOC_PERTURB_=1&lt;/code&gt; (data is overwritten), &lt;code&gt;export MALLOC_MMAP_THRESHOLD_=1&lt;/code&gt; (always use mmap()), ...&lt;/p&gt; &#xA;&lt;p&gt;More info: &lt;a href=&#34;http://www.gnu.org/software/libc/manual/html_node/Heap-Consistency-Checking.html&#34;&gt;mcheck()&lt;/a&gt;, &lt;a href=&#34;http://www.gnu.org/software/libc/manual/html_node/Malloc-Tunable-Parameters.html&#34;&gt;mallopt()&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also some tracing support as &lt;a href=&#34;http://manpages.ubuntu.com/mtrace&#34;&gt;mtrace()&lt;/a&gt;, &lt;a href=&#34;http://manpages.ubuntu.com/malloc_stats&#34;&gt;malloc_stats()&lt;/a&gt;, &lt;a href=&#34;http://manpages.ubuntu.com/malloc_info&#34;&gt;malloc_info()&lt;/a&gt;, &lt;a href=&#34;http://manpages.ubuntu.com/memusage&#34;&gt;memusage&lt;/a&gt;, and in other functions in this family.&lt;/p&gt;</summary>
  </entry>
</feed>