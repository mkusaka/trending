<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-22T01:23:14Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cecio/USBvalve</title>
    <updated>2024-03-22T01:23:14Z</updated>
    <id>tag:github.com,2024-03-22:/cecio/USBvalve</id>
    <link href="https://github.com/cecio/USBvalve" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Expose USB activity on the fly&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img width=&#34;300&#34; alt=&#34;logo, landscape, dark text, transparent background&#34; src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/USBvalve_logo_scaled.png&#34;&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;em&gt;Expose USB activity on the fly&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/versions.png&#34; alt=&#34;The two models&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/USBvalve_PIWATCH.png&#34; alt=&#34;The Watch&#34; width=&#34;26%&#34; height=&#34;26%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;I&#39;m sure that, like me, you were asked to put your USB drive in an &lt;em&gt;unknown&lt;/em&gt; device...and then the doubt:&lt;/p&gt; &#xA;&lt;p&gt;what happened to my poor dongle, behind the scene? Stealing my files? Encrypting them? Or &lt;em&gt;just&lt;/em&gt; installing a malware? With &lt;strong&gt;USBvalve&lt;/strong&gt; you can spot this out in seconds: built on super cheap off-the-shelf hardware you can quickly test any USB file system activity and understand what is going on before it&#39;s too late!&lt;/p&gt; &#xA;&lt;p&gt;With &lt;strong&gt;USBvalve&lt;/strong&gt; you can have an immediate feedback about what happen to the drive; the screen will show you if the &lt;em&gt;fake&lt;/em&gt; filesystem built on the device is accessed, read or written:&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/selftest.png&#34; alt=&#34;Selftest&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/readme.png&#34; alt=&#34;Readme&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;and from version &lt;code&gt;0.8.0&lt;/code&gt; you can also use it as USB Host to detect &lt;em&gt;BADUSB&lt;/em&gt; devices:&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/hid.png&#34; alt=&#34;HID&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is an example of the &lt;em&gt;BADUSB&lt;/em&gt; debugger available on serial port:&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;a href=&#34;https://asciinema.org/a/NWfC9Mvzzpj3eZfsC7s5Dz1sJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/NWfC9Mvzzpj3eZfsC7s5Dz1sJ.svg?sanitize=true&#34; width=&#34;65%&#34; height=&#34;65%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;If you prefer videos, you can also have a look to my &lt;a href=&#34;https://www.youtube.com/watch?v=jy1filtQY4w&#34;&gt;Insomni&#39;hack Presentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;USBvalve Watch&lt;/h2&gt; &#xA;&lt;p&gt;Starting from version &lt;code&gt;0.15.0&lt;/code&gt; a new &lt;em&gt;Pi Pico Watch&lt;/em&gt; version is supported. To compile the new version you have to uncomment the &lt;code&gt;#define PIWATCH&lt;/code&gt; line at the beginning of the code. The hardware is a RP2040-based 1.28-inch TFT display and watch board. You can find some more info &lt;a href=&#34;https://www.raspberrypi.com/news/how-to-build-your-own-raspberry-pi-watch/&#34;&gt;here&lt;/a&gt;. This is also fully compatible with the &lt;a href=&#34;https://www.waveshare.com/wiki/RP2040-LCD-1.28&#34;&gt;Waveshare RP2040-LCD-1.28&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;docs&lt;/code&gt;: documentation about the project, with a presentation where you can have a look to all the features&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;firmware&lt;/code&gt;: pre-built firmware for the Raspberry Pi Pico. You can just use these and flash them on the board. I prepared the two versions for 32 and 64 OLED versions&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PCB&lt;/code&gt;: Gerber file if you want to print the custom PCB . It&#39;s not mandatory, you can use your own or build it on a breadboard&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;USBvalve&lt;/code&gt;: sources, if you want to modify and build the firmware by yourself&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;utils&lt;/code&gt;: some utilities you may use to build a custom FS&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pictures&lt;/code&gt;: images and resources used in this doc&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;STL&lt;/code&gt;: STL files for enclosure. In &lt;code&gt;1.1&lt;/code&gt; and &lt;code&gt;1.2&lt;/code&gt; folders there are full enclosures (thanks to &lt;a href=&#34;https://github.com/WhistleMaster&#34;&gt;WhistleMaster&lt;/a&gt;). If you want something lighter to protect the LCD you can go with &lt;code&gt;USBvalve_sliding_cover.stl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build USBvalve&lt;/h2&gt; &#xA;&lt;h3&gt;Part list&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build your own, you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Raspberry Pi Pico (or another RP2040 based board, like Arduino Nano RP2040)&lt;/li&gt; &#xA; &lt;li&gt;an I2C OLED screen 128x64 or 128x32&lt;/li&gt; &#xA; &lt;li&gt;(optional) a &lt;strong&gt;USBvalve&lt;/strong&gt; PCB or a breadboard&lt;/li&gt; &#xA; &lt;li&gt;(optional) a 3D printed spacer to isolate the screen from the board (&lt;a href=&#34;https://www.thingiverse.com/thing:4748043&#34;&gt;https://www.thingiverse.com/thing:4748043&lt;/a&gt;), but you can use a piece of electrical tape instead&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building instructions&lt;/h3&gt; &#xA;&lt;p&gt;Almost all the job is done directly on the board by the software, so you just need to arrange the connection with the OLED for output.&lt;/p&gt; &#xA;&lt;p&gt;Starting from version 0.8.0 of the firmware, &lt;strong&gt;USBvalve&lt;/strong&gt; can detect HID devices (used to detect &lt;em&gt;BADUSB&lt;/em&gt;). This require an additional USB port behaving as Host. If you are not interested in this, you can use the old instructions &lt;a href=&#34;https://github.com/cecio/USBvalve/raw/main/docs/BUILDING-1.1.md&#34;&gt;in docs folder&lt;/a&gt; and use PCB version &lt;code&gt;1.1&lt;/code&gt;. Otherwise go ahead with PCB version &lt;code&gt;1.2&lt;/code&gt; (we have version for USB-A or USB-B, see folder).&lt;/p&gt; &#xA;&lt;h4&gt;With USBvalve PCB&lt;/h4&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/USB_valve_1-2_front.png&#34; width=&#34;25%&#34; height=&#34;25%&#34;&gt; &lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/USB_valve_1-2_back.png&#34; width=&#34;24%&#34; height=&#34;24%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;solder a USB female port in &lt;code&gt;USBH&lt;/code&gt; area. This is for version &lt;code&gt;A&lt;/code&gt;, but there is a version for USB &lt;code&gt;Micro-B&lt;/code&gt; as well if you prefer&lt;/li&gt; &#xA; &lt;li&gt;place the Raspberry Pi Pico on the silk screen on the front&lt;/li&gt; &#xA; &lt;li&gt;you don&#39;t need to solder all the PINs. Just the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;D4 and D5 (left side)&lt;/li&gt; &#xA;   &lt;li&gt;D14 and D15 (left side)&lt;/li&gt; &#xA;   &lt;li&gt;GND (right side, third pin from the top)&lt;/li&gt; &#xA;   &lt;li&gt;GND (right side, third pin from the bottom)&lt;/li&gt; &#xA;   &lt;li&gt;3v3_OUT (right side)&lt;/li&gt; &#xA;   &lt;li&gt;VBUS (right side)&lt;/li&gt; &#xA;   &lt;li&gt;the 3 DEBUG pin on the bottom: SWCLK, GND and SWDIO&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;place the 3D printer spacer or a piece of tape on the parts of the OLED that my touch the Raspberry&lt;/li&gt; &#xA; &lt;li&gt;solder the OLED (with a header) on the 4 PIN space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some of the OLEDs have the GND and VCC PINs swapped, so I built the PCB to be compatible with both versions:&lt;/p&gt; &#xA;&lt;p&gt;For example if your OLED has GND on PIN1 and VCC on PIN2 like this:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/usb_valve_oled.png&#34; width=&#34;35%&#34; height=&#34;35%&#34;&gt; &#xA;&lt;p&gt;You have to place a blob of solder on these two pads on the back of the PCB:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/usb_valve_pads.png&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &#xA;&lt;p&gt;Otherwise you should the opposite and place the solder on the other PADs:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/usb_valve_pads_2.png&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &#xA;&lt;h4&gt;Without USBvalve PCB&lt;/h4&gt; &#xA;&lt;img src=&#34;https://github.com/cecio/USBvalve/raw/main/pictures/pico-pinout.svg?sanitize=true&#34; alt=&#34;Pico Pi&#34; width=&#34;85%&#34; height=&#34;85%&#34;&gt; &#xA;&lt;p&gt;If you are using a breadboard or just wiring, all you have to do is to ensure to connect the proper PINs at the OLED screen and to the Host USB port.&lt;/p&gt; &#xA;&lt;p&gt;The mapping is the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PIN6 of Pi --&amp;gt; OLED SDA&lt;/li&gt; &#xA; &lt;li&gt;PIN7 of Pi --&amp;gt; OLED SCL&lt;/li&gt; &#xA; &lt;li&gt;PIN19 of Pi --&amp;gt; D+ of USB Host&lt;/li&gt; &#xA; &lt;li&gt;PIN20 of Pi --&amp;gt; D- of USB Host&lt;/li&gt; &#xA; &lt;li&gt;PIN23 (GND) of Pi --&amp;gt; GND of USB Host&lt;/li&gt; &#xA; &lt;li&gt;PIN38 (GND) of Pi --&amp;gt; OLED GND&lt;/li&gt; &#xA; &lt;li&gt;PIN36 (3V3OUT) of Pi --&amp;gt; OLED VCC&lt;/li&gt; &#xA; &lt;li&gt;PIN40 (VBUS) of Pi --&amp;gt; VCC of USB Host&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use the DEBUG functions, you can also place a header on the 3 SWD PINs at the bottom of the board.&lt;/p&gt; &#xA;&lt;h3&gt;Flash Firmware&lt;/h3&gt; &#xA;&lt;p&gt;To flash the firmware, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect the Raspberry Pi Pico with the USB cable, by keeping the &lt;em&gt;BOOTSEL&lt;/em&gt; button pressed (the big white button on the board)&lt;/li&gt; &#xA; &lt;li&gt;release the button&lt;/li&gt; &#xA; &lt;li&gt;you will see a new drive on the system, named &lt;code&gt;RPI-RP2&lt;/code&gt; (in Linux envs you may have to manually mount it)&lt;/li&gt; &#xA; &lt;li&gt;copy the proper firmware file (with extension &lt;code&gt;uf2&lt;/code&gt;) in the folder, depending on the OLED you used&lt;/li&gt; &#xA; &lt;li&gt;wait few seconds until the mounted folder disappear&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s done!&lt;/p&gt; &#xA;&lt;h3&gt;Anti-Detection&lt;/h3&gt; &#xA;&lt;p&gt;I don&#39;t know if it will ever be the case, but you may want to customize the firmware in order to avoid detection done by &lt;em&gt;USBvalve-aware&lt;/em&gt; malware :-)&lt;/p&gt; &#xA;&lt;p&gt;I grouped most of the variables you may want to modify in this section (&lt;a href=&#34;https://github.com/cecio/USBvalve#dockerfile&#34;&gt;see Dockerfile below for rebuilding&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// Anti-Detection settings.&#xA;//&#xA;// Set USB IDs strings and numbers, to avoid possible detections.&#xA;// Remember that you can cusotmize FAKE_DISK_BLOCK_NUM as well&#xA;// for the same reason. Also DISK_LABEL in ramdisk.h can be changed.&#xA;//&#xA;// You can see here for inspiration: https://the-sz.com/products/usbid/&#xA;//&#xA;// Example:&#xA;//             0x0951 0x16D5    VENDORID_STR: Kingston   PRODUCTID_STR: DataTraveler&#xA;//&#xA;#define USB_VENDORID 0x0951               // This override the Pi Pico default 0x2E8A&#xA;#define USB_PRODUCTID 0x16D5              // This override the Pi Pico default 0x000A&#xA;#define USB_DESCRIPTOR &#34;DataTraveler&#34;     // This override the Pi Pico default &#34;Pico&#34;&#xA;#define USB_MANUF &#34;Kingston&#34;              // This override the Pi Pico default &#34;Raspberry Pi&#34;&#xA;#define USB_SERIAL &#34;123456789A&#34;           // This override the Pi Pico default. Disabled by default. \&#xA;                                          // See &#34;setSerialDescriptor&#34; in setup() if needed&#xA;#define USB_VENDORID_STR &#34;Kingston&#34;       // Up to 8 chars&#xA;#define USB_PRODUCTID_STR &#34;DataTraveler&#34;  // Up to 16 chars&#xA;#define USB_VERSION_STR &#34;1.0&#34;             // Up to 4 chars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building your firmware&lt;/h3&gt; &#xA;&lt;p&gt;Obviously you can also build your own firmware. To build the &lt;em&gt;standard&lt;/em&gt; one I used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arduino IDE &lt;code&gt;2.3.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Adafruit TinyUSB Library&lt;/code&gt; version &lt;code&gt;3.0.0&lt;/code&gt;, &lt;code&gt;Pico-PIO-USB&lt;/code&gt; version &lt;code&gt;0.5.2&lt;/code&gt;, Board &lt;code&gt;Raspberry Pi RP2040 (3.7.2)&lt;/code&gt; setting Tools=&amp;gt;CPU Speed at &lt;code&gt;120MHz&lt;/code&gt; and Tools=&amp;gt;USB Stack to &lt;code&gt;Adafruit TinyUSB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssd1306&lt;/code&gt; OLED library version &lt;code&gt;1.8.3&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to re-create a new fake filesystem, you may want to have a look to the &lt;code&gt;utils&lt;/code&gt; folder, where I placed some utilities to build a new one.&lt;/p&gt; &#xA;&lt;h4&gt;Dockerfile&lt;/h4&gt; &#xA;&lt;p&gt;If you want to build your own firmware, after you customized it, I provide a &lt;code&gt;Dockerfile&lt;/code&gt; which builds a complete &lt;strong&gt;Arduino&lt;/strong&gt; environment and compile the firmware. Enter the following commands in the main &lt;code&gt;USBvalve&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t usbvalve/arduino-cli .&#xA;docker run --rm --name usbvalve -v $PWD:/mnt usbvalve/arduino-cli /mnt/USBvalve &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The firmware will be placed with extension &lt;code&gt;uf2&lt;/code&gt; in folder &lt;code&gt;USBvalve_out&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;If you have ideas or improvements in your mind, I encourage you to open an issue so that we can improve the project together! Thanks!&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you have question or need support you can open an &lt;code&gt;Issue&lt;/code&gt; here or reach me out on Twitter/X &lt;a href=&#34;https://twitter.com/red5heep&#34;&gt;@red5heep&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>