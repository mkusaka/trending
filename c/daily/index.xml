<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:31:41Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>checkpoint-restore/criu</title>
    <updated>2023-02-26T01:31:41Z</updated>
    <id>tag:github.com,2023-02-26:/checkpoint-restore/criu</id>
    <link href="https://github.com/checkpoint-restore/criu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Checkpoint/Restore tool&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/checkpoint-restore/criu/actions/workflows/x86-64-gcc-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/checkpoint-restore/criu/workflows/X86_64%20GCC%20Test/badge.svg?sanitize=true&#34; alt=&#34;X86_64 GCC Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/checkpoint-restore/criu/actions/workflows/docker-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/checkpoint-restore/criu/actions/workflows/docker-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/checkpoint-restore/criu/actions/workflows/podman-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/checkpoint-restore/criu/actions/workflows/podman-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Podman Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/checkpoint-restore/criu&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/checkpoint-restore/criu.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://criu.org/w/images/1/1c/CRIU.svg?sanitize=true&#34; width=&#34;256px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CRIU -- A project to implement checkpoint/restore functionality for Linux&lt;/h2&gt; &#xA;&lt;p&gt;CRIU (stands for Checkpoint and Restore in Userspace) is a utility to checkpoint/restore Linux tasks.&lt;/p&gt; &#xA;&lt;p&gt;Using this tool, you can freeze a running application (or part of it) and checkpoint it to a hard drive as a collection of files. You can then use the files to restore and run the application from the point it was frozen at. The distinctive feature of the CRIU project is that it is mainly implemented in user space. There are some more projects doing C/R for Linux, and so far CRIU &lt;a href=&#34;https://criu.org/Comparison_to_other_CR_projects&#34;&gt;appears to be&lt;/a&gt; the most feature-rich and up-to-date with the kernel.&lt;/p&gt; &#xA;&lt;p&gt;CRIU project is (almost) the never-ending story, because we have to always keep up with the Linux kernel supporting checkpoint and restore for all the features it provides. Thus we&#39;re looking for contributors of all kinds -- feedback, bug reports, testing, coding, writing, etc. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/checkpoint-restore/criu/criu-dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; if you would like to get involved.&lt;/p&gt; &#xA;&lt;p&gt;The project &lt;a href=&#34;https://criu.org/History&#34;&gt;started&lt;/a&gt; as the way to do live migration for OpenVZ Linux containers, but later grew to more sophisticated and flexible tool. It is currently used by (integrated into) OpenVZ, LXC/LXD, Docker, and other software, project gets tremendous help from the community, and its packages are included into many Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;The project home is at &lt;a href=&#34;http://criu.org&#34;&gt;http://criu.org&lt;/a&gt;. This wiki contains all the knowledge base for CRIU we have. Pages worth starting with are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://criu.org/Installation&#34;&gt;Installation instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://criu.org/Simple_loop&#34;&gt;A simple example of usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://criu.org/Category:HOWTO&#34;&gt;Examples of more advanced usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Troubleshooting can be hard, some help can be found &lt;a href=&#34;https://criu.org/When_C/R_fails&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://criu.org/What_cannot_be_checkpointed&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://criu.org/FAQ&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Checkpoint and restore of simple loop process&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/232445&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://asciinema.org/a/232445&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/232445.png&#34; width=&#34;572px&#34; height=&#34;412px&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced features&lt;/h2&gt; &#xA;&lt;p&gt;As main usage for CRIU is live migration, there&#39;s a library for it called P.Haul. Also the project exposes two cool core features as standalone libraries. These are libcompel for parasite code injection and libsoccr for TCP connections checkpoint-restore.&lt;/p&gt; &#xA;&lt;h3&gt;Live migration&lt;/h3&gt; &#xA;&lt;p&gt;True &lt;a href=&#34;https://criu.org/Live_migration&#34;&gt;live migration&lt;/a&gt; using CRIU is possible, but doing all the steps by hands might be complicated. The &lt;a href=&#34;https://criu.org/P.Haul&#34;&gt;phaul sub-project&lt;/a&gt; provides a Go library that encapsulates most of the complexity. This library and the Go bindings for CRIU are stored in the &lt;a href=&#34;https://github.com/checkpoint-restore/go-criu&#34;&gt;go-criu&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h3&gt;Parasite code injection&lt;/h3&gt; &#xA;&lt;p&gt;In order to get state of the running process CRIU needs to make this process execute some code, that would fetch the required information. To make this happen without killing the application itself, CRIU uses the &lt;a href=&#34;https://criu.org/Parasite_code&#34;&gt;parasite code injection&lt;/a&gt; technique, which is also available as a standalone library called &lt;a href=&#34;https://criu.org/Compel&#34;&gt;libcompel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TCP sockets checkpoint-restore&lt;/h3&gt; &#xA;&lt;p&gt;One of the CRIU features is the ability to save and restore state of a TCP socket without breaking the connection. This functionality is considered to be useful by itself, and we have it available as the &lt;a href=&#34;https://criu.org/Libsoccr&#34;&gt;libsoccr library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under GPLv2 (though files sitting in the lib/ directory are LGPLv2.1).&lt;/p&gt; &#xA;&lt;p&gt;All files in the images/ directory are licensed under the Expat license (so-called MIT). See the images/LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jszczerbinsky/lwp</title>
    <updated>2023-02-26T01:31:41Z</updated>
    <id>tag:github.com,2023-02-26:/jszczerbinsky/lwp</id>
    <link href="https://github.com/jszczerbinsky/lwp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parallax wallpaper engine for Linux and Windows&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;LWP&lt;/h1&gt; &#xA; &lt;p&gt;LWP allows You to create multi-layered parallax wallpapers.&lt;br&gt; Each layer moves with Your mouse cursor, creating this beautiful effect.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/jszczerbinsky/lwp/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/jszczerbinsky/lwp?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jszczerbinsky/lwp/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/jszczerbinsky/lwp/total?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jszczerbinsky/lwp&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/jszczerbinsky/lwp/build.yml?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/gHpbkXJD&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1077955077974794322?label=DISCORD&amp;amp;style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jszczerbinsky/lwp/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/jszczerbinsky/lwp/main/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/jszczerbinsky/lwp/main/#creating-wallpapers&#34;&gt;Creating Wallpapers&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/jszczerbinsky&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/38699473/220888934-09788a6b-873c-469b-b147-b345e8a8949a.mp4&#34;&gt;https://user-images.githubusercontent.com/38699473/220888934-09788a6b-873c-469b-b147-b345e8a8949a.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Linux&lt;/summary&gt; &#xA; &lt;h4&gt;Installation steps&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Download &lt;code&gt;.zip&lt;/code&gt; package from &lt;a href=&#34;https://github.com/jszczerbinsky/lwp/releases/latest&#34;&gt;releases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Unzip the content to &lt;code&gt;/&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo unzip -d / [archive name].zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Test lwp by running &lt;code&gt;lwp&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;To make lwp run on startup, add &lt;code&gt;lwp &amp;amp;&lt;/code&gt; command to Your desktop enviroment &lt;code&gt;.rc&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;Build from source instead&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install &lt;code&gt;SDL2&lt;/code&gt; using Your package manager&lt;/li&gt; &#xA;  &lt;li&gt;Clone the repository and install &lt;code&gt;lwp&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/jszczerbinsky/lwp&#xA;cd lwp&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Test lwp by running &lt;code&gt;lwp&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;To make lwp run on startup, add &lt;code&gt;lwp &amp;amp;&lt;/code&gt; command to Your desktop enviroment &lt;code&gt;.rc&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows&lt;/summary&gt; &#xA; &lt;h4&gt;Installation steps&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Download &lt;code&gt;.zip&lt;/code&gt; package from &lt;a href=&#34;https://github.com/jszczerbinsky/lwp/releases/latest&#34;&gt;releases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Extract the package&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;install.bat&lt;/code&gt; as Administrator&lt;/li&gt; &#xA;  &lt;li&gt;Lwp should run immediately after the installation&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;Build from source instead&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;You need &lt;code&gt;MinGW&lt;/code&gt; with &lt;a href=&#34;https://github.com/libsdl-org/SDL/releases/latest&#34;&gt;SDL2&lt;/a&gt;-devel&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/jszczerbinsky/lwp&#xA;cd lwp&#xA;build.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Download &lt;a href=&#34;https://github.com/libsdl-org/SDL/releases/latest&#34;&gt;SDL2&lt;/a&gt; and put &lt;code&gt;SDL2.dll&lt;/code&gt; in &lt;code&gt;data&lt;/code&gt; directory&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;install.bat&lt;/code&gt; as Administrator&lt;/li&gt; &#xA;  &lt;li&gt;Lwp should run immediately after the installation&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h4&gt;Create a configuration file&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Linux&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Copy default config file to &lt;code&gt;.config/lwp/lwp.cfg&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir ~/.config/lwp&#xA;cp /etc/lwp.cfg ~/.config/lwp/lwp.cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Press &lt;kbd&gt;⊞ Win&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Type &lt;code&gt;%appdata%&lt;/code&gt; and press &lt;code&gt;Ok&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Create new directory and name it &lt;code&gt;lwp&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Copy file &lt;code&gt;C:\Program Files\lwp\defaultWin.cfg&lt;/code&gt; to directory created in the previous step and rename it to &lt;code&gt;lwp.cfg&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Open &lt;code&gt;lwp.cfg&lt;/code&gt; in notepad&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Using config file&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not put spaces between &lt;code&gt;=&lt;/code&gt; and values&lt;/li&gt; &#xA; &lt;li&gt;Do not leave trailing spaces&lt;/li&gt; &#xA; &lt;li&gt;Comments start with &lt;code&gt;#&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Do not put strings in quotation marks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Available options:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;reload_rootwindow&lt;/td&gt; &#xA;   &lt;td&gt;Set this to 1 if You are using a compositor (linux only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;smooth&lt;/td&gt; &#xA;   &lt;td&gt;Smooth movement multipler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitors&lt;/td&gt; &#xA;   &lt;td&gt;Monitors count&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_x&lt;/td&gt; &#xA;   &lt;td&gt;Position of nth monitor in X axis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_y&lt;/td&gt; &#xA;   &lt;td&gt;Position of nth monitor in Y axis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_w&lt;/td&gt; &#xA;   &lt;td&gt;Width of nth monitor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_h&lt;/td&gt; &#xA;   &lt;td&gt;Height of nth monitor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_wallpaper&lt;/td&gt; &#xA;   &lt;td&gt;Absolute path to the wallpaper directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_wallpaper_x&lt;/td&gt; &#xA;   &lt;td&gt;Position of the wallpaper relative to the monitor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_wallpaper_y&lt;/td&gt; &#xA;   &lt;td&gt;Position of the wallpaper relative to the monitor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_wallpaper_w&lt;/td&gt; &#xA;   &lt;td&gt;Wallpaper resolution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;monitor[n]_wallpaper_h&lt;/td&gt; &#xA;   &lt;td&gt;Wallpaper resolution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Creating Wallpapers&lt;/h2&gt; &#xA;&lt;p&gt;Want to share Your wallpaper? Join our &lt;a href=&#34;https://discord.gg/gHpbkXJD&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Parallax wallpapers are not popular. Because of this if You want some cool parallax wallpaper, You have to either find a parallax game background on the internet and use it as a wallpaper or cut some real wallpaper into layers using Gimp or Photoshop.&lt;/p&gt; &#xA;&lt;h4&gt;How to create a wallpaper for lwp&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a directory for Your wallpaper&lt;/li&gt; &#xA; &lt;li&gt;Save each layer to this directory as &lt;code&gt;.bmp&lt;/code&gt; file and name them &lt;code&gt;1.bmp&lt;/code&gt;, &lt;code&gt;2.bmp&lt;/code&gt; ... (&lt;code&gt;1.bmp&lt;/code&gt; is bottom most layer)&lt;/li&gt; &#xA; &lt;li&gt;Create a wallpaper config file and name it &lt;code&gt;wallpaper.cfg&lt;/code&gt; (You can make a copy from &lt;code&gt;C:\Program Files\lwp\defaultWin.cfg&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;p&gt;File structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:&#xA; └  MyCoolWallpaperDirectory&#xA;         └  wallpaper.cfg&#xA;         └  1.bmp&#xA;         └  2.bmp&#xA;         └  3.bmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Config file:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;count&lt;/td&gt; &#xA;   &lt;td&gt;Wallpaper layers count&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;movement_x&lt;/td&gt; &#xA;   &lt;td&gt;Mouse sensitivity in X axis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;movement_y&lt;/td&gt; &#xA;   &lt;td&gt;Mouse sensitivity in Y axis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;movement_x_[n]&lt;/td&gt; &#xA;   &lt;td&gt;Mouse sensitivity in X axis for nth layer (optional)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;movement_y_[n]&lt;/td&gt; &#xA;   &lt;td&gt;Mouse sensitivity in Y axis for nth layer (optional)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;repeat_x&lt;/td&gt; &#xA;   &lt;td&gt;Repeat the wallpaper in X axis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;repeat_y&lt;/td&gt; &#xA;   &lt;td&gt;Repeat the wallpaper in Y axis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Jakub Szczerbiński&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>