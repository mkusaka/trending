<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:31:34Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wasm3/wasm3</title>
    <updated>2022-09-01T01:31:34Z</updated>
    <id>tag:github.com,2022-09-01:/wasm3/wasm3</id>
    <link href="https://github.com/wasm3/wasm3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 The fastest WebAssembly interpreter, and the most universal runtime&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://vshymanskyy.github.io/StandWithUkraine&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;30%&#34; src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/screenshot-ios.png&#34;&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/wasm-symbol.svg?sanitize=true&#34; width=&#34;32&#34; height=&#34;32&#34;&gt; Wasm3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wapm.io/package/vshymanskyy/wasm3&#34;&gt;&lt;img src=&#34;https://wapm.io/package/vshymanskyy/wasm3/badge.svg?sanitize=true&#34; alt=&#34;WAPM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasm3/wasm3/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/wasm3/wasm3?style=flat-square&amp;amp;label=issues&amp;amp;color=success&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasm3/wasm3/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/wasm3/wasm3/tests/main?style=flat-square&amp;amp;logo=github&amp;amp;label=tests&#34; alt=&#34;Tests status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&amp;amp;q=proj:wasm3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/oss--fuzz-fuzzing-success?style=flat-square&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasm3/wasm3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The fastest WebAssembly interpreter, and the most universal runtime.&lt;br&gt; &lt;sub&gt;Based on &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Performance.md&#34;&gt;&lt;strong&gt;CoreMark 1.0&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://00f.net/2021/02/22/webassembly-runtimes-benchmarks&#34;&gt;&lt;strong&gt;independent&lt;/strong&gt;&lt;/a&gt; benchmarks. Your mileage may vary.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/wasm3_engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/wasm3_engine?style=flat-square&amp;amp;color=1da1f2&amp;amp;label=twitter&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/qmZjgnd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/671415645073702925?style=flat-square&amp;amp;logo=discord&amp;amp;color=7289da&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/joinchat/DD8s3xVG8Vj_LxRDm52eTQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/telegram-chat-0088cc?style=flat-square&amp;amp;logo=telegram&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a small &lt;a href=&#34;https://wapm.io/package/vshymanskyy/wasm3&#34;&gt;getting started guide&lt;/a&gt;. Click here to start:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webassembly.sh/?run-command=wasm3&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/button.png&#34; alt=&#34;LIVE DEMO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Installation.md&#34;&gt;installation instructions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wasm3 can also be used as a library for:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wasm3/pywasm3&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/python.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Python3&lt;/a&gt; │ &lt;a href=&#34;https://github.com/Veykril/wasm3-rs&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/rust.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Rust&lt;/a&gt; │ &lt;a href=&#34;https://github.com/wasm3/wasm3&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/cplusplus.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; C/C++&lt;/a&gt; │ &lt;a href=&#34;https://github.com/matiasinsaurralde/go-wasm3&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/go.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; GoLang&lt;/a&gt; │ &lt;a href=&#34;https://github.com/alichay/zig-wasm3&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/zig.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Zig&lt;/a&gt; │ &lt;a href=&#34;https://metacpan.org/pod/Wasm::Wasm3&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@develop/icons/perl.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Perl&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/shareup/wasm-interpreter-apple&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/swift.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Swift&lt;/a&gt; │ &lt;a href=&#34;https://github.com/tana/Wasm3DotNet&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/dotnet.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; .Net&lt;/a&gt; │ &lt;a href=&#34;https://github.com/wasm3/wasm3-arduino&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/arduino.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Arduino, PlatformIO, Particle&lt;/a&gt; │ &lt;a href=&#34;https://github.com/saghul/txiki.js&#34;&gt;QuickJS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;wasm3&lt;/code&gt; passes the &lt;a href=&#34;https://github.com/WebAssembly/spec/tree/master/test/core&#34;&gt;WebAssembly spec testsuite&lt;/a&gt; and is able to run many &lt;code&gt;WASI&lt;/code&gt; apps.&lt;/p&gt; &#xA;&lt;p&gt;Minimum useful system requirements: &lt;strong&gt;~64Kb&lt;/strong&gt; for code and &lt;strong&gt;~10Kb&lt;/strong&gt; RAM&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;wasm3&lt;/code&gt; runs on a wide range of architectures (&lt;code&gt;x86&lt;/code&gt;, &lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;ARM&lt;/code&gt;, &lt;code&gt;RISC-V&lt;/code&gt;, &lt;code&gt;PowerPC&lt;/code&gt;, &lt;code&gt;MIPS&lt;/code&gt;, &lt;code&gt;Xtensa&lt;/code&gt;, &lt;code&gt;ARC32&lt;/code&gt;, ...) and &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/platforms&#34;&gt;platforms&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/linux.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Linux, &lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/windows.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Windows, &lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/apple.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; OS X, &lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/freebsd.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; FreeBSD, &lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/android.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Android, &lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/apple.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://cdn.rawgit.com/feathericons/feather/master/icons/wifi.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; OpenWrt, Yocto, Buildroot (routers, modems, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/raspberrypi.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Raspberry Pi, Orange Pi and other SBCs&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://cdn.rawgit.com/feathericons/feather/master/icons/cpu.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; MCUs: Arduino, ESP8266, ESP32, Particle, ... &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Hardware.md&#34;&gt;see full list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://cdn.rawgit.com/simple-icons/simple-icons/develop/icons/firefoxbrowser.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; Browsers. Yes, using WebAssembly itself!&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/wasm-symbol.svg?sanitize=true&#34; width=&#34;18&#34; height=&#34;18&#34;&gt; &lt;code&gt;wasm3&lt;/code&gt; can execute &lt;code&gt;wasm3&lt;/code&gt; (self-hosting)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Webassembly &lt;a href=&#34;https://github.com/WebAssembly/proposals/raw/master/finished-proposals.md&#34; title=&#34;WebAssembly Finished Proposals&#34;&gt;Core Proposals&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Extra&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☑ Import/Export of Mutable Globals&lt;/td&gt; &#xA;   &lt;td&gt;☑ Structured execution tracing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☑ Non-trapping float-to-int conversions&lt;/td&gt; &#xA;   &lt;td&gt;☑ Big-Endian systems support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☑ Sign-extension operators&lt;/td&gt; &#xA;   &lt;td&gt;☑ Wasm and WASI self-hosting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☑ Multi-value&lt;/td&gt; &#xA;   &lt;td&gt;☑ Gas metering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☑ Bulk memory operations (partial support)&lt;/td&gt; &#xA;   &lt;td&gt;☑ Linear memory limit (&amp;lt; 64KiB)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☐ Multiple memories&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☐ Reference types&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☐ Tail call optimization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☐ Fixed-width SIMD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;☐ Exception handling&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why use a &#34;slow interpreter&#34; versus a &#34;fast JIT&#34;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In many situations, speed is not the main concern. Runtime executable size, memory usage, startup latency can be improved with the interpreter approach. Portability and security are much easier to achieve and maintain. Additionally, development impedance is much lower. A simple library like Wasm3 is easy to compile and integrate into an existing project. (Wasm3 builds in a just few seconds). Finally, on some platforms (i.e. iOS and WebAssembly itself) you can&#39;t generate executable code pages in runtime, so JIT is unavailable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why would you want to run WASM on embedded devices?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wasm3 started as a research project and remains so by many means. Evaluating the engine in different environments is part of the research. Given that we have &lt;code&gt;Lua&lt;/code&gt;, &lt;code&gt;JS&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Lisp&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt; running on MCUs, &lt;code&gt;WebAssembly&lt;/code&gt; is actually a promising alternative. It provides toolchain decoupling as well as a completely sandboxed, well-defined, predictable environment. Among practical use cases we can list &lt;code&gt;edge computing&lt;/code&gt;, &lt;code&gt;scripting&lt;/code&gt;, &lt;code&gt;plugin systems&lt;/code&gt;, running &lt;code&gt;IoT rules&lt;/code&gt;, &lt;code&gt;smart contracts&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Used by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wasmcloud.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/wasmcloud.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://wowcube.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/wowcube.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://scailable.net&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/scailable.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://blynk.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/blynk.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://www.iden3.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/iden3.svg?sanitize=true&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://github.com/Losant/eea-examples&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/losant.png&#34; height=&#34;28&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://github.com/kateinoigakukun/wasmic-ios&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1506708/114701856-069ce700-9d2c-11eb-9b72-9ce2dfd9f0fb.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://github.com/balena-io-playground/balena-wasm3&#34;&gt;&lt;img src=&#34;https://www.balena.io/avatar.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://github.com/deislabs/krustlet-wasm3&#34;&gt;&lt;img src=&#34;https://krustlet.dev/images/horizontal.svg?sanitize=true&#34; height=&#34;32&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://shareup.app/blog/introducing-shareup&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/extra/logos/shareup_app.svg?sanitize=true&#34; height=&#34;24&#34;&gt;&lt;/a&gt;　 &lt;a href=&#34;https://wasm4.org&#34;&gt;&lt;img src=&#34;https://wasm4.org/img/logo.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Further Resources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Demos.md&#34;&gt;Demos&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Installation.md&#34;&gt;Installation instructions&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Cookbook.md&#34;&gt;Cookbook&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Development.md&#34;&gt;Build and Development instructions&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Hardware.md&#34;&gt;Supported Hardware&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Testing.md&#34;&gt;Testing &amp;amp; Fuzzing&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Performance.md&#34;&gt;Performance&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Interpreter.md&#34;&gt;Interpreter Architecture&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wasm3/wasm3/main/docs/Diagnostics.md&#34;&gt;Logging&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/vshymanskyy/awesome-wasm-tools/raw/main/README.md&#34;&gt;Awesome WebAssembly Tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This project is released under The MIT License (MIT)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fwupd/fwupd</title>
    <updated>2022-09-01T01:31:34Z</updated>
    <id>tag:github.com,2022-09-01:/fwupd/fwupd</id>
    <link href="https://github.com/fwupd/fwupd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A system daemon to allow session software to update firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fwupd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fwupd/fwupd/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/fwupd/fwupd/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fwupd/fwupd/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/fwupd/fwupd/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/10744&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/10744/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:fwupd&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fwupd.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/fwupd/fwupd/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/fwupd/fwupd/tree/main.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project aims to make updating firmware on Linux automatic, safe and reliable.&lt;/p&gt; &#xA;&lt;p&gt;Additional information is available &lt;a href=&#34;https://fwupd.org/&#34;&gt;at the website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Where to get help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub issues &amp;amp; discussions in &lt;a href=&#34;https://github.com/fwupd/fwupd&#34;&gt;this repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Libera IRC channel &lt;code&gt;#fwupd&lt;/code&gt;. You can join through Libera&#39;s &lt;a href=&#34;https://libera.chat/&#34;&gt;IRC&lt;/a&gt; or via the IRC bridge on &lt;a href=&#34;https://matrix.to/#/#fwupd:libera.chat&#34;&gt;Matrix&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;The most up to date compilation instructions are available in the &lt;a href=&#34;https://github.com/fwupd/fwupd/wiki/Compilation&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In most cases end users should never compile fwupd from scratch; it&#39;s a complicated project with dozens of dependencies (and as many configuration options) and there&#39;s just too many things that can go wrong.&lt;/p&gt; &#xA;&lt;p&gt;Users should just have fwupd installed and updated by their distro, managed and tested by the package maintainer. The distribution will have also done some testing with how fwupd interacts with other software on your system, for instance using GNOME Software.&lt;/p&gt; &#xA;&lt;p&gt;Installing fwupd using &lt;a href=&#34;https://github.com/fwupd/fwupd/wiki/fwupd-snap&#34;&gt;Snap&lt;/a&gt; or using &lt;a href=&#34;https://github.com/fwupd/fwupd/wiki/fwupd-flatpak&#34;&gt;Flatpak&lt;/a&gt; might be useful to update a specific device on the command line that needs a bleeding edge fwupd version, but it should not be considered as a replacement to the distro-provided system version.&lt;/p&gt; &#xA;&lt;h2&gt;LVFS&lt;/h2&gt; &#xA;&lt;p&gt;This project is configured by default to download firmware from the &lt;a href=&#34;https://fwupd.org/&#34;&gt;Linux Vendor Firmware Service (LVFS)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This service is available to all OEMs and firmware creators who would like to make their firmware available to Linux users.&lt;/p&gt; &#xA;&lt;p&gt;You can find more information about the technical details of creating a firmware capsule in the hardware vendors section of the &lt;a href=&#34;https://fwupd.org&#34;&gt;fwupd website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage flow (command line)&lt;/h2&gt; &#xA;&lt;p&gt;If you have a device with firmware supported by fwupd, this is how you will check for updates and apply them using fwupd&#39;s command line tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr get-devices&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will display all devices detected by fwupd.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr refresh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will download the latest metadata from LVFS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr get-updates&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If updates are available for any devices on the system, they&#39;ll be displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr update&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will download and apply all updates for your system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updates that can be applied live will be done immediately.&lt;/li&gt; &#xA; &lt;li&gt;Updates that run at bootup will be staged for the next reboot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find more information about the update workflow in the end users section of the &lt;a href=&#34;https://fwupd.org&#34;&gt;fwupd website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting status&lt;/h2&gt; &#xA;&lt;p&gt;fwupd will encourage users to report both successful and failed updates back to LVFS. This is an optional feature, but encouraged as it provides valuable feedback to LVFS administrators and OEM developers regarding firmware update process efficacy.&lt;/p&gt; &#xA;&lt;p&gt;The privacy policy regarding this data can be viewed on the &lt;a href=&#34;https://fwupd.org/privacy&#34;&gt;fwupd website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To report the status of an update run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;# fwupdmgr report-history&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Only updates that were distributed from the LVFS will be reported to the LVFS.&lt;/p&gt; &#xA;&lt;h2&gt;Enterprise use&lt;/h2&gt; &#xA;&lt;p&gt;The flow of updates can be controlled in the enterprise using the &#34;approved updates&#34; feature. This allows the domain administrator to filter the possible updates from a central server (e.g. the LVFS, or a mirror) to only firmware that have been tested specifically in your organization.&lt;/p&gt; &#xA;&lt;p&gt;The list of approved updates can be enabled by adding &lt;code&gt;ApprovalRequired=true&lt;/code&gt; to the remote configuration file, e.g. &lt;code&gt;lvfs.conf&lt;/code&gt;. Once enabled, the list of approved updates can be set in &lt;code&gt;daemon.conf&lt;/code&gt; using a comma delimited list.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ApprovedFirmware=foo,bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;foo,bar&lt;/code&gt; refers to the container checksums that would correspond to two updates in the metadata file.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the list of approved firmware can be supplemented using &lt;code&gt;fwupdmgr set-approved-firmware baz&lt;/code&gt; or using the D-Bus interface.&lt;/p&gt; &#xA;&lt;h2&gt;Local metadata&lt;/h2&gt; &#xA;&lt;p&gt;Local metadata can be saved in &lt;code&gt;/var/lib/fwupd/local.d&lt;/code&gt; or &lt;code&gt;/usr/share/fwupd/local.d&lt;/code&gt; which are scanned at daemon startup. This can be used to add site-specific BKC tags to existing metadata stores. For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt;&#xA;&amp;lt;components origin=&#34;mycompanyname&#34;&amp;gt;&#xA;  &amp;lt;component merge=&#34;append&#34;&amp;gt;&#xA;    &amp;lt;provides&amp;gt;&#xA;      &amp;lt;firmware&amp;gt;3ef35d3b-ceeb-5e27-8c0a-ac25f90367ab&amp;lt;/firmware&amp;gt;&#xA;      &amp;lt;firmware&amp;gt;2ef35d3b-ceeb-5e27-8c0a-ac25f90367ac&amp;lt;/firmware&amp;gt;&#xA;      &amp;lt;firmware&amp;gt;1ef35d3b-ceeb-5e27-8c0a-ac25f90367ad&amp;lt;/firmware&amp;gt;&#xA;    &amp;lt;/provides&amp;gt;&#xA;    &amp;lt;releases&amp;gt;&#xA;      &amp;lt;release version=&#34;225.53.1649&#34;/&amp;gt;&#xA;      &amp;lt;release version=&#34;224.48.1605&#34;/&amp;gt;&#xA;    &amp;lt;/releases&amp;gt;&#xA;    &amp;lt;tags&amp;gt;&#xA;      &amp;lt;tag&amp;gt;mycompanyname-2022q1&amp;lt;/tag&amp;gt;&#xA;    &amp;lt;/tags&amp;gt;&#xA;  &amp;lt;/component&amp;gt;&#xA;&amp;lt;/components&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This then appears when getting the releases for that specific GUID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fwupdmgr get-releases --json 3ef35d3b-ceeb-5e27-8c0a-ac25f90367ab&#xA;{&#xA;  &#34;Releases&#34; : [&#xA;    {&#xA;      ...&#xA;      &#34;Version&#34; : &#34;225.53.1649&#34;,&#xA;      &#34;Tags&#34; : [&#xA;        &#34;mycompanyname-2022q1&#34;&#xA;      ],&#xA;      ...&#xA;    },&#xA;    {&#xA;      ...&#xA;      &#34;Version&#34; : &#34;224.48.1605&#34;,&#xA;      &#34;Tags&#34; : [&#xA;        &#34;mycompanyname-2022q1&#34;&#xA;      ],&#xA;      ...&#xA;    },&#xA;    {&#xA;      ...&#xA;      &#34;Version&#34; : &#34;224.45.1389&#34;,&#xA;      ...&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other frontends&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Software&#34;&gt;GNOME Software&lt;/a&gt; is the graphical frontend available. When compiled with firmware support, it will check for updates periodically and automatically download firmware in the background. After the firmware has been downloaded a popup will be displayed in GNOME Software to perform the update.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://userbase.kde.org/Discover&#34;&gt;KDE Discover&lt;/a&gt; is the software center, generally bundled with KDE Plasma. With the release of &lt;a href=&#34;https://www.kde.org/announcements/plasma-5.14.0.php&#34;&gt;KDE Plasma 5.14&lt;/a&gt;, a new fwupd backend has been implemented in KDE Discover for firmware updates. These firmware updates are shown with other system updates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dell.com/en-us/work/shop/wyse-endpoints-and-software/wyse-management-suite/spd/wyse-wms&#34;&gt;Wyse Management Suite&lt;/a&gt; A software suite available on Dell IoT gateways and Wyse thin clients with built-in fwupd support. The remote administration interface can be used to download and deploy firmware updates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fuzzing&lt;/h2&gt; &#xA;&lt;p&gt;There are several automated fuzzing tests in fwupd. These take some time to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=hfuzz-clang meson --default-library=static \&#xA;    -Dudevdir=/tmp -Dsystemd_root_prefix=/tmp \&#xA;    -Dplugin_redfish=disabled -Dcurl=disabled \&#xA;    -Dintrospection=false ../&#xA;ninja install&#xA;ninja fuzz-firmware&#xA;ninja fuzz-tpm-eventlog&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>RT-Thread/rt-thread</title>
    <updated>2022-09-01T01:31:34Z</updated>
    <id>tag:github.com,2022-09-01:/RT-Thread/rt-thread</id>
    <link href="https://github.com/RT-Thread/rt-thread" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RT-Thread is an open source IoT operating system.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/logo.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/README_zh.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/README_es.md&#34;&gt;Español&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/README_de.md&#34;&gt;Deutsch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RT-Thread/rt-thread/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/RT-Thread/rt-thread.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RT-Thread/rt-thread/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/RT-Thread/rt-thread.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/RT-Thread/rt-thread&#34;&gt;&lt;img src=&#34;https://travis-ci.org/RT-Thread/rt-thread.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/RT-Thread/rt-thread?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RT-Thread/rt-thread/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/RT-Thread/rt-thread.svg?sanitize=true&#34; alt=&#34;GitHub pull-requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RT-Thread/rt-thread/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;RT-Thread&lt;/h1&gt; &#xA;&lt;p&gt;RT-Thread was born in 2006, it is an open source, neutral, and community-based real-time operating system (RTOS).&lt;/p&gt; &#xA;&lt;p&gt;RT-Thread is mainly written in C language, easy to understand and easy to port(can be quickly port to a wide range of mainstream MCUs and module chips). It applies object-oriented programming methods to real-time system design, making the code elegant, structured, modular, and very tailorable.&lt;/p&gt; &#xA;&lt;p&gt;RT-Thread has Standard version and Nano version. For resource-constrained microcontroller (MCU) systems, the Nano version that requires only 3KB Flash and 1.2KB RAM memory resources can be tailored with easy-to-use tools. For resource-rich IoT devices, RT-Thread can use the on-line software package management tool, together with system configuration tools, to achieve intuitive and rapid modular cutting, seamlessly import rich software packages; thus, achieving complex functions like Android&#39;s graphical interface and touch sliding effects, smart voice interaction effects, and so on.&lt;/p&gt; &#xA;&lt;h2&gt;RT-Thread Architecture&lt;/h2&gt; &#xA;&lt;p&gt;RT-Thread has not only a real-time kernel, but also rich components. Its architecture is as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Kernel layer: RT-Thread kernel, the core part of RT-Thread, includes the implementation of objects in the kernel system, such as multi-threading and its scheduling, semaphore, mailbox, message queue, memory management, timer, etc.; libcpu/BSP (Chip Migration Related Files/Board Support Package) is closely related to hardware and consists of peripheral drivers and CPU porting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Components and Service Layer: Components are based on upper-level software on top of the RT-Thread kernel, such as virtual file systems, FinSH command-line interfaces, network frameworks, device frameworks, and more. Its modular design allows for high internal cohesion inside the components and low coupling between components.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packages.rt-thread.org/en/index.html&#34;&gt;RT-Thread software package&lt;/a&gt;: A general-purpose software component running on the RT-Thread IoT operating system platform for different application areas, consisting of description information, source code or library files. RT-Thread provides an open package platform with officially available or developer-supplied packages that provide developers with a choice of reusable packages that are an important part of the RT-Thread ecosystem. The package ecosystem is critical to the choice of an operating system because these packages are highly reusable and modular, making it easy for application developers to build the system they want in the shortest amount of time. RT-Thread supports more than 370 software packages.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RT-Thread Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Designed for resource-constrained devices, the minimum kernel requires only 1.2KB of RAM and 3 KB of Flash.&lt;/li&gt; &#xA; &lt;li&gt;A variety of standard interfaces, such as POSIX, CMSIS, C++ application environment.&lt;/li&gt; &#xA; &lt;li&gt;Has rich components and a prosperous and fast growing package ecosystem.&lt;/li&gt; &#xA; &lt;li&gt;Elegant code style, easy to use, read and master.&lt;/li&gt; &#xA; &lt;li&gt;High Scalability. RT-Thread has high-quality scalable software architecture, loose coupling, modularity, is easy to tailor and expand.&lt;/li&gt; &#xA; &lt;li&gt;Supports high-performance applications.&lt;/li&gt; &#xA; &lt;li&gt;Supports all mainstream compiling tools such as GCC, Keil and IAR.&lt;/li&gt; &#xA; &lt;li&gt;Supports a wide range of &lt;a href=&#34;https://www.rt-thread.io/board.html&#34;&gt;architectures and chips&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Catalogue&lt;/h2&gt; &#xA;&lt;p&gt;RT-Thread source code catalog is shown as follow:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BSP&lt;/td&gt; &#xA;   &lt;td&gt;Board Support Package based on the porting of various development boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;components&lt;/td&gt; &#xA;   &lt;td&gt;Components, such as finsh shell, file system, protocol stack etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;documentation&lt;/td&gt; &#xA;   &lt;td&gt;Related documents, like coding style, doxygen etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;examples&lt;/td&gt; &#xA;   &lt;td&gt;Related sample code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;include&lt;/td&gt; &#xA;   &lt;td&gt;Head files of RT-Thread kernel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;libcpu&lt;/td&gt; &#xA;   &lt;td&gt;CPU porting code such as ARM/MIPS/RISC-V etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;src&lt;/td&gt; &#xA;   &lt;td&gt;The source files for the RT-Thread kernel.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tools&lt;/td&gt; &#xA;   &lt;td&gt;The script files for the RT-Thread command build tool.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;RT-Thread has now been ported for nearly 200 development boards, most BSPs support MDK, IAR development environment and GCC compiler, and have provided default MDK and IAR project, which allows users to add their own application code directly based on the project. Each BSP has a similar directory structure, and most BSPs provide a README.md file, which is a markdown-format file that contains the basic introduction of BSP, and introduces how to simply start using BSP.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;RT-Thread supports many architectures, and has covered the major architectures in current applications. Architecture and chip manufacturer involved:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-M0/M0+&lt;/strong&gt;：manufacturers like ST&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-M3&lt;/strong&gt;：manufacturers like ST、Winner Micro、MindMotion, ect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-M4&lt;/strong&gt;：manufacturers like ST、Nuvton、NXP、GigaDevice、Realtek、Ambiq Micro, ect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-M7&lt;/strong&gt;：manufacturers like ST、NXP&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-M23&lt;/strong&gt;：manufacturers like GigaDevice&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-M33&lt;/strong&gt;：manufacturers like ST&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-R4&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Cortex-A8/A9&lt;/strong&gt;：manufacturers like NXP&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM7&lt;/strong&gt;：manufacturers like Samsung&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM9&lt;/strong&gt;：manufacturers like Allwinner、Xilinx 、GOKE&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM11&lt;/strong&gt;：manufacturers like Fullhan&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MIPS32&lt;/strong&gt;：manufacturers like loongson、Ingenic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RISC-V&lt;/strong&gt;：manufacturers like Hifive、Kendryte、Nuclei&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARC&lt;/strong&gt;：manufacturers like SYNOPSYS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DSP&lt;/strong&gt;：manufacturers like TI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C-Sky&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;x86&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported IDE and Compiler&lt;/h2&gt; &#xA;&lt;p&gt;The main IDE/compilers supported by RT-Thread are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RT-Thread Studio IDE&lt;/li&gt; &#xA; &lt;li&gt;MDK KEIL&lt;/li&gt; &#xA; &lt;li&gt;IAR&lt;/li&gt; &#xA; &lt;li&gt;GCC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RT-Thread Studio IDE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rt-thread.io/document/site/rtthread-studio/um/studio-user-manual/&#34;&gt;User Manual&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/ucq5eJgZIQg&#34;&gt;Tutorial Videos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RT-Thread Studio IDE (a.k.a. RT-Studio) is a one-stop intergrated development environment built by RT-Thread team. It has a easy-to-use graphical configuration system and a wealth of software packages and components resources. RT-Studio has the features of project creation, configuration and management,as well as code editing, SDK management, build configuration, debugging configuration, program download and debug. We&#39;re looking to make the use of RT-Studio as intuitive as possible, reducing the duplication of work and improving the development efficiency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/studio.gif&#34; alt=&#34;studio&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Env Tool&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/env/env/&#34;&gt;User Manual&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=dEK94o_YoSo&#34;&gt;Tutorial Videos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the early stage, RT-Thread team also created an auxiliary tool called Env. It is an auxiliary tool with a TUI (Text-based user interface). Developers can use Env tool to configure and generate the GCC, Keil MDK, and IAR projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/env.png&#34; alt=&#34;env&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rt-thread.io/document/site/tutorial/quick-start/introduction/introduction/&#34;&gt;RT-Thread Programming Guide&lt;/a&gt; | &lt;a href=&#34;https://www.rt-thread.io/studio.html&#34;&gt;RT-Thread Studio IDE&lt;/a&gt; | &lt;a href=&#34;https://github.com/RT-Thread-packages/kernel-sample&#34;&gt;Kernel Sample&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=ZMi1O-Rr7yc&amp;amp;list=PLXUV89C_M3G5KVw2IerI-pqApdSM_IaZo&#34;&gt;RT-Thread Beginners Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Based on &lt;a href=&#34;https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32f103-blue-pill&#34;&gt;STM32F103 BluePill&lt;/a&gt; | &lt;a href=&#34;https://github.com/RT-Thread/rt-thread/tree/master/bsp/raspberry-pico&#34;&gt;Raspberry Pi Pico&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Simulator&lt;/h2&gt; &#xA;&lt;p&gt;RT-Thread BSP can be compiled directly and downloaded to the corresponding development board for use. In addition, RT-Thread also provides qemu-vexpress-a9 BSP, which can be used without hardware platform. See the getting started guide below for details. Getting Started of QEMU with Env: &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/quick-start/quick_start_qemu/quick_start_qemu.md&#34;&gt;Windows&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/quick-start/quick_start_qemu/quick_start_qemu_linux.md&#34;&gt;Linux Ubuntu&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/quick-start/quick_start_qemu/quick_start_qemu_macos.md&#34;&gt;Mac OS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;RT-Thread is an open source software and has been licensed under Apache License Version 2.0 since v3.1.1. License information and copyright information can generally be seen at the beginning of the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* Copyright (c) 2006-2018, RT-Thread Development Team&#xA; *&#xA; * SPDX-License-Identifier: Apache-2.0&#xA; * ...&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;RT-Thread is very grateful for the support from all community developers, and if you have any ideas, suggestions or questions in the process of using RT-Thread, RT-Thread can be reached by the following means, and we are also updating RT-Thread in real time on these channels. At the same time, any questions can be asked in the &lt;a href=&#34;https://github.com/RT-Thread/rt-thread/issues&#34;&gt;issue section of RT-Thread repository&lt;/a&gt; or &lt;a href=&#34;https://club.rt-thread.io/&#34;&gt;RT-Thread forum&lt;/a&gt;, and community members will answer them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rt-thread.io&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://github.com/RT-Thread/rt-thread&#34;&gt;Github&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/rt_thread&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://www.linkedin.com/company/rt-thread-iot-os/posts/?feedView=all&#34;&gt;LinkedIn&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/channel/UCdDHtIfSYPq4002r27ffqPw&#34;&gt;Youtube&lt;/a&gt; | &lt;a href=&#34;https://www.facebook.com/RT-Thread-IoT-OS-110395723808463/?modal=admin_todo_tour&#34;&gt;Facebook&lt;/a&gt; | &lt;a href=&#34;https://rt-thread.medium.com/&#34;&gt;Medium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested in RT-Thread and want to join in the development of RT-Thread and become a code contributor,please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/contribution_guide/contribution_guide.md&#34;&gt;Code Contribution Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks for the following contributors!&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/RT-Thread/rt-thread/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=RT-Thread/rt-thread&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>