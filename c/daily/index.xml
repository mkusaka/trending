<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:35:04Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peng-zhihui/HoloCubic</title>
    <updated>2022-07-26T01:35:04Z</updated>
    <id>tag:github.com,2022-07-26:/peng-zhihui/HoloCubic</id>
    <link href="https://github.com/peng-zhihui/HoloCubic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;带网络功能的伪全息透明显示桌面站&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HoloCubic--多功能透明显示屏桌面站&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;视频介绍：&lt;/strong&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1VA411p7MD/&#34;&gt;https://www.bilibili.com/video/BV1VA411p7MD/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0. 关于本项目&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;稚晖君注：这是为了更新视频，缓解本人拖更两个月的尴尬，用一个周末时间赶出来的一个有意思的小玩意 :D&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如视频所述，本项目有意思的地方在于使用了一个分光棱镜来设计出&lt;code&gt;伪全息显示&lt;/code&gt;的效果。这个小设备总的来说功能比较多，因为搭载了WiFi和蓝牙能力可以实现很多网络应用，在本仓库中给大家提供了一个开发框架以及一些基础功能（天气、粉丝数监视器等），大家可以基于我的方案继续扩展实现更多应用。&lt;/p&gt; &#xA;&lt;p&gt;本项目的硬件方案是基于&lt;code&gt;ESP32PICO-D4&lt;/code&gt;的，乐鑫的一个很实用的MCU芯片，由于采用了SiP封装是的PCBA整板面积能做到一个硬币大小；软件方面主要是基于&lt;code&gt;lvgl-GUI&lt;/code&gt;库，我移植了ST7789 1.3寸&lt;code&gt;240x240&lt;/code&gt;分辨率屏幕的显示屏驱动，同时将&lt;code&gt;MPU6050&lt;/code&gt;作为输入设备通过感应的方式模拟编码器键值来交互。&lt;/p&gt; &#xA;&lt;h2&gt;1. 硬件打样说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PCB打样的话暂时没发现有啥需要特别注意的。&lt;/strong&gt; PCB文件可以直接拿去工厂打样，两层板很便宜，器件BOM的话也都是比较常用的，整板成本在50元以内。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Hardware&lt;/code&gt;文件内目前包含两个版本的PCB电路：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naive Version&lt;/strong&gt; ：即视频中出现的版本，板载ESP32、IMU、环境光传感器、SD卡槽、下载电路、以及两个RGB灯&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ironman Version&lt;/strong&gt; ：基于上面的版本轻微修改，删去了环境光传感器，修改了PCB形状以适配新的外壳&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为新款的外壳计划是使用CNC进行金属加工，因此环境光容易被遮挡，而且该功能使用场景不多所以在新版删去了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;外壳加工&lt;/strong&gt; 根据自己喜欢的版本选择，&lt;code&gt;3D Model&lt;/code&gt;文件夹目前包含四个版本的外壳文件：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Naive Version&lt;/strong&gt; ：即视频中出现的版本，比较简约（因为临时赶工设计的），最好使用光固化3D打印加工&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bilibili Version&lt;/strong&gt; ：视频中后面出现的B站百大奖杯形式的外壳结构，适配&lt;code&gt;Naive Version&lt;/code&gt;的PCB， &lt;strong&gt;属于娱乐性质，非百大UP不建议采用&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metal Version&lt;/strong&gt; ：视频发布后全新改版的外壳结构设计，优化了布局控件整体更紧凑精致，适配&lt;code&gt;Naive Version&lt;/code&gt;的PCB，该建议使用CNC加工制作&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ironman Version&lt;/strong&gt; ：新设计的野生钢铁侠风格结构件，该版本为和朋友合作设计的，后面可能会授权他联名量产，该结构适配&lt;code&gt;Ironman Version&lt;/code&gt;的PCB&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;野生钢铁侠联名的版本的结构件加工比较复杂，而且需要后期喷砂、阳极氧化等工艺所以单件制造成本很高（打听了下整套3个部件至少要1000元+），因此大家自己有加工渠道的可以用提供的文件自己去做。&lt;/p&gt; &#xA; &lt;p&gt;没有渠道但是又想要这个版本硬件的，&lt;strong&gt;我授权了那位朋友量产一小批&lt;/strong&gt;，他的店铺名为&lt;a href=&#34;https://shop68240117.taobao.com&#34;&gt;Xikii&lt;/a&gt;，是做客制化键盘很有经验的一个极客，大家感兴趣的可以去关注一下~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;2. 固件编译说明&lt;/h2&gt; &#xA;&lt;p&gt;固件框架主要基于Arduino开发完成，玩过Arduino的基本没有上手难度了，把Firmware/Libraries里面的库安装到Arduino库目录（如果你用的是Arduino IDE的话）即可。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;我使用的是Visual Studio上面的Visual Micro插件进行Arduino开发，因为对VS比较熟悉，大家选择自己喜欢的IDE就好了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;然后这里需要修改一个官方库文件才能正常使用：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;首先肯定得安装ESP32的Arduino支持包（百度有海量教程），然后在安装的支持包的&lt;code&gt;esp32\hardware\esp32\1.0.4\libraries\SPI\src\SPI.cpp&lt;/code&gt;文件中，&lt;strong&gt;修改以下代码中的MISO为26&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if(sck == -1 &amp;amp;&amp;amp; miso == -1 &amp;amp;&amp;amp; mosi == -1 &amp;amp;&amp;amp; ss == -1) {&#xA;    _sck = (_spi_num == VSPI) ? SCK : 14;&#xA;    _miso = (_spi_num == VSPI) ? MISO : 12; // 需要改为26&#xA;    _mosi = (_spi_num == VSPI) ? MOSI : 13;&#xA;    _ss = (_spi_num == VSPI) ? SS : 15;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这是因为，硬件上连接屏幕和SD卡分别是用两个硬件SPI，其中HSPI的默认MISO引脚是12，而12在ESP32中是用于上电时设置flash电平的，上电之前上拉会导致芯片无法启动，因此我们将默认的引脚替换为26。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;也可以通过设置芯片熔丝的方式解决这个问题，不过那样的操作是一次性不可逆的，不建议这么玩。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;另外：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于我赶视频制作，代码都是临时写的非常杂乱有很多dirty code，因此仓库中的是所有驱动调通之后的模板代码，可以自己基于这个框架自由开发。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;APP应用代码我在整理中慢慢也会更新出来。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Visual Studio模拟器 &amp;amp; 图片转换脚本&lt;/h2&gt; &#xA;&lt;p&gt;在&lt;code&gt;Software&lt;/code&gt;文件夹中包含了一个Visual Studio的工程，用VS打开（需要安装C++开发组件）后可以在电脑上模拟LVGL的界面效果，改好之后代码粘贴到Arduino固件那边就可以完成界面移植。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这样省的每次修改都要重新交叉编译Arduino的固件，提升开发效率。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HoloCubic/main/5.Docs/Images/Holo4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImageToHolo&lt;/code&gt;文件夹下包含一个Python脚本，用于将图片转换成HoloCubic固件中用到的图像资源。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为图像资源一般都比较占空间，如果全部存在ESP32的Flash中的话存不了几张，因此我在框架中移植了LVGL的FAT文件系统支持，可以将图片资源存储在SD卡内进行读取。&lt;/p&gt; &#xA; &lt;p&gt;官方的图转换工具是在线的：&lt;a href=&#34;https://lvgl.io/tools/imageconverter&#34;&gt;https://lvgl.io/tools/imageconverter&lt;/a&gt; ，需要选择 &lt;code&gt;Indexed 4 colors&lt;/code&gt; 格式。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;但是官方工具每次只能转换一张还要上传下载很麻烦&lt;/strong&gt;，因此我自己写了个脚本用于批量转换。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;HoloCubic用到的图片资源名为&lt;code&gt;xxx.bin&lt;/code&gt;文件，大家用我提供的脚本转好后放入SD卡，然后可以像这样读取：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lv_obj_t* imgbtn = lv_imgbtn_create(lv_scr_act(), NULL);&#xA;lv_imgbtn_set_src(imgbtn, LV_BTN_STATE_PRESSED, &#34;S:/dir/icon_pressed.bin&#34;);&#xA;lv_imgbtn_set_src(imgbtn, LV_BTN_STATE_RELEASED, &#34;S:/dir/icon_released.bin&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中&lt;code&gt;S:&lt;/code&gt;指代SD卡根目录（注意&lt;strong&gt;S是大写的&lt;/strong&gt;），后面就是跟Linux中的路径完全表示一致了。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;该脚本参考了&lt;a href=&#34;https://github.com/W-Mai/lvgl_image_converter&#34;&gt;W-Mai/lvgl_image_converter&lt;/a&gt; 的实现。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;另外由于转换脚本的使用需要再Python环境下，如果大家不想安装环境的话，也可以用我预编译好的exe文件来转，使用方法很简单，把&lt;code&gt;jpg/png/bmp&lt;/code&gt;图片拖到&lt;code&gt;holo转换器.exe&lt;/code&gt;的图标上就行了（可以同时拖动多个上去），会在当前目录生成对应的&lt;code&gt;.bin&lt;/code&gt;文件。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;转换器软件的下载地址：&lt;/p&gt; &#xA; &lt;p&gt;链接：&lt;a href=&#34;https://pan.baidu.com/s/11cPOVYnKkxmd88o-Ouwb5g&#34;&gt;https://pan.baidu.com/s/11cPOVYnKkxmd88o-Ouwb5g&lt;/a&gt; 提取码：xlju&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;4. 关于分光棱镜&lt;/h2&gt; &#xA;&lt;p&gt;我用的时25.4mm x 25.4mm x 25.4mm的棱镜，淘宝应该可以搜到，单个价格80元左右。&lt;/p&gt; &#xA;&lt;p&gt;分光棱镜的固定比较麻烦，用胶水的话容易渗入屏幕导致水印，因此建议去TB搜一下&lt;code&gt;OCA胶&lt;/code&gt;，这是一种&lt;code&gt;全贴合屏幕工艺&lt;/code&gt;中用来粘合屏幕的固态胶，效果很不错也很便宜。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;但是OCA粘性非常强，大家操作一定要仔细不要留气泡，不然粘上后就很难取下了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;其他的后续再补充，有用的话记得点星星~&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>zmkfirmware/zmk</title>
    <updated>2022-07-26T01:35:04Z</updated>
    <id>tag:github.com,2022-07-26:/zmkfirmware/zmk</id>
    <link href="https://github.com/zmkfirmware/zmk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZMK Firmware Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zephyr™ Mechanical Keyboard (ZMK) Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zmk.dev/community/discord/invite&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/719497620560543766&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zmkfirmware/zmk/actions&#34;&gt;&lt;img src=&#34;https://github.com/zmkfirmware/zmk/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zmkfirmware/zmk/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zmk.dev/&#34;&gt;ZMK Firmware&lt;/a&gt; is an open source (MIT) keyboard firmware built on the &lt;a href=&#34;https://www.zephyrproject.org/&#34;&gt;Zephyr™ Project&lt;/a&gt; Real Time Operating System (RTOS). ZMK&#39;s goal is to provide a modern, wireless, and powerful firmware free of licensing issues.&lt;/p&gt; &#xA;&lt;p&gt;Check out the website to learn more: &lt;a href=&#34;https://zmk.dev/&#34;&gt;https://zmk.dev/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also come join our &lt;a href=&#34;https://zmk.dev/community/discord/invite&#34;&gt;ZMK Discord Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To review features, check out the &lt;a href=&#34;https://zmk.dev/docs/&#34;&gt;feature overview&lt;/a&gt;. ZMK is under active development, and new features are listed with the &lt;a href=&#34;https://github.com/zmkfirmware/zmk/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement&#34;&gt;enhancement label&lt;/a&gt; in GitHub. Please feel free to add 👍 to the issue description of any requests to upvote the feature.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nothings/stb</title>
    <updated>2022-07-26T01:35:04Z</updated>
    <id>tag:github.com,2022-07-26:/nothings/stb</id>
    <link href="https://github.com/nothings/stb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;stb single-file public domain libraries for C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stb&lt;/h1&gt; &#xA;&lt;p&gt;single-file public domain (or MIT licensed) libraries for C/C++&lt;/p&gt; &#xA;&lt;p&gt;Noteworthy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;image loader: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;image writer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h&#34;&gt;stb_image_write.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;image resizer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_resize.h&#34;&gt;stb_image_resize.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;font text rasterizer: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h&#34;&gt;stb_truetype.h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;typesafe containers: &lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_ds.h&#34;&gt;stb_ds.h&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most libraries by stb, except: stb_dxt by Fabian &#34;ryg&#34; Giesen, stb_image_resize by Jorge L. &#34;VinoBS&#34; Rodriguez, and stb_sprintf by Jeff Roberts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;stb_libs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;library&lt;/th&gt; &#xA;   &lt;th&gt;lastest version&lt;/th&gt; &#xA;   &lt;th&gt;category&lt;/th&gt; &#xA;   &lt;th&gt;LoC&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_vorbis.c&#34;&gt;stb_vorbis.c&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.22&lt;/td&gt; &#xA;   &lt;td&gt;audio&lt;/td&gt; &#xA;   &lt;td&gt;5584&lt;/td&gt; &#xA;   &lt;td&gt;decode ogg vorbis files from file/memory to float/16-bit signed output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_hexwave.h&#34;&gt;stb_hexwave.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;td&gt;audio&lt;/td&gt; &#xA;   &lt;td&gt;680&lt;/td&gt; &#xA;   &lt;td&gt;audio waveform synthesizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.27&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;7897&lt;/td&gt; &#xA;   &lt;td&gt;image loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h&#34;&gt;stb_truetype.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.26&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;5077&lt;/td&gt; &#xA;   &lt;td&gt;parse, decode, and rasterize characters from truetype fonts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h&#34;&gt;stb_image_write.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.16&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;1724&lt;/td&gt; &#xA;   &lt;td&gt;image writing to disk: PNG, TGA, BMP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_image_resize.h&#34;&gt;stb_image_resize.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;2634&lt;/td&gt; &#xA;   &lt;td&gt;resize images larger/smaller with good quality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_rect_pack.h&#34;&gt;stb_rect_pack.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.01&lt;/td&gt; &#xA;   &lt;td&gt;graphics&lt;/td&gt; &#xA;   &lt;td&gt;623&lt;/td&gt; &#xA;   &lt;td&gt;simple 2D rectangle packer with decent quality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_ds.h&#34;&gt;stb_ds.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.67&lt;/td&gt; &#xA;   &lt;td&gt;utility&lt;/td&gt; &#xA;   &lt;td&gt;1895&lt;/td&gt; &#xA;   &lt;td&gt;typesafe dynamic array and hash tables for C, will compile in C++&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_sprintf.h&#34;&gt;stb_sprintf.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.10&lt;/td&gt; &#xA;   &lt;td&gt;utility&lt;/td&gt; &#xA;   &lt;td&gt;1906&lt;/td&gt; &#xA;   &lt;td&gt;fast sprintf, snprintf for C/C++&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_textedit.h&#34;&gt;stb_textedit.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.14&lt;/td&gt; &#xA;   &lt;td&gt;user&amp;nbsp;interface&lt;/td&gt; &#xA;   &lt;td&gt;1429&lt;/td&gt; &#xA;   &lt;td&gt;guts of a text editor for games etc implementing them from scratch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_voxel_render.h&#34;&gt;stb_voxel_render.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.89&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;3807&lt;/td&gt; &#xA;   &lt;td&gt;Minecraft-esque voxel rendering &#34;engine&#34; with many more features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_dxt.h&#34;&gt;stb_dxt.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.12&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;719&lt;/td&gt; &#xA;   &lt;td&gt;Fabian &#34;ryg&#34; Giesen&#39;s real-time DXT compressor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_easy_font.h&#34;&gt;stb_easy_font.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;   &lt;td&gt;3D&amp;nbsp;graphics&lt;/td&gt; &#xA;   &lt;td&gt;305&lt;/td&gt; &#xA;   &lt;td&gt;quick-and-dirty easy-to-deploy bitmap font for printing frame rate, etc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_tilemap_editor.h&#34;&gt;stb_tilemap_editor.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.42&lt;/td&gt; &#xA;   &lt;td&gt;game&amp;nbsp;dev&lt;/td&gt; &#xA;   &lt;td&gt;4187&lt;/td&gt; &#xA;   &lt;td&gt;embeddable tilemap editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_herringbone_wang_tile.h&#34;&gt;stb_herringbone_wa...&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;   &lt;td&gt;game&amp;nbsp;dev&lt;/td&gt; &#xA;   &lt;td&gt;1221&lt;/td&gt; &#xA;   &lt;td&gt;herringbone Wang tile map generator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_c_lexer.h&#34;&gt;stb_c_lexer.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;   &lt;td&gt;parsing&lt;/td&gt; &#xA;   &lt;td&gt;940&lt;/td&gt; &#xA;   &lt;td&gt;simplify writing parsers for C-like languages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_divide.h&#34;&gt;stb_divide.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.94&lt;/td&gt; &#xA;   &lt;td&gt;math&lt;/td&gt; &#xA;   &lt;td&gt;433&lt;/td&gt; &#xA;   &lt;td&gt;more useful 32-bit modulus e.g. &#34;euclidean divide&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_connected_components.h&#34;&gt;stb_connected_comp...&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.96&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;1049&lt;/td&gt; &#xA;   &lt;td&gt;incrementally compute reachability on grids&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_leakcheck.h&#34;&gt;stb_leakcheck.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;194&lt;/td&gt; &#xA;   &lt;td&gt;quick-and-dirty malloc/free leak-checking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nothings/stb/master/stb_include.h&#34;&gt;stb_include.h&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.02&lt;/td&gt; &#xA;   &lt;td&gt;misc&lt;/td&gt; &#xA;   &lt;td&gt;295&lt;/td&gt; &#xA;   &lt;td&gt;implement recursive #include support, particularly for GLSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Total libraries: 20 Total lines of C code: 42599&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;What&#39;s the license?&lt;/h4&gt; &#xA;&lt;p&gt;These libraries are in the public domain. You can do anything you want with them. You have no legal obligation to do anything else, although I appreciate attribution.&lt;/p&gt; &#xA;&lt;p&gt;They are also licensed under the MIT open source license, if you have lawyers who are unhappy with public domain. Every source file includes an explicit dual-license for you to choose from.&lt;/p&gt; &#xA;&lt;h4&gt;How do I use these libraries?&lt;/h4&gt; &#xA;&lt;p&gt;The idea behind single-header file libraries is that they&#39;re easy to distribute and deploy because all the code is contained in a single file. By default, the .h files in here act as their own header files, i.e. they declare the functions contained in the file but don&#39;t actually result in any code getting compiled.&lt;/p&gt; &#xA;&lt;p&gt;So in addition, you should select &lt;em&gt;exactly one&lt;/em&gt; C/C++ source file that actually instantiates the code, preferably a file you&#39;re not editing frequently. This file should define a specific macro (this is documented per-library) to actually enable the function definitions. For example, to use stb_image, you should have exactly one C/C++ file that doesn&#39;t include stb_image.h regularly, but instead does&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define STB_IMAGE_IMPLEMENTATION&#xA;#include &#34;stb_image.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The right macro to define is pointed out right at the top of each of these libraries.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;other_libs&#34;&gt;&lt;/a&gt; Are there other single-file public-domain/open source libraries with minimal dependencies out there?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nothings/single_file_libs&#34;&gt;Yes.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;If I wrap an stb library in a new library, does the new library have to be public domain/MIT?&lt;/h4&gt; &#xA;&lt;p&gt;No, because it&#39;s public domain you can freely relicense it to whatever license your new library wants to be.&lt;/p&gt; &#xA;&lt;h4&gt;What&#39;s the deal with SSE support in GCC-based compilers?&lt;/h4&gt; &#xA;&lt;p&gt;stb_image will either use SSE2 (if you compile with -msse2) or will not use any SIMD at all, rather than trying to detect the processor at runtime and handle it correctly. As I understand it, the approved path in GCC for runtime-detection require you to use multiple source files, one for each CPU configuration. Because stb_image is a header-file library that compiles in only one source file, there&#39;s no approved way to build both an SSE-enabled and a non-SSE-enabled variation.&lt;/p&gt; &#xA;&lt;p&gt;While we&#39;ve tried to work around it, we&#39;ve had multiple issues over the years due to specific versions of gcc breaking what we&#39;re doing, so we&#39;ve given up on it. See &lt;a href=&#34;https://github.com/nothings/stb/issues/280&#34;&gt;https://github.com/nothings/stb/issues/280&lt;/a&gt; and &lt;a href=&#34;https://github.com/nothings/stb/issues/410&#34;&gt;https://github.com/nothings/stb/issues/410&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h4&gt;Some of these libraries seem redundant to existing open source libraries. Are they better somehow?&lt;/h4&gt; &#xA;&lt;p&gt;Generally they&#39;re only better in that they&#39;re easier to integrate, easier to use, and easier to release (single file; good API; no attribution requirement). They may be less featureful, slower, and/or use more memory. If you&#39;re already using an equivalent library, there&#39;s probably no good reason to switch.&lt;/p&gt; &#xA;&lt;h4&gt;Can I link directly to the table of stb libraries?&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/nothings/stb#stb_libs&#34;&gt;this URL&lt;/a&gt; to link directly to that list.&lt;/p&gt; &#xA;&lt;h4&gt;Why do you list &#34;lines of code&#34;? It&#39;s a terrible metric.&lt;/h4&gt; &#xA;&lt;p&gt;Just to give you some idea of the internal complexity of the library, to help you manage your expectations, or to let you know what you&#39;re getting into. While not all the libraries are written in the same style, they&#39;re certainly similar styles, and so comparisons between the libraries are probably still meaningful.&lt;/p&gt; &#xA;&lt;p&gt;Note though that the lines do include both the implementation, the part that corresponds to a header file, and the documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Why single-file headers?&lt;/h4&gt; &#xA;&lt;p&gt;Windows doesn&#39;t have standard directories where libraries live. That makes deploying libraries in Windows a lot more painful than open source developers on Unix-derivates generally realize. (It also makes library dependencies a lot worse in Windows.)&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a common problem in Windows where a library was built against a different version of the runtime library, which causes link conflicts and confusion. Shipping the libs as headers means you normally just compile them straight into your project without making libraries, thus sidestepping that problem.&lt;/p&gt; &#xA;&lt;p&gt;Making them a single file makes it very easy to just drop them into a project that needs them. (Of course you can still put them in a proper shared library tree if you want.)&lt;/p&gt; &#xA;&lt;p&gt;Why not two files, one a header and one an implementation? The difference between 10 files and 9 files is not a big deal, but the difference between 2 files and 1 file is a big deal. You don&#39;t need to zip or tar the files up, you don&#39;t have to remember to attach &lt;em&gt;two&lt;/em&gt; files, etc.&lt;/p&gt; &#xA;&lt;h4&gt;Why &#34;stb&#34;? Is this something to do with Set-Top Boxes?&lt;/h4&gt; &#xA;&lt;p&gt;No, they are just the initials for my name, Sean T. Barrett. This was not chosen out of egomania, but as a moderately sane way of namespacing the filenames and source function names.&lt;/p&gt; &#xA;&lt;h4&gt;Will you add more image types to stb_image.h?&lt;/h4&gt; &#xA;&lt;p&gt;No. As stb_image use has grown, it has become more important for us to focus on security of the codebase. Adding new image formats increases the amount of code we need to secure, so it is no longer worth adding new formats.&lt;/p&gt; &#xA;&lt;h4&gt;Do you have any advice on how to create my own single-file library?&lt;/h4&gt; &#xA;&lt;p&gt;Yes. &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/stb_howto.txt&#34;&gt;https://github.com/nothings/stb/blob/master/docs/stb_howto.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why public domain?&lt;/h4&gt; &#xA;&lt;p&gt;I prefer it over GPL, LGPL, BSD, zlib, etc. for many reasons. Some of them are listed here: &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/why_public_domain.md&#34;&gt;https://github.com/nothings/stb/blob/master/docs/why_public_domain.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why C?&lt;/h4&gt; &#xA;&lt;p&gt;Primarily, because I use C, not C++. But it does also make it easier for other people to use them from other languages.&lt;/p&gt; &#xA;&lt;h4&gt;Why not C99? stdint.h, declare-anywhere, etc.&lt;/h4&gt; &#xA;&lt;p&gt;I still use MSVC 6 (1998) as my IDE because it has better human factors for me than later versions of MSVC.&lt;/p&gt;</summary>
  </entry>
</feed>