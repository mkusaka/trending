<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-30T01:26:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sekigon-gonnoc/Pico-PIO-USB</title>
    <updated>2023-12-30T01:26:15Z</updated>
    <id>tag:github.com,2023-12-30:/sekigon-gonnoc/Pico-PIO-USB</id>
    <link href="https://github.com/sekigon-gonnoc/Pico-PIO-USB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;USB host/device implementation using PIO of raspberry pi pico (RP2040).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pico-PIO-USB&lt;/h1&gt; &#xA;&lt;p&gt;USB host/device implementation using PIO of raspberry pi pico (RP2040).&lt;/p&gt; &#xA;&lt;p&gt;You can add additional USB port to RP2040.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/43873124/146642806-bdf34af6-4342-4a95-bfca-229cdc4bdca2.mp4&#34;&gt;https://user-images.githubusercontent.com/43873124/146642806-bdf34af6-4342-4a95-bfca-229cdc4bdca2.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Planned Features&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FS Host&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LS Host&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hub support&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi port&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FS Device&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sekigon-gonnoc/Pico-PIO-USB/main/examples/capture_hid_report/capture_hid_report.c&#34;&gt;capture_hid_report.c&lt;/a&gt; is a USB host sample program which print HID reports received from device. Open serial port and connect devices to pico. Default D+/D- is gp0/gp1. Call &lt;code&gt;pio_usb_add_port()&lt;/code&gt; to use additional ports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sekigon-gonnoc/Pico-PIO-USB/main/examples/usb_device/usb_device.c&#34;&gt;usb_device.c&lt;/a&gt; is a HID USB FS device sample which moves mouse cursor every 0.5s. External 1.5kohm pull-up register is necessary to D+ pin (Default is gp0).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sekigon-gonnoc/Pico-PIO-USB/main/examples/host_hid_to_device_cdc/host_hid_to_device_cdc.c&#34;&gt;host_hid_to_device_cdc.c&lt;/a&gt; is similar to &lt;strong&gt;capture_hid_report.c&lt;/strong&gt; which print mouse/keyboard report from host port to device port&#39;s cdc. TinyUSB is used to manage both device (native usb) and host (pio usb) stack.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples&#xA;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make&#xA;# Copy UF2 file in capture_hid_report/ or usbdevice/ to RPiPico&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another sample program for split keyboard with QMK&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sekigon-gonnoc/qmk_firmware/tree/rp2040/keyboards/pico_pico_usb&#34;&gt;https://github.com/sekigon-gonnoc/qmk_firmware/tree/rp2040/keyboards/pico_pico_usb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resource Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two PIO &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;One PIO is for USB transmitter using 22 instruction and one state machine&lt;/li&gt; &#xA;   &lt;li&gt;Another PIO is for USB receiver using 31 instruction and two state machine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Two GPIO for D+/D- (Series 22ohm resitors are better)&lt;/li&gt; &#xA; &lt;li&gt;15KB ROM and RAM&lt;/li&gt; &#xA; &lt;li&gt;(For Host) One 1ms repeating timer&lt;/li&gt; &#xA; &lt;li&gt;(For Device) One PIO IRQ for receiver&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>toniebox-reverse-engineering/teddycloud</title>
    <updated>2023-12-30T01:26:15Z</updated>
    <id>tag:github.com,2023-12-30:/toniebox-reverse-engineering/teddycloud</id>
    <link href="https://github.com/toniebox-reverse-engineering/teddycloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;teddyCloud is an open source server replacement for the Boxine Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TeddyCloud&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;TeddyCloud is an alternative server for your Toniebox, allowing you to host the cloud services locally. This gives you the control about which data is sent to the original manufacturer&#39;s cloud and allows you to host your own figurine audio files on e.g. your NAS or any other server.&lt;/p&gt; &#xA;&lt;p&gt;Currently implemented are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide audio content over the air&lt;/li&gt; &#xA; &lt;li&gt;Cache original tonie audio content&lt;/li&gt; &#xA; &lt;li&gt;Simulate live content (.live)&lt;/li&gt; &#xA; &lt;li&gt;Passthrough original tonie audio content&lt;/li&gt; &#xA; &lt;li&gt;Convert any audio file to a tonie audio file (web)&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly convert audio streams via ffmpeg for webradio and streams&lt;/li&gt; &#xA; &lt;li&gt;Basic Web fronted&lt;/li&gt; &#xA; &lt;li&gt;Filter custom tags to prevent deletion (.nocloud)&lt;/li&gt; &#xA; &lt;li&gt;Configure maximum volume for speaker and headphones&lt;/li&gt; &#xA; &lt;li&gt;Configure LED&lt;/li&gt; &#xA; &lt;li&gt;Configure slapping&lt;/li&gt; &#xA; &lt;li&gt;Customize original box sounds (ex. jingle) over the air&lt;/li&gt; &#xA; &lt;li&gt;Extract/Inject certitifcates on a esp32 firmware dump&lt;/li&gt; &#xA; &lt;li&gt;Decode RTNL logs&lt;/li&gt; &#xA; &lt;li&gt;MQTT client&lt;/li&gt; &#xA; &lt;li&gt;Home Assistant integration (MQTT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/toniebox-reverse-engineering/teddycloud_web&#34;&gt;Web frontend&lt;/a&gt; (full stack developers welcome)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;teddyBench integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where to start?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to get started, please follow our &lt;a href=&#34;https://toniebox-reverse-engineering.github.io/docs/tools/teddycloud/&#34;&gt;guide on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Attribution&lt;/h2&gt; &#xA;&lt;p&gt;The icons used are from here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;img_empty.png: &lt;a href=&#34;https://www.flaticon.com/free-icon/ask_1372671&#34;&gt;https://www.flaticon.com/free-icon/ask_1372671&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;img_unknown.png: &lt;a href=&#34;https://www.flaticon.com/free-icon/ask_1923795&#34;&gt;https://www.flaticon.com/free-icon/ask_1923795&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;img_custom.png/favicon.ico: &lt;a href=&#34;https://www.flaticon.com/free-icon/dog_2829818&#34;&gt;https://www.flaticon.com/free-icon/dog_2829818&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks for the original authors for these great icons.&lt;/p&gt;</summary>
  </entry>
</feed>