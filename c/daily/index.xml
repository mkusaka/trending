<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-09T01:28:17Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openocd-org/openocd</title>
    <updated>2024-08-09T01:28:17Z</updated>
    <id>tag:github.com,2024-08-09:/openocd-org/openocd</id>
    <link href="https://github.com/openocd-org/openocd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official OpenOCD Read-Only Mirror (no pull requests)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to OpenOCD!&lt;/h1&gt; &#xA;&lt;p&gt;OpenOCD provides on-chip programming and debugging support with a layered architecture of JTAG interface and TAP support including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(X)SVF playback to facilitate automated boundary scan and FPGA/CPLD programming;&lt;/li&gt; &#xA; &lt;li&gt;debug target support (e.g. ARM, MIPS): single-stepping, breakpoints/watchpoints, gprof profiling, etc;&lt;/li&gt; &#xA; &lt;li&gt;flash chip drivers (e.g. CFI, NAND, internal flash);&lt;/li&gt; &#xA; &lt;li&gt;embedded TCL interpreter for easy scripting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Several network interfaces are available for interacting with OpenOCD: telnet, TCL, and GDB. The GDB server enables OpenOCD to function as a &#34;remote target&#34; for source-level debugging of embedded systems using the GNU GDB program (and the others who talk GDB protocol, e.g. IDA Pro).&lt;/p&gt; &#xA;&lt;p&gt;This README file contains an overview of the following topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;quickstart instructions,&lt;/li&gt; &#xA; &lt;li&gt;how to find and build more OpenOCD documentation,&lt;/li&gt; &#xA; &lt;li&gt;list of the supported hardware,&lt;/li&gt; &#xA; &lt;li&gt;the installation and build process,&lt;/li&gt; &#xA; &lt;li&gt;packaging tips.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;============================ Quickstart for the impatient&lt;/h1&gt; &#xA;&lt;p&gt;If you have a popular board then just start OpenOCD with its config, e.g.:&lt;/p&gt; &#xA;&lt;p&gt;openocd -f board/stm32f4discovery.cfg&lt;/p&gt; &#xA;&lt;p&gt;If you are connecting a particular adapter with some specific target, you need to source both the jtag interface and the target configs, e.g.:&lt;/p&gt; &#xA;&lt;p&gt;openocd -f interface/ftdi/jtagkey2.cfg -c &#34;transport select jtag&#34; &lt;br&gt; -f target/ti_calypso.cfg&lt;/p&gt; &#xA;&lt;p&gt;openocd -f interface/stlink.cfg -c &#34;transport select hla_swd&#34; &lt;br&gt; -f target/stm32l0.cfg&lt;/p&gt; &#xA;&lt;p&gt;After OpenOCD startup, connect GDB with&lt;/p&gt; &#xA;&lt;p&gt;(gdb) target extended-remote localhost:3333&lt;/p&gt; &#xA;&lt;h1&gt;===================== OpenOCD Documentation&lt;/h1&gt; &#xA;&lt;p&gt;In addition to the in-tree documentation, the latest manuals may be viewed online at the following URLs:&lt;/p&gt; &#xA;&lt;p&gt;OpenOCD User&#39;s Guide: &lt;a href=&#34;http://openocd.org/doc/html/index.html&#34;&gt;http://openocd.org/doc/html/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenOCD Developer&#39;s Manual: &lt;a href=&#34;http://openocd.org/doc/doxygen/html/index.html&#34;&gt;http://openocd.org/doc/doxygen/html/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These reflect the latest development versions, so the following section introduces how to build the complete documentation from the package.&lt;/p&gt; &#xA;&lt;p&gt;For more information, refer to these documents or contact the developers by subscribing to the OpenOCD developer mailing list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openocd-devel@lists.sourceforge.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the OpenOCD Documentation&lt;/h2&gt; &#xA;&lt;p&gt;By default the OpenOCD build process prepares documentation in the &#34;Info format&#34; and installs it the standard way, so that &#34;info openocd&#34; can access it.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the OpenOCD User&#39;s Guide can be produced in the following different formats:&lt;/p&gt; &#xA;&lt;h1&gt;If PDFVIEWER is set, this creates and views the PDF User Guide.&lt;/h1&gt; &#xA;&lt;p&gt;make pdf &amp;amp;&amp;amp; ${PDFVIEWER} doc/openocd.pdf&lt;/p&gt; &#xA;&lt;h1&gt;If HTMLVIEWER is set, this creates and views the HTML User Guide.&lt;/h1&gt; &#xA;&lt;p&gt;make html &amp;amp;&amp;amp; ${HTMLVIEWER} doc/openocd.html/index.html&lt;/p&gt; &#xA;&lt;p&gt;The OpenOCD Developer Manual contains information about the internal architecture and other details about the code:&lt;/p&gt; &#xA;&lt;h1&gt;NB! make sure doxygen is installed, type doxygen --version&lt;/h1&gt; &#xA;&lt;p&gt;make doxygen &amp;amp;&amp;amp; ${HTMLVIEWER} doxygen/index.html&lt;/p&gt; &#xA;&lt;h1&gt;================== Supported hardware&lt;/h1&gt; &#xA;&lt;h2&gt;JTAG adapters&lt;/h2&gt; &#xA;&lt;p&gt;AM335x, ARM-JTAG-EW, ARM-USB-OCD, ARM-USB-TINY, AT91RM9200, axm0432, BCM2835, Bus Blaster, Buspirate, Cadence DPI, Cadence vdebug, Chameleon, CMSIS-DAP, Cortino, Cypress KitProg, DENX, Digilent JTAG-SMT2, DLC 5, DLP-USB1232H, embedded projects, Espressif USB JTAG Programmer, eStick, FlashLINK, FlossJTAG, Flyswatter, Flyswatter2, FTDI FT232R, Gateworks, Hoegl, ICDI, ICEBear, J-Link, JTAG VPI, JTAGkey, JTAGkey2, JTAG-lock-pick, KT-Link, Linux GPIOD, Lisa/L, LPC1768-Stick, Mellanox rshim, MiniModule, NGX, Nuvoton Nu-Link, Nu-Link2, NXHX, NXP IMX GPIO, OOCDLink, Opendous, OpenJTAG, Openmoko, OpenRD, OSBDM, Presto, Redbee, Remote Bitbang, RLink, SheevaPlug devkit, Stellaris evkits, ST-LINK (SWO tracing supported), STM32-PerformanceStick, STR9-comStick, sysfsgpio, Tigard, TI XDS110, TUMPA, Turtelizer, ULINK, USB-A9260, USB-Blaster, USB-JTAG, USBprog, VPACLink, VSLLink, Wiggler, XDS100v2, Xilinx XVC/PCIe, Xverve.&lt;/p&gt; &#xA;&lt;h2&gt;Debug targets&lt;/h2&gt; &#xA;&lt;p&gt;ARM: AArch64, ARM11, ARM7, ARM9, Cortex-A/R (v7-A/R), Cortex-M (ARMv{6/7/8}-M), FA526, Feroceon/Dragonite, XScale. ARCv2, AVR32, DSP563xx, DSP5680xx, EnSilica eSi-RISC, EJTAG (MIPS32, MIPS64), ESP32, ESP32-S2, ESP32-S3, Intel Quark, LS102x-SAP, RISC-V, ST STM8, Xtensa.&lt;/p&gt; &#xA;&lt;h2&gt;Flash drivers&lt;/h2&gt; &#xA;&lt;p&gt;ADUC702x, AT91SAM, AT91SAM9 (NAND), ATH79, ATmega128RFA1, Atmel SAM, AVR, CFI, DSP5680xx, EFM32, EM357, eSi-RISC, eSi-TSMC, EZR32HG, FM3, FM4, Freedom E SPI, GD32, i.MX31, Kinetis, LPC8xx/LPC1xxx/LPC2xxx/LPC541xx, LPC2900, LPC3180, LPC32xx, LPCSPIFI, Marvell QSPI, MAX32, Milandr, MXC, NIIET, nRF51, nRF52 , NuMicro, NUC910, Nuvoton NPCX, onsemi RSL10, Orion/Kirkwood, PIC32mx, PSoC4/5LP/6, Raspberry RP2040, Renesas RPC HF and SH QSPI, S3C24xx, S3C6400, SiM3x, SiFive Freedom E, Stellaris, ST BlueNRG, STM32, STM32 QUAD/OCTO-SPI for Flash/FRAM/EEPROM, STMSMI, STR7x, STR9x, SWM050, TI CC13xx, TI CC26xx, TI CC32xx, TI MSP432, Winner Micro w600, Xilinx XCF, XMC1xxx, XMC4xxx.&lt;/p&gt; &#xA;&lt;h1&gt;================== Installing OpenOCD&lt;/h1&gt; &#xA;&lt;h2&gt;A Note to OpenOCD Users&lt;/h2&gt; &#xA;&lt;p&gt;If you would rather be working &#34;with&#34; OpenOCD rather than &#34;on&#34; it, your operating system or JTAG interface supplier may provide binaries for you in a convenient-enough package.&lt;/p&gt; &#xA;&lt;p&gt;Such packages may be more stable than git mainline, where bleeding-edge development takes place. These &#34;Packagers&#34; produce binary releases of OpenOCD after the developers produces new &#34;release&#34; versions of the source code. Previous versions of OpenOCD cannot be used to diagnose problems with the current release, so users are encouraged to keep in contact with their distribution package maintainers or interface vendors to ensure suitable upgrades appear regularly.&lt;/p&gt; &#xA;&lt;p&gt;Users of these binary versions of OpenOCD must contact their Packager to ask for support or newer versions of the binaries; the OpenOCD developers do not support packages directly.&lt;/p&gt; &#xA;&lt;h2&gt;A Note to OpenOCD Packagers&lt;/h2&gt; &#xA;&lt;p&gt;You are a PACKAGER of OpenOCD if you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sell dongles and include pre-built binaries;&lt;/li&gt; &#xA; &lt;li&gt;Supply tools or IDEs (a development solution integrating OpenOCD);&lt;/li&gt; &#xA; &lt;li&gt;Build packages (e.g. RPM or DEB files for a GNU/Linux distribution).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a PACKAGER, you will experience first reports of most issues. When you fix those problems for your users, your solution may help prevent hundreds (if not thousands) of other questions from other users.&lt;/p&gt; &#xA;&lt;p&gt;If something does not work for you, please work to inform the OpenOCD developers know how to improve the system or documentation to avoid future problems, and follow-up to help us ensure the issue will be fully resolved in our future releases.&lt;/p&gt; &#xA;&lt;p&gt;That said, the OpenOCD developers would also like you to follow a few suggestions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send patches, including config files, upstream, participate in the discussions;&lt;/li&gt; &#xA; &lt;li&gt;Enable all the options OpenOCD supports, even those unrelated to your particular hardware;&lt;/li&gt; &#xA; &lt;li&gt;Use &#34;ftdi&#34; interface adapter driver for the FTDI-based devices.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;================ Building OpenOCD&lt;/h1&gt; &#xA;&lt;p&gt;The INSTALL file contains generic instructions for running &#39;configure&#39; and compiling the OpenOCD source code. That file is provided by default for all GNU autotools packages. If you are not familiar with the GNU autotools, then you should read those instructions first.&lt;/p&gt; &#xA;&lt;p&gt;The remainder of this document tries to provide some instructions for those looking for a quick-install.&lt;/p&gt; &#xA;&lt;h2&gt;OpenOCD Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;GCC or Clang is currently required to build OpenOCD. The developers have begun to enforce strict code warnings (-Wall, -Werror, -Wextra, and more) and use C99-specific features: inline functions, named initializers, mixing declarations with code, and other tricks. While it may be possible to use other compilers, they must be somewhat modern and could require extending support to conditionally remove GCC-specific extensions.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;libtool&lt;/li&gt; &#xA; &lt;li&gt;pkg-config &amp;gt;= 0.23 or pkgconf&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OpenOCD uses jimtcl library; build from git can retrieve jimtcl as git submodule.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, for building from git:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;autoconf &amp;gt;= 2.69&lt;/li&gt; &#xA; &lt;li&gt;automake &amp;gt;= 1.14&lt;/li&gt; &#xA; &lt;li&gt;texinfo &amp;gt;= 5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional USB-based adapter drivers need libusb-1.0.&lt;/p&gt; &#xA;&lt;p&gt;Optional USB-Blaster, ASIX Presto and OpenJTAG interface adapter drivers need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libftdi: &lt;a href=&#34;http://www.intra2net.com/en/developer/libftdi/index.php&#34;&gt;http://www.intra2net.com/en/developer/libftdi/index.php&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional CMSIS-DAP adapter driver needs HIDAPI library.&lt;/p&gt; &#xA;&lt;p&gt;Optional linuxgpiod adapter driver needs libgpiod library.&lt;/p&gt; &#xA;&lt;p&gt;Optional J-Link adapter driver needs libjaylink library.&lt;/p&gt; &#xA;&lt;p&gt;Optional ARM disassembly needs capstone library.&lt;/p&gt; &#xA;&lt;p&gt;Optional development script checkpatch needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perl&lt;/li&gt; &#xA; &lt;li&gt;python&lt;/li&gt; &#xA; &lt;li&gt;python-ply&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions delegation&lt;/h2&gt; &#xA;&lt;p&gt;Running OpenOCD with root/administrative permissions is strongly discouraged for security reasons.&lt;/p&gt; &#xA;&lt;p&gt;For USB devices on GNU/Linux you should use the contrib/60-openocd.rules file. It probably belongs somewhere in /etc/udev/rules.d, but consult your operating system documentation to be sure. Do not forget to add yourself to the &#34;plugdev&#34; group.&lt;/p&gt; &#xA;&lt;p&gt;For parallel port adapters on GNU/Linux and FreeBSD please change your &#34;ppdev&#34; (parport* or ppi*) device node permissions accordingly.&lt;/p&gt; &#xA;&lt;p&gt;For parport adapters on Windows you need to run install_giveio.bat (it&#39;s also possible to use &#34;ioperm&#34; with Cygwin instead) to give ordinary users permissions for accessing the &#34;LPT&#34; registers directly.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling OpenOCD&lt;/h2&gt; &#xA;&lt;p&gt;To build OpenOCD, use the following sequence of commands:&lt;/p&gt; &#xA;&lt;p&gt;./bootstrap (when building from the git repository) ./configure [options] make sudo make install&lt;/p&gt; &#xA;&lt;p&gt;The &#39;configure&#39; step generates the Makefiles required to build OpenOCD, usually with one or more options provided to it. The first &#39;make&#39; step will build OpenOCD and place the final executable in &#39;./src/&#39;. The final (optional) step, ``make install&#39;&#39;, places all of the files in the required location.&lt;/p&gt; &#xA;&lt;p&gt;To see the list of all the supported options, run ./configure --help&lt;/p&gt; &#xA;&lt;h2&gt;Cross-compiling Options&lt;/h2&gt; &#xA;&lt;p&gt;Cross-compiling is supported the standard autotools way, you just need to specify the cross-compiling target triplet in the --host option, e.g. for cross-building for Windows 32-bit with MinGW on Debian:&lt;/p&gt; &#xA;&lt;p&gt;./configure --host=i686-w64-mingw32 [options]&lt;/p&gt; &#xA;&lt;p&gt;To make pkg-config work nicely for cross-compiling, you might need an additional wrapper script as described at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://autotools.io/pkgconfig/cross-compiling.html&#34;&gt;https://autotools.io/pkgconfig/cross-compiling.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is needed to tell pkg-config where to look for the target libraries that OpenOCD depends on. Alternatively, you can specify *_CFLAGS and *_LIBS environment variables directly, see &#34;./configure --help&#34; for the details.&lt;/p&gt; &#xA;&lt;p&gt;For a more or less complete script that does all this for you, see&lt;/p&gt; &#xA;&lt;p&gt;contrib/cross-build.sh&lt;/p&gt; &#xA;&lt;h2&gt;Parallel Port Dongles&lt;/h2&gt; &#xA;&lt;p&gt;If you want to access the parallel port using the PPDEV interface you have to specify both --enable-parport AND --enable-parport-ppdev, since the later option is an option to the parport driver.&lt;/p&gt; &#xA;&lt;p&gt;The same is true for the --enable-parport-giveio option, you have to use both the --enable-parport AND the --enable-parport-giveio option if you want to use giveio instead of ioperm parallel port access method.&lt;/p&gt; &#xA;&lt;h1&gt;========================== Obtaining OpenOCD From GIT&lt;/h1&gt; &#xA;&lt;p&gt;You can download the current GIT version with a GIT client of your choice from the main repository:&lt;/p&gt; &#xA;&lt;p&gt;git://git.code.sf.net/p/openocd/code&lt;/p&gt; &#xA;&lt;p&gt;You may prefer to use a mirror:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://repo.or.cz/r/openocd.git&#34;&gt;http://repo.or.cz/r/openocd.git&lt;/a&gt; git://repo.or.cz/openocd.git&lt;/p&gt; &#xA;&lt;p&gt;Using the GIT command line client, you might use the following command to set up a local copy of the current repository (make sure there is no directory called &#34;openocd&#34; in the current directory):&lt;/p&gt; &#xA;&lt;p&gt;git clone git://git.code.sf.net/p/openocd/code openocd&lt;/p&gt; &#xA;&lt;p&gt;Then you can update that at your convenience using&lt;/p&gt; &#xA;&lt;p&gt;git pull&lt;/p&gt; &#xA;&lt;p&gt;There is also a gitweb interface, which you can use either to browse the repository or to download arbitrary snapshots using HTTP:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://repo.or.cz/w/openocd.git&#34;&gt;http://repo.or.cz/w/openocd.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Snapshots are compressed tarballs of the source tree, about 1.3 MBytes each at this writing.&lt;/p&gt;</summary>
  </entry>
</feed>