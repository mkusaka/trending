<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-24T01:33:10Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snesrev/zelda3</title>
    <updated>2022-09-24T01:33:10Z</updated>
    <id>tag:github.com,2022-09-24:/snesrev/zelda3</id>
    <link href="https://github.com/snesrev/zelda3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zelda3&lt;/h1&gt; &#xA;&lt;p&gt;A reimplementation of Zelda 3.&lt;/p&gt; &#xA;&lt;p&gt;Our discord server is: &lt;a href=&#34;https://discord.gg/AJJbJAzNNJ&#34;&gt;https://discord.gg/AJJbJAzNNJ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is a reverse engineered clone of Zelda 3 - A Link to the Past.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s around 70-80kLOC of C code, and reimplements all parts of the original game. The game is playable from start to end.&lt;/p&gt; &#xA;&lt;p&gt;You need a copy of the ROM to extract game resources (levels, images). Then once that&#39;s done, the ROM is no longer needed.&lt;/p&gt; &#xA;&lt;p&gt;It uses the PPU and DSP implementation from &lt;a href=&#34;https://github.com/elzo-d/LakeSnes&#34;&gt;LakeSnes&lt;/a&gt;. Additionally, it can be configured to also run the original machine code side by side. Then the RAM state is compared after each frame, to verify that the C implementation is correct.&lt;/p&gt; &#xA;&lt;p&gt;I got much assistance from spannierism&#39;s Zelda 3 JP disassembly and the other ones that documented loads of function names and variables.&lt;/p&gt; &#xA;&lt;h2&gt;Additional features&lt;/h2&gt; &#xA;&lt;p&gt;Some features have been added that are not supported by the original game.&lt;/p&gt; &#xA;&lt;p&gt;Secondary item slot on button X (Hold X in inventory to select).&lt;/p&gt; &#xA;&lt;p&gt;Support for MSU audio tracks.&lt;/p&gt; &#xA;&lt;p&gt;Support for enhanced aspect ratios of 16:9 or 16:10.&lt;/p&gt; &#xA;&lt;p&gt;Switching current item with L/R keys.&lt;/p&gt; &#xA;&lt;p&gt;Reordering of inventory by pressing Y+Arrows.&lt;/p&gt; &#xA;&lt;p&gt;Higher quality map screen.&lt;/p&gt; &#xA;&lt;p&gt;Disable low health beep.&lt;/p&gt; &#xA;&lt;p&gt;Pick up items and destroy pots with Sword.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;code&gt;libsdl2-dev&lt;/code&gt; library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: automatically installed with NuGet&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;apt install libsdl2-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;brew install sdl2&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;a &lt;code&gt;tables/zelda3.sfc&lt;/code&gt; US ROM file (for asset extraction step only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SHA256 : &lt;code&gt;66871d66be19ad2c34c927d6b14cd8eb6fc3181965b6e517cb361f7316009cfb&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;pillow&lt;/code&gt; and &lt;code&gt;pyyaml&lt;/code&gt; python dependencies used by the assets extractor. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;python -m pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Look at the wiki at &lt;a href=&#34;https://github.com/snesrev/zelda3/wiki&#34;&gt;https://github.com/snesrev/zelda3/wiki&lt;/a&gt; for more help.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;First extract and compile resources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cd tables&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;python3 extract_resources.py&lt;/code&gt; to extract resources from the ROM into a more human readable format.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;python3 compile_resources.py&lt;/code&gt; to produce .h files that get included by the C code.&lt;/p&gt; &#xA;&lt;p&gt;Then build the .sln file with Visual Studio.&lt;/p&gt; &#xA;&lt;h3&gt;Linux/macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Advanced make usage ... &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make -j$(nproc) # run on all core&#xA;make clean all  # clear gen+obj and rebuild&#xA;CC=clang make   # specify compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage and controls&lt;/h2&gt; &#xA;&lt;p&gt;The game supports snapshots. The joypad input history is also saved in the snapshot. It&#39;s thus possible to replay a playthrough in turbo mode to verify that the game behaves correctly.&lt;/p&gt; &#xA;&lt;p&gt;The game is run with &lt;code&gt;./zelda3&lt;/code&gt; and takes an optional path to the ROM-file, which will verify for each frame that the C code matches the original behavior.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Button&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Up&lt;/td&gt; &#xA;   &lt;td&gt;Up arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Down&lt;/td&gt; &#xA;   &lt;td&gt;Down arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;   &lt;td&gt;Left arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;   &lt;td&gt;Right arrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Start&lt;/td&gt; &#xA;   &lt;td&gt;Enter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;   &lt;td&gt;Right shift&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;Z&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The keys can be reconfigured in zelda3.ini&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the following commands are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;   &lt;td&gt;Fill health/magic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shift+W&lt;/td&gt; &#xA;   &lt;td&gt;Fill rupees/bombs/arrows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+E&lt;/td&gt; &#xA;   &lt;td&gt;Reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;Pause (with dim)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shift+P&lt;/td&gt; &#xA;   &lt;td&gt;Pause (without dim)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+Up&lt;/td&gt; &#xA;   &lt;td&gt;Increase window size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+Down&lt;/td&gt; &#xA;   &lt;td&gt;Decrease window size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T&lt;/td&gt; &#xA;   &lt;td&gt;Toggle replay turbo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;O&lt;/td&gt; &#xA;   &lt;td&gt;Set dungeon key to 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;Clear all input history from the joypad log&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;Stop replaying a shapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;Toggle between fast and slow renderer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F&lt;/td&gt; &#xA;   &lt;td&gt;Display renderer performance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F1-F10&lt;/td&gt; &#xA;   &lt;td&gt;Load snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alt+Enter&lt;/td&gt; &#xA;   &lt;td&gt;Toggle Fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shift+F1-F10&lt;/td&gt; &#xA;   &lt;td&gt;Save snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+F1-F10&lt;/td&gt; &#xA;   &lt;td&gt;Replay the snapshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1-9&lt;/td&gt; &#xA;   &lt;td&gt;run a dungeons playthrough snapshots&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctrl+1-9&lt;/td&gt; &#xA;   &lt;td&gt;run a dungeons playthrough in turbo mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license. See &#39;LICENSE.txt&#39; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>torproject/tor</title>
    <updated>2022-09-24T01:33:10Z</updated>
    <id>tag:github.com,2022-09-24:/torproject/tor</id>
    <link href="https://github.com/torproject/tor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;unofficial git repo -- report bugs/issues/pull requests on https://gitlab.torproject.org/ --&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Tor protects your privacy on the internet by hiding the connection between your Internet address and the services you use. We believe Tor is reasonably secure, but please ensure you read the instructions and configure it properly.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;To build Tor from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build Tor from a just-cloned git repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./autogen.sh&#xA;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;The tarballs, checksums and signatures can be found here: &lt;a href=&#34;https://dist.torproject.org&#34;&gt;https://dist.torproject.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checksum: &lt;code&gt;&amp;lt;tarball-name&amp;gt;.sha256sum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Signatures: &lt;code&gt;&amp;lt;tarball-name&amp;gt;.sha256sum.asc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Schedule&lt;/h3&gt; &#xA;&lt;p&gt;You can find our release schedule here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.torproject.org/tpo/core/team/-/wikis/NetworkTeam/CoreTorReleases&#34;&gt;https://gitlab.torproject.org/tpo/core/team/-/wikis/NetworkTeam/CoreTorReleases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keys that CAN sign a release&lt;/h3&gt; &#xA;&lt;p&gt;The following keys are the maintainers of this repository. One or many of these keys can sign the releases, do NOT expect them all:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Færøy: &lt;a href=&#34;https://keys.openpgp.org/vks/v1/by-fingerprint/1C1BC007A9F607AA8152C040BEA7B180B1491921&#34;&gt;514102454D0A87DB0767A1EBBE6A0531C18A9179&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;David Goulet: &lt;a href=&#34;https://keys.openpgp.org/vks/v1/by-fingerprint/B74417EDDF22AC9F9E90F49142E86A2A11F48D36&#34;&gt;B74417EDDF22AC9F9E90F49142E86A2A11F48D36&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nick Mathewson: &lt;a href=&#34;https://keys.openpgp.org/vks/v1/by-fingerprint/2133BC600AB133E1D826D173FE43009C4607B1FB&#34;&gt;2133BC600AB133E1D826D173FE43009C4607B1FB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See our hacking documentation in &lt;a href=&#34;https://raw.githubusercontent.com/torproject/tor/main/doc/HACKING&#34;&gt;doc/HACKING/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;Home page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.torproject.org/&#34;&gt;https://www.torproject.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Download new versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.torproject.org/download/download.html&#34;&gt;https://www.torproject.org/download/download.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation, including links to installation and setup instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.torproject.org/docs/documentation.html&#34;&gt;https://www.torproject.org/docs/documentation.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Frequently Asked Questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.torproject.org/docs/faq.html&#34;&gt;https://www.torproject.org/docs/faq.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alexaorrico/holbertonschool-low_level_programming</title>
    <updated>2022-09-24T01:33:10Z</updated>
    <id>tag:github.com,2022-09-24:/alexaorrico/holbertonschool-low_level_programming</id>
    <link href="https://github.com/alexaorrico/holbertonschool-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.holbertonschool.com/assets/holberton-logo-1cc451260ca3cd297def53f2250a9794810667c7ca7b5fa5879a569a457bf16f.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;h1&gt;Low Level Programming &amp;amp; Algorithms&lt;/h1&gt; &#xA;&lt;img src=&#34;https://s3.amazonaws.com/intranet-projects-files/holbertonschool-low_level_programming/212/cisfun.jpg&#34; width=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Welcome&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for visiting my programming projects. The majority of the code was written in C, with a few files written in Assembly.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/#projects&#34;&gt;Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains projects on the C programming language. The projects cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compilation&lt;/li&gt; &#xA; &lt;li&gt;Commenting code and following a coding style standard&lt;/li&gt; &#xA; &lt;li&gt;Variables, types, operators, expressions, loops, nested loops&lt;/li&gt; &#xA; &lt;li&gt;Conditional statements&lt;/li&gt; &#xA; &lt;li&gt;Functions&lt;/li&gt; &#xA; &lt;li&gt;Pre-processor, macros, header files, pointers, double pointers, function pointers, pointer arithmetic&lt;/li&gt; &#xA; &lt;li&gt;Arrays, multidimensional arrays, structures&lt;/li&gt; &#xA; &lt;li&gt;Static and dynamic libraries&lt;/li&gt; &#xA; &lt;li&gt;Program arguments&lt;/li&gt; &#xA; &lt;li&gt;Dynamic allocation&lt;/li&gt; &#xA; &lt;li&gt;Virtual memory, heap, stack&lt;/li&gt; &#xA; &lt;li&gt;Binary operations&lt;/li&gt; &#xA; &lt;li&gt;Makefiles&lt;/li&gt; &#xA; &lt;li&gt;Sorting and search algorithms and more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 14.04 LTS&lt;/li&gt; &#xA; &lt;li&gt;gcc 4.8.4 (-Wall, -Werror, -Wextra, and -pedantic flags)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x00-hello_world&#34;&gt;0x00-hello_world&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x01-variables_if_else_while&#34;&gt;0x01-variables_if_else_while&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x02-functions_nested_loops&#34;&gt;0x02-functions_nested_loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x03-more_functions_nested_loops&#34;&gt;0x03-more_functions_nested_loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x04-pointers_arrays_strings&#34;&gt;0x04-pointers_arrays_strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x05-pointers_arrays_strings&#34;&gt;0x05-pointers_arrays_strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x06-pointers_arrays_strings&#34;&gt;0x06-pointers_arrays_strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x07-recursion&#34;&gt;0x07-recursion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x08-static_libraries&#34;&gt;0x08-static_libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x09-argc_argv&#34;&gt;0x09-argc_argv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x0A-malloc_free&#34;&gt;0x0A-malloc_free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x0B-more_malloc_free&#34;&gt;0x0B-more_malloc_free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x0C-preprocessor&#34;&gt;0x0C-preprocessor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x0D-structures_typedef&#34;&gt;0x0D-structures_typedef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x0E-function_pointers&#34;&gt;0x0E-function_pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x0F-variadic_functions&#34;&gt;0x0F-variadic_functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexaorrico/printf&#34;&gt;0x10-printf&lt;/a&gt; ** printf project **&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x11-singly_linked_lists&#34;&gt;0x11-singly_linked_lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x12-more_singly_linked_lists&#34;&gt;0x12-more_singly_linked_lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x13-bit_manipulation&#34;&gt;0x13-bit_manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x14-file_io&#34;&gt;0x14-file_io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexaorrico/simple_shell&#34;&gt;0x15-simple_shell&lt;/a&gt; ** C Shell project **&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x16-doubly_linked_lists&#34;&gt;0x16-doubly_linked_lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x17-dynamic_libraries&#34;&gt;0x17-dynamic_libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/birnbera/monty&#34;&gt;0x18-stacks_queues_lifo_fifo&lt;/a&gt; ** Monty ByteCode Interpreter **&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x19-hash_tables&#34;&gt;0x19-hash_tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x1A-sorting_algorithms&#34;&gt;0x1A-sorting_algorithms&lt;/a&gt; ** Sorting algorithms project **&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x1B-makefiles&#34;&gt;0x1B-makefiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x1C-binary_trees&#34;&gt;0x1C-binary_trees&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexaorrico/holbertonschool-low_level_programming/master/0x1D-search_algorithms&#34;&gt;0x1D-search_algorithms&lt;/a&gt; ** Search algorithms project **&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Work is owned and maintained by Alexa Orrico (&lt;a href=&#34;https://twitter.com/alexaorrico&#34;&gt;@alexaorrico&lt;/a&gt;). Credits for group projects are displayed in the respective README.md files.&lt;/p&gt;</summary>
  </entry>
</feed>