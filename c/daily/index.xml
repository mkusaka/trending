<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-05T01:29:48Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simple64/simple64</title>
    <updated>2024-12-05T01:29:48Z</updated>
    <id>tag:github.com,2024-12-05:/simple64/simple64</id>
    <link href="https://github.com/simple64/simple64" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Accurate N64 Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;simple64 website&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://simple64.github.io&#34;&gt;https://simple64.github.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Netplay&lt;/h1&gt; &#xA;&lt;p&gt;Starting in February 2024, AWS (the hosting service used for netplay) is raising their prices[1]. Running the 4 existing netplay servers currently costs about $15 USD a month. This new price increase will basically double the cost.&lt;/p&gt; &#xA;&lt;p&gt;I am left with 2 choices if I don&#39;t receive more funding:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove 2 of the netplay servers (there are currently 4: US West, US East, Paris, and Brazil).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove IPv4 support (IPv6 only), which will make the service unavailable for some users.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please consider supporting this project as a &lt;a href=&#34;https://github.com/sponsors/loganmc10&#34;&gt;GitHub Sponsor&lt;/a&gt; or on &lt;a href=&#34;https://patreon.com/loganmc10&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[1]&lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/&#34;&gt;https://aws.amazon.com/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;h4&gt;Windows: &lt;strong&gt;&lt;a href=&#34;https://github.com/simple64/simple64/releases&#34;&gt;https://github.com/simple64/simple64/releases&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Linux: &lt;strong&gt;&lt;a href=&#34;https://flathub.org/apps/details/io.github.simple64.simple64&#34;&gt;https://flathub.org/apps/details/io.github.simple64.simple64&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Mac OS: No releases currently, requires a maintainer.&lt;/h4&gt; &#xA;&lt;h1&gt;Wiki&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/simple64/simple64/wiki&#34;&gt;https://github.com/simple64/simple64/wiki&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the Wiki page Simple64 FAQ for CPU and GPU requirements. &lt;strong&gt;Do this before asking for help!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mstorsjo/llvm-mingw</title>
    <updated>2024-12-05T01:29:48Z</updated>
    <id>tag:github.com,2024-12-05:/mstorsjo/llvm-mingw</id>
    <link href="https://github.com/mstorsjo/llvm-mingw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An LLVM/Clang/LLD based mingw-w64 toolchain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLVM MinGW&lt;/h1&gt; &#xA;&lt;p&gt;This is a recipe for reproducibly building a &lt;a href=&#34;https://llvm.org&#34;&gt;LLVM&lt;/a&gt;/&lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt;/&lt;a href=&#34;https://lld.llvm.org/&#34;&gt;LLD&lt;/a&gt; based mingw-w64 toolchain.&lt;/p&gt; &#xA;&lt;p&gt;Benefits of a LLVM based MinGW toolchain are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for targeting ARM/ARM64 (while GCC obviously does support these architectures, it doesn&#39;t support Windows on ARM)&lt;/li&gt; &#xA; &lt;li&gt;A single toolchain targeting all four architectures (i686, x86_64, armv7 and arm64) instead of separate compiler binaries for each architecture&lt;/li&gt; &#xA; &lt;li&gt;Support for generating debug info in PDB format&lt;/li&gt; &#xA; &lt;li&gt;Support for Address Sanitizer and Undefined Behaviour Sanitizer&lt;/li&gt; &#xA; &lt;li&gt;Since LLVM 16: Support for &lt;a href=&#34;https://github.com/mstorsjo/llvm-mingw/issues/301&#34;&gt;Control Flow Guard&lt;/a&gt; (&lt;code&gt;-mguard=cf&lt;/code&gt; compile and link flags)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Clang on its own can also be used as compiler in the normal GNU binutils based environments though, so the main difference lies in replacing binutils with LLVM based tools.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/mstorsjo/llvm-mingw/releases&#34;&gt;GitHub Releases&lt;/a&gt; page contains prebuilt toolchains that can be downloaded and installed by just unpacking them.&lt;/p&gt; &#xA;&lt;p&gt;They come primarily in two different forms; packages named &lt;code&gt;llvm-mingw-&amp;lt;version&amp;gt;-&amp;lt;crt&amp;gt;-ubuntu-&amp;lt;distro_version&amp;gt;-&amp;lt;arch&amp;gt;.tar.xz&lt;/code&gt; are cross compilers, that can be run on Linux, compiling binaries for any of the 4 target Windows architectures. Packages named &lt;code&gt;llvm-mingw-&amp;lt;version&amp;gt;-&amp;lt;crt&amp;gt;-&amp;lt;arch&amp;gt;.zip&lt;/code&gt; are native toolchains that run on Windows (with binaries in the specified architecture), but which all can compile binaries for any of the 4 architectures.&lt;/p&gt; &#xA;&lt;p&gt;The cross compilers come in versions running on either x86_64 or aarch64. (They&#39;re built on Ubuntu, but hopefully do run on other contempory distributions as well.)&lt;/p&gt; &#xA;&lt;p&gt;There are packages with two different choices of CRT (C runtime) - the primary target is UCRT (the Universal C Runtime). The UCRT is available preinstalled since Windows 10, but can be &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=50410&#34;&gt;installed&lt;/a&gt; on top of Vista or newer. The other legacy alternative is &lt;code&gt;msvcrt&lt;/code&gt;, which produces binaries for (and uses) msvcrt.dll, which is a built-in component in all versions of Windows. This allows running directly out of the box on older versions of Windows too, without ensuring that the UCRT is installed, but msvcrt.dll is generally less featureful. Address Sanitizer only works properly with UCRT.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the downloadable toolchain packges, there are also prebuilt docker linux images containing the llvm-mingw toolchain, available from &lt;a href=&#34;https://hub.docker.com/r/mstorsjo/llvm-mingw/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;a href=&#34;https://github.com/mstorsjo/llvm-mingw/releases/tag/nightly&#34;&gt;nightly builds&lt;/a&gt; with the very latest versions of LLVM and mingw-w64 from git.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;The toolchain can be compiled for installation in the current Unix environment, fetching sources as needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build-all.sh &amp;lt;target-dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also be built, reproducibly, into a Docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Individual components of the toolchain can be (re)built by running the standalone shellscripts listed within &lt;code&gt;build-all.sh&lt;/code&gt;. However, if the source already is checked out, no effort is made to check out a different version (if the build scripts have been updated to prefer a different version) - and likewise, if configure flags in the build-*.sh scripts have changed, you might need to wipe the build directory under each project for the new configure options to be taken into use.&lt;/p&gt; &#xA;&lt;h2&gt;Building in MSYS2&lt;/h2&gt; &#xA;&lt;p&gt;To build in MSYS2, install the following set of packages with &lt;code&gt;pacman -S --needed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git wget mingw-w64-x86_64-gcc mingw-w64-x86_64-ninja mingw-w64-x86_64-cmake make mingw-w64-x86_64-python3 autoconf libtool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The toolchain currently does support both C and C++, including support for exception handling.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;LLD, the LLVM linker, is what causes most of the major differences to the normal GCC/binutils based MinGW.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As this toolchain uses a different CRT and C++ standard library than most mingw toolchains, it is incompatible with object files and static libraries built with other toolchains. Mixing DLLs from other toolchains is supported, but only as long as CRT resources aren&#39;t shared across DLL boundaries (no sharing of file handles etc, and memory should be freed by the same DLL that allocated it).&lt;/li&gt; &#xA; &lt;li&gt;The windres replacement, llvm-rc, isn&#39;t very mature and doesn&#39;t support everything that GNU windres does.&lt;/li&gt; &#xA; &lt;li&gt;The toolchain defaults to using the Universal CRT and targeting Windows 7. These defaults can be changed in &lt;code&gt;build-mingw-w64.sh&lt;/code&gt; though. The Universal CRT is only available out of the box since Windows 10, but can be &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=50410&#34;&gt;installed&lt;/a&gt; on Vista or newer. For x86, there are also releases that run on msvcrt.dll.&lt;/li&gt; &#xA; &lt;li&gt;The toolchain uses Windows native TLS support, which doesn&#39;t work properly until Windows Vista. This has no effect on code not using thread local variables.&lt;/li&gt; &#xA; &lt;li&gt;The runtime libraries libunwind, libcxxabi and libcxx also assume that the target is Windows 7 or newer.&lt;/li&gt; &#xA; &lt;li&gt;Address sanitizer is only supported on x86.&lt;/li&gt; &#xA; &lt;li&gt;LLD doesn&#39;t support linker script (in the COFF part of LLD). Linker script can be used for reprogramming how the linker lays out the output, but is in most cases in MinGW setups only used for passing lists of object files to link. Passing lists of files can also be done with response files, which LLD does support. (This was fixed in qmake in &lt;a href=&#34;https://code.qt.io/cgit/qt/qtbase.git/commit/?id=d92c25b1b4ac0423a824715a08b2db2def4b6e25&#34;&gt;v5.12.0&lt;/a&gt;, to use response files instead of linker script.)&lt;/li&gt; &#xA; &lt;li&gt;Libtool based projects fail to link with llvm-mingw if the project contains C++. (This often manifests with undefined symbols like &lt;code&gt;___chkstk_ms&lt;/code&gt;, &lt;code&gt;__alloca&lt;/code&gt; or &lt;code&gt;___divdi3&lt;/code&gt;.) For such targets, libtool tries to detect which libraries to link by invoking the compiler with &lt;code&gt;$CC -v&lt;/code&gt; and picking up the libraries that are linked by default, and then invoking the linker driver with &lt;code&gt;-nostdlib&lt;/code&gt; and specifying the default libraries manually. In doing so, libtool fails to detect when clang is using compiler_rt instead of libgcc, because clang refers to it as an absolute path to a static library, instead of specifying a library path with &lt;code&gt;-L&lt;/code&gt; and linking the library with &lt;code&gt;-l&lt;/code&gt;. Clang is &lt;a href=&#34;https://reviews.llvm.org/D51440&#34;&gt;reluctant to changing this behaviour&lt;/a&gt;. A &lt;a href=&#34;https://debbugs.gnu.org/cgi/bugreport.cgi?bug=27866&#34;&gt;bug&lt;/a&gt; has been filed with libtool, but no fix has been committed, and as libtool files are shipped with the projects that use them (bundled within the configure script), one has to update the configure script in each project to avoid the issue. This can either be done by installing libtool, patching it and running &lt;code&gt;autoreconf -fi&lt;/code&gt; in the project, or by manually applying the fix on the shipped &lt;code&gt;configure&lt;/code&gt; script. A patched version of libtool is &lt;a href=&#34;https://github.com/msys2/MINGW-packages/raw/95b093e888/mingw-w64-libtool/0011-Pick-up-clang_rt-static-archives-compiler-internal-l.patch&#34;&gt;shipped in MSYS2&lt;/a&gt; at least.&lt;/li&gt; &#xA; &lt;li&gt;Libtool, when running on Windows, prefers using linker script over response files, to pass long lists of object files to the linker driver, but LLD doesn&#39;t support linker script (as described above). This issue produces errors like &lt;code&gt;lld-link: error: .libs\libfoobar.la.lnkscript: unknown file type&lt;/code&gt;. To fix this, the bundled libtool scripts has to be fixed like explained above, but this fix requires changes both to &lt;code&gt;configure&lt;/code&gt; and a separate file named &lt;code&gt;ltmain.{in,sh}&lt;/code&gt;. A fix for this is also &lt;a href=&#34;https://github.com/msys2/MINGW-packages/raw/95b093e888/mingw-w64-libtool/0012-Prefer-response-files-over-linker-scripts-for-mingw-.patch&#34;&gt;shipped in MSYS2&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, one may run into other minor differences between GCC and clang.&lt;/p&gt; &#xA;&lt;h2&gt;PDB support&lt;/h2&gt; &#xA;&lt;p&gt;LLVM does &lt;a href=&#34;http://blog.llvm.org/2017/08/llvm-on-windows-now-supports-pdb-debug.html&#34;&gt;support&lt;/a&gt; generating debug info in the PDB format. Since GNU binutils based mingw environments don&#39;t support this, there&#39;s no predecent for what command line parameters to use for this, and llvm-mingw produces debug info in DWARF format by default.&lt;/p&gt; &#xA;&lt;p&gt;To produce debug info in PDB format, you currently need to do the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;-gcodeview&lt;/code&gt; to the compilation commands (e.g. in &lt;code&gt;wrappers/clang-target-wrapper.sh&lt;/code&gt;), together with using &lt;code&gt;-g&lt;/code&gt; as usual to enable debug info in general.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;-Wl,--pdb=&lt;/code&gt; to linking commands. This creates a PDB file at the same location as the output EXE/DLL, but with a PDB extension. (By passing &lt;code&gt;-Wl,--pdb=module.pdb&lt;/code&gt; one can explicitly specify the name of the output PDB file.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Even though LLVM supports this, there are some caveats with using it when building in MinGW mode; Microsoft debuggers might have assumptions about the C++ ABI used, which doesn&#39;t hold up with the Itanium ABI used in MinGW.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SSSD/sssd</title>
    <updated>2024-12-05T01:29:48Z</updated>
    <id>tag:github.com,2024-12-05:/SSSD/sssd</id>
    <link href="https://github.com/SSSD/sssd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A daemon to manage identity, authentication and authorization for centrally-managed systems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/projects/sssd-sssd&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/sssd-sssd?label=master%20::%20coverity&#34; alt=&#34;Coverity Scan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SSSD - System Security Services Daemon&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;SSSD provides a set of daemons to manage access to remote directories and authentication mechanisms such as LDAP, Kerberos or FreeIPA. It provides an NSS and PAM interface toward the system and a pluggable backend system to connect to multiple different account sources.&lt;/p&gt; &#xA;&lt;p&gt;More information about SSSD can be found on its project page - &lt;a href=&#34;https://github.com/SSSD/sssd&#34;&gt;https://github.com/SSSD/sssd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading SSSD&lt;/h2&gt; &#xA;&lt;p&gt;SSSD is shipped as a binary package by most Linux distributions. If you want to obtain the latest source files, please navigate to the &lt;a href=&#34;https://github.com/SSSD/sssd/releases&#34;&gt;Releases folder on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We sign release tarballs with our &lt;a href=&#34;https://raw.githubusercontent.com/SSSD/sssd/master/contrib/pubkey.asc&#34;&gt;gpg key (id C13CD07FFB2DB1408E457A3CD3D21B2910CF6759)&lt;/a&gt; since April 2022. For convenience, the key is also uploaded to &lt;code&gt;keys.openpgp.org&lt;/code&gt; keyserver. You can import the key using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -o sssd.asc https://raw.githubusercontent.com/SSSD/sssd/master/contrib/pubkey.asc&#xA;$ gpg2 --import sssd.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gpg2 --keyserver keys.openpgp.org --recv-keys C13CD07FFB2DB1408E457A3CD3D21B2910CF6759&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And verify the signature with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ version=x.y.z&#xA;$ curl -o sssd-$version.tar.gz https://github.com/SSSD/sssd/releases/download/$version/sssd-$version.tar.gz&#xA;$ curl -o sssd-$version.tar.gz.asc https://github.com/SSSD/sssd/releases/download/$version/sssd-$version.tar.gz.asc&#xA;$ gpg2 --verify sssd-$version.tar.gz.asc sssd-$version.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;SSSD maintains two release streams - stable and LTM. Releases designated as LTM are long-term maintenance releases and will see bugfixes and security patches for a longer time than other releases.&lt;/p&gt; &#xA;&lt;p&gt;The list of all releases is maintained together with &lt;a href=&#34;https://sssd.io/releases.html&#34;&gt;SSSD documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building and installation from source&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://sssd.io/contrib/building-sssd.html&#34;&gt;our developer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The most up-to-date documentation can be found at &lt;a href=&#34;https://sssd.io&#34;&gt;https://sssd.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Its source code is hosted at &lt;a href=&#34;https://github.com/SSSD/sssd.io&#34;&gt;https://github.com/SSSD/sssd.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file an issue in the &lt;a href=&#34;https://github.com/SSSD/sssd/issues&#34;&gt;SSSD github instance&lt;/a&gt;. Make sure to follow the &lt;a href=&#34;https://sssd.io/docs/reporting-bugs.html&#34;&gt;guide on reporting SSSD bugs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Please see the file called &lt;a href=&#34;https://raw.githubusercontent.com/SSSD/sssd/master/COPYING&#34;&gt;COPYING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to contact us:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the sssd-devel mailing list: &lt;a href=&#34;https://lists.fedorahosted.org/archives/list/sssd-devel@lists.fedorahosted.org/&#34;&gt;Development of the System Security Services Daemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the sssd-users mailing list: &lt;a href=&#34;https://lists.fedorahosted.org/archives/list/sssd-users@lists.fedorahosted.org/&#34;&gt;End-user discussions about the System Security Services Daemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the #sssd and #freeipa IRC channels on libera.chat: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;irc://irc.libera.chat/sssd&lt;/li&gt; &#xA;   &lt;li&gt;irc://irc.libera.chat/freeipa&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>