<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:32:17Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ORCx41/TerraLdr</title>
    <updated>2022-11-01T01:32:17Z</updated>
    <id>tag:github.com,2022-11-01:/ORCx41/TerraLdr</id>
    <link href="https://github.com/ORCx41/TerraLdr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Payload Loader Designed With Advanced Evasion Features&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; TerraLdr: A Payload Loader Designed With Advanced Evasion Features &lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Details:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no crt functions imported&lt;/li&gt; &#xA; &lt;li&gt;syscall unhooking using &lt;a href=&#34;https://github.com/ORCx41/KnownDllUnhook&#34;&gt;KnownDllUnhook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;api hashing using Rotr32 hashing algo&lt;/li&gt; &#xA; &lt;li&gt;payload encryption using rc4 - payload is saved in .rsrc&lt;/li&gt; &#xA; &lt;li&gt;process injection - targetting &#39;SettingSyncHost.exe&#39;&lt;/li&gt; &#xA; &lt;li&gt;ppid spoofing &amp;amp; blockdlls policy using NtCreateUserProcess&lt;/li&gt; &#xA; &lt;li&gt;stealthy remote process injection - chunking&lt;/li&gt; &#xA; &lt;li&gt;using debugging &amp;amp; NtQueueApcThread for payload execution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use &lt;a href=&#34;https://github.com/ORCx41/TerraLdr/tree/main/Helper/GenerateRsrc&#34;&gt;GenerateRsrc&lt;/a&gt; to update &lt;a href=&#34;https://github.com/ORCx41/TerraLdr/raw/main/Terra/DataFile.terra&#34;&gt;DataFile.terra&lt;/a&gt; that&#39;ll be the payload saved in the .rsrc section of the loader&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Thanks For:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://offensivedefence.co.uk/posts/ntcreateuserprocess/&#34;&gt;https://offensivedefence.co.uk/posts/ntcreateuserprocess/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vxunderground/VX-API&#34;&gt;https://github.com/vxunderground/VX-API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Profit:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111295429/198824933-101d0641-d8b3-4cef-812d-0834cdb8cf0f.png&#34; alt=&#34;ph2&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/111295429/198824884-ba516101-0b02-4ff7-94fb-65ce692e02ce.jpg&#34; alt=&#34;havoc&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Tested with cobalt strike &amp;amp;&amp;amp; Havoc on windows 10 &lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>JohnEarnest/Decker</title>
    <updated>2022-11-01T01:32:17Z</updated>
    <id>tag:github.com,2022-11-01:/JohnEarnest/Decker</id>
    <link href="https://github.com/JohnEarnest/Decker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multimedia sketchpad&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Decker&lt;/h1&gt; &#xA;&lt;p&gt;Decker is a multimedia platform for creating and sharing interactive documents, with sound, images, hypertext, and scripted behavior.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohnEarnest/Decker/main/images/wings.gif&#34; alt=&#34;Decker, complete with toolbars&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can learn more about Decker on &lt;a href=&#34;http://beyondloom.com/decker/&#34;&gt;my website&lt;/a&gt;, or just dive in and &lt;a href=&#34;http://beyondloom.com/decker/tour.html&#34;&gt;try it online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://internet-janitor.itch.io/decker&#34;&gt;community forum&lt;/a&gt; on itch.io.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://beyondloom.com/decker/tour.html&#34;&gt;web version&lt;/a&gt; of Decker (web-decker) can be built with a &lt;code&gt;make&lt;/code&gt; script. The test suite uses &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make testjs&#xA;make web-decker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Periodic binary releases of the native version of Decker (c-decker) for OSX and Windows are available on &lt;a href=&#34;https://internet-janitor.itch.io/decker&#34;&gt;itch.io&lt;/a&gt;. Building from source requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a c compiler and libc&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;xxd&lt;/code&gt; utility (standard with OSX and most *nix distros)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libsdl.org/download-2.0.php&#34;&gt;SDL2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libsdl-org/SDL_image&#34;&gt;SDL_image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On OSX, BSD, or Linux, fetch the appropriate SDL2 packages and then build with &lt;code&gt;make&lt;/code&gt;. This has also been reported to build and run successfully under WSL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install sdl2 sdl2_image                                   # OSX/Homebrew&#xA;sudo apt install libsdl2-2.0-0 libsdl2-dev libsdl2-image-dev   # Debian&#xA;&#xA;make lilt            # (optional) command-line tools&#xA;make decker          # build decker itself&#xA;make test            # (optional) regression test suite&#xA;sudo make install    # (optional) install lilt, decker, and lil syntax profiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the documentation requires &lt;a href=&#34;http://fletcher.github.io/MultiMarkdown-5/installation&#34;&gt;multimarkdown&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install multimarkdown&#xA;&#xA;make docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The Decker project is released under the MIT license. Any contributions to this repository are understood to fall under the same license.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug fixes and typo corrections are always welcome.&lt;/li&gt; &#xA; &lt;li&gt;Bug reports must include simple steps for reproduction and clearly indicate the OS and/or web browser where the bug arises.&lt;/li&gt; &#xA; &lt;li&gt;PRs should match the style of existing code.&lt;/li&gt; &#xA; &lt;li&gt;PRs should be as small as possible, and must not contain bundled unrelated changes.&lt;/li&gt; &#xA; &lt;li&gt;PRs must include updates for &lt;em&gt;both&lt;/em&gt; the C and JavaScript versions of Decker (or its associated tools) whenever relevant.&lt;/li&gt; &#xA; &lt;li&gt;PRs must include updates for documentation (see: the &lt;code&gt;docs&lt;/code&gt; directory) wherever relevant.&lt;/li&gt; &#xA; &lt;li&gt;PRs must pass the entire test suite (see: &lt;code&gt;make test&lt;/code&gt;/&lt;code&gt;make testjs&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;When modifying the JavaScript version of Decker, &lt;em&gt;please&lt;/em&gt; test your changes in multiple web browsers and avoid using bleeding-edge features. As a rule of thumb, if it didn&#39;t exist 5 years ago, don&#39;t use it now. If it &lt;em&gt;only&lt;/em&gt; works in Chrome, it&#39;s better not to do it at all.&lt;/li&gt; &#xA; &lt;li&gt;When modifying the C version of Decker, avoid generating warnings and &lt;em&gt;do not use&lt;/em&gt; compiler-specific features such as GCC extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refrain from submitting Pull Requests to this repository containing new features without first discussing their inclusion in an Issue. Decker is intended to be small, simple, and cozy. There are an infinite number of features that could potentially be added, but creative constraints are also valuable. If you have a differing vision, feel empowered to explore it in your own fork of the project- that&#39;s what permissive licenses are for.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sagemathinc/cowasm</title>
    <updated>2022-11-01T01:32:17Z</updated>
    <id>tag:github.com,2022-11-01:/sagemathinc/cowasm</id>
    <link href="https://github.com/sagemathinc/cowasm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CoWasm: Collaborative WebAssembly for Servers and Browsers. Built using Zig. Supports Python with extension modules, including numpy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CoWasm: Collaborative WebAssembly for Servers and Browsers&lt;/h1&gt; &#xA;&lt;p&gt;URL: &lt;a href=&#34;https://github.com/sagemathinc/cowasm&#34;&gt;https://github.com/sagemathinc/cowasm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DEMOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cowasm.org&#34;&gt;https://cowasm.org&lt;/a&gt; (uses Atomics and SharedArrayBuffers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zython.org&#34;&gt;https://zython.org&lt;/a&gt; (uses Service Workers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or Type this if you have nodejs at least version 16 installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ npx python-wasm@latest&#xA;Python 3.11.0 (main, Oct 27 2022, 10:03:11) [Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571 on wasi&#xA;Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt; 2 + 3&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; import numpy&#xA;&amp;gt;&amp;gt;&amp;gt; import sympy&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: On Microsoft Windows you have to enter a few times, and there is an issue with terminal echo. We are working on this.&lt;/p&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;CoWasm means &#34;collaborative Web Assembly&#34;, since it&#39;s foundational for &lt;a href=&#34;https://CoCalc.com&#34;&gt;https://CoCalc.com&lt;/a&gt;, and goes far beyond just Python. It will support various technologies (such as libgit2 and realtime sync) that are important foundations for collaboration. This doesn&#39;t exist yet, but one goal is a WebAssembly instance serving applications built on Python on a server or browser (+WebRTC) that multiple people can simultaneously use, similar to how they can collaboratively use Linux accounts via &lt;a href=&#34;https://CoCalc.com&#34;&gt;https://CoCalc.com&lt;/a&gt; today.&lt;/p&gt; &#xA;&lt;p&gt;The underlying software components that CoWasm is built on (i.e., that we didn&#39;t write) are mostly extremely stable and mature. Zig is very new, but we mostly use Zig for its amazing cross compilation support and packaging of clang/llvm and musl-libc, which are themselves both very mature. Many other components, such as Python, Dash, Numpy, etc., are ridiculously mature multidecade old projects. Morever, other components of CoWasm such as memfs are libraries with 10M+ downloads per week that are heavily used in production.&lt;/p&gt; &#xA;&lt;p&gt;The goal of CoWasm is overall similar to all of emscripten, &lt;a href=&#34;http://WebAssembly.sh&#34;&gt;WebAssembly.sh&lt;/a&gt;, &lt;a href=&#34;http://wapm.io&#34;&gt;wapm.io&lt;/a&gt;, and &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt; in various ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlike &lt;a href=&#34;http://WebAssembly.sh&#34;&gt;WebAssembly.sh&lt;/a&gt; and &lt;a href=&#34;http://wapm.io&#34;&gt;wapm.io&lt;/a&gt; (but similar to &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt;), we make heavy use of shared &lt;em&gt;dynamic libraries&lt;/em&gt; (e.g., &lt;code&gt;-fPIC&lt;/code&gt; code), which is only possible because of a plugin contributed from emscripten to LLVM. The &#34;Co&#34; in CoWasm suggestion &#34;collaboration&#34; or &#34;sharing&#34;, which also reflects how the binaries in this project are structured.&lt;/li&gt; &#xA; &lt;li&gt;We use actual editline (similar to readline) instead of a Javascript terminal. Moreover, unlike other webassembly shells, we just use a real command line shell (dash = Debian Almquest Shell). We also have a userspace including ports of many coreutils, e.g., ls, head, tail, etc.&lt;/li&gt; &#xA; &lt;li&gt;Unlike emscripten, we use modern Typescript, our code is more modular, and we make use of existing components when possible (e.g., the nodejs memfs project), instead of using our own.&lt;/li&gt; &#xA; &lt;li&gt;A core design constraint is to efficiently run on a wide range of platforms, not mainly in the browser like emscripten, and not mainly on servers like wasmer. CoWasm should run on servers, desktops (e.g., as an electron app), an iPad/iOS app, and in web browsers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;There is no business unfriendly GPL code in CoWasm.&lt;/strong&gt; CoWasm itself is extremely liberally licensed and business friendly. The license of all new code and most components is 3-clause BSD. CoWasm will serve as a foundation for other projects with more restrictive licenses: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CoCalc will build on top of CoWasm to provide a graphical interface and realtime collaboration, and that will be a commercial product.&lt;/li&gt; &#xA;   &lt;li&gt;Products like GP/PARI SageMath will build on CoWasm to provide GPL-licensed mathematics software.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Python&lt;/h2&gt; &#xA;&lt;p&gt;An exciting package in CoWasm is &lt;a href=&#34;https://www.npmjs.com/package/python-wasm&#34;&gt;python-wasm&lt;/a&gt;, which is a build of Python for WebAssembly, which supports both servers and browsers. It also supports extension modules such as numpy.&lt;/p&gt; &#xA;&lt;!--&#xA;[&lt;img src=&#34;https://github.com/sagemathinc/cowasm/actions/workflows/docker-image.yml/badge.svg&#34;  alt=&#34;Docker Image CI&#34;  width=&#34;172px&#34;  height=&#34;20px&#34;  style=&#34;object-fit:cover&#34;/&gt;](https://github.com/sagemathinc/cowasm/actions/workflows/docker-image.yml)&#xA;--&gt; &#xA;&lt;h3&gt;Try python-wasm&lt;/h3&gt; &#xA;&lt;p&gt;Try the python-wasm REPL under node.js (version at least 16):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;~$ npx python-wasm@latest&#xA;Python 3.11.0 (main, Oct 27 2022, 10:03:11) [Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571 on wasi&#xA;Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt; 2 + 3&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; import sys; sys.version&#xA;&#39;3.11.0 (main, Oct 27 2022, 10:03:11) [Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; sys.platform&#xA;&#39;wasi&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install python-wasm&lt;/h3&gt; &#xA;&lt;p&gt;Install python-wasm into your project, and try it via the library interface and the node.js terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install python-wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then from the nodejs REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;~/cowasm/packages/python-wasm$ node&#xA;Welcome to Node.js v19.0.0.&#xA;Type &#34;.help&#34; for more information.&#xA;&amp;gt; {syncPython, asyncPython} = require(&#39;.&#39;)&#xA;{&#xA;  syncPython: [AsyncFunction: syncPython],&#xA;  asyncPython: [AsyncFunction: asyncPython],&#xA;  default: [AsyncFunction: asyncPython]&#xA;}&#xA;&amp;gt; python = await syncPython(); 0;&#xA;0&#xA;&amp;gt; python.exec(&#39;import sys&#39;)&#xA;undefined&#xA;&amp;gt; python.repr(&#39;sys.version&#39;)&#xA;&#34;&#39;3.11.0b3 (main, Jul 14 2022, 22:22:40) [Clang 13.0.1 (git@github.com:ziglang/zig-bootstrap.git 623481199fe17f4311cbdbbf&#39;&#34;&#xA;&amp;gt; python.exec(&#39;import numpy&#39;)&#xA;undefined&#xA;&amp;gt; python.repr(&#39;numpy.linspace(0, 10, num=5)&#39;)&#xA;&#39;array([ 0. ,  2.5,  5. ,  7.5, 10. ])&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a Python REPL that is part of python-wasm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt; python.terminal()&#xA;Python 3.11.0 (main, Oct 27 2022, 10:03:11) [Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571 on wasi&#xA;Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt; 2 + 3   # you can edit using readline&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; input(&#39;name? &#39;)*3&#xA;name? william  &amp;lt;-- I just typed &#34;william&#34;&#xA;&#39;williamwilliamwilliam&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; import time; time.sleep(3)  # sleep works&#xA;&amp;gt;&amp;gt;&amp;gt; while True: pass   # ctrl+c works, but exits this terminal&#xA;&amp;gt; # back in node.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use python-wasm in your own &lt;a href=&#34;https://github.com/sagemathinc/cowasm/tree/main/packages/webpack&#34;&gt;web applications via webpack&lt;/a&gt;. In the browser, this transparently uses SharedArrayBuffers if available, and falls back to ServiceWorkers.&lt;/p&gt; &#xA;&lt;h2&gt;Build CoWasm from source on Linux or MacOS&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To build everything from source, make sure that you have standard command line dev tools installed, e.g., on Ubuntu/Debian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt-get install git make cmake curl dpkg-dev m4 yasm texinfo python-is-python3 libtool tcl zip libncurses-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build &lt;a href=&#34;https://github.com/sagemathinc/wapython/actions&#34;&gt;takes about 15-20 minutes&lt;/a&gt;, and about 5GB&#39;s of disk space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/cowasm$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs a specific tested version of Zig and Nodejs, then builds native and WebAssembly versions of CPython and many dependencies, and also builds all the Typescript code. It also builds many other interesting programs with ports to WebAssembly, though many are not completely finished (e.g., there is the dash shell and ports of tar and BSD coreutils). Building from source is regularly &lt;em&gt;&lt;strong&gt;tested on Linux and MacOS with both x86_64 and ARM (M1) processors&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: tested on both x86_64 and aarch64 Ubuntu&lt;/li&gt; &#xA; &lt;li&gt;MacOS: tested on both x86_64 and M1 mac with standard XCode command live dev tools installed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CoWasm &lt;em&gt;&lt;strong&gt;does not&lt;/strong&gt;&lt;/em&gt; use the compilers on the system, and instead uses CLANG as shipped with Zig. If you&#39;re using Windows, you&#39;ll have to use Linux via a virtual machine or Docker container currently.&lt;/p&gt; &#xA;&lt;h3&gt;Run the test suite&lt;/h3&gt; &#xA;&lt;p&gt;The CoWasm test suite runs the &lt;strong&gt;supported tests&lt;/strong&gt; on everything that is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/cowasm$ make test&#xA;...&#xA;##########################################################&#xA;#                                                        #&#xA;#   CONGRATULATIONS -- FULL COWASM TEST SUITE PASSED!    #&#xA;#&#xA;#   Fri Oct 28 12:32:19 AM UTC 2022&#xA;#   Linux aarch64&#xA;#   Git Branch: dev&#xA;#                                                        #&#xA;##########################################################&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that running &lt;code&gt;make test&lt;/code&gt; at the top level of &lt;code&gt;python-wasm&lt;/code&gt; does NOT run the &lt;strong&gt;full&lt;/strong&gt; test suite of every package, since it takes quite a while and there are &lt;strong&gt;still some failing tests&lt;/strong&gt;, since I CoWasm doesn&#39;t support enough of what Python expects. It does run a big supported subset of the cpython test suite (it&#39;s the part that I got to pass so far, which is over 80%). As an example, the sympy test suite is massive, takes a very long time to run, and doesn&#39;t even work for me natively; instead, we just run a handful of small tests to ensure sympy is working at all. Similarly, for Cython, we run all their demos, but not the full test suite. A longer term goal of CoWasm is to support a second more thorough testing regime that runs the full test suite of each package.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the WebAssembly Python REPL directly on the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/cowasm$ ./bin/python-wasm &#xA;Python 3.11.0 (main, Oct 27 2022, 10:03:11) [Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571 on wasi&#xA;Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt; 2 + 3&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; import sys&#xA;&amp;gt;&amp;gt;&amp;gt; sys.platform&#xA;&#39;wasi&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; sys.executable&#xA;&#39;/Users/wstein/build/cocalc/src/data/projects/2c9318d1-4f8b-4910-8da7-68a965514c95/cowasm/packages/cpython/bin/python-wasm&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; ^D&#xA;~/cowasm$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above directly runs the `python.wasm` executable produced by building cPython. You can instead run an enhanced version (e.g., with signal support) with more options in the python-wasm package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;~/cowasm$ . bin/env.sh &#xA;~/cowasm$ cd packages/python-wasm/&#xA;~/cowasm/packages/python-wasm$ ./bin/python-wasm &#xA;Python 3.11.0 (main, Oct 27 2022, 10:03:11) [Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571 on wasi&#xA;Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt; import time; t=time.time(); print(sum(range(10**7)), time.time()-t)&#xA;49999995000000 0.8989999294281006&#xA;&amp;gt;&amp;gt;&amp;gt; ^D&#xA;~/cowasm/packages/python-wasm$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As mentioned above, you can use python-wasm as a library in node.js. There is a synchronous api that runs in the same thread as the import, and an asynchronous api that runs in a worker thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;~/cowasm$ . bin/env.sh &#xA;~/cowasm$ cd packages/python-wasm/&#xA;~/cowasm/packages/python-wasm$ node&#xA;Welcome to Node.js v19.0.0.&#xA;Type &#34;.help&#34; for more information.&#xA;&amp;gt; python = require(&#39;.&#39;)&#xA;{&#xA;  syncPython: [AsyncFunction: syncPython],&#xA;  asyncPython: [AsyncFunction: asyncPython],&#xA;  default: [AsyncFunction: asyncPython]&#xA;}&#xA;&amp;gt; const { exec, repr} = await python.asyncPython();&#xA;undefined&#xA;&amp;gt; await repr(&#39;31**37&#39;)&#xA;&#39;15148954872646847105498509334067131813327318808179940511&#39;&#xA;&amp;gt; await exec(&#39;import time; t=time.time(); print(sum(range(10**7)), time.time()-t)&#39;)&#xA;49999995000000 0.8880000114440918&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And yes you can run many async Python&#39;s in parallel in the same node.js process, with each running in its own thread:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/cowasm/packages/python-wasm$ nodeWelcome to Node.js v19.0.0.&#xA;Type &#34;.help&#34; for more information.&#xA;&amp;gt; python = require(&#39;.&#39;)&#xA;{&#xA;  syncPython: [AsyncFunction: syncPython],&#xA;  asyncPython: [AsyncFunction: asyncPython],&#xA;  default: [AsyncFunction: asyncPython]&#xA;}&#xA;&amp;gt; const { exec, repr} = await python.asyncPython();&#xA;undefined&#xA;&amp;gt; await exec(&#39;import time; t=time.time(); print(sum(range(10**7)), time.time()-t)&#39;)&#xA;49999995000000 0.8880000114440918&#xA;undefined&#xA;&amp;gt; &#xA;&amp;gt; const v = [await python.asyncPython(), await python.asyncPython(), await python.asyncPython()]; 0;&#xA;0&#xA;&amp;gt; s = &#39;import time; t=time.time(); print(sum(range(10**7)), time.time()-t)&#39;&#xA;&#39;import time; t=time.time(); print(sum(range(10**7)), time.time()-t)&#39;&#xA;&amp;gt; d = new Date(); console.log(await Promise.all([v[0].exec(s), v[1].exec(s), v[2].exec(s)]), new Date() - d)&#xA;49999995000000 0.8919999599456787&#xA;49999995000000 0.8959999084472656&#xA;49999995000000 0.8929998874664307&#xA;[ undefined, undefined, undefined ] 905&#xA;undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s the goal?&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;strong&gt;initial goal&lt;/strong&gt; is to create a WebAssembly build of the core Python and dependent packages, which runs both on the command line with Node.js and in the major web browsers (via npm modules that you can include via webpack). It should also be relatively easy to &lt;em&gt;build from source&lt;/em&gt; on both Linux and MacOS (x86_64 and aarch64) and to easily run the cpython test suite,_ with a clearly defined supported list of passing tests. The compilation system is based on &lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt;, which provides excellent caching and cross compilation, and each package is built using make.&lt;/p&gt; &#xA;&lt;h2&gt;How does CoWasm compare to Emscripten and Pyodide?&lt;/h2&gt; &#xA;&lt;p&gt;Pyodide currently provides far more packages. However, there is no reason that CoWasm couldn&#39;t eventually support as much or more than Pyodide.&lt;/p&gt; &#xA;&lt;p&gt;Our main longterm application is to make &lt;a href=&#34;https://cocalc.com&#34;&gt;CoCalc&lt;/a&gt; available on a much wider range of computers. As such, we are building a foundation here on which to support a substantial part of the scientific Python ecosystem and the &lt;a href=&#34;https://www.sagemath.org/&#34;&gt;SageMath packages&lt;/a&gt; (a pure math analogue of the scientific Python stack). &lt;em&gt;&lt;strong&gt;I&#39;m the founder of SageMath&lt;/strong&gt;&lt;/em&gt;, hence this motivation (some relevant work has been done &lt;a href=&#34;https://github.com/sagemathinc/jsage&#34;&gt;here)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of our code will be written in the &lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt; language. However, we are mostly targeting just the parts that are used for Python, which is a small subset of the general problem. Our software license -- &lt;em&gt;&lt;strong&gt;BSD 3-clause&lt;/strong&gt;&lt;/em&gt; -- is compatible with their&#39;s and we hope to at least learn from their solutions to problems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sagemathinc/cowasm/main/docs/differences-from-pyodide.md&#34;&gt;More about how Pyodide and python-wasm differ...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More about building from source&lt;/h2&gt; &#xA;&lt;h3&gt;How to build&lt;/h3&gt; &#xA;&lt;p&gt;Just type make. (Do &lt;strong&gt;NOT&lt;/strong&gt; type &lt;code&gt;make -j8;&lt;/code&gt; it might not work. Patches welcome.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;...$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a single top level Makefile that builds all the packages. The build process for each individual package is &lt;em&gt;also&lt;/em&gt; accomplished using a Makefile with two includes that impose some structure. We don&#39;t use shell scripts or Python code to orchestrate building anything, since &lt;code&gt;make&lt;/code&gt; is much cleaner and easier to read, maintain and debug... and of course make contains shell scripts in it. (History lesson: homebrew is a lot more successful than Macports.)&lt;/p&gt; &#xA;&lt;h3&gt;What happens&lt;/h3&gt; &#xA;&lt;p&gt;In most subdirectories &lt;code&gt;foo/&lt;/code&gt; of packages, this makefile creates some subdirectories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/foo/dist/[native|wasm]&lt;/code&gt; -- a native or WebAssembly build of the package; this has binaries, headers, and libs. These get used by other packages. We rarely build the native version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/build/[native|wasm]&lt;/code&gt; - build artifacts for the native or WebAssembly build; can be safely deleted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No common prefix directory&lt;/h3&gt; &#xA;&lt;p&gt;Unlike some systems, where everything is built and installed into a single &lt;code&gt;prefix&lt;/code&gt; directory, here we build everything in its own self-contained package dist directory. When a package like &lt;code&gt;cpython&lt;/code&gt; depends on another package like &lt;code&gt;lzma&lt;/code&gt; , our Makefile for &lt;code&gt;cpython&lt;/code&gt; explicitly references &lt;code&gt;packages/lzma/dist&lt;/code&gt;. This makes it easier to uninstall packages, update them, etc., without having to track what files are in any package, whereas using a common directory for everything can be a mess with possibly conflicting versions of files, and makes versioning and dependencies very explicit. Of course, it makes the environment variables and build commands potentially much longer. In some cases, we gather together files from these dist directories in distributions, e.g., see &lt;code&gt;make bin-wasm.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Native and Wasm&lt;/h3&gt; &#xA;&lt;p&gt;The build typically create directories &lt;code&gt;dist/native&lt;/code&gt;and &lt;code&gt;dist/wasm.&lt;/code&gt; The &lt;code&gt;dist/native&lt;/code&gt; artifacts are only of value on the computer where you ran the build, since they are architecture dependent and can easily depend on libraries on your system. In contrast, the &lt;code&gt;dist/wasm&lt;/code&gt; artifacts are platform independent. They can be used nearly everywhere: on servers via WASM, on ARM computers (e.g., aarch64 linux, Apple Silicon, etc.), and in modern web browsers.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone WASM executables&lt;/h3&gt; &#xA;&lt;p&gt;The bin directory has scripts &lt;code&gt;zcc&lt;/code&gt; and &lt;code&gt;z++&lt;/code&gt; that are C and C++ compiler wrappers around Zig + Node. They create binaries that you can run on the command line as normal. Under the hood there&#39;s a wrapper script that calls node.js and the wasi runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ . bin/env.sh&#xA;$ echo &#39;int main() { printf(&#34;hello from Web Assembly: %d\n&#34;, 2+2); }&#39; &amp;gt; a.c&#xA;$ zcc a.c&#xA;$ ls -l&#xA;a.c  a.out  a.out.wasm  ...&#xA;$ ./a.out   # this actually runs nodejs + python-wasm&#xA;hello from Web Assembly: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This isn&#39;t currently used here for building python-wasm, but it&#39;s an extremely powerful tool. (For example, I used it with JSage to cross compile the NTL library to Web Assembly...)&lt;/p&gt; &#xA;&lt;h3&gt;Run a script from the terminal:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/cowasm$ echo &#34;import sys; print(f&#39;hi from {sys.platform}&#39;)&#34; &amp;gt; a.py&#xA;~/cowasm$ bin/python-wasm a.py&#xA;hi from wasi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The python-wasm package has a bin/python-wasm script that can run Python programs that including interactive blocking input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/cowasm/packages/python-wasm$ echo &#34;name = input(&#39;name? &#39;); print(name*3)&#34; &amp;gt; a.py&#xA;~/cowasm/packages/python-wasm$ ./bin/python-wasm a.py&#xA;name? william&#xA;williamwilliamwilliam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;There is a collection of cpu-intensive benchmarks in &lt;a href=&#34;https://raw.githubusercontent.com/sagemathinc/cowasm/main/packages/bench/src&#34;&gt;packages/bench/src&lt;/a&gt;, which you can run under various Python interpreters by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;your-python-interpreter src/all.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some grand total times. The timings are pretty stable, and the parameters of the benchmarks are chosen so a single benchmark doesn&#39;t unduly impact the results (e.g., it is trivial to game any such benchmark by adjusting parameters).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;x86_64 Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS M1 max&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;aarch64 Linux (docker on M1 max)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PyPy 3.9.x (Python reimplemented with a JIT)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2997 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2127 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1514 ms (ver 3.6.9)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;pylang (Javascript Python -- see &lt;a href=&#34;https://github.com/sagemathinc/pylang&#34;&gt;https://github.com/sagemathinc/pylang&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6909 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2876 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4424 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Native CPython 3.11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9284 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4491 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4607 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WebAssembly CPython (python-wasm)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23109 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12171 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12909 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The quick summary is that in each case pypy is twice as fast as pylang (basically node.js), python-lang is twice as fast as cpython, and &lt;em&gt;&lt;strong&gt;native cpython is about 2.5x-2.8x as fast as python-wasm&lt;/strong&gt;&lt;/em&gt;. However, when you study the individual benchmarks, there are some significant differences. E.g., in &lt;code&gt;brython.py&lt;/code&gt; there is a benchmark &#34;create instance of simple class&#34; and it typically takes 4x-5x longer in WebAssembly versus native CPython.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Email &lt;a href=&#34;mailto:wstein@cocalc.com&#34;&gt;wstein@cocalc.com&lt;/a&gt; if you find this interesting and want to help out. &lt;strong&gt;This is an open source 3-clause BSD licensed project.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>