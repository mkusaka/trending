<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-07T01:31:25Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vitoplantamura/BugChecker</title>
    <updated>2023-01-07T01:31:25Z</updated>
    <id>tag:github.com,2023-01-07:/vitoplantamura/BugChecker</id>
    <link href="https://github.com/vitoplantamura/BugChecker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SoftICE-like kernel debugger for Windows 11&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BugChecker&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vitoplantamura/BugChecker/master/assets/bcscreenshot1.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;BugChecker is a &lt;a href=&#34;https://en.wikipedia.org/wiki/SoftICE&#34;&gt;SoftICE&lt;/a&gt;-like kernel and user debugger for Windows 11 (and Windows XP as well: it supports Windows versions from XP to 11, both x86 and x64). BugChecker doesn&#39;t require a second machine to be connected to the system being debugged, like in the case of WinDbg and KD. This version of BugChecker (unlike the &lt;a href=&#34;https://github.com/vitoplantamura/BugChecker2002&#34;&gt;original version&lt;/a&gt; developed 20 years ago) leverages the internal and undocumented KD API in NTOSKRNL. KD API allows WinDbg/KD to do calls like read/write virtual memory, read/write registers, place a breakpoint at an address etc.&lt;/p&gt; &#xA;&lt;p&gt;By contrast, the original BugChecker, like SoftICE as well, used to &#34;take over&#34; the system, by hooking several kernel APIs (both exported and private), taking control of the APIC, sending IPIs etc. This approach increases complexity exponentially (and lowers system stability), since the implementation must be compatible with all the supported versions and sub-version of Windows (at the function signature level) as well as all the possible supported hardware configurations. Moreover, 20 years later, PatchGuard makes this solution impossible.&lt;/p&gt; &#xA;&lt;p&gt;By contrast, this version of BugChecker, by intercepting calls to KdSendPacket and KdReceivePacket in the kernel, presents itself to the machine being debugged as a second system running an external kernel debugger, but, in reality, everything happens on the same machine. Typically this is achieved by &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/kdserial-extensibility-code-samples&#34;&gt;replacing KDCOM.DLL&lt;/a&gt; (which is the module that implements serial cable communication for the KD API in Windows) and by starting the system in kernel debugging mode. This approach (inspired by &lt;a href=&#34;https://github.com/4d61726b/VirtualKD-Redux&#34;&gt;VirtualKD&lt;/a&gt;) lowers complexity and increases stability and compatibility (and portability, for example, to ARM - and modularity, since the lower level debugger capabilities are implemented behind KdXxxPacket and could be replaced with a custom implementation). Moreover, the presence of a kernel debugger at boot time (although &#34;fake&#34;) makes Windows disable PatchGuard.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, BugChecker requires a PS/2 keyboard for input and a linear framebuffer to write its output.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Windows XP up to Windows 11, x86 and x64, and SMP kernels. Support for WOW64 processes on x64.&lt;/li&gt; &#xA; &lt;li&gt;Integration of &lt;a href=&#34;https://github.com/c-smile/quickjspp&#34;&gt;QuickJSPP&lt;/a&gt;, which is a port of &lt;a href=&#34;https://bellard.org/quickjs/&#34;&gt;QuickJS&lt;/a&gt; to MSVC++. Before calling QuickJS, BugChecker saves the FPU state (on x86) and switches to an expanded stack of 128KB.&lt;/li&gt; &#xA; &lt;li&gt;Support for PDB symbol files. PDB files can be specified manually or Symbol Loader can download them from a symbol server.&lt;/li&gt; &#xA; &lt;li&gt;JavaScript code can call the following asynchronous functions: WriteReg, ReadMem, WriteMem.&lt;/li&gt; &#xA; &lt;li&gt;Breakpoints can have a JS condition: if condition evaluates to 0, no &#34;breakin&#34; happens. This allows to set &#34;Logpoints&#34; and breakpoints that can change the flow of execution.&lt;/li&gt; &#xA; &lt;li&gt;Log window shows the messages sent to the kernel debugger (for example DbgPrint messages).&lt;/li&gt; &#xA; &lt;li&gt;JavaScript window with syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;The tab key allows, given few digits, to cycle through all the hex numbers on the screen or, given few characters, to cycle through all the symbols containing those characters.&lt;/li&gt; &#xA; &lt;li&gt;EASTL and C++20 coroutines make creating new commands a breeze. &lt;strong&gt;Feel free to send your pull requests!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Videos (Youtube)&lt;/h2&gt; &#xA;&lt;p&gt;Demonstration of BugChecker on Windows 11 22H2, inside VirtualBox 7.0.4. A JavaScript breakpoint condition is written that changes the flow of execution in an user mode thread.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/-EQ5Imy7zZo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/-EQ5Imy7zZo/hqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;BugChecker running in a very constrained environment: a Raspberry Pi 4 (4GB RAM), via QEMU on Windows XP (512MB RAM). A breakpoint is used to log all the SYSENTER calls from user mode to the kernel. The service index is stored in a JavaScript array.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/bPUq8K6nViw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/bPUq8K6nViw/hqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running BugChecker directly on bare metal, on an HP Pavilion Dv2000, which is an old PC with a PS/2 keyboard. The OS is Windows 7 Home 32bit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/mzEBUHmknrA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/mzEBUHmknrA/hqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-secure-boot&#34;&gt;Secure Boot&lt;/a&gt; is disabled when installing and using BugChecker. Typically you can re-enable it later. If you are using VMware or VirtualBox, Secure Boot can be disabled in the virtual machine settings.&lt;/p&gt; &#xA;&lt;p&gt;Consider also enabling legacy boot menu, if using Windows 8, 10 or 11, by using the command: &lt;strong&gt;bcdedit /set &#34;{current}&#34; bootmenupolicy legacy&lt;/strong&gt;. It allows a smoother experience during boot, by allowing to select the BugChecker boot option and then to disable Driver Signature Enforcement at the same time.&lt;/p&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to start Symbol Loader:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vitoplantamura/BugChecker/master/assets/bcscreenshot2.png&#34; alt=&#34;Symbol Loader&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If necessary, disable the display drivers, by clicking on the &#34;Disable Display Drvs&#34; button. The same thing can be accomplished in Windows Device Manager. After the display drivers have been disabled, they remain disabled even after a system reboot. They can be re-enabled at any time later when not using BugChecker.&lt;/p&gt; &#xA;&lt;p&gt;The point here is that BugChecker needs a linear framebuffer with a format of 32 bits-per-pixel, to draw its interface. When disabling the display drivers, Windows dismisses hardware acceleration for drawing its UI and falls back to VGA compatibility mode. If running on bare metal or VMware, you should disable display drivers. If running on VirtualBox, you should disable display drivers or set the vm_screen setting in BugChecker.dat, as described below. If running on QEMU, you don&#39;t need to disable display drivers but make sure to specify the &#34;-vga std&#34; display device.&lt;/p&gt; &#xA;&lt;p&gt;Note that VGA compatibility mode could limit the maximum screen resolution. VMware is limited to a maximum resolution of 1152x864. QEMU with the &#34;-vga std&#34; display device doesn&#39;t suffer from this limitation.&lt;/p&gt; &#xA;&lt;p&gt;Interestingly if BugChecker is installed on a system with more than one graphics card, it is possible to disable the display drivers of only one graphics card, which will be the card connected to the screen that will show the BugChecker UI. The second card (set as the main display) will retain all its 2D and 3D acceleration features, including OpenGL and DirectX support (NOTE: tested on VMware, with Windows 11 and a DisplayLink display).&lt;/p&gt; &#xA;&lt;p&gt;Then click on &#34;Start Driver&#34;, then on &#34;Auto Detect&#34; and finally on &#34;Save&#34;. &#34;Auto Detect&#34; should be able to determine width, height, physical address and stride of the framebuffer automatically. However, you can specify these settings manually (don&#39;t forget to click on &#34;Save&#34; when finished). If &#34;Stride&#34; is 0, it is calculated as &#34;Width&#34; * 4 automatically when starting the driver. &#34;Address&#34; (i.e. physical address of the framebuffer) can be get obtained in Windows Device Manager, by clicking on &#34;Properties&#34; of the display device, under the &#34;Resources&#34; tab.&lt;/p&gt; &#xA;&lt;p&gt;Then click on &#34;Callback&#34; in the &#34;KDCOM Hook Method&#34; section, then on &#34;Copy/Replace Kdcom&#34; and finally you can reboot the system.&lt;/p&gt; &#xA;&lt;p&gt;This setup process has to be done only once and the display drivers can be re-enabled, if necessary. When using BugChecker however the display drivers must be disabled again, if required by your configuration.&lt;/p&gt; &#xA;&lt;h3&gt;vm_screen setting for VirtualBox (Experimental)&lt;/h3&gt; &#xA;&lt;p&gt;The vm_screen setting in BugChecker.dat allows to open the BugChecker debugger UI in VirtualBox without specifying in advance a screen resolution in Symbol Loader and without disabling display drivers.&lt;/p&gt; &#xA;&lt;p&gt;The idea is to write directly to the I/O ports and to the Command Buffer of the virtual display device in order to obtain the current screen resolution and to notify the hypervisor of any update in the framebuffer.&lt;/p&gt; &#xA;&lt;p&gt;This solution was inspired by the &lt;a href=&#34;https://github.com/freedesktop/xorg-xf86-video-vmware&#34;&gt;X.org xf86-video-vmware&lt;/a&gt; driver.&lt;/p&gt; &#xA;&lt;p&gt;This solution works only for VirtualBox VMs and by editing manually the BugChecker.dat file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vitoplantamura/BugChecker/master/assets/bcscreenshot3.png&#34; alt=&#34;vm_screen&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Symbol Loader, manually set the width and height of the framebuffer to the maximum resolution possible (i.e. the dimensions of your computer screen). Set the stride to 0.&lt;/li&gt; &#xA; &lt;li&gt;The BugChecker.dat file is created by Symbol Loader in &#34;C:\Windows\BugChecker&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The vm_screen setting should be added under &#34;settings-&amp;gt;framebuffer&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The hierarchy of the settings in this file is determined by the tabulation characters (not spaces).&lt;/li&gt; &#xA; &lt;li&gt;The format of the setting is Command_Buffer_Start_Address (comma) Command_Buffer_End_Address (comma) I/O_Port_Base&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: In the VM setting, under Display, select &#34;VBoxSVGA&#34; as the Graphics Controller and uncheck &#34;Enable 3D Acceleration&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is an experimental feature. In the future, this setting will be automatically added by Symbol Loader.&lt;/p&gt; &#xA;&lt;h2&gt;Implemented Commands&lt;/h2&gt; &#xA;&lt;p&gt;The command name and syntax are chosen to be as close as possible to those of the original SoftICE for NT:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;? javascript-expression&lt;/strong&gt;: Evaluate a javascript expression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ADDR eprocess&lt;/strong&gt;: Switch to process context (returns control to OS).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BC list|&lt;/strong&gt;*: Clear one or more breakpoints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BD list|&lt;/strong&gt;*: Disable one or more breakpoints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BE list|&lt;/strong&gt;*: Enable one or more breakpoints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BL (no parameters)&lt;/strong&gt;: List all breakpoints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BPX address [-t|-p] [WHEN js-expression]&lt;/strong&gt;: Set a breakpoint on execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DB/DW/DD/DQ [address] [-l len-in-bytes]&lt;/strong&gt;: Display memory as 8/16/32/64-bit values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EB/EW/ED/EQ address -v space-separated-values&lt;/strong&gt;: Edit memory as 8/16/32/64-bit values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;KL EN|IT&lt;/strong&gt;: Set keyboard layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LINES [rows-num]&lt;/strong&gt;: Display or set current display rows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MOD [-u|-s] [search-string]&lt;/strong&gt;: Display module information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;P [RET]&lt;/strong&gt;: Execute one program step.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PAGEIN address&lt;/strong&gt;: Force a page of memory to be paged in (returns control to OS).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PROC [search-string]&lt;/strong&gt;: Display process information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;R register-name -v value&lt;/strong&gt;: Change a register value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;STACK (no parameters)&lt;/strong&gt;: Scan the stack searching for return addresses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T (no parameters)&lt;/strong&gt;: Trace one instruction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;U address|DEST&lt;/strong&gt;: Unassemble instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VER (no parameters)&lt;/strong&gt;: Display version information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WD [window-size]&lt;/strong&gt;: Toggle the Disassembler window or set its size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WIDTH [columns-num]&lt;/strong&gt;: Display or set current display columns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WR (no parameters)&lt;/strong&gt;: Toggle the Registers window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WS [window-size]&lt;/strong&gt;: Toggle the Script window or set its size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;X (no parameters)&lt;/strong&gt;: Exit from the BugChecker screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2019&lt;/li&gt; &#xA; &lt;li&gt;Windows Driver Kit 7.1.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: WDK should be installed in its default location, i.e. X:\WinDDK, where X is the drive where the BugChecker sources are saved.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Projects Description&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BugChecker&lt;/strong&gt;: this is the BugChecker kernel driver, where the entirety of the debugger is implemented. The &#34;Release|x86&#34; and &#34;Release|x64&#34; output files are included in the final package. During initialization, the driver loads its config file at &#34;\SystemRoot\BugChecker\BugChecker.dat&#34; (all the symbol files are stored in this directory too) and then it tries to locate &#34;KDCOM.dll&#34; in kernel space. If found, it tries to call its &#34;KdSetBugCheckerCallbacks&#34; exported function, thus hooking KdSendPacket and KdReceivePacket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SymLoader&lt;/strong&gt;: this is the Symbol Loader. Only the &#34;Release|x86&#34; output file is included in the final package. Symbol Loader is used to change the BugChecker configuration (configuration is written to &#34;\SystemRoot\BugChecker\BugChecker.dat&#34;), to download PDB files and to install the custom KDCOM.dll module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;KDCOM&lt;/strong&gt;: this is the custom KDCOM.dll module that NTOSKRNL loads on system startup. It exports the &#34;KdSetBugCheckerCallbacks&#34; function that the driver calls to hook KdSendPacket and KdReceivePacket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pdb&lt;/strong&gt;: this is the Ghidra &#34;pdb&#34; project. The original version outputs the contents of a PDB file to the standard output in xml format. The code was modified in order to generate a BCS file instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NativeUtil&lt;/strong&gt;: since Symbol Loader is a WOW64 application in Windows x64, the calls to those APIs that must be made from architecture native images were moved here (for example the calls to the Device and Driver Installation API).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HttpToHttpsProxy&lt;/strong&gt;: this is an ASP.NET Core application whose function is to act as an internet proxy for Symbol Loader when run in Windows XP. Since XP has outdated TLS support, Symbol Loader cannot download files from an arbitrary symbol server. After deploying this application in an IIS on the same network, it is possible to download files from a symbol server in Windows XP prepending &#34;http://&amp;lt;YOUR_IIS_SERVER_IP&amp;gt;/HttpToHttpsProxy/&#34; to the server URL in Symbol Loader.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/4d61726b/VirtualKD-Redux&#34;&gt;VirtualKD&lt;/a&gt;: the first POC of BugChecker was built modifying VirtualKD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sysprogs/BazisLib&#34;&gt;BazisLib&lt;/a&gt;: the code behind the &#34;Copy/Replace Kdcom + Add Boot Entry&#34; button in Symbol Loader is from VirtualKD and uses BazisLib.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electronicarts/EASTL&#34;&gt;EASTL&lt;/a&gt;: No way to use MSVC++ STL here. EASTL is an excellent alternative.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NationalSecurityAgency/ghidra&#34;&gt;Ghidra&lt;/a&gt;: the &#34;pdb&#34; project in BugChecker is from Ghidra. It was modified to generate BCS files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyantific/zydis&#34;&gt;Zydis&lt;/a&gt;: for the disassembler window in BugChecker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reactos/reactos&#34;&gt;ReactOS&lt;/a&gt;: for the Windows KD internal type definitions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SerenityOS/serenity&#34;&gt;SerenityOS&lt;/a&gt;: for the low level bitmap manipulation functions used by the BugChecker memory allocator. Since I started BugChecker after I saw a video of &lt;a href=&#34;https://www.youtube.com/andreaskling&#34;&gt;Andreas&lt;/a&gt; (after 10 years of abstinence from C/C++ and any type of low level programming), I wanted to include a small piece of SerenityOS in BugChecker.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>NVISOsecurity/CobaltWhispers</title>
    <updated>2023-01-07T01:31:25Z</updated>
    <id>tag:github.com,2023-01-07:/NVISOsecurity/CobaltWhispers</id>
    <link href="https://github.com/NVISOsecurity/CobaltWhispers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CobaltWhispers is an aggressor script that utilizes a collection of Beacon Object Files (BOF) for Cobalt Strike to perform process injection, persistence and more, leveraging direct syscalls (SysWhispers2) to bypass EDR/AV&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CobaltWhispers&lt;/h1&gt; &#xA;&lt;p&gt;Author: &lt;a href=&#34;https://twitter.com/cerbersec&#34;&gt;@Cerbersec&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CobaltWhispers is an aggressor script that utilizes a collection of Beacon Object Files for Cobalt Strike to perform process injection, persistence and more, leveraging direct syscalls to bypass EDR/AV.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CobaltWhispers is powered by &lt;a href=&#34;https://github.com/jthuraisamy/SysWhispers2&#34;&gt;SysWhispers2&lt;/a&gt; and &lt;a href=&#34;https://github.com/Sh0ckFR/InlineWhispers2&#34;&gt;InlineWhispers2&lt;/a&gt;&lt;br&gt; CobaltWhispers is based on &lt;a href=&#34;https://github.com/0xthirteen/StayKit&#34;&gt;StayKit&lt;/a&gt; and work from &lt;a href=&#34;https://github.com/hasherezade/transacted_hollowing&#34;&gt;Hasherezade&lt;/a&gt; and &lt;a href=&#34;https://github.com/forrest-orr/phantom-dll-hollower-poc&#34;&gt;Forrest Orr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;CobaltWhispers was made as part of an internship at NVISO Security&#39;s Red Team. The associated blogposts can be found &lt;a href=&#34;https://cerbersec.com/2021/08/26/beacon-object-files-part-1.html&#34;&gt;here (process-injection)&lt;/a&gt; and &lt;a href=&#34;https://blog.nviso.eu/2021/10/21/kernel-karnage-part-1/&#34;&gt;here (kernel karnage)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Compiling from source&lt;/h1&gt; &#xA;&lt;p&gt;CobaltWhispers requires several tools to compile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MingW-w64 - &lt;code&gt;apt install mingw-w64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make - &lt;code&gt;apt install make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jthuraisamy/SysWhispers2&#34;&gt;SysWhispers2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sh0ckFR/InlineWhispers2&#34;&gt;InlineWhispers2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each project requires 3 files generated by SysWhispers2 / InlineWhispers2 to function:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;syscalls-asm.h&lt;/li&gt; &#xA; &lt;li&gt;syscalls.c&lt;/li&gt; &#xA; &lt;li&gt;syscalls.h&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These files can be generated according to the InlineWhispers2 documentation, &lt;strong&gt;however this is not the optimal method&lt;/strong&gt; because a lot of unused code will be included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Sh0ckFR/InlineWhispers2 &amp;amp;&amp;amp; cd InlineWhispers2&#xA;cd SysWhispers2/ &amp;amp;&amp;amp; python3 syswhispers.py --preset all -o syscalls_all &amp;amp;&amp;amp; cd ..&#xA;python3 InlineWhispers2.py&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, use SysWhispers2 to generate the output files only for the necessary APIs, then manually (or script it) supply them to InlineWhispers2 which will convert them to the proper format. See the included makefile for additional information or use the included files at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Injection&lt;/h2&gt; &#xA;&lt;h3&gt;SpawnProcess&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Payload Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Inherit permissions from parent process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Spawns a new suspended process with Code Integrity Guard (CIG) enabled to block non-Microsoft signed binaries. Spoofs the specified parent process. The PID is returned.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parent process:&lt;/strong&gt; The name of the process to set as parent&lt;br&gt; &lt;strong&gt;Executable location:&lt;/strong&gt; Full path to executable on disk used to spawn new process&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;CreateRemoteThread&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Payload Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shellcode/Raw&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PID&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Injects a payload into a remote process using NtCreateThreadEx&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Process PID:&lt;/strong&gt; The process ID of the remote process&lt;br&gt; &lt;strong&gt;Payload location:&lt;/strong&gt; Location of payload in binary form on disk (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Payload b64:&lt;/strong&gt; Raw shellcode in base64 encoded string format (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Listener:&lt;/strong&gt; Listener to generate payload for (Conditional)&lt;/p&gt; &#xA;&lt;p&gt;A listener should be specified to generate a Beacon payload. If a manual payload is desired, it should be provided via a path to the raw binary on disk, or Base64 encoded shellcode.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;QueueUserAPC&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Payload Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shellcode/Raw&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PID&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Potentially crash target process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Injects a payload into a remote process using NtQueueApcThread&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Process PID:&lt;/strong&gt; The process ID of the remote process&lt;br&gt; &lt;strong&gt;Threads:&lt;/strong&gt; Number of threads to add an APC call to&lt;br&gt; &lt;strong&gt;Payload location:&lt;/strong&gt; Location of payload in binary form on disk (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Payload b64:&lt;/strong&gt; Raw shellcode in base64 encoded string format (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Listener:&lt;/strong&gt; Listener to generate payload for (Conditional)&lt;/p&gt; &#xA;&lt;p&gt;A listener should be specified to generate a Beacon payload. If a manual payload is desired, it should be provided via a path to the raw binary on disk, or Base64 encoded shellcode.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;MapViewOfSection&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Payload Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shellcode/Raw&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Surrogate Process&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Injects a payload into a surrogate process using NtMapViewOfSection&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parent process:&lt;/strong&gt; The name of the process to set as parent&lt;br&gt; &lt;strong&gt;Executable location:&lt;/strong&gt; The location of the executable on disk to be used to spawn a new process&lt;br&gt; &lt;strong&gt;Payload location:&lt;/strong&gt; Location of payload in binary form on disk (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Payload b64:&lt;/strong&gt; Raw shellcode in base64 encoded string format (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Listener:&lt;/strong&gt; Listener to generate payload for (Conditional)&lt;/p&gt; &#xA;&lt;p&gt;A listener should be specified to generate a Beacon payload. If a manual payload is desired, it should be provided via a path to the raw binary on disk, or Base64 encoded shellcode.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;TransactedHollowing&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Payload Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Surrogate Process&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Requires x64 PE payload&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Injects a payload into a surrogate process using transacted sections and mapped views. Remote entry point and PEB are updated, no anomalous memory sections or memory permissions. See &lt;a href=&#34;https://blog.malwarebytes.com/threat-analysis/2018/08/process-doppelganging-meets-process-hollowing_osiris/&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parent process:&lt;/strong&gt; The name of the process to set as parent&lt;br&gt; &lt;strong&gt;Executable location:&lt;/strong&gt; The location of the executable on disk to be used to spawn a new process&lt;br&gt; &lt;strong&gt;Payload location:&lt;/strong&gt; Location of x64 PE payload on disk (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Payload b64:&lt;/strong&gt; x64 PE payload in base64 encoded string format (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Listener:&lt;/strong&gt; Listener to generate payload for (Conditional)&lt;/p&gt; &#xA;&lt;p&gt;A listener should be specified to generate a Beacon payload. If a manual payload is desired, it should be provided via a path to the x64 PE on disk, or Base64 encoded x64 PE.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;PhantomDLLHollowing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;CURRENTLY NOT IMPLEMENTED&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Payload Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Target&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Position Independent Shellcode (PIC)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Surrogate Process&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Elevated permissions are required to open system DLLs with write permissions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Injects a payload into a surrogate process using transacted sections in combination with DLL hollowing. See &lt;a href=&#34;https://www.forrest-orr.net/post/malicious-memory-artifacts-part-i-dll-hollowing&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parent process:&lt;/strong&gt; The name of the process to set as parent&lt;br&gt; &lt;strong&gt;Executable location:&lt;/strong&gt; The location of the executable on disk to be used to spawn a new process&lt;br&gt; &lt;strong&gt;Payload location:&lt;/strong&gt; Location of payload in binary form on disk (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Payload b64:&lt;/strong&gt; Raw shellcode in base64 encoded string format (Conditional | Optional)&lt;br&gt; &lt;strong&gt;Listener:&lt;/strong&gt; Listener to generate payload for (Conditional)&lt;/p&gt; &#xA;&lt;p&gt;A listener should be specified to generate a Beacon payload. If a manual payload is desired, it should be provided via a path to the raw binary on disk, or Base64 encoded shellcode.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Persistence&lt;/h2&gt; &#xA;&lt;h3&gt;ElevatedRegKey&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Create or modify a registry key at the specified location.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HKLM:Software\Microsoft\Windows\CurrentVersion\Run&lt;/li&gt; &#xA; &lt;li&gt;HKLM:Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key name:&lt;/strong&gt; Value name&lt;br&gt; &lt;strong&gt;Command:&lt;/strong&gt; Command to be ran when registry is used&lt;br&gt; &lt;strong&gt;Registry key:&lt;/strong&gt; Location where registry key will be created&lt;br&gt; &lt;strong&gt;Hidden:&lt;/strong&gt; Will prepend a null byte to the key name; throws errors in regedit&lt;br&gt; &lt;strong&gt;Cleanup:&lt;/strong&gt; Removes created key&lt;/p&gt; &#xA;&lt;p&gt;Cleanup requires the key name and registry key (location).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ElevatedUserInitRegKey&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Create or modify a registry key at the specified location.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon [UserInit]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key name:&lt;/strong&gt; Value name&lt;br&gt; &lt;strong&gt;Command:&lt;/strong&gt; Command to be ran when registry is used&lt;br&gt; &lt;strong&gt;Registry key:&lt;/strong&gt; Location where registry key will be created&lt;br&gt; &lt;strong&gt;Hidden:&lt;/strong&gt; Will prepend a null byte to the key name; throws errors in regedit&lt;br&gt; &lt;strong&gt;Cleanup:&lt;/strong&gt; Removes created key&lt;/p&gt; &#xA;&lt;p&gt;Cleanup requires the key name and registry key (location).&lt;br&gt; UserInit: Automatically sets &#39;Key name&#39; and &#39;Registry key&#39;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;UserRegKey&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Create or modify a registry key at the specified location.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HKCU:Software\Microsoft\Windows\CurrentVersion\Run&lt;/li&gt; &#xA; &lt;li&gt;HKCU:Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key name:&lt;/strong&gt; Value name&lt;br&gt; &lt;strong&gt;Command:&lt;/strong&gt; Command to be ran when registry is used&lt;br&gt; &lt;strong&gt;Registry key:&lt;/strong&gt; Location where registry key will be created&lt;br&gt; &lt;strong&gt;Hidden:&lt;/strong&gt; Will prepend a null byte to the key name; throws errors in regedit&lt;br&gt; &lt;strong&gt;Cleanup:&lt;/strong&gt; Removes created key&lt;/p&gt; &#xA;&lt;p&gt;Cleanup requires the key name and registry key (location).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;UserInitMprRegKey&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Create or modify a registry key at the specified location.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HKCU:Environment [UserInitMprLogonScript]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key name:&lt;/strong&gt; Value name&lt;br&gt; &lt;strong&gt;Command:&lt;/strong&gt; Command to be ran when registry is used&lt;br&gt; &lt;strong&gt;Registry key:&lt;/strong&gt; Location where registry key will be created&lt;br&gt; &lt;strong&gt;Hidden:&lt;/strong&gt; Will prepend a null byte to the key name; throws errors in regedit&lt;br&gt; &lt;strong&gt;Cleanup:&lt;/strong&gt; Removes created key&lt;/p&gt; &#xA;&lt;p&gt;Cleanup requires the key name and registry key (location).&lt;br&gt; UserInitMprLogonScript: Automatically sets &#39;Key name&#39;and &#39;Registry key&#39;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Scheduled Task COM Hijack&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Hijacks a scheduled task&#39;s COM handler. Creates a registry key at HKCU:\Software\Classes\CLSID\&#xA; &lt;clsid&gt;&#xA;  \InprocServer32 which points to a DLL.&#xA; &lt;/clsid&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Class ID:&lt;/strong&gt; The CLSID that corresponds to the task&#39;s COM handler CLSID&lt;br&gt; &lt;strong&gt;DLL path:&lt;/strong&gt; Path to DLL that is to be loaded&lt;br&gt; &lt;strong&gt;Cleanup:&lt;/strong&gt; Removes created key&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Drivers&lt;/h2&gt; &#xA;&lt;h3&gt;DisableDSE&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Can potentially BSOD target system&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Loads a vulnerable signed driver with arbitrary kernel memory read/write (NalDrv/iqvm64.sys). Changes the ntoskrnl.exe &lt;code&gt;g_CiEnabled&lt;/code&gt; or CI.dll &lt;code&gt;g_CiOptions&lt;/code&gt; flag to disable Driver Signature Enforcement (DSE).&lt;br&gt; Loads a non-signed driver (Interceptor/Interceptor.sys), then restores the DSE flag values. Both the signed driver and non-signed driver are written to disk.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Driver&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MD5 checksum&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iqvm64.sys&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1898ceda3247213c084f43637ef163b3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Interceptor.sys&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;508c8943359717cfa0c77b61ebea2118&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vulnerable driver location:&lt;/strong&gt; Location of vulnerable signed driver in binary form on disk&lt;br&gt; &lt;strong&gt;Malicious driver location:&lt;/strong&gt; Location of the malicious non-signed driver in binary form on disk&lt;br&gt; &lt;strong&gt;Vulnerable driver name:&lt;/strong&gt; name used to create the registry key &#39;\Registry\Machine\System\CurrentControlSet\Services\&#xA; &lt;name&gt;&#xA;  &#39;&#xA;  &lt;br&gt; &#xA;  &lt;strong&gt;Vulnerable driver device name:&lt;/strong&gt; name used to contact the driver &#39;\DosDevices\&#xA;  &lt;name&gt;&#xA;   &#39;&#xA;   &lt;br&gt; &#xA;   &lt;strong&gt;Malicious driver name:&lt;/strong&gt; name used to create the registry key &#39;\Registry\Machine\System\CurrentControlSet\Services\&#xA;   &lt;name&gt;&#xA;    &#39;&#xA;    &lt;br&gt; &#xA;    &lt;strong&gt;Malicious driver device name:&lt;/strong&gt; name used to contact the driver &#39;\DosDevices\&#xA;    &lt;name&gt;&#xA;     &#39;&#xA;     &lt;br&gt; &#xA;     &lt;strong&gt;Target path:&lt;/strong&gt; temporary path to write the vulnerable and malicious driver files to&#xA;    &lt;/name&gt;&#xA;   &lt;/name&gt;&#xA;  &lt;/name&gt;&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;UnloadDriver&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Unloads a driver on the target using the provided registry key and deletes the binary from disk at the specified path.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Driver registry key:&lt;/strong&gt; registry key used to unload driver &#39;\Registry\Machine\System\CurrentControlSet\Services\&#xA; &lt;name&gt;&#xA;  &#39;&#xA;  &lt;br&gt; &#xA;  &lt;strong&gt;Driver installation path:&lt;/strong&gt; location of driver on disk&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Intercept&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reliability (0-5)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Elevated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Can potentially BSOD target system&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Information:&lt;/strong&gt; Query the Interceptor driver&lt;br&gt; &lt;strong&gt;Hook:&lt;/strong&gt; Hook the target driver&#39;s major functions (IRP)&lt;br&gt; &lt;strong&gt;Unhook:&lt;/strong&gt; Restore the target driver&#39;s major functions&lt;br&gt; &lt;strong&gt;Patch:&lt;/strong&gt; Patch the target kernel callbacks&lt;br&gt; &lt;strong&gt;Restore:&lt;/strong&gt; Restore the target kernel callbacks&lt;/p&gt; &#xA;&lt;h4&gt;Parameters: Information&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vendors:&lt;/strong&gt; display supported vendors&lt;br&gt; &lt;strong&gt;Modules:&lt;/strong&gt; query all loaded drivers&lt;br&gt; &lt;strong&gt;Hooked modules:&lt;/strong&gt; display all hooked drivers&lt;br&gt; &lt;strong&gt;Callbacks:&lt;/strong&gt; query all registered callbacks&lt;/p&gt; &#xA;&lt;h4&gt;Parameters: Hook&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Index:&lt;/strong&gt; hook a driver by index (see: information - modules)&lt;br&gt; &lt;strong&gt;Name:&lt;/strong&gt; hook a driver by device name (\Device\Name)&lt;br&gt; &lt;strong&gt;Values:&lt;/strong&gt; comma separated list of indexes (conditional)&lt;br&gt; &lt;strong&gt;Name:&lt;/strong&gt; device name of the target driver (conditional)&lt;/p&gt; &#xA;&lt;p&gt;Values are required when &#39;Index&#39; is selected. Name is required when &#39;Name&#39; is selected.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters: Unhook&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Index:&lt;/strong&gt; unhook a driver by index (see: information - hooked modules)&lt;br&gt; &lt;strong&gt;All:&lt;/strong&gt; unhook all hooked drivers&lt;br&gt; &lt;strong&gt;Values:&lt;/strong&gt; comma separated list of indexes (conditional)&lt;/p&gt; &#xA;&lt;p&gt;Values is required when &#39;Index&#39; is selected.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters: Patch&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vendor:&lt;/strong&gt; patch all callbacks associated with vendor module(s)&lt;br&gt; &lt;strong&gt;Module:&lt;/strong&gt; patch all callbacks associated with module(s)&lt;br&gt; &lt;strong&gt;Process:&lt;/strong&gt; patch process callback(s)&lt;br&gt; &lt;strong&gt;Thread:&lt;/strong&gt; patch thread callback(s)&lt;br&gt; &lt;strong&gt;Image:&lt;/strong&gt; patch image callback(s)&lt;br&gt; &lt;strong&gt;Registry:&lt;/strong&gt; patch registry callback(s)&lt;br&gt; &lt;strong&gt;Object process:&lt;/strong&gt; patch object process callbac(s)&lt;br&gt; &lt;strong&gt;Object thread:&lt;/strong&gt; patch object thread callback(s)&lt;br&gt; &lt;strong&gt;Values:&lt;/strong&gt; comma separated list of indexes (see: information - callbacks) (conditional)&lt;br&gt; &lt;strong&gt;Name:&lt;/strong&gt; comma separated list of module names or single vendor name (see: information - vendors) (conditional)&lt;/p&gt; &#xA;&lt;p&gt;Values is required when &#39;process&#39;, &#39;thread&#39;, &#39;image&#39;, &#39;registry&#39;, &#39;object process&#39; or &#39;object thread&#39; is selected. Name is required when &#39;vendor&#39; or &#39;module&#39; is selected.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters: Restore&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vendor:&lt;/strong&gt; restore all callbacks associated with vendor module(s)&lt;br&gt; &lt;strong&gt;Module:&lt;/strong&gt; restore all callbacks associated with module(s)&lt;br&gt; &lt;strong&gt;Process:&lt;/strong&gt; restore process callback(s)&lt;br&gt; &lt;strong&gt;Thread:&lt;/strong&gt; restore thread callback(s)&lt;br&gt; &lt;strong&gt;Image:&lt;/strong&gt; restore image callback(s)&lt;br&gt; &lt;strong&gt;Registry:&lt;/strong&gt; restore registry callback(s)&lt;br&gt; &lt;strong&gt;Object process:&lt;/strong&gt; restore object process callbac(s)&lt;br&gt; &lt;strong&gt;Object thread:&lt;/strong&gt; restore object thread callback(s)&lt;br&gt; &lt;strong&gt;All:&lt;/strong&gt; restore all callbacks&lt;br&gt; &lt;strong&gt;Values:&lt;/strong&gt; comma separated list of indexes (see: information - callbacks) (conditional)&lt;br&gt; &lt;strong&gt;Name:&lt;/strong&gt; comma separated list of module names or single vendor name (see: information - vendors) (conditional)&lt;/p&gt; &#xA;&lt;p&gt;Values is required when &#39;process&#39;, &#39;thread&#39;, &#39;image&#39;, &#39;registry&#39;, &#39;object process&#39; or &#39;object thread&#39; is selected. Name is required when &#39;vendor&#39; or &#39;module&#39; is selected.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>guolifu/evil-php</title>
    <updated>2023-01-07T01:31:25Z</updated>
    <id>tag:github.com,2023-01-07:/guolifu/evil-php</id>
    <link href="https://github.com/guolifu/evil-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;If you&#39;re not afraid of bugs, you can enjoy it. evil-php&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evil-php&lt;/h1&gt; &#xA;&lt;p&gt;什么？PHP环境运行太过稳定，无事可做？千篇一律的日常开发毫无挑战？想体验不知何时发生未知BUG的恐惧？&lt;/p&gt; &#xA;&lt;p&gt;把本项目引入你们的项目吧，你们的项目会有但不仅限于如下的神奇效果：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;var_dump&lt;/code&gt; 在周末时，会有10%的概率返回&lt;code&gt;NULL&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;in_array&lt;/code&gt; 当数组长度可以被7整除时，永远返回&lt;code&gt;false&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;array_map&lt;/code&gt; 在周日时，方法的结果总是会丢失最后一个元素。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;array_filter&lt;/code&gt; 返回值有50%的概率丢失最后一个元素。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sleep&lt;/code&gt; 总是会比预期时间慢1秒才触发。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strtotime&lt;/code&gt; 的结果总是会慢7分钟。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json_encode&lt;/code&gt; 会把I(大写字母I)变成l(小写字母L)。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;substr&lt;/code&gt; 有50%几率返回空字符串。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mb_strlen&lt;/code&gt; 有50%几率返回0。&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Make Install evil-php&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ /path/to/phpize&#xA;$ ./configure --with-php-config=/path/to/php-config&#xA;$ make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;evil.ini&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[evil]&#xA;extension=evil.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;var_dump(mb_strlen(&#34;123&#34;));&#xA;&#xA;var_dump(substr(&#34;abc&#34;, 0, 1));&#xA;&#xA;var_dump(json_encode([&#34;a&#34; =&amp;gt; &#34;III&#34;, &#34;I&#34; =&amp;gt; 2]));&#xA;&#xA;var_dump(strtotime(&#34;2023-1-1&#34;));&#xA;&#xA;var_dump(in_array(1, [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, &#34;qwe&#34; =&amp;gt; &#34;123&#34;]));&#xA;&#xA;var_dump(in_array(1, [1, 2, 3, 4, 5, 6, 7]));&#xA;&#xA;var_dump(array_map(function ($v1, $v2) {&#xA;    return $v1 + $v2;&#xA;}, [1, 2, 3, 4], [1, 2, 3, 4]));&#xA;&#xA;var_dump(array_filter([1, 2, 3, 4, 5, 6, 7, 10, 11, 12, &#34;qwe&#34; =&amp;gt; &#34;123&#34;], function ($v) {&#xA;    return $v &amp;gt; 10 || is_string($v);&#xA;}));&#xA;&#xA;function user_sleep()&#xA;{&#xA;    for ($i = 0; $i &amp;lt; 2; $i++) {&#xA;        sleep(1);&#xA;        echo strtotime(date(&#34;Y&lt;span&gt;Ⓜ&lt;/span&gt;d H:i:s&#34;)) . PHP_EOL;&#xA;    }&#xA;}&#xA;&#xA;user_sleep();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;严正声明⚠️&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;本包仅供PHP扩展爱好者学习交流使用哦，包的作者不参与注入，因引入本包造成的损失本包作者概不负责哦。&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>