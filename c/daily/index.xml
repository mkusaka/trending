<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:35:07Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alanzjl/AlkaidMount</title>
    <updated>2022-11-13T01:35:07Z</updated>
    <id>tag:github.com,2022-11-13:/alanzjl/AlkaidMount</id>
    <link href="https://github.com/alanzjl/AlkaidMount" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HarmonicDrive equatorial mount&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alkaid Mount - DIY Equatorial Mount with HarmonicDrive&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alanzjl/AlkaidMount/main/renderings/GIF.gif&#34; alt=&#34;rendering&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Built by JZ.&lt;/p&gt; &#xA;&lt;p&gt;For my build log, checkout &lt;a href=&#34;https://alanz.info/posts/2022/07/diy-mount/&#34;&gt;this page on my website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following YouTube video documents all the processes with no explaination: &lt;a href=&#34;https://www.youtube.com/watch?v=k2GoMa2DpH8&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/k2GoMa2DpH8/0.jpg&#34; alt=&#34;Youtube Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The same video can also be found on &lt;a href=&#34;https://www.bilibili.com/video/BV1SR4y1X7bt/?share_source=copy_web&amp;amp;vd_source=4d6f936f693563e28752aadac9dd326f&#34;&gt;bilibili&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note: do not directly use the dxf files under the Machine/ folder. They are for reference only and they might contain duplicated parts, because I had to make several parts more than once due to some mistakes at the beginning. I&#39;d recommend looking at the solidworks files first and try to understand every part, then generate your own dxf.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;AlkaidMount is a DIY aluminum HarmonicDrive German style equatorial mount with a ~25lbs unbalanced or &amp;gt;70lbs balanced load capacity, with a self weight of only ~16lbs. Each axis consists of a 100:1 HarmonicDrive gearbox, followed by a 27:1 planetary gearbox, driven by a Nema17 stepper motor.&lt;/p&gt; &#xA;&lt;p&gt;Weight capacity is calculated with gearbox load limits as well as rigid body simulation. Note that I have not yet done any torture tests, so those numbers are all theoratical. I&#39;ve only tested it on the two scopes I own - an unbalanced Williams Optics GT71 setup (~15lbs) and balanced a Meade LX200 8&#34; SCT setup (~25lbs not including the counterweights). Both setups worked beautifully.&lt;/p&gt; &#xA;&lt;p&gt;This repo contains ALL the design files (CAD, manufacture drawings, PCB files, software) to make the AlkaidMount. I made this repo public to inspire other ideas. Due to the difficulty in sourcing the exact same model of the two HarmonicDrive&#39;s (unless you buy new:), replicating the exact same mount would be hard. However modifying this design to suite other HD models shouldn&#39;t be too hard.&lt;/p&gt; &#xA;&lt;h2&gt;BOM - Hardware&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Quantity&lt;/th&gt; &#xA;   &lt;th&gt;Drawings&lt;/th&gt; &#xA;   &lt;th&gt;Datasheet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Harmonic Drive CSF-17-100-2UH-LW&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.harmonicdrive.net/_hd/content/caddownloads/dxf/csf-2uh_gearheads/csf-17-xx-2uh.pdf&#34;&gt;Drawings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.harmonicdrive.net/products/gear-units/gear-units/csf-2uh/csf-17-100-2uh&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nema 17 with 27:1 Planetary Gearbox&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.omc-stepperonline.com/download/17HS19-1684S-PG27.pdf&#34;&gt;Drawings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.omc-stepperonline.com/nema-17-stepper-motor-bipolar-l-48mm-w-gear-ratio-27-1-planetary-gearbox-17hs19-1684s-pg27&#34;&gt;Datasheet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1/8&#34; Aluminum plate&lt;/td&gt; &#xA;   &lt;td&gt;12&#34;x12&#34; minimum&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1/4&#34; Aluminum plate&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M4x8&lt;/td&gt; &#xA;   &lt;td&gt;many :)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M3x8&lt;/td&gt; &#xA;   &lt;td&gt;not that many :]&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M5x8&lt;/td&gt; &#xA;   &lt;td&gt;a few :{&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;BOM - Electronics&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Quantity&lt;/th&gt; &#xA;   &lt;th&gt;Drawings&lt;/th&gt; &#xA;   &lt;th&gt;Datasheet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Teensy 4.0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP-32 (for wifi control)&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For parts on the PCB, see &lt;a href=&#34;https://raw.githubusercontent.com/alanzjl/AlkaidMount/main/PCB/parts.txt&#34;&gt;PCB/parts.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manufacturing guide&lt;/h2&gt; &#xA;&lt;p&gt;Most parts were made with 2D waterjetting, with not too much post-processing (tab removal, tapping if needed). Some parts have holes on the side, so some milling was involved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xilinx/Vitis-Tutorials</title>
    <updated>2022-11-13T01:35:07Z</updated>
    <id>tag:github.com,2022-11-13:/Xilinx/Vitis-Tutorials</id>
    <link href="https://github.com/Xilinx/Vitis-Tutorials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vitis In-Depth Tutorials&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt;&lt;a&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/docs-jp/README.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr width=&#34;100%&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Xilinx/Image-Collateral/main/xilinx-logo.png&#34; width=&#34;30%&#34;&gt;&lt;h1&gt;Vitis™ In-Depth Tutorials&lt;/h1&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://www.youtube.com/watch?v=4JijWoV6lH4&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started/Vitis/images/intro_video_new.png&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a&gt;Visit more Vitis developer videos on &lt;/a&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCkzIS3hJplxSbVRxRQJW4Ow&#34;&gt;Adaptive Computing Developer YouTube Channel&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Unlocking a new design experience for all developers with Vitis&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.xilinx.com/products/design-tools/vitis/vitis-platform.html&#34;&gt;Vitis™ unified software platform&lt;/a&gt; enables the development of embedded software and accelerated applications on heterogeneous Xilinx® platforms including FPGAs, SoCs, and Versal™ ACAPs. It provides a unified programming model for accelerating Edge, Cloud, and Hybrid computing applications. Learn how to use Vitis, Vitis AI, and the Vitis accelerated libraries to implement a fully end-to-end accelerated application using purely software-defined flows.&lt;/p&gt; &#xA;&lt;h2&gt;Where to Start&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to Vitis and want to start with the basics, or just want to get a quick overview of what Vitis can offer, we recommend checking out the tutorials under &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started&#34;&gt;Getting Started&lt;/a&gt;, and from there exploring other tutorials on different topics.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, if you are looking for a specific tutorial for the desired device or platform, or are interested in a special application or feature, you can select a tutorial from the topics as listed under the &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/#tutorials&#34;&gt;Tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this repository, tutorials are divided into different topics by function and application with each topic containing 2 sections.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature Tutorials&lt;/strong&gt; illustrate specific features or flows of Vitis, Libraries, XRT and platforms, some features may not be required by all designs but are still useful for some use cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Design Tutorials&lt;/strong&gt; illustrate higher-level concepts or design flows, walk through specific examples or reference designs, and more complex and complete designs or applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Get Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/FAQs.md&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For questions about Vitis, please visit &lt;a href=&#34;https://support.xilinx.com/s/topic/0TO2E000000YKXhWAO/vitis?language=en_US&#34;&gt;Vitis Forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For questions or issues about tutorials, please submit an &lt;a href=&#34;https://github.com/Xilinx/Vitis-Tutorials/issues&#34;&gt;Issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Download the Repository&lt;/h2&gt; &#xA;&lt;p&gt;To get a local copy of the Vitis-Tutorials repository, clone it to the local system by executing the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Xilinx/Vitis-Tutorials.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default branch is always consistent with the latest released Vitis version, if you need to run the tutorial on a different Vitis version, please checkout the branch that matches the tool version after cloning the repository with the &lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can also download the repository as a Zip file in two ways, the downloaded Zip file will contain only selected branch and the overall size will be smaller than the entire repository being cloned.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From a browser, first select the desired branch, then click the small arrow on the green &lt;code&gt;Code&lt;/code&gt; button at the top right of the repo contents and select &lt;code&gt;Download Zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;From a terminal, execute the below command. Take the 2022.2 branch as an example.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/Xilinx/Vitis-Tutorials/archive/refs/heads/2022.2.zip &amp;amp;&amp;amp; unzip 2022.2.zip &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/CHANGELOG.md&#34;&gt;Change Logs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;3&#34; height=&#34;24&#34; align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started&#34;&gt;Getting Started&lt;/a&gt; &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;3&#34; height=&#34;48&#34;&gt; Start here! Learn the basics of the Vitis programming model by putting together your very first application. No experience necessary! &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started/Vitis&#34;&gt;Vitis Introduction&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started/Vitis_HLS&#34;&gt;Vitis HLS Introduction&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started/Vitis_Libraries&#34;&gt;Vitis Libraries Introduction&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Getting_Started/Vitis_Platform/&#34;&gt;Vitis Platform Introduction &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; height=&#34;24&#34; align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration&#34;&gt;Hardware Acceleration&lt;/a&gt; &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; height=&#34;48&#34;&gt; Learn how to use the Vitis core development kit to build, analyze, and optimize an accelerated algorithm developed in C++, OpenCL, and even Verilog and VHDL. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;strong&gt; Feature Tutorials &lt;/strong&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;strong&gt; Design Tutorials &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/01-rtl_kernel_workflow&#34;&gt;Getting Started with RTL Kernels&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/01-convolution-tutorial&#34;&gt;Convolution Example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/02-mixing-c-rtl-kernels&#34;&gt;Mixing C and RTL&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/02-bloom&#34;&gt;Bloom Filter Example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/03-dataflow_debug_and_optimization/README.md&#34;&gt;Dataflow Debug and Optimization&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/03-rtl_stream_kernel_integration/README.md&#34;&gt;RTL Systems Integration Example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/04-mult-ddr-banks/README.md&#34;&gt;Using Multiple DDR Banks&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/04-traveling-salesperson/README.md&#34;&gt;Traveling Salesperson Problem&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/05-using-multiple-cu/README.md&#34;&gt;Using Multiple Compute Units&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/05-bottom_up_rtl_kernel/README.md&#34;&gt;Bottom RTL Kernel Design Flow Example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/06-controlling-vivado-implementation&#34;&gt;Controlling Vivado Implementation&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/06-cholesky-accel&#34;&gt;Cholesky Algorithm Acceleration&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/07-using-hbm&#34;&gt;Optimizing for HBM&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/07-host-code-opt&#34;&gt;XRT Host Code Optimization&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/08-using-hostmem&#34;&gt;Host Memory Access&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/08-alveo_aurora_kernel&#34;&gt;Aurora Kernel on Alveo&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/09-using-ethernet-on-alveo&#34;&gt;Using GT Kernels and Ethernet IPs on Alveo&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Design_Tutorials/09-sssp-application&#34;&gt;Single Source Shortest Path Application &lt;span&gt;🆕&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Hardware_Acceleration/Feature_Tutorials/10-p2p-card-to-card&#34;&gt;P2P Transfer using Native XRT C++ API &lt;span&gt;🆕&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &amp;nbsp; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;3&#34; height=&#34;24&#34; align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development&#34;&gt;AI Engine Development&lt;/a&gt; &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;3&#34; height=&#34;48&#34;&gt; Learn how to target, develop, and deploy advanced algorithms using a Versal AI Engine array in conjunction with PL IP/kernels and software applications running on the embedded processors. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; height=&#34;24&#34;&gt; &lt;strong&gt; Feature Tutorials &lt;/strong&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;strong&gt; Design Tutorials &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/05-AI-engine-versal-integration&#34;&gt;Versal Integration for HW Emu and HW&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/02-using-gmio&#34;&gt;Using GMIO with AIE&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/01-aie_lenet_tutorial&#34;&gt;LeNet Tutorial&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/03-rtp-reconfiguration&#34;&gt;Runtime Parameter Reconfiguration&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/04-packet-switching&#34;&gt;Packet Switching&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/02-super_sampling_rate_fir&#34;&gt;Super Sampling Rate FIR Filters&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/01-aie_a_to_z&#34;&gt;A to Z Bare-metal Flow&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/06-versal-system-design-clocking-tutorial&#34;&gt;Versal System Design Clocking&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/03-beamforming/README.md&#34;&gt;Beamforming Design&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/07-AI-Engine-Floating-Point&#34;&gt;Using Floating-Point in the AI Engine&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/08-dsp-library&#34;&gt;DSP Library Tutorial&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/06-fft2d_AIEvsHLS&#34;&gt;2D-FFT&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/09-debug-walkthrough&#34;&gt;Debug Walkthrough Tutorial&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/10-aie-dsp-lib-model-composer&#34;&gt;AIE DSP Library and Model Composer&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/07-firFilter_AIEvsHLS&#34;&gt;FIR Filter&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/11-ai-engine-emulation-waveform-analysis&#34;&gt;Versal Emulation Waveform Analysis&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/12-axis-traffic-generator&#34;&gt;AXIS External Traffic Generator&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/08-n-body-simulator&#34;&gt;N-Body Simulator&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/13-aie-performance-analysis&#34;&gt;AIE Performance and Deadlock Analysis&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/14-implementing-iir-filter&#34;&gt;Implementing an IIR Filter on the AIE&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Design_Tutorials/10-GeMM_AIEvsDSP&#34;&gt;Versal GeMM Implementation &lt;span&gt;🆕&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/15-post-link-recompile&#34;&gt;Post-Link Recompile of an AI Engine Application&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/16-external-traffic-generator-aie&#34;&gt;Python and C++ External Traffic Generators for AIE Simulation and Emulation&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Developer_Contributed/01-Versal_Custom_Thin_Platform_Extensible_System&#34;&gt;Versal Custom Thin Platform Extensible System&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/17-RTL-IP-with-AIE-Engines&#34;&gt;Using RTL IP with AI Engines&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/18-aie_a_to_z_custom_linux_platform&#34;&gt;AI Engine A-to-Z Flow for Linux &lt;span&gt;🆕&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/AI_Engine_Development/Feature_Tutorials/19-aie_external_io_sv&#34;&gt;Using Verilog Traffic Generators in AIE Simulation &lt;span&gt;🆕&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;3&#34; height=&#34;24&#34; align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation&#34;&gt;Vitis Platform Creation&lt;/a&gt; &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;3&#34; height=&#34;48&#34;&gt; Learn how to build custom platforms for Vitis to target your own boards built with Xilinx devices, and how to modify and extend existing platforms. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;strong&gt; Design Tutorials &lt;/strong&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;strong&gt; Feature Tutorials &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation/Design_Tutorials/02-Edge-AI-ZCU104&#34;&gt;Custom Platform Creation on MPSoC&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation/Feature_Tutorials/01_platform_creation_streaming_ip&#34;&gt;Incorporating Stream Interfaces&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation/Design_Tutorials/03_Edge_VCK190&#34;&gt;Custom Platform Creation on Versal&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation/Feature_Tutorials/02_petalinux_customization&#34;&gt;PetaLinux Building and System Customization &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation/Design_Tutorials/01-Edge-KV260&#34;&gt;Custom Platform Creation on KV260&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Vitis_Platform_Creation/Design_Tutorials/04_Edge_VCK190_DFX&#34;&gt;Versal Custom DFX Platform Creation Tutorial &lt;span&gt;🆕&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td height=&#34;24&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; height=&#34;24&#34; align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Developer_Contributed&#34;&gt;Vitis Developer Contributed Tutorials&lt;/a&gt; &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; height=&#34;48&#34;&gt; Check out the tutorials that Vitis developers shared! We welcome your contribution, you may share end-to-end designs, tips and tricks, or designs and examples that can help Xilinx users. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34; height=&#34;24&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xilinx/Vitis-Tutorials/2022.2/Developer_Contributed/01-Versal_Custom_Thin_Platform_Extensible_System&#34;&gt;Versal Custom Thin Platform Extensible System&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Other Vitis Tutorial Repositories&lt;/h2&gt; &#xA;&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;257&#34;&gt; &lt;strong&gt; Tutorial Repository &lt;/strong&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Description &lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/Xilinx/Vitis_Accel_Examples&#34;&gt;Vitis Acceleration Examples&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; This repository illustrates specific scenarios related to host code and kernel programming through small working examples. They can get you started with Vitis acceleration application coding and optimization. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/xilinx/Vitis-AI-Tutorials&#34;&gt;Machine Learning Tutorials&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; The repository helps to get you the lay of the land working with machine learning and the Vitis AI toolchain on Xilinx devices. It illustrates specific workflows or stages within Vitis AI and gives examples of common use cases. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;http://xilinx.github.io/Embedded-Design-Tutorials&#34;&gt;Embedded Design Tutorials&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Learn how to build and use embedded operating systems and drivers on Xilinx Adaptive SoCs and the MicroBlaze™ soft processor. These tutorials cover open-source operating systems and bare-metal drivers available from Xilinx, compilers, debuggers, and profiling tools for traditional SoC software development. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/Xilinx/Vitis_Model_Composer&#34;&gt;Vitis Model Composer Tutorials&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Learn rapid design exploration using Vitis Model Composer. Vitis Model Composer provides a library of performance-optimized blocks for design and implementation of DSP algorithms on Xilinx devices. The Vitis Model Composer AI Engine, HLS and HDL libraries within the Simulink™ environment, enable the rapid design exploration of an algorithm and accelerate the path to production. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;sup&gt;Copyright© 2020–2022 Xilinx&lt;/sup&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ggreer/the_silver_searcher</title>
    <updated>2022-11-13T01:35:07Z</updated>
    <id>tag:github.com,2022-11-13:/ggreer/the_silver_searcher</id>
    <link href="https://github.com/ggreer/the_silver_searcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A code-searching tool similar to ack, but faster.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Silver Searcher&lt;/h1&gt; &#xA;&lt;p&gt;A code searching tool similar to &lt;code&gt;ack&lt;/code&gt;, with a focus on speed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ggreer/the_silver_searcher&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ggreer/the_silver_searcher.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://floobits.com/ggreer/ag/redirect&#34;&gt;&lt;img src=&#34;https://floobits.com/ggreer/ag.svg?sanitize=true&#34; alt=&#34;Floobits Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webchat.freenode.net/?channels=ag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Freenode-%23ag-brightgreen.svg?sanitize=true&#34; alt=&#34;#ag on Freenode&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you know C? Want to improve ag? &lt;a href=&#34;http://geoff.greer.fm/2014/10/13/help-me-get-to-ag-10/&#34;&gt;I invite you to pair with me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s so great about Ag?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is an order of magnitude faster than &lt;code&gt;ack&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It ignores file patterns from your &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;.hgignore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If there are files in your source repo you don&#39;t want to search, just add their patterns to a &lt;code&gt;.ignore&lt;/code&gt; file. (*cough* &lt;code&gt;*.min.js&lt;/code&gt; *cough*)&lt;/li&gt; &#xA; &lt;li&gt;The command name is 33% shorter than &lt;code&gt;ack&lt;/code&gt;, and all keys are on the home row!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ag is quite stable now. Most changes are new features, minor bug fixes, or performance improvements. It&#39;s much faster than Ack in my benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ack test_blah ~/code/  104.66s user 4.82s system 99% cpu 1:50.03 total&#xA;&#xA;ag test_blah ~/code/  4.67s user 4.58s system 286% cpu 3.227 total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ack and Ag found the same results, but Ag was 34x faster (3.2 seconds vs 110 seconds). My &lt;code&gt;~/code&lt;/code&gt; directory is about 8GB. Thanks to git/hg/ignore, Ag only searched 700MB of that.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;a href=&#34;http://geoff.greer.fm/ag/speed/&#34;&gt;graphs of performance across releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How is it so fast?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ag uses &lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX_Threads&#34;&gt;Pthreads&lt;/a&gt; to take advantage of multiple CPU cores and search files in parallel.&lt;/li&gt; &#xA; &lt;li&gt;Files are &lt;code&gt;mmap()&lt;/code&gt;ed instead of read into a buffer.&lt;/li&gt; &#xA; &lt;li&gt;Literal string searching uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm&#34;&gt;Boyer-Moore strstr&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Regex searching uses &lt;a href=&#34;http://sljit.sourceforge.net/pcre.html&#34;&gt;PCRE&#39;s JIT compiler&lt;/a&gt; (if Ag is built with PCRE &amp;gt;=8.21).&lt;/li&gt; &#xA; &lt;li&gt;Ag calls &lt;code&gt;pcre_study()&lt;/code&gt; before executing the same regex on every file.&lt;/li&gt; &#xA; &lt;li&gt;Instead of calling &lt;code&gt;fnmatch()&lt;/code&gt; on every pattern in your ignore files, non-regex patterns are loaded into arrays and binary searched.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ve written several blog posts showing how I&#39;ve improved performance. These include how I &lt;a href=&#34;http://geoff.greer.fm/2012/09/07/the-silver-searcher-adding-pthreads/&#34;&gt;added pthreads&lt;/a&gt;, &lt;a href=&#34;http://geoff.greer.fm/2012/09/03/profiling-ag-writing-my-own-scandir/&#34;&gt;wrote my own &lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://geoff.greer.fm/2012/08/25/the-silver-searcher-benchmarking-revisions/&#34;&gt;benchmarked every revision to find performance regressions&lt;/a&gt;, and profiled with &lt;a href=&#34;http://geoff.greer.fm/2012/02/08/profiling-with-gprof/&#34;&gt;gprof&lt;/a&gt; and &lt;a href=&#34;http://geoff.greer.fm/2012/01/23/making-programs-faster-profiling/&#34;&gt;Valgrind&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;port install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu &amp;gt;= 13.10 (Saucy) or Debian &amp;gt;= 8 (Jessie)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  apt-get install silversearcher-ag&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora 21 and lower&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  yum install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora 22+&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  dnf install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RHEL7+&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  yum install epel-release.noarch the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gentoo&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  emerge -a sys-apps/the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Arch&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  pacman -S the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slackware&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  sbopkg -i the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;openSUSE&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  zypper install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CentOS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  yum install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NixOS/Nix/Nixpkgs&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  nix-env -iA silver-searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SUSE Linux Enterprise: Follow &lt;a href=&#34;https://software.opensuse.org/download.html?project=utilities&amp;amp;package=the_silver_searcher&#34;&gt;these simple instructions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BSD&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;FreeBSD&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  pkg install the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;OpenBSD/NetBSD&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  pkg_add the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Win32/64&lt;/p&gt; &lt;p&gt;Unofficial daily builds are &lt;a href=&#34;https://github.com/k-takata/the_silver_searcher-win32&#34;&gt;available&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;winget&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  winget install &#34;The Silver Searcher&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This installs a &lt;a href=&#34;https://github.com/JFLarvoire/the_silver_searcher/releases&#34;&gt;release&lt;/a&gt; of ag.exe optimized for Windows.&lt;/li&gt; &#xA;   &lt;li&gt;winget is intended to become the default package manager client for Windows.&lt;br&gt; As of June 2020, it&#39;s still in beta, and can be installed using instructions &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;there&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The setup script in the Ag&#39;s winget package installs ag.exe in the first directory that matches one of these criteria: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Over a previous instance of ag.exe &lt;em&gt;from the same &lt;a href=&#34;https://github.com/JFLarvoire/the_silver_searcher&#34;&gt;origin&lt;/a&gt;&lt;/em&gt; found in the PATH&lt;/li&gt; &#xA;     &lt;li&gt;In the directory defined in environment variable bindir_%PROCESSOR_ARCHITECTURE%&lt;/li&gt; &#xA;     &lt;li&gt;In the directory defined in environment variable bindir&lt;/li&gt; &#xA;     &lt;li&gt;In the directory defined in environment variable windir&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Chocolatey&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  choco install ag&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MSYS2&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  pacman -S mingw-w64-{i686,x86_64}-ag&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cygwin&lt;/p&gt; &lt;p&gt;Run the relevant &lt;a href=&#34;https://cygwin.com/install.html&#34;&gt;&lt;code&gt;setup-*.exe&lt;/code&gt;&lt;/a&gt;, and select &#34;the_silver_searcher&#34; in the &#34;Utils&#34; category.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;h3&gt;Building master&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies (Automake, pkg-config, PCRE, LZMA):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;macOS:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  brew install automake pkg-config pcre xz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  port install automake pkgconfig pcre xz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Ubuntu/Debian:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  apt-get install -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Fedora:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  yum -y install pkgconfig automake gcc zlib-devel pcre-devel xz-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;CentOS:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  yum -y groupinstall &#34;Development Tools&#34;&#xA;  yum -y install pcre-devel xz-devel zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;openSUSE:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  zypper source-install --build-deps-only the_silver_searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows: It&#39;s complicated. See &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher/wiki/Windows&#34;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the build script (which just runs aclocal, automake, etc):&lt;/p&gt; &lt;pre&gt;&lt;code&gt; ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On Windows (inside an msys/MinGW shell):&lt;/p&gt; &lt;pre&gt;&lt;code&gt; make -f Makefile.w32&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make install:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building a release tarball&lt;/h3&gt; &#xA;&lt;p&gt;GPG-signed releases are available &lt;a href=&#34;http://geoff.greer.fm/ag&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Building release tarballs requires the same dependencies, except for automake and pkg-config. Once you&#39;ve installed the dependencies, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to use &lt;code&gt;sudo&lt;/code&gt; or run as root for the make install.&lt;/p&gt; &#xA;&lt;h2&gt;Editor Integration&lt;/h2&gt; &#xA;&lt;h3&gt;Vim&lt;/h3&gt; &#xA;&lt;p&gt;You can use Ag with &lt;a href=&#34;https://github.com/mileszs/ack.vim&#34;&gt;ack.vim&lt;/a&gt; by adding the following line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let g:ackprg = &#39;ag --nogroup --nocolor --column&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let g:ackprg = &#39;ag --vimgrep&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which has the same effect but will report every match on the line.&lt;/p&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Wilfred/ag.el&#34;&gt;ag.el&lt;/a&gt; as an Emacs front-end to Ag. See also: &lt;a href=&#34;https://github.com/syohex/emacs-helm-ag&#34;&gt;helm-ag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TextMate&lt;/h3&gt; &#xA;&lt;p&gt;TextMate users can use Ag with &lt;a href=&#34;https://github.com/ggreer/AckMate&#34;&gt;my fork&lt;/a&gt; of the popular AckMate plugin, which lets you use both Ack and Ag for searching. If you already have AckMate you just want to replace Ack with Ag, move or delete &lt;code&gt;&#34;~/Library/Application Support/TextMate/PlugIns/AckMate.tmplugin/Contents/Resources/ackmate_ack&#34;&lt;/code&gt; and run &lt;code&gt;ln -s /usr/local/bin/ag &#34;~/Library/Application Support/TextMate/PlugIns/AckMate.tmplugin/Contents/Resources/ackmate_ack&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other stuff you might like&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/petdance/ack3&#34;&gt;Ack&lt;/a&gt; - Better than grep. Without Ack, Ag would not exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mileszs/ack.vim&#34;&gt;ack.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ctags.sourceforge.net/&#34;&gt;Exuberant Ctags&lt;/a&gt; - Faster than Ag, but it builds an index beforehand. Good for &lt;em&gt;really&lt;/em&gt; big codebases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://git-scm.com/docs/git-grep&#34;&gt;Git-grep&lt;/a&gt; - As fast as Ag but only works on git repos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; - A command-line fuzzy finder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sampson-chen/sack&#34;&gt;Sack&lt;/a&gt; - A utility that wraps Ack and Ag. It removes a lot of repetition from searching and opening matching files.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>