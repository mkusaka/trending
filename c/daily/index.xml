<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T01:33:29Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Nautilus-Institute/quals-2023</title>
    <updated>2023-06-01T01:33:29Z</updated>
    <id>tag:github.com,2023-06-01:/Nautilus-Institute/quals-2023</id>
    <link href="https://github.com/Nautilus-Institute/quals-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The DEF CON CTF 2023 Qualifier&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the open source release for Nautilus Institute&#39;s 2023 DEF CON CTF qualifier.&lt;/p&gt; &#xA;&lt;p&gt;We are releasing all of the source code for every challenge that was released during the game. In most cases, this also includes all of the code required to build that source code into a working challenge (such as &lt;code&gt;Makefile&lt;/code&gt;s and &lt;code&gt;Dockerfile&lt;/code&gt;s). It &lt;em&gt;does not&lt;/em&gt; include the infrastructure required to &lt;em&gt;host&lt;/em&gt; those challenges (e.g. our CI/CD pipeline, deployment scripts, and the &lt;code&gt;gatekeeper&lt;/code&gt; binary that validates tickets).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;_images&lt;/code&gt; folder contains the images that were on the scoreboar for each of the challenges. Someone requested it, and this seemed like the best place to put them.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Everything in this repository, unless otherwise stated, is being released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/Nautilus-Institute/quals-2023/main/LICENSE.md&#34;&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;_images&lt;/code&gt; folder is &lt;em&gt;probably&lt;/em&gt; all licensable under Creative Commons &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;BY-SA 4.0&lt;/a&gt;. But, I (fuzyll) am not 100% certain of the provenance of every image. Most were AI-generated, but a few were not. So, user discretion is advised.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Questions, comments, and/or concerns can be sent to &lt;a href=&#34;https://github.com/fuzyll&#34;&gt;@fuzyll&lt;/a&gt;, who is happy to direct things to the appropriate party from there.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>S3cur3Th1sSh1t/Ruy-Lopez</title>
    <updated>2023-06-01T01:33:29Z</updated>
    <id>tag:github.com,2023-06-01:/S3cur3Th1sSh1t/Ruy-Lopez</id>
    <link href="https://github.com/S3cur3Th1sSh1t/Ruy-Lopez" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruy-Lopez&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/S3cur3Th1sSh1t/Ruy-Lopez/raw/main/images/Ruy_Lopez_Opening.jpg?raw=true&#34; alt=&#34;Ruy Lopez Opening&#34; width=&#34;400&#34; height=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Endpoint Detection and Response systems (EDRs) are like the white player in a Chess game:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;They do the first move with hooks loaded directly via the kernel&lt;/li&gt; &#xA; &lt;li&gt;The EDR DLL is typically loaded directly after &lt;code&gt;ntdll.dll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But what if we can prevent their DLL from being loaded at all? Do we get the white player and can do the first moves (for the new process at least)?&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the Proof-of-Concept(PoC) for a new approach to completely prevent DLLs from being loaded into a newly spawned process. The initial use-case idea was to block AV/EDR vendor DLLs from being loaded, so that userland hooking based detections are bypassed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt; &lt;ins&gt;The simplified workflow of the PoC looks as follows:&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/S3cur3Th1sSh1t/Ruy-Lopez/raw/main/images/Idea.png&#34; alt=&#34;Workflow&#34; width=&#34;700&#34; height=&#34;450&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The SubFolder &lt;code&gt;HookForward&lt;/code&gt; contains the actual PIC-Code which can be used as EntryPoint for a hooked &lt;code&gt;NtCreateSection&lt;/code&gt; function. &lt;code&gt;Blockdll.nim&lt;/code&gt; on the other hand side spawns a new Powershell process in suspended mode, injects the shellcode into that process and remotely hooks &lt;code&gt;NtCreateSecion&lt;/code&gt; to &lt;code&gt;JMP&lt;/code&gt; to our shellcode. As this is a PoC, &lt;em&gt;only&lt;/em&gt; &lt;code&gt;amsi.dll&lt;/code&gt; is being blocked in the new in this case Powershell process, which effectively leads to an AMSI bypass. But the PoC was also tested against multiple EDR vendors and their DLLs without throwing an alert or without being blocked &lt;strong&gt;before&lt;/strong&gt; releasing it. I expect detections to come up after releasing it here.&lt;/p&gt; &#xA;&lt;h2&gt;Challenges / Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When customizing this PoC, you can only use &lt;code&gt;ntdll.dll&lt;/code&gt; functions in the PIC-Code, as the process is not fully initialized yet when the hook occurs and therefore only &lt;code&gt;ntdll.dll&lt;/code&gt; is loaded. Other DLLs also cannot be loaded by the shellcode, because process initialization has to take place first.&lt;/li&gt; &#xA; &lt;li&gt;This PoC can only prevent DLLs from being loaded which are not injected but instead loaded normally. Some vendors inject specific or single DLLs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;On linux, the PIC-Code was found to be compiled correctly with &lt;code&gt;mingw-w64&lt;/code&gt; version &lt;code&gt;version 10-win32 20220324 (GCC)&lt;/code&gt;. With that version installed, the shellcode can be compiled with a simple &lt;code&gt;make&lt;/code&gt; and extracted from the &lt;code&gt;.text&lt;/code&gt; section via &lt;code&gt;bash extract.sh&lt;/code&gt;. Newer &lt;code&gt;mingw-w64&lt;/code&gt; versions, such as 12 did lead to crashes for me, which I&#39;m currently not planning to troubleshoot/fix.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to compile from Windows, you can use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;as -o directjump.o directjump_as.asm&#xA;gcc ApiResolve.c -Wall -m64 -ffunction-sections -fno-asynchronous-unwind-tables -nostdlib -fno-ident -O2 -c -o ApiResolve.o -Wl,--no-seh&#xA;gcc HookShellcode.c -Wall -m64 -masm=intel -ffunction-sections -fno-asynchronous-unwind-tables -nostdlib -fno-ident -O2 -c -o HookShellcode.o -Wl,--no-seh&#xA;ld -s directjump.o ApiResolve.o HookShellcode.o -o HookShellcode.exe&#xA;gcc extract.c -o extract.exe&#xA;extract.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to have &lt;a href=&#34;https://nim-lang.org/&#34;&gt;Nim&lt;/a&gt; installed for this PoC.&lt;/p&gt; &#xA;&lt;p&gt;&lt;ins&gt;After installation, the dependencies can be installed via the following oneliner:&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nim&#34;&gt;nimble install winim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;ins&gt;The PoC can than be compiled with:&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nim&#34;&gt;nim c -d:release -d=mingw -d:noRes BlockDll.nim # Cross compile&#xA;nim c -d:release BlockDll.nim # Windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/S3cur3Th1sSh1t/Ruy-Lopez/raw/main/images/PoC.png&#34; alt=&#34;PoC&#34; width=&#34;750&#34; height=&#34;375&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;OPSec improvement ideas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Userland-hook evasion for injection from the host process&lt;/li&gt; &#xA; &lt;li&gt;RX Shellcode (needs some PIC-code changes)&lt;/li&gt; &#xA; &lt;li&gt;Use hashing instead of plain APIs to block&lt;/li&gt; &#xA; &lt;li&gt;Use hardware breakpoints instead of hooking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CREDITS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/_EthicalChaos_&#34;&gt;Ceri Coburn&lt;/a&gt; - Help all over the PoC&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/eversinc33&#34;&gt;Sven Rath&lt;/a&gt; - General idea, review and initial PoC inspiration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/frodosobon&#34;&gt;Alejandro Pinna&lt;/a&gt; - Initial idea came after reading &lt;a href=&#34;https://waawaa.github.io/es/amsi_bypass-hooking-NtCreateSection/&#34;&gt;his blogpost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/MrUn1k0d3r&#34;&gt;Charles Hamilton&lt;/a&gt; - QA help when writing PIC code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/NinjaParanoid&#34;&gt;Chetan Nayak&lt;/a&gt; - QA help when writing PIC code + the Chess idea &lt;a href=&#34;https://bruteratel.com/release/2022/08/18/Release-Scandinavian-Defense/&#34;&gt;^1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jqlang/jq</title>
    <updated>2023-06-01T01:33:29Z</updated>
    <id>tag:github.com,2023-06-01:/jqlang/jq</id>
    <link href="https://github.com/jqlang/jq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line JSON processor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jq&lt;/h1&gt; &#xA;&lt;p&gt;jq is a lightweight and flexible command-line JSON processor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/stedolan/jq?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/stedolan/jq/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;, Unix: &lt;a href=&#34;https://travis-ci.org/stedolan/jq&#34;&gt;&lt;img src=&#34;https://travis-ci.org/stedolan/jq.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;, Windows: &lt;a href=&#34;https://ci.appveyor.com/project/stedolan/jq&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/mi816811c9e9mx29?svg=true&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn to use jq, read the documentation at &lt;a href=&#34;https://jqlang.github.io/jq&#34;&gt;https://jqlang.github.io/jq&lt;/a&gt;. This documentation is generated from the docs/ folder of this repository. You can also try it online at &lt;a href=&#34;https://jqplay.org&#34;&gt;jqplay.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to hack on jq, feel free, but be warned that its internals are not well-documented at the moment. Bring a hard hat and a shovel. Also, read the wiki: &lt;a href=&#34;https://github.com/jqlang/jq/wiki&#34;&gt;https://github.com/jqlang/jq/wiki&lt;/a&gt;, where you will find cookbooks, discussion of advanced topics, internals, release engineering, and more.&lt;/p&gt; &#xA;&lt;p&gt;Source tarball and built executable releases can be found on the homepage and on the github release page, &lt;a href=&#34;https://github.com/jqlang/jq/releases&#34;&gt;https://github.com/jqlang/jq/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re building directly from the latest git, you&#39;ll need flex, bison (3.0 or newer), libtool, make, automake, and autoconf installed. To get regexp support you&#39;ll also need to install Oniguruma or clone it as a git submodule as per the instructions below. (note that jq&#39;s tests require regexp support to pass). To build, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init # if building from git to get oniguruma&#xA;autoreconf -fi              # if building from git&#xA;./configure --with-oniguruma=builtin&#xA;make -j8&#xA;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build without bison or flex, add &lt;code&gt;--disable-maintainer-mode&lt;/code&gt; to the ./configure invocation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --with-oniguruma=builtin --disable-maintainer-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Developers must not use &lt;code&gt;--disable-maintainer-mode&lt;/code&gt;, not when making changes to the jq parser and/or lexer.)&lt;/p&gt; &#xA;&lt;p&gt;To build a statically linked version of jq, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make LDFLAGS=-all-static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After make finishes, you&#39;ll be able to use &lt;code&gt;./jq&lt;/code&gt;. You can also install it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using the latest git version but instead building a released tarball (available on the website), then you won&#39;t need to run &lt;code&gt;autoreconf&lt;/code&gt; (and shouldn&#39;t), and you won&#39;t need flex or bison.&lt;/p&gt; &#xA;&lt;p&gt;To cross-compile for OS X and Windows, see docs/Rakefile&#39;s build task and scripts/crosscompile. You&#39;ll need a cross-compilation environment, such as Mingw for cross-compiling for Windows.&lt;/p&gt; &#xA;&lt;p&gt;Cross-compilation requires a clean workspace, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# git clean ...&#xA;autoreconf -i&#xA;./configure&#xA;make distclean&#xA;scripts/crosscompile &amp;lt;name-of-build&amp;gt; &amp;lt;configure-options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--host=&lt;/code&gt; and &lt;code&gt;--target=&lt;/code&gt; ./configure options to select a cross-compilation environment. See also &lt;a href=&#34;https://github.com/jqlang/jq/wiki/Cross-compilation&#34;&gt;&#34;Cross compilation&#34;&lt;/a&gt; on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;Send questions to &lt;a href=&#34;https://stackoverflow.com/questions/tagged/jq&#34;&gt;https://stackoverflow.com/questions/tagged/jq&lt;/a&gt; or to the #jq channel (&lt;a href=&#34;https://web.libera.chat/#jq&#34;&gt;https://web.libera.chat/#jq&lt;/a&gt;) on Libera.Chat (&lt;a href=&#34;https://libera.chat/&#34;&gt;https://libera.chat/&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>