<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:30:37Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yeyupiaoling/Whisper-Finetune</title>
    <updated>2023-08-04T01:30:37Z</updated>
    <id>tag:github.com,2023-08-04:/yeyupiaoling/Whisper-Finetune</id>
    <link href="https://github.com/yeyupiaoling/Whisper-Finetune" rel="alternate"></link>
    <summary type="html">&lt;p&gt;微调Whisper语音识别模型，支持无时间戳数据训练，有时间戳数据训练、无语音数据训练。加速推理，支持Web部署、Windows桌面部署和Android部署&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;微调Whisper语音识别模型和加速推理&lt;/h1&gt; &#xA;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/README_en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.8+-orange.svg?sanitize=true&#34; alt=&#34;python version&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/yeyupiaoling/Whisper-Finetune&#34; alt=&#34;GitHub forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/yeyupiaoling/Whisper-Finetune&#34; alt=&#34;GitHub Repo stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/yeyupiaoling/Whisper-Finetune&#34; alt=&#34;GitHub&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/%E6%94%AF%E6%8C%81%E7%B3%BB%E7%BB%9F-Win/Linux/MAC-9cf&#34; alt=&#34;支持系统&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI在开源了号称其英文语音辨识能力已达到人类水准的Whisper项目，且它亦支持其它98种语言的自动语音辨识。Whisper所提供的自动语音识与翻译任务，它们能将各种语言的语音变成文本，也能将这些文本翻译成英文。本项目主要的目的是为了对Whisper模型使用Lora进行微调，&lt;strong&gt;支持无时间戳数据训练，有时间戳数据训练、无语音数据训练&lt;/strong&gt;。目前开源了好几个模型，具体可以在&lt;a href=&#34;https://huggingface.co/openai&#34;&gt;openai&lt;/a&gt;查看，下面列出了常用的几个模型。另外项目最后还支持CTranslate2加速推理和GGML加速推理，提示一下，加速推理支持直接使用Whisper原模型转换，并不一定需要微调。支持Windows桌面应用，Android应用和服务器部署。&lt;/p&gt; &#xA;&lt;h3&gt;请先点&lt;code&gt;star&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;支持模型&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openai/whisper-tiny&lt;/li&gt; &#xA; &lt;li&gt;openai/whisper-base&lt;/li&gt; &#xA; &lt;li&gt;openai/whisper-small&lt;/li&gt; &#xA; &lt;li&gt;openai/whisper-medium&lt;/li&gt; &#xA; &lt;li&gt;openai/whisper-large&lt;/li&gt; &#xA; &lt;li&gt;openai/whisper-large-v2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;欢迎大家扫码入QQ群讨论&lt;/strong&gt;，或者直接搜索QQ群号&lt;code&gt;758170167&lt;/code&gt;，问题答案为博主Github的ID&lt;code&gt;yeyupiaoling&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/qq.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用环境：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anaconda 3&lt;/li&gt; &#xA; &lt;li&gt;Python 3.8&lt;/li&gt; &#xA; &lt;li&gt;Pytorch 1.13.1&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 18.04&lt;/li&gt; &#xA; &lt;li&gt;GPU A100-PCIE-40GB*1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;视频讲解：&lt;a href=&#34;https://www.bilibili.com/video/BV1S8411o7rm/&#34;&gt;哔哩哔哩&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;演示地址：&lt;a href=&#34;http://whisper.yeyupiaoling.cn:8081/&#34;&gt;Web部署&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E9%A1%B9%E7%9B%AE%E4%B8%BB%E8%A6%81%E7%A8%8B%E5%BA%8F%E4%BB%8B%E7%BB%8D&#34;&gt;项目主要程序介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95%E8%A1%A8&#34;&gt;模型测试表&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83&#34;&gt;安装环境&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE&#34;&gt;准备数据&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%BE%AE%E8%B0%83%E6%A8%A1%E5%9E%8B&#34;&gt;微调模型&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%8D%95%E5%8D%A1%E8%AE%AD%E7%BB%83&#34;&gt;单卡训练&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%A4%9A%E5%8D%A1%E8%AE%AD%E7%BB%83&#34;&gt;多卡训练&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%90%88%E5%B9%B6%E6%A8%A1%E5%9E%8B&#34;&gt;合并模型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E8%AF%84%E4%BC%B0%E6%A8%A1%E5%9E%8B&#34;&gt;评估模型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E9%A2%84%E6%B5%8B&#34;&gt;预测&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E5%8A%A0%E9%80%9F%E9%A2%84%E6%B5%8B&#34;&gt;加速预测&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#GUI%E7%95%8C%E9%9D%A2%E9%A2%84%E6%B5%8B&#34;&gt;GUI界面预测&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#Web%E9%83%A8%E7%BD%B2&#34;&gt;Web部署&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3&#34;&gt;接口文档&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#Android%E9%83%A8%E7%BD%B2&#34;&gt;Android部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#Windows%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8&#34;&gt;Windows桌面应用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/#%E6%89%93%E8%B5%8F%E4%BD%9C%E8%80%85&#34;&gt;打赏作者&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;项目主要程序介绍&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目主要程序介绍&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;aishell.py&lt;/code&gt;：制作AIShell训练数据。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;finetune.py&lt;/code&gt;：微调模型。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge_lora.py&lt;/code&gt;：合并Whisper和Lora的模型。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evaluation.py&lt;/code&gt;：评估使用微调后的模型或者Whisper原模型。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;infer_tfs.py&lt;/code&gt;：使用transformers直接调用微调后的模型或者Whisper原模型预测，只适合推理短音频。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;infer_ct2.py&lt;/code&gt;：使用转换为CTranslate2的模型预测，主要参考这个程序用法。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;infer_gui.py&lt;/code&gt;：有GUI界面操作，使用转换为CTranslate2的模型预测。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;infer_server.py&lt;/code&gt;：使用转换为CTranslate2的模型部署到服务器端，提供给客户端调用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;convert-ggml.py&lt;/code&gt;：转换模型为GGML格式模型，给Android应用或者Windows应用使用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AndroidDemo&lt;/code&gt;：该目录存放的是部署模型到Android的源码。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WhisperDesktop&lt;/code&gt;：该目录存放的是Windows桌面应用的程序。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a name=&#34;模型测试表&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;模型测试表&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;原始模型字错率测试表。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;使用模型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;指定语言&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;aishell_test&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;test_net&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;test_meeting&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;下载地址&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CTranslate2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GGML&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-tiny&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.31898&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.40482&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.75332&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1q8xHr71XPe1dnRHv2IzldQ?pwd=wjrf&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Rg8KM1gDKLw8kObZEJQG1A?pwd=hnhe&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AjkdrF2YC5oP_CiGtAtZKg?pwd=4w9k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.22196&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.30404&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50378&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1q8xHr71XPe1dnRHv2IzldQ?pwd=wjrf&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Rg8KM1gDKLw8kObZEJQG1A?pwd=hnhe&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AjkdrF2YC5oP_CiGtAtZKg?pwd=4w9k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-small&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.13897&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.18417&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.31154&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1q8xHr71XPe1dnRHv2IzldQ?pwd=wjrf&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Rg8KM1gDKLw8kObZEJQG1A?pwd=hnhe&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AjkdrF2YC5oP_CiGtAtZKg?pwd=4w9k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-medium&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.09538&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.13591&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.26669&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1q8xHr71XPe1dnRHv2IzldQ?pwd=wjrf&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Rg8KM1gDKLw8kObZEJQG1A?pwd=hnhe&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AjkdrF2YC5oP_CiGtAtZKg?pwd=4w9k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-large&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.08969&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.12933&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.23439&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1q8xHr71XPe1dnRHv2IzldQ?pwd=wjrf&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Rg8KM1gDKLw8kObZEJQG1A?pwd=hnhe&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AjkdrF2YC5oP_CiGtAtZKg?pwd=4w9k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-large-v2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.08817&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.12332&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.26547&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1q8xHr71XPe1dnRHv2IzldQ?pwd=wjrf&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Rg8KM1gDKLw8kObZEJQG1A?pwd=hnhe&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AjkdrF2YC5oP_CiGtAtZKg?pwd=4w9k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;微调数据集后字错率测试表。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;使用模型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;指定语言&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;数据集&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;aishell_test&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;test_net&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;test_meeting&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;下载地址&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CTranslate2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GGML&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-tiny&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://openslr.magicdatatech.com/resources/33/&#34;&gt;AIShell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.13043&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.4463&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.57728&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1hIximy9ddN3cMHN4_VdhnQ?pwd=nfc2&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1H-OBD9L0hYV-M_WoPEbiJA?pwd=8hbb&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1HV6q0JvCRwDSYtMIzD33aw?pwd=h0bn&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://openslr.magicdatatech.com/resources/33/&#34;&gt;AIShell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.08999&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.33089&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.40713&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1hIximy9ddN3cMHN4_VdhnQ?pwd=nfc2&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1H-OBD9L0hYV-M_WoPEbiJA?pwd=8hbb&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1HV6q0JvCRwDSYtMIzD33aw?pwd=h0bn&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-small&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://openslr.magicdatatech.com/resources/33/&#34;&gt;AIShell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.05452&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.19831&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.24229&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1hIximy9ddN3cMHN4_VdhnQ?pwd=nfc2&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1H-OBD9L0hYV-M_WoPEbiJA?pwd=8hbb&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1HV6q0JvCRwDSYtMIzD33aw?pwd=h0bn&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-medium&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://openslr.magicdatatech.com/resources/33/&#34;&gt;AIShell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.03681&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.13073&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.16939&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1hIximy9ddN3cMHN4_VdhnQ?pwd=nfc2&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1H-OBD9L0hYV-M_WoPEbiJA?pwd=8hbb&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1HV6q0JvCRwDSYtMIzD33aw?pwd=h0bn&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-large-v2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://openslr.magicdatatech.com/resources/33/&#34;&gt;AIShell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.03139&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.12201&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.15776&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1hIximy9ddN3cMHN4_VdhnQ?pwd=nfc2&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1H-OBD9L0hYV-M_WoPEbiJA?pwd=8hbb&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1HV6q0JvCRwDSYtMIzD33aw?pwd=h0bn&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-tiny&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/tools/create_wenetspeech_data.py&#34;&gt;WenetSpeech&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.21009&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.29352&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.41506&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/18l6K59nP0j3XXmEQZ_Up_g?pwd=x7ay&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1X37l5pvbpGmRhDkRkgYCQw?pwd=vm4k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1lTthRHJxeJCHrMqC0gN2yQ?pwd=48of&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-large-v2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/tools/create_wenetspeech_data.py&#34;&gt;WenetSpeech&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.05372&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.10087&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.19834&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/18l6K59nP0j3XXmEQZ_Up_g?pwd=x7ay&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1X37l5pvbpGmRhDkRkgYCQw?pwd=vm4k&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1lTthRHJxeJCHrMqC0gN2yQ?pwd=48of&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;未加速和加速后的推理速度测试表，使用GPU为GTX3090（24G）。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;使用模型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;原生模型实时率(float16)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;转换CTranslate2加速后实时率(float16)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;转换CTranslate2加速后实时率(int8_float16)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-tiny&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.06&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.06&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-small&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.08&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-medium&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whisper-large-v2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;经过处理的数据列表，添加标点符号的模型为&lt;a href=&#34;https://github.com/yeyupiaoling/PunctuationModel&#34;&gt;PunctuationModel&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;数据列表处理方式&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AiShell&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;WenetSpeech&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;添加标点符号&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Qzalcy0R2SyrOBSxtezN0A?pwd=v45t&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1XrnD_YLYWYUs65lq4StzTg?pwd=hv3i&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;添加标点符号和时间戳&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1zC3CTqPrNkhDIwAwqlZ6kw?pwd=xun4&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1JrlQ97fZfCD-JEbW7Td_2g?pwd=97ki&#34;&gt;点击下载&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;重要说明：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在评估的时候移除模型输出的标点符号，并把繁体中文转成简体中文。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aishell_test&lt;/code&gt;为AIShell的测试集，&lt;code&gt;test_net&lt;/code&gt;和&lt;code&gt;test_meeting&lt;/code&gt;为WenetSpeech的测试集。&lt;/li&gt; &#xA; &lt;li&gt;RTF= 所有音频总时间(单位秒) / ASR识别所有音频处理时间(单位秒)。&lt;/li&gt; &#xA; &lt;li&gt;测试速度的音频为&lt;code&gt;dataset/test.wav&lt;/code&gt;，时长为8秒。&lt;/li&gt; &#xA; &lt;li&gt;训练数据使用的是带标点符号的数据，字错率高一点。&lt;/li&gt; &#xA; &lt;li&gt;微调AiShell数据不带时间戳，微调WenetSpeech带时间戳。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a name=&#34;安装环境&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装环境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;首先安装的是Pytorch的GPU版本，以下介绍两种安装Pytorch的方式，只需要选择一种即可。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;以下是使用Anaconda安装Pytorch环境，如果已经安装过了，请跳过。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda install pytorch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1 pytorch-cuda=11.6 -c pytorch -c nvidia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;以下是使用Docker镜像，拉取一个Pytorch环境的镜像。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo docker pull pytorch/pytorch:1.13.1-cuda11.6-cudnn8-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后进入到镜像中，同时将当前路径挂载到容器的&lt;code&gt;/workspace&lt;/code&gt;目录下。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo nvidia-docker run --name pytorch -it -v $PWD:/workspace pytorch/pytorch:1.13.1-cuda11.6-cudnn8-devel /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装所需的依赖库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;准备数据&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;准备数据&lt;/h2&gt; &#xA;&lt;p&gt;训练的数据集如下，是一个jsonlines的数据列表，也就是每一行都是一个JSON数据，数据格式如下。本项目提供了一个制作AIShell数据集的程序&lt;code&gt;aishell.py&lt;/code&gt;，执行这个程序可以自动下载并生成如下列格式的训练集和测试集，&lt;strong&gt;注意：&lt;/strong&gt; 这个程序可以通过指定AIShell的压缩文件来跳过下载过程的，如果直接下载会非常慢，可以使用一些如迅雷等下载器下载该数据集，然后通过参数&lt;code&gt;--filepath&lt;/code&gt;指定下载的压缩文件路径，如&lt;code&gt;/home/test/data_aishell.tgz&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;小提示：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;如果不使用时间戳训练，可以不包含&lt;code&gt;sentences&lt;/code&gt;字段的数据。&lt;/li&gt; &#xA; &lt;li&gt;如果只有一种语言的数据，可以不包含&lt;code&gt;language&lt;/code&gt;字段数据。&lt;/li&gt; &#xA; &lt;li&gt;如果训练空语音数据，&lt;code&gt;sentences&lt;/code&gt;字段为&lt;code&gt;[]&lt;/code&gt;，&lt;code&gt;sentence&lt;/code&gt;字段为&lt;code&gt;&#34;&#34;&lt;/code&gt;，&lt;code&gt;language&lt;/code&gt;字段可以不存在。&lt;/li&gt; &#xA; &lt;li&gt;数据可以不包含标点符号，但微调的模型会损失添加符号能力。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;audio&#34;: {&#xA;      &#34;path&#34;: &#34;dataset/0.wav&#34;&#xA;   },&#xA;   &#34;sentence&#34;: &#34;近几年，不但我用书给女儿压岁，也劝说亲朋不要给女儿压岁钱，而改送压岁书。&#34;,&#xA;   &#34;language&#34;: &#34;Chinese&#34;,&#xA;   &#34;sentences&#34;: [&#xA;      {&#xA;         &#34;start&#34;: 0,&#xA;         &#34;end&#34;: 1.4,&#xA;         &#34;text&#34;: &#34;近几年，&#34;&#xA;      },&#xA;      {&#xA;         &#34;start&#34;: 1.42,&#xA;         &#34;end&#34;: 8.4,&#xA;         &#34;text&#34;: &#34;不但我用书给女儿压岁，也劝说亲朋不要给女儿压岁钱，而改送压岁书。&#34;&#xA;      }&#xA;   ],&#xA;   &#34;duration&#34;: 7.37&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;微调模型&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;微调模型&lt;/h2&gt; &#xA;&lt;p&gt;准备好数据之后，就可以开始微调模型了。训练最重要的两个参数分别是，&lt;code&gt;--base_model&lt;/code&gt;指定微调的Whisper模型，这个参数值需要在&lt;a href=&#34;https://huggingface.co/openai&#34;&gt;HuggingFace&lt;/a&gt;存在的，这个不需要提前下载，启动训练时可以自动下载，当然也可以提前下载，那么&lt;code&gt;--base_model&lt;/code&gt;指定就是路径，同时&lt;code&gt;--local_files_only&lt;/code&gt;设置为True。第二个&lt;code&gt;--output_path&lt;/code&gt;是是训练时保存的Lora检查点路径，因为我们使用Lora来微调模型。如果想存足够的话，最好将&lt;code&gt;--use_8bit&lt;/code&gt;设置为False，这样训练速度快很多。其他更多的参数请查看这个程序。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;单卡训练&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;单卡训练&lt;/h3&gt; &#xA;&lt;p&gt;单卡训练命令如下，Windows系统可以不添加&lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;参数。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CUDA_VISIBLE_DEVICES=0 python finetune.py --base_model=openai/whisper-tiny --output_dir=output/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;多卡训练&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;多卡训练&lt;/h3&gt; &#xA;&lt;p&gt;多卡训练有两种方法，分别是torchrun和accelerate，开发者可以根据自己的习惯使用对应的方式。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用torchrun启动多卡训练，命令如下，通过&lt;code&gt;--nproc_per_node&lt;/code&gt;指定使用的显卡数量。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;torchrun --nproc_per_node=2 finetune.py --base_model=openai/whisper-tiny --output_dir=output/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;使用accelerate启动多卡训练，如果是第一次使用accelerate，要配置训练参数，方式如下。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;首先配置训练参数，过程是让开发者回答几个问题，基本都是默认就可以，但有几个参数需要看实际情况设置。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;accelerate config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;大概过程就是这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--------------------------------------------------------------------In which compute environment are you running?&#xA;This machine&#xA;--------------------------------------------------------------------Which type of machine are you using?&#xA;multi-GPU&#xA;How many different machines will you use (use more than 1 for multi-node training)? [1]:&#xA;Do you wish to optimize your script with torch dynamo?[yes/NO]:&#xA;Do you want to use DeepSpeed? [yes/NO]:&#xA;Do you want to use FullyShardedDataParallel? [yes/NO]:&#xA;Do you want to use Megatron-LM ? [yes/NO]: &#xA;How many GPU(s) should be used for distributed training? [1]:2&#xA;What GPU(s) (by id) should be used for training on this machine as a comma-seperated list? [all]:&#xA;--------------------------------------------------------------------Do you wish to use FP16 or BF16 (mixed precision)?&#xA;fp16&#xA;accelerate configuration saved at /home/test/.cache/huggingface/accelerate/default_config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;配置完成之后，可以使用以下命令查看配置。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;accelerate env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;开始训练命令如下。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;accelerate launch finetune.py --base_model=openai/whisper-tiny --output_dir=output/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出日志如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{&#39;loss&#39;: 0.9098, &#39;learning_rate&#39;: 0.000999046843662503, &#39;epoch&#39;: 0.01}                                                     &#xA;{&#39;loss&#39;: 0.5898, &#39;learning_rate&#39;: 0.0009970611012927184, &#39;epoch&#39;: 0.01}                                                    &#xA;{&#39;loss&#39;: 0.5583, &#39;learning_rate&#39;: 0.0009950753589229333, &#39;epoch&#39;: 0.02}                                                  &#xA;{&#39;loss&#39;: 0.5469, &#39;learning_rate&#39;: 0.0009930896165531485, &#39;epoch&#39;: 0.02}                                          &#xA;{&#39;loss&#39;: 0.5959, &#39;learning_rate&#39;: 0.0009911038741833634, &#39;epoch&#39;: 0.03}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;合并模型&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;合并模型&lt;/h2&gt; &#xA;&lt;p&gt;微调完成之后会有两个模型，第一个是Whisper基础模型，第二个是Lora模型，需要把这两个模型合并之后才能之后的操作。这个程序只需要传递两个参数，&lt;code&gt;--lora_model&lt;/code&gt;指定的是训练结束后保存的Lora模型路径，其实就是检查点文件夹路径，第二个&lt;code&gt;--output_dir&lt;/code&gt;是合并后模型的保存目录。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python merge_lora.py --lora_model=output/whisper-tiny/checkpoint-best/ --output_dir=models/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;评估模型&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;评估模型&lt;/h2&gt; &#xA;&lt;p&gt;执行以下程序进行评估模型，最重要的两个参数分别是。第一个&lt;code&gt;--model_path&lt;/code&gt;指定的是合并后的模型路径，同时也支持直接使用Whisper原模型，例如直接指定&lt;code&gt;openai/whisper-large-v2&lt;/code&gt;，第二个是&lt;code&gt;--metric&lt;/code&gt;指定的是评估方法，例如有字错率&lt;code&gt;cer&lt;/code&gt;和词错率&lt;code&gt;wer&lt;/code&gt;。&lt;strong&gt;提示：&lt;/strong&gt; 没有微调的模型，可能输出带有标点符号，影响准确率。其他更多的参数请查看这个程序。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python evaluation.py --model_path=models/whisper-tiny-finetune --metric=cer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;预测&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;预测&lt;/h2&gt; &#xA;&lt;p&gt;执行以下程序进行语音识别，这个使用transformers直接调用微调后的模型或者Whisper原模型预测，只适合推理短音频，长语音还是参考&lt;code&gt;infer_ct2.py&lt;/code&gt;的使用方式。第一个&lt;code&gt;--audio_path&lt;/code&gt;参数指定的是要预测的音频路径。第二个&lt;code&gt;--model_path&lt;/code&gt;指定的是合并后的模型路径，同时也支持直接使用Whisper原模型，例如直接指定&lt;code&gt;openai/whisper-large-v2&lt;/code&gt;。其他更多的参数请查看这个程序。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python infer_tfs.py --audio_path=dataset/test.wav --model_path=models/whisper-tiny-finetune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;加速预测&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;加速预测&lt;/h2&gt; &#xA;&lt;p&gt;众所周知，直接使用Whisper模型推理是比较慢的，所以这里提供了一个加速的方式，主要是使用了CTranslate2进行加速，首先要转换模型，把合并后的模型转换为CTranslate2模型。如下命令，&lt;code&gt;--model&lt;/code&gt;参数指定的是合并后的模型路径，同时也支持直接使用Whisper原模型，例如直接指定&lt;code&gt;openai/whisper-large-v2&lt;/code&gt;。&lt;code&gt;--output_dir&lt;/code&gt;参数指定的是转换后的CTranslate2模型路径，&lt;code&gt;--quantization&lt;/code&gt;参数指定的是量化模型大小，不希望量化模型的可以直接去掉这个参数。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ct2-transformers-converter --model models/whisper-tiny-finetune --output_dir models/whisper-tiny-finetune-ct2 --copy_files tokenizer.json --quantization float16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;执行以下程序进行加速语音识别，&lt;code&gt;--audio_path&lt;/code&gt;参数指定的是要预测的音频路径。&lt;code&gt;--model_path&lt;/code&gt;指定的是转换后的CTranslate2模型。其他更多的参数请查看这个程序。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python infer_ct2.py --audio_path=dataset/test.wav --model_path=models/whisper-tiny-finetune-ct2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出结果如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-----------  Configuration Arguments -----------&#xA;audio_path: dataset/test.wav&#xA;model_path: models/whisper-tiny-finetune-ct2&#xA;language: zh&#xA;use_gpu: True&#xA;use_int8: False&#xA;beam_size: 10&#xA;num_workers: 1&#xA;vad_filter: False&#xA;local_files_only: True&#xA;------------------------------------------------&#xA;[0.0 - 8.0]：近几年,不但我用书给女儿压碎,也全说亲朋不要给女儿压碎钱,而改送压碎书。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;GUI界面预测&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GUI界面预测&lt;/h2&gt; &#xA;&lt;p&gt;这里同样是使用了CTranslate2进行加速，转换模型方式看上面文档。&lt;code&gt;--model_path&lt;/code&gt;指定的是转换后的CTranslate2模型。其他更多的参数请查看这个程序。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python infer_gui.py --model_path=models/whisper-tiny-finetune-ct2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动后界面如下：&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/gui.jpg&#34; alt=&#34;GUI界面&#34; width=&#34;600&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Web部署&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web部署&lt;/h2&gt; &#xA;&lt;p&gt;Web部署同样是使用了CTranslate2进行加速，转换模型方式看上面文档。&lt;code&gt;--host&lt;/code&gt;指定服务启动的地址，这里设置为&lt;code&gt;0.0.0.0&lt;/code&gt;，即任何地址都可以访问。&lt;code&gt;--port&lt;/code&gt;指定使用的端口号。&lt;code&gt;--model_path&lt;/code&gt;指定的是转换后的CTranslate2模型。&lt;code&gt;--num_workers&lt;/code&gt;指定是使用多少个线程并发推理，这在Web部署上很重要，当有多个并发访问是可以同时推理。其他更多的参数请查看这个程序。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python infer_server.py --host=0.0.0.0 --port=5000 --model_path=models/whisper-tiny-finetune-ct2 --num_workers=2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;接口文档&lt;/h3&gt; &#xA;&lt;p&gt;目前提供两个接口，普通的识别接口&lt;code&gt;/recognition&lt;/code&gt;和流式返回结果&lt;code&gt;/recognition_stream&lt;/code&gt;，注意这个流式是指流式返回识别结果，同样是上传完整的音频，然后流式返回识别结果，这种方式针对长语音识别体验非常好。他们的文档接口是完全一致的，接口参数如下。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;字段&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;是否必须&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;默认值&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;audio&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;File&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;要识别的音频文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;to_simple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是否繁体转简体&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;remove_pun&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;是否移除标点符号&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;task&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;String&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;transcribe&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;识别任务类型，支持transcribe和translate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;language&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;否&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;String&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;zh&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;设置语言，简写，如果为None则自动检测语言&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;返回结果：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;字段&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;results&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;list&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;分割的识别结果&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;+result&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;str&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;每片分隔的文本结果&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;+start&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;每片分隔的开始时间，单位秒&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;+end&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;每片分隔的结束时间，单位秒&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;code&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;错误码，0即为成功识别&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;示例如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;results&#34;: [&#xA;    {&#xA;      &#34;result&#34;: &#34;近几年,不但我用书给女儿压碎,也全说亲朋不要给女儿压碎钱,而改送压碎书。&#34;,&#xA;      &#34;start&#34;: 0,&#xA;      &#34;end&#34;: 8&#xA;    }&#xA;  ],&#xA;  &#34;code&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;为了方便理解，这里提供了调用Web接口的Python代码，下面的是&lt;code&gt;/recognition&lt;/code&gt;的调用方式。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;&#xA;response = requests.post(url=&#34;http://127.0.0.1:5000/recognition&#34;, &#xA;                         files=[(&#34;audio&#34;, (&#34;test.wav&#34;, open(&#34;dataset/test.wav&#34;, &#39;rb&#39;), &#39;audio/wav&#39;))],&#xA;                         json={&#34;to_simple&#34;: 1, &#34;remove_pun&#34;: 0, &#34;language&#34;: &#34;zh&#34;, &#34;task&#34;: &#34;transcribe&#34;}, timeout=20)&#xA;print(response.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面的是&lt;code&gt;/recognition_stream&lt;/code&gt;的调用方式。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;import requests&#xA;&#xA;response = requests.post(url=&#34;http://127.0.0.1:5000/recognition_stream&#34;,&#xA;                         files=[(&#34;audio&#34;, (&#34;test.wav&#34;, open(&#34;dataset/test_long.wav&#34;, &#39;rb&#39;), &#39;audio/wav&#39;))],&#xA;                         json={&#34;to_simple&#34;: 1, &#34;remove_pun&#34;: 0, &#34;language&#34;: &#34;zh&#34;, &#34;task&#34;: &#34;transcribe&#34;}, stream=True, timeout=20)&#xA;for chunk in response.iter_lines(decode_unicode=False, delimiter=b&#34;\0&#34;):&#xA;    if chunk:&#xA;        result = json.loads(chunk.decode())&#xA;        text = result[&#34;result&#34;]&#xA;        start = result[&#34;start&#34;]&#xA;        end = result[&#34;end&#34;]&#xA;        print(f&#34;[{start} - {end}]：{text}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;提供的测试页面如下：&lt;/p&gt; &#xA;&lt;p&gt;首页&lt;code&gt;http://127.0.0.1:5000/&lt;/code&gt; 的页面如下：&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/web.jpg&#34; alt=&#34;首页&#34; width=&#34;600&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;文档页面&lt;code&gt;http://127.0.0.1:5000/docs&lt;/code&gt; 的页面如下：&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/api.jpg&#34; alt=&#34;文档页面&#34; width=&#34;600&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Android部署&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Android部署&lt;/h2&gt; &#xA;&lt;p&gt;安装部署的源码在&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/AndroidDemo&#34;&gt;AndroidDemo&lt;/a&gt;目录下，具体文档可以到该目录下的&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/AndroidDemo/README.md&#34;&gt;README.md&lt;/a&gt;查看。 &lt;br&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/android2.jpg&#34; alt=&#34;Android效果图&#34; width=&#34;200&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/android1.jpg&#34; alt=&#34;Android效果图&#34; width=&#34;200&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/android3.jpg&#34; alt=&#34;Android效果图&#34; width=&#34;200&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/android4.jpg&#34; alt=&#34;Android效果图&#34; width=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Windows桌面应用&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows桌面应用&lt;/h2&gt; &#xA;&lt;p&gt;程序在&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/WhisperDesktop&#34;&gt;WhisperDesktop&lt;/a&gt;目录下，具体文档可以到该目录下的&lt;a href=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/WhisperDesktop/README.md&#34;&gt;README.md&lt;/a&gt;查看。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/yeyupiaoling/Whisper-Finetune/master/docs/images/desktop1.jpg&#34; alt=&#34;Windows桌面应用效果图&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a name=&#34;打赏作者&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;打赏作者&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;打赏一块钱支持一下作者&lt;/p&gt; &#xA; &lt;img src=&#34;https://yeyupiaoling.cn/reward.png&#34; alt=&#34;打赏作者&#34; width=&#34;400&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;参考资料&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/peft&#34;&gt;https://github.com/huggingface/peft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guillaumekln/faster-whisper&#34;&gt;https://github.com/guillaumekln/faster-whisper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;https://github.com/ggerganov/whisper.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Const-me/Whisper&#34;&gt;https://github.com/Const-me/Whisper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>nonstriater/Learn-Algorithms</title>
    <updated>2023-08-04T01:30:37Z</updated>
    <id>tag:github.com,2023-08-04:/nonstriater/Learn-Algorithms</id>
    <link href="https://github.com/nonstriater/Learn-Algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;算法学习笔记&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#The file is in Chinese&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;算法虐我千百遍，我待算法如初恋&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;这里的内容是我学习算法过程的一些记录，希望能一直坚持下去。&lt;/p&gt; &#xA;&lt;h2&gt;学习方法&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;把所有经典算法写一遍&lt;/li&gt; &#xA; &lt;li&gt;看算法有关源码&lt;/li&gt; &#xA; &lt;li&gt;加入算法学习社区，相互鼓励学习(加我vx:tiger-ran, 备注入群理由, 拉你入群)&lt;/li&gt; &#xA; &lt;li&gt;看经典书籍&lt;/li&gt; &#xA; &lt;li&gt;刷题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;基本数据结构和算法&lt;/h2&gt; &#xA;&lt;p&gt;这些算法全部自己敲一遍：&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/2%20List/README.md&#34;&gt;链表&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;链表&lt;/li&gt; &#xA; &lt;li&gt;双向链表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/2%20List/%E6%95%B0%E7%BB%84.md&#34;&gt;数组&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/9%20Algorithms%20Job%20Interview/5%20%E6%95%B0%E7%BB%84%E6%95%B0%E5%88%97%E9%97%AE%E9%A2%98.md&#34;&gt;数组数列问题&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;数组和链表结构是基础结构，散列表、栈、队列、堆、树、图等等各种数据结构都基于数组和链表结构实现。&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/2%20Queue/README.md&#34;&gt;队列&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;队列&lt;/li&gt; &#xA; &lt;li&gt;堆栈&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/3%20Hash%20Table/README.md&#34;&gt;哈希表 HashTable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;散列函数&lt;/li&gt; &#xA; &lt;li&gt;碰撞解决&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/1%20String/README.md&#34;&gt;字符串算法&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;子串查找 &lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/9%20Algorithms%20Job%20Interview/1%20%E5%AD%97%E7%AC%A6%E4%B8%B2.md&#34;&gt;字符串常见题目参考这里&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BF算法&lt;/li&gt; &#xA;   &lt;li&gt;KMP算法&lt;/li&gt; &#xA;   &lt;li&gt;BM算法&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;正则表达式&lt;/li&gt; &#xA; &lt;li&gt;数据压缩&lt;/li&gt; &#xA; &lt;li&gt;排序&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/README.md&#34;&gt;树&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;二叉树 &lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/6%20Sort/README.md&#34;&gt;快速排序&lt;/a&gt;就是个二叉树的前序遍历，归并排序就是个二叉树的后序遍历&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/2-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.md&#34;&gt;二叉查找树BST&lt;/a&gt; 有序的二叉树，中序遍历结果是递增的&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/3-%E5%B9%B3%E8%A1%A1%E6%A0%91AVL/README.md&#34;&gt;平衡二叉树 AVL树&lt;/a&gt; 绝对平衡二叉树；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/9-%E7%BA%A2%E9%BB%91%E6%A0%91%20R-B%20tree/%E7%BA%A2%E9%BB%91%E6%A0%91.md&#34;&gt;红黑树&lt;/a&gt; 弱平衡二叉树；使用广泛&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/7-B%E6%A0%91/B%E6%A0%91.md&#34;&gt;B树&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/7-B%E6%A0%91/B+%E6%A0%91.md&#34;&gt;B+树&lt;/a&gt; mysql 索引使用 B+树 的数据结构&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/4-%E5%AD%97%E5%85%B8%E6%A0%91Trie/README.md&#34;&gt;字典树trie&lt;/a&gt; 字典树也叫前缀树，单词查找树&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/8-%E5%A0%86/%E5%A0%86.md&#34;&gt;二叉堆&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/5-%E4%BC%B8%E5%B1%95%E6%A0%91/%E4%BC%B8%E5%B1%95%E6%A0%91.md&#34;&gt;伸展树&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/6-%E5%90%8E%E7%BC%80%E6%A0%91/%E5%90%8E%E7%BC%80%E6%A0%91.md&#34;&gt;后缀树&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;斐波那契堆(Fibonacci Heap)&lt;/li&gt; &#xA; &lt;li&gt;最优二叉树(赫夫曼树)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/5%20Graph/README.md&#34;&gt;图的算法&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图的存储结构和基本操作（建立，遍历，删除节点，添加节点）&lt;/li&gt; &#xA; &lt;li&gt;最小生成树&lt;/li&gt; &#xA; &lt;li&gt;拓扑排序&lt;/li&gt; &#xA; &lt;li&gt;关键路径&lt;/li&gt; &#xA; &lt;li&gt;最短路径: Floyd,Dijkstra,bellman-ford,spfa&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/6%20Sort/README.md&#34;&gt;排序算法&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;交换排序算法&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;冒泡排序&lt;/li&gt; &#xA; &lt;li&gt;插入排序&lt;/li&gt; &#xA; &lt;li&gt;选择排序&lt;/li&gt; &#xA; &lt;li&gt;希尔排序&lt;/li&gt; &#xA; &lt;li&gt;快排&lt;/li&gt; &#xA; &lt;li&gt;归并排序&lt;/li&gt; &#xA; &lt;li&gt;堆排序&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;线性排序算法&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;桶排序&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/7%20Search/README.md&#34;&gt;查找算法&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;哈希表： O(1) &lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/3%20Hash%20Table/README.md&#34;&gt;hashtable实现参考这里&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;有序表查找：二分查找&lt;/li&gt; &#xA; &lt;li&gt;顺序表查找：顺序查找, 复杂度O(N)&lt;/li&gt; &#xA; &lt;li&gt;分块查找： 块内无序，块之间有序；可以先二分查找定位到块，然后再到&lt;code&gt;块&lt;/code&gt;中顺序查找&lt;/li&gt; &#xA; &lt;li&gt;动态查找: 二叉排序树，AVL树，B- ，B+（这里之所以叫 &lt;code&gt;动态查找表&lt;/code&gt;，是因为表结构是查找的过程中动态生成的）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/README.md&#34;&gt;算法设计思想&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E9%80%92%E5%BD%92.md&#34;&gt;递归&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95.md&#34;&gt;分治算法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md&#34;&gt;动态规划&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E5%9B%9E%E6%BA%AF%E6%B3%95.md&#34;&gt;回溯法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E8%BF%AD%E4%BB%A3%E6%B3%95.md&#34;&gt;迭代法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E6%B3%95.md&#34;&gt;穷举搜索法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.md&#34;&gt;贪心算法&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/9%20Algorithms%20Job%20Interview/README.md&#34;&gt;面试算法题目&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;这是一个算法题目合集，题目是我从网络和书籍之中整理而来，部分题目已经做了思路整理。问题分类包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;字符串&lt;/li&gt; &#xA; &lt;li&gt;堆和栈&lt;/li&gt; &#xA; &lt;li&gt;链表&lt;/li&gt; &#xA; &lt;li&gt;数值问题&lt;/li&gt; &#xA; &lt;li&gt;数组和数列问题&lt;/li&gt; &#xA; &lt;li&gt;矩阵问题&lt;/li&gt; &#xA; &lt;li&gt;二叉树&lt;/li&gt; &#xA; &lt;li&gt;图&lt;/li&gt; &#xA; &lt;li&gt;海量数据处理&lt;/li&gt; &#xA; &lt;li&gt;智力思维训练&lt;/li&gt; &#xA; &lt;li&gt;系统设计&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;还有部分来自算法网站和书籍：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;九度OJ&lt;/li&gt; &#xA; &lt;li&gt;leetcode&lt;/li&gt; &#xA; &lt;li&gt;剑指offer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/91%20Algorithms%20In%20Big%20Data/README.md&#34;&gt;海量数据处理&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hash映射/分而治之&lt;/li&gt; &#xA; &lt;li&gt;Bitmap&lt;/li&gt; &#xA; &lt;li&gt;Bloom filter(布隆过滤器)&lt;/li&gt; &#xA; &lt;li&gt;Trie树&lt;/li&gt; &#xA; &lt;li&gt;数据库索引&lt;/li&gt; &#xA; &lt;li&gt;倒排索引(Inverted Index)&lt;/li&gt; &#xA; &lt;li&gt;双层桶划分&lt;/li&gt; &#xA; &lt;li&gt;外排序&lt;/li&gt; &#xA; &lt;li&gt;simhash算法&lt;/li&gt; &#xA; &lt;li&gt;分布处理之Mapreduce&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/93%20Algorithms%20In%20Open%20Source/README.md&#34;&gt;开源项目中的算法&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YYCache&lt;/li&gt; &#xA; &lt;li&gt;cocos2d-objc&lt;/li&gt; &#xA; &lt;li&gt;bitcoin&lt;/li&gt; &#xA; &lt;li&gt;geohash&lt;/li&gt; &#xA; &lt;li&gt;kafka&lt;/li&gt; &#xA; &lt;li&gt;nginx&lt;/li&gt; &#xA; &lt;li&gt;zookeeper&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;15个经典基础算法&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/1%20String/KMP.md&#34;&gt;KMP 字符串匹配算法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/3%20Hash%20Table/README.md&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/6%20Sort/README.md&#34;&gt;快速排序&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;快速选择SELECT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/4%20Tree/9-%E7%BA%A2%E9%BB%91%E6%A0%91%20R-B%20tree/%E7%BA%A2%E9%BB%91%E6%A0%91.md&#34;&gt;红黑树 （一种弱/自平衡的&lt;code&gt;二叉查找树&lt;/code&gt;）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/5%20Graph/DFS%20%E5%92%8C%20BFS.md&#34;&gt;BFS/DFS （广度/深度优先遍历）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/5%20Graph/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.md&#34;&gt;&lt;code&gt;A*&lt;/code&gt;寻路算法： 求解最短路径&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dijkstra：最短路径算法&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPFA(Shortest Path Faster Algorithm)&lt;/code&gt; 单元最短路径算法&lt;/li&gt; &#xA; &lt;li&gt;启发式搜索&lt;/li&gt; &#xA; &lt;li&gt;遗传算法 &lt;code&gt;GA&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nonstriater/Learn-Algorithms/master/8%20Algorithms%20Analysis/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md&#34;&gt;DP (动态规划 dynamic programming)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;图像特征提取之&lt;code&gt;SIFT&lt;/code&gt; 算法 , 广泛的应用于图像识别，图像检索，3D重建等CV的各种领域&lt;/li&gt; &#xA; &lt;li&gt;傅立叶变换&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;推荐阅读&lt;/h2&gt; &#xA;&lt;h3&gt;刷题必备&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;《剑指offer》&lt;/li&gt; &#xA; &lt;li&gt;《编程之美》&lt;/li&gt; &#xA; &lt;li&gt;《编程之法:面试和算法心得》 &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;《算法谜题》 都是思维题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;基础&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;《编程珠玑》Programming Pearls&lt;/li&gt; &#xA; &lt;li&gt;《编程珠玑(续)》&lt;/li&gt; &#xA; &lt;li&gt;《数据结构与算法分析》&lt;/li&gt; &#xA; &lt;li&gt;《Algorithms》 这本近千页的书只有6章,其中四章分别是排序，查找，图，字符串，足见介绍细致&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;算法设计&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;《算法设计与分析基础》&lt;/li&gt; &#xA; &lt;li&gt;《算法引论》 告诉你如何创造算法 断货&lt;/li&gt; &#xA; &lt;li&gt;《Algorithm Design Manual》算法设计手册 红皮书&lt;/li&gt; &#xA; &lt;li&gt;《算法导论》 是一本对算法介绍比较全面的经典书籍&lt;/li&gt; &#xA; &lt;li&gt;《Algorithms on Strings,Trees and Sequences》&lt;/li&gt; &#xA; &lt;li&gt;《Advanced Data Structures》 各种诡异高级的数据结构和算法 如元胞自动机、斐波纳契堆、线段树 600块&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;延伸阅读&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;《深入理解计算机系统》&lt;/li&gt; &#xA; &lt;li&gt;《TCP/IP详解三卷》&lt;/li&gt; &#xA; &lt;li&gt;《UNIX网络编程二卷》&lt;/li&gt; &#xA; &lt;li&gt;《UNIX环境高级编程：第2版》&lt;/li&gt; &#xA; &lt;li&gt;《The practice of programming》 Brian Kernighan和Rob Pike&lt;/li&gt; &#xA; &lt;li&gt;《writing efficient programs》 优化&lt;/li&gt; &#xA; &lt;li&gt;《The science of programming》 证明代码段的正确性 800块一本&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考链接和学习网站&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://blog.csdn.net/v_july_v&#34;&gt;July 博客&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;《数学建模十大经典算法》&lt;/li&gt; &#xA; &lt;li&gt;《数据挖掘领域十大经典算法》&lt;/li&gt; &#xA; &lt;li&gt;《十道海量数据处理面试题》&lt;/li&gt; &#xA; &lt;li&gt;《数字图像处理领域的二十四个经典算法》&lt;/li&gt; &#xA; &lt;li&gt;《精选微软等公司经典的算法面试100题》&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julycoding/The-Art-Of-Programming-By-July&#34;&gt;The-Art-Of-Programming-By-July&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/column/details/ms100.html&#34;&gt;微软面试100题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/v_JULY_v/article/details/6460494&#34;&gt;程序员编程艺术&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;基本算法演示&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sjjg.js.zwu.edu.cn/SFXX/sf1/sfys.html&#34;&gt;http://sjjg.js.zwu.edu.cn/SFXX/sf1/sfys.html&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.cs.usfca.edu/~galles/visualization/Algorithms.html&#34;&gt;http://www.cs.usfca.edu/~galles/visualization/Algorithms.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;编程网站&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://leetcode.com/&#34;&gt;leetcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codetop.cc/home&#34;&gt;codetop&lt;/a&gt; 企业高频面试题库，刷题必备&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://openjudge.cn/&#34;&gt;openjudge&lt;/a&gt; 开放在线程序评测平台，可以创建自己的OJ小组 &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ac.jobdu.com/index.php&#34;&gt;九度OJ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;这有个&lt;a href=&#34;http://www.java3z.com/cwbwebhome/article/article19/res041.html&#34;&gt;ACM训练方案&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;网课&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.coursera.org/learn/gaoji-shuju-jiegou/&#34;&gt;高级数据结构和算法&lt;/a&gt; 北大教授张铭老师在coursera上的课程。完成这门课之时，你将掌握多维数组、广义表、Trie树、AVL树、伸展树等高级数据结构，并结合内排序、外排序、检索、索引有关的算法，高效地解决现实生活中一些比较复杂的应用问题。当然coursera上也还有很多其它算法方面的视频课程。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://class.coursera.org/algorithms-001/lecture&#34;&gt;算法设计与分析 Design and Analysis of Algorithms&lt;/a&gt; 由北大教授Wanling Qu在coursera讲授的一门算法课程。首先介绍一些与算法有关的基础知识，然后阐述经典的算法设计思想和分析技术，主要涉及的算法设计技术是：分治策略、动态规划、贪心法、回溯与分支限界等。每个视频都配有相应的讲义（pdf文件）以便阅读和复习。&lt;/p&gt; &#xA;&lt;h3&gt;其它&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/24OI/OI-wiki/&#34;&gt;OI Wiki&lt;/a&gt; 主要内容是 OI/ACM-ICPC 编程竞赛 (competitive programming) 相关的知识整理, 包括基础知识、常见题型、解题思路以及常用工具等内容。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://labuladong.gitee.io/algo/&#34;&gt;labuladong 的算法小抄&lt;/a&gt; 作者整理了很多的解题套路框架，看完获益良多&lt;/p&gt; &#xA;&lt;h2&gt;联系&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://weibo.com/ranwj&#34;&gt;@移动开发小冉&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>