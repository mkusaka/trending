<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-01T01:33:52Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Z4ee/StarRail-ACE-B</title>
    <updated>2023-05-01T01:33:52Z</updated>
    <id>tag:github.com,2023-05-01:/Z4ee/StarRail-ACE-B</id>
    <link href="https://github.com/Z4ee/StarRail-ACE-B" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository provides code for bypassing the anti-cheat system in Honkai Star Rail game, allowing players to open Cheat Engine. For informational purposes only. Use at your own risk.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Honkai Star Rail | ACE (AntiCheatExpert) bypass&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides code for bypassing the anti-cheat system in Honkai Star Rail game, allowing players to open Cheat Engine. For informational purposes only. Use at your own risk.&lt;/p&gt; &#xA;&lt;h1&gt;Instruction&lt;/h1&gt; &#xA;&lt;p&gt;What you need to compile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;minhook&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After compilation, you will receive a dll that you need to inject into the game immediately after opening&lt;/p&gt; &#xA;&lt;p&gt;You can use Extreme Injector (auto inject) to inject the dll into the game at startup&lt;/p&gt; &#xA;&lt;p&gt;Now you can open the cheat engine&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/113752393/235124161-429d62ce-481f-46ae-a36a-63d51a05aae4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zlib-ng/zlib-ng</title>
    <updated>2023-05-01T01:33:52Z</updated>
    <id>tag:github.com,2023-05-01:/zlib-ng/zlib-ng</id>
    <link href="https://github.com/zlib-ng/zlib-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;zlib replacement with optimizations for &#34;next generation&#34; systems.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;zlib-ng&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;zlib data compression library for the next generation systems&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maintained by Hans Kristian Rosbach aka Dead2 (zlib-ng àt circlestorm dót org)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub Actions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zlib-ng/zlib-ng/actions&#34;&gt;&lt;img src=&#34;https://github.com/zlib-ng/zlib-ng/workflows/CI%20CMake/badge.svg?sanitize=true&#34; alt=&#34;Master Branch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zlib-ng/zlib-ng/actions&#34;&gt;&lt;img src=&#34;https://github.com/zlib-ng/zlib-ng/workflows/CI%20Configure/badge.svg?sanitize=true&#34; alt=&#34;Master Branch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zlib-ng/zlib-ng/actions&#34;&gt;&lt;img src=&#34;https://github.com/zlib-ng/zlib-ng/workflows/CI%20NMake/badge.svg?sanitize=true&#34; alt=&#34;Master Branch Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Buildkite&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://buildkite.com/circlestorm-productions/zlib-ng&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/7bb1ef84356d3baee26202706cc053ee1de871c0c712b65d26.svg?branch=develop&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CodeFactor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codefactor.io/repository/github/zlib-ng/zlib-ng&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/zlib-ng/zlib-ng/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OSS-Fuzz&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:zlib-ng&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/zlib-ng.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Codecov&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/github/zlib-ng/zlib-ng/&#34;&gt;&lt;img src=&#34;https://codecov.io/github/zlib-ng/zlib-ng/coverage.svg?branch=develop&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zlib compatible API with support for dual-linking&lt;/li&gt; &#xA; &lt;li&gt;Modernized native API based on zlib API for ease of porting&lt;/li&gt; &#xA; &lt;li&gt;Modern C11 syntax and a clean code layout&lt;/li&gt; &#xA; &lt;li&gt;Deflate medium and quick algorithms based on Intel’s zlib fork&lt;/li&gt; &#xA; &lt;li&gt;Support for CPU intrinsics when available &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adler32 implementation using SSSE3, AVX2, AVX512, AVX512-VNNI, Neon, VMX &amp;amp; VSX&lt;/li&gt; &#xA;   &lt;li&gt;CRC32-B implementation using PCLMULQDQ, VPCLMULQDQ, ACLE, &amp;amp; IBM Z&lt;/li&gt; &#xA;   &lt;li&gt;Hash table implementation using CRC32-C intrinsics on x86 and ARM&lt;/li&gt; &#xA;   &lt;li&gt;Slide hash implementations using SSE2, AVX2, Neon, VMX &amp;amp; VSX&lt;/li&gt; &#xA;   &lt;li&gt;Compare256 implementations using SSE2, AVX2, Neon, &amp;amp; POWER9&lt;/li&gt; &#xA;   &lt;li&gt;Inflate chunk copying using SSE2, SSSE3, AVX, Neon &amp;amp; VSX&lt;/li&gt; &#xA;   &lt;li&gt;Support for hardware-accelerated deflate using IBM Z DFLTCC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unaligned memory read/writes and large bit buffer improvements&lt;/li&gt; &#xA; &lt;li&gt;Includes improvements from Cloudflare and Intel forks&lt;/li&gt; &#xA; &lt;li&gt;Configure, CMake, and NMake build system support&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive set of CMake unit tests&lt;/li&gt; &#xA; &lt;li&gt;Code sanitizers, fuzzing, and coverage&lt;/li&gt; &#xA; &lt;li&gt;GitHub Actions continuous integration on Windows, macOS, and Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Emulated CI for ARM, AARCH64, PPC, PPC64, SPARC64, S390x using qemu&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;The motivation for this fork came after seeing several 3rd party contributions containing new optimizations not getting implemented into the official zlib repository.&lt;/p&gt; &#xA;&lt;p&gt;Mark Adler has been maintaining zlib for a very long time, and he has done a great job and hopefully he will continue for a long time yet. The idea of zlib-ng is not to replace zlib, but to co-exist as a drop-in replacement with a lower threshold for code change.&lt;/p&gt; &#xA;&lt;p&gt;zlib has a long history and is incredibly portable, even supporting lots of systems that predate the Internet. This is great, but it does complicate further development and maintainability. The zlib code has numerous workarounds for old compilers that do not understand ANSI-C or to accommodate systems with limitations such as operating in a 16-bit environment.&lt;/p&gt; &#xA;&lt;p&gt;Many of these workarounds are only maintenance burdens, some of them are pretty huge code-wise. For example, the [v]s[n]printf workaround code has a whopping 8 different implementations just to cater to various old compilers. With this many workarounds cluttered throughout the code, new programmers with an idea/interest for zlib will need to take some time to figure out why all of these seemingly strange things are used, and how to work within those confines.&lt;/p&gt; &#xA;&lt;p&gt;So I decided to make a fork, merge all the Intel optimizations, merge the Cloudflare optimizations that did not conflict, plus a couple of other smaller patches. Then I started cleaning out workarounds, various dead code, all contrib and example code as there is little point in having those in this fork for various reasons.&lt;/p&gt; &#xA;&lt;p&gt;A lot of improvements have gone into zlib-ng since its start, and numerous people and companies have contributed both small and big improvements, or valuable testing.&lt;/p&gt; &#xA;&lt;p&gt;Please read LICENSE.md, it is very simple and very liberal.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to build zlib-ng:&lt;/p&gt; &#xA;&lt;h3&gt;Cmake&lt;/h3&gt; &#xA;&lt;p&gt;To build zlib-ng using the cross-platform makefile generator cmake.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;cmake --build . --config Release&#xA;ctest --verbose -C Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the cmake configuration GUI tool ccmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ccmake .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;To build zlib-ng using the bash configure script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Options&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CMake&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;configure&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ZLIB_COMPAT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--zlib-compat&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compile with zlib compatible API&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ZLIB_ENABLE_TESTS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build test binaries&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_GZFILEOP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-gzfileops&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compile with support for gzFile related functions&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_OPTIM&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-optimizations&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with optimisations&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_NEW_STRATEGIES&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-new-strategies&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use new strategies&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_NATIVE_INSTRUCTIONS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--native&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compiles with full instruction set supported on this host (gcc/clang -march=native)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_SANITIZER&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with sanitizer (memory, address, undefined)&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_GTEST&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build gtest_zlib&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_FUZZERS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build test/fuzz&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_BENCHMARKS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build test/benchmarks&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_MAINTAINER_WARNINGS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with project maintainer warnings&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_CODE_COVERAGE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable code coverage reporting&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;WARNING: We do not recommend manually installing unless you really know what you are doing, because this can potentially override the system default zlib library, and any incompatibility or wrong configuration of zlib-ng can make the whole system unusable, requiring recovery or reinstall. If you still want a manual install, we recommend using the /opt/ path prefix.&lt;/p&gt; &#xA;&lt;p&gt;For Linux distros, an alternative way to use zlib-ng (if compiled in zlib-compat mode) instead of zlib, is through the use of the &lt;em&gt;LD_PRELOAD&lt;/em&gt; environment variable. If the program is dynamically linked with zlib, then zlib-ng will temporarily be used instead by the program, without risking system-wide instability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LD_PRELOAD=/opt/zlib-ng/libz.so.1.2.13.zlib-ng /usr/bin/program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cmake&lt;/h3&gt; &#xA;&lt;p&gt;To install zlib-ng system-wide using cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --build . --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;To install zlib-ng system-wide using the configure script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vcpkg&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can build and install zlib-ng using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh # &#34;./bootstrap-vcpkg.bat&#34; for powershell&#xA;./vcpkg integrate install&#xA;./vcpkg install zlib-ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The zlib-ng port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Zlib-ng is a aiming to be open to contributions, and we would be delighted to receive pull requests on github. Just remember that any code you submit must be your own and it must be zlib licensed. Help with testing and reviewing of pull requests etc is also very much appreciated.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing, please consider joining our IRC channel #zlib-ng on the Freenode IRC network.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Servebolt.com for sponsoring my maintainership of zlib-ng.&lt;/p&gt; &#xA;&lt;p&gt;Thanks go out to all the people and companies who have taken the time to contribute code reviews, testing and/or patches. Zlib-ng would not have been nearly as good without you.&lt;/p&gt; &#xA;&lt;p&gt;The deflate format used by zlib was defined by Phil Katz. The deflate and zlib specifications were written by L. Peter Deutsch.&lt;/p&gt; &#xA;&lt;p&gt;zlib was originally created by Jean-loup Gailly (compression) and Mark Adler (decompression).&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Build Options&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CMake&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;configure&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FORCE_SSE2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--force-sse2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Skip runtime check for SSE2 instructions (Always on for x86_64)&lt;/td&gt; &#xA;   &lt;td&gt;OFF (x86)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_AVX2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with AVX2 intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_AVX512&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with AVX512 intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_AVX512VNNI&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with AVX512VNNI intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_SSE2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with SSE2 intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_SSSE3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with SSSE3 intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_SSE42&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with SSE42 intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_PCLMULQDQ&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with PCLMULQDQ intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_VPCLMULQDQ&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-vpclmulqdq&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with VPCLMULQDQ intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_ACLE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-acle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with ACLE intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_NEON&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-neon&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with NEON intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_ALTIVEC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-altivec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with AltiVec (VMX) intrinsics&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_POWER8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-power8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with POWER8 optimisations&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_CRC32_VX&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-crc32-vx&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with vectorized CRC32 on IBM Z&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_DFLTCC_DEFLATE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--with-dfltcc-deflate&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with DFLTCC intrinsics for compression on IBM Z&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_DFLTCC_INFLATE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--with-dfltcc-inflate&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with DFLTCC intrinsics for decompression on IBM Z&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_UNALIGNED&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;--without-unaligned&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Allow optimizations that use unaligned reads if safe on current arch&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_INFLATE_STRICT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with strict inflate distance checking&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WITH_INFLATE_ALLOW_INVALID_DIST&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build with zero fill for inflate invalid distances&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;INSTALL_UTILS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Copy minigzip and minideflate during install&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ZLIBNG_ENABLE_TESTS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test zlib-ng specific API&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork of the popular minizip &lt;a href=&#34;https://github.com/zlib-ng/minizip-ng&#34;&gt;https://github.com/zlib-ng/minizip-ng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python tool to benchmark minigzip/minideflate &lt;a href=&#34;https://github.com/zlib-ng/deflatebench&#34;&gt;https://github.com/zlib-ng/deflatebench&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python tool to benchmark pigz &lt;a href=&#34;https://github.com/zlib-ng/pigzbench&#34;&gt;https://github.com/zlib-ng/pigzbench&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3rd party patches for zlib-ng compatibility &lt;a href=&#34;https://github.com/zlib-ng/patches&#34;&gt;https://github.com/zlib-ng/patches&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>