<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-04T01:30:53Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cnlohr/cnixxi</title>
    <updated>2023-05-04T01:30:53Z</updated>
    <id>tag:github.com,2023-05-04:/cnlohr/cnixxi</id>
    <link href="https://github.com/cnlohr/cnixxi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My experiment with nixie tubes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cnixxi&lt;/h1&gt; &#xA;&lt;p&gt;My experiment with nixie tubes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-4d3PgEXhdY&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/-4d3PgEXhdY/0.jpg&#34; alt=&#34;Powering Nixies off USB with a 10Â¢ Micro&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cnlohr/ch32v003fun</title>
    <updated>2023-05-04T01:30:53Z</updated>
    <id>tag:github.com,2023-05-04:/cnlohr/ch32v003fun</id>
    <link href="https://github.com/cnlohr/ch32v003fun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source software development stack for the CH32V003, a 10 cent 48 MHz RISC-V Microcontroller&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ch32v003fun&lt;/h1&gt; &#xA;&lt;p&gt;An open source development environment (tooling, headers, examples) for the &lt;a href=&#34;http://www.wch-ic.com/products/CH32V003.html&#34;&gt;CH32V003&lt;/a&gt; with gcc-riscv64 that can be used in Windows (Native), Linux and/or WSL. The CH32V003 is 10-cent part with a RISC-V EC core that runs at 48MHz, has 16kB of flash and 2kB of RAM and a bunch of peripherals. It also comes in SOP-8, QFN-20 and SOIC packages. You can get the datasheet &lt;a href=&#34;http://www.wch-ic.com/downloads/CH32V003DS0_PDF.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of this project is to develop the tooling and environment for efficient use of the CH32V003. Avoid complicated HALs, and unleash the hardware! The existing EVT is massive, and dev environment weighty. This project specifically avoids the HAL and makes it so you can just use the &lt;a href=&#34;http://www.wch-ic.com/downloads/CH32V003RM_PDF.html&#34;&gt;TRM&lt;/a&gt;. In contrast, blinky is only 500 bytes with ch32v003fun, boots faster, and significantly simpler overall.&lt;/p&gt; &#xA;&lt;p&gt;ch32v003fun contains:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Examples using ch32v003fun, but not as many as using the HAL.&lt;/li&gt; &#xA; &lt;li&gt;&#34;minichlink&#34; which uses the WCH CH-Link with libusb, for cross-platform use.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An STM32F042 Programmer, the NHC-Link042&lt;/li&gt; &#xA; &lt;li&gt;An ESP32S2 Programmer, the &lt;a href=&#34;https://github.com/cnlohr/esp32s2-cookbook/tree/master/ch32v003programmer&#34;&gt;esp32s2-funprog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The official WCH Link-E Programmer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;An extra copy of libgcc so you can use unusual risc-v build chains, located in the &lt;code&gt;misc/libgcc.a&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A folder named &#34;ch32v003fun&#34; containing a single self-contained source file and header file for compling apps for the ch32v003.&lt;/li&gt; &#xA; &lt;li&gt;On some systems ability to &#34;printf&#34; back through&lt;/li&gt; &#xA; &lt;li&gt;A demo bootloader.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In Progress:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Other programmer support (ESP32-S2 works, currently)&lt;/li&gt; &#xA; &lt;li&gt;OpenOCD-compatible build for &lt;code&gt;minichlink&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Full-chip-write for faster flash.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;NHC-Link042&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write more demos.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;A fast &#34;printf&#34; debug over the programming interface.&lt;/h3&gt; &#xA;&lt;p&gt;And by fast I mean very fast. Typically around 36kBytes/sec.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./minichlink -T | pv &amp;gt; /dev/null&#xA;Found ESP32S2 Programmer&#xA; 536KiB 0:00:15 [36.7KiB/s] [        &amp;lt;=&amp;gt;                     ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can just try out the &lt;code&gt;debugprintf&lt;/code&gt; project, or call &lt;code&gt;SetupDebugPrintf();&lt;/code&gt; and &lt;code&gt;printf()&lt;/code&gt; away.&lt;/p&gt; &#xA;&lt;h3&gt;todo;;&lt;/h3&gt; &#xA;&lt;h2&gt;System Prep&lt;/h2&gt; &#xA;&lt;p&gt;On WSL or Debian based OSes &lt;code&gt;apt-get install build-essential libnewlib-dev gcc-riscv64-unknown-elf libusb-1.0-0-dev libudev-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Arch/Manjaro, &lt;code&gt;sudo pacman -S base-devel libusb&lt;/code&gt;, then from AUR install &lt;code&gt;riscv64-unknown-elf-gcc, riscv64-unknown-elf-binutils, riscv64-unknown-elf-newlib&lt;/code&gt; (will compile for a long time).&lt;/p&gt; &#xA;&lt;p&gt;On Windows, download and install (to system) this copy of GCC10. &lt;a href=&#34;https://gnutoolchains.com/risc-v/&#34;&gt;https://gnutoolchains.com/risc-v/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On macOS install the RISC-V toolchain with homebrew following the instructions at &lt;a href=&#34;https://github.com/riscv-software-src/homebrew-riscv&#34;&gt;https://github.com/riscv-software-src/homebrew-riscv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the pre-compiled minichlink or go to minichlink dir and &lt;code&gt;make&lt;/code&gt; it.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Flashing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd examples/blink&#xA;make flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just use &lt;code&gt;make&lt;/code&gt; if you want to compile but not flash.&lt;/p&gt; &#xA;&lt;p&gt;In Linux this will &#34;just work&#34;(TM) using &lt;code&gt;minichlink&lt;/code&gt;. In Windows, if you want to use minichlink, you will need to use Zadig to install WinUSB to the WCH-Link interface 0. The generated .hex file is compatible with the official WCH flash tool.&lt;/p&gt; &#xA;&lt;h2&gt;ESP32S2 Programming&lt;/h2&gt; &#xA;&lt;h2&gt;WCH-Link (E)&lt;/h2&gt; &#xA;&lt;p&gt;It enumerates as 2 interfaces. 0. the programming interface. I can&#39;t get anything except the propreitary interface to work.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the built-in usb serial port. You can hook up UART D5=TX to RX and D6=RX to TX of the CH32V003 for printf/debugging, default speed is 115200. Both are optional, connect what you need.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to mess with the programming code in Windows, you will have to install WinUSB to the interface 0. Then you can uninstall it in Device Manager under USB Devices.&lt;/p&gt; &#xA;&lt;p&gt;On linux you find the serial port with &lt;code&gt;ls -l /dev/ttyUSB* /dev/ttyACM*&lt;/code&gt; and connect to it with &lt;code&gt;screen /dev/ttyACM0 115200&lt;/code&gt; Adding your user to these groups will remove the need to &lt;code&gt;sudo&lt;/code&gt; for access to the serial port: debian-based &lt;code&gt;sudo usermod -a -G dialout $USER&lt;/code&gt; arch-based &lt;code&gt;sudo usermod -a -G uucp $USER&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need to log out and in to see the change.&lt;/p&gt; &#xA;&lt;h2&gt;WCH-Link Hardware access in WSL&lt;/h2&gt; &#xA;&lt;p&gt;To use the WCH-Link in WSL, it is required to &#34;attach&#34; the USB hardware on the Windows side to WSL. This is achieved using a tool called usbipd.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On windows side, install the following MSI &lt;a href=&#34;https://github.com/dorssel/usbipd-win/releases&#34;&gt;https://github.com/dorssel/usbipd-win/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the WSL side client: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For Debian: &lt;code&gt;sudo apt-get install usbip hwdata usbutils&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For Arch-based: &lt;code&gt;sudo pacman -S usbip hwdata usbutils&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For Ubuntu (not tested):&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;        sudo apt install linux-tools-5.4.0-77-generic linux-tools-virtual hwdata usbutils&#xA;        sudo update-alternatives --install /usr/local/bin/usbip usbip `ls /usr/lib/linux-tools/*/usbip | tail -n1` 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Plug in the WCH-Link to USB&lt;/li&gt; &#xA; &lt;li&gt;Run Powershell as admin and use the &lt;code&gt;usbipd list&lt;/code&gt; command to list all connected devices&lt;/li&gt; &#xA; &lt;li&gt;Find the this device: &lt;code&gt;1a86:8010 WCH-Link (Interface 0)&lt;/code&gt; and note the busid it is attached to&lt;/li&gt; &#xA; &lt;li&gt;In powershell, use the command &lt;code&gt;usbipd wsl attach --busid=&amp;lt;BUSID&amp;gt;&lt;/code&gt; to attach the device at the busid from previous step&lt;/li&gt; &#xA; &lt;li&gt;You will hear the windows sound for the USB device being removed (and silently attached to WSL instead)&lt;/li&gt; &#xA; &lt;li&gt;In WSL, you will now be able to run &lt;code&gt;lsusb&lt;/code&gt; and see that the SCH-Link is attached&lt;/li&gt; &#xA; &lt;li&gt;For unknown reasons, you must run make under root access in order to connect to the programmer with minichlink. Recommend running &lt;code&gt;sudo make flash&lt;/code&gt; when building and programming projects using WSL Feel free to solve this issue and figure out a way to give the user hardware access to WCH-Link and modify these instructions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;minichlink&lt;/h2&gt; &#xA;&lt;p&gt;I wrote some libusb copies of some of the basic functionality from WCH-Link, so you can use the little programmer dongle they give you to program the ch32v003.&lt;/p&gt; &#xA;&lt;p&gt;Currently, it ignores all the respone codes, except when querying the chip. But it&#39;s rather surprising how featured I could get in about 5 hours.&lt;/p&gt; &#xA;&lt;p&gt;Anyone who wants to write a good/nice utility should probably look at the code in this folder.&lt;/p&gt; &#xA;&lt;h2&gt;VSCode + PlatformIO&lt;/h2&gt; &#xA;&lt;p&gt;This project can also be built, uploaded and debugged with VSCode and the PlatformIO extension. Simply clone and open this project in VSCode and have the PlatformIO extension installed.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Community-PIO-CH32V/platform-ch32v&#34;&gt;here&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Needed for programming/debugging: &lt;code&gt;SWIO&lt;/code&gt; is on &lt;code&gt;PD1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optional (not needed, can be configured as output if fuse set): &lt;code&gt;NRST&lt;/code&gt; is on &lt;code&gt;PD7&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;UART TX (optional) is on: &lt;code&gt;PD5&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;You can open a github ticket or join my Discord in the #ch32v003fun channel. &lt;a href=&#34;https://discord.gg/CCeyWyZ&#34;&gt;https://discord.gg/CCeyWyZ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Footnotes/links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openwch/ch32v003/main/RISC-V%20QingKeV2%20Microprocessor%20Debug%20Manual.pdf&#34;&gt;https://raw.githubusercontent.com/openwch/ch32v003/main/RISC-V%20QingKeV2%20Microprocessor%20Debug%20Manual.pdf&lt;/a&gt; Debugging Manual&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wch-ic.com/downloads/QingKeV2_Processor_Manual_PDF.html&#34;&gt;http://www.wch-ic.com/downloads/QingKeV2_Processor_Manual_PDF.html&lt;/a&gt; Processor Manual&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wch-ic.com/downloads/CH32V003RM_PDF.html&#34;&gt;http://www.wch-ic.com/downloads/CH32V003RM_PDF.html&lt;/a&gt; Technical Reference Manual&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wch-ic.com/downloads/CH32V003DS0_PDF.html&#34;&gt;http://www.wch-ic.com/downloads/CH32V003DS0_PDF.html&lt;/a&gt; Datasheet&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>teco-kit/open-earable</title>
    <updated>2023-05-04T01:30:53Z</updated>
    <id>tag:github.com,2023-05-04:/teco-kit/open-earable</id>
    <link href="https://github.com/teco-kit/open-earable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;open-earable&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teco-kit/open-earable/main/#C++-Libraries&#34;&gt;C++ Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teco-kit/open-earable/main/#Python-Libraries&#34;&gt;Python Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teco-kit/open-earable/main/#Repository-Content&#34;&gt;Repository Content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teco-kit/open-earable/main/#Arduino-Nano-33-BLE---NINA-01&#34;&gt;Arduino Nano 33 BLE - NINA 01&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;C++ Libraries&lt;/h2&gt; &#xA;&lt;p&gt;Recommended C++ Libraries are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;STM32duino LSM6DSR&lt;/li&gt; &#xA; &lt;li&gt;Arduino_LPS22HB&lt;/li&gt; &#xA; &lt;li&gt;nRF52_MBED_PWM&lt;/li&gt; &#xA; &lt;li&gt;ArduinoBLE&lt;/li&gt; &#xA; &lt;li&gt;(NimBLE-Arduino)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Python Libraries&lt;/h2&gt; &#xA;&lt;p&gt;Recommended Python Libraries are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;numpy&lt;/li&gt; &#xA; &lt;li&gt;matplotlib&lt;/li&gt; &#xA; &lt;li&gt;pyserial&lt;/li&gt; &#xA; &lt;li&gt;Flask&lt;/li&gt; &#xA; &lt;li&gt;bleak&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Repository Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EarableMEMS&lt;/li&gt; &#xA; &lt;li&gt;EarableMEMS_SerialSender&lt;/li&gt; &#xA; &lt;li&gt;Nina&lt;/li&gt; &#xA; &lt;li&gt;OpenEarable&lt;/li&gt; &#xA; &lt;li&gt;Ultra_Sonic_Scanner&lt;/li&gt; &#xA; &lt;li&gt;earable_web&lt;/li&gt; &#xA; &lt;li&gt;edge_ml_earable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;EarableMEMS&lt;/h3&gt; &#xA;&lt;p&gt;Contains the basic code operate the MEMS PDM mic and send data via serial connection to the Arduino Serial Plotter. (Disclaimer: Code not optimized. Serial data will be lost. Testing only)&lt;/p&gt; &#xA;&lt;h3&gt;EarableMEMS_SerialSender&lt;/h3&gt; &#xA;&lt;p&gt;Contains C/C++ code and Python script to record data of the MEMS PDM mic via a serial connection.&lt;/p&gt; &#xA;&lt;h3&gt;Nina&lt;/h3&gt; &#xA;&lt;p&gt;Contains variant folder for the Arduino Nano 33 BLE. (See section &lt;a href=&#34;https://raw.githubusercontent.com/teco-kit/open-earable/main/#Arduino-Nano-33-BLE---NINA-01&#34;&gt;Arduino Nano 33 BLE - NINA 01&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;OpenEarable&lt;/h3&gt; &#xA;&lt;p&gt;Contains demo code of for the internal sensors (IMU, BARO) and demo for the speaker.&lt;/p&gt; &#xA;&lt;h3&gt;Ultra_Sonic_Scanner&lt;/h3&gt; &#xA;&lt;p&gt;Contains C/C++ code and Python script to record data of the MEMS PDM mic ultrasonic ear image via BLE.&lt;/p&gt; &#xA;&lt;h3&gt;earable_web&lt;/h3&gt; &#xA;&lt;p&gt;Contains 2 web dashboards running with a python server. The earable_dashboard offers a graphical dashboard with plots. The earable_recorder offers a more simple, efficient UI with direct option to configure sensors. Both posses recorder features.&lt;/p&gt; &#xA;&lt;h3&gt;edge_ml_earable&lt;/h3&gt; &#xA;&lt;p&gt;Contains edge ml code for the earable.&lt;/p&gt; &#xA;&lt;h2&gt;Arduino Nano 33 BLE - NINA 01&lt;/h2&gt; &#xA;&lt;p&gt;The original Arduino Nano 33 BLE uses the NINA-B306-00B module from u-blox. The sister chip NINA-B306-01B is nearly identical but missing a quartz. Out of the box if the regular Arduino Nano 33 BLE bootloader is flashed, mbed os is checking for this specific quartz and since it is missing any sketch upload will brick.&lt;/p&gt; &#xA;&lt;p&gt;The issue will be fixed long term by the Arduino devs. At the moment there are 2 ways of fixing this issue. One option is to manually recompile the &lt;code&gt;libmbed.a&lt;/code&gt; by applying &lt;a href=&#34;https://github.com/arduino/ArduinoCore-mbed/pull/509&#34;&gt;Patch#509&lt;/a&gt;. However, this is a tedious process. It requires the cloning of the repositories &lt;a href=&#34;https://github.com/arduino/ArduinoCore-mbed&#34;&gt;ArduinoCore-mbed&lt;/a&gt;, &lt;a href=&#34;https://github.com/arduino/ArduinoCore-API&#34;&gt;ArduinoCore-API &lt;/a&gt;, and the installation of the &lt;a href=&#34;https://os.mbed.com/docs/mbed-os/v6.15/quick-start/build-with-mbed-cli.html&#34;&gt;Mbed CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is an easier quicker solution. In the &lt;code&gt;Nina&lt;/code&gt; folder is the entry of the &lt;code&gt;variants&lt;/code&gt; folder for the mbed nano boards of Arduino. By replacing the original folder of your Arduino installation with this one, you will be able to use the NINA-B306-01B without any issue.&lt;/p&gt; &#xA;&lt;p&gt;A detailed tutorial will be provided in the following. (Some steps may have been already performed and can be skipped)&lt;/p&gt; &#xA;&lt;h3&gt;Install Nano Boards via Board Manager&lt;/h3&gt; &#xA;&lt;p&gt;Firstly you need to install the Arduino Mbed OS Nano Boards with the Board Manager of Arduino. For this open Arduino and head to &lt;strong&gt;Tools &amp;gt; Board &amp;gt; Board Manager&lt;/strong&gt;. There search for &lt;strong&gt;Arduino Mbed OS Nano Boards&lt;/strong&gt; and install the Arduino Mbed OS Nano Boards by Arduino.&lt;/p&gt; &#xA;&lt;h3&gt;Flash Bootloader&lt;/h3&gt; &#xA;&lt;p&gt;In order to use the module at all you have to flash the Arduino Nano 33 BLE bootloader. For this use a DAP Debugger tool of your choice, and connect it to your board according to the schematics. Inside Arduino once you selected the correct board and programmer, you can simply flash the bootloader by pressing the &lt;strong&gt;Burn Bootloader&lt;/strong&gt; button. Now by connecting the board via USB it will show up as &#34;Arduino Nano 33 BLE&#34;. If you attempt to flash a program to it before doing the next step, it will brick.&lt;/p&gt; &#xA;&lt;h3&gt;Replace ARDUINO_NANO33BLE folder in variants&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;code&gt;Nina&lt;/code&gt; folder. Inside you will find the &lt;code&gt;ARDUINO_NANO33BLE&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;To find where Arduino installed the boards, open Arduino and head to &lt;strong&gt;File &amp;gt; Preferences&lt;/strong&gt;. There at the bottom there is a path to the &lt;code&gt;preferences.txt&lt;/code&gt;, you need to head into the directory of that file. Once you are inside this directory head to &lt;strong&gt;packages &amp;gt; arduino &amp;gt; hardware &amp;gt; mbed_nano &amp;gt; [VERSION] &amp;gt; variants&lt;/strong&gt;. (Whereas [VERSION] is the current version of the mbed nano boards firmware)&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;variants&lt;/code&gt; folder you will find the &lt;code&gt;ARDUINO_NANO33BLE&lt;/code&gt; folder. Replace it with the provided folder inside the downloaded &lt;code&gt;Nina&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Note that when you update the Arduino Mbed OS Nano Boards you need to repeat this procedure. This fix is compiled with the version 3.2.0 of the firmware.&lt;/p&gt; &#xA;&lt;h2&gt;Cite&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bib&#34;&gt;@inproceedings{10.1145/3544793.3563415,&#xA;&#x9;title        = {OpenEarable: Open Hardware Earable Sensing Platform},&#xA;&#x9;author       = {RÃ¶ddiger, Tobias and King, Tobias and Roodt, Dylan Ray and Clarke, Christopher and Beigl, Michael},&#xA;&#x9;year         = 2022,&#xA;&#x9;booktitle    = {Proceedings of the 1st International Workshop on Earable Computing},&#xA;&#x9;location     = {Cambridge, United Kingdom},&#xA;&#x9;publisher    = {Association for Computing Machinery},&#xA;&#x9;address      = {New York, NY, USA},&#xA;&#x9;series       = {EarCompâ22},&#xA;&#x9;pages        = {29â34},&#xA;&#x9;doi          = {10.1145/3544793.3563415},&#xA;&#x9;url          = {https://doi.org/10.1145/3544793.3563415},&#xA;&#x9;numpages     = 6,&#xA;&#x9;keywords     = {In-Ear Headphones, IMU, Monitoring}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>