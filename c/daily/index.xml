<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:32:28Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openvswitch/ovs</title>
    <updated>2022-10-02T01:32:28Z</updated>
    <id>tag:github.com,2022-10-02:/openvswitch/ovs</id>
    <link href="https://github.com/openvswitch/ovs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open vSwitch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. NOTE(stephenfin): If making changes to this file, ensure that the start-after/end-before lines found in &#39;Documentation/intro/what-is-ovs&#39; are kept up-to-date.&lt;/p&gt; &#xA;&lt;h1&gt;============ Open vSwitch&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/openvswitch/ovs/workflows/Build%20and%20Test/badge.svg&#34;&gt;https://github.com/openvswitch/ovs/workflows/Build%20and%20Test/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/openvswitch/ovs/actions&#34;&gt;https://github.com/openvswitch/ovs/actions&lt;/a&gt; .. image:: &lt;a href=&#34;https://travis-ci.org/openvswitch/ovs.png&#34;&gt;https://travis-ci.org/openvswitch/ovs.png&lt;/a&gt; :target: &lt;a href=&#34;https://travis-ci.org/openvswitch/ovs&#34;&gt;https://travis-ci.org/openvswitch/ovs&lt;/a&gt; .. image:: &lt;a href=&#34;https://ci.appveyor.com/api/projects/status/github/openvswitch/ovs?branch=master&amp;amp;svg=true&amp;amp;retina=true&#34;&gt;https://ci.appveyor.com/api/projects/status/github/openvswitch/ovs?branch=master&amp;amp;svg=true&amp;amp;retina=true&lt;/a&gt; :target: &lt;a href=&#34;https://ci.appveyor.com/project/blp/ovs/history&#34;&gt;https://ci.appveyor.com/project/blp/ovs/history&lt;/a&gt; .. image:: &lt;a href=&#34;https://api.cirrus-ci.com/github/openvswitch/ovs.svg&#34;&gt;https://api.cirrus-ci.com/github/openvswitch/ovs.svg&lt;/a&gt; :target: &lt;a href=&#34;https://cirrus-ci.com/github/openvswitch/ovs&#34;&gt;https://cirrus-ci.com/github/openvswitch/ovs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Open vSwitch?&lt;/h2&gt; &#xA;&lt;p&gt;Open vSwitch is a multilayer software switch licensed under the open source Apache 2 license. Our goal is to implement a production quality switch platform that supports standard management interfaces and opens the forwarding functions to programmatic extension and control.&lt;/p&gt; &#xA;&lt;p&gt;Open vSwitch is well suited to function as a virtual switch in VM environments. In addition to exposing standard control and visibility interfaces to the virtual networking layer, it was designed to support distribution across multiple physical servers. Open vSwitch supports multiple Linux-based virtualization technologies including KVM, and VirtualBox.&lt;/p&gt; &#xA;&lt;p&gt;The bulk of the code is written in platform-independent C and is easily ported to other environments. The current release of Open vSwitch supports the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard 802.1Q VLAN model with trunk and access ports&lt;/li&gt; &#xA; &lt;li&gt;NIC bonding with or without LACP on upstream switch&lt;/li&gt; &#xA; &lt;li&gt;NetFlow, sFlow(R), and mirroring for increased visibility&lt;/li&gt; &#xA; &lt;li&gt;QoS (Quality of Service) configuration, plus policing&lt;/li&gt; &#xA; &lt;li&gt;Geneve, GRE, VXLAN, STT, and LISP tunneling&lt;/li&gt; &#xA; &lt;li&gt;802.1ag connectivity fault management&lt;/li&gt; &#xA; &lt;li&gt;OpenFlow 1.0 plus numerous extensions&lt;/li&gt; &#xA; &lt;li&gt;Transactional configuration database with C and Python bindings&lt;/li&gt; &#xA; &lt;li&gt;High-performance forwarding using a Linux kernel module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open vSwitch can also operate entirely in userspace without assistance from a kernel module. This userspace implementation should be easier to port than the kernel-based switch. OVS in userspace can access Linux or DPDK devices. Note Open vSwitch with userspace datapath and non DPDK devices is considered experimental and comes with a cost in performance.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s here?&lt;/h2&gt; &#xA;&lt;p&gt;The main components of this distribution are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ovs-vswitchd, a daemon that implements the switch, along with a companion Linux kernel module for flow-based switching.&lt;/li&gt; &#xA; &lt;li&gt;ovsdb-server, a lightweight database server that ovs-vswitchd queries to obtain its configuration.&lt;/li&gt; &#xA; &lt;li&gt;ovs-dpctl, a tool for configuring the switch kernel module.&lt;/li&gt; &#xA; &lt;li&gt;Scripts and specs for building RPMs for Red Hat Enterprise Linux and deb packages for Ubuntu/Debian.&lt;/li&gt; &#xA; &lt;li&gt;ovs-vsctl, a utility for querying and updating the configuration of ovs-vswitchd.&lt;/li&gt; &#xA; &lt;li&gt;ovs-appctl, a utility that sends commands to running Open vSwitch daemons.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open vSwitch also provides some tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ovs-ofctl, a utility for querying and controlling OpenFlow switches and controllers.&lt;/li&gt; &#xA; &lt;li&gt;ovs-pki, a utility for creating and managing the public-key infrastructure for OpenFlow switches.&lt;/li&gt; &#xA; &lt;li&gt;ovs-testcontroller, a simple OpenFlow controller that may be useful for testing (though not for production).&lt;/li&gt; &#xA; &lt;li&gt;A patch to tcpdump that enables it to parse OpenFlow messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What other documentation is available?&lt;/h2&gt; &#xA;&lt;p&gt;.. TODO(stephenfin): Update with a link to the hosting site of the docs, once we know where that is&lt;/p&gt; &#xA;&lt;p&gt;To install Open vSwitch on a regular Linux or FreeBSD host, please read the &lt;code&gt;installation guide &amp;lt;Documentation/intro/install/general.rst&amp;gt;&lt;/code&gt;&lt;strong&gt;. For specifics around installation on a specific platform, refer to one of the &lt;code&gt;other installation guides &amp;lt;Documentation/intro/install/index.rst&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For answers to common questions, refer to the &lt;code&gt;FAQ &amp;lt;Documentation/faq&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;To learn about some advanced features of the Open vSwitch software switch, read the &lt;code&gt;tutorial &amp;lt;Documentation/tutorials/ovs-advanced.rst&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Each Open vSwitch userspace program is accompanied by a manpage. Many of the manpages are customized to your configuration as part of the build process, so we recommend building Open vSwitch before reading the manpages.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The following is a summary of the licensing of files in this distribution. As mentioned, Open vSwitch is licensed under the open source Apache 2 license. Some files may be marked specifically with a different license, in which case that license applies to the file in question.&lt;/p&gt; &#xA;&lt;p&gt;Files under the datapath directory are licensed under the GNU General Public License, version 2.&lt;/p&gt; &#xA;&lt;p&gt;File build-aux/cccl is licensed under the GNU General Public License, version 2.&lt;/p&gt; &#xA;&lt;p&gt;The following files are licensed under the 2-clause BSD license. include/windows/getopt.h lib/getopt_long.c lib/conntrack-tcp.c&lt;/p&gt; &#xA;&lt;p&gt;The following files are licensed under the 3-clause BSD-license include/windows/netinet/icmp6.h include/windows/netinet/ip6.h lib/strsep.c&lt;/p&gt; &#xA;&lt;p&gt;Files lib/sflow*.[ch] are licensed under the terms of either the Sun Industry Standards Source License 1.1, that is available at: &lt;a href=&#34;http://host-sflow.sourceforge.net/sissl.html&#34;&gt;http://host-sflow.sourceforge.net/sissl.html&lt;/a&gt; or the InMon sFlow License, that is available at: &lt;a href=&#34;http://www.inmon.com/technology/sflowlicense.txt&#34;&gt;http://www.inmon.com/technology/sflowlicense.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:bugs@openvswitch.org&#34;&gt;bugs@openvswitch.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jomjol/AI-on-the-edge-device</title>
    <updated>2022-10-02T01:32:28Z</updated>
    <id>tag:github.com,2022-10-02:/jomjol/AI-on-the-edge-device</id>
    <link href="https://github.com/jomjol/AI-on-the-edge-device" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the AI-on-the-edge-device&lt;/h1&gt; &#xA;&lt;p&gt;Artificial intelligence based systems have been established in our every days live. Just think of speech or image recognition. Most of the systems relay on either powerful processors or a direct connection to the cloud for doing the calculations up there. With the increasing power of modern processors the AI systems are coming closer to the end user - which is usually called &lt;strong&gt;edge computing&lt;/strong&gt;. Here this edge computing is brought into a practical oriented example, where a AI network is implemented on a ESP32 device so: &lt;strong&gt;AI on the edge&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This projects allows you to digitalize your &lt;strong&gt;analoge&lt;/strong&gt; water, gas, power and other meters using cheap and easily available hardware.&lt;/p&gt; &#xA;&lt;p&gt;All you need is an &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki/Hardware-Compatibility&#34;&gt;ESP32 board with a supported camera&lt;/a&gt; and a bit of a practical hand.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/esp32-cam.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Small&lt;/strong&gt; and &lt;strong&gt;cheap&lt;/strong&gt; device (3x4.5x2 cmÂ³, &amp;lt; 10 EUR)&lt;/li&gt; &#xA; &lt;li&gt;camera and illumination integrated&lt;/li&gt; &#xA; &lt;li&gt;Web surface for administration and control&lt;/li&gt; &#xA; &lt;li&gt;OTA-Interface to update directly through the web interface&lt;/li&gt; &#xA; &lt;li&gt;API for easy integration&lt;/li&gt; &#xA; &lt;li&gt;Inline Image processing (feature detection, alignment, ROI extraction)&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow Lite (TFlite) integration - including easy to use wrapper&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;The device takes a photo of your meter at a defined interval. It then extracts the Regions of Interest (ROI&#39;s) out of it and runs them through an artificial inteligence. As a result, you get the digitalized value of your meter.&lt;/p&gt; &#xA;&lt;p&gt;There are several options what to do with that value. Either send it to a MQTT broker, write it to an InfluxDb or simply provide it throug a REST API.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/idea.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;h2&gt;Impressions&lt;/h2&gt; &#xA;&lt;h3&gt;AI-on-the-edge-device on a Water Meter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/watermeter_all.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/main.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/size.png&#34; width=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Web Interface (Water Meter)&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/watermeter.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;AI-on-the-edge-device on a Electrical Power Meter&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/powermeter.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;There is a growing &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki&#34;&gt;wiki&lt;/a&gt; which provides you with a lot of information. Head there to get a start, set it up and configure it.&lt;/p&gt; &#xA;&lt;p&gt;There are also a articles in the German Heise magazine &#34;make:&#34; about the setup and the technical background (behind a paywall) : &lt;a href=&#34;https://www.heise.de/select/make/2021/2/2103513300897420296&#34;&gt;DIY - Setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For further background information, head to &lt;a href=&#34;https://www.heise.de/select/make/2021/6/2126410443385102621&#34;&gt;Neural Networks&lt;/a&gt;, &lt;a href=&#34;https://www.heise.de/select/make/2022/1/2134114065999161585&#34;&gt;Training Neural Networks&lt;/a&gt; and &lt;a href=&#34;https://www.heise.de/select/make/2022/2/2204010051597422030&#34;&gt;Programming on the ESP32&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;The latest available version is available on the &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Initially you will have to flash it through an USB connection. Later an update is possible directly over the Air (OTA).&lt;/p&gt; &#xA;&lt;h2&gt;Casing&lt;/h2&gt; &#xA;&lt;p&gt;A 3d-printable housing can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:4573481&#34;&gt;https://www.thingiverse.com/thing:4573481&lt;/a&gt; (Water Meter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:5028229&#34;&gt;https://www.thingiverse.com/thing:5028229&lt;/a&gt; (Power Meter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thingiverse.com/thing:4571627&#34;&gt;https://www.thingiverse.com/thing:4571627&lt;/a&gt; (ESP32-Cam housing only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build it yourself&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/code/README.md&#34;&gt;Build Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to support the developer with a cup of coffee you can do that via &lt;a href=&#34;https://www.paypal.com/donate?hosted_button_id=8TRSVYNYKDSWL&#34;&gt;Paypal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;form action=&#34;https://www.paypal.com/donate&#34; method=&#34;post&#34; target=&#34;_top&#34;&gt; &#xA; &lt;input type=&#34;hidden&#34; name=&#34;hosted_button_id&#34; value=&#34;8TRSVYNYKDSWL&#34;&gt; &#xA; &lt;input type=&#34;image&#34; src=&#34;https://www.paypalobjects.com/en_US/DK/i/btn/btn_donateCC_LG.gif&#34; border=&#34;0&#34; name=&#34;submit&#34; title=&#34;PayPal - The safer, easier way to pay online!&#34; alt=&#34;Donate with PayPal button&#34;&gt; &#xA; &lt;img alt=&#34;&#34; border=&#34;0&#34; src=&#34;https://www.paypal.com/en_DE/i/scr/pixel.gif&#34; width=&#34;1&#34; height=&#34;1&#34;&gt; &#xA;&lt;/form&gt; If you have any technical topics, you can create an [Issue](https://github.com/jomjol/AI-on-the-edge-device/issues). &#xA;&lt;p&gt;In other cases you can contact the developer via email: &lt;img src=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/images/mail.jpg&#34; height=&#34;25&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changes and History&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/Changelog.md&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logfile downloader and combiner (Thx to &lt;a href=&#34;https://github.com/reserve85&#34;&gt;reserve85&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Files see &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/tbd&#34;&gt;&#39;/tools/logfile-tool&#39;&lt;/a&gt;, How-to see &lt;a href=&#34;https://github.com/jomjol/AI-on-the-edge-device/wiki/Gasmeter-Log-Downloader&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Ideas&lt;/h2&gt; &#xA;&lt;p&gt;There are some ideas and feature requests which are not followed currently - mainly due to capacity reasons on side of the developer. They are collected here: &lt;a href=&#34;https://raw.githubusercontent.com/jomjol/AI-on-the-edge-device/master/FeatureRequest.md&#34;&gt;FeatureRequest.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Emmastro/alx-low_level_programming</title>
    <updated>2022-10-02T01:32:28Z</updated>
    <id>tag:github.com,2022-10-02:/Emmastro/alx-low_level_programming</id>
    <link href="https://github.com/Emmastro/alx-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;alx-low_level_programming&lt;/h1&gt;</summary>
  </entry>
</feed>