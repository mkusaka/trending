<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-26T01:23:37Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kleiton0x00/Proxy-DLL-Loads</title>
    <updated>2023-10-26T01:23:37Z</updated>
    <id>tag:github.com,2023-10-26:/kleiton0x00/Proxy-DLL-Loads</id>
    <link href="https://github.com/kleiton0x00/Proxy-DLL-Loads" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A proof of concept demonstrating the DLL-load proxying using undocumented Syscalls.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Proxy DLL Loads&lt;/h1&gt; &#xA;&lt;p&gt;A proof of concept demonstrating the DLL-load proxying using undocumented Syscalls. This repo is not about teaching you what DLL Load proxying is and how it works, it is greatly explained on &lt;a href=&#34;https://0xdarkvortex.dev/proxying-dll-loads-for-hiding-etwti-stack-tracing/&#34;&gt;this blogpost&lt;/a&gt;. Instead, the main focus is on finding undocumented callback functions by reversing the DLLs and creating your own version.&lt;/p&gt; &#xA;&lt;h2&gt;Hunting for undocumented syscalls&lt;/h2&gt; &#xA;&lt;p&gt;Before getting in directly to reversing the DLLs, we need to first know what to look for. We can start by looking at the Microsoft documentation (MSDN), which provides an excellent &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/procthread/using-the-thread-pool-functions?source=recommendations&#34;&gt;example&lt;/a&gt; of a custom thread pool, which creates a work item and a thread pool timer. The code alone is also suitable for archiving the execution of &lt;code&gt;LoadLibrary&lt;/code&gt; via callback functions, but as already known, the userland functions are prone to hooking. So using their respective syscalls would be a better approach. Looking at the MSDN documentation, the example code uses the following Win32API functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CreateThreadpool&#xA;SetThreadpoolThreadMaximum&#xA;SetThreadpoolThreadMinimum&#xA;CreateThreadpoolCleanupGroup&#xA;CreateThreadpoolTimer&#xA;SetThreadpoolTimer&#xA;CloseThreadpoolCleanupGroupMembers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://hex-rays.com/ida-free/&#34;&gt;IDA&lt;/a&gt;, open kernel32.dll, go to &#34;Exports&#34; and search for the mentioned Win32 APIs, in this case &lt;code&gt;CreateThreadpool&lt;/code&gt;. Double-clicking the function redirect us to its dissassembled code:&lt;br&gt; &lt;img src=&#34;https://github.com/kleiton0x00/Proxy-DLL-Loads/assets/37262788/8422c046-13df-45fd-8c48-1371f52e9f43&#34; alt=&#34;Screenshot from 2023-10-23 10-33-17&#34;&gt;&lt;br&gt; Through the assembly instructions, we see the &lt;code&gt;TpAllocPool&lt;/code&gt; syscall being executed: &lt;code&gt;call cs:__imp_TpAllocPool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you repeat the process with the other functions, you will end up with the following syscalls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ntdll!TpAllocPool&#xA;Ntdll!TpSetPoolMaxThreads&#xA;Ntdll!TpSetPoolMinThreads&#xA;Ntdll!TpAllocCleanupGroup&#xA;Ntdll!TpAllocTimer&#xA;Ntdll!TpSetTimer&#xA;Ntdll!TpReleaseCleanupGroupMembers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you have everything you need to start creating your own version of proxying the DLL Loads. You can look at &lt;a href=&#34;https://processhacker.sourceforge.io/doc/nttp_8h.html#adad18de6710381f08cf36a0fa72e7529&#34;&gt;this documentation&lt;/a&gt; from Process Hacker to help you implement the undocumented syscalls in your code.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Set a breakpoint before the assembly code in Callbackstub get&#39;s executed. Look at right tab of &lt;a href=&#34;https://x64dbg.com/&#34;&gt;x64dbg&lt;/a&gt; as the registers are being populated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kleiton0x00/Proxy-DLL-Loads/assets/37262788/73af5145-2b1c-486b-ae9f-583c4e865df6&#34;&gt;https://github.com/kleiton0x00/Proxy-DLL-Loads/assets/37262788/73af5145-2b1c-486b-ae9f-583c4e865df6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RAX -&amp;gt; pointer to LoadLibraryA&#xA;RCX -&amp;gt; library name string &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Result&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kleiton0x00/Proxy-DLL-Loads/assets/37262788/2db0e36d-53e9-4697-b976-b1260f5bfcdd&#34; alt=&#34;Screenshot from 2023-10-21 20-21-05&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://0xdarkvortex.dev/proxying-dll-loads-for-hiding-etwti-stack-tracing/&#34;&gt;https://0xdarkvortex.dev/proxying-dll-loads-for-hiding-etwti-stack-tracing/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/hlldz/misc/tree/main/proxy_calls&#34;&gt;https://github.com/hlldz/misc/tree/main/proxy_calls&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://processhacker.sourceforge.io/doc/nttp_8h.html#adad18de6710381f08cf36a0fa72e7529&#34;&gt;https://processhacker.sourceforge.io/doc/nttp_8h.html#adad18de6710381f08cf36a0fa72e7529&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Detections&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/protections-artifacts/raw/main/behavior/rules/defense_evasion_library_loaded_via_a_callback_function.toml&#34;&gt;https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/defense_evasion_library_loaded_via_a_callback_function.toml&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stas00/the-art-of-debugging</title>
    <updated>2023-10-26T01:23:37Z</updated>
    <id>tag:github.com,2023-10-26:/stas00/the-art-of-debugging</id>
    <link href="https://github.com/stas00/the-art-of-debugging" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Art of Debugging&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Art of Debugging&lt;/h1&gt; &#xA;&lt;p&gt;This guide will teach you how to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debug normal issues really fast&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make complicated issues possible to debug&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;footnote: adapted from Perl&#39;s slogan: &#34;Easy things should be easy and hard things should be possible&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This is a work-in-progress collection of methodologies and copy-n-paste recipes for successful debugging of simple and complicated software problems. Some sections are quite complete, while other will be finished at a later stage, and yet other haven&#39;t been started.&lt;/p&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;I have been developing software since 1995 and a lot of this work involved debugging. Over the years I developed a various efficient methodologies for discovering the source of the problem, which is the most difficult stage to solving it. Since after the problem is understood, typically the resolution is relatively easy.&lt;/p&gt; &#xA;&lt;p&gt;Every so often someone I would be debugging a problem with would suggest to share my approaches with the world. I always said that it&#39;d be too difficult to generalize, but recently the planted seed seems to have sprouted and so in the following documents I will try to share some of the insights to ease this very difficult at times process.&lt;/p&gt; &#xA;&lt;p&gt;Writing about debugging in the void is very difficult and since I haven&#39;t been saving use cases, it will take some time to build this up, so expect these pages to be a Work In Progress (WIP) for many moons. But hopefully some ideas could be relayed to you sooner than later, and they would help to ease your burden of debugging in your work and play projects.&lt;/p&gt; &#xA;&lt;h2&gt;TOC&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/the-art-of-debugging/master/methodology/&#34;&gt;Fast Debugging Methodology&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/the-art-of-debugging/master/compiled-programs/&#34;&gt;Debugging Compiled Programs&lt;/a&gt; - gdb, ldd, nm, LD_LIBRARY_PATH, LD_PRELOAD&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/the-art-of-debugging/master/python/&#34;&gt;Debugging Python&lt;/a&gt; - py-spy, paths, auto-print&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/the-art-of-debugging/master/unix/&#34;&gt;Unix Tools For Debugging&lt;/a&gt; - bash, strace, make&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/stas00/ml-engineering/tree/master/debug&#34;&gt;Debugging Machine Learning Projects&lt;/a&gt; (external)&lt;/h2&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug, typo or would like to propose an improvement please don&#39;t hesitate to open an &lt;a href=&#34;https://github.com/stas00/the-art-of-debugging/issues&#34;&gt;Issue&lt;/a&gt; or contribute a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Requests&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re struggling with a particular use-case not yet covered here, please open an &lt;a href=&#34;https://github.com/stas00/the-art-of-debugging/issues&#34;&gt;Issue&lt;/a&gt; where you explain in details the situation, how it can be reproduced and hopefully I can help you find a working approach or at least make some suggestions that may help unblocking you.&lt;/p&gt; &#xA;&lt;p&gt;Unless this is urgent please hold on on those requests for a bit while I write out the bulk of the know-how as chances are it&#39;ll be already covered here.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The content of this site is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/stas00/the-art-of-debugging/master/LICENSE-CC-BY-SA&#34;&gt;Attribution-ShareAlike 4.0 International&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;My repositories map&lt;/h2&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Machine Learning:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/ml-engineering&#34;&gt;ML Engineering&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/ml-ways&#34;&gt;ML ways&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/porting&#34;&gt;Porting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Guides:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/the-art-of-debugging&#34;&gt;The Art of Debugging&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Applications:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/ipyexperiments&#34;&gt;ipyexperiments&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Tools and Cheatsheets:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/bash-tools&#34;&gt;bash&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/conda-tools&#34;&gt;conda&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/git-tools&#34;&gt;git&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/jupyter-notebook-tools&#34;&gt;jupyter-notebook&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/make-tools&#34;&gt;make&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/python-tools&#34;&gt;python&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/tensorboard-tools&#34;&gt;tensorboard&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/unix-tools&#34;&gt;unix&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0Nera/BMOSP</title>
    <updated>2023-10-26T01:23:37Z</updated>
    <id>tag:github.com,2023-10-26:/0Nera/BMOSP</id>
    <link href="https://github.com/0Nera/BMOSP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;БМПОС - Базовая Модульная Платформа Операционных Систем для платформы x86_64&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;БМПОС: Базовая Модульная Платформа Операционных Систем&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0Nera/BMOSP/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/0Nera/BMOSP/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;CI сборка&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0Nera/BMOSP/actions/workflows/pages/pages-build-deployment&#34;&gt;&lt;img src=&#34;https://github.com/0Nera/BMOSP/actions/workflows/pages/pages-build-deployment/badge.svg?branch=pages&#34; alt=&#34;Github pages сайт&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;БМПОС - Базовая Модульная Платформа Операционных Систем для платформы x86_64 (BIOS/UEFI). Это отечественное программное обеспечение, созданное при поддержке Синапс ОС на языке программирования C.&lt;/p&gt; &#xA;&lt;p&gt;БМПОС не является операционной системой. Это платформа для изучения.&lt;/p&gt; &#xA;&lt;p&gt;Философия БМПОС - &#34;всё есть модуль&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://0nera.github.io/BMOSP/assets/0_0.1.231.png&#34; alt=&#34;Скриншот вывода ядра в эмуляторе Qemu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Реализовано&lt;/h2&gt; &#xA;&lt;p&gt;Ядро:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Менеджер памяти&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Менеджер видеопамяти&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Менеджер потоков&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Загрузчик модулей&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Буфферы ввода-вывода&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Модули:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Оболочка ввода-вывода&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Драйвера:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; PS/2 (Клавиатура)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SATA (AHCI) (Чтение)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; EXT2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Документация:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Системные вызовы&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ядро&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Стандартная библиотека&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Вебсайт:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Домен&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Движок сайта&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Документация&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Статьи&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Примеры&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Примеры:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Пример модуля&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Пример драйвера&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Пример программы-модуля&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Пример модуля ввода-вывода&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Видеоуроки:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Основы языка C&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Основы ассемблера GAS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Настройка окружения&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сборка из исходного кода&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Привет мир!&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Написание драйвера&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Общая работа:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ядро&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Модули&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Драйвера&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Документация&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Вебсайт&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Примеры&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Видеоуроки&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Второстепенные задачи&lt;/h3&gt; &#xA;&lt;p&gt;Модули:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Отладчик&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lua&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Криптограф&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Драйвера:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; PS/2 (Мышь)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SATA (AHCI) (Запись)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SIMD (SSE, SSE2, SSE3, SSE4, AVX) - отдельный драйвер для инициализации SIMD инструкций&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Партнеры&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ООО &#34;НПО ТЕ-ОН&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Сборка из исходного кода&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 18.04+&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install clang-format python3 git qemu-system-x86 gdisk dos2unix&#xA;git clone https://git.synapseos.ru/Aren/BMOSP.git&#xA;cd BMOSP/&#xA;chmod +x build.sh&#xA;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ArchLinux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yay -S clang-format&#xA;sudo pacman -S python3 git qemu-system-x86&#xA;git clone https://git.synapseos.ru/Aren/BMOSP.git&#xA;cd BMOSP/&#xA;chmod +x build.sh&#xA;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Запуск&lt;/h2&gt; &#xA;&lt;h3&gt;Qemu&lt;/h3&gt; &#xA;&lt;p&gt;Стандартная конфигурация&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qemu-system-x86_64 -cpu max -m 1G -smp 1 -bios ovmf/OVMF.fd -hda bmosp.hdd  -name &#34;БМПОС&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Или&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x run.sh&#xA;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Предупреждение&lt;/h2&gt; &#xA;&lt;p&gt;Использовать на свой страх и риск. Система расчитана на работу в эмулируемой среде Qemu под процессоры x86_64. Мы не несем ответственности за нанесенный ущерб.&lt;/p&gt; &#xA;&lt;h2&gt;Ресурсы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vk.com/BMOSP&#34;&gt;https://vk.com/BMOSP&lt;/a&gt; Страница вконтакте&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/bmosp&#34;&gt;https://t.me/bmosp&lt;/a&gt; Телеграм&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bmosp.ru&#34;&gt;https://bmosp.ru&lt;/a&gt; Вебсайт&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.synapseos.ru/index.php?title=%D0%91%D0%9C%D0%9F%D0%9E%D0%A1&#34;&gt;https://wiki.synapseos.ru/index.php?title=БМПОС&lt;/a&gt; Страница на вики&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Зеркала&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.synapseos.ru/Aren/BMOSP&#34;&gt;https://git.synapseos.ru/Aren/BMOSP&lt;/a&gt; - доверенный сервер(главный репозиторий)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0Nera/BMOSP&#34;&gt;https://github.com/0Nera/BMOSP&lt;/a&gt; - зеркало&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tvoygit.ru/0Nera/BMOSP&#34;&gt;https://tvoygit.ru/0Nera/BMOSP&lt;/a&gt; - зеркало&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.mos.ru/synapseos/BMOSP&#34;&gt;https://hub.mos.ru/synapseos/BMOSP&lt;/a&gt; - неактивное зеркало&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Использованные ресурсы&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/limine-bootloader/limine&#34;&gt;https://github.com/limine-bootloader/limine&lt;/a&gt; (BSD 2-Clause)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;https://github.com/nothings/stb&lt;/a&gt; (MIT, Общественное достояние)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CPUID&#34;&gt;https://en.wikipedia.org/wiki/CPUID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klange/toaruos&#34;&gt;https://github.com/klange/toaruos&lt;/a&gt; (NCSA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.osdev.org/Model_Specific_Registers&#34;&gt;https://wiki.osdev.org/Model_Specific_Registers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sandpile.org/x86/msr.htm&#34;&gt;https://sandpile.org/x86/msr.htm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>