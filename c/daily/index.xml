<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-18T01:32:19Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>huangz1990/redis-3.0-annotated</title>
    <updated>2022-10-18T01:32:19Z</updated>
    <id>tag:github.com,2022-10-18:/huangz1990/redis-3.0-annotated</id>
    <link href="https://github.com/huangz1990/redis-3.0-annotated" rel="alternate"></link>
    <summary type="html">&lt;p&gt;带有详细注释的 Redis 3.0 代码（annotated Redis 3.0 source code）。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redis 3.0 源码注释&lt;/h1&gt; &#xA;&lt;p&gt;本项目是注释版的 Redis 3.0 源码， 原始代码来自： &lt;a href=&#34;https://github.com/antirez/redis&#34;&gt;https://github.com/antirez/redis&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;p&gt;这份注释是我在创作新版《Redis 设计与实现》期间， 为了了解 Redis 的内部实现而制作的， 所有在书中有介绍的内容， 在源码中都进行了相应的注释。&lt;/p&gt; &#xA;&lt;p&gt;在注释的过程中， 除了少量空格和空行方面的调整外， 没有对原始代码进行任何其他改动， 最大程度地保证了代码的“原汁原味”。&lt;/p&gt; &#xA;&lt;p&gt;希望这份注释源码能给大家学习和了解 Redis 带来一点帮助。&lt;/p&gt; &#xA;&lt;p&gt;另外， &lt;code&gt;新版《Redis 设计与实现》 &amp;lt;http://RedisBook.com&amp;gt;&lt;/code&gt;_\ 正在各大网店发售中， 希望大家可以多多支持这本书。&lt;/p&gt; &#xA;&lt;p&gt;Have fun!&lt;/p&gt; &#xA;&lt;p&gt;| 黄健宏（huangz） | 2014 年 6 月 28 日&lt;/p&gt; &#xA;&lt;h2&gt;附录：各个源码文件的作用简介&lt;/h2&gt; &#xA;&lt;p&gt;+-------------------------------------------------------------------+-------------------------------------------------------------------+ | 文件 | 作用 | +===================================================================+===================================================================+ | &lt;code&gt;adlist.c&lt;/code&gt; 、 &lt;code&gt;adlist.h&lt;/code&gt; | 双端链表数据结构的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;ae.c&lt;/code&gt; 、 &lt;code&gt;ae.h&lt;/code&gt; 、 &lt;code&gt;ae_epoll.c&lt;/code&gt; 、 &lt;code&gt;ae_evport.c&lt;/code&gt; 、 | 事件处理器，以及各个具体实现。 | | &lt;code&gt;ae_kqueue.c&lt;/code&gt; 、 &lt;code&gt;ae_select.c&lt;/code&gt; | | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;anet.c&lt;/code&gt; 、 &lt;code&gt;anet.h&lt;/code&gt; | Redis 的异步网络框架，内容主要为对 socket 库的包装。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;aof.c&lt;/code&gt; | AOF 功能的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;asciilogo.h&lt;/code&gt; | 保存了 Redis 的 ASCII LOGO 。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;bio.c&lt;/code&gt; 、 &lt;code&gt;bio.h&lt;/code&gt; | Redis 的后台 I/O 程序，用于将 I/O 操作放到子线程里面执行， | | | 减少 I/O 操作对主线程的阻塞。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;bitops.c&lt;/code&gt; | 二进制位操作命令的实现文件。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;blocked.c&lt;/code&gt; | 用于实现 BLPOP 命令和 WAIT 命令的阻塞效果。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;cluster.c&lt;/code&gt; 、 &lt;code&gt;cluster.h&lt;/code&gt; | Redis 的集群实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;config.c&lt;/code&gt; 、 &lt;code&gt;config.h&lt;/code&gt; | Redis 的配置管理实现，负责读取并分析配置文件， | | | 然后根据这些配置修改 Redis 服务器的各个选项。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;crc16.c&lt;/code&gt; 、 &lt;code&gt;crc64.c&lt;/code&gt; 、 &lt;code&gt;crc64.h&lt;/code&gt; | 计算 CRC 校验和。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;db.c&lt;/code&gt; | 数据库实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;debug.c&lt;/code&gt; | 调试实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;dict.c&lt;/code&gt; 、 &lt;code&gt;dict.h&lt;/code&gt; | 字典数据结构的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;endianconv.c&lt;/code&gt; 、 &lt;code&gt;endianconv.h&lt;/code&gt; | 二进制的大端、小端转换函数。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;fmacros.h&lt;/code&gt; | 一些移植性方面的宏。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;help.h&lt;/code&gt; | &lt;code&gt;utils/generate-command-help.rb&lt;/code&gt; 程序自动生成的命令帮助信息。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;hyperloglog.c&lt;/code&gt; | HyperLogLog 数据结构的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;intset.c&lt;/code&gt; 、 &lt;code&gt;intset.h&lt;/code&gt; | 整数集合数据结构的实现，用于优化 SET 类型。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;lzf_c.c&lt;/code&gt; 、 &lt;code&gt;lzf_d.c&lt;/code&gt; 、 &lt;code&gt;lzf.h&lt;/code&gt; 、 &lt;code&gt;lzfP.h&lt;/code&gt; | Redis 对字符串和 RDB 文件进行压缩时使用的 LZF 压缩算法的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;Makefile&lt;/code&gt; 、 &lt;code&gt;Makefile.dep&lt;/code&gt; | 构建文件。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;memtest.c&lt;/code&gt; | 内存测试。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;mkreleasehdr.sh&lt;/code&gt; | 用于生成释出信息的脚本。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;multi.c&lt;/code&gt; | Redis 的事务实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;networking.c&lt;/code&gt; | Redis 的客户端网络操作库， | | | 用于实现命令请求接收、发送命令回复等工作， | | | 文件中的函数大多为 write 、 read 、 close 等函数的包装， | | | 以及各种协议的分析和构建函数。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;notify.c&lt;/code&gt; | Redis 的数据库通知实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;object.c&lt;/code&gt; | Redis 的对象系统实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;pqsort.c&lt;/code&gt; 、 &lt;code&gt;pqsort.h&lt;/code&gt; | 快速排序（QuickSort）算法的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;pubsub.c&lt;/code&gt; | 发布与订阅功能的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;rand.c&lt;/code&gt; 、 &lt;code&gt;rand.h&lt;/code&gt; | 伪随机数生成器。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;rdb.c&lt;/code&gt; 、 &lt;code&gt;rdb.h&lt;/code&gt; | RDB 持久化功能的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redisassert.h&lt;/code&gt; | Redis 自建的断言系统。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redis-benchmark.c&lt;/code&gt; | Redis 的性能测试程序。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redis.c&lt;/code&gt; | 负责服务器的启动、维护和关闭等事项。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redis-check-aof.c&lt;/code&gt; 、 &lt;code&gt;redis-check-dump.c&lt;/code&gt; | RDB 文件和 AOF 文件的合法性检查程序。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redis-cli.c&lt;/code&gt; | Redis 客户端的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redis.h&lt;/code&gt; | Redis 的主要头文件，记录了 Redis 中的大部分数据结构， | | | 包括服务器状态和客户端状态。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;redis-trib.rb&lt;/code&gt; | Redis 集群的管理程序。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;release.c&lt;/code&gt; 、 &lt;code&gt;release.h&lt;/code&gt; | 记录和生成 Redis 的释出版本信息。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;replication.c&lt;/code&gt; | 复制功能的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;rio.c&lt;/code&gt; 、 &lt;code&gt;rio.h&lt;/code&gt; | Redis 对文件 I/O 函数的包装， | | | 在普通 I/O 函数的基础上增加了显式缓存、以及计算校验和等功能。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;scripting.c&lt;/code&gt; | 脚本功能的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;sds.c&lt;/code&gt; 、 &lt;code&gt;sds.h&lt;/code&gt; | SDS 数据结构的实现，SDS 为 Redis 的默认字符串表示。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;sentinel.c&lt;/code&gt; | Redis Sentinel 的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;setproctitle.c&lt;/code&gt; | 进程环境设置函数。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;sha1.c&lt;/code&gt; 、 &lt;code&gt;sha1.h&lt;/code&gt; | SHA1 校验和计算函数。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;slowlog.c&lt;/code&gt; 、 &lt;code&gt;slowlog.h&lt;/code&gt; | 慢查询功能的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;solarisfixes.h&lt;/code&gt; | 针对 Solaris 系统的补丁。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;sort.c&lt;/code&gt; | SORT 命令的实现。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;syncio.c&lt;/code&gt; | 同步 I/O 操作。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;testhelp.h&lt;/code&gt; | 测试辅助宏。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;t_hash.c&lt;/code&gt; 、 &lt;code&gt;t_list.c&lt;/code&gt; 、 &lt;code&gt;t_set.c&lt;/code&gt; 、 &lt;code&gt;t_string.c&lt;/code&gt; 、 | 定义了 Redis 的各种数据类型，以及这些数据类型的命令。 | | &lt;code&gt;t_zset.c&lt;/code&gt; | | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;util.c&lt;/code&gt; 、 &lt;code&gt;util.h&lt;/code&gt; | 各种辅助函数。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;valgrind.sup&lt;/code&gt; | valgrind 的suppression文件。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;version.h&lt;/code&gt; | 记录了 Redis 的版本号。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;ziplist.c&lt;/code&gt; 、 &lt;code&gt;ziplist.h&lt;/code&gt; | ZIPLIST 数据结构的实现，用于优化 LIST 类型。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;zipmap.c&lt;/code&gt; 、 &lt;code&gt;zipmap.h&lt;/code&gt; | ZIPMAP 数据结构的实现，在 Redis 2.6 以前用与优化 HASH 类型， | | | Redis 2.6 开始已经废弃。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+ | &lt;code&gt;zmalloc.c&lt;/code&gt; 、 &lt;code&gt;zmalloc.h&lt;/code&gt; | 内存管理程序。 | +-------------------------------------------------------------------+-------------------------------------------------------------------+&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>makermoekoe/Picoclick-C3</title>
    <updated>2022-10-18T01:32:19Z</updated>
    <id>tag:github.com,2022-10-18:/makermoekoe/Picoclick-C3</id>
    <link href="https://github.com/makermoekoe/Picoclick-C3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Picoclick-C3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This page is a work in progress!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3_360_gs_30fps.gif&#34; width=&#34;300px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_tn_2.JPG&#34; width=&#34;350px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Picoclick C3 as well as its little brother (the C3T, T = tiny) are the successors of the well known &lt;a href=&#34;https://github.com/makermoekoe/Picoclick&#34;&gt;Picoclick&lt;/a&gt;. The name is related to its new processor: the &lt;a href=&#34;https://www.espressif.com/sites/default/files/documentation/esp32-c3_datasheet_en.pdf&#34;&gt;ESP32-C3&lt;/a&gt; single core RISC-V 160MHz CPU.&lt;/p&gt; &#xA;&lt;p&gt;The Picoclick is a tiny WiFi and BLE IoT button for several applications. Originally designed for smart home things, the Picoclick can also be used as an actuator for IFTTT automations or as an MQTT device. It is based on the single core ESP32-C3 RISC-V processor and therefore comes with tons of useful features. With dimensions of only 10.5mm by 18mm, the C3T is not only the smallest one in the family of the Picoclicks, it is also the smallest device I have created so far.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=t-50w3RsUlg&#34;&gt;Youtube video of the C3T&lt;/a&gt; shows the assembly and soldering process, the optimization of the boot up time, the power measurements as well as some useful applications of the Picoclick.&lt;/p&gt; &#xA;&lt;p&gt;As the C3 is in development at the moment, most of the files are related to the C3T so far.&lt;/p&gt; &#xA;&lt;p&gt;Here are some specs of the Picoclick C3T:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dimensions are only 10.5x18mm&lt;/li&gt; &#xA; &lt;li&gt;Ultra low standby current due to latching circuit (no sleep mode needed)&lt;/li&gt; &#xA; &lt;li&gt;Single button &amp;amp; LED interface (WS2812 RGB LED)&lt;/li&gt; &#xA; &lt;li&gt;USB Type-C for charging the battery and flashing the ESP32-C3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tindie.com/stores/makermoekoe/?ref=offsite_badges&amp;amp;utm_source=sellers_makermoekoe&amp;amp;utm_medium=badges&amp;amp;utm_campaign=badge_large&#34;&gt;&lt;img src=&#34;https://d2ss6ovg47m0r5.cloudfront.net/badges/tindie-larges.png&#34; alt=&#34;I sell on Tindie&#34; width=&#34;200&#34; height=&#34;104&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Update 14.07.2022: The Picoclick C3 is alive!&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s a pleasure for me to announce that the Picoclick C3 (the big brother of the C3T) is finally here! It comes with the most advanced features of my latest projects which occupies the following points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized idle current: we&#39;re below 200nA (!!) current consumption (without battery protection) in idle state! (compared to 3µA for the C3T)&lt;/li&gt; &#xA; &lt;li&gt;Optimized antenna design, which will lead to a better performance and longer range.&lt;/li&gt; &#xA; &lt;li&gt;Optimized power latching circuit, which makes the firmware development easier. (especially with the Arduino IDE)&lt;/li&gt; &#xA; &lt;li&gt;Optimized battery charging circuit with separated status LED.&lt;/li&gt; &#xA; &lt;li&gt;Added second RTC crystal for BLE applications.&lt;/li&gt; &#xA; &lt;li&gt;Added FPC connector for connecting external hardware.&lt;/li&gt; &#xA; &lt;li&gt;Added embedded battery protection.&lt;/li&gt; &#xA; &lt;li&gt;Added boot emergency jumper.&lt;/li&gt; &#xA; &lt;li&gt;Same dimensions as the standard Picoclick.&lt;/li&gt; &#xA; &lt;li&gt;Added a nice &#34;golden&#34; logo ;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GPIOs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;GPIO C3T&lt;/th&gt; &#xA;   &lt;th&gt;GPIO C3&lt;/th&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LED&lt;/td&gt; &#xA;   &lt;td&gt;GPIO6&lt;/td&gt; &#xA;   &lt;td&gt;GPIO6 (CLK) + GPIO7 (SDI)&lt;/td&gt; &#xA;   &lt;td&gt;Output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latch*&lt;/td&gt; &#xA;   &lt;td&gt;GPIO3&lt;/td&gt; &#xA;   &lt;td&gt;**&lt;/td&gt; &#xA;   &lt;td&gt;Output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;GPIO5&lt;/td&gt; &#xA;   &lt;td&gt;GPIO5&lt;/td&gt; &#xA;   &lt;td&gt;Input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Charge Stat.&lt;/td&gt; &#xA;   &lt;td&gt;GPIO1&lt;/td&gt; &#xA;   &lt;td&gt;ext. LED&lt;/td&gt; &#xA;   &lt;td&gt;Input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bat Voltage&lt;/td&gt; &#xA;   &lt;td&gt;GPIO4&lt;/td&gt; &#xA;   &lt;td&gt;GPIO4&lt;/td&gt; &#xA;   &lt;td&gt;Input&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bat Voltage EN&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;GPIO3&lt;/td&gt; &#xA;   &lt;td&gt;Output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*Enabling the LDO can be done by pressing the button of the device or turning the latch high. In most use cases, the latch GPIO should be turned on as the first task of the Picoclick. Once the task is completed the device can be powered off by turning the latch off (e.g. pulling it low).&lt;/p&gt; &#xA;&lt;p&gt;**The Picoclick C3 doesn&#39;t need a latching GPIO because it uses the embedded flash&#39;s power supply pin as a reference. It can be depowered with putting the ESP32 in deepsleep. To reduce the power consumption of the ESP32 this function will disable the power of the embedded flash (&lt;code&gt;VDD_SPI&lt;/code&gt;) which in result will depower the Picoclick itself. The deepsleep calling function is only necessary to pulling the &lt;code&gt;VDD_SPI&lt;/code&gt; line low, not to use the deepsleep mode of the ESP32.&lt;/p&gt; &#xA;&lt;h2&gt;Extension port of the Picoclick C3&lt;/h2&gt; &#xA;&lt;p&gt;The C3 has an FPC extension connector which can be used to power the Picoclick via the &lt;code&gt;+VBAT&lt;/code&gt; pin, actuate the button press and use two pulled-up GPIOs (for I2C for example). Furthermore it leads out &lt;code&gt;+3V3&lt;/code&gt; and &lt;code&gt;GND&lt;/code&gt; signal. The &lt;code&gt;+3V3&lt;/code&gt; signal is only active if the device is on.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the connections of the extension port, I designed a simple breadboard friendly breakout board. The pinout of the breakout board is shown below with both the connector of the breakout board and the Picoclick facing in the same direction. The FPC connectors are double-sided (contacts both facing up and down), so it will work in the other direction as well, but then the pinout is switched.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3_breakout_pinout.png&#34; width=&#34;500px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using I2C&lt;/h3&gt; &#xA;&lt;p&gt;Both external GPIOs are strapping pins of the ESP32C3 and thus are pulled up on the Picoclick itself (they don&#39;t need external I2C pull-ups). If you wanna hook up an I2C device which should be turned off during the idle period you can simply use the &lt;code&gt;+3V3&lt;/code&gt; as a power source. In the other case the &lt;code&gt;+VBAT&lt;/code&gt; signal can be used with an external voltage regulator. Latter can be useful if you have an I2C device which activates the Picoclick by firing an interrupt.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;GPIO C3&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDA&lt;/td&gt; &#xA;   &lt;td&gt;GPIO2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SCL&lt;/td&gt; &#xA;   &lt;td&gt;GPIO8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;External button actuator&lt;/h3&gt; &#xA;&lt;p&gt;The button pin can be used for external switches, door sensors, reed sensors and motion sensors. The button signal has to be tied to &lt;code&gt;+VBAT&lt;/code&gt; to actuate a button press of the Picoclick.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3_breakout_external_button.png&#34; width=&#34;500px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m using the Picoclick as an IOT-doorbell, but here an external optocoupler is needed, because my doorbell is running on AC. (Tutorial coming soon)&lt;/p&gt; &#xA;&lt;h3&gt;Extension boards&lt;/h3&gt; &#xA;&lt;p&gt;The extension boards can be connected to the Picoclick with one of the FPC connection cables. To ensure that the pinout is correct make sure that both connecters (of the extension board and the Picoclick) are facing in the same direction.&lt;/p&gt; &#xA;&lt;h4&gt;Motion sensor (PIR)&lt;/h4&gt; &#xA;&lt;p&gt;Extension board with the Panasonic EKMB1107112 PIR motion sensor. It&#39;s output pin can be used to activate the Picoclick. I&#39;ve chosen this sensor because it is an ultra low power device - it consumes only 1µA in standby, which is great for battery powered devices like the Picoclick.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/ext_board_pir_top.png&#34; width=&#34;250px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/ext_board_pir_bot.png&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Accelerometer sensor&lt;/h4&gt; &#xA;&lt;p&gt;Extension board with the LIS3DH accelerometer sensor. It&#39;s interrupt pin can be used to activate the Picoclick. The interrupt pin can be configured to be fired on any motion, a single tap or a double tap. The LIS3DH is an ultra low power sensor - it only consumes around 2µA in standby.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/ext_board_lis.png&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Light sensor&lt;/h4&gt; &#xA;&lt;p&gt;Extension board with the LTR303ALS ambient light sensor. It&#39;s interrupt pin can be used to activate the Picoclick. The thresholds can be configured via I2C. Power consumption coming soon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/ext_board_ltr.png&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Proximity sensor&lt;/h4&gt; &#xA;&lt;p&gt;Extension board with the VCNL4040 proximity and light sensor. It&#39;s interrupt pin can be used to activate the Picoclick. The thresholds can be configured via I2C. As the interrupt pin is active low there is a mosfet on the board which inverts the int state. Power consumption coming soon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/ext_board_vcnl.png&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Battery voltage monitoring of the C3&lt;/h2&gt; &#xA;&lt;p&gt;The Picoclick-C3 comes with an optimized battery monitoring feature which won&#39;t consume any power while not in use. The C3T needs about 3µA of current even if not in active state.&lt;/p&gt; &#xA;&lt;p&gt;To read the voltage of the battery you have to pull the &lt;code&gt;ADC_ENABLE_PIN&lt;/code&gt; low after which the voltage can be read for a few milliseconds. After reading the battery voltage it is useful to go back to a high state of that pin in order to read the voltage again afterwards.&lt;/p&gt; &#xA;&lt;p&gt;The function below reads the analog pin where the ADC is connected to and returns the filtered (sum of 100 divided by 100) battery voltage in volts. In the last row of code the raw analog value will be converted to a voltage value by using a multiplier and a constant linear offset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;float get_battery_voltage(){&#xA;  digitalWrite(ADC_ENABLE_PIN, LOW);&#xA;  delayMicroseconds(10);&#xA;  int sum = 0;&#xA;  for(int i=0; i&amp;lt;100; i++){&#xA;    sum = sum + analogRead(ADC_PIN);&#xA;  }&#xA;  float result = sum/100.0;&#xA;  digitalWrite(ADC_ENABLE_PIN, HIGH);&#xA;  return float(result) * (1.42) - 50;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reducing power consumption&lt;/h2&gt; &#xA;&lt;p&gt;In order to reduce the power consumption of the Picoclick the following points can be done:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable WiFi while not in use (e.g. if using LED animations only): &lt;code&gt;WiFi.mode(WIFI_OFF);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reducing CPU frequency after WiFi stuff is completed (crystal is 40MHz): &lt;code&gt;setCpuFrequencyMhz(10); //reduce to 10MHz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reducing brightness of the LEDs (can be done right after FastLED init): &lt;code&gt;FastLED.setBrightness(150);&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Board overview (Battery connections)&lt;/h2&gt; &#xA;&lt;h3&gt;C3T&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_components_description.png&#34; width=&#34;500px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C3&lt;/h3&gt; &#xA;&lt;p&gt;component description following.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3_components_description.png&#34; width=&#34;500px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flashing firmware to the ESP32&lt;/h2&gt; &#xA;&lt;h3&gt;C3T&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;- Press and hold the button during the complete flashing process! Otherwise the ESP32 will be loose power and the upload process will crash!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;- A battery or a power supply has to be applied to the battery pads (3.5v - 5.5v) in order to flash the device!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Except the above, the Picoclick behaves like a normal development board. No need to get the ESP32 into download mode or pressing any reset button.&lt;/p&gt; &#xA;&lt;h3&gt;C3&lt;/h3&gt; &#xA;&lt;p&gt;As the C3 comes with an optimized power latching circuit, the button doesn&#39;t have to be pressed the whole flashing time. But to be recognized from the PC it has to be on while hitting the upload button, else the serial console is not active. Furthermore the C3 doesn&#39;t need a connected battery. If you wanna use the Picoclick over USB only, you can short the jumper marked jumper (TODO). Don&#39;t connect a battery or an external power supply to the pads if this jumper is shorted, else you would destroy your power source or the Picoclick itself.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, as the &lt;code&gt;+VBAT&lt;/code&gt; pin is available on the FPC connector, the Picoclick C3 can be powered over the extension cable. With the FPC breakout board, the device can thus simply be powered from a breadboard.&lt;/p&gt; &#xA;&lt;h2&gt;Speed up boot process&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Following instructions are only needed for the C3T, not for the C3 as it doesn&#39;t use a separate latching GPIO.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to the latching circuit, the button press has to be longer than the boot up time of the processor, because the first task should have been executed once the button is released. For most of the use cases of the Picoclick the first task is to toggle the latch GPIO high in order to enable power hold feature of the Picoclick. If this task haven&#39;t been executed before the button is released, the Picoclick is going to standby mode without finishing its main task. Standard boot up time of the ESP32-C3 is almost 300ms. So the first task will be executed after these 300ms. This is far too long because a standard button press (especially with the metal buttons on the C3T) is around 100ms-200ms or even slightly below. Almost every task of the Picoclick would have been interrupted in this case (unless you press and hold the button...). To speed up the boot process I got familiar with the &lt;code&gt;menuconfig&lt;/code&gt; of the ESP-IDF. Actually the reason why I&#39;ve switched from the Arduino framework to ESP-IDF was that I get access to all the configs of the ESP32-C3.&lt;/p&gt; &#xA;&lt;p&gt;Things I have done so far:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set &lt;em&gt;Flash SPI mode&lt;/em&gt; from &lt;em&gt;DIO&lt;/em&gt; to &lt;em&gt;QIO&lt;/em&gt; (in Serial flasher config)&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;em&gt;Log output&lt;/em&gt; from &lt;em&gt;Info&lt;/em&gt; to &lt;em&gt;Warning&lt;/em&gt; (in component config)&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;em&gt;Bootloader log verbosity&lt;/em&gt; from &lt;em&gt;Info&lt;/em&gt; to &lt;em&gt;Warning&lt;/em&gt; (in Bootloader config)&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;em&gt;Skip image validation from power on&lt;/em&gt; (in Bootloader config)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These points result in a boot up time of around 68ms which is almost quite fantastic. The test I&#39;ve done so far were quite sufficient. If it is possible to make it even faster or if you have other ideas which could lead into the right direction then please let me know!&lt;/p&gt; &#xA;&lt;h2&gt;Power consumption&lt;/h2&gt; &#xA;&lt;h3&gt;C3T&lt;/h3&gt; &#xA;&lt;p&gt;These power measurements are done with the Otii Arc power analyzer and its dedicated software. The average and peak current can be seen in the top right corner and is based on the selected frame in the current graph. The Picoclick C3T is used as an ESP-NOW slave in this case, which is probably the fastest solution of any wireless connection.&lt;/p&gt; &#xA;&lt;p&gt;A complete Picoclick task will look like this, whereby the LED part in the end is the longest part. The whole task took about 1,7 seconds, but the transmission itself is completed after around 200ms. The other part is with disabled WiFi and only used to do some visualizations with the LED. Overall average current is below 28mA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_pc_espnow_complete.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ESP-NOW package is sent in the first 200ms. Average current is 73mA here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_pc_espnow_transmission.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As already said, the rest is just visualization stuff which will use 22mA of current in average.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_pc_espnow_ledonly_wifioff.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Probably the most interesting part is the standby current, because it&#39;s the most used state of the Picoclick. As the device doesn&#39;t use any sleep mode, we&#39;re getting as low as 3µA in this state. This is only related to the battery monitoring feature. As the voltage divider between &lt;code&gt;Vbat&lt;/code&gt; and &lt;code&gt;GND&lt;/code&gt; is &lt;code&gt;1MOhm + 250kOhm = 1.25MOhm&lt;/code&gt; the current flow through it is about 3µA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_pc_espnow_standby.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C3&lt;/h3&gt; &#xA;&lt;p&gt;coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;Battery for the Picoclick&lt;/h2&gt; &#xA;&lt;h3&gt;C3T&lt;/h3&gt; &#xA;&lt;p&gt;The optimal battery, which is shown in the picture below, is a 301012 LiPo battery (3.0mm thick, 10mm width, 12mm length). Nevertheless you can use whatever single cell LiPo battery you want. Charging current is set to 20mA, to be used with those 20-30mAh batteries. For larger capacity batteries the battery charging time will - of course - increase. For 20-30mAh charging time is about 1h - 1,5h.&lt;/p&gt; &#xA;&lt;p&gt;Below are some links for those tiny batteries (no sponsor, no affiliate, just for info):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://de.aliexpress.com/item/1005003644834180.html&#34;&gt;Aliexpress 301012&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://de.aliexpress.com/item/32794940086.html&#34;&gt;Aliexpress 401012&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebay.com/itm/333907143841&#34;&gt;eBay 301012&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_battery.JPG&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C3&lt;/h3&gt; &#xA;&lt;p&gt;As the Picoclick C3 comes with an embedded battery protection, the protection of the LiPo battery itself is redundant. Therefore you can use these tiny cells which are used by BT headsets. They come in a 401010 or 301010 package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://de.aliexpress.com/item/1005004324462178.html&#34;&gt;Aliexpress 401010&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flashing adapter with pogopins&lt;/h2&gt; &#xA;&lt;h3&gt;C3T&lt;/h3&gt; &#xA;&lt;p&gt;In order to flash boards without soldering wires or batteries to the Picoclick, I decided to print a simple flashing adapter which uses 1mm pogopins to make contact to the battery pads on the board. Just plug in the USB cable, shift the device in, press it down to the pogopins and hit the upload button. Simple overview is given below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_pogo_1.JPG&#34; width=&#34;250px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_pogo_2.JPG&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C3&lt;/h3&gt; &#xA;&lt;p&gt;Needless because the Picoclick C3 can be powered over the extension cable.&lt;/p&gt; &#xA;&lt;h2&gt;Cases&lt;/h2&gt; &#xA;&lt;h3&gt;Case 2 (round) for the C3T&lt;/h3&gt; &#xA;&lt;p&gt;Round design. Combined with two M2x8mm screws.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/makermoekoe/Picoclick-C3/main/docs/pc3t_case2.jpg&#34; width=&#34;250px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cases C3&lt;/h3&gt; &#xA;&lt;p&gt;coming soon.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;My Picoclick C3T is not shown on the device list when I plug it in the computer - what can I do?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your Picoclick is well tested before shipping, so it is probably not broken. Make sure you have connected a decent power supply to the battery connections (3.5v - 5.5v). Battery polarity is shown above. The USB-C jack is only for charging the battery and to flash the ESP32 - not for powering the device.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;p&gt;Hackster.io article by James Lewis: &lt;a href=&#34;https://www.hackster.io/news/picoclick-c3t-is-the-world-s-smallest-iot-button-and-it-has-a-risc-v-processor-7eddb2c14bda?fbclid=IwAR0fc_usR9xU9rvV6_ah3hptwWU2ObRKkqjKUgYzedlxkP4QRlh8Du6uMtc&#34;&gt;Picoclick C3T Is the World&#39;s Smallest IoT Button and It Has a RISC-V Processor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Electronics-lab.com article by Abhishek Jadhav: &lt;a href=&#34;https://www.electronics-lab.com/picoclick-c3t-iot-button-built-around-esp32-c3-risc-v-processor-supports-wifi-and-ble/&#34;&gt;Picoclick C3T IOT button built around ESP32-C3 RISC-V processor – supports WIFI and BLE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gcc-mirror/gcc</title>
    <updated>2022-10-18T01:32:19Z</updated>
    <id>tag:github.com,2022-10-18:/gcc-mirror/gcc</id>
    <link href="https://github.com/gcc-mirror/gcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This directory contains the GNU Compiler Collection (GCC).&lt;/p&gt; &#xA;&lt;p&gt;The GNU Compiler Collection is free software. See the files whose names start with COPYING for copying permission. The manuals, and some of the runtime libraries, are under different terms; see the individual source files for details.&lt;/p&gt; &#xA;&lt;p&gt;The directory INSTALL contains copies of the installation information as HTML and plain text. The source of this information is gcc/doc/install.texi. The installation information includes details of what is included in the GCC sources and what files GCC installs.&lt;/p&gt; &#xA;&lt;p&gt;See the file gcc/doc/gcc.texi (together with other files that it includes) for usage and porting information. An online readable version of the manual is in the files gcc/doc/gcc.info*.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://gcc.gnu.org/bugs/&#34;&gt;http://gcc.gnu.org/bugs/&lt;/a&gt; for how to report bugs usefully.&lt;/p&gt; &#xA;&lt;p&gt;Copyright years on GCC source files may be listed using range notation, e.g., 1987-2012, indicating that every year in the range, inclusive, is a copyrightable year that could otherwise be listed individually.&lt;/p&gt;</summary>
  </entry>
</feed>