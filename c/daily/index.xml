<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:33:04Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emukidid/swiss-gc</title>
    <updated>2022-08-21T01:33:04Z</updated>
    <id>tag:github.com,2022-08-21:/emukidid/swiss-gc</id>
    <link href="https://github.com/emukidid/swiss-gc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swiss - The swiss army knife of GameCube homebrew&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swiss&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emukidid/swiss-gc/actions/workflows/continuous-integration-workflow.yml&#34;&gt;&lt;img src=&#34;https://github.com/emukidid/swiss-gc/actions/workflows/continuous-integration-workflow.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emukidid/swiss-gc/master/#purpose&#34;&gt;Purpose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emukidid/swiss-gc/master/#main-features&#34;&gt;Main Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emukidid/swiss-gc/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emukidid/swiss-gc/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;Swiss aims to be an all-in-one homebrew utility for the Nintendo GameCube.&lt;/p&gt; &#xA;&lt;h3&gt;Main Features&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can browse the following devices&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SDSC/SDHC/SDXC Card via &lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=SDGecko&#34;&gt;SDGecko&lt;/a&gt; or &lt;a href=&#34;https://github.com/citrus3000psi/SD2SP2&#34;&gt;SD2SP2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DVD (-/+R) or original GameCube discs via Disc Drive&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=Qoob&#34;&gt;Qoob Pro&lt;/a&gt; flash memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=USBGecko&#34;&gt;USB Gecko&lt;/a&gt; remote file storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=WASP_Fusion&#34;&gt;Wasp&lt;/a&gt; / &lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=Wiikey_Fusion&#34;&gt;WKF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Samba, FSP, FTP via BBA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=Wii_Optical_Drive_Emulator&#34;&gt;Wode Jukebox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gc-forever.com/wiki/index.php?title=Ide-exi&#34;&gt;IDE-EXI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Memory cards&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shop.dansprojects.com/gc-loader.html&#34;&gt;GCLoader&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GameCube with controller&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://gc-forever.com/wiki/index.php?title=Booting_Homebrew&#34;&gt;way to boot homebrew&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emukidid/swiss-gc/releases&#34;&gt;Download latest Swiss release&lt;/a&gt; and extract its contents.&lt;/li&gt; &#xA; &lt;li&gt;Copy the compressed Swiss DOL file found in the DOL folder to the device/medium you are using to boot homebrew.&lt;/li&gt; &#xA; &lt;li&gt;Launch Swiss, browse your device and load a DOL or GCM!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: If the above steps do not work, try using the non-compressed Swiss DOL file.&lt;/p&gt; &#xA;&lt;p&gt;Another Note: Specific devices will have specific locations/executable file variants that need to be used, please check the documentation with those devices on where Swiss will need to be placed.&lt;/p&gt; &#xA;&lt;h2&gt;Navigating Swiss&lt;/h2&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;font-weight:bold&#34;&gt; &#xA;   &lt;td&gt;Control&lt;/td&gt; &#xA;   &lt;td&gt;Action&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left Joysitck or D-Pad&lt;/td&gt; &#xA;   &lt;td&gt;Navigate through the UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;Enter/Exit Bottom Menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Swiss UI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The top heading shows the version number, commit number, and revision number of Swiss.&lt;/li&gt; &#xA; &lt;li&gt;The left panes show what device you are using.&lt;/li&gt; &#xA; &lt;li&gt;The largest portion is the Swiss file browser, through which you can navigate files and folders. The top of every folder includes a &lt;code&gt;..&lt;/code&gt; option, and selecting this moves you back up a folder.&lt;/li&gt; &#xA; &lt;li&gt;The bottom pane, from the left: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Device Selection&lt;/li&gt; &#xA;   &lt;li&gt;Global Settings, Advanced Settings, and Current Game Settings&lt;/li&gt; &#xA;   &lt;li&gt;System Information, Device Info, and Credits&lt;/li&gt; &#xA;   &lt;li&gt;Return to top of file system&lt;/li&gt; &#xA;   &lt;li&gt;Restart GameCube&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>waryas/KACE</title>
    <updated>2022-08-21T01:33:04Z</updated>
    <id>tag:github.com,2022-08-21:/waryas/KACE</id>
    <link href="https://github.com/waryas/KACE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emulate Drivers in RING3 with self context mapping or unicorn&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This got leaked to EAC, they added specific check for KACE, won&#39;t update this publicly anymore, use it as a learning tool. No custom detection for it on VGK/BE yet.&lt;/p&gt; &#xA;&lt;p&gt;Kernel Anti-Cheat Emulator SOON(tm)&lt;/p&gt; &#xA;&lt;p&gt;Current state of the emulator won&#39;t properly load most drivers because most important functions aren&#39;t implemented.&lt;/p&gt; &#xA;&lt;p&gt;What KACE achieved so far:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detect a new sneaky way of EAC detecting unloaded driver (Using WDF)&lt;/li&gt; &#xA; &lt;li&gt;VGKs bruteforcing self-entry/ref of CR3&#39;s VA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What&#39;s done:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mapping of driver in usermode and start a thread on it&lt;/li&gt; &#xA; &lt;li&gt;Resolving of IAT/EAT&lt;/li&gt; &#xA; &lt;li&gt;API to monitor Write/Read to any structures&lt;/li&gt; &#xA; &lt;li&gt;SEH handling&lt;/li&gt; &#xA; &lt;li&gt;Some Anti-debug/emulation check by VGK pass now&lt;/li&gt; &#xA; &lt;li&gt;VCPU for privileged instructions&lt;/li&gt; &#xA; &lt;li&gt;Modulable memory mapping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kernel memory allocation (being done by DarkC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Emulation detection :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checking if RIP is in kernel range, can be fixed by modifying pte and exposing kernel memory, will require a vuln driver. If someone wants to implement this feature, PR welcome&lt;/li&gt; &#xA; &lt;li&gt;EPROCESS/ETHREAD/KPCR/PRCB structure are implemented, which creates the illusion that the usermode thread is a kernel thread for the emulated driver. Those structures are not entirely filled and can probably be improved, PR welcome&lt;/li&gt; &#xA; &lt;li&gt;Wrong behavior of some API, for instance RtlRandomEx has different behavior in kernel and usermode, this can be checked to check for emulation behavior, I fixed it but if you know of any difference between ntoskrnl/ntdll that can be used to check for emulation, PR!&lt;/li&gt; &#xA; &lt;li&gt;Checking if current code is in ring3/ring0, can probably sigscan for such pattern.&lt;/li&gt; &#xA; &lt;li&gt;PTE checking, can be emulated the second there&#39;s any access to cr3, we get notified anyway.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>haproxy/haproxy</title>
    <updated>2022-08-21T01:33:04Z</updated>
    <id>tag:github.com,2022-08-21:/haproxy/haproxy</id>
    <link href="https://github.com/haproxy/haproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HAProxy Load Balancer&#39;s development branch (mirror of git.haproxy.org)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The HAProxy documentation has been split into a number of different files for ease of use.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the following files depending on what you&#39;re looking for :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;INSTALL for instructions on how to build and install HAProxy&lt;/li&gt; &#xA; &lt;li&gt;BRANCHES to understand the project&#39;s life cycle and what version to use&lt;/li&gt; &#xA; &lt;li&gt;LICENSE for the project&#39;s license&lt;/li&gt; &#xA; &lt;li&gt;CONTRIBUTING for the process to follow to submit contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The more detailed documentation is located into the doc/ directory :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;doc/intro.txt for a quick introduction on HAProxy&lt;/li&gt; &#xA; &lt;li&gt;doc/configuration.txt for the configuration&#39;s reference manual&lt;/li&gt; &#xA; &lt;li&gt;doc/lua.txt for the Lua&#39;s reference manual&lt;/li&gt; &#xA; &lt;li&gt;doc/SPOE.txt for how to use the SPOE engine&lt;/li&gt; &#xA; &lt;li&gt;doc/network-namespaces.txt for how to use network namespaces under Linux&lt;/li&gt; &#xA; &lt;li&gt;doc/management.txt for the management guide&lt;/li&gt; &#xA; &lt;li&gt;doc/regression-testing.txt for how to use the regression testing suite&lt;/li&gt; &#xA; &lt;li&gt;doc/peers.txt for the peers protocol reference&lt;/li&gt; &#xA; &lt;li&gt;doc/coding-style.txt for how to adopt HAProxy&#39;s coding style&lt;/li&gt; &#xA; &lt;li&gt;doc/internals for developer-specific documentation (not all up to date)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>