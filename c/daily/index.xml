<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-23T01:30:24Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RavenSystem/esp-homekit-devices</title>
    <updated>2022-12-23T01:30:24Z</updated>
    <id>tag:github.com,2022-12-23:/RavenSystem/esp-homekit-devices</id>
    <link href="https://github.com/RavenSystem/esp-homekit-devices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project to add native Apple HomeKit support to any device with an ESP8266 chip&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HAA - Home Accessory Architect&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RavenSystem/esp-homekit-devices/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/RavenSystem/haa?color=red&amp;amp;label=release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RavenSystem/haa/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/RavenSystem/haa/total.svg?sanitize=true&#34; alt=&#34;GitHub download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/ravensystem&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/RavenSystem&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/RavenSystem.svg?style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/servers/esp-homekit-devices-594630635696553994&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/594630635696553994?style=social&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/RavenSystem/ravensystem-media/master/works-with-apple-home.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Firmware to bring native Apple HomeKit support to any device based on an ESP8266 microcontroller (ESP8266EX and ESP8285 chips).&lt;/p&gt; &#xA;&lt;p&gt;HAA supports many different &lt;a href=&#34;https://github.com/RavenSystem/esp-homekit-devices/wiki/Service-Types&#34;&gt;HomeKit service types&lt;/a&gt;, with a lot of possibilities and customizations.&lt;/p&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/RavenSystem/esp-homekit-devices/wiki&#34;&gt;Wiki&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;p&gt;In addition to this firmware, you can obtain &lt;a href=&#34;https://apps.apple.com/app/id1556105121&#34;&gt;&lt;strong&gt;HAA Manager&lt;/strong&gt;&lt;/a&gt;, the perfect App companion to manage your HAA devices, with batch updates, enable setup mode, and other extra features.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://apps.apple.com/app/id1556105121&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RavenSystem/ravensystem-media/master/badge-app-store.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And don&#39;t forget to subscribe to YouTube Channel:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCRumJzAoAnQ7dUpSnSUuuJw&#34;&gt;&lt;img width=&#34;40%&#34; src=&#34;https://raw.githubusercontent.com/RavenSystem/ravensystem-media/master/YouTube_logo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pasqualerossi/42-School-Exam-Rank-02</title>
    <updated>2022-12-23T01:30:24Z</updated>
    <id>tag:github.com,2022-12-23:/pasqualerossi/42-School-Exam-Rank-02</id>
    <link href="https://github.com/pasqualerossi/42-School-Exam-Rank-02" rel="alternate"></link>
    <summary type="html">&lt;p&gt;First 42 School Exam&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exam Details&lt;/h1&gt; &#xA;&lt;p&gt;This exam has 4 questions in total. A random question is picked from each level below.&lt;/p&gt; &#xA;&lt;p&gt;If you fail the exam, when you retake the exam next time, you will restart at Level 1 again.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Exam Norminette&lt;/h1&gt; &#xA;&lt;p&gt;There is no Norminette in this exam.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Exam Questions&lt;/h1&gt; &#xA;&lt;h3&gt;Question 1 is from Level 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - first_word&#xA;  - fizzbuzz&#xA;  - ft_strcpy&#xA;  - ft_strlen&#xA;  - ft_swap&#xA;  - putstr&#xA;  - repeat_alpha&#xA;  - rev_print&#xA;  - rot_13&#xA;  - rotone&#xA;  - search_and_replace&#xA;  - ulstr &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Question 2 is from Level 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - alpha_mirror&#xA;  - camel_to_snake&#xA;  - do_op&#xA;  - ft_atoi&#xA;  - ft_strcmp&#xA;  - ft_strcspn&#xA;  - ft_strdup&#xA;  - ft_strpbrk&#xA;  - ft_strrev&#xA;  - ft_strspn&#xA;  - inter&#xA;  - is_power_of_2&#xA;  - last_word&#xA;  - max&#xA;  - print_bits&#xA;  - reverse_bits&#xA;  - snake_to_camel&#xA;  - swap_bits&#xA;  - union&#xA;  - wdmatch &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Question 3 is from Level 3&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - add_prime_sum&#xA;  - epur_str&#xA;  - expand_str&#xA;  - ft_atoi_base&#xA;  - ft_list_size&#xA;  - ft_range&#xA;  - ft_rrange&#xA;  - hidenp&#xA;  - lcm&#xA;  - paramsum&#xA;  - pgcd&#xA;  - print_hex&#xA;  - rstr_capitalizer&#xA;  - str_capitalizer&#xA;  - tab_mult &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Question 4 is from Level 4&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - flood_fill&#xA;  - fprime&#xA;  - ft_itoa&#xA;  - ft_list_foreach&#xA;  - ft_list_remove_if&#xA;  - ft_split&#xA;  - rev_wstr&#xA;  - rostring&#xA;  - sort_int_tab&#xA;  - sort_list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Exam Login Details&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;login -&amp;gt; exam&#xA;password -&amp;gt; exam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type examshell in terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;login -&amp;gt; your 42 intra username (eg. prossi)&#xA;pasword -&amp;gt; your password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Allow photo check&lt;/p&gt; &#xA;&lt;p&gt;In the examshell, you have only the following 3 commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;status - check the time and other things&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;grademe - checking pushed exercise (moulinet)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;finish - closing examshell and finish exam&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open new terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can find your exam subject in the directory subject&#xA;Then you can see directory Rendu. It is your repository.&#xA;You must create a folder named by the project and start working.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Exam Submission Details&lt;/h1&gt; &#xA;&lt;p&gt;When you are ready to sumbit your function/program, go into Rendu and push the folder you created by doing the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;git add &#xA;   &lt;folder name&gt;&lt;/folder&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;git status&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;git commit -m &#34;any commit message you like&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;git push&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After you git push, type &lt;code&gt;grademe&lt;/code&gt; in the examshell for your project to be submitted.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Exam Practice&lt;/h1&gt; &#xA;&lt;p&gt;Practice the exam just like you would in the real exam using this tool - &lt;a href=&#34;https://github.com/JCluzet/42_EXAM&#34;&gt;https://github.com/JCluzet/42_EXAM&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LMP88959/NTSC-CRT</title>
    <updated>2022-12-23T01:30:24Z</updated>
    <id>tag:github.com,2022-12-23:/LMP88959/NTSC-CRT</id>
    <link href="https://github.com/LMP88959/NTSC-CRT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NTSC encoding/decoding in C89 using only integers and fixed point math. Can be used as an image filter for games or real-time applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NTSC-CRT&lt;/h1&gt; &#xA;&lt;h1&gt;NTSC video signal encoding / decoding emulation by EMMIR 2018-2023&lt;/h1&gt; &#xA;&lt;h3&gt;Click the image to see a YouTube video of it running in real time:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ucfPRtV6--c&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LMP88959/NTSC-CRT/main/scube.png?raw=true&#34; alt=&#34;alt text&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Click the image to see a YouTube video of it running in real time:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ucfPRtV6--c&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LMP88959/NTSC-CRT/main/kc.png?raw=true&#34; alt=&#34;alt text&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The result of going down a very deep rabbit hole. I learned a lot about analog signal processing, television, and the NTSC standard in the process. Written to be compatible with C89.&lt;/p&gt; &#xA;&lt;p&gt;Just like King&#39;s Crook (my from-scratch 3D game), this code follows the same restrictions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Everything must be done in software, no explicit usage of hardware acceleration.&lt;/li&gt; &#xA; &lt;li&gt;No floating point types or literals, everything must be integer only.&lt;/li&gt; &#xA; &lt;li&gt;No 3rd party libraries, only C standard library and OS libraries for window, input, etc.&lt;/li&gt; &#xA; &lt;li&gt;No languages used besides C.&lt;/li&gt; &#xA; &lt;li&gt;No compiler specific features and no SIMD.&lt;/li&gt; &#xA; &lt;li&gt;Single threaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This program performs relatively well and can be easily used in real-time applications to emulate NTSC output.&lt;/p&gt; &#xA;&lt;p&gt;================================================================ Feature List:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Somewhat realistic/accurate NTSC image output with bandlimited luma/chroma&lt;/li&gt; &#xA; &lt;li&gt;VSYNC and HSYNC&lt;/li&gt; &#xA; &lt;li&gt;Signal noise (optional)&lt;/li&gt; &#xA; &lt;li&gt;Interlaced and progressive scan&lt;/li&gt; &#xA; &lt;li&gt;Monochrome and full color&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;The command line program provided does not let you mess with all the settings like black/white point, brightness, saturation, and contrast.&lt;/p&gt; &#xA;&lt;p&gt;In the ntsc_crt.c file, there are two main()&#39;s. One is for a command line program and the other uses my FW library (found here &lt;a href=&#34;https://github.com/LMP88959/PL3D-KC&#34;&gt;https://github.com/LMP88959/PL3D-KC&lt;/a&gt;) to provide real-time NTSC emulation with adjustable parameters.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  cd NTSC-CRT&#xA;  &#xA;  cc -O3 -o ntsc *.c&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: ./a.out -m|o|f|p|h outwidth outheight noise infile outfile&#xA;sample usage: ./a.out -op 640 480 24 in.ppm out.ppm&#xA;sample usage: ./a.out - 832 624 0 in.ppm out.ppm&#xA;-- NOTE: the - after the program name is required&#xA;------------------------------------------------------------&#xA;  m : monochrome&#xA;  o : do not prompt when overwriting files&#xA;  f : odd field (only meaningful in progressive mode)&#xA;  p : progressive scan (rather than interlaced)&#xA;  h : print help&#xA;&#xA;by default, the image will be full color and interlaced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any questions feel free to leave a comment on YouTube OR join the King&#39;s Crook Discord server :)&lt;/p&gt; &#xA;&lt;p&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/@EMMIR_KC/videos&#34;&gt;https://www.youtube.com/@EMMIR_KC/videos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.gg/hdYctSmyQJ&#34;&gt;https://discord.gg/hdYctSmyQJ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;itch.io: &lt;a href=&#34;https://kingscrook.itch.io/kings-crook&#34;&gt;https://kingscrook.itch.io/kings-crook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to use the code in any way you would like, however, if you release anything with it, a comment in your code/README saying where you got this code would be a nice gesture but it’s not mandatory.&lt;/p&gt; &#xA;&lt;p&gt;The software is provided &#34;as is&#34;, without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thank you for your interest!&lt;/p&gt;</summary>
  </entry>
</feed>