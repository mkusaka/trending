<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-13T01:36:15Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>akopytov/sysbench</title>
    <updated>2022-08-13T01:36:15Z</updated>
    <id>tag:github.com,2022-08-13:/akopytov/sysbench</id>
    <link href="https://github.com/akopytov/sysbench" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scriptable database and system performance benchmark&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/akopytov/sysbench/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/akopytov/sysbench.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/akopytov/sysbench?branch=master&#34;&gt;&lt;img src=&#34;https://travis-ci.org/akopytov/sysbench.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagecloud.io/akopytov/sysbench?filter=debs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Packages-Debian-red.svg?style=flat&#34; alt=&#34;Debian Packages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagecloud.io/akopytov/sysbench?filter=rpms&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Packages-RPM-blue.svg?style=flat&#34; alt=&#34;RPM Packages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/akopytov/sysbench?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/akopytov/sysbench/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-generate-toc again --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#sysbench&#34;&gt;sysbench&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#installing-from-binary-packages&#34;&gt;Installing from Binary Packages&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#building-and-installing-from-source&#34;&gt;Building and Installing From Source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#build-requirements&#34;&gt;Build Requirements&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#debianubuntu&#34;&gt;Debian/Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#rhelcentos&#34;&gt;RHEL/CentOS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#fedora&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#build-and-install&#34;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#general-syntax&#34;&gt;General Syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#general-command-line-options&#34;&gt;General Command Line Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#random-numbers-options&#34;&gt;Random Numbers Options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;sysbench&lt;/h1&gt; &#xA;&lt;p&gt;sysbench is a scriptable multi-threaded benchmark tool based on LuaJIT. It is most frequently used for database benchmarks, but can also be used to create arbitrarily complex workloads that do not involve a database server.&lt;/p&gt; &#xA;&lt;p&gt;sysbench comes with the following bundled benchmarks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;oltp_*.lua&lt;/code&gt;: a collection of OLTP-like database benchmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileio&lt;/code&gt;: a filesystem-level benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cpu&lt;/code&gt;: a simple CPU benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;memory&lt;/code&gt;: a memory access benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;threads&lt;/code&gt;: a thread-based scheduler benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mutex&lt;/code&gt;: a POSIX mutex benchmark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;extensive statistics about rate and latency is available, including latency percentiles and histograms;&lt;/li&gt; &#xA; &lt;li&gt;low overhead even with thousands of concurrent threads. sysbench is capable of generating and tracking hundreds of millions of events per second;&lt;/li&gt; &#xA; &lt;li&gt;new benchmarks can be easily created by implementing pre-defined hooks in user-provided Lua scripts;&lt;/li&gt; &#xA; &lt;li&gt;can be used as a general-purpose Lua interpreter as well, simply replace &lt;code&gt;#!/usr/bin/lua&lt;/code&gt; with &lt;code&gt;#!/usr/bin/sysbench&lt;/code&gt; in your script.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing from Binary Packages&lt;/h1&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to download and install sysbench on Linux is using binary package repositories hosted by &lt;a href=&#34;https://packagecloud.io&#34;&gt;packagecloud&lt;/a&gt;. The repositories are automatically updated on each sysbench release. Currently x86_64, i386 and aarch64 binaries are available.&lt;/p&gt; &#xA;&lt;p&gt;Multiple methods to download and install sysbench packages are available and described at &lt;a href=&#34;https://packagecloud.io/akopytov/sysbench/install&#34;&gt;https://packagecloud.io/akopytov/sysbench/install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Quick install instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Debian/Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.deb.sh | sudo bash&#xA;sudo apt -y install sysbench&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RHEL/CentOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash&#xA;sudo yum -y install sysbench&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash&#x9;&#xA;sudo dnf -y install sysbench&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Arch Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo pacman -Suy sysbench&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;On macOS, up-to-date sysbench packages are available from Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Add --with-postgresql if you need PostgreSQL support&#xA;brew install sysbench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;As of sysbench 1.0 support for native Windows builds was dropped. It may be re-introduced in later releases. Currently, the recommended way to obtain sysbench on Windows is using &lt;a href=&#34;https://msdn.microsoft.com/en-us/commandline/wsl/about&#34;&gt;Windows Subsystem for Linux available in Windows 10&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installing WSL and getting into he bash prompt on Windows following Debian/Ubuntu installation instructions is sufficient. Alternatively, one can use WSL to build and install sysbench from source, or use an older sysbench release to build a native binary.&lt;/p&gt; &#xA;&lt;h1&gt;Building and Installing From Source&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to install sysbench from the official binary packages as described in &lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/#installing-from-binary-packages&#34;&gt;Installing from Binary Packages&lt;/a&gt;. Below are instruction for cases when you want to use sysbench on an architecture for which no binary packages are available.&lt;/p&gt; &#xA;&lt;h2&gt;Build Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;As of sysbench 1.0 support for native Windows builds was dropped. It may be re-introduced in later versions. Currently, the recommended way to build sysbench on Windows is using &lt;a href=&#34;https://msdn.microsoft.com/en-us/commandline/wsl/about&#34;&gt;Windows Subsystem for Linux available in Windows 10&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installing WSL and getting into bash prompt on Windows, following Debian/Ubuntu build instructions is sufficient. Alternatively, one can build and use an older 0.5 release on Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    apt -y install make automake libtool pkg-config libaio-dev&#xA;    # For MySQL support&#xA;    apt -y install libmysqlclient-dev libssl-dev&#xA;    # For PostgreSQL support&#xA;    apt -y install libpq-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RHEL/CentOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    yum -y install make automake libtool pkgconfig libaio-devel&#xA;    # For MySQL support, replace with mysql-devel on RHEL/CentOS 5&#xA;    yum -y install mariadb-devel openssl-devel&#xA;    # For PostgreSQL support&#xA;    yum -y install postgresql-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    dnf -y install make automake libtool pkgconfig libaio-devel&#xA;    # For MySQL support&#xA;    dnf -y install mariadb-devel openssl-devel&#xA;    # For PostgreSQL support&#xA;    dnf -y install postgresql-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you have Xcode (or Xcode Command Line Tools) and Homebrew installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    brew install automake libtool openssl pkg-config&#xA;    # For MySQL support&#xA;    brew install mysql&#xA;    # For PostgreSQL support&#xA;    brew install postgresql&#xA;    # openssl is not linked by Homebrew, this is to avoid &#34;ld: library not found for -lssl&#34;&#xA;    export LDFLAGS=-L/usr/local/opt/openssl/lib &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    ./autogen.sh&#xA;    # Add --with-pgsql to build with PostgreSQL support&#xA;    ./configure&#xA;    make -j&#xA;    make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will build sysbench with MySQL support by default. If you have MySQL headers and libraries in non-standard locations (and no &lt;code&gt;mysql_config&lt;/code&gt; can be found in the &lt;code&gt;PATH&lt;/code&gt;), you can specify them explicitly with &lt;code&gt;--with-mysql-includes&lt;/code&gt; and &lt;code&gt;--with-mysql-libs&lt;/code&gt; options to &lt;code&gt;./configure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To compile sysbench without MySQL support, use &lt;code&gt;--without-mysql&lt;/code&gt;. If no database drivers are available database-related scripts will not work, but other benchmarks will be functional.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;General Syntax&lt;/h2&gt; &#xA;&lt;p&gt;The general command line syntax for sysbench is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;  sysbench [options]... [testname] [command] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;testname&lt;/em&gt; is an optional name of a built-in test (e.g. &lt;code&gt;fileio&lt;/code&gt;, &lt;code&gt;memory&lt;/code&gt;, &lt;code&gt;cpu&lt;/code&gt;, etc.), or a name of one of the bundled Lua scripts (e.g. &lt;code&gt;oltp_read_only&lt;/code&gt;), or a &lt;em&gt;path&lt;/em&gt; to a custom Lua script. If no test name is specified on the command line (and thus, there is no &lt;em&gt;command&lt;/em&gt; too, as in that case it would be parsed as a &lt;em&gt;testname&lt;/em&gt;), or the test name is a dash (&#34;&lt;code&gt;-&lt;/code&gt;&#34;), then sysbench expects a Lua script to execute on its standard input.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;command&lt;/em&gt; is an optional argument that will be passed by sysbench to the built-in test or script specified with &lt;em&gt;testname&lt;/em&gt;. &lt;em&gt;command&lt;/em&gt; defines the &lt;em&gt;action&lt;/em&gt; that must be performed by the test. The list of available commands depends on a particular test. Some tests also implement their own custom commands.&lt;/p&gt; &lt;p&gt;Below is a description of typical test commands and their purpose:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;prepare&lt;/code&gt;: performs preparative actions for those tests which need them, e.g. creating the necessary files on disk for the &lt;code&gt;fileio&lt;/code&gt; test, or filling the test database for database benchmarks.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run&lt;/code&gt;: runs the actual test specified with the &lt;em&gt;testname&lt;/em&gt; argument. This command is provided by all tests.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cleanup&lt;/code&gt;: removes temporary data after the test run in those tests which create one.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;help&lt;/code&gt;: displays usage information for the test specified with the &lt;em&gt;testname&lt;/em&gt; argument. This includes the full list of commands provided by the test, so it should be used to get the available commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;options&lt;/em&gt; is a list of zero or more command line options starting with &lt;code&gt;&#39;--&#39;&lt;/code&gt;. As with commands, the &lt;code&gt;sysbench testname help&lt;/code&gt; command should be used to describe available options provided by a particular test.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/akopytov/sysbench/master/README.md#general-command-line-options&#34;&gt;General command line options&lt;/a&gt; for a description of general options provided by sysbench itself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;sysbench --help&lt;/code&gt; to display the general command line syntax and options.&lt;/p&gt; &#xA;&lt;h2&gt;General Command Line Options&lt;/h2&gt; &#xA;&lt;p&gt;The table below lists the supported common options, their descriptions and default values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Option&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Description&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Default value&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--threads&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The total number of worker threads to create&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--events&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limit for total number of requests. 0 (the default) means no limit&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limit for total execution time in seconds. 0 means no limit&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--warmup-time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute events for this many seconds with statistics disabled before the actual benchmark run with statistics enabled. This is useful when you want to exclude the initial period of a benchmark run from statistics. In many benchmarks, the initial period is not representative because CPU/database/page and other caches need some time to warm up&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Average transactions rate. The number specifies how many events (transactions) per seconds should be executed by all threads on average. 0 (default) means unlimited rate, i.e. events are executed as fast as possible&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--thread-init-timeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Wait time in seconds for worker threads to initialize&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--thread-stack-size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size of stack for each thread&lt;/td&gt; &#xA;   &lt;td&gt;32K&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--report-interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Periodically report intermediate statistics with a specified interval in seconds. Note that statistics produced by this option is per-interval rather than cumulative. 0 disables intermediate reports&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print more debug info&lt;/td&gt; &#xA;   &lt;td&gt;off&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--validate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Perform validation of test results where possible&lt;/td&gt; &#xA;   &lt;td&gt;off&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print help on general syntax or on a specified test, and exit&lt;/td&gt; &#xA;   &lt;td&gt;off&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verbosity level (0 - only critical messages, 5 - debug)&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--percentile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sysbench measures execution times for all processed requests to display statistical information like minimal, average and maximum execution time. For most benchmarks it is also useful to know a request execution time value matching some percentile (e.g. 95% percentile means we should drop 5% of the most long requests and choose the maximal value from the remaining ones). This option allows to specify a percentile rank of query execution times to count&lt;/td&gt; &#xA;   &lt;td&gt;95&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--luajit-cmd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;perform a LuaJIT control command. This option is equivalent to &lt;code&gt;luajit -j&lt;/code&gt;. See &lt;a href=&#34;http://luajit.org/running.html#opt_j&#34;&gt;LuaJIT documentation&lt;/a&gt; for more information&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that numerical values for all &lt;em&gt;size&lt;/em&gt; options (like &lt;code&gt;--thread-stack-size&lt;/code&gt; in this table) may be specified by appending the corresponding multiplicative suffix (K for kilobytes, M for megabytes, G for gigabytes and T for terabytes).&lt;/p&gt; &#xA;&lt;h2&gt;Random Numbers Options&lt;/h2&gt; &#xA;&lt;p&gt;sysbench provides a number of algorithms to generate random numbers that are distributed according to a given probability distribution. The table below lists options that can be used to control those algorithms.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Option&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Description&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Default value&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;random numbers distribution {uniform, gaussian, special, pareto, zipfian} to use by default. Benchmark scripts may choose to use either the default distribution, or specify it explictly, i.e. override the default.&lt;/td&gt; &#xA;   &lt;td&gt;special&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-seed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;seed for random number generator. When 0, the current time is used as an RNG seed.&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-spec-iter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number of iterations for the special distribution&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-spec-pct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;percentage of the entire range where &#39;special&#39; values will fall in the special distribution&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-spec-res&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;percentage of &#39;special&#39; values to use for the special distribution&lt;/td&gt; &#xA;   &lt;td&gt;75&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-pareto-h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;shape parameter for the Pareto distribution&lt;/td&gt; &#xA;   &lt;td&gt;0.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--rand-zipfian-exp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;shape parameter (theta) for the Zipfian distribution&lt;/td&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Versioning&lt;/h1&gt; &#xA;&lt;p&gt;For transparency and insight into its release cycle, and for striving to maintain backward compatibility, sysbench will be maintained under the Semantic Versioning guidelines as much as possible.&lt;/p&gt; &#xA;&lt;p&gt;Releases will be numbered with the following format:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And constructed with the following guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Breaking backward compatibility bumps the major (and resets the minor and patch)&lt;/li&gt; &#xA; &lt;li&gt;New additions without breaking backward compatibility bumps the minor (and resets the patch)&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes and misc changes bumps the patch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information on SemVer, please visit &lt;a href=&#34;http://semver.org/&#34;&gt;http://semver.org/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Windows-driver-samples</title>
    <updated>2022-08-13T01:36:15Z</updated>
    <id>tag:github.com,2022-08-13:/microsoft/Windows-driver-samples</id>
    <link href="https://github.com/microsoft/Windows-driver-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo contains driver samples prepared for use with Microsoft Visual Studio and the Windows Driver Kit (WDK). It contains both Universal Windows Driver and desktop-only driver samples.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Driver samples for Windows 11&lt;/h1&gt; &#xA;&lt;p&gt;These are the official Microsoft Windows Driver Kit (WDK) driver code samples for Windows 11. They provide a foundation for Universal Windows driver support of all hardware form factors, from phones to desktop PCs. Use these samples with Visual Studio 2022 and Windows Driver Kit (WDK) 11.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/&#34;&gt;Windows Driver Kit documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows 11 driver development&lt;/h2&gt; &#xA;&lt;p&gt;Use Visual Studio 2022 and Windows Driver Kit (WDK) 11 to build, test, and deploy your drivers. With Windows 11, the driver development environment is integrated into Visual Studio. To get started, download the driver development kits and tools for Windows 11.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.microsoft.com/windows/hardware/windows-driver-kit&#34;&gt;Download the WDK, WinDbg, and associated tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows Driver Kit (WDK)&lt;/h3&gt; &#xA;&lt;p&gt;Take a look at the compilation of the new and changed driver-related content for Windows 11. Areas of improvement include camera, print, display, Near Field Communication (NFC), WLAN, Bluetooth, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/what-s-new-in-driver-development&#34;&gt;Find out what&#39;s new in the WDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Universal Windows drivers&lt;/h3&gt; &#xA;&lt;p&gt;Write one driver that runs on Windows 11 for desktop editions, as well as other Windows editions that share a common set of interfaces.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/develop/getting-started-with-universal-drivers&#34;&gt;Getting Started with Universal Windows drivers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows Driver Frameworks&lt;/h3&gt; &#xA;&lt;p&gt;The Windows Driver Frameworks (WDF) are a set of libraries that make it simple to write high-quality device drivers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/wdf/&#34;&gt;WDF driver development guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;p&gt;Use the samples in this repo to guide your Windows driver development. Whether you&#39;re just getting started or porting an older driver to the newest version of Windows, code samples are valuable guides on how to write drivers.&lt;/p&gt; &#xA;&lt;p&gt;For information about important changes that need to be made to the WDK sample drivers before releasing device drivers based on the sample code, see the following topic:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/from-sample-code-to-production-driver&#34;&gt;From Sample Code to Production Driver - What to Change in the Samples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build your first driver&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re writing your first driver, use these exercises to get started. Each exercise is independent of the others, so you can do them in any order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/gettingstarted/writing-a-umdf-driver-based-on-a-template&#34;&gt;Write a UMDF driver based on a template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver&#34;&gt;Write a KMDF Hello World driver&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/windows-hardware/drivers/gettingstarted/writing-a-kmdf-driver-based-on-a-template&#34;&gt;Write a KMDF driver based on a template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Microsoft Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libvips/nip2</title>
    <updated>2022-08-13T01:36:15Z</updated>
    <id>tag:github.com,2022-08-13:/libvips/nip2</id>
    <link href="https://github.com/libvips/nip2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A spreadsheet-like GUI for libvips.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nip2 --- a user interface for libvips&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://build.snapcraft.io/user/jcupitt/nip2&#34;&gt;&lt;img src=&#34;https://build.snapcraft.io/badge/jcupitt/nip2.svg?sanitize=true&#34; alt=&#34;Snap Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;nip2 is a GUI for the &lt;a href=&#34;https://libvips.github.io/libvips&#34;&gt;libvips image processing library&lt;/a&gt;. It&#39;s a little like a spreadsheet: you create a set of formula connecting your objects together, and on a change nip2 recalculates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/libvips/nip2/master/screenshot.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libvips/nip2/master/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can probably install nip2 via your package manager. For Windows and OS X, you can download a binary from the &lt;a href=&#34;https://github.com/libvips/nip2/releases&#34;&gt;nip2 releases page&lt;/a&gt;. If you have to build from source, see the section below.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;nip2 comes with a 50-page manual --- press F1 or Help / Contents in the program to view it.&lt;/p&gt; &#xA;&lt;h2&gt;Building nip2 from source&lt;/h2&gt; &#xA;&lt;p&gt;In the nip2 directory you should just be able to do the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default this will install files to &lt;code&gt;/usr/local&lt;/code&gt;. Check the summary at the end of &lt;code&gt;configure&lt;/code&gt; and make sure you have all of the features you want.&lt;/p&gt; &#xA;&lt;p&gt;If you downloaded from GIT you&#39;ll need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./autogen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;first to build the configure system.&lt;/p&gt; &#xA;&lt;p&gt;nip2 needs vips, gtk2 and libxml2 at runtime and flex/bison at compile time. If you have fftw3, gsl, goffice, libgvc you get extra features.&lt;/p&gt; &#xA;&lt;h3&gt;snapcraft&lt;/h3&gt; &#xA;&lt;p&gt;Rebuild snap with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snapcraft cleanbuild &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Though it&#39;s done automatically on a push.&lt;/p&gt;</summary>
  </entry>
</feed>