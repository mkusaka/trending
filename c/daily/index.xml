<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:37:23Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>polygraphene/DirtyPipe-Android</title>
    <updated>2022-12-01T01:37:23Z</updated>
    <id>tag:github.com,2022-12-01:/polygraphene/DirtyPipe-Android</id>
    <link href="https://github.com/polygraphene/DirtyPipe-Android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dirty Pipe root exploit for Android (Pixel 6)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DirtyPipe for Android&lt;/h1&gt; &#xA;&lt;p&gt;Dirty Pipe (CVE-2022-0847) temporary root PoC for Android.&lt;/p&gt; &#xA;&lt;h1&gt;Targets&lt;/h1&gt; &#xA;&lt;p&gt;Currently only run on Pixel 6 with security patch level from 2022-02-05 to 2022-04-05. Don&#39;t use on other devices or other versions. It must crash (reboot).&lt;/p&gt; &#xA;&lt;p&gt;Dirty Pipe is finally patched on 2022 May security update on Pixel 6.&lt;/p&gt; &#xA;&lt;p&gt;There is a port to Realme GT2 Pro by @rapperskull (&lt;a href=&#34;https://github.com/polygraphene/DirtyPipe-Android/issues/12&#34;&gt;https://github.com/polygraphene/DirtyPipe-Android/issues/12&lt;/a&gt;). &lt;a href=&#34;https://forum.xda-developers.com/t/eu-model-unlock-bootloader-of-european-model.4454787/&#34;&gt;link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Certain version of Galaxy S22 is also vulnerable. But not ported yet. (&lt;a href=&#34;https://github.com/polygraphene/DirtyPipe-Android/issues/3&#34;&gt;https://github.com/polygraphene/DirtyPipe-Android/issues/3&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;WARNING&lt;/h1&gt; &#xA;&lt;p&gt;There is possiblity to brick your phone by using this tool. Use it at your own risk. Especially, don&#39;t update/install magisk from magisk app. It will cause permanent brick.&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download binary from release page.&lt;/li&gt; &#xA; &lt;li&gt;Setup adb (android platform tools).&lt;/li&gt; &#xA; &lt;li&gt;Launch run.bat (For Windows) or run.sh (For Linux/Mac) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you get &lt;code&gt;&#39;adb&#39; is not recognized ...&lt;/code&gt; errors, check to add adb to PATH.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wait several seconds (~30s) until Magisk app is automatically installed.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;adb shell&lt;/code&gt; then &lt;code&gt;/dev/.magisk/su&lt;/code&gt; (Or simply &lt;code&gt;su&lt;/code&gt;) to get root shell.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/polygraphene/DirtyPipe-Android/master/screenshot1.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About Magisk&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Don&#39;t use install button on magisk app. It will brick your phone.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t reboot even if magisk app request. It will lose temporary root.&lt;/li&gt; &#xA; &lt;li&gt;Only support root access. No magisk/zygisk modules support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Android NDK&lt;/li&gt; &#xA; &lt;li&gt;Set PATH for aarch64-linux-android31-clang&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PATH:$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run make&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How to build kernel module&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download Pixel 6 kernel source. &lt;a href=&#34;https://source.android.com/setup/build/building-kernels&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put mymod directory on kernel/private/google-modules/&lt;/li&gt; &#xA; &lt;li&gt;Apply mymod/build-script-patch.patch to kernel/private/gs-google&lt;/li&gt; &#xA; &lt;li&gt;Run build script&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# For the first build&#xA;$ LTO=thin ./build/build.sh&#xA;# For faster rebuild (skip full rebuild)&#xA;$ SKIP_MRPROPER=1 SKIP_DEFCONFIG=1 LTO=thin ./build/build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Technical details&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/polygraphene/DirtyPipe-Android/master/TECHNICAL-DETAILS.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Future work&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;Stop using insecure telnet&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make apk&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Install Magisk&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add device support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dirtypipe.cm4all.com/&#34;&gt;https://dirtypipe.cm4all.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topjohnwu/Magisk&#34;&gt;https://github.com/topjohnwu/Magisk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/j4nn/CVE-2020-0041/raw/v50g8-mroot/scripts/magisk-start.sh&#34;&gt;https://github.com/j4nn/CVE-2020-0041/blob/v50g8-mroot/scripts/magisk-start.sh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DoctorWkt/acwj</title>
    <updated>2022-12-01T01:37:23Z</updated>
    <id>tag:github.com,2022-12-01:/DoctorWkt/acwj</id>
    <link href="https://github.com/DoctorWkt/acwj" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Compiler Writing Journey&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Compiler Writing Journey&lt;/h1&gt; &#xA;&lt;p&gt;In this Github repository, I&#39;m documenting my journey to write a self-compiling compiler for a subset of the C language. I&#39;m also writing out the details so that, if you want to follow along, there will be an explanation of what I did, why, and with some references back to the theory of compilers.&lt;/p&gt; &#xA;&lt;p&gt;But not too much theory, I want this to be a practical journey.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps I&#39;ve taken so far:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/00_Introduction/Readme.md&#34;&gt;Part 0&lt;/a&gt;: Introduction to the Journey&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/01_Scanner/Readme.md&#34;&gt;Part 1&lt;/a&gt;: Introduction to Lexical Scanning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/02_Parser/Readme.md&#34;&gt;Part 2&lt;/a&gt;: Introduction to Parsing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/03_Precedence/Readme.md&#34;&gt;Part 3&lt;/a&gt;: Operator Precedence&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/04_Assembly/Readme.md&#34;&gt;Part 4&lt;/a&gt;: An Actual Compiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/05_Statements/Readme.md&#34;&gt;Part 5&lt;/a&gt;: Statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/06_Variables/Readme.md&#34;&gt;Part 6&lt;/a&gt;: Variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/07_Comparisons/Readme.md&#34;&gt;Part 7&lt;/a&gt;: Comparison Operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/08_If_Statements/Readme.md&#34;&gt;Part 8&lt;/a&gt;: If Statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/09_While_Loops/Readme.md&#34;&gt;Part 9&lt;/a&gt;: While Loops&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/10_For_Loops/Readme.md&#34;&gt;Part 10&lt;/a&gt;: For Loops&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/11_Functions_pt1/Readme.md&#34;&gt;Part 11&lt;/a&gt;: Functions, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/12_Types_pt1/Readme.md&#34;&gt;Part 12&lt;/a&gt;: Types, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/13_Functions_pt2/Readme.md&#34;&gt;Part 13&lt;/a&gt;: Functions, part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/14_ARM_Platform/Readme.md&#34;&gt;Part 14&lt;/a&gt;: Generating ARM Assembly Code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/15_Pointers_pt1/Readme.md&#34;&gt;Part 15&lt;/a&gt;: Pointers, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/16_Global_Vars/Readme.md&#34;&gt;Part 16&lt;/a&gt;: Declaring Global Variables Properly&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/17_Scaling_Offsets/Readme.md&#34;&gt;Part 17&lt;/a&gt;: Better Type Checking and Pointer Offsets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/18_Lvalues_Revisited/Readme.md&#34;&gt;Part 18&lt;/a&gt;: Lvalues and Rvalues Revisited&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/19_Arrays_pt1/Readme.md&#34;&gt;Part 19&lt;/a&gt;: Arrays, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/20_Char_Str_Literals/Readme.md&#34;&gt;Part 20&lt;/a&gt;: Character and String Literals&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/21_More_Operators/Readme.md&#34;&gt;Part 21&lt;/a&gt;: More Operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/22_Design_Locals/Readme.md&#34;&gt;Part 22&lt;/a&gt;: Design Ideas for Local Variables and Function Calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/23_Local_Variables/Readme.md&#34;&gt;Part 23&lt;/a&gt;: Local Variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/24_Function_Params/Readme.md&#34;&gt;Part 24&lt;/a&gt;: Function Parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/25_Function_Arguments/Readme.md&#34;&gt;Part 25&lt;/a&gt;: Function Calls and Arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/26_Prototypes/Readme.md&#34;&gt;Part 26&lt;/a&gt;: Function Prototypes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/27_Testing_Errors/Readme.md&#34;&gt;Part 27&lt;/a&gt;: Regression Testing and a Nice Surprise&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/28_Runtime_Flags/Readme.md&#34;&gt;Part 28&lt;/a&gt;: Adding More Run-time Flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/29_Refactoring/Readme.md&#34;&gt;Part 29&lt;/a&gt;: A Bit of Refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/30_Design_Composites/Readme.md&#34;&gt;Part 30&lt;/a&gt;: Designing Structs, Unions and Enums&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/31_Struct_Declarations/Readme.md&#34;&gt;Part 31&lt;/a&gt;: Implementing Structs, Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/32_Struct_Access_pt1/Readme.md&#34;&gt;Part 32&lt;/a&gt;: Accessing Members in a Struct&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/33_Unions/Readme.md&#34;&gt;Part 33&lt;/a&gt;: Implementing Unions and Member Access&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/34_Enums_and_Typedefs/Readme.md&#34;&gt;Part 34&lt;/a&gt;: Enums and Typedefs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/35_Preprocessor/Readme.md&#34;&gt;Part 35&lt;/a&gt;: The C Pre-Processor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/36_Break_Continue/Readme.md&#34;&gt;Part 36&lt;/a&gt;: &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/37_Switch/Readme.md&#34;&gt;Part 37&lt;/a&gt;: Switch Statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/38_Dangling_Else/Readme.md&#34;&gt;Part 38&lt;/a&gt;: Dangling Else and More&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/39_Var_Initialisation_pt1/Readme.md&#34;&gt;Part 39&lt;/a&gt;: Variable Initialisation, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/40_Var_Initialisation_pt2/Readme.md&#34;&gt;Part 40&lt;/a&gt;: Global Variable Initialisation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/41_Local_Var_Init/Readme.md&#34;&gt;Part 41&lt;/a&gt;: Local Variable Initialisation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/42_Casting/Readme.md&#34;&gt;Part 42&lt;/a&gt;: Type Casting and NULL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/43_More_Operators/Readme.md&#34;&gt;Part 43&lt;/a&gt;: Bugfixes and More Operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/44_Fold_Optimisation/Readme.md&#34;&gt;Part 44&lt;/a&gt;: Constant Folding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/45_Globals_Again/Readme.md&#34;&gt;Part 45&lt;/a&gt;: Global Variable Declarations, revisited&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/46_Void_Functions/Readme.md&#34;&gt;Part 46&lt;/a&gt;: Void Function Parameters and Scanning Changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/47_Sizeof/Readme.md&#34;&gt;Part 47&lt;/a&gt;: A Subset of &lt;code&gt;sizeof&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/48_Static/Readme.md&#34;&gt;Part 48&lt;/a&gt;: A Subset of &lt;code&gt;static&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/49_Ternary/Readme.md&#34;&gt;Part 49&lt;/a&gt;: The Ternary Operator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/50_Mop_up_pt1/Readme.md&#34;&gt;Part 50&lt;/a&gt;: Mopping Up, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/51_Arrays_pt2/Readme.md&#34;&gt;Part 51&lt;/a&gt;: Arrays, part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/52_Pointers_pt2/Readme.md&#34;&gt;Part 52&lt;/a&gt;: Pointers, part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/53_Mop_up_pt2/Readme.md&#34;&gt;Part 53&lt;/a&gt;: Mopping Up, part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/54_Reg_Spills/Readme.md&#34;&gt;Part 54&lt;/a&gt;: Spilling Registers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/55_Lazy_Evaluation/Readme.md&#34;&gt;Part 55&lt;/a&gt;: Lazy Evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/56_Local_Arrays/Readme.md&#34;&gt;Part 56&lt;/a&gt;: Local Arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/57_Mop_up_pt3/Readme.md&#34;&gt;Part 57&lt;/a&gt;: Mopping Up, part 3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/58_Ptr_Increments/Readme.md&#34;&gt;Part 58&lt;/a&gt;: Fixing Pointer Increments/Decrements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/59_WDIW_pt1/Readme.md&#34;&gt;Part 59&lt;/a&gt;: Why Doesn&#39;t It Work, part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/60_TripleTest/Readme.md&#34;&gt;Part 60&lt;/a&gt;: Passing the Triple Test&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/61_What_Next/Readme.md&#34;&gt;Part 61&lt;/a&gt;: What&#39;s Next?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/62_Cleanup/Readme.md&#34;&gt;Part 62&lt;/a&gt;: Code Cleanup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DoctorWkt/acwj/master/63_QBE/Readme.md&#34;&gt;Part 63&lt;/a&gt;: A New Backend using QBE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There isn&#39;t a schedule or timeline for the future parts, so just keep checking back here to see if I&#39;ve written any more.&lt;/p&gt; &#xA;&lt;h2&gt;Copyrights&lt;/h2&gt; &#xA;&lt;p&gt;I have borrowed some of the code, and lots of ideas, from the &lt;a href=&#34;http://www.t3x.org/subc/&#34;&gt;SubC&lt;/a&gt; compiler written by Nils M Holm. His code is in the public domain. I think that my code is substantially different enough that I can apply a different license to my code.&lt;/p&gt; &#xA;&lt;p&gt;Unless otherwise noted,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all source code and scripts are (c) Warren Toomey under the GPL3 license.&lt;/li&gt; &#xA; &lt;li&gt;all non-source code documents (e.g. English documents, image files) are (c) Warren Toomey under the Creative Commons BY-NC-SA 4.0 license.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>antirez/sds</title>
    <updated>2022-12-01T01:37:23Z</updated>
    <id>tag:github.com,2022-12-01:/antirez/sds</id>
    <link href="https://github.com/antirez/sds" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Dynamic Strings library for C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple Dynamic Strings&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes about version 2&lt;/strong&gt;: this is an updated version of SDS in an attempt to finally unify Redis, Disque, Hiredis, and the stand alone SDS versions. This version is &lt;em&gt;&lt;em&gt;NOT&lt;/em&gt; binary compatible&lt;/em&gt;* with SDS verison 1, but the API is 99% compatible so switching to the new lib should be trivial.&lt;/p&gt; &#xA;&lt;p&gt;Note that this version of SDS may be a slower with certain workloads, but uses less memory compared to V1 since header size is dynamic and depends to the string to alloc.&lt;/p&gt; &#xA;&lt;p&gt;Moreover it includes a few more API functions, notably &lt;code&gt;sdscatfmt&lt;/code&gt; which is a faster version of &lt;code&gt;sdscatprintf&lt;/code&gt; that can be used for the simpler cases in order to avoid the libc &lt;code&gt;printf&lt;/code&gt; family functions performance penalty.&lt;/p&gt; &#xA;&lt;h1&gt;How SDS strings work&lt;/h1&gt; &#xA;&lt;p&gt;SDS is a string library for C designed to augment the limited libc string handling functionalities by adding heap allocated strings that are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simpler to use.&lt;/li&gt; &#xA; &lt;li&gt;Binary safe.&lt;/li&gt; &#xA; &lt;li&gt;Computationally more efficient.&lt;/li&gt; &#xA; &lt;li&gt;But yet... Compatible with normal C string functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is achieved using an alternative design in which instead of using a C structure to represent a string, we use a binary prefix that is stored before the actual pointer to the string that is returned by SDS to the user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+--------+-------------------------------+-----------+&#xA;| Header | Binary safe C alike string... | Null term |&#xA;+--------+-------------------------------+-----------+&#xA;         |&#xA;         `-&amp;gt; Pointer returned to the user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because of meta data stored before the actual returned pointer as a prefix, and because of every SDS string implicitly adding a null term at the end of the string regardless of the actual content of the string, SDS strings work well together with C strings and the user is free to use them interchangeably with other std C string functions that access the string in read-only.&lt;/p&gt; &#xA;&lt;p&gt;SDS was a C string I developed in the past for my everyday C programming needs, later it was moved into Redis where it is used extensively and where it was modified in order to be suitable for high performance operations. Now it was extracted from Redis and forked as a stand alone project.&lt;/p&gt; &#xA;&lt;p&gt;Because of its many years life inside Redis, SDS provides both higher level functions for easy strings manipulation in C, but also a set of low level functions that make it possible to write high performance code without paying a penalty for using an higher level string library.&lt;/p&gt; &#xA;&lt;h1&gt;Advantages and disadvantages of SDS&lt;/h1&gt; &#xA;&lt;p&gt;Normally dynamic string libraries for C are implemented using a structure that defines the string. The structure has a pointer field that is managed by the string function, so it looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct yourAverageStringLibrary {&#xA;    char *buf;&#xA;    size_t len;&#xA;    ... possibly more fields here ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SDS strings as already mentioned don&#39;t follow this schema, and are instead a single allocation with a prefix that lives &lt;em&gt;before&lt;/em&gt; the address actually returned for the string.&lt;/p&gt; &#xA;&lt;p&gt;There are advantages and disadvantages with this approach over the traditional approach:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disadvantage #1&lt;/strong&gt;: many functions return the new string as value, since sometimes SDS requires to create a new string with more space, so the most SDS API calls look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;s = sdscat(s,&#34;Some more data&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see &lt;code&gt;s&lt;/code&gt; is used as input for &lt;code&gt;sdscat&lt;/code&gt; but is also set to the value returned by the SDS API call, since we are not sure if the call modified the SDS string we passed or allocated a new one. Not remembering to assign back the return value of &lt;code&gt;sdscat&lt;/code&gt; or similar functions to the variable holding the SDS string will result in a bug.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disadvantage #2&lt;/strong&gt;: if an SDS string is shared in different places in your program you have to modify all the references when you modify the string. However most of the times when you need to share SDS strings it is much better to encapsulate them into structures with a &lt;code&gt;reference count&lt;/code&gt; otherwise it is too easy to incur into memory leaks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advantage #1&lt;/strong&gt;: you can pass SDS strings to functions designed for C functions without accessing a struct member or calling a function, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;printf(&#34;%s\n&#34;, sds_string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In most other libraries this will be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;printf(&#34;%s\n&#34;, string-&amp;gt;buf);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;printf(&#34;%s\n&#34;, getStringPointer(string));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advantage #2&lt;/strong&gt;: accessing individual chars is straightforward. C is a low level language so this is an important operation in many programs. With SDS strings accessing individual chars is very natural:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;printf(&#34;%c %c\n&#34;, s[0], s[1]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With other libraries your best chance is to assign &lt;code&gt;string-&amp;gt;buf&lt;/code&gt; (or call the function to get the string pointer) to a &lt;code&gt;char&lt;/code&gt; pointer and work with this. However since the other libraries may reallocate the buffer implicitly every time you call a function that may modify the string you have to get a reference to the buffer again.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advantage #3&lt;/strong&gt;: single allocation has better cache locality. Usually when you access a string created by a string library using a structure, you have two different allocations for the structure representing the string, and the actual buffer holding the string. Over the time the buffer is reallocated, and it is likely that it ends in a totally different part of memory compared to the structure itself. Since modern programs performances are often dominated by cache misses, SDS may perform better in many workloads.&lt;/p&gt; &#xA;&lt;h1&gt;SDS basics&lt;/h1&gt; &#xA;&lt;p&gt;The type of SDS strings is just the char pointer &lt;code&gt;char *&lt;/code&gt;. However SDS defines an &lt;code&gt;sds&lt;/code&gt; type as alias of &lt;code&gt;char *&lt;/code&gt; in its header file: you should use the &lt;code&gt;sds&lt;/code&gt; type in order to make sure you remember that a given variable in your program holds an SDS string and not a C string, however this is not mandatory.&lt;/p&gt; &#xA;&lt;p&gt;This is the simplest SDS program you can write that does something:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds mystring = sdsnew(&#34;Hello World!&#34;);&#xA;printf(&#34;%s\n&#34;, mystring);&#xA;sdsfree(mystring);&#xA;&#xA;output&amp;gt; Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above small program already shows a few important things about SDS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SDS strings are created, and heap allocated, via the &lt;code&gt;sdsnew()&lt;/code&gt; function, or other similar functions that we&#39;ll see in a moment.&lt;/li&gt; &#xA; &lt;li&gt;SDS strings can be passed to &lt;code&gt;printf()&lt;/code&gt; like any other C string.&lt;/li&gt; &#xA; &lt;li&gt;SDS strings require to be freed with &lt;code&gt;sdsfree()&lt;/code&gt;, since they are heap allocated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creating SDS strings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdsnewlen(const void *init, size_t initlen);&#xA;sds sdsnew(const char *init);&#xA;sds sdsempty(void);&#xA;sds sdsdup(const sds s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many ways to create SDS strings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sdsnew&lt;/code&gt; function creates an SDS string starting from a C null terminated string. We already saw how it works in the above example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sdsnewlen&lt;/code&gt; function is similar to &lt;code&gt;sdsnew&lt;/code&gt; but instead of creating the string assuming that the input string is null terminated, it gets an additional length parameter. This way you can create a string using binary data:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char buf[3];&#xA;sds mystring;&#xA;&#xA;buf[0] = &#39;A&#39;;&#xA;buf[1] = &#39;B&#39;;&#xA;buf[2] = &#39;C&#39;;&#xA;mystring = sdsnewlen(buf,3);&#xA;printf(&#34;%s of len %d\n&#34;, mystring, (int) sdslen(mystring));&#xA;&#xA;output&amp;gt; ABC of len 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: &lt;code&gt;sdslen&lt;/code&gt; return value is casted to &lt;code&gt;int&lt;/code&gt; because it returns a &lt;code&gt;size_t&lt;/code&gt; type. You can use the right &lt;code&gt;printf&lt;/code&gt; specifier instead of casting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sdsempty()&lt;/code&gt; function creates an empty zero-length string:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds mystring = sdsempty();&#xA;printf(&#34;%d\n&#34;, (int) sdslen(mystring));&#xA;&#xA;output&amp;gt; 0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sdsdup()&lt;/code&gt; function duplicates an already existing SDS string:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s1, s2;&#xA;&#xA;s1 = sdsnew(&#34;Hello&#34;);&#xA;s2 = sdsdup(s1);&#xA;printf(&#34;%s %s\n&#34;, s1, s2);&#xA;&#xA;output&amp;gt; Hello Hello&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Obtaining the string length&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;size_t sdslen(const sds s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the examples above we already used the &lt;code&gt;sdslen&lt;/code&gt; function in order to get the length of the string. This function works like &lt;code&gt;strlen&lt;/code&gt; of the libc except that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It runs in constant time since the length is stored in the prefix of SDS strings, so calling &lt;code&gt;sdslen&lt;/code&gt; is not expensive even when called with very large strings.&lt;/li&gt; &#xA; &lt;li&gt;The function is binary safe like any other SDS string function, so the length is the true length of the string regardless of the content, there is no problem if the string includes null term characters in the middle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As an example of the binary safeness of SDS strings, we can run the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnewlen(&#34;A\0\0B&#34;,4);&#xA;printf(&#34;%d\n&#34;, (int) sdslen(s));&#xA;&#xA;output&amp;gt; 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that SDS strings are always null terminated at the end, so even in that case &lt;code&gt;s[4]&lt;/code&gt; will be a null term, however printing the string with &lt;code&gt;printf&lt;/code&gt; would result in just &lt;code&gt;&#34;A&#34;&lt;/code&gt; to be printed since libc will treat the SDS string like a normal C string.&lt;/p&gt; &#xA;&lt;h2&gt;Destroying strings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void sdsfree(sds s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The destroy an SDS string there is just to call &lt;code&gt;sdsfree&lt;/code&gt; with the string pointer. Note that even empty strings created with &lt;code&gt;sdsempty&lt;/code&gt; need to be destroyed as well otherwise they&#39;ll result into a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;sdsfree&lt;/code&gt; does not perform any operation if instead of an SDS string pointer, &lt;code&gt;NULL&lt;/code&gt; is passed, so you don&#39;t need to check for &lt;code&gt;NULL&lt;/code&gt; explicitly before calling it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (string) sdsfree(string); /* Not needed. */&#xA;sdsfree(string); /* Same effect but simpler. */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Concatenating strings&lt;/h2&gt; &#xA;&lt;p&gt;Concatenating strings to other strings is likely the operation you will end using the most with a dynamic C string library. SDS provides different functions to concatenate strings to existing strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdscatlen(sds s, const void *t, size_t len);&#xA;sds sdscat(sds s, const char *t);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The main string concatenation functions are &lt;code&gt;sdscatlen&lt;/code&gt; and &lt;code&gt;sdscat&lt;/code&gt; that are identical, the only difference being that &lt;code&gt;sdscat&lt;/code&gt; does not have an explicit length argument since it expects a null terminated string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsempty();&#xA;s = sdscat(s, &#34;Hello &#34;);&#xA;s = sdscat(s, &#34;World!&#34;);&#xA;printf(&#34;%s\n&#34;, s);&#xA;&#xA;output&amp;gt; Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes you want to cat an SDS string to another SDS string, so you don&#39;t need to specify the length, but at the same time the string does not need to be null terminated but can contain any binary data. For this there is a special function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdscatsds(sds s, const sds t);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage is straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s1 = sdsnew(&#34;aaa&#34;);&#xA;sds s2 = sdsnew(&#34;bbb&#34;);&#xA;s1 = sdscatsds(s1,s2);&#xA;sdsfree(s2);&#xA;printf(&#34;%s\n&#34;, s1);&#xA;&#xA;output&amp;gt; aaabbb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want to append any special data to the string, but you want to make sure that there are at least a given number of bytes composing the whole string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdsgrowzero(sds s, size_t len);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;sdsgrowzero&lt;/code&gt; function will do nothing if the current string length is already &lt;code&gt;len&lt;/code&gt; bytes, otherwise it will enlarge the string to &lt;code&gt;len&lt;/code&gt; just padding it with zero bytes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnew(&#34;Hello&#34;);&#xA;s = sdsgrowzero(s,6);&#xA;s[5] = &#39;!&#39;; /* We are sure this is safe because of sdsgrowzero() */&#xA;printf(&#34;%s\n&#39;, s);&#xA;&#xA;output&amp;gt; Hello!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Formatting strings&lt;/h2&gt; &#xA;&lt;p&gt;There is a special string concatenation function that accepts a &lt;code&gt;printf&lt;/code&gt; alike format specifier and cats the formatted string to the specified string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdscatprintf(sds s, const char *fmt, ...) {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s;&#xA;int a = 10, b = 20;&#xA;s = sdsnew(&#34;The sum is: &#34;);&#xA;s = sdscatprintf(s,&#34;%d+%d = %d&#34;,a,b,a+b);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Often you need to create SDS string directly from &lt;code&gt;printf&lt;/code&gt; format specifiers. Because &lt;code&gt;sdscatprintf&lt;/code&gt; is actually a function that concatenates strings, all you need is to concatenate your string to an empty string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *name = &#34;Anna&#34;;&#xA;int loc = 2500;&#xA;sds s;&#xA;s = sdscatprintf(sdsempty(), &#34;%s wrote %d lines of LISP\n&#34;, name, loc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;sdscatprintf&lt;/code&gt; in order to convert numbers into SDS strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int some_integer = 100;&#xA;sds num = sdscatprintf(sdsempty(),&#34;%d\n&#34;, some_integer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However this is slow and we have a special function to make it efficient.&lt;/p&gt; &#xA;&lt;h2&gt;Fast number to string operations&lt;/h2&gt; &#xA;&lt;p&gt;Creating an SDS string from an integer may be a common operation in certain kind of programs, and while you may do this with &lt;code&gt;sdscatprintf&lt;/code&gt; the performance hit is big, so SDS provides a specialized function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdsfromlonglong(long long value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsfromlonglong(10000);&#xA;printf(&#34;%d\n&#34;, (int) sdslen(s));&#xA;&#xA;output&amp;gt; 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trimming strings and getting ranges&lt;/h2&gt; &#xA;&lt;p&gt;String trimming is a common operation where a set of characters are removed from the left and the right of the string. Another useful operation regarding strings is the ability to just take a range out of a larger string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void sdstrim(sds s, const char *cset);&#xA;void sdsrange(sds s, int start, int end);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SDS provides both the operations with the &lt;code&gt;sdstrim&lt;/code&gt; and &lt;code&gt;sdsrange&lt;/code&gt; functions. However note that both functions work differently than most functions modifying SDS strings since the return value is void: basically those functions always destructively modify the passed SDS string, never allocating a new one, because both trimming and ranges will never need more room: the operations can only remove characters from the original string.&lt;/p&gt; &#xA;&lt;p&gt;Because of this behavior, both functions are fast and don&#39;t involve reallocation.&lt;/p&gt; &#xA;&lt;p&gt;This is an example of string trimming where newlines and spaces are removed from an SDS strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnew(&#34;         my string\n\n  &#34;);&#xA;sdstrim(s,&#34; \n&#34;);&#xA;printf(&#34;-%s-\n&#34;,s);&#xA;&#xA;output&amp;gt; -my string-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically &lt;code&gt;sdstrim&lt;/code&gt; takes the SDS string to trim as first argument, and a null terminated set of characters to remove from left and right of the string. The characters are removed as long as they are not interrupted by a character that is not in the list of characters to trim: this is why the space between &lt;code&gt;&#34;my&#34;&lt;/code&gt; and &lt;code&gt;&#34;string&#34;&lt;/code&gt; was preserved in the above example.&lt;/p&gt; &#xA;&lt;p&gt;Taking ranges is similar, but instead to take a set of characters, it takes to indexes, representing the start and the end as specified by zero-based indexes inside the string, to obtain the range that will be retained.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnew(&#34;Hello World!&#34;);&#xA;sdsrange(s,1,4);&#xA;printf(&#34;-%s-\n&#34;);&#xA;&#xA;output&amp;gt; -ello-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Indexes can be negative to specify a position starting from the end of the string, so that &lt;code&gt;-1&lt;/code&gt; means the last character, &lt;code&gt;-2&lt;/code&gt; the penultimate, and so forth:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnew(&#34;Hello World!&#34;);&#xA;sdsrange(s,6,-1);&#xA;printf(&#34;-%s-\n&#34;);&#xA;sdsrange(s,0,-2);&#xA;printf(&#34;-%s-\n&#34;);&#xA;&#xA;output&amp;gt; -World!-&#xA;output&amp;gt; -World-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sdsrange&lt;/code&gt; is very useful when implementing networking servers processing a protocol or sending messages. For example the following code is used implementing the write handler of the Redis Cluster message bus between nodes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void clusterWriteHandler(..., int fd, void *privdata, ...) {&#xA;    clusterLink *link = (clusterLink*) privdata;&#xA;    ssize_t nwritten = write(fd, link-&amp;gt;sndbuf, sdslen(link-&amp;gt;sndbuf));&#xA;    if (nwritten &amp;lt;= 0) {&#xA;        /* Error handling... */&#xA;    }&#xA;    sdsrange(link-&amp;gt;sndbuf,nwritten,-1);&#xA;    ... more code here ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every time the socket of the node we want to send the message to is writable we attempt to write as much bytes as possible, and we use &lt;code&gt;sdsrange&lt;/code&gt; in order to remove from the buffer what was already sent.&lt;/p&gt; &#xA;&lt;p&gt;The function to queue new messages to send to some node in the cluster will simply use &lt;code&gt;sdscatlen&lt;/code&gt; in order to put more data in the send buffer.&lt;/p&gt; &#xA;&lt;p&gt;Note that the Redis Cluster bus implements a binary protocol, but since SDS is binary safe this is not a problem, so the goal of SDS is not just to provide an high level string API for the C programmer but also dynamically allocated buffers that are easy to manage.&lt;/p&gt; &#xA;&lt;h2&gt;String copying&lt;/h2&gt; &#xA;&lt;p&gt;The most dangerous and infamus function of the standard C library is probably &lt;code&gt;strcpy&lt;/code&gt;, so perhaps it is funny how in the context of better designed dynamic string libraries the concept of copying strings is almost irrelevant. Usually what you do is to create strings with the content you want, or concatenating more content as needed.&lt;/p&gt; &#xA;&lt;p&gt;However SDS features a string copy function that is useful in performance critical code sections, however I guess its practical usefulness is limited as the function never managed to get called in the context of the 50k lines of code composing the Redis code base.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdscpylen(sds s, const char *t, size_t len);&#xA;sds sdscpy(sds s, const char *t);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The string copy function of SDS is called &lt;code&gt;sdscpylen&lt;/code&gt; and works like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;s = sdsnew(&#34;Hello World!&#34;);&#xA;s = sdscpylen(s,&#34;Hello Superman!&#34;,15);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see the function receives as input the SDS string &lt;code&gt;s&lt;/code&gt;, but also returns an SDS string. This is common to many SDS functions that modify the string: this way the returned SDS string may be the original one modified or a newly allocated one (for example if there was not enough room in the old SDS string).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;sdscpylen&lt;/code&gt; will simply replace what was in the old SDS string with the new data you pass using the pointer and length argument. There is a similar function called &lt;code&gt;sdscpy&lt;/code&gt; that does not need a length but expects a null terminated string instead.&lt;/p&gt; &#xA;&lt;p&gt;You may wonder why it makes sense to have a string copy function in the SDS library, since you can simply create a new SDS string from scratch with the new value instead of copying the value in an existing SDS string. The reason is efficiency: &lt;code&gt;sdsnewlen&lt;/code&gt; will always allocate a new string while &lt;code&gt;sdscpylen&lt;/code&gt; will try to reuse the existing string if there is enough room to old the new content specified by the user, and will allocate a new one only if needed.&lt;/p&gt; &#xA;&lt;h2&gt;Quoting strings&lt;/h2&gt; &#xA;&lt;p&gt;In order to provide consistent output to the program user, or for debugging purposes, it is often important to turn a string that may contain binary data or special characters into a quoted string. Here for quoted string we mean the common format for String literals in programming source code. However today this format is also part of the well known serialization formats like JSON and CSV, so it definitely escaped the simple goal of representing literals strings in the source code of programs.&lt;/p&gt; &#xA;&lt;p&gt;An example of quoted string literal is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;&#34;\x00Hello World\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first byte is a zero byte while the last byte is a newline, so there are two non alphanumerical characters inside the string.&lt;/p&gt; &#xA;&lt;p&gt;SDS uses a concatenation function for this goal, that concatenates to an existing string the quoted string representation of the input string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdscatrepr(sds s, const char *p, size_t len);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;scscatrepr&lt;/code&gt; (where &lt;code&gt;repr&lt;/code&gt; means &lt;em&gt;representation&lt;/em&gt;) follows the usualy SDS string function rules accepting a char pointer and a length, so you can use it with SDS strings, normal C strings by using strlen() as &lt;code&gt;len&lt;/code&gt; argument, or binary data. The following is an example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s1 = sdsnew(&#34;abcd&#34;);&#xA;sds s2 = sdsempty();&#xA;s[1] = 1;&#xA;s[2] = 2;&#xA;s[3] = &#39;\n&#39;;&#xA;s2 = sdscatrepr(s2,s1,sdslen(s1));&#xA;printf(&#34;%s\n&#34;, s2);&#xA;&#xA;output&amp;gt; &#34;a\x01\x02\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the rules &lt;code&gt;sdscatrepr&lt;/code&gt; uses for conversion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;\&lt;/code&gt; and &lt;code&gt;&#34;&lt;/code&gt; are quoted with a backslash.&lt;/li&gt; &#xA; &lt;li&gt;It quotes special characters &lt;code&gt;&#39;\n&#39;&lt;/code&gt;, &lt;code&gt;&#39;\r&#39;&lt;/code&gt;, &lt;code&gt;&#39;\t&#39;&lt;/code&gt;, &lt;code&gt;&#39;\a&#39;&lt;/code&gt; and &lt;code&gt;&#39;\b&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;All the other non printable characters not passing the &lt;code&gt;isprint&lt;/code&gt; test are quoted in &lt;code&gt;\x..&lt;/code&gt; form, that is: backslash followed by &lt;code&gt;x&lt;/code&gt; followed by two digit hex number representing the character byte value.&lt;/li&gt; &#xA; &lt;li&gt;The function always adds initial and final double quotes characters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is an SDS function that is able to perform the reverse conversion and is documented in the &lt;em&gt;Tokenization&lt;/em&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Tokenization&lt;/h2&gt; &#xA;&lt;p&gt;Tokenization is the process of splitting a larger string into smaller strings. In this specific case, the split is performed specifying another string that acts as separator. For example in the following string there are two substrings that are separated by the &lt;code&gt;|-|&lt;/code&gt; separator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo|-|bar|-|zap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A more common separator that consists of a single character is the comma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo,bar,zap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In many progrems it is useful to process a line in order to obtain the sub strings it is composed of, so SDS provides a function that returns an array of SDS strings given a string and a separator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count);&#xA;void sdsfreesplitres(sds *tokens, int count);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As usually the function can work with both SDS strings or normal C strings. The first two arguments &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; specify the string to tokenize, and the other two arguments &lt;code&gt;sep&lt;/code&gt; and &lt;code&gt;seplen&lt;/code&gt; the separator to use during the tokenization. The final argument &lt;code&gt;count&lt;/code&gt; is a pointer to an integer that will be set to the number of tokens (sub strings) returned.&lt;/p&gt; &#xA;&lt;p&gt;The return value is a heap allocated array of SDS strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds *tokens;&#xA;int count, j;&#xA;&#xA;sds line = sdsnew(&#34;Hello World!&#34;);&#xA;tokens = sdssplitlen(line,sdslen(line),&#34; &#34;,1,&amp;amp;count);&#xA;&#xA;for (j = 0; j &amp;lt; count; j++)&#xA;    printf(&#34;%s\n&#34;, tokens[j]);&#xA;sdsfreesplitres(tokens,count);&#xA;&#xA;output&amp;gt; Hello&#xA;output&amp;gt; World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The returned array is heap allocated, and the single elements of the array are normal SDS strings. You can free everything calling &lt;code&gt;sdsfreesplitres&lt;/code&gt; as in the example. Alternativey you are free to release the array yourself using the &lt;code&gt;free&lt;/code&gt; function and use and/or free the individual SDS strings as usually.&lt;/p&gt; &#xA;&lt;p&gt;A valid approach is to set the array elements you reused in some way to &lt;code&gt;NULL&lt;/code&gt;, and use &lt;code&gt;sdsfreesplitres&lt;/code&gt; to free all the rest.&lt;/p&gt; &#xA;&lt;h2&gt;Command line oriented tokenization&lt;/h2&gt; &#xA;&lt;p&gt;Splitting by a separator is a useful operation, but usually it is not enough to perform one of the most common tasks involving some non trivial string manipulation, that is, implementing a &lt;strong&gt;Command Line Interface&lt;/strong&gt; for a program.&lt;/p&gt; &#xA;&lt;p&gt;This is why SDS also provides an additional function that allows you to split arguments provided by the user via the keyboard in an interactive manner, or via a file, network, or any other mean, into tokens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds *sdssplitargs(const char *line, int *argc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;sdssplitargs&lt;/code&gt; function returns an array of SDS strings exactly like &lt;code&gt;sdssplitlen&lt;/code&gt;. The function to free the result is also identical, and is &lt;code&gt;sdsfreesplitres&lt;/code&gt;. The difference is in the way the tokenization is performed.&lt;/p&gt; &#xA;&lt;p&gt;For example if the input is the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;call &#34;Sabrina&#34;    and &#34;Mark Smith\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function will return the following tokens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;call&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Sabrina&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;and&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Mark Smith\n&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Basically different tokens need to be separated by one or more spaces, and every single token can also be a quoted string in the same format that &lt;code&gt;sdscatrepr&lt;/code&gt; is able to emit.&lt;/p&gt; &#xA;&lt;h2&gt;String joining&lt;/h2&gt; &#xA;&lt;p&gt;There are two functions doing the reverse of tokenization by joining strings into a single one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdsjoin(char **argv, int argc, char *sep, size_t seplen);&#xA;sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The two functions take as input an array of strings of length &lt;code&gt;argc&lt;/code&gt; and a separator and its length, and produce as output an SDS string consisting of all the specified strings separated by the specified separator.&lt;/p&gt; &#xA;&lt;p&gt;The difference between &lt;code&gt;sdsjoin&lt;/code&gt; and &lt;code&gt;sdsjoinsds&lt;/code&gt; is that the former accept C null terminated strings as input while the latter requires all the strings in the array to be SDS strings. However because of this only &lt;code&gt;sdsjoinsds&lt;/code&gt; is able to deal with binary data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *tokens[3] = {&#34;foo&#34;,&#34;bar&#34;,&#34;zap&#34;};&#xA;sds s = sdsjoin(tokens,3,&#34;|&#34;,1);&#xA;printf(&#34;%s\n&#34;, s);&#xA;&#xA;output&amp;gt; foo|bar|zap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;All the SDS functions that return an SDS pointer may also return &lt;code&gt;NULL&lt;/code&gt; on out of memory, this is basically the only check you need to perform.&lt;/p&gt; &#xA;&lt;p&gt;However many modern C programs handle out of memory simply aborting the program so you may want to do this as well by wrapping &lt;code&gt;malloc&lt;/code&gt; and other related memory allocation calls directly.&lt;/p&gt; &#xA;&lt;h1&gt;SDS internals and advanced usage&lt;/h1&gt; &#xA;&lt;p&gt;At the very beginning of this documentation it was explained how SDS strings are allocated, however the prefix stored before the pointer returned to the user was classified as an &lt;em&gt;header&lt;/em&gt; without further details. For an advanced usage it is better to dig more into the internals of SDS and show the structure implementing it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct sdshdr {&#xA;    int len;&#xA;    int free;&#xA;    char buf[];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the structure may resemble the one of a conventional string library, however the &lt;code&gt;buf&lt;/code&gt; field of the structure is different since it is not a pointer but an array without any length declared, so &lt;code&gt;buf&lt;/code&gt; actually points at the first byte just after the &lt;code&gt;free&lt;/code&gt; integer. So in order to create an SDS string we just allocate a piece of memory that is as large as the &lt;code&gt;sdshdr&lt;/code&gt; structure plus the length of our string, plus an additional byte for the mandatory null term that every SDS string has.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;len&lt;/code&gt; field of the structure is quite obvious, and is the current length of the SDS string, always computed every time the string is modified via SDS function calls. The &lt;code&gt;free&lt;/code&gt; field instead represents the amount of free memory in the current allocation that can be used to store more characters.&lt;/p&gt; &#xA;&lt;p&gt;So the actual SDS layout is this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+------------+------------------------+-----------+---------------\&#xA;| Len | Free | H E L L O W O R L D \n | Null term |  Free space   \&#xA;+------------+------------------------+-----------+---------------\&#xA;             |&#xA;             `-&amp;gt; Pointer returned to the user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may wonder why there is some free space at the end of the string, it looks like a waste. Actually after a new SDS string is created, there is no free space at the end at all: the allocation will be as small as possible to just hold the header, string, and null term. However other access patterns will create extra free space at the end, like in the following program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;s = sdsempty();&#xA;s = sdscat(s,&#34;foo&#34;);&#xA;s = sdscat(s,&#34;bar&#34;);&#xA;s = sdscat(s,&#34;123&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since SDS tries to be efficient it can&#39;t afford to reallocate the string every time new data is appended, since this would be very inefficient, so it uses the &lt;strong&gt;preallocation of some free space&lt;/strong&gt; every time you enlarge the string.&lt;/p&gt; &#xA;&lt;p&gt;The preallocation algorithm used is the following: every time the string is reallocated in order to hold more bytes, the actual allocation size performed is two times the minimum required. So for instance if the string currently is holding 30 bytes, and we concatenate 2 more bytes, instead of allocating 32 bytes in total SDS will allocate 64 bytes.&lt;/p&gt; &#xA;&lt;p&gt;However there is an hard limit to the allocation it can perform ahead, and is defined by &lt;code&gt;SDS_MAX_PREALLOC&lt;/code&gt;. SDS will never allocate more than 1MB of additional space (by default, you can change this default).&lt;/p&gt; &#xA;&lt;h2&gt;Shrinking strings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds sdsRemoveFreeSpace(sds s);&#xA;size_t sdsAllocSize(sds s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes there are class of programs that require to use very little memory. After strings concatenations, trimming, ranges, the string may end having a non trivial amount of additional space at the end.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to resize a string back to its minimal size in order to hold the current content by using the function &lt;code&gt;sdsRemoveFreeSpace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;s = sdsRemoveFreeSpace(s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a function that can be used in order to get the size of the total allocation for a given string, and is called &lt;code&gt;sdsAllocSize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnew(&#34;Ladies and gentlemen&#34;);&#xA;s = sdscat(s,&#34;... welcome to the C language.&#34;);&#xA;printf(&#34;%d\n&#34;, (int) sdsAllocSize(s));&#xA;s = sdsRemoveFreeSpace(s);&#xA;printf(&#34;%d\n&#34;, (int) sdsAllocSize(s));&#xA;&#xA;output&amp;gt; 109&#xA;output&amp;gt; 59&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: SDS Low level API use cammelCase in order to warn you that you are playing with the fire.&lt;/p&gt; &#xA;&lt;h2&gt;Manual modifications of SDS strings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;void sdsupdatelen(sds s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes you may want to hack with an SDS string manually, without using SDS functions. In the following example we implicitly change the length of the string, however we want the logical length to reflect the null terminated C string.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;sdsupdatelen&lt;/code&gt; does just that, updating the internal length information for the specified string to the length obtained via &lt;code&gt;strlen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sds s = sdsnew(&#34;foobar&#34;);&#xA;s[2] = &#39;\0&#39;;&#xA;printf(&#34;%d\n&#34;, sdslen(s));&#xA;sdsupdatelen(s);&#xA;printf(&#34;%d\n&#34;, sdslen(s));&#xA;&#xA;output&amp;gt; 6&#xA;output&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sharing SDS strings&lt;/h2&gt; &#xA;&lt;p&gt;If you are writing a program in which it is advantageous to share the same SDS string across different data structures, it is absolutely advised to encapsulate SDS strings into structures that remember the number of references of the string, with functions to increment and decrement the number of references.&lt;/p&gt; &#xA;&lt;p&gt;This approach is a memory management technique called &lt;em&gt;reference counting&lt;/em&gt; and in the context of SDS has two advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is less likely that you&#39;ll create memory leaks or bugs due to non freeing SDS strings or freeing already freed strings.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll not need to update every reference to an SDS string when you modify it (since the new SDS string may point to a different memory location).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While this is definitely a very common programming technique I&#39;ll outline the basic ideas here. You create a structure like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct mySharedString {&#xA;    int refcount;&#xA;    sds string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When new strings are created, the structure is allocated and returned with &lt;code&gt;refcount&lt;/code&gt; set to 1. The you have two functions to change the reference count of the shared string:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;incrementStringRefCount&lt;/code&gt; will simply increment &lt;code&gt;refcount&lt;/code&gt; of 1 in the structure. It will be called every time you add a reference to the string on some new data structure, variable, or whatever.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;decrementStringRefCount&lt;/code&gt; is used when you remove a reference. This function is however special since when the &lt;code&gt;refcount&lt;/code&gt; drops to zero, it automatically frees the SDS string, and the &lt;code&gt;mySharedString&lt;/code&gt; structure as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interactions with heap checkers&lt;/h2&gt; &#xA;&lt;p&gt;Because SDS returns pointers into the middle of memory chunks allocated with &lt;code&gt;malloc&lt;/code&gt;, heap checkers may have issues, however:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The popular Valgrind program will detect SDS strings are &lt;em&gt;possibly lost&lt;/em&gt; memory and never as &lt;em&gt;definitely lost&lt;/em&gt;, so it is easy to tell if there is a leak or not. I used Valgrind with Redis for years and every real leak was consistently detected as &#34;definitely lost&#34;.&lt;/li&gt; &#xA; &lt;li&gt;OSX instrumentation tools don&#39;t detect SDS strings as leaks but are able to correctly handle pointers pointing to the middle of memory chunks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Zero copy append from syscalls&lt;/h2&gt; &#xA;&lt;p&gt;At this point you should have all the tools to dig more inside the SDS library by reading the source code, however there is an interesting pattern you can mount using the low level API exported, that is used inside Redis in order to improve performances of the networking code.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;sdsIncrLen()&lt;/code&gt; and &lt;code&gt;sdsMakeRoomFor()&lt;/code&gt; it is possible to mount the following schema, to cat bytes coming from the kernel to the end of an sds string without copying into an intermediate buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;oldlen = sdslen(s);&#xA;s = sdsMakeRoomFor(s, BUFFER_SIZE);&#xA;nread = read(fd, s+oldlen, BUFFER_SIZE);&#xA;... check for nread &amp;lt;= 0 and handle it ...&#xA;sdsIncrLen(s, nread);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sdsIncrLen&lt;/code&gt; is documented inside the source code of &lt;code&gt;sds.c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Embedding SDS into your project&lt;/h1&gt; &#xA;&lt;p&gt;This is as simple as copying the following files inside your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sds.c&lt;/li&gt; &#xA; &lt;li&gt;sds.h&lt;/li&gt; &#xA; &lt;li&gt;sdsalloc.h&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The source code is small and every C99 compiler should deal with it without issues.&lt;/p&gt; &#xA;&lt;h1&gt;Using a different allocator for SDS&lt;/h1&gt; &#xA;&lt;p&gt;Internally sds.c uses the allocator defined into &lt;code&gt;sdsalloc.h&lt;/code&gt;. This header file just defines macros for malloc, realloc and free, and by default libc &lt;code&gt;malloc()&lt;/code&gt;, &lt;code&gt;realloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt; are used. Just edit this file in order to change the name of the allocation functions.&lt;/p&gt; &#xA;&lt;p&gt;The program using SDS can call the SDS allocator in order to manipulate SDS pointers (usually not needed but sometimes the program may want to do advanced things) by using the API exported by SDS in order to call the allocator used. This is especially useful when the program linked to SDS is using a different allocator compared to what SDS is using.&lt;/p&gt; &#xA;&lt;p&gt;The API to access the allocator used by SDS is composed of three functions: &lt;code&gt;sds_malloc()&lt;/code&gt;, &lt;code&gt;sds_realloc()&lt;/code&gt; and &lt;code&gt;sds_free()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits and license&lt;/h1&gt; &#xA;&lt;p&gt;SDS was created by Salvatore Sanfilippo and is released under the BDS two clause license. See the LICENSE file in this source distribution for more information.&lt;/p&gt; &#xA;&lt;p&gt;Oran Agra improved SDS version 2 by adding dynamic sized headers in order to save memory for small strings and allow strings greater than 4GB.&lt;/p&gt;</summary>
  </entry>
</feed>