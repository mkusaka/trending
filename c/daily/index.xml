<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-31T01:30:40Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>unikraft/unikraft</title>
    <updated>2023-03-31T01:30:40Z</updated>
    <id>tag:github.com,2023-03-31:/unikraft/unikraft</id>
    <link href="https://github.com/unikraft/unikraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unikraft is an automated system for building specialized OSes known as unikernels. Unikraft can be configured to be POSIX-compliant. (Core repository)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://unikraft.org&#34;&gt;&lt;img src=&#34;http://unikraft.org/assets/imgs/unikraft-logo-small.png&#34; alt=&#34;Unikraft&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/unikraft/unikraft/tree/RELEASE-0.12.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-v0.12.0%20(Epimetheus)-%23EC591A&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unikraft/unikraft/raw/staging/COPYING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=BSD-3&amp;amp;color=%23385177&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bit.ly/UnikraftDiscord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/762976922531528725.svg?label=discord&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unikraft/unikraft/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/unikraft/unikraft&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Unleash the Power of Unikernels!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://unikraft.org/assets/imgs/monkey-business.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; height=&#34;250&#34; src=&#34;http://unikraft.org/assets/imgs/how-unikraft-works.svg?sanitize=true&#34; alt=&#34;How Unikraft works&#34;&gt; &#xA;&lt;p&gt;Unikraft is an automated system for building specialized POSIX-compliant OSes known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Unikernel&#34;&gt;unikernels&lt;/a&gt;; these images are tailored to the needs of specific applications. Unikraft is based around the concept of small, modular libraries, each providing a part of the functionality commonly found in an operating system (e.g., memory allocation, scheduling, filesystem support, network stack, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Unikraft supports multiple target platforms (e.g., Xen, KVM, and Linux userspace) so that it is possible to build multiple images, one for each platform, for a single application &lt;em&gt;without&lt;/em&gt; requiring the application developer to do any additional, platform-specific work. In all, Unikraft is able to build specialized OSes and unikernels targeted at specific applications without requiring the time-consuming, expert work that is required today to build such images.&lt;/p&gt; &#xA;&lt;h2&gt;Typical Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;Unikraft is a new system for ultra-light virtualization of your services in the cloud or at the edge, as well as extremely efficient software stacks to run bare metal on embedded devices. Smaller, quicker, and way more efficient than conventional systems:&lt;/p&gt; &#xA;&lt;p&gt;‚ö° &lt;strong&gt;Cold boot virtual machines in a fraction of a second&lt;/strong&gt; While Linux-based systems might take tens of seconds to boot, Unikraft will be up in a blink.&lt;/p&gt; &#xA;&lt;p&gt;üìà &lt;strong&gt;Deploy significantly more instances per physical machine&lt;/strong&gt; Don‚Äôt waste CPU cycles on unneeded functionality ‚Äì focus on your users&#39; needs.&lt;/p&gt; &#xA;&lt;p&gt;üìâ &lt;strong&gt;Drastic reductions in memory consumption&lt;/strong&gt; With all your applications and data strongly separated into ultra light-weight virtual machines, scaling becomes a breeze.&lt;/p&gt; &#xA;&lt;p&gt;üõ°Ô∏è &lt;strong&gt;Ready for mission critical deployments&lt;/strong&gt; Focus your trust on a minimal set of required components, significantly reduce your service&#39;s attack surface, and minimize certification costs.&lt;/p&gt; &#xA;&lt;p&gt;üèé &lt;strong&gt;Outstanding performance&lt;/strong&gt; Specializing the OS to meet your application&#39;s needs is the key to achieving superior performance, making you ready to drive your infrastructure to the peak.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures and Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Unikraft supports the construction of multiple architectures, platforms, and images. The following tables give an overview of the current support.&lt;/p&gt; &#xA;&lt;h3&gt;üí° Architecture Support&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unikraft/unikraft/tree/staging/arch/x86/x86_64&#34;&gt;&lt;code&gt;x86_64&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unikraft/unikraft/tree/staging/arch/arm/arm&#34;&gt;&lt;code&gt;armv7&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/unikraft/unikraft/tree/staging/arch/arm/arm64&#34;&gt;&lt;code&gt;aarch64&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RISC-V&lt;/td&gt; &#xA;   &lt;td&gt;‚öôÔ∏è &lt;a href=&#34;https://github.com/unikraft/unikraft/issues/60&#34;&gt;Issue #60&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üíª Platform Support&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;x86_64&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;arm32&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;arm64&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unikraft/unikraft/tree/staging/plat/linuxu&#34;&gt;Linux Userspace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://builds.unikraft.io/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-x86_64-linuxu&#34;&gt;&lt;img src=&#34;https://builds.unikraft.io/api/v1/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-x86_64-linuxu/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://builds.unikraft.io/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-arm64-linuxu&#34;&gt;&lt;img src=&#34;https://builds.unikraft.io/api/v1/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-arm64-linuxu/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unikraft/unikraft/tree/staging/plat/kvm&#34;&gt;Linux KVM&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://builds.unikraft.io/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-x86_64-kvm&#34;&gt;&lt;img src=&#34;https://builds.unikraft.io/api/v1/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-x86_64-kvm/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://builds.unikraft.io/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-arm64-kvm&#34;&gt;&lt;img src=&#34;https://builds.unikraft.io/api/v1/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-arm64-kvm/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unikraft/unikraft/tree/staging/plat/xen&#34;&gt;Xen Hypervisor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://builds.unikraft.io/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-x86_64-xen&#34;&gt;&lt;img src=&#34;https://builds.unikraft.io/api/v1/teams/unikraft/pipelines/unikraft-staging/jobs/compile-helloworld-x86_64-xen/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚öôÔ∏è &lt;a href=&#34;https://github.com/unikraft/unikraft/issues/34&#34;&gt;Issue #34&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚öôÔ∏è &lt;a href=&#34;https://github.com/unikraft/unikraft/issues/62&#34;&gt;Issue #62&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/unikraft/plat-solo5&#34;&gt;Solo5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚öôÔ∏è &lt;a href=&#34;https://github.com/unikraft/unikraft/issues/63&#34;&gt;Issue #63&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VMWare&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚öôÔ∏è &lt;a href=&#34;https://github.com/unikraft/unikraft/issues/3&#34;&gt;Issue #3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hyper-V&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚öôÔ∏è &lt;a href=&#34;https://github.com/unikraft/unikraft/issues/61&#34;&gt;Issue #61&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;‚òÅÔ∏è IaaS Providers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cloud Provider&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Images&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon Web Services&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/unikraft/plat-aws&#34;&gt;AMI&lt;/a&gt;, &lt;a href=&#34;https://github.com/unikraft/plat-firecracker&#34;&gt;Firecracker&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Compute Platform&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/unikraft/plat-gcp&#34;&gt;GCP Image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Digital Ocean&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/unikraft/plat-digitalocean&#34;&gt;Droplet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to get started configuring, building and deploying Unikraft unikernels is to use our companion tool, &lt;a href=&#34;https://github.com/unikraft/kraft/&#34;&gt;&lt;strong&gt;kraft&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With kraft installed, you can download Unikraft components, configure your unikernel to your needs, build it and run it -- there&#39;s no need to be an expert!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see our &lt;a href=&#34;https://unikraft.org/docs/contributing/&#34;&gt;Contributing Guide&lt;/a&gt; for more details. A good starting point is the list of &lt;a href=&#34;https://github.com/unikraft/unikraft/labels/kind/project&#34;&gt;open projects&lt;/a&gt;. If one of these interests you or you are interested in finding out more information, please drop us a line via the &lt;a href=&#34;https://groups.google.com/a/unikraft.org/g/user-discuss&#34;&gt;mailing list&lt;/a&gt; or directly at &lt;a href=&#34;mailto:dev-discuss@unikraft.org&#34;&gt;dev-discuss@unikraft.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://unikraft.org/docs/getting-started&#34;&gt;Quick-start guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/docs/concepts/&#34;&gt;What is a unikernel?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/docs/features/security/&#34;&gt;Unikraft&#39;s inherent security benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/docs/features/performance/&#34;&gt;Performance of Unikraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/docs/features/posix-compatibility&#34;&gt;POSIX-compatibility with Unikraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/docs/features/green/&#34;&gt;Energy efficiency with Unikraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/community&#34;&gt;Unikraft Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org/docs&#34;&gt;Unikraft Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unikraft is licensed under a BSD-3-Clause. For more information, please refer to &lt;a href=&#34;https://github.com/unikraft/unikraft/raw/staging/COPYING.md&#34;&gt;&lt;code&gt;COPYING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gnucash/gnucash</title>
    <updated>2023-03-31T01:30:40Z</updated>
    <id>tag:github.com,2023-03-31:/Gnucash/gnucash</id>
    <link href="https://github.com/Gnucash/gnucash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GnuCash Double-Entry Accounting Program.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;############################################################ GnuCash README file.&lt;/p&gt; &#xA;&lt;h2&gt;The current stable series is GnuCash 4.x.&lt;/h2&gt; &#xA;&lt;h2&gt;################## Table of Contents:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview&lt;/li&gt; &#xA; &lt;li&gt;Dependencies&lt;/li&gt; &#xA; &lt;li&gt;Invocation/running&lt;/li&gt; &#xA; &lt;li&gt;Internationalization&lt;/li&gt; &#xA; &lt;li&gt;Building &amp;amp; Installing&lt;/li&gt; &#xA; &lt;li&gt;Supported Platforms&lt;/li&gt; &#xA; &lt;li&gt;Additional Download Sites&lt;/li&gt; &#xA; &lt;li&gt;Getting the Source via Git&lt;/li&gt; &#xA; &lt;li&gt;Developing GnuCash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;######## Overview&lt;/h2&gt; &#xA;&lt;p&gt;GnuCash is a personal and small business double entry accounting application.&lt;/p&gt; &#xA;&lt;p&gt;Home Page: &lt;a href=&#34;https://www.gnucash.org/&#34;&gt;https://www.gnucash.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wiki: &lt;a href=&#34;https://wiki.gnucash.org/wiki/GnuCash&#34;&gt;https://wiki.gnucash.org/wiki/GnuCash&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Precompiled binaries: &lt;a href=&#34;https://www.gnucash.org/download&#34;&gt;https://www.gnucash.org/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;############ Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Please see README.dependencies for current build dependencies.&lt;/p&gt; &#xA;&lt;p&gt;The optional online stock and currency price retrieval feature requires Perl. This is generally already installed on Gnu/Linux and *BSD, and MacOS.&lt;/p&gt; &#xA;&lt;p&gt;In addition, some perl modules need to be installed. You can run the script &#39;gnc-fq-update&#39; as root to obtain the latest versions of required packages.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft Windows users can use the &#34;Install Online Quotes&#34; program in the Start menu&#39;s Gnucash group; it will install perl and all of the required modules more-or-less automatically. MacOS users will find &#34;Update Finance Quote&#34; in the distribution disk image; it will automate running gnc-fq-update for you.&lt;/p&gt; &#xA;&lt;h2&gt;####### Running&lt;/h2&gt; &#xA;&lt;p&gt;For GnuCash invocation details, see the manpage in doc/gnucash.1. You can also run gnucash --help for the command line options.&lt;/p&gt; &#xA;&lt;p&gt;You can start GnuCash at the command-line, with &#34;gnucash&#34; or &#34;gnucash &#xA; &lt;filename&gt;&#xA;  &#34;, where &#xA;  &lt;filename&gt;&#xA;    is a GnuCash account file. Sample accounts can be found in the &#34;doc/examples&#34; subdirectory. *.gnucash files are GnuCash accounts that can be opened with the &#34;Open File&#34; menu entry. *.qif files are Quicken Import Format files that can be opened with the &#34;Import QIF&#34; menu entry.&#xA;  &lt;/filename&gt;&#xA; &lt;/filename&gt;&lt;/p&gt; &#xA;&lt;p&gt;GnuCash responds to the following environment variables:&lt;/p&gt; &#xA;&lt;p&gt;GNC_BOOTSTRAP_SCM - the location of the initial bootstrapping scheme code.&lt;/p&gt; &#xA;&lt;p&gt;GUILE_LOAD_PATH - an override for the GnuCash load path, used when loading scheme files. It should be a string in the same form as the PATH or LD_LIBRARY_PATH environment variable.&lt;/p&gt; &#xA;&lt;p&gt;GNC_MODULE_PATH - an override for the GnuCash load path, used when loading gnucash modules. It should be a string representing a proper scheme list. It should be a string in the same form as the PATH or LD_LIBRARY_PATH environment variable.&lt;/p&gt; &#xA;&lt;p&gt;GNC_DEBUG - enable debugging output. This allows you to turn on debugging earlier in the startup process than you can with --debug.&lt;/p&gt; &#xA;&lt;h2&gt;#################### Internationalization&lt;/h2&gt; &#xA;&lt;p&gt;Message catalogs exist for many different languages. In general GnuCash will use the locale configured in the desktop environment if we have a translation for it, but this may be overridden if one likes. Instructions for overriding the locale settings may be found at &lt;a href=&#34;https://wiki.gnucash.org/wiki/Locale_Settings&#34;&gt;https://wiki.gnucash.org/wiki/Locale_Settings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;##################### Building &amp;amp; Installing&lt;/h2&gt; &#xA;&lt;p&gt;GnuCash uses CMake to handle the build process. Details are available in cmake/README_CMAKE.txt&lt;/p&gt; &#xA;&lt;p&gt;Prior to building GnuCash, you will have to obtain and install the following packages:&lt;/p&gt; &#xA;&lt;p&gt;cmake: Available &lt;a href=&#34;https://cmake.org&#34;&gt;https://cmake.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ninja: Optional, available at &lt;a href=&#34;https://ninja-build.org&#34;&gt;https://ninja-build.org&lt;/a&gt;. CMake can generated build rules for Ninja, and generally using Ninja results in faster builds that Makefile based ones.&lt;/p&gt; &#xA;&lt;p&gt;gnome development system: headers, libraries, etc.&lt;/p&gt; &#xA;&lt;p&gt;libxml2: available from ftp.gnome.org&lt;/p&gt; &#xA;&lt;p&gt;SWIG: 2.0.10 or later is needed. See &lt;a href=&#34;http://www.swig.org&#34;&gt;http://www.swig.org&lt;/a&gt; or &lt;a href=&#34;https://sourceforge.net/projects/swig/&#34;&gt;https://sourceforge.net/projects/swig/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generally, up-to-date build instructions for various Linux distributions can be found on the GnuCash wiki at &lt;a href=&#34;https://wiki.gnucash.org/wiki/Building&#34;&gt;https://wiki.gnucash.org/wiki/Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The options that the CMake build system understands are documented in cmake/README_CMAKE.txt and in the Building wiki page mentioned above.&lt;/p&gt; &#xA;&lt;p&gt;Note that while you need the Gnome libraries installed, you don&#39;t need to have a Gnome desktop.&lt;/p&gt; &#xA;&lt;p&gt;Runtime and install destinations are separate. The CMake option CMAKE_INSTALL_PREFIX determines where the resulting binary will look for things at runtime. Normally this determines where a &#34;make install&#34; will put all the files. However, cmake also supports the DESTDIR variable. DESTDIR is used during the &lt;code&gt;make install&#39; step to relocate install objects into a staging area. Each object and path is prefixed with the value of &lt;/code&gt;DESTDIR&#39; before being copied into the install area. Here is an example of typical DESTDIR usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make DESTDIR=/tmp/staging install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This places install objects in a directory tree built under &lt;code&gt;/tmp/staging&#39;. If &lt;/code&gt;/gnu/bin/foo&#39; and &lt;code&gt;/gnu/share/aclocal/foo.m4&#39; are to be installed, the above command would install &lt;/code&gt;/tmp/staging/gnu/bin/foo&#39; and `/tmp/staging/gnu/share/aclocal/foo.m4&#39;.&lt;/p&gt; &#xA;&lt;p&gt;DESTDIR can be helpful when trying to build install images and packages.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you have installed different parts of Gnome in different places (for instance, if you&#39;ve installed webkit in /usr/local) you will need to set the environment variables GNOME_PATH and GNOME_LIBCONFIG_PATH. See the manpage for gnome-config for more details.&lt;/p&gt; &#xA;&lt;h2&gt;################### Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;GnuCash 3.x is known to work with the following operating systems:&lt;/p&gt; &#xA;&lt;p&gt;GNU/Linux -- x86, Sparc, PPC FreeBSD -- x86 OpenBSD -- x86 MacOS -- Intel, Versions 10.9 and later&lt;/p&gt; &#xA;&lt;p&gt;GnuCash can probably be made to work on any platform for which Gtk+ can and for which there is a C++11 compiler available, given sufficient expertise and effort. If you try and encounter difficulty, please subscribe to the developer&#39;s mailing list, &lt;a href=&#34;mailto:gnucash-devel@gnucash.org&#34;&gt;gnucash-devel@gnucash.org&lt;/a&gt; and we&#39;ll try to help you.&lt;/p&gt; &#xA;&lt;h2&gt;######################### Downloads&lt;/h2&gt; &#xA;&lt;p&gt;GnuCash sources and Mac and Windows binaries are hosted at SourceForge and Github. Links for the current version are provided at &lt;a href=&#34;https://www.gnucash.org&#34;&gt;https://www.gnucash.org&lt;/a&gt;. We depend upon distribution packagers for GNU/Linux and *BSD binaries, so if you want a more recent version than your distribution provides you&#39;ll have to build from source.&lt;/p&gt; &#xA;&lt;h2&gt;############################## Getting Source with Git&lt;/h2&gt; &#xA;&lt;p&gt;We maintain a mirror of our master repository on Github. You can browse the code at &lt;a href=&#34;https://github.com/Gnucash/gnucash&#34;&gt;https://github.com/Gnucash/gnucash&lt;/a&gt;. Clone URIs are on that page, or if you have a Github account you can fork it there.&lt;/p&gt; &#xA;&lt;h2&gt;################## Developing GnuCash&lt;/h2&gt; &#xA;&lt;p&gt;Before you start developing GnuCash, you should do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://wiki.gnucash.org/wiki/Development&#34;&gt;https://wiki.gnucash.org/wiki/Development&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Look over the doxygen-generated documentation at &lt;a href=&#34;https://code.gnucash.org/docs/MASTER/&#34;&gt;https://code.gnucash.org/docs/MASTER/&lt;/a&gt; or &lt;a href=&#34;https://code.gnucash.org/docs/MAINT/&#34;&gt;https://code.gnucash.org/docs/MAINT/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to the GnuCash website and skim the archives of the GnuCash development mailing list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Join the GnuCash development mailing list. See the GnuCash website for details on how to do this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the branch you want from a git clone of our repository and make sure that your build passes all of the tests and runs correctly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Submitting a Patch:&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://wiki.gnucash.org/wiki/Development#Submitting_Patches&#34;&gt;https://wiki.gnucash.org/wiki/Development#Submitting_Patches&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vanhoefm/macstealer</title>
    <updated>2023-03-31T01:30:40Z</updated>
    <id>tag:github.com,2023-03-31:/vanhoefm/macstealer</id>
    <link href="https://github.com/vanhoefm/macstealer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;div align=&#34;center&#34;&gt;&#xA;  MacStealer: Wi-Fi Client Isolation Bypass&#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;1. Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains MacStealer. It can test Wi-Fi networks for &lt;strong&gt;client isolation bypasses&lt;/strong&gt; &lt;strong&gt;(CVE-2022-47522). Our attack can intercept (steal) traffic toward other clients at the MAC layer&lt;/strong&gt;, even if clients are prevented from communicating with each other. This vulnerability affects Wi-Fi networks with malicious insiders, where our attack can bypass client isolation, which is sometimes also known as AP isolation. The attack can also be used to bypass Dynamic ARP inspection (DAI), and can likely also be used to bypass other methods that prevent clients from attacking each other. The attack is also known as the &lt;em&gt;security context override attack&lt;/em&gt;, see Section 5 of our &lt;a href=&#34;https://papers.mathyvanhoef.com/usenix2023-wifi.pdf&#34;&gt;USENIX Security &#39;23 paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Concrete examples of possible affected networks are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enterprise networks where users may distrust each other, and where techniques such as client isolation or ARP inspection are used to prevent users from attacking each other. For instance, company networks with accounts for both guests and staff, networks such as Eduroam and Govroam, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Public hotspots protected by &lt;a href=&#34;https://www.wi-fi.org/discover-wi-fi/passpoint&#34;&gt;Passpoint&lt;/a&gt; (formerly Hotspot 2.0). These are hotspots that you can automatically and securely connect to. For instance, it can seamlessly authenticate you using your phone&#39;s SIM card.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Home WPA2 or WPA3 networks that have client isolation enabled. This includes networks with a separate SSID for guests or for insecure (IoT) devices. It also includes networks where multiple passwords are used to further isolate devices, which is also known as &lt;a href=&#34;https://www.arubanetworks.com/techdocs/central/2.5.1/content/access-points/cfg/security/wpa2_mpsk.htm&#34;&gt;Multi-PSK&lt;/a&gt;, &lt;a href=&#34;https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-5/b_Identity_PSK_Feature_Deployment_Guide.html&#34;&gt;Identity PSK&lt;/a&gt;, &lt;a href=&#34;https://0x72326432.com/posts/perstapsk_en/&#34;&gt;per-station PSK&lt;/a&gt;, or &lt;a href=&#34;https://www.cisco.com/c/en/us/td/docs/wireless/controller/9800/17-6/config-guide/b_wl_17_6_cg/m_epsk.html&#34;&gt;EasyPSK&lt;/a&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-threat-model&#34;&gt;threat model discussion&lt;/a&gt; for extra info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Public hotspots based on &lt;a href=&#34;https://www.wi-fi.org/beacon/thomas-derham-nehru-bhandaru/wi-fi-certified-wpa3-december-2020-update-brings-new-0&#34;&gt;WPA3 SAE-PK&lt;/a&gt;. These are hotspots protected by a shared public password, but where an adversary cannot abuse this publicly-known password.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We remark that &lt;strong&gt;our attack cannot bypass VLANs&lt;/strong&gt;. In other words, based on current experiments, our attack cannot be used to exploit a device in another VLAN.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-attack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;2. Vulnerability details&lt;/h1&gt; &#xA;&lt;p&gt;The core idea behind the attack is that the manner in which clients are authenticated is unrelated to how packets are routed to the correct Wi-Fi client. Namely, authentication is done based on passwords, usernames, 802.1X identities, and/or certificates, but once the client has connected the routing of packets is done based on MAC addresses. A malicious insider can abuse this to intercept data towards a Wi-Fi client by &lt;strong&gt;disconnecting a victim and then connecting under the MAC address of the victim&lt;/strong&gt; &lt;strong&gt;(using the credentials of the adversary)&lt;/strong&gt;. Any packets that were still underway to the victim, such website data that the victim was still loading, will now be received by the adversary instead.&lt;/p&gt; &#xA;&lt;p&gt;More precisely, attack consists of three steps:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/attack.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Letting the victim request data&lt;/strong&gt;: The adversary first waits until the victim (client) establishes a Wi-Fi connection with the vulnerable Access Point (AP). We assume the victim will then send a request to a server on the Internet. For instance, the victim may send a HTTP request to the (plaintext) website &lt;code&gt;example.com&lt;/code&gt;. The goal of the adversary is to intercept the response that will be sent by the website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connecting under the victim&#39;s MAC address&lt;/strong&gt;: After the victim requested data, for instance by sending a HTTP Request packet, the adversary will forcibly disconnect the victim from the network &lt;em&gt;before&lt;/em&gt; the response arrives at the vulnerable AP. In our example, this means the victim is disconnected before the response from &lt;code&gt;example.com&lt;/code&gt; arrives at the AP. Once the victim is disconnected, the adversary spoofs the MAC address of the victim and the adversary will connect to the network using their own credentials. This means the adversary is a malicious insider that can connect using their own credentials to the network, for instance, using their own username and password in an Enterprise Wi-Fi network.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intercepting the response&lt;/strong&gt;: Once the adversary connected under the MAC address of the victim, the AP will associate the adversary&#39;s newly generated encryption keys with the victim&#39;s MAC address. As a result, when the response from the server arrives at the Wi-Fi network, or any incoming traffic towards the victim in general, the router will forward these incoming packets to the victim&#39;s MAC address. In our example, this means the response from &lt;code&gt;example.com&lt;/code&gt; is forwarded by the router to the victim&#39;s MAC address. However, the adversary is now using this MAC address. This means the AP will encrypt the response using the keys of the adversary. In other words, the adversary will now recieve any pending traffic that is still underway the victim.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We remark that intercepted traffic may be protected by higher-layer encryption, such as TLS and HTTPS. Nevertheless, even if higher-layer encryption is being used, our attack still reveals the IP address that a victim is communicating with. This in turn reveals the websites that a victim is visiting, which can be sensitive information on its own.&lt;/p&gt; &#xA;&lt;p&gt;By default, the attack does not intercept traffic &lt;em&gt;sent by the victim&lt;/em&gt;, but can only intercept traffic &lt;em&gt;sent towards the victim&lt;/em&gt;. However, an adversary can attempt subsequent attacks to also intercept traffic sent by the victim. In particular, by intercepting a DNS reply to the victim, the adversary can spoof a DNS reply and intercept all IP traffic both sent towards and sent by victim.&lt;/p&gt; &#xA;&lt;p&gt;Performing the above attack only makes sense when client isolation is enabled in the target network. Otherwise, if client isolation is disabled, a malicious insider can just directly attack other clients using techniques such as &lt;a href=&#34;https://en.wikipedia.org/wiki/ARP_spoofing&#34;&gt;ARP spoofing&lt;/a&gt; (see the &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-test-isolation&#34;&gt;client isolation tests&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The attack is identical against Enterprise WPA1, WPA2 and WPA3 networks. This is because the attack does not exploit any cryptographic properties of Wi-Fi, but instead abuses how a network determines to which client packets should be sent, i.e., routed, to.&lt;/p&gt; &#xA;&lt;p&gt;For extra details on the attack, see the &lt;em&gt;security context override attack&lt;/em&gt; (Section 5) in our paper &lt;a href=&#34;https://papers.mathyvanhoef.com/usenix2023-wifi.pdf&#34;&gt;Framing Frames: Bypassing Wi-Fi Encryption by Manipulating Transmit Queues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;3. Possible mitigations&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-prevent-stealing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3.1. Preventing MAC address stealing&lt;/h2&gt; &#xA;&lt;p&gt;To mitigate our attack, an AP can temporarily prevent clients from connecting if they are using a MAC address that was recently connected to the AP. This prevents an adversary from spoofing a MAC address and intercepting pending or queued frames towards a victim. When it can be guaranteed that the user behind a MAC address has not changed, the client can be allowed to immediately reconnect. Note that this check must be done over all APs that are part of the same distribution system, and more specifically, over all APs that clients can roam between while keeping their current IP address.&lt;/p&gt; &#xA;&lt;p&gt;To securely recognize recently-connected users, an AP can store a mapping between a client‚Äôs MAC address and their cached security associations (e.g., their cached PMK). A client can be allowed to immediately (re)connect under a recently-used MAC address by proving that they posses the cached security association linked to this MAC address, e.g., by connecting using the correct cached PMK.&lt;/p&gt; &#xA;&lt;p&gt;When using multi-PSK, which is also known as &lt;a href=&#34;https://0x72326432.com/posts/perstapsk_en/&#34;&gt;per-station PSK&lt;/a&gt; or &lt;a href=&#34;https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-5/b_Identity_PSK_Feature_Deployment_Guide.html&#34;&gt;Identity PSK&lt;/a&gt;, the AP can keep a mapping of recently connected MAC addresses and the (unique) password that they used. When a client connects, the AP checks whether its MAC address was recently used. If it isn&#39;t, or if it is and the client is using the same password as before, the client can connect as normal. However, if the same MAC address is used with a different password, the client is forced to wait a predefined amount of time before being able to successfully connect.&lt;/p&gt; &#xA;&lt;p&gt;When using SAE-PK to secure hotspots, the only method that we are aware of to securely recognize that a MAC address is being reused by the same user as before, is by relying on cached security associations (e.g., the cached PMK linked to the MAC address).&lt;/p&gt; &#xA;&lt;p&gt;The above defenses assume that, after a certain delay, no more pending packets will arrive for the victim. To prevent leaks beyond this delay, clients can use end-to-end encryption (such as TLS) with the services they communicate with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-prevent-8021X&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3.2. 802.1X authentication and RADIUS extensions&lt;/h2&gt; &#xA;&lt;p&gt;Another method to securely recognize recently-connected users is based on the EAP identity they used during 802.1X authentication. An AP can securely &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc2865&#34;&gt;learn the EAP identity from the RADIUS server&lt;/a&gt; that authenticated the client, and can keep a mapping of recently connected MAC addresses and their corresponding EAP identity. When a client connects, the AP checks whether its MAC address was recently used. If it isn&#39;t, or if it is and the client is using the same EAP identity as before, the client can connect as normal. However, if the same MAC address is used under a different EAP identity, the client is forced to wait a predefined amount of time before being able to connect successfully.&lt;/p&gt; &#xA;&lt;p&gt;One challenge is that the AP may not always know the 802.1X identity of a client due to privacy concerns. For instance, this information may only be available at the home AAA server, and the AP will only receive a Chargeable User Identity from the RADIUS server. This identity does not allow the AP to recognize two associations of the same device/credentials because its value may constantly change. The AP does receive the anonymous identity in the EAP-Response/Identity, such as anonymous@realm, and can rely on that to at least recognize users from different realms.&lt;/p&gt; &#xA;&lt;p&gt;To prevent users in the same realm from attacking each other, without revealing a client&#39;s identity to the AP, cooperation and changes to the RADIUS server are needed. In particular, the RADIUS server can be updated to help detect if the MAC address was recently being used by another user in the same realm (in the given local network). The RADIUS server would then need to be informed when a client disconnects, so it knows when a MAC address was last being used by one of its users, and needs to be informed of the MAC address of any client that is trying to connect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-prevent-gateway&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3.3. Protecting the gateway&#39;s MAC address&lt;/h2&gt; &#xA;&lt;p&gt;Important to note is that our attack is not limited to intercepting packets going to Wi-Fi clients. An adversary could also try to associate with a MAC address of a default gateway or another server in the local network. To prevent such attacks, the AP or controller can prohibit clients from using a MAC address equal to the default gateway. More generally, duplicate MAC address detection can be used when a Wi-Fi client is connecting to the network, to prevent Wi-Fi clients from using a MAC address that is also in use by other devices in the network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-prevent-mfp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3.4. Management Frame Protection (802.11w)&lt;/h2&gt; &#xA;&lt;p&gt;Using Management Frame Protection (MFP) would make the attack harder but not impossible. &lt;a href=&#34;https://papers.mathyvanhoef.com/wisec2022.pdf&#34;&gt;In previous work&lt;/a&gt;, we found some ways that clients can be disconnected/deauthenticated even when MFP is being used. Based on that experience, there always appears to be some method to forcibly disconnect a client from the network, even when MFP is being used. Put differently, it&#39;s hard to completely prevent disconnection and deauthentication attacks. That being said, MFP would be extra hurdle to overcome when performing the attack in practice, so it can be useful mitigation to make the attack harder (but not impossible) in practice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-prevent-vlan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3.5. Usage of VLANs&lt;/h2&gt; &#xA;&lt;p&gt;Based on preliminary experiments, the attack does not work across different VLANs. In other words, the malicious insider that performs the attack must be in the same VLAN as the victim. One mitigation is therefore to put different groups of users in different VLANs. However, a malicious insider would still be able to perform the attack (i.e., bypass client isolation) against other users in the same VLAN.&lt;/p&gt; &#xA;&lt;p&gt;Note that when using multi-PSK (a.ka. per-station PSK or identity PSK), you can put clients in different VLANs depending on the password that they use. In other words, you can use a VLAN for each password. This prevents clients with different passwords from attacking each other.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-prerequisites&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;4. Tool Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;The MacStealer tool works with any network card that is supported by Linux. We tested MacStealer on Ubuntu 22.04. To install the required dependencies on Ubuntu 22.04 execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install libnl-3-dev libnl-genl-3-dev libnl-route-3-dev libssl-dev \&#xA;&#x9;libdbus-1-dev git pkg-config build-essential net-tools python3-venv \&#xA;&#x9;aircrack-ng rfkill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now clone this repository, build the tools, and configure a virtual python3 environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/vanhoefm/macstealer.git macstealer&#xA;cd macstealer/research&#xA;./build.sh&#xA;./pysetup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above instructions only have to be executed once.&lt;/p&gt; &#xA;&lt;p&gt;After pulling in new code using git you do have to execute &lt;code&gt;./build.sh&lt;/code&gt; and &lt;code&gt;./pysetup.sh&lt;/code&gt; again. See the &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-change-log&#34;&gt;change log&lt;/a&gt; for a detailed overview of updates to the MacStealer since the coordinated disclosure started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-before-every-usage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;5. Before every usage&lt;/h1&gt; &#xA;&lt;h2&gt;5.1 Execution environment&lt;/h2&gt; &#xA;&lt;p&gt;Every time you want to use MacStealer, you first have to load the virtual python3 environment as root. This can be done using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd research&#xA;sudo su&#xA;source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now &lt;a href=&#34;https://github.com/vanhoefm/libwifi/raw/master/docs/linux_tutorial.md#id-disable-wifi&#34;&gt;disable Wi-Fi in your network manager&lt;/a&gt; so it will not interfere with MacStealer. Optionally check using &lt;code&gt;sudo airmon-ng check&lt;/code&gt; to see which other processes might be using the wireless network card and might interfere with MacStealer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-network-config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5.2. Network configuration&lt;/h2&gt; &#xA;&lt;p&gt;The next step is to edit &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/research/client.conf&#34;&gt;&lt;code&gt;client.conf&lt;/code&gt;&lt;/a&gt; with the information of the network that you want to test. This is a configuration for &lt;a href=&#34;https://wiki.archlinux.org/title/wpa_supplicant#Connecting_with_wpa_passphrase&#34;&gt;&lt;code&gt;wpa_supplicant&lt;/code&gt;&lt;/a&gt; that must contain two network blocks: one representing the victim and one representing the attacker. An example configuration file to test the fictitious network &lt;code&gt;kuleuven&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Don&#39;t change this line, other MacStealer won&#39;t work&#xA;ctrl_interface=wpaspy_ctrl&#xA;&#xA;network={&#xA;&#x9;# Don&#39;t change this field, the script relies on it&#xA;&#x9;id_str=&#34;victim&#34;&#xA;&#xA;&#x9;# Network to test: fill in properties of the network to test&#xA;&#x9;ssid=&#34;kuleuven&#34;&#xA;&#x9;key_mgmt=WPA-EAP&#xA;&#x9;eap=PEAP&#xA;&#x9;phase2=&#34;auth=MSCHAPV2&#34;&#xA;&#xA;&#x9;# Victim login: fill in login credentials representing the victim&#xA;&#x9;identity=&#34;the.professor@kuleuven.be&#34;&#xA;&#x9;password=&#34;SuperSecret&#34;&#xA;}&#xA;&#xA;network={&#xA;&#x9;# Don&#39;t change this field, the script relies on it&#xA;&#x9;id_str=&#34;attacker&#34;&#xA;&#xA;&#x9;# Network to test: you can copy this from the previous block&#xA;&#x9;ssid=&#34;kuleuven&#34;&#xA;&#x9;key_mgmt=WPA-EAP&#xA;&#x9;eap=PEAP&#xA;&#x9;phase2=&#34;auth=MSCHAPV2&#34;&#xA;&#xA;&#x9;# Attacker login: fill in login credentials representing the attacker&#xA;&#x9;identity=&#34;some.student@student.kuleuven.be&#34;&#xA;&#x9;password=&#34;SomePassword&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the part &#34;network to test&#34; you must provide the name of the network being tested and its security configuration. See &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/wpa_supplicant/wpa_supplicant.conf&#34;&gt;wpa_supplicant.conf&lt;/a&gt; for documentation on to write/edit configuration files and for example network blocks for various types of Wi-Fi networks. In the first network block, under &#34;victim login&#34;, you must specify valid login credentials that represents the simulated victim. In the second network block, you can provide exactly the same information under &#34;network to test&#34;, but you must provide login credentials that represent the simulated attacker.&lt;/p&gt; &#xA;&lt;p&gt;In the above example, MacStealer will test an attack where the adverary is &lt;code&gt;some.student@student.kuleuven.be&lt;/code&gt; and this adversary will try to intercept traffic sent towards the victim &lt;code&gt;the.professor@kuleuven.be&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default the script uses the configuration file &lt;code&gt;client.conf&lt;/code&gt;. You can use a different configuration file by providing the &lt;code&gt;--config network.conf&lt;/code&gt; paramater, where you can replace &lt;code&gt;network.conf&lt;/code&gt; with the configuration file that you want to use.&lt;/p&gt; &#xA;&lt;p&gt;This repository also contains the following example configuration files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/research/multipsk.conf&#34;&gt;&lt;code&gt;multipsk.conf&lt;/code&gt;&lt;/a&gt;: A configuration file to test a network that uses multi-PSK where one password is used by trusted devices and a second password is given to guests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/research/saepk.conf&#34;&gt;&lt;code&gt;saepk.conf&lt;/code&gt;&lt;/a&gt;: A configuration file to test a public hotspot that uses SAE-PK.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that it is also possible to edit the network block(s) to test a &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-test-bss&#34;&gt;specific AP/BSS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-server-config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5.3. Server configuration&lt;/h2&gt; &#xA;&lt;p&gt;By default, MacStealer will send a TCP SYN packet to &lt;code&gt;8.8.8.8&lt;/code&gt; at port 443 in all tests, which is a DNS server of Google. If you want to use a different server or port, you can provide one using the &lt;code&gt;--server&lt;/code&gt; parameter. For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./macstealer.py wlan0 --server 208.67.222.222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add the port that must be used in the TCP SYN packets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./macstealer.py wlan0 --server 208.67.222.222:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;wlan0&lt;/code&gt; with the name of your Wi-Fi interface and the IP address with the server that you want to use. &lt;strong&gt;This server must retransmit TCP SYN/ACK replies and should, ideally, still send a retransmitted&lt;/strong&gt; &lt;strong&gt;SYN/ACK more than 10 seconds after MacStealer transmitted the initial TCP SYN.&lt;/strong&gt; You can test this retransmission behaviour using the &lt;code&gt;--ping&lt;/code&gt; parameter as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./macstealer.py wlan0 --server 208.67.222.222 --ping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MacStealer will output the following in case the server has the required retransmission behaviour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[22:53:15] Received SYN/ACK 15.265095233917236 seconds after sending SYN.&#xA;[22:53:20] &amp;gt;&amp;gt;&amp;gt; Ping test done, everything looks good so far. You can continue with other tests.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case the provided server doesn&#39;t send TCP SYN/ACK replies, or doesn&#39;t retransmit them sufficiently late, MacStealer will output the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[22:52:05] Received SYN/ACK 1.0727121829986572 seconds after sending SYN.&#xA;[22:52:24] &amp;gt;&amp;gt;&amp;gt; Ping test done. Consider using a server that retransmits SYN/ACK for a longer time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The reason why the server must still retransmit a SYN/ACK after more than 10 seconds, is because it can sometimes take several seconds to reconnect as the simulated attacker. This reconnection process must complete before the server sends the last retransmitted TCP SYN/ACK packet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-testing-for-flaws&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;6. Testing for Vulnerabilities&lt;/h1&gt; &#xA;&lt;p&gt;The following table contains common commands that you will execute when testing a network along with a short description of what each command does. Below the table the details behind each command are explained.&lt;/p&gt; &#xA;&lt;p&gt;If the network being tested uses Management Frame Protection (802.11w), the tool assumes that the adversary can still forcibly disconnect the victim from the network. This assumption is based on &lt;a href=&#34;https://papers.mathyvanhoef.com/wisec2022.pdf&#34;&gt;recent research&lt;/a&gt; that showed that disconnections attacks are typically still possible, albeit less straightforward or general, when using MFP.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Short description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-test-sanity&#34;&gt;Sanity checks&lt;/a&gt;&lt;/em&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;./macstealer.py wlan0 --ping&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connect as victim &amp;amp; test server&#39;s retransmission behavior.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;./macstealer.py wlan0 --ping --flip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connect as attacker &amp;amp; test server&#39;s retransmission behavior.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-test-vulnerability&#34;&gt;Vulnerability tests&lt;/a&gt;&lt;/em&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;./macstealer.py wlan0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test the default variant of the MAC address stealing attack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;./macstealer.py wlan0 --other-bss&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Let the attacker connect with a different AP than the victim.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;center&#34;&gt;&#xA;     &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-test-isolation&#34;&gt;Client isolation: Ethernet layer&lt;/a&gt;&lt;/em&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;./macstealer.py wlan0 --c2c wlan1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test client-to-client Ethernet layer traffic (ARP poisoning).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;./macstealer.py wlan0 --c2c-eth wlan1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test client-to-client Ethernet layer traffic (DNS).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-test-sanity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6.1. Sanity checks&lt;/h2&gt; &#xA;&lt;p&gt;Before testing for vulnerabilities, you can use the following to commands to confirm that MacStealer can connect to the network as both the victim and attacker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --ping&lt;/code&gt;: connects to the network using the credentials of the victim. Once connected, a TCP SYN is sent to the server (which is by default &lt;code&gt;8.8.8.8&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/id-server-config&#34;&gt;can be changed&lt;/a&gt;). MacStealer will check whether and how many times the SYN/ACK is (re)transmitted. You can use this to confirm that the credentials of the victim are correct and to check that the configured server is properly retransmitting SYN/ACK replies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --ping --flip&lt;/code&gt;: Same as the above test, but now the script will connect using the credentials of the adversary. You can use this to confirm that the credentials of the adversary are correct.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-test-vulnerability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6.2. Vulnerability tests (CVE-2022-47522)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0&lt;/code&gt;: Test the default variant of the MAC address stealer attack. The attacker will reconnect to the same AP/BSS as the victim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --other-bss&lt;/code&gt;: The attacker will connect to a different AP/BSS of the same network. A network that is (also) vulnerable to this test is easier to exploit in practice. If only a single AP/BSS is within radio range, the script will timeout when connecting as the attacker.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-test-isolation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6.3. Client isolation tests (Ethernet layer)&lt;/h2&gt; &#xA;&lt;p&gt;Exploiting the MAC address stealing vulnerability only makes sense if client isolation is enabled or when techniques such as ARP inspection are used to prevent clients from attacking each other. Otherwise, an adversary can use easier attacks such as &lt;a href=&#34;https://en.wikipedia.org/wiki/ARP_spoofing&#34;&gt;ARP poisoning&lt;/a&gt; to intercept traffic. To test whether client isolation is enabled, or whether ARP inspection is used by the network, you can use the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --c2c wlan1&lt;/code&gt;: With these arguments, MacStealer tests whether the network allows client-to-client ARP poisoning traffic from the attacker (&lt;code&gt;wlan1&lt;/code&gt;) towards the victim (&lt;code&gt;wlan0&lt;/code&gt;). Here &lt;code&gt;wlan1&lt;/code&gt; is a second wireless network interface. The script will then test whether malicious ARP packets can be sent from the attacker to the victim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --c2c-eth wlan1&lt;/code&gt;: This is similar to the above test, but instead of sending malicious ARP packets, the attacker will send DNS packets to the victim.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The MAC address stealing vulnerability should be considered a risk in practice if client-to-client traffic is blocked in any of the above two tests (meaning when client isolation is enabled or when other techniques such as ARP inspection are used to prevent users from attacker each other).&lt;/p&gt; &#xA;&lt;p&gt;By default, MacStealer will try to connect to the same AP/BSS using both interface, so it&#39;s important that both network cards can see the same networks (i.e. make sure that both network interfaces support the same frequency bands and channels). If you want both clients to connect to a different AP/BSS then you can use the parameter &lt;code&gt;--other-bss&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;--flip-id&lt;/code&gt; parameter to test whether traffic from the victim (&lt;code&gt;wlan0&lt;/code&gt;) is allowed towards the attacker (&lt;code&gt;wlan1&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-troubleshooting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6.4. Troubleshooting checklist&lt;/h2&gt; &#xA;&lt;p&gt;In case MacStealer doesn&#39;t appear to be working, check the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check that no other process is using the network card (e.g. kill your network manager). You may see the output &lt;code&gt;kernel reports: match already configured&lt;/code&gt; if another process is also using the network card.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If everything worked previously, try unplugging your Wi-Fi dongle, restart your computer or virtual machine, and then try again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Confirm that you are connecting to the correct network. Double-check &lt;code&gt;client.conf&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you updated the code using git, execute &lt;code&gt;./build.sh&lt;/code&gt; and &lt;code&gt;./pysetup.sh&lt;/code&gt; again (see &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-prerequisites&#34;&gt;Prerequisites&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using a virtual machine, try to run MacStealer from a native Linux installation instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run MacStealer with the extra parameter &lt;code&gt;-dd&lt;/code&gt; to get extra debug output from wpa_supplicant and from MacStealer itself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;7. Advanced Usage&lt;/h1&gt; &#xA;&lt;h2&gt;7.1. Testing IP layer client isolation&lt;/h2&gt; &#xA;&lt;p&gt;The default &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/id-test-isolation&#34;&gt;client isolation tests&lt;/a&gt; will check whether traffic at the Ethernet layer is allowed between clients. It is also possible to test whether IP layer traffic is allowed between clients using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./macstealer.py wlan0 --c2c-ip wlan1 [--flip-id]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When IP layer traffic between clients is allowed, it still possible for clients to attack each other. For instance, &lt;a href=&#34;https://www.usenix.org/conference/usenixsecurity22/presentation/feng&#34;&gt;ICMP redirect attacks&lt;/a&gt; may then still be possible. Such attacks are more cumbersome than ARP spoofing, but are ideally still prevented by also blocking IP layer traffic between clients.&lt;/p&gt; &#xA;&lt;h1&gt;7.2. Testing general network properties&lt;/h1&gt; &#xA;&lt;p&gt;The following tests can be executed to test general properties of a network. These tests aren&#39;t directly related to vulnerabilities but can be used to better understand the behaviour of a network.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --same-id [--other-bss] [--flip]&lt;/code&gt;: Test whether TCP connections stay alive after disconnecting and reconnecting to an Access Points. If connections do not stay alive after reconnecting, the network is likely not vulnerable to the MAC address stealing attacks. However, a major downside of this behaviour is that legitimate clients have to open new TCP connections whenever reconnecting to this network, making this network appear slow and unreliable (so a better defense should be used instead).&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;--other-bss&lt;/code&gt; parameter to reconnect to a different AP/BSS of the same network. You can use the &lt;code&gt;--flip&lt;/code&gt; argument to perform this test under the attacker identity instead of the victim identity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --flip&lt;/code&gt;: Test the normal MAC address stealing attack, but switch the role of the attacker and victim. In other words, the attacker will use the &#34;victim credentials&#34; provided in the configuration file, and the victim will use the &#34;adversary credentials&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;./macstealer.py wlan0 --c2c wlan1 --same-id [--flid-id]&lt;/code&gt;: Test whether client-to-client traffic is allowed between two devices of the same user. See &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-test-isolation&#34;&gt;client isolation tests&lt;/a&gt; for documentation on the &lt;code&gt;wlan1&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;--flip&lt;/code&gt; argument to perform this test under the attacker identity instead of the victim identity.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;7.3. Other parameters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--delay seconds&lt;/code&gt;: You can use the parameter &lt;code&gt;--delay&lt;/code&gt; to specify a delay, in seconds, before reconnecting as the attacker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;-dd&lt;/code&gt;: Adding one of these parameters increases the debug verbosity of the script and the underlying &lt;code&gt;wpa_supplicant&lt;/code&gt; instance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-test-bss&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7.4. Testing a specific Access Point / BSS&lt;/h2&gt; &#xA;&lt;p&gt;By default, MacStealer will automatically select an AP/BSS of the network to connect with and test. In case you have a network with multiple APs/BSSes, you can test a specific one by specifying this AP/BSS in the network block of the victim using the &lt;code&gt;bssid&lt;/code&gt; keyword. For example, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;&#xA;network={&#xA;&#x9;# Don&#39;t change this field, the script relies on it&#xA;&#x9;id_str=&#34;victim&#34;&#xA;&#xA;&#x9;# Network to test: fill in properties of the network to test&#xA;&#x9;ssid=&#34;kuleuven&#34;&#xA;&#x9;key_mgmt=WPA-EAP&#xA;&#x9;eap=PEAP&#xA;&#x9;phase2=&#34;auth=MSCHAPV2&#34;&#xA;&#xA;&#x9;# Victim login: fill in login credentials representing the victim&#xA;&#x9;identity=&#34;the.professor@kuleuven.be&#34;&#xA;&#x9;password=&#34;SuperSecret&#34;&#xA;&#xA;&#x9;# This a specific AP/BSS&#xA;&#x9;bssid=00:11:22:33:44:55&#xA;}&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the above configuration, MacStealer will test &lt;code&gt;00:11:22:33:44:55&lt;/code&gt;. This means it will connect both as the victim &lt;em&gt;and as the attacker&lt;/em&gt; to this AP.&lt;/p&gt; &#xA;&lt;p&gt;You can also combine this with the &lt;code&gt;--other-bss&lt;/code&gt; parameter. In that case, the victim will connect to &lt;code&gt;00:11:22:33:44:55&lt;/code&gt;, and the attacker will connect to a different AP/BSS of the same network.&lt;/p&gt; &#xA;&lt;p&gt;Another option is to specify an explicit BSS/AP in the network block of the victim &lt;em&gt;and&lt;/em&gt; attacker.&lt;/p&gt; &#xA;&lt;p&gt;Note that MacStealer will search for at most 30 seconds for the given AP/BSS. If it cannot find the specified AP/BSS the tool will quit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-sae-pk&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7.5. Testing an SAE-PK network&lt;/h2&gt; &#xA;&lt;p&gt;You can test an SAE-PK network by using the following configuration file. Notice that for SAE-PK networks there is no difference in how the victim and attacker authenticate, i.e., they both use the same password.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Don&#39;t change this line, other MacStealer won&#39;t work&#xA;ctrl_interface=wpaspy_ctrl&#xA;&#xA;# WPA3/SAE: support both hunting-and-pecking loop and hash-to-element&#xA;sae_pwe=2&#xA;&#xA;network={&#xA;&#x9;# Don&#39;t change this field, the script relies on it&#xA;&#x9;id_str=&#34;attacker&#34;&#xA;&#xA;&#x9;# Network to test - attacker login&#xA;&#x9;ssid=&#34;test-saepk&#34;&#xA;&#x9;psk=&#34;7iip-ytnz-qa25&#34;&#xA;&#x9;key_mgmt=SAE&#xA;&#x9;ieee80211w=2&#xA;}&#xA;&#xA;network={&#xA;&#x9;# Don&#39;t change this field, the script relies on it&#xA;&#x9;id_str=&#34;victim&#34;&#xA;&#xA;&#x9;# Network to test - victim login&#xA;&#x9;ssid=&#34;test-saepk&#34;&#xA;&#x9;psk=&#34;7iip-ytnz-qa25&#34;&#xA;&#x9;key_mgmt=SAE&#xA;&#x9;ieee80211w=2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-threat-model&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;8. Threat Model Discussion&lt;/h1&gt; &#xA;&lt;h2&gt;8.1. WPA-PSK authentication&lt;/h2&gt; &#xA;&lt;p&gt;In practice, client isolation is also used in networks that are secured using a pre-shared password. For instance, several routers have an option to create a network for guests or insecure (IoT) devices, where clients in this network are isolated so they cannot attack each other. However, the security advantage of using client isolation in this scenario can be questioned. Client isolation is supposed to prevent a malicious insider from attacking others. But if the malicious insider knows the pre-shared password, they can just create a rogue clone (evil twin), trick victims into connecting to this malicious copy of the network, and then attack other clients! In other words, &lt;strong&gt;using client&lt;/strong&gt; &lt;strong&gt;isolation in a network secured using a password provides no strong security&lt;/strong&gt;, a malicious client can create a rogue AP to still attack other clients.&lt;/p&gt; &#xA;&lt;p&gt;That being said, it can be argued that creating a rogue AP can be detected by the network administrator, meaning client isolation does make attacks harder. Additionally, when a lightweight device is (remotely) compromised, it may not have the resources to (easily) act as a rogue AP. This makes it harder, but not impossible, to perform attacks when client isolation is used. Overall, although client isolation provides no strong security guarantees in a password-protected network, it can be argued that it increases the practical difficulty of performing attacks.&lt;/p&gt; &#xA;&lt;p&gt;Our MacStealing attack is easier to perform than creating a rogue AP. All that the malicious insider, e.g., a lightweight compromised IoT devices, needs to do is spoof a MAC address and (re)connect to the network. Such an attack is also harder to detect. Based on this observation, our new attack makes the situation worse, and therefore one can argue that our attack should also be considered relevant in networks protected using a pre-shared password.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Conclusion: when using client isolation in a password-protected network, you are making the assumption&lt;/strong&gt; &lt;strong&gt;that a malicious insider will not create a rogue AP. Otherwise, the usage of client isolation is&lt;/strong&gt; &lt;strong&gt;meaningless from a security perspective. The MacStealing attack can be performed without creating a&lt;/strong&gt; &lt;strong&gt;rogue AP and therefore makes attacks easier.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-misunderstandings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8.2. Common misunderstandings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The goal of our attack isn&#39;t to bypass MAC address deny/allow lists on Access Points. Spoofing MAC addresses to bypass MAC address filtering is a different and known attack.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The goal of our attack isn&#39;t to hijack someone&#39;s paid connection in Wi-Fi hotspots. For instance, some open (or protected) hotspots require the user to pay before being allowed to access the internet. Often a paying subscriber is recognized based on their MAC address, and an adversary can spoof a victim&#39;s MAC address to gain access to the Internet. This is not the purpose of our attack; the goal of MacStealer is to bypass client isolation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our attack also affects networks that defend against the Hole 196 vulnerability. For instance, &lt;a href=&#34;https://www.wi-fi.org/discover-wi-fi/passpoint&#34;&gt;Passpoint&lt;/a&gt; (formerly Hotspot 2.0) networks are required to prevent the Hole 196 vulnerability, but are still vulnerable to our attack.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our attack works in networks that defend against ARP spoofing. It badly-secured Wi-Fi networks, an adversary can trivially perform ARP spoofing to intercept a victim&#39;s traffic, and our attack is not really practical. However, modern networks, which may have malicious insiders, rely on client isolation or other methods to prevent machine-in-the-middle attacks. Our attacker bypasses all these modern defenses and still enables an adversary to intercept traffic toward a victim.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To summarize, our attack affects Wi-Fi networks where clients are prevented from attacking each other, enabling an adversary to intercept traffic to another client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;id-change-log&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;9. Change log&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Version 1.2 (in progress)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Improved README: focus intro on bypassing client isolation, update defenses with 802.1X remarks and to prevent stealing the default gateway&#39;s MAC address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Added the &lt;code&gt;--delay&lt;/code&gt; parameter to specify a delay in seconds before reconnecting as the attacker.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Version 1.1 (18 January 2023)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default use &lt;code&gt;8.8.8.8&lt;/code&gt; as the server instead of &lt;code&gt;216.58.208.100&lt;/code&gt; (both are Google servers).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Updated client isolation tests: by default test using ARP poisoning at Ethernet layer. Also provide option to send UDP data with forwarding at Ethernet layer, and a test with forwarding at IP layer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improved README: updated the types of network that may be affected. Included a discussion of whether password-protected WPA2 or WPA3 networks are affected. Explanation of different commands to test for client-to-client Ethernet or IP layer traffic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improved README: discussion of MFP, discussion of VLANs as mitigation, clarify over which APs the &lt;a href=&#34;https://raw.githubusercontent.com/vanhoefm/macstealer/main/#id-prevent-stealing&#34;&gt;identity check&lt;/a&gt; must be done, specifying port of the server,&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improved output of MacStealer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Version 1.0 (3 January 2023)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prepared initial release for usage during the embargo. The code is based on hostap commit 0f3f9cdcab6a.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>