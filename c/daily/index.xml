<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-29T01:32:31Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mirror/busybox</title>
    <updated>2022-10-29T01:32:31Z</updated>
    <id>tag:github.com,2022-10-29:/mirror/busybox</id>
    <link href="https://github.com/mirror/busybox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BusyBox mirror&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Please see the LICENSE file for details on copying and usage. Please refer to the INSTALL file for instructions on how to build.&lt;/p&gt; &#xA;&lt;p&gt;What is busybox:&lt;/p&gt; &#xA;&lt;p&gt;BusyBox combines tiny versions of many common UNIX utilities into a single small executable. It provides minimalist replacements for most of the utilities you usually find in bzip2, coreutils, dhcp, diffutils, e2fsprogs, file, findutils, gawk, grep, inetutils, less, modutils, net-tools, procps, sed, shadow, sysklogd, sysvinit, tar, util-linux, and vim. The utilities in BusyBox often have fewer options than their full-featured cousins; however, the options that are included provide the expected functionality and behave very much like their larger counterparts.&lt;/p&gt; &#xA;&lt;p&gt;BusyBox has been written with size-optimization and limited resources in mind, both to produce small binaries and to reduce run-time memory usage. Busybox is also extremely modular so you can easily include or exclude commands (or features) at compile time. This makes it easy to customize embedded systems; to create a working system, just add /dev, /etc, and a Linux kernel. Busybox (usually together with uClibc) has also been used as a component of &#34;thin client&#34; desktop systems, live-CD distributions, rescue disks, installers, and so on.&lt;/p&gt; &#xA;&lt;p&gt;BusyBox provides a fairly complete POSIX environment for any small system, both embedded environments and more full featured systems concerned about space. Busybox is slowly working towards implementing the full Single Unix Specification V3 (&lt;a href=&#34;http://www.opengroup.org/onlinepubs/009695399/&#34;&gt;http://www.opengroup.org/onlinepubs/009695399/&lt;/a&gt;), but isn&#39;t there yet (and for size reasons will probably support at most UTF-8 for internationalization). We are also interested in passing the Linux Test Project (&lt;a href=&#34;http://ltp.sourceforge.net&#34;&gt;http://ltp.sourceforge.net&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Using busybox:&lt;/p&gt; &#xA;&lt;p&gt;BusyBox is extremely configurable. This allows you to include only the components and options you need, thereby reducing binary size. Run &#39;make config&#39; or &#39;make menuconfig&#39; to select the functionality that you wish to enable. (See &#39;make help&#39; for more commands.)&lt;/p&gt; &#xA;&lt;p&gt;The behavior of busybox is determined by the name it&#39;s called under: as &#34;cp&#34; it behaves like cp, as &#34;sed&#34; it behaves like sed, and so on. Called as &#34;busybox&#34; it takes the second argument as the name of the applet to run (I.E. &#34;./busybox ls -l /proc&#34;).&lt;/p&gt; &#xA;&lt;p&gt;The &#34;standalone shell&#34; mode is an easy way to try out busybox; this is a command shell that calls the built-in applets without needing them to be installed in the path. (Note that this requires /proc to be mounted, if testing from a boot floppy or in a chroot environment.)&lt;/p&gt; &#xA;&lt;p&gt;The build automatically generates a file &#34;busybox.links&#34;, which is used by &#39;make install&#39; to create symlinks to the BusyBox binary for all compiled in commands. This uses the CONFIG_PREFIX environment variable to specify where to install, and installs hardlinks or symlinks depending on the configuration preferences. (You can also manually run the install script at &#34;applets/install.sh&#34;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Downloading the current source code:&lt;/p&gt; &#xA;&lt;p&gt;Source for the latest released version, as well as daily snapshots, can always be downloaded from&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://busybox.net/downloads/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can browse the up to the minute source code and change history online.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://git.busybox.net/busybox/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anonymous GIT access is available. For instructions, check out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.busybox.net/source.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For those that are actively contributing and would like to check files in, see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://busybox.net/developer.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The developers also have a bug and patch tracking system (&lt;a href=&#34;https://bugs.busybox.net&#34;&gt;https://bugs.busybox.net&lt;/a&gt;) although posting a bug/patch to the mailing list is generally a faster way of getting it fixed, and the complete archive of what happened is the git changelog.&lt;/p&gt; &#xA;&lt;p&gt;Note: if you want to compile busybox in a busybox environment you must select CONFIG_DESKTOP.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Getting help:&lt;/p&gt; &#xA;&lt;p&gt;when you find you need help, you can check out the busybox mailing list archives at &lt;a href=&#34;http://busybox.net/lists/busybox/&#34;&gt;http://busybox.net/lists/busybox/&lt;/a&gt; or even join the mailing list if you are interested.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Bugs:&lt;/p&gt; &#xA;&lt;p&gt;if you find bugs, please submit a detailed bug report to the busybox mailing list at &lt;a href=&#34;mailto:busybox@busybox.net&#34;&gt;busybox@busybox.net&lt;/a&gt;. a well-written bug report should include a transcript of a shell session that demonstrates the bad behavior and enables anyone else to duplicate the bug on their own machine. the following is such an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;to: busybox@busybox.net&#xA;from: diligent@testing.linux.org&#xA;subject: /bin/date doesn&#39;t work&#xA;&#xA;package: busybox&#xA;version: 1.00&#xA;&#xA;when i execute busybox &#39;date&#39; it produces unexpected results.&#xA;with gnu date i get the following output:&#xA;&#xA;$ date&#xA;fri oct  8 14:19:41 mdt 2004&#xA;&#xA;but when i use busybox date i get this instead:&#xA;&#xA;$ date&#xA;illegal instruction&#xA;&#xA;i am using debian unstable, kernel version 2.4.25-vrs2 on a netwinder,&#xA;and the latest uclibc from cvs.&#xA;&#xA;-diligent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;note the careful description and use of examples showing not only what busybox does, but also a counter example showing what an equivalent app does (or pointing to the text of a relevant standard). Bug reports lacking such detail may never be fixed... Thanks for understanding.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Portability:&lt;/p&gt; &#xA;&lt;p&gt;Busybox is developed and tested on Linux 2.4 and 2.6 kernels, compiled with gcc (the unit-at-a-time optimizations in version 3.4 and later are worth upgrading to get, but older versions should work), and linked against uClibc (0.9.27 or greater) or glibc (2.2 or greater). In such an environment, the full set of busybox features should work, and if anything doesn&#39;t we want to know about it so we can fix it.&lt;/p&gt; &#xA;&lt;p&gt;There are many other environments out there, in which busybox may build and run just fine. We just don&#39;t test them. Since busybox consists of a large number of more or less independent applets, portability is a question of which features work where. Some busybox applets (such as cat and rm) are highly portable and likely to work just about anywhere, while others (such as insmod and losetup) require recent Linux kernels with recent C libraries.&lt;/p&gt; &#xA;&lt;p&gt;Earlier versions of Linux and glibc may or may not work, for any given configuration. Linux 2.2 or earlier should mostly work (there&#39;s still some support code in things like mount.c) but this is no longer regularly tested, and inherently won&#39;t support certain features (such as long files and --bind mounts). The same is true for glibc 2.0 and 2.1: expect a higher testing and debugging burden using such old infrastructure. (The busybox developers are not very interested in supporting these older versions, but will probably accept small self-contained patches to fix simple problems.)&lt;/p&gt; &#xA;&lt;p&gt;Some environments are not recommended. Early versions of uClibc were buggy and missing many features: upgrade. Linking against libc5 or dietlibc is not supported and not interesting to the busybox developers. (The first is obsolete and has no known size or feature advantages over uClibc, the second has known bugs that its developers have actively refused to fix.) Ancient Linux kernels (2.0.x and earlier) are similarly uninteresting.&lt;/p&gt; &#xA;&lt;p&gt;In theory it&#39;s possible to use Busybox under other operating systems (such as MacOS X, Solaris, Cygwin, or the BSD Fork Du Jour). This generally involves a different kernel and a different C library at the same time. While it should be possible to port the majority of the code to work in one of these environments, don&#39;t be surprised if it doesn&#39;t work out of the box. If you&#39;re into that sort of thing, start small (selecting just a few applets) and work your way up.&lt;/p&gt; &#xA;&lt;p&gt;In 2005 Shaun Jackman has ported busybox to a combination of newlib and libgloss, and some of his patches have been integrated.&lt;/p&gt; &#xA;&lt;p&gt;Supported hardware:&lt;/p&gt; &#xA;&lt;p&gt;BusyBox in general will build on any architecture supported by gcc. We support both 32 and 64 bit platforms, and both big and little endian systems.&lt;/p&gt; &#xA;&lt;p&gt;Under 2.4 Linux kernels, kernel module loading was implemented in a platform-specific manner. Busybox&#39;s insmod utility has been reported to work under ARM, CRIS, H8/300, x86, ia64, x86_64, m68k, MIPS, PowerPC, S390, SH3/4/5, Sparc, and v850e. Anything else probably won&#39;t work.&lt;/p&gt; &#xA;&lt;p&gt;The module loading mechanism for the 2.6 kernel is much more generic, and we believe 2.6.x kernel module loading support should work on all architectures supported by the kernel.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Please feed suggestions, bug reports, insults, and bribes back to the busybox mailing list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;busybox@busybox.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and/or maintainer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Denys Vlasenko&#xA;&amp;lt;vda.linux@googlemail.com&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>betascribbles/alx-low_level_programming</title>
    <updated>2022-10-29T01:32:31Z</updated>
    <id>tag:github.com,2022-10-29:/betascribbles/alx-low_level_programming</id>
    <link href="https://github.com/betascribbles/alx-low_level_programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project-based learning tasks that I am doing at alx-Holberton School year 1.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Low-Level Programming - Data Structures, Algorithms, Linux/Unix System Programming&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains programs written for the low-level programming and algorithm track at the alx-SoftwareEngineering program facilitated by Holberton School. I am learning about data structures, algorithms, and other low-level programming concepts while working in the C language. I update this repo with my learning progresses with hands-on projects as listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x00-hello_world&#34;&gt;0x00. C - Hello, World&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x01-variables_if_else_while&#34;&gt;0x01. C - Variables, if, else, while&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x02-functions_nested_loops&#34;&gt;0x02. C - Functions, nested loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x03-debugging&#34;&gt;0x03. C - debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x04-more_functions_nested_loops&#34;&gt;0x04. C - More functions, more nested loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x05-pointers_arrays_strings&#34;&gt;0x05. C - Pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x06-pointers_arrays_strings&#34;&gt;0x06. C - More pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x07-pointers_arrays_strings&#34;&gt;0x07. C - Even more pointers, arrays and strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x08-recursion&#34;&gt;0x08. C - Recursion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x09-static_libraries&#34;&gt;0x09. C - Static libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x0A-argc_argv&#34;&gt;0x0A. C - argc, argv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x0B-malloc_free&#34;&gt;0x0B. C - malloc, free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x0C-more_malloc_free&#34;&gt;0x0C. C - More malloc, free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x0D-preprocessor&#34;&gt;0x0D. C - Preprocessor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x0E-structures_typedef&#34;&gt;0x0E. C - Structures, typedef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x0F-function_pointers&#34;&gt;0x0F. C - Function pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x10-variadic_functions&#34;&gt;0x10. C - Variadic functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Faitholo/printf&#34;&gt;0x11. C - printf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x12-singly_linked_lists&#34;&gt;0x12. C - Singly linked lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x13-more_singly_linked_lists&#34;&gt;0x13-more_singly_linked_lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x14-bit_manipulation&#34;&gt;0x14-bit_manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/0x15-file_io&#34;&gt;0x15-file_io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;more projects are coming soon!!&lt;/li&gt; &#xA; &lt;li&gt;I am on my way to be the best software engineer that I can possibly be!!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/betascribbles/alx-low_level_programming/master/linktr.ee/firdaus_h_salim&#34;&gt;Firdaus H. Salim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;WARNING!!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This repo is done as a school assignment. Beware of copying my responses. I recommend you to read resources and come up with your own solutions instead. Feel free to reach out for help!&lt;/li&gt; &#xA; &lt;li&gt;This repo may contain some errors. If you notice any, please add a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>htop-dev/htop</title>
    <updated>2022-10-29T01:32:31Z</updated>
    <id>tag:github.com,2022-10-29:/htop-dev/htop</id>
    <link href="https://github.com/htop-dev/htop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;htop - an interactive process viewer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://htop.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/htop-dev/htop/main/htop.png&#34; alt=&#34;htop logo&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/htop-dev/htop/actions&#34;&gt;&lt;img src=&#34;https://github.com/htop-dev/htop/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/21665&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/21665/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.io/g/htop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Mailing%20List-htop-blue.svg?sanitize=true&#34; alt=&#34;Mailing List&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/#htop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC-htop-blue.svg?sanitize=true&#34; alt=&#34;IRC #htop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/htop-dev/htop/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/htop-dev/htop.svg?sanitize=true&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/htop/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/htop.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/htop-dev/htop/main/COPYING?raw=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v2+-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v2+&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/htop-dev/htop/main/docs/images/screenshot.png?raw=true&#34; alt=&#34;Screenshot of htop&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; is a cross-platform interactive process viewer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; allows scrolling the list of processes vertically and horizontally to see their full command lines and related information like memory and CPU consumption. Also system wide information, like load average or swap usage, is shown.&lt;/p&gt; &#xA;&lt;p&gt;The information displayed is configurable through a graphical setup and can be sorted and filtered interactively.&lt;/p&gt; &#xA;&lt;p&gt;Tasks related to processes (e.g. killing and renicing) can be done without entering their PIDs.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;htop&lt;/code&gt; requires &lt;code&gt;ncurses&lt;/code&gt; libraries, typically named libncurses(w).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; is written in C.&lt;/p&gt; &#xA;&lt;p&gt;For more information and details visit &lt;a href=&#34;https://htop.dev&#34;&gt;htop.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisite&lt;/h3&gt; &#xA;&lt;p&gt;List of build-time dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;standard GNU autotools-based C toolchain &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C99 compliant compiler&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;autoconf&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;automake&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;autotools&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ncurses&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note about &lt;code&gt;ncurses&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;htop&lt;/code&gt; requires &lt;code&gt;ncurses&lt;/code&gt; 6.0. Be aware the appropriate package is sometimes still called libncurses5 (on Debian/Ubuntu). Also &lt;code&gt;ncurses&lt;/code&gt; usually comes in two flavours:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;With Unicode support.&lt;/li&gt; &#xA;  &lt;li&gt;Without Unicode support.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;This is also something that is reflected in the package name on Debian/Ubuntu (via the additional &#39;w&#39; - &#39;w&#39;ide character support).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;List of additional build-time dependencies (based on feature flags):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sensors&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hwloc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libcap&lt;/code&gt; (v2.21 or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libnl-3&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install these and other required packages for C development from your package manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debian/Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install libncursesw5-dev autotools-dev autoconf automake build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fedora/RHEL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install ncurses-devel automake autoconf gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Archlinux/Manjaro&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo pacman -S ncurses automake autoconf gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ncurses automake autoconf gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile from source:&lt;/h3&gt; &#xA;&lt;p&gt;To compile from source, download from the Git repository (&lt;code&gt;git clone&lt;/code&gt; or downloads from &lt;a href=&#34;https://github.com/htop-dev/htop/releases/&#34;&gt;GitHub releases&lt;/a&gt;), then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./autogen.sh &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;To install on the local system run &lt;code&gt;make install&lt;/code&gt;. By default &lt;code&gt;make install&lt;/code&gt; installs into &lt;code&gt;/usr/local&lt;/code&gt;. To change this path use &lt;code&gt;./configure --prefix=/some/path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build Options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; has several build-time options to enable/disable additional features.&lt;/p&gt; &#xA;&lt;h4&gt;Generic&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-unicode&lt;/code&gt;: enable Unicode support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dependency: &lt;em&gt;libncursesw&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;yes&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-affinity&lt;/code&gt;: enable &lt;code&gt;sched_setaffinity(2)&lt;/code&gt; and &lt;code&gt;sched_getaffinity(2)&lt;/code&gt; for affinity support; conflicts with hwloc &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;check&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-hwloc&lt;/code&gt;: enable hwloc support for CPU affinity; disables affinity support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dependency: &lt;em&gt;libhwloc&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-static&lt;/code&gt;: build a static htop binary; hwloc and delay accounting are not supported &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-debug&lt;/code&gt;: Enable asserts and internal sanity checks; implies a performance penalty &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Performance Co-Pilot&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-pcp&lt;/code&gt;: enable Performance Co-Pilot support via a new pcp-htop utility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dependency: &lt;em&gt;libpcp&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-sensors&lt;/code&gt;: enable libsensors(3) support for reading temperature data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dependencies: &lt;em&gt;libsensors-dev&lt;/em&gt;(build-time), at runtime &lt;em&gt;libsensors&lt;/em&gt; is loaded via &lt;code&gt;dlopen(3)&lt;/code&gt; if available&lt;/li&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;check&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-capabilities&lt;/code&gt;: enable Linux capabilities support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dependency: &lt;em&gt;libcap&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;check&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-proc&lt;/code&gt;: location of a Linux-compatible proc filesystem &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;/proc&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-openvz&lt;/code&gt;: enable OpenVZ support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-vserver&lt;/code&gt;: enable VServer support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-ancient-vserver&lt;/code&gt;: enable ancient VServer support (implies &lt;code&gt;--enable-vserver&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;no&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enable-delayacct&lt;/code&gt;: enable Linux delay accounting support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dependencies: &lt;em&gt;pkg-config&lt;/em&gt;(build-time), &lt;em&gt;libnl-3&lt;/em&gt; and &lt;em&gt;libnl-genl-3&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;default: &lt;em&gt;check&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Runtime dependencies:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; has a set of fixed minimum runtime dependencies, which is kept as minimal as possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ncurses&lt;/code&gt; libraries for terminal handling (wide character support).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Runtime optional dependencies:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; has a set of fixed optional dependencies, depending on build/configure option used:&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libdl&lt;/code&gt;, if not building a static binary, is always required when support for optional dependencies (i.e. &lt;code&gt;libsensors&lt;/code&gt;, &lt;code&gt;libsystemd&lt;/code&gt;) is present.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libcap&lt;/code&gt;, user-space interfaces to POSIX 1003.1e capabilities, is always required when &lt;code&gt;--enable-capabilities&lt;/code&gt; was used to configure &lt;code&gt;htop&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libsensors&lt;/code&gt;, readout of temperatures and CPU speeds, is optional even when &lt;code&gt;--enable-sensors&lt;/code&gt; was used to configure &lt;code&gt;htop&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libsystemd&lt;/code&gt; is optional when &lt;code&gt;--enable-static&lt;/code&gt; was not used to configure &lt;code&gt;htop&lt;/code&gt;. If building statically and &lt;code&gt;libsystemd&lt;/code&gt; is not found by &lt;code&gt;configure&lt;/code&gt;, support for the systemd meter is disabled entirely.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; checks for the availability of the actual runtime libraries as &lt;code&gt;htop&lt;/code&gt; runs.&lt;/p&gt; &#xA;&lt;h4&gt;BSD&lt;/h4&gt; &#xA;&lt;p&gt;On most BSD systems &lt;code&gt;kvm&lt;/code&gt; is a requirement to read kernel information.&lt;/p&gt; &#xA;&lt;p&gt;More information on required and optional dependencies can be found in &lt;a href=&#34;https://raw.githubusercontent.com/htop-dev/htop/main/configure.ac&#34;&gt;configure.ac&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the manual page (&lt;code&gt;man htop&lt;/code&gt;) or the help menu (&lt;strong&gt;F1&lt;/strong&gt; or &lt;strong&gt;h&lt;/strong&gt; inside &lt;code&gt;htop&lt;/code&gt;) for a list of supported key commands.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have trouble running &lt;code&gt;htop&lt;/code&gt; please consult your operating system / Linux distribution documentation for getting support and filing bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs, development feedback&lt;/h2&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://htop.dev/mailinglist.html&#34;&gt;development mailing list&lt;/a&gt;. Feel free to subscribe for release announcements or asking questions on the development of &lt;code&gt;htop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join our IRC channel &lt;a href=&#34;https://web.libera.chat/#htop&#34;&gt;#htop on Libera.Chat&lt;/a&gt; and talk to the developers there.&lt;/p&gt; &#xA;&lt;p&gt;If you have found an issue within the source of &lt;code&gt;htop&lt;/code&gt;, please check whether this has already been reported in our &lt;a href=&#34;https://github.com/htop-dev/htop/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;. If not, please file a new issue describing the problem you have found, the potential location in the source code you are referring to and a possible fix if available.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; was invented, developed and maintained by &lt;a href=&#34;https://hisham.hm/&#34;&gt;Hisham Muhammad&lt;/a&gt; from 2004 to 2019. His &lt;a href=&#34;https://github.com/hishamhm/htop/&#34;&gt;legacy repository&lt;/a&gt; has been archived to preserve the history.&lt;/p&gt; &#xA;&lt;p&gt;In 2020 a &lt;a href=&#34;https://github.com/orgs/htop-dev/people&#34;&gt;team&lt;/a&gt; took over the development amicably and continues to maintain &lt;code&gt;htop&lt;/code&gt; collaboratively.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GNU General Public License, version 2 (GPL-2.0) or, at your option, any later version.&lt;/p&gt;</summary>
  </entry>
</feed>