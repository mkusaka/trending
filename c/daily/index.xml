<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-31T01:25:08Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tianocore/edk2-platforms</title>
    <updated>2024-01-31T01:25:08Z</updated>
    <id>tag:github.com,2024-01-31:/tianocore/edk2-platforms</id>
    <link href="https://github.com/tianocore/edk2-platforms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EDK II sample platform branches and tags&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This branch holds all platforms actively maintained against the &lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;edk2&lt;/a&gt; master branch.&lt;/p&gt; &#xA;&lt;p&gt;For generic information about the edk2-platforms repository, and the process under which &lt;em&gt;stable&lt;/em&gt; and &lt;em&gt;devel&lt;/em&gt; branches can be added for individual platforms, please see &lt;a href=&#34;https://github.com/tianocore/edk2-platforms/raw/about/Readme.md&#34;&gt;the introduction on the about branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The majority of the content in the EDK II open source project uses a &lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/License.txt&#34;&gt;BSD-2-Clause Plus Patent License&lt;/a&gt;. Additional details on EDK II open source project code contributions can be found in the edk2 repository &lt;a href=&#34;https://github.com/tianocore/edk2/raw/master/ReadMe.rst&#34;&gt;Readme.md&lt;/a&gt;. The EDK II Platforms open source project contains the following components that are covered by additional licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/riscv/opensbi/raw/master/COPYING.BSD&#34;&gt;&lt;code&gt;Silicon/RISC-V/ProcessorPkg/Library/RiscVOpensbiLib/opensbi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;INDEX&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#how-to-build-linux-environment&#34;&gt;How To Build (Linux Environment)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#manual-building&#34;&gt;Manual building&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#using-uefi-tools-helper-scripts&#34;&gt;Using uefi-tools helper scripts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#how-to-build-windows-environment&#34;&gt;How To Build (Windows Environment)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;Platform description files can be found under &lt;code&gt;Platform/{Vendor}/{Platform}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Many platforms require additional image processing beyond the EDK2 build. Any such steps should be documented (as a Readme.md), and any necessary helper scripts be contained, under said platform directory.&lt;/p&gt; &#xA;&lt;p&gt;Any contributions to this branch should be submitted via email to the edk2-devel mailing list with a subject prefix of &lt;code&gt;[platforms]&lt;/code&gt;. See &lt;a href=&#34;https://github.com/tianocore/tianocore.github.io/wiki/Laszlo&#39;s-unkempt-git-guide-for-edk2-contributors-and-maintainers&#34;&gt;Laszlo&#39;s excellent guide&lt;/a&gt; for details on how to do this successfully.&lt;/p&gt; &#xA;&lt;h1&gt;How to build (Linux Environment)&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The build tools themselves depend on Python (2) and libuuid. Most Linux systems will come with a Python environment installed by default, but you usually need to install uuid-dev (or uuid-devel, depending on distribution) manually.&lt;/p&gt; &#xA;&lt;h2&gt;If cross compiling&lt;/h2&gt; &#xA;&lt;p&gt;If building EDK2 for a different archtecture than the build machine, you need to obtain an appropriate cross-compiler. X64 (x86_64) compilers also support IA32, but the reverse may not always be true.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Target architecture&lt;/th&gt; &#xA;   &lt;th&gt;Cross compilation prefix&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AARCH64&lt;/td&gt; &#xA;   &lt;td&gt;aarch64-linux-gnu-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARM&lt;/td&gt; &#xA;   &lt;td&gt;arm-linux-gnueabihf-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IA32&lt;/td&gt; &#xA;   &lt;td&gt;i?86-linux-gnu-* &lt;em&gt;or&lt;/em&gt; x86_64-linux-gnu-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IPF&lt;/td&gt; &#xA;   &lt;td&gt;ia64-linux-gnu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X64&lt;/td&gt; &#xA;   &lt;td&gt;x86_64-linux-gnu-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RISCV64&lt;/td&gt; &#xA;   &lt;td&gt;riscv64-unknown-elf-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LOONGARCH64&lt;/td&gt; &#xA;   &lt;td&gt;loongarch64-unknown-linux-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* i386, i486, i586 or i686&lt;/p&gt; &#xA;&lt;h3&gt;GCC&lt;/h3&gt; &#xA;&lt;p&gt;Arm provides GCC toolchains for aarch64-linux-gnu and arm-linux-gnueabihf at &lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads&#34;&gt;GNU Toolchain for the A-profile Architecture&lt;/a&gt; compiled to run on x86_64/i686 Linux and i686 Windows. Some Linux distributions provide their own packaged cross-toolchains.&lt;/p&gt; &#xA;&lt;h3&gt;GCC for RISC-V&lt;/h3&gt; &#xA;&lt;p&gt;RISC-V open source community provides GCC toolchains for &lt;a href=&#34;https://github.com/riscv/riscv-gnu-toolchain&#34;&gt;riscv64-unknown-elf&lt;/a&gt; compiled to run on x86 Linux.&lt;/p&gt; &#xA;&lt;h3&gt;GCC for LoongArch&lt;/h3&gt; &#xA;&lt;p&gt;Loonson open source community provides GCC toolchains for &lt;a href=&#34;https://github.com/loongson/build-tools&#34;&gt;loongarch64-unknown-elf&lt;/a&gt; compiled to run on x86 Linux&lt;/p&gt; &#xA;&lt;h3&gt;clang&lt;/h3&gt; &#xA;&lt;p&gt;Clang does not require separate cross compilers, but it does need a target-specific binutils. These are included with any prepackaged GCC toolchain (see above), or can be installed or built separately.&lt;/p&gt; &#xA;&lt;h2&gt;Obtaining source code&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new folder (directory) on your local development machine for use as your workspace. This example uses &lt;code&gt;/work/git/tianocore&lt;/code&gt;, modify as appropriate for your needs.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ export WORKSPACE=/work/git/tianocore&#xA;$ mkdir -p $WORKSPACE&#xA;$ cd $WORKSPACE&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Into that folder, clone:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tianocore/edk2&#34;&gt;edk2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tianocore/edk2-platforms&#34;&gt;edk2-platforms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tianocore/edk2-non-osi&#34;&gt;edk2-non-osi&lt;/a&gt; (if building platforms that need it)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/tianocore/edk2.git&#xA;$ git submodule update --init&#xA;...&#xA;$ git clone https://github.com/tianocore/edk2-platforms.git&#xA;$ git submodule update --init&#xA;...&#xA;$ git clone https://github.com/tianocore/edk2-non-osi.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up a &lt;strong&gt;PACKAGES_PATH&lt;/strong&gt; to point to the locations of these three repositories:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ export PACKAGES_PATH=$PWD/edk2:$PWD/edk2-platforms:$PWD/edk2-non-osi&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Manual building&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up the build environment (this will modify your environment variables)&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ . edk2/edksetup.sh&lt;/code&gt;&lt;/p&gt; &lt;p&gt;(This step &lt;em&gt;depends&lt;/em&gt; on &lt;strong&gt;WORKSPACE&lt;/strong&gt; being set as per above.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build BaseTools&lt;/p&gt; &lt;p&gt;&lt;code&gt;make -C edk2/BaseTools&lt;/code&gt;&lt;/p&gt; &lt;p&gt;(BaseTools can currently not be built in parallel, so do not specify any &lt;code&gt;-j&lt;/code&gt; option, either on the command line or in a &lt;strong&gt;MAKEFLAGS&lt;/strong&gt; environment variable.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build options&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of options that can (or must) be specified at the point of building. Their default values are set in &lt;code&gt;edk2/Conf/target.txt&lt;/code&gt;. If we are working only on a single platform, it makes sense to just update this file.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;target.txt option&lt;/th&gt; &#xA;   &lt;th&gt;command line&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ACTIVE_PLATFORM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Description file (.dsc) of platform.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TARGET&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;One of DEBUG, RELEASE or NOOPT.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TARGET_ARCH&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Architecture to build for.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOOL_CHAIN_TAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toolchain profile to use for building.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There is also MAX_CONCURRENT_THREAD_NUMBER (&lt;code&gt;-n&lt;/code&gt;), roughly equivalent to &lt;code&gt;make -j&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When specified on command line, &lt;code&gt;-b&lt;/code&gt; can be repeated multiple times in order to build multiple targets sequentially.&lt;/p&gt; &#xA;&lt;p&gt;After a successful build, the resulting images can be found in &lt;code&gt;Build/{Platform Name}/{TARGET}_{TOOL_CHAIN_TAG}/FV&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build a platform&lt;/h3&gt; &#xA;&lt;p&gt;The main build process &lt;em&gt;can&lt;/em&gt; run in parallel - so figure out how many threads we have available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ getconf _NPROCESSORS_ONLN&#xA;8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OK, so we have 8 CPUs - let&#39;s tell the build to use a little more than that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ NUM_CPUS=$((`getconf _NPROCESSORS_ONLN` + 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the toolchain tag, use GCC5 for gcc version 5 or later, GCC4x for earlier versions, or CLANG35/CLANG38 as appropriate when building with clang.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ build -n $NUM_CPUS -a AARCH64 -t GCC5 -p Platform/ARM/JunoPkg/ArmJuno.dsc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note that the description file gets resolved by the build command through searching in all locations specified in &lt;strong&gt;PACKAGES_PATH&lt;/strong&gt;.)&lt;/p&gt; &#xA;&lt;h4&gt;If cross-compiling&lt;/h4&gt; &#xA;&lt;p&gt;When cross-compiling, or building with a different version of the compiler than the default &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt;(/binutils), we additionally need to inform the build command which toolchain to use. We do this by setting the environment variable &lt;code&gt;{TOOL_CHAIN_TAG}_{TARGET_ARCH}_PREFIX&lt;/code&gt; - in the case above, &lt;strong&gt;GCC5_AARCH64_PREFIX&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So, referring to the cross compiler toolchain table above, we should prepend the &lt;code&gt;build&lt;/code&gt; command line with &lt;code&gt;GCC5_AARCH64_PREFIX=aarch64-linux-gnu-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using uefi-tools helper scripts&lt;/h2&gt; &#xA;&lt;p&gt;uefi-tools is a completely unofficial set of helper-scripts developed by Linaro. They automate figuring out all of the manual options above, and store the paths to platform description files in a separate configuration file. Additionally, they simplify bulk-building large numbers of platforms.&lt;/p&gt; &#xA;&lt;p&gt;The (best effort) intent is to keep this configuration up to date with all platforms that exist in the edk2-platforms master branch.&lt;/p&gt; &#xA;&lt;p&gt;The equivalent of the manual example above would be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://git.linaro.org/uefi/uefi-tools.git&#xA;...&#xA;$ ./uefi-tools/edk2-build.sh juno&#xA;...&#xA;------------------------------------------------------------&#xA;                         aarch64 Juno (AARCH64) RELEASE pass&#xA;------------------------------------------------------------&#xA;pass   1&#xA;fail   0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build finishes with a summary of which platforms/targets were built, which succeeded and which failed (and the total number of either).&lt;/p&gt; &#xA;&lt;p&gt;Like the &lt;code&gt;build&lt;/code&gt; command itself, &lt;code&gt;edk2-build.sh&lt;/code&gt; it supports specifying multiple targets on a single command line, but it also lets you specify multiple platforms (or &lt;code&gt;all&lt;/code&gt; for building all known platforms). So in order to build all platforms described by the configuration file, for both DEBUG and RELEASE targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./uefi-tools/edk2-build.sh -b DEBUG -b RELEASE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How To Build (Windows Environment)&lt;/h1&gt; &#xA;&lt;p&gt;(I genuinely have no idea. Please help!)&lt;/p&gt; &#xA;&lt;h1&gt;Supported Platforms&lt;/h1&gt; &#xA;&lt;p&gt;These are the platforms currently supported by this tree - grouped by Processor/SoC vendor, rather than platform vendor.&lt;/p&gt; &#xA;&lt;p&gt;If there are any additional build steps beyond the generic ones listed above, they will be documented with the platform.&lt;/p&gt; &#xA;&lt;h2&gt;AMD&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/LeMaker/CelloBoard&#34;&gt;Cello&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/AMD/OverdriveBoard&#34;&gt;Overdrive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/SoftIron/Overdrive1000Board&#34;&gt;Overdrive 1000&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Ampere/Readme.md&#34;&gt;Ampere&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Ampere/JadePkg&#34;&gt;Mt. Jade&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/ARM/Readme.md&#34;&gt;ARM&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/ARM/JunoPkg&#34;&gt;Juno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/ARM/SgiPkg&#34;&gt;SGI family&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BeagleBoard&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/BeagleBoard/BeagleBoardPkg&#34;&gt;BeagleBoard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hisilicon&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Hisilicon/D03&#34;&gt;D03&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Hisilicon/D05&#34;&gt;D05&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Hisilicon/D06&#34;&gt;D06&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Hisilicon/HiKey&#34;&gt;HiKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Hisilicon/HiKey960&#34;&gt;HiKey960&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Intel&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/Readme.md&#34;&gt;Minimum Platforms&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/KabylakeOpenBoardPkg&#34;&gt;Kaby Lake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/PurleyOpenBoardPkg&#34;&gt;Purley&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/SimicsOpenBoardPkg&#34;&gt;Simics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/WhiskeylakeOpenBoardPkg&#34;&gt;Whiskey Lake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/CometlakeOpenBoardPkg&#34;&gt;Comet Lake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/TigerlakeOpenBoardPkg&#34;&gt;Tiger Lake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/WhitleyOpenBoardPkg&#34;&gt;Whitley/Cedar Island&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/AlderlakeOpenBoardPkg&#34;&gt;Alder Lake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://edk2-docs.gitbooks.io/edk-ii-minimum-platform-specification&#34;&gt;EDK II Minimum Platform Specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other Platforms&lt;/h3&gt; &#xA;&lt;h5&gt;Intel® Quark SoC X1000 based platforms&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/QuarkPlatformPkg&#34;&gt;Galileo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Minnowboard Max/Turbot based on Intel Valleyview2 SoC&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Intel/Vlv2TbltDevicePkg&#34;&gt;Minnowboard Max&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Loongson&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Loongson/LoongArchQemuPkg&#34;&gt;LoongArchQemu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Marvell&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Marvell/Armada70x0Db&#34;&gt;Armada 70x0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Marvell/Armada80x0Db&#34;&gt;Armada 80x0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Marvell/Cn913xDb&#34;&gt;CN913x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/SolidRun/Armada80x0McBin&#34;&gt;SolidRun Armada MacchiatoBin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Raspberry Pi&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/RaspberryPi/RPi3&#34;&gt;Pi 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/RaspberryPi/RPi4&#34;&gt;Pi 4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RISC-V&lt;/h2&gt; &#xA;&lt;h3&gt;SiFive&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/SiFive/U5SeriesPkg&#34;&gt;Sifive U5 Series&lt;/a&gt; Refer to Platform/SiFive/U5Series/Readme.md on edk2-platform repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/SiFive/U5SeriesPkg/FreedomU500VC707Board&#34;&gt;Freedom U500 VC707 FPGA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/SiFive/U5SeriesPkg/FreedomU540HiFiveUnleashedBoard&#34;&gt;Freedom U540 HiFive Unleashed&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Socionext&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Socionext/DeveloperBox&#34;&gt;SynQuacer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NXP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/NXP/LS1043aRdbPkg&#34;&gt;LS1043aRdb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Qemu&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Platform/Qemu/SbsaQemu&#34;&gt;SBSA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Maintainers&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tianocore/edk2-platforms/master/Maintainers.txt&#34;&gt;Maintainers.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Submodules&lt;/h1&gt; &#xA;&lt;p&gt;Submodule in EDK II Platforms is allowed but submodule chain should be avoided as possible as we can. Currently EDK II Platforms contains the following submodules&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Silicon/RISC-V/ProcessorPkg/Library/RiscVOpensbiLib/opensbi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get a full, buildable EDK II repository, use following steps of git command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/tianocore/edk2-platforms.git&#xA;  cd edk2-platforms&#xA;  git submodule update --init&#xA;  cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there&#39;s update for submodules, use following git commands to get the latest submodules code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  cd edk2-platforms&#xA;  git pull&#xA;  git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: When cloning submodule repos, &#39;--recursive&#39; option is not recommended. EDK II Platforms itself will not use any code/feature from submodules in above submodules. So using &#39;--recursive&#39; adds a dependency on being able to reach servers we do not actually want any code from, as well as needlessly downloading code we will not use.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cracked5pider/Stardust</title>
    <updated>2024-01-31T01:25:08Z</updated>
    <id>tag:github.com,2024-01-31:/Cracked5pider/Stardust</id>
    <link href="https://github.com/Cracked5pider/Stardust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern 64-bit position independent implant template&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stardust&lt;/h1&gt; &#xA;&lt;p&gt;An modern 64-bit position independent implant template.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;raw strings&lt;/li&gt; &#xA; &lt;li&gt;global instance&lt;/li&gt; &#xA; &lt;li&gt;compile time hashing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;Common.h&amp;gt;&#xA;#include &amp;lt;Constexpr.h&amp;gt;&#xA;&#xA;FUNC VOID Main(&#xA;    _In_ PVOID Param&#xA;) {&#xA;    STARDUST_INSTANCE&#xA;&#xA;    PVOID Message = { 0 };&#xA;&#xA;    //&#xA;    // resolve kernel32.dll related functions&#xA;    //&#xA;    if ( ( Instance()-&amp;gt;Modules.Kernel32 = LdrModulePeb( H_MODULE_KERNEL32 ) ) ) {&#xA;        if ( ! ( Instance()-&amp;gt;Win32.LoadLibraryW = LdrFunction( Instance()-&amp;gt;Modules.Kernel32, HASH_STR( &#34;LoadLibraryW&#34; ) ) ) ) {&#xA;            return;&#xA;        }&#xA;    }&#xA;&#xA;    //&#xA;    // resolve user32.dll related functions&#xA;    //&#xA;    if ( ( Instance()-&amp;gt;Modules.User32 = Instance()-&amp;gt;Win32.LoadLibraryW( L&#34;User32&#34; ) ) ) {&#xA;        if ( ! ( Instance()-&amp;gt;Win32.MessageBoxW = LdrFunction( Instance()-&amp;gt;Modules.User32, HASH_STR( &#34;MessageBoxW&#34; ) ) ) ) {&#xA;            return;&#xA;        }&#xA;    }&#xA;&#xA;    Message = NtCurrentPeb()-&amp;gt;ProcessParameters-&amp;gt;ImagePathName.Buffer;&#xA;&#xA;    //&#xA;    // pop da message&#xA;    //&#xA;    Instance()-&amp;gt;Win32.MessageBoxW( NULL, Message, L&#34;Stardust MessageBox&#34;, MB_OK );&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How does it work ?&lt;/h2&gt; &#xA;&lt;p&gt;I have written a &lt;a href=&#34;https://5pider.net/blog/2024/01/27/modern-shellcode-implant-design/&#34;&gt;Blog post&lt;/a&gt; about how it fully works and the reason behind it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://5pider.net/assets/images/MessagePop-4e72bc8a03044463b6afa71d8881646a.png&#34; alt=&#34;Stardust messagebox&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>