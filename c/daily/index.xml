<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T01:36:01Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>timescale/timescaledb</title>
    <updated>2022-07-10T01:36:01Z</updated>
    <id>tag:github.com,2022-07-10:/timescale/timescaledb</id>
    <link href="https://github.com/timescale/timescaledb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source time-series SQL database optimized for fast ingest and complex queries. Packaged as a PostgreSQL extension.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux/macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux i386&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coverity&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code Coverage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions?query=workflow%3ARegression+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/workflows/Regression/badge.svg?event=schedule&#34; alt=&#34;Build Status Linux/macOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions?query=workflow%3A%22Regression+Linux+i386%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/workflows/Regression%20Linux%20i386/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Build Status Linux i386&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.appveyor.com/project/timescale/timescaledb/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/15sqkl900t04hywu/branch/main?svg=true&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/timescale-timescaledb&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/timescale-timescaledb/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://codecov.io/gh/timescale/timescaledb&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/timescale/timescaledb/branch/main/graphs/badge.svg?branch=main&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TimescaleDB&lt;/h2&gt; &#xA;&lt;p&gt;TimescaleDB is an open-source database designed to make SQL scalable for time-series data. It is engineered up from PostgreSQL and packaged as a PostgreSQL extension, providing automatic partitioning across time and space (partitioning key), as well as full SQL support.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not to install or administer your instance of TimescaleDB, &lt;a href=&#34;https://tsdb.co/GitHubTimescaleCloud&#34;&gt;hosted versions of TimescaleDB&lt;/a&gt; are available in the cloud of your choice (pay-as-you-go, with a free trial to start).&lt;/p&gt; &#xA;&lt;p&gt;To determine which option is best for you, see &lt;a href=&#34;https://tsdb.co/GitHubTimescaleProducts&#34;&gt;Timescale Products&lt;/a&gt; for more information about our Apache-2 version, TimescaleDB Community (self-hosted), and Timescale Cloud (hosted), including: feature comparisons, FAQ, documentation, and support.&lt;/p&gt; &#xA;&lt;p&gt;Below is an introduction to TimescaleDB. For more information, please check out these other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleDocs&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack-login.timescale.com&#34;&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleReleaseNotes&#34;&gt;Timescale Release Notes &amp;amp; Future Plans&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For reference and clarity, all code files in this repository reference licensing in their header (either the Apache-2-open-source license or &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/tsl/LICENSE-TIMESCALE&#34;&gt;Timescale License (TSL)&lt;/a&gt; ). Apache-2 licensed binaries can be built by passing &lt;code&gt;-DAPACHE_ONLY=1&lt;/code&gt; to &lt;code&gt;bootstrap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/CONTRIBUTING.md&#34;&gt;Contributors welcome.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(To build TimescaleDB from source, see instructions in &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/BuildSource.md&#34;&gt;&lt;em&gt;Building from source&lt;/em&gt;&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Using TimescaleDB&lt;/h3&gt; &#xA;&lt;p&gt;TimescaleDB scales PostgreSQL for time-series data via automatic partitioning across time and space (partitioning key), yet retains the standard PostgreSQL interface.&lt;/p&gt; &#xA;&lt;p&gt;In other words, TimescaleDB exposes what look like regular tables, but are actually only an abstraction (or a virtual view) of many individual tables comprising the actual data. This single-table view, which we call a &lt;a href=&#34;https://tsdb.co/GitHubTimescaleHypertable&#34;&gt;hypertable&lt;/a&gt;, is comprised of many chunks, which are created by partitioning the hypertable&#39;s data in either one or two dimensions: by a time interval, and by an (optional) &#34;partition key&#34; such as device id, location, user id, etc. (&lt;a href=&#34;https://docs.timescale.com/timescaledb/latest/overview/core-concepts/&#34;&gt;Architecture discussion&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Virtually all user interactions with TimescaleDB are with hypertables. Creating tables and indexes, altering tables, inserting data, selecting data, etc., can (and should) all be executed on the hypertable.&lt;/p&gt; &#xA;&lt;p&gt;From the perspective of both use and management, TimescaleDB just looks and feels like PostgreSQL, and can be managed and queried as such.&lt;/p&gt; &#xA;&lt;h4&gt;Before you start&lt;/h4&gt; &#xA;&lt;p&gt;PostgreSQL&#39;s out-of-the-box settings are typically too conservative for modern servers and TimescaleDB. You should make sure your &lt;code&gt;postgresql.conf&lt;/code&gt; settings are tuned, either by using &lt;a href=&#34;https://github.com/timescale/timescaledb-tune&#34;&gt;timescaledb-tune&lt;/a&gt; or doing it manually.&lt;/p&gt; &#xA;&lt;h4&gt;Creating a hypertable&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Do not forget to create timescaledb extension&#xA;CREATE EXTENSION timescaledb;&#xA;&#xA;-- We start by creating a regular SQL table&#xA;CREATE TABLE conditions (&#xA;  time        TIMESTAMPTZ       NOT NULL,&#xA;  location    TEXT              NOT NULL,&#xA;  temperature DOUBLE PRECISION  NULL,&#xA;  humidity    DOUBLE PRECISION  NULL&#xA;);&#xA;&#xA;-- Then we convert it into a hypertable that is partitioned by time&#xA;SELECT create_hypertable(&#39;conditions&#39;, &#39;time&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleCreateHypertables&#34;&gt;Quick start: Creating hypertables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleHypertableReference&#34;&gt;Reference examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Inserting and querying data&lt;/h4&gt; &#xA;&lt;p&gt;Inserting data into the hypertable is done via normal SQL commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO conditions(time, location, temperature, humidity)&#xA;  VALUES (NOW(), &#39;office&#39;, 70.0, 50.0);&#xA;&#xA;SELECT * FROM conditions ORDER BY time DESC LIMIT 100;&#xA;&#xA;SELECT time_bucket(&#39;15 minutes&#39;, time) AS fifteen_min,&#xA;    location, COUNT(*),&#xA;    MAX(temperature) AS max_temp,&#xA;    MAX(humidity) AS max_hum&#xA;  FROM conditions&#xA;  WHERE time &amp;gt; NOW() - interval &#39;3 hours&#39;&#xA;  GROUP BY fifteen_min, location&#xA;  ORDER BY fifteen_min DESC, max_temp DESC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, TimescaleDB includes additional functions for time-series analysis that are not present in vanilla PostgreSQL. (For example, the &lt;code&gt;time_bucket&lt;/code&gt; function above.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleBasicOperations&#34;&gt;Quick start: Basic operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleWriteData&#34;&gt;Reference examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleAPI&#34;&gt;TimescaleDB API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;TimescaleDB is available pre-packaged for several platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleRedHatCentOS&#34;&gt;RedHat / CentOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleUbuntu&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleDebian&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleDocker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleMacOS&#34;&gt;MacOS (Homebrew)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleWindows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleCloud&#34;&gt;Timescale Cloud&lt;/a&gt; (cloud-hosted and managed TimescaleDB) is available via free trial. You create database instances in the cloud of your choice and use TimescaleDB to power your queries, automating common operational tasks and reducing management overhead.&lt;/p&gt; &#xA;&lt;p&gt;We recommend following our detailed &lt;a href=&#34;https://tsdb.co/GitHubTimescaleInstall&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build from source, see instructions &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/BuildSource.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Useful tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb-tune&#34;&gt;timescaledb-tune&lt;/a&gt;: Helps set your PostgreSQL configuration settings based on your system&#39;s resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb-parallel-copy&#34;&gt;timescaledb-parallel-copy&lt;/a&gt;: Parallelize your initial bulk loading by using PostgreSQL&#39;s &lt;code&gt;COPY&lt;/code&gt; across multiple workers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleIntro&#34;&gt;Why use TimescaleDB?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescalePostgresMigrate&#34;&gt;Migrating from PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleWriteData&#34;&gt;Writing data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleReadData&#34;&gt;Querying and data analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleTutorials&#34;&gt;Tutorials and sample data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community &amp;amp; help&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.timescale.com&#34;&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleSupport&#34;&gt;Timescale Support&lt;/a&gt;: see support options (community &amp;amp; subscription)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releases &amp;amp; updates&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleReleaseNotes&#34;&gt;Timescale Release Notes &amp;amp; Future Plans&lt;/a&gt;: see planned and in-progress updates and detailed information about current and past releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tsdb.co/GitHubTimescaleGetReleaseNotes&#34;&gt;Subscribe to Timescale Release Notes&lt;/a&gt; to get notified about new releases, fixes, and early access/beta programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/CONTRIBUTING.md&#34;&gt;Contributor instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/StyleGuide.md&#34;&gt;Code style guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>blackmagic-debug/blackmagic</title>
    <updated>2022-07-10T01:36:01Z</updated>
    <id>tag:github.com,2022-07-10:/blackmagic-debug/blackmagic</id>
    <link href="https://github.com/blackmagic-debug/blackmagic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In application debugger for ARM Cortex microcontrollers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Black Magic Probe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/P7FYThy&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/613131135903596547?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Firmware for the Black Magic Debug Probe.&lt;/p&gt; &#xA;&lt;p&gt;The Black Magic Probe is a modern, in-application debugging tool for embedded microprocessors. It allows you see what is going on &#39;inside&#39; an application running on an embedded microprocessor while it executes. It is able to control and examine the state of the target microprocessor using a JTAG or Serial Wire Debugging (SWD) port and on-chip debug logic provided by the microprocessor. The probe connects to a host computer using a standard USB interface. The user is able to control exactly what happens using the GNU source level debugging software, GDB. Serial Wire Output (SWO) allows the target to write tracing and logging to the host without using usb or serial port. Decoding SWO in the probe itself makes &lt;a href=&#34;https://github.com/blackmagic-debug/blackmagic/wiki/Serial-Wire-Output&#34;&gt;SWO viewing as simple as connecting to a serial port&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blackmagic-debug/blackmagic/wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://builds.blacksphere.co.nz/blackmagic&#34;&gt;Binary builds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Toolchain specific remarks&lt;/h2&gt; &#xA;&lt;p&gt;Building the firmware is done with the most recent toolchain available from &lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm&#34;&gt;ARM&#39;s GNU-RM toolchains&lt;/a&gt;. If you have a toolchain from other sources and find problems, check if it is a failure of your toolchain and if not open an issue or better provide a pull request with a fix.&lt;/p&gt; &#xA;&lt;h2&gt;OS specific remarks for BMP-Hosted&lt;/h2&gt; &#xA;&lt;p&gt;Most hosted building is done on and for Linux. BMP-hosted for windows can also be build with Mingw on Linux.&lt;/p&gt; &#xA;&lt;p&gt;Building hosted for BMP firmware probes only with &#34;make PROBE_HOST=hosted HOSTED_BMP_ONLY=1&#34; does not require libusb, libftdi and evt. libhidapi development headers and libraries for running.&lt;/p&gt; &#xA;&lt;p&gt;On BSD/Macos, using dev/tty.usbmodemXXX should work but unresolved discussions indicate a hanging open() call on the second invocation. If that happens, try with cu.usbmodemXXX.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting problems&lt;/h2&gt; &#xA;&lt;p&gt;Before reporting issues, check against the latest git version. If possible, test against another target /and/or debug probe. Consider broken USB cables and connectors. Try to reproduce with bmp-hosted with at least debug bit 1 set (blackmagic -v 1 ...), as debug messages will be dumped to the starting console. When reporting issues, be as specific as possible!&lt;/p&gt; &#xA;&lt;h2&gt;Sample Session&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;gt; arm-none-eabi-gdb gpio.elf&#xA;...&amp;lt;GDB Copyright message&amp;gt;&#xA;(gdb) tar ext /dev/ttyACM0&#xA;Remote debugging using /dev/ttyACM0&#xA;(gdb) mon s&#xA;Target voltage: 2.94V&#xA;Available Targets:&#xA;No. Att Driver&#xA; 1      STM32F40x M3/M4&#xA;(gdb) att 1&#xA;Attaching to program: /devel/en_apps/gpio/f4_discovery/gpio.elf, Remote target&#xA;0x08002298 in UsartIOCtl ()&#xA;(gdb) load&#xA;Loading section .text, size 0x5868 lma 0x8000000&#xA;Loading section .data, size 0x9e0 lma 0x8005868&#xA;Loading section .rodata, size 0x254 lma 0x8006248&#xA;Start address 0x800007c, load size 25756&#xA;Transfer rate: 31 KB/sec, 919 bytes/write.&#xA;(gdb) b main&#xA;Breakpoint 1 at 0x80000e8: file /devel/en_apps/gpio/f4_discovery/../gpio.c, line 70.&#xA;(gdb) r&#xA;Starting program: /devel/en_apps/gpio/f4_discovery/gpio.elf&#xA;Note: automatically using hardware breakpoints for read-only addresses.&#xA;&#xA;Breakpoint 1, main () at /devel/en_apps/gpio/f4_discovery/../gpio.c:70&#xA;70      {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Black Magic Debug App&lt;/h2&gt; &#xA;&lt;p&gt;You can also build the Black Magic Debug suite as a PC program called Black Magic Debug App by running &lt;code&gt;make PROBE_HOST=hosted&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This builds the same GDB server that is running on the Black Magic Probe. While connection to the Black Magic Probe GDB server is via serial line, connection to the Black Magic Debug App is via TCP port 2000 for the first GDB server and higher for more invokations. Use &#34;tar(get) ext(ented) :2000&#34; to connect.&lt;/p&gt; &#xA;&lt;p&gt;Black Magic Debug App can talk to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Black Magic Probe firmware probes via the USB-serial port&lt;/li&gt; &#xA; &lt;li&gt;ST-LinkV2 and V3 with recent firmware&lt;/li&gt; &#xA; &lt;li&gt;CMSIS-DAP compatible probes&lt;/li&gt; &#xA; &lt;li&gt;JLINK probes&lt;/li&gt; &#xA; &lt;li&gt;FTDI MPSSE based probe.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When connected to a single BMP supported probe, starting &#34;blackmagic&#34; w/o any arguments starts the server. When several BMP supported probes are connected, their types, position and serial number is displayed and the program exits. Add &#34;-P (position)&#34; to the next invocation to select one. For the setup from the sample session above:&lt;/p&gt; &#xA;&lt;p&gt;In another terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;gt; blackmagic&#xA;Black Magic Debug App v1.8.0&#xA; for Black Magic Probe, ST-Link v2 and v3, CMSIS-DAP, JLink and libftdi/MPSSE&#xA;Using 1d50:6018 8BB20A03 Black Magic Debug&#xA; Black Magic Probe  v1.8.0&#xA;Listening on TCP: 2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the GDB terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;(gdb) tar ext :2000&#xA;Remote debugging using :2000&#xA;(gdb) mon s&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Black Magic Debug App also provides for Flashing, reading and verification of a binary file, by default starting at lowest flash address. The &lt;code&gt;-t&lt;/code&gt; argument displays information about the connected target. Use &lt;code&gt;-h&lt;/code&gt;/&lt;code&gt;--help&lt;/code&gt; to get a list of supported options.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spdk/spdk</title>
    <updated>2022-07-10T01:36:01Z</updated>
    <id>tag:github.com,2022-07-10:/spdk/spdk</id>
    <link href="https://github.com/spdk/spdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Storage Performance Development Kit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Storage Performance Development Kit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/spdk/spdk&#34;&gt;&lt;img src=&#34;https://travis-ci.org/spdk/spdk.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Storage Performance Development Kit (&lt;a href=&#34;http://www.spdk.io&#34;&gt;SPDK&lt;/a&gt;) provides a set of tools and libraries for writing high performance, scalable, user-mode storage applications. It achieves high performance by moving all of the necessary drivers into userspace and operating in a polled mode instead of relying on interrupts, which avoids kernel context switches and eliminates interrupt handling overhead.&lt;/p&gt; &#xA;&lt;p&gt;The development kit currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spdk.io/doc/nvme.html&#34;&gt;NVMe driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spdk.io/doc/ioat.html&#34;&gt;I/OAT (DMA engine) driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spdk.io/doc/nvmf.html&#34;&gt;NVMe over Fabrics target&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spdk.io/doc/iscsi.html&#34;&gt;iSCSI target&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spdk.io/doc/vhost.html&#34;&gt;vhost target&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.spdk.io/doc/virtio.html&#34;&gt;Virtio-SCSI driver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;In this readme&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#source&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#libraries&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#tests&#34;&gt;Unit Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#vagrant&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#aws&#34;&gt;AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#advanced&#34;&gt;Advanced Build Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#shared&#34;&gt;Shared libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#huge&#34;&gt;Hugepages and Device Binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#examples&#34;&gt;Example Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spdk/spdk/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.spdk.io/doc/&#34;&gt;Doxygen API documentation&lt;/a&gt; is available, as well as a &lt;a href=&#34;http://www.spdk.io/doc/porting.html&#34;&gt;Porting Guide&lt;/a&gt; for porting SPDK to different frameworks and operating systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;source&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;git clone https://github.com/spdk/spdk&#xA;cd spdk&#xA;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;prerequisites&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The dependencies can be installed automatically by &lt;code&gt;scripts/pkgdep.sh&lt;/code&gt;. The &lt;code&gt;scripts/pkgdep.sh&lt;/code&gt; script will automatically install the bare minimum dependencies required to build SPDK. Use &lt;code&gt;--help&lt;/code&gt; to see information on installing dependencies for optional components&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./scripts/pkgdep.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;libraries&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./configure&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FreeBSD: Note: Make sure you have the matching kernel source in /usr/src/ and also note that CONFIG_COVERAGE option is not available right now for FreeBSD builds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./configure&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./test/unit/unittest.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see several error messages when running the unit tests, but they are part of the test suite. The final message at the end of the script indicates success or failure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;vagrant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Vagrant&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;Vagrant&lt;/a&gt; setup is also provided to create a Linux VM with a virtual NVMe controller to get up and running quickly. Currently this has been tested on MacOS, Ubuntu 16.04.2 LTS and Ubuntu 18.04.3 LTS with the VirtualBox and Libvirt provider. The &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;VirtualBox Extension Pack&lt;/a&gt; or [Vagrant Libvirt] (&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt&#34;&gt;https://github.com/vagrant-libvirt/vagrant-libvirt&lt;/a&gt;) must also be installed in order to get the required NVMe support.&lt;/p&gt; &#xA;&lt;p&gt;Details on the Vagrant setup can be found in the &lt;a href=&#34;http://spdk.io/doc/vagrant.html&#34;&gt;SPDK Vagrant documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;aws&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AWS&lt;/h2&gt; &#xA;&lt;p&gt;The following setup is known to work on AWS: Image: Ubuntu 18.04 Before running &lt;code&gt;setup.sh&lt;/code&gt;, run &lt;code&gt;modprobe vfio-pci&lt;/code&gt; then: &lt;code&gt;DRIVER_OVERRIDE=vfio-pci ./setup.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;advanced&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Build Options&lt;/h2&gt; &#xA;&lt;p&gt;Optional components and other build-time configuration are controlled by settings in the Makefile configuration file in the root of the repository. &lt;code&gt;CONFIG&lt;/code&gt; contains the base settings for the &lt;code&gt;configure&lt;/code&gt; script. This script generates a new file, &lt;code&gt;mk/config.mk&lt;/code&gt;, that contains final build settings. For advanced configuration, there are a number of additional options to &lt;code&gt;configure&lt;/code&gt; that may be used, or &lt;code&gt;mk/config.mk&lt;/code&gt; can simply be created and edited by hand. A description of all possible options is located in &lt;code&gt;CONFIG&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Boolean (on/off) options are configured with a &#39;y&#39; (yes) or &#39;n&#39; (no). For example, this line of &lt;code&gt;CONFIG&lt;/code&gt; controls whether the optional RDMA (libibverbs) support is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;CONFIG_RDMA?=n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable RDMA, this line may be added to &lt;code&gt;mk/config.mk&lt;/code&gt; with a &#39;y&#39; instead of &#39;n&#39;. For the majority of options this can be done using the &lt;code&gt;configure&lt;/code&gt; script. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./configure --with-rdma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;CONFIG&lt;/code&gt; options may also be overridden on the &lt;code&gt;make&lt;/code&gt; command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;make CONFIG_RDMA=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users may wish to use a version of DPDK different from the submodule included in the SPDK repository. Note, this includes the ability to build not only from DPDK sources, but also just with the includes and libraries installed via the dpdk and dpdk-devel packages. To specify an alternate DPDK installation, run configure with the --with-dpdk option. For example:&lt;/p&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./configure --with-dpdk=/path/to/dpdk/x86_64-native-linuxapp-gcc&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./configure --with-dpdk=/path/to/dpdk/x86_64-native-bsdapp-clang&#xA;gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options specified on the &lt;code&gt;make&lt;/code&gt; command line take precedence over the values in &lt;code&gt;mk/config.mk&lt;/code&gt;. This can be useful if you, for example, generate a &lt;code&gt;mk/config.mk&lt;/code&gt; using the &lt;code&gt;configure&lt;/code&gt; script and then have one or two options (i.e. debug builds) that you wish to turn on and off frequently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;shared&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shared libraries&lt;/h2&gt; &#xA;&lt;p&gt;By default, the build of the SPDK yields static libraries against which the SPDK applications and examples are linked. Configure option &lt;code&gt;--with-shared&lt;/code&gt; provides the ability to produce SPDK shared libraries, in addition to the default static ones. Use of this flag also results in the SPDK executables linked to the shared versions of libraries. SPDK shared libraries by default, are located in &lt;code&gt;./build/lib&lt;/code&gt;. This includes the single SPDK shared lib encompassing all of the SPDK static libs (&lt;code&gt;libspdk.so&lt;/code&gt;) as well as individual SPDK shared libs corresponding to each of the SPDK static ones.&lt;/p&gt; &#xA;&lt;p&gt;In order to start a SPDK app linked with SPDK shared libraries, make sure to do the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run ldconfig specifying the directory containing SPDK shared libraries&lt;/li&gt; &#xA; &lt;li&gt;provide proper &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If DPDK shared libraries are used, you may also need to add DPDK shared libraries to &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;./configure --with-shared&#xA;make&#xA;ldconfig -v -n ./build/lib&#xA;LD_LIBRARY_PATH=./build/lib/:./dpdk/build/lib/ ./build/bin/spdk_tgt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;huge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hugepages and Device Binding&lt;/h2&gt; &#xA;&lt;p&gt;Before running an SPDK application, some hugepages must be allocated and any NVMe and I/OAT devices must be unbound from the native kernel drivers. SPDK includes a script to automate this process on both Linux and FreeBSD. This script should be run as root.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;sudo scripts/setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users may wish to configure a specific memory size. Below is an example of configuring 8192MB memory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;sudo HUGEMEM=8192 scripts/setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a lot of other environment variables that can be set to configure setup.sh for advanced users. To see the full list, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sh}&#34;&gt;scripts/setup.sh --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example Code&lt;/h2&gt; &#xA;&lt;p&gt;Example code is located in the examples directory. The examples are compiled automatically as part of the build process. Simply call any of the examples with no arguments to see the help output. You&#39;ll likely need to run the examples as a privileged user (root) unless you&#39;ve done additional configuration to grant your user permission to allocate huge pages and map devices through vfio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For additional details on how to get more involved in the community, including &lt;a href=&#34;http://www.spdk.io/development&#34;&gt;contributing code&lt;/a&gt; and participating in discussions and other activities, please refer to &lt;a href=&#34;http://www.spdk.io/community&#34;&gt;spdk.io&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>